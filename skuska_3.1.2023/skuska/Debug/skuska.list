
skuska.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003428  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f8  080034e8  080034e8  000134e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080036e0  080036e0  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080036e0  080036e0  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080036e0  080036e0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080036e0  080036e0  000136e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080036e4  080036e4  000136e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080036e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000bc  20000070  08003758  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000012c  08003758  0002012c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007be2  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000155f  00000000  00000000  00027c7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000680  00000000  00000000  000291e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000005e8  00000000  00000000  00029860  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000104e3  00000000  00000000  00029e48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008ba4  00000000  00000000  0003a32b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005e28d  00000000  00000000  00042ecf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000a115c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002038  00000000  00000000  000a11ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         00000024  00000000  00000000  000a31e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000004e  00000000  00000000  000a3208  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080034d0 	.word	0x080034d0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	080034d0 	.word	0x080034d0

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f8f0 	bl	8000404 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__divsi3>:
 8000230:	4603      	mov	r3, r0
 8000232:	430b      	orrs	r3, r1
 8000234:	d47f      	bmi.n	8000336 <__divsi3+0x106>
 8000236:	2200      	movs	r2, #0
 8000238:	0843      	lsrs	r3, r0, #1
 800023a:	428b      	cmp	r3, r1
 800023c:	d374      	bcc.n	8000328 <__divsi3+0xf8>
 800023e:	0903      	lsrs	r3, r0, #4
 8000240:	428b      	cmp	r3, r1
 8000242:	d35f      	bcc.n	8000304 <__divsi3+0xd4>
 8000244:	0a03      	lsrs	r3, r0, #8
 8000246:	428b      	cmp	r3, r1
 8000248:	d344      	bcc.n	80002d4 <__divsi3+0xa4>
 800024a:	0b03      	lsrs	r3, r0, #12
 800024c:	428b      	cmp	r3, r1
 800024e:	d328      	bcc.n	80002a2 <__divsi3+0x72>
 8000250:	0c03      	lsrs	r3, r0, #16
 8000252:	428b      	cmp	r3, r1
 8000254:	d30d      	bcc.n	8000272 <__divsi3+0x42>
 8000256:	22ff      	movs	r2, #255	; 0xff
 8000258:	0209      	lsls	r1, r1, #8
 800025a:	ba12      	rev	r2, r2
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d302      	bcc.n	8000268 <__divsi3+0x38>
 8000262:	1212      	asrs	r2, r2, #8
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	d065      	beq.n	8000334 <__divsi3+0x104>
 8000268:	0b03      	lsrs	r3, r0, #12
 800026a:	428b      	cmp	r3, r1
 800026c:	d319      	bcc.n	80002a2 <__divsi3+0x72>
 800026e:	e000      	b.n	8000272 <__divsi3+0x42>
 8000270:	0a09      	lsrs	r1, r1, #8
 8000272:	0bc3      	lsrs	r3, r0, #15
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x4c>
 8000278:	03cb      	lsls	r3, r1, #15
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b83      	lsrs	r3, r0, #14
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x58>
 8000284:	038b      	lsls	r3, r1, #14
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b43      	lsrs	r3, r0, #13
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x64>
 8000290:	034b      	lsls	r3, r1, #13
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b03      	lsrs	r3, r0, #12
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x70>
 800029c:	030b      	lsls	r3, r1, #12
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0ac3      	lsrs	r3, r0, #11
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x7c>
 80002a8:	02cb      	lsls	r3, r1, #11
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a83      	lsrs	r3, r0, #10
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x88>
 80002b4:	028b      	lsls	r3, r1, #10
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a43      	lsrs	r3, r0, #9
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x94>
 80002c0:	024b      	lsls	r3, r1, #9
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a03      	lsrs	r3, r0, #8
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0xa0>
 80002cc:	020b      	lsls	r3, r1, #8
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	d2cd      	bcs.n	8000270 <__divsi3+0x40>
 80002d4:	09c3      	lsrs	r3, r0, #7
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xae>
 80002da:	01cb      	lsls	r3, r1, #7
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0983      	lsrs	r3, r0, #6
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xba>
 80002e6:	018b      	lsls	r3, r1, #6
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0943      	lsrs	r3, r0, #5
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xc6>
 80002f2:	014b      	lsls	r3, r1, #5
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0903      	lsrs	r3, r0, #4
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xd2>
 80002fe:	010b      	lsls	r3, r1, #4
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	08c3      	lsrs	r3, r0, #3
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xde>
 800030a:	00cb      	lsls	r3, r1, #3
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0883      	lsrs	r3, r0, #2
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xea>
 8000316:	008b      	lsls	r3, r1, #2
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0843      	lsrs	r3, r0, #1
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xf6>
 8000322:	004b      	lsls	r3, r1, #1
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	1a41      	subs	r1, r0, r1
 800032a:	d200      	bcs.n	800032e <__divsi3+0xfe>
 800032c:	4601      	mov	r1, r0
 800032e:	4152      	adcs	r2, r2
 8000330:	4610      	mov	r0, r2
 8000332:	4770      	bx	lr
 8000334:	e05d      	b.n	80003f2 <__divsi3+0x1c2>
 8000336:	0fca      	lsrs	r2, r1, #31
 8000338:	d000      	beq.n	800033c <__divsi3+0x10c>
 800033a:	4249      	negs	r1, r1
 800033c:	1003      	asrs	r3, r0, #32
 800033e:	d300      	bcc.n	8000342 <__divsi3+0x112>
 8000340:	4240      	negs	r0, r0
 8000342:	4053      	eors	r3, r2
 8000344:	2200      	movs	r2, #0
 8000346:	469c      	mov	ip, r3
 8000348:	0903      	lsrs	r3, r0, #4
 800034a:	428b      	cmp	r3, r1
 800034c:	d32d      	bcc.n	80003aa <__divsi3+0x17a>
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d312      	bcc.n	800037a <__divsi3+0x14a>
 8000354:	22fc      	movs	r2, #252	; 0xfc
 8000356:	0189      	lsls	r1, r1, #6
 8000358:	ba12      	rev	r2, r2
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d30c      	bcc.n	800037a <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d308      	bcc.n	800037a <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	1192      	asrs	r2, r2, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d304      	bcc.n	800037a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	d03a      	beq.n	80003ea <__divsi3+0x1ba>
 8000374:	1192      	asrs	r2, r2, #6
 8000376:	e000      	b.n	800037a <__divsi3+0x14a>
 8000378:	0989      	lsrs	r1, r1, #6
 800037a:	09c3      	lsrs	r3, r0, #7
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x154>
 8000380:	01cb      	lsls	r3, r1, #7
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0983      	lsrs	r3, r0, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x160>
 800038c:	018b      	lsls	r3, r1, #6
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0943      	lsrs	r3, r0, #5
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x16c>
 8000398:	014b      	lsls	r3, r1, #5
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0903      	lsrs	r3, r0, #4
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x178>
 80003a4:	010b      	lsls	r3, r1, #4
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	08c3      	lsrs	r3, r0, #3
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x184>
 80003b0:	00cb      	lsls	r3, r1, #3
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0883      	lsrs	r3, r0, #2
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x190>
 80003bc:	008b      	lsls	r3, r1, #2
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	d2d9      	bcs.n	8000378 <__divsi3+0x148>
 80003c4:	0843      	lsrs	r3, r0, #1
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d301      	bcc.n	80003ce <__divsi3+0x19e>
 80003ca:	004b      	lsls	r3, r1, #1
 80003cc:	1ac0      	subs	r0, r0, r3
 80003ce:	4152      	adcs	r2, r2
 80003d0:	1a41      	subs	r1, r0, r1
 80003d2:	d200      	bcs.n	80003d6 <__divsi3+0x1a6>
 80003d4:	4601      	mov	r1, r0
 80003d6:	4663      	mov	r3, ip
 80003d8:	4152      	adcs	r2, r2
 80003da:	105b      	asrs	r3, r3, #1
 80003dc:	4610      	mov	r0, r2
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x1b4>
 80003e0:	4240      	negs	r0, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d500      	bpl.n	80003e8 <__divsi3+0x1b8>
 80003e6:	4249      	negs	r1, r1
 80003e8:	4770      	bx	lr
 80003ea:	4663      	mov	r3, ip
 80003ec:	105b      	asrs	r3, r3, #1
 80003ee:	d300      	bcc.n	80003f2 <__divsi3+0x1c2>
 80003f0:	4240      	negs	r0, r0
 80003f2:	b501      	push	{r0, lr}
 80003f4:	2000      	movs	r0, #0
 80003f6:	f000 f805 	bl	8000404 <__aeabi_idiv0>
 80003fa:	bd02      	pop	{r1, pc}

080003fc <__aeabi_idivmod>:
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d0f8      	beq.n	80003f2 <__divsi3+0x1c2>
 8000400:	e716      	b.n	8000230 <__divsi3>
 8000402:	4770      	bx	lr

08000404 <__aeabi_idiv0>:
 8000404:	4770      	bx	lr
 8000406:	46c0      	nop			; (mov r8, r8)

08000408 <__aeabi_lmul>:
 8000408:	b5f0      	push	{r4, r5, r6, r7, lr}
 800040a:	46ce      	mov	lr, r9
 800040c:	4647      	mov	r7, r8
 800040e:	b580      	push	{r7, lr}
 8000410:	0007      	movs	r7, r0
 8000412:	4699      	mov	r9, r3
 8000414:	0c3b      	lsrs	r3, r7, #16
 8000416:	469c      	mov	ip, r3
 8000418:	0413      	lsls	r3, r2, #16
 800041a:	0c1b      	lsrs	r3, r3, #16
 800041c:	001d      	movs	r5, r3
 800041e:	000e      	movs	r6, r1
 8000420:	4661      	mov	r1, ip
 8000422:	0400      	lsls	r0, r0, #16
 8000424:	0c14      	lsrs	r4, r2, #16
 8000426:	0c00      	lsrs	r0, r0, #16
 8000428:	4345      	muls	r5, r0
 800042a:	434b      	muls	r3, r1
 800042c:	4360      	muls	r0, r4
 800042e:	4361      	muls	r1, r4
 8000430:	18c0      	adds	r0, r0, r3
 8000432:	0c2c      	lsrs	r4, r5, #16
 8000434:	1820      	adds	r0, r4, r0
 8000436:	468c      	mov	ip, r1
 8000438:	4283      	cmp	r3, r0
 800043a:	d903      	bls.n	8000444 <__aeabi_lmul+0x3c>
 800043c:	2380      	movs	r3, #128	; 0x80
 800043e:	025b      	lsls	r3, r3, #9
 8000440:	4698      	mov	r8, r3
 8000442:	44c4      	add	ip, r8
 8000444:	4649      	mov	r1, r9
 8000446:	4379      	muls	r1, r7
 8000448:	4372      	muls	r2, r6
 800044a:	0c03      	lsrs	r3, r0, #16
 800044c:	4463      	add	r3, ip
 800044e:	042d      	lsls	r5, r5, #16
 8000450:	0c2d      	lsrs	r5, r5, #16
 8000452:	18c9      	adds	r1, r1, r3
 8000454:	0400      	lsls	r0, r0, #16
 8000456:	1940      	adds	r0, r0, r5
 8000458:	1889      	adds	r1, r1, r2
 800045a:	bcc0      	pop	{r6, r7}
 800045c:	46b9      	mov	r9, r7
 800045e:	46b0      	mov	r8, r6
 8000460:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000462:	46c0      	nop			; (mov r8, r8)

08000464 <random_number.0>:
	/* USER CODE BEGIN 2 */
	sct_init();
	srand(time(NULL));

	// function for generation random number
	void random_number() {
 8000464:	b580      	push	{r7, lr}
 8000466:	b084      	sub	sp, #16
 8000468:	af00      	add	r7, sp, #0
 800046a:	4663      	mov	r3, ip
 800046c:	607b      	str	r3, [r7, #4]
		int16_t r = rand() % 100;
 800046e:	f001 ff75 	bl	800235c <rand>
 8000472:	0003      	movs	r3, r0
 8000474:	2164      	movs	r1, #100	; 0x64
 8000476:	0018      	movs	r0, r3
 8000478:	f7ff ffc0 	bl	80003fc <__aeabi_idivmod>
 800047c:	000b      	movs	r3, r1
 800047e:	001a      	movs	r2, r3
 8000480:	210e      	movs	r1, #14
 8000482:	187b      	adds	r3, r7, r1
 8000484:	801a      	strh	r2, [r3, #0]
		if ((r > 10) && (r < 20)) {
 8000486:	000a      	movs	r2, r1
 8000488:	18bb      	adds	r3, r7, r2
 800048a:	2100      	movs	r1, #0
 800048c:	5e5b      	ldrsh	r3, [r3, r1]
 800048e:	2b0a      	cmp	r3, #10
 8000490:	dd09      	ble.n	80004a6 <random_number.0+0x42>
 8000492:	18bb      	adds	r3, r7, r2
 8000494:	2200      	movs	r2, #0
 8000496:	5e9b      	ldrsh	r3, [r3, r2]
 8000498:	2b13      	cmp	r3, #19
 800049a:	dc04      	bgt.n	80004a6 <random_number.0+0x42>
			sct_value(919);
 800049c:	4b2c      	ldr	r3, [pc, #176]	; (8000550 <random_number.0+0xec>)
 800049e:	0018      	movs	r0, r3
 80004a0:	f000 fa92 	bl	80009c8 <sct_value>
 80004a4:	e050      	b.n	8000548 <random_number.0+0xe4>
		}
		else if ((r > 21) && (r < 30)) {
 80004a6:	220e      	movs	r2, #14
 80004a8:	18bb      	adds	r3, r7, r2
 80004aa:	2100      	movs	r1, #0
 80004ac:	5e5b      	ldrsh	r3, [r3, r1]
 80004ae:	2b15      	cmp	r3, #21
 80004b0:	dd08      	ble.n	80004c4 <random_number.0+0x60>
 80004b2:	18bb      	adds	r3, r7, r2
 80004b4:	2200      	movs	r2, #0
 80004b6:	5e9b      	ldrsh	r3, [r3, r2]
 80004b8:	2b1d      	cmp	r3, #29
 80004ba:	dc03      	bgt.n	80004c4 <random_number.0+0x60>
			sct_value(191);
 80004bc:	20bf      	movs	r0, #191	; 0xbf
 80004be:	f000 fa83 	bl	80009c8 <sct_value>
 80004c2:	e041      	b.n	8000548 <random_number.0+0xe4>
		}
		else if ((r > 31) && (r < 40)) {
 80004c4:	220e      	movs	r2, #14
 80004c6:	18bb      	adds	r3, r7, r2
 80004c8:	2100      	movs	r1, #0
 80004ca:	5e5b      	ldrsh	r3, [r3, r1]
 80004cc:	2b1f      	cmp	r3, #31
 80004ce:	dd08      	ble.n	80004e2 <random_number.0+0x7e>
 80004d0:	18bb      	adds	r3, r7, r2
 80004d2:	2200      	movs	r2, #0
 80004d4:	5e9b      	ldrsh	r3, [r3, r2]
 80004d6:	2b27      	cmp	r3, #39	; 0x27
 80004d8:	dc03      	bgt.n	80004e2 <random_number.0+0x7e>
			sct_value(111);
 80004da:	206f      	movs	r0, #111	; 0x6f
 80004dc:	f000 fa74 	bl	80009c8 <sct_value>
 80004e0:	e032      	b.n	8000548 <random_number.0+0xe4>
		}
		else if ((r > 41) && (r < 50)) {
 80004e2:	220e      	movs	r2, #14
 80004e4:	18bb      	adds	r3, r7, r2
 80004e6:	2100      	movs	r1, #0
 80004e8:	5e5b      	ldrsh	r3, [r3, r1]
 80004ea:	2b29      	cmp	r3, #41	; 0x29
 80004ec:	dd0a      	ble.n	8000504 <random_number.0+0xa0>
 80004ee:	18bb      	adds	r3, r7, r2
 80004f0:	2200      	movs	r2, #0
 80004f2:	5e9b      	ldrsh	r3, [r3, r2]
 80004f4:	2b31      	cmp	r3, #49	; 0x31
 80004f6:	dc05      	bgt.n	8000504 <random_number.0+0xa0>
			sct_value(292);
 80004f8:	2392      	movs	r3, #146	; 0x92
 80004fa:	005b      	lsls	r3, r3, #1
 80004fc:	0018      	movs	r0, r3
 80004fe:	f000 fa63 	bl	80009c8 <sct_value>
 8000502:	e021      	b.n	8000548 <random_number.0+0xe4>
		}
		else if ((r > 51) && (r < 60)) {
 8000504:	220e      	movs	r2, #14
 8000506:	18bb      	adds	r3, r7, r2
 8000508:	2100      	movs	r1, #0
 800050a:	5e5b      	ldrsh	r3, [r3, r1]
 800050c:	2b33      	cmp	r3, #51	; 0x33
 800050e:	dd08      	ble.n	8000522 <random_number.0+0xbe>
 8000510:	18bb      	adds	r3, r7, r2
 8000512:	2200      	movs	r2, #0
 8000514:	5e9b      	ldrsh	r3, [r3, r2]
 8000516:	2b3b      	cmp	r3, #59	; 0x3b
 8000518:	dc03      	bgt.n	8000522 <random_number.0+0xbe>
			sct_value(212);
 800051a:	20d4      	movs	r0, #212	; 0xd4
 800051c:	f000 fa54 	bl	80009c8 <sct_value>
 8000520:	e012      	b.n	8000548 <random_number.0+0xe4>
		}
		else if ((r > 61) && (r < 70)) {
 8000522:	220e      	movs	r2, #14
 8000524:	18bb      	adds	r3, r7, r2
 8000526:	2100      	movs	r1, #0
 8000528:	5e5b      	ldrsh	r3, [r3, r1]
 800052a:	2b3d      	cmp	r3, #61	; 0x3d
 800052c:	dd08      	ble.n	8000540 <random_number.0+0xdc>
 800052e:	18bb      	adds	r3, r7, r2
 8000530:	2200      	movs	r2, #0
 8000532:	5e9b      	ldrsh	r3, [r3, r2]
 8000534:	2b45      	cmp	r3, #69	; 0x45
 8000536:	dc03      	bgt.n	8000540 <random_number.0+0xdc>
			sct_value(222);
 8000538:	20de      	movs	r0, #222	; 0xde
 800053a:	f000 fa45 	bl	80009c8 <sct_value>
 800053e:	e003      	b.n	8000548 <random_number.0+0xe4>
		}
		else {
			sct_value(191);
 8000540:	20bf      	movs	r0, #191	; 0xbf
 8000542:	f000 fa41 	bl	80009c8 <sct_value>
		}
	}
 8000546:	46c0      	nop			; (mov r8, r8)
 8000548:	46c0      	nop			; (mov r8, r8)
 800054a:	46bd      	mov	sp, r7
 800054c:	b004      	add	sp, #16
 800054e:	bd80      	pop	{r7, pc}
 8000550:	00000397 	.word	0x00000397

08000554 <main>:
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b082      	sub	sp, #8
 8000558:	af00      	add	r7, sp, #0
int main(void)
 800055a:	2310      	movs	r3, #16
 800055c:	18fb      	adds	r3, r7, r3
 800055e:	603b      	str	r3, [r7, #0]
	HAL_Init();
 8000560:	f000 fbf4 	bl	8000d4c <HAL_Init>
	SystemClock_Config();
 8000564:	f000 f8c6 	bl	80006f4 <SystemClock_Config>
	MX_GPIO_Init();
 8000568:	f000 f93e 	bl	80007e8 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 800056c:	f000 f90c 	bl	8000788 <MX_USART2_UART_Init>
	sct_init();
 8000570:	f000 f9e1 	bl	8000936 <sct_init>
	srand(time(NULL));
 8000574:	2000      	movs	r0, #0
 8000576:	f001 ff2f 	bl	80023d8 <time>
 800057a:	0002      	movs	r2, r0
 800057c:	000b      	movs	r3, r1
 800057e:	0013      	movs	r3, r2
 8000580:	0018      	movs	r0, r3
 8000582:	f001 febb 	bl	80022fc <srand>
	{
		// state automat
		static enum {STATE0, STATE1, STATE2 } state = STATE0;

		// button pressed
		if (HAL_GPIO_ReadPin(S1_GPIO_Port, S1_Pin)==0) {
 8000586:	4b56      	ldr	r3, [pc, #344]	; (80006e0 <main+0x18c>)
 8000588:	2102      	movs	r1, #2
 800058a:	0018      	movs	r0, r3
 800058c:	f000 fe8a 	bl	80012a4 <HAL_GPIO_ReadPin>
 8000590:	1e03      	subs	r3, r0, #0
 8000592:	d105      	bne.n	80005a0 <main+0x4c>
			state = STATE1;
 8000594:	4b53      	ldr	r3, [pc, #332]	; (80006e4 <main+0x190>)
 8000596:	2201      	movs	r2, #1
 8000598:	701a      	strb	r2, [r3, #0]
			HAL_Delay(50);
 800059a:	2032      	movs	r0, #50	; 0x32
 800059c:	f000 fc3a 	bl	8000e14 <HAL_Delay>
		}
		if (HAL_GPIO_ReadPin(S2_GPIO_Port, S2_Pin)==0) {
 80005a0:	4b4f      	ldr	r3, [pc, #316]	; (80006e0 <main+0x18c>)
 80005a2:	2101      	movs	r1, #1
 80005a4:	0018      	movs	r0, r3
 80005a6:	f000 fe7d 	bl	80012a4 <HAL_GPIO_ReadPin>
 80005aa:	1e03      	subs	r3, r0, #0
 80005ac:	d105      	bne.n	80005ba <main+0x66>
			state = STATE2;
 80005ae:	4b4d      	ldr	r3, [pc, #308]	; (80006e4 <main+0x190>)
 80005b0:	2202      	movs	r2, #2
 80005b2:	701a      	strb	r2, [r3, #0]
			HAL_Delay(50);
 80005b4:	2032      	movs	r0, #50	; 0x32
 80005b6:	f000 fc2d 	bl	8000e14 <HAL_Delay>
		}

		switch (state) {
 80005ba:	4b4a      	ldr	r3, [pc, #296]	; (80006e4 <main+0x190>)
 80005bc:	781b      	ldrb	r3, [r3, #0]
 80005be:	2b02      	cmp	r3, #2
 80005c0:	d075      	beq.n	80006ae <main+0x15a>
 80005c2:	dd00      	ble.n	80005c6 <main+0x72>
 80005c4:	e084      	b.n	80006d0 <main+0x17c>
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d100      	bne.n	80005cc <main+0x78>
 80005ca:	e07c      	b.n	80006c6 <main+0x172>
 80005cc:	2b01      	cmp	r3, #1
 80005ce:	d000      	beq.n	80005d2 <main+0x7e>
 80005d0:	e07e      	b.n	80006d0 <main+0x17c>
		case STATE1: {
			for (int16_t i = 0; i<20; i++) {
 80005d2:	1dbb      	adds	r3, r7, #6
 80005d4:	2200      	movs	r2, #0
 80005d6:	801a      	strh	r2, [r3, #0]
 80005d8:	e058      	b.n	800068c <main+0x138>
				sct_value(999);
 80005da:	4b43      	ldr	r3, [pc, #268]	; (80006e8 <main+0x194>)
 80005dc:	0018      	movs	r0, r3
 80005de:	f000 f9f3 	bl	80009c8 <sct_value>
				HAL_Delay(20 + (i*2) );
 80005e2:	1dbb      	adds	r3, r7, #6
 80005e4:	2200      	movs	r2, #0
 80005e6:	5e9b      	ldrsh	r3, [r3, r2]
 80005e8:	330a      	adds	r3, #10
 80005ea:	005b      	lsls	r3, r3, #1
 80005ec:	0018      	movs	r0, r3
 80005ee:	f000 fc11 	bl	8000e14 <HAL_Delay>

				sct_value(919);
 80005f2:	4b3e      	ldr	r3, [pc, #248]	; (80006ec <main+0x198>)
 80005f4:	0018      	movs	r0, r3
 80005f6:	f000 f9e7 	bl	80009c8 <sct_value>
				HAL_Delay(25 + (i*2));
 80005fa:	1dbb      	adds	r3, r7, #6
 80005fc:	2200      	movs	r2, #0
 80005fe:	5e9b      	ldrsh	r3, [r3, r2]
 8000600:	005b      	lsls	r3, r3, #1
 8000602:	3319      	adds	r3, #25
 8000604:	0018      	movs	r0, r3
 8000606:	f000 fc05 	bl	8000e14 <HAL_Delay>

				sct_value(191);
 800060a:	20bf      	movs	r0, #191	; 0xbf
 800060c:	f000 f9dc 	bl	80009c8 <sct_value>
				HAL_Delay(30 + (i*2));
 8000610:	1dbb      	adds	r3, r7, #6
 8000612:	2200      	movs	r2, #0
 8000614:	5e9b      	ldrsh	r3, [r3, r2]
 8000616:	330f      	adds	r3, #15
 8000618:	005b      	lsls	r3, r3, #1
 800061a:	0018      	movs	r0, r3
 800061c:	f000 fbfa 	bl	8000e14 <HAL_Delay>

				sct_value(111);
 8000620:	206f      	movs	r0, #111	; 0x6f
 8000622:	f000 f9d1 	bl	80009c8 <sct_value>
				HAL_Delay(35 + (i*2));
 8000626:	1dbb      	adds	r3, r7, #6
 8000628:	2200      	movs	r2, #0
 800062a:	5e9b      	ldrsh	r3, [r3, r2]
 800062c:	005b      	lsls	r3, r3, #1
 800062e:	3323      	adds	r3, #35	; 0x23
 8000630:	0018      	movs	r0, r3
 8000632:	f000 fbef 	bl	8000e14 <HAL_Delay>

				sct_value(292);
 8000636:	2392      	movs	r3, #146	; 0x92
 8000638:	005b      	lsls	r3, r3, #1
 800063a:	0018      	movs	r0, r3
 800063c:	f000 f9c4 	bl	80009c8 <sct_value>
				HAL_Delay(40 + (i*2));
 8000640:	1dbb      	adds	r3, r7, #6
 8000642:	2200      	movs	r2, #0
 8000644:	5e9b      	ldrsh	r3, [r3, r2]
 8000646:	3314      	adds	r3, #20
 8000648:	005b      	lsls	r3, r3, #1
 800064a:	0018      	movs	r0, r3
 800064c:	f000 fbe2 	bl	8000e14 <HAL_Delay>

				sct_value(212);
 8000650:	20d4      	movs	r0, #212	; 0xd4
 8000652:	f000 f9b9 	bl	80009c8 <sct_value>
				HAL_Delay(45 + (i*2));
 8000656:	1dbb      	adds	r3, r7, #6
 8000658:	2200      	movs	r2, #0
 800065a:	5e9b      	ldrsh	r3, [r3, r2]
 800065c:	005b      	lsls	r3, r3, #1
 800065e:	332d      	adds	r3, #45	; 0x2d
 8000660:	0018      	movs	r0, r3
 8000662:	f000 fbd7 	bl	8000e14 <HAL_Delay>

				sct_value(222);
 8000666:	20de      	movs	r0, #222	; 0xde
 8000668:	f000 f9ae 	bl	80009c8 <sct_value>
				HAL_Delay(50 + (i*2));
 800066c:	1dbb      	adds	r3, r7, #6
 800066e:	2200      	movs	r2, #0
 8000670:	5e9b      	ldrsh	r3, [r3, r2]
 8000672:	3319      	adds	r3, #25
 8000674:	005b      	lsls	r3, r3, #1
 8000676:	0018      	movs	r0, r3
 8000678:	f000 fbcc 	bl	8000e14 <HAL_Delay>
			for (int16_t i = 0; i<20; i++) {
 800067c:	1dbb      	adds	r3, r7, #6
 800067e:	2200      	movs	r2, #0
 8000680:	5e9b      	ldrsh	r3, [r3, r2]
 8000682:	b29b      	uxth	r3, r3
 8000684:	3301      	adds	r3, #1
 8000686:	b29a      	uxth	r2, r3
 8000688:	1dbb      	adds	r3, r7, #6
 800068a:	801a      	strh	r2, [r3, #0]
 800068c:	1dbb      	adds	r3, r7, #6
 800068e:	2200      	movs	r2, #0
 8000690:	5e9b      	ldrsh	r3, [r3, r2]
 8000692:	2b13      	cmp	r3, #19
 8000694:	dda1      	ble.n	80005da <main+0x86>
			}

			random_number();
 8000696:	003b      	movs	r3, r7
 8000698:	469c      	mov	ip, r3
 800069a:	f7ff fee3 	bl	8000464 <random_number.0>
			HAL_Delay(3000);
 800069e:	4b14      	ldr	r3, [pc, #80]	; (80006f0 <main+0x19c>)
 80006a0:	0018      	movs	r0, r3
 80006a2:	f000 fbb7 	bl	8000e14 <HAL_Delay>
			// return tu default state
			state = STATE0;
 80006a6:	4b0f      	ldr	r3, [pc, #60]	; (80006e4 <main+0x190>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	701a      	strb	r2, [r3, #0]
			break;
 80006ac:	e013      	b.n	80006d6 <main+0x182>
		}
		case STATE2: {
			random_number();
 80006ae:	003b      	movs	r3, r7
 80006b0:	469c      	mov	ip, r3
 80006b2:	f7ff fed7 	bl	8000464 <random_number.0>
			HAL_Delay(3000);
 80006b6:	4b0e      	ldr	r3, [pc, #56]	; (80006f0 <main+0x19c>)
 80006b8:	0018      	movs	r0, r3
 80006ba:	f000 fbab 	bl	8000e14 <HAL_Delay>
			// return tu default state
			state = STATE0;
 80006be:	4b09      	ldr	r3, [pc, #36]	; (80006e4 <main+0x190>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	701a      	strb	r2, [r3, #0]
			break;
 80006c4:	e007      	b.n	80006d6 <main+0x182>
		}
		case STATE0: {
			sct_value(999);
 80006c6:	4b08      	ldr	r3, [pc, #32]	; (80006e8 <main+0x194>)
 80006c8:	0018      	movs	r0, r3
 80006ca:	f000 f97d 	bl	80009c8 <sct_value>
			break;
 80006ce:	e002      	b.n	80006d6 <main+0x182>
		}
		default: state = STATE0;
 80006d0:	4b04      	ldr	r3, [pc, #16]	; (80006e4 <main+0x190>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	701a      	strb	r2, [r3, #0]
		}

		HAL_Delay(50);
 80006d6:	2032      	movs	r0, #50	; 0x32
 80006d8:	f000 fb9c 	bl	8000e14 <HAL_Delay>
	{
 80006dc:	e753      	b.n	8000586 <main+0x32>
 80006de:	46c0      	nop			; (mov r8, r8)
 80006e0:	48000800 	.word	0x48000800
 80006e4:	20000110 	.word	0x20000110
 80006e8:	000003e7 	.word	0x000003e7
 80006ec:	00000397 	.word	0x00000397
 80006f0:	00000bb8 	.word	0x00000bb8

080006f4 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80006f4:	b590      	push	{r4, r7, lr}
 80006f6:	b091      	sub	sp, #68	; 0x44
 80006f8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006fa:	2410      	movs	r4, #16
 80006fc:	193b      	adds	r3, r7, r4
 80006fe:	0018      	movs	r0, r3
 8000700:	2330      	movs	r3, #48	; 0x30
 8000702:	001a      	movs	r2, r3
 8000704:	2100      	movs	r1, #0
 8000706:	f001 fdf1 	bl	80022ec <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800070a:	003b      	movs	r3, r7
 800070c:	0018      	movs	r0, r3
 800070e:	2310      	movs	r3, #16
 8000710:	001a      	movs	r2, r3
 8000712:	2100      	movs	r1, #0
 8000714:	f001 fdea 	bl	80022ec <memset>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000718:	0021      	movs	r1, r4
 800071a:	187b      	adds	r3, r7, r1
 800071c:	2202      	movs	r2, #2
 800071e:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000720:	187b      	adds	r3, r7, r1
 8000722:	2201      	movs	r2, #1
 8000724:	60da      	str	r2, [r3, #12]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000726:	187b      	adds	r3, r7, r1
 8000728:	2210      	movs	r2, #16
 800072a:	611a      	str	r2, [r3, #16]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800072c:	187b      	adds	r3, r7, r1
 800072e:	2202      	movs	r2, #2
 8000730:	621a      	str	r2, [r3, #32]
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000732:	187b      	adds	r3, r7, r1
 8000734:	2200      	movs	r2, #0
 8000736:	625a      	str	r2, [r3, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000738:	187b      	adds	r3, r7, r1
 800073a:	22a0      	movs	r2, #160	; 0xa0
 800073c:	0392      	lsls	r2, r2, #14
 800073e:	629a      	str	r2, [r3, #40]	; 0x28
	RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000740:	187b      	adds	r3, r7, r1
 8000742:	2200      	movs	r2, #0
 8000744:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000746:	187b      	adds	r3, r7, r1
 8000748:	0018      	movs	r0, r3
 800074a:	f000 fde5 	bl	8001318 <HAL_RCC_OscConfig>
 800074e:	1e03      	subs	r3, r0, #0
 8000750:	d001      	beq.n	8000756 <SystemClock_Config+0x62>
	{
		Error_Handler();
 8000752:	f000 f8eb 	bl	800092c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000756:	003b      	movs	r3, r7
 8000758:	2207      	movs	r2, #7
 800075a:	601a      	str	r2, [r3, #0]
			|RCC_CLOCKTYPE_PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800075c:	003b      	movs	r3, r7
 800075e:	2202      	movs	r2, #2
 8000760:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000762:	003b      	movs	r3, r7
 8000764:	2200      	movs	r2, #0
 8000766:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000768:	003b      	movs	r3, r7
 800076a:	2200      	movs	r2, #0
 800076c:	60da      	str	r2, [r3, #12]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800076e:	003b      	movs	r3, r7
 8000770:	2101      	movs	r1, #1
 8000772:	0018      	movs	r0, r3
 8000774:	f001 f8ea 	bl	800194c <HAL_RCC_ClockConfig>
 8000778:	1e03      	subs	r3, r0, #0
 800077a:	d001      	beq.n	8000780 <SystemClock_Config+0x8c>
	{
		Error_Handler();
 800077c:	f000 f8d6 	bl	800092c <Error_Handler>
	}
}
 8000780:	46c0      	nop			; (mov r8, r8)
 8000782:	46bd      	mov	sp, r7
 8000784:	b011      	add	sp, #68	; 0x44
 8000786:	bd90      	pop	{r4, r7, pc}

08000788 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 800078c:	4b14      	ldr	r3, [pc, #80]	; (80007e0 <MX_USART2_UART_Init+0x58>)
 800078e:	4a15      	ldr	r2, [pc, #84]	; (80007e4 <MX_USART2_UART_Init+0x5c>)
 8000790:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 38400;
 8000792:	4b13      	ldr	r3, [pc, #76]	; (80007e0 <MX_USART2_UART_Init+0x58>)
 8000794:	2296      	movs	r2, #150	; 0x96
 8000796:	0212      	lsls	r2, r2, #8
 8000798:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800079a:	4b11      	ldr	r3, [pc, #68]	; (80007e0 <MX_USART2_UART_Init+0x58>)
 800079c:	2200      	movs	r2, #0
 800079e:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80007a0:	4b0f      	ldr	r3, [pc, #60]	; (80007e0 <MX_USART2_UART_Init+0x58>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80007a6:	4b0e      	ldr	r3, [pc, #56]	; (80007e0 <MX_USART2_UART_Init+0x58>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80007ac:	4b0c      	ldr	r3, [pc, #48]	; (80007e0 <MX_USART2_UART_Init+0x58>)
 80007ae:	220c      	movs	r2, #12
 80007b0:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007b2:	4b0b      	ldr	r3, [pc, #44]	; (80007e0 <MX_USART2_UART_Init+0x58>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007b8:	4b09      	ldr	r3, [pc, #36]	; (80007e0 <MX_USART2_UART_Init+0x58>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007be:	4b08      	ldr	r3, [pc, #32]	; (80007e0 <MX_USART2_UART_Init+0x58>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007c4:	4b06      	ldr	r3, [pc, #24]	; (80007e0 <MX_USART2_UART_Init+0x58>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK)
 80007ca:	4b05      	ldr	r3, [pc, #20]	; (80007e0 <MX_USART2_UART_Init+0x58>)
 80007cc:	0018      	movs	r0, r3
 80007ce:	f001 fa0f 	bl	8001bf0 <HAL_UART_Init>
 80007d2:	1e03      	subs	r3, r0, #0
 80007d4:	d001      	beq.n	80007da <MX_USART2_UART_Init+0x52>
	{
		Error_Handler();
 80007d6:	f000 f8a9 	bl	800092c <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 80007da:	46c0      	nop			; (mov r8, r8)
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	2000008c 	.word	0x2000008c
 80007e4:	40004400 	.word	0x40004400

080007e8 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80007e8:	b590      	push	{r4, r7, lr}
 80007ea:	b08b      	sub	sp, #44	; 0x2c
 80007ec:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ee:	2414      	movs	r4, #20
 80007f0:	193b      	adds	r3, r7, r4
 80007f2:	0018      	movs	r0, r3
 80007f4:	2314      	movs	r3, #20
 80007f6:	001a      	movs	r2, r3
 80007f8:	2100      	movs	r1, #0
 80007fa:	f001 fd77 	bl	80022ec <memset>

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80007fe:	4b48      	ldr	r3, [pc, #288]	; (8000920 <MX_GPIO_Init+0x138>)
 8000800:	695a      	ldr	r2, [r3, #20]
 8000802:	4b47      	ldr	r3, [pc, #284]	; (8000920 <MX_GPIO_Init+0x138>)
 8000804:	2180      	movs	r1, #128	; 0x80
 8000806:	0309      	lsls	r1, r1, #12
 8000808:	430a      	orrs	r2, r1
 800080a:	615a      	str	r2, [r3, #20]
 800080c:	4b44      	ldr	r3, [pc, #272]	; (8000920 <MX_GPIO_Init+0x138>)
 800080e:	695a      	ldr	r2, [r3, #20]
 8000810:	2380      	movs	r3, #128	; 0x80
 8000812:	031b      	lsls	r3, r3, #12
 8000814:	4013      	ands	r3, r2
 8000816:	613b      	str	r3, [r7, #16]
 8000818:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 800081a:	4b41      	ldr	r3, [pc, #260]	; (8000920 <MX_GPIO_Init+0x138>)
 800081c:	695a      	ldr	r2, [r3, #20]
 800081e:	4b40      	ldr	r3, [pc, #256]	; (8000920 <MX_GPIO_Init+0x138>)
 8000820:	2180      	movs	r1, #128	; 0x80
 8000822:	03c9      	lsls	r1, r1, #15
 8000824:	430a      	orrs	r2, r1
 8000826:	615a      	str	r2, [r3, #20]
 8000828:	4b3d      	ldr	r3, [pc, #244]	; (8000920 <MX_GPIO_Init+0x138>)
 800082a:	695a      	ldr	r2, [r3, #20]
 800082c:	2380      	movs	r3, #128	; 0x80
 800082e:	03db      	lsls	r3, r3, #15
 8000830:	4013      	ands	r3, r2
 8000832:	60fb      	str	r3, [r7, #12]
 8000834:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000836:	4b3a      	ldr	r3, [pc, #232]	; (8000920 <MX_GPIO_Init+0x138>)
 8000838:	695a      	ldr	r2, [r3, #20]
 800083a:	4b39      	ldr	r3, [pc, #228]	; (8000920 <MX_GPIO_Init+0x138>)
 800083c:	2180      	movs	r1, #128	; 0x80
 800083e:	0289      	lsls	r1, r1, #10
 8000840:	430a      	orrs	r2, r1
 8000842:	615a      	str	r2, [r3, #20]
 8000844:	4b36      	ldr	r3, [pc, #216]	; (8000920 <MX_GPIO_Init+0x138>)
 8000846:	695a      	ldr	r2, [r3, #20]
 8000848:	2380      	movs	r3, #128	; 0x80
 800084a:	029b      	lsls	r3, r3, #10
 800084c:	4013      	ands	r3, r2
 800084e:	60bb      	str	r3, [r7, #8]
 8000850:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000852:	4b33      	ldr	r3, [pc, #204]	; (8000920 <MX_GPIO_Init+0x138>)
 8000854:	695a      	ldr	r2, [r3, #20]
 8000856:	4b32      	ldr	r3, [pc, #200]	; (8000920 <MX_GPIO_Init+0x138>)
 8000858:	2180      	movs	r1, #128	; 0x80
 800085a:	02c9      	lsls	r1, r1, #11
 800085c:	430a      	orrs	r2, r1
 800085e:	615a      	str	r2, [r3, #20]
 8000860:	4b2f      	ldr	r3, [pc, #188]	; (8000920 <MX_GPIO_Init+0x138>)
 8000862:	695a      	ldr	r2, [r3, #20]
 8000864:	2380      	movs	r3, #128	; 0x80
 8000866:	02db      	lsls	r3, r3, #11
 8000868:	4013      	ands	r3, r2
 800086a:	607b      	str	r3, [r7, #4]
 800086c:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800086e:	2390      	movs	r3, #144	; 0x90
 8000870:	05db      	lsls	r3, r3, #23
 8000872:	2200      	movs	r2, #0
 8000874:	2120      	movs	r1, #32
 8000876:	0018      	movs	r0, r3
 8000878:	f000 fd31 	bl	80012de <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 800087c:	2387      	movs	r3, #135	; 0x87
 800087e:	00db      	lsls	r3, r3, #3
 8000880:	4828      	ldr	r0, [pc, #160]	; (8000924 <MX_GPIO_Init+0x13c>)
 8000882:	2200      	movs	r2, #0
 8000884:	0019      	movs	r1, r3
 8000886:	f000 fd2a 	bl	80012de <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PC13 */
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 800088a:	193b      	adds	r3, r7, r4
 800088c:	2280      	movs	r2, #128	; 0x80
 800088e:	0192      	lsls	r2, r2, #6
 8000890:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000892:	193b      	adds	r3, r7, r4
 8000894:	2284      	movs	r2, #132	; 0x84
 8000896:	0392      	lsls	r2, r2, #14
 8000898:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089a:	193b      	adds	r3, r7, r4
 800089c:	2200      	movs	r2, #0
 800089e:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008a0:	193b      	adds	r3, r7, r4
 80008a2:	4a21      	ldr	r2, [pc, #132]	; (8000928 <MX_GPIO_Init+0x140>)
 80008a4:	0019      	movs	r1, r3
 80008a6:	0010      	movs	r0, r2
 80008a8:	f000 fb8c 	bl	8000fc4 <HAL_GPIO_Init>

	/*Configure GPIO pins : PC0 PC1 */
	GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80008ac:	193b      	adds	r3, r7, r4
 80008ae:	2203      	movs	r2, #3
 80008b0:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008b2:	193b      	adds	r3, r7, r4
 80008b4:	2200      	movs	r2, #0
 80008b6:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008b8:	193b      	adds	r3, r7, r4
 80008ba:	2201      	movs	r2, #1
 80008bc:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008be:	193b      	adds	r3, r7, r4
 80008c0:	4a19      	ldr	r2, [pc, #100]	; (8000928 <MX_GPIO_Init+0x140>)
 80008c2:	0019      	movs	r1, r3
 80008c4:	0010      	movs	r0, r2
 80008c6:	f000 fb7d 	bl	8000fc4 <HAL_GPIO_Init>

	/*Configure GPIO pin : PA5 */
	GPIO_InitStruct.Pin = GPIO_PIN_5;
 80008ca:	193b      	adds	r3, r7, r4
 80008cc:	2220      	movs	r2, #32
 80008ce:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008d0:	193b      	adds	r3, r7, r4
 80008d2:	2201      	movs	r2, #1
 80008d4:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d6:	193b      	adds	r3, r7, r4
 80008d8:	2200      	movs	r2, #0
 80008da:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008dc:	193b      	adds	r3, r7, r4
 80008de:	2200      	movs	r2, #0
 80008e0:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008e2:	193a      	adds	r2, r7, r4
 80008e4:	2390      	movs	r3, #144	; 0x90
 80008e6:	05db      	lsls	r3, r3, #23
 80008e8:	0011      	movs	r1, r2
 80008ea:	0018      	movs	r0, r3
 80008ec:	f000 fb6a 	bl	8000fc4 <HAL_GPIO_Init>

	/*Configure GPIO pins : PB10 PB3 PB4 PB5 */
	GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80008f0:	0021      	movs	r1, r4
 80008f2:	187b      	adds	r3, r7, r1
 80008f4:	2287      	movs	r2, #135	; 0x87
 80008f6:	00d2      	lsls	r2, r2, #3
 80008f8:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008fa:	187b      	adds	r3, r7, r1
 80008fc:	2201      	movs	r2, #1
 80008fe:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000900:	187b      	adds	r3, r7, r1
 8000902:	2200      	movs	r2, #0
 8000904:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000906:	187b      	adds	r3, r7, r1
 8000908:	2200      	movs	r2, #0
 800090a:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800090c:	187b      	adds	r3, r7, r1
 800090e:	4a05      	ldr	r2, [pc, #20]	; (8000924 <MX_GPIO_Init+0x13c>)
 8000910:	0019      	movs	r1, r3
 8000912:	0010      	movs	r0, r2
 8000914:	f000 fb56 	bl	8000fc4 <HAL_GPIO_Init>

}
 8000918:	46c0      	nop			; (mov r8, r8)
 800091a:	46bd      	mov	sp, r7
 800091c:	b00b      	add	sp, #44	; 0x2c
 800091e:	bd90      	pop	{r4, r7, pc}
 8000920:	40021000 	.word	0x40021000
 8000924:	48000400 	.word	0x48000400
 8000928:	48000800 	.word	0x48000800

0800092c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000930:	b672      	cpsid	i
}
 8000932:	46c0      	nop			; (mov r8, r8)
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000934:	e7fe      	b.n	8000934 <Error_Handler+0x8>

08000936 <sct_init>:
#include "stm32f0xx.h"
#include "sct.h"
#include "main.h"


void sct_init(void){
 8000936:	b580      	push	{r7, lr}
 8000938:	af00      	add	r7, sp, #0
	GPIOB->MODER |= GPIO_MODER_MODER5_0;
	GPIOB->MODER |= GPIO_MODER_MODER4_0;
	GPIOB->MODER |= GPIO_MODER_MODER3_0;
	GPIOB->MODER |= GPIO_MODER_MODER10_0;
	 */
	sct_led(0);
 800093a:	2000      	movs	r0, #0
 800093c:	f000 f804 	bl	8000948 <sct_led>

}
 8000940:	46c0      	nop			; (mov r8, r8)
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}
	...

08000948 <sct_led>:

void sct_led(uint32_t value){
 8000948:	b580      	push	{r7, lr}
 800094a:	b084      	sub	sp, #16
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
	for (uint8_t i = 0; i < 32; i++){
 8000950:	230f      	movs	r3, #15
 8000952:	18fb      	adds	r3, r7, r3
 8000954:	2200      	movs	r2, #0
 8000956:	701a      	strb	r2, [r3, #0]
 8000958:	e01e      	b.n	8000998 <sct_led+0x50>
		HAL_GPIO_WritePin(SCT_SDI_GPIO_Port, SCT_SDI_Pin, value & 1);
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	b2db      	uxtb	r3, r3
 800095e:	2201      	movs	r2, #1
 8000960:	4013      	ands	r3, r2
 8000962:	b2db      	uxtb	r3, r3
 8000964:	4817      	ldr	r0, [pc, #92]	; (80009c4 <sct_led+0x7c>)
 8000966:	001a      	movs	r2, r3
 8000968:	2110      	movs	r1, #16
 800096a:	f000 fcb8 	bl	80012de <HAL_GPIO_WritePin>
		value >>= 1;
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	607b      	str	r3, [r7, #4]
		HAL_GPIO_WritePin(SCT_CLK_GPIO_Port, SCT_CLK_Pin, 1);
 8000974:	4b13      	ldr	r3, [pc, #76]	; (80009c4 <sct_led+0x7c>)
 8000976:	2201      	movs	r2, #1
 8000978:	2108      	movs	r1, #8
 800097a:	0018      	movs	r0, r3
 800097c:	f000 fcaf 	bl	80012de <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SCT_CLK_GPIO_Port, SCT_CLK_Pin, 0);
 8000980:	4b10      	ldr	r3, [pc, #64]	; (80009c4 <sct_led+0x7c>)
 8000982:	2200      	movs	r2, #0
 8000984:	2108      	movs	r1, #8
 8000986:	0018      	movs	r0, r3
 8000988:	f000 fca9 	bl	80012de <HAL_GPIO_WritePin>
	for (uint8_t i = 0; i < 32; i++){
 800098c:	210f      	movs	r1, #15
 800098e:	187b      	adds	r3, r7, r1
 8000990:	781a      	ldrb	r2, [r3, #0]
 8000992:	187b      	adds	r3, r7, r1
 8000994:	3201      	adds	r2, #1
 8000996:	701a      	strb	r2, [r3, #0]
 8000998:	230f      	movs	r3, #15
 800099a:	18fb      	adds	r3, r7, r3
 800099c:	781b      	ldrb	r3, [r3, #0]
 800099e:	2b1f      	cmp	r3, #31
 80009a0:	d9db      	bls.n	800095a <sct_led+0x12>
	}
	HAL_GPIO_WritePin(SCT_NLA_GPIO_Port, SCT_NLA_Pin, 1);
 80009a2:	4b08      	ldr	r3, [pc, #32]	; (80009c4 <sct_led+0x7c>)
 80009a4:	2201      	movs	r2, #1
 80009a6:	2120      	movs	r1, #32
 80009a8:	0018      	movs	r0, r3
 80009aa:	f000 fc98 	bl	80012de <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SCT_NLA_GPIO_Port, SCT_NLA_Pin, 0);
 80009ae:	4b05      	ldr	r3, [pc, #20]	; (80009c4 <sct_led+0x7c>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	2120      	movs	r1, #32
 80009b4:	0018      	movs	r0, r3
 80009b6:	f000 fc92 	bl	80012de <HAL_GPIO_WritePin>
}
 80009ba:	46c0      	nop			; (mov r8, r8)
 80009bc:	46bd      	mov	sp, r7
 80009be:	b004      	add	sp, #16
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	46c0      	nop			; (mov r8, r8)
 80009c4:	48000400 	.word	0x48000400

080009c8 <sct_value>:
		},
};



void sct_value(uint16_t value){
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b084      	sub	sp, #16
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	0002      	movs	r2, r0
 80009d0:	1dbb      	adds	r3, r7, #6
 80009d2:	801a      	strh	r2, [r3, #0]
	uint32_t reg = 0;
 80009d4:	2300      	movs	r3, #0
 80009d6:	60fb      	str	r3, [r7, #12]
	reg |= reg_values[0][value / 100 % 10]; 	//100
 80009d8:	1dbb      	adds	r3, r7, #6
 80009da:	881b      	ldrh	r3, [r3, #0]
 80009dc:	2164      	movs	r1, #100	; 0x64
 80009de:	0018      	movs	r0, r3
 80009e0:	f7ff fb9c 	bl	800011c <__udivsi3>
 80009e4:	0003      	movs	r3, r0
 80009e6:	b29b      	uxth	r3, r3
 80009e8:	210a      	movs	r1, #10
 80009ea:	0018      	movs	r0, r3
 80009ec:	f7ff fc1c 	bl	8000228 <__aeabi_uidivmod>
 80009f0:	000b      	movs	r3, r1
 80009f2:	b29b      	uxth	r3, r3
 80009f4:	001a      	movs	r2, r3
 80009f6:	4b1a      	ldr	r3, [pc, #104]	; (8000a60 <sct_value+0x98>)
 80009f8:	0092      	lsls	r2, r2, #2
 80009fa:	58d3      	ldr	r3, [r2, r3]
 80009fc:	68fa      	ldr	r2, [r7, #12]
 80009fe:	4313      	orrs	r3, r2
 8000a00:	60fb      	str	r3, [r7, #12]
	reg |= reg_values[1][value / 10 % 10]; 		//10
 8000a02:	1dbb      	adds	r3, r7, #6
 8000a04:	881b      	ldrh	r3, [r3, #0]
 8000a06:	210a      	movs	r1, #10
 8000a08:	0018      	movs	r0, r3
 8000a0a:	f7ff fb87 	bl	800011c <__udivsi3>
 8000a0e:	0003      	movs	r3, r0
 8000a10:	b29b      	uxth	r3, r3
 8000a12:	210a      	movs	r1, #10
 8000a14:	0018      	movs	r0, r3
 8000a16:	f7ff fc07 	bl	8000228 <__aeabi_uidivmod>
 8000a1a:	000b      	movs	r3, r1
 8000a1c:	b29b      	uxth	r3, r3
 8000a1e:	001a      	movs	r2, r3
 8000a20:	4b0f      	ldr	r3, [pc, #60]	; (8000a60 <sct_value+0x98>)
 8000a22:	320a      	adds	r2, #10
 8000a24:	0092      	lsls	r2, r2, #2
 8000a26:	58d3      	ldr	r3, [r2, r3]
 8000a28:	68fa      	ldr	r2, [r7, #12]
 8000a2a:	4313      	orrs	r3, r2
 8000a2c:	60fb      	str	r3, [r7, #12]
	reg |= reg_values[2][value % 10]; 			//1
 8000a2e:	1dbb      	adds	r3, r7, #6
 8000a30:	881b      	ldrh	r3, [r3, #0]
 8000a32:	210a      	movs	r1, #10
 8000a34:	0018      	movs	r0, r3
 8000a36:	f7ff fbf7 	bl	8000228 <__aeabi_uidivmod>
 8000a3a:	000b      	movs	r3, r1
 8000a3c:	b29b      	uxth	r3, r3
 8000a3e:	001a      	movs	r2, r3
 8000a40:	4b07      	ldr	r3, [pc, #28]	; (8000a60 <sct_value+0x98>)
 8000a42:	3214      	adds	r2, #20
 8000a44:	0092      	lsls	r2, r2, #2
 8000a46:	58d3      	ldr	r3, [r2, r3]
 8000a48:	68fa      	ldr	r2, [r7, #12]
 8000a4a:	4313      	orrs	r3, r2
 8000a4c:	60fb      	str	r3, [r7, #12]
	sct_led(reg);
 8000a4e:	68fb      	ldr	r3, [r7, #12]
 8000a50:	0018      	movs	r0, r3
 8000a52:	f7ff ff79 	bl	8000948 <sct_led>

}
 8000a56:	46c0      	nop			; (mov r8, r8)
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	b004      	add	sp, #16
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	46c0      	nop			; (mov r8, r8)
 8000a60:	08003508 	.word	0x08003508

08000a64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b082      	sub	sp, #8
 8000a68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a6a:	4b0f      	ldr	r3, [pc, #60]	; (8000aa8 <HAL_MspInit+0x44>)
 8000a6c:	699a      	ldr	r2, [r3, #24]
 8000a6e:	4b0e      	ldr	r3, [pc, #56]	; (8000aa8 <HAL_MspInit+0x44>)
 8000a70:	2101      	movs	r1, #1
 8000a72:	430a      	orrs	r2, r1
 8000a74:	619a      	str	r2, [r3, #24]
 8000a76:	4b0c      	ldr	r3, [pc, #48]	; (8000aa8 <HAL_MspInit+0x44>)
 8000a78:	699b      	ldr	r3, [r3, #24]
 8000a7a:	2201      	movs	r2, #1
 8000a7c:	4013      	ands	r3, r2
 8000a7e:	607b      	str	r3, [r7, #4]
 8000a80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a82:	4b09      	ldr	r3, [pc, #36]	; (8000aa8 <HAL_MspInit+0x44>)
 8000a84:	69da      	ldr	r2, [r3, #28]
 8000a86:	4b08      	ldr	r3, [pc, #32]	; (8000aa8 <HAL_MspInit+0x44>)
 8000a88:	2180      	movs	r1, #128	; 0x80
 8000a8a:	0549      	lsls	r1, r1, #21
 8000a8c:	430a      	orrs	r2, r1
 8000a8e:	61da      	str	r2, [r3, #28]
 8000a90:	4b05      	ldr	r3, [pc, #20]	; (8000aa8 <HAL_MspInit+0x44>)
 8000a92:	69da      	ldr	r2, [r3, #28]
 8000a94:	2380      	movs	r3, #128	; 0x80
 8000a96:	055b      	lsls	r3, r3, #21
 8000a98:	4013      	ands	r3, r2
 8000a9a:	603b      	str	r3, [r7, #0]
 8000a9c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a9e:	46c0      	nop			; (mov r8, r8)
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	b002      	add	sp, #8
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	46c0      	nop			; (mov r8, r8)
 8000aa8:	40021000 	.word	0x40021000

08000aac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000aac:	b590      	push	{r4, r7, lr}
 8000aae:	b08b      	sub	sp, #44	; 0x2c
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ab4:	2414      	movs	r4, #20
 8000ab6:	193b      	adds	r3, r7, r4
 8000ab8:	0018      	movs	r0, r3
 8000aba:	2314      	movs	r3, #20
 8000abc:	001a      	movs	r2, r3
 8000abe:	2100      	movs	r1, #0
 8000ac0:	f001 fc14 	bl	80022ec <memset>
  if(huart->Instance==USART2)
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	4a1c      	ldr	r2, [pc, #112]	; (8000b3c <HAL_UART_MspInit+0x90>)
 8000aca:	4293      	cmp	r3, r2
 8000acc:	d132      	bne.n	8000b34 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ace:	4b1c      	ldr	r3, [pc, #112]	; (8000b40 <HAL_UART_MspInit+0x94>)
 8000ad0:	69da      	ldr	r2, [r3, #28]
 8000ad2:	4b1b      	ldr	r3, [pc, #108]	; (8000b40 <HAL_UART_MspInit+0x94>)
 8000ad4:	2180      	movs	r1, #128	; 0x80
 8000ad6:	0289      	lsls	r1, r1, #10
 8000ad8:	430a      	orrs	r2, r1
 8000ada:	61da      	str	r2, [r3, #28]
 8000adc:	4b18      	ldr	r3, [pc, #96]	; (8000b40 <HAL_UART_MspInit+0x94>)
 8000ade:	69da      	ldr	r2, [r3, #28]
 8000ae0:	2380      	movs	r3, #128	; 0x80
 8000ae2:	029b      	lsls	r3, r3, #10
 8000ae4:	4013      	ands	r3, r2
 8000ae6:	613b      	str	r3, [r7, #16]
 8000ae8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aea:	4b15      	ldr	r3, [pc, #84]	; (8000b40 <HAL_UART_MspInit+0x94>)
 8000aec:	695a      	ldr	r2, [r3, #20]
 8000aee:	4b14      	ldr	r3, [pc, #80]	; (8000b40 <HAL_UART_MspInit+0x94>)
 8000af0:	2180      	movs	r1, #128	; 0x80
 8000af2:	0289      	lsls	r1, r1, #10
 8000af4:	430a      	orrs	r2, r1
 8000af6:	615a      	str	r2, [r3, #20]
 8000af8:	4b11      	ldr	r3, [pc, #68]	; (8000b40 <HAL_UART_MspInit+0x94>)
 8000afa:	695a      	ldr	r2, [r3, #20]
 8000afc:	2380      	movs	r3, #128	; 0x80
 8000afe:	029b      	lsls	r3, r3, #10
 8000b00:	4013      	ands	r3, r2
 8000b02:	60fb      	str	r3, [r7, #12]
 8000b04:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000b06:	0021      	movs	r1, r4
 8000b08:	187b      	adds	r3, r7, r1
 8000b0a:	220c      	movs	r2, #12
 8000b0c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b0e:	187b      	adds	r3, r7, r1
 8000b10:	2202      	movs	r2, #2
 8000b12:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b14:	187b      	adds	r3, r7, r1
 8000b16:	2200      	movs	r2, #0
 8000b18:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b1a:	187b      	adds	r3, r7, r1
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000b20:	187b      	adds	r3, r7, r1
 8000b22:	2201      	movs	r2, #1
 8000b24:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b26:	187a      	adds	r2, r7, r1
 8000b28:	2390      	movs	r3, #144	; 0x90
 8000b2a:	05db      	lsls	r3, r3, #23
 8000b2c:	0011      	movs	r1, r2
 8000b2e:	0018      	movs	r0, r3
 8000b30:	f000 fa48 	bl	8000fc4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b34:	46c0      	nop			; (mov r8, r8)
 8000b36:	46bd      	mov	sp, r7
 8000b38:	b00b      	add	sp, #44	; 0x2c
 8000b3a:	bd90      	pop	{r4, r7, pc}
 8000b3c:	40004400 	.word	0x40004400
 8000b40:	40021000 	.word	0x40021000

08000b44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b48:	e7fe      	b.n	8000b48 <NMI_Handler+0x4>

08000b4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b4a:	b580      	push	{r7, lr}
 8000b4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b4e:	e7fe      	b.n	8000b4e <HardFault_Handler+0x4>

08000b50 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000b54:	46c0      	nop			; (mov r8, r8)
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}

08000b5a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b5a:	b580      	push	{r7, lr}
 8000b5c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b5e:	46c0      	nop			; (mov r8, r8)
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}

08000b64 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b68:	f000 f938 	bl	8000ddc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b6c:	46c0      	nop			; (mov r8, r8)
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}

08000b72 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000b72:	b580      	push	{r7, lr}
 8000b74:	af00      	add	r7, sp, #0
	return 1;
 8000b76:	2301      	movs	r3, #1
}
 8000b78:	0018      	movs	r0, r3
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}

08000b7e <_kill>:

int _kill(int pid, int sig)
{
 8000b7e:	b580      	push	{r7, lr}
 8000b80:	b082      	sub	sp, #8
 8000b82:	af00      	add	r7, sp, #0
 8000b84:	6078      	str	r0, [r7, #4]
 8000b86:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000b88:	f001 fb86 	bl	8002298 <__errno>
 8000b8c:	0003      	movs	r3, r0
 8000b8e:	2216      	movs	r2, #22
 8000b90:	601a      	str	r2, [r3, #0]
	return -1;
 8000b92:	2301      	movs	r3, #1
 8000b94:	425b      	negs	r3, r3
}
 8000b96:	0018      	movs	r0, r3
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	b002      	add	sp, #8
 8000b9c:	bd80      	pop	{r7, pc}

08000b9e <_exit>:

void _exit (int status)
{
 8000b9e:	b580      	push	{r7, lr}
 8000ba0:	b082      	sub	sp, #8
 8000ba2:	af00      	add	r7, sp, #0
 8000ba4:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	425a      	negs	r2, r3
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	0011      	movs	r1, r2
 8000bae:	0018      	movs	r0, r3
 8000bb0:	f7ff ffe5 	bl	8000b7e <_kill>
	while (1) {}		/* Make sure we hang here */
 8000bb4:	e7fe      	b.n	8000bb4 <_exit+0x16>

08000bb6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000bb6:	b580      	push	{r7, lr}
 8000bb8:	b086      	sub	sp, #24
 8000bba:	af00      	add	r7, sp, #0
 8000bbc:	60f8      	str	r0, [r7, #12]
 8000bbe:	60b9      	str	r1, [r7, #8]
 8000bc0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	617b      	str	r3, [r7, #20]
 8000bc6:	e00a      	b.n	8000bde <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000bc8:	e000      	b.n	8000bcc <_read+0x16>
 8000bca:	bf00      	nop
 8000bcc:	0001      	movs	r1, r0
 8000bce:	68bb      	ldr	r3, [r7, #8]
 8000bd0:	1c5a      	adds	r2, r3, #1
 8000bd2:	60ba      	str	r2, [r7, #8]
 8000bd4:	b2ca      	uxtb	r2, r1
 8000bd6:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bd8:	697b      	ldr	r3, [r7, #20]
 8000bda:	3301      	adds	r3, #1
 8000bdc:	617b      	str	r3, [r7, #20]
 8000bde:	697a      	ldr	r2, [r7, #20]
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	429a      	cmp	r2, r3
 8000be4:	dbf0      	blt.n	8000bc8 <_read+0x12>
	}

return len;
 8000be6:	687b      	ldr	r3, [r7, #4]
}
 8000be8:	0018      	movs	r0, r3
 8000bea:	46bd      	mov	sp, r7
 8000bec:	b006      	add	sp, #24
 8000bee:	bd80      	pop	{r7, pc}

08000bf0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b086      	sub	sp, #24
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	60f8      	str	r0, [r7, #12]
 8000bf8:	60b9      	str	r1, [r7, #8]
 8000bfa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	617b      	str	r3, [r7, #20]
 8000c00:	e009      	b.n	8000c16 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000c02:	68bb      	ldr	r3, [r7, #8]
 8000c04:	1c5a      	adds	r2, r3, #1
 8000c06:	60ba      	str	r2, [r7, #8]
 8000c08:	781b      	ldrb	r3, [r3, #0]
 8000c0a:	0018      	movs	r0, r3
 8000c0c:	e000      	b.n	8000c10 <_write+0x20>
 8000c0e:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c10:	697b      	ldr	r3, [r7, #20]
 8000c12:	3301      	adds	r3, #1
 8000c14:	617b      	str	r3, [r7, #20]
 8000c16:	697a      	ldr	r2, [r7, #20]
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	429a      	cmp	r2, r3
 8000c1c:	dbf1      	blt.n	8000c02 <_write+0x12>
	}
	return len;
 8000c1e:	687b      	ldr	r3, [r7, #4]
}
 8000c20:	0018      	movs	r0, r3
 8000c22:	46bd      	mov	sp, r7
 8000c24:	b006      	add	sp, #24
 8000c26:	bd80      	pop	{r7, pc}

08000c28 <_close>:

int _close(int file)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b082      	sub	sp, #8
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
	return -1;
 8000c30:	2301      	movs	r3, #1
 8000c32:	425b      	negs	r3, r3
}
 8000c34:	0018      	movs	r0, r3
 8000c36:	46bd      	mov	sp, r7
 8000c38:	b002      	add	sp, #8
 8000c3a:	bd80      	pop	{r7, pc}

08000c3c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b082      	sub	sp, #8
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
 8000c44:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000c46:	683b      	ldr	r3, [r7, #0]
 8000c48:	2280      	movs	r2, #128	; 0x80
 8000c4a:	0192      	lsls	r2, r2, #6
 8000c4c:	605a      	str	r2, [r3, #4]
	return 0;
 8000c4e:	2300      	movs	r3, #0
}
 8000c50:	0018      	movs	r0, r3
 8000c52:	46bd      	mov	sp, r7
 8000c54:	b002      	add	sp, #8
 8000c56:	bd80      	pop	{r7, pc}

08000c58 <_isatty>:

int _isatty(int file)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
	return 1;
 8000c60:	2301      	movs	r3, #1
}
 8000c62:	0018      	movs	r0, r3
 8000c64:	46bd      	mov	sp, r7
 8000c66:	b002      	add	sp, #8
 8000c68:	bd80      	pop	{r7, pc}

08000c6a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c6a:	b580      	push	{r7, lr}
 8000c6c:	b084      	sub	sp, #16
 8000c6e:	af00      	add	r7, sp, #0
 8000c70:	60f8      	str	r0, [r7, #12]
 8000c72:	60b9      	str	r1, [r7, #8]
 8000c74:	607a      	str	r2, [r7, #4]
	return 0;
 8000c76:	2300      	movs	r3, #0
}
 8000c78:	0018      	movs	r0, r3
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	b004      	add	sp, #16
 8000c7e:	bd80      	pop	{r7, pc}

08000c80 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b086      	sub	sp, #24
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c88:	4a14      	ldr	r2, [pc, #80]	; (8000cdc <_sbrk+0x5c>)
 8000c8a:	4b15      	ldr	r3, [pc, #84]	; (8000ce0 <_sbrk+0x60>)
 8000c8c:	1ad3      	subs	r3, r2, r3
 8000c8e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c90:	697b      	ldr	r3, [r7, #20]
 8000c92:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c94:	4b13      	ldr	r3, [pc, #76]	; (8000ce4 <_sbrk+0x64>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d102      	bne.n	8000ca2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c9c:	4b11      	ldr	r3, [pc, #68]	; (8000ce4 <_sbrk+0x64>)
 8000c9e:	4a12      	ldr	r2, [pc, #72]	; (8000ce8 <_sbrk+0x68>)
 8000ca0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ca2:	4b10      	ldr	r3, [pc, #64]	; (8000ce4 <_sbrk+0x64>)
 8000ca4:	681a      	ldr	r2, [r3, #0]
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	18d3      	adds	r3, r2, r3
 8000caa:	693a      	ldr	r2, [r7, #16]
 8000cac:	429a      	cmp	r2, r3
 8000cae:	d207      	bcs.n	8000cc0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000cb0:	f001 faf2 	bl	8002298 <__errno>
 8000cb4:	0003      	movs	r3, r0
 8000cb6:	220c      	movs	r2, #12
 8000cb8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cba:	2301      	movs	r3, #1
 8000cbc:	425b      	negs	r3, r3
 8000cbe:	e009      	b.n	8000cd4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cc0:	4b08      	ldr	r3, [pc, #32]	; (8000ce4 <_sbrk+0x64>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cc6:	4b07      	ldr	r3, [pc, #28]	; (8000ce4 <_sbrk+0x64>)
 8000cc8:	681a      	ldr	r2, [r3, #0]
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	18d2      	adds	r2, r2, r3
 8000cce:	4b05      	ldr	r3, [pc, #20]	; (8000ce4 <_sbrk+0x64>)
 8000cd0:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000cd2:	68fb      	ldr	r3, [r7, #12]
}
 8000cd4:	0018      	movs	r0, r3
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	b006      	add	sp, #24
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	20002000 	.word	0x20002000
 8000ce0:	00000400 	.word	0x00000400
 8000ce4:	20000114 	.word	0x20000114
 8000ce8:	20000130 	.word	0x20000130

08000cec <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000cf0:	46c0      	nop			; (mov r8, r8)
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
	...

08000cf8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000cf8:	480d      	ldr	r0, [pc, #52]	; (8000d30 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000cfa:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cfc:	480d      	ldr	r0, [pc, #52]	; (8000d34 <LoopForever+0x6>)
  ldr r1, =_edata
 8000cfe:	490e      	ldr	r1, [pc, #56]	; (8000d38 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d00:	4a0e      	ldr	r2, [pc, #56]	; (8000d3c <LoopForever+0xe>)
  movs r3, #0
 8000d02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d04:	e002      	b.n	8000d0c <LoopCopyDataInit>

08000d06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d0a:	3304      	adds	r3, #4

08000d0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d10:	d3f9      	bcc.n	8000d06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d12:	4a0b      	ldr	r2, [pc, #44]	; (8000d40 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d14:	4c0b      	ldr	r4, [pc, #44]	; (8000d44 <LoopForever+0x16>)
  movs r3, #0
 8000d16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d18:	e001      	b.n	8000d1e <LoopFillZerobss>

08000d1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d1c:	3204      	adds	r2, #4

08000d1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d20:	d3fb      	bcc.n	8000d1a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000d22:	f7ff ffe3 	bl	8000cec <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000d26:	f001 fabd 	bl	80022a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d2a:	f7ff fc13 	bl	8000554 <main>

08000d2e <LoopForever>:

LoopForever:
    b LoopForever
 8000d2e:	e7fe      	b.n	8000d2e <LoopForever>
  ldr   r0, =_estack
 8000d30:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000d34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d38:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000d3c:	080036e8 	.word	0x080036e8
  ldr r2, =_sbss
 8000d40:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000d44:	2000012c 	.word	0x2000012c

08000d48 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d48:	e7fe      	b.n	8000d48 <ADC1_IRQHandler>
	...

08000d4c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d50:	4b07      	ldr	r3, [pc, #28]	; (8000d70 <HAL_Init+0x24>)
 8000d52:	681a      	ldr	r2, [r3, #0]
 8000d54:	4b06      	ldr	r3, [pc, #24]	; (8000d70 <HAL_Init+0x24>)
 8000d56:	2110      	movs	r1, #16
 8000d58:	430a      	orrs	r2, r1
 8000d5a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000d5c:	2000      	movs	r0, #0
 8000d5e:	f000 f809 	bl	8000d74 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d62:	f7ff fe7f 	bl	8000a64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d66:	2300      	movs	r3, #0
}
 8000d68:	0018      	movs	r0, r3
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	46c0      	nop			; (mov r8, r8)
 8000d70:	40022000 	.word	0x40022000

08000d74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d74:	b590      	push	{r4, r7, lr}
 8000d76:	b083      	sub	sp, #12
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d7c:	4b14      	ldr	r3, [pc, #80]	; (8000dd0 <HAL_InitTick+0x5c>)
 8000d7e:	681c      	ldr	r4, [r3, #0]
 8000d80:	4b14      	ldr	r3, [pc, #80]	; (8000dd4 <HAL_InitTick+0x60>)
 8000d82:	781b      	ldrb	r3, [r3, #0]
 8000d84:	0019      	movs	r1, r3
 8000d86:	23fa      	movs	r3, #250	; 0xfa
 8000d88:	0098      	lsls	r0, r3, #2
 8000d8a:	f7ff f9c7 	bl	800011c <__udivsi3>
 8000d8e:	0003      	movs	r3, r0
 8000d90:	0019      	movs	r1, r3
 8000d92:	0020      	movs	r0, r4
 8000d94:	f7ff f9c2 	bl	800011c <__udivsi3>
 8000d98:	0003      	movs	r3, r0
 8000d9a:	0018      	movs	r0, r3
 8000d9c:	f000 f905 	bl	8000faa <HAL_SYSTICK_Config>
 8000da0:	1e03      	subs	r3, r0, #0
 8000da2:	d001      	beq.n	8000da8 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000da4:	2301      	movs	r3, #1
 8000da6:	e00f      	b.n	8000dc8 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	2b03      	cmp	r3, #3
 8000dac:	d80b      	bhi.n	8000dc6 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dae:	6879      	ldr	r1, [r7, #4]
 8000db0:	2301      	movs	r3, #1
 8000db2:	425b      	negs	r3, r3
 8000db4:	2200      	movs	r2, #0
 8000db6:	0018      	movs	r0, r3
 8000db8:	f000 f8e2 	bl	8000f80 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000dbc:	4b06      	ldr	r3, [pc, #24]	; (8000dd8 <HAL_InitTick+0x64>)
 8000dbe:	687a      	ldr	r2, [r7, #4]
 8000dc0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	e000      	b.n	8000dc8 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000dc6:	2301      	movs	r3, #1
}
 8000dc8:	0018      	movs	r0, r3
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	b003      	add	sp, #12
 8000dce:	bd90      	pop	{r4, r7, pc}
 8000dd0:	20000000 	.word	0x20000000
 8000dd4:	20000008 	.word	0x20000008
 8000dd8:	20000004 	.word	0x20000004

08000ddc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000de0:	4b05      	ldr	r3, [pc, #20]	; (8000df8 <HAL_IncTick+0x1c>)
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	001a      	movs	r2, r3
 8000de6:	4b05      	ldr	r3, [pc, #20]	; (8000dfc <HAL_IncTick+0x20>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	18d2      	adds	r2, r2, r3
 8000dec:	4b03      	ldr	r3, [pc, #12]	; (8000dfc <HAL_IncTick+0x20>)
 8000dee:	601a      	str	r2, [r3, #0]
}
 8000df0:	46c0      	nop			; (mov r8, r8)
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	46c0      	nop			; (mov r8, r8)
 8000df8:	20000008 	.word	0x20000008
 8000dfc:	20000118 	.word	0x20000118

08000e00 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	af00      	add	r7, sp, #0
  return uwTick;
 8000e04:	4b02      	ldr	r3, [pc, #8]	; (8000e10 <HAL_GetTick+0x10>)
 8000e06:	681b      	ldr	r3, [r3, #0]
}
 8000e08:	0018      	movs	r0, r3
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	46c0      	nop			; (mov r8, r8)
 8000e10:	20000118 	.word	0x20000118

08000e14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b084      	sub	sp, #16
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e1c:	f7ff fff0 	bl	8000e00 <HAL_GetTick>
 8000e20:	0003      	movs	r3, r0
 8000e22:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	3301      	adds	r3, #1
 8000e2c:	d005      	beq.n	8000e3a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e2e:	4b0a      	ldr	r3, [pc, #40]	; (8000e58 <HAL_Delay+0x44>)
 8000e30:	781b      	ldrb	r3, [r3, #0]
 8000e32:	001a      	movs	r2, r3
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	189b      	adds	r3, r3, r2
 8000e38:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000e3a:	46c0      	nop			; (mov r8, r8)
 8000e3c:	f7ff ffe0 	bl	8000e00 <HAL_GetTick>
 8000e40:	0002      	movs	r2, r0
 8000e42:	68bb      	ldr	r3, [r7, #8]
 8000e44:	1ad3      	subs	r3, r2, r3
 8000e46:	68fa      	ldr	r2, [r7, #12]
 8000e48:	429a      	cmp	r2, r3
 8000e4a:	d8f7      	bhi.n	8000e3c <HAL_Delay+0x28>
  {
  }
}
 8000e4c:	46c0      	nop			; (mov r8, r8)
 8000e4e:	46c0      	nop			; (mov r8, r8)
 8000e50:	46bd      	mov	sp, r7
 8000e52:	b004      	add	sp, #16
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	46c0      	nop			; (mov r8, r8)
 8000e58:	20000008 	.word	0x20000008

08000e5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e5c:	b590      	push	{r4, r7, lr}
 8000e5e:	b083      	sub	sp, #12
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	0002      	movs	r2, r0
 8000e64:	6039      	str	r1, [r7, #0]
 8000e66:	1dfb      	adds	r3, r7, #7
 8000e68:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000e6a:	1dfb      	adds	r3, r7, #7
 8000e6c:	781b      	ldrb	r3, [r3, #0]
 8000e6e:	2b7f      	cmp	r3, #127	; 0x7f
 8000e70:	d828      	bhi.n	8000ec4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e72:	4a2f      	ldr	r2, [pc, #188]	; (8000f30 <__NVIC_SetPriority+0xd4>)
 8000e74:	1dfb      	adds	r3, r7, #7
 8000e76:	781b      	ldrb	r3, [r3, #0]
 8000e78:	b25b      	sxtb	r3, r3
 8000e7a:	089b      	lsrs	r3, r3, #2
 8000e7c:	33c0      	adds	r3, #192	; 0xc0
 8000e7e:	009b      	lsls	r3, r3, #2
 8000e80:	589b      	ldr	r3, [r3, r2]
 8000e82:	1dfa      	adds	r2, r7, #7
 8000e84:	7812      	ldrb	r2, [r2, #0]
 8000e86:	0011      	movs	r1, r2
 8000e88:	2203      	movs	r2, #3
 8000e8a:	400a      	ands	r2, r1
 8000e8c:	00d2      	lsls	r2, r2, #3
 8000e8e:	21ff      	movs	r1, #255	; 0xff
 8000e90:	4091      	lsls	r1, r2
 8000e92:	000a      	movs	r2, r1
 8000e94:	43d2      	mvns	r2, r2
 8000e96:	401a      	ands	r2, r3
 8000e98:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	019b      	lsls	r3, r3, #6
 8000e9e:	22ff      	movs	r2, #255	; 0xff
 8000ea0:	401a      	ands	r2, r3
 8000ea2:	1dfb      	adds	r3, r7, #7
 8000ea4:	781b      	ldrb	r3, [r3, #0]
 8000ea6:	0018      	movs	r0, r3
 8000ea8:	2303      	movs	r3, #3
 8000eaa:	4003      	ands	r3, r0
 8000eac:	00db      	lsls	r3, r3, #3
 8000eae:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000eb0:	481f      	ldr	r0, [pc, #124]	; (8000f30 <__NVIC_SetPriority+0xd4>)
 8000eb2:	1dfb      	adds	r3, r7, #7
 8000eb4:	781b      	ldrb	r3, [r3, #0]
 8000eb6:	b25b      	sxtb	r3, r3
 8000eb8:	089b      	lsrs	r3, r3, #2
 8000eba:	430a      	orrs	r2, r1
 8000ebc:	33c0      	adds	r3, #192	; 0xc0
 8000ebe:	009b      	lsls	r3, r3, #2
 8000ec0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000ec2:	e031      	b.n	8000f28 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ec4:	4a1b      	ldr	r2, [pc, #108]	; (8000f34 <__NVIC_SetPriority+0xd8>)
 8000ec6:	1dfb      	adds	r3, r7, #7
 8000ec8:	781b      	ldrb	r3, [r3, #0]
 8000eca:	0019      	movs	r1, r3
 8000ecc:	230f      	movs	r3, #15
 8000ece:	400b      	ands	r3, r1
 8000ed0:	3b08      	subs	r3, #8
 8000ed2:	089b      	lsrs	r3, r3, #2
 8000ed4:	3306      	adds	r3, #6
 8000ed6:	009b      	lsls	r3, r3, #2
 8000ed8:	18d3      	adds	r3, r2, r3
 8000eda:	3304      	adds	r3, #4
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	1dfa      	adds	r2, r7, #7
 8000ee0:	7812      	ldrb	r2, [r2, #0]
 8000ee2:	0011      	movs	r1, r2
 8000ee4:	2203      	movs	r2, #3
 8000ee6:	400a      	ands	r2, r1
 8000ee8:	00d2      	lsls	r2, r2, #3
 8000eea:	21ff      	movs	r1, #255	; 0xff
 8000eec:	4091      	lsls	r1, r2
 8000eee:	000a      	movs	r2, r1
 8000ef0:	43d2      	mvns	r2, r2
 8000ef2:	401a      	ands	r2, r3
 8000ef4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	019b      	lsls	r3, r3, #6
 8000efa:	22ff      	movs	r2, #255	; 0xff
 8000efc:	401a      	ands	r2, r3
 8000efe:	1dfb      	adds	r3, r7, #7
 8000f00:	781b      	ldrb	r3, [r3, #0]
 8000f02:	0018      	movs	r0, r3
 8000f04:	2303      	movs	r3, #3
 8000f06:	4003      	ands	r3, r0
 8000f08:	00db      	lsls	r3, r3, #3
 8000f0a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f0c:	4809      	ldr	r0, [pc, #36]	; (8000f34 <__NVIC_SetPriority+0xd8>)
 8000f0e:	1dfb      	adds	r3, r7, #7
 8000f10:	781b      	ldrb	r3, [r3, #0]
 8000f12:	001c      	movs	r4, r3
 8000f14:	230f      	movs	r3, #15
 8000f16:	4023      	ands	r3, r4
 8000f18:	3b08      	subs	r3, #8
 8000f1a:	089b      	lsrs	r3, r3, #2
 8000f1c:	430a      	orrs	r2, r1
 8000f1e:	3306      	adds	r3, #6
 8000f20:	009b      	lsls	r3, r3, #2
 8000f22:	18c3      	adds	r3, r0, r3
 8000f24:	3304      	adds	r3, #4
 8000f26:	601a      	str	r2, [r3, #0]
}
 8000f28:	46c0      	nop			; (mov r8, r8)
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	b003      	add	sp, #12
 8000f2e:	bd90      	pop	{r4, r7, pc}
 8000f30:	e000e100 	.word	0xe000e100
 8000f34:	e000ed00 	.word	0xe000ed00

08000f38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b082      	sub	sp, #8
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	1e5a      	subs	r2, r3, #1
 8000f44:	2380      	movs	r3, #128	; 0x80
 8000f46:	045b      	lsls	r3, r3, #17
 8000f48:	429a      	cmp	r2, r3
 8000f4a:	d301      	bcc.n	8000f50 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	e010      	b.n	8000f72 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f50:	4b0a      	ldr	r3, [pc, #40]	; (8000f7c <SysTick_Config+0x44>)
 8000f52:	687a      	ldr	r2, [r7, #4]
 8000f54:	3a01      	subs	r2, #1
 8000f56:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f58:	2301      	movs	r3, #1
 8000f5a:	425b      	negs	r3, r3
 8000f5c:	2103      	movs	r1, #3
 8000f5e:	0018      	movs	r0, r3
 8000f60:	f7ff ff7c 	bl	8000e5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f64:	4b05      	ldr	r3, [pc, #20]	; (8000f7c <SysTick_Config+0x44>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f6a:	4b04      	ldr	r3, [pc, #16]	; (8000f7c <SysTick_Config+0x44>)
 8000f6c:	2207      	movs	r2, #7
 8000f6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f70:	2300      	movs	r3, #0
}
 8000f72:	0018      	movs	r0, r3
 8000f74:	46bd      	mov	sp, r7
 8000f76:	b002      	add	sp, #8
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	46c0      	nop			; (mov r8, r8)
 8000f7c:	e000e010 	.word	0xe000e010

08000f80 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b084      	sub	sp, #16
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	60b9      	str	r1, [r7, #8]
 8000f88:	607a      	str	r2, [r7, #4]
 8000f8a:	210f      	movs	r1, #15
 8000f8c:	187b      	adds	r3, r7, r1
 8000f8e:	1c02      	adds	r2, r0, #0
 8000f90:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000f92:	68ba      	ldr	r2, [r7, #8]
 8000f94:	187b      	adds	r3, r7, r1
 8000f96:	781b      	ldrb	r3, [r3, #0]
 8000f98:	b25b      	sxtb	r3, r3
 8000f9a:	0011      	movs	r1, r2
 8000f9c:	0018      	movs	r0, r3
 8000f9e:	f7ff ff5d 	bl	8000e5c <__NVIC_SetPriority>
}
 8000fa2:	46c0      	nop			; (mov r8, r8)
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	b004      	add	sp, #16
 8000fa8:	bd80      	pop	{r7, pc}

08000faa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000faa:	b580      	push	{r7, lr}
 8000fac:	b082      	sub	sp, #8
 8000fae:	af00      	add	r7, sp, #0
 8000fb0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	0018      	movs	r0, r3
 8000fb6:	f7ff ffbf 	bl	8000f38 <SysTick_Config>
 8000fba:	0003      	movs	r3, r0
}
 8000fbc:	0018      	movs	r0, r3
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	b002      	add	sp, #8
 8000fc2:	bd80      	pop	{r7, pc}

08000fc4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b086      	sub	sp, #24
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
 8000fcc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fd2:	e14f      	b.n	8001274 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	2101      	movs	r1, #1
 8000fda:	697a      	ldr	r2, [r7, #20]
 8000fdc:	4091      	lsls	r1, r2
 8000fde:	000a      	movs	r2, r1
 8000fe0:	4013      	ands	r3, r2
 8000fe2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d100      	bne.n	8000fec <HAL_GPIO_Init+0x28>
 8000fea:	e140      	b.n	800126e <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	685b      	ldr	r3, [r3, #4]
 8000ff0:	2203      	movs	r2, #3
 8000ff2:	4013      	ands	r3, r2
 8000ff4:	2b01      	cmp	r3, #1
 8000ff6:	d005      	beq.n	8001004 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	685b      	ldr	r3, [r3, #4]
 8000ffc:	2203      	movs	r2, #3
 8000ffe:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001000:	2b02      	cmp	r3, #2
 8001002:	d130      	bne.n	8001066 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	689b      	ldr	r3, [r3, #8]
 8001008:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800100a:	697b      	ldr	r3, [r7, #20]
 800100c:	005b      	lsls	r3, r3, #1
 800100e:	2203      	movs	r2, #3
 8001010:	409a      	lsls	r2, r3
 8001012:	0013      	movs	r3, r2
 8001014:	43da      	mvns	r2, r3
 8001016:	693b      	ldr	r3, [r7, #16]
 8001018:	4013      	ands	r3, r2
 800101a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	68da      	ldr	r2, [r3, #12]
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	005b      	lsls	r3, r3, #1
 8001024:	409a      	lsls	r2, r3
 8001026:	0013      	movs	r3, r2
 8001028:	693a      	ldr	r2, [r7, #16]
 800102a:	4313      	orrs	r3, r2
 800102c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	693a      	ldr	r2, [r7, #16]
 8001032:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800103a:	2201      	movs	r2, #1
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	409a      	lsls	r2, r3
 8001040:	0013      	movs	r3, r2
 8001042:	43da      	mvns	r2, r3
 8001044:	693b      	ldr	r3, [r7, #16]
 8001046:	4013      	ands	r3, r2
 8001048:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	685b      	ldr	r3, [r3, #4]
 800104e:	091b      	lsrs	r3, r3, #4
 8001050:	2201      	movs	r2, #1
 8001052:	401a      	ands	r2, r3
 8001054:	697b      	ldr	r3, [r7, #20]
 8001056:	409a      	lsls	r2, r3
 8001058:	0013      	movs	r3, r2
 800105a:	693a      	ldr	r2, [r7, #16]
 800105c:	4313      	orrs	r3, r2
 800105e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	693a      	ldr	r2, [r7, #16]
 8001064:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	2203      	movs	r2, #3
 800106c:	4013      	ands	r3, r2
 800106e:	2b03      	cmp	r3, #3
 8001070:	d017      	beq.n	80010a2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	68db      	ldr	r3, [r3, #12]
 8001076:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001078:	697b      	ldr	r3, [r7, #20]
 800107a:	005b      	lsls	r3, r3, #1
 800107c:	2203      	movs	r2, #3
 800107e:	409a      	lsls	r2, r3
 8001080:	0013      	movs	r3, r2
 8001082:	43da      	mvns	r2, r3
 8001084:	693b      	ldr	r3, [r7, #16]
 8001086:	4013      	ands	r3, r2
 8001088:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	689a      	ldr	r2, [r3, #8]
 800108e:	697b      	ldr	r3, [r7, #20]
 8001090:	005b      	lsls	r3, r3, #1
 8001092:	409a      	lsls	r2, r3
 8001094:	0013      	movs	r3, r2
 8001096:	693a      	ldr	r2, [r7, #16]
 8001098:	4313      	orrs	r3, r2
 800109a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	693a      	ldr	r2, [r7, #16]
 80010a0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	2203      	movs	r2, #3
 80010a8:	4013      	ands	r3, r2
 80010aa:	2b02      	cmp	r3, #2
 80010ac:	d123      	bne.n	80010f6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80010ae:	697b      	ldr	r3, [r7, #20]
 80010b0:	08da      	lsrs	r2, r3, #3
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	3208      	adds	r2, #8
 80010b6:	0092      	lsls	r2, r2, #2
 80010b8:	58d3      	ldr	r3, [r2, r3]
 80010ba:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80010bc:	697b      	ldr	r3, [r7, #20]
 80010be:	2207      	movs	r2, #7
 80010c0:	4013      	ands	r3, r2
 80010c2:	009b      	lsls	r3, r3, #2
 80010c4:	220f      	movs	r2, #15
 80010c6:	409a      	lsls	r2, r3
 80010c8:	0013      	movs	r3, r2
 80010ca:	43da      	mvns	r2, r3
 80010cc:	693b      	ldr	r3, [r7, #16]
 80010ce:	4013      	ands	r3, r2
 80010d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	691a      	ldr	r2, [r3, #16]
 80010d6:	697b      	ldr	r3, [r7, #20]
 80010d8:	2107      	movs	r1, #7
 80010da:	400b      	ands	r3, r1
 80010dc:	009b      	lsls	r3, r3, #2
 80010de:	409a      	lsls	r2, r3
 80010e0:	0013      	movs	r3, r2
 80010e2:	693a      	ldr	r2, [r7, #16]
 80010e4:	4313      	orrs	r3, r2
 80010e6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80010e8:	697b      	ldr	r3, [r7, #20]
 80010ea:	08da      	lsrs	r2, r3, #3
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	3208      	adds	r2, #8
 80010f0:	0092      	lsls	r2, r2, #2
 80010f2:	6939      	ldr	r1, [r7, #16]
 80010f4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80010fc:	697b      	ldr	r3, [r7, #20]
 80010fe:	005b      	lsls	r3, r3, #1
 8001100:	2203      	movs	r2, #3
 8001102:	409a      	lsls	r2, r3
 8001104:	0013      	movs	r3, r2
 8001106:	43da      	mvns	r2, r3
 8001108:	693b      	ldr	r3, [r7, #16]
 800110a:	4013      	ands	r3, r2
 800110c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	685b      	ldr	r3, [r3, #4]
 8001112:	2203      	movs	r2, #3
 8001114:	401a      	ands	r2, r3
 8001116:	697b      	ldr	r3, [r7, #20]
 8001118:	005b      	lsls	r3, r3, #1
 800111a:	409a      	lsls	r2, r3
 800111c:	0013      	movs	r3, r2
 800111e:	693a      	ldr	r2, [r7, #16]
 8001120:	4313      	orrs	r3, r2
 8001122:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	693a      	ldr	r2, [r7, #16]
 8001128:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	685a      	ldr	r2, [r3, #4]
 800112e:	23c0      	movs	r3, #192	; 0xc0
 8001130:	029b      	lsls	r3, r3, #10
 8001132:	4013      	ands	r3, r2
 8001134:	d100      	bne.n	8001138 <HAL_GPIO_Init+0x174>
 8001136:	e09a      	b.n	800126e <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001138:	4b54      	ldr	r3, [pc, #336]	; (800128c <HAL_GPIO_Init+0x2c8>)
 800113a:	699a      	ldr	r2, [r3, #24]
 800113c:	4b53      	ldr	r3, [pc, #332]	; (800128c <HAL_GPIO_Init+0x2c8>)
 800113e:	2101      	movs	r1, #1
 8001140:	430a      	orrs	r2, r1
 8001142:	619a      	str	r2, [r3, #24]
 8001144:	4b51      	ldr	r3, [pc, #324]	; (800128c <HAL_GPIO_Init+0x2c8>)
 8001146:	699b      	ldr	r3, [r3, #24]
 8001148:	2201      	movs	r2, #1
 800114a:	4013      	ands	r3, r2
 800114c:	60bb      	str	r3, [r7, #8]
 800114e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001150:	4a4f      	ldr	r2, [pc, #316]	; (8001290 <HAL_GPIO_Init+0x2cc>)
 8001152:	697b      	ldr	r3, [r7, #20]
 8001154:	089b      	lsrs	r3, r3, #2
 8001156:	3302      	adds	r3, #2
 8001158:	009b      	lsls	r3, r3, #2
 800115a:	589b      	ldr	r3, [r3, r2]
 800115c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800115e:	697b      	ldr	r3, [r7, #20]
 8001160:	2203      	movs	r2, #3
 8001162:	4013      	ands	r3, r2
 8001164:	009b      	lsls	r3, r3, #2
 8001166:	220f      	movs	r2, #15
 8001168:	409a      	lsls	r2, r3
 800116a:	0013      	movs	r3, r2
 800116c:	43da      	mvns	r2, r3
 800116e:	693b      	ldr	r3, [r7, #16]
 8001170:	4013      	ands	r3, r2
 8001172:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001174:	687a      	ldr	r2, [r7, #4]
 8001176:	2390      	movs	r3, #144	; 0x90
 8001178:	05db      	lsls	r3, r3, #23
 800117a:	429a      	cmp	r2, r3
 800117c:	d013      	beq.n	80011a6 <HAL_GPIO_Init+0x1e2>
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	4a44      	ldr	r2, [pc, #272]	; (8001294 <HAL_GPIO_Init+0x2d0>)
 8001182:	4293      	cmp	r3, r2
 8001184:	d00d      	beq.n	80011a2 <HAL_GPIO_Init+0x1de>
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	4a43      	ldr	r2, [pc, #268]	; (8001298 <HAL_GPIO_Init+0x2d4>)
 800118a:	4293      	cmp	r3, r2
 800118c:	d007      	beq.n	800119e <HAL_GPIO_Init+0x1da>
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	4a42      	ldr	r2, [pc, #264]	; (800129c <HAL_GPIO_Init+0x2d8>)
 8001192:	4293      	cmp	r3, r2
 8001194:	d101      	bne.n	800119a <HAL_GPIO_Init+0x1d6>
 8001196:	2303      	movs	r3, #3
 8001198:	e006      	b.n	80011a8 <HAL_GPIO_Init+0x1e4>
 800119a:	2305      	movs	r3, #5
 800119c:	e004      	b.n	80011a8 <HAL_GPIO_Init+0x1e4>
 800119e:	2302      	movs	r3, #2
 80011a0:	e002      	b.n	80011a8 <HAL_GPIO_Init+0x1e4>
 80011a2:	2301      	movs	r3, #1
 80011a4:	e000      	b.n	80011a8 <HAL_GPIO_Init+0x1e4>
 80011a6:	2300      	movs	r3, #0
 80011a8:	697a      	ldr	r2, [r7, #20]
 80011aa:	2103      	movs	r1, #3
 80011ac:	400a      	ands	r2, r1
 80011ae:	0092      	lsls	r2, r2, #2
 80011b0:	4093      	lsls	r3, r2
 80011b2:	693a      	ldr	r2, [r7, #16]
 80011b4:	4313      	orrs	r3, r2
 80011b6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80011b8:	4935      	ldr	r1, [pc, #212]	; (8001290 <HAL_GPIO_Init+0x2cc>)
 80011ba:	697b      	ldr	r3, [r7, #20]
 80011bc:	089b      	lsrs	r3, r3, #2
 80011be:	3302      	adds	r3, #2
 80011c0:	009b      	lsls	r3, r3, #2
 80011c2:	693a      	ldr	r2, [r7, #16]
 80011c4:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011c6:	4b36      	ldr	r3, [pc, #216]	; (80012a0 <HAL_GPIO_Init+0x2dc>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	43da      	mvns	r2, r3
 80011d0:	693b      	ldr	r3, [r7, #16]
 80011d2:	4013      	ands	r3, r2
 80011d4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	685a      	ldr	r2, [r3, #4]
 80011da:	2380      	movs	r3, #128	; 0x80
 80011dc:	025b      	lsls	r3, r3, #9
 80011de:	4013      	ands	r3, r2
 80011e0:	d003      	beq.n	80011ea <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 80011e2:	693a      	ldr	r2, [r7, #16]
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	4313      	orrs	r3, r2
 80011e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80011ea:	4b2d      	ldr	r3, [pc, #180]	; (80012a0 <HAL_GPIO_Init+0x2dc>)
 80011ec:	693a      	ldr	r2, [r7, #16]
 80011ee:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80011f0:	4b2b      	ldr	r3, [pc, #172]	; (80012a0 <HAL_GPIO_Init+0x2dc>)
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	43da      	mvns	r2, r3
 80011fa:	693b      	ldr	r3, [r7, #16]
 80011fc:	4013      	ands	r3, r2
 80011fe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	685a      	ldr	r2, [r3, #4]
 8001204:	2380      	movs	r3, #128	; 0x80
 8001206:	029b      	lsls	r3, r3, #10
 8001208:	4013      	ands	r3, r2
 800120a:	d003      	beq.n	8001214 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 800120c:	693a      	ldr	r2, [r7, #16]
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	4313      	orrs	r3, r2
 8001212:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001214:	4b22      	ldr	r3, [pc, #136]	; (80012a0 <HAL_GPIO_Init+0x2dc>)
 8001216:	693a      	ldr	r2, [r7, #16]
 8001218:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800121a:	4b21      	ldr	r3, [pc, #132]	; (80012a0 <HAL_GPIO_Init+0x2dc>)
 800121c:	689b      	ldr	r3, [r3, #8]
 800121e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	43da      	mvns	r2, r3
 8001224:	693b      	ldr	r3, [r7, #16]
 8001226:	4013      	ands	r3, r2
 8001228:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	685a      	ldr	r2, [r3, #4]
 800122e:	2380      	movs	r3, #128	; 0x80
 8001230:	035b      	lsls	r3, r3, #13
 8001232:	4013      	ands	r3, r2
 8001234:	d003      	beq.n	800123e <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8001236:	693a      	ldr	r2, [r7, #16]
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	4313      	orrs	r3, r2
 800123c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800123e:	4b18      	ldr	r3, [pc, #96]	; (80012a0 <HAL_GPIO_Init+0x2dc>)
 8001240:	693a      	ldr	r2, [r7, #16]
 8001242:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001244:	4b16      	ldr	r3, [pc, #88]	; (80012a0 <HAL_GPIO_Init+0x2dc>)
 8001246:	68db      	ldr	r3, [r3, #12]
 8001248:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	43da      	mvns	r2, r3
 800124e:	693b      	ldr	r3, [r7, #16]
 8001250:	4013      	ands	r3, r2
 8001252:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	685a      	ldr	r2, [r3, #4]
 8001258:	2380      	movs	r3, #128	; 0x80
 800125a:	039b      	lsls	r3, r3, #14
 800125c:	4013      	ands	r3, r2
 800125e:	d003      	beq.n	8001268 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8001260:	693a      	ldr	r2, [r7, #16]
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	4313      	orrs	r3, r2
 8001266:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001268:	4b0d      	ldr	r3, [pc, #52]	; (80012a0 <HAL_GPIO_Init+0x2dc>)
 800126a:	693a      	ldr	r2, [r7, #16]
 800126c:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 800126e:	697b      	ldr	r3, [r7, #20]
 8001270:	3301      	adds	r3, #1
 8001272:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	681a      	ldr	r2, [r3, #0]
 8001278:	697b      	ldr	r3, [r7, #20]
 800127a:	40da      	lsrs	r2, r3
 800127c:	1e13      	subs	r3, r2, #0
 800127e:	d000      	beq.n	8001282 <HAL_GPIO_Init+0x2be>
 8001280:	e6a8      	b.n	8000fd4 <HAL_GPIO_Init+0x10>
  } 
}
 8001282:	46c0      	nop			; (mov r8, r8)
 8001284:	46c0      	nop			; (mov r8, r8)
 8001286:	46bd      	mov	sp, r7
 8001288:	b006      	add	sp, #24
 800128a:	bd80      	pop	{r7, pc}
 800128c:	40021000 	.word	0x40021000
 8001290:	40010000 	.word	0x40010000
 8001294:	48000400 	.word	0x48000400
 8001298:	48000800 	.word	0x48000800
 800129c:	48000c00 	.word	0x48000c00
 80012a0:	40010400 	.word	0x40010400

080012a4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b084      	sub	sp, #16
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
 80012ac:	000a      	movs	r2, r1
 80012ae:	1cbb      	adds	r3, r7, #2
 80012b0:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	691b      	ldr	r3, [r3, #16]
 80012b6:	1cba      	adds	r2, r7, #2
 80012b8:	8812      	ldrh	r2, [r2, #0]
 80012ba:	4013      	ands	r3, r2
 80012bc:	d004      	beq.n	80012c8 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80012be:	230f      	movs	r3, #15
 80012c0:	18fb      	adds	r3, r7, r3
 80012c2:	2201      	movs	r2, #1
 80012c4:	701a      	strb	r2, [r3, #0]
 80012c6:	e003      	b.n	80012d0 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80012c8:	230f      	movs	r3, #15
 80012ca:	18fb      	adds	r3, r7, r3
 80012cc:	2200      	movs	r2, #0
 80012ce:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80012d0:	230f      	movs	r3, #15
 80012d2:	18fb      	adds	r3, r7, r3
 80012d4:	781b      	ldrb	r3, [r3, #0]
  }
 80012d6:	0018      	movs	r0, r3
 80012d8:	46bd      	mov	sp, r7
 80012da:	b004      	add	sp, #16
 80012dc:	bd80      	pop	{r7, pc}

080012de <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012de:	b580      	push	{r7, lr}
 80012e0:	b082      	sub	sp, #8
 80012e2:	af00      	add	r7, sp, #0
 80012e4:	6078      	str	r0, [r7, #4]
 80012e6:	0008      	movs	r0, r1
 80012e8:	0011      	movs	r1, r2
 80012ea:	1cbb      	adds	r3, r7, #2
 80012ec:	1c02      	adds	r2, r0, #0
 80012ee:	801a      	strh	r2, [r3, #0]
 80012f0:	1c7b      	adds	r3, r7, #1
 80012f2:	1c0a      	adds	r2, r1, #0
 80012f4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80012f6:	1c7b      	adds	r3, r7, #1
 80012f8:	781b      	ldrb	r3, [r3, #0]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d004      	beq.n	8001308 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80012fe:	1cbb      	adds	r3, r7, #2
 8001300:	881a      	ldrh	r2, [r3, #0]
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001306:	e003      	b.n	8001310 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001308:	1cbb      	adds	r3, r7, #2
 800130a:	881a      	ldrh	r2, [r3, #0]
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001310:	46c0      	nop			; (mov r8, r8)
 8001312:	46bd      	mov	sp, r7
 8001314:	b002      	add	sp, #8
 8001316:	bd80      	pop	{r7, pc}

08001318 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b088      	sub	sp, #32
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d101      	bne.n	800132a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001326:	2301      	movs	r3, #1
 8001328:	e301      	b.n	800192e <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	2201      	movs	r2, #1
 8001330:	4013      	ands	r3, r2
 8001332:	d100      	bne.n	8001336 <HAL_RCC_OscConfig+0x1e>
 8001334:	e08d      	b.n	8001452 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001336:	4bc3      	ldr	r3, [pc, #780]	; (8001644 <HAL_RCC_OscConfig+0x32c>)
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	220c      	movs	r2, #12
 800133c:	4013      	ands	r3, r2
 800133e:	2b04      	cmp	r3, #4
 8001340:	d00e      	beq.n	8001360 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001342:	4bc0      	ldr	r3, [pc, #768]	; (8001644 <HAL_RCC_OscConfig+0x32c>)
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	220c      	movs	r2, #12
 8001348:	4013      	ands	r3, r2
 800134a:	2b08      	cmp	r3, #8
 800134c:	d116      	bne.n	800137c <HAL_RCC_OscConfig+0x64>
 800134e:	4bbd      	ldr	r3, [pc, #756]	; (8001644 <HAL_RCC_OscConfig+0x32c>)
 8001350:	685a      	ldr	r2, [r3, #4]
 8001352:	2380      	movs	r3, #128	; 0x80
 8001354:	025b      	lsls	r3, r3, #9
 8001356:	401a      	ands	r2, r3
 8001358:	2380      	movs	r3, #128	; 0x80
 800135a:	025b      	lsls	r3, r3, #9
 800135c:	429a      	cmp	r2, r3
 800135e:	d10d      	bne.n	800137c <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001360:	4bb8      	ldr	r3, [pc, #736]	; (8001644 <HAL_RCC_OscConfig+0x32c>)
 8001362:	681a      	ldr	r2, [r3, #0]
 8001364:	2380      	movs	r3, #128	; 0x80
 8001366:	029b      	lsls	r3, r3, #10
 8001368:	4013      	ands	r3, r2
 800136a:	d100      	bne.n	800136e <HAL_RCC_OscConfig+0x56>
 800136c:	e070      	b.n	8001450 <HAL_RCC_OscConfig+0x138>
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	2b00      	cmp	r3, #0
 8001374:	d000      	beq.n	8001378 <HAL_RCC_OscConfig+0x60>
 8001376:	e06b      	b.n	8001450 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8001378:	2301      	movs	r3, #1
 800137a:	e2d8      	b.n	800192e <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	2b01      	cmp	r3, #1
 8001382:	d107      	bne.n	8001394 <HAL_RCC_OscConfig+0x7c>
 8001384:	4baf      	ldr	r3, [pc, #700]	; (8001644 <HAL_RCC_OscConfig+0x32c>)
 8001386:	681a      	ldr	r2, [r3, #0]
 8001388:	4bae      	ldr	r3, [pc, #696]	; (8001644 <HAL_RCC_OscConfig+0x32c>)
 800138a:	2180      	movs	r1, #128	; 0x80
 800138c:	0249      	lsls	r1, r1, #9
 800138e:	430a      	orrs	r2, r1
 8001390:	601a      	str	r2, [r3, #0]
 8001392:	e02f      	b.n	80013f4 <HAL_RCC_OscConfig+0xdc>
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d10c      	bne.n	80013b6 <HAL_RCC_OscConfig+0x9e>
 800139c:	4ba9      	ldr	r3, [pc, #676]	; (8001644 <HAL_RCC_OscConfig+0x32c>)
 800139e:	681a      	ldr	r2, [r3, #0]
 80013a0:	4ba8      	ldr	r3, [pc, #672]	; (8001644 <HAL_RCC_OscConfig+0x32c>)
 80013a2:	49a9      	ldr	r1, [pc, #676]	; (8001648 <HAL_RCC_OscConfig+0x330>)
 80013a4:	400a      	ands	r2, r1
 80013a6:	601a      	str	r2, [r3, #0]
 80013a8:	4ba6      	ldr	r3, [pc, #664]	; (8001644 <HAL_RCC_OscConfig+0x32c>)
 80013aa:	681a      	ldr	r2, [r3, #0]
 80013ac:	4ba5      	ldr	r3, [pc, #660]	; (8001644 <HAL_RCC_OscConfig+0x32c>)
 80013ae:	49a7      	ldr	r1, [pc, #668]	; (800164c <HAL_RCC_OscConfig+0x334>)
 80013b0:	400a      	ands	r2, r1
 80013b2:	601a      	str	r2, [r3, #0]
 80013b4:	e01e      	b.n	80013f4 <HAL_RCC_OscConfig+0xdc>
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	2b05      	cmp	r3, #5
 80013bc:	d10e      	bne.n	80013dc <HAL_RCC_OscConfig+0xc4>
 80013be:	4ba1      	ldr	r3, [pc, #644]	; (8001644 <HAL_RCC_OscConfig+0x32c>)
 80013c0:	681a      	ldr	r2, [r3, #0]
 80013c2:	4ba0      	ldr	r3, [pc, #640]	; (8001644 <HAL_RCC_OscConfig+0x32c>)
 80013c4:	2180      	movs	r1, #128	; 0x80
 80013c6:	02c9      	lsls	r1, r1, #11
 80013c8:	430a      	orrs	r2, r1
 80013ca:	601a      	str	r2, [r3, #0]
 80013cc:	4b9d      	ldr	r3, [pc, #628]	; (8001644 <HAL_RCC_OscConfig+0x32c>)
 80013ce:	681a      	ldr	r2, [r3, #0]
 80013d0:	4b9c      	ldr	r3, [pc, #624]	; (8001644 <HAL_RCC_OscConfig+0x32c>)
 80013d2:	2180      	movs	r1, #128	; 0x80
 80013d4:	0249      	lsls	r1, r1, #9
 80013d6:	430a      	orrs	r2, r1
 80013d8:	601a      	str	r2, [r3, #0]
 80013da:	e00b      	b.n	80013f4 <HAL_RCC_OscConfig+0xdc>
 80013dc:	4b99      	ldr	r3, [pc, #612]	; (8001644 <HAL_RCC_OscConfig+0x32c>)
 80013de:	681a      	ldr	r2, [r3, #0]
 80013e0:	4b98      	ldr	r3, [pc, #608]	; (8001644 <HAL_RCC_OscConfig+0x32c>)
 80013e2:	4999      	ldr	r1, [pc, #612]	; (8001648 <HAL_RCC_OscConfig+0x330>)
 80013e4:	400a      	ands	r2, r1
 80013e6:	601a      	str	r2, [r3, #0]
 80013e8:	4b96      	ldr	r3, [pc, #600]	; (8001644 <HAL_RCC_OscConfig+0x32c>)
 80013ea:	681a      	ldr	r2, [r3, #0]
 80013ec:	4b95      	ldr	r3, [pc, #596]	; (8001644 <HAL_RCC_OscConfig+0x32c>)
 80013ee:	4997      	ldr	r1, [pc, #604]	; (800164c <HAL_RCC_OscConfig+0x334>)
 80013f0:	400a      	ands	r2, r1
 80013f2:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d014      	beq.n	8001426 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013fc:	f7ff fd00 	bl	8000e00 <HAL_GetTick>
 8001400:	0003      	movs	r3, r0
 8001402:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001404:	e008      	b.n	8001418 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001406:	f7ff fcfb 	bl	8000e00 <HAL_GetTick>
 800140a:	0002      	movs	r2, r0
 800140c:	69bb      	ldr	r3, [r7, #24]
 800140e:	1ad3      	subs	r3, r2, r3
 8001410:	2b64      	cmp	r3, #100	; 0x64
 8001412:	d901      	bls.n	8001418 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8001414:	2303      	movs	r3, #3
 8001416:	e28a      	b.n	800192e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001418:	4b8a      	ldr	r3, [pc, #552]	; (8001644 <HAL_RCC_OscConfig+0x32c>)
 800141a:	681a      	ldr	r2, [r3, #0]
 800141c:	2380      	movs	r3, #128	; 0x80
 800141e:	029b      	lsls	r3, r3, #10
 8001420:	4013      	ands	r3, r2
 8001422:	d0f0      	beq.n	8001406 <HAL_RCC_OscConfig+0xee>
 8001424:	e015      	b.n	8001452 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001426:	f7ff fceb 	bl	8000e00 <HAL_GetTick>
 800142a:	0003      	movs	r3, r0
 800142c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800142e:	e008      	b.n	8001442 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001430:	f7ff fce6 	bl	8000e00 <HAL_GetTick>
 8001434:	0002      	movs	r2, r0
 8001436:	69bb      	ldr	r3, [r7, #24]
 8001438:	1ad3      	subs	r3, r2, r3
 800143a:	2b64      	cmp	r3, #100	; 0x64
 800143c:	d901      	bls.n	8001442 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800143e:	2303      	movs	r3, #3
 8001440:	e275      	b.n	800192e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001442:	4b80      	ldr	r3, [pc, #512]	; (8001644 <HAL_RCC_OscConfig+0x32c>)
 8001444:	681a      	ldr	r2, [r3, #0]
 8001446:	2380      	movs	r3, #128	; 0x80
 8001448:	029b      	lsls	r3, r3, #10
 800144a:	4013      	ands	r3, r2
 800144c:	d1f0      	bne.n	8001430 <HAL_RCC_OscConfig+0x118>
 800144e:	e000      	b.n	8001452 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001450:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	2202      	movs	r2, #2
 8001458:	4013      	ands	r3, r2
 800145a:	d100      	bne.n	800145e <HAL_RCC_OscConfig+0x146>
 800145c:	e069      	b.n	8001532 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800145e:	4b79      	ldr	r3, [pc, #484]	; (8001644 <HAL_RCC_OscConfig+0x32c>)
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	220c      	movs	r2, #12
 8001464:	4013      	ands	r3, r2
 8001466:	d00b      	beq.n	8001480 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001468:	4b76      	ldr	r3, [pc, #472]	; (8001644 <HAL_RCC_OscConfig+0x32c>)
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	220c      	movs	r2, #12
 800146e:	4013      	ands	r3, r2
 8001470:	2b08      	cmp	r3, #8
 8001472:	d11c      	bne.n	80014ae <HAL_RCC_OscConfig+0x196>
 8001474:	4b73      	ldr	r3, [pc, #460]	; (8001644 <HAL_RCC_OscConfig+0x32c>)
 8001476:	685a      	ldr	r2, [r3, #4]
 8001478:	2380      	movs	r3, #128	; 0x80
 800147a:	025b      	lsls	r3, r3, #9
 800147c:	4013      	ands	r3, r2
 800147e:	d116      	bne.n	80014ae <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001480:	4b70      	ldr	r3, [pc, #448]	; (8001644 <HAL_RCC_OscConfig+0x32c>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	2202      	movs	r2, #2
 8001486:	4013      	ands	r3, r2
 8001488:	d005      	beq.n	8001496 <HAL_RCC_OscConfig+0x17e>
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	68db      	ldr	r3, [r3, #12]
 800148e:	2b01      	cmp	r3, #1
 8001490:	d001      	beq.n	8001496 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001492:	2301      	movs	r3, #1
 8001494:	e24b      	b.n	800192e <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001496:	4b6b      	ldr	r3, [pc, #428]	; (8001644 <HAL_RCC_OscConfig+0x32c>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	22f8      	movs	r2, #248	; 0xf8
 800149c:	4393      	bics	r3, r2
 800149e:	0019      	movs	r1, r3
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	691b      	ldr	r3, [r3, #16]
 80014a4:	00da      	lsls	r2, r3, #3
 80014a6:	4b67      	ldr	r3, [pc, #412]	; (8001644 <HAL_RCC_OscConfig+0x32c>)
 80014a8:	430a      	orrs	r2, r1
 80014aa:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014ac:	e041      	b.n	8001532 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	68db      	ldr	r3, [r3, #12]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d024      	beq.n	8001500 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014b6:	4b63      	ldr	r3, [pc, #396]	; (8001644 <HAL_RCC_OscConfig+0x32c>)
 80014b8:	681a      	ldr	r2, [r3, #0]
 80014ba:	4b62      	ldr	r3, [pc, #392]	; (8001644 <HAL_RCC_OscConfig+0x32c>)
 80014bc:	2101      	movs	r1, #1
 80014be:	430a      	orrs	r2, r1
 80014c0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014c2:	f7ff fc9d 	bl	8000e00 <HAL_GetTick>
 80014c6:	0003      	movs	r3, r0
 80014c8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014ca:	e008      	b.n	80014de <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014cc:	f7ff fc98 	bl	8000e00 <HAL_GetTick>
 80014d0:	0002      	movs	r2, r0
 80014d2:	69bb      	ldr	r3, [r7, #24]
 80014d4:	1ad3      	subs	r3, r2, r3
 80014d6:	2b02      	cmp	r3, #2
 80014d8:	d901      	bls.n	80014de <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 80014da:	2303      	movs	r3, #3
 80014dc:	e227      	b.n	800192e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014de:	4b59      	ldr	r3, [pc, #356]	; (8001644 <HAL_RCC_OscConfig+0x32c>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	2202      	movs	r2, #2
 80014e4:	4013      	ands	r3, r2
 80014e6:	d0f1      	beq.n	80014cc <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014e8:	4b56      	ldr	r3, [pc, #344]	; (8001644 <HAL_RCC_OscConfig+0x32c>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	22f8      	movs	r2, #248	; 0xf8
 80014ee:	4393      	bics	r3, r2
 80014f0:	0019      	movs	r1, r3
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	691b      	ldr	r3, [r3, #16]
 80014f6:	00da      	lsls	r2, r3, #3
 80014f8:	4b52      	ldr	r3, [pc, #328]	; (8001644 <HAL_RCC_OscConfig+0x32c>)
 80014fa:	430a      	orrs	r2, r1
 80014fc:	601a      	str	r2, [r3, #0]
 80014fe:	e018      	b.n	8001532 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001500:	4b50      	ldr	r3, [pc, #320]	; (8001644 <HAL_RCC_OscConfig+0x32c>)
 8001502:	681a      	ldr	r2, [r3, #0]
 8001504:	4b4f      	ldr	r3, [pc, #316]	; (8001644 <HAL_RCC_OscConfig+0x32c>)
 8001506:	2101      	movs	r1, #1
 8001508:	438a      	bics	r2, r1
 800150a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800150c:	f7ff fc78 	bl	8000e00 <HAL_GetTick>
 8001510:	0003      	movs	r3, r0
 8001512:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001514:	e008      	b.n	8001528 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001516:	f7ff fc73 	bl	8000e00 <HAL_GetTick>
 800151a:	0002      	movs	r2, r0
 800151c:	69bb      	ldr	r3, [r7, #24]
 800151e:	1ad3      	subs	r3, r2, r3
 8001520:	2b02      	cmp	r3, #2
 8001522:	d901      	bls.n	8001528 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8001524:	2303      	movs	r3, #3
 8001526:	e202      	b.n	800192e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001528:	4b46      	ldr	r3, [pc, #280]	; (8001644 <HAL_RCC_OscConfig+0x32c>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	2202      	movs	r2, #2
 800152e:	4013      	ands	r3, r2
 8001530:	d1f1      	bne.n	8001516 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	2208      	movs	r2, #8
 8001538:	4013      	ands	r3, r2
 800153a:	d036      	beq.n	80015aa <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	69db      	ldr	r3, [r3, #28]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d019      	beq.n	8001578 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001544:	4b3f      	ldr	r3, [pc, #252]	; (8001644 <HAL_RCC_OscConfig+0x32c>)
 8001546:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001548:	4b3e      	ldr	r3, [pc, #248]	; (8001644 <HAL_RCC_OscConfig+0x32c>)
 800154a:	2101      	movs	r1, #1
 800154c:	430a      	orrs	r2, r1
 800154e:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001550:	f7ff fc56 	bl	8000e00 <HAL_GetTick>
 8001554:	0003      	movs	r3, r0
 8001556:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001558:	e008      	b.n	800156c <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800155a:	f7ff fc51 	bl	8000e00 <HAL_GetTick>
 800155e:	0002      	movs	r2, r0
 8001560:	69bb      	ldr	r3, [r7, #24]
 8001562:	1ad3      	subs	r3, r2, r3
 8001564:	2b02      	cmp	r3, #2
 8001566:	d901      	bls.n	800156c <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8001568:	2303      	movs	r3, #3
 800156a:	e1e0      	b.n	800192e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800156c:	4b35      	ldr	r3, [pc, #212]	; (8001644 <HAL_RCC_OscConfig+0x32c>)
 800156e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001570:	2202      	movs	r2, #2
 8001572:	4013      	ands	r3, r2
 8001574:	d0f1      	beq.n	800155a <HAL_RCC_OscConfig+0x242>
 8001576:	e018      	b.n	80015aa <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001578:	4b32      	ldr	r3, [pc, #200]	; (8001644 <HAL_RCC_OscConfig+0x32c>)
 800157a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800157c:	4b31      	ldr	r3, [pc, #196]	; (8001644 <HAL_RCC_OscConfig+0x32c>)
 800157e:	2101      	movs	r1, #1
 8001580:	438a      	bics	r2, r1
 8001582:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001584:	f7ff fc3c 	bl	8000e00 <HAL_GetTick>
 8001588:	0003      	movs	r3, r0
 800158a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800158c:	e008      	b.n	80015a0 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800158e:	f7ff fc37 	bl	8000e00 <HAL_GetTick>
 8001592:	0002      	movs	r2, r0
 8001594:	69bb      	ldr	r3, [r7, #24]
 8001596:	1ad3      	subs	r3, r2, r3
 8001598:	2b02      	cmp	r3, #2
 800159a:	d901      	bls.n	80015a0 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 800159c:	2303      	movs	r3, #3
 800159e:	e1c6      	b.n	800192e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015a0:	4b28      	ldr	r3, [pc, #160]	; (8001644 <HAL_RCC_OscConfig+0x32c>)
 80015a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015a4:	2202      	movs	r2, #2
 80015a6:	4013      	ands	r3, r2
 80015a8:	d1f1      	bne.n	800158e <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	2204      	movs	r2, #4
 80015b0:	4013      	ands	r3, r2
 80015b2:	d100      	bne.n	80015b6 <HAL_RCC_OscConfig+0x29e>
 80015b4:	e0b4      	b.n	8001720 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015b6:	201f      	movs	r0, #31
 80015b8:	183b      	adds	r3, r7, r0
 80015ba:	2200      	movs	r2, #0
 80015bc:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015be:	4b21      	ldr	r3, [pc, #132]	; (8001644 <HAL_RCC_OscConfig+0x32c>)
 80015c0:	69da      	ldr	r2, [r3, #28]
 80015c2:	2380      	movs	r3, #128	; 0x80
 80015c4:	055b      	lsls	r3, r3, #21
 80015c6:	4013      	ands	r3, r2
 80015c8:	d110      	bne.n	80015ec <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015ca:	4b1e      	ldr	r3, [pc, #120]	; (8001644 <HAL_RCC_OscConfig+0x32c>)
 80015cc:	69da      	ldr	r2, [r3, #28]
 80015ce:	4b1d      	ldr	r3, [pc, #116]	; (8001644 <HAL_RCC_OscConfig+0x32c>)
 80015d0:	2180      	movs	r1, #128	; 0x80
 80015d2:	0549      	lsls	r1, r1, #21
 80015d4:	430a      	orrs	r2, r1
 80015d6:	61da      	str	r2, [r3, #28]
 80015d8:	4b1a      	ldr	r3, [pc, #104]	; (8001644 <HAL_RCC_OscConfig+0x32c>)
 80015da:	69da      	ldr	r2, [r3, #28]
 80015dc:	2380      	movs	r3, #128	; 0x80
 80015de:	055b      	lsls	r3, r3, #21
 80015e0:	4013      	ands	r3, r2
 80015e2:	60fb      	str	r3, [r7, #12]
 80015e4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80015e6:	183b      	adds	r3, r7, r0
 80015e8:	2201      	movs	r2, #1
 80015ea:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015ec:	4b18      	ldr	r3, [pc, #96]	; (8001650 <HAL_RCC_OscConfig+0x338>)
 80015ee:	681a      	ldr	r2, [r3, #0]
 80015f0:	2380      	movs	r3, #128	; 0x80
 80015f2:	005b      	lsls	r3, r3, #1
 80015f4:	4013      	ands	r3, r2
 80015f6:	d11a      	bne.n	800162e <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015f8:	4b15      	ldr	r3, [pc, #84]	; (8001650 <HAL_RCC_OscConfig+0x338>)
 80015fa:	681a      	ldr	r2, [r3, #0]
 80015fc:	4b14      	ldr	r3, [pc, #80]	; (8001650 <HAL_RCC_OscConfig+0x338>)
 80015fe:	2180      	movs	r1, #128	; 0x80
 8001600:	0049      	lsls	r1, r1, #1
 8001602:	430a      	orrs	r2, r1
 8001604:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001606:	f7ff fbfb 	bl	8000e00 <HAL_GetTick>
 800160a:	0003      	movs	r3, r0
 800160c:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800160e:	e008      	b.n	8001622 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001610:	f7ff fbf6 	bl	8000e00 <HAL_GetTick>
 8001614:	0002      	movs	r2, r0
 8001616:	69bb      	ldr	r3, [r7, #24]
 8001618:	1ad3      	subs	r3, r2, r3
 800161a:	2b64      	cmp	r3, #100	; 0x64
 800161c:	d901      	bls.n	8001622 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 800161e:	2303      	movs	r3, #3
 8001620:	e185      	b.n	800192e <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001622:	4b0b      	ldr	r3, [pc, #44]	; (8001650 <HAL_RCC_OscConfig+0x338>)
 8001624:	681a      	ldr	r2, [r3, #0]
 8001626:	2380      	movs	r3, #128	; 0x80
 8001628:	005b      	lsls	r3, r3, #1
 800162a:	4013      	ands	r3, r2
 800162c:	d0f0      	beq.n	8001610 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	689b      	ldr	r3, [r3, #8]
 8001632:	2b01      	cmp	r3, #1
 8001634:	d10e      	bne.n	8001654 <HAL_RCC_OscConfig+0x33c>
 8001636:	4b03      	ldr	r3, [pc, #12]	; (8001644 <HAL_RCC_OscConfig+0x32c>)
 8001638:	6a1a      	ldr	r2, [r3, #32]
 800163a:	4b02      	ldr	r3, [pc, #8]	; (8001644 <HAL_RCC_OscConfig+0x32c>)
 800163c:	2101      	movs	r1, #1
 800163e:	430a      	orrs	r2, r1
 8001640:	621a      	str	r2, [r3, #32]
 8001642:	e035      	b.n	80016b0 <HAL_RCC_OscConfig+0x398>
 8001644:	40021000 	.word	0x40021000
 8001648:	fffeffff 	.word	0xfffeffff
 800164c:	fffbffff 	.word	0xfffbffff
 8001650:	40007000 	.word	0x40007000
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	689b      	ldr	r3, [r3, #8]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d10c      	bne.n	8001676 <HAL_RCC_OscConfig+0x35e>
 800165c:	4bb6      	ldr	r3, [pc, #728]	; (8001938 <HAL_RCC_OscConfig+0x620>)
 800165e:	6a1a      	ldr	r2, [r3, #32]
 8001660:	4bb5      	ldr	r3, [pc, #724]	; (8001938 <HAL_RCC_OscConfig+0x620>)
 8001662:	2101      	movs	r1, #1
 8001664:	438a      	bics	r2, r1
 8001666:	621a      	str	r2, [r3, #32]
 8001668:	4bb3      	ldr	r3, [pc, #716]	; (8001938 <HAL_RCC_OscConfig+0x620>)
 800166a:	6a1a      	ldr	r2, [r3, #32]
 800166c:	4bb2      	ldr	r3, [pc, #712]	; (8001938 <HAL_RCC_OscConfig+0x620>)
 800166e:	2104      	movs	r1, #4
 8001670:	438a      	bics	r2, r1
 8001672:	621a      	str	r2, [r3, #32]
 8001674:	e01c      	b.n	80016b0 <HAL_RCC_OscConfig+0x398>
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	689b      	ldr	r3, [r3, #8]
 800167a:	2b05      	cmp	r3, #5
 800167c:	d10c      	bne.n	8001698 <HAL_RCC_OscConfig+0x380>
 800167e:	4bae      	ldr	r3, [pc, #696]	; (8001938 <HAL_RCC_OscConfig+0x620>)
 8001680:	6a1a      	ldr	r2, [r3, #32]
 8001682:	4bad      	ldr	r3, [pc, #692]	; (8001938 <HAL_RCC_OscConfig+0x620>)
 8001684:	2104      	movs	r1, #4
 8001686:	430a      	orrs	r2, r1
 8001688:	621a      	str	r2, [r3, #32]
 800168a:	4bab      	ldr	r3, [pc, #684]	; (8001938 <HAL_RCC_OscConfig+0x620>)
 800168c:	6a1a      	ldr	r2, [r3, #32]
 800168e:	4baa      	ldr	r3, [pc, #680]	; (8001938 <HAL_RCC_OscConfig+0x620>)
 8001690:	2101      	movs	r1, #1
 8001692:	430a      	orrs	r2, r1
 8001694:	621a      	str	r2, [r3, #32]
 8001696:	e00b      	b.n	80016b0 <HAL_RCC_OscConfig+0x398>
 8001698:	4ba7      	ldr	r3, [pc, #668]	; (8001938 <HAL_RCC_OscConfig+0x620>)
 800169a:	6a1a      	ldr	r2, [r3, #32]
 800169c:	4ba6      	ldr	r3, [pc, #664]	; (8001938 <HAL_RCC_OscConfig+0x620>)
 800169e:	2101      	movs	r1, #1
 80016a0:	438a      	bics	r2, r1
 80016a2:	621a      	str	r2, [r3, #32]
 80016a4:	4ba4      	ldr	r3, [pc, #656]	; (8001938 <HAL_RCC_OscConfig+0x620>)
 80016a6:	6a1a      	ldr	r2, [r3, #32]
 80016a8:	4ba3      	ldr	r3, [pc, #652]	; (8001938 <HAL_RCC_OscConfig+0x620>)
 80016aa:	2104      	movs	r1, #4
 80016ac:	438a      	bics	r2, r1
 80016ae:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	689b      	ldr	r3, [r3, #8]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d014      	beq.n	80016e2 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016b8:	f7ff fba2 	bl	8000e00 <HAL_GetTick>
 80016bc:	0003      	movs	r3, r0
 80016be:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016c0:	e009      	b.n	80016d6 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016c2:	f7ff fb9d 	bl	8000e00 <HAL_GetTick>
 80016c6:	0002      	movs	r2, r0
 80016c8:	69bb      	ldr	r3, [r7, #24]
 80016ca:	1ad3      	subs	r3, r2, r3
 80016cc:	4a9b      	ldr	r2, [pc, #620]	; (800193c <HAL_RCC_OscConfig+0x624>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d901      	bls.n	80016d6 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 80016d2:	2303      	movs	r3, #3
 80016d4:	e12b      	b.n	800192e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016d6:	4b98      	ldr	r3, [pc, #608]	; (8001938 <HAL_RCC_OscConfig+0x620>)
 80016d8:	6a1b      	ldr	r3, [r3, #32]
 80016da:	2202      	movs	r2, #2
 80016dc:	4013      	ands	r3, r2
 80016de:	d0f0      	beq.n	80016c2 <HAL_RCC_OscConfig+0x3aa>
 80016e0:	e013      	b.n	800170a <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016e2:	f7ff fb8d 	bl	8000e00 <HAL_GetTick>
 80016e6:	0003      	movs	r3, r0
 80016e8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016ea:	e009      	b.n	8001700 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016ec:	f7ff fb88 	bl	8000e00 <HAL_GetTick>
 80016f0:	0002      	movs	r2, r0
 80016f2:	69bb      	ldr	r3, [r7, #24]
 80016f4:	1ad3      	subs	r3, r2, r3
 80016f6:	4a91      	ldr	r2, [pc, #580]	; (800193c <HAL_RCC_OscConfig+0x624>)
 80016f8:	4293      	cmp	r3, r2
 80016fa:	d901      	bls.n	8001700 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 80016fc:	2303      	movs	r3, #3
 80016fe:	e116      	b.n	800192e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001700:	4b8d      	ldr	r3, [pc, #564]	; (8001938 <HAL_RCC_OscConfig+0x620>)
 8001702:	6a1b      	ldr	r3, [r3, #32]
 8001704:	2202      	movs	r2, #2
 8001706:	4013      	ands	r3, r2
 8001708:	d1f0      	bne.n	80016ec <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800170a:	231f      	movs	r3, #31
 800170c:	18fb      	adds	r3, r7, r3
 800170e:	781b      	ldrb	r3, [r3, #0]
 8001710:	2b01      	cmp	r3, #1
 8001712:	d105      	bne.n	8001720 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001714:	4b88      	ldr	r3, [pc, #544]	; (8001938 <HAL_RCC_OscConfig+0x620>)
 8001716:	69da      	ldr	r2, [r3, #28]
 8001718:	4b87      	ldr	r3, [pc, #540]	; (8001938 <HAL_RCC_OscConfig+0x620>)
 800171a:	4989      	ldr	r1, [pc, #548]	; (8001940 <HAL_RCC_OscConfig+0x628>)
 800171c:	400a      	ands	r2, r1
 800171e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	2210      	movs	r2, #16
 8001726:	4013      	ands	r3, r2
 8001728:	d063      	beq.n	80017f2 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	695b      	ldr	r3, [r3, #20]
 800172e:	2b01      	cmp	r3, #1
 8001730:	d12a      	bne.n	8001788 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001732:	4b81      	ldr	r3, [pc, #516]	; (8001938 <HAL_RCC_OscConfig+0x620>)
 8001734:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001736:	4b80      	ldr	r3, [pc, #512]	; (8001938 <HAL_RCC_OscConfig+0x620>)
 8001738:	2104      	movs	r1, #4
 800173a:	430a      	orrs	r2, r1
 800173c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800173e:	4b7e      	ldr	r3, [pc, #504]	; (8001938 <HAL_RCC_OscConfig+0x620>)
 8001740:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001742:	4b7d      	ldr	r3, [pc, #500]	; (8001938 <HAL_RCC_OscConfig+0x620>)
 8001744:	2101      	movs	r1, #1
 8001746:	430a      	orrs	r2, r1
 8001748:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800174a:	f7ff fb59 	bl	8000e00 <HAL_GetTick>
 800174e:	0003      	movs	r3, r0
 8001750:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001752:	e008      	b.n	8001766 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001754:	f7ff fb54 	bl	8000e00 <HAL_GetTick>
 8001758:	0002      	movs	r2, r0
 800175a:	69bb      	ldr	r3, [r7, #24]
 800175c:	1ad3      	subs	r3, r2, r3
 800175e:	2b02      	cmp	r3, #2
 8001760:	d901      	bls.n	8001766 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8001762:	2303      	movs	r3, #3
 8001764:	e0e3      	b.n	800192e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001766:	4b74      	ldr	r3, [pc, #464]	; (8001938 <HAL_RCC_OscConfig+0x620>)
 8001768:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800176a:	2202      	movs	r2, #2
 800176c:	4013      	ands	r3, r2
 800176e:	d0f1      	beq.n	8001754 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001770:	4b71      	ldr	r3, [pc, #452]	; (8001938 <HAL_RCC_OscConfig+0x620>)
 8001772:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001774:	22f8      	movs	r2, #248	; 0xf8
 8001776:	4393      	bics	r3, r2
 8001778:	0019      	movs	r1, r3
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	699b      	ldr	r3, [r3, #24]
 800177e:	00da      	lsls	r2, r3, #3
 8001780:	4b6d      	ldr	r3, [pc, #436]	; (8001938 <HAL_RCC_OscConfig+0x620>)
 8001782:	430a      	orrs	r2, r1
 8001784:	635a      	str	r2, [r3, #52]	; 0x34
 8001786:	e034      	b.n	80017f2 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	695b      	ldr	r3, [r3, #20]
 800178c:	3305      	adds	r3, #5
 800178e:	d111      	bne.n	80017b4 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001790:	4b69      	ldr	r3, [pc, #420]	; (8001938 <HAL_RCC_OscConfig+0x620>)
 8001792:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001794:	4b68      	ldr	r3, [pc, #416]	; (8001938 <HAL_RCC_OscConfig+0x620>)
 8001796:	2104      	movs	r1, #4
 8001798:	438a      	bics	r2, r1
 800179a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800179c:	4b66      	ldr	r3, [pc, #408]	; (8001938 <HAL_RCC_OscConfig+0x620>)
 800179e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017a0:	22f8      	movs	r2, #248	; 0xf8
 80017a2:	4393      	bics	r3, r2
 80017a4:	0019      	movs	r1, r3
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	699b      	ldr	r3, [r3, #24]
 80017aa:	00da      	lsls	r2, r3, #3
 80017ac:	4b62      	ldr	r3, [pc, #392]	; (8001938 <HAL_RCC_OscConfig+0x620>)
 80017ae:	430a      	orrs	r2, r1
 80017b0:	635a      	str	r2, [r3, #52]	; 0x34
 80017b2:	e01e      	b.n	80017f2 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80017b4:	4b60      	ldr	r3, [pc, #384]	; (8001938 <HAL_RCC_OscConfig+0x620>)
 80017b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80017b8:	4b5f      	ldr	r3, [pc, #380]	; (8001938 <HAL_RCC_OscConfig+0x620>)
 80017ba:	2104      	movs	r1, #4
 80017bc:	430a      	orrs	r2, r1
 80017be:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80017c0:	4b5d      	ldr	r3, [pc, #372]	; (8001938 <HAL_RCC_OscConfig+0x620>)
 80017c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80017c4:	4b5c      	ldr	r3, [pc, #368]	; (8001938 <HAL_RCC_OscConfig+0x620>)
 80017c6:	2101      	movs	r1, #1
 80017c8:	438a      	bics	r2, r1
 80017ca:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017cc:	f7ff fb18 	bl	8000e00 <HAL_GetTick>
 80017d0:	0003      	movs	r3, r0
 80017d2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80017d4:	e008      	b.n	80017e8 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80017d6:	f7ff fb13 	bl	8000e00 <HAL_GetTick>
 80017da:	0002      	movs	r2, r0
 80017dc:	69bb      	ldr	r3, [r7, #24]
 80017de:	1ad3      	subs	r3, r2, r3
 80017e0:	2b02      	cmp	r3, #2
 80017e2:	d901      	bls.n	80017e8 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 80017e4:	2303      	movs	r3, #3
 80017e6:	e0a2      	b.n	800192e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80017e8:	4b53      	ldr	r3, [pc, #332]	; (8001938 <HAL_RCC_OscConfig+0x620>)
 80017ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017ec:	2202      	movs	r2, #2
 80017ee:	4013      	ands	r3, r2
 80017f0:	d1f1      	bne.n	80017d6 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6a1b      	ldr	r3, [r3, #32]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d100      	bne.n	80017fc <HAL_RCC_OscConfig+0x4e4>
 80017fa:	e097      	b.n	800192c <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80017fc:	4b4e      	ldr	r3, [pc, #312]	; (8001938 <HAL_RCC_OscConfig+0x620>)
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	220c      	movs	r2, #12
 8001802:	4013      	ands	r3, r2
 8001804:	2b08      	cmp	r3, #8
 8001806:	d100      	bne.n	800180a <HAL_RCC_OscConfig+0x4f2>
 8001808:	e06b      	b.n	80018e2 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6a1b      	ldr	r3, [r3, #32]
 800180e:	2b02      	cmp	r3, #2
 8001810:	d14c      	bne.n	80018ac <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001812:	4b49      	ldr	r3, [pc, #292]	; (8001938 <HAL_RCC_OscConfig+0x620>)
 8001814:	681a      	ldr	r2, [r3, #0]
 8001816:	4b48      	ldr	r3, [pc, #288]	; (8001938 <HAL_RCC_OscConfig+0x620>)
 8001818:	494a      	ldr	r1, [pc, #296]	; (8001944 <HAL_RCC_OscConfig+0x62c>)
 800181a:	400a      	ands	r2, r1
 800181c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800181e:	f7ff faef 	bl	8000e00 <HAL_GetTick>
 8001822:	0003      	movs	r3, r0
 8001824:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001826:	e008      	b.n	800183a <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001828:	f7ff faea 	bl	8000e00 <HAL_GetTick>
 800182c:	0002      	movs	r2, r0
 800182e:	69bb      	ldr	r3, [r7, #24]
 8001830:	1ad3      	subs	r3, r2, r3
 8001832:	2b02      	cmp	r3, #2
 8001834:	d901      	bls.n	800183a <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8001836:	2303      	movs	r3, #3
 8001838:	e079      	b.n	800192e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800183a:	4b3f      	ldr	r3, [pc, #252]	; (8001938 <HAL_RCC_OscConfig+0x620>)
 800183c:	681a      	ldr	r2, [r3, #0]
 800183e:	2380      	movs	r3, #128	; 0x80
 8001840:	049b      	lsls	r3, r3, #18
 8001842:	4013      	ands	r3, r2
 8001844:	d1f0      	bne.n	8001828 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001846:	4b3c      	ldr	r3, [pc, #240]	; (8001938 <HAL_RCC_OscConfig+0x620>)
 8001848:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800184a:	220f      	movs	r2, #15
 800184c:	4393      	bics	r3, r2
 800184e:	0019      	movs	r1, r3
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001854:	4b38      	ldr	r3, [pc, #224]	; (8001938 <HAL_RCC_OscConfig+0x620>)
 8001856:	430a      	orrs	r2, r1
 8001858:	62da      	str	r2, [r3, #44]	; 0x2c
 800185a:	4b37      	ldr	r3, [pc, #220]	; (8001938 <HAL_RCC_OscConfig+0x620>)
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	4a3a      	ldr	r2, [pc, #232]	; (8001948 <HAL_RCC_OscConfig+0x630>)
 8001860:	4013      	ands	r3, r2
 8001862:	0019      	movs	r1, r3
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800186c:	431a      	orrs	r2, r3
 800186e:	4b32      	ldr	r3, [pc, #200]	; (8001938 <HAL_RCC_OscConfig+0x620>)
 8001870:	430a      	orrs	r2, r1
 8001872:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001874:	4b30      	ldr	r3, [pc, #192]	; (8001938 <HAL_RCC_OscConfig+0x620>)
 8001876:	681a      	ldr	r2, [r3, #0]
 8001878:	4b2f      	ldr	r3, [pc, #188]	; (8001938 <HAL_RCC_OscConfig+0x620>)
 800187a:	2180      	movs	r1, #128	; 0x80
 800187c:	0449      	lsls	r1, r1, #17
 800187e:	430a      	orrs	r2, r1
 8001880:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001882:	f7ff fabd 	bl	8000e00 <HAL_GetTick>
 8001886:	0003      	movs	r3, r0
 8001888:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800188a:	e008      	b.n	800189e <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800188c:	f7ff fab8 	bl	8000e00 <HAL_GetTick>
 8001890:	0002      	movs	r2, r0
 8001892:	69bb      	ldr	r3, [r7, #24]
 8001894:	1ad3      	subs	r3, r2, r3
 8001896:	2b02      	cmp	r3, #2
 8001898:	d901      	bls.n	800189e <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 800189a:	2303      	movs	r3, #3
 800189c:	e047      	b.n	800192e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800189e:	4b26      	ldr	r3, [pc, #152]	; (8001938 <HAL_RCC_OscConfig+0x620>)
 80018a0:	681a      	ldr	r2, [r3, #0]
 80018a2:	2380      	movs	r3, #128	; 0x80
 80018a4:	049b      	lsls	r3, r3, #18
 80018a6:	4013      	ands	r3, r2
 80018a8:	d0f0      	beq.n	800188c <HAL_RCC_OscConfig+0x574>
 80018aa:	e03f      	b.n	800192c <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018ac:	4b22      	ldr	r3, [pc, #136]	; (8001938 <HAL_RCC_OscConfig+0x620>)
 80018ae:	681a      	ldr	r2, [r3, #0]
 80018b0:	4b21      	ldr	r3, [pc, #132]	; (8001938 <HAL_RCC_OscConfig+0x620>)
 80018b2:	4924      	ldr	r1, [pc, #144]	; (8001944 <HAL_RCC_OscConfig+0x62c>)
 80018b4:	400a      	ands	r2, r1
 80018b6:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018b8:	f7ff faa2 	bl	8000e00 <HAL_GetTick>
 80018bc:	0003      	movs	r3, r0
 80018be:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018c0:	e008      	b.n	80018d4 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018c2:	f7ff fa9d 	bl	8000e00 <HAL_GetTick>
 80018c6:	0002      	movs	r2, r0
 80018c8:	69bb      	ldr	r3, [r7, #24]
 80018ca:	1ad3      	subs	r3, r2, r3
 80018cc:	2b02      	cmp	r3, #2
 80018ce:	d901      	bls.n	80018d4 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 80018d0:	2303      	movs	r3, #3
 80018d2:	e02c      	b.n	800192e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018d4:	4b18      	ldr	r3, [pc, #96]	; (8001938 <HAL_RCC_OscConfig+0x620>)
 80018d6:	681a      	ldr	r2, [r3, #0]
 80018d8:	2380      	movs	r3, #128	; 0x80
 80018da:	049b      	lsls	r3, r3, #18
 80018dc:	4013      	ands	r3, r2
 80018de:	d1f0      	bne.n	80018c2 <HAL_RCC_OscConfig+0x5aa>
 80018e0:	e024      	b.n	800192c <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6a1b      	ldr	r3, [r3, #32]
 80018e6:	2b01      	cmp	r3, #1
 80018e8:	d101      	bne.n	80018ee <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 80018ea:	2301      	movs	r3, #1
 80018ec:	e01f      	b.n	800192e <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80018ee:	4b12      	ldr	r3, [pc, #72]	; (8001938 <HAL_RCC_OscConfig+0x620>)
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80018f4:	4b10      	ldr	r3, [pc, #64]	; (8001938 <HAL_RCC_OscConfig+0x620>)
 80018f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018f8:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80018fa:	697a      	ldr	r2, [r7, #20]
 80018fc:	2380      	movs	r3, #128	; 0x80
 80018fe:	025b      	lsls	r3, r3, #9
 8001900:	401a      	ands	r2, r3
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001906:	429a      	cmp	r2, r3
 8001908:	d10e      	bne.n	8001928 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	220f      	movs	r2, #15
 800190e:	401a      	ands	r2, r3
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001914:	429a      	cmp	r2, r3
 8001916:	d107      	bne.n	8001928 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001918:	697a      	ldr	r2, [r7, #20]
 800191a:	23f0      	movs	r3, #240	; 0xf0
 800191c:	039b      	lsls	r3, r3, #14
 800191e:	401a      	ands	r2, r3
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001924:	429a      	cmp	r2, r3
 8001926:	d001      	beq.n	800192c <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8001928:	2301      	movs	r3, #1
 800192a:	e000      	b.n	800192e <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 800192c:	2300      	movs	r3, #0
}
 800192e:	0018      	movs	r0, r3
 8001930:	46bd      	mov	sp, r7
 8001932:	b008      	add	sp, #32
 8001934:	bd80      	pop	{r7, pc}
 8001936:	46c0      	nop			; (mov r8, r8)
 8001938:	40021000 	.word	0x40021000
 800193c:	00001388 	.word	0x00001388
 8001940:	efffffff 	.word	0xefffffff
 8001944:	feffffff 	.word	0xfeffffff
 8001948:	ffc2ffff 	.word	0xffc2ffff

0800194c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b084      	sub	sp, #16
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
 8001954:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d101      	bne.n	8001960 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800195c:	2301      	movs	r3, #1
 800195e:	e0b3      	b.n	8001ac8 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001960:	4b5b      	ldr	r3, [pc, #364]	; (8001ad0 <HAL_RCC_ClockConfig+0x184>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	2201      	movs	r2, #1
 8001966:	4013      	ands	r3, r2
 8001968:	683a      	ldr	r2, [r7, #0]
 800196a:	429a      	cmp	r2, r3
 800196c:	d911      	bls.n	8001992 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800196e:	4b58      	ldr	r3, [pc, #352]	; (8001ad0 <HAL_RCC_ClockConfig+0x184>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	2201      	movs	r2, #1
 8001974:	4393      	bics	r3, r2
 8001976:	0019      	movs	r1, r3
 8001978:	4b55      	ldr	r3, [pc, #340]	; (8001ad0 <HAL_RCC_ClockConfig+0x184>)
 800197a:	683a      	ldr	r2, [r7, #0]
 800197c:	430a      	orrs	r2, r1
 800197e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001980:	4b53      	ldr	r3, [pc, #332]	; (8001ad0 <HAL_RCC_ClockConfig+0x184>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	2201      	movs	r2, #1
 8001986:	4013      	ands	r3, r2
 8001988:	683a      	ldr	r2, [r7, #0]
 800198a:	429a      	cmp	r2, r3
 800198c:	d001      	beq.n	8001992 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800198e:	2301      	movs	r3, #1
 8001990:	e09a      	b.n	8001ac8 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	2202      	movs	r2, #2
 8001998:	4013      	ands	r3, r2
 800199a:	d015      	beq.n	80019c8 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	2204      	movs	r2, #4
 80019a2:	4013      	ands	r3, r2
 80019a4:	d006      	beq.n	80019b4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80019a6:	4b4b      	ldr	r3, [pc, #300]	; (8001ad4 <HAL_RCC_ClockConfig+0x188>)
 80019a8:	685a      	ldr	r2, [r3, #4]
 80019aa:	4b4a      	ldr	r3, [pc, #296]	; (8001ad4 <HAL_RCC_ClockConfig+0x188>)
 80019ac:	21e0      	movs	r1, #224	; 0xe0
 80019ae:	00c9      	lsls	r1, r1, #3
 80019b0:	430a      	orrs	r2, r1
 80019b2:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019b4:	4b47      	ldr	r3, [pc, #284]	; (8001ad4 <HAL_RCC_ClockConfig+0x188>)
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	22f0      	movs	r2, #240	; 0xf0
 80019ba:	4393      	bics	r3, r2
 80019bc:	0019      	movs	r1, r3
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	689a      	ldr	r2, [r3, #8]
 80019c2:	4b44      	ldr	r3, [pc, #272]	; (8001ad4 <HAL_RCC_ClockConfig+0x188>)
 80019c4:	430a      	orrs	r2, r1
 80019c6:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	2201      	movs	r2, #1
 80019ce:	4013      	ands	r3, r2
 80019d0:	d040      	beq.n	8001a54 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	2b01      	cmp	r3, #1
 80019d8:	d107      	bne.n	80019ea <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019da:	4b3e      	ldr	r3, [pc, #248]	; (8001ad4 <HAL_RCC_ClockConfig+0x188>)
 80019dc:	681a      	ldr	r2, [r3, #0]
 80019de:	2380      	movs	r3, #128	; 0x80
 80019e0:	029b      	lsls	r3, r3, #10
 80019e2:	4013      	ands	r3, r2
 80019e4:	d114      	bne.n	8001a10 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80019e6:	2301      	movs	r3, #1
 80019e8:	e06e      	b.n	8001ac8 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	2b02      	cmp	r3, #2
 80019f0:	d107      	bne.n	8001a02 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019f2:	4b38      	ldr	r3, [pc, #224]	; (8001ad4 <HAL_RCC_ClockConfig+0x188>)
 80019f4:	681a      	ldr	r2, [r3, #0]
 80019f6:	2380      	movs	r3, #128	; 0x80
 80019f8:	049b      	lsls	r3, r3, #18
 80019fa:	4013      	ands	r3, r2
 80019fc:	d108      	bne.n	8001a10 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80019fe:	2301      	movs	r3, #1
 8001a00:	e062      	b.n	8001ac8 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a02:	4b34      	ldr	r3, [pc, #208]	; (8001ad4 <HAL_RCC_ClockConfig+0x188>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	2202      	movs	r2, #2
 8001a08:	4013      	ands	r3, r2
 8001a0a:	d101      	bne.n	8001a10 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	e05b      	b.n	8001ac8 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a10:	4b30      	ldr	r3, [pc, #192]	; (8001ad4 <HAL_RCC_ClockConfig+0x188>)
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	2203      	movs	r2, #3
 8001a16:	4393      	bics	r3, r2
 8001a18:	0019      	movs	r1, r3
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	685a      	ldr	r2, [r3, #4]
 8001a1e:	4b2d      	ldr	r3, [pc, #180]	; (8001ad4 <HAL_RCC_ClockConfig+0x188>)
 8001a20:	430a      	orrs	r2, r1
 8001a22:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a24:	f7ff f9ec 	bl	8000e00 <HAL_GetTick>
 8001a28:	0003      	movs	r3, r0
 8001a2a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a2c:	e009      	b.n	8001a42 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a2e:	f7ff f9e7 	bl	8000e00 <HAL_GetTick>
 8001a32:	0002      	movs	r2, r0
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	1ad3      	subs	r3, r2, r3
 8001a38:	4a27      	ldr	r2, [pc, #156]	; (8001ad8 <HAL_RCC_ClockConfig+0x18c>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d901      	bls.n	8001a42 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8001a3e:	2303      	movs	r3, #3
 8001a40:	e042      	b.n	8001ac8 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a42:	4b24      	ldr	r3, [pc, #144]	; (8001ad4 <HAL_RCC_ClockConfig+0x188>)
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	220c      	movs	r2, #12
 8001a48:	401a      	ands	r2, r3
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	009b      	lsls	r3, r3, #2
 8001a50:	429a      	cmp	r2, r3
 8001a52:	d1ec      	bne.n	8001a2e <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a54:	4b1e      	ldr	r3, [pc, #120]	; (8001ad0 <HAL_RCC_ClockConfig+0x184>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	2201      	movs	r2, #1
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	683a      	ldr	r2, [r7, #0]
 8001a5e:	429a      	cmp	r2, r3
 8001a60:	d211      	bcs.n	8001a86 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a62:	4b1b      	ldr	r3, [pc, #108]	; (8001ad0 <HAL_RCC_ClockConfig+0x184>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	2201      	movs	r2, #1
 8001a68:	4393      	bics	r3, r2
 8001a6a:	0019      	movs	r1, r3
 8001a6c:	4b18      	ldr	r3, [pc, #96]	; (8001ad0 <HAL_RCC_ClockConfig+0x184>)
 8001a6e:	683a      	ldr	r2, [r7, #0]
 8001a70:	430a      	orrs	r2, r1
 8001a72:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a74:	4b16      	ldr	r3, [pc, #88]	; (8001ad0 <HAL_RCC_ClockConfig+0x184>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	2201      	movs	r2, #1
 8001a7a:	4013      	ands	r3, r2
 8001a7c:	683a      	ldr	r2, [r7, #0]
 8001a7e:	429a      	cmp	r2, r3
 8001a80:	d001      	beq.n	8001a86 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8001a82:	2301      	movs	r3, #1
 8001a84:	e020      	b.n	8001ac8 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	2204      	movs	r2, #4
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	d009      	beq.n	8001aa4 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001a90:	4b10      	ldr	r3, [pc, #64]	; (8001ad4 <HAL_RCC_ClockConfig+0x188>)
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	4a11      	ldr	r2, [pc, #68]	; (8001adc <HAL_RCC_ClockConfig+0x190>)
 8001a96:	4013      	ands	r3, r2
 8001a98:	0019      	movs	r1, r3
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	68da      	ldr	r2, [r3, #12]
 8001a9e:	4b0d      	ldr	r3, [pc, #52]	; (8001ad4 <HAL_RCC_ClockConfig+0x188>)
 8001aa0:	430a      	orrs	r2, r1
 8001aa2:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001aa4:	f000 f820 	bl	8001ae8 <HAL_RCC_GetSysClockFreq>
 8001aa8:	0001      	movs	r1, r0
 8001aaa:	4b0a      	ldr	r3, [pc, #40]	; (8001ad4 <HAL_RCC_ClockConfig+0x188>)
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	091b      	lsrs	r3, r3, #4
 8001ab0:	220f      	movs	r2, #15
 8001ab2:	4013      	ands	r3, r2
 8001ab4:	4a0a      	ldr	r2, [pc, #40]	; (8001ae0 <HAL_RCC_ClockConfig+0x194>)
 8001ab6:	5cd3      	ldrb	r3, [r2, r3]
 8001ab8:	000a      	movs	r2, r1
 8001aba:	40da      	lsrs	r2, r3
 8001abc:	4b09      	ldr	r3, [pc, #36]	; (8001ae4 <HAL_RCC_ClockConfig+0x198>)
 8001abe:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001ac0:	2000      	movs	r0, #0
 8001ac2:	f7ff f957 	bl	8000d74 <HAL_InitTick>
  
  return HAL_OK;
 8001ac6:	2300      	movs	r3, #0
}
 8001ac8:	0018      	movs	r0, r3
 8001aca:	46bd      	mov	sp, r7
 8001acc:	b004      	add	sp, #16
 8001ace:	bd80      	pop	{r7, pc}
 8001ad0:	40022000 	.word	0x40022000
 8001ad4:	40021000 	.word	0x40021000
 8001ad8:	00001388 	.word	0x00001388
 8001adc:	fffff8ff 	.word	0xfffff8ff
 8001ae0:	08003580 	.word	0x08003580
 8001ae4:	20000000 	.word	0x20000000

08001ae8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ae8:	b590      	push	{r4, r7, lr}
 8001aea:	b08f      	sub	sp, #60	; 0x3c
 8001aec:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001aee:	2314      	movs	r3, #20
 8001af0:	18fb      	adds	r3, r7, r3
 8001af2:	4a2b      	ldr	r2, [pc, #172]	; (8001ba0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001af4:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001af6:	c313      	stmia	r3!, {r0, r1, r4}
 8001af8:	6812      	ldr	r2, [r2, #0]
 8001afa:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001afc:	1d3b      	adds	r3, r7, #4
 8001afe:	4a29      	ldr	r2, [pc, #164]	; (8001ba4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001b00:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001b02:	c313      	stmia	r3!, {r0, r1, r4}
 8001b04:	6812      	ldr	r2, [r2, #0]
 8001b06:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b10:	2300      	movs	r3, #0
 8001b12:	637b      	str	r3, [r7, #52]	; 0x34
 8001b14:	2300      	movs	r3, #0
 8001b16:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8001b1c:	4b22      	ldr	r3, [pc, #136]	; (8001ba8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001b22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b24:	220c      	movs	r2, #12
 8001b26:	4013      	ands	r3, r2
 8001b28:	2b04      	cmp	r3, #4
 8001b2a:	d002      	beq.n	8001b32 <HAL_RCC_GetSysClockFreq+0x4a>
 8001b2c:	2b08      	cmp	r3, #8
 8001b2e:	d003      	beq.n	8001b38 <HAL_RCC_GetSysClockFreq+0x50>
 8001b30:	e02d      	b.n	8001b8e <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001b32:	4b1e      	ldr	r3, [pc, #120]	; (8001bac <HAL_RCC_GetSysClockFreq+0xc4>)
 8001b34:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001b36:	e02d      	b.n	8001b94 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001b38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b3a:	0c9b      	lsrs	r3, r3, #18
 8001b3c:	220f      	movs	r2, #15
 8001b3e:	4013      	ands	r3, r2
 8001b40:	2214      	movs	r2, #20
 8001b42:	18ba      	adds	r2, r7, r2
 8001b44:	5cd3      	ldrb	r3, [r2, r3]
 8001b46:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001b48:	4b17      	ldr	r3, [pc, #92]	; (8001ba8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b4c:	220f      	movs	r2, #15
 8001b4e:	4013      	ands	r3, r2
 8001b50:	1d3a      	adds	r2, r7, #4
 8001b52:	5cd3      	ldrb	r3, [r2, r3]
 8001b54:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001b56:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b58:	2380      	movs	r3, #128	; 0x80
 8001b5a:	025b      	lsls	r3, r3, #9
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	d009      	beq.n	8001b74 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001b60:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001b62:	4812      	ldr	r0, [pc, #72]	; (8001bac <HAL_RCC_GetSysClockFreq+0xc4>)
 8001b64:	f7fe fada 	bl	800011c <__udivsi3>
 8001b68:	0003      	movs	r3, r0
 8001b6a:	001a      	movs	r2, r3
 8001b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b6e:	4353      	muls	r3, r2
 8001b70:	637b      	str	r3, [r7, #52]	; 0x34
 8001b72:	e009      	b.n	8001b88 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001b74:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001b76:	000a      	movs	r2, r1
 8001b78:	0152      	lsls	r2, r2, #5
 8001b7a:	1a52      	subs	r2, r2, r1
 8001b7c:	0193      	lsls	r3, r2, #6
 8001b7e:	1a9b      	subs	r3, r3, r2
 8001b80:	00db      	lsls	r3, r3, #3
 8001b82:	185b      	adds	r3, r3, r1
 8001b84:	021b      	lsls	r3, r3, #8
 8001b86:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8001b88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b8a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001b8c:	e002      	b.n	8001b94 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001b8e:	4b07      	ldr	r3, [pc, #28]	; (8001bac <HAL_RCC_GetSysClockFreq+0xc4>)
 8001b90:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001b92:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001b94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001b96:	0018      	movs	r0, r3
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	b00f      	add	sp, #60	; 0x3c
 8001b9c:	bd90      	pop	{r4, r7, pc}
 8001b9e:	46c0      	nop			; (mov r8, r8)
 8001ba0:	080034e8 	.word	0x080034e8
 8001ba4:	080034f8 	.word	0x080034f8
 8001ba8:	40021000 	.word	0x40021000
 8001bac:	007a1200 	.word	0x007a1200

08001bb0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001bb4:	4b02      	ldr	r3, [pc, #8]	; (8001bc0 <HAL_RCC_GetHCLKFreq+0x10>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
}
 8001bb8:	0018      	movs	r0, r3
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	46c0      	nop			; (mov r8, r8)
 8001bc0:	20000000 	.word	0x20000000

08001bc4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001bc8:	f7ff fff2 	bl	8001bb0 <HAL_RCC_GetHCLKFreq>
 8001bcc:	0001      	movs	r1, r0
 8001bce:	4b06      	ldr	r3, [pc, #24]	; (8001be8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	0a1b      	lsrs	r3, r3, #8
 8001bd4:	2207      	movs	r2, #7
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	4a04      	ldr	r2, [pc, #16]	; (8001bec <HAL_RCC_GetPCLK1Freq+0x28>)
 8001bda:	5cd3      	ldrb	r3, [r2, r3]
 8001bdc:	40d9      	lsrs	r1, r3
 8001bde:	000b      	movs	r3, r1
}    
 8001be0:	0018      	movs	r0, r3
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	46c0      	nop			; (mov r8, r8)
 8001be8:	40021000 	.word	0x40021000
 8001bec:	08003590 	.word	0x08003590

08001bf0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b082      	sub	sp, #8
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d101      	bne.n	8001c02 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	e044      	b.n	8001c8c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d107      	bne.n	8001c1a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2274      	movs	r2, #116	; 0x74
 8001c0e:	2100      	movs	r1, #0
 8001c10:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	0018      	movs	r0, r3
 8001c16:	f7fe ff49 	bl	8000aac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2224      	movs	r2, #36	; 0x24
 8001c1e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	681a      	ldr	r2, [r3, #0]
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	2101      	movs	r1, #1
 8001c2c:	438a      	bics	r2, r1
 8001c2e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	0018      	movs	r0, r3
 8001c34:	f000 f830 	bl	8001c98 <UART_SetConfig>
 8001c38:	0003      	movs	r3, r0
 8001c3a:	2b01      	cmp	r3, #1
 8001c3c:	d101      	bne.n	8001c42 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e024      	b.n	8001c8c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d003      	beq.n	8001c52 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	0018      	movs	r0, r3
 8001c4e:	f000 f963 	bl	8001f18 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	685a      	ldr	r2, [r3, #4]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	490d      	ldr	r1, [pc, #52]	; (8001c94 <HAL_UART_Init+0xa4>)
 8001c5e:	400a      	ands	r2, r1
 8001c60:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	689a      	ldr	r2, [r3, #8]
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	2108      	movs	r1, #8
 8001c6e:	438a      	bics	r2, r1
 8001c70:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	681a      	ldr	r2, [r3, #0]
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	2101      	movs	r1, #1
 8001c7e:	430a      	orrs	r2, r1
 8001c80:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	0018      	movs	r0, r3
 8001c86:	f000 f9fb 	bl	8002080 <UART_CheckIdleState>
 8001c8a:	0003      	movs	r3, r0
}
 8001c8c:	0018      	movs	r0, r3
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	b002      	add	sp, #8
 8001c92:	bd80      	pop	{r7, pc}
 8001c94:	fffff7ff 	.word	0xfffff7ff

08001c98 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b088      	sub	sp, #32
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8001ca0:	231e      	movs	r3, #30
 8001ca2:	18fb      	adds	r3, r7, r3
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	689a      	ldr	r2, [r3, #8]
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	691b      	ldr	r3, [r3, #16]
 8001cb0:	431a      	orrs	r2, r3
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	695b      	ldr	r3, [r3, #20]
 8001cb6:	431a      	orrs	r2, r3
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	69db      	ldr	r3, [r3, #28]
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4a8d      	ldr	r2, [pc, #564]	; (8001efc <UART_SetConfig+0x264>)
 8001cc8:	4013      	ands	r3, r2
 8001cca:	0019      	movs	r1, r3
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	697a      	ldr	r2, [r7, #20]
 8001cd2:	430a      	orrs	r2, r1
 8001cd4:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	4a88      	ldr	r2, [pc, #544]	; (8001f00 <UART_SetConfig+0x268>)
 8001cde:	4013      	ands	r3, r2
 8001ce0:	0019      	movs	r1, r3
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	68da      	ldr	r2, [r3, #12]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	430a      	orrs	r2, r1
 8001cec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	699b      	ldr	r3, [r3, #24]
 8001cf2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6a1b      	ldr	r3, [r3, #32]
 8001cf8:	697a      	ldr	r2, [r7, #20]
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	689b      	ldr	r3, [r3, #8]
 8001d04:	4a7f      	ldr	r2, [pc, #508]	; (8001f04 <UART_SetConfig+0x26c>)
 8001d06:	4013      	ands	r3, r2
 8001d08:	0019      	movs	r1, r3
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	697a      	ldr	r2, [r7, #20]
 8001d10:	430a      	orrs	r2, r1
 8001d12:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a7b      	ldr	r2, [pc, #492]	; (8001f08 <UART_SetConfig+0x270>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d127      	bne.n	8001d6e <UART_SetConfig+0xd6>
 8001d1e:	4b7b      	ldr	r3, [pc, #492]	; (8001f0c <UART_SetConfig+0x274>)
 8001d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d22:	2203      	movs	r2, #3
 8001d24:	4013      	ands	r3, r2
 8001d26:	2b03      	cmp	r3, #3
 8001d28:	d00d      	beq.n	8001d46 <UART_SetConfig+0xae>
 8001d2a:	d81b      	bhi.n	8001d64 <UART_SetConfig+0xcc>
 8001d2c:	2b02      	cmp	r3, #2
 8001d2e:	d014      	beq.n	8001d5a <UART_SetConfig+0xc2>
 8001d30:	d818      	bhi.n	8001d64 <UART_SetConfig+0xcc>
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d002      	beq.n	8001d3c <UART_SetConfig+0xa4>
 8001d36:	2b01      	cmp	r3, #1
 8001d38:	d00a      	beq.n	8001d50 <UART_SetConfig+0xb8>
 8001d3a:	e013      	b.n	8001d64 <UART_SetConfig+0xcc>
 8001d3c:	231f      	movs	r3, #31
 8001d3e:	18fb      	adds	r3, r7, r3
 8001d40:	2200      	movs	r2, #0
 8001d42:	701a      	strb	r2, [r3, #0]
 8001d44:	e021      	b.n	8001d8a <UART_SetConfig+0xf2>
 8001d46:	231f      	movs	r3, #31
 8001d48:	18fb      	adds	r3, r7, r3
 8001d4a:	2202      	movs	r2, #2
 8001d4c:	701a      	strb	r2, [r3, #0]
 8001d4e:	e01c      	b.n	8001d8a <UART_SetConfig+0xf2>
 8001d50:	231f      	movs	r3, #31
 8001d52:	18fb      	adds	r3, r7, r3
 8001d54:	2204      	movs	r2, #4
 8001d56:	701a      	strb	r2, [r3, #0]
 8001d58:	e017      	b.n	8001d8a <UART_SetConfig+0xf2>
 8001d5a:	231f      	movs	r3, #31
 8001d5c:	18fb      	adds	r3, r7, r3
 8001d5e:	2208      	movs	r2, #8
 8001d60:	701a      	strb	r2, [r3, #0]
 8001d62:	e012      	b.n	8001d8a <UART_SetConfig+0xf2>
 8001d64:	231f      	movs	r3, #31
 8001d66:	18fb      	adds	r3, r7, r3
 8001d68:	2210      	movs	r2, #16
 8001d6a:	701a      	strb	r2, [r3, #0]
 8001d6c:	e00d      	b.n	8001d8a <UART_SetConfig+0xf2>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4a67      	ldr	r2, [pc, #412]	; (8001f10 <UART_SetConfig+0x278>)
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d104      	bne.n	8001d82 <UART_SetConfig+0xea>
 8001d78:	231f      	movs	r3, #31
 8001d7a:	18fb      	adds	r3, r7, r3
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	701a      	strb	r2, [r3, #0]
 8001d80:	e003      	b.n	8001d8a <UART_SetConfig+0xf2>
 8001d82:	231f      	movs	r3, #31
 8001d84:	18fb      	adds	r3, r7, r3
 8001d86:	2210      	movs	r2, #16
 8001d88:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	69da      	ldr	r2, [r3, #28]
 8001d8e:	2380      	movs	r3, #128	; 0x80
 8001d90:	021b      	lsls	r3, r3, #8
 8001d92:	429a      	cmp	r2, r3
 8001d94:	d15d      	bne.n	8001e52 <UART_SetConfig+0x1ba>
  {
    switch (clocksource)
 8001d96:	231f      	movs	r3, #31
 8001d98:	18fb      	adds	r3, r7, r3
 8001d9a:	781b      	ldrb	r3, [r3, #0]
 8001d9c:	2b08      	cmp	r3, #8
 8001d9e:	d015      	beq.n	8001dcc <UART_SetConfig+0x134>
 8001da0:	dc18      	bgt.n	8001dd4 <UART_SetConfig+0x13c>
 8001da2:	2b04      	cmp	r3, #4
 8001da4:	d00d      	beq.n	8001dc2 <UART_SetConfig+0x12a>
 8001da6:	dc15      	bgt.n	8001dd4 <UART_SetConfig+0x13c>
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d002      	beq.n	8001db2 <UART_SetConfig+0x11a>
 8001dac:	2b02      	cmp	r3, #2
 8001dae:	d005      	beq.n	8001dbc <UART_SetConfig+0x124>
 8001db0:	e010      	b.n	8001dd4 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001db2:	f7ff ff07 	bl	8001bc4 <HAL_RCC_GetPCLK1Freq>
 8001db6:	0003      	movs	r3, r0
 8001db8:	61bb      	str	r3, [r7, #24]
        break;
 8001dba:	e012      	b.n	8001de2 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8001dbc:	4b55      	ldr	r3, [pc, #340]	; (8001f14 <UART_SetConfig+0x27c>)
 8001dbe:	61bb      	str	r3, [r7, #24]
        break;
 8001dc0:	e00f      	b.n	8001de2 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8001dc2:	f7ff fe91 	bl	8001ae8 <HAL_RCC_GetSysClockFreq>
 8001dc6:	0003      	movs	r3, r0
 8001dc8:	61bb      	str	r3, [r7, #24]
        break;
 8001dca:	e00a      	b.n	8001de2 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8001dcc:	2380      	movs	r3, #128	; 0x80
 8001dce:	021b      	lsls	r3, r3, #8
 8001dd0:	61bb      	str	r3, [r7, #24]
        break;
 8001dd2:	e006      	b.n	8001de2 <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8001dd8:	231e      	movs	r3, #30
 8001dda:	18fb      	adds	r3, r7, r3
 8001ddc:	2201      	movs	r2, #1
 8001dde:	701a      	strb	r2, [r3, #0]
        break;
 8001de0:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8001de2:	69bb      	ldr	r3, [r7, #24]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d100      	bne.n	8001dea <UART_SetConfig+0x152>
 8001de8:	e07b      	b.n	8001ee2 <UART_SetConfig+0x24a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8001dea:	69bb      	ldr	r3, [r7, #24]
 8001dec:	005a      	lsls	r2, r3, #1
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	085b      	lsrs	r3, r3, #1
 8001df4:	18d2      	adds	r2, r2, r3
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	0019      	movs	r1, r3
 8001dfc:	0010      	movs	r0, r2
 8001dfe:	f7fe f98d 	bl	800011c <__udivsi3>
 8001e02:	0003      	movs	r3, r0
 8001e04:	b29b      	uxth	r3, r3
 8001e06:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001e08:	693b      	ldr	r3, [r7, #16]
 8001e0a:	2b0f      	cmp	r3, #15
 8001e0c:	d91c      	bls.n	8001e48 <UART_SetConfig+0x1b0>
 8001e0e:	693a      	ldr	r2, [r7, #16]
 8001e10:	2380      	movs	r3, #128	; 0x80
 8001e12:	025b      	lsls	r3, r3, #9
 8001e14:	429a      	cmp	r2, r3
 8001e16:	d217      	bcs.n	8001e48 <UART_SetConfig+0x1b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8001e18:	693b      	ldr	r3, [r7, #16]
 8001e1a:	b29a      	uxth	r2, r3
 8001e1c:	200e      	movs	r0, #14
 8001e1e:	183b      	adds	r3, r7, r0
 8001e20:	210f      	movs	r1, #15
 8001e22:	438a      	bics	r2, r1
 8001e24:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001e26:	693b      	ldr	r3, [r7, #16]
 8001e28:	085b      	lsrs	r3, r3, #1
 8001e2a:	b29b      	uxth	r3, r3
 8001e2c:	2207      	movs	r2, #7
 8001e2e:	4013      	ands	r3, r2
 8001e30:	b299      	uxth	r1, r3
 8001e32:	183b      	adds	r3, r7, r0
 8001e34:	183a      	adds	r2, r7, r0
 8001e36:	8812      	ldrh	r2, [r2, #0]
 8001e38:	430a      	orrs	r2, r1
 8001e3a:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	183a      	adds	r2, r7, r0
 8001e42:	8812      	ldrh	r2, [r2, #0]
 8001e44:	60da      	str	r2, [r3, #12]
 8001e46:	e04c      	b.n	8001ee2 <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8001e48:	231e      	movs	r3, #30
 8001e4a:	18fb      	adds	r3, r7, r3
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	701a      	strb	r2, [r3, #0]
 8001e50:	e047      	b.n	8001ee2 <UART_SetConfig+0x24a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8001e52:	231f      	movs	r3, #31
 8001e54:	18fb      	adds	r3, r7, r3
 8001e56:	781b      	ldrb	r3, [r3, #0]
 8001e58:	2b08      	cmp	r3, #8
 8001e5a:	d015      	beq.n	8001e88 <UART_SetConfig+0x1f0>
 8001e5c:	dc18      	bgt.n	8001e90 <UART_SetConfig+0x1f8>
 8001e5e:	2b04      	cmp	r3, #4
 8001e60:	d00d      	beq.n	8001e7e <UART_SetConfig+0x1e6>
 8001e62:	dc15      	bgt.n	8001e90 <UART_SetConfig+0x1f8>
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d002      	beq.n	8001e6e <UART_SetConfig+0x1d6>
 8001e68:	2b02      	cmp	r3, #2
 8001e6a:	d005      	beq.n	8001e78 <UART_SetConfig+0x1e0>
 8001e6c:	e010      	b.n	8001e90 <UART_SetConfig+0x1f8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001e6e:	f7ff fea9 	bl	8001bc4 <HAL_RCC_GetPCLK1Freq>
 8001e72:	0003      	movs	r3, r0
 8001e74:	61bb      	str	r3, [r7, #24]
        break;
 8001e76:	e012      	b.n	8001e9e <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8001e78:	4b26      	ldr	r3, [pc, #152]	; (8001f14 <UART_SetConfig+0x27c>)
 8001e7a:	61bb      	str	r3, [r7, #24]
        break;
 8001e7c:	e00f      	b.n	8001e9e <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8001e7e:	f7ff fe33 	bl	8001ae8 <HAL_RCC_GetSysClockFreq>
 8001e82:	0003      	movs	r3, r0
 8001e84:	61bb      	str	r3, [r7, #24]
        break;
 8001e86:	e00a      	b.n	8001e9e <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8001e88:	2380      	movs	r3, #128	; 0x80
 8001e8a:	021b      	lsls	r3, r3, #8
 8001e8c:	61bb      	str	r3, [r7, #24]
        break;
 8001e8e:	e006      	b.n	8001e9e <UART_SetConfig+0x206>
      default:
        pclk = 0U;
 8001e90:	2300      	movs	r3, #0
 8001e92:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8001e94:	231e      	movs	r3, #30
 8001e96:	18fb      	adds	r3, r7, r3
 8001e98:	2201      	movs	r2, #1
 8001e9a:	701a      	strb	r2, [r3, #0]
        break;
 8001e9c:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8001e9e:	69bb      	ldr	r3, [r7, #24]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d01e      	beq.n	8001ee2 <UART_SetConfig+0x24a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	085a      	lsrs	r2, r3, #1
 8001eaa:	69bb      	ldr	r3, [r7, #24]
 8001eac:	18d2      	adds	r2, r2, r3
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	0019      	movs	r1, r3
 8001eb4:	0010      	movs	r0, r2
 8001eb6:	f7fe f931 	bl	800011c <__udivsi3>
 8001eba:	0003      	movs	r3, r0
 8001ebc:	b29b      	uxth	r3, r3
 8001ebe:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	2b0f      	cmp	r3, #15
 8001ec4:	d909      	bls.n	8001eda <UART_SetConfig+0x242>
 8001ec6:	693a      	ldr	r2, [r7, #16]
 8001ec8:	2380      	movs	r3, #128	; 0x80
 8001eca:	025b      	lsls	r3, r3, #9
 8001ecc:	429a      	cmp	r2, r3
 8001ece:	d204      	bcs.n	8001eda <UART_SetConfig+0x242>
      {
        huart->Instance->BRR = usartdiv;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	693a      	ldr	r2, [r7, #16]
 8001ed6:	60da      	str	r2, [r3, #12]
 8001ed8:	e003      	b.n	8001ee2 <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8001eda:	231e      	movs	r3, #30
 8001edc:	18fb      	adds	r3, r7, r3
 8001ede:	2201      	movs	r2, #1
 8001ee0:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2200      	movs	r2, #0
 8001eec:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8001eee:	231e      	movs	r3, #30
 8001ef0:	18fb      	adds	r3, r7, r3
 8001ef2:	781b      	ldrb	r3, [r3, #0]
}
 8001ef4:	0018      	movs	r0, r3
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	b008      	add	sp, #32
 8001efa:	bd80      	pop	{r7, pc}
 8001efc:	ffff69f3 	.word	0xffff69f3
 8001f00:	ffffcfff 	.word	0xffffcfff
 8001f04:	fffff4ff 	.word	0xfffff4ff
 8001f08:	40013800 	.word	0x40013800
 8001f0c:	40021000 	.word	0x40021000
 8001f10:	40004400 	.word	0x40004400
 8001f14:	007a1200 	.word	0x007a1200

08001f18 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b082      	sub	sp, #8
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f24:	2201      	movs	r2, #1
 8001f26:	4013      	ands	r3, r2
 8001f28:	d00b      	beq.n	8001f42 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	4a4a      	ldr	r2, [pc, #296]	; (800205c <UART_AdvFeatureConfig+0x144>)
 8001f32:	4013      	ands	r3, r2
 8001f34:	0019      	movs	r1, r3
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	430a      	orrs	r2, r1
 8001f40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f46:	2202      	movs	r2, #2
 8001f48:	4013      	ands	r3, r2
 8001f4a:	d00b      	beq.n	8001f64 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	4a43      	ldr	r2, [pc, #268]	; (8002060 <UART_AdvFeatureConfig+0x148>)
 8001f54:	4013      	ands	r3, r2
 8001f56:	0019      	movs	r1, r3
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	430a      	orrs	r2, r1
 8001f62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f68:	2204      	movs	r2, #4
 8001f6a:	4013      	ands	r3, r2
 8001f6c:	d00b      	beq.n	8001f86 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	4a3b      	ldr	r2, [pc, #236]	; (8002064 <UART_AdvFeatureConfig+0x14c>)
 8001f76:	4013      	ands	r3, r2
 8001f78:	0019      	movs	r1, r3
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	430a      	orrs	r2, r1
 8001f84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f8a:	2208      	movs	r2, #8
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	d00b      	beq.n	8001fa8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	4a34      	ldr	r2, [pc, #208]	; (8002068 <UART_AdvFeatureConfig+0x150>)
 8001f98:	4013      	ands	r3, r2
 8001f9a:	0019      	movs	r1, r3
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	430a      	orrs	r2, r1
 8001fa6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fac:	2210      	movs	r2, #16
 8001fae:	4013      	ands	r3, r2
 8001fb0:	d00b      	beq.n	8001fca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	689b      	ldr	r3, [r3, #8]
 8001fb8:	4a2c      	ldr	r2, [pc, #176]	; (800206c <UART_AdvFeatureConfig+0x154>)
 8001fba:	4013      	ands	r3, r2
 8001fbc:	0019      	movs	r1, r3
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	430a      	orrs	r2, r1
 8001fc8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fce:	2220      	movs	r2, #32
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	d00b      	beq.n	8001fec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	689b      	ldr	r3, [r3, #8]
 8001fda:	4a25      	ldr	r2, [pc, #148]	; (8002070 <UART_AdvFeatureConfig+0x158>)
 8001fdc:	4013      	ands	r3, r2
 8001fde:	0019      	movs	r1, r3
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	430a      	orrs	r2, r1
 8001fea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ff0:	2240      	movs	r2, #64	; 0x40
 8001ff2:	4013      	ands	r3, r2
 8001ff4:	d01d      	beq.n	8002032 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	4a1d      	ldr	r2, [pc, #116]	; (8002074 <UART_AdvFeatureConfig+0x15c>)
 8001ffe:	4013      	ands	r3, r2
 8002000:	0019      	movs	r1, r3
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	430a      	orrs	r2, r1
 800200c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002012:	2380      	movs	r3, #128	; 0x80
 8002014:	035b      	lsls	r3, r3, #13
 8002016:	429a      	cmp	r2, r3
 8002018:	d10b      	bne.n	8002032 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	4a15      	ldr	r2, [pc, #84]	; (8002078 <UART_AdvFeatureConfig+0x160>)
 8002022:	4013      	ands	r3, r2
 8002024:	0019      	movs	r1, r3
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	430a      	orrs	r2, r1
 8002030:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002036:	2280      	movs	r2, #128	; 0x80
 8002038:	4013      	ands	r3, r2
 800203a:	d00b      	beq.n	8002054 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	4a0e      	ldr	r2, [pc, #56]	; (800207c <UART_AdvFeatureConfig+0x164>)
 8002044:	4013      	ands	r3, r2
 8002046:	0019      	movs	r1, r3
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	430a      	orrs	r2, r1
 8002052:	605a      	str	r2, [r3, #4]
  }
}
 8002054:	46c0      	nop			; (mov r8, r8)
 8002056:	46bd      	mov	sp, r7
 8002058:	b002      	add	sp, #8
 800205a:	bd80      	pop	{r7, pc}
 800205c:	fffdffff 	.word	0xfffdffff
 8002060:	fffeffff 	.word	0xfffeffff
 8002064:	fffbffff 	.word	0xfffbffff
 8002068:	ffff7fff 	.word	0xffff7fff
 800206c:	ffffefff 	.word	0xffffefff
 8002070:	ffffdfff 	.word	0xffffdfff
 8002074:	ffefffff 	.word	0xffefffff
 8002078:	ff9fffff 	.word	0xff9fffff
 800207c:	fff7ffff 	.word	0xfff7ffff

08002080 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b086      	sub	sp, #24
 8002084:	af02      	add	r7, sp, #8
 8002086:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2280      	movs	r2, #128	; 0x80
 800208c:	2100      	movs	r1, #0
 800208e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002090:	f7fe feb6 	bl	8000e00 <HAL_GetTick>
 8002094:	0003      	movs	r3, r0
 8002096:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	2208      	movs	r2, #8
 80020a0:	4013      	ands	r3, r2
 80020a2:	2b08      	cmp	r3, #8
 80020a4:	d10c      	bne.n	80020c0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	2280      	movs	r2, #128	; 0x80
 80020aa:	0391      	lsls	r1, r2, #14
 80020ac:	6878      	ldr	r0, [r7, #4]
 80020ae:	4a17      	ldr	r2, [pc, #92]	; (800210c <UART_CheckIdleState+0x8c>)
 80020b0:	9200      	str	r2, [sp, #0]
 80020b2:	2200      	movs	r2, #0
 80020b4:	f000 f82c 	bl	8002110 <UART_WaitOnFlagUntilTimeout>
 80020b8:	1e03      	subs	r3, r0, #0
 80020ba:	d001      	beq.n	80020c0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80020bc:	2303      	movs	r3, #3
 80020be:	e021      	b.n	8002104 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	2204      	movs	r2, #4
 80020c8:	4013      	ands	r3, r2
 80020ca:	2b04      	cmp	r3, #4
 80020cc:	d10c      	bne.n	80020e8 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	2280      	movs	r2, #128	; 0x80
 80020d2:	03d1      	lsls	r1, r2, #15
 80020d4:	6878      	ldr	r0, [r7, #4]
 80020d6:	4a0d      	ldr	r2, [pc, #52]	; (800210c <UART_CheckIdleState+0x8c>)
 80020d8:	9200      	str	r2, [sp, #0]
 80020da:	2200      	movs	r2, #0
 80020dc:	f000 f818 	bl	8002110 <UART_WaitOnFlagUntilTimeout>
 80020e0:	1e03      	subs	r3, r0, #0
 80020e2:	d001      	beq.n	80020e8 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80020e4:	2303      	movs	r3, #3
 80020e6:	e00d      	b.n	8002104 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2220      	movs	r2, #32
 80020ec:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2220      	movs	r2, #32
 80020f2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2200      	movs	r2, #0
 80020f8:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2274      	movs	r2, #116	; 0x74
 80020fe:	2100      	movs	r1, #0
 8002100:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002102:	2300      	movs	r3, #0
}
 8002104:	0018      	movs	r0, r3
 8002106:	46bd      	mov	sp, r7
 8002108:	b004      	add	sp, #16
 800210a:	bd80      	pop	{r7, pc}
 800210c:	01ffffff 	.word	0x01ffffff

08002110 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b094      	sub	sp, #80	; 0x50
 8002114:	af00      	add	r7, sp, #0
 8002116:	60f8      	str	r0, [r7, #12]
 8002118:	60b9      	str	r1, [r7, #8]
 800211a:	603b      	str	r3, [r7, #0]
 800211c:	1dfb      	adds	r3, r7, #7
 800211e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002120:	e0a3      	b.n	800226a <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002122:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002124:	3301      	adds	r3, #1
 8002126:	d100      	bne.n	800212a <UART_WaitOnFlagUntilTimeout+0x1a>
 8002128:	e09f      	b.n	800226a <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800212a:	f7fe fe69 	bl	8000e00 <HAL_GetTick>
 800212e:	0002      	movs	r2, r0
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	1ad3      	subs	r3, r2, r3
 8002134:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002136:	429a      	cmp	r2, r3
 8002138:	d302      	bcc.n	8002140 <UART_WaitOnFlagUntilTimeout+0x30>
 800213a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800213c:	2b00      	cmp	r3, #0
 800213e:	d13d      	bne.n	80021bc <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002140:	f3ef 8310 	mrs	r3, PRIMASK
 8002144:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8002146:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002148:	647b      	str	r3, [r7, #68]	; 0x44
 800214a:	2301      	movs	r3, #1
 800214c:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800214e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002150:	f383 8810 	msr	PRIMASK, r3
}
 8002154:	46c0      	nop			; (mov r8, r8)
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	681a      	ldr	r2, [r3, #0]
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	494c      	ldr	r1, [pc, #304]	; (8002294 <UART_WaitOnFlagUntilTimeout+0x184>)
 8002162:	400a      	ands	r2, r1
 8002164:	601a      	str	r2, [r3, #0]
 8002166:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002168:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800216a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800216c:	f383 8810 	msr	PRIMASK, r3
}
 8002170:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002172:	f3ef 8310 	mrs	r3, PRIMASK
 8002176:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8002178:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800217a:	643b      	str	r3, [r7, #64]	; 0x40
 800217c:	2301      	movs	r3, #1
 800217e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002180:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002182:	f383 8810 	msr	PRIMASK, r3
}
 8002186:	46c0      	nop			; (mov r8, r8)
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	689a      	ldr	r2, [r3, #8]
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	2101      	movs	r1, #1
 8002194:	438a      	bics	r2, r1
 8002196:	609a      	str	r2, [r3, #8]
 8002198:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800219a:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800219c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800219e:	f383 8810 	msr	PRIMASK, r3
}
 80021a2:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	2220      	movs	r2, #32
 80021a8:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	2220      	movs	r2, #32
 80021ae:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	2274      	movs	r2, #116	; 0x74
 80021b4:	2100      	movs	r1, #0
 80021b6:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80021b8:	2303      	movs	r3, #3
 80021ba:	e067      	b.n	800228c <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	2204      	movs	r2, #4
 80021c4:	4013      	ands	r3, r2
 80021c6:	d050      	beq.n	800226a <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	69da      	ldr	r2, [r3, #28]
 80021ce:	2380      	movs	r3, #128	; 0x80
 80021d0:	011b      	lsls	r3, r3, #4
 80021d2:	401a      	ands	r2, r3
 80021d4:	2380      	movs	r3, #128	; 0x80
 80021d6:	011b      	lsls	r3, r3, #4
 80021d8:	429a      	cmp	r2, r3
 80021da:	d146      	bne.n	800226a <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	2280      	movs	r2, #128	; 0x80
 80021e2:	0112      	lsls	r2, r2, #4
 80021e4:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80021e6:	f3ef 8310 	mrs	r3, PRIMASK
 80021ea:	613b      	str	r3, [r7, #16]
  return(result);
 80021ec:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80021ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80021f0:	2301      	movs	r3, #1
 80021f2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	f383 8810 	msr	PRIMASK, r3
}
 80021fa:	46c0      	nop			; (mov r8, r8)
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	681a      	ldr	r2, [r3, #0]
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4923      	ldr	r1, [pc, #140]	; (8002294 <UART_WaitOnFlagUntilTimeout+0x184>)
 8002208:	400a      	ands	r2, r1
 800220a:	601a      	str	r2, [r3, #0]
 800220c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800220e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002210:	69bb      	ldr	r3, [r7, #24]
 8002212:	f383 8810 	msr	PRIMASK, r3
}
 8002216:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002218:	f3ef 8310 	mrs	r3, PRIMASK
 800221c:	61fb      	str	r3, [r7, #28]
  return(result);
 800221e:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002220:	64bb      	str	r3, [r7, #72]	; 0x48
 8002222:	2301      	movs	r3, #1
 8002224:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002226:	6a3b      	ldr	r3, [r7, #32]
 8002228:	f383 8810 	msr	PRIMASK, r3
}
 800222c:	46c0      	nop			; (mov r8, r8)
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	689a      	ldr	r2, [r3, #8]
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	2101      	movs	r1, #1
 800223a:	438a      	bics	r2, r1
 800223c:	609a      	str	r2, [r3, #8]
 800223e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002240:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002244:	f383 8810 	msr	PRIMASK, r3
}
 8002248:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	2220      	movs	r2, #32
 800224e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	2220      	movs	r2, #32
 8002254:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	2280      	movs	r2, #128	; 0x80
 800225a:	2120      	movs	r1, #32
 800225c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	2274      	movs	r2, #116	; 0x74
 8002262:	2100      	movs	r1, #0
 8002264:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002266:	2303      	movs	r3, #3
 8002268:	e010      	b.n	800228c <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	69db      	ldr	r3, [r3, #28]
 8002270:	68ba      	ldr	r2, [r7, #8]
 8002272:	4013      	ands	r3, r2
 8002274:	68ba      	ldr	r2, [r7, #8]
 8002276:	1ad3      	subs	r3, r2, r3
 8002278:	425a      	negs	r2, r3
 800227a:	4153      	adcs	r3, r2
 800227c:	b2db      	uxtb	r3, r3
 800227e:	001a      	movs	r2, r3
 8002280:	1dfb      	adds	r3, r7, #7
 8002282:	781b      	ldrb	r3, [r3, #0]
 8002284:	429a      	cmp	r2, r3
 8002286:	d100      	bne.n	800228a <UART_WaitOnFlagUntilTimeout+0x17a>
 8002288:	e74b      	b.n	8002122 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800228a:	2300      	movs	r3, #0
}
 800228c:	0018      	movs	r0, r3
 800228e:	46bd      	mov	sp, r7
 8002290:	b014      	add	sp, #80	; 0x50
 8002292:	bd80      	pop	{r7, pc}
 8002294:	fffffe5f 	.word	0xfffffe5f

08002298 <__errno>:
 8002298:	4b01      	ldr	r3, [pc, #4]	; (80022a0 <__errno+0x8>)
 800229a:	6818      	ldr	r0, [r3, #0]
 800229c:	4770      	bx	lr
 800229e:	46c0      	nop			; (mov r8, r8)
 80022a0:	2000000c 	.word	0x2000000c

080022a4 <__libc_init_array>:
 80022a4:	b570      	push	{r4, r5, r6, lr}
 80022a6:	2600      	movs	r6, #0
 80022a8:	4d0c      	ldr	r5, [pc, #48]	; (80022dc <__libc_init_array+0x38>)
 80022aa:	4c0d      	ldr	r4, [pc, #52]	; (80022e0 <__libc_init_array+0x3c>)
 80022ac:	1b64      	subs	r4, r4, r5
 80022ae:	10a4      	asrs	r4, r4, #2
 80022b0:	42a6      	cmp	r6, r4
 80022b2:	d109      	bne.n	80022c8 <__libc_init_array+0x24>
 80022b4:	2600      	movs	r6, #0
 80022b6:	f001 f90b 	bl	80034d0 <_init>
 80022ba:	4d0a      	ldr	r5, [pc, #40]	; (80022e4 <__libc_init_array+0x40>)
 80022bc:	4c0a      	ldr	r4, [pc, #40]	; (80022e8 <__libc_init_array+0x44>)
 80022be:	1b64      	subs	r4, r4, r5
 80022c0:	10a4      	asrs	r4, r4, #2
 80022c2:	42a6      	cmp	r6, r4
 80022c4:	d105      	bne.n	80022d2 <__libc_init_array+0x2e>
 80022c6:	bd70      	pop	{r4, r5, r6, pc}
 80022c8:	00b3      	lsls	r3, r6, #2
 80022ca:	58eb      	ldr	r3, [r5, r3]
 80022cc:	4798      	blx	r3
 80022ce:	3601      	adds	r6, #1
 80022d0:	e7ee      	b.n	80022b0 <__libc_init_array+0xc>
 80022d2:	00b3      	lsls	r3, r6, #2
 80022d4:	58eb      	ldr	r3, [r5, r3]
 80022d6:	4798      	blx	r3
 80022d8:	3601      	adds	r6, #1
 80022da:	e7f2      	b.n	80022c2 <__libc_init_array+0x1e>
 80022dc:	080036e0 	.word	0x080036e0
 80022e0:	080036e0 	.word	0x080036e0
 80022e4:	080036e0 	.word	0x080036e0
 80022e8:	080036e4 	.word	0x080036e4

080022ec <memset>:
 80022ec:	0003      	movs	r3, r0
 80022ee:	1882      	adds	r2, r0, r2
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d100      	bne.n	80022f6 <memset+0xa>
 80022f4:	4770      	bx	lr
 80022f6:	7019      	strb	r1, [r3, #0]
 80022f8:	3301      	adds	r3, #1
 80022fa:	e7f9      	b.n	80022f0 <memset+0x4>

080022fc <srand>:
 80022fc:	4b11      	ldr	r3, [pc, #68]	; (8002344 <srand+0x48>)
 80022fe:	b570      	push	{r4, r5, r6, lr}
 8002300:	681d      	ldr	r5, [r3, #0]
 8002302:	0004      	movs	r4, r0
 8002304:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8002306:	2b00      	cmp	r3, #0
 8002308:	d116      	bne.n	8002338 <srand+0x3c>
 800230a:	2018      	movs	r0, #24
 800230c:	f000 f8be 	bl	800248c <malloc>
 8002310:	1e02      	subs	r2, r0, #0
 8002312:	63a8      	str	r0, [r5, #56]	; 0x38
 8002314:	d104      	bne.n	8002320 <srand+0x24>
 8002316:	2142      	movs	r1, #66	; 0x42
 8002318:	4b0b      	ldr	r3, [pc, #44]	; (8002348 <srand+0x4c>)
 800231a:	480c      	ldr	r0, [pc, #48]	; (800234c <srand+0x50>)
 800231c:	f000 f876 	bl	800240c <__assert_func>
 8002320:	4b0b      	ldr	r3, [pc, #44]	; (8002350 <srand+0x54>)
 8002322:	2100      	movs	r1, #0
 8002324:	6003      	str	r3, [r0, #0]
 8002326:	4b0b      	ldr	r3, [pc, #44]	; (8002354 <srand+0x58>)
 8002328:	6043      	str	r3, [r0, #4]
 800232a:	4b0b      	ldr	r3, [pc, #44]	; (8002358 <srand+0x5c>)
 800232c:	6083      	str	r3, [r0, #8]
 800232e:	230b      	movs	r3, #11
 8002330:	8183      	strh	r3, [r0, #12]
 8002332:	2001      	movs	r0, #1
 8002334:	6110      	str	r0, [r2, #16]
 8002336:	6151      	str	r1, [r2, #20]
 8002338:	2200      	movs	r2, #0
 800233a:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800233c:	611c      	str	r4, [r3, #16]
 800233e:	615a      	str	r2, [r3, #20]
 8002340:	bd70      	pop	{r4, r5, r6, pc}
 8002342:	46c0      	nop			; (mov r8, r8)
 8002344:	2000000c 	.word	0x2000000c
 8002348:	0800359c 	.word	0x0800359c
 800234c:	080035b3 	.word	0x080035b3
 8002350:	abcd330e 	.word	0xabcd330e
 8002354:	e66d1234 	.word	0xe66d1234
 8002358:	0005deec 	.word	0x0005deec

0800235c <rand>:
 800235c:	4b16      	ldr	r3, [pc, #88]	; (80023b8 <rand+0x5c>)
 800235e:	b510      	push	{r4, lr}
 8002360:	681c      	ldr	r4, [r3, #0]
 8002362:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002364:	2b00      	cmp	r3, #0
 8002366:	d116      	bne.n	8002396 <rand+0x3a>
 8002368:	2018      	movs	r0, #24
 800236a:	f000 f88f 	bl	800248c <malloc>
 800236e:	1e02      	subs	r2, r0, #0
 8002370:	63a0      	str	r0, [r4, #56]	; 0x38
 8002372:	d104      	bne.n	800237e <rand+0x22>
 8002374:	214e      	movs	r1, #78	; 0x4e
 8002376:	4b11      	ldr	r3, [pc, #68]	; (80023bc <rand+0x60>)
 8002378:	4811      	ldr	r0, [pc, #68]	; (80023c0 <rand+0x64>)
 800237a:	f000 f847 	bl	800240c <__assert_func>
 800237e:	4b11      	ldr	r3, [pc, #68]	; (80023c4 <rand+0x68>)
 8002380:	2100      	movs	r1, #0
 8002382:	6003      	str	r3, [r0, #0]
 8002384:	4b10      	ldr	r3, [pc, #64]	; (80023c8 <rand+0x6c>)
 8002386:	6043      	str	r3, [r0, #4]
 8002388:	4b10      	ldr	r3, [pc, #64]	; (80023cc <rand+0x70>)
 800238a:	6083      	str	r3, [r0, #8]
 800238c:	230b      	movs	r3, #11
 800238e:	8183      	strh	r3, [r0, #12]
 8002390:	2001      	movs	r0, #1
 8002392:	6110      	str	r0, [r2, #16]
 8002394:	6151      	str	r1, [r2, #20]
 8002396:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8002398:	4a0d      	ldr	r2, [pc, #52]	; (80023d0 <rand+0x74>)
 800239a:	6920      	ldr	r0, [r4, #16]
 800239c:	6961      	ldr	r1, [r4, #20]
 800239e:	4b0d      	ldr	r3, [pc, #52]	; (80023d4 <rand+0x78>)
 80023a0:	f7fe f832 	bl	8000408 <__aeabi_lmul>
 80023a4:	2201      	movs	r2, #1
 80023a6:	2300      	movs	r3, #0
 80023a8:	1880      	adds	r0, r0, r2
 80023aa:	4159      	adcs	r1, r3
 80023ac:	6120      	str	r0, [r4, #16]
 80023ae:	6161      	str	r1, [r4, #20]
 80023b0:	0048      	lsls	r0, r1, #1
 80023b2:	0840      	lsrs	r0, r0, #1
 80023b4:	bd10      	pop	{r4, pc}
 80023b6:	46c0      	nop			; (mov r8, r8)
 80023b8:	2000000c 	.word	0x2000000c
 80023bc:	0800359c 	.word	0x0800359c
 80023c0:	080035b3 	.word	0x080035b3
 80023c4:	abcd330e 	.word	0xabcd330e
 80023c8:	e66d1234 	.word	0xe66d1234
 80023cc:	0005deec 	.word	0x0005deec
 80023d0:	4c957f2d 	.word	0x4c957f2d
 80023d4:	5851f42d 	.word	0x5851f42d

080023d8 <time>:
 80023d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80023da:	4b0b      	ldr	r3, [pc, #44]	; (8002408 <time+0x30>)
 80023dc:	0004      	movs	r4, r0
 80023de:	2200      	movs	r2, #0
 80023e0:	4669      	mov	r1, sp
 80023e2:	6818      	ldr	r0, [r3, #0]
 80023e4:	f000 f840 	bl	8002468 <_gettimeofday_r>
 80023e8:	2800      	cmp	r0, #0
 80023ea:	da04      	bge.n	80023f6 <time+0x1e>
 80023ec:	2201      	movs	r2, #1
 80023ee:	4252      	negs	r2, r2
 80023f0:	17d3      	asrs	r3, r2, #31
 80023f2:	9200      	str	r2, [sp, #0]
 80023f4:	9301      	str	r3, [sp, #4]
 80023f6:	9800      	ldr	r0, [sp, #0]
 80023f8:	9901      	ldr	r1, [sp, #4]
 80023fa:	2c00      	cmp	r4, #0
 80023fc:	d001      	beq.n	8002402 <time+0x2a>
 80023fe:	6020      	str	r0, [r4, #0]
 8002400:	6061      	str	r1, [r4, #4]
 8002402:	b004      	add	sp, #16
 8002404:	bd10      	pop	{r4, pc}
 8002406:	46c0      	nop			; (mov r8, r8)
 8002408:	2000000c 	.word	0x2000000c

0800240c <__assert_func>:
 800240c:	b530      	push	{r4, r5, lr}
 800240e:	0014      	movs	r4, r2
 8002410:	001a      	movs	r2, r3
 8002412:	4b09      	ldr	r3, [pc, #36]	; (8002438 <__assert_func+0x2c>)
 8002414:	0005      	movs	r5, r0
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	b085      	sub	sp, #20
 800241a:	68d8      	ldr	r0, [r3, #12]
 800241c:	4b07      	ldr	r3, [pc, #28]	; (800243c <__assert_func+0x30>)
 800241e:	2c00      	cmp	r4, #0
 8002420:	d101      	bne.n	8002426 <__assert_func+0x1a>
 8002422:	4b07      	ldr	r3, [pc, #28]	; (8002440 <__assert_func+0x34>)
 8002424:	001c      	movs	r4, r3
 8002426:	9301      	str	r3, [sp, #4]
 8002428:	9100      	str	r1, [sp, #0]
 800242a:	002b      	movs	r3, r5
 800242c:	4905      	ldr	r1, [pc, #20]	; (8002444 <__assert_func+0x38>)
 800242e:	9402      	str	r4, [sp, #8]
 8002430:	f000 f80a 	bl	8002448 <fiprintf>
 8002434:	f000 fcda 	bl	8002dec <abort>
 8002438:	2000000c 	.word	0x2000000c
 800243c:	0800360e 	.word	0x0800360e
 8002440:	08003649 	.word	0x08003649
 8002444:	0800361b 	.word	0x0800361b

08002448 <fiprintf>:
 8002448:	b40e      	push	{r1, r2, r3}
 800244a:	b503      	push	{r0, r1, lr}
 800244c:	0001      	movs	r1, r0
 800244e:	ab03      	add	r3, sp, #12
 8002450:	4804      	ldr	r0, [pc, #16]	; (8002464 <fiprintf+0x1c>)
 8002452:	cb04      	ldmia	r3!, {r2}
 8002454:	6800      	ldr	r0, [r0, #0]
 8002456:	9301      	str	r3, [sp, #4]
 8002458:	f000 f92c 	bl	80026b4 <_vfiprintf_r>
 800245c:	b002      	add	sp, #8
 800245e:	bc08      	pop	{r3}
 8002460:	b003      	add	sp, #12
 8002462:	4718      	bx	r3
 8002464:	2000000c 	.word	0x2000000c

08002468 <_gettimeofday_r>:
 8002468:	2300      	movs	r3, #0
 800246a:	b570      	push	{r4, r5, r6, lr}
 800246c:	4d06      	ldr	r5, [pc, #24]	; (8002488 <_gettimeofday_r+0x20>)
 800246e:	0004      	movs	r4, r0
 8002470:	0008      	movs	r0, r1
 8002472:	0011      	movs	r1, r2
 8002474:	602b      	str	r3, [r5, #0]
 8002476:	f001 f823 	bl	80034c0 <_gettimeofday>
 800247a:	1c43      	adds	r3, r0, #1
 800247c:	d103      	bne.n	8002486 <_gettimeofday_r+0x1e>
 800247e:	682b      	ldr	r3, [r5, #0]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d000      	beq.n	8002486 <_gettimeofday_r+0x1e>
 8002484:	6023      	str	r3, [r4, #0]
 8002486:	bd70      	pop	{r4, r5, r6, pc}
 8002488:	20000124 	.word	0x20000124

0800248c <malloc>:
 800248c:	b510      	push	{r4, lr}
 800248e:	4b03      	ldr	r3, [pc, #12]	; (800249c <malloc+0x10>)
 8002490:	0001      	movs	r1, r0
 8002492:	6818      	ldr	r0, [r3, #0]
 8002494:	f000 f870 	bl	8002578 <_malloc_r>
 8002498:	bd10      	pop	{r4, pc}
 800249a:	46c0      	nop			; (mov r8, r8)
 800249c:	2000000c 	.word	0x2000000c

080024a0 <_free_r>:
 80024a0:	b570      	push	{r4, r5, r6, lr}
 80024a2:	0005      	movs	r5, r0
 80024a4:	2900      	cmp	r1, #0
 80024a6:	d010      	beq.n	80024ca <_free_r+0x2a>
 80024a8:	1f0c      	subs	r4, r1, #4
 80024aa:	6823      	ldr	r3, [r4, #0]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	da00      	bge.n	80024b2 <_free_r+0x12>
 80024b0:	18e4      	adds	r4, r4, r3
 80024b2:	0028      	movs	r0, r5
 80024b4:	f000 feec 	bl	8003290 <__malloc_lock>
 80024b8:	4a1d      	ldr	r2, [pc, #116]	; (8002530 <_free_r+0x90>)
 80024ba:	6813      	ldr	r3, [r2, #0]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d105      	bne.n	80024cc <_free_r+0x2c>
 80024c0:	6063      	str	r3, [r4, #4]
 80024c2:	6014      	str	r4, [r2, #0]
 80024c4:	0028      	movs	r0, r5
 80024c6:	f000 feeb 	bl	80032a0 <__malloc_unlock>
 80024ca:	bd70      	pop	{r4, r5, r6, pc}
 80024cc:	42a3      	cmp	r3, r4
 80024ce:	d908      	bls.n	80024e2 <_free_r+0x42>
 80024d0:	6821      	ldr	r1, [r4, #0]
 80024d2:	1860      	adds	r0, r4, r1
 80024d4:	4283      	cmp	r3, r0
 80024d6:	d1f3      	bne.n	80024c0 <_free_r+0x20>
 80024d8:	6818      	ldr	r0, [r3, #0]
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	1841      	adds	r1, r0, r1
 80024de:	6021      	str	r1, [r4, #0]
 80024e0:	e7ee      	b.n	80024c0 <_free_r+0x20>
 80024e2:	001a      	movs	r2, r3
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d001      	beq.n	80024ee <_free_r+0x4e>
 80024ea:	42a3      	cmp	r3, r4
 80024ec:	d9f9      	bls.n	80024e2 <_free_r+0x42>
 80024ee:	6811      	ldr	r1, [r2, #0]
 80024f0:	1850      	adds	r0, r2, r1
 80024f2:	42a0      	cmp	r0, r4
 80024f4:	d10b      	bne.n	800250e <_free_r+0x6e>
 80024f6:	6820      	ldr	r0, [r4, #0]
 80024f8:	1809      	adds	r1, r1, r0
 80024fa:	1850      	adds	r0, r2, r1
 80024fc:	6011      	str	r1, [r2, #0]
 80024fe:	4283      	cmp	r3, r0
 8002500:	d1e0      	bne.n	80024c4 <_free_r+0x24>
 8002502:	6818      	ldr	r0, [r3, #0]
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	1841      	adds	r1, r0, r1
 8002508:	6011      	str	r1, [r2, #0]
 800250a:	6053      	str	r3, [r2, #4]
 800250c:	e7da      	b.n	80024c4 <_free_r+0x24>
 800250e:	42a0      	cmp	r0, r4
 8002510:	d902      	bls.n	8002518 <_free_r+0x78>
 8002512:	230c      	movs	r3, #12
 8002514:	602b      	str	r3, [r5, #0]
 8002516:	e7d5      	b.n	80024c4 <_free_r+0x24>
 8002518:	6821      	ldr	r1, [r4, #0]
 800251a:	1860      	adds	r0, r4, r1
 800251c:	4283      	cmp	r3, r0
 800251e:	d103      	bne.n	8002528 <_free_r+0x88>
 8002520:	6818      	ldr	r0, [r3, #0]
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	1841      	adds	r1, r0, r1
 8002526:	6021      	str	r1, [r4, #0]
 8002528:	6063      	str	r3, [r4, #4]
 800252a:	6054      	str	r4, [r2, #4]
 800252c:	e7ca      	b.n	80024c4 <_free_r+0x24>
 800252e:	46c0      	nop			; (mov r8, r8)
 8002530:	2000011c 	.word	0x2000011c

08002534 <sbrk_aligned>:
 8002534:	b570      	push	{r4, r5, r6, lr}
 8002536:	4e0f      	ldr	r6, [pc, #60]	; (8002574 <sbrk_aligned+0x40>)
 8002538:	000d      	movs	r5, r1
 800253a:	6831      	ldr	r1, [r6, #0]
 800253c:	0004      	movs	r4, r0
 800253e:	2900      	cmp	r1, #0
 8002540:	d102      	bne.n	8002548 <sbrk_aligned+0x14>
 8002542:	f000 fb73 	bl	8002c2c <_sbrk_r>
 8002546:	6030      	str	r0, [r6, #0]
 8002548:	0029      	movs	r1, r5
 800254a:	0020      	movs	r0, r4
 800254c:	f000 fb6e 	bl	8002c2c <_sbrk_r>
 8002550:	1c43      	adds	r3, r0, #1
 8002552:	d00a      	beq.n	800256a <sbrk_aligned+0x36>
 8002554:	2303      	movs	r3, #3
 8002556:	1cc5      	adds	r5, r0, #3
 8002558:	439d      	bics	r5, r3
 800255a:	42a8      	cmp	r0, r5
 800255c:	d007      	beq.n	800256e <sbrk_aligned+0x3a>
 800255e:	1a29      	subs	r1, r5, r0
 8002560:	0020      	movs	r0, r4
 8002562:	f000 fb63 	bl	8002c2c <_sbrk_r>
 8002566:	1c43      	adds	r3, r0, #1
 8002568:	d101      	bne.n	800256e <sbrk_aligned+0x3a>
 800256a:	2501      	movs	r5, #1
 800256c:	426d      	negs	r5, r5
 800256e:	0028      	movs	r0, r5
 8002570:	bd70      	pop	{r4, r5, r6, pc}
 8002572:	46c0      	nop			; (mov r8, r8)
 8002574:	20000120 	.word	0x20000120

08002578 <_malloc_r>:
 8002578:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800257a:	2203      	movs	r2, #3
 800257c:	1ccb      	adds	r3, r1, #3
 800257e:	4393      	bics	r3, r2
 8002580:	3308      	adds	r3, #8
 8002582:	0006      	movs	r6, r0
 8002584:	001f      	movs	r7, r3
 8002586:	2b0c      	cmp	r3, #12
 8002588:	d232      	bcs.n	80025f0 <_malloc_r+0x78>
 800258a:	270c      	movs	r7, #12
 800258c:	42b9      	cmp	r1, r7
 800258e:	d831      	bhi.n	80025f4 <_malloc_r+0x7c>
 8002590:	0030      	movs	r0, r6
 8002592:	f000 fe7d 	bl	8003290 <__malloc_lock>
 8002596:	4d32      	ldr	r5, [pc, #200]	; (8002660 <_malloc_r+0xe8>)
 8002598:	682b      	ldr	r3, [r5, #0]
 800259a:	001c      	movs	r4, r3
 800259c:	2c00      	cmp	r4, #0
 800259e:	d12e      	bne.n	80025fe <_malloc_r+0x86>
 80025a0:	0039      	movs	r1, r7
 80025a2:	0030      	movs	r0, r6
 80025a4:	f7ff ffc6 	bl	8002534 <sbrk_aligned>
 80025a8:	0004      	movs	r4, r0
 80025aa:	1c43      	adds	r3, r0, #1
 80025ac:	d11e      	bne.n	80025ec <_malloc_r+0x74>
 80025ae:	682c      	ldr	r4, [r5, #0]
 80025b0:	0025      	movs	r5, r4
 80025b2:	2d00      	cmp	r5, #0
 80025b4:	d14a      	bne.n	800264c <_malloc_r+0xd4>
 80025b6:	6823      	ldr	r3, [r4, #0]
 80025b8:	0029      	movs	r1, r5
 80025ba:	18e3      	adds	r3, r4, r3
 80025bc:	0030      	movs	r0, r6
 80025be:	9301      	str	r3, [sp, #4]
 80025c0:	f000 fb34 	bl	8002c2c <_sbrk_r>
 80025c4:	9b01      	ldr	r3, [sp, #4]
 80025c6:	4283      	cmp	r3, r0
 80025c8:	d143      	bne.n	8002652 <_malloc_r+0xda>
 80025ca:	6823      	ldr	r3, [r4, #0]
 80025cc:	3703      	adds	r7, #3
 80025ce:	1aff      	subs	r7, r7, r3
 80025d0:	2303      	movs	r3, #3
 80025d2:	439f      	bics	r7, r3
 80025d4:	3708      	adds	r7, #8
 80025d6:	2f0c      	cmp	r7, #12
 80025d8:	d200      	bcs.n	80025dc <_malloc_r+0x64>
 80025da:	270c      	movs	r7, #12
 80025dc:	0039      	movs	r1, r7
 80025de:	0030      	movs	r0, r6
 80025e0:	f7ff ffa8 	bl	8002534 <sbrk_aligned>
 80025e4:	1c43      	adds	r3, r0, #1
 80025e6:	d034      	beq.n	8002652 <_malloc_r+0xda>
 80025e8:	6823      	ldr	r3, [r4, #0]
 80025ea:	19df      	adds	r7, r3, r7
 80025ec:	6027      	str	r7, [r4, #0]
 80025ee:	e013      	b.n	8002618 <_malloc_r+0xa0>
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	dacb      	bge.n	800258c <_malloc_r+0x14>
 80025f4:	230c      	movs	r3, #12
 80025f6:	2500      	movs	r5, #0
 80025f8:	6033      	str	r3, [r6, #0]
 80025fa:	0028      	movs	r0, r5
 80025fc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80025fe:	6822      	ldr	r2, [r4, #0]
 8002600:	1bd1      	subs	r1, r2, r7
 8002602:	d420      	bmi.n	8002646 <_malloc_r+0xce>
 8002604:	290b      	cmp	r1, #11
 8002606:	d917      	bls.n	8002638 <_malloc_r+0xc0>
 8002608:	19e2      	adds	r2, r4, r7
 800260a:	6027      	str	r7, [r4, #0]
 800260c:	42a3      	cmp	r3, r4
 800260e:	d111      	bne.n	8002634 <_malloc_r+0xbc>
 8002610:	602a      	str	r2, [r5, #0]
 8002612:	6863      	ldr	r3, [r4, #4]
 8002614:	6011      	str	r1, [r2, #0]
 8002616:	6053      	str	r3, [r2, #4]
 8002618:	0030      	movs	r0, r6
 800261a:	0025      	movs	r5, r4
 800261c:	f000 fe40 	bl	80032a0 <__malloc_unlock>
 8002620:	2207      	movs	r2, #7
 8002622:	350b      	adds	r5, #11
 8002624:	1d23      	adds	r3, r4, #4
 8002626:	4395      	bics	r5, r2
 8002628:	1aea      	subs	r2, r5, r3
 800262a:	429d      	cmp	r5, r3
 800262c:	d0e5      	beq.n	80025fa <_malloc_r+0x82>
 800262e:	1b5b      	subs	r3, r3, r5
 8002630:	50a3      	str	r3, [r4, r2]
 8002632:	e7e2      	b.n	80025fa <_malloc_r+0x82>
 8002634:	605a      	str	r2, [r3, #4]
 8002636:	e7ec      	b.n	8002612 <_malloc_r+0x9a>
 8002638:	6862      	ldr	r2, [r4, #4]
 800263a:	42a3      	cmp	r3, r4
 800263c:	d101      	bne.n	8002642 <_malloc_r+0xca>
 800263e:	602a      	str	r2, [r5, #0]
 8002640:	e7ea      	b.n	8002618 <_malloc_r+0xa0>
 8002642:	605a      	str	r2, [r3, #4]
 8002644:	e7e8      	b.n	8002618 <_malloc_r+0xa0>
 8002646:	0023      	movs	r3, r4
 8002648:	6864      	ldr	r4, [r4, #4]
 800264a:	e7a7      	b.n	800259c <_malloc_r+0x24>
 800264c:	002c      	movs	r4, r5
 800264e:	686d      	ldr	r5, [r5, #4]
 8002650:	e7af      	b.n	80025b2 <_malloc_r+0x3a>
 8002652:	230c      	movs	r3, #12
 8002654:	0030      	movs	r0, r6
 8002656:	6033      	str	r3, [r6, #0]
 8002658:	f000 fe22 	bl	80032a0 <__malloc_unlock>
 800265c:	e7cd      	b.n	80025fa <_malloc_r+0x82>
 800265e:	46c0      	nop			; (mov r8, r8)
 8002660:	2000011c 	.word	0x2000011c

08002664 <__sfputc_r>:
 8002664:	6893      	ldr	r3, [r2, #8]
 8002666:	b510      	push	{r4, lr}
 8002668:	3b01      	subs	r3, #1
 800266a:	6093      	str	r3, [r2, #8]
 800266c:	2b00      	cmp	r3, #0
 800266e:	da04      	bge.n	800267a <__sfputc_r+0x16>
 8002670:	6994      	ldr	r4, [r2, #24]
 8002672:	42a3      	cmp	r3, r4
 8002674:	db07      	blt.n	8002686 <__sfputc_r+0x22>
 8002676:	290a      	cmp	r1, #10
 8002678:	d005      	beq.n	8002686 <__sfputc_r+0x22>
 800267a:	6813      	ldr	r3, [r2, #0]
 800267c:	1c58      	adds	r0, r3, #1
 800267e:	6010      	str	r0, [r2, #0]
 8002680:	7019      	strb	r1, [r3, #0]
 8002682:	0008      	movs	r0, r1
 8002684:	bd10      	pop	{r4, pc}
 8002686:	f000 fae3 	bl	8002c50 <__swbuf_r>
 800268a:	0001      	movs	r1, r0
 800268c:	e7f9      	b.n	8002682 <__sfputc_r+0x1e>

0800268e <__sfputs_r>:
 800268e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002690:	0006      	movs	r6, r0
 8002692:	000f      	movs	r7, r1
 8002694:	0014      	movs	r4, r2
 8002696:	18d5      	adds	r5, r2, r3
 8002698:	42ac      	cmp	r4, r5
 800269a:	d101      	bne.n	80026a0 <__sfputs_r+0x12>
 800269c:	2000      	movs	r0, #0
 800269e:	e007      	b.n	80026b0 <__sfputs_r+0x22>
 80026a0:	7821      	ldrb	r1, [r4, #0]
 80026a2:	003a      	movs	r2, r7
 80026a4:	0030      	movs	r0, r6
 80026a6:	f7ff ffdd 	bl	8002664 <__sfputc_r>
 80026aa:	3401      	adds	r4, #1
 80026ac:	1c43      	adds	r3, r0, #1
 80026ae:	d1f3      	bne.n	8002698 <__sfputs_r+0xa>
 80026b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080026b4 <_vfiprintf_r>:
 80026b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026b6:	b0a1      	sub	sp, #132	; 0x84
 80026b8:	0006      	movs	r6, r0
 80026ba:	000c      	movs	r4, r1
 80026bc:	001f      	movs	r7, r3
 80026be:	9203      	str	r2, [sp, #12]
 80026c0:	2800      	cmp	r0, #0
 80026c2:	d004      	beq.n	80026ce <_vfiprintf_r+0x1a>
 80026c4:	6983      	ldr	r3, [r0, #24]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d101      	bne.n	80026ce <_vfiprintf_r+0x1a>
 80026ca:	f000 fcc5 	bl	8003058 <__sinit>
 80026ce:	4b8e      	ldr	r3, [pc, #568]	; (8002908 <_vfiprintf_r+0x254>)
 80026d0:	429c      	cmp	r4, r3
 80026d2:	d11c      	bne.n	800270e <_vfiprintf_r+0x5a>
 80026d4:	6874      	ldr	r4, [r6, #4]
 80026d6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80026d8:	07db      	lsls	r3, r3, #31
 80026da:	d405      	bmi.n	80026e8 <_vfiprintf_r+0x34>
 80026dc:	89a3      	ldrh	r3, [r4, #12]
 80026de:	059b      	lsls	r3, r3, #22
 80026e0:	d402      	bmi.n	80026e8 <_vfiprintf_r+0x34>
 80026e2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80026e4:	f000 fd59 	bl	800319a <__retarget_lock_acquire_recursive>
 80026e8:	89a3      	ldrh	r3, [r4, #12]
 80026ea:	071b      	lsls	r3, r3, #28
 80026ec:	d502      	bpl.n	80026f4 <_vfiprintf_r+0x40>
 80026ee:	6923      	ldr	r3, [r4, #16]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d11d      	bne.n	8002730 <_vfiprintf_r+0x7c>
 80026f4:	0021      	movs	r1, r4
 80026f6:	0030      	movs	r0, r6
 80026f8:	f000 fb00 	bl	8002cfc <__swsetup_r>
 80026fc:	2800      	cmp	r0, #0
 80026fe:	d017      	beq.n	8002730 <_vfiprintf_r+0x7c>
 8002700:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002702:	07db      	lsls	r3, r3, #31
 8002704:	d50d      	bpl.n	8002722 <_vfiprintf_r+0x6e>
 8002706:	2001      	movs	r0, #1
 8002708:	4240      	negs	r0, r0
 800270a:	b021      	add	sp, #132	; 0x84
 800270c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800270e:	4b7f      	ldr	r3, [pc, #508]	; (800290c <_vfiprintf_r+0x258>)
 8002710:	429c      	cmp	r4, r3
 8002712:	d101      	bne.n	8002718 <_vfiprintf_r+0x64>
 8002714:	68b4      	ldr	r4, [r6, #8]
 8002716:	e7de      	b.n	80026d6 <_vfiprintf_r+0x22>
 8002718:	4b7d      	ldr	r3, [pc, #500]	; (8002910 <_vfiprintf_r+0x25c>)
 800271a:	429c      	cmp	r4, r3
 800271c:	d1db      	bne.n	80026d6 <_vfiprintf_r+0x22>
 800271e:	68f4      	ldr	r4, [r6, #12]
 8002720:	e7d9      	b.n	80026d6 <_vfiprintf_r+0x22>
 8002722:	89a3      	ldrh	r3, [r4, #12]
 8002724:	059b      	lsls	r3, r3, #22
 8002726:	d4ee      	bmi.n	8002706 <_vfiprintf_r+0x52>
 8002728:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800272a:	f000 fd37 	bl	800319c <__retarget_lock_release_recursive>
 800272e:	e7ea      	b.n	8002706 <_vfiprintf_r+0x52>
 8002730:	2300      	movs	r3, #0
 8002732:	ad08      	add	r5, sp, #32
 8002734:	616b      	str	r3, [r5, #20]
 8002736:	3320      	adds	r3, #32
 8002738:	766b      	strb	r3, [r5, #25]
 800273a:	3310      	adds	r3, #16
 800273c:	76ab      	strb	r3, [r5, #26]
 800273e:	9707      	str	r7, [sp, #28]
 8002740:	9f03      	ldr	r7, [sp, #12]
 8002742:	783b      	ldrb	r3, [r7, #0]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d001      	beq.n	800274c <_vfiprintf_r+0x98>
 8002748:	2b25      	cmp	r3, #37	; 0x25
 800274a:	d14e      	bne.n	80027ea <_vfiprintf_r+0x136>
 800274c:	9b03      	ldr	r3, [sp, #12]
 800274e:	1afb      	subs	r3, r7, r3
 8002750:	9305      	str	r3, [sp, #20]
 8002752:	9b03      	ldr	r3, [sp, #12]
 8002754:	429f      	cmp	r7, r3
 8002756:	d00d      	beq.n	8002774 <_vfiprintf_r+0xc0>
 8002758:	9b05      	ldr	r3, [sp, #20]
 800275a:	0021      	movs	r1, r4
 800275c:	0030      	movs	r0, r6
 800275e:	9a03      	ldr	r2, [sp, #12]
 8002760:	f7ff ff95 	bl	800268e <__sfputs_r>
 8002764:	1c43      	adds	r3, r0, #1
 8002766:	d100      	bne.n	800276a <_vfiprintf_r+0xb6>
 8002768:	e0b5      	b.n	80028d6 <_vfiprintf_r+0x222>
 800276a:	696a      	ldr	r2, [r5, #20]
 800276c:	9b05      	ldr	r3, [sp, #20]
 800276e:	4694      	mov	ip, r2
 8002770:	4463      	add	r3, ip
 8002772:	616b      	str	r3, [r5, #20]
 8002774:	783b      	ldrb	r3, [r7, #0]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d100      	bne.n	800277c <_vfiprintf_r+0xc8>
 800277a:	e0ac      	b.n	80028d6 <_vfiprintf_r+0x222>
 800277c:	2201      	movs	r2, #1
 800277e:	1c7b      	adds	r3, r7, #1
 8002780:	9303      	str	r3, [sp, #12]
 8002782:	2300      	movs	r3, #0
 8002784:	4252      	negs	r2, r2
 8002786:	606a      	str	r2, [r5, #4]
 8002788:	a904      	add	r1, sp, #16
 800278a:	3254      	adds	r2, #84	; 0x54
 800278c:	1852      	adds	r2, r2, r1
 800278e:	602b      	str	r3, [r5, #0]
 8002790:	60eb      	str	r3, [r5, #12]
 8002792:	60ab      	str	r3, [r5, #8]
 8002794:	7013      	strb	r3, [r2, #0]
 8002796:	65ab      	str	r3, [r5, #88]	; 0x58
 8002798:	9b03      	ldr	r3, [sp, #12]
 800279a:	2205      	movs	r2, #5
 800279c:	7819      	ldrb	r1, [r3, #0]
 800279e:	485d      	ldr	r0, [pc, #372]	; (8002914 <_vfiprintf_r+0x260>)
 80027a0:	f000 fd6a 	bl	8003278 <memchr>
 80027a4:	9b03      	ldr	r3, [sp, #12]
 80027a6:	1c5f      	adds	r7, r3, #1
 80027a8:	2800      	cmp	r0, #0
 80027aa:	d120      	bne.n	80027ee <_vfiprintf_r+0x13a>
 80027ac:	682a      	ldr	r2, [r5, #0]
 80027ae:	06d3      	lsls	r3, r2, #27
 80027b0:	d504      	bpl.n	80027bc <_vfiprintf_r+0x108>
 80027b2:	2353      	movs	r3, #83	; 0x53
 80027b4:	a904      	add	r1, sp, #16
 80027b6:	185b      	adds	r3, r3, r1
 80027b8:	2120      	movs	r1, #32
 80027ba:	7019      	strb	r1, [r3, #0]
 80027bc:	0713      	lsls	r3, r2, #28
 80027be:	d504      	bpl.n	80027ca <_vfiprintf_r+0x116>
 80027c0:	2353      	movs	r3, #83	; 0x53
 80027c2:	a904      	add	r1, sp, #16
 80027c4:	185b      	adds	r3, r3, r1
 80027c6:	212b      	movs	r1, #43	; 0x2b
 80027c8:	7019      	strb	r1, [r3, #0]
 80027ca:	9b03      	ldr	r3, [sp, #12]
 80027cc:	781b      	ldrb	r3, [r3, #0]
 80027ce:	2b2a      	cmp	r3, #42	; 0x2a
 80027d0:	d016      	beq.n	8002800 <_vfiprintf_r+0x14c>
 80027d2:	2100      	movs	r1, #0
 80027d4:	68eb      	ldr	r3, [r5, #12]
 80027d6:	9f03      	ldr	r7, [sp, #12]
 80027d8:	783a      	ldrb	r2, [r7, #0]
 80027da:	1c78      	adds	r0, r7, #1
 80027dc:	3a30      	subs	r2, #48	; 0x30
 80027de:	4684      	mov	ip, r0
 80027e0:	2a09      	cmp	r2, #9
 80027e2:	d94f      	bls.n	8002884 <_vfiprintf_r+0x1d0>
 80027e4:	2900      	cmp	r1, #0
 80027e6:	d111      	bne.n	800280c <_vfiprintf_r+0x158>
 80027e8:	e017      	b.n	800281a <_vfiprintf_r+0x166>
 80027ea:	3701      	adds	r7, #1
 80027ec:	e7a9      	b.n	8002742 <_vfiprintf_r+0x8e>
 80027ee:	4b49      	ldr	r3, [pc, #292]	; (8002914 <_vfiprintf_r+0x260>)
 80027f0:	682a      	ldr	r2, [r5, #0]
 80027f2:	1ac0      	subs	r0, r0, r3
 80027f4:	2301      	movs	r3, #1
 80027f6:	4083      	lsls	r3, r0
 80027f8:	4313      	orrs	r3, r2
 80027fa:	602b      	str	r3, [r5, #0]
 80027fc:	9703      	str	r7, [sp, #12]
 80027fe:	e7cb      	b.n	8002798 <_vfiprintf_r+0xe4>
 8002800:	9b07      	ldr	r3, [sp, #28]
 8002802:	1d19      	adds	r1, r3, #4
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	9107      	str	r1, [sp, #28]
 8002808:	2b00      	cmp	r3, #0
 800280a:	db01      	blt.n	8002810 <_vfiprintf_r+0x15c>
 800280c:	930b      	str	r3, [sp, #44]	; 0x2c
 800280e:	e004      	b.n	800281a <_vfiprintf_r+0x166>
 8002810:	425b      	negs	r3, r3
 8002812:	60eb      	str	r3, [r5, #12]
 8002814:	2302      	movs	r3, #2
 8002816:	4313      	orrs	r3, r2
 8002818:	602b      	str	r3, [r5, #0]
 800281a:	783b      	ldrb	r3, [r7, #0]
 800281c:	2b2e      	cmp	r3, #46	; 0x2e
 800281e:	d10a      	bne.n	8002836 <_vfiprintf_r+0x182>
 8002820:	787b      	ldrb	r3, [r7, #1]
 8002822:	2b2a      	cmp	r3, #42	; 0x2a
 8002824:	d137      	bne.n	8002896 <_vfiprintf_r+0x1e2>
 8002826:	9b07      	ldr	r3, [sp, #28]
 8002828:	3702      	adds	r7, #2
 800282a:	1d1a      	adds	r2, r3, #4
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	9207      	str	r2, [sp, #28]
 8002830:	2b00      	cmp	r3, #0
 8002832:	db2d      	blt.n	8002890 <_vfiprintf_r+0x1dc>
 8002834:	9309      	str	r3, [sp, #36]	; 0x24
 8002836:	2203      	movs	r2, #3
 8002838:	7839      	ldrb	r1, [r7, #0]
 800283a:	4837      	ldr	r0, [pc, #220]	; (8002918 <_vfiprintf_r+0x264>)
 800283c:	f000 fd1c 	bl	8003278 <memchr>
 8002840:	2800      	cmp	r0, #0
 8002842:	d007      	beq.n	8002854 <_vfiprintf_r+0x1a0>
 8002844:	4b34      	ldr	r3, [pc, #208]	; (8002918 <_vfiprintf_r+0x264>)
 8002846:	682a      	ldr	r2, [r5, #0]
 8002848:	1ac0      	subs	r0, r0, r3
 800284a:	2340      	movs	r3, #64	; 0x40
 800284c:	4083      	lsls	r3, r0
 800284e:	4313      	orrs	r3, r2
 8002850:	3701      	adds	r7, #1
 8002852:	602b      	str	r3, [r5, #0]
 8002854:	7839      	ldrb	r1, [r7, #0]
 8002856:	1c7b      	adds	r3, r7, #1
 8002858:	2206      	movs	r2, #6
 800285a:	4830      	ldr	r0, [pc, #192]	; (800291c <_vfiprintf_r+0x268>)
 800285c:	9303      	str	r3, [sp, #12]
 800285e:	7629      	strb	r1, [r5, #24]
 8002860:	f000 fd0a 	bl	8003278 <memchr>
 8002864:	2800      	cmp	r0, #0
 8002866:	d045      	beq.n	80028f4 <_vfiprintf_r+0x240>
 8002868:	4b2d      	ldr	r3, [pc, #180]	; (8002920 <_vfiprintf_r+0x26c>)
 800286a:	2b00      	cmp	r3, #0
 800286c:	d127      	bne.n	80028be <_vfiprintf_r+0x20a>
 800286e:	2207      	movs	r2, #7
 8002870:	9b07      	ldr	r3, [sp, #28]
 8002872:	3307      	adds	r3, #7
 8002874:	4393      	bics	r3, r2
 8002876:	3308      	adds	r3, #8
 8002878:	9307      	str	r3, [sp, #28]
 800287a:	696b      	ldr	r3, [r5, #20]
 800287c:	9a04      	ldr	r2, [sp, #16]
 800287e:	189b      	adds	r3, r3, r2
 8002880:	616b      	str	r3, [r5, #20]
 8002882:	e75d      	b.n	8002740 <_vfiprintf_r+0x8c>
 8002884:	210a      	movs	r1, #10
 8002886:	434b      	muls	r3, r1
 8002888:	4667      	mov	r7, ip
 800288a:	189b      	adds	r3, r3, r2
 800288c:	3909      	subs	r1, #9
 800288e:	e7a3      	b.n	80027d8 <_vfiprintf_r+0x124>
 8002890:	2301      	movs	r3, #1
 8002892:	425b      	negs	r3, r3
 8002894:	e7ce      	b.n	8002834 <_vfiprintf_r+0x180>
 8002896:	2300      	movs	r3, #0
 8002898:	001a      	movs	r2, r3
 800289a:	3701      	adds	r7, #1
 800289c:	606b      	str	r3, [r5, #4]
 800289e:	7839      	ldrb	r1, [r7, #0]
 80028a0:	1c78      	adds	r0, r7, #1
 80028a2:	3930      	subs	r1, #48	; 0x30
 80028a4:	4684      	mov	ip, r0
 80028a6:	2909      	cmp	r1, #9
 80028a8:	d903      	bls.n	80028b2 <_vfiprintf_r+0x1fe>
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d0c3      	beq.n	8002836 <_vfiprintf_r+0x182>
 80028ae:	9209      	str	r2, [sp, #36]	; 0x24
 80028b0:	e7c1      	b.n	8002836 <_vfiprintf_r+0x182>
 80028b2:	230a      	movs	r3, #10
 80028b4:	435a      	muls	r2, r3
 80028b6:	4667      	mov	r7, ip
 80028b8:	1852      	adds	r2, r2, r1
 80028ba:	3b09      	subs	r3, #9
 80028bc:	e7ef      	b.n	800289e <_vfiprintf_r+0x1ea>
 80028be:	ab07      	add	r3, sp, #28
 80028c0:	9300      	str	r3, [sp, #0]
 80028c2:	0022      	movs	r2, r4
 80028c4:	0029      	movs	r1, r5
 80028c6:	0030      	movs	r0, r6
 80028c8:	4b16      	ldr	r3, [pc, #88]	; (8002924 <_vfiprintf_r+0x270>)
 80028ca:	e000      	b.n	80028ce <_vfiprintf_r+0x21a>
 80028cc:	bf00      	nop
 80028ce:	9004      	str	r0, [sp, #16]
 80028d0:	9b04      	ldr	r3, [sp, #16]
 80028d2:	3301      	adds	r3, #1
 80028d4:	d1d1      	bne.n	800287a <_vfiprintf_r+0x1c6>
 80028d6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80028d8:	07db      	lsls	r3, r3, #31
 80028da:	d405      	bmi.n	80028e8 <_vfiprintf_r+0x234>
 80028dc:	89a3      	ldrh	r3, [r4, #12]
 80028de:	059b      	lsls	r3, r3, #22
 80028e0:	d402      	bmi.n	80028e8 <_vfiprintf_r+0x234>
 80028e2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80028e4:	f000 fc5a 	bl	800319c <__retarget_lock_release_recursive>
 80028e8:	89a3      	ldrh	r3, [r4, #12]
 80028ea:	065b      	lsls	r3, r3, #25
 80028ec:	d500      	bpl.n	80028f0 <_vfiprintf_r+0x23c>
 80028ee:	e70a      	b.n	8002706 <_vfiprintf_r+0x52>
 80028f0:	980d      	ldr	r0, [sp, #52]	; 0x34
 80028f2:	e70a      	b.n	800270a <_vfiprintf_r+0x56>
 80028f4:	ab07      	add	r3, sp, #28
 80028f6:	9300      	str	r3, [sp, #0]
 80028f8:	0022      	movs	r2, r4
 80028fa:	0029      	movs	r1, r5
 80028fc:	0030      	movs	r0, r6
 80028fe:	4b09      	ldr	r3, [pc, #36]	; (8002924 <_vfiprintf_r+0x270>)
 8002900:	f000 f882 	bl	8002a08 <_printf_i>
 8002904:	e7e3      	b.n	80028ce <_vfiprintf_r+0x21a>
 8002906:	46c0      	nop			; (mov r8, r8)
 8002908:	080036a0 	.word	0x080036a0
 800290c:	080036c0 	.word	0x080036c0
 8002910:	08003680 	.word	0x08003680
 8002914:	0800364a 	.word	0x0800364a
 8002918:	08003650 	.word	0x08003650
 800291c:	08003654 	.word	0x08003654
 8002920:	00000000 	.word	0x00000000
 8002924:	0800268f 	.word	0x0800268f

08002928 <_printf_common>:
 8002928:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800292a:	0015      	movs	r5, r2
 800292c:	9301      	str	r3, [sp, #4]
 800292e:	688a      	ldr	r2, [r1, #8]
 8002930:	690b      	ldr	r3, [r1, #16]
 8002932:	000c      	movs	r4, r1
 8002934:	9000      	str	r0, [sp, #0]
 8002936:	4293      	cmp	r3, r2
 8002938:	da00      	bge.n	800293c <_printf_common+0x14>
 800293a:	0013      	movs	r3, r2
 800293c:	0022      	movs	r2, r4
 800293e:	602b      	str	r3, [r5, #0]
 8002940:	3243      	adds	r2, #67	; 0x43
 8002942:	7812      	ldrb	r2, [r2, #0]
 8002944:	2a00      	cmp	r2, #0
 8002946:	d001      	beq.n	800294c <_printf_common+0x24>
 8002948:	3301      	adds	r3, #1
 800294a:	602b      	str	r3, [r5, #0]
 800294c:	6823      	ldr	r3, [r4, #0]
 800294e:	069b      	lsls	r3, r3, #26
 8002950:	d502      	bpl.n	8002958 <_printf_common+0x30>
 8002952:	682b      	ldr	r3, [r5, #0]
 8002954:	3302      	adds	r3, #2
 8002956:	602b      	str	r3, [r5, #0]
 8002958:	6822      	ldr	r2, [r4, #0]
 800295a:	2306      	movs	r3, #6
 800295c:	0017      	movs	r7, r2
 800295e:	401f      	ands	r7, r3
 8002960:	421a      	tst	r2, r3
 8002962:	d027      	beq.n	80029b4 <_printf_common+0x8c>
 8002964:	0023      	movs	r3, r4
 8002966:	3343      	adds	r3, #67	; 0x43
 8002968:	781b      	ldrb	r3, [r3, #0]
 800296a:	1e5a      	subs	r2, r3, #1
 800296c:	4193      	sbcs	r3, r2
 800296e:	6822      	ldr	r2, [r4, #0]
 8002970:	0692      	lsls	r2, r2, #26
 8002972:	d430      	bmi.n	80029d6 <_printf_common+0xae>
 8002974:	0022      	movs	r2, r4
 8002976:	9901      	ldr	r1, [sp, #4]
 8002978:	9800      	ldr	r0, [sp, #0]
 800297a:	9e08      	ldr	r6, [sp, #32]
 800297c:	3243      	adds	r2, #67	; 0x43
 800297e:	47b0      	blx	r6
 8002980:	1c43      	adds	r3, r0, #1
 8002982:	d025      	beq.n	80029d0 <_printf_common+0xa8>
 8002984:	2306      	movs	r3, #6
 8002986:	6820      	ldr	r0, [r4, #0]
 8002988:	682a      	ldr	r2, [r5, #0]
 800298a:	68e1      	ldr	r1, [r4, #12]
 800298c:	2500      	movs	r5, #0
 800298e:	4003      	ands	r3, r0
 8002990:	2b04      	cmp	r3, #4
 8002992:	d103      	bne.n	800299c <_printf_common+0x74>
 8002994:	1a8d      	subs	r5, r1, r2
 8002996:	43eb      	mvns	r3, r5
 8002998:	17db      	asrs	r3, r3, #31
 800299a:	401d      	ands	r5, r3
 800299c:	68a3      	ldr	r3, [r4, #8]
 800299e:	6922      	ldr	r2, [r4, #16]
 80029a0:	4293      	cmp	r3, r2
 80029a2:	dd01      	ble.n	80029a8 <_printf_common+0x80>
 80029a4:	1a9b      	subs	r3, r3, r2
 80029a6:	18ed      	adds	r5, r5, r3
 80029a8:	2700      	movs	r7, #0
 80029aa:	42bd      	cmp	r5, r7
 80029ac:	d120      	bne.n	80029f0 <_printf_common+0xc8>
 80029ae:	2000      	movs	r0, #0
 80029b0:	e010      	b.n	80029d4 <_printf_common+0xac>
 80029b2:	3701      	adds	r7, #1
 80029b4:	68e3      	ldr	r3, [r4, #12]
 80029b6:	682a      	ldr	r2, [r5, #0]
 80029b8:	1a9b      	subs	r3, r3, r2
 80029ba:	42bb      	cmp	r3, r7
 80029bc:	ddd2      	ble.n	8002964 <_printf_common+0x3c>
 80029be:	0022      	movs	r2, r4
 80029c0:	2301      	movs	r3, #1
 80029c2:	9901      	ldr	r1, [sp, #4]
 80029c4:	9800      	ldr	r0, [sp, #0]
 80029c6:	9e08      	ldr	r6, [sp, #32]
 80029c8:	3219      	adds	r2, #25
 80029ca:	47b0      	blx	r6
 80029cc:	1c43      	adds	r3, r0, #1
 80029ce:	d1f0      	bne.n	80029b2 <_printf_common+0x8a>
 80029d0:	2001      	movs	r0, #1
 80029d2:	4240      	negs	r0, r0
 80029d4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80029d6:	2030      	movs	r0, #48	; 0x30
 80029d8:	18e1      	adds	r1, r4, r3
 80029da:	3143      	adds	r1, #67	; 0x43
 80029dc:	7008      	strb	r0, [r1, #0]
 80029de:	0021      	movs	r1, r4
 80029e0:	1c5a      	adds	r2, r3, #1
 80029e2:	3145      	adds	r1, #69	; 0x45
 80029e4:	7809      	ldrb	r1, [r1, #0]
 80029e6:	18a2      	adds	r2, r4, r2
 80029e8:	3243      	adds	r2, #67	; 0x43
 80029ea:	3302      	adds	r3, #2
 80029ec:	7011      	strb	r1, [r2, #0]
 80029ee:	e7c1      	b.n	8002974 <_printf_common+0x4c>
 80029f0:	0022      	movs	r2, r4
 80029f2:	2301      	movs	r3, #1
 80029f4:	9901      	ldr	r1, [sp, #4]
 80029f6:	9800      	ldr	r0, [sp, #0]
 80029f8:	9e08      	ldr	r6, [sp, #32]
 80029fa:	321a      	adds	r2, #26
 80029fc:	47b0      	blx	r6
 80029fe:	1c43      	adds	r3, r0, #1
 8002a00:	d0e6      	beq.n	80029d0 <_printf_common+0xa8>
 8002a02:	3701      	adds	r7, #1
 8002a04:	e7d1      	b.n	80029aa <_printf_common+0x82>
	...

08002a08 <_printf_i>:
 8002a08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a0a:	b08b      	sub	sp, #44	; 0x2c
 8002a0c:	9206      	str	r2, [sp, #24]
 8002a0e:	000a      	movs	r2, r1
 8002a10:	3243      	adds	r2, #67	; 0x43
 8002a12:	9307      	str	r3, [sp, #28]
 8002a14:	9005      	str	r0, [sp, #20]
 8002a16:	9204      	str	r2, [sp, #16]
 8002a18:	7e0a      	ldrb	r2, [r1, #24]
 8002a1a:	000c      	movs	r4, r1
 8002a1c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8002a1e:	2a78      	cmp	r2, #120	; 0x78
 8002a20:	d807      	bhi.n	8002a32 <_printf_i+0x2a>
 8002a22:	2a62      	cmp	r2, #98	; 0x62
 8002a24:	d809      	bhi.n	8002a3a <_printf_i+0x32>
 8002a26:	2a00      	cmp	r2, #0
 8002a28:	d100      	bne.n	8002a2c <_printf_i+0x24>
 8002a2a:	e0c1      	b.n	8002bb0 <_printf_i+0x1a8>
 8002a2c:	2a58      	cmp	r2, #88	; 0x58
 8002a2e:	d100      	bne.n	8002a32 <_printf_i+0x2a>
 8002a30:	e08c      	b.n	8002b4c <_printf_i+0x144>
 8002a32:	0026      	movs	r6, r4
 8002a34:	3642      	adds	r6, #66	; 0x42
 8002a36:	7032      	strb	r2, [r6, #0]
 8002a38:	e022      	b.n	8002a80 <_printf_i+0x78>
 8002a3a:	0010      	movs	r0, r2
 8002a3c:	3863      	subs	r0, #99	; 0x63
 8002a3e:	2815      	cmp	r0, #21
 8002a40:	d8f7      	bhi.n	8002a32 <_printf_i+0x2a>
 8002a42:	f7fd fb61 	bl	8000108 <__gnu_thumb1_case_shi>
 8002a46:	0016      	.short	0x0016
 8002a48:	fff6001f 	.word	0xfff6001f
 8002a4c:	fff6fff6 	.word	0xfff6fff6
 8002a50:	001ffff6 	.word	0x001ffff6
 8002a54:	fff6fff6 	.word	0xfff6fff6
 8002a58:	fff6fff6 	.word	0xfff6fff6
 8002a5c:	003600a8 	.word	0x003600a8
 8002a60:	fff6009a 	.word	0xfff6009a
 8002a64:	00b9fff6 	.word	0x00b9fff6
 8002a68:	0036fff6 	.word	0x0036fff6
 8002a6c:	fff6fff6 	.word	0xfff6fff6
 8002a70:	009e      	.short	0x009e
 8002a72:	0026      	movs	r6, r4
 8002a74:	681a      	ldr	r2, [r3, #0]
 8002a76:	3642      	adds	r6, #66	; 0x42
 8002a78:	1d11      	adds	r1, r2, #4
 8002a7a:	6019      	str	r1, [r3, #0]
 8002a7c:	6813      	ldr	r3, [r2, #0]
 8002a7e:	7033      	strb	r3, [r6, #0]
 8002a80:	2301      	movs	r3, #1
 8002a82:	e0a7      	b.n	8002bd4 <_printf_i+0x1cc>
 8002a84:	6808      	ldr	r0, [r1, #0]
 8002a86:	6819      	ldr	r1, [r3, #0]
 8002a88:	1d0a      	adds	r2, r1, #4
 8002a8a:	0605      	lsls	r5, r0, #24
 8002a8c:	d50b      	bpl.n	8002aa6 <_printf_i+0x9e>
 8002a8e:	680d      	ldr	r5, [r1, #0]
 8002a90:	601a      	str	r2, [r3, #0]
 8002a92:	2d00      	cmp	r5, #0
 8002a94:	da03      	bge.n	8002a9e <_printf_i+0x96>
 8002a96:	232d      	movs	r3, #45	; 0x2d
 8002a98:	9a04      	ldr	r2, [sp, #16]
 8002a9a:	426d      	negs	r5, r5
 8002a9c:	7013      	strb	r3, [r2, #0]
 8002a9e:	4b61      	ldr	r3, [pc, #388]	; (8002c24 <_printf_i+0x21c>)
 8002aa0:	270a      	movs	r7, #10
 8002aa2:	9303      	str	r3, [sp, #12]
 8002aa4:	e01b      	b.n	8002ade <_printf_i+0xd6>
 8002aa6:	680d      	ldr	r5, [r1, #0]
 8002aa8:	601a      	str	r2, [r3, #0]
 8002aaa:	0641      	lsls	r1, r0, #25
 8002aac:	d5f1      	bpl.n	8002a92 <_printf_i+0x8a>
 8002aae:	b22d      	sxth	r5, r5
 8002ab0:	e7ef      	b.n	8002a92 <_printf_i+0x8a>
 8002ab2:	680d      	ldr	r5, [r1, #0]
 8002ab4:	6819      	ldr	r1, [r3, #0]
 8002ab6:	1d08      	adds	r0, r1, #4
 8002ab8:	6018      	str	r0, [r3, #0]
 8002aba:	062e      	lsls	r6, r5, #24
 8002abc:	d501      	bpl.n	8002ac2 <_printf_i+0xba>
 8002abe:	680d      	ldr	r5, [r1, #0]
 8002ac0:	e003      	b.n	8002aca <_printf_i+0xc2>
 8002ac2:	066d      	lsls	r5, r5, #25
 8002ac4:	d5fb      	bpl.n	8002abe <_printf_i+0xb6>
 8002ac6:	680d      	ldr	r5, [r1, #0]
 8002ac8:	b2ad      	uxth	r5, r5
 8002aca:	4b56      	ldr	r3, [pc, #344]	; (8002c24 <_printf_i+0x21c>)
 8002acc:	2708      	movs	r7, #8
 8002ace:	9303      	str	r3, [sp, #12]
 8002ad0:	2a6f      	cmp	r2, #111	; 0x6f
 8002ad2:	d000      	beq.n	8002ad6 <_printf_i+0xce>
 8002ad4:	3702      	adds	r7, #2
 8002ad6:	0023      	movs	r3, r4
 8002ad8:	2200      	movs	r2, #0
 8002ada:	3343      	adds	r3, #67	; 0x43
 8002adc:	701a      	strb	r2, [r3, #0]
 8002ade:	6863      	ldr	r3, [r4, #4]
 8002ae0:	60a3      	str	r3, [r4, #8]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	db03      	blt.n	8002aee <_printf_i+0xe6>
 8002ae6:	2204      	movs	r2, #4
 8002ae8:	6821      	ldr	r1, [r4, #0]
 8002aea:	4391      	bics	r1, r2
 8002aec:	6021      	str	r1, [r4, #0]
 8002aee:	2d00      	cmp	r5, #0
 8002af0:	d102      	bne.n	8002af8 <_printf_i+0xf0>
 8002af2:	9e04      	ldr	r6, [sp, #16]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d00c      	beq.n	8002b12 <_printf_i+0x10a>
 8002af8:	9e04      	ldr	r6, [sp, #16]
 8002afa:	0028      	movs	r0, r5
 8002afc:	0039      	movs	r1, r7
 8002afe:	f7fd fb93 	bl	8000228 <__aeabi_uidivmod>
 8002b02:	9b03      	ldr	r3, [sp, #12]
 8002b04:	3e01      	subs	r6, #1
 8002b06:	5c5b      	ldrb	r3, [r3, r1]
 8002b08:	7033      	strb	r3, [r6, #0]
 8002b0a:	002b      	movs	r3, r5
 8002b0c:	0005      	movs	r5, r0
 8002b0e:	429f      	cmp	r7, r3
 8002b10:	d9f3      	bls.n	8002afa <_printf_i+0xf2>
 8002b12:	2f08      	cmp	r7, #8
 8002b14:	d109      	bne.n	8002b2a <_printf_i+0x122>
 8002b16:	6823      	ldr	r3, [r4, #0]
 8002b18:	07db      	lsls	r3, r3, #31
 8002b1a:	d506      	bpl.n	8002b2a <_printf_i+0x122>
 8002b1c:	6863      	ldr	r3, [r4, #4]
 8002b1e:	6922      	ldr	r2, [r4, #16]
 8002b20:	4293      	cmp	r3, r2
 8002b22:	dc02      	bgt.n	8002b2a <_printf_i+0x122>
 8002b24:	2330      	movs	r3, #48	; 0x30
 8002b26:	3e01      	subs	r6, #1
 8002b28:	7033      	strb	r3, [r6, #0]
 8002b2a:	9b04      	ldr	r3, [sp, #16]
 8002b2c:	1b9b      	subs	r3, r3, r6
 8002b2e:	6123      	str	r3, [r4, #16]
 8002b30:	9b07      	ldr	r3, [sp, #28]
 8002b32:	0021      	movs	r1, r4
 8002b34:	9300      	str	r3, [sp, #0]
 8002b36:	9805      	ldr	r0, [sp, #20]
 8002b38:	9b06      	ldr	r3, [sp, #24]
 8002b3a:	aa09      	add	r2, sp, #36	; 0x24
 8002b3c:	f7ff fef4 	bl	8002928 <_printf_common>
 8002b40:	1c43      	adds	r3, r0, #1
 8002b42:	d14c      	bne.n	8002bde <_printf_i+0x1d6>
 8002b44:	2001      	movs	r0, #1
 8002b46:	4240      	negs	r0, r0
 8002b48:	b00b      	add	sp, #44	; 0x2c
 8002b4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002b4c:	3145      	adds	r1, #69	; 0x45
 8002b4e:	700a      	strb	r2, [r1, #0]
 8002b50:	4a34      	ldr	r2, [pc, #208]	; (8002c24 <_printf_i+0x21c>)
 8002b52:	9203      	str	r2, [sp, #12]
 8002b54:	681a      	ldr	r2, [r3, #0]
 8002b56:	6821      	ldr	r1, [r4, #0]
 8002b58:	ca20      	ldmia	r2!, {r5}
 8002b5a:	601a      	str	r2, [r3, #0]
 8002b5c:	0608      	lsls	r0, r1, #24
 8002b5e:	d516      	bpl.n	8002b8e <_printf_i+0x186>
 8002b60:	07cb      	lsls	r3, r1, #31
 8002b62:	d502      	bpl.n	8002b6a <_printf_i+0x162>
 8002b64:	2320      	movs	r3, #32
 8002b66:	4319      	orrs	r1, r3
 8002b68:	6021      	str	r1, [r4, #0]
 8002b6a:	2710      	movs	r7, #16
 8002b6c:	2d00      	cmp	r5, #0
 8002b6e:	d1b2      	bne.n	8002ad6 <_printf_i+0xce>
 8002b70:	2320      	movs	r3, #32
 8002b72:	6822      	ldr	r2, [r4, #0]
 8002b74:	439a      	bics	r2, r3
 8002b76:	6022      	str	r2, [r4, #0]
 8002b78:	e7ad      	b.n	8002ad6 <_printf_i+0xce>
 8002b7a:	2220      	movs	r2, #32
 8002b7c:	6809      	ldr	r1, [r1, #0]
 8002b7e:	430a      	orrs	r2, r1
 8002b80:	6022      	str	r2, [r4, #0]
 8002b82:	0022      	movs	r2, r4
 8002b84:	2178      	movs	r1, #120	; 0x78
 8002b86:	3245      	adds	r2, #69	; 0x45
 8002b88:	7011      	strb	r1, [r2, #0]
 8002b8a:	4a27      	ldr	r2, [pc, #156]	; (8002c28 <_printf_i+0x220>)
 8002b8c:	e7e1      	b.n	8002b52 <_printf_i+0x14a>
 8002b8e:	0648      	lsls	r0, r1, #25
 8002b90:	d5e6      	bpl.n	8002b60 <_printf_i+0x158>
 8002b92:	b2ad      	uxth	r5, r5
 8002b94:	e7e4      	b.n	8002b60 <_printf_i+0x158>
 8002b96:	681a      	ldr	r2, [r3, #0]
 8002b98:	680d      	ldr	r5, [r1, #0]
 8002b9a:	1d10      	adds	r0, r2, #4
 8002b9c:	6949      	ldr	r1, [r1, #20]
 8002b9e:	6018      	str	r0, [r3, #0]
 8002ba0:	6813      	ldr	r3, [r2, #0]
 8002ba2:	062e      	lsls	r6, r5, #24
 8002ba4:	d501      	bpl.n	8002baa <_printf_i+0x1a2>
 8002ba6:	6019      	str	r1, [r3, #0]
 8002ba8:	e002      	b.n	8002bb0 <_printf_i+0x1a8>
 8002baa:	066d      	lsls	r5, r5, #25
 8002bac:	d5fb      	bpl.n	8002ba6 <_printf_i+0x19e>
 8002bae:	8019      	strh	r1, [r3, #0]
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	9e04      	ldr	r6, [sp, #16]
 8002bb4:	6123      	str	r3, [r4, #16]
 8002bb6:	e7bb      	b.n	8002b30 <_printf_i+0x128>
 8002bb8:	681a      	ldr	r2, [r3, #0]
 8002bba:	1d11      	adds	r1, r2, #4
 8002bbc:	6019      	str	r1, [r3, #0]
 8002bbe:	6816      	ldr	r6, [r2, #0]
 8002bc0:	2100      	movs	r1, #0
 8002bc2:	0030      	movs	r0, r6
 8002bc4:	6862      	ldr	r2, [r4, #4]
 8002bc6:	f000 fb57 	bl	8003278 <memchr>
 8002bca:	2800      	cmp	r0, #0
 8002bcc:	d001      	beq.n	8002bd2 <_printf_i+0x1ca>
 8002bce:	1b80      	subs	r0, r0, r6
 8002bd0:	6060      	str	r0, [r4, #4]
 8002bd2:	6863      	ldr	r3, [r4, #4]
 8002bd4:	6123      	str	r3, [r4, #16]
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	9a04      	ldr	r2, [sp, #16]
 8002bda:	7013      	strb	r3, [r2, #0]
 8002bdc:	e7a8      	b.n	8002b30 <_printf_i+0x128>
 8002bde:	6923      	ldr	r3, [r4, #16]
 8002be0:	0032      	movs	r2, r6
 8002be2:	9906      	ldr	r1, [sp, #24]
 8002be4:	9805      	ldr	r0, [sp, #20]
 8002be6:	9d07      	ldr	r5, [sp, #28]
 8002be8:	47a8      	blx	r5
 8002bea:	1c43      	adds	r3, r0, #1
 8002bec:	d0aa      	beq.n	8002b44 <_printf_i+0x13c>
 8002bee:	6823      	ldr	r3, [r4, #0]
 8002bf0:	079b      	lsls	r3, r3, #30
 8002bf2:	d415      	bmi.n	8002c20 <_printf_i+0x218>
 8002bf4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002bf6:	68e0      	ldr	r0, [r4, #12]
 8002bf8:	4298      	cmp	r0, r3
 8002bfa:	daa5      	bge.n	8002b48 <_printf_i+0x140>
 8002bfc:	0018      	movs	r0, r3
 8002bfe:	e7a3      	b.n	8002b48 <_printf_i+0x140>
 8002c00:	0022      	movs	r2, r4
 8002c02:	2301      	movs	r3, #1
 8002c04:	9906      	ldr	r1, [sp, #24]
 8002c06:	9805      	ldr	r0, [sp, #20]
 8002c08:	9e07      	ldr	r6, [sp, #28]
 8002c0a:	3219      	adds	r2, #25
 8002c0c:	47b0      	blx	r6
 8002c0e:	1c43      	adds	r3, r0, #1
 8002c10:	d098      	beq.n	8002b44 <_printf_i+0x13c>
 8002c12:	3501      	adds	r5, #1
 8002c14:	68e3      	ldr	r3, [r4, #12]
 8002c16:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002c18:	1a9b      	subs	r3, r3, r2
 8002c1a:	42ab      	cmp	r3, r5
 8002c1c:	dcf0      	bgt.n	8002c00 <_printf_i+0x1f8>
 8002c1e:	e7e9      	b.n	8002bf4 <_printf_i+0x1ec>
 8002c20:	2500      	movs	r5, #0
 8002c22:	e7f7      	b.n	8002c14 <_printf_i+0x20c>
 8002c24:	0800365b 	.word	0x0800365b
 8002c28:	0800366c 	.word	0x0800366c

08002c2c <_sbrk_r>:
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	b570      	push	{r4, r5, r6, lr}
 8002c30:	4d06      	ldr	r5, [pc, #24]	; (8002c4c <_sbrk_r+0x20>)
 8002c32:	0004      	movs	r4, r0
 8002c34:	0008      	movs	r0, r1
 8002c36:	602b      	str	r3, [r5, #0]
 8002c38:	f7fe f822 	bl	8000c80 <_sbrk>
 8002c3c:	1c43      	adds	r3, r0, #1
 8002c3e:	d103      	bne.n	8002c48 <_sbrk_r+0x1c>
 8002c40:	682b      	ldr	r3, [r5, #0]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d000      	beq.n	8002c48 <_sbrk_r+0x1c>
 8002c46:	6023      	str	r3, [r4, #0]
 8002c48:	bd70      	pop	{r4, r5, r6, pc}
 8002c4a:	46c0      	nop			; (mov r8, r8)
 8002c4c:	20000124 	.word	0x20000124

08002c50 <__swbuf_r>:
 8002c50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c52:	0005      	movs	r5, r0
 8002c54:	000e      	movs	r6, r1
 8002c56:	0014      	movs	r4, r2
 8002c58:	2800      	cmp	r0, #0
 8002c5a:	d004      	beq.n	8002c66 <__swbuf_r+0x16>
 8002c5c:	6983      	ldr	r3, [r0, #24]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d101      	bne.n	8002c66 <__swbuf_r+0x16>
 8002c62:	f000 f9f9 	bl	8003058 <__sinit>
 8002c66:	4b22      	ldr	r3, [pc, #136]	; (8002cf0 <__swbuf_r+0xa0>)
 8002c68:	429c      	cmp	r4, r3
 8002c6a:	d12e      	bne.n	8002cca <__swbuf_r+0x7a>
 8002c6c:	686c      	ldr	r4, [r5, #4]
 8002c6e:	69a3      	ldr	r3, [r4, #24]
 8002c70:	60a3      	str	r3, [r4, #8]
 8002c72:	89a3      	ldrh	r3, [r4, #12]
 8002c74:	071b      	lsls	r3, r3, #28
 8002c76:	d532      	bpl.n	8002cde <__swbuf_r+0x8e>
 8002c78:	6923      	ldr	r3, [r4, #16]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d02f      	beq.n	8002cde <__swbuf_r+0x8e>
 8002c7e:	6823      	ldr	r3, [r4, #0]
 8002c80:	6922      	ldr	r2, [r4, #16]
 8002c82:	b2f7      	uxtb	r7, r6
 8002c84:	1a98      	subs	r0, r3, r2
 8002c86:	6963      	ldr	r3, [r4, #20]
 8002c88:	b2f6      	uxtb	r6, r6
 8002c8a:	4283      	cmp	r3, r0
 8002c8c:	dc05      	bgt.n	8002c9a <__swbuf_r+0x4a>
 8002c8e:	0021      	movs	r1, r4
 8002c90:	0028      	movs	r0, r5
 8002c92:	f000 f93f 	bl	8002f14 <_fflush_r>
 8002c96:	2800      	cmp	r0, #0
 8002c98:	d127      	bne.n	8002cea <__swbuf_r+0x9a>
 8002c9a:	68a3      	ldr	r3, [r4, #8]
 8002c9c:	3001      	adds	r0, #1
 8002c9e:	3b01      	subs	r3, #1
 8002ca0:	60a3      	str	r3, [r4, #8]
 8002ca2:	6823      	ldr	r3, [r4, #0]
 8002ca4:	1c5a      	adds	r2, r3, #1
 8002ca6:	6022      	str	r2, [r4, #0]
 8002ca8:	701f      	strb	r7, [r3, #0]
 8002caa:	6963      	ldr	r3, [r4, #20]
 8002cac:	4283      	cmp	r3, r0
 8002cae:	d004      	beq.n	8002cba <__swbuf_r+0x6a>
 8002cb0:	89a3      	ldrh	r3, [r4, #12]
 8002cb2:	07db      	lsls	r3, r3, #31
 8002cb4:	d507      	bpl.n	8002cc6 <__swbuf_r+0x76>
 8002cb6:	2e0a      	cmp	r6, #10
 8002cb8:	d105      	bne.n	8002cc6 <__swbuf_r+0x76>
 8002cba:	0021      	movs	r1, r4
 8002cbc:	0028      	movs	r0, r5
 8002cbe:	f000 f929 	bl	8002f14 <_fflush_r>
 8002cc2:	2800      	cmp	r0, #0
 8002cc4:	d111      	bne.n	8002cea <__swbuf_r+0x9a>
 8002cc6:	0030      	movs	r0, r6
 8002cc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002cca:	4b0a      	ldr	r3, [pc, #40]	; (8002cf4 <__swbuf_r+0xa4>)
 8002ccc:	429c      	cmp	r4, r3
 8002cce:	d101      	bne.n	8002cd4 <__swbuf_r+0x84>
 8002cd0:	68ac      	ldr	r4, [r5, #8]
 8002cd2:	e7cc      	b.n	8002c6e <__swbuf_r+0x1e>
 8002cd4:	4b08      	ldr	r3, [pc, #32]	; (8002cf8 <__swbuf_r+0xa8>)
 8002cd6:	429c      	cmp	r4, r3
 8002cd8:	d1c9      	bne.n	8002c6e <__swbuf_r+0x1e>
 8002cda:	68ec      	ldr	r4, [r5, #12]
 8002cdc:	e7c7      	b.n	8002c6e <__swbuf_r+0x1e>
 8002cde:	0021      	movs	r1, r4
 8002ce0:	0028      	movs	r0, r5
 8002ce2:	f000 f80b 	bl	8002cfc <__swsetup_r>
 8002ce6:	2800      	cmp	r0, #0
 8002ce8:	d0c9      	beq.n	8002c7e <__swbuf_r+0x2e>
 8002cea:	2601      	movs	r6, #1
 8002cec:	4276      	negs	r6, r6
 8002cee:	e7ea      	b.n	8002cc6 <__swbuf_r+0x76>
 8002cf0:	080036a0 	.word	0x080036a0
 8002cf4:	080036c0 	.word	0x080036c0
 8002cf8:	08003680 	.word	0x08003680

08002cfc <__swsetup_r>:
 8002cfc:	4b37      	ldr	r3, [pc, #220]	; (8002ddc <__swsetup_r+0xe0>)
 8002cfe:	b570      	push	{r4, r5, r6, lr}
 8002d00:	681d      	ldr	r5, [r3, #0]
 8002d02:	0006      	movs	r6, r0
 8002d04:	000c      	movs	r4, r1
 8002d06:	2d00      	cmp	r5, #0
 8002d08:	d005      	beq.n	8002d16 <__swsetup_r+0x1a>
 8002d0a:	69ab      	ldr	r3, [r5, #24]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d102      	bne.n	8002d16 <__swsetup_r+0x1a>
 8002d10:	0028      	movs	r0, r5
 8002d12:	f000 f9a1 	bl	8003058 <__sinit>
 8002d16:	4b32      	ldr	r3, [pc, #200]	; (8002de0 <__swsetup_r+0xe4>)
 8002d18:	429c      	cmp	r4, r3
 8002d1a:	d10f      	bne.n	8002d3c <__swsetup_r+0x40>
 8002d1c:	686c      	ldr	r4, [r5, #4]
 8002d1e:	230c      	movs	r3, #12
 8002d20:	5ee2      	ldrsh	r2, [r4, r3]
 8002d22:	b293      	uxth	r3, r2
 8002d24:	0711      	lsls	r1, r2, #28
 8002d26:	d42d      	bmi.n	8002d84 <__swsetup_r+0x88>
 8002d28:	06d9      	lsls	r1, r3, #27
 8002d2a:	d411      	bmi.n	8002d50 <__swsetup_r+0x54>
 8002d2c:	2309      	movs	r3, #9
 8002d2e:	2001      	movs	r0, #1
 8002d30:	6033      	str	r3, [r6, #0]
 8002d32:	3337      	adds	r3, #55	; 0x37
 8002d34:	4313      	orrs	r3, r2
 8002d36:	81a3      	strh	r3, [r4, #12]
 8002d38:	4240      	negs	r0, r0
 8002d3a:	bd70      	pop	{r4, r5, r6, pc}
 8002d3c:	4b29      	ldr	r3, [pc, #164]	; (8002de4 <__swsetup_r+0xe8>)
 8002d3e:	429c      	cmp	r4, r3
 8002d40:	d101      	bne.n	8002d46 <__swsetup_r+0x4a>
 8002d42:	68ac      	ldr	r4, [r5, #8]
 8002d44:	e7eb      	b.n	8002d1e <__swsetup_r+0x22>
 8002d46:	4b28      	ldr	r3, [pc, #160]	; (8002de8 <__swsetup_r+0xec>)
 8002d48:	429c      	cmp	r4, r3
 8002d4a:	d1e8      	bne.n	8002d1e <__swsetup_r+0x22>
 8002d4c:	68ec      	ldr	r4, [r5, #12]
 8002d4e:	e7e6      	b.n	8002d1e <__swsetup_r+0x22>
 8002d50:	075b      	lsls	r3, r3, #29
 8002d52:	d513      	bpl.n	8002d7c <__swsetup_r+0x80>
 8002d54:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002d56:	2900      	cmp	r1, #0
 8002d58:	d008      	beq.n	8002d6c <__swsetup_r+0x70>
 8002d5a:	0023      	movs	r3, r4
 8002d5c:	3344      	adds	r3, #68	; 0x44
 8002d5e:	4299      	cmp	r1, r3
 8002d60:	d002      	beq.n	8002d68 <__swsetup_r+0x6c>
 8002d62:	0030      	movs	r0, r6
 8002d64:	f7ff fb9c 	bl	80024a0 <_free_r>
 8002d68:	2300      	movs	r3, #0
 8002d6a:	6363      	str	r3, [r4, #52]	; 0x34
 8002d6c:	2224      	movs	r2, #36	; 0x24
 8002d6e:	89a3      	ldrh	r3, [r4, #12]
 8002d70:	4393      	bics	r3, r2
 8002d72:	81a3      	strh	r3, [r4, #12]
 8002d74:	2300      	movs	r3, #0
 8002d76:	6063      	str	r3, [r4, #4]
 8002d78:	6923      	ldr	r3, [r4, #16]
 8002d7a:	6023      	str	r3, [r4, #0]
 8002d7c:	2308      	movs	r3, #8
 8002d7e:	89a2      	ldrh	r2, [r4, #12]
 8002d80:	4313      	orrs	r3, r2
 8002d82:	81a3      	strh	r3, [r4, #12]
 8002d84:	6923      	ldr	r3, [r4, #16]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d10b      	bne.n	8002da2 <__swsetup_r+0xa6>
 8002d8a:	21a0      	movs	r1, #160	; 0xa0
 8002d8c:	2280      	movs	r2, #128	; 0x80
 8002d8e:	89a3      	ldrh	r3, [r4, #12]
 8002d90:	0089      	lsls	r1, r1, #2
 8002d92:	0092      	lsls	r2, r2, #2
 8002d94:	400b      	ands	r3, r1
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d003      	beq.n	8002da2 <__swsetup_r+0xa6>
 8002d9a:	0021      	movs	r1, r4
 8002d9c:	0030      	movs	r0, r6
 8002d9e:	f000 fa27 	bl	80031f0 <__smakebuf_r>
 8002da2:	220c      	movs	r2, #12
 8002da4:	5ea3      	ldrsh	r3, [r4, r2]
 8002da6:	2001      	movs	r0, #1
 8002da8:	001a      	movs	r2, r3
 8002daa:	b299      	uxth	r1, r3
 8002dac:	4002      	ands	r2, r0
 8002dae:	4203      	tst	r3, r0
 8002db0:	d00f      	beq.n	8002dd2 <__swsetup_r+0xd6>
 8002db2:	2200      	movs	r2, #0
 8002db4:	60a2      	str	r2, [r4, #8]
 8002db6:	6962      	ldr	r2, [r4, #20]
 8002db8:	4252      	negs	r2, r2
 8002dba:	61a2      	str	r2, [r4, #24]
 8002dbc:	2000      	movs	r0, #0
 8002dbe:	6922      	ldr	r2, [r4, #16]
 8002dc0:	4282      	cmp	r2, r0
 8002dc2:	d1ba      	bne.n	8002d3a <__swsetup_r+0x3e>
 8002dc4:	060a      	lsls	r2, r1, #24
 8002dc6:	d5b8      	bpl.n	8002d3a <__swsetup_r+0x3e>
 8002dc8:	2240      	movs	r2, #64	; 0x40
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	81a3      	strh	r3, [r4, #12]
 8002dce:	3801      	subs	r0, #1
 8002dd0:	e7b3      	b.n	8002d3a <__swsetup_r+0x3e>
 8002dd2:	0788      	lsls	r0, r1, #30
 8002dd4:	d400      	bmi.n	8002dd8 <__swsetup_r+0xdc>
 8002dd6:	6962      	ldr	r2, [r4, #20]
 8002dd8:	60a2      	str	r2, [r4, #8]
 8002dda:	e7ef      	b.n	8002dbc <__swsetup_r+0xc0>
 8002ddc:	2000000c 	.word	0x2000000c
 8002de0:	080036a0 	.word	0x080036a0
 8002de4:	080036c0 	.word	0x080036c0
 8002de8:	08003680 	.word	0x08003680

08002dec <abort>:
 8002dec:	2006      	movs	r0, #6
 8002dee:	b510      	push	{r4, lr}
 8002df0:	f000 fa88 	bl	8003304 <raise>
 8002df4:	2001      	movs	r0, #1
 8002df6:	f7fd fed2 	bl	8000b9e <_exit>
	...

08002dfc <__sflush_r>:
 8002dfc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002dfe:	898b      	ldrh	r3, [r1, #12]
 8002e00:	0005      	movs	r5, r0
 8002e02:	000c      	movs	r4, r1
 8002e04:	071a      	lsls	r2, r3, #28
 8002e06:	d45f      	bmi.n	8002ec8 <__sflush_r+0xcc>
 8002e08:	684a      	ldr	r2, [r1, #4]
 8002e0a:	2a00      	cmp	r2, #0
 8002e0c:	dc04      	bgt.n	8002e18 <__sflush_r+0x1c>
 8002e0e:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8002e10:	2a00      	cmp	r2, #0
 8002e12:	dc01      	bgt.n	8002e18 <__sflush_r+0x1c>
 8002e14:	2000      	movs	r0, #0
 8002e16:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002e18:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8002e1a:	2f00      	cmp	r7, #0
 8002e1c:	d0fa      	beq.n	8002e14 <__sflush_r+0x18>
 8002e1e:	2200      	movs	r2, #0
 8002e20:	2180      	movs	r1, #128	; 0x80
 8002e22:	682e      	ldr	r6, [r5, #0]
 8002e24:	602a      	str	r2, [r5, #0]
 8002e26:	001a      	movs	r2, r3
 8002e28:	0149      	lsls	r1, r1, #5
 8002e2a:	400a      	ands	r2, r1
 8002e2c:	420b      	tst	r3, r1
 8002e2e:	d034      	beq.n	8002e9a <__sflush_r+0x9e>
 8002e30:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002e32:	89a3      	ldrh	r3, [r4, #12]
 8002e34:	075b      	lsls	r3, r3, #29
 8002e36:	d506      	bpl.n	8002e46 <__sflush_r+0x4a>
 8002e38:	6863      	ldr	r3, [r4, #4]
 8002e3a:	1ac0      	subs	r0, r0, r3
 8002e3c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d001      	beq.n	8002e46 <__sflush_r+0x4a>
 8002e42:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002e44:	1ac0      	subs	r0, r0, r3
 8002e46:	0002      	movs	r2, r0
 8002e48:	6a21      	ldr	r1, [r4, #32]
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	0028      	movs	r0, r5
 8002e4e:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8002e50:	47b8      	blx	r7
 8002e52:	89a1      	ldrh	r1, [r4, #12]
 8002e54:	1c43      	adds	r3, r0, #1
 8002e56:	d106      	bne.n	8002e66 <__sflush_r+0x6a>
 8002e58:	682b      	ldr	r3, [r5, #0]
 8002e5a:	2b1d      	cmp	r3, #29
 8002e5c:	d831      	bhi.n	8002ec2 <__sflush_r+0xc6>
 8002e5e:	4a2c      	ldr	r2, [pc, #176]	; (8002f10 <__sflush_r+0x114>)
 8002e60:	40da      	lsrs	r2, r3
 8002e62:	07d3      	lsls	r3, r2, #31
 8002e64:	d52d      	bpl.n	8002ec2 <__sflush_r+0xc6>
 8002e66:	2300      	movs	r3, #0
 8002e68:	6063      	str	r3, [r4, #4]
 8002e6a:	6923      	ldr	r3, [r4, #16]
 8002e6c:	6023      	str	r3, [r4, #0]
 8002e6e:	04cb      	lsls	r3, r1, #19
 8002e70:	d505      	bpl.n	8002e7e <__sflush_r+0x82>
 8002e72:	1c43      	adds	r3, r0, #1
 8002e74:	d102      	bne.n	8002e7c <__sflush_r+0x80>
 8002e76:	682b      	ldr	r3, [r5, #0]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d100      	bne.n	8002e7e <__sflush_r+0x82>
 8002e7c:	6560      	str	r0, [r4, #84]	; 0x54
 8002e7e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002e80:	602e      	str	r6, [r5, #0]
 8002e82:	2900      	cmp	r1, #0
 8002e84:	d0c6      	beq.n	8002e14 <__sflush_r+0x18>
 8002e86:	0023      	movs	r3, r4
 8002e88:	3344      	adds	r3, #68	; 0x44
 8002e8a:	4299      	cmp	r1, r3
 8002e8c:	d002      	beq.n	8002e94 <__sflush_r+0x98>
 8002e8e:	0028      	movs	r0, r5
 8002e90:	f7ff fb06 	bl	80024a0 <_free_r>
 8002e94:	2000      	movs	r0, #0
 8002e96:	6360      	str	r0, [r4, #52]	; 0x34
 8002e98:	e7bd      	b.n	8002e16 <__sflush_r+0x1a>
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	0028      	movs	r0, r5
 8002e9e:	6a21      	ldr	r1, [r4, #32]
 8002ea0:	47b8      	blx	r7
 8002ea2:	1c43      	adds	r3, r0, #1
 8002ea4:	d1c5      	bne.n	8002e32 <__sflush_r+0x36>
 8002ea6:	682b      	ldr	r3, [r5, #0]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d0c2      	beq.n	8002e32 <__sflush_r+0x36>
 8002eac:	2b1d      	cmp	r3, #29
 8002eae:	d001      	beq.n	8002eb4 <__sflush_r+0xb8>
 8002eb0:	2b16      	cmp	r3, #22
 8002eb2:	d101      	bne.n	8002eb8 <__sflush_r+0xbc>
 8002eb4:	602e      	str	r6, [r5, #0]
 8002eb6:	e7ad      	b.n	8002e14 <__sflush_r+0x18>
 8002eb8:	2340      	movs	r3, #64	; 0x40
 8002eba:	89a2      	ldrh	r2, [r4, #12]
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	81a3      	strh	r3, [r4, #12]
 8002ec0:	e7a9      	b.n	8002e16 <__sflush_r+0x1a>
 8002ec2:	2340      	movs	r3, #64	; 0x40
 8002ec4:	430b      	orrs	r3, r1
 8002ec6:	e7fa      	b.n	8002ebe <__sflush_r+0xc2>
 8002ec8:	690f      	ldr	r7, [r1, #16]
 8002eca:	2f00      	cmp	r7, #0
 8002ecc:	d0a2      	beq.n	8002e14 <__sflush_r+0x18>
 8002ece:	680a      	ldr	r2, [r1, #0]
 8002ed0:	600f      	str	r7, [r1, #0]
 8002ed2:	1bd2      	subs	r2, r2, r7
 8002ed4:	9201      	str	r2, [sp, #4]
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	079b      	lsls	r3, r3, #30
 8002eda:	d100      	bne.n	8002ede <__sflush_r+0xe2>
 8002edc:	694a      	ldr	r2, [r1, #20]
 8002ede:	60a2      	str	r2, [r4, #8]
 8002ee0:	9b01      	ldr	r3, [sp, #4]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	dc00      	bgt.n	8002ee8 <__sflush_r+0xec>
 8002ee6:	e795      	b.n	8002e14 <__sflush_r+0x18>
 8002ee8:	003a      	movs	r2, r7
 8002eea:	0028      	movs	r0, r5
 8002eec:	9b01      	ldr	r3, [sp, #4]
 8002eee:	6a21      	ldr	r1, [r4, #32]
 8002ef0:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002ef2:	47b0      	blx	r6
 8002ef4:	2800      	cmp	r0, #0
 8002ef6:	dc06      	bgt.n	8002f06 <__sflush_r+0x10a>
 8002ef8:	2340      	movs	r3, #64	; 0x40
 8002efa:	2001      	movs	r0, #1
 8002efc:	89a2      	ldrh	r2, [r4, #12]
 8002efe:	4240      	negs	r0, r0
 8002f00:	4313      	orrs	r3, r2
 8002f02:	81a3      	strh	r3, [r4, #12]
 8002f04:	e787      	b.n	8002e16 <__sflush_r+0x1a>
 8002f06:	9b01      	ldr	r3, [sp, #4]
 8002f08:	183f      	adds	r7, r7, r0
 8002f0a:	1a1b      	subs	r3, r3, r0
 8002f0c:	9301      	str	r3, [sp, #4]
 8002f0e:	e7e7      	b.n	8002ee0 <__sflush_r+0xe4>
 8002f10:	20400001 	.word	0x20400001

08002f14 <_fflush_r>:
 8002f14:	690b      	ldr	r3, [r1, #16]
 8002f16:	b570      	push	{r4, r5, r6, lr}
 8002f18:	0005      	movs	r5, r0
 8002f1a:	000c      	movs	r4, r1
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d102      	bne.n	8002f26 <_fflush_r+0x12>
 8002f20:	2500      	movs	r5, #0
 8002f22:	0028      	movs	r0, r5
 8002f24:	bd70      	pop	{r4, r5, r6, pc}
 8002f26:	2800      	cmp	r0, #0
 8002f28:	d004      	beq.n	8002f34 <_fflush_r+0x20>
 8002f2a:	6983      	ldr	r3, [r0, #24]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d101      	bne.n	8002f34 <_fflush_r+0x20>
 8002f30:	f000 f892 	bl	8003058 <__sinit>
 8002f34:	4b14      	ldr	r3, [pc, #80]	; (8002f88 <_fflush_r+0x74>)
 8002f36:	429c      	cmp	r4, r3
 8002f38:	d11b      	bne.n	8002f72 <_fflush_r+0x5e>
 8002f3a:	686c      	ldr	r4, [r5, #4]
 8002f3c:	220c      	movs	r2, #12
 8002f3e:	5ea3      	ldrsh	r3, [r4, r2]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d0ed      	beq.n	8002f20 <_fflush_r+0xc>
 8002f44:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002f46:	07d2      	lsls	r2, r2, #31
 8002f48:	d404      	bmi.n	8002f54 <_fflush_r+0x40>
 8002f4a:	059b      	lsls	r3, r3, #22
 8002f4c:	d402      	bmi.n	8002f54 <_fflush_r+0x40>
 8002f4e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002f50:	f000 f923 	bl	800319a <__retarget_lock_acquire_recursive>
 8002f54:	0028      	movs	r0, r5
 8002f56:	0021      	movs	r1, r4
 8002f58:	f7ff ff50 	bl	8002dfc <__sflush_r>
 8002f5c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002f5e:	0005      	movs	r5, r0
 8002f60:	07db      	lsls	r3, r3, #31
 8002f62:	d4de      	bmi.n	8002f22 <_fflush_r+0xe>
 8002f64:	89a3      	ldrh	r3, [r4, #12]
 8002f66:	059b      	lsls	r3, r3, #22
 8002f68:	d4db      	bmi.n	8002f22 <_fflush_r+0xe>
 8002f6a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002f6c:	f000 f916 	bl	800319c <__retarget_lock_release_recursive>
 8002f70:	e7d7      	b.n	8002f22 <_fflush_r+0xe>
 8002f72:	4b06      	ldr	r3, [pc, #24]	; (8002f8c <_fflush_r+0x78>)
 8002f74:	429c      	cmp	r4, r3
 8002f76:	d101      	bne.n	8002f7c <_fflush_r+0x68>
 8002f78:	68ac      	ldr	r4, [r5, #8]
 8002f7a:	e7df      	b.n	8002f3c <_fflush_r+0x28>
 8002f7c:	4b04      	ldr	r3, [pc, #16]	; (8002f90 <_fflush_r+0x7c>)
 8002f7e:	429c      	cmp	r4, r3
 8002f80:	d1dc      	bne.n	8002f3c <_fflush_r+0x28>
 8002f82:	68ec      	ldr	r4, [r5, #12]
 8002f84:	e7da      	b.n	8002f3c <_fflush_r+0x28>
 8002f86:	46c0      	nop			; (mov r8, r8)
 8002f88:	080036a0 	.word	0x080036a0
 8002f8c:	080036c0 	.word	0x080036c0
 8002f90:	08003680 	.word	0x08003680

08002f94 <std>:
 8002f94:	2300      	movs	r3, #0
 8002f96:	b510      	push	{r4, lr}
 8002f98:	0004      	movs	r4, r0
 8002f9a:	6003      	str	r3, [r0, #0]
 8002f9c:	6043      	str	r3, [r0, #4]
 8002f9e:	6083      	str	r3, [r0, #8]
 8002fa0:	8181      	strh	r1, [r0, #12]
 8002fa2:	6643      	str	r3, [r0, #100]	; 0x64
 8002fa4:	0019      	movs	r1, r3
 8002fa6:	81c2      	strh	r2, [r0, #14]
 8002fa8:	6103      	str	r3, [r0, #16]
 8002faa:	6143      	str	r3, [r0, #20]
 8002fac:	6183      	str	r3, [r0, #24]
 8002fae:	2208      	movs	r2, #8
 8002fb0:	305c      	adds	r0, #92	; 0x5c
 8002fb2:	f7ff f99b 	bl	80022ec <memset>
 8002fb6:	4b05      	ldr	r3, [pc, #20]	; (8002fcc <std+0x38>)
 8002fb8:	6224      	str	r4, [r4, #32]
 8002fba:	6263      	str	r3, [r4, #36]	; 0x24
 8002fbc:	4b04      	ldr	r3, [pc, #16]	; (8002fd0 <std+0x3c>)
 8002fbe:	62a3      	str	r3, [r4, #40]	; 0x28
 8002fc0:	4b04      	ldr	r3, [pc, #16]	; (8002fd4 <std+0x40>)
 8002fc2:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002fc4:	4b04      	ldr	r3, [pc, #16]	; (8002fd8 <std+0x44>)
 8002fc6:	6323      	str	r3, [r4, #48]	; 0x30
 8002fc8:	bd10      	pop	{r4, pc}
 8002fca:	46c0      	nop			; (mov r8, r8)
 8002fcc:	08003345 	.word	0x08003345
 8002fd0:	0800336d 	.word	0x0800336d
 8002fd4:	080033a5 	.word	0x080033a5
 8002fd8:	080033d1 	.word	0x080033d1

08002fdc <_cleanup_r>:
 8002fdc:	b510      	push	{r4, lr}
 8002fde:	4902      	ldr	r1, [pc, #8]	; (8002fe8 <_cleanup_r+0xc>)
 8002fe0:	f000 f8ba 	bl	8003158 <_fwalk_reent>
 8002fe4:	bd10      	pop	{r4, pc}
 8002fe6:	46c0      	nop			; (mov r8, r8)
 8002fe8:	08002f15 	.word	0x08002f15

08002fec <__sfmoreglue>:
 8002fec:	b570      	push	{r4, r5, r6, lr}
 8002fee:	2568      	movs	r5, #104	; 0x68
 8002ff0:	1e4a      	subs	r2, r1, #1
 8002ff2:	4355      	muls	r5, r2
 8002ff4:	000e      	movs	r6, r1
 8002ff6:	0029      	movs	r1, r5
 8002ff8:	3174      	adds	r1, #116	; 0x74
 8002ffa:	f7ff fabd 	bl	8002578 <_malloc_r>
 8002ffe:	1e04      	subs	r4, r0, #0
 8003000:	d008      	beq.n	8003014 <__sfmoreglue+0x28>
 8003002:	2100      	movs	r1, #0
 8003004:	002a      	movs	r2, r5
 8003006:	6001      	str	r1, [r0, #0]
 8003008:	6046      	str	r6, [r0, #4]
 800300a:	300c      	adds	r0, #12
 800300c:	60a0      	str	r0, [r4, #8]
 800300e:	3268      	adds	r2, #104	; 0x68
 8003010:	f7ff f96c 	bl	80022ec <memset>
 8003014:	0020      	movs	r0, r4
 8003016:	bd70      	pop	{r4, r5, r6, pc}

08003018 <__sfp_lock_acquire>:
 8003018:	b510      	push	{r4, lr}
 800301a:	4802      	ldr	r0, [pc, #8]	; (8003024 <__sfp_lock_acquire+0xc>)
 800301c:	f000 f8bd 	bl	800319a <__retarget_lock_acquire_recursive>
 8003020:	bd10      	pop	{r4, pc}
 8003022:	46c0      	nop			; (mov r8, r8)
 8003024:	20000129 	.word	0x20000129

08003028 <__sfp_lock_release>:
 8003028:	b510      	push	{r4, lr}
 800302a:	4802      	ldr	r0, [pc, #8]	; (8003034 <__sfp_lock_release+0xc>)
 800302c:	f000 f8b6 	bl	800319c <__retarget_lock_release_recursive>
 8003030:	bd10      	pop	{r4, pc}
 8003032:	46c0      	nop			; (mov r8, r8)
 8003034:	20000129 	.word	0x20000129

08003038 <__sinit_lock_acquire>:
 8003038:	b510      	push	{r4, lr}
 800303a:	4802      	ldr	r0, [pc, #8]	; (8003044 <__sinit_lock_acquire+0xc>)
 800303c:	f000 f8ad 	bl	800319a <__retarget_lock_acquire_recursive>
 8003040:	bd10      	pop	{r4, pc}
 8003042:	46c0      	nop			; (mov r8, r8)
 8003044:	2000012a 	.word	0x2000012a

08003048 <__sinit_lock_release>:
 8003048:	b510      	push	{r4, lr}
 800304a:	4802      	ldr	r0, [pc, #8]	; (8003054 <__sinit_lock_release+0xc>)
 800304c:	f000 f8a6 	bl	800319c <__retarget_lock_release_recursive>
 8003050:	bd10      	pop	{r4, pc}
 8003052:	46c0      	nop			; (mov r8, r8)
 8003054:	2000012a 	.word	0x2000012a

08003058 <__sinit>:
 8003058:	b513      	push	{r0, r1, r4, lr}
 800305a:	0004      	movs	r4, r0
 800305c:	f7ff ffec 	bl	8003038 <__sinit_lock_acquire>
 8003060:	69a3      	ldr	r3, [r4, #24]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d002      	beq.n	800306c <__sinit+0x14>
 8003066:	f7ff ffef 	bl	8003048 <__sinit_lock_release>
 800306a:	bd13      	pop	{r0, r1, r4, pc}
 800306c:	64a3      	str	r3, [r4, #72]	; 0x48
 800306e:	64e3      	str	r3, [r4, #76]	; 0x4c
 8003070:	6523      	str	r3, [r4, #80]	; 0x50
 8003072:	4b13      	ldr	r3, [pc, #76]	; (80030c0 <__sinit+0x68>)
 8003074:	4a13      	ldr	r2, [pc, #76]	; (80030c4 <__sinit+0x6c>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	62a2      	str	r2, [r4, #40]	; 0x28
 800307a:	9301      	str	r3, [sp, #4]
 800307c:	42a3      	cmp	r3, r4
 800307e:	d101      	bne.n	8003084 <__sinit+0x2c>
 8003080:	2301      	movs	r3, #1
 8003082:	61a3      	str	r3, [r4, #24]
 8003084:	0020      	movs	r0, r4
 8003086:	f000 f81f 	bl	80030c8 <__sfp>
 800308a:	6060      	str	r0, [r4, #4]
 800308c:	0020      	movs	r0, r4
 800308e:	f000 f81b 	bl	80030c8 <__sfp>
 8003092:	60a0      	str	r0, [r4, #8]
 8003094:	0020      	movs	r0, r4
 8003096:	f000 f817 	bl	80030c8 <__sfp>
 800309a:	2200      	movs	r2, #0
 800309c:	2104      	movs	r1, #4
 800309e:	60e0      	str	r0, [r4, #12]
 80030a0:	6860      	ldr	r0, [r4, #4]
 80030a2:	f7ff ff77 	bl	8002f94 <std>
 80030a6:	2201      	movs	r2, #1
 80030a8:	2109      	movs	r1, #9
 80030aa:	68a0      	ldr	r0, [r4, #8]
 80030ac:	f7ff ff72 	bl	8002f94 <std>
 80030b0:	2202      	movs	r2, #2
 80030b2:	2112      	movs	r1, #18
 80030b4:	68e0      	ldr	r0, [r4, #12]
 80030b6:	f7ff ff6d 	bl	8002f94 <std>
 80030ba:	2301      	movs	r3, #1
 80030bc:	61a3      	str	r3, [r4, #24]
 80030be:	e7d2      	b.n	8003066 <__sinit+0xe>
 80030c0:	08003598 	.word	0x08003598
 80030c4:	08002fdd 	.word	0x08002fdd

080030c8 <__sfp>:
 80030c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030ca:	0007      	movs	r7, r0
 80030cc:	f7ff ffa4 	bl	8003018 <__sfp_lock_acquire>
 80030d0:	4b1f      	ldr	r3, [pc, #124]	; (8003150 <__sfp+0x88>)
 80030d2:	681e      	ldr	r6, [r3, #0]
 80030d4:	69b3      	ldr	r3, [r6, #24]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d102      	bne.n	80030e0 <__sfp+0x18>
 80030da:	0030      	movs	r0, r6
 80030dc:	f7ff ffbc 	bl	8003058 <__sinit>
 80030e0:	3648      	adds	r6, #72	; 0x48
 80030e2:	68b4      	ldr	r4, [r6, #8]
 80030e4:	6873      	ldr	r3, [r6, #4]
 80030e6:	3b01      	subs	r3, #1
 80030e8:	d504      	bpl.n	80030f4 <__sfp+0x2c>
 80030ea:	6833      	ldr	r3, [r6, #0]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d022      	beq.n	8003136 <__sfp+0x6e>
 80030f0:	6836      	ldr	r6, [r6, #0]
 80030f2:	e7f6      	b.n	80030e2 <__sfp+0x1a>
 80030f4:	220c      	movs	r2, #12
 80030f6:	5ea5      	ldrsh	r5, [r4, r2]
 80030f8:	2d00      	cmp	r5, #0
 80030fa:	d11a      	bne.n	8003132 <__sfp+0x6a>
 80030fc:	0020      	movs	r0, r4
 80030fe:	4b15      	ldr	r3, [pc, #84]	; (8003154 <__sfp+0x8c>)
 8003100:	3058      	adds	r0, #88	; 0x58
 8003102:	60e3      	str	r3, [r4, #12]
 8003104:	6665      	str	r5, [r4, #100]	; 0x64
 8003106:	f000 f847 	bl	8003198 <__retarget_lock_init_recursive>
 800310a:	f7ff ff8d 	bl	8003028 <__sfp_lock_release>
 800310e:	0020      	movs	r0, r4
 8003110:	2208      	movs	r2, #8
 8003112:	0029      	movs	r1, r5
 8003114:	6025      	str	r5, [r4, #0]
 8003116:	60a5      	str	r5, [r4, #8]
 8003118:	6065      	str	r5, [r4, #4]
 800311a:	6125      	str	r5, [r4, #16]
 800311c:	6165      	str	r5, [r4, #20]
 800311e:	61a5      	str	r5, [r4, #24]
 8003120:	305c      	adds	r0, #92	; 0x5c
 8003122:	f7ff f8e3 	bl	80022ec <memset>
 8003126:	6365      	str	r5, [r4, #52]	; 0x34
 8003128:	63a5      	str	r5, [r4, #56]	; 0x38
 800312a:	64a5      	str	r5, [r4, #72]	; 0x48
 800312c:	64e5      	str	r5, [r4, #76]	; 0x4c
 800312e:	0020      	movs	r0, r4
 8003130:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003132:	3468      	adds	r4, #104	; 0x68
 8003134:	e7d7      	b.n	80030e6 <__sfp+0x1e>
 8003136:	2104      	movs	r1, #4
 8003138:	0038      	movs	r0, r7
 800313a:	f7ff ff57 	bl	8002fec <__sfmoreglue>
 800313e:	1e04      	subs	r4, r0, #0
 8003140:	6030      	str	r0, [r6, #0]
 8003142:	d1d5      	bne.n	80030f0 <__sfp+0x28>
 8003144:	f7ff ff70 	bl	8003028 <__sfp_lock_release>
 8003148:	230c      	movs	r3, #12
 800314a:	603b      	str	r3, [r7, #0]
 800314c:	e7ef      	b.n	800312e <__sfp+0x66>
 800314e:	46c0      	nop			; (mov r8, r8)
 8003150:	08003598 	.word	0x08003598
 8003154:	ffff0001 	.word	0xffff0001

08003158 <_fwalk_reent>:
 8003158:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800315a:	0004      	movs	r4, r0
 800315c:	0006      	movs	r6, r0
 800315e:	2700      	movs	r7, #0
 8003160:	9101      	str	r1, [sp, #4]
 8003162:	3448      	adds	r4, #72	; 0x48
 8003164:	6863      	ldr	r3, [r4, #4]
 8003166:	68a5      	ldr	r5, [r4, #8]
 8003168:	9300      	str	r3, [sp, #0]
 800316a:	9b00      	ldr	r3, [sp, #0]
 800316c:	3b01      	subs	r3, #1
 800316e:	9300      	str	r3, [sp, #0]
 8003170:	d504      	bpl.n	800317c <_fwalk_reent+0x24>
 8003172:	6824      	ldr	r4, [r4, #0]
 8003174:	2c00      	cmp	r4, #0
 8003176:	d1f5      	bne.n	8003164 <_fwalk_reent+0xc>
 8003178:	0038      	movs	r0, r7
 800317a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800317c:	89ab      	ldrh	r3, [r5, #12]
 800317e:	2b01      	cmp	r3, #1
 8003180:	d908      	bls.n	8003194 <_fwalk_reent+0x3c>
 8003182:	220e      	movs	r2, #14
 8003184:	5eab      	ldrsh	r3, [r5, r2]
 8003186:	3301      	adds	r3, #1
 8003188:	d004      	beq.n	8003194 <_fwalk_reent+0x3c>
 800318a:	0029      	movs	r1, r5
 800318c:	0030      	movs	r0, r6
 800318e:	9b01      	ldr	r3, [sp, #4]
 8003190:	4798      	blx	r3
 8003192:	4307      	orrs	r7, r0
 8003194:	3568      	adds	r5, #104	; 0x68
 8003196:	e7e8      	b.n	800316a <_fwalk_reent+0x12>

08003198 <__retarget_lock_init_recursive>:
 8003198:	4770      	bx	lr

0800319a <__retarget_lock_acquire_recursive>:
 800319a:	4770      	bx	lr

0800319c <__retarget_lock_release_recursive>:
 800319c:	4770      	bx	lr
	...

080031a0 <__swhatbuf_r>:
 80031a0:	b570      	push	{r4, r5, r6, lr}
 80031a2:	000e      	movs	r6, r1
 80031a4:	001d      	movs	r5, r3
 80031a6:	230e      	movs	r3, #14
 80031a8:	5ec9      	ldrsh	r1, [r1, r3]
 80031aa:	0014      	movs	r4, r2
 80031ac:	b096      	sub	sp, #88	; 0x58
 80031ae:	2900      	cmp	r1, #0
 80031b0:	da08      	bge.n	80031c4 <__swhatbuf_r+0x24>
 80031b2:	220c      	movs	r2, #12
 80031b4:	5eb3      	ldrsh	r3, [r6, r2]
 80031b6:	2200      	movs	r2, #0
 80031b8:	602a      	str	r2, [r5, #0]
 80031ba:	061b      	lsls	r3, r3, #24
 80031bc:	d411      	bmi.n	80031e2 <__swhatbuf_r+0x42>
 80031be:	2380      	movs	r3, #128	; 0x80
 80031c0:	00db      	lsls	r3, r3, #3
 80031c2:	e00f      	b.n	80031e4 <__swhatbuf_r+0x44>
 80031c4:	466a      	mov	r2, sp
 80031c6:	f000 f92f 	bl	8003428 <_fstat_r>
 80031ca:	2800      	cmp	r0, #0
 80031cc:	dbf1      	blt.n	80031b2 <__swhatbuf_r+0x12>
 80031ce:	23f0      	movs	r3, #240	; 0xf0
 80031d0:	9901      	ldr	r1, [sp, #4]
 80031d2:	021b      	lsls	r3, r3, #8
 80031d4:	4019      	ands	r1, r3
 80031d6:	4b05      	ldr	r3, [pc, #20]	; (80031ec <__swhatbuf_r+0x4c>)
 80031d8:	18c9      	adds	r1, r1, r3
 80031da:	424b      	negs	r3, r1
 80031dc:	4159      	adcs	r1, r3
 80031de:	6029      	str	r1, [r5, #0]
 80031e0:	e7ed      	b.n	80031be <__swhatbuf_r+0x1e>
 80031e2:	2340      	movs	r3, #64	; 0x40
 80031e4:	2000      	movs	r0, #0
 80031e6:	6023      	str	r3, [r4, #0]
 80031e8:	b016      	add	sp, #88	; 0x58
 80031ea:	bd70      	pop	{r4, r5, r6, pc}
 80031ec:	ffffe000 	.word	0xffffe000

080031f0 <__smakebuf_r>:
 80031f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80031f2:	2602      	movs	r6, #2
 80031f4:	898b      	ldrh	r3, [r1, #12]
 80031f6:	0005      	movs	r5, r0
 80031f8:	000c      	movs	r4, r1
 80031fa:	4233      	tst	r3, r6
 80031fc:	d006      	beq.n	800320c <__smakebuf_r+0x1c>
 80031fe:	0023      	movs	r3, r4
 8003200:	3347      	adds	r3, #71	; 0x47
 8003202:	6023      	str	r3, [r4, #0]
 8003204:	6123      	str	r3, [r4, #16]
 8003206:	2301      	movs	r3, #1
 8003208:	6163      	str	r3, [r4, #20]
 800320a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800320c:	466a      	mov	r2, sp
 800320e:	ab01      	add	r3, sp, #4
 8003210:	f7ff ffc6 	bl	80031a0 <__swhatbuf_r>
 8003214:	9900      	ldr	r1, [sp, #0]
 8003216:	0007      	movs	r7, r0
 8003218:	0028      	movs	r0, r5
 800321a:	f7ff f9ad 	bl	8002578 <_malloc_r>
 800321e:	2800      	cmp	r0, #0
 8003220:	d108      	bne.n	8003234 <__smakebuf_r+0x44>
 8003222:	220c      	movs	r2, #12
 8003224:	5ea3      	ldrsh	r3, [r4, r2]
 8003226:	059a      	lsls	r2, r3, #22
 8003228:	d4ef      	bmi.n	800320a <__smakebuf_r+0x1a>
 800322a:	2203      	movs	r2, #3
 800322c:	4393      	bics	r3, r2
 800322e:	431e      	orrs	r6, r3
 8003230:	81a6      	strh	r6, [r4, #12]
 8003232:	e7e4      	b.n	80031fe <__smakebuf_r+0xe>
 8003234:	4b0f      	ldr	r3, [pc, #60]	; (8003274 <__smakebuf_r+0x84>)
 8003236:	62ab      	str	r3, [r5, #40]	; 0x28
 8003238:	2380      	movs	r3, #128	; 0x80
 800323a:	89a2      	ldrh	r2, [r4, #12]
 800323c:	6020      	str	r0, [r4, #0]
 800323e:	4313      	orrs	r3, r2
 8003240:	81a3      	strh	r3, [r4, #12]
 8003242:	9b00      	ldr	r3, [sp, #0]
 8003244:	6120      	str	r0, [r4, #16]
 8003246:	6163      	str	r3, [r4, #20]
 8003248:	9b01      	ldr	r3, [sp, #4]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d00d      	beq.n	800326a <__smakebuf_r+0x7a>
 800324e:	0028      	movs	r0, r5
 8003250:	230e      	movs	r3, #14
 8003252:	5ee1      	ldrsh	r1, [r4, r3]
 8003254:	f000 f8fa 	bl	800344c <_isatty_r>
 8003258:	2800      	cmp	r0, #0
 800325a:	d006      	beq.n	800326a <__smakebuf_r+0x7a>
 800325c:	2203      	movs	r2, #3
 800325e:	89a3      	ldrh	r3, [r4, #12]
 8003260:	4393      	bics	r3, r2
 8003262:	001a      	movs	r2, r3
 8003264:	2301      	movs	r3, #1
 8003266:	4313      	orrs	r3, r2
 8003268:	81a3      	strh	r3, [r4, #12]
 800326a:	89a0      	ldrh	r0, [r4, #12]
 800326c:	4307      	orrs	r7, r0
 800326e:	81a7      	strh	r7, [r4, #12]
 8003270:	e7cb      	b.n	800320a <__smakebuf_r+0x1a>
 8003272:	46c0      	nop			; (mov r8, r8)
 8003274:	08002fdd 	.word	0x08002fdd

08003278 <memchr>:
 8003278:	b2c9      	uxtb	r1, r1
 800327a:	1882      	adds	r2, r0, r2
 800327c:	4290      	cmp	r0, r2
 800327e:	d101      	bne.n	8003284 <memchr+0xc>
 8003280:	2000      	movs	r0, #0
 8003282:	4770      	bx	lr
 8003284:	7803      	ldrb	r3, [r0, #0]
 8003286:	428b      	cmp	r3, r1
 8003288:	d0fb      	beq.n	8003282 <memchr+0xa>
 800328a:	3001      	adds	r0, #1
 800328c:	e7f6      	b.n	800327c <memchr+0x4>
	...

08003290 <__malloc_lock>:
 8003290:	b510      	push	{r4, lr}
 8003292:	4802      	ldr	r0, [pc, #8]	; (800329c <__malloc_lock+0xc>)
 8003294:	f7ff ff81 	bl	800319a <__retarget_lock_acquire_recursive>
 8003298:	bd10      	pop	{r4, pc}
 800329a:	46c0      	nop			; (mov r8, r8)
 800329c:	20000128 	.word	0x20000128

080032a0 <__malloc_unlock>:
 80032a0:	b510      	push	{r4, lr}
 80032a2:	4802      	ldr	r0, [pc, #8]	; (80032ac <__malloc_unlock+0xc>)
 80032a4:	f7ff ff7a 	bl	800319c <__retarget_lock_release_recursive>
 80032a8:	bd10      	pop	{r4, pc}
 80032aa:	46c0      	nop			; (mov r8, r8)
 80032ac:	20000128 	.word	0x20000128

080032b0 <_raise_r>:
 80032b0:	b570      	push	{r4, r5, r6, lr}
 80032b2:	0004      	movs	r4, r0
 80032b4:	000d      	movs	r5, r1
 80032b6:	291f      	cmp	r1, #31
 80032b8:	d904      	bls.n	80032c4 <_raise_r+0x14>
 80032ba:	2316      	movs	r3, #22
 80032bc:	6003      	str	r3, [r0, #0]
 80032be:	2001      	movs	r0, #1
 80032c0:	4240      	negs	r0, r0
 80032c2:	bd70      	pop	{r4, r5, r6, pc}
 80032c4:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d004      	beq.n	80032d4 <_raise_r+0x24>
 80032ca:	008a      	lsls	r2, r1, #2
 80032cc:	189b      	adds	r3, r3, r2
 80032ce:	681a      	ldr	r2, [r3, #0]
 80032d0:	2a00      	cmp	r2, #0
 80032d2:	d108      	bne.n	80032e6 <_raise_r+0x36>
 80032d4:	0020      	movs	r0, r4
 80032d6:	f000 f831 	bl	800333c <_getpid_r>
 80032da:	002a      	movs	r2, r5
 80032dc:	0001      	movs	r1, r0
 80032de:	0020      	movs	r0, r4
 80032e0:	f000 f81a 	bl	8003318 <_kill_r>
 80032e4:	e7ed      	b.n	80032c2 <_raise_r+0x12>
 80032e6:	2000      	movs	r0, #0
 80032e8:	2a01      	cmp	r2, #1
 80032ea:	d0ea      	beq.n	80032c2 <_raise_r+0x12>
 80032ec:	1c51      	adds	r1, r2, #1
 80032ee:	d103      	bne.n	80032f8 <_raise_r+0x48>
 80032f0:	2316      	movs	r3, #22
 80032f2:	3001      	adds	r0, #1
 80032f4:	6023      	str	r3, [r4, #0]
 80032f6:	e7e4      	b.n	80032c2 <_raise_r+0x12>
 80032f8:	2400      	movs	r4, #0
 80032fa:	0028      	movs	r0, r5
 80032fc:	601c      	str	r4, [r3, #0]
 80032fe:	4790      	blx	r2
 8003300:	0020      	movs	r0, r4
 8003302:	e7de      	b.n	80032c2 <_raise_r+0x12>

08003304 <raise>:
 8003304:	b510      	push	{r4, lr}
 8003306:	4b03      	ldr	r3, [pc, #12]	; (8003314 <raise+0x10>)
 8003308:	0001      	movs	r1, r0
 800330a:	6818      	ldr	r0, [r3, #0]
 800330c:	f7ff ffd0 	bl	80032b0 <_raise_r>
 8003310:	bd10      	pop	{r4, pc}
 8003312:	46c0      	nop			; (mov r8, r8)
 8003314:	2000000c 	.word	0x2000000c

08003318 <_kill_r>:
 8003318:	2300      	movs	r3, #0
 800331a:	b570      	push	{r4, r5, r6, lr}
 800331c:	4d06      	ldr	r5, [pc, #24]	; (8003338 <_kill_r+0x20>)
 800331e:	0004      	movs	r4, r0
 8003320:	0008      	movs	r0, r1
 8003322:	0011      	movs	r1, r2
 8003324:	602b      	str	r3, [r5, #0]
 8003326:	f7fd fc2a 	bl	8000b7e <_kill>
 800332a:	1c43      	adds	r3, r0, #1
 800332c:	d103      	bne.n	8003336 <_kill_r+0x1e>
 800332e:	682b      	ldr	r3, [r5, #0]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d000      	beq.n	8003336 <_kill_r+0x1e>
 8003334:	6023      	str	r3, [r4, #0]
 8003336:	bd70      	pop	{r4, r5, r6, pc}
 8003338:	20000124 	.word	0x20000124

0800333c <_getpid_r>:
 800333c:	b510      	push	{r4, lr}
 800333e:	f7fd fc18 	bl	8000b72 <_getpid>
 8003342:	bd10      	pop	{r4, pc}

08003344 <__sread>:
 8003344:	b570      	push	{r4, r5, r6, lr}
 8003346:	000c      	movs	r4, r1
 8003348:	250e      	movs	r5, #14
 800334a:	5f49      	ldrsh	r1, [r1, r5]
 800334c:	f000 f8a4 	bl	8003498 <_read_r>
 8003350:	2800      	cmp	r0, #0
 8003352:	db03      	blt.n	800335c <__sread+0x18>
 8003354:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003356:	181b      	adds	r3, r3, r0
 8003358:	6563      	str	r3, [r4, #84]	; 0x54
 800335a:	bd70      	pop	{r4, r5, r6, pc}
 800335c:	89a3      	ldrh	r3, [r4, #12]
 800335e:	4a02      	ldr	r2, [pc, #8]	; (8003368 <__sread+0x24>)
 8003360:	4013      	ands	r3, r2
 8003362:	81a3      	strh	r3, [r4, #12]
 8003364:	e7f9      	b.n	800335a <__sread+0x16>
 8003366:	46c0      	nop			; (mov r8, r8)
 8003368:	ffffefff 	.word	0xffffefff

0800336c <__swrite>:
 800336c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800336e:	001f      	movs	r7, r3
 8003370:	898b      	ldrh	r3, [r1, #12]
 8003372:	0005      	movs	r5, r0
 8003374:	000c      	movs	r4, r1
 8003376:	0016      	movs	r6, r2
 8003378:	05db      	lsls	r3, r3, #23
 800337a:	d505      	bpl.n	8003388 <__swrite+0x1c>
 800337c:	230e      	movs	r3, #14
 800337e:	5ec9      	ldrsh	r1, [r1, r3]
 8003380:	2200      	movs	r2, #0
 8003382:	2302      	movs	r3, #2
 8003384:	f000 f874 	bl	8003470 <_lseek_r>
 8003388:	89a3      	ldrh	r3, [r4, #12]
 800338a:	4a05      	ldr	r2, [pc, #20]	; (80033a0 <__swrite+0x34>)
 800338c:	0028      	movs	r0, r5
 800338e:	4013      	ands	r3, r2
 8003390:	81a3      	strh	r3, [r4, #12]
 8003392:	0032      	movs	r2, r6
 8003394:	230e      	movs	r3, #14
 8003396:	5ee1      	ldrsh	r1, [r4, r3]
 8003398:	003b      	movs	r3, r7
 800339a:	f000 f81f 	bl	80033dc <_write_r>
 800339e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80033a0:	ffffefff 	.word	0xffffefff

080033a4 <__sseek>:
 80033a4:	b570      	push	{r4, r5, r6, lr}
 80033a6:	000c      	movs	r4, r1
 80033a8:	250e      	movs	r5, #14
 80033aa:	5f49      	ldrsh	r1, [r1, r5]
 80033ac:	f000 f860 	bl	8003470 <_lseek_r>
 80033b0:	89a3      	ldrh	r3, [r4, #12]
 80033b2:	1c42      	adds	r2, r0, #1
 80033b4:	d103      	bne.n	80033be <__sseek+0x1a>
 80033b6:	4a05      	ldr	r2, [pc, #20]	; (80033cc <__sseek+0x28>)
 80033b8:	4013      	ands	r3, r2
 80033ba:	81a3      	strh	r3, [r4, #12]
 80033bc:	bd70      	pop	{r4, r5, r6, pc}
 80033be:	2280      	movs	r2, #128	; 0x80
 80033c0:	0152      	lsls	r2, r2, #5
 80033c2:	4313      	orrs	r3, r2
 80033c4:	81a3      	strh	r3, [r4, #12]
 80033c6:	6560      	str	r0, [r4, #84]	; 0x54
 80033c8:	e7f8      	b.n	80033bc <__sseek+0x18>
 80033ca:	46c0      	nop			; (mov r8, r8)
 80033cc:	ffffefff 	.word	0xffffefff

080033d0 <__sclose>:
 80033d0:	b510      	push	{r4, lr}
 80033d2:	230e      	movs	r3, #14
 80033d4:	5ec9      	ldrsh	r1, [r1, r3]
 80033d6:	f000 f815 	bl	8003404 <_close_r>
 80033da:	bd10      	pop	{r4, pc}

080033dc <_write_r>:
 80033dc:	b570      	push	{r4, r5, r6, lr}
 80033de:	0004      	movs	r4, r0
 80033e0:	0008      	movs	r0, r1
 80033e2:	0011      	movs	r1, r2
 80033e4:	001a      	movs	r2, r3
 80033e6:	2300      	movs	r3, #0
 80033e8:	4d05      	ldr	r5, [pc, #20]	; (8003400 <_write_r+0x24>)
 80033ea:	602b      	str	r3, [r5, #0]
 80033ec:	f7fd fc00 	bl	8000bf0 <_write>
 80033f0:	1c43      	adds	r3, r0, #1
 80033f2:	d103      	bne.n	80033fc <_write_r+0x20>
 80033f4:	682b      	ldr	r3, [r5, #0]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d000      	beq.n	80033fc <_write_r+0x20>
 80033fa:	6023      	str	r3, [r4, #0]
 80033fc:	bd70      	pop	{r4, r5, r6, pc}
 80033fe:	46c0      	nop			; (mov r8, r8)
 8003400:	20000124 	.word	0x20000124

08003404 <_close_r>:
 8003404:	2300      	movs	r3, #0
 8003406:	b570      	push	{r4, r5, r6, lr}
 8003408:	4d06      	ldr	r5, [pc, #24]	; (8003424 <_close_r+0x20>)
 800340a:	0004      	movs	r4, r0
 800340c:	0008      	movs	r0, r1
 800340e:	602b      	str	r3, [r5, #0]
 8003410:	f7fd fc0a 	bl	8000c28 <_close>
 8003414:	1c43      	adds	r3, r0, #1
 8003416:	d103      	bne.n	8003420 <_close_r+0x1c>
 8003418:	682b      	ldr	r3, [r5, #0]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d000      	beq.n	8003420 <_close_r+0x1c>
 800341e:	6023      	str	r3, [r4, #0]
 8003420:	bd70      	pop	{r4, r5, r6, pc}
 8003422:	46c0      	nop			; (mov r8, r8)
 8003424:	20000124 	.word	0x20000124

08003428 <_fstat_r>:
 8003428:	2300      	movs	r3, #0
 800342a:	b570      	push	{r4, r5, r6, lr}
 800342c:	4d06      	ldr	r5, [pc, #24]	; (8003448 <_fstat_r+0x20>)
 800342e:	0004      	movs	r4, r0
 8003430:	0008      	movs	r0, r1
 8003432:	0011      	movs	r1, r2
 8003434:	602b      	str	r3, [r5, #0]
 8003436:	f7fd fc01 	bl	8000c3c <_fstat>
 800343a:	1c43      	adds	r3, r0, #1
 800343c:	d103      	bne.n	8003446 <_fstat_r+0x1e>
 800343e:	682b      	ldr	r3, [r5, #0]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d000      	beq.n	8003446 <_fstat_r+0x1e>
 8003444:	6023      	str	r3, [r4, #0]
 8003446:	bd70      	pop	{r4, r5, r6, pc}
 8003448:	20000124 	.word	0x20000124

0800344c <_isatty_r>:
 800344c:	2300      	movs	r3, #0
 800344e:	b570      	push	{r4, r5, r6, lr}
 8003450:	4d06      	ldr	r5, [pc, #24]	; (800346c <_isatty_r+0x20>)
 8003452:	0004      	movs	r4, r0
 8003454:	0008      	movs	r0, r1
 8003456:	602b      	str	r3, [r5, #0]
 8003458:	f7fd fbfe 	bl	8000c58 <_isatty>
 800345c:	1c43      	adds	r3, r0, #1
 800345e:	d103      	bne.n	8003468 <_isatty_r+0x1c>
 8003460:	682b      	ldr	r3, [r5, #0]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d000      	beq.n	8003468 <_isatty_r+0x1c>
 8003466:	6023      	str	r3, [r4, #0]
 8003468:	bd70      	pop	{r4, r5, r6, pc}
 800346a:	46c0      	nop			; (mov r8, r8)
 800346c:	20000124 	.word	0x20000124

08003470 <_lseek_r>:
 8003470:	b570      	push	{r4, r5, r6, lr}
 8003472:	0004      	movs	r4, r0
 8003474:	0008      	movs	r0, r1
 8003476:	0011      	movs	r1, r2
 8003478:	001a      	movs	r2, r3
 800347a:	2300      	movs	r3, #0
 800347c:	4d05      	ldr	r5, [pc, #20]	; (8003494 <_lseek_r+0x24>)
 800347e:	602b      	str	r3, [r5, #0]
 8003480:	f7fd fbf3 	bl	8000c6a <_lseek>
 8003484:	1c43      	adds	r3, r0, #1
 8003486:	d103      	bne.n	8003490 <_lseek_r+0x20>
 8003488:	682b      	ldr	r3, [r5, #0]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d000      	beq.n	8003490 <_lseek_r+0x20>
 800348e:	6023      	str	r3, [r4, #0]
 8003490:	bd70      	pop	{r4, r5, r6, pc}
 8003492:	46c0      	nop			; (mov r8, r8)
 8003494:	20000124 	.word	0x20000124

08003498 <_read_r>:
 8003498:	b570      	push	{r4, r5, r6, lr}
 800349a:	0004      	movs	r4, r0
 800349c:	0008      	movs	r0, r1
 800349e:	0011      	movs	r1, r2
 80034a0:	001a      	movs	r2, r3
 80034a2:	2300      	movs	r3, #0
 80034a4:	4d05      	ldr	r5, [pc, #20]	; (80034bc <_read_r+0x24>)
 80034a6:	602b      	str	r3, [r5, #0]
 80034a8:	f7fd fb85 	bl	8000bb6 <_read>
 80034ac:	1c43      	adds	r3, r0, #1
 80034ae:	d103      	bne.n	80034b8 <_read_r+0x20>
 80034b0:	682b      	ldr	r3, [r5, #0]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d000      	beq.n	80034b8 <_read_r+0x20>
 80034b6:	6023      	str	r3, [r4, #0]
 80034b8:	bd70      	pop	{r4, r5, r6, pc}
 80034ba:	46c0      	nop			; (mov r8, r8)
 80034bc:	20000124 	.word	0x20000124

080034c0 <_gettimeofday>:
 80034c0:	2258      	movs	r2, #88	; 0x58
 80034c2:	2001      	movs	r0, #1
 80034c4:	4b01      	ldr	r3, [pc, #4]	; (80034cc <_gettimeofday+0xc>)
 80034c6:	4240      	negs	r0, r0
 80034c8:	601a      	str	r2, [r3, #0]
 80034ca:	4770      	bx	lr
 80034cc:	20000124 	.word	0x20000124

080034d0 <_init>:
 80034d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034d2:	46c0      	nop			; (mov r8, r8)
 80034d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034d6:	bc08      	pop	{r3}
 80034d8:	469e      	mov	lr, r3
 80034da:	4770      	bx	lr

080034dc <_fini>:
 80034dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034de:	46c0      	nop			; (mov r8, r8)
 80034e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034e2:	bc08      	pop	{r3}
 80034e4:	469e      	mov	lr, r3
 80034e6:	4770      	bx	lr
