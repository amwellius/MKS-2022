
cv10.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002fcc  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  0800317c  0800317c  0001317c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003234  08003234  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003234  08003234  00013234  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800323c  0800323c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800323c  0800323c  0001323c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003240  08003240  00013240  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003244  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00000078  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200000e8  200000e8  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   000082d2  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001535  00000000  00000000  00028372  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000006f0  00000000  00000000  000298a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000668  00000000  00000000  00029f98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002343c  00000000  00000000  0002a600  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000859d  00000000  00000000  0004da3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d2fb1  00000000  00000000  00055fd9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00128f8a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000022f4  00000000  00000000  00128fdc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000070 	.word	0x20000070
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08003164 	.word	0x08003164

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000074 	.word	0x20000074
 80001ec:	08003164 	.word	0x08003164

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000594:	b480      	push	{r7}
 8000596:	b083      	sub	sp, #12
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800059c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005a0:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80005a4:	f003 0301 	and.w	r3, r3, #1
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d013      	beq.n	80005d4 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80005ac:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005b0:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80005b4:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d00b      	beq.n	80005d4 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80005bc:	e000      	b.n	80005c0 <ITM_SendChar+0x2c>
    {
      __NOP();
 80005be:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80005c0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d0f9      	beq.n	80005be <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80005ca:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005ce:	687a      	ldr	r2, [r7, #4]
 80005d0:	b2d2      	uxtb	r2, r2
 80005d2:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80005d4:	687b      	ldr	r3, [r7, #4]
}
 80005d6:	4618      	mov	r0, r3
 80005d8:	370c      	adds	r7, #12
 80005da:	46bd      	mov	sp, r7
 80005dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e0:	4770      	bx	lr

080005e2 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
{
 80005e2:	b580      	push	{r7, lr}
 80005e4:	b082      	sub	sp, #8
 80005e6:	af00      	add	r7, sp, #0
 80005e8:	6078      	str	r0, [r7, #4]
	ITM_SendChar(ch);
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	4618      	mov	r0, r3
 80005ee:	f7ff ffd1 	bl	8000594 <ITM_SendChar>
	return 0;
 80005f2:	2300      	movs	r3, #0
}
 80005f4:	4618      	mov	r0, r3
 80005f6:	3708      	adds	r7, #8
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}

080005fc <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000600:	f000 fb3a 	bl	8000c78 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000604:	f000 f814 	bl	8000630 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000608:	f000 f8a6 	bl	8000758 <MX_GPIO_Init>
	MX_USART3_UART_Init();
 800060c:	f000 f87a 	bl	8000704 <MX_USART3_UART_Init>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8000610:	2101      	movs	r1, #1
 8000612:	4805      	ldr	r0, [pc, #20]	; (8000628 <main+0x2c>)
 8000614:	f000 fe71 	bl	80012fa <HAL_GPIO_TogglePin>
		HAL_Delay(120);
 8000618:	2078      	movs	r0, #120	; 0x78
 800061a:	f000 fb9f 	bl	8000d5c <HAL_Delay>
		printf("test\n\r");
 800061e:	4803      	ldr	r0, [pc, #12]	; (800062c <main+0x30>)
 8000620:	f001 fe12 	bl	8002248 <iprintf>
		HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8000624:	e7f4      	b.n	8000610 <main+0x14>
 8000626:	bf00      	nop
 8000628:	40020400 	.word	0x40020400
 800062c:	0800317c 	.word	0x0800317c

08000630 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b094      	sub	sp, #80	; 0x50
 8000634:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000636:	f107 0320 	add.w	r3, r7, #32
 800063a:	2230      	movs	r2, #48	; 0x30
 800063c:	2100      	movs	r1, #0
 800063e:	4618      	mov	r0, r3
 8000640:	f001 fdfa 	bl	8002238 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000644:	f107 030c 	add.w	r3, r7, #12
 8000648:	2200      	movs	r2, #0
 800064a:	601a      	str	r2, [r3, #0]
 800064c:	605a      	str	r2, [r3, #4]
 800064e:	609a      	str	r2, [r3, #8]
 8000650:	60da      	str	r2, [r3, #12]
 8000652:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000654:	2300      	movs	r3, #0
 8000656:	60bb      	str	r3, [r7, #8]
 8000658:	4b28      	ldr	r3, [pc, #160]	; (80006fc <SystemClock_Config+0xcc>)
 800065a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800065c:	4a27      	ldr	r2, [pc, #156]	; (80006fc <SystemClock_Config+0xcc>)
 800065e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000662:	6413      	str	r3, [r2, #64]	; 0x40
 8000664:	4b25      	ldr	r3, [pc, #148]	; (80006fc <SystemClock_Config+0xcc>)
 8000666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000668:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800066c:	60bb      	str	r3, [r7, #8]
 800066e:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000670:	2300      	movs	r3, #0
 8000672:	607b      	str	r3, [r7, #4]
 8000674:	4b22      	ldr	r3, [pc, #136]	; (8000700 <SystemClock_Config+0xd0>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	4a21      	ldr	r2, [pc, #132]	; (8000700 <SystemClock_Config+0xd0>)
 800067a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800067e:	6013      	str	r3, [r2, #0]
 8000680:	4b1f      	ldr	r3, [pc, #124]	; (8000700 <SystemClock_Config+0xd0>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000688:	607b      	str	r3, [r7, #4]
 800068a:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800068c:	2301      	movs	r3, #1
 800068e:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000690:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000694:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000696:	2302      	movs	r3, #2
 8000698:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800069a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800069e:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 4;
 80006a0:	2304      	movs	r3, #4
 80006a2:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 168;
 80006a4:	23a8      	movs	r3, #168	; 0xa8
 80006a6:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006a8:	2302      	movs	r3, #2
 80006aa:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 80006ac:	2307      	movs	r3, #7
 80006ae:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006b0:	f107 0320 	add.w	r3, r7, #32
 80006b4:	4618      	mov	r0, r3
 80006b6:	f000 fe3b 	bl	8001330 <HAL_RCC_OscConfig>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <SystemClock_Config+0x94>
	{
		Error_Handler();
 80006c0:	f000 f95a 	bl	8000978 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006c4:	230f      	movs	r3, #15
 80006c6:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006c8:	2302      	movs	r3, #2
 80006ca:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006cc:	2300      	movs	r3, #0
 80006ce:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006d0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006d4:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006da:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006dc:	f107 030c 	add.w	r3, r7, #12
 80006e0:	2105      	movs	r1, #5
 80006e2:	4618      	mov	r0, r3
 80006e4:	f001 f89c 	bl	8001820 <HAL_RCC_ClockConfig>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <SystemClock_Config+0xc2>
	{
		Error_Handler();
 80006ee:	f000 f943 	bl	8000978 <Error_Handler>
	}
}
 80006f2:	bf00      	nop
 80006f4:	3750      	adds	r7, #80	; 0x50
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	40023800 	.word	0x40023800
 8000700:	40007000 	.word	0x40007000

08000704 <MX_USART3_UART_Init>:
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 8000708:	4b11      	ldr	r3, [pc, #68]	; (8000750 <MX_USART3_UART_Init+0x4c>)
 800070a:	4a12      	ldr	r2, [pc, #72]	; (8000754 <MX_USART3_UART_Init+0x50>)
 800070c:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 800070e:	4b10      	ldr	r3, [pc, #64]	; (8000750 <MX_USART3_UART_Init+0x4c>)
 8000710:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000714:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000716:	4b0e      	ldr	r3, [pc, #56]	; (8000750 <MX_USART3_UART_Init+0x4c>)
 8000718:	2200      	movs	r2, #0
 800071a:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 800071c:	4b0c      	ldr	r3, [pc, #48]	; (8000750 <MX_USART3_UART_Init+0x4c>)
 800071e:	2200      	movs	r2, #0
 8000720:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8000722:	4b0b      	ldr	r3, [pc, #44]	; (8000750 <MX_USART3_UART_Init+0x4c>)
 8000724:	2200      	movs	r2, #0
 8000726:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8000728:	4b09      	ldr	r3, [pc, #36]	; (8000750 <MX_USART3_UART_Init+0x4c>)
 800072a:	220c      	movs	r2, #12
 800072c:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800072e:	4b08      	ldr	r3, [pc, #32]	; (8000750 <MX_USART3_UART_Init+0x4c>)
 8000730:	2200      	movs	r2, #0
 8000732:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000734:	4b06      	ldr	r3, [pc, #24]	; (8000750 <MX_USART3_UART_Init+0x4c>)
 8000736:	2200      	movs	r2, #0
 8000738:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart3) != HAL_OK)
 800073a:	4805      	ldr	r0, [pc, #20]	; (8000750 <MX_USART3_UART_Init+0x4c>)
 800073c:	f001 fa90 	bl	8001c60 <HAL_UART_Init>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <MX_USART3_UART_Init+0x46>
	{
		Error_Handler();
 8000746:	f000 f917 	bl	8000978 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 800074a:	bf00      	nop
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	2000008c 	.word	0x2000008c
 8000754:	40004800 	.word	0x40004800

08000758 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b08c      	sub	sp, #48	; 0x30
 800075c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800075e:	f107 031c 	add.w	r3, r7, #28
 8000762:	2200      	movs	r2, #0
 8000764:	601a      	str	r2, [r3, #0]
 8000766:	605a      	str	r2, [r3, #4]
 8000768:	609a      	str	r2, [r3, #8]
 800076a:	60da      	str	r2, [r3, #12]
 800076c:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800076e:	2300      	movs	r3, #0
 8000770:	61bb      	str	r3, [r7, #24]
 8000772:	4b7c      	ldr	r3, [pc, #496]	; (8000964 <MX_GPIO_Init+0x20c>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000776:	4a7b      	ldr	r2, [pc, #492]	; (8000964 <MX_GPIO_Init+0x20c>)
 8000778:	f043 0304 	orr.w	r3, r3, #4
 800077c:	6313      	str	r3, [r2, #48]	; 0x30
 800077e:	4b79      	ldr	r3, [pc, #484]	; (8000964 <MX_GPIO_Init+0x20c>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000782:	f003 0304 	and.w	r3, r3, #4
 8000786:	61bb      	str	r3, [r7, #24]
 8000788:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800078a:	2300      	movs	r3, #0
 800078c:	617b      	str	r3, [r7, #20]
 800078e:	4b75      	ldr	r3, [pc, #468]	; (8000964 <MX_GPIO_Init+0x20c>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	4a74      	ldr	r2, [pc, #464]	; (8000964 <MX_GPIO_Init+0x20c>)
 8000794:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000798:	6313      	str	r3, [r2, #48]	; 0x30
 800079a:	4b72      	ldr	r3, [pc, #456]	; (8000964 <MX_GPIO_Init+0x20c>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007a2:	617b      	str	r3, [r7, #20]
 80007a4:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80007a6:	2300      	movs	r3, #0
 80007a8:	613b      	str	r3, [r7, #16]
 80007aa:	4b6e      	ldr	r3, [pc, #440]	; (8000964 <MX_GPIO_Init+0x20c>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	4a6d      	ldr	r2, [pc, #436]	; (8000964 <MX_GPIO_Init+0x20c>)
 80007b0:	f043 0301 	orr.w	r3, r3, #1
 80007b4:	6313      	str	r3, [r2, #48]	; 0x30
 80007b6:	4b6b      	ldr	r3, [pc, #428]	; (8000964 <MX_GPIO_Init+0x20c>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	f003 0301 	and.w	r3, r3, #1
 80007be:	613b      	str	r3, [r7, #16]
 80007c0:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80007c2:	2300      	movs	r3, #0
 80007c4:	60fb      	str	r3, [r7, #12]
 80007c6:	4b67      	ldr	r3, [pc, #412]	; (8000964 <MX_GPIO_Init+0x20c>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	4a66      	ldr	r2, [pc, #408]	; (8000964 <MX_GPIO_Init+0x20c>)
 80007cc:	f043 0302 	orr.w	r3, r3, #2
 80007d0:	6313      	str	r3, [r2, #48]	; 0x30
 80007d2:	4b64      	ldr	r3, [pc, #400]	; (8000964 <MX_GPIO_Init+0x20c>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	f003 0302 	and.w	r3, r3, #2
 80007da:	60fb      	str	r3, [r7, #12]
 80007dc:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80007de:	2300      	movs	r3, #0
 80007e0:	60bb      	str	r3, [r7, #8]
 80007e2:	4b60      	ldr	r3, [pc, #384]	; (8000964 <MX_GPIO_Init+0x20c>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	4a5f      	ldr	r2, [pc, #380]	; (8000964 <MX_GPIO_Init+0x20c>)
 80007e8:	f043 0308 	orr.w	r3, r3, #8
 80007ec:	6313      	str	r3, [r2, #48]	; 0x30
 80007ee:	4b5d      	ldr	r3, [pc, #372]	; (8000964 <MX_GPIO_Init+0x20c>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	f003 0308 	and.w	r3, r3, #8
 80007f6:	60bb      	str	r3, [r7, #8]
 80007f8:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 80007fa:	2300      	movs	r3, #0
 80007fc:	607b      	str	r3, [r7, #4]
 80007fe:	4b59      	ldr	r3, [pc, #356]	; (8000964 <MX_GPIO_Init+0x20c>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	4a58      	ldr	r2, [pc, #352]	; (8000964 <MX_GPIO_Init+0x20c>)
 8000804:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000808:	6313      	str	r3, [r2, #48]	; 0x30
 800080a:	4b56      	ldr	r3, [pc, #344]	; (8000964 <MX_GPIO_Init+0x20c>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000812:	607b      	str	r3, [r7, #4]
 8000814:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000816:	2200      	movs	r2, #0
 8000818:	f244 0181 	movw	r1, #16513	; 0x4081
 800081c:	4852      	ldr	r0, [pc, #328]	; (8000968 <MX_GPIO_Init+0x210>)
 800081e:	f000 fd53 	bl	80012c8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000822:	2200      	movs	r2, #0
 8000824:	2140      	movs	r1, #64	; 0x40
 8000826:	4851      	ldr	r0, [pc, #324]	; (800096c <MX_GPIO_Init+0x214>)
 8000828:	f000 fd4e 	bl	80012c8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : USER_Btn_Pin */
	GPIO_InitStruct.Pin = USER_Btn_Pin;
 800082c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000830:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000832:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000836:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000838:	2300      	movs	r3, #0
 800083a:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800083c:	f107 031c 	add.w	r3, r7, #28
 8000840:	4619      	mov	r1, r3
 8000842:	484b      	ldr	r0, [pc, #300]	; (8000970 <MX_GPIO_Init+0x218>)
 8000844:	f000 fb94 	bl	8000f70 <HAL_GPIO_Init>

	/*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
	GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000848:	2332      	movs	r3, #50	; 0x32
 800084a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800084c:	2302      	movs	r3, #2
 800084e:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000850:	2300      	movs	r3, #0
 8000852:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000854:	2303      	movs	r3, #3
 8000856:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000858:	230b      	movs	r3, #11
 800085a:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800085c:	f107 031c 	add.w	r3, r7, #28
 8000860:	4619      	mov	r1, r3
 8000862:	4843      	ldr	r0, [pc, #268]	; (8000970 <MX_GPIO_Init+0x218>)
 8000864:	f000 fb84 	bl	8000f70 <HAL_GPIO_Init>

	/*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
	GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000868:	2386      	movs	r3, #134	; 0x86
 800086a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800086c:	2302      	movs	r3, #2
 800086e:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000870:	2300      	movs	r3, #0
 8000872:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000874:	2303      	movs	r3, #3
 8000876:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000878:	230b      	movs	r3, #11
 800087a:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800087c:	f107 031c 	add.w	r3, r7, #28
 8000880:	4619      	mov	r1, r3
 8000882:	483c      	ldr	r0, [pc, #240]	; (8000974 <MX_GPIO_Init+0x21c>)
 8000884:	f000 fb74 	bl	8000f70 <HAL_GPIO_Init>

	/*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
	GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000888:	f244 0381 	movw	r3, #16513	; 0x4081
 800088c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800088e:	2301      	movs	r3, #1
 8000890:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000892:	2300      	movs	r3, #0
 8000894:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000896:	2300      	movs	r3, #0
 8000898:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800089a:	f107 031c 	add.w	r3, r7, #28
 800089e:	4619      	mov	r1, r3
 80008a0:	4831      	ldr	r0, [pc, #196]	; (8000968 <MX_GPIO_Init+0x210>)
 80008a2:	f000 fb65 	bl	8000f70 <HAL_GPIO_Init>

	/*Configure GPIO pin : RMII_TXD1_Pin */
	GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80008a6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008aa:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ac:	2302      	movs	r3, #2
 80008ae:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b0:	2300      	movs	r3, #0
 80008b2:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008b4:	2303      	movs	r3, #3
 80008b6:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80008b8:	230b      	movs	r3, #11
 80008ba:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80008bc:	f107 031c 	add.w	r3, r7, #28
 80008c0:	4619      	mov	r1, r3
 80008c2:	4829      	ldr	r0, [pc, #164]	; (8000968 <MX_GPIO_Init+0x210>)
 80008c4:	f000 fb54 	bl	8000f70 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_PowerSwitchOn_Pin */
	GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80008c8:	2340      	movs	r3, #64	; 0x40
 80008ca:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008cc:	2301      	movs	r3, #1
 80008ce:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d0:	2300      	movs	r3, #0
 80008d2:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d4:	2300      	movs	r3, #0
 80008d6:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008d8:	f107 031c 	add.w	r3, r7, #28
 80008dc:	4619      	mov	r1, r3
 80008de:	4823      	ldr	r0, [pc, #140]	; (800096c <MX_GPIO_Init+0x214>)
 80008e0:	f000 fb46 	bl	8000f70 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_OverCurrent_Pin */
	GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80008e4:	2380      	movs	r3, #128	; 0x80
 80008e6:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008e8:	2300      	movs	r3, #0
 80008ea:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ec:	2300      	movs	r3, #0
 80008ee:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80008f0:	f107 031c 	add.w	r3, r7, #28
 80008f4:	4619      	mov	r1, r3
 80008f6:	481d      	ldr	r0, [pc, #116]	; (800096c <MX_GPIO_Init+0x214>)
 80008f8:	f000 fb3a 	bl	8000f70 <HAL_GPIO_Init>

	/*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
	GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80008fc:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000900:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000902:	2302      	movs	r3, #2
 8000904:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000906:	2300      	movs	r3, #0
 8000908:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800090a:	2303      	movs	r3, #3
 800090c:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800090e:	230a      	movs	r3, #10
 8000910:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000912:	f107 031c 	add.w	r3, r7, #28
 8000916:	4619      	mov	r1, r3
 8000918:	4816      	ldr	r0, [pc, #88]	; (8000974 <MX_GPIO_Init+0x21c>)
 800091a:	f000 fb29 	bl	8000f70 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_VBUS_Pin */
	GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800091e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000922:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000924:	2300      	movs	r3, #0
 8000926:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000928:	2300      	movs	r3, #0
 800092a:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800092c:	f107 031c 	add.w	r3, r7, #28
 8000930:	4619      	mov	r1, r3
 8000932:	4810      	ldr	r0, [pc, #64]	; (8000974 <MX_GPIO_Init+0x21c>)
 8000934:	f000 fb1c 	bl	8000f70 <HAL_GPIO_Init>

	/*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
	GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000938:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800093c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800093e:	2302      	movs	r3, #2
 8000940:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000942:	2300      	movs	r3, #0
 8000944:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000946:	2303      	movs	r3, #3
 8000948:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800094a:	230b      	movs	r3, #11
 800094c:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800094e:	f107 031c 	add.w	r3, r7, #28
 8000952:	4619      	mov	r1, r3
 8000954:	4805      	ldr	r0, [pc, #20]	; (800096c <MX_GPIO_Init+0x214>)
 8000956:	f000 fb0b 	bl	8000f70 <HAL_GPIO_Init>

}
 800095a:	bf00      	nop
 800095c:	3730      	adds	r7, #48	; 0x30
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	40023800 	.word	0x40023800
 8000968:	40020400 	.word	0x40020400
 800096c:	40021800 	.word	0x40021800
 8000970:	40020800 	.word	0x40020800
 8000974:	40020000 	.word	0x40020000

08000978 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800097c:	b672      	cpsid	i
}
 800097e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000980:	e7fe      	b.n	8000980 <Error_Handler+0x8>
	...

08000984 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000984:	b480      	push	{r7}
 8000986:	b083      	sub	sp, #12
 8000988:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800098a:	2300      	movs	r3, #0
 800098c:	607b      	str	r3, [r7, #4]
 800098e:	4b10      	ldr	r3, [pc, #64]	; (80009d0 <HAL_MspInit+0x4c>)
 8000990:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000992:	4a0f      	ldr	r2, [pc, #60]	; (80009d0 <HAL_MspInit+0x4c>)
 8000994:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000998:	6453      	str	r3, [r2, #68]	; 0x44
 800099a:	4b0d      	ldr	r3, [pc, #52]	; (80009d0 <HAL_MspInit+0x4c>)
 800099c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800099e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009a2:	607b      	str	r3, [r7, #4]
 80009a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009a6:	2300      	movs	r3, #0
 80009a8:	603b      	str	r3, [r7, #0]
 80009aa:	4b09      	ldr	r3, [pc, #36]	; (80009d0 <HAL_MspInit+0x4c>)
 80009ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ae:	4a08      	ldr	r2, [pc, #32]	; (80009d0 <HAL_MspInit+0x4c>)
 80009b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009b4:	6413      	str	r3, [r2, #64]	; 0x40
 80009b6:	4b06      	ldr	r3, [pc, #24]	; (80009d0 <HAL_MspInit+0x4c>)
 80009b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009be:	603b      	str	r3, [r7, #0]
 80009c0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009c2:	bf00      	nop
 80009c4:	370c      	adds	r7, #12
 80009c6:	46bd      	mov	sp, r7
 80009c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009cc:	4770      	bx	lr
 80009ce:	bf00      	nop
 80009d0:	40023800 	.word	0x40023800

080009d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b08a      	sub	sp, #40	; 0x28
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009dc:	f107 0314 	add.w	r3, r7, #20
 80009e0:	2200      	movs	r2, #0
 80009e2:	601a      	str	r2, [r3, #0]
 80009e4:	605a      	str	r2, [r3, #4]
 80009e6:	609a      	str	r2, [r3, #8]
 80009e8:	60da      	str	r2, [r3, #12]
 80009ea:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	4a19      	ldr	r2, [pc, #100]	; (8000a58 <HAL_UART_MspInit+0x84>)
 80009f2:	4293      	cmp	r3, r2
 80009f4:	d12c      	bne.n	8000a50 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80009f6:	2300      	movs	r3, #0
 80009f8:	613b      	str	r3, [r7, #16]
 80009fa:	4b18      	ldr	r3, [pc, #96]	; (8000a5c <HAL_UART_MspInit+0x88>)
 80009fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009fe:	4a17      	ldr	r2, [pc, #92]	; (8000a5c <HAL_UART_MspInit+0x88>)
 8000a00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a04:	6413      	str	r3, [r2, #64]	; 0x40
 8000a06:	4b15      	ldr	r3, [pc, #84]	; (8000a5c <HAL_UART_MspInit+0x88>)
 8000a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a0a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000a0e:	613b      	str	r3, [r7, #16]
 8000a10:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a12:	2300      	movs	r3, #0
 8000a14:	60fb      	str	r3, [r7, #12]
 8000a16:	4b11      	ldr	r3, [pc, #68]	; (8000a5c <HAL_UART_MspInit+0x88>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1a:	4a10      	ldr	r2, [pc, #64]	; (8000a5c <HAL_UART_MspInit+0x88>)
 8000a1c:	f043 0308 	orr.w	r3, r3, #8
 8000a20:	6313      	str	r3, [r2, #48]	; 0x30
 8000a22:	4b0e      	ldr	r3, [pc, #56]	; (8000a5c <HAL_UART_MspInit+0x88>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a26:	f003 0308 	and.w	r3, r3, #8
 8000a2a:	60fb      	str	r3, [r7, #12]
 8000a2c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000a2e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000a32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a34:	2302      	movs	r3, #2
 8000a36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a3c:	2303      	movs	r3, #3
 8000a3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000a40:	2307      	movs	r3, #7
 8000a42:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a44:	f107 0314 	add.w	r3, r7, #20
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4805      	ldr	r0, [pc, #20]	; (8000a60 <HAL_UART_MspInit+0x8c>)
 8000a4c:	f000 fa90 	bl	8000f70 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000a50:	bf00      	nop
 8000a52:	3728      	adds	r7, #40	; 0x28
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	40004800 	.word	0x40004800
 8000a5c:	40023800 	.word	0x40023800
 8000a60:	40020c00 	.word	0x40020c00

08000a64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a68:	e7fe      	b.n	8000a68 <NMI_Handler+0x4>

08000a6a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a6a:	b480      	push	{r7}
 8000a6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a6e:	e7fe      	b.n	8000a6e <HardFault_Handler+0x4>

08000a70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a74:	e7fe      	b.n	8000a74 <MemManage_Handler+0x4>

08000a76 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a76:	b480      	push	{r7}
 8000a78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a7a:	e7fe      	b.n	8000a7a <BusFault_Handler+0x4>

08000a7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a80:	e7fe      	b.n	8000a80 <UsageFault_Handler+0x4>

08000a82 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a82:	b480      	push	{r7}
 8000a84:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a86:	bf00      	nop
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8e:	4770      	bx	lr

08000a90 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a94:	bf00      	nop
 8000a96:	46bd      	mov	sp, r7
 8000a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9c:	4770      	bx	lr

08000a9e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a9e:	b480      	push	{r7}
 8000aa0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000aa2:	bf00      	nop
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aaa:	4770      	bx	lr

08000aac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ab0:	f000 f934 	bl	8000d1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ab4:	bf00      	nop
 8000ab6:	bd80      	pop	{r7, pc}

08000ab8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b086      	sub	sp, #24
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	60f8      	str	r0, [r7, #12]
 8000ac0:	60b9      	str	r1, [r7, #8]
 8000ac2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	617b      	str	r3, [r7, #20]
 8000ac8:	e00a      	b.n	8000ae0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000aca:	f3af 8000 	nop.w
 8000ace:	4601      	mov	r1, r0
 8000ad0:	68bb      	ldr	r3, [r7, #8]
 8000ad2:	1c5a      	adds	r2, r3, #1
 8000ad4:	60ba      	str	r2, [r7, #8]
 8000ad6:	b2ca      	uxtb	r2, r1
 8000ad8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ada:	697b      	ldr	r3, [r7, #20]
 8000adc:	3301      	adds	r3, #1
 8000ade:	617b      	str	r3, [r7, #20]
 8000ae0:	697a      	ldr	r2, [r7, #20]
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	429a      	cmp	r2, r3
 8000ae6:	dbf0      	blt.n	8000aca <_read+0x12>
	}

return len;
 8000ae8:	687b      	ldr	r3, [r7, #4]
}
 8000aea:	4618      	mov	r0, r3
 8000aec:	3718      	adds	r7, #24
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}

08000af2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000af2:	b580      	push	{r7, lr}
 8000af4:	b086      	sub	sp, #24
 8000af6:	af00      	add	r7, sp, #0
 8000af8:	60f8      	str	r0, [r7, #12]
 8000afa:	60b9      	str	r1, [r7, #8]
 8000afc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000afe:	2300      	movs	r3, #0
 8000b00:	617b      	str	r3, [r7, #20]
 8000b02:	e009      	b.n	8000b18 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000b04:	68bb      	ldr	r3, [r7, #8]
 8000b06:	1c5a      	adds	r2, r3, #1
 8000b08:	60ba      	str	r2, [r7, #8]
 8000b0a:	781b      	ldrb	r3, [r3, #0]
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	f7ff fd68 	bl	80005e2 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b12:	697b      	ldr	r3, [r7, #20]
 8000b14:	3301      	adds	r3, #1
 8000b16:	617b      	str	r3, [r7, #20]
 8000b18:	697a      	ldr	r2, [r7, #20]
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	429a      	cmp	r2, r3
 8000b1e:	dbf1      	blt.n	8000b04 <_write+0x12>
	}
	return len;
 8000b20:	687b      	ldr	r3, [r7, #4]
}
 8000b22:	4618      	mov	r0, r3
 8000b24:	3718      	adds	r7, #24
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}

08000b2a <_close>:

int _close(int file)
{
 8000b2a:	b480      	push	{r7}
 8000b2c:	b083      	sub	sp, #12
 8000b2e:	af00      	add	r7, sp, #0
 8000b30:	6078      	str	r0, [r7, #4]
	return -1;
 8000b32:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b36:	4618      	mov	r0, r3
 8000b38:	370c      	adds	r7, #12
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b40:	4770      	bx	lr

08000b42 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b42:	b480      	push	{r7}
 8000b44:	b083      	sub	sp, #12
 8000b46:	af00      	add	r7, sp, #0
 8000b48:	6078      	str	r0, [r7, #4]
 8000b4a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000b4c:	683b      	ldr	r3, [r7, #0]
 8000b4e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b52:	605a      	str	r2, [r3, #4]
	return 0;
 8000b54:	2300      	movs	r3, #0
}
 8000b56:	4618      	mov	r0, r3
 8000b58:	370c      	adds	r7, #12
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b60:	4770      	bx	lr

08000b62 <_isatty>:

int _isatty(int file)
{
 8000b62:	b480      	push	{r7}
 8000b64:	b083      	sub	sp, #12
 8000b66:	af00      	add	r7, sp, #0
 8000b68:	6078      	str	r0, [r7, #4]
	return 1;
 8000b6a:	2301      	movs	r3, #1
}
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	370c      	adds	r7, #12
 8000b70:	46bd      	mov	sp, r7
 8000b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b76:	4770      	bx	lr

08000b78 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	b085      	sub	sp, #20
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	60f8      	str	r0, [r7, #12]
 8000b80:	60b9      	str	r1, [r7, #8]
 8000b82:	607a      	str	r2, [r7, #4]
	return 0;
 8000b84:	2300      	movs	r3, #0
}
 8000b86:	4618      	mov	r0, r3
 8000b88:	3714      	adds	r7, #20
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b90:	4770      	bx	lr
	...

08000b94 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b086      	sub	sp, #24
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b9c:	4a14      	ldr	r2, [pc, #80]	; (8000bf0 <_sbrk+0x5c>)
 8000b9e:	4b15      	ldr	r3, [pc, #84]	; (8000bf4 <_sbrk+0x60>)
 8000ba0:	1ad3      	subs	r3, r2, r3
 8000ba2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ba4:	697b      	ldr	r3, [r7, #20]
 8000ba6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ba8:	4b13      	ldr	r3, [pc, #76]	; (8000bf8 <_sbrk+0x64>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d102      	bne.n	8000bb6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bb0:	4b11      	ldr	r3, [pc, #68]	; (8000bf8 <_sbrk+0x64>)
 8000bb2:	4a12      	ldr	r2, [pc, #72]	; (8000bfc <_sbrk+0x68>)
 8000bb4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bb6:	4b10      	ldr	r3, [pc, #64]	; (8000bf8 <_sbrk+0x64>)
 8000bb8:	681a      	ldr	r2, [r3, #0]
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	4413      	add	r3, r2
 8000bbe:	693a      	ldr	r2, [r7, #16]
 8000bc0:	429a      	cmp	r2, r3
 8000bc2:	d207      	bcs.n	8000bd4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bc4:	f001 fb0e 	bl	80021e4 <__errno>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	220c      	movs	r2, #12
 8000bcc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bce:	f04f 33ff 	mov.w	r3, #4294967295
 8000bd2:	e009      	b.n	8000be8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bd4:	4b08      	ldr	r3, [pc, #32]	; (8000bf8 <_sbrk+0x64>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bda:	4b07      	ldr	r3, [pc, #28]	; (8000bf8 <_sbrk+0x64>)
 8000bdc:	681a      	ldr	r2, [r3, #0]
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	4413      	add	r3, r2
 8000be2:	4a05      	ldr	r2, [pc, #20]	; (8000bf8 <_sbrk+0x64>)
 8000be4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000be6:	68fb      	ldr	r3, [r7, #12]
}
 8000be8:	4618      	mov	r0, r3
 8000bea:	3718      	adds	r7, #24
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	20030000 	.word	0x20030000
 8000bf4:	00000400 	.word	0x00000400
 8000bf8:	200000d0 	.word	0x200000d0
 8000bfc:	200000e8 	.word	0x200000e8

08000c00 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c04:	4b06      	ldr	r3, [pc, #24]	; (8000c20 <SystemInit+0x20>)
 8000c06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c0a:	4a05      	ldr	r2, [pc, #20]	; (8000c20 <SystemInit+0x20>)
 8000c0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c14:	bf00      	nop
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop
 8000c20:	e000ed00 	.word	0xe000ed00

08000c24 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000c24:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c5c <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c28:	480d      	ldr	r0, [pc, #52]	; (8000c60 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c2a:	490e      	ldr	r1, [pc, #56]	; (8000c64 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c2c:	4a0e      	ldr	r2, [pc, #56]	; (8000c68 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c30:	e002      	b.n	8000c38 <LoopCopyDataInit>

08000c32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c36:	3304      	adds	r3, #4

08000c38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c3c:	d3f9      	bcc.n	8000c32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c3e:	4a0b      	ldr	r2, [pc, #44]	; (8000c6c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c40:	4c0b      	ldr	r4, [pc, #44]	; (8000c70 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c44:	e001      	b.n	8000c4a <LoopFillZerobss>

08000c46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c48:	3204      	adds	r2, #4

08000c4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c4c:	d3fb      	bcc.n	8000c46 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c4e:	f7ff ffd7 	bl	8000c00 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c52:	f001 facd 	bl	80021f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c56:	f7ff fcd1 	bl	80005fc <main>
  bx  lr    
 8000c5a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000c5c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000c60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c64:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000c68:	08003244 	.word	0x08003244
  ldr r2, =_sbss
 8000c6c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000c70:	200000e8 	.word	0x200000e8

08000c74 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c74:	e7fe      	b.n	8000c74 <ADC_IRQHandler>
	...

08000c78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c7c:	4b0e      	ldr	r3, [pc, #56]	; (8000cb8 <HAL_Init+0x40>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	4a0d      	ldr	r2, [pc, #52]	; (8000cb8 <HAL_Init+0x40>)
 8000c82:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c86:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c88:	4b0b      	ldr	r3, [pc, #44]	; (8000cb8 <HAL_Init+0x40>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	4a0a      	ldr	r2, [pc, #40]	; (8000cb8 <HAL_Init+0x40>)
 8000c8e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c92:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c94:	4b08      	ldr	r3, [pc, #32]	; (8000cb8 <HAL_Init+0x40>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	4a07      	ldr	r2, [pc, #28]	; (8000cb8 <HAL_Init+0x40>)
 8000c9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c9e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ca0:	2003      	movs	r0, #3
 8000ca2:	f000 f931 	bl	8000f08 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ca6:	2000      	movs	r0, #0
 8000ca8:	f000 f808 	bl	8000cbc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cac:	f7ff fe6a 	bl	8000984 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cb0:	2300      	movs	r3, #0
}
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	40023c00 	.word	0x40023c00

08000cbc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b082      	sub	sp, #8
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cc4:	4b12      	ldr	r3, [pc, #72]	; (8000d10 <HAL_InitTick+0x54>)
 8000cc6:	681a      	ldr	r2, [r3, #0]
 8000cc8:	4b12      	ldr	r3, [pc, #72]	; (8000d14 <HAL_InitTick+0x58>)
 8000cca:	781b      	ldrb	r3, [r3, #0]
 8000ccc:	4619      	mov	r1, r3
 8000cce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cd2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f000 f93b 	bl	8000f56 <HAL_SYSTICK_Config>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d001      	beq.n	8000cea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ce6:	2301      	movs	r3, #1
 8000ce8:	e00e      	b.n	8000d08 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	2b0f      	cmp	r3, #15
 8000cee:	d80a      	bhi.n	8000d06 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	6879      	ldr	r1, [r7, #4]
 8000cf4:	f04f 30ff 	mov.w	r0, #4294967295
 8000cf8:	f000 f911 	bl	8000f1e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cfc:	4a06      	ldr	r2, [pc, #24]	; (8000d18 <HAL_InitTick+0x5c>)
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d02:	2300      	movs	r3, #0
 8000d04:	e000      	b.n	8000d08 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d06:	2301      	movs	r3, #1
}
 8000d08:	4618      	mov	r0, r3
 8000d0a:	3708      	adds	r7, #8
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	20000000 	.word	0x20000000
 8000d14:	20000008 	.word	0x20000008
 8000d18:	20000004 	.word	0x20000004

08000d1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d20:	4b06      	ldr	r3, [pc, #24]	; (8000d3c <HAL_IncTick+0x20>)
 8000d22:	781b      	ldrb	r3, [r3, #0]
 8000d24:	461a      	mov	r2, r3
 8000d26:	4b06      	ldr	r3, [pc, #24]	; (8000d40 <HAL_IncTick+0x24>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	4413      	add	r3, r2
 8000d2c:	4a04      	ldr	r2, [pc, #16]	; (8000d40 <HAL_IncTick+0x24>)
 8000d2e:	6013      	str	r3, [r2, #0]
}
 8000d30:	bf00      	nop
 8000d32:	46bd      	mov	sp, r7
 8000d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d38:	4770      	bx	lr
 8000d3a:	bf00      	nop
 8000d3c:	20000008 	.word	0x20000008
 8000d40:	200000d4 	.word	0x200000d4

08000d44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  return uwTick;
 8000d48:	4b03      	ldr	r3, [pc, #12]	; (8000d58 <HAL_GetTick+0x14>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
}
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d54:	4770      	bx	lr
 8000d56:	bf00      	nop
 8000d58:	200000d4 	.word	0x200000d4

08000d5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b084      	sub	sp, #16
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d64:	f7ff ffee 	bl	8000d44 <HAL_GetTick>
 8000d68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d6e:	68fb      	ldr	r3, [r7, #12]
 8000d70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d74:	d005      	beq.n	8000d82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d76:	4b0a      	ldr	r3, [pc, #40]	; (8000da0 <HAL_Delay+0x44>)
 8000d78:	781b      	ldrb	r3, [r3, #0]
 8000d7a:	461a      	mov	r2, r3
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	4413      	add	r3, r2
 8000d80:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d82:	bf00      	nop
 8000d84:	f7ff ffde 	bl	8000d44 <HAL_GetTick>
 8000d88:	4602      	mov	r2, r0
 8000d8a:	68bb      	ldr	r3, [r7, #8]
 8000d8c:	1ad3      	subs	r3, r2, r3
 8000d8e:	68fa      	ldr	r2, [r7, #12]
 8000d90:	429a      	cmp	r2, r3
 8000d92:	d8f7      	bhi.n	8000d84 <HAL_Delay+0x28>
  {
  }
}
 8000d94:	bf00      	nop
 8000d96:	bf00      	nop
 8000d98:	3710      	adds	r7, #16
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	20000008 	.word	0x20000008

08000da4 <__NVIC_SetPriorityGrouping>:
{
 8000da4:	b480      	push	{r7}
 8000da6:	b085      	sub	sp, #20
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	f003 0307 	and.w	r3, r3, #7
 8000db2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000db4:	4b0c      	ldr	r3, [pc, #48]	; (8000de8 <__NVIC_SetPriorityGrouping+0x44>)
 8000db6:	68db      	ldr	r3, [r3, #12]
 8000db8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dba:	68ba      	ldr	r2, [r7, #8]
 8000dbc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000dc0:	4013      	ands	r3, r2
 8000dc2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dc8:	68bb      	ldr	r3, [r7, #8]
 8000dca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000dcc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000dd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dd6:	4a04      	ldr	r2, [pc, #16]	; (8000de8 <__NVIC_SetPriorityGrouping+0x44>)
 8000dd8:	68bb      	ldr	r3, [r7, #8]
 8000dda:	60d3      	str	r3, [r2, #12]
}
 8000ddc:	bf00      	nop
 8000dde:	3714      	adds	r7, #20
 8000de0:	46bd      	mov	sp, r7
 8000de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de6:	4770      	bx	lr
 8000de8:	e000ed00 	.word	0xe000ed00

08000dec <__NVIC_GetPriorityGrouping>:
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000df0:	4b04      	ldr	r3, [pc, #16]	; (8000e04 <__NVIC_GetPriorityGrouping+0x18>)
 8000df2:	68db      	ldr	r3, [r3, #12]
 8000df4:	0a1b      	lsrs	r3, r3, #8
 8000df6:	f003 0307 	and.w	r3, r3, #7
}
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e02:	4770      	bx	lr
 8000e04:	e000ed00 	.word	0xe000ed00

08000e08 <__NVIC_SetPriority>:
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b083      	sub	sp, #12
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	4603      	mov	r3, r0
 8000e10:	6039      	str	r1, [r7, #0]
 8000e12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	db0a      	blt.n	8000e32 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	b2da      	uxtb	r2, r3
 8000e20:	490c      	ldr	r1, [pc, #48]	; (8000e54 <__NVIC_SetPriority+0x4c>)
 8000e22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e26:	0112      	lsls	r2, r2, #4
 8000e28:	b2d2      	uxtb	r2, r2
 8000e2a:	440b      	add	r3, r1
 8000e2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000e30:	e00a      	b.n	8000e48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	b2da      	uxtb	r2, r3
 8000e36:	4908      	ldr	r1, [pc, #32]	; (8000e58 <__NVIC_SetPriority+0x50>)
 8000e38:	79fb      	ldrb	r3, [r7, #7]
 8000e3a:	f003 030f 	and.w	r3, r3, #15
 8000e3e:	3b04      	subs	r3, #4
 8000e40:	0112      	lsls	r2, r2, #4
 8000e42:	b2d2      	uxtb	r2, r2
 8000e44:	440b      	add	r3, r1
 8000e46:	761a      	strb	r2, [r3, #24]
}
 8000e48:	bf00      	nop
 8000e4a:	370c      	adds	r7, #12
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e52:	4770      	bx	lr
 8000e54:	e000e100 	.word	0xe000e100
 8000e58:	e000ed00 	.word	0xe000ed00

08000e5c <NVIC_EncodePriority>:
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b089      	sub	sp, #36	; 0x24
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	60f8      	str	r0, [r7, #12]
 8000e64:	60b9      	str	r1, [r7, #8]
 8000e66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	f003 0307 	and.w	r3, r3, #7
 8000e6e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e70:	69fb      	ldr	r3, [r7, #28]
 8000e72:	f1c3 0307 	rsb	r3, r3, #7
 8000e76:	2b04      	cmp	r3, #4
 8000e78:	bf28      	it	cs
 8000e7a:	2304      	movcs	r3, #4
 8000e7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e7e:	69fb      	ldr	r3, [r7, #28]
 8000e80:	3304      	adds	r3, #4
 8000e82:	2b06      	cmp	r3, #6
 8000e84:	d902      	bls.n	8000e8c <NVIC_EncodePriority+0x30>
 8000e86:	69fb      	ldr	r3, [r7, #28]
 8000e88:	3b03      	subs	r3, #3
 8000e8a:	e000      	b.n	8000e8e <NVIC_EncodePriority+0x32>
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e90:	f04f 32ff 	mov.w	r2, #4294967295
 8000e94:	69bb      	ldr	r3, [r7, #24]
 8000e96:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9a:	43da      	mvns	r2, r3
 8000e9c:	68bb      	ldr	r3, [r7, #8]
 8000e9e:	401a      	ands	r2, r3
 8000ea0:	697b      	ldr	r3, [r7, #20]
 8000ea2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ea4:	f04f 31ff 	mov.w	r1, #4294967295
 8000ea8:	697b      	ldr	r3, [r7, #20]
 8000eaa:	fa01 f303 	lsl.w	r3, r1, r3
 8000eae:	43d9      	mvns	r1, r3
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eb4:	4313      	orrs	r3, r2
}
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	3724      	adds	r7, #36	; 0x24
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr
	...

08000ec4 <SysTick_Config>:
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	3b01      	subs	r3, #1
 8000ed0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ed4:	d301      	bcc.n	8000eda <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	e00f      	b.n	8000efa <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000eda:	4a0a      	ldr	r2, [pc, #40]	; (8000f04 <SysTick_Config+0x40>)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	3b01      	subs	r3, #1
 8000ee0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ee2:	210f      	movs	r1, #15
 8000ee4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ee8:	f7ff ff8e 	bl	8000e08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000eec:	4b05      	ldr	r3, [pc, #20]	; (8000f04 <SysTick_Config+0x40>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ef2:	4b04      	ldr	r3, [pc, #16]	; (8000f04 <SysTick_Config+0x40>)
 8000ef4:	2207      	movs	r2, #7
 8000ef6:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8000ef8:	2300      	movs	r3, #0
}
 8000efa:	4618      	mov	r0, r3
 8000efc:	3708      	adds	r7, #8
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	e000e010 	.word	0xe000e010

08000f08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b082      	sub	sp, #8
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f10:	6878      	ldr	r0, [r7, #4]
 8000f12:	f7ff ff47 	bl	8000da4 <__NVIC_SetPriorityGrouping>
}
 8000f16:	bf00      	nop
 8000f18:	3708      	adds	r7, #8
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}

08000f1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f1e:	b580      	push	{r7, lr}
 8000f20:	b086      	sub	sp, #24
 8000f22:	af00      	add	r7, sp, #0
 8000f24:	4603      	mov	r3, r0
 8000f26:	60b9      	str	r1, [r7, #8]
 8000f28:	607a      	str	r2, [r7, #4]
 8000f2a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f30:	f7ff ff5c 	bl	8000dec <__NVIC_GetPriorityGrouping>
 8000f34:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f36:	687a      	ldr	r2, [r7, #4]
 8000f38:	68b9      	ldr	r1, [r7, #8]
 8000f3a:	6978      	ldr	r0, [r7, #20]
 8000f3c:	f7ff ff8e 	bl	8000e5c <NVIC_EncodePriority>
 8000f40:	4602      	mov	r2, r0
 8000f42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f46:	4611      	mov	r1, r2
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f7ff ff5d 	bl	8000e08 <__NVIC_SetPriority>
}
 8000f4e:	bf00      	nop
 8000f50:	3718      	adds	r7, #24
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}

08000f56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f56:	b580      	push	{r7, lr}
 8000f58:	b082      	sub	sp, #8
 8000f5a:	af00      	add	r7, sp, #0
 8000f5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f5e:	6878      	ldr	r0, [r7, #4]
 8000f60:	f7ff ffb0 	bl	8000ec4 <SysTick_Config>
 8000f64:	4603      	mov	r3, r0
}
 8000f66:	4618      	mov	r0, r3
 8000f68:	3708      	adds	r7, #8
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
	...

08000f70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b089      	sub	sp, #36	; 0x24
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
 8000f78:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f82:	2300      	movs	r3, #0
 8000f84:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f86:	2300      	movs	r3, #0
 8000f88:	61fb      	str	r3, [r7, #28]
 8000f8a:	e177      	b.n	800127c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	69fb      	ldr	r3, [r7, #28]
 8000f90:	fa02 f303 	lsl.w	r3, r2, r3
 8000f94:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	697a      	ldr	r2, [r7, #20]
 8000f9c:	4013      	ands	r3, r2
 8000f9e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000fa0:	693a      	ldr	r2, [r7, #16]
 8000fa2:	697b      	ldr	r3, [r7, #20]
 8000fa4:	429a      	cmp	r2, r3
 8000fa6:	f040 8166 	bne.w	8001276 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	685b      	ldr	r3, [r3, #4]
 8000fae:	f003 0303 	and.w	r3, r3, #3
 8000fb2:	2b01      	cmp	r3, #1
 8000fb4:	d005      	beq.n	8000fc2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	685b      	ldr	r3, [r3, #4]
 8000fba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fbe:	2b02      	cmp	r3, #2
 8000fc0:	d130      	bne.n	8001024 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	689b      	ldr	r3, [r3, #8]
 8000fc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000fc8:	69fb      	ldr	r3, [r7, #28]
 8000fca:	005b      	lsls	r3, r3, #1
 8000fcc:	2203      	movs	r2, #3
 8000fce:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd2:	43db      	mvns	r3, r3
 8000fd4:	69ba      	ldr	r2, [r7, #24]
 8000fd6:	4013      	ands	r3, r2
 8000fd8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	68da      	ldr	r2, [r3, #12]
 8000fde:	69fb      	ldr	r3, [r7, #28]
 8000fe0:	005b      	lsls	r3, r3, #1
 8000fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe6:	69ba      	ldr	r2, [r7, #24]
 8000fe8:	4313      	orrs	r3, r2
 8000fea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	69ba      	ldr	r2, [r7, #24]
 8000ff0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	685b      	ldr	r3, [r3, #4]
 8000ff6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	69fb      	ldr	r3, [r7, #28]
 8000ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8001000:	43db      	mvns	r3, r3
 8001002:	69ba      	ldr	r2, [r7, #24]
 8001004:	4013      	ands	r3, r2
 8001006:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	091b      	lsrs	r3, r3, #4
 800100e:	f003 0201 	and.w	r2, r3, #1
 8001012:	69fb      	ldr	r3, [r7, #28]
 8001014:	fa02 f303 	lsl.w	r3, r2, r3
 8001018:	69ba      	ldr	r2, [r7, #24]
 800101a:	4313      	orrs	r3, r2
 800101c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	69ba      	ldr	r2, [r7, #24]
 8001022:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	f003 0303 	and.w	r3, r3, #3
 800102c:	2b03      	cmp	r3, #3
 800102e:	d017      	beq.n	8001060 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	68db      	ldr	r3, [r3, #12]
 8001034:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001036:	69fb      	ldr	r3, [r7, #28]
 8001038:	005b      	lsls	r3, r3, #1
 800103a:	2203      	movs	r2, #3
 800103c:	fa02 f303 	lsl.w	r3, r2, r3
 8001040:	43db      	mvns	r3, r3
 8001042:	69ba      	ldr	r2, [r7, #24]
 8001044:	4013      	ands	r3, r2
 8001046:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	689a      	ldr	r2, [r3, #8]
 800104c:	69fb      	ldr	r3, [r7, #28]
 800104e:	005b      	lsls	r3, r3, #1
 8001050:	fa02 f303 	lsl.w	r3, r2, r3
 8001054:	69ba      	ldr	r2, [r7, #24]
 8001056:	4313      	orrs	r3, r2
 8001058:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	69ba      	ldr	r2, [r7, #24]
 800105e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	f003 0303 	and.w	r3, r3, #3
 8001068:	2b02      	cmp	r3, #2
 800106a:	d123      	bne.n	80010b4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800106c:	69fb      	ldr	r3, [r7, #28]
 800106e:	08da      	lsrs	r2, r3, #3
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	3208      	adds	r2, #8
 8001074:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001078:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800107a:	69fb      	ldr	r3, [r7, #28]
 800107c:	f003 0307 	and.w	r3, r3, #7
 8001080:	009b      	lsls	r3, r3, #2
 8001082:	220f      	movs	r2, #15
 8001084:	fa02 f303 	lsl.w	r3, r2, r3
 8001088:	43db      	mvns	r3, r3
 800108a:	69ba      	ldr	r2, [r7, #24]
 800108c:	4013      	ands	r3, r2
 800108e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	691a      	ldr	r2, [r3, #16]
 8001094:	69fb      	ldr	r3, [r7, #28]
 8001096:	f003 0307 	and.w	r3, r3, #7
 800109a:	009b      	lsls	r3, r3, #2
 800109c:	fa02 f303 	lsl.w	r3, r2, r3
 80010a0:	69ba      	ldr	r2, [r7, #24]
 80010a2:	4313      	orrs	r3, r2
 80010a4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80010a6:	69fb      	ldr	r3, [r7, #28]
 80010a8:	08da      	lsrs	r2, r3, #3
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	3208      	adds	r2, #8
 80010ae:	69b9      	ldr	r1, [r7, #24]
 80010b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80010ba:	69fb      	ldr	r3, [r7, #28]
 80010bc:	005b      	lsls	r3, r3, #1
 80010be:	2203      	movs	r2, #3
 80010c0:	fa02 f303 	lsl.w	r3, r2, r3
 80010c4:	43db      	mvns	r3, r3
 80010c6:	69ba      	ldr	r2, [r7, #24]
 80010c8:	4013      	ands	r3, r2
 80010ca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	f003 0203 	and.w	r2, r3, #3
 80010d4:	69fb      	ldr	r3, [r7, #28]
 80010d6:	005b      	lsls	r3, r3, #1
 80010d8:	fa02 f303 	lsl.w	r3, r2, r3
 80010dc:	69ba      	ldr	r2, [r7, #24]
 80010de:	4313      	orrs	r3, r2
 80010e0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	69ba      	ldr	r2, [r7, #24]
 80010e6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	f000 80c0 	beq.w	8001276 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010f6:	2300      	movs	r3, #0
 80010f8:	60fb      	str	r3, [r7, #12]
 80010fa:	4b66      	ldr	r3, [pc, #408]	; (8001294 <HAL_GPIO_Init+0x324>)
 80010fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010fe:	4a65      	ldr	r2, [pc, #404]	; (8001294 <HAL_GPIO_Init+0x324>)
 8001100:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001104:	6453      	str	r3, [r2, #68]	; 0x44
 8001106:	4b63      	ldr	r3, [pc, #396]	; (8001294 <HAL_GPIO_Init+0x324>)
 8001108:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800110a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800110e:	60fb      	str	r3, [r7, #12]
 8001110:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001112:	4a61      	ldr	r2, [pc, #388]	; (8001298 <HAL_GPIO_Init+0x328>)
 8001114:	69fb      	ldr	r3, [r7, #28]
 8001116:	089b      	lsrs	r3, r3, #2
 8001118:	3302      	adds	r3, #2
 800111a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800111e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001120:	69fb      	ldr	r3, [r7, #28]
 8001122:	f003 0303 	and.w	r3, r3, #3
 8001126:	009b      	lsls	r3, r3, #2
 8001128:	220f      	movs	r2, #15
 800112a:	fa02 f303 	lsl.w	r3, r2, r3
 800112e:	43db      	mvns	r3, r3
 8001130:	69ba      	ldr	r2, [r7, #24]
 8001132:	4013      	ands	r3, r2
 8001134:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	4a58      	ldr	r2, [pc, #352]	; (800129c <HAL_GPIO_Init+0x32c>)
 800113a:	4293      	cmp	r3, r2
 800113c:	d037      	beq.n	80011ae <HAL_GPIO_Init+0x23e>
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	4a57      	ldr	r2, [pc, #348]	; (80012a0 <HAL_GPIO_Init+0x330>)
 8001142:	4293      	cmp	r3, r2
 8001144:	d031      	beq.n	80011aa <HAL_GPIO_Init+0x23a>
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	4a56      	ldr	r2, [pc, #344]	; (80012a4 <HAL_GPIO_Init+0x334>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d02b      	beq.n	80011a6 <HAL_GPIO_Init+0x236>
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	4a55      	ldr	r2, [pc, #340]	; (80012a8 <HAL_GPIO_Init+0x338>)
 8001152:	4293      	cmp	r3, r2
 8001154:	d025      	beq.n	80011a2 <HAL_GPIO_Init+0x232>
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	4a54      	ldr	r2, [pc, #336]	; (80012ac <HAL_GPIO_Init+0x33c>)
 800115a:	4293      	cmp	r3, r2
 800115c:	d01f      	beq.n	800119e <HAL_GPIO_Init+0x22e>
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	4a53      	ldr	r2, [pc, #332]	; (80012b0 <HAL_GPIO_Init+0x340>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d019      	beq.n	800119a <HAL_GPIO_Init+0x22a>
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	4a52      	ldr	r2, [pc, #328]	; (80012b4 <HAL_GPIO_Init+0x344>)
 800116a:	4293      	cmp	r3, r2
 800116c:	d013      	beq.n	8001196 <HAL_GPIO_Init+0x226>
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	4a51      	ldr	r2, [pc, #324]	; (80012b8 <HAL_GPIO_Init+0x348>)
 8001172:	4293      	cmp	r3, r2
 8001174:	d00d      	beq.n	8001192 <HAL_GPIO_Init+0x222>
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	4a50      	ldr	r2, [pc, #320]	; (80012bc <HAL_GPIO_Init+0x34c>)
 800117a:	4293      	cmp	r3, r2
 800117c:	d007      	beq.n	800118e <HAL_GPIO_Init+0x21e>
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	4a4f      	ldr	r2, [pc, #316]	; (80012c0 <HAL_GPIO_Init+0x350>)
 8001182:	4293      	cmp	r3, r2
 8001184:	d101      	bne.n	800118a <HAL_GPIO_Init+0x21a>
 8001186:	2309      	movs	r3, #9
 8001188:	e012      	b.n	80011b0 <HAL_GPIO_Init+0x240>
 800118a:	230a      	movs	r3, #10
 800118c:	e010      	b.n	80011b0 <HAL_GPIO_Init+0x240>
 800118e:	2308      	movs	r3, #8
 8001190:	e00e      	b.n	80011b0 <HAL_GPIO_Init+0x240>
 8001192:	2307      	movs	r3, #7
 8001194:	e00c      	b.n	80011b0 <HAL_GPIO_Init+0x240>
 8001196:	2306      	movs	r3, #6
 8001198:	e00a      	b.n	80011b0 <HAL_GPIO_Init+0x240>
 800119a:	2305      	movs	r3, #5
 800119c:	e008      	b.n	80011b0 <HAL_GPIO_Init+0x240>
 800119e:	2304      	movs	r3, #4
 80011a0:	e006      	b.n	80011b0 <HAL_GPIO_Init+0x240>
 80011a2:	2303      	movs	r3, #3
 80011a4:	e004      	b.n	80011b0 <HAL_GPIO_Init+0x240>
 80011a6:	2302      	movs	r3, #2
 80011a8:	e002      	b.n	80011b0 <HAL_GPIO_Init+0x240>
 80011aa:	2301      	movs	r3, #1
 80011ac:	e000      	b.n	80011b0 <HAL_GPIO_Init+0x240>
 80011ae:	2300      	movs	r3, #0
 80011b0:	69fa      	ldr	r2, [r7, #28]
 80011b2:	f002 0203 	and.w	r2, r2, #3
 80011b6:	0092      	lsls	r2, r2, #2
 80011b8:	4093      	lsls	r3, r2
 80011ba:	69ba      	ldr	r2, [r7, #24]
 80011bc:	4313      	orrs	r3, r2
 80011be:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011c0:	4935      	ldr	r1, [pc, #212]	; (8001298 <HAL_GPIO_Init+0x328>)
 80011c2:	69fb      	ldr	r3, [r7, #28]
 80011c4:	089b      	lsrs	r3, r3, #2
 80011c6:	3302      	adds	r3, #2
 80011c8:	69ba      	ldr	r2, [r7, #24]
 80011ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011ce:	4b3d      	ldr	r3, [pc, #244]	; (80012c4 <HAL_GPIO_Init+0x354>)
 80011d0:	689b      	ldr	r3, [r3, #8]
 80011d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011d4:	693b      	ldr	r3, [r7, #16]
 80011d6:	43db      	mvns	r3, r3
 80011d8:	69ba      	ldr	r2, [r7, #24]
 80011da:	4013      	ands	r3, r2
 80011dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	685b      	ldr	r3, [r3, #4]
 80011e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d003      	beq.n	80011f2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80011ea:	69ba      	ldr	r2, [r7, #24]
 80011ec:	693b      	ldr	r3, [r7, #16]
 80011ee:	4313      	orrs	r3, r2
 80011f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80011f2:	4a34      	ldr	r2, [pc, #208]	; (80012c4 <HAL_GPIO_Init+0x354>)
 80011f4:	69bb      	ldr	r3, [r7, #24]
 80011f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011f8:	4b32      	ldr	r3, [pc, #200]	; (80012c4 <HAL_GPIO_Init+0x354>)
 80011fa:	68db      	ldr	r3, [r3, #12]
 80011fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011fe:	693b      	ldr	r3, [r7, #16]
 8001200:	43db      	mvns	r3, r3
 8001202:	69ba      	ldr	r2, [r7, #24]
 8001204:	4013      	ands	r3, r2
 8001206:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001210:	2b00      	cmp	r3, #0
 8001212:	d003      	beq.n	800121c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001214:	69ba      	ldr	r2, [r7, #24]
 8001216:	693b      	ldr	r3, [r7, #16]
 8001218:	4313      	orrs	r3, r2
 800121a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800121c:	4a29      	ldr	r2, [pc, #164]	; (80012c4 <HAL_GPIO_Init+0x354>)
 800121e:	69bb      	ldr	r3, [r7, #24]
 8001220:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001222:	4b28      	ldr	r3, [pc, #160]	; (80012c4 <HAL_GPIO_Init+0x354>)
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001228:	693b      	ldr	r3, [r7, #16]
 800122a:	43db      	mvns	r3, r3
 800122c:	69ba      	ldr	r2, [r7, #24]
 800122e:	4013      	ands	r3, r2
 8001230:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800123a:	2b00      	cmp	r3, #0
 800123c:	d003      	beq.n	8001246 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800123e:	69ba      	ldr	r2, [r7, #24]
 8001240:	693b      	ldr	r3, [r7, #16]
 8001242:	4313      	orrs	r3, r2
 8001244:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001246:	4a1f      	ldr	r2, [pc, #124]	; (80012c4 <HAL_GPIO_Init+0x354>)
 8001248:	69bb      	ldr	r3, [r7, #24]
 800124a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800124c:	4b1d      	ldr	r3, [pc, #116]	; (80012c4 <HAL_GPIO_Init+0x354>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001252:	693b      	ldr	r3, [r7, #16]
 8001254:	43db      	mvns	r3, r3
 8001256:	69ba      	ldr	r2, [r7, #24]
 8001258:	4013      	ands	r3, r2
 800125a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001264:	2b00      	cmp	r3, #0
 8001266:	d003      	beq.n	8001270 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001268:	69ba      	ldr	r2, [r7, #24]
 800126a:	693b      	ldr	r3, [r7, #16]
 800126c:	4313      	orrs	r3, r2
 800126e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001270:	4a14      	ldr	r2, [pc, #80]	; (80012c4 <HAL_GPIO_Init+0x354>)
 8001272:	69bb      	ldr	r3, [r7, #24]
 8001274:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001276:	69fb      	ldr	r3, [r7, #28]
 8001278:	3301      	adds	r3, #1
 800127a:	61fb      	str	r3, [r7, #28]
 800127c:	69fb      	ldr	r3, [r7, #28]
 800127e:	2b0f      	cmp	r3, #15
 8001280:	f67f ae84 	bls.w	8000f8c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001284:	bf00      	nop
 8001286:	bf00      	nop
 8001288:	3724      	adds	r7, #36	; 0x24
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr
 8001292:	bf00      	nop
 8001294:	40023800 	.word	0x40023800
 8001298:	40013800 	.word	0x40013800
 800129c:	40020000 	.word	0x40020000
 80012a0:	40020400 	.word	0x40020400
 80012a4:	40020800 	.word	0x40020800
 80012a8:	40020c00 	.word	0x40020c00
 80012ac:	40021000 	.word	0x40021000
 80012b0:	40021400 	.word	0x40021400
 80012b4:	40021800 	.word	0x40021800
 80012b8:	40021c00 	.word	0x40021c00
 80012bc:	40022000 	.word	0x40022000
 80012c0:	40022400 	.word	0x40022400
 80012c4:	40013c00 	.word	0x40013c00

080012c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b083      	sub	sp, #12
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
 80012d0:	460b      	mov	r3, r1
 80012d2:	807b      	strh	r3, [r7, #2]
 80012d4:	4613      	mov	r3, r2
 80012d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012d8:	787b      	ldrb	r3, [r7, #1]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d003      	beq.n	80012e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012de:	887a      	ldrh	r2, [r7, #2]
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80012e4:	e003      	b.n	80012ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80012e6:	887b      	ldrh	r3, [r7, #2]
 80012e8:	041a      	lsls	r2, r3, #16
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	619a      	str	r2, [r3, #24]
}
 80012ee:	bf00      	nop
 80012f0:	370c      	adds	r7, #12
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr

080012fa <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80012fa:	b480      	push	{r7}
 80012fc:	b085      	sub	sp, #20
 80012fe:	af00      	add	r7, sp, #0
 8001300:	6078      	str	r0, [r7, #4]
 8001302:	460b      	mov	r3, r1
 8001304:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	695b      	ldr	r3, [r3, #20]
 800130a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800130c:	887a      	ldrh	r2, [r7, #2]
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	4013      	ands	r3, r2
 8001312:	041a      	lsls	r2, r3, #16
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	43d9      	mvns	r1, r3
 8001318:	887b      	ldrh	r3, [r7, #2]
 800131a:	400b      	ands	r3, r1
 800131c:	431a      	orrs	r2, r3
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	619a      	str	r2, [r3, #24]
}
 8001322:	bf00      	nop
 8001324:	3714      	adds	r7, #20
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr
	...

08001330 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b086      	sub	sp, #24
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d101      	bne.n	8001342 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800133e:	2301      	movs	r3, #1
 8001340:	e267      	b.n	8001812 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f003 0301 	and.w	r3, r3, #1
 800134a:	2b00      	cmp	r3, #0
 800134c:	d075      	beq.n	800143a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800134e:	4b88      	ldr	r3, [pc, #544]	; (8001570 <HAL_RCC_OscConfig+0x240>)
 8001350:	689b      	ldr	r3, [r3, #8]
 8001352:	f003 030c 	and.w	r3, r3, #12
 8001356:	2b04      	cmp	r3, #4
 8001358:	d00c      	beq.n	8001374 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800135a:	4b85      	ldr	r3, [pc, #532]	; (8001570 <HAL_RCC_OscConfig+0x240>)
 800135c:	689b      	ldr	r3, [r3, #8]
 800135e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001362:	2b08      	cmp	r3, #8
 8001364:	d112      	bne.n	800138c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001366:	4b82      	ldr	r3, [pc, #520]	; (8001570 <HAL_RCC_OscConfig+0x240>)
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800136e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001372:	d10b      	bne.n	800138c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001374:	4b7e      	ldr	r3, [pc, #504]	; (8001570 <HAL_RCC_OscConfig+0x240>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800137c:	2b00      	cmp	r3, #0
 800137e:	d05b      	beq.n	8001438 <HAL_RCC_OscConfig+0x108>
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d157      	bne.n	8001438 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001388:	2301      	movs	r3, #1
 800138a:	e242      	b.n	8001812 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001394:	d106      	bne.n	80013a4 <HAL_RCC_OscConfig+0x74>
 8001396:	4b76      	ldr	r3, [pc, #472]	; (8001570 <HAL_RCC_OscConfig+0x240>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	4a75      	ldr	r2, [pc, #468]	; (8001570 <HAL_RCC_OscConfig+0x240>)
 800139c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013a0:	6013      	str	r3, [r2, #0]
 80013a2:	e01d      	b.n	80013e0 <HAL_RCC_OscConfig+0xb0>
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80013ac:	d10c      	bne.n	80013c8 <HAL_RCC_OscConfig+0x98>
 80013ae:	4b70      	ldr	r3, [pc, #448]	; (8001570 <HAL_RCC_OscConfig+0x240>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	4a6f      	ldr	r2, [pc, #444]	; (8001570 <HAL_RCC_OscConfig+0x240>)
 80013b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013b8:	6013      	str	r3, [r2, #0]
 80013ba:	4b6d      	ldr	r3, [pc, #436]	; (8001570 <HAL_RCC_OscConfig+0x240>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	4a6c      	ldr	r2, [pc, #432]	; (8001570 <HAL_RCC_OscConfig+0x240>)
 80013c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013c4:	6013      	str	r3, [r2, #0]
 80013c6:	e00b      	b.n	80013e0 <HAL_RCC_OscConfig+0xb0>
 80013c8:	4b69      	ldr	r3, [pc, #420]	; (8001570 <HAL_RCC_OscConfig+0x240>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a68      	ldr	r2, [pc, #416]	; (8001570 <HAL_RCC_OscConfig+0x240>)
 80013ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013d2:	6013      	str	r3, [r2, #0]
 80013d4:	4b66      	ldr	r3, [pc, #408]	; (8001570 <HAL_RCC_OscConfig+0x240>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4a65      	ldr	r2, [pc, #404]	; (8001570 <HAL_RCC_OscConfig+0x240>)
 80013da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d013      	beq.n	8001410 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013e8:	f7ff fcac 	bl	8000d44 <HAL_GetTick>
 80013ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013ee:	e008      	b.n	8001402 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013f0:	f7ff fca8 	bl	8000d44 <HAL_GetTick>
 80013f4:	4602      	mov	r2, r0
 80013f6:	693b      	ldr	r3, [r7, #16]
 80013f8:	1ad3      	subs	r3, r2, r3
 80013fa:	2b64      	cmp	r3, #100	; 0x64
 80013fc:	d901      	bls.n	8001402 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80013fe:	2303      	movs	r3, #3
 8001400:	e207      	b.n	8001812 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001402:	4b5b      	ldr	r3, [pc, #364]	; (8001570 <HAL_RCC_OscConfig+0x240>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800140a:	2b00      	cmp	r3, #0
 800140c:	d0f0      	beq.n	80013f0 <HAL_RCC_OscConfig+0xc0>
 800140e:	e014      	b.n	800143a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001410:	f7ff fc98 	bl	8000d44 <HAL_GetTick>
 8001414:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001416:	e008      	b.n	800142a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001418:	f7ff fc94 	bl	8000d44 <HAL_GetTick>
 800141c:	4602      	mov	r2, r0
 800141e:	693b      	ldr	r3, [r7, #16]
 8001420:	1ad3      	subs	r3, r2, r3
 8001422:	2b64      	cmp	r3, #100	; 0x64
 8001424:	d901      	bls.n	800142a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001426:	2303      	movs	r3, #3
 8001428:	e1f3      	b.n	8001812 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800142a:	4b51      	ldr	r3, [pc, #324]	; (8001570 <HAL_RCC_OscConfig+0x240>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001432:	2b00      	cmp	r3, #0
 8001434:	d1f0      	bne.n	8001418 <HAL_RCC_OscConfig+0xe8>
 8001436:	e000      	b.n	800143a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001438:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f003 0302 	and.w	r3, r3, #2
 8001442:	2b00      	cmp	r3, #0
 8001444:	d063      	beq.n	800150e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001446:	4b4a      	ldr	r3, [pc, #296]	; (8001570 <HAL_RCC_OscConfig+0x240>)
 8001448:	689b      	ldr	r3, [r3, #8]
 800144a:	f003 030c 	and.w	r3, r3, #12
 800144e:	2b00      	cmp	r3, #0
 8001450:	d00b      	beq.n	800146a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001452:	4b47      	ldr	r3, [pc, #284]	; (8001570 <HAL_RCC_OscConfig+0x240>)
 8001454:	689b      	ldr	r3, [r3, #8]
 8001456:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800145a:	2b08      	cmp	r3, #8
 800145c:	d11c      	bne.n	8001498 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800145e:	4b44      	ldr	r3, [pc, #272]	; (8001570 <HAL_RCC_OscConfig+0x240>)
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001466:	2b00      	cmp	r3, #0
 8001468:	d116      	bne.n	8001498 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800146a:	4b41      	ldr	r3, [pc, #260]	; (8001570 <HAL_RCC_OscConfig+0x240>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f003 0302 	and.w	r3, r3, #2
 8001472:	2b00      	cmp	r3, #0
 8001474:	d005      	beq.n	8001482 <HAL_RCC_OscConfig+0x152>
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	68db      	ldr	r3, [r3, #12]
 800147a:	2b01      	cmp	r3, #1
 800147c:	d001      	beq.n	8001482 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800147e:	2301      	movs	r3, #1
 8001480:	e1c7      	b.n	8001812 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001482:	4b3b      	ldr	r3, [pc, #236]	; (8001570 <HAL_RCC_OscConfig+0x240>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	691b      	ldr	r3, [r3, #16]
 800148e:	00db      	lsls	r3, r3, #3
 8001490:	4937      	ldr	r1, [pc, #220]	; (8001570 <HAL_RCC_OscConfig+0x240>)
 8001492:	4313      	orrs	r3, r2
 8001494:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001496:	e03a      	b.n	800150e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	68db      	ldr	r3, [r3, #12]
 800149c:	2b00      	cmp	r3, #0
 800149e:	d020      	beq.n	80014e2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014a0:	4b34      	ldr	r3, [pc, #208]	; (8001574 <HAL_RCC_OscConfig+0x244>)
 80014a2:	2201      	movs	r2, #1
 80014a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014a6:	f7ff fc4d 	bl	8000d44 <HAL_GetTick>
 80014aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014ac:	e008      	b.n	80014c0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014ae:	f7ff fc49 	bl	8000d44 <HAL_GetTick>
 80014b2:	4602      	mov	r2, r0
 80014b4:	693b      	ldr	r3, [r7, #16]
 80014b6:	1ad3      	subs	r3, r2, r3
 80014b8:	2b02      	cmp	r3, #2
 80014ba:	d901      	bls.n	80014c0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80014bc:	2303      	movs	r3, #3
 80014be:	e1a8      	b.n	8001812 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014c0:	4b2b      	ldr	r3, [pc, #172]	; (8001570 <HAL_RCC_OscConfig+0x240>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f003 0302 	and.w	r3, r3, #2
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d0f0      	beq.n	80014ae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014cc:	4b28      	ldr	r3, [pc, #160]	; (8001570 <HAL_RCC_OscConfig+0x240>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	691b      	ldr	r3, [r3, #16]
 80014d8:	00db      	lsls	r3, r3, #3
 80014da:	4925      	ldr	r1, [pc, #148]	; (8001570 <HAL_RCC_OscConfig+0x240>)
 80014dc:	4313      	orrs	r3, r2
 80014de:	600b      	str	r3, [r1, #0]
 80014e0:	e015      	b.n	800150e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014e2:	4b24      	ldr	r3, [pc, #144]	; (8001574 <HAL_RCC_OscConfig+0x244>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014e8:	f7ff fc2c 	bl	8000d44 <HAL_GetTick>
 80014ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014ee:	e008      	b.n	8001502 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014f0:	f7ff fc28 	bl	8000d44 <HAL_GetTick>
 80014f4:	4602      	mov	r2, r0
 80014f6:	693b      	ldr	r3, [r7, #16]
 80014f8:	1ad3      	subs	r3, r2, r3
 80014fa:	2b02      	cmp	r3, #2
 80014fc:	d901      	bls.n	8001502 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80014fe:	2303      	movs	r3, #3
 8001500:	e187      	b.n	8001812 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001502:	4b1b      	ldr	r3, [pc, #108]	; (8001570 <HAL_RCC_OscConfig+0x240>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f003 0302 	and.w	r3, r3, #2
 800150a:	2b00      	cmp	r3, #0
 800150c:	d1f0      	bne.n	80014f0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f003 0308 	and.w	r3, r3, #8
 8001516:	2b00      	cmp	r3, #0
 8001518:	d036      	beq.n	8001588 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	695b      	ldr	r3, [r3, #20]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d016      	beq.n	8001550 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001522:	4b15      	ldr	r3, [pc, #84]	; (8001578 <HAL_RCC_OscConfig+0x248>)
 8001524:	2201      	movs	r2, #1
 8001526:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001528:	f7ff fc0c 	bl	8000d44 <HAL_GetTick>
 800152c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800152e:	e008      	b.n	8001542 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001530:	f7ff fc08 	bl	8000d44 <HAL_GetTick>
 8001534:	4602      	mov	r2, r0
 8001536:	693b      	ldr	r3, [r7, #16]
 8001538:	1ad3      	subs	r3, r2, r3
 800153a:	2b02      	cmp	r3, #2
 800153c:	d901      	bls.n	8001542 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800153e:	2303      	movs	r3, #3
 8001540:	e167      	b.n	8001812 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001542:	4b0b      	ldr	r3, [pc, #44]	; (8001570 <HAL_RCC_OscConfig+0x240>)
 8001544:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001546:	f003 0302 	and.w	r3, r3, #2
 800154a:	2b00      	cmp	r3, #0
 800154c:	d0f0      	beq.n	8001530 <HAL_RCC_OscConfig+0x200>
 800154e:	e01b      	b.n	8001588 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001550:	4b09      	ldr	r3, [pc, #36]	; (8001578 <HAL_RCC_OscConfig+0x248>)
 8001552:	2200      	movs	r2, #0
 8001554:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001556:	f7ff fbf5 	bl	8000d44 <HAL_GetTick>
 800155a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800155c:	e00e      	b.n	800157c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800155e:	f7ff fbf1 	bl	8000d44 <HAL_GetTick>
 8001562:	4602      	mov	r2, r0
 8001564:	693b      	ldr	r3, [r7, #16]
 8001566:	1ad3      	subs	r3, r2, r3
 8001568:	2b02      	cmp	r3, #2
 800156a:	d907      	bls.n	800157c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800156c:	2303      	movs	r3, #3
 800156e:	e150      	b.n	8001812 <HAL_RCC_OscConfig+0x4e2>
 8001570:	40023800 	.word	0x40023800
 8001574:	42470000 	.word	0x42470000
 8001578:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800157c:	4b88      	ldr	r3, [pc, #544]	; (80017a0 <HAL_RCC_OscConfig+0x470>)
 800157e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001580:	f003 0302 	and.w	r3, r3, #2
 8001584:	2b00      	cmp	r3, #0
 8001586:	d1ea      	bne.n	800155e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f003 0304 	and.w	r3, r3, #4
 8001590:	2b00      	cmp	r3, #0
 8001592:	f000 8097 	beq.w	80016c4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001596:	2300      	movs	r3, #0
 8001598:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800159a:	4b81      	ldr	r3, [pc, #516]	; (80017a0 <HAL_RCC_OscConfig+0x470>)
 800159c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800159e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d10f      	bne.n	80015c6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015a6:	2300      	movs	r3, #0
 80015a8:	60bb      	str	r3, [r7, #8]
 80015aa:	4b7d      	ldr	r3, [pc, #500]	; (80017a0 <HAL_RCC_OscConfig+0x470>)
 80015ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ae:	4a7c      	ldr	r2, [pc, #496]	; (80017a0 <HAL_RCC_OscConfig+0x470>)
 80015b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015b4:	6413      	str	r3, [r2, #64]	; 0x40
 80015b6:	4b7a      	ldr	r3, [pc, #488]	; (80017a0 <HAL_RCC_OscConfig+0x470>)
 80015b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015be:	60bb      	str	r3, [r7, #8]
 80015c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80015c2:	2301      	movs	r3, #1
 80015c4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015c6:	4b77      	ldr	r3, [pc, #476]	; (80017a4 <HAL_RCC_OscConfig+0x474>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d118      	bne.n	8001604 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015d2:	4b74      	ldr	r3, [pc, #464]	; (80017a4 <HAL_RCC_OscConfig+0x474>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4a73      	ldr	r2, [pc, #460]	; (80017a4 <HAL_RCC_OscConfig+0x474>)
 80015d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015de:	f7ff fbb1 	bl	8000d44 <HAL_GetTick>
 80015e2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015e4:	e008      	b.n	80015f8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015e6:	f7ff fbad 	bl	8000d44 <HAL_GetTick>
 80015ea:	4602      	mov	r2, r0
 80015ec:	693b      	ldr	r3, [r7, #16]
 80015ee:	1ad3      	subs	r3, r2, r3
 80015f0:	2b02      	cmp	r3, #2
 80015f2:	d901      	bls.n	80015f8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80015f4:	2303      	movs	r3, #3
 80015f6:	e10c      	b.n	8001812 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015f8:	4b6a      	ldr	r3, [pc, #424]	; (80017a4 <HAL_RCC_OscConfig+0x474>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001600:	2b00      	cmp	r3, #0
 8001602:	d0f0      	beq.n	80015e6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	689b      	ldr	r3, [r3, #8]
 8001608:	2b01      	cmp	r3, #1
 800160a:	d106      	bne.n	800161a <HAL_RCC_OscConfig+0x2ea>
 800160c:	4b64      	ldr	r3, [pc, #400]	; (80017a0 <HAL_RCC_OscConfig+0x470>)
 800160e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001610:	4a63      	ldr	r2, [pc, #396]	; (80017a0 <HAL_RCC_OscConfig+0x470>)
 8001612:	f043 0301 	orr.w	r3, r3, #1
 8001616:	6713      	str	r3, [r2, #112]	; 0x70
 8001618:	e01c      	b.n	8001654 <HAL_RCC_OscConfig+0x324>
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	689b      	ldr	r3, [r3, #8]
 800161e:	2b05      	cmp	r3, #5
 8001620:	d10c      	bne.n	800163c <HAL_RCC_OscConfig+0x30c>
 8001622:	4b5f      	ldr	r3, [pc, #380]	; (80017a0 <HAL_RCC_OscConfig+0x470>)
 8001624:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001626:	4a5e      	ldr	r2, [pc, #376]	; (80017a0 <HAL_RCC_OscConfig+0x470>)
 8001628:	f043 0304 	orr.w	r3, r3, #4
 800162c:	6713      	str	r3, [r2, #112]	; 0x70
 800162e:	4b5c      	ldr	r3, [pc, #368]	; (80017a0 <HAL_RCC_OscConfig+0x470>)
 8001630:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001632:	4a5b      	ldr	r2, [pc, #364]	; (80017a0 <HAL_RCC_OscConfig+0x470>)
 8001634:	f043 0301 	orr.w	r3, r3, #1
 8001638:	6713      	str	r3, [r2, #112]	; 0x70
 800163a:	e00b      	b.n	8001654 <HAL_RCC_OscConfig+0x324>
 800163c:	4b58      	ldr	r3, [pc, #352]	; (80017a0 <HAL_RCC_OscConfig+0x470>)
 800163e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001640:	4a57      	ldr	r2, [pc, #348]	; (80017a0 <HAL_RCC_OscConfig+0x470>)
 8001642:	f023 0301 	bic.w	r3, r3, #1
 8001646:	6713      	str	r3, [r2, #112]	; 0x70
 8001648:	4b55      	ldr	r3, [pc, #340]	; (80017a0 <HAL_RCC_OscConfig+0x470>)
 800164a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800164c:	4a54      	ldr	r2, [pc, #336]	; (80017a0 <HAL_RCC_OscConfig+0x470>)
 800164e:	f023 0304 	bic.w	r3, r3, #4
 8001652:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	689b      	ldr	r3, [r3, #8]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d015      	beq.n	8001688 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800165c:	f7ff fb72 	bl	8000d44 <HAL_GetTick>
 8001660:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001662:	e00a      	b.n	800167a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001664:	f7ff fb6e 	bl	8000d44 <HAL_GetTick>
 8001668:	4602      	mov	r2, r0
 800166a:	693b      	ldr	r3, [r7, #16]
 800166c:	1ad3      	subs	r3, r2, r3
 800166e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001672:	4293      	cmp	r3, r2
 8001674:	d901      	bls.n	800167a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001676:	2303      	movs	r3, #3
 8001678:	e0cb      	b.n	8001812 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800167a:	4b49      	ldr	r3, [pc, #292]	; (80017a0 <HAL_RCC_OscConfig+0x470>)
 800167c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800167e:	f003 0302 	and.w	r3, r3, #2
 8001682:	2b00      	cmp	r3, #0
 8001684:	d0ee      	beq.n	8001664 <HAL_RCC_OscConfig+0x334>
 8001686:	e014      	b.n	80016b2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001688:	f7ff fb5c 	bl	8000d44 <HAL_GetTick>
 800168c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800168e:	e00a      	b.n	80016a6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001690:	f7ff fb58 	bl	8000d44 <HAL_GetTick>
 8001694:	4602      	mov	r2, r0
 8001696:	693b      	ldr	r3, [r7, #16]
 8001698:	1ad3      	subs	r3, r2, r3
 800169a:	f241 3288 	movw	r2, #5000	; 0x1388
 800169e:	4293      	cmp	r3, r2
 80016a0:	d901      	bls.n	80016a6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80016a2:	2303      	movs	r3, #3
 80016a4:	e0b5      	b.n	8001812 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016a6:	4b3e      	ldr	r3, [pc, #248]	; (80017a0 <HAL_RCC_OscConfig+0x470>)
 80016a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016aa:	f003 0302 	and.w	r3, r3, #2
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d1ee      	bne.n	8001690 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80016b2:	7dfb      	ldrb	r3, [r7, #23]
 80016b4:	2b01      	cmp	r3, #1
 80016b6:	d105      	bne.n	80016c4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016b8:	4b39      	ldr	r3, [pc, #228]	; (80017a0 <HAL_RCC_OscConfig+0x470>)
 80016ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016bc:	4a38      	ldr	r2, [pc, #224]	; (80017a0 <HAL_RCC_OscConfig+0x470>)
 80016be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80016c2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	699b      	ldr	r3, [r3, #24]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	f000 80a1 	beq.w	8001810 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80016ce:	4b34      	ldr	r3, [pc, #208]	; (80017a0 <HAL_RCC_OscConfig+0x470>)
 80016d0:	689b      	ldr	r3, [r3, #8]
 80016d2:	f003 030c 	and.w	r3, r3, #12
 80016d6:	2b08      	cmp	r3, #8
 80016d8:	d05c      	beq.n	8001794 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	699b      	ldr	r3, [r3, #24]
 80016de:	2b02      	cmp	r3, #2
 80016e0:	d141      	bne.n	8001766 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016e2:	4b31      	ldr	r3, [pc, #196]	; (80017a8 <HAL_RCC_OscConfig+0x478>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016e8:	f7ff fb2c 	bl	8000d44 <HAL_GetTick>
 80016ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016ee:	e008      	b.n	8001702 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016f0:	f7ff fb28 	bl	8000d44 <HAL_GetTick>
 80016f4:	4602      	mov	r2, r0
 80016f6:	693b      	ldr	r3, [r7, #16]
 80016f8:	1ad3      	subs	r3, r2, r3
 80016fa:	2b02      	cmp	r3, #2
 80016fc:	d901      	bls.n	8001702 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80016fe:	2303      	movs	r3, #3
 8001700:	e087      	b.n	8001812 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001702:	4b27      	ldr	r3, [pc, #156]	; (80017a0 <HAL_RCC_OscConfig+0x470>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800170a:	2b00      	cmp	r3, #0
 800170c:	d1f0      	bne.n	80016f0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	69da      	ldr	r2, [r3, #28]
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6a1b      	ldr	r3, [r3, #32]
 8001716:	431a      	orrs	r2, r3
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800171c:	019b      	lsls	r3, r3, #6
 800171e:	431a      	orrs	r2, r3
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001724:	085b      	lsrs	r3, r3, #1
 8001726:	3b01      	subs	r3, #1
 8001728:	041b      	lsls	r3, r3, #16
 800172a:	431a      	orrs	r2, r3
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001730:	061b      	lsls	r3, r3, #24
 8001732:	491b      	ldr	r1, [pc, #108]	; (80017a0 <HAL_RCC_OscConfig+0x470>)
 8001734:	4313      	orrs	r3, r2
 8001736:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001738:	4b1b      	ldr	r3, [pc, #108]	; (80017a8 <HAL_RCC_OscConfig+0x478>)
 800173a:	2201      	movs	r2, #1
 800173c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800173e:	f7ff fb01 	bl	8000d44 <HAL_GetTick>
 8001742:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001744:	e008      	b.n	8001758 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001746:	f7ff fafd 	bl	8000d44 <HAL_GetTick>
 800174a:	4602      	mov	r2, r0
 800174c:	693b      	ldr	r3, [r7, #16]
 800174e:	1ad3      	subs	r3, r2, r3
 8001750:	2b02      	cmp	r3, #2
 8001752:	d901      	bls.n	8001758 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001754:	2303      	movs	r3, #3
 8001756:	e05c      	b.n	8001812 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001758:	4b11      	ldr	r3, [pc, #68]	; (80017a0 <HAL_RCC_OscConfig+0x470>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001760:	2b00      	cmp	r3, #0
 8001762:	d0f0      	beq.n	8001746 <HAL_RCC_OscConfig+0x416>
 8001764:	e054      	b.n	8001810 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001766:	4b10      	ldr	r3, [pc, #64]	; (80017a8 <HAL_RCC_OscConfig+0x478>)
 8001768:	2200      	movs	r2, #0
 800176a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800176c:	f7ff faea 	bl	8000d44 <HAL_GetTick>
 8001770:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001772:	e008      	b.n	8001786 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001774:	f7ff fae6 	bl	8000d44 <HAL_GetTick>
 8001778:	4602      	mov	r2, r0
 800177a:	693b      	ldr	r3, [r7, #16]
 800177c:	1ad3      	subs	r3, r2, r3
 800177e:	2b02      	cmp	r3, #2
 8001780:	d901      	bls.n	8001786 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001782:	2303      	movs	r3, #3
 8001784:	e045      	b.n	8001812 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001786:	4b06      	ldr	r3, [pc, #24]	; (80017a0 <HAL_RCC_OscConfig+0x470>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800178e:	2b00      	cmp	r3, #0
 8001790:	d1f0      	bne.n	8001774 <HAL_RCC_OscConfig+0x444>
 8001792:	e03d      	b.n	8001810 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	699b      	ldr	r3, [r3, #24]
 8001798:	2b01      	cmp	r3, #1
 800179a:	d107      	bne.n	80017ac <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800179c:	2301      	movs	r3, #1
 800179e:	e038      	b.n	8001812 <HAL_RCC_OscConfig+0x4e2>
 80017a0:	40023800 	.word	0x40023800
 80017a4:	40007000 	.word	0x40007000
 80017a8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80017ac:	4b1b      	ldr	r3, [pc, #108]	; (800181c <HAL_RCC_OscConfig+0x4ec>)
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	699b      	ldr	r3, [r3, #24]
 80017b6:	2b01      	cmp	r3, #1
 80017b8:	d028      	beq.n	800180c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80017c4:	429a      	cmp	r2, r3
 80017c6:	d121      	bne.n	800180c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017d2:	429a      	cmp	r2, r3
 80017d4:	d11a      	bne.n	800180c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80017d6:	68fa      	ldr	r2, [r7, #12]
 80017d8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80017dc:	4013      	ands	r3, r2
 80017de:	687a      	ldr	r2, [r7, #4]
 80017e0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80017e2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80017e4:	4293      	cmp	r3, r2
 80017e6:	d111      	bne.n	800180c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017f2:	085b      	lsrs	r3, r3, #1
 80017f4:	3b01      	subs	r3, #1
 80017f6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80017f8:	429a      	cmp	r2, r3
 80017fa:	d107      	bne.n	800180c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001806:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001808:	429a      	cmp	r2, r3
 800180a:	d001      	beq.n	8001810 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800180c:	2301      	movs	r3, #1
 800180e:	e000      	b.n	8001812 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001810:	2300      	movs	r3, #0
}
 8001812:	4618      	mov	r0, r3
 8001814:	3718      	adds	r7, #24
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	40023800 	.word	0x40023800

08001820 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b084      	sub	sp, #16
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
 8001828:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d101      	bne.n	8001834 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001830:	2301      	movs	r3, #1
 8001832:	e0cc      	b.n	80019ce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001834:	4b68      	ldr	r3, [pc, #416]	; (80019d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f003 030f 	and.w	r3, r3, #15
 800183c:	683a      	ldr	r2, [r7, #0]
 800183e:	429a      	cmp	r2, r3
 8001840:	d90c      	bls.n	800185c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001842:	4b65      	ldr	r3, [pc, #404]	; (80019d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001844:	683a      	ldr	r2, [r7, #0]
 8001846:	b2d2      	uxtb	r2, r2
 8001848:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800184a:	4b63      	ldr	r3, [pc, #396]	; (80019d8 <HAL_RCC_ClockConfig+0x1b8>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f003 030f 	and.w	r3, r3, #15
 8001852:	683a      	ldr	r2, [r7, #0]
 8001854:	429a      	cmp	r2, r3
 8001856:	d001      	beq.n	800185c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001858:	2301      	movs	r3, #1
 800185a:	e0b8      	b.n	80019ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f003 0302 	and.w	r3, r3, #2
 8001864:	2b00      	cmp	r3, #0
 8001866:	d020      	beq.n	80018aa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f003 0304 	and.w	r3, r3, #4
 8001870:	2b00      	cmp	r3, #0
 8001872:	d005      	beq.n	8001880 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001874:	4b59      	ldr	r3, [pc, #356]	; (80019dc <HAL_RCC_ClockConfig+0x1bc>)
 8001876:	689b      	ldr	r3, [r3, #8]
 8001878:	4a58      	ldr	r2, [pc, #352]	; (80019dc <HAL_RCC_ClockConfig+0x1bc>)
 800187a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800187e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f003 0308 	and.w	r3, r3, #8
 8001888:	2b00      	cmp	r3, #0
 800188a:	d005      	beq.n	8001898 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800188c:	4b53      	ldr	r3, [pc, #332]	; (80019dc <HAL_RCC_ClockConfig+0x1bc>)
 800188e:	689b      	ldr	r3, [r3, #8]
 8001890:	4a52      	ldr	r2, [pc, #328]	; (80019dc <HAL_RCC_ClockConfig+0x1bc>)
 8001892:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001896:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001898:	4b50      	ldr	r3, [pc, #320]	; (80019dc <HAL_RCC_ClockConfig+0x1bc>)
 800189a:	689b      	ldr	r3, [r3, #8]
 800189c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	689b      	ldr	r3, [r3, #8]
 80018a4:	494d      	ldr	r1, [pc, #308]	; (80019dc <HAL_RCC_ClockConfig+0x1bc>)
 80018a6:	4313      	orrs	r3, r2
 80018a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f003 0301 	and.w	r3, r3, #1
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d044      	beq.n	8001940 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	2b01      	cmp	r3, #1
 80018bc:	d107      	bne.n	80018ce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018be:	4b47      	ldr	r3, [pc, #284]	; (80019dc <HAL_RCC_ClockConfig+0x1bc>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d119      	bne.n	80018fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018ca:	2301      	movs	r3, #1
 80018cc:	e07f      	b.n	80019ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	2b02      	cmp	r3, #2
 80018d4:	d003      	beq.n	80018de <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80018da:	2b03      	cmp	r3, #3
 80018dc:	d107      	bne.n	80018ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018de:	4b3f      	ldr	r3, [pc, #252]	; (80019dc <HAL_RCC_ClockConfig+0x1bc>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d109      	bne.n	80018fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018ea:	2301      	movs	r3, #1
 80018ec:	e06f      	b.n	80019ce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018ee:	4b3b      	ldr	r3, [pc, #236]	; (80019dc <HAL_RCC_ClockConfig+0x1bc>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f003 0302 	and.w	r3, r3, #2
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d101      	bne.n	80018fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018fa:	2301      	movs	r3, #1
 80018fc:	e067      	b.n	80019ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80018fe:	4b37      	ldr	r3, [pc, #220]	; (80019dc <HAL_RCC_ClockConfig+0x1bc>)
 8001900:	689b      	ldr	r3, [r3, #8]
 8001902:	f023 0203 	bic.w	r2, r3, #3
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	4934      	ldr	r1, [pc, #208]	; (80019dc <HAL_RCC_ClockConfig+0x1bc>)
 800190c:	4313      	orrs	r3, r2
 800190e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001910:	f7ff fa18 	bl	8000d44 <HAL_GetTick>
 8001914:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001916:	e00a      	b.n	800192e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001918:	f7ff fa14 	bl	8000d44 <HAL_GetTick>
 800191c:	4602      	mov	r2, r0
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	1ad3      	subs	r3, r2, r3
 8001922:	f241 3288 	movw	r2, #5000	; 0x1388
 8001926:	4293      	cmp	r3, r2
 8001928:	d901      	bls.n	800192e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800192a:	2303      	movs	r3, #3
 800192c:	e04f      	b.n	80019ce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800192e:	4b2b      	ldr	r3, [pc, #172]	; (80019dc <HAL_RCC_ClockConfig+0x1bc>)
 8001930:	689b      	ldr	r3, [r3, #8]
 8001932:	f003 020c 	and.w	r2, r3, #12
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	009b      	lsls	r3, r3, #2
 800193c:	429a      	cmp	r2, r3
 800193e:	d1eb      	bne.n	8001918 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001940:	4b25      	ldr	r3, [pc, #148]	; (80019d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f003 030f 	and.w	r3, r3, #15
 8001948:	683a      	ldr	r2, [r7, #0]
 800194a:	429a      	cmp	r2, r3
 800194c:	d20c      	bcs.n	8001968 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800194e:	4b22      	ldr	r3, [pc, #136]	; (80019d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001950:	683a      	ldr	r2, [r7, #0]
 8001952:	b2d2      	uxtb	r2, r2
 8001954:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001956:	4b20      	ldr	r3, [pc, #128]	; (80019d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f003 030f 	and.w	r3, r3, #15
 800195e:	683a      	ldr	r2, [r7, #0]
 8001960:	429a      	cmp	r2, r3
 8001962:	d001      	beq.n	8001968 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001964:	2301      	movs	r3, #1
 8001966:	e032      	b.n	80019ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f003 0304 	and.w	r3, r3, #4
 8001970:	2b00      	cmp	r3, #0
 8001972:	d008      	beq.n	8001986 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001974:	4b19      	ldr	r3, [pc, #100]	; (80019dc <HAL_RCC_ClockConfig+0x1bc>)
 8001976:	689b      	ldr	r3, [r3, #8]
 8001978:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	68db      	ldr	r3, [r3, #12]
 8001980:	4916      	ldr	r1, [pc, #88]	; (80019dc <HAL_RCC_ClockConfig+0x1bc>)
 8001982:	4313      	orrs	r3, r2
 8001984:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f003 0308 	and.w	r3, r3, #8
 800198e:	2b00      	cmp	r3, #0
 8001990:	d009      	beq.n	80019a6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001992:	4b12      	ldr	r3, [pc, #72]	; (80019dc <HAL_RCC_ClockConfig+0x1bc>)
 8001994:	689b      	ldr	r3, [r3, #8]
 8001996:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	691b      	ldr	r3, [r3, #16]
 800199e:	00db      	lsls	r3, r3, #3
 80019a0:	490e      	ldr	r1, [pc, #56]	; (80019dc <HAL_RCC_ClockConfig+0x1bc>)
 80019a2:	4313      	orrs	r3, r2
 80019a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80019a6:	f000 f821 	bl	80019ec <HAL_RCC_GetSysClockFreq>
 80019aa:	4602      	mov	r2, r0
 80019ac:	4b0b      	ldr	r3, [pc, #44]	; (80019dc <HAL_RCC_ClockConfig+0x1bc>)
 80019ae:	689b      	ldr	r3, [r3, #8]
 80019b0:	091b      	lsrs	r3, r3, #4
 80019b2:	f003 030f 	and.w	r3, r3, #15
 80019b6:	490a      	ldr	r1, [pc, #40]	; (80019e0 <HAL_RCC_ClockConfig+0x1c0>)
 80019b8:	5ccb      	ldrb	r3, [r1, r3]
 80019ba:	fa22 f303 	lsr.w	r3, r2, r3
 80019be:	4a09      	ldr	r2, [pc, #36]	; (80019e4 <HAL_RCC_ClockConfig+0x1c4>)
 80019c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80019c2:	4b09      	ldr	r3, [pc, #36]	; (80019e8 <HAL_RCC_ClockConfig+0x1c8>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4618      	mov	r0, r3
 80019c8:	f7ff f978 	bl	8000cbc <HAL_InitTick>

  return HAL_OK;
 80019cc:	2300      	movs	r3, #0
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	3710      	adds	r7, #16
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	40023c00 	.word	0x40023c00
 80019dc:	40023800 	.word	0x40023800
 80019e0:	08003184 	.word	0x08003184
 80019e4:	20000000 	.word	0x20000000
 80019e8:	20000004 	.word	0x20000004

080019ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80019f0:	b094      	sub	sp, #80	; 0x50
 80019f2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80019f4:	2300      	movs	r3, #0
 80019f6:	647b      	str	r3, [r7, #68]	; 0x44
 80019f8:	2300      	movs	r3, #0
 80019fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80019fc:	2300      	movs	r3, #0
 80019fe:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001a00:	2300      	movs	r3, #0
 8001a02:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a04:	4b79      	ldr	r3, [pc, #484]	; (8001bec <HAL_RCC_GetSysClockFreq+0x200>)
 8001a06:	689b      	ldr	r3, [r3, #8]
 8001a08:	f003 030c 	and.w	r3, r3, #12
 8001a0c:	2b08      	cmp	r3, #8
 8001a0e:	d00d      	beq.n	8001a2c <HAL_RCC_GetSysClockFreq+0x40>
 8001a10:	2b08      	cmp	r3, #8
 8001a12:	f200 80e1 	bhi.w	8001bd8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d002      	beq.n	8001a20 <HAL_RCC_GetSysClockFreq+0x34>
 8001a1a:	2b04      	cmp	r3, #4
 8001a1c:	d003      	beq.n	8001a26 <HAL_RCC_GetSysClockFreq+0x3a>
 8001a1e:	e0db      	b.n	8001bd8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001a20:	4b73      	ldr	r3, [pc, #460]	; (8001bf0 <HAL_RCC_GetSysClockFreq+0x204>)
 8001a22:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001a24:	e0db      	b.n	8001bde <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001a26:	4b73      	ldr	r3, [pc, #460]	; (8001bf4 <HAL_RCC_GetSysClockFreq+0x208>)
 8001a28:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001a2a:	e0d8      	b.n	8001bde <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a2c:	4b6f      	ldr	r3, [pc, #444]	; (8001bec <HAL_RCC_GetSysClockFreq+0x200>)
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001a34:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a36:	4b6d      	ldr	r3, [pc, #436]	; (8001bec <HAL_RCC_GetSysClockFreq+0x200>)
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d063      	beq.n	8001b0a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a42:	4b6a      	ldr	r3, [pc, #424]	; (8001bec <HAL_RCC_GetSysClockFreq+0x200>)
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	099b      	lsrs	r3, r3, #6
 8001a48:	2200      	movs	r2, #0
 8001a4a:	63bb      	str	r3, [r7, #56]	; 0x38
 8001a4c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001a4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a54:	633b      	str	r3, [r7, #48]	; 0x30
 8001a56:	2300      	movs	r3, #0
 8001a58:	637b      	str	r3, [r7, #52]	; 0x34
 8001a5a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001a5e:	4622      	mov	r2, r4
 8001a60:	462b      	mov	r3, r5
 8001a62:	f04f 0000 	mov.w	r0, #0
 8001a66:	f04f 0100 	mov.w	r1, #0
 8001a6a:	0159      	lsls	r1, r3, #5
 8001a6c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a70:	0150      	lsls	r0, r2, #5
 8001a72:	4602      	mov	r2, r0
 8001a74:	460b      	mov	r3, r1
 8001a76:	4621      	mov	r1, r4
 8001a78:	1a51      	subs	r1, r2, r1
 8001a7a:	6139      	str	r1, [r7, #16]
 8001a7c:	4629      	mov	r1, r5
 8001a7e:	eb63 0301 	sbc.w	r3, r3, r1
 8001a82:	617b      	str	r3, [r7, #20]
 8001a84:	f04f 0200 	mov.w	r2, #0
 8001a88:	f04f 0300 	mov.w	r3, #0
 8001a8c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001a90:	4659      	mov	r1, fp
 8001a92:	018b      	lsls	r3, r1, #6
 8001a94:	4651      	mov	r1, sl
 8001a96:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001a9a:	4651      	mov	r1, sl
 8001a9c:	018a      	lsls	r2, r1, #6
 8001a9e:	4651      	mov	r1, sl
 8001aa0:	ebb2 0801 	subs.w	r8, r2, r1
 8001aa4:	4659      	mov	r1, fp
 8001aa6:	eb63 0901 	sbc.w	r9, r3, r1
 8001aaa:	f04f 0200 	mov.w	r2, #0
 8001aae:	f04f 0300 	mov.w	r3, #0
 8001ab2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001ab6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001aba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001abe:	4690      	mov	r8, r2
 8001ac0:	4699      	mov	r9, r3
 8001ac2:	4623      	mov	r3, r4
 8001ac4:	eb18 0303 	adds.w	r3, r8, r3
 8001ac8:	60bb      	str	r3, [r7, #8]
 8001aca:	462b      	mov	r3, r5
 8001acc:	eb49 0303 	adc.w	r3, r9, r3
 8001ad0:	60fb      	str	r3, [r7, #12]
 8001ad2:	f04f 0200 	mov.w	r2, #0
 8001ad6:	f04f 0300 	mov.w	r3, #0
 8001ada:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001ade:	4629      	mov	r1, r5
 8001ae0:	024b      	lsls	r3, r1, #9
 8001ae2:	4621      	mov	r1, r4
 8001ae4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001ae8:	4621      	mov	r1, r4
 8001aea:	024a      	lsls	r2, r1, #9
 8001aec:	4610      	mov	r0, r2
 8001aee:	4619      	mov	r1, r3
 8001af0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001af2:	2200      	movs	r2, #0
 8001af4:	62bb      	str	r3, [r7, #40]	; 0x28
 8001af6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001af8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001afc:	f7fe fbc8 	bl	8000290 <__aeabi_uldivmod>
 8001b00:	4602      	mov	r2, r0
 8001b02:	460b      	mov	r3, r1
 8001b04:	4613      	mov	r3, r2
 8001b06:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001b08:	e058      	b.n	8001bbc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b0a:	4b38      	ldr	r3, [pc, #224]	; (8001bec <HAL_RCC_GetSysClockFreq+0x200>)
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	099b      	lsrs	r3, r3, #6
 8001b10:	2200      	movs	r2, #0
 8001b12:	4618      	mov	r0, r3
 8001b14:	4611      	mov	r1, r2
 8001b16:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001b1a:	623b      	str	r3, [r7, #32]
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	627b      	str	r3, [r7, #36]	; 0x24
 8001b20:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001b24:	4642      	mov	r2, r8
 8001b26:	464b      	mov	r3, r9
 8001b28:	f04f 0000 	mov.w	r0, #0
 8001b2c:	f04f 0100 	mov.w	r1, #0
 8001b30:	0159      	lsls	r1, r3, #5
 8001b32:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b36:	0150      	lsls	r0, r2, #5
 8001b38:	4602      	mov	r2, r0
 8001b3a:	460b      	mov	r3, r1
 8001b3c:	4641      	mov	r1, r8
 8001b3e:	ebb2 0a01 	subs.w	sl, r2, r1
 8001b42:	4649      	mov	r1, r9
 8001b44:	eb63 0b01 	sbc.w	fp, r3, r1
 8001b48:	f04f 0200 	mov.w	r2, #0
 8001b4c:	f04f 0300 	mov.w	r3, #0
 8001b50:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001b54:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001b58:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001b5c:	ebb2 040a 	subs.w	r4, r2, sl
 8001b60:	eb63 050b 	sbc.w	r5, r3, fp
 8001b64:	f04f 0200 	mov.w	r2, #0
 8001b68:	f04f 0300 	mov.w	r3, #0
 8001b6c:	00eb      	lsls	r3, r5, #3
 8001b6e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001b72:	00e2      	lsls	r2, r4, #3
 8001b74:	4614      	mov	r4, r2
 8001b76:	461d      	mov	r5, r3
 8001b78:	4643      	mov	r3, r8
 8001b7a:	18e3      	adds	r3, r4, r3
 8001b7c:	603b      	str	r3, [r7, #0]
 8001b7e:	464b      	mov	r3, r9
 8001b80:	eb45 0303 	adc.w	r3, r5, r3
 8001b84:	607b      	str	r3, [r7, #4]
 8001b86:	f04f 0200 	mov.w	r2, #0
 8001b8a:	f04f 0300 	mov.w	r3, #0
 8001b8e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001b92:	4629      	mov	r1, r5
 8001b94:	028b      	lsls	r3, r1, #10
 8001b96:	4621      	mov	r1, r4
 8001b98:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001b9c:	4621      	mov	r1, r4
 8001b9e:	028a      	lsls	r2, r1, #10
 8001ba0:	4610      	mov	r0, r2
 8001ba2:	4619      	mov	r1, r3
 8001ba4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	61bb      	str	r3, [r7, #24]
 8001baa:	61fa      	str	r2, [r7, #28]
 8001bac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001bb0:	f7fe fb6e 	bl	8000290 <__aeabi_uldivmod>
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	460b      	mov	r3, r1
 8001bb8:	4613      	mov	r3, r2
 8001bba:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001bbc:	4b0b      	ldr	r3, [pc, #44]	; (8001bec <HAL_RCC_GetSysClockFreq+0x200>)
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	0c1b      	lsrs	r3, r3, #16
 8001bc2:	f003 0303 	and.w	r3, r3, #3
 8001bc6:	3301      	adds	r3, #1
 8001bc8:	005b      	lsls	r3, r3, #1
 8001bca:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001bcc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001bce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001bd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bd4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001bd6:	e002      	b.n	8001bde <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001bd8:	4b05      	ldr	r3, [pc, #20]	; (8001bf0 <HAL_RCC_GetSysClockFreq+0x204>)
 8001bda:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001bdc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001bde:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	3750      	adds	r7, #80	; 0x50
 8001be4:	46bd      	mov	sp, r7
 8001be6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001bea:	bf00      	nop
 8001bec:	40023800 	.word	0x40023800
 8001bf0:	00f42400 	.word	0x00f42400
 8001bf4:	007a1200 	.word	0x007a1200

08001bf8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001bfc:	4b03      	ldr	r3, [pc, #12]	; (8001c0c <HAL_RCC_GetHCLKFreq+0x14>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	46bd      	mov	sp, r7
 8001c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c08:	4770      	bx	lr
 8001c0a:	bf00      	nop
 8001c0c:	20000000 	.word	0x20000000

08001c10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001c14:	f7ff fff0 	bl	8001bf8 <HAL_RCC_GetHCLKFreq>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	4b05      	ldr	r3, [pc, #20]	; (8001c30 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c1c:	689b      	ldr	r3, [r3, #8]
 8001c1e:	0a9b      	lsrs	r3, r3, #10
 8001c20:	f003 0307 	and.w	r3, r3, #7
 8001c24:	4903      	ldr	r1, [pc, #12]	; (8001c34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c26:	5ccb      	ldrb	r3, [r1, r3]
 8001c28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	bd80      	pop	{r7, pc}
 8001c30:	40023800 	.word	0x40023800
 8001c34:	08003194 	.word	0x08003194

08001c38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001c3c:	f7ff ffdc 	bl	8001bf8 <HAL_RCC_GetHCLKFreq>
 8001c40:	4602      	mov	r2, r0
 8001c42:	4b05      	ldr	r3, [pc, #20]	; (8001c58 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001c44:	689b      	ldr	r3, [r3, #8]
 8001c46:	0b5b      	lsrs	r3, r3, #13
 8001c48:	f003 0307 	and.w	r3, r3, #7
 8001c4c:	4903      	ldr	r1, [pc, #12]	; (8001c5c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c4e:	5ccb      	ldrb	r3, [r1, r3]
 8001c50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	40023800 	.word	0x40023800
 8001c5c:	08003194 	.word	0x08003194

08001c60 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b082      	sub	sp, #8
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d101      	bne.n	8001c72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e03f      	b.n	8001cf2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c78:	b2db      	uxtb	r3, r3
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d106      	bne.n	8001c8c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2200      	movs	r2, #0
 8001c82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001c86:	6878      	ldr	r0, [r7, #4]
 8001c88:	f7fe fea4 	bl	80009d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2224      	movs	r2, #36	; 0x24
 8001c90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	68da      	ldr	r2, [r3, #12]
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001ca2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001ca4:	6878      	ldr	r0, [r7, #4]
 8001ca6:	f000 f829 	bl	8001cfc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	691a      	ldr	r2, [r3, #16]
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001cb8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	695a      	ldr	r2, [r3, #20]
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001cc8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	68da      	ldr	r2, [r3, #12]
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001cd8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2200      	movs	r2, #0
 8001cde:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2220      	movs	r2, #32
 8001ce4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2220      	movs	r2, #32
 8001cec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001cf0:	2300      	movs	r3, #0
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	3708      	adds	r7, #8
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}
	...

08001cfc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001cfc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001d00:	b0c0      	sub	sp, #256	; 0x100
 8001d02:	af00      	add	r7, sp, #0
 8001d04:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001d08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	691b      	ldr	r3, [r3, #16]
 8001d10:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8001d14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001d18:	68d9      	ldr	r1, [r3, #12]
 8001d1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001d1e:	681a      	ldr	r2, [r3, #0]
 8001d20:	ea40 0301 	orr.w	r3, r0, r1
 8001d24:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001d26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001d2a:	689a      	ldr	r2, [r3, #8]
 8001d2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001d30:	691b      	ldr	r3, [r3, #16]
 8001d32:	431a      	orrs	r2, r3
 8001d34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001d38:	695b      	ldr	r3, [r3, #20]
 8001d3a:	431a      	orrs	r2, r3
 8001d3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001d40:	69db      	ldr	r3, [r3, #28]
 8001d42:	4313      	orrs	r3, r2
 8001d44:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8001d48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	68db      	ldr	r3, [r3, #12]
 8001d50:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8001d54:	f021 010c 	bic.w	r1, r1, #12
 8001d58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001d5c:	681a      	ldr	r2, [r3, #0]
 8001d5e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001d62:	430b      	orrs	r3, r1
 8001d64:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001d66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	695b      	ldr	r3, [r3, #20]
 8001d6e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8001d72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001d76:	6999      	ldr	r1, [r3, #24]
 8001d78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	ea40 0301 	orr.w	r3, r0, r1
 8001d82:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001d84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001d88:	681a      	ldr	r2, [r3, #0]
 8001d8a:	4b8f      	ldr	r3, [pc, #572]	; (8001fc8 <UART_SetConfig+0x2cc>)
 8001d8c:	429a      	cmp	r2, r3
 8001d8e:	d005      	beq.n	8001d9c <UART_SetConfig+0xa0>
 8001d90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001d94:	681a      	ldr	r2, [r3, #0]
 8001d96:	4b8d      	ldr	r3, [pc, #564]	; (8001fcc <UART_SetConfig+0x2d0>)
 8001d98:	429a      	cmp	r2, r3
 8001d9a:	d104      	bne.n	8001da6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001d9c:	f7ff ff4c 	bl	8001c38 <HAL_RCC_GetPCLK2Freq>
 8001da0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8001da4:	e003      	b.n	8001dae <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001da6:	f7ff ff33 	bl	8001c10 <HAL_RCC_GetPCLK1Freq>
 8001daa:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001dae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001db2:	69db      	ldr	r3, [r3, #28]
 8001db4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001db8:	f040 810c 	bne.w	8001fd4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001dbc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001dc6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8001dca:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8001dce:	4622      	mov	r2, r4
 8001dd0:	462b      	mov	r3, r5
 8001dd2:	1891      	adds	r1, r2, r2
 8001dd4:	65b9      	str	r1, [r7, #88]	; 0x58
 8001dd6:	415b      	adcs	r3, r3
 8001dd8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001dda:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001dde:	4621      	mov	r1, r4
 8001de0:	eb12 0801 	adds.w	r8, r2, r1
 8001de4:	4629      	mov	r1, r5
 8001de6:	eb43 0901 	adc.w	r9, r3, r1
 8001dea:	f04f 0200 	mov.w	r2, #0
 8001dee:	f04f 0300 	mov.w	r3, #0
 8001df2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001df6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001dfa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001dfe:	4690      	mov	r8, r2
 8001e00:	4699      	mov	r9, r3
 8001e02:	4623      	mov	r3, r4
 8001e04:	eb18 0303 	adds.w	r3, r8, r3
 8001e08:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8001e0c:	462b      	mov	r3, r5
 8001e0e:	eb49 0303 	adc.w	r3, r9, r3
 8001e12:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001e16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8001e22:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8001e26:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8001e2a:	460b      	mov	r3, r1
 8001e2c:	18db      	adds	r3, r3, r3
 8001e2e:	653b      	str	r3, [r7, #80]	; 0x50
 8001e30:	4613      	mov	r3, r2
 8001e32:	eb42 0303 	adc.w	r3, r2, r3
 8001e36:	657b      	str	r3, [r7, #84]	; 0x54
 8001e38:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001e3c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8001e40:	f7fe fa26 	bl	8000290 <__aeabi_uldivmod>
 8001e44:	4602      	mov	r2, r0
 8001e46:	460b      	mov	r3, r1
 8001e48:	4b61      	ldr	r3, [pc, #388]	; (8001fd0 <UART_SetConfig+0x2d4>)
 8001e4a:	fba3 2302 	umull	r2, r3, r3, r2
 8001e4e:	095b      	lsrs	r3, r3, #5
 8001e50:	011c      	lsls	r4, r3, #4
 8001e52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001e56:	2200      	movs	r2, #0
 8001e58:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001e5c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8001e60:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8001e64:	4642      	mov	r2, r8
 8001e66:	464b      	mov	r3, r9
 8001e68:	1891      	adds	r1, r2, r2
 8001e6a:	64b9      	str	r1, [r7, #72]	; 0x48
 8001e6c:	415b      	adcs	r3, r3
 8001e6e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001e70:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001e74:	4641      	mov	r1, r8
 8001e76:	eb12 0a01 	adds.w	sl, r2, r1
 8001e7a:	4649      	mov	r1, r9
 8001e7c:	eb43 0b01 	adc.w	fp, r3, r1
 8001e80:	f04f 0200 	mov.w	r2, #0
 8001e84:	f04f 0300 	mov.w	r3, #0
 8001e88:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001e8c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001e90:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001e94:	4692      	mov	sl, r2
 8001e96:	469b      	mov	fp, r3
 8001e98:	4643      	mov	r3, r8
 8001e9a:	eb1a 0303 	adds.w	r3, sl, r3
 8001e9e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001ea2:	464b      	mov	r3, r9
 8001ea4:	eb4b 0303 	adc.w	r3, fp, r3
 8001ea8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001eac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001eb8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8001ebc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8001ec0:	460b      	mov	r3, r1
 8001ec2:	18db      	adds	r3, r3, r3
 8001ec4:	643b      	str	r3, [r7, #64]	; 0x40
 8001ec6:	4613      	mov	r3, r2
 8001ec8:	eb42 0303 	adc.w	r3, r2, r3
 8001ecc:	647b      	str	r3, [r7, #68]	; 0x44
 8001ece:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001ed2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8001ed6:	f7fe f9db 	bl	8000290 <__aeabi_uldivmod>
 8001eda:	4602      	mov	r2, r0
 8001edc:	460b      	mov	r3, r1
 8001ede:	4611      	mov	r1, r2
 8001ee0:	4b3b      	ldr	r3, [pc, #236]	; (8001fd0 <UART_SetConfig+0x2d4>)
 8001ee2:	fba3 2301 	umull	r2, r3, r3, r1
 8001ee6:	095b      	lsrs	r3, r3, #5
 8001ee8:	2264      	movs	r2, #100	; 0x64
 8001eea:	fb02 f303 	mul.w	r3, r2, r3
 8001eee:	1acb      	subs	r3, r1, r3
 8001ef0:	00db      	lsls	r3, r3, #3
 8001ef2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8001ef6:	4b36      	ldr	r3, [pc, #216]	; (8001fd0 <UART_SetConfig+0x2d4>)
 8001ef8:	fba3 2302 	umull	r2, r3, r3, r2
 8001efc:	095b      	lsrs	r3, r3, #5
 8001efe:	005b      	lsls	r3, r3, #1
 8001f00:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001f04:	441c      	add	r4, r3
 8001f06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001f10:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8001f14:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8001f18:	4642      	mov	r2, r8
 8001f1a:	464b      	mov	r3, r9
 8001f1c:	1891      	adds	r1, r2, r2
 8001f1e:	63b9      	str	r1, [r7, #56]	; 0x38
 8001f20:	415b      	adcs	r3, r3
 8001f22:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001f24:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001f28:	4641      	mov	r1, r8
 8001f2a:	1851      	adds	r1, r2, r1
 8001f2c:	6339      	str	r1, [r7, #48]	; 0x30
 8001f2e:	4649      	mov	r1, r9
 8001f30:	414b      	adcs	r3, r1
 8001f32:	637b      	str	r3, [r7, #52]	; 0x34
 8001f34:	f04f 0200 	mov.w	r2, #0
 8001f38:	f04f 0300 	mov.w	r3, #0
 8001f3c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8001f40:	4659      	mov	r1, fp
 8001f42:	00cb      	lsls	r3, r1, #3
 8001f44:	4651      	mov	r1, sl
 8001f46:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001f4a:	4651      	mov	r1, sl
 8001f4c:	00ca      	lsls	r2, r1, #3
 8001f4e:	4610      	mov	r0, r2
 8001f50:	4619      	mov	r1, r3
 8001f52:	4603      	mov	r3, r0
 8001f54:	4642      	mov	r2, r8
 8001f56:	189b      	adds	r3, r3, r2
 8001f58:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001f5c:	464b      	mov	r3, r9
 8001f5e:	460a      	mov	r2, r1
 8001f60:	eb42 0303 	adc.w	r3, r2, r3
 8001f64:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001f68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	2200      	movs	r2, #0
 8001f70:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001f74:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8001f78:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8001f7c:	460b      	mov	r3, r1
 8001f7e:	18db      	adds	r3, r3, r3
 8001f80:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f82:	4613      	mov	r3, r2
 8001f84:	eb42 0303 	adc.w	r3, r2, r3
 8001f88:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f8a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001f8e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8001f92:	f7fe f97d 	bl	8000290 <__aeabi_uldivmod>
 8001f96:	4602      	mov	r2, r0
 8001f98:	460b      	mov	r3, r1
 8001f9a:	4b0d      	ldr	r3, [pc, #52]	; (8001fd0 <UART_SetConfig+0x2d4>)
 8001f9c:	fba3 1302 	umull	r1, r3, r3, r2
 8001fa0:	095b      	lsrs	r3, r3, #5
 8001fa2:	2164      	movs	r1, #100	; 0x64
 8001fa4:	fb01 f303 	mul.w	r3, r1, r3
 8001fa8:	1ad3      	subs	r3, r2, r3
 8001faa:	00db      	lsls	r3, r3, #3
 8001fac:	3332      	adds	r3, #50	; 0x32
 8001fae:	4a08      	ldr	r2, [pc, #32]	; (8001fd0 <UART_SetConfig+0x2d4>)
 8001fb0:	fba2 2303 	umull	r2, r3, r2, r3
 8001fb4:	095b      	lsrs	r3, r3, #5
 8001fb6:	f003 0207 	and.w	r2, r3, #7
 8001fba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4422      	add	r2, r4
 8001fc2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8001fc4:	e105      	b.n	80021d2 <UART_SetConfig+0x4d6>
 8001fc6:	bf00      	nop
 8001fc8:	40011000 	.word	0x40011000
 8001fcc:	40011400 	.word	0x40011400
 8001fd0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001fd4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001fd8:	2200      	movs	r2, #0
 8001fda:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001fde:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8001fe2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8001fe6:	4642      	mov	r2, r8
 8001fe8:	464b      	mov	r3, r9
 8001fea:	1891      	adds	r1, r2, r2
 8001fec:	6239      	str	r1, [r7, #32]
 8001fee:	415b      	adcs	r3, r3
 8001ff0:	627b      	str	r3, [r7, #36]	; 0x24
 8001ff2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001ff6:	4641      	mov	r1, r8
 8001ff8:	1854      	adds	r4, r2, r1
 8001ffa:	4649      	mov	r1, r9
 8001ffc:	eb43 0501 	adc.w	r5, r3, r1
 8002000:	f04f 0200 	mov.w	r2, #0
 8002004:	f04f 0300 	mov.w	r3, #0
 8002008:	00eb      	lsls	r3, r5, #3
 800200a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800200e:	00e2      	lsls	r2, r4, #3
 8002010:	4614      	mov	r4, r2
 8002012:	461d      	mov	r5, r3
 8002014:	4643      	mov	r3, r8
 8002016:	18e3      	adds	r3, r4, r3
 8002018:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800201c:	464b      	mov	r3, r9
 800201e:	eb45 0303 	adc.w	r3, r5, r3
 8002022:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002026:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	2200      	movs	r2, #0
 800202e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002032:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002036:	f04f 0200 	mov.w	r2, #0
 800203a:	f04f 0300 	mov.w	r3, #0
 800203e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002042:	4629      	mov	r1, r5
 8002044:	008b      	lsls	r3, r1, #2
 8002046:	4621      	mov	r1, r4
 8002048:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800204c:	4621      	mov	r1, r4
 800204e:	008a      	lsls	r2, r1, #2
 8002050:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002054:	f7fe f91c 	bl	8000290 <__aeabi_uldivmod>
 8002058:	4602      	mov	r2, r0
 800205a:	460b      	mov	r3, r1
 800205c:	4b60      	ldr	r3, [pc, #384]	; (80021e0 <UART_SetConfig+0x4e4>)
 800205e:	fba3 2302 	umull	r2, r3, r3, r2
 8002062:	095b      	lsrs	r3, r3, #5
 8002064:	011c      	lsls	r4, r3, #4
 8002066:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800206a:	2200      	movs	r2, #0
 800206c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002070:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002074:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002078:	4642      	mov	r2, r8
 800207a:	464b      	mov	r3, r9
 800207c:	1891      	adds	r1, r2, r2
 800207e:	61b9      	str	r1, [r7, #24]
 8002080:	415b      	adcs	r3, r3
 8002082:	61fb      	str	r3, [r7, #28]
 8002084:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002088:	4641      	mov	r1, r8
 800208a:	1851      	adds	r1, r2, r1
 800208c:	6139      	str	r1, [r7, #16]
 800208e:	4649      	mov	r1, r9
 8002090:	414b      	adcs	r3, r1
 8002092:	617b      	str	r3, [r7, #20]
 8002094:	f04f 0200 	mov.w	r2, #0
 8002098:	f04f 0300 	mov.w	r3, #0
 800209c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80020a0:	4659      	mov	r1, fp
 80020a2:	00cb      	lsls	r3, r1, #3
 80020a4:	4651      	mov	r1, sl
 80020a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80020aa:	4651      	mov	r1, sl
 80020ac:	00ca      	lsls	r2, r1, #3
 80020ae:	4610      	mov	r0, r2
 80020b0:	4619      	mov	r1, r3
 80020b2:	4603      	mov	r3, r0
 80020b4:	4642      	mov	r2, r8
 80020b6:	189b      	adds	r3, r3, r2
 80020b8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80020bc:	464b      	mov	r3, r9
 80020be:	460a      	mov	r2, r1
 80020c0:	eb42 0303 	adc.w	r3, r2, r3
 80020c4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80020c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	2200      	movs	r2, #0
 80020d0:	67bb      	str	r3, [r7, #120]	; 0x78
 80020d2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80020d4:	f04f 0200 	mov.w	r2, #0
 80020d8:	f04f 0300 	mov.w	r3, #0
 80020dc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80020e0:	4649      	mov	r1, r9
 80020e2:	008b      	lsls	r3, r1, #2
 80020e4:	4641      	mov	r1, r8
 80020e6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80020ea:	4641      	mov	r1, r8
 80020ec:	008a      	lsls	r2, r1, #2
 80020ee:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80020f2:	f7fe f8cd 	bl	8000290 <__aeabi_uldivmod>
 80020f6:	4602      	mov	r2, r0
 80020f8:	460b      	mov	r3, r1
 80020fa:	4b39      	ldr	r3, [pc, #228]	; (80021e0 <UART_SetConfig+0x4e4>)
 80020fc:	fba3 1302 	umull	r1, r3, r3, r2
 8002100:	095b      	lsrs	r3, r3, #5
 8002102:	2164      	movs	r1, #100	; 0x64
 8002104:	fb01 f303 	mul.w	r3, r1, r3
 8002108:	1ad3      	subs	r3, r2, r3
 800210a:	011b      	lsls	r3, r3, #4
 800210c:	3332      	adds	r3, #50	; 0x32
 800210e:	4a34      	ldr	r2, [pc, #208]	; (80021e0 <UART_SetConfig+0x4e4>)
 8002110:	fba2 2303 	umull	r2, r3, r2, r3
 8002114:	095b      	lsrs	r3, r3, #5
 8002116:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800211a:	441c      	add	r4, r3
 800211c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002120:	2200      	movs	r2, #0
 8002122:	673b      	str	r3, [r7, #112]	; 0x70
 8002124:	677a      	str	r2, [r7, #116]	; 0x74
 8002126:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800212a:	4642      	mov	r2, r8
 800212c:	464b      	mov	r3, r9
 800212e:	1891      	adds	r1, r2, r2
 8002130:	60b9      	str	r1, [r7, #8]
 8002132:	415b      	adcs	r3, r3
 8002134:	60fb      	str	r3, [r7, #12]
 8002136:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800213a:	4641      	mov	r1, r8
 800213c:	1851      	adds	r1, r2, r1
 800213e:	6039      	str	r1, [r7, #0]
 8002140:	4649      	mov	r1, r9
 8002142:	414b      	adcs	r3, r1
 8002144:	607b      	str	r3, [r7, #4]
 8002146:	f04f 0200 	mov.w	r2, #0
 800214a:	f04f 0300 	mov.w	r3, #0
 800214e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002152:	4659      	mov	r1, fp
 8002154:	00cb      	lsls	r3, r1, #3
 8002156:	4651      	mov	r1, sl
 8002158:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800215c:	4651      	mov	r1, sl
 800215e:	00ca      	lsls	r2, r1, #3
 8002160:	4610      	mov	r0, r2
 8002162:	4619      	mov	r1, r3
 8002164:	4603      	mov	r3, r0
 8002166:	4642      	mov	r2, r8
 8002168:	189b      	adds	r3, r3, r2
 800216a:	66bb      	str	r3, [r7, #104]	; 0x68
 800216c:	464b      	mov	r3, r9
 800216e:	460a      	mov	r2, r1
 8002170:	eb42 0303 	adc.w	r3, r2, r3
 8002174:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002176:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	2200      	movs	r2, #0
 800217e:	663b      	str	r3, [r7, #96]	; 0x60
 8002180:	667a      	str	r2, [r7, #100]	; 0x64
 8002182:	f04f 0200 	mov.w	r2, #0
 8002186:	f04f 0300 	mov.w	r3, #0
 800218a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800218e:	4649      	mov	r1, r9
 8002190:	008b      	lsls	r3, r1, #2
 8002192:	4641      	mov	r1, r8
 8002194:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002198:	4641      	mov	r1, r8
 800219a:	008a      	lsls	r2, r1, #2
 800219c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80021a0:	f7fe f876 	bl	8000290 <__aeabi_uldivmod>
 80021a4:	4602      	mov	r2, r0
 80021a6:	460b      	mov	r3, r1
 80021a8:	4b0d      	ldr	r3, [pc, #52]	; (80021e0 <UART_SetConfig+0x4e4>)
 80021aa:	fba3 1302 	umull	r1, r3, r3, r2
 80021ae:	095b      	lsrs	r3, r3, #5
 80021b0:	2164      	movs	r1, #100	; 0x64
 80021b2:	fb01 f303 	mul.w	r3, r1, r3
 80021b6:	1ad3      	subs	r3, r2, r3
 80021b8:	011b      	lsls	r3, r3, #4
 80021ba:	3332      	adds	r3, #50	; 0x32
 80021bc:	4a08      	ldr	r2, [pc, #32]	; (80021e0 <UART_SetConfig+0x4e4>)
 80021be:	fba2 2303 	umull	r2, r3, r2, r3
 80021c2:	095b      	lsrs	r3, r3, #5
 80021c4:	f003 020f 	and.w	r2, r3, #15
 80021c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4422      	add	r2, r4
 80021d0:	609a      	str	r2, [r3, #8]
}
 80021d2:	bf00      	nop
 80021d4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80021d8:	46bd      	mov	sp, r7
 80021da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80021de:	bf00      	nop
 80021e0:	51eb851f 	.word	0x51eb851f

080021e4 <__errno>:
 80021e4:	4b01      	ldr	r3, [pc, #4]	; (80021ec <__errno+0x8>)
 80021e6:	6818      	ldr	r0, [r3, #0]
 80021e8:	4770      	bx	lr
 80021ea:	bf00      	nop
 80021ec:	2000000c 	.word	0x2000000c

080021f0 <__libc_init_array>:
 80021f0:	b570      	push	{r4, r5, r6, lr}
 80021f2:	4d0d      	ldr	r5, [pc, #52]	; (8002228 <__libc_init_array+0x38>)
 80021f4:	4c0d      	ldr	r4, [pc, #52]	; (800222c <__libc_init_array+0x3c>)
 80021f6:	1b64      	subs	r4, r4, r5
 80021f8:	10a4      	asrs	r4, r4, #2
 80021fa:	2600      	movs	r6, #0
 80021fc:	42a6      	cmp	r6, r4
 80021fe:	d109      	bne.n	8002214 <__libc_init_array+0x24>
 8002200:	4d0b      	ldr	r5, [pc, #44]	; (8002230 <__libc_init_array+0x40>)
 8002202:	4c0c      	ldr	r4, [pc, #48]	; (8002234 <__libc_init_array+0x44>)
 8002204:	f000 ffae 	bl	8003164 <_init>
 8002208:	1b64      	subs	r4, r4, r5
 800220a:	10a4      	asrs	r4, r4, #2
 800220c:	2600      	movs	r6, #0
 800220e:	42a6      	cmp	r6, r4
 8002210:	d105      	bne.n	800221e <__libc_init_array+0x2e>
 8002212:	bd70      	pop	{r4, r5, r6, pc}
 8002214:	f855 3b04 	ldr.w	r3, [r5], #4
 8002218:	4798      	blx	r3
 800221a:	3601      	adds	r6, #1
 800221c:	e7ee      	b.n	80021fc <__libc_init_array+0xc>
 800221e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002222:	4798      	blx	r3
 8002224:	3601      	adds	r6, #1
 8002226:	e7f2      	b.n	800220e <__libc_init_array+0x1e>
 8002228:	0800323c 	.word	0x0800323c
 800222c:	0800323c 	.word	0x0800323c
 8002230:	0800323c 	.word	0x0800323c
 8002234:	08003240 	.word	0x08003240

08002238 <memset>:
 8002238:	4402      	add	r2, r0
 800223a:	4603      	mov	r3, r0
 800223c:	4293      	cmp	r3, r2
 800223e:	d100      	bne.n	8002242 <memset+0xa>
 8002240:	4770      	bx	lr
 8002242:	f803 1b01 	strb.w	r1, [r3], #1
 8002246:	e7f9      	b.n	800223c <memset+0x4>

08002248 <iprintf>:
 8002248:	b40f      	push	{r0, r1, r2, r3}
 800224a:	4b0a      	ldr	r3, [pc, #40]	; (8002274 <iprintf+0x2c>)
 800224c:	b513      	push	{r0, r1, r4, lr}
 800224e:	681c      	ldr	r4, [r3, #0]
 8002250:	b124      	cbz	r4, 800225c <iprintf+0x14>
 8002252:	69a3      	ldr	r3, [r4, #24]
 8002254:	b913      	cbnz	r3, 800225c <iprintf+0x14>
 8002256:	4620      	mov	r0, r4
 8002258:	f000 f866 	bl	8002328 <__sinit>
 800225c:	ab05      	add	r3, sp, #20
 800225e:	9a04      	ldr	r2, [sp, #16]
 8002260:	68a1      	ldr	r1, [r4, #8]
 8002262:	9301      	str	r3, [sp, #4]
 8002264:	4620      	mov	r0, r4
 8002266:	f000 f9bd 	bl	80025e4 <_vfiprintf_r>
 800226a:	b002      	add	sp, #8
 800226c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002270:	b004      	add	sp, #16
 8002272:	4770      	bx	lr
 8002274:	2000000c 	.word	0x2000000c

08002278 <std>:
 8002278:	2300      	movs	r3, #0
 800227a:	b510      	push	{r4, lr}
 800227c:	4604      	mov	r4, r0
 800227e:	e9c0 3300 	strd	r3, r3, [r0]
 8002282:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002286:	6083      	str	r3, [r0, #8]
 8002288:	8181      	strh	r1, [r0, #12]
 800228a:	6643      	str	r3, [r0, #100]	; 0x64
 800228c:	81c2      	strh	r2, [r0, #14]
 800228e:	6183      	str	r3, [r0, #24]
 8002290:	4619      	mov	r1, r3
 8002292:	2208      	movs	r2, #8
 8002294:	305c      	adds	r0, #92	; 0x5c
 8002296:	f7ff ffcf 	bl	8002238 <memset>
 800229a:	4b05      	ldr	r3, [pc, #20]	; (80022b0 <std+0x38>)
 800229c:	6263      	str	r3, [r4, #36]	; 0x24
 800229e:	4b05      	ldr	r3, [pc, #20]	; (80022b4 <std+0x3c>)
 80022a0:	62a3      	str	r3, [r4, #40]	; 0x28
 80022a2:	4b05      	ldr	r3, [pc, #20]	; (80022b8 <std+0x40>)
 80022a4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80022a6:	4b05      	ldr	r3, [pc, #20]	; (80022bc <std+0x44>)
 80022a8:	6224      	str	r4, [r4, #32]
 80022aa:	6323      	str	r3, [r4, #48]	; 0x30
 80022ac:	bd10      	pop	{r4, pc}
 80022ae:	bf00      	nop
 80022b0:	08002b8d 	.word	0x08002b8d
 80022b4:	08002baf 	.word	0x08002baf
 80022b8:	08002be7 	.word	0x08002be7
 80022bc:	08002c0b 	.word	0x08002c0b

080022c0 <_cleanup_r>:
 80022c0:	4901      	ldr	r1, [pc, #4]	; (80022c8 <_cleanup_r+0x8>)
 80022c2:	f000 b8af 	b.w	8002424 <_fwalk_reent>
 80022c6:	bf00      	nop
 80022c8:	08002ee5 	.word	0x08002ee5

080022cc <__sfmoreglue>:
 80022cc:	b570      	push	{r4, r5, r6, lr}
 80022ce:	2268      	movs	r2, #104	; 0x68
 80022d0:	1e4d      	subs	r5, r1, #1
 80022d2:	4355      	muls	r5, r2
 80022d4:	460e      	mov	r6, r1
 80022d6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80022da:	f000 f8e5 	bl	80024a8 <_malloc_r>
 80022de:	4604      	mov	r4, r0
 80022e0:	b140      	cbz	r0, 80022f4 <__sfmoreglue+0x28>
 80022e2:	2100      	movs	r1, #0
 80022e4:	e9c0 1600 	strd	r1, r6, [r0]
 80022e8:	300c      	adds	r0, #12
 80022ea:	60a0      	str	r0, [r4, #8]
 80022ec:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80022f0:	f7ff ffa2 	bl	8002238 <memset>
 80022f4:	4620      	mov	r0, r4
 80022f6:	bd70      	pop	{r4, r5, r6, pc}

080022f8 <__sfp_lock_acquire>:
 80022f8:	4801      	ldr	r0, [pc, #4]	; (8002300 <__sfp_lock_acquire+0x8>)
 80022fa:	f000 b8b3 	b.w	8002464 <__retarget_lock_acquire_recursive>
 80022fe:	bf00      	nop
 8002300:	200000d9 	.word	0x200000d9

08002304 <__sfp_lock_release>:
 8002304:	4801      	ldr	r0, [pc, #4]	; (800230c <__sfp_lock_release+0x8>)
 8002306:	f000 b8ae 	b.w	8002466 <__retarget_lock_release_recursive>
 800230a:	bf00      	nop
 800230c:	200000d9 	.word	0x200000d9

08002310 <__sinit_lock_acquire>:
 8002310:	4801      	ldr	r0, [pc, #4]	; (8002318 <__sinit_lock_acquire+0x8>)
 8002312:	f000 b8a7 	b.w	8002464 <__retarget_lock_acquire_recursive>
 8002316:	bf00      	nop
 8002318:	200000da 	.word	0x200000da

0800231c <__sinit_lock_release>:
 800231c:	4801      	ldr	r0, [pc, #4]	; (8002324 <__sinit_lock_release+0x8>)
 800231e:	f000 b8a2 	b.w	8002466 <__retarget_lock_release_recursive>
 8002322:	bf00      	nop
 8002324:	200000da 	.word	0x200000da

08002328 <__sinit>:
 8002328:	b510      	push	{r4, lr}
 800232a:	4604      	mov	r4, r0
 800232c:	f7ff fff0 	bl	8002310 <__sinit_lock_acquire>
 8002330:	69a3      	ldr	r3, [r4, #24]
 8002332:	b11b      	cbz	r3, 800233c <__sinit+0x14>
 8002334:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002338:	f7ff bff0 	b.w	800231c <__sinit_lock_release>
 800233c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8002340:	6523      	str	r3, [r4, #80]	; 0x50
 8002342:	4b13      	ldr	r3, [pc, #76]	; (8002390 <__sinit+0x68>)
 8002344:	4a13      	ldr	r2, [pc, #76]	; (8002394 <__sinit+0x6c>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	62a2      	str	r2, [r4, #40]	; 0x28
 800234a:	42a3      	cmp	r3, r4
 800234c:	bf04      	itt	eq
 800234e:	2301      	moveq	r3, #1
 8002350:	61a3      	streq	r3, [r4, #24]
 8002352:	4620      	mov	r0, r4
 8002354:	f000 f820 	bl	8002398 <__sfp>
 8002358:	6060      	str	r0, [r4, #4]
 800235a:	4620      	mov	r0, r4
 800235c:	f000 f81c 	bl	8002398 <__sfp>
 8002360:	60a0      	str	r0, [r4, #8]
 8002362:	4620      	mov	r0, r4
 8002364:	f000 f818 	bl	8002398 <__sfp>
 8002368:	2200      	movs	r2, #0
 800236a:	60e0      	str	r0, [r4, #12]
 800236c:	2104      	movs	r1, #4
 800236e:	6860      	ldr	r0, [r4, #4]
 8002370:	f7ff ff82 	bl	8002278 <std>
 8002374:	68a0      	ldr	r0, [r4, #8]
 8002376:	2201      	movs	r2, #1
 8002378:	2109      	movs	r1, #9
 800237a:	f7ff ff7d 	bl	8002278 <std>
 800237e:	68e0      	ldr	r0, [r4, #12]
 8002380:	2202      	movs	r2, #2
 8002382:	2112      	movs	r1, #18
 8002384:	f7ff ff78 	bl	8002278 <std>
 8002388:	2301      	movs	r3, #1
 800238a:	61a3      	str	r3, [r4, #24]
 800238c:	e7d2      	b.n	8002334 <__sinit+0xc>
 800238e:	bf00      	nop
 8002390:	0800319c 	.word	0x0800319c
 8002394:	080022c1 	.word	0x080022c1

08002398 <__sfp>:
 8002398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800239a:	4607      	mov	r7, r0
 800239c:	f7ff ffac 	bl	80022f8 <__sfp_lock_acquire>
 80023a0:	4b1e      	ldr	r3, [pc, #120]	; (800241c <__sfp+0x84>)
 80023a2:	681e      	ldr	r6, [r3, #0]
 80023a4:	69b3      	ldr	r3, [r6, #24]
 80023a6:	b913      	cbnz	r3, 80023ae <__sfp+0x16>
 80023a8:	4630      	mov	r0, r6
 80023aa:	f7ff ffbd 	bl	8002328 <__sinit>
 80023ae:	3648      	adds	r6, #72	; 0x48
 80023b0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80023b4:	3b01      	subs	r3, #1
 80023b6:	d503      	bpl.n	80023c0 <__sfp+0x28>
 80023b8:	6833      	ldr	r3, [r6, #0]
 80023ba:	b30b      	cbz	r3, 8002400 <__sfp+0x68>
 80023bc:	6836      	ldr	r6, [r6, #0]
 80023be:	e7f7      	b.n	80023b0 <__sfp+0x18>
 80023c0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80023c4:	b9d5      	cbnz	r5, 80023fc <__sfp+0x64>
 80023c6:	4b16      	ldr	r3, [pc, #88]	; (8002420 <__sfp+0x88>)
 80023c8:	60e3      	str	r3, [r4, #12]
 80023ca:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80023ce:	6665      	str	r5, [r4, #100]	; 0x64
 80023d0:	f000 f847 	bl	8002462 <__retarget_lock_init_recursive>
 80023d4:	f7ff ff96 	bl	8002304 <__sfp_lock_release>
 80023d8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80023dc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80023e0:	6025      	str	r5, [r4, #0]
 80023e2:	61a5      	str	r5, [r4, #24]
 80023e4:	2208      	movs	r2, #8
 80023e6:	4629      	mov	r1, r5
 80023e8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80023ec:	f7ff ff24 	bl	8002238 <memset>
 80023f0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80023f4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80023f8:	4620      	mov	r0, r4
 80023fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80023fc:	3468      	adds	r4, #104	; 0x68
 80023fe:	e7d9      	b.n	80023b4 <__sfp+0x1c>
 8002400:	2104      	movs	r1, #4
 8002402:	4638      	mov	r0, r7
 8002404:	f7ff ff62 	bl	80022cc <__sfmoreglue>
 8002408:	4604      	mov	r4, r0
 800240a:	6030      	str	r0, [r6, #0]
 800240c:	2800      	cmp	r0, #0
 800240e:	d1d5      	bne.n	80023bc <__sfp+0x24>
 8002410:	f7ff ff78 	bl	8002304 <__sfp_lock_release>
 8002414:	230c      	movs	r3, #12
 8002416:	603b      	str	r3, [r7, #0]
 8002418:	e7ee      	b.n	80023f8 <__sfp+0x60>
 800241a:	bf00      	nop
 800241c:	0800319c 	.word	0x0800319c
 8002420:	ffff0001 	.word	0xffff0001

08002424 <_fwalk_reent>:
 8002424:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002428:	4606      	mov	r6, r0
 800242a:	4688      	mov	r8, r1
 800242c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002430:	2700      	movs	r7, #0
 8002432:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002436:	f1b9 0901 	subs.w	r9, r9, #1
 800243a:	d505      	bpl.n	8002448 <_fwalk_reent+0x24>
 800243c:	6824      	ldr	r4, [r4, #0]
 800243e:	2c00      	cmp	r4, #0
 8002440:	d1f7      	bne.n	8002432 <_fwalk_reent+0xe>
 8002442:	4638      	mov	r0, r7
 8002444:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002448:	89ab      	ldrh	r3, [r5, #12]
 800244a:	2b01      	cmp	r3, #1
 800244c:	d907      	bls.n	800245e <_fwalk_reent+0x3a>
 800244e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002452:	3301      	adds	r3, #1
 8002454:	d003      	beq.n	800245e <_fwalk_reent+0x3a>
 8002456:	4629      	mov	r1, r5
 8002458:	4630      	mov	r0, r6
 800245a:	47c0      	blx	r8
 800245c:	4307      	orrs	r7, r0
 800245e:	3568      	adds	r5, #104	; 0x68
 8002460:	e7e9      	b.n	8002436 <_fwalk_reent+0x12>

08002462 <__retarget_lock_init_recursive>:
 8002462:	4770      	bx	lr

08002464 <__retarget_lock_acquire_recursive>:
 8002464:	4770      	bx	lr

08002466 <__retarget_lock_release_recursive>:
 8002466:	4770      	bx	lr

08002468 <sbrk_aligned>:
 8002468:	b570      	push	{r4, r5, r6, lr}
 800246a:	4e0e      	ldr	r6, [pc, #56]	; (80024a4 <sbrk_aligned+0x3c>)
 800246c:	460c      	mov	r4, r1
 800246e:	6831      	ldr	r1, [r6, #0]
 8002470:	4605      	mov	r5, r0
 8002472:	b911      	cbnz	r1, 800247a <sbrk_aligned+0x12>
 8002474:	f000 fb7a 	bl	8002b6c <_sbrk_r>
 8002478:	6030      	str	r0, [r6, #0]
 800247a:	4621      	mov	r1, r4
 800247c:	4628      	mov	r0, r5
 800247e:	f000 fb75 	bl	8002b6c <_sbrk_r>
 8002482:	1c43      	adds	r3, r0, #1
 8002484:	d00a      	beq.n	800249c <sbrk_aligned+0x34>
 8002486:	1cc4      	adds	r4, r0, #3
 8002488:	f024 0403 	bic.w	r4, r4, #3
 800248c:	42a0      	cmp	r0, r4
 800248e:	d007      	beq.n	80024a0 <sbrk_aligned+0x38>
 8002490:	1a21      	subs	r1, r4, r0
 8002492:	4628      	mov	r0, r5
 8002494:	f000 fb6a 	bl	8002b6c <_sbrk_r>
 8002498:	3001      	adds	r0, #1
 800249a:	d101      	bne.n	80024a0 <sbrk_aligned+0x38>
 800249c:	f04f 34ff 	mov.w	r4, #4294967295
 80024a0:	4620      	mov	r0, r4
 80024a2:	bd70      	pop	{r4, r5, r6, pc}
 80024a4:	200000e0 	.word	0x200000e0

080024a8 <_malloc_r>:
 80024a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80024ac:	1ccd      	adds	r5, r1, #3
 80024ae:	f025 0503 	bic.w	r5, r5, #3
 80024b2:	3508      	adds	r5, #8
 80024b4:	2d0c      	cmp	r5, #12
 80024b6:	bf38      	it	cc
 80024b8:	250c      	movcc	r5, #12
 80024ba:	2d00      	cmp	r5, #0
 80024bc:	4607      	mov	r7, r0
 80024be:	db01      	blt.n	80024c4 <_malloc_r+0x1c>
 80024c0:	42a9      	cmp	r1, r5
 80024c2:	d905      	bls.n	80024d0 <_malloc_r+0x28>
 80024c4:	230c      	movs	r3, #12
 80024c6:	603b      	str	r3, [r7, #0]
 80024c8:	2600      	movs	r6, #0
 80024ca:	4630      	mov	r0, r6
 80024cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80024d0:	4e2e      	ldr	r6, [pc, #184]	; (800258c <_malloc_r+0xe4>)
 80024d2:	f000 fdbb 	bl	800304c <__malloc_lock>
 80024d6:	6833      	ldr	r3, [r6, #0]
 80024d8:	461c      	mov	r4, r3
 80024da:	bb34      	cbnz	r4, 800252a <_malloc_r+0x82>
 80024dc:	4629      	mov	r1, r5
 80024de:	4638      	mov	r0, r7
 80024e0:	f7ff ffc2 	bl	8002468 <sbrk_aligned>
 80024e4:	1c43      	adds	r3, r0, #1
 80024e6:	4604      	mov	r4, r0
 80024e8:	d14d      	bne.n	8002586 <_malloc_r+0xde>
 80024ea:	6834      	ldr	r4, [r6, #0]
 80024ec:	4626      	mov	r6, r4
 80024ee:	2e00      	cmp	r6, #0
 80024f0:	d140      	bne.n	8002574 <_malloc_r+0xcc>
 80024f2:	6823      	ldr	r3, [r4, #0]
 80024f4:	4631      	mov	r1, r6
 80024f6:	4638      	mov	r0, r7
 80024f8:	eb04 0803 	add.w	r8, r4, r3
 80024fc:	f000 fb36 	bl	8002b6c <_sbrk_r>
 8002500:	4580      	cmp	r8, r0
 8002502:	d13a      	bne.n	800257a <_malloc_r+0xd2>
 8002504:	6821      	ldr	r1, [r4, #0]
 8002506:	3503      	adds	r5, #3
 8002508:	1a6d      	subs	r5, r5, r1
 800250a:	f025 0503 	bic.w	r5, r5, #3
 800250e:	3508      	adds	r5, #8
 8002510:	2d0c      	cmp	r5, #12
 8002512:	bf38      	it	cc
 8002514:	250c      	movcc	r5, #12
 8002516:	4629      	mov	r1, r5
 8002518:	4638      	mov	r0, r7
 800251a:	f7ff ffa5 	bl	8002468 <sbrk_aligned>
 800251e:	3001      	adds	r0, #1
 8002520:	d02b      	beq.n	800257a <_malloc_r+0xd2>
 8002522:	6823      	ldr	r3, [r4, #0]
 8002524:	442b      	add	r3, r5
 8002526:	6023      	str	r3, [r4, #0]
 8002528:	e00e      	b.n	8002548 <_malloc_r+0xa0>
 800252a:	6822      	ldr	r2, [r4, #0]
 800252c:	1b52      	subs	r2, r2, r5
 800252e:	d41e      	bmi.n	800256e <_malloc_r+0xc6>
 8002530:	2a0b      	cmp	r2, #11
 8002532:	d916      	bls.n	8002562 <_malloc_r+0xba>
 8002534:	1961      	adds	r1, r4, r5
 8002536:	42a3      	cmp	r3, r4
 8002538:	6025      	str	r5, [r4, #0]
 800253a:	bf18      	it	ne
 800253c:	6059      	strne	r1, [r3, #4]
 800253e:	6863      	ldr	r3, [r4, #4]
 8002540:	bf08      	it	eq
 8002542:	6031      	streq	r1, [r6, #0]
 8002544:	5162      	str	r2, [r4, r5]
 8002546:	604b      	str	r3, [r1, #4]
 8002548:	4638      	mov	r0, r7
 800254a:	f104 060b 	add.w	r6, r4, #11
 800254e:	f000 fd83 	bl	8003058 <__malloc_unlock>
 8002552:	f026 0607 	bic.w	r6, r6, #7
 8002556:	1d23      	adds	r3, r4, #4
 8002558:	1af2      	subs	r2, r6, r3
 800255a:	d0b6      	beq.n	80024ca <_malloc_r+0x22>
 800255c:	1b9b      	subs	r3, r3, r6
 800255e:	50a3      	str	r3, [r4, r2]
 8002560:	e7b3      	b.n	80024ca <_malloc_r+0x22>
 8002562:	6862      	ldr	r2, [r4, #4]
 8002564:	42a3      	cmp	r3, r4
 8002566:	bf0c      	ite	eq
 8002568:	6032      	streq	r2, [r6, #0]
 800256a:	605a      	strne	r2, [r3, #4]
 800256c:	e7ec      	b.n	8002548 <_malloc_r+0xa0>
 800256e:	4623      	mov	r3, r4
 8002570:	6864      	ldr	r4, [r4, #4]
 8002572:	e7b2      	b.n	80024da <_malloc_r+0x32>
 8002574:	4634      	mov	r4, r6
 8002576:	6876      	ldr	r6, [r6, #4]
 8002578:	e7b9      	b.n	80024ee <_malloc_r+0x46>
 800257a:	230c      	movs	r3, #12
 800257c:	603b      	str	r3, [r7, #0]
 800257e:	4638      	mov	r0, r7
 8002580:	f000 fd6a 	bl	8003058 <__malloc_unlock>
 8002584:	e7a1      	b.n	80024ca <_malloc_r+0x22>
 8002586:	6025      	str	r5, [r4, #0]
 8002588:	e7de      	b.n	8002548 <_malloc_r+0xa0>
 800258a:	bf00      	nop
 800258c:	200000dc 	.word	0x200000dc

08002590 <__sfputc_r>:
 8002590:	6893      	ldr	r3, [r2, #8]
 8002592:	3b01      	subs	r3, #1
 8002594:	2b00      	cmp	r3, #0
 8002596:	b410      	push	{r4}
 8002598:	6093      	str	r3, [r2, #8]
 800259a:	da08      	bge.n	80025ae <__sfputc_r+0x1e>
 800259c:	6994      	ldr	r4, [r2, #24]
 800259e:	42a3      	cmp	r3, r4
 80025a0:	db01      	blt.n	80025a6 <__sfputc_r+0x16>
 80025a2:	290a      	cmp	r1, #10
 80025a4:	d103      	bne.n	80025ae <__sfputc_r+0x1e>
 80025a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80025aa:	f000 bb33 	b.w	8002c14 <__swbuf_r>
 80025ae:	6813      	ldr	r3, [r2, #0]
 80025b0:	1c58      	adds	r0, r3, #1
 80025b2:	6010      	str	r0, [r2, #0]
 80025b4:	7019      	strb	r1, [r3, #0]
 80025b6:	4608      	mov	r0, r1
 80025b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80025bc:	4770      	bx	lr

080025be <__sfputs_r>:
 80025be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025c0:	4606      	mov	r6, r0
 80025c2:	460f      	mov	r7, r1
 80025c4:	4614      	mov	r4, r2
 80025c6:	18d5      	adds	r5, r2, r3
 80025c8:	42ac      	cmp	r4, r5
 80025ca:	d101      	bne.n	80025d0 <__sfputs_r+0x12>
 80025cc:	2000      	movs	r0, #0
 80025ce:	e007      	b.n	80025e0 <__sfputs_r+0x22>
 80025d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80025d4:	463a      	mov	r2, r7
 80025d6:	4630      	mov	r0, r6
 80025d8:	f7ff ffda 	bl	8002590 <__sfputc_r>
 80025dc:	1c43      	adds	r3, r0, #1
 80025de:	d1f3      	bne.n	80025c8 <__sfputs_r+0xa>
 80025e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080025e4 <_vfiprintf_r>:
 80025e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80025e8:	460d      	mov	r5, r1
 80025ea:	b09d      	sub	sp, #116	; 0x74
 80025ec:	4614      	mov	r4, r2
 80025ee:	4698      	mov	r8, r3
 80025f0:	4606      	mov	r6, r0
 80025f2:	b118      	cbz	r0, 80025fc <_vfiprintf_r+0x18>
 80025f4:	6983      	ldr	r3, [r0, #24]
 80025f6:	b90b      	cbnz	r3, 80025fc <_vfiprintf_r+0x18>
 80025f8:	f7ff fe96 	bl	8002328 <__sinit>
 80025fc:	4b89      	ldr	r3, [pc, #548]	; (8002824 <_vfiprintf_r+0x240>)
 80025fe:	429d      	cmp	r5, r3
 8002600:	d11b      	bne.n	800263a <_vfiprintf_r+0x56>
 8002602:	6875      	ldr	r5, [r6, #4]
 8002604:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002606:	07d9      	lsls	r1, r3, #31
 8002608:	d405      	bmi.n	8002616 <_vfiprintf_r+0x32>
 800260a:	89ab      	ldrh	r3, [r5, #12]
 800260c:	059a      	lsls	r2, r3, #22
 800260e:	d402      	bmi.n	8002616 <_vfiprintf_r+0x32>
 8002610:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002612:	f7ff ff27 	bl	8002464 <__retarget_lock_acquire_recursive>
 8002616:	89ab      	ldrh	r3, [r5, #12]
 8002618:	071b      	lsls	r3, r3, #28
 800261a:	d501      	bpl.n	8002620 <_vfiprintf_r+0x3c>
 800261c:	692b      	ldr	r3, [r5, #16]
 800261e:	b9eb      	cbnz	r3, 800265c <_vfiprintf_r+0x78>
 8002620:	4629      	mov	r1, r5
 8002622:	4630      	mov	r0, r6
 8002624:	f000 fb5a 	bl	8002cdc <__swsetup_r>
 8002628:	b1c0      	cbz	r0, 800265c <_vfiprintf_r+0x78>
 800262a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800262c:	07dc      	lsls	r4, r3, #31
 800262e:	d50e      	bpl.n	800264e <_vfiprintf_r+0x6a>
 8002630:	f04f 30ff 	mov.w	r0, #4294967295
 8002634:	b01d      	add	sp, #116	; 0x74
 8002636:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800263a:	4b7b      	ldr	r3, [pc, #492]	; (8002828 <_vfiprintf_r+0x244>)
 800263c:	429d      	cmp	r5, r3
 800263e:	d101      	bne.n	8002644 <_vfiprintf_r+0x60>
 8002640:	68b5      	ldr	r5, [r6, #8]
 8002642:	e7df      	b.n	8002604 <_vfiprintf_r+0x20>
 8002644:	4b79      	ldr	r3, [pc, #484]	; (800282c <_vfiprintf_r+0x248>)
 8002646:	429d      	cmp	r5, r3
 8002648:	bf08      	it	eq
 800264a:	68f5      	ldreq	r5, [r6, #12]
 800264c:	e7da      	b.n	8002604 <_vfiprintf_r+0x20>
 800264e:	89ab      	ldrh	r3, [r5, #12]
 8002650:	0598      	lsls	r0, r3, #22
 8002652:	d4ed      	bmi.n	8002630 <_vfiprintf_r+0x4c>
 8002654:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002656:	f7ff ff06 	bl	8002466 <__retarget_lock_release_recursive>
 800265a:	e7e9      	b.n	8002630 <_vfiprintf_r+0x4c>
 800265c:	2300      	movs	r3, #0
 800265e:	9309      	str	r3, [sp, #36]	; 0x24
 8002660:	2320      	movs	r3, #32
 8002662:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002666:	f8cd 800c 	str.w	r8, [sp, #12]
 800266a:	2330      	movs	r3, #48	; 0x30
 800266c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8002830 <_vfiprintf_r+0x24c>
 8002670:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002674:	f04f 0901 	mov.w	r9, #1
 8002678:	4623      	mov	r3, r4
 800267a:	469a      	mov	sl, r3
 800267c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002680:	b10a      	cbz	r2, 8002686 <_vfiprintf_r+0xa2>
 8002682:	2a25      	cmp	r2, #37	; 0x25
 8002684:	d1f9      	bne.n	800267a <_vfiprintf_r+0x96>
 8002686:	ebba 0b04 	subs.w	fp, sl, r4
 800268a:	d00b      	beq.n	80026a4 <_vfiprintf_r+0xc0>
 800268c:	465b      	mov	r3, fp
 800268e:	4622      	mov	r2, r4
 8002690:	4629      	mov	r1, r5
 8002692:	4630      	mov	r0, r6
 8002694:	f7ff ff93 	bl	80025be <__sfputs_r>
 8002698:	3001      	adds	r0, #1
 800269a:	f000 80aa 	beq.w	80027f2 <_vfiprintf_r+0x20e>
 800269e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80026a0:	445a      	add	r2, fp
 80026a2:	9209      	str	r2, [sp, #36]	; 0x24
 80026a4:	f89a 3000 	ldrb.w	r3, [sl]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	f000 80a2 	beq.w	80027f2 <_vfiprintf_r+0x20e>
 80026ae:	2300      	movs	r3, #0
 80026b0:	f04f 32ff 	mov.w	r2, #4294967295
 80026b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80026b8:	f10a 0a01 	add.w	sl, sl, #1
 80026bc:	9304      	str	r3, [sp, #16]
 80026be:	9307      	str	r3, [sp, #28]
 80026c0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80026c4:	931a      	str	r3, [sp, #104]	; 0x68
 80026c6:	4654      	mov	r4, sl
 80026c8:	2205      	movs	r2, #5
 80026ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80026ce:	4858      	ldr	r0, [pc, #352]	; (8002830 <_vfiprintf_r+0x24c>)
 80026d0:	f7fd fd8e 	bl	80001f0 <memchr>
 80026d4:	9a04      	ldr	r2, [sp, #16]
 80026d6:	b9d8      	cbnz	r0, 8002710 <_vfiprintf_r+0x12c>
 80026d8:	06d1      	lsls	r1, r2, #27
 80026da:	bf44      	itt	mi
 80026dc:	2320      	movmi	r3, #32
 80026de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80026e2:	0713      	lsls	r3, r2, #28
 80026e4:	bf44      	itt	mi
 80026e6:	232b      	movmi	r3, #43	; 0x2b
 80026e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80026ec:	f89a 3000 	ldrb.w	r3, [sl]
 80026f0:	2b2a      	cmp	r3, #42	; 0x2a
 80026f2:	d015      	beq.n	8002720 <_vfiprintf_r+0x13c>
 80026f4:	9a07      	ldr	r2, [sp, #28]
 80026f6:	4654      	mov	r4, sl
 80026f8:	2000      	movs	r0, #0
 80026fa:	f04f 0c0a 	mov.w	ip, #10
 80026fe:	4621      	mov	r1, r4
 8002700:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002704:	3b30      	subs	r3, #48	; 0x30
 8002706:	2b09      	cmp	r3, #9
 8002708:	d94e      	bls.n	80027a8 <_vfiprintf_r+0x1c4>
 800270a:	b1b0      	cbz	r0, 800273a <_vfiprintf_r+0x156>
 800270c:	9207      	str	r2, [sp, #28]
 800270e:	e014      	b.n	800273a <_vfiprintf_r+0x156>
 8002710:	eba0 0308 	sub.w	r3, r0, r8
 8002714:	fa09 f303 	lsl.w	r3, r9, r3
 8002718:	4313      	orrs	r3, r2
 800271a:	9304      	str	r3, [sp, #16]
 800271c:	46a2      	mov	sl, r4
 800271e:	e7d2      	b.n	80026c6 <_vfiprintf_r+0xe2>
 8002720:	9b03      	ldr	r3, [sp, #12]
 8002722:	1d19      	adds	r1, r3, #4
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	9103      	str	r1, [sp, #12]
 8002728:	2b00      	cmp	r3, #0
 800272a:	bfbb      	ittet	lt
 800272c:	425b      	neglt	r3, r3
 800272e:	f042 0202 	orrlt.w	r2, r2, #2
 8002732:	9307      	strge	r3, [sp, #28]
 8002734:	9307      	strlt	r3, [sp, #28]
 8002736:	bfb8      	it	lt
 8002738:	9204      	strlt	r2, [sp, #16]
 800273a:	7823      	ldrb	r3, [r4, #0]
 800273c:	2b2e      	cmp	r3, #46	; 0x2e
 800273e:	d10c      	bne.n	800275a <_vfiprintf_r+0x176>
 8002740:	7863      	ldrb	r3, [r4, #1]
 8002742:	2b2a      	cmp	r3, #42	; 0x2a
 8002744:	d135      	bne.n	80027b2 <_vfiprintf_r+0x1ce>
 8002746:	9b03      	ldr	r3, [sp, #12]
 8002748:	1d1a      	adds	r2, r3, #4
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	9203      	str	r2, [sp, #12]
 800274e:	2b00      	cmp	r3, #0
 8002750:	bfb8      	it	lt
 8002752:	f04f 33ff 	movlt.w	r3, #4294967295
 8002756:	3402      	adds	r4, #2
 8002758:	9305      	str	r3, [sp, #20]
 800275a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8002840 <_vfiprintf_r+0x25c>
 800275e:	7821      	ldrb	r1, [r4, #0]
 8002760:	2203      	movs	r2, #3
 8002762:	4650      	mov	r0, sl
 8002764:	f7fd fd44 	bl	80001f0 <memchr>
 8002768:	b140      	cbz	r0, 800277c <_vfiprintf_r+0x198>
 800276a:	2340      	movs	r3, #64	; 0x40
 800276c:	eba0 000a 	sub.w	r0, r0, sl
 8002770:	fa03 f000 	lsl.w	r0, r3, r0
 8002774:	9b04      	ldr	r3, [sp, #16]
 8002776:	4303      	orrs	r3, r0
 8002778:	3401      	adds	r4, #1
 800277a:	9304      	str	r3, [sp, #16]
 800277c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002780:	482c      	ldr	r0, [pc, #176]	; (8002834 <_vfiprintf_r+0x250>)
 8002782:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002786:	2206      	movs	r2, #6
 8002788:	f7fd fd32 	bl	80001f0 <memchr>
 800278c:	2800      	cmp	r0, #0
 800278e:	d03f      	beq.n	8002810 <_vfiprintf_r+0x22c>
 8002790:	4b29      	ldr	r3, [pc, #164]	; (8002838 <_vfiprintf_r+0x254>)
 8002792:	bb1b      	cbnz	r3, 80027dc <_vfiprintf_r+0x1f8>
 8002794:	9b03      	ldr	r3, [sp, #12]
 8002796:	3307      	adds	r3, #7
 8002798:	f023 0307 	bic.w	r3, r3, #7
 800279c:	3308      	adds	r3, #8
 800279e:	9303      	str	r3, [sp, #12]
 80027a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80027a2:	443b      	add	r3, r7
 80027a4:	9309      	str	r3, [sp, #36]	; 0x24
 80027a6:	e767      	b.n	8002678 <_vfiprintf_r+0x94>
 80027a8:	fb0c 3202 	mla	r2, ip, r2, r3
 80027ac:	460c      	mov	r4, r1
 80027ae:	2001      	movs	r0, #1
 80027b0:	e7a5      	b.n	80026fe <_vfiprintf_r+0x11a>
 80027b2:	2300      	movs	r3, #0
 80027b4:	3401      	adds	r4, #1
 80027b6:	9305      	str	r3, [sp, #20]
 80027b8:	4619      	mov	r1, r3
 80027ba:	f04f 0c0a 	mov.w	ip, #10
 80027be:	4620      	mov	r0, r4
 80027c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80027c4:	3a30      	subs	r2, #48	; 0x30
 80027c6:	2a09      	cmp	r2, #9
 80027c8:	d903      	bls.n	80027d2 <_vfiprintf_r+0x1ee>
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d0c5      	beq.n	800275a <_vfiprintf_r+0x176>
 80027ce:	9105      	str	r1, [sp, #20]
 80027d0:	e7c3      	b.n	800275a <_vfiprintf_r+0x176>
 80027d2:	fb0c 2101 	mla	r1, ip, r1, r2
 80027d6:	4604      	mov	r4, r0
 80027d8:	2301      	movs	r3, #1
 80027da:	e7f0      	b.n	80027be <_vfiprintf_r+0x1da>
 80027dc:	ab03      	add	r3, sp, #12
 80027de:	9300      	str	r3, [sp, #0]
 80027e0:	462a      	mov	r2, r5
 80027e2:	4b16      	ldr	r3, [pc, #88]	; (800283c <_vfiprintf_r+0x258>)
 80027e4:	a904      	add	r1, sp, #16
 80027e6:	4630      	mov	r0, r6
 80027e8:	f3af 8000 	nop.w
 80027ec:	4607      	mov	r7, r0
 80027ee:	1c78      	adds	r0, r7, #1
 80027f0:	d1d6      	bne.n	80027a0 <_vfiprintf_r+0x1bc>
 80027f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80027f4:	07d9      	lsls	r1, r3, #31
 80027f6:	d405      	bmi.n	8002804 <_vfiprintf_r+0x220>
 80027f8:	89ab      	ldrh	r3, [r5, #12]
 80027fa:	059a      	lsls	r2, r3, #22
 80027fc:	d402      	bmi.n	8002804 <_vfiprintf_r+0x220>
 80027fe:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002800:	f7ff fe31 	bl	8002466 <__retarget_lock_release_recursive>
 8002804:	89ab      	ldrh	r3, [r5, #12]
 8002806:	065b      	lsls	r3, r3, #25
 8002808:	f53f af12 	bmi.w	8002630 <_vfiprintf_r+0x4c>
 800280c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800280e:	e711      	b.n	8002634 <_vfiprintf_r+0x50>
 8002810:	ab03      	add	r3, sp, #12
 8002812:	9300      	str	r3, [sp, #0]
 8002814:	462a      	mov	r2, r5
 8002816:	4b09      	ldr	r3, [pc, #36]	; (800283c <_vfiprintf_r+0x258>)
 8002818:	a904      	add	r1, sp, #16
 800281a:	4630      	mov	r0, r6
 800281c:	f000 f880 	bl	8002920 <_printf_i>
 8002820:	e7e4      	b.n	80027ec <_vfiprintf_r+0x208>
 8002822:	bf00      	nop
 8002824:	080031c0 	.word	0x080031c0
 8002828:	080031e0 	.word	0x080031e0
 800282c:	080031a0 	.word	0x080031a0
 8002830:	08003200 	.word	0x08003200
 8002834:	0800320a 	.word	0x0800320a
 8002838:	00000000 	.word	0x00000000
 800283c:	080025bf 	.word	0x080025bf
 8002840:	08003206 	.word	0x08003206

08002844 <_printf_common>:
 8002844:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002848:	4616      	mov	r6, r2
 800284a:	4699      	mov	r9, r3
 800284c:	688a      	ldr	r2, [r1, #8]
 800284e:	690b      	ldr	r3, [r1, #16]
 8002850:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002854:	4293      	cmp	r3, r2
 8002856:	bfb8      	it	lt
 8002858:	4613      	movlt	r3, r2
 800285a:	6033      	str	r3, [r6, #0]
 800285c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002860:	4607      	mov	r7, r0
 8002862:	460c      	mov	r4, r1
 8002864:	b10a      	cbz	r2, 800286a <_printf_common+0x26>
 8002866:	3301      	adds	r3, #1
 8002868:	6033      	str	r3, [r6, #0]
 800286a:	6823      	ldr	r3, [r4, #0]
 800286c:	0699      	lsls	r1, r3, #26
 800286e:	bf42      	ittt	mi
 8002870:	6833      	ldrmi	r3, [r6, #0]
 8002872:	3302      	addmi	r3, #2
 8002874:	6033      	strmi	r3, [r6, #0]
 8002876:	6825      	ldr	r5, [r4, #0]
 8002878:	f015 0506 	ands.w	r5, r5, #6
 800287c:	d106      	bne.n	800288c <_printf_common+0x48>
 800287e:	f104 0a19 	add.w	sl, r4, #25
 8002882:	68e3      	ldr	r3, [r4, #12]
 8002884:	6832      	ldr	r2, [r6, #0]
 8002886:	1a9b      	subs	r3, r3, r2
 8002888:	42ab      	cmp	r3, r5
 800288a:	dc26      	bgt.n	80028da <_printf_common+0x96>
 800288c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002890:	1e13      	subs	r3, r2, #0
 8002892:	6822      	ldr	r2, [r4, #0]
 8002894:	bf18      	it	ne
 8002896:	2301      	movne	r3, #1
 8002898:	0692      	lsls	r2, r2, #26
 800289a:	d42b      	bmi.n	80028f4 <_printf_common+0xb0>
 800289c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80028a0:	4649      	mov	r1, r9
 80028a2:	4638      	mov	r0, r7
 80028a4:	47c0      	blx	r8
 80028a6:	3001      	adds	r0, #1
 80028a8:	d01e      	beq.n	80028e8 <_printf_common+0xa4>
 80028aa:	6823      	ldr	r3, [r4, #0]
 80028ac:	68e5      	ldr	r5, [r4, #12]
 80028ae:	6832      	ldr	r2, [r6, #0]
 80028b0:	f003 0306 	and.w	r3, r3, #6
 80028b4:	2b04      	cmp	r3, #4
 80028b6:	bf08      	it	eq
 80028b8:	1aad      	subeq	r5, r5, r2
 80028ba:	68a3      	ldr	r3, [r4, #8]
 80028bc:	6922      	ldr	r2, [r4, #16]
 80028be:	bf0c      	ite	eq
 80028c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80028c4:	2500      	movne	r5, #0
 80028c6:	4293      	cmp	r3, r2
 80028c8:	bfc4      	itt	gt
 80028ca:	1a9b      	subgt	r3, r3, r2
 80028cc:	18ed      	addgt	r5, r5, r3
 80028ce:	2600      	movs	r6, #0
 80028d0:	341a      	adds	r4, #26
 80028d2:	42b5      	cmp	r5, r6
 80028d4:	d11a      	bne.n	800290c <_printf_common+0xc8>
 80028d6:	2000      	movs	r0, #0
 80028d8:	e008      	b.n	80028ec <_printf_common+0xa8>
 80028da:	2301      	movs	r3, #1
 80028dc:	4652      	mov	r2, sl
 80028de:	4649      	mov	r1, r9
 80028e0:	4638      	mov	r0, r7
 80028e2:	47c0      	blx	r8
 80028e4:	3001      	adds	r0, #1
 80028e6:	d103      	bne.n	80028f0 <_printf_common+0xac>
 80028e8:	f04f 30ff 	mov.w	r0, #4294967295
 80028ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80028f0:	3501      	adds	r5, #1
 80028f2:	e7c6      	b.n	8002882 <_printf_common+0x3e>
 80028f4:	18e1      	adds	r1, r4, r3
 80028f6:	1c5a      	adds	r2, r3, #1
 80028f8:	2030      	movs	r0, #48	; 0x30
 80028fa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80028fe:	4422      	add	r2, r4
 8002900:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002904:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002908:	3302      	adds	r3, #2
 800290a:	e7c7      	b.n	800289c <_printf_common+0x58>
 800290c:	2301      	movs	r3, #1
 800290e:	4622      	mov	r2, r4
 8002910:	4649      	mov	r1, r9
 8002912:	4638      	mov	r0, r7
 8002914:	47c0      	blx	r8
 8002916:	3001      	adds	r0, #1
 8002918:	d0e6      	beq.n	80028e8 <_printf_common+0xa4>
 800291a:	3601      	adds	r6, #1
 800291c:	e7d9      	b.n	80028d2 <_printf_common+0x8e>
	...

08002920 <_printf_i>:
 8002920:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002924:	7e0f      	ldrb	r7, [r1, #24]
 8002926:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002928:	2f78      	cmp	r7, #120	; 0x78
 800292a:	4691      	mov	r9, r2
 800292c:	4680      	mov	r8, r0
 800292e:	460c      	mov	r4, r1
 8002930:	469a      	mov	sl, r3
 8002932:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002936:	d807      	bhi.n	8002948 <_printf_i+0x28>
 8002938:	2f62      	cmp	r7, #98	; 0x62
 800293a:	d80a      	bhi.n	8002952 <_printf_i+0x32>
 800293c:	2f00      	cmp	r7, #0
 800293e:	f000 80d8 	beq.w	8002af2 <_printf_i+0x1d2>
 8002942:	2f58      	cmp	r7, #88	; 0x58
 8002944:	f000 80a3 	beq.w	8002a8e <_printf_i+0x16e>
 8002948:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800294c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002950:	e03a      	b.n	80029c8 <_printf_i+0xa8>
 8002952:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002956:	2b15      	cmp	r3, #21
 8002958:	d8f6      	bhi.n	8002948 <_printf_i+0x28>
 800295a:	a101      	add	r1, pc, #4	; (adr r1, 8002960 <_printf_i+0x40>)
 800295c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002960:	080029b9 	.word	0x080029b9
 8002964:	080029cd 	.word	0x080029cd
 8002968:	08002949 	.word	0x08002949
 800296c:	08002949 	.word	0x08002949
 8002970:	08002949 	.word	0x08002949
 8002974:	08002949 	.word	0x08002949
 8002978:	080029cd 	.word	0x080029cd
 800297c:	08002949 	.word	0x08002949
 8002980:	08002949 	.word	0x08002949
 8002984:	08002949 	.word	0x08002949
 8002988:	08002949 	.word	0x08002949
 800298c:	08002ad9 	.word	0x08002ad9
 8002990:	080029fd 	.word	0x080029fd
 8002994:	08002abb 	.word	0x08002abb
 8002998:	08002949 	.word	0x08002949
 800299c:	08002949 	.word	0x08002949
 80029a0:	08002afb 	.word	0x08002afb
 80029a4:	08002949 	.word	0x08002949
 80029a8:	080029fd 	.word	0x080029fd
 80029ac:	08002949 	.word	0x08002949
 80029b0:	08002949 	.word	0x08002949
 80029b4:	08002ac3 	.word	0x08002ac3
 80029b8:	682b      	ldr	r3, [r5, #0]
 80029ba:	1d1a      	adds	r2, r3, #4
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	602a      	str	r2, [r5, #0]
 80029c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80029c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80029c8:	2301      	movs	r3, #1
 80029ca:	e0a3      	b.n	8002b14 <_printf_i+0x1f4>
 80029cc:	6820      	ldr	r0, [r4, #0]
 80029ce:	6829      	ldr	r1, [r5, #0]
 80029d0:	0606      	lsls	r6, r0, #24
 80029d2:	f101 0304 	add.w	r3, r1, #4
 80029d6:	d50a      	bpl.n	80029ee <_printf_i+0xce>
 80029d8:	680e      	ldr	r6, [r1, #0]
 80029da:	602b      	str	r3, [r5, #0]
 80029dc:	2e00      	cmp	r6, #0
 80029de:	da03      	bge.n	80029e8 <_printf_i+0xc8>
 80029e0:	232d      	movs	r3, #45	; 0x2d
 80029e2:	4276      	negs	r6, r6
 80029e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80029e8:	485e      	ldr	r0, [pc, #376]	; (8002b64 <_printf_i+0x244>)
 80029ea:	230a      	movs	r3, #10
 80029ec:	e019      	b.n	8002a22 <_printf_i+0x102>
 80029ee:	680e      	ldr	r6, [r1, #0]
 80029f0:	602b      	str	r3, [r5, #0]
 80029f2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80029f6:	bf18      	it	ne
 80029f8:	b236      	sxthne	r6, r6
 80029fa:	e7ef      	b.n	80029dc <_printf_i+0xbc>
 80029fc:	682b      	ldr	r3, [r5, #0]
 80029fe:	6820      	ldr	r0, [r4, #0]
 8002a00:	1d19      	adds	r1, r3, #4
 8002a02:	6029      	str	r1, [r5, #0]
 8002a04:	0601      	lsls	r1, r0, #24
 8002a06:	d501      	bpl.n	8002a0c <_printf_i+0xec>
 8002a08:	681e      	ldr	r6, [r3, #0]
 8002a0a:	e002      	b.n	8002a12 <_printf_i+0xf2>
 8002a0c:	0646      	lsls	r6, r0, #25
 8002a0e:	d5fb      	bpl.n	8002a08 <_printf_i+0xe8>
 8002a10:	881e      	ldrh	r6, [r3, #0]
 8002a12:	4854      	ldr	r0, [pc, #336]	; (8002b64 <_printf_i+0x244>)
 8002a14:	2f6f      	cmp	r7, #111	; 0x6f
 8002a16:	bf0c      	ite	eq
 8002a18:	2308      	moveq	r3, #8
 8002a1a:	230a      	movne	r3, #10
 8002a1c:	2100      	movs	r1, #0
 8002a1e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002a22:	6865      	ldr	r5, [r4, #4]
 8002a24:	60a5      	str	r5, [r4, #8]
 8002a26:	2d00      	cmp	r5, #0
 8002a28:	bfa2      	ittt	ge
 8002a2a:	6821      	ldrge	r1, [r4, #0]
 8002a2c:	f021 0104 	bicge.w	r1, r1, #4
 8002a30:	6021      	strge	r1, [r4, #0]
 8002a32:	b90e      	cbnz	r6, 8002a38 <_printf_i+0x118>
 8002a34:	2d00      	cmp	r5, #0
 8002a36:	d04d      	beq.n	8002ad4 <_printf_i+0x1b4>
 8002a38:	4615      	mov	r5, r2
 8002a3a:	fbb6 f1f3 	udiv	r1, r6, r3
 8002a3e:	fb03 6711 	mls	r7, r3, r1, r6
 8002a42:	5dc7      	ldrb	r7, [r0, r7]
 8002a44:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002a48:	4637      	mov	r7, r6
 8002a4a:	42bb      	cmp	r3, r7
 8002a4c:	460e      	mov	r6, r1
 8002a4e:	d9f4      	bls.n	8002a3a <_printf_i+0x11a>
 8002a50:	2b08      	cmp	r3, #8
 8002a52:	d10b      	bne.n	8002a6c <_printf_i+0x14c>
 8002a54:	6823      	ldr	r3, [r4, #0]
 8002a56:	07de      	lsls	r6, r3, #31
 8002a58:	d508      	bpl.n	8002a6c <_printf_i+0x14c>
 8002a5a:	6923      	ldr	r3, [r4, #16]
 8002a5c:	6861      	ldr	r1, [r4, #4]
 8002a5e:	4299      	cmp	r1, r3
 8002a60:	bfde      	ittt	le
 8002a62:	2330      	movle	r3, #48	; 0x30
 8002a64:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002a68:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002a6c:	1b52      	subs	r2, r2, r5
 8002a6e:	6122      	str	r2, [r4, #16]
 8002a70:	f8cd a000 	str.w	sl, [sp]
 8002a74:	464b      	mov	r3, r9
 8002a76:	aa03      	add	r2, sp, #12
 8002a78:	4621      	mov	r1, r4
 8002a7a:	4640      	mov	r0, r8
 8002a7c:	f7ff fee2 	bl	8002844 <_printf_common>
 8002a80:	3001      	adds	r0, #1
 8002a82:	d14c      	bne.n	8002b1e <_printf_i+0x1fe>
 8002a84:	f04f 30ff 	mov.w	r0, #4294967295
 8002a88:	b004      	add	sp, #16
 8002a8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002a8e:	4835      	ldr	r0, [pc, #212]	; (8002b64 <_printf_i+0x244>)
 8002a90:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8002a94:	6829      	ldr	r1, [r5, #0]
 8002a96:	6823      	ldr	r3, [r4, #0]
 8002a98:	f851 6b04 	ldr.w	r6, [r1], #4
 8002a9c:	6029      	str	r1, [r5, #0]
 8002a9e:	061d      	lsls	r5, r3, #24
 8002aa0:	d514      	bpl.n	8002acc <_printf_i+0x1ac>
 8002aa2:	07df      	lsls	r7, r3, #31
 8002aa4:	bf44      	itt	mi
 8002aa6:	f043 0320 	orrmi.w	r3, r3, #32
 8002aaa:	6023      	strmi	r3, [r4, #0]
 8002aac:	b91e      	cbnz	r6, 8002ab6 <_printf_i+0x196>
 8002aae:	6823      	ldr	r3, [r4, #0]
 8002ab0:	f023 0320 	bic.w	r3, r3, #32
 8002ab4:	6023      	str	r3, [r4, #0]
 8002ab6:	2310      	movs	r3, #16
 8002ab8:	e7b0      	b.n	8002a1c <_printf_i+0xfc>
 8002aba:	6823      	ldr	r3, [r4, #0]
 8002abc:	f043 0320 	orr.w	r3, r3, #32
 8002ac0:	6023      	str	r3, [r4, #0]
 8002ac2:	2378      	movs	r3, #120	; 0x78
 8002ac4:	4828      	ldr	r0, [pc, #160]	; (8002b68 <_printf_i+0x248>)
 8002ac6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002aca:	e7e3      	b.n	8002a94 <_printf_i+0x174>
 8002acc:	0659      	lsls	r1, r3, #25
 8002ace:	bf48      	it	mi
 8002ad0:	b2b6      	uxthmi	r6, r6
 8002ad2:	e7e6      	b.n	8002aa2 <_printf_i+0x182>
 8002ad4:	4615      	mov	r5, r2
 8002ad6:	e7bb      	b.n	8002a50 <_printf_i+0x130>
 8002ad8:	682b      	ldr	r3, [r5, #0]
 8002ada:	6826      	ldr	r6, [r4, #0]
 8002adc:	6961      	ldr	r1, [r4, #20]
 8002ade:	1d18      	adds	r0, r3, #4
 8002ae0:	6028      	str	r0, [r5, #0]
 8002ae2:	0635      	lsls	r5, r6, #24
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	d501      	bpl.n	8002aec <_printf_i+0x1cc>
 8002ae8:	6019      	str	r1, [r3, #0]
 8002aea:	e002      	b.n	8002af2 <_printf_i+0x1d2>
 8002aec:	0670      	lsls	r0, r6, #25
 8002aee:	d5fb      	bpl.n	8002ae8 <_printf_i+0x1c8>
 8002af0:	8019      	strh	r1, [r3, #0]
 8002af2:	2300      	movs	r3, #0
 8002af4:	6123      	str	r3, [r4, #16]
 8002af6:	4615      	mov	r5, r2
 8002af8:	e7ba      	b.n	8002a70 <_printf_i+0x150>
 8002afa:	682b      	ldr	r3, [r5, #0]
 8002afc:	1d1a      	adds	r2, r3, #4
 8002afe:	602a      	str	r2, [r5, #0]
 8002b00:	681d      	ldr	r5, [r3, #0]
 8002b02:	6862      	ldr	r2, [r4, #4]
 8002b04:	2100      	movs	r1, #0
 8002b06:	4628      	mov	r0, r5
 8002b08:	f7fd fb72 	bl	80001f0 <memchr>
 8002b0c:	b108      	cbz	r0, 8002b12 <_printf_i+0x1f2>
 8002b0e:	1b40      	subs	r0, r0, r5
 8002b10:	6060      	str	r0, [r4, #4]
 8002b12:	6863      	ldr	r3, [r4, #4]
 8002b14:	6123      	str	r3, [r4, #16]
 8002b16:	2300      	movs	r3, #0
 8002b18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002b1c:	e7a8      	b.n	8002a70 <_printf_i+0x150>
 8002b1e:	6923      	ldr	r3, [r4, #16]
 8002b20:	462a      	mov	r2, r5
 8002b22:	4649      	mov	r1, r9
 8002b24:	4640      	mov	r0, r8
 8002b26:	47d0      	blx	sl
 8002b28:	3001      	adds	r0, #1
 8002b2a:	d0ab      	beq.n	8002a84 <_printf_i+0x164>
 8002b2c:	6823      	ldr	r3, [r4, #0]
 8002b2e:	079b      	lsls	r3, r3, #30
 8002b30:	d413      	bmi.n	8002b5a <_printf_i+0x23a>
 8002b32:	68e0      	ldr	r0, [r4, #12]
 8002b34:	9b03      	ldr	r3, [sp, #12]
 8002b36:	4298      	cmp	r0, r3
 8002b38:	bfb8      	it	lt
 8002b3a:	4618      	movlt	r0, r3
 8002b3c:	e7a4      	b.n	8002a88 <_printf_i+0x168>
 8002b3e:	2301      	movs	r3, #1
 8002b40:	4632      	mov	r2, r6
 8002b42:	4649      	mov	r1, r9
 8002b44:	4640      	mov	r0, r8
 8002b46:	47d0      	blx	sl
 8002b48:	3001      	adds	r0, #1
 8002b4a:	d09b      	beq.n	8002a84 <_printf_i+0x164>
 8002b4c:	3501      	adds	r5, #1
 8002b4e:	68e3      	ldr	r3, [r4, #12]
 8002b50:	9903      	ldr	r1, [sp, #12]
 8002b52:	1a5b      	subs	r3, r3, r1
 8002b54:	42ab      	cmp	r3, r5
 8002b56:	dcf2      	bgt.n	8002b3e <_printf_i+0x21e>
 8002b58:	e7eb      	b.n	8002b32 <_printf_i+0x212>
 8002b5a:	2500      	movs	r5, #0
 8002b5c:	f104 0619 	add.w	r6, r4, #25
 8002b60:	e7f5      	b.n	8002b4e <_printf_i+0x22e>
 8002b62:	bf00      	nop
 8002b64:	08003211 	.word	0x08003211
 8002b68:	08003222 	.word	0x08003222

08002b6c <_sbrk_r>:
 8002b6c:	b538      	push	{r3, r4, r5, lr}
 8002b6e:	4d06      	ldr	r5, [pc, #24]	; (8002b88 <_sbrk_r+0x1c>)
 8002b70:	2300      	movs	r3, #0
 8002b72:	4604      	mov	r4, r0
 8002b74:	4608      	mov	r0, r1
 8002b76:	602b      	str	r3, [r5, #0]
 8002b78:	f7fe f80c 	bl	8000b94 <_sbrk>
 8002b7c:	1c43      	adds	r3, r0, #1
 8002b7e:	d102      	bne.n	8002b86 <_sbrk_r+0x1a>
 8002b80:	682b      	ldr	r3, [r5, #0]
 8002b82:	b103      	cbz	r3, 8002b86 <_sbrk_r+0x1a>
 8002b84:	6023      	str	r3, [r4, #0]
 8002b86:	bd38      	pop	{r3, r4, r5, pc}
 8002b88:	200000e4 	.word	0x200000e4

08002b8c <__sread>:
 8002b8c:	b510      	push	{r4, lr}
 8002b8e:	460c      	mov	r4, r1
 8002b90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002b94:	f000 fab2 	bl	80030fc <_read_r>
 8002b98:	2800      	cmp	r0, #0
 8002b9a:	bfab      	itete	ge
 8002b9c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002b9e:	89a3      	ldrhlt	r3, [r4, #12]
 8002ba0:	181b      	addge	r3, r3, r0
 8002ba2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002ba6:	bfac      	ite	ge
 8002ba8:	6563      	strge	r3, [r4, #84]	; 0x54
 8002baa:	81a3      	strhlt	r3, [r4, #12]
 8002bac:	bd10      	pop	{r4, pc}

08002bae <__swrite>:
 8002bae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002bb2:	461f      	mov	r7, r3
 8002bb4:	898b      	ldrh	r3, [r1, #12]
 8002bb6:	05db      	lsls	r3, r3, #23
 8002bb8:	4605      	mov	r5, r0
 8002bba:	460c      	mov	r4, r1
 8002bbc:	4616      	mov	r6, r2
 8002bbe:	d505      	bpl.n	8002bcc <__swrite+0x1e>
 8002bc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002bc4:	2302      	movs	r3, #2
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	f000 f9c8 	bl	8002f5c <_lseek_r>
 8002bcc:	89a3      	ldrh	r3, [r4, #12]
 8002bce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002bd2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002bd6:	81a3      	strh	r3, [r4, #12]
 8002bd8:	4632      	mov	r2, r6
 8002bda:	463b      	mov	r3, r7
 8002bdc:	4628      	mov	r0, r5
 8002bde:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002be2:	f000 b869 	b.w	8002cb8 <_write_r>

08002be6 <__sseek>:
 8002be6:	b510      	push	{r4, lr}
 8002be8:	460c      	mov	r4, r1
 8002bea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002bee:	f000 f9b5 	bl	8002f5c <_lseek_r>
 8002bf2:	1c43      	adds	r3, r0, #1
 8002bf4:	89a3      	ldrh	r3, [r4, #12]
 8002bf6:	bf15      	itete	ne
 8002bf8:	6560      	strne	r0, [r4, #84]	; 0x54
 8002bfa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002bfe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002c02:	81a3      	strheq	r3, [r4, #12]
 8002c04:	bf18      	it	ne
 8002c06:	81a3      	strhne	r3, [r4, #12]
 8002c08:	bd10      	pop	{r4, pc}

08002c0a <__sclose>:
 8002c0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002c0e:	f000 b8d3 	b.w	8002db8 <_close_r>
	...

08002c14 <__swbuf_r>:
 8002c14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c16:	460e      	mov	r6, r1
 8002c18:	4614      	mov	r4, r2
 8002c1a:	4605      	mov	r5, r0
 8002c1c:	b118      	cbz	r0, 8002c26 <__swbuf_r+0x12>
 8002c1e:	6983      	ldr	r3, [r0, #24]
 8002c20:	b90b      	cbnz	r3, 8002c26 <__swbuf_r+0x12>
 8002c22:	f7ff fb81 	bl	8002328 <__sinit>
 8002c26:	4b21      	ldr	r3, [pc, #132]	; (8002cac <__swbuf_r+0x98>)
 8002c28:	429c      	cmp	r4, r3
 8002c2a:	d12b      	bne.n	8002c84 <__swbuf_r+0x70>
 8002c2c:	686c      	ldr	r4, [r5, #4]
 8002c2e:	69a3      	ldr	r3, [r4, #24]
 8002c30:	60a3      	str	r3, [r4, #8]
 8002c32:	89a3      	ldrh	r3, [r4, #12]
 8002c34:	071a      	lsls	r2, r3, #28
 8002c36:	d52f      	bpl.n	8002c98 <__swbuf_r+0x84>
 8002c38:	6923      	ldr	r3, [r4, #16]
 8002c3a:	b36b      	cbz	r3, 8002c98 <__swbuf_r+0x84>
 8002c3c:	6923      	ldr	r3, [r4, #16]
 8002c3e:	6820      	ldr	r0, [r4, #0]
 8002c40:	1ac0      	subs	r0, r0, r3
 8002c42:	6963      	ldr	r3, [r4, #20]
 8002c44:	b2f6      	uxtb	r6, r6
 8002c46:	4283      	cmp	r3, r0
 8002c48:	4637      	mov	r7, r6
 8002c4a:	dc04      	bgt.n	8002c56 <__swbuf_r+0x42>
 8002c4c:	4621      	mov	r1, r4
 8002c4e:	4628      	mov	r0, r5
 8002c50:	f000 f948 	bl	8002ee4 <_fflush_r>
 8002c54:	bb30      	cbnz	r0, 8002ca4 <__swbuf_r+0x90>
 8002c56:	68a3      	ldr	r3, [r4, #8]
 8002c58:	3b01      	subs	r3, #1
 8002c5a:	60a3      	str	r3, [r4, #8]
 8002c5c:	6823      	ldr	r3, [r4, #0]
 8002c5e:	1c5a      	adds	r2, r3, #1
 8002c60:	6022      	str	r2, [r4, #0]
 8002c62:	701e      	strb	r6, [r3, #0]
 8002c64:	6963      	ldr	r3, [r4, #20]
 8002c66:	3001      	adds	r0, #1
 8002c68:	4283      	cmp	r3, r0
 8002c6a:	d004      	beq.n	8002c76 <__swbuf_r+0x62>
 8002c6c:	89a3      	ldrh	r3, [r4, #12]
 8002c6e:	07db      	lsls	r3, r3, #31
 8002c70:	d506      	bpl.n	8002c80 <__swbuf_r+0x6c>
 8002c72:	2e0a      	cmp	r6, #10
 8002c74:	d104      	bne.n	8002c80 <__swbuf_r+0x6c>
 8002c76:	4621      	mov	r1, r4
 8002c78:	4628      	mov	r0, r5
 8002c7a:	f000 f933 	bl	8002ee4 <_fflush_r>
 8002c7e:	b988      	cbnz	r0, 8002ca4 <__swbuf_r+0x90>
 8002c80:	4638      	mov	r0, r7
 8002c82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002c84:	4b0a      	ldr	r3, [pc, #40]	; (8002cb0 <__swbuf_r+0x9c>)
 8002c86:	429c      	cmp	r4, r3
 8002c88:	d101      	bne.n	8002c8e <__swbuf_r+0x7a>
 8002c8a:	68ac      	ldr	r4, [r5, #8]
 8002c8c:	e7cf      	b.n	8002c2e <__swbuf_r+0x1a>
 8002c8e:	4b09      	ldr	r3, [pc, #36]	; (8002cb4 <__swbuf_r+0xa0>)
 8002c90:	429c      	cmp	r4, r3
 8002c92:	bf08      	it	eq
 8002c94:	68ec      	ldreq	r4, [r5, #12]
 8002c96:	e7ca      	b.n	8002c2e <__swbuf_r+0x1a>
 8002c98:	4621      	mov	r1, r4
 8002c9a:	4628      	mov	r0, r5
 8002c9c:	f000 f81e 	bl	8002cdc <__swsetup_r>
 8002ca0:	2800      	cmp	r0, #0
 8002ca2:	d0cb      	beq.n	8002c3c <__swbuf_r+0x28>
 8002ca4:	f04f 37ff 	mov.w	r7, #4294967295
 8002ca8:	e7ea      	b.n	8002c80 <__swbuf_r+0x6c>
 8002caa:	bf00      	nop
 8002cac:	080031c0 	.word	0x080031c0
 8002cb0:	080031e0 	.word	0x080031e0
 8002cb4:	080031a0 	.word	0x080031a0

08002cb8 <_write_r>:
 8002cb8:	b538      	push	{r3, r4, r5, lr}
 8002cba:	4d07      	ldr	r5, [pc, #28]	; (8002cd8 <_write_r+0x20>)
 8002cbc:	4604      	mov	r4, r0
 8002cbe:	4608      	mov	r0, r1
 8002cc0:	4611      	mov	r1, r2
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	602a      	str	r2, [r5, #0]
 8002cc6:	461a      	mov	r2, r3
 8002cc8:	f7fd ff13 	bl	8000af2 <_write>
 8002ccc:	1c43      	adds	r3, r0, #1
 8002cce:	d102      	bne.n	8002cd6 <_write_r+0x1e>
 8002cd0:	682b      	ldr	r3, [r5, #0]
 8002cd2:	b103      	cbz	r3, 8002cd6 <_write_r+0x1e>
 8002cd4:	6023      	str	r3, [r4, #0]
 8002cd6:	bd38      	pop	{r3, r4, r5, pc}
 8002cd8:	200000e4 	.word	0x200000e4

08002cdc <__swsetup_r>:
 8002cdc:	4b32      	ldr	r3, [pc, #200]	; (8002da8 <__swsetup_r+0xcc>)
 8002cde:	b570      	push	{r4, r5, r6, lr}
 8002ce0:	681d      	ldr	r5, [r3, #0]
 8002ce2:	4606      	mov	r6, r0
 8002ce4:	460c      	mov	r4, r1
 8002ce6:	b125      	cbz	r5, 8002cf2 <__swsetup_r+0x16>
 8002ce8:	69ab      	ldr	r3, [r5, #24]
 8002cea:	b913      	cbnz	r3, 8002cf2 <__swsetup_r+0x16>
 8002cec:	4628      	mov	r0, r5
 8002cee:	f7ff fb1b 	bl	8002328 <__sinit>
 8002cf2:	4b2e      	ldr	r3, [pc, #184]	; (8002dac <__swsetup_r+0xd0>)
 8002cf4:	429c      	cmp	r4, r3
 8002cf6:	d10f      	bne.n	8002d18 <__swsetup_r+0x3c>
 8002cf8:	686c      	ldr	r4, [r5, #4]
 8002cfa:	89a3      	ldrh	r3, [r4, #12]
 8002cfc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002d00:	0719      	lsls	r1, r3, #28
 8002d02:	d42c      	bmi.n	8002d5e <__swsetup_r+0x82>
 8002d04:	06dd      	lsls	r5, r3, #27
 8002d06:	d411      	bmi.n	8002d2c <__swsetup_r+0x50>
 8002d08:	2309      	movs	r3, #9
 8002d0a:	6033      	str	r3, [r6, #0]
 8002d0c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002d10:	81a3      	strh	r3, [r4, #12]
 8002d12:	f04f 30ff 	mov.w	r0, #4294967295
 8002d16:	e03e      	b.n	8002d96 <__swsetup_r+0xba>
 8002d18:	4b25      	ldr	r3, [pc, #148]	; (8002db0 <__swsetup_r+0xd4>)
 8002d1a:	429c      	cmp	r4, r3
 8002d1c:	d101      	bne.n	8002d22 <__swsetup_r+0x46>
 8002d1e:	68ac      	ldr	r4, [r5, #8]
 8002d20:	e7eb      	b.n	8002cfa <__swsetup_r+0x1e>
 8002d22:	4b24      	ldr	r3, [pc, #144]	; (8002db4 <__swsetup_r+0xd8>)
 8002d24:	429c      	cmp	r4, r3
 8002d26:	bf08      	it	eq
 8002d28:	68ec      	ldreq	r4, [r5, #12]
 8002d2a:	e7e6      	b.n	8002cfa <__swsetup_r+0x1e>
 8002d2c:	0758      	lsls	r0, r3, #29
 8002d2e:	d512      	bpl.n	8002d56 <__swsetup_r+0x7a>
 8002d30:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002d32:	b141      	cbz	r1, 8002d46 <__swsetup_r+0x6a>
 8002d34:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002d38:	4299      	cmp	r1, r3
 8002d3a:	d002      	beq.n	8002d42 <__swsetup_r+0x66>
 8002d3c:	4630      	mov	r0, r6
 8002d3e:	f000 f991 	bl	8003064 <_free_r>
 8002d42:	2300      	movs	r3, #0
 8002d44:	6363      	str	r3, [r4, #52]	; 0x34
 8002d46:	89a3      	ldrh	r3, [r4, #12]
 8002d48:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002d4c:	81a3      	strh	r3, [r4, #12]
 8002d4e:	2300      	movs	r3, #0
 8002d50:	6063      	str	r3, [r4, #4]
 8002d52:	6923      	ldr	r3, [r4, #16]
 8002d54:	6023      	str	r3, [r4, #0]
 8002d56:	89a3      	ldrh	r3, [r4, #12]
 8002d58:	f043 0308 	orr.w	r3, r3, #8
 8002d5c:	81a3      	strh	r3, [r4, #12]
 8002d5e:	6923      	ldr	r3, [r4, #16]
 8002d60:	b94b      	cbnz	r3, 8002d76 <__swsetup_r+0x9a>
 8002d62:	89a3      	ldrh	r3, [r4, #12]
 8002d64:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002d68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d6c:	d003      	beq.n	8002d76 <__swsetup_r+0x9a>
 8002d6e:	4621      	mov	r1, r4
 8002d70:	4630      	mov	r0, r6
 8002d72:	f000 f92b 	bl	8002fcc <__smakebuf_r>
 8002d76:	89a0      	ldrh	r0, [r4, #12]
 8002d78:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002d7c:	f010 0301 	ands.w	r3, r0, #1
 8002d80:	d00a      	beq.n	8002d98 <__swsetup_r+0xbc>
 8002d82:	2300      	movs	r3, #0
 8002d84:	60a3      	str	r3, [r4, #8]
 8002d86:	6963      	ldr	r3, [r4, #20]
 8002d88:	425b      	negs	r3, r3
 8002d8a:	61a3      	str	r3, [r4, #24]
 8002d8c:	6923      	ldr	r3, [r4, #16]
 8002d8e:	b943      	cbnz	r3, 8002da2 <__swsetup_r+0xc6>
 8002d90:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002d94:	d1ba      	bne.n	8002d0c <__swsetup_r+0x30>
 8002d96:	bd70      	pop	{r4, r5, r6, pc}
 8002d98:	0781      	lsls	r1, r0, #30
 8002d9a:	bf58      	it	pl
 8002d9c:	6963      	ldrpl	r3, [r4, #20]
 8002d9e:	60a3      	str	r3, [r4, #8]
 8002da0:	e7f4      	b.n	8002d8c <__swsetup_r+0xb0>
 8002da2:	2000      	movs	r0, #0
 8002da4:	e7f7      	b.n	8002d96 <__swsetup_r+0xba>
 8002da6:	bf00      	nop
 8002da8:	2000000c 	.word	0x2000000c
 8002dac:	080031c0 	.word	0x080031c0
 8002db0:	080031e0 	.word	0x080031e0
 8002db4:	080031a0 	.word	0x080031a0

08002db8 <_close_r>:
 8002db8:	b538      	push	{r3, r4, r5, lr}
 8002dba:	4d06      	ldr	r5, [pc, #24]	; (8002dd4 <_close_r+0x1c>)
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	4604      	mov	r4, r0
 8002dc0:	4608      	mov	r0, r1
 8002dc2:	602b      	str	r3, [r5, #0]
 8002dc4:	f7fd feb1 	bl	8000b2a <_close>
 8002dc8:	1c43      	adds	r3, r0, #1
 8002dca:	d102      	bne.n	8002dd2 <_close_r+0x1a>
 8002dcc:	682b      	ldr	r3, [r5, #0]
 8002dce:	b103      	cbz	r3, 8002dd2 <_close_r+0x1a>
 8002dd0:	6023      	str	r3, [r4, #0]
 8002dd2:	bd38      	pop	{r3, r4, r5, pc}
 8002dd4:	200000e4 	.word	0x200000e4

08002dd8 <__sflush_r>:
 8002dd8:	898a      	ldrh	r2, [r1, #12]
 8002dda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002dde:	4605      	mov	r5, r0
 8002de0:	0710      	lsls	r0, r2, #28
 8002de2:	460c      	mov	r4, r1
 8002de4:	d458      	bmi.n	8002e98 <__sflush_r+0xc0>
 8002de6:	684b      	ldr	r3, [r1, #4]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	dc05      	bgt.n	8002df8 <__sflush_r+0x20>
 8002dec:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	dc02      	bgt.n	8002df8 <__sflush_r+0x20>
 8002df2:	2000      	movs	r0, #0
 8002df4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002df8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002dfa:	2e00      	cmp	r6, #0
 8002dfc:	d0f9      	beq.n	8002df2 <__sflush_r+0x1a>
 8002dfe:	2300      	movs	r3, #0
 8002e00:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002e04:	682f      	ldr	r7, [r5, #0]
 8002e06:	602b      	str	r3, [r5, #0]
 8002e08:	d032      	beq.n	8002e70 <__sflush_r+0x98>
 8002e0a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002e0c:	89a3      	ldrh	r3, [r4, #12]
 8002e0e:	075a      	lsls	r2, r3, #29
 8002e10:	d505      	bpl.n	8002e1e <__sflush_r+0x46>
 8002e12:	6863      	ldr	r3, [r4, #4]
 8002e14:	1ac0      	subs	r0, r0, r3
 8002e16:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002e18:	b10b      	cbz	r3, 8002e1e <__sflush_r+0x46>
 8002e1a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002e1c:	1ac0      	subs	r0, r0, r3
 8002e1e:	2300      	movs	r3, #0
 8002e20:	4602      	mov	r2, r0
 8002e22:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002e24:	6a21      	ldr	r1, [r4, #32]
 8002e26:	4628      	mov	r0, r5
 8002e28:	47b0      	blx	r6
 8002e2a:	1c43      	adds	r3, r0, #1
 8002e2c:	89a3      	ldrh	r3, [r4, #12]
 8002e2e:	d106      	bne.n	8002e3e <__sflush_r+0x66>
 8002e30:	6829      	ldr	r1, [r5, #0]
 8002e32:	291d      	cmp	r1, #29
 8002e34:	d82c      	bhi.n	8002e90 <__sflush_r+0xb8>
 8002e36:	4a2a      	ldr	r2, [pc, #168]	; (8002ee0 <__sflush_r+0x108>)
 8002e38:	40ca      	lsrs	r2, r1
 8002e3a:	07d6      	lsls	r6, r2, #31
 8002e3c:	d528      	bpl.n	8002e90 <__sflush_r+0xb8>
 8002e3e:	2200      	movs	r2, #0
 8002e40:	6062      	str	r2, [r4, #4]
 8002e42:	04d9      	lsls	r1, r3, #19
 8002e44:	6922      	ldr	r2, [r4, #16]
 8002e46:	6022      	str	r2, [r4, #0]
 8002e48:	d504      	bpl.n	8002e54 <__sflush_r+0x7c>
 8002e4a:	1c42      	adds	r2, r0, #1
 8002e4c:	d101      	bne.n	8002e52 <__sflush_r+0x7a>
 8002e4e:	682b      	ldr	r3, [r5, #0]
 8002e50:	b903      	cbnz	r3, 8002e54 <__sflush_r+0x7c>
 8002e52:	6560      	str	r0, [r4, #84]	; 0x54
 8002e54:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002e56:	602f      	str	r7, [r5, #0]
 8002e58:	2900      	cmp	r1, #0
 8002e5a:	d0ca      	beq.n	8002df2 <__sflush_r+0x1a>
 8002e5c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002e60:	4299      	cmp	r1, r3
 8002e62:	d002      	beq.n	8002e6a <__sflush_r+0x92>
 8002e64:	4628      	mov	r0, r5
 8002e66:	f000 f8fd 	bl	8003064 <_free_r>
 8002e6a:	2000      	movs	r0, #0
 8002e6c:	6360      	str	r0, [r4, #52]	; 0x34
 8002e6e:	e7c1      	b.n	8002df4 <__sflush_r+0x1c>
 8002e70:	6a21      	ldr	r1, [r4, #32]
 8002e72:	2301      	movs	r3, #1
 8002e74:	4628      	mov	r0, r5
 8002e76:	47b0      	blx	r6
 8002e78:	1c41      	adds	r1, r0, #1
 8002e7a:	d1c7      	bne.n	8002e0c <__sflush_r+0x34>
 8002e7c:	682b      	ldr	r3, [r5, #0]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d0c4      	beq.n	8002e0c <__sflush_r+0x34>
 8002e82:	2b1d      	cmp	r3, #29
 8002e84:	d001      	beq.n	8002e8a <__sflush_r+0xb2>
 8002e86:	2b16      	cmp	r3, #22
 8002e88:	d101      	bne.n	8002e8e <__sflush_r+0xb6>
 8002e8a:	602f      	str	r7, [r5, #0]
 8002e8c:	e7b1      	b.n	8002df2 <__sflush_r+0x1a>
 8002e8e:	89a3      	ldrh	r3, [r4, #12]
 8002e90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e94:	81a3      	strh	r3, [r4, #12]
 8002e96:	e7ad      	b.n	8002df4 <__sflush_r+0x1c>
 8002e98:	690f      	ldr	r7, [r1, #16]
 8002e9a:	2f00      	cmp	r7, #0
 8002e9c:	d0a9      	beq.n	8002df2 <__sflush_r+0x1a>
 8002e9e:	0793      	lsls	r3, r2, #30
 8002ea0:	680e      	ldr	r6, [r1, #0]
 8002ea2:	bf08      	it	eq
 8002ea4:	694b      	ldreq	r3, [r1, #20]
 8002ea6:	600f      	str	r7, [r1, #0]
 8002ea8:	bf18      	it	ne
 8002eaa:	2300      	movne	r3, #0
 8002eac:	eba6 0807 	sub.w	r8, r6, r7
 8002eb0:	608b      	str	r3, [r1, #8]
 8002eb2:	f1b8 0f00 	cmp.w	r8, #0
 8002eb6:	dd9c      	ble.n	8002df2 <__sflush_r+0x1a>
 8002eb8:	6a21      	ldr	r1, [r4, #32]
 8002eba:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002ebc:	4643      	mov	r3, r8
 8002ebe:	463a      	mov	r2, r7
 8002ec0:	4628      	mov	r0, r5
 8002ec2:	47b0      	blx	r6
 8002ec4:	2800      	cmp	r0, #0
 8002ec6:	dc06      	bgt.n	8002ed6 <__sflush_r+0xfe>
 8002ec8:	89a3      	ldrh	r3, [r4, #12]
 8002eca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002ece:	81a3      	strh	r3, [r4, #12]
 8002ed0:	f04f 30ff 	mov.w	r0, #4294967295
 8002ed4:	e78e      	b.n	8002df4 <__sflush_r+0x1c>
 8002ed6:	4407      	add	r7, r0
 8002ed8:	eba8 0800 	sub.w	r8, r8, r0
 8002edc:	e7e9      	b.n	8002eb2 <__sflush_r+0xda>
 8002ede:	bf00      	nop
 8002ee0:	20400001 	.word	0x20400001

08002ee4 <_fflush_r>:
 8002ee4:	b538      	push	{r3, r4, r5, lr}
 8002ee6:	690b      	ldr	r3, [r1, #16]
 8002ee8:	4605      	mov	r5, r0
 8002eea:	460c      	mov	r4, r1
 8002eec:	b913      	cbnz	r3, 8002ef4 <_fflush_r+0x10>
 8002eee:	2500      	movs	r5, #0
 8002ef0:	4628      	mov	r0, r5
 8002ef2:	bd38      	pop	{r3, r4, r5, pc}
 8002ef4:	b118      	cbz	r0, 8002efe <_fflush_r+0x1a>
 8002ef6:	6983      	ldr	r3, [r0, #24]
 8002ef8:	b90b      	cbnz	r3, 8002efe <_fflush_r+0x1a>
 8002efa:	f7ff fa15 	bl	8002328 <__sinit>
 8002efe:	4b14      	ldr	r3, [pc, #80]	; (8002f50 <_fflush_r+0x6c>)
 8002f00:	429c      	cmp	r4, r3
 8002f02:	d11b      	bne.n	8002f3c <_fflush_r+0x58>
 8002f04:	686c      	ldr	r4, [r5, #4]
 8002f06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d0ef      	beq.n	8002eee <_fflush_r+0xa>
 8002f0e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002f10:	07d0      	lsls	r0, r2, #31
 8002f12:	d404      	bmi.n	8002f1e <_fflush_r+0x3a>
 8002f14:	0599      	lsls	r1, r3, #22
 8002f16:	d402      	bmi.n	8002f1e <_fflush_r+0x3a>
 8002f18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002f1a:	f7ff faa3 	bl	8002464 <__retarget_lock_acquire_recursive>
 8002f1e:	4628      	mov	r0, r5
 8002f20:	4621      	mov	r1, r4
 8002f22:	f7ff ff59 	bl	8002dd8 <__sflush_r>
 8002f26:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002f28:	07da      	lsls	r2, r3, #31
 8002f2a:	4605      	mov	r5, r0
 8002f2c:	d4e0      	bmi.n	8002ef0 <_fflush_r+0xc>
 8002f2e:	89a3      	ldrh	r3, [r4, #12]
 8002f30:	059b      	lsls	r3, r3, #22
 8002f32:	d4dd      	bmi.n	8002ef0 <_fflush_r+0xc>
 8002f34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002f36:	f7ff fa96 	bl	8002466 <__retarget_lock_release_recursive>
 8002f3a:	e7d9      	b.n	8002ef0 <_fflush_r+0xc>
 8002f3c:	4b05      	ldr	r3, [pc, #20]	; (8002f54 <_fflush_r+0x70>)
 8002f3e:	429c      	cmp	r4, r3
 8002f40:	d101      	bne.n	8002f46 <_fflush_r+0x62>
 8002f42:	68ac      	ldr	r4, [r5, #8]
 8002f44:	e7df      	b.n	8002f06 <_fflush_r+0x22>
 8002f46:	4b04      	ldr	r3, [pc, #16]	; (8002f58 <_fflush_r+0x74>)
 8002f48:	429c      	cmp	r4, r3
 8002f4a:	bf08      	it	eq
 8002f4c:	68ec      	ldreq	r4, [r5, #12]
 8002f4e:	e7da      	b.n	8002f06 <_fflush_r+0x22>
 8002f50:	080031c0 	.word	0x080031c0
 8002f54:	080031e0 	.word	0x080031e0
 8002f58:	080031a0 	.word	0x080031a0

08002f5c <_lseek_r>:
 8002f5c:	b538      	push	{r3, r4, r5, lr}
 8002f5e:	4d07      	ldr	r5, [pc, #28]	; (8002f7c <_lseek_r+0x20>)
 8002f60:	4604      	mov	r4, r0
 8002f62:	4608      	mov	r0, r1
 8002f64:	4611      	mov	r1, r2
 8002f66:	2200      	movs	r2, #0
 8002f68:	602a      	str	r2, [r5, #0]
 8002f6a:	461a      	mov	r2, r3
 8002f6c:	f7fd fe04 	bl	8000b78 <_lseek>
 8002f70:	1c43      	adds	r3, r0, #1
 8002f72:	d102      	bne.n	8002f7a <_lseek_r+0x1e>
 8002f74:	682b      	ldr	r3, [r5, #0]
 8002f76:	b103      	cbz	r3, 8002f7a <_lseek_r+0x1e>
 8002f78:	6023      	str	r3, [r4, #0]
 8002f7a:	bd38      	pop	{r3, r4, r5, pc}
 8002f7c:	200000e4 	.word	0x200000e4

08002f80 <__swhatbuf_r>:
 8002f80:	b570      	push	{r4, r5, r6, lr}
 8002f82:	460e      	mov	r6, r1
 8002f84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002f88:	2900      	cmp	r1, #0
 8002f8a:	b096      	sub	sp, #88	; 0x58
 8002f8c:	4614      	mov	r4, r2
 8002f8e:	461d      	mov	r5, r3
 8002f90:	da08      	bge.n	8002fa4 <__swhatbuf_r+0x24>
 8002f92:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8002f96:	2200      	movs	r2, #0
 8002f98:	602a      	str	r2, [r5, #0]
 8002f9a:	061a      	lsls	r2, r3, #24
 8002f9c:	d410      	bmi.n	8002fc0 <__swhatbuf_r+0x40>
 8002f9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002fa2:	e00e      	b.n	8002fc2 <__swhatbuf_r+0x42>
 8002fa4:	466a      	mov	r2, sp
 8002fa6:	f000 f8bb 	bl	8003120 <_fstat_r>
 8002faa:	2800      	cmp	r0, #0
 8002fac:	dbf1      	blt.n	8002f92 <__swhatbuf_r+0x12>
 8002fae:	9a01      	ldr	r2, [sp, #4]
 8002fb0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002fb4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8002fb8:	425a      	negs	r2, r3
 8002fba:	415a      	adcs	r2, r3
 8002fbc:	602a      	str	r2, [r5, #0]
 8002fbe:	e7ee      	b.n	8002f9e <__swhatbuf_r+0x1e>
 8002fc0:	2340      	movs	r3, #64	; 0x40
 8002fc2:	2000      	movs	r0, #0
 8002fc4:	6023      	str	r3, [r4, #0]
 8002fc6:	b016      	add	sp, #88	; 0x58
 8002fc8:	bd70      	pop	{r4, r5, r6, pc}
	...

08002fcc <__smakebuf_r>:
 8002fcc:	898b      	ldrh	r3, [r1, #12]
 8002fce:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002fd0:	079d      	lsls	r5, r3, #30
 8002fd2:	4606      	mov	r6, r0
 8002fd4:	460c      	mov	r4, r1
 8002fd6:	d507      	bpl.n	8002fe8 <__smakebuf_r+0x1c>
 8002fd8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002fdc:	6023      	str	r3, [r4, #0]
 8002fde:	6123      	str	r3, [r4, #16]
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	6163      	str	r3, [r4, #20]
 8002fe4:	b002      	add	sp, #8
 8002fe6:	bd70      	pop	{r4, r5, r6, pc}
 8002fe8:	ab01      	add	r3, sp, #4
 8002fea:	466a      	mov	r2, sp
 8002fec:	f7ff ffc8 	bl	8002f80 <__swhatbuf_r>
 8002ff0:	9900      	ldr	r1, [sp, #0]
 8002ff2:	4605      	mov	r5, r0
 8002ff4:	4630      	mov	r0, r6
 8002ff6:	f7ff fa57 	bl	80024a8 <_malloc_r>
 8002ffa:	b948      	cbnz	r0, 8003010 <__smakebuf_r+0x44>
 8002ffc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003000:	059a      	lsls	r2, r3, #22
 8003002:	d4ef      	bmi.n	8002fe4 <__smakebuf_r+0x18>
 8003004:	f023 0303 	bic.w	r3, r3, #3
 8003008:	f043 0302 	orr.w	r3, r3, #2
 800300c:	81a3      	strh	r3, [r4, #12]
 800300e:	e7e3      	b.n	8002fd8 <__smakebuf_r+0xc>
 8003010:	4b0d      	ldr	r3, [pc, #52]	; (8003048 <__smakebuf_r+0x7c>)
 8003012:	62b3      	str	r3, [r6, #40]	; 0x28
 8003014:	89a3      	ldrh	r3, [r4, #12]
 8003016:	6020      	str	r0, [r4, #0]
 8003018:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800301c:	81a3      	strh	r3, [r4, #12]
 800301e:	9b00      	ldr	r3, [sp, #0]
 8003020:	6163      	str	r3, [r4, #20]
 8003022:	9b01      	ldr	r3, [sp, #4]
 8003024:	6120      	str	r0, [r4, #16]
 8003026:	b15b      	cbz	r3, 8003040 <__smakebuf_r+0x74>
 8003028:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800302c:	4630      	mov	r0, r6
 800302e:	f000 f889 	bl	8003144 <_isatty_r>
 8003032:	b128      	cbz	r0, 8003040 <__smakebuf_r+0x74>
 8003034:	89a3      	ldrh	r3, [r4, #12]
 8003036:	f023 0303 	bic.w	r3, r3, #3
 800303a:	f043 0301 	orr.w	r3, r3, #1
 800303e:	81a3      	strh	r3, [r4, #12]
 8003040:	89a0      	ldrh	r0, [r4, #12]
 8003042:	4305      	orrs	r5, r0
 8003044:	81a5      	strh	r5, [r4, #12]
 8003046:	e7cd      	b.n	8002fe4 <__smakebuf_r+0x18>
 8003048:	080022c1 	.word	0x080022c1

0800304c <__malloc_lock>:
 800304c:	4801      	ldr	r0, [pc, #4]	; (8003054 <__malloc_lock+0x8>)
 800304e:	f7ff ba09 	b.w	8002464 <__retarget_lock_acquire_recursive>
 8003052:	bf00      	nop
 8003054:	200000d8 	.word	0x200000d8

08003058 <__malloc_unlock>:
 8003058:	4801      	ldr	r0, [pc, #4]	; (8003060 <__malloc_unlock+0x8>)
 800305a:	f7ff ba04 	b.w	8002466 <__retarget_lock_release_recursive>
 800305e:	bf00      	nop
 8003060:	200000d8 	.word	0x200000d8

08003064 <_free_r>:
 8003064:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003066:	2900      	cmp	r1, #0
 8003068:	d044      	beq.n	80030f4 <_free_r+0x90>
 800306a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800306e:	9001      	str	r0, [sp, #4]
 8003070:	2b00      	cmp	r3, #0
 8003072:	f1a1 0404 	sub.w	r4, r1, #4
 8003076:	bfb8      	it	lt
 8003078:	18e4      	addlt	r4, r4, r3
 800307a:	f7ff ffe7 	bl	800304c <__malloc_lock>
 800307e:	4a1e      	ldr	r2, [pc, #120]	; (80030f8 <_free_r+0x94>)
 8003080:	9801      	ldr	r0, [sp, #4]
 8003082:	6813      	ldr	r3, [r2, #0]
 8003084:	b933      	cbnz	r3, 8003094 <_free_r+0x30>
 8003086:	6063      	str	r3, [r4, #4]
 8003088:	6014      	str	r4, [r2, #0]
 800308a:	b003      	add	sp, #12
 800308c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003090:	f7ff bfe2 	b.w	8003058 <__malloc_unlock>
 8003094:	42a3      	cmp	r3, r4
 8003096:	d908      	bls.n	80030aa <_free_r+0x46>
 8003098:	6825      	ldr	r5, [r4, #0]
 800309a:	1961      	adds	r1, r4, r5
 800309c:	428b      	cmp	r3, r1
 800309e:	bf01      	itttt	eq
 80030a0:	6819      	ldreq	r1, [r3, #0]
 80030a2:	685b      	ldreq	r3, [r3, #4]
 80030a4:	1949      	addeq	r1, r1, r5
 80030a6:	6021      	streq	r1, [r4, #0]
 80030a8:	e7ed      	b.n	8003086 <_free_r+0x22>
 80030aa:	461a      	mov	r2, r3
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	b10b      	cbz	r3, 80030b4 <_free_r+0x50>
 80030b0:	42a3      	cmp	r3, r4
 80030b2:	d9fa      	bls.n	80030aa <_free_r+0x46>
 80030b4:	6811      	ldr	r1, [r2, #0]
 80030b6:	1855      	adds	r5, r2, r1
 80030b8:	42a5      	cmp	r5, r4
 80030ba:	d10b      	bne.n	80030d4 <_free_r+0x70>
 80030bc:	6824      	ldr	r4, [r4, #0]
 80030be:	4421      	add	r1, r4
 80030c0:	1854      	adds	r4, r2, r1
 80030c2:	42a3      	cmp	r3, r4
 80030c4:	6011      	str	r1, [r2, #0]
 80030c6:	d1e0      	bne.n	800308a <_free_r+0x26>
 80030c8:	681c      	ldr	r4, [r3, #0]
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	6053      	str	r3, [r2, #4]
 80030ce:	4421      	add	r1, r4
 80030d0:	6011      	str	r1, [r2, #0]
 80030d2:	e7da      	b.n	800308a <_free_r+0x26>
 80030d4:	d902      	bls.n	80030dc <_free_r+0x78>
 80030d6:	230c      	movs	r3, #12
 80030d8:	6003      	str	r3, [r0, #0]
 80030da:	e7d6      	b.n	800308a <_free_r+0x26>
 80030dc:	6825      	ldr	r5, [r4, #0]
 80030de:	1961      	adds	r1, r4, r5
 80030e0:	428b      	cmp	r3, r1
 80030e2:	bf04      	itt	eq
 80030e4:	6819      	ldreq	r1, [r3, #0]
 80030e6:	685b      	ldreq	r3, [r3, #4]
 80030e8:	6063      	str	r3, [r4, #4]
 80030ea:	bf04      	itt	eq
 80030ec:	1949      	addeq	r1, r1, r5
 80030ee:	6021      	streq	r1, [r4, #0]
 80030f0:	6054      	str	r4, [r2, #4]
 80030f2:	e7ca      	b.n	800308a <_free_r+0x26>
 80030f4:	b003      	add	sp, #12
 80030f6:	bd30      	pop	{r4, r5, pc}
 80030f8:	200000dc 	.word	0x200000dc

080030fc <_read_r>:
 80030fc:	b538      	push	{r3, r4, r5, lr}
 80030fe:	4d07      	ldr	r5, [pc, #28]	; (800311c <_read_r+0x20>)
 8003100:	4604      	mov	r4, r0
 8003102:	4608      	mov	r0, r1
 8003104:	4611      	mov	r1, r2
 8003106:	2200      	movs	r2, #0
 8003108:	602a      	str	r2, [r5, #0]
 800310a:	461a      	mov	r2, r3
 800310c:	f7fd fcd4 	bl	8000ab8 <_read>
 8003110:	1c43      	adds	r3, r0, #1
 8003112:	d102      	bne.n	800311a <_read_r+0x1e>
 8003114:	682b      	ldr	r3, [r5, #0]
 8003116:	b103      	cbz	r3, 800311a <_read_r+0x1e>
 8003118:	6023      	str	r3, [r4, #0]
 800311a:	bd38      	pop	{r3, r4, r5, pc}
 800311c:	200000e4 	.word	0x200000e4

08003120 <_fstat_r>:
 8003120:	b538      	push	{r3, r4, r5, lr}
 8003122:	4d07      	ldr	r5, [pc, #28]	; (8003140 <_fstat_r+0x20>)
 8003124:	2300      	movs	r3, #0
 8003126:	4604      	mov	r4, r0
 8003128:	4608      	mov	r0, r1
 800312a:	4611      	mov	r1, r2
 800312c:	602b      	str	r3, [r5, #0]
 800312e:	f7fd fd08 	bl	8000b42 <_fstat>
 8003132:	1c43      	adds	r3, r0, #1
 8003134:	d102      	bne.n	800313c <_fstat_r+0x1c>
 8003136:	682b      	ldr	r3, [r5, #0]
 8003138:	b103      	cbz	r3, 800313c <_fstat_r+0x1c>
 800313a:	6023      	str	r3, [r4, #0]
 800313c:	bd38      	pop	{r3, r4, r5, pc}
 800313e:	bf00      	nop
 8003140:	200000e4 	.word	0x200000e4

08003144 <_isatty_r>:
 8003144:	b538      	push	{r3, r4, r5, lr}
 8003146:	4d06      	ldr	r5, [pc, #24]	; (8003160 <_isatty_r+0x1c>)
 8003148:	2300      	movs	r3, #0
 800314a:	4604      	mov	r4, r0
 800314c:	4608      	mov	r0, r1
 800314e:	602b      	str	r3, [r5, #0]
 8003150:	f7fd fd07 	bl	8000b62 <_isatty>
 8003154:	1c43      	adds	r3, r0, #1
 8003156:	d102      	bne.n	800315e <_isatty_r+0x1a>
 8003158:	682b      	ldr	r3, [r5, #0]
 800315a:	b103      	cbz	r3, 800315e <_isatty_r+0x1a>
 800315c:	6023      	str	r3, [r4, #0]
 800315e:	bd38      	pop	{r3, r4, r5, pc}
 8003160:	200000e4 	.word	0x200000e4

08003164 <_init>:
 8003164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003166:	bf00      	nop
 8003168:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800316a:	bc08      	pop	{r3}
 800316c:	469e      	mov	lr, r3
 800316e:	4770      	bx	lr

08003170 <_fini>:
 8003170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003172:	bf00      	nop
 8003174:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003176:	bc08      	pop	{r3}
 8003178:	469e      	mov	lr, r3
 800317a:	4770      	bx	lr
