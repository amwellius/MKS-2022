
cv10.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000048d4  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000238  08004a84  08004a84  00014a84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004cbc  08004cbc  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08004cbc  08004cbc  00014cbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004cc4  08004cc4  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004cc4  08004cc4  00014cc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004cc8  08004cc8  00014cc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08004ccc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          000000c4  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000138  20000138  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d657  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001bc5  00000000  00000000  0002d6fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c50  00000000  00000000  0002f2c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000ba8  00000000  00000000  0002ff10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024220  00000000  00000000  00030ab8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d91a  00000000  00000000  00054cd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000db74a  00000000  00000000  000625f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013dd3c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003f2c  00000000  00000000  0013dd8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000074 	.word	0x20000074
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08004a6c 	.word	0x08004a6c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000078 	.word	0x20000078
 80001ec:	08004a6c 	.word	0x08004a6c

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000594:	b480      	push	{r7}
 8000596:	b083      	sub	sp, #12
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800059c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005a0:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80005a4:	f003 0301 	and.w	r3, r3, #1
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d013      	beq.n	80005d4 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80005ac:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005b0:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80005b4:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d00b      	beq.n	80005d4 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80005bc:	e000      	b.n	80005c0 <ITM_SendChar+0x2c>
    {
      __NOP();
 80005be:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80005c0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d0f9      	beq.n	80005be <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80005ca:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005ce:	687a      	ldr	r2, [r7, #4]
 80005d0:	b2d2      	uxtb	r2, r2
 80005d2:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80005d4:	687b      	ldr	r3, [r7, #4]
}
 80005d6:	4618      	mov	r0, r3
 80005d8:	370c      	adds	r7, #12
 80005da:	46bd      	mov	sp, r7
 80005dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e0:	4770      	bx	lr

080005e2 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
{
 80005e2:	b580      	push	{r7, lr}
 80005e4:	b082      	sub	sp, #8
 80005e6:	af00      	add	r7, sp, #0
 80005e8:	6078      	str	r0, [r7, #4]
	ITM_SendChar(ch);
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	4618      	mov	r0, r3
 80005ee:	f7ff ffd1 	bl	8000594 <ITM_SendChar>
	return 0;
 80005f2:	2300      	movs	r3, #0
}
 80005f4:	4618      	mov	r0, r3
 80005f6:	3708      	adds	r7, #8
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}

080005fc <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000600:	f000 fcce 	bl	8000fa0 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000604:	f000 f832 	bl	800066c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000608:	f000 f912 	bl	8000830 <MX_GPIO_Init>
	MX_USART3_UART_Init();
 800060c:	f000 f8e6 	bl	80007dc <MX_USART3_UART_Init>
	MX_TIM3_Init();
 8000610:	f000 f896 	bl	8000740 <MX_TIM3_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim3);
 8000614:	4810      	ldr	r0, [pc, #64]	; (8000658 <main+0x5c>)
 8000616:	f001 fd31 	bl	800207c <HAL_TIM_Base_Start_IT>
	printf(" test - OK\n\r");
 800061a:	4810      	ldr	r0, [pc, #64]	; (800065c <main+0x60>)
 800061c:	f002 fc54 	bl	8002ec8 <iprintf>
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		//HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
		//HAL_Delay(120);
		scanf("%d", key);
 8000620:	4b0f      	ldr	r3, [pc, #60]	; (8000660 <main+0x64>)
 8000622:	781b      	ldrb	r3, [r3, #0]
 8000624:	b25b      	sxtb	r3, r3
 8000626:	4619      	mov	r1, r3
 8000628:	480e      	ldr	r0, [pc, #56]	; (8000664 <main+0x68>)
 800062a:	f002 fc65 	bl	8002ef8 <iscanf>
		if (key != -1) {
 800062e:	4b0c      	ldr	r3, [pc, #48]	; (8000660 <main+0x64>)
 8000630:	781b      	ldrb	r3, [r3, #0]
 8000632:	b25b      	sxtb	r3, r3
 8000634:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000638:	d009      	beq.n	800064e <main+0x52>
			printf("pressed %d\n", key);
 800063a:	4b09      	ldr	r3, [pc, #36]	; (8000660 <main+0x64>)
 800063c:	781b      	ldrb	r3, [r3, #0]
 800063e:	b25b      	sxtb	r3, r3
 8000640:	4619      	mov	r1, r3
 8000642:	4809      	ldr	r0, [pc, #36]	; (8000668 <main+0x6c>)
 8000644:	f002 fc40 	bl	8002ec8 <iprintf>
			key = -1;
 8000648:	4b05      	ldr	r3, [pc, #20]	; (8000660 <main+0x64>)
 800064a:	22ff      	movs	r2, #255	; 0xff
 800064c:	701a      	strb	r2, [r3, #0]
		}
		HAL_Delay(200);
 800064e:	20c8      	movs	r0, #200	; 0xc8
 8000650:	f000 fd18 	bl	8001084 <HAL_Delay>
		scanf("%d", key);
 8000654:	e7e4      	b.n	8000620 <main+0x24>
 8000656:	bf00      	nop
 8000658:	20000090 	.word	0x20000090
 800065c:	08004a84 	.word	0x08004a84
 8000660:	20000000 	.word	0x20000000
 8000664:	08004a94 	.word	0x08004a94
 8000668:	08004a98 	.word	0x08004a98

0800066c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b094      	sub	sp, #80	; 0x50
 8000670:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000672:	f107 0320 	add.w	r3, r7, #32
 8000676:	2230      	movs	r2, #48	; 0x30
 8000678:	2100      	movs	r1, #0
 800067a:	4618      	mov	r0, r3
 800067c:	f002 fc1c 	bl	8002eb8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000680:	f107 030c 	add.w	r3, r7, #12
 8000684:	2200      	movs	r2, #0
 8000686:	601a      	str	r2, [r3, #0]
 8000688:	605a      	str	r2, [r3, #4]
 800068a:	609a      	str	r2, [r3, #8]
 800068c:	60da      	str	r2, [r3, #12]
 800068e:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000690:	2300      	movs	r3, #0
 8000692:	60bb      	str	r3, [r7, #8]
 8000694:	4b28      	ldr	r3, [pc, #160]	; (8000738 <SystemClock_Config+0xcc>)
 8000696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000698:	4a27      	ldr	r2, [pc, #156]	; (8000738 <SystemClock_Config+0xcc>)
 800069a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800069e:	6413      	str	r3, [r2, #64]	; 0x40
 80006a0:	4b25      	ldr	r3, [pc, #148]	; (8000738 <SystemClock_Config+0xcc>)
 80006a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006a8:	60bb      	str	r3, [r7, #8]
 80006aa:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006ac:	2300      	movs	r3, #0
 80006ae:	607b      	str	r3, [r7, #4]
 80006b0:	4b22      	ldr	r3, [pc, #136]	; (800073c <SystemClock_Config+0xd0>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	4a21      	ldr	r2, [pc, #132]	; (800073c <SystemClock_Config+0xd0>)
 80006b6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006ba:	6013      	str	r3, [r2, #0]
 80006bc:	4b1f      	ldr	r3, [pc, #124]	; (800073c <SystemClock_Config+0xd0>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006c4:	607b      	str	r3, [r7, #4]
 80006c6:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006c8:	2301      	movs	r3, #1
 80006ca:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80006cc:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80006d0:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006d2:	2302      	movs	r3, #2
 80006d4:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006d6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006da:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 4;
 80006dc:	2304      	movs	r3, #4
 80006de:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 168;
 80006e0:	23a8      	movs	r3, #168	; 0xa8
 80006e2:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006e4:	2302      	movs	r3, #2
 80006e6:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 80006e8:	2307      	movs	r3, #7
 80006ea:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ec:	f107 0320 	add.w	r3, r7, #32
 80006f0:	4618      	mov	r0, r3
 80006f2:	f000 ffdb 	bl	80016ac <HAL_RCC_OscConfig>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d001      	beq.n	8000700 <SystemClock_Config+0x94>
	{
		Error_Handler();
 80006fc:	f000 fa9e 	bl	8000c3c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000700:	230f      	movs	r3, #15
 8000702:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000704:	2302      	movs	r3, #2
 8000706:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000708:	2300      	movs	r3, #0
 800070a:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800070c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000710:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000712:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000716:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000718:	f107 030c 	add.w	r3, r7, #12
 800071c:	2105      	movs	r1, #5
 800071e:	4618      	mov	r0, r3
 8000720:	f001 fa3c 	bl	8001b9c <HAL_RCC_ClockConfig>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <SystemClock_Config+0xc2>
	{
		Error_Handler();
 800072a:	f000 fa87 	bl	8000c3c <Error_Handler>
	}
}
 800072e:	bf00      	nop
 8000730:	3750      	adds	r7, #80	; 0x50
 8000732:	46bd      	mov	sp, r7
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	40023800 	.word	0x40023800
 800073c:	40007000 	.word	0x40007000

08000740 <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b086      	sub	sp, #24
 8000744:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000746:	f107 0308 	add.w	r3, r7, #8
 800074a:	2200      	movs	r2, #0
 800074c:	601a      	str	r2, [r3, #0]
 800074e:	605a      	str	r2, [r3, #4]
 8000750:	609a      	str	r2, [r3, #8]
 8000752:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000754:	463b      	mov	r3, r7
 8000756:	2200      	movs	r2, #0
 8000758:	601a      	str	r2, [r3, #0]
 800075a:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 800075c:	4b1d      	ldr	r3, [pc, #116]	; (80007d4 <MX_TIM3_Init+0x94>)
 800075e:	4a1e      	ldr	r2, [pc, #120]	; (80007d8 <MX_TIM3_Init+0x98>)
 8000760:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 8399;
 8000762:	4b1c      	ldr	r3, [pc, #112]	; (80007d4 <MX_TIM3_Init+0x94>)
 8000764:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8000768:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800076a:	4b1a      	ldr	r3, [pc, #104]	; (80007d4 <MX_TIM3_Init+0x94>)
 800076c:	2200      	movs	r2, #0
 800076e:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 99;
 8000770:	4b18      	ldr	r3, [pc, #96]	; (80007d4 <MX_TIM3_Init+0x94>)
 8000772:	2263      	movs	r2, #99	; 0x63
 8000774:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000776:	4b17      	ldr	r3, [pc, #92]	; (80007d4 <MX_TIM3_Init+0x94>)
 8000778:	2200      	movs	r2, #0
 800077a:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800077c:	4b15      	ldr	r3, [pc, #84]	; (80007d4 <MX_TIM3_Init+0x94>)
 800077e:	2280      	movs	r2, #128	; 0x80
 8000780:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000782:	4814      	ldr	r0, [pc, #80]	; (80007d4 <MX_TIM3_Init+0x94>)
 8000784:	f001 fc2a 	bl	8001fdc <HAL_TIM_Base_Init>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d001      	beq.n	8000792 <MX_TIM3_Init+0x52>
	{
		Error_Handler();
 800078e:	f000 fa55 	bl	8000c3c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000792:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000796:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000798:	f107 0308 	add.w	r3, r7, #8
 800079c:	4619      	mov	r1, r3
 800079e:	480d      	ldr	r0, [pc, #52]	; (80007d4 <MX_TIM3_Init+0x94>)
 80007a0:	f001 fde4 	bl	800236c <HAL_TIM_ConfigClockSource>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <MX_TIM3_Init+0x6e>
	{
		Error_Handler();
 80007aa:	f000 fa47 	bl	8000c3c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007ae:	2300      	movs	r3, #0
 80007b0:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007b2:	2300      	movs	r3, #0
 80007b4:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80007b6:	463b      	mov	r3, r7
 80007b8:	4619      	mov	r1, r3
 80007ba:	4806      	ldr	r0, [pc, #24]	; (80007d4 <MX_TIM3_Init+0x94>)
 80007bc:	f002 f800 	bl	80027c0 <HAL_TIMEx_MasterConfigSynchronization>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <MX_TIM3_Init+0x8a>
	{
		Error_Handler();
 80007c6:	f000 fa39 	bl	8000c3c <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 80007ca:	bf00      	nop
 80007cc:	3718      	adds	r7, #24
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	20000090 	.word	0x20000090
 80007d8:	40000400 	.word	0x40000400

080007dc <MX_USART3_UART_Init>:
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 80007e0:	4b11      	ldr	r3, [pc, #68]	; (8000828 <MX_USART3_UART_Init+0x4c>)
 80007e2:	4a12      	ldr	r2, [pc, #72]	; (800082c <MX_USART3_UART_Init+0x50>)
 80007e4:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 80007e6:	4b10      	ldr	r3, [pc, #64]	; (8000828 <MX_USART3_UART_Init+0x4c>)
 80007e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007ec:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80007ee:	4b0e      	ldr	r3, [pc, #56]	; (8000828 <MX_USART3_UART_Init+0x4c>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 80007f4:	4b0c      	ldr	r3, [pc, #48]	; (8000828 <MX_USART3_UART_Init+0x4c>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 80007fa:	4b0b      	ldr	r3, [pc, #44]	; (8000828 <MX_USART3_UART_Init+0x4c>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8000800:	4b09      	ldr	r3, [pc, #36]	; (8000828 <MX_USART3_UART_Init+0x4c>)
 8000802:	220c      	movs	r2, #12
 8000804:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000806:	4b08      	ldr	r3, [pc, #32]	; (8000828 <MX_USART3_UART_Init+0x4c>)
 8000808:	2200      	movs	r2, #0
 800080a:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800080c:	4b06      	ldr	r3, [pc, #24]	; (8000828 <MX_USART3_UART_Init+0x4c>)
 800080e:	2200      	movs	r2, #0
 8000810:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart3) != HAL_OK)
 8000812:	4805      	ldr	r0, [pc, #20]	; (8000828 <MX_USART3_UART_Init+0x4c>)
 8000814:	f002 f864 	bl	80028e0 <HAL_UART_Init>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <MX_USART3_UART_Init+0x46>
	{
		Error_Handler();
 800081e:	f000 fa0d 	bl	8000c3c <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 8000822:	bf00      	nop
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	200000d8 	.word	0x200000d8
 800082c:	40004800 	.word	0x40004800

08000830 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b08e      	sub	sp, #56	; 0x38
 8000834:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000836:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800083a:	2200      	movs	r2, #0
 800083c:	601a      	str	r2, [r3, #0]
 800083e:	605a      	str	r2, [r3, #4]
 8000840:	609a      	str	r2, [r3, #8]
 8000842:	60da      	str	r2, [r3, #12]
 8000844:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8000846:	2300      	movs	r3, #0
 8000848:	623b      	str	r3, [r7, #32]
 800084a:	4ba1      	ldr	r3, [pc, #644]	; (8000ad0 <MX_GPIO_Init+0x2a0>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084e:	4aa0      	ldr	r2, [pc, #640]	; (8000ad0 <MX_GPIO_Init+0x2a0>)
 8000850:	f043 0310 	orr.w	r3, r3, #16
 8000854:	6313      	str	r3, [r2, #48]	; 0x30
 8000856:	4b9e      	ldr	r3, [pc, #632]	; (8000ad0 <MX_GPIO_Init+0x2a0>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	f003 0310 	and.w	r3, r3, #16
 800085e:	623b      	str	r3, [r7, #32]
 8000860:	6a3b      	ldr	r3, [r7, #32]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000862:	2300      	movs	r3, #0
 8000864:	61fb      	str	r3, [r7, #28]
 8000866:	4b9a      	ldr	r3, [pc, #616]	; (8000ad0 <MX_GPIO_Init+0x2a0>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086a:	4a99      	ldr	r2, [pc, #612]	; (8000ad0 <MX_GPIO_Init+0x2a0>)
 800086c:	f043 0304 	orr.w	r3, r3, #4
 8000870:	6313      	str	r3, [r2, #48]	; 0x30
 8000872:	4b97      	ldr	r3, [pc, #604]	; (8000ad0 <MX_GPIO_Init+0x2a0>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000876:	f003 0304 	and.w	r3, r3, #4
 800087a:	61fb      	str	r3, [r7, #28]
 800087c:	69fb      	ldr	r3, [r7, #28]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 800087e:	2300      	movs	r3, #0
 8000880:	61bb      	str	r3, [r7, #24]
 8000882:	4b93      	ldr	r3, [pc, #588]	; (8000ad0 <MX_GPIO_Init+0x2a0>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000886:	4a92      	ldr	r2, [pc, #584]	; (8000ad0 <MX_GPIO_Init+0x2a0>)
 8000888:	f043 0320 	orr.w	r3, r3, #32
 800088c:	6313      	str	r3, [r2, #48]	; 0x30
 800088e:	4b90      	ldr	r3, [pc, #576]	; (8000ad0 <MX_GPIO_Init+0x2a0>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000892:	f003 0320 	and.w	r3, r3, #32
 8000896:	61bb      	str	r3, [r7, #24]
 8000898:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800089a:	2300      	movs	r3, #0
 800089c:	617b      	str	r3, [r7, #20]
 800089e:	4b8c      	ldr	r3, [pc, #560]	; (8000ad0 <MX_GPIO_Init+0x2a0>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a2:	4a8b      	ldr	r2, [pc, #556]	; (8000ad0 <MX_GPIO_Init+0x2a0>)
 80008a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008a8:	6313      	str	r3, [r2, #48]	; 0x30
 80008aa:	4b89      	ldr	r3, [pc, #548]	; (8000ad0 <MX_GPIO_Init+0x2a0>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008b2:	617b      	str	r3, [r7, #20]
 80008b4:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80008b6:	2300      	movs	r3, #0
 80008b8:	613b      	str	r3, [r7, #16]
 80008ba:	4b85      	ldr	r3, [pc, #532]	; (8000ad0 <MX_GPIO_Init+0x2a0>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008be:	4a84      	ldr	r2, [pc, #528]	; (8000ad0 <MX_GPIO_Init+0x2a0>)
 80008c0:	f043 0301 	orr.w	r3, r3, #1
 80008c4:	6313      	str	r3, [r2, #48]	; 0x30
 80008c6:	4b82      	ldr	r3, [pc, #520]	; (8000ad0 <MX_GPIO_Init+0x2a0>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ca:	f003 0301 	and.w	r3, r3, #1
 80008ce:	613b      	str	r3, [r7, #16]
 80008d0:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80008d2:	2300      	movs	r3, #0
 80008d4:	60fb      	str	r3, [r7, #12]
 80008d6:	4b7e      	ldr	r3, [pc, #504]	; (8000ad0 <MX_GPIO_Init+0x2a0>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008da:	4a7d      	ldr	r2, [pc, #500]	; (8000ad0 <MX_GPIO_Init+0x2a0>)
 80008dc:	f043 0302 	orr.w	r3, r3, #2
 80008e0:	6313      	str	r3, [r2, #48]	; 0x30
 80008e2:	4b7b      	ldr	r3, [pc, #492]	; (8000ad0 <MX_GPIO_Init+0x2a0>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e6:	f003 0302 	and.w	r3, r3, #2
 80008ea:	60fb      	str	r3, [r7, #12]
 80008ec:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 80008ee:	2300      	movs	r3, #0
 80008f0:	60bb      	str	r3, [r7, #8]
 80008f2:	4b77      	ldr	r3, [pc, #476]	; (8000ad0 <MX_GPIO_Init+0x2a0>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f6:	4a76      	ldr	r2, [pc, #472]	; (8000ad0 <MX_GPIO_Init+0x2a0>)
 80008f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008fc:	6313      	str	r3, [r2, #48]	; 0x30
 80008fe:	4b74      	ldr	r3, [pc, #464]	; (8000ad0 <MX_GPIO_Init+0x2a0>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000902:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000906:	60bb      	str	r3, [r7, #8]
 8000908:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800090a:	2300      	movs	r3, #0
 800090c:	607b      	str	r3, [r7, #4]
 800090e:	4b70      	ldr	r3, [pc, #448]	; (8000ad0 <MX_GPIO_Init+0x2a0>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000912:	4a6f      	ldr	r2, [pc, #444]	; (8000ad0 <MX_GPIO_Init+0x2a0>)
 8000914:	f043 0308 	orr.w	r3, r3, #8
 8000918:	6313      	str	r3, [r2, #48]	; 0x30
 800091a:	4b6d      	ldr	r3, [pc, #436]	; (8000ad0 <MX_GPIO_Init+0x2a0>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091e:	f003 0308 	and.w	r3, r3, #8
 8000922:	607b      	str	r3, [r7, #4]
 8000924:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOF, Row3_Pin|Row4_Pin|Row2_Pin, GPIO_PIN_RESET);
 8000926:	2200      	movs	r2, #0
 8000928:	f44f 7160 	mov.w	r1, #896	; 0x380
 800092c:	4869      	ldr	r0, [pc, #420]	; (8000ad4 <MX_GPIO_Init+0x2a4>)
 800092e:	f000 fea3 	bl	8001678 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000932:	2200      	movs	r2, #0
 8000934:	f244 0181 	movw	r1, #16513	; 0x4081
 8000938:	4867      	ldr	r0, [pc, #412]	; (8000ad8 <MX_GPIO_Init+0x2a8>)
 800093a:	f000 fe9d 	bl	8001678 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOG, Row1_Pin|USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800093e:	2200      	movs	r2, #0
 8000940:	2142      	movs	r1, #66	; 0x42
 8000942:	4866      	ldr	r0, [pc, #408]	; (8000adc <MX_GPIO_Init+0x2ac>)
 8000944:	f000 fe98 	bl	8001678 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : Col1_Pin Col4_Pin Col3_Pin Col2_Pin */
	GPIO_InitStruct.Pin = Col1_Pin|Col4_Pin|Col3_Pin|Col2_Pin;
 8000948:	2378      	movs	r3, #120	; 0x78
 800094a:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800094c:	2300      	movs	r3, #0
 800094e:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000950:	2301      	movs	r3, #1
 8000952:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000954:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000958:	4619      	mov	r1, r3
 800095a:	4861      	ldr	r0, [pc, #388]	; (8000ae0 <MX_GPIO_Init+0x2b0>)
 800095c:	f000 fcc8 	bl	80012f0 <HAL_GPIO_Init>

	/*Configure GPIO pin : USER_Btn_Pin */
	GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000960:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000964:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000966:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800096a:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096c:	2300      	movs	r3, #0
 800096e:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000970:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000974:	4619      	mov	r1, r3
 8000976:	485b      	ldr	r0, [pc, #364]	; (8000ae4 <MX_GPIO_Init+0x2b4>)
 8000978:	f000 fcba 	bl	80012f0 <HAL_GPIO_Init>

	/*Configure GPIO pins : Row3_Pin Row4_Pin Row2_Pin */
	GPIO_InitStruct.Pin = Row3_Pin|Row4_Pin|Row2_Pin;
 800097c:	f44f 7360 	mov.w	r3, #896	; 0x380
 8000980:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000982:	2311      	movs	r3, #17
 8000984:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000986:	2300      	movs	r3, #0
 8000988:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800098a:	2300      	movs	r3, #0
 800098c:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800098e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000992:	4619      	mov	r1, r3
 8000994:	484f      	ldr	r0, [pc, #316]	; (8000ad4 <MX_GPIO_Init+0x2a4>)
 8000996:	f000 fcab 	bl	80012f0 <HAL_GPIO_Init>

	/*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
	GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800099a:	2332      	movs	r3, #50	; 0x32
 800099c:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800099e:	2302      	movs	r3, #2
 80009a0:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a2:	2300      	movs	r3, #0
 80009a4:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009a6:	2303      	movs	r3, #3
 80009a8:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80009aa:	230b      	movs	r3, #11
 80009ac:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009b2:	4619      	mov	r1, r3
 80009b4:	484b      	ldr	r0, [pc, #300]	; (8000ae4 <MX_GPIO_Init+0x2b4>)
 80009b6:	f000 fc9b 	bl	80012f0 <HAL_GPIO_Init>

	/*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
	GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80009ba:	2386      	movs	r3, #134	; 0x86
 80009bc:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009be:	2302      	movs	r3, #2
 80009c0:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c2:	2300      	movs	r3, #0
 80009c4:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009c6:	2303      	movs	r3, #3
 80009c8:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80009ca:	230b      	movs	r3, #11
 80009cc:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009d2:	4619      	mov	r1, r3
 80009d4:	4844      	ldr	r0, [pc, #272]	; (8000ae8 <MX_GPIO_Init+0x2b8>)
 80009d6:	f000 fc8b 	bl	80012f0 <HAL_GPIO_Init>

	/*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
	GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80009da:	f244 0381 	movw	r3, #16513	; 0x4081
 80009de:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009e0:	2301      	movs	r3, #1
 80009e2:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e4:	2300      	movs	r3, #0
 80009e6:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e8:	2300      	movs	r3, #0
 80009ea:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009f0:	4619      	mov	r1, r3
 80009f2:	4839      	ldr	r0, [pc, #228]	; (8000ad8 <MX_GPIO_Init+0x2a8>)
 80009f4:	f000 fc7c 	bl	80012f0 <HAL_GPIO_Init>

	/*Configure GPIO pin : Row1_Pin */
	GPIO_InitStruct.Pin = Row1_Pin;
 80009f8:	2302      	movs	r3, #2
 80009fa:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80009fc:	2311      	movs	r3, #17
 80009fe:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a00:	2300      	movs	r3, #0
 8000a02:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a04:	2300      	movs	r3, #0
 8000a06:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(Row1_GPIO_Port, &GPIO_InitStruct);
 8000a08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	4833      	ldr	r0, [pc, #204]	; (8000adc <MX_GPIO_Init+0x2ac>)
 8000a10:	f000 fc6e 	bl	80012f0 <HAL_GPIO_Init>

	/*Configure GPIO pin : RMII_TXD1_Pin */
	GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000a14:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a18:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a1a:	2302      	movs	r3, #2
 8000a1c:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a22:	2303      	movs	r3, #3
 8000a24:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a26:	230b      	movs	r3, #11
 8000a28:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000a2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a2e:	4619      	mov	r1, r3
 8000a30:	4829      	ldr	r0, [pc, #164]	; (8000ad8 <MX_GPIO_Init+0x2a8>)
 8000a32:	f000 fc5d 	bl	80012f0 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_PowerSwitchOn_Pin */
	GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000a36:	2340      	movs	r3, #64	; 0x40
 8000a38:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a42:	2300      	movs	r3, #0
 8000a44:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	4823      	ldr	r0, [pc, #140]	; (8000adc <MX_GPIO_Init+0x2ac>)
 8000a4e:	f000 fc4f 	bl	80012f0 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_OverCurrent_Pin */
	GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000a52:	2380      	movs	r3, #128	; 0x80
 8000a54:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a56:	2300      	movs	r3, #0
 8000a58:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a62:	4619      	mov	r1, r3
 8000a64:	481d      	ldr	r0, [pc, #116]	; (8000adc <MX_GPIO_Init+0x2ac>)
 8000a66:	f000 fc43 	bl	80012f0 <HAL_GPIO_Init>

	/*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
	GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000a6a:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000a6e:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a70:	2302      	movs	r3, #2
 8000a72:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a74:	2300      	movs	r3, #0
 8000a76:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a78:	2303      	movs	r3, #3
 8000a7a:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000a7c:	230a      	movs	r3, #10
 8000a7e:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a84:	4619      	mov	r1, r3
 8000a86:	4818      	ldr	r0, [pc, #96]	; (8000ae8 <MX_GPIO_Init+0x2b8>)
 8000a88:	f000 fc32 	bl	80012f0 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_VBUS_Pin */
	GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000a8c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a90:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a92:	2300      	movs	r3, #0
 8000a94:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a96:	2300      	movs	r3, #0
 8000a98:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000a9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	4811      	ldr	r0, [pc, #68]	; (8000ae8 <MX_GPIO_Init+0x2b8>)
 8000aa2:	f000 fc25 	bl	80012f0 <HAL_GPIO_Init>

	/*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
	GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000aa6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000aaa:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aac:	2302      	movs	r3, #2
 8000aae:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ab4:	2303      	movs	r3, #3
 8000ab6:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ab8:	230b      	movs	r3, #11
 8000aba:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000abc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4806      	ldr	r0, [pc, #24]	; (8000adc <MX_GPIO_Init+0x2ac>)
 8000ac4:	f000 fc14 	bl	80012f0 <HAL_GPIO_Init>

}
 8000ac8:	bf00      	nop
 8000aca:	3738      	adds	r7, #56	; 0x38
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	40023800 	.word	0x40023800
 8000ad4:	40021400 	.word	0x40021400
 8000ad8:	40020400 	.word	0x40020400
 8000adc:	40021800 	.word	0x40021800
 8000ae0:	40021000 	.word	0x40021000
 8000ae4:	40020800 	.word	0x40020800
 8000ae8:	40020000 	.word	0x40020000

08000aec <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b082      	sub	sp, #8
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
			{ 1, 2, 3, 21 },
			{ 4, 5, 6, 22 },
			{ 7, 8, 9, 23 },
			{ 11, 0, 12, 24 },
	};
	if (key == -1) {
 8000af4:	4b4b      	ldr	r3, [pc, #300]	; (8000c24 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8000af6:	781b      	ldrb	r3, [r3, #0]
 8000af8:	b25b      	sxtb	r3, r3
 8000afa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000afe:	d142      	bne.n	8000b86 <HAL_TIM_PeriodElapsedCallback+0x9a>
		if (HAL_GPIO_ReadPin(Col1_GPIO_Port, Col1_Pin) == GPIO_PIN_RESET) key = keyboard[row][0];
 8000b00:	2108      	movs	r1, #8
 8000b02:	4849      	ldr	r0, [pc, #292]	; (8000c28 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8000b04:	f000 fda0 	bl	8001648 <HAL_GPIO_ReadPin>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d108      	bne.n	8000b20 <HAL_TIM_PeriodElapsedCallback+0x34>
 8000b0e:	4b47      	ldr	r3, [pc, #284]	; (8000c2c <HAL_TIM_PeriodElapsedCallback+0x140>)
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	4a47      	ldr	r2, [pc, #284]	; (8000c30 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8000b14:	011b      	lsls	r3, r3, #4
 8000b16:	4413      	add	r3, r2
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	b25a      	sxtb	r2, r3
 8000b1c:	4b41      	ldr	r3, [pc, #260]	; (8000c24 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8000b1e:	701a      	strb	r2, [r3, #0]
		if (HAL_GPIO_ReadPin(Col2_GPIO_Port, Col2_Pin) == GPIO_PIN_RESET) key = keyboard[row][1];
 8000b20:	2140      	movs	r1, #64	; 0x40
 8000b22:	4841      	ldr	r0, [pc, #260]	; (8000c28 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8000b24:	f000 fd90 	bl	8001648 <HAL_GPIO_ReadPin>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d109      	bne.n	8000b42 <HAL_TIM_PeriodElapsedCallback+0x56>
 8000b2e:	4b3f      	ldr	r3, [pc, #252]	; (8000c2c <HAL_TIM_PeriodElapsedCallback+0x140>)
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	4a3f      	ldr	r2, [pc, #252]	; (8000c30 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8000b34:	011b      	lsls	r3, r3, #4
 8000b36:	4413      	add	r3, r2
 8000b38:	3304      	adds	r3, #4
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	b25a      	sxtb	r2, r3
 8000b3e:	4b39      	ldr	r3, [pc, #228]	; (8000c24 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8000b40:	701a      	strb	r2, [r3, #0]
		if (HAL_GPIO_ReadPin(Col3_GPIO_Port, Col3_Pin) == GPIO_PIN_RESET) key = keyboard[row][2];
 8000b42:	2120      	movs	r1, #32
 8000b44:	4838      	ldr	r0, [pc, #224]	; (8000c28 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8000b46:	f000 fd7f 	bl	8001648 <HAL_GPIO_ReadPin>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d109      	bne.n	8000b64 <HAL_TIM_PeriodElapsedCallback+0x78>
 8000b50:	4b36      	ldr	r3, [pc, #216]	; (8000c2c <HAL_TIM_PeriodElapsedCallback+0x140>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	4a36      	ldr	r2, [pc, #216]	; (8000c30 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8000b56:	011b      	lsls	r3, r3, #4
 8000b58:	4413      	add	r3, r2
 8000b5a:	3308      	adds	r3, #8
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	b25a      	sxtb	r2, r3
 8000b60:	4b30      	ldr	r3, [pc, #192]	; (8000c24 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8000b62:	701a      	strb	r2, [r3, #0]
		if (HAL_GPIO_ReadPin(Col4_GPIO_Port, Col4_Pin) == GPIO_PIN_RESET) key = keyboard[row][3];
 8000b64:	2110      	movs	r1, #16
 8000b66:	4830      	ldr	r0, [pc, #192]	; (8000c28 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8000b68:	f000 fd6e 	bl	8001648 <HAL_GPIO_ReadPin>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d109      	bne.n	8000b86 <HAL_TIM_PeriodElapsedCallback+0x9a>
 8000b72:	4b2e      	ldr	r3, [pc, #184]	; (8000c2c <HAL_TIM_PeriodElapsedCallback+0x140>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	4a2e      	ldr	r2, [pc, #184]	; (8000c30 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8000b78:	011b      	lsls	r3, r3, #4
 8000b7a:	4413      	add	r3, r2
 8000b7c:	330c      	adds	r3, #12
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	b25a      	sxtb	r2, r3
 8000b82:	4b28      	ldr	r3, [pc, #160]	; (8000c24 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8000b84:	701a      	strb	r2, [r3, #0]

	}
	HAL_GPIO_WritePin(Row1_GPIO_Port, Row1_Pin, GPIO_PIN_SET);
 8000b86:	2201      	movs	r2, #1
 8000b88:	2102      	movs	r1, #2
 8000b8a:	482a      	ldr	r0, [pc, #168]	; (8000c34 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8000b8c:	f000 fd74 	bl	8001678 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Row2_GPIO_Port, Row2_Pin, GPIO_PIN_SET);
 8000b90:	2201      	movs	r2, #1
 8000b92:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b96:	4828      	ldr	r0, [pc, #160]	; (8000c38 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8000b98:	f000 fd6e 	bl	8001678 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Row3_GPIO_Port, Row3_Pin, GPIO_PIN_SET);
 8000b9c:	2201      	movs	r2, #1
 8000b9e:	2180      	movs	r1, #128	; 0x80
 8000ba0:	4825      	ldr	r0, [pc, #148]	; (8000c38 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8000ba2:	f000 fd69 	bl	8001678 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Row4_GPIO_Port, Row4_Pin, GPIO_PIN_SET);
 8000ba6:	2201      	movs	r2, #1
 8000ba8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bac:	4822      	ldr	r0, [pc, #136]	; (8000c38 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8000bae:	f000 fd63 	bl	8001678 <HAL_GPIO_WritePin>
	switch (row) {
 8000bb2:	4b1e      	ldr	r3, [pc, #120]	; (8000c2c <HAL_TIM_PeriodElapsedCallback+0x140>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	2b03      	cmp	r3, #3
 8000bb8:	d830      	bhi.n	8000c1c <HAL_TIM_PeriodElapsedCallback+0x130>
 8000bba:	a201      	add	r2, pc, #4	; (adr r2, 8000bc0 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8000bbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bc0:	08000bd1 	.word	0x08000bd1
 8000bc4:	08000be5 	.word	0x08000be5
 8000bc8:	08000bf7 	.word	0x08000bf7
 8000bcc:	08000c0b 	.word	0x08000c0b
	case 0: row = 1; HAL_GPIO_WritePin(Row2_GPIO_Port, Row2_Pin, GPIO_PIN_RESET); break;
 8000bd0:	4b16      	ldr	r3, [pc, #88]	; (8000c2c <HAL_TIM_PeriodElapsedCallback+0x140>)
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	601a      	str	r2, [r3, #0]
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000bdc:	4816      	ldr	r0, [pc, #88]	; (8000c38 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8000bde:	f000 fd4b 	bl	8001678 <HAL_GPIO_WritePin>
 8000be2:	e01b      	b.n	8000c1c <HAL_TIM_PeriodElapsedCallback+0x130>
	case 1: row = 2; HAL_GPIO_WritePin(Row3_GPIO_Port, Row3_Pin, GPIO_PIN_RESET); break;
 8000be4:	4b11      	ldr	r3, [pc, #68]	; (8000c2c <HAL_TIM_PeriodElapsedCallback+0x140>)
 8000be6:	2202      	movs	r2, #2
 8000be8:	601a      	str	r2, [r3, #0]
 8000bea:	2200      	movs	r2, #0
 8000bec:	2180      	movs	r1, #128	; 0x80
 8000bee:	4812      	ldr	r0, [pc, #72]	; (8000c38 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8000bf0:	f000 fd42 	bl	8001678 <HAL_GPIO_WritePin>
 8000bf4:	e012      	b.n	8000c1c <HAL_TIM_PeriodElapsedCallback+0x130>
	case 2: row = 3; HAL_GPIO_WritePin(Row4_GPIO_Port, Row4_Pin, GPIO_PIN_RESET); break;
 8000bf6:	4b0d      	ldr	r3, [pc, #52]	; (8000c2c <HAL_TIM_PeriodElapsedCallback+0x140>)
 8000bf8:	2203      	movs	r2, #3
 8000bfa:	601a      	str	r2, [r3, #0]
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c02:	480d      	ldr	r0, [pc, #52]	; (8000c38 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8000c04:	f000 fd38 	bl	8001678 <HAL_GPIO_WritePin>
 8000c08:	e008      	b.n	8000c1c <HAL_TIM_PeriodElapsedCallback+0x130>
	case 3: row = 0; HAL_GPIO_WritePin(Row1_GPIO_Port, Row1_Pin, GPIO_PIN_RESET); break;
 8000c0a:	4b08      	ldr	r3, [pc, #32]	; (8000c2c <HAL_TIM_PeriodElapsedCallback+0x140>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	601a      	str	r2, [r3, #0]
 8000c10:	2200      	movs	r2, #0
 8000c12:	2102      	movs	r1, #2
 8000c14:	4807      	ldr	r0, [pc, #28]	; (8000c34 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8000c16:	f000 fd2f 	bl	8001678 <HAL_GPIO_WritePin>
 8000c1a:	bf00      	nop

	}
}
 8000c1c:	bf00      	nop
 8000c1e:	3708      	adds	r7, #8
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	20000000 	.word	0x20000000
 8000c28:	40021000 	.word	0x40021000
 8000c2c:	2000011c 	.word	0x2000011c
 8000c30:	08004ab0 	.word	0x08004ab0
 8000c34:	40021800 	.word	0x40021800
 8000c38:	40021400 	.word	0x40021400

08000c3c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c40:	b672      	cpsid	i
}
 8000c42:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000c44:	e7fe      	b.n	8000c44 <Error_Handler+0x8>
	...

08000c48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	b083      	sub	sp, #12
 8000c4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c4e:	2300      	movs	r3, #0
 8000c50:	607b      	str	r3, [r7, #4]
 8000c52:	4b10      	ldr	r3, [pc, #64]	; (8000c94 <HAL_MspInit+0x4c>)
 8000c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c56:	4a0f      	ldr	r2, [pc, #60]	; (8000c94 <HAL_MspInit+0x4c>)
 8000c58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c5c:	6453      	str	r3, [r2, #68]	; 0x44
 8000c5e:	4b0d      	ldr	r3, [pc, #52]	; (8000c94 <HAL_MspInit+0x4c>)
 8000c60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c66:	607b      	str	r3, [r7, #4]
 8000c68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	603b      	str	r3, [r7, #0]
 8000c6e:	4b09      	ldr	r3, [pc, #36]	; (8000c94 <HAL_MspInit+0x4c>)
 8000c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c72:	4a08      	ldr	r2, [pc, #32]	; (8000c94 <HAL_MspInit+0x4c>)
 8000c74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c78:	6413      	str	r3, [r2, #64]	; 0x40
 8000c7a:	4b06      	ldr	r3, [pc, #24]	; (8000c94 <HAL_MspInit+0x4c>)
 8000c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c82:	603b      	str	r3, [r7, #0]
 8000c84:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c86:	bf00      	nop
 8000c88:	370c      	adds	r7, #12
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c90:	4770      	bx	lr
 8000c92:	bf00      	nop
 8000c94:	40023800 	.word	0x40023800

08000c98 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b084      	sub	sp, #16
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	4a0e      	ldr	r2, [pc, #56]	; (8000ce0 <HAL_TIM_Base_MspInit+0x48>)
 8000ca6:	4293      	cmp	r3, r2
 8000ca8:	d115      	bne.n	8000cd6 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000caa:	2300      	movs	r3, #0
 8000cac:	60fb      	str	r3, [r7, #12]
 8000cae:	4b0d      	ldr	r3, [pc, #52]	; (8000ce4 <HAL_TIM_Base_MspInit+0x4c>)
 8000cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cb2:	4a0c      	ldr	r2, [pc, #48]	; (8000ce4 <HAL_TIM_Base_MspInit+0x4c>)
 8000cb4:	f043 0302 	orr.w	r3, r3, #2
 8000cb8:	6413      	str	r3, [r2, #64]	; 0x40
 8000cba:	4b0a      	ldr	r3, [pc, #40]	; (8000ce4 <HAL_TIM_Base_MspInit+0x4c>)
 8000cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cbe:	f003 0302 	and.w	r3, r3, #2
 8000cc2:	60fb      	str	r3, [r7, #12]
 8000cc4:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	2100      	movs	r1, #0
 8000cca:	201d      	movs	r0, #29
 8000ccc:	f000 fad9 	bl	8001282 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000cd0:	201d      	movs	r0, #29
 8000cd2:	f000 faf2 	bl	80012ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000cd6:	bf00      	nop
 8000cd8:	3710      	adds	r7, #16
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	40000400 	.word	0x40000400
 8000ce4:	40023800 	.word	0x40023800

08000ce8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b08a      	sub	sp, #40	; 0x28
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf0:	f107 0314 	add.w	r3, r7, #20
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	601a      	str	r2, [r3, #0]
 8000cf8:	605a      	str	r2, [r3, #4]
 8000cfa:	609a      	str	r2, [r3, #8]
 8000cfc:	60da      	str	r2, [r3, #12]
 8000cfe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	4a19      	ldr	r2, [pc, #100]	; (8000d6c <HAL_UART_MspInit+0x84>)
 8000d06:	4293      	cmp	r3, r2
 8000d08:	d12c      	bne.n	8000d64 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	613b      	str	r3, [r7, #16]
 8000d0e:	4b18      	ldr	r3, [pc, #96]	; (8000d70 <HAL_UART_MspInit+0x88>)
 8000d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d12:	4a17      	ldr	r2, [pc, #92]	; (8000d70 <HAL_UART_MspInit+0x88>)
 8000d14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d18:	6413      	str	r3, [r2, #64]	; 0x40
 8000d1a:	4b15      	ldr	r3, [pc, #84]	; (8000d70 <HAL_UART_MspInit+0x88>)
 8000d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d1e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d22:	613b      	str	r3, [r7, #16]
 8000d24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d26:	2300      	movs	r3, #0
 8000d28:	60fb      	str	r3, [r7, #12]
 8000d2a:	4b11      	ldr	r3, [pc, #68]	; (8000d70 <HAL_UART_MspInit+0x88>)
 8000d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2e:	4a10      	ldr	r2, [pc, #64]	; (8000d70 <HAL_UART_MspInit+0x88>)
 8000d30:	f043 0308 	orr.w	r3, r3, #8
 8000d34:	6313      	str	r3, [r2, #48]	; 0x30
 8000d36:	4b0e      	ldr	r3, [pc, #56]	; (8000d70 <HAL_UART_MspInit+0x88>)
 8000d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3a:	f003 0308 	and.w	r3, r3, #8
 8000d3e:	60fb      	str	r3, [r7, #12]
 8000d40:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000d42:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d48:	2302      	movs	r3, #2
 8000d4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d50:	2303      	movs	r3, #3
 8000d52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000d54:	2307      	movs	r3, #7
 8000d56:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d58:	f107 0314 	add.w	r3, r7, #20
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	4805      	ldr	r0, [pc, #20]	; (8000d74 <HAL_UART_MspInit+0x8c>)
 8000d60:	f000 fac6 	bl	80012f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000d64:	bf00      	nop
 8000d66:	3728      	adds	r7, #40	; 0x28
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	40004800 	.word	0x40004800
 8000d70:	40023800 	.word	0x40023800
 8000d74:	40020c00 	.word	0x40020c00

08000d78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d7c:	e7fe      	b.n	8000d7c <NMI_Handler+0x4>

08000d7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d7e:	b480      	push	{r7}
 8000d80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d82:	e7fe      	b.n	8000d82 <HardFault_Handler+0x4>

08000d84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d88:	e7fe      	b.n	8000d88 <MemManage_Handler+0x4>

08000d8a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d8a:	b480      	push	{r7}
 8000d8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d8e:	e7fe      	b.n	8000d8e <BusFault_Handler+0x4>

08000d90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d94:	e7fe      	b.n	8000d94 <UsageFault_Handler+0x4>

08000d96 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d96:	b480      	push	{r7}
 8000d98:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d9a:	bf00      	nop
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da2:	4770      	bx	lr

08000da4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000da8:	bf00      	nop
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr

08000db2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000db2:	b480      	push	{r7}
 8000db4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000db6:	bf00      	nop
 8000db8:	46bd      	mov	sp, r7
 8000dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbe:	4770      	bx	lr

08000dc0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dc4:	f000 f93e 	bl	8001044 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dc8:	bf00      	nop
 8000dca:	bd80      	pop	{r7, pc}

08000dcc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000dd0:	4802      	ldr	r0, [pc, #8]	; (8000ddc <TIM3_IRQHandler+0x10>)
 8000dd2:	f001 f9c3 	bl	800215c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000dd6:	bf00      	nop
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	20000090 	.word	0x20000090

08000de0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b086      	sub	sp, #24
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	60f8      	str	r0, [r7, #12]
 8000de8:	60b9      	str	r1, [r7, #8]
 8000dea:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dec:	2300      	movs	r3, #0
 8000dee:	617b      	str	r3, [r7, #20]
 8000df0:	e00a      	b.n	8000e08 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000df2:	f3af 8000 	nop.w
 8000df6:	4601      	mov	r1, r0
 8000df8:	68bb      	ldr	r3, [r7, #8]
 8000dfa:	1c5a      	adds	r2, r3, #1
 8000dfc:	60ba      	str	r2, [r7, #8]
 8000dfe:	b2ca      	uxtb	r2, r1
 8000e00:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e02:	697b      	ldr	r3, [r7, #20]
 8000e04:	3301      	adds	r3, #1
 8000e06:	617b      	str	r3, [r7, #20]
 8000e08:	697a      	ldr	r2, [r7, #20]
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	429a      	cmp	r2, r3
 8000e0e:	dbf0      	blt.n	8000df2 <_read+0x12>
	}

return len;
 8000e10:	687b      	ldr	r3, [r7, #4]
}
 8000e12:	4618      	mov	r0, r3
 8000e14:	3718      	adds	r7, #24
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}

08000e1a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e1a:	b580      	push	{r7, lr}
 8000e1c:	b086      	sub	sp, #24
 8000e1e:	af00      	add	r7, sp, #0
 8000e20:	60f8      	str	r0, [r7, #12]
 8000e22:	60b9      	str	r1, [r7, #8]
 8000e24:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e26:	2300      	movs	r3, #0
 8000e28:	617b      	str	r3, [r7, #20]
 8000e2a:	e009      	b.n	8000e40 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000e2c:	68bb      	ldr	r3, [r7, #8]
 8000e2e:	1c5a      	adds	r2, r3, #1
 8000e30:	60ba      	str	r2, [r7, #8]
 8000e32:	781b      	ldrb	r3, [r3, #0]
 8000e34:	4618      	mov	r0, r3
 8000e36:	f7ff fbd4 	bl	80005e2 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e3a:	697b      	ldr	r3, [r7, #20]
 8000e3c:	3301      	adds	r3, #1
 8000e3e:	617b      	str	r3, [r7, #20]
 8000e40:	697a      	ldr	r2, [r7, #20]
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	429a      	cmp	r2, r3
 8000e46:	dbf1      	blt.n	8000e2c <_write+0x12>
	}
	return len;
 8000e48:	687b      	ldr	r3, [r7, #4]
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	3718      	adds	r7, #24
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}

08000e52 <_close>:

int _close(int file)
{
 8000e52:	b480      	push	{r7}
 8000e54:	b083      	sub	sp, #12
 8000e56:	af00      	add	r7, sp, #0
 8000e58:	6078      	str	r0, [r7, #4]
	return -1;
 8000e5a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e5e:	4618      	mov	r0, r3
 8000e60:	370c      	adds	r7, #12
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr

08000e6a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e6a:	b480      	push	{r7}
 8000e6c:	b083      	sub	sp, #12
 8000e6e:	af00      	add	r7, sp, #0
 8000e70:	6078      	str	r0, [r7, #4]
 8000e72:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e7a:	605a      	str	r2, [r3, #4]
	return 0;
 8000e7c:	2300      	movs	r3, #0
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	370c      	adds	r7, #12
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr

08000e8a <_isatty>:

int _isatty(int file)
{
 8000e8a:	b480      	push	{r7}
 8000e8c:	b083      	sub	sp, #12
 8000e8e:	af00      	add	r7, sp, #0
 8000e90:	6078      	str	r0, [r7, #4]
	return 1;
 8000e92:	2301      	movs	r3, #1
}
 8000e94:	4618      	mov	r0, r3
 8000e96:	370c      	adds	r7, #12
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9e:	4770      	bx	lr

08000ea0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b085      	sub	sp, #20
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	60f8      	str	r0, [r7, #12]
 8000ea8:	60b9      	str	r1, [r7, #8]
 8000eaa:	607a      	str	r2, [r7, #4]
	return 0;
 8000eac:	2300      	movs	r3, #0
}
 8000eae:	4618      	mov	r0, r3
 8000eb0:	3714      	adds	r7, #20
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr
	...

08000ebc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b086      	sub	sp, #24
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ec4:	4a14      	ldr	r2, [pc, #80]	; (8000f18 <_sbrk+0x5c>)
 8000ec6:	4b15      	ldr	r3, [pc, #84]	; (8000f1c <_sbrk+0x60>)
 8000ec8:	1ad3      	subs	r3, r2, r3
 8000eca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ecc:	697b      	ldr	r3, [r7, #20]
 8000ece:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ed0:	4b13      	ldr	r3, [pc, #76]	; (8000f20 <_sbrk+0x64>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d102      	bne.n	8000ede <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ed8:	4b11      	ldr	r3, [pc, #68]	; (8000f20 <_sbrk+0x64>)
 8000eda:	4a12      	ldr	r2, [pc, #72]	; (8000f24 <_sbrk+0x68>)
 8000edc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ede:	4b10      	ldr	r3, [pc, #64]	; (8000f20 <_sbrk+0x64>)
 8000ee0:	681a      	ldr	r2, [r3, #0]
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	4413      	add	r3, r2
 8000ee6:	693a      	ldr	r2, [r7, #16]
 8000ee8:	429a      	cmp	r2, r3
 8000eea:	d207      	bcs.n	8000efc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000eec:	f001 ffba 	bl	8002e64 <__errno>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	220c      	movs	r2, #12
 8000ef4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ef6:	f04f 33ff 	mov.w	r3, #4294967295
 8000efa:	e009      	b.n	8000f10 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000efc:	4b08      	ldr	r3, [pc, #32]	; (8000f20 <_sbrk+0x64>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f02:	4b07      	ldr	r3, [pc, #28]	; (8000f20 <_sbrk+0x64>)
 8000f04:	681a      	ldr	r2, [r3, #0]
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	4413      	add	r3, r2
 8000f0a:	4a05      	ldr	r2, [pc, #20]	; (8000f20 <_sbrk+0x64>)
 8000f0c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f0e:	68fb      	ldr	r3, [r7, #12]
}
 8000f10:	4618      	mov	r0, r3
 8000f12:	3718      	adds	r7, #24
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	20030000 	.word	0x20030000
 8000f1c:	00000400 	.word	0x00000400
 8000f20:	20000120 	.word	0x20000120
 8000f24:	20000138 	.word	0x20000138

08000f28 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f2c:	4b06      	ldr	r3, [pc, #24]	; (8000f48 <SystemInit+0x20>)
 8000f2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f32:	4a05      	ldr	r2, [pc, #20]	; (8000f48 <SystemInit+0x20>)
 8000f34:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f38:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f3c:	bf00      	nop
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop
 8000f48:	e000ed00 	.word	0xe000ed00

08000f4c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000f4c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f84 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f50:	480d      	ldr	r0, [pc, #52]	; (8000f88 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f52:	490e      	ldr	r1, [pc, #56]	; (8000f8c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f54:	4a0e      	ldr	r2, [pc, #56]	; (8000f90 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f58:	e002      	b.n	8000f60 <LoopCopyDataInit>

08000f5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f5e:	3304      	adds	r3, #4

08000f60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f64:	d3f9      	bcc.n	8000f5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f66:	4a0b      	ldr	r2, [pc, #44]	; (8000f94 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f68:	4c0b      	ldr	r4, [pc, #44]	; (8000f98 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f6c:	e001      	b.n	8000f72 <LoopFillZerobss>

08000f6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f70:	3204      	adds	r2, #4

08000f72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f74:	d3fb      	bcc.n	8000f6e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f76:	f7ff ffd7 	bl	8000f28 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f7a:	f001 ff79 	bl	8002e70 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f7e:	f7ff fb3d 	bl	80005fc <main>
  bx  lr    
 8000f82:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000f84:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000f88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f8c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000f90:	08004ccc 	.word	0x08004ccc
  ldr r2, =_sbss
 8000f94:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000f98:	20000138 	.word	0x20000138

08000f9c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f9c:	e7fe      	b.n	8000f9c <ADC_IRQHandler>
	...

08000fa0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000fa4:	4b0e      	ldr	r3, [pc, #56]	; (8000fe0 <HAL_Init+0x40>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4a0d      	ldr	r2, [pc, #52]	; (8000fe0 <HAL_Init+0x40>)
 8000faa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fb0:	4b0b      	ldr	r3, [pc, #44]	; (8000fe0 <HAL_Init+0x40>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4a0a      	ldr	r2, [pc, #40]	; (8000fe0 <HAL_Init+0x40>)
 8000fb6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fbc:	4b08      	ldr	r3, [pc, #32]	; (8000fe0 <HAL_Init+0x40>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4a07      	ldr	r2, [pc, #28]	; (8000fe0 <HAL_Init+0x40>)
 8000fc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fc6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fc8:	2003      	movs	r0, #3
 8000fca:	f000 f94f 	bl	800126c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fce:	2000      	movs	r0, #0
 8000fd0:	f000 f808 	bl	8000fe4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fd4:	f7ff fe38 	bl	8000c48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fd8:	2300      	movs	r3, #0
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	40023c00 	.word	0x40023c00

08000fe4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fec:	4b12      	ldr	r3, [pc, #72]	; (8001038 <HAL_InitTick+0x54>)
 8000fee:	681a      	ldr	r2, [r3, #0]
 8000ff0:	4b12      	ldr	r3, [pc, #72]	; (800103c <HAL_InitTick+0x58>)
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ffa:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ffe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001002:	4618      	mov	r0, r3
 8001004:	f000 f967 	bl	80012d6 <HAL_SYSTICK_Config>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d001      	beq.n	8001012 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800100e:	2301      	movs	r3, #1
 8001010:	e00e      	b.n	8001030 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	2b0f      	cmp	r3, #15
 8001016:	d80a      	bhi.n	800102e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001018:	2200      	movs	r2, #0
 800101a:	6879      	ldr	r1, [r7, #4]
 800101c:	f04f 30ff 	mov.w	r0, #4294967295
 8001020:	f000 f92f 	bl	8001282 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001024:	4a06      	ldr	r2, [pc, #24]	; (8001040 <HAL_InitTick+0x5c>)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800102a:	2300      	movs	r3, #0
 800102c:	e000      	b.n	8001030 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800102e:	2301      	movs	r3, #1
}
 8001030:	4618      	mov	r0, r3
 8001032:	3708      	adds	r7, #8
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	20000004 	.word	0x20000004
 800103c:	2000000c 	.word	0x2000000c
 8001040:	20000008 	.word	0x20000008

08001044 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001048:	4b06      	ldr	r3, [pc, #24]	; (8001064 <HAL_IncTick+0x20>)
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	461a      	mov	r2, r3
 800104e:	4b06      	ldr	r3, [pc, #24]	; (8001068 <HAL_IncTick+0x24>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	4413      	add	r3, r2
 8001054:	4a04      	ldr	r2, [pc, #16]	; (8001068 <HAL_IncTick+0x24>)
 8001056:	6013      	str	r3, [r2, #0]
}
 8001058:	bf00      	nop
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop
 8001064:	2000000c 	.word	0x2000000c
 8001068:	20000124 	.word	0x20000124

0800106c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
  return uwTick;
 8001070:	4b03      	ldr	r3, [pc, #12]	; (8001080 <HAL_GetTick+0x14>)
 8001072:	681b      	ldr	r3, [r3, #0]
}
 8001074:	4618      	mov	r0, r3
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr
 800107e:	bf00      	nop
 8001080:	20000124 	.word	0x20000124

08001084 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b084      	sub	sp, #16
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800108c:	f7ff ffee 	bl	800106c <HAL_GetTick>
 8001090:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	f1b3 3fff 	cmp.w	r3, #4294967295
 800109c:	d005      	beq.n	80010aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800109e:	4b0a      	ldr	r3, [pc, #40]	; (80010c8 <HAL_Delay+0x44>)
 80010a0:	781b      	ldrb	r3, [r3, #0]
 80010a2:	461a      	mov	r2, r3
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	4413      	add	r3, r2
 80010a8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80010aa:	bf00      	nop
 80010ac:	f7ff ffde 	bl	800106c <HAL_GetTick>
 80010b0:	4602      	mov	r2, r0
 80010b2:	68bb      	ldr	r3, [r7, #8]
 80010b4:	1ad3      	subs	r3, r2, r3
 80010b6:	68fa      	ldr	r2, [r7, #12]
 80010b8:	429a      	cmp	r2, r3
 80010ba:	d8f7      	bhi.n	80010ac <HAL_Delay+0x28>
  {
  }
}
 80010bc:	bf00      	nop
 80010be:	bf00      	nop
 80010c0:	3710      	adds	r7, #16
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	2000000c 	.word	0x2000000c

080010cc <__NVIC_SetPriorityGrouping>:
{
 80010cc:	b480      	push	{r7}
 80010ce:	b085      	sub	sp, #20
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	f003 0307 	and.w	r3, r3, #7
 80010da:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010dc:	4b0c      	ldr	r3, [pc, #48]	; (8001110 <__NVIC_SetPriorityGrouping+0x44>)
 80010de:	68db      	ldr	r3, [r3, #12]
 80010e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010e2:	68ba      	ldr	r2, [r7, #8]
 80010e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010e8:	4013      	ands	r3, r2
 80010ea:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010f0:	68bb      	ldr	r3, [r7, #8]
 80010f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010fe:	4a04      	ldr	r2, [pc, #16]	; (8001110 <__NVIC_SetPriorityGrouping+0x44>)
 8001100:	68bb      	ldr	r3, [r7, #8]
 8001102:	60d3      	str	r3, [r2, #12]
}
 8001104:	bf00      	nop
 8001106:	3714      	adds	r7, #20
 8001108:	46bd      	mov	sp, r7
 800110a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110e:	4770      	bx	lr
 8001110:	e000ed00 	.word	0xe000ed00

08001114 <__NVIC_GetPriorityGrouping>:
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001118:	4b04      	ldr	r3, [pc, #16]	; (800112c <__NVIC_GetPriorityGrouping+0x18>)
 800111a:	68db      	ldr	r3, [r3, #12]
 800111c:	0a1b      	lsrs	r3, r3, #8
 800111e:	f003 0307 	and.w	r3, r3, #7
}
 8001122:	4618      	mov	r0, r3
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr
 800112c:	e000ed00 	.word	0xe000ed00

08001130 <__NVIC_EnableIRQ>:
{
 8001130:	b480      	push	{r7}
 8001132:	b083      	sub	sp, #12
 8001134:	af00      	add	r7, sp, #0
 8001136:	4603      	mov	r3, r0
 8001138:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800113a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800113e:	2b00      	cmp	r3, #0
 8001140:	db0b      	blt.n	800115a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001142:	79fb      	ldrb	r3, [r7, #7]
 8001144:	f003 021f 	and.w	r2, r3, #31
 8001148:	4907      	ldr	r1, [pc, #28]	; (8001168 <__NVIC_EnableIRQ+0x38>)
 800114a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800114e:	095b      	lsrs	r3, r3, #5
 8001150:	2001      	movs	r0, #1
 8001152:	fa00 f202 	lsl.w	r2, r0, r2
 8001156:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800115a:	bf00      	nop
 800115c:	370c      	adds	r7, #12
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr
 8001166:	bf00      	nop
 8001168:	e000e100 	.word	0xe000e100

0800116c <__NVIC_SetPriority>:
{
 800116c:	b480      	push	{r7}
 800116e:	b083      	sub	sp, #12
 8001170:	af00      	add	r7, sp, #0
 8001172:	4603      	mov	r3, r0
 8001174:	6039      	str	r1, [r7, #0]
 8001176:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001178:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800117c:	2b00      	cmp	r3, #0
 800117e:	db0a      	blt.n	8001196 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	b2da      	uxtb	r2, r3
 8001184:	490c      	ldr	r1, [pc, #48]	; (80011b8 <__NVIC_SetPriority+0x4c>)
 8001186:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800118a:	0112      	lsls	r2, r2, #4
 800118c:	b2d2      	uxtb	r2, r2
 800118e:	440b      	add	r3, r1
 8001190:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001194:	e00a      	b.n	80011ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	b2da      	uxtb	r2, r3
 800119a:	4908      	ldr	r1, [pc, #32]	; (80011bc <__NVIC_SetPriority+0x50>)
 800119c:	79fb      	ldrb	r3, [r7, #7]
 800119e:	f003 030f 	and.w	r3, r3, #15
 80011a2:	3b04      	subs	r3, #4
 80011a4:	0112      	lsls	r2, r2, #4
 80011a6:	b2d2      	uxtb	r2, r2
 80011a8:	440b      	add	r3, r1
 80011aa:	761a      	strb	r2, [r3, #24]
}
 80011ac:	bf00      	nop
 80011ae:	370c      	adds	r7, #12
 80011b0:	46bd      	mov	sp, r7
 80011b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b6:	4770      	bx	lr
 80011b8:	e000e100 	.word	0xe000e100
 80011bc:	e000ed00 	.word	0xe000ed00

080011c0 <NVIC_EncodePriority>:
{
 80011c0:	b480      	push	{r7}
 80011c2:	b089      	sub	sp, #36	; 0x24
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	60f8      	str	r0, [r7, #12]
 80011c8:	60b9      	str	r1, [r7, #8]
 80011ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	f003 0307 	and.w	r3, r3, #7
 80011d2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011d4:	69fb      	ldr	r3, [r7, #28]
 80011d6:	f1c3 0307 	rsb	r3, r3, #7
 80011da:	2b04      	cmp	r3, #4
 80011dc:	bf28      	it	cs
 80011de:	2304      	movcs	r3, #4
 80011e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011e2:	69fb      	ldr	r3, [r7, #28]
 80011e4:	3304      	adds	r3, #4
 80011e6:	2b06      	cmp	r3, #6
 80011e8:	d902      	bls.n	80011f0 <NVIC_EncodePriority+0x30>
 80011ea:	69fb      	ldr	r3, [r7, #28]
 80011ec:	3b03      	subs	r3, #3
 80011ee:	e000      	b.n	80011f2 <NVIC_EncodePriority+0x32>
 80011f0:	2300      	movs	r3, #0
 80011f2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011f4:	f04f 32ff 	mov.w	r2, #4294967295
 80011f8:	69bb      	ldr	r3, [r7, #24]
 80011fa:	fa02 f303 	lsl.w	r3, r2, r3
 80011fe:	43da      	mvns	r2, r3
 8001200:	68bb      	ldr	r3, [r7, #8]
 8001202:	401a      	ands	r2, r3
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001208:	f04f 31ff 	mov.w	r1, #4294967295
 800120c:	697b      	ldr	r3, [r7, #20]
 800120e:	fa01 f303 	lsl.w	r3, r1, r3
 8001212:	43d9      	mvns	r1, r3
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001218:	4313      	orrs	r3, r2
}
 800121a:	4618      	mov	r0, r3
 800121c:	3724      	adds	r7, #36	; 0x24
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr
	...

08001228 <SysTick_Config>:
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b082      	sub	sp, #8
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	3b01      	subs	r3, #1
 8001234:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001238:	d301      	bcc.n	800123e <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800123a:	2301      	movs	r3, #1
 800123c:	e00f      	b.n	800125e <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800123e:	4a0a      	ldr	r2, [pc, #40]	; (8001268 <SysTick_Config+0x40>)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	3b01      	subs	r3, #1
 8001244:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001246:	210f      	movs	r1, #15
 8001248:	f04f 30ff 	mov.w	r0, #4294967295
 800124c:	f7ff ff8e 	bl	800116c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001250:	4b05      	ldr	r3, [pc, #20]	; (8001268 <SysTick_Config+0x40>)
 8001252:	2200      	movs	r2, #0
 8001254:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001256:	4b04      	ldr	r3, [pc, #16]	; (8001268 <SysTick_Config+0x40>)
 8001258:	2207      	movs	r2, #7
 800125a:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 800125c:	2300      	movs	r3, #0
}
 800125e:	4618      	mov	r0, r3
 8001260:	3708      	adds	r7, #8
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	e000e010 	.word	0xe000e010

0800126c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001274:	6878      	ldr	r0, [r7, #4]
 8001276:	f7ff ff29 	bl	80010cc <__NVIC_SetPriorityGrouping>
}
 800127a:	bf00      	nop
 800127c:	3708      	adds	r7, #8
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}

08001282 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001282:	b580      	push	{r7, lr}
 8001284:	b086      	sub	sp, #24
 8001286:	af00      	add	r7, sp, #0
 8001288:	4603      	mov	r3, r0
 800128a:	60b9      	str	r1, [r7, #8]
 800128c:	607a      	str	r2, [r7, #4]
 800128e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001290:	2300      	movs	r3, #0
 8001292:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001294:	f7ff ff3e 	bl	8001114 <__NVIC_GetPriorityGrouping>
 8001298:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800129a:	687a      	ldr	r2, [r7, #4]
 800129c:	68b9      	ldr	r1, [r7, #8]
 800129e:	6978      	ldr	r0, [r7, #20]
 80012a0:	f7ff ff8e 	bl	80011c0 <NVIC_EncodePriority>
 80012a4:	4602      	mov	r2, r0
 80012a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012aa:	4611      	mov	r1, r2
 80012ac:	4618      	mov	r0, r3
 80012ae:	f7ff ff5d 	bl	800116c <__NVIC_SetPriority>
}
 80012b2:	bf00      	nop
 80012b4:	3718      	adds	r7, #24
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}

080012ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012ba:	b580      	push	{r7, lr}
 80012bc:	b082      	sub	sp, #8
 80012be:	af00      	add	r7, sp, #0
 80012c0:	4603      	mov	r3, r0
 80012c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012c8:	4618      	mov	r0, r3
 80012ca:	f7ff ff31 	bl	8001130 <__NVIC_EnableIRQ>
}
 80012ce:	bf00      	nop
 80012d0:	3708      	adds	r7, #8
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}

080012d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012d6:	b580      	push	{r7, lr}
 80012d8:	b082      	sub	sp, #8
 80012da:	af00      	add	r7, sp, #0
 80012dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012de:	6878      	ldr	r0, [r7, #4]
 80012e0:	f7ff ffa2 	bl	8001228 <SysTick_Config>
 80012e4:	4603      	mov	r3, r0
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	3708      	adds	r7, #8
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
	...

080012f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b089      	sub	sp, #36	; 0x24
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
 80012f8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80012fa:	2300      	movs	r3, #0
 80012fc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80012fe:	2300      	movs	r3, #0
 8001300:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001302:	2300      	movs	r3, #0
 8001304:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001306:	2300      	movs	r3, #0
 8001308:	61fb      	str	r3, [r7, #28]
 800130a:	e177      	b.n	80015fc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800130c:	2201      	movs	r2, #1
 800130e:	69fb      	ldr	r3, [r7, #28]
 8001310:	fa02 f303 	lsl.w	r3, r2, r3
 8001314:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	697a      	ldr	r2, [r7, #20]
 800131c:	4013      	ands	r3, r2
 800131e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001320:	693a      	ldr	r2, [r7, #16]
 8001322:	697b      	ldr	r3, [r7, #20]
 8001324:	429a      	cmp	r2, r3
 8001326:	f040 8166 	bne.w	80015f6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	f003 0303 	and.w	r3, r3, #3
 8001332:	2b01      	cmp	r3, #1
 8001334:	d005      	beq.n	8001342 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800133e:	2b02      	cmp	r3, #2
 8001340:	d130      	bne.n	80013a4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	689b      	ldr	r3, [r3, #8]
 8001346:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001348:	69fb      	ldr	r3, [r7, #28]
 800134a:	005b      	lsls	r3, r3, #1
 800134c:	2203      	movs	r2, #3
 800134e:	fa02 f303 	lsl.w	r3, r2, r3
 8001352:	43db      	mvns	r3, r3
 8001354:	69ba      	ldr	r2, [r7, #24]
 8001356:	4013      	ands	r3, r2
 8001358:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	68da      	ldr	r2, [r3, #12]
 800135e:	69fb      	ldr	r3, [r7, #28]
 8001360:	005b      	lsls	r3, r3, #1
 8001362:	fa02 f303 	lsl.w	r3, r2, r3
 8001366:	69ba      	ldr	r2, [r7, #24]
 8001368:	4313      	orrs	r3, r2
 800136a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	69ba      	ldr	r2, [r7, #24]
 8001370:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001378:	2201      	movs	r2, #1
 800137a:	69fb      	ldr	r3, [r7, #28]
 800137c:	fa02 f303 	lsl.w	r3, r2, r3
 8001380:	43db      	mvns	r3, r3
 8001382:	69ba      	ldr	r2, [r7, #24]
 8001384:	4013      	ands	r3, r2
 8001386:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	091b      	lsrs	r3, r3, #4
 800138e:	f003 0201 	and.w	r2, r3, #1
 8001392:	69fb      	ldr	r3, [r7, #28]
 8001394:	fa02 f303 	lsl.w	r3, r2, r3
 8001398:	69ba      	ldr	r2, [r7, #24]
 800139a:	4313      	orrs	r3, r2
 800139c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	69ba      	ldr	r2, [r7, #24]
 80013a2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	f003 0303 	and.w	r3, r3, #3
 80013ac:	2b03      	cmp	r3, #3
 80013ae:	d017      	beq.n	80013e0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	68db      	ldr	r3, [r3, #12]
 80013b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80013b6:	69fb      	ldr	r3, [r7, #28]
 80013b8:	005b      	lsls	r3, r3, #1
 80013ba:	2203      	movs	r2, #3
 80013bc:	fa02 f303 	lsl.w	r3, r2, r3
 80013c0:	43db      	mvns	r3, r3
 80013c2:	69ba      	ldr	r2, [r7, #24]
 80013c4:	4013      	ands	r3, r2
 80013c6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	689a      	ldr	r2, [r3, #8]
 80013cc:	69fb      	ldr	r3, [r7, #28]
 80013ce:	005b      	lsls	r3, r3, #1
 80013d0:	fa02 f303 	lsl.w	r3, r2, r3
 80013d4:	69ba      	ldr	r2, [r7, #24]
 80013d6:	4313      	orrs	r3, r2
 80013d8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	69ba      	ldr	r2, [r7, #24]
 80013de:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	f003 0303 	and.w	r3, r3, #3
 80013e8:	2b02      	cmp	r3, #2
 80013ea:	d123      	bne.n	8001434 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80013ec:	69fb      	ldr	r3, [r7, #28]
 80013ee:	08da      	lsrs	r2, r3, #3
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	3208      	adds	r2, #8
 80013f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80013fa:	69fb      	ldr	r3, [r7, #28]
 80013fc:	f003 0307 	and.w	r3, r3, #7
 8001400:	009b      	lsls	r3, r3, #2
 8001402:	220f      	movs	r2, #15
 8001404:	fa02 f303 	lsl.w	r3, r2, r3
 8001408:	43db      	mvns	r3, r3
 800140a:	69ba      	ldr	r2, [r7, #24]
 800140c:	4013      	ands	r3, r2
 800140e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	691a      	ldr	r2, [r3, #16]
 8001414:	69fb      	ldr	r3, [r7, #28]
 8001416:	f003 0307 	and.w	r3, r3, #7
 800141a:	009b      	lsls	r3, r3, #2
 800141c:	fa02 f303 	lsl.w	r3, r2, r3
 8001420:	69ba      	ldr	r2, [r7, #24]
 8001422:	4313      	orrs	r3, r2
 8001424:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001426:	69fb      	ldr	r3, [r7, #28]
 8001428:	08da      	lsrs	r2, r3, #3
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	3208      	adds	r2, #8
 800142e:	69b9      	ldr	r1, [r7, #24]
 8001430:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800143a:	69fb      	ldr	r3, [r7, #28]
 800143c:	005b      	lsls	r3, r3, #1
 800143e:	2203      	movs	r2, #3
 8001440:	fa02 f303 	lsl.w	r3, r2, r3
 8001444:	43db      	mvns	r3, r3
 8001446:	69ba      	ldr	r2, [r7, #24]
 8001448:	4013      	ands	r3, r2
 800144a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	f003 0203 	and.w	r2, r3, #3
 8001454:	69fb      	ldr	r3, [r7, #28]
 8001456:	005b      	lsls	r3, r3, #1
 8001458:	fa02 f303 	lsl.w	r3, r2, r3
 800145c:	69ba      	ldr	r2, [r7, #24]
 800145e:	4313      	orrs	r3, r2
 8001460:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	69ba      	ldr	r2, [r7, #24]
 8001466:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001470:	2b00      	cmp	r3, #0
 8001472:	f000 80c0 	beq.w	80015f6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001476:	2300      	movs	r3, #0
 8001478:	60fb      	str	r3, [r7, #12]
 800147a:	4b66      	ldr	r3, [pc, #408]	; (8001614 <HAL_GPIO_Init+0x324>)
 800147c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800147e:	4a65      	ldr	r2, [pc, #404]	; (8001614 <HAL_GPIO_Init+0x324>)
 8001480:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001484:	6453      	str	r3, [r2, #68]	; 0x44
 8001486:	4b63      	ldr	r3, [pc, #396]	; (8001614 <HAL_GPIO_Init+0x324>)
 8001488:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800148a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800148e:	60fb      	str	r3, [r7, #12]
 8001490:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001492:	4a61      	ldr	r2, [pc, #388]	; (8001618 <HAL_GPIO_Init+0x328>)
 8001494:	69fb      	ldr	r3, [r7, #28]
 8001496:	089b      	lsrs	r3, r3, #2
 8001498:	3302      	adds	r3, #2
 800149a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800149e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80014a0:	69fb      	ldr	r3, [r7, #28]
 80014a2:	f003 0303 	and.w	r3, r3, #3
 80014a6:	009b      	lsls	r3, r3, #2
 80014a8:	220f      	movs	r2, #15
 80014aa:	fa02 f303 	lsl.w	r3, r2, r3
 80014ae:	43db      	mvns	r3, r3
 80014b0:	69ba      	ldr	r2, [r7, #24]
 80014b2:	4013      	ands	r3, r2
 80014b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	4a58      	ldr	r2, [pc, #352]	; (800161c <HAL_GPIO_Init+0x32c>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d037      	beq.n	800152e <HAL_GPIO_Init+0x23e>
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	4a57      	ldr	r2, [pc, #348]	; (8001620 <HAL_GPIO_Init+0x330>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d031      	beq.n	800152a <HAL_GPIO_Init+0x23a>
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	4a56      	ldr	r2, [pc, #344]	; (8001624 <HAL_GPIO_Init+0x334>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d02b      	beq.n	8001526 <HAL_GPIO_Init+0x236>
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	4a55      	ldr	r2, [pc, #340]	; (8001628 <HAL_GPIO_Init+0x338>)
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d025      	beq.n	8001522 <HAL_GPIO_Init+0x232>
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	4a54      	ldr	r2, [pc, #336]	; (800162c <HAL_GPIO_Init+0x33c>)
 80014da:	4293      	cmp	r3, r2
 80014dc:	d01f      	beq.n	800151e <HAL_GPIO_Init+0x22e>
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	4a53      	ldr	r2, [pc, #332]	; (8001630 <HAL_GPIO_Init+0x340>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d019      	beq.n	800151a <HAL_GPIO_Init+0x22a>
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	4a52      	ldr	r2, [pc, #328]	; (8001634 <HAL_GPIO_Init+0x344>)
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d013      	beq.n	8001516 <HAL_GPIO_Init+0x226>
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	4a51      	ldr	r2, [pc, #324]	; (8001638 <HAL_GPIO_Init+0x348>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d00d      	beq.n	8001512 <HAL_GPIO_Init+0x222>
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	4a50      	ldr	r2, [pc, #320]	; (800163c <HAL_GPIO_Init+0x34c>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d007      	beq.n	800150e <HAL_GPIO_Init+0x21e>
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	4a4f      	ldr	r2, [pc, #316]	; (8001640 <HAL_GPIO_Init+0x350>)
 8001502:	4293      	cmp	r3, r2
 8001504:	d101      	bne.n	800150a <HAL_GPIO_Init+0x21a>
 8001506:	2309      	movs	r3, #9
 8001508:	e012      	b.n	8001530 <HAL_GPIO_Init+0x240>
 800150a:	230a      	movs	r3, #10
 800150c:	e010      	b.n	8001530 <HAL_GPIO_Init+0x240>
 800150e:	2308      	movs	r3, #8
 8001510:	e00e      	b.n	8001530 <HAL_GPIO_Init+0x240>
 8001512:	2307      	movs	r3, #7
 8001514:	e00c      	b.n	8001530 <HAL_GPIO_Init+0x240>
 8001516:	2306      	movs	r3, #6
 8001518:	e00a      	b.n	8001530 <HAL_GPIO_Init+0x240>
 800151a:	2305      	movs	r3, #5
 800151c:	e008      	b.n	8001530 <HAL_GPIO_Init+0x240>
 800151e:	2304      	movs	r3, #4
 8001520:	e006      	b.n	8001530 <HAL_GPIO_Init+0x240>
 8001522:	2303      	movs	r3, #3
 8001524:	e004      	b.n	8001530 <HAL_GPIO_Init+0x240>
 8001526:	2302      	movs	r3, #2
 8001528:	e002      	b.n	8001530 <HAL_GPIO_Init+0x240>
 800152a:	2301      	movs	r3, #1
 800152c:	e000      	b.n	8001530 <HAL_GPIO_Init+0x240>
 800152e:	2300      	movs	r3, #0
 8001530:	69fa      	ldr	r2, [r7, #28]
 8001532:	f002 0203 	and.w	r2, r2, #3
 8001536:	0092      	lsls	r2, r2, #2
 8001538:	4093      	lsls	r3, r2
 800153a:	69ba      	ldr	r2, [r7, #24]
 800153c:	4313      	orrs	r3, r2
 800153e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001540:	4935      	ldr	r1, [pc, #212]	; (8001618 <HAL_GPIO_Init+0x328>)
 8001542:	69fb      	ldr	r3, [r7, #28]
 8001544:	089b      	lsrs	r3, r3, #2
 8001546:	3302      	adds	r3, #2
 8001548:	69ba      	ldr	r2, [r7, #24]
 800154a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800154e:	4b3d      	ldr	r3, [pc, #244]	; (8001644 <HAL_GPIO_Init+0x354>)
 8001550:	689b      	ldr	r3, [r3, #8]
 8001552:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001554:	693b      	ldr	r3, [r7, #16]
 8001556:	43db      	mvns	r3, r3
 8001558:	69ba      	ldr	r2, [r7, #24]
 800155a:	4013      	ands	r3, r2
 800155c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001566:	2b00      	cmp	r3, #0
 8001568:	d003      	beq.n	8001572 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800156a:	69ba      	ldr	r2, [r7, #24]
 800156c:	693b      	ldr	r3, [r7, #16]
 800156e:	4313      	orrs	r3, r2
 8001570:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001572:	4a34      	ldr	r2, [pc, #208]	; (8001644 <HAL_GPIO_Init+0x354>)
 8001574:	69bb      	ldr	r3, [r7, #24]
 8001576:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001578:	4b32      	ldr	r3, [pc, #200]	; (8001644 <HAL_GPIO_Init+0x354>)
 800157a:	68db      	ldr	r3, [r3, #12]
 800157c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800157e:	693b      	ldr	r3, [r7, #16]
 8001580:	43db      	mvns	r3, r3
 8001582:	69ba      	ldr	r2, [r7, #24]
 8001584:	4013      	ands	r3, r2
 8001586:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001590:	2b00      	cmp	r3, #0
 8001592:	d003      	beq.n	800159c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001594:	69ba      	ldr	r2, [r7, #24]
 8001596:	693b      	ldr	r3, [r7, #16]
 8001598:	4313      	orrs	r3, r2
 800159a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800159c:	4a29      	ldr	r2, [pc, #164]	; (8001644 <HAL_GPIO_Init+0x354>)
 800159e:	69bb      	ldr	r3, [r7, #24]
 80015a0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80015a2:	4b28      	ldr	r3, [pc, #160]	; (8001644 <HAL_GPIO_Init+0x354>)
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015a8:	693b      	ldr	r3, [r7, #16]
 80015aa:	43db      	mvns	r3, r3
 80015ac:	69ba      	ldr	r2, [r7, #24]
 80015ae:	4013      	ands	r3, r2
 80015b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d003      	beq.n	80015c6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80015be:	69ba      	ldr	r2, [r7, #24]
 80015c0:	693b      	ldr	r3, [r7, #16]
 80015c2:	4313      	orrs	r3, r2
 80015c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80015c6:	4a1f      	ldr	r2, [pc, #124]	; (8001644 <HAL_GPIO_Init+0x354>)
 80015c8:	69bb      	ldr	r3, [r7, #24]
 80015ca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80015cc:	4b1d      	ldr	r3, [pc, #116]	; (8001644 <HAL_GPIO_Init+0x354>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015d2:	693b      	ldr	r3, [r7, #16]
 80015d4:	43db      	mvns	r3, r3
 80015d6:	69ba      	ldr	r2, [r7, #24]
 80015d8:	4013      	ands	r3, r2
 80015da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d003      	beq.n	80015f0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80015e8:	69ba      	ldr	r2, [r7, #24]
 80015ea:	693b      	ldr	r3, [r7, #16]
 80015ec:	4313      	orrs	r3, r2
 80015ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80015f0:	4a14      	ldr	r2, [pc, #80]	; (8001644 <HAL_GPIO_Init+0x354>)
 80015f2:	69bb      	ldr	r3, [r7, #24]
 80015f4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015f6:	69fb      	ldr	r3, [r7, #28]
 80015f8:	3301      	adds	r3, #1
 80015fa:	61fb      	str	r3, [r7, #28]
 80015fc:	69fb      	ldr	r3, [r7, #28]
 80015fe:	2b0f      	cmp	r3, #15
 8001600:	f67f ae84 	bls.w	800130c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001604:	bf00      	nop
 8001606:	bf00      	nop
 8001608:	3724      	adds	r7, #36	; 0x24
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr
 8001612:	bf00      	nop
 8001614:	40023800 	.word	0x40023800
 8001618:	40013800 	.word	0x40013800
 800161c:	40020000 	.word	0x40020000
 8001620:	40020400 	.word	0x40020400
 8001624:	40020800 	.word	0x40020800
 8001628:	40020c00 	.word	0x40020c00
 800162c:	40021000 	.word	0x40021000
 8001630:	40021400 	.word	0x40021400
 8001634:	40021800 	.word	0x40021800
 8001638:	40021c00 	.word	0x40021c00
 800163c:	40022000 	.word	0x40022000
 8001640:	40022400 	.word	0x40022400
 8001644:	40013c00 	.word	0x40013c00

08001648 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001648:	b480      	push	{r7}
 800164a:	b085      	sub	sp, #20
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
 8001650:	460b      	mov	r3, r1
 8001652:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	691a      	ldr	r2, [r3, #16]
 8001658:	887b      	ldrh	r3, [r7, #2]
 800165a:	4013      	ands	r3, r2
 800165c:	2b00      	cmp	r3, #0
 800165e:	d002      	beq.n	8001666 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001660:	2301      	movs	r3, #1
 8001662:	73fb      	strb	r3, [r7, #15]
 8001664:	e001      	b.n	800166a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001666:	2300      	movs	r3, #0
 8001668:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800166a:	7bfb      	ldrb	r3, [r7, #15]
}
 800166c:	4618      	mov	r0, r3
 800166e:	3714      	adds	r7, #20
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr

08001678 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001678:	b480      	push	{r7}
 800167a:	b083      	sub	sp, #12
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
 8001680:	460b      	mov	r3, r1
 8001682:	807b      	strh	r3, [r7, #2]
 8001684:	4613      	mov	r3, r2
 8001686:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001688:	787b      	ldrb	r3, [r7, #1]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d003      	beq.n	8001696 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800168e:	887a      	ldrh	r2, [r7, #2]
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001694:	e003      	b.n	800169e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001696:	887b      	ldrh	r3, [r7, #2]
 8001698:	041a      	lsls	r2, r3, #16
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	619a      	str	r2, [r3, #24]
}
 800169e:	bf00      	nop
 80016a0:	370c      	adds	r7, #12
 80016a2:	46bd      	mov	sp, r7
 80016a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a8:	4770      	bx	lr
	...

080016ac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b086      	sub	sp, #24
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d101      	bne.n	80016be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80016ba:	2301      	movs	r3, #1
 80016bc:	e267      	b.n	8001b8e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f003 0301 	and.w	r3, r3, #1
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d075      	beq.n	80017b6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80016ca:	4b88      	ldr	r3, [pc, #544]	; (80018ec <HAL_RCC_OscConfig+0x240>)
 80016cc:	689b      	ldr	r3, [r3, #8]
 80016ce:	f003 030c 	and.w	r3, r3, #12
 80016d2:	2b04      	cmp	r3, #4
 80016d4:	d00c      	beq.n	80016f0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80016d6:	4b85      	ldr	r3, [pc, #532]	; (80018ec <HAL_RCC_OscConfig+0x240>)
 80016d8:	689b      	ldr	r3, [r3, #8]
 80016da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80016de:	2b08      	cmp	r3, #8
 80016e0:	d112      	bne.n	8001708 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80016e2:	4b82      	ldr	r3, [pc, #520]	; (80018ec <HAL_RCC_OscConfig+0x240>)
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80016ee:	d10b      	bne.n	8001708 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016f0:	4b7e      	ldr	r3, [pc, #504]	; (80018ec <HAL_RCC_OscConfig+0x240>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d05b      	beq.n	80017b4 <HAL_RCC_OscConfig+0x108>
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d157      	bne.n	80017b4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001704:	2301      	movs	r3, #1
 8001706:	e242      	b.n	8001b8e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001710:	d106      	bne.n	8001720 <HAL_RCC_OscConfig+0x74>
 8001712:	4b76      	ldr	r3, [pc, #472]	; (80018ec <HAL_RCC_OscConfig+0x240>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4a75      	ldr	r2, [pc, #468]	; (80018ec <HAL_RCC_OscConfig+0x240>)
 8001718:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800171c:	6013      	str	r3, [r2, #0]
 800171e:	e01d      	b.n	800175c <HAL_RCC_OscConfig+0xb0>
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001728:	d10c      	bne.n	8001744 <HAL_RCC_OscConfig+0x98>
 800172a:	4b70      	ldr	r3, [pc, #448]	; (80018ec <HAL_RCC_OscConfig+0x240>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4a6f      	ldr	r2, [pc, #444]	; (80018ec <HAL_RCC_OscConfig+0x240>)
 8001730:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001734:	6013      	str	r3, [r2, #0]
 8001736:	4b6d      	ldr	r3, [pc, #436]	; (80018ec <HAL_RCC_OscConfig+0x240>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4a6c      	ldr	r2, [pc, #432]	; (80018ec <HAL_RCC_OscConfig+0x240>)
 800173c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001740:	6013      	str	r3, [r2, #0]
 8001742:	e00b      	b.n	800175c <HAL_RCC_OscConfig+0xb0>
 8001744:	4b69      	ldr	r3, [pc, #420]	; (80018ec <HAL_RCC_OscConfig+0x240>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a68      	ldr	r2, [pc, #416]	; (80018ec <HAL_RCC_OscConfig+0x240>)
 800174a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800174e:	6013      	str	r3, [r2, #0]
 8001750:	4b66      	ldr	r3, [pc, #408]	; (80018ec <HAL_RCC_OscConfig+0x240>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4a65      	ldr	r2, [pc, #404]	; (80018ec <HAL_RCC_OscConfig+0x240>)
 8001756:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800175a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d013      	beq.n	800178c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001764:	f7ff fc82 	bl	800106c <HAL_GetTick>
 8001768:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800176a:	e008      	b.n	800177e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800176c:	f7ff fc7e 	bl	800106c <HAL_GetTick>
 8001770:	4602      	mov	r2, r0
 8001772:	693b      	ldr	r3, [r7, #16]
 8001774:	1ad3      	subs	r3, r2, r3
 8001776:	2b64      	cmp	r3, #100	; 0x64
 8001778:	d901      	bls.n	800177e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800177a:	2303      	movs	r3, #3
 800177c:	e207      	b.n	8001b8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800177e:	4b5b      	ldr	r3, [pc, #364]	; (80018ec <HAL_RCC_OscConfig+0x240>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001786:	2b00      	cmp	r3, #0
 8001788:	d0f0      	beq.n	800176c <HAL_RCC_OscConfig+0xc0>
 800178a:	e014      	b.n	80017b6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800178c:	f7ff fc6e 	bl	800106c <HAL_GetTick>
 8001790:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001792:	e008      	b.n	80017a6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001794:	f7ff fc6a 	bl	800106c <HAL_GetTick>
 8001798:	4602      	mov	r2, r0
 800179a:	693b      	ldr	r3, [r7, #16]
 800179c:	1ad3      	subs	r3, r2, r3
 800179e:	2b64      	cmp	r3, #100	; 0x64
 80017a0:	d901      	bls.n	80017a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80017a2:	2303      	movs	r3, #3
 80017a4:	e1f3      	b.n	8001b8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017a6:	4b51      	ldr	r3, [pc, #324]	; (80018ec <HAL_RCC_OscConfig+0x240>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d1f0      	bne.n	8001794 <HAL_RCC_OscConfig+0xe8>
 80017b2:	e000      	b.n	80017b6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f003 0302 	and.w	r3, r3, #2
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d063      	beq.n	800188a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80017c2:	4b4a      	ldr	r3, [pc, #296]	; (80018ec <HAL_RCC_OscConfig+0x240>)
 80017c4:	689b      	ldr	r3, [r3, #8]
 80017c6:	f003 030c 	and.w	r3, r3, #12
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d00b      	beq.n	80017e6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80017ce:	4b47      	ldr	r3, [pc, #284]	; (80018ec <HAL_RCC_OscConfig+0x240>)
 80017d0:	689b      	ldr	r3, [r3, #8]
 80017d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80017d6:	2b08      	cmp	r3, #8
 80017d8:	d11c      	bne.n	8001814 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80017da:	4b44      	ldr	r3, [pc, #272]	; (80018ec <HAL_RCC_OscConfig+0x240>)
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d116      	bne.n	8001814 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017e6:	4b41      	ldr	r3, [pc, #260]	; (80018ec <HAL_RCC_OscConfig+0x240>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f003 0302 	and.w	r3, r3, #2
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d005      	beq.n	80017fe <HAL_RCC_OscConfig+0x152>
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	68db      	ldr	r3, [r3, #12]
 80017f6:	2b01      	cmp	r3, #1
 80017f8:	d001      	beq.n	80017fe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80017fa:	2301      	movs	r3, #1
 80017fc:	e1c7      	b.n	8001b8e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017fe:	4b3b      	ldr	r3, [pc, #236]	; (80018ec <HAL_RCC_OscConfig+0x240>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	691b      	ldr	r3, [r3, #16]
 800180a:	00db      	lsls	r3, r3, #3
 800180c:	4937      	ldr	r1, [pc, #220]	; (80018ec <HAL_RCC_OscConfig+0x240>)
 800180e:	4313      	orrs	r3, r2
 8001810:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001812:	e03a      	b.n	800188a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	68db      	ldr	r3, [r3, #12]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d020      	beq.n	800185e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800181c:	4b34      	ldr	r3, [pc, #208]	; (80018f0 <HAL_RCC_OscConfig+0x244>)
 800181e:	2201      	movs	r2, #1
 8001820:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001822:	f7ff fc23 	bl	800106c <HAL_GetTick>
 8001826:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001828:	e008      	b.n	800183c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800182a:	f7ff fc1f 	bl	800106c <HAL_GetTick>
 800182e:	4602      	mov	r2, r0
 8001830:	693b      	ldr	r3, [r7, #16]
 8001832:	1ad3      	subs	r3, r2, r3
 8001834:	2b02      	cmp	r3, #2
 8001836:	d901      	bls.n	800183c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001838:	2303      	movs	r3, #3
 800183a:	e1a8      	b.n	8001b8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800183c:	4b2b      	ldr	r3, [pc, #172]	; (80018ec <HAL_RCC_OscConfig+0x240>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f003 0302 	and.w	r3, r3, #2
 8001844:	2b00      	cmp	r3, #0
 8001846:	d0f0      	beq.n	800182a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001848:	4b28      	ldr	r3, [pc, #160]	; (80018ec <HAL_RCC_OscConfig+0x240>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	691b      	ldr	r3, [r3, #16]
 8001854:	00db      	lsls	r3, r3, #3
 8001856:	4925      	ldr	r1, [pc, #148]	; (80018ec <HAL_RCC_OscConfig+0x240>)
 8001858:	4313      	orrs	r3, r2
 800185a:	600b      	str	r3, [r1, #0]
 800185c:	e015      	b.n	800188a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800185e:	4b24      	ldr	r3, [pc, #144]	; (80018f0 <HAL_RCC_OscConfig+0x244>)
 8001860:	2200      	movs	r2, #0
 8001862:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001864:	f7ff fc02 	bl	800106c <HAL_GetTick>
 8001868:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800186a:	e008      	b.n	800187e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800186c:	f7ff fbfe 	bl	800106c <HAL_GetTick>
 8001870:	4602      	mov	r2, r0
 8001872:	693b      	ldr	r3, [r7, #16]
 8001874:	1ad3      	subs	r3, r2, r3
 8001876:	2b02      	cmp	r3, #2
 8001878:	d901      	bls.n	800187e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800187a:	2303      	movs	r3, #3
 800187c:	e187      	b.n	8001b8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800187e:	4b1b      	ldr	r3, [pc, #108]	; (80018ec <HAL_RCC_OscConfig+0x240>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f003 0302 	and.w	r3, r3, #2
 8001886:	2b00      	cmp	r3, #0
 8001888:	d1f0      	bne.n	800186c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f003 0308 	and.w	r3, r3, #8
 8001892:	2b00      	cmp	r3, #0
 8001894:	d036      	beq.n	8001904 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	695b      	ldr	r3, [r3, #20]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d016      	beq.n	80018cc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800189e:	4b15      	ldr	r3, [pc, #84]	; (80018f4 <HAL_RCC_OscConfig+0x248>)
 80018a0:	2201      	movs	r2, #1
 80018a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018a4:	f7ff fbe2 	bl	800106c <HAL_GetTick>
 80018a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018aa:	e008      	b.n	80018be <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018ac:	f7ff fbde 	bl	800106c <HAL_GetTick>
 80018b0:	4602      	mov	r2, r0
 80018b2:	693b      	ldr	r3, [r7, #16]
 80018b4:	1ad3      	subs	r3, r2, r3
 80018b6:	2b02      	cmp	r3, #2
 80018b8:	d901      	bls.n	80018be <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80018ba:	2303      	movs	r3, #3
 80018bc:	e167      	b.n	8001b8e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018be:	4b0b      	ldr	r3, [pc, #44]	; (80018ec <HAL_RCC_OscConfig+0x240>)
 80018c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80018c2:	f003 0302 	and.w	r3, r3, #2
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d0f0      	beq.n	80018ac <HAL_RCC_OscConfig+0x200>
 80018ca:	e01b      	b.n	8001904 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018cc:	4b09      	ldr	r3, [pc, #36]	; (80018f4 <HAL_RCC_OscConfig+0x248>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018d2:	f7ff fbcb 	bl	800106c <HAL_GetTick>
 80018d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018d8:	e00e      	b.n	80018f8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018da:	f7ff fbc7 	bl	800106c <HAL_GetTick>
 80018de:	4602      	mov	r2, r0
 80018e0:	693b      	ldr	r3, [r7, #16]
 80018e2:	1ad3      	subs	r3, r2, r3
 80018e4:	2b02      	cmp	r3, #2
 80018e6:	d907      	bls.n	80018f8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80018e8:	2303      	movs	r3, #3
 80018ea:	e150      	b.n	8001b8e <HAL_RCC_OscConfig+0x4e2>
 80018ec:	40023800 	.word	0x40023800
 80018f0:	42470000 	.word	0x42470000
 80018f4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018f8:	4b88      	ldr	r3, [pc, #544]	; (8001b1c <HAL_RCC_OscConfig+0x470>)
 80018fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80018fc:	f003 0302 	and.w	r3, r3, #2
 8001900:	2b00      	cmp	r3, #0
 8001902:	d1ea      	bne.n	80018da <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f003 0304 	and.w	r3, r3, #4
 800190c:	2b00      	cmp	r3, #0
 800190e:	f000 8097 	beq.w	8001a40 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001912:	2300      	movs	r3, #0
 8001914:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001916:	4b81      	ldr	r3, [pc, #516]	; (8001b1c <HAL_RCC_OscConfig+0x470>)
 8001918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800191a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800191e:	2b00      	cmp	r3, #0
 8001920:	d10f      	bne.n	8001942 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001922:	2300      	movs	r3, #0
 8001924:	60bb      	str	r3, [r7, #8]
 8001926:	4b7d      	ldr	r3, [pc, #500]	; (8001b1c <HAL_RCC_OscConfig+0x470>)
 8001928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800192a:	4a7c      	ldr	r2, [pc, #496]	; (8001b1c <HAL_RCC_OscConfig+0x470>)
 800192c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001930:	6413      	str	r3, [r2, #64]	; 0x40
 8001932:	4b7a      	ldr	r3, [pc, #488]	; (8001b1c <HAL_RCC_OscConfig+0x470>)
 8001934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001936:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800193a:	60bb      	str	r3, [r7, #8]
 800193c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800193e:	2301      	movs	r3, #1
 8001940:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001942:	4b77      	ldr	r3, [pc, #476]	; (8001b20 <HAL_RCC_OscConfig+0x474>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800194a:	2b00      	cmp	r3, #0
 800194c:	d118      	bne.n	8001980 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800194e:	4b74      	ldr	r3, [pc, #464]	; (8001b20 <HAL_RCC_OscConfig+0x474>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4a73      	ldr	r2, [pc, #460]	; (8001b20 <HAL_RCC_OscConfig+0x474>)
 8001954:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001958:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800195a:	f7ff fb87 	bl	800106c <HAL_GetTick>
 800195e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001960:	e008      	b.n	8001974 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001962:	f7ff fb83 	bl	800106c <HAL_GetTick>
 8001966:	4602      	mov	r2, r0
 8001968:	693b      	ldr	r3, [r7, #16]
 800196a:	1ad3      	subs	r3, r2, r3
 800196c:	2b02      	cmp	r3, #2
 800196e:	d901      	bls.n	8001974 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001970:	2303      	movs	r3, #3
 8001972:	e10c      	b.n	8001b8e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001974:	4b6a      	ldr	r3, [pc, #424]	; (8001b20 <HAL_RCC_OscConfig+0x474>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800197c:	2b00      	cmp	r3, #0
 800197e:	d0f0      	beq.n	8001962 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	689b      	ldr	r3, [r3, #8]
 8001984:	2b01      	cmp	r3, #1
 8001986:	d106      	bne.n	8001996 <HAL_RCC_OscConfig+0x2ea>
 8001988:	4b64      	ldr	r3, [pc, #400]	; (8001b1c <HAL_RCC_OscConfig+0x470>)
 800198a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800198c:	4a63      	ldr	r2, [pc, #396]	; (8001b1c <HAL_RCC_OscConfig+0x470>)
 800198e:	f043 0301 	orr.w	r3, r3, #1
 8001992:	6713      	str	r3, [r2, #112]	; 0x70
 8001994:	e01c      	b.n	80019d0 <HAL_RCC_OscConfig+0x324>
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	689b      	ldr	r3, [r3, #8]
 800199a:	2b05      	cmp	r3, #5
 800199c:	d10c      	bne.n	80019b8 <HAL_RCC_OscConfig+0x30c>
 800199e:	4b5f      	ldr	r3, [pc, #380]	; (8001b1c <HAL_RCC_OscConfig+0x470>)
 80019a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019a2:	4a5e      	ldr	r2, [pc, #376]	; (8001b1c <HAL_RCC_OscConfig+0x470>)
 80019a4:	f043 0304 	orr.w	r3, r3, #4
 80019a8:	6713      	str	r3, [r2, #112]	; 0x70
 80019aa:	4b5c      	ldr	r3, [pc, #368]	; (8001b1c <HAL_RCC_OscConfig+0x470>)
 80019ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019ae:	4a5b      	ldr	r2, [pc, #364]	; (8001b1c <HAL_RCC_OscConfig+0x470>)
 80019b0:	f043 0301 	orr.w	r3, r3, #1
 80019b4:	6713      	str	r3, [r2, #112]	; 0x70
 80019b6:	e00b      	b.n	80019d0 <HAL_RCC_OscConfig+0x324>
 80019b8:	4b58      	ldr	r3, [pc, #352]	; (8001b1c <HAL_RCC_OscConfig+0x470>)
 80019ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019bc:	4a57      	ldr	r2, [pc, #348]	; (8001b1c <HAL_RCC_OscConfig+0x470>)
 80019be:	f023 0301 	bic.w	r3, r3, #1
 80019c2:	6713      	str	r3, [r2, #112]	; 0x70
 80019c4:	4b55      	ldr	r3, [pc, #340]	; (8001b1c <HAL_RCC_OscConfig+0x470>)
 80019c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019c8:	4a54      	ldr	r2, [pc, #336]	; (8001b1c <HAL_RCC_OscConfig+0x470>)
 80019ca:	f023 0304 	bic.w	r3, r3, #4
 80019ce:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	689b      	ldr	r3, [r3, #8]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d015      	beq.n	8001a04 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019d8:	f7ff fb48 	bl	800106c <HAL_GetTick>
 80019dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019de:	e00a      	b.n	80019f6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019e0:	f7ff fb44 	bl	800106c <HAL_GetTick>
 80019e4:	4602      	mov	r2, r0
 80019e6:	693b      	ldr	r3, [r7, #16]
 80019e8:	1ad3      	subs	r3, r2, r3
 80019ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d901      	bls.n	80019f6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80019f2:	2303      	movs	r3, #3
 80019f4:	e0cb      	b.n	8001b8e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019f6:	4b49      	ldr	r3, [pc, #292]	; (8001b1c <HAL_RCC_OscConfig+0x470>)
 80019f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019fa:	f003 0302 	and.w	r3, r3, #2
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d0ee      	beq.n	80019e0 <HAL_RCC_OscConfig+0x334>
 8001a02:	e014      	b.n	8001a2e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a04:	f7ff fb32 	bl	800106c <HAL_GetTick>
 8001a08:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a0a:	e00a      	b.n	8001a22 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a0c:	f7ff fb2e 	bl	800106c <HAL_GetTick>
 8001a10:	4602      	mov	r2, r0
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	1ad3      	subs	r3, r2, r3
 8001a16:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d901      	bls.n	8001a22 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001a1e:	2303      	movs	r3, #3
 8001a20:	e0b5      	b.n	8001b8e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a22:	4b3e      	ldr	r3, [pc, #248]	; (8001b1c <HAL_RCC_OscConfig+0x470>)
 8001a24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a26:	f003 0302 	and.w	r3, r3, #2
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d1ee      	bne.n	8001a0c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001a2e:	7dfb      	ldrb	r3, [r7, #23]
 8001a30:	2b01      	cmp	r3, #1
 8001a32:	d105      	bne.n	8001a40 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a34:	4b39      	ldr	r3, [pc, #228]	; (8001b1c <HAL_RCC_OscConfig+0x470>)
 8001a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a38:	4a38      	ldr	r2, [pc, #224]	; (8001b1c <HAL_RCC_OscConfig+0x470>)
 8001a3a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a3e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	699b      	ldr	r3, [r3, #24]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	f000 80a1 	beq.w	8001b8c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001a4a:	4b34      	ldr	r3, [pc, #208]	; (8001b1c <HAL_RCC_OscConfig+0x470>)
 8001a4c:	689b      	ldr	r3, [r3, #8]
 8001a4e:	f003 030c 	and.w	r3, r3, #12
 8001a52:	2b08      	cmp	r3, #8
 8001a54:	d05c      	beq.n	8001b10 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	699b      	ldr	r3, [r3, #24]
 8001a5a:	2b02      	cmp	r3, #2
 8001a5c:	d141      	bne.n	8001ae2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a5e:	4b31      	ldr	r3, [pc, #196]	; (8001b24 <HAL_RCC_OscConfig+0x478>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a64:	f7ff fb02 	bl	800106c <HAL_GetTick>
 8001a68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a6a:	e008      	b.n	8001a7e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a6c:	f7ff fafe 	bl	800106c <HAL_GetTick>
 8001a70:	4602      	mov	r2, r0
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	1ad3      	subs	r3, r2, r3
 8001a76:	2b02      	cmp	r3, #2
 8001a78:	d901      	bls.n	8001a7e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001a7a:	2303      	movs	r3, #3
 8001a7c:	e087      	b.n	8001b8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a7e:	4b27      	ldr	r3, [pc, #156]	; (8001b1c <HAL_RCC_OscConfig+0x470>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d1f0      	bne.n	8001a6c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	69da      	ldr	r2, [r3, #28]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6a1b      	ldr	r3, [r3, #32]
 8001a92:	431a      	orrs	r2, r3
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a98:	019b      	lsls	r3, r3, #6
 8001a9a:	431a      	orrs	r2, r3
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aa0:	085b      	lsrs	r3, r3, #1
 8001aa2:	3b01      	subs	r3, #1
 8001aa4:	041b      	lsls	r3, r3, #16
 8001aa6:	431a      	orrs	r2, r3
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aac:	061b      	lsls	r3, r3, #24
 8001aae:	491b      	ldr	r1, [pc, #108]	; (8001b1c <HAL_RCC_OscConfig+0x470>)
 8001ab0:	4313      	orrs	r3, r2
 8001ab2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ab4:	4b1b      	ldr	r3, [pc, #108]	; (8001b24 <HAL_RCC_OscConfig+0x478>)
 8001ab6:	2201      	movs	r2, #1
 8001ab8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aba:	f7ff fad7 	bl	800106c <HAL_GetTick>
 8001abe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ac0:	e008      	b.n	8001ad4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ac2:	f7ff fad3 	bl	800106c <HAL_GetTick>
 8001ac6:	4602      	mov	r2, r0
 8001ac8:	693b      	ldr	r3, [r7, #16]
 8001aca:	1ad3      	subs	r3, r2, r3
 8001acc:	2b02      	cmp	r3, #2
 8001ace:	d901      	bls.n	8001ad4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001ad0:	2303      	movs	r3, #3
 8001ad2:	e05c      	b.n	8001b8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ad4:	4b11      	ldr	r3, [pc, #68]	; (8001b1c <HAL_RCC_OscConfig+0x470>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d0f0      	beq.n	8001ac2 <HAL_RCC_OscConfig+0x416>
 8001ae0:	e054      	b.n	8001b8c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ae2:	4b10      	ldr	r3, [pc, #64]	; (8001b24 <HAL_RCC_OscConfig+0x478>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ae8:	f7ff fac0 	bl	800106c <HAL_GetTick>
 8001aec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001aee:	e008      	b.n	8001b02 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001af0:	f7ff fabc 	bl	800106c <HAL_GetTick>
 8001af4:	4602      	mov	r2, r0
 8001af6:	693b      	ldr	r3, [r7, #16]
 8001af8:	1ad3      	subs	r3, r2, r3
 8001afa:	2b02      	cmp	r3, #2
 8001afc:	d901      	bls.n	8001b02 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001afe:	2303      	movs	r3, #3
 8001b00:	e045      	b.n	8001b8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b02:	4b06      	ldr	r3, [pc, #24]	; (8001b1c <HAL_RCC_OscConfig+0x470>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d1f0      	bne.n	8001af0 <HAL_RCC_OscConfig+0x444>
 8001b0e:	e03d      	b.n	8001b8c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	699b      	ldr	r3, [r3, #24]
 8001b14:	2b01      	cmp	r3, #1
 8001b16:	d107      	bne.n	8001b28 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001b18:	2301      	movs	r3, #1
 8001b1a:	e038      	b.n	8001b8e <HAL_RCC_OscConfig+0x4e2>
 8001b1c:	40023800 	.word	0x40023800
 8001b20:	40007000 	.word	0x40007000
 8001b24:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001b28:	4b1b      	ldr	r3, [pc, #108]	; (8001b98 <HAL_RCC_OscConfig+0x4ec>)
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	699b      	ldr	r3, [r3, #24]
 8001b32:	2b01      	cmp	r3, #1
 8001b34:	d028      	beq.n	8001b88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b40:	429a      	cmp	r2, r3
 8001b42:	d121      	bne.n	8001b88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b4e:	429a      	cmp	r2, r3
 8001b50:	d11a      	bne.n	8001b88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001b52:	68fa      	ldr	r2, [r7, #12]
 8001b54:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001b58:	4013      	ands	r3, r2
 8001b5a:	687a      	ldr	r2, [r7, #4]
 8001b5c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001b5e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b60:	4293      	cmp	r3, r2
 8001b62:	d111      	bne.n	8001b88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b6e:	085b      	lsrs	r3, r3, #1
 8001b70:	3b01      	subs	r3, #1
 8001b72:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001b74:	429a      	cmp	r2, r3
 8001b76:	d107      	bne.n	8001b88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b82:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b84:	429a      	cmp	r2, r3
 8001b86:	d001      	beq.n	8001b8c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	e000      	b.n	8001b8e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001b8c:	2300      	movs	r3, #0
}
 8001b8e:	4618      	mov	r0, r3
 8001b90:	3718      	adds	r7, #24
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	40023800 	.word	0x40023800

08001b9c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b084      	sub	sp, #16
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
 8001ba4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d101      	bne.n	8001bb0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001bac:	2301      	movs	r3, #1
 8001bae:	e0cc      	b.n	8001d4a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001bb0:	4b68      	ldr	r3, [pc, #416]	; (8001d54 <HAL_RCC_ClockConfig+0x1b8>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f003 030f 	and.w	r3, r3, #15
 8001bb8:	683a      	ldr	r2, [r7, #0]
 8001bba:	429a      	cmp	r2, r3
 8001bbc:	d90c      	bls.n	8001bd8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bbe:	4b65      	ldr	r3, [pc, #404]	; (8001d54 <HAL_RCC_ClockConfig+0x1b8>)
 8001bc0:	683a      	ldr	r2, [r7, #0]
 8001bc2:	b2d2      	uxtb	r2, r2
 8001bc4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bc6:	4b63      	ldr	r3, [pc, #396]	; (8001d54 <HAL_RCC_ClockConfig+0x1b8>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f003 030f 	and.w	r3, r3, #15
 8001bce:	683a      	ldr	r2, [r7, #0]
 8001bd0:	429a      	cmp	r2, r3
 8001bd2:	d001      	beq.n	8001bd8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	e0b8      	b.n	8001d4a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f003 0302 	and.w	r3, r3, #2
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d020      	beq.n	8001c26 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f003 0304 	and.w	r3, r3, #4
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d005      	beq.n	8001bfc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001bf0:	4b59      	ldr	r3, [pc, #356]	; (8001d58 <HAL_RCC_ClockConfig+0x1bc>)
 8001bf2:	689b      	ldr	r3, [r3, #8]
 8001bf4:	4a58      	ldr	r2, [pc, #352]	; (8001d58 <HAL_RCC_ClockConfig+0x1bc>)
 8001bf6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001bfa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f003 0308 	and.w	r3, r3, #8
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d005      	beq.n	8001c14 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c08:	4b53      	ldr	r3, [pc, #332]	; (8001d58 <HAL_RCC_ClockConfig+0x1bc>)
 8001c0a:	689b      	ldr	r3, [r3, #8]
 8001c0c:	4a52      	ldr	r2, [pc, #328]	; (8001d58 <HAL_RCC_ClockConfig+0x1bc>)
 8001c0e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001c12:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c14:	4b50      	ldr	r3, [pc, #320]	; (8001d58 <HAL_RCC_ClockConfig+0x1bc>)
 8001c16:	689b      	ldr	r3, [r3, #8]
 8001c18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	689b      	ldr	r3, [r3, #8]
 8001c20:	494d      	ldr	r1, [pc, #308]	; (8001d58 <HAL_RCC_ClockConfig+0x1bc>)
 8001c22:	4313      	orrs	r3, r2
 8001c24:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f003 0301 	and.w	r3, r3, #1
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d044      	beq.n	8001cbc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	2b01      	cmp	r3, #1
 8001c38:	d107      	bne.n	8001c4a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c3a:	4b47      	ldr	r3, [pc, #284]	; (8001d58 <HAL_RCC_ClockConfig+0x1bc>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d119      	bne.n	8001c7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c46:	2301      	movs	r3, #1
 8001c48:	e07f      	b.n	8001d4a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	2b02      	cmp	r3, #2
 8001c50:	d003      	beq.n	8001c5a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c56:	2b03      	cmp	r3, #3
 8001c58:	d107      	bne.n	8001c6a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c5a:	4b3f      	ldr	r3, [pc, #252]	; (8001d58 <HAL_RCC_ClockConfig+0x1bc>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d109      	bne.n	8001c7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c66:	2301      	movs	r3, #1
 8001c68:	e06f      	b.n	8001d4a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c6a:	4b3b      	ldr	r3, [pc, #236]	; (8001d58 <HAL_RCC_ClockConfig+0x1bc>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f003 0302 	and.w	r3, r3, #2
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d101      	bne.n	8001c7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c76:	2301      	movs	r3, #1
 8001c78:	e067      	b.n	8001d4a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c7a:	4b37      	ldr	r3, [pc, #220]	; (8001d58 <HAL_RCC_ClockConfig+0x1bc>)
 8001c7c:	689b      	ldr	r3, [r3, #8]
 8001c7e:	f023 0203 	bic.w	r2, r3, #3
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	4934      	ldr	r1, [pc, #208]	; (8001d58 <HAL_RCC_ClockConfig+0x1bc>)
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c8c:	f7ff f9ee 	bl	800106c <HAL_GetTick>
 8001c90:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c92:	e00a      	b.n	8001caa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c94:	f7ff f9ea 	bl	800106c <HAL_GetTick>
 8001c98:	4602      	mov	r2, r0
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	1ad3      	subs	r3, r2, r3
 8001c9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d901      	bls.n	8001caa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001ca6:	2303      	movs	r3, #3
 8001ca8:	e04f      	b.n	8001d4a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001caa:	4b2b      	ldr	r3, [pc, #172]	; (8001d58 <HAL_RCC_ClockConfig+0x1bc>)
 8001cac:	689b      	ldr	r3, [r3, #8]
 8001cae:	f003 020c 	and.w	r2, r3, #12
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	009b      	lsls	r3, r3, #2
 8001cb8:	429a      	cmp	r2, r3
 8001cba:	d1eb      	bne.n	8001c94 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001cbc:	4b25      	ldr	r3, [pc, #148]	; (8001d54 <HAL_RCC_ClockConfig+0x1b8>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f003 030f 	and.w	r3, r3, #15
 8001cc4:	683a      	ldr	r2, [r7, #0]
 8001cc6:	429a      	cmp	r2, r3
 8001cc8:	d20c      	bcs.n	8001ce4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cca:	4b22      	ldr	r3, [pc, #136]	; (8001d54 <HAL_RCC_ClockConfig+0x1b8>)
 8001ccc:	683a      	ldr	r2, [r7, #0]
 8001cce:	b2d2      	uxtb	r2, r2
 8001cd0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cd2:	4b20      	ldr	r3, [pc, #128]	; (8001d54 <HAL_RCC_ClockConfig+0x1b8>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f003 030f 	and.w	r3, r3, #15
 8001cda:	683a      	ldr	r2, [r7, #0]
 8001cdc:	429a      	cmp	r2, r3
 8001cde:	d001      	beq.n	8001ce4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	e032      	b.n	8001d4a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f003 0304 	and.w	r3, r3, #4
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d008      	beq.n	8001d02 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001cf0:	4b19      	ldr	r3, [pc, #100]	; (8001d58 <HAL_RCC_ClockConfig+0x1bc>)
 8001cf2:	689b      	ldr	r3, [r3, #8]
 8001cf4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	68db      	ldr	r3, [r3, #12]
 8001cfc:	4916      	ldr	r1, [pc, #88]	; (8001d58 <HAL_RCC_ClockConfig+0x1bc>)
 8001cfe:	4313      	orrs	r3, r2
 8001d00:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f003 0308 	and.w	r3, r3, #8
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d009      	beq.n	8001d22 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d0e:	4b12      	ldr	r3, [pc, #72]	; (8001d58 <HAL_RCC_ClockConfig+0x1bc>)
 8001d10:	689b      	ldr	r3, [r3, #8]
 8001d12:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	691b      	ldr	r3, [r3, #16]
 8001d1a:	00db      	lsls	r3, r3, #3
 8001d1c:	490e      	ldr	r1, [pc, #56]	; (8001d58 <HAL_RCC_ClockConfig+0x1bc>)
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001d22:	f000 f821 	bl	8001d68 <HAL_RCC_GetSysClockFreq>
 8001d26:	4602      	mov	r2, r0
 8001d28:	4b0b      	ldr	r3, [pc, #44]	; (8001d58 <HAL_RCC_ClockConfig+0x1bc>)
 8001d2a:	689b      	ldr	r3, [r3, #8]
 8001d2c:	091b      	lsrs	r3, r3, #4
 8001d2e:	f003 030f 	and.w	r3, r3, #15
 8001d32:	490a      	ldr	r1, [pc, #40]	; (8001d5c <HAL_RCC_ClockConfig+0x1c0>)
 8001d34:	5ccb      	ldrb	r3, [r1, r3]
 8001d36:	fa22 f303 	lsr.w	r3, r2, r3
 8001d3a:	4a09      	ldr	r2, [pc, #36]	; (8001d60 <HAL_RCC_ClockConfig+0x1c4>)
 8001d3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001d3e:	4b09      	ldr	r3, [pc, #36]	; (8001d64 <HAL_RCC_ClockConfig+0x1c8>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4618      	mov	r0, r3
 8001d44:	f7ff f94e 	bl	8000fe4 <HAL_InitTick>

  return HAL_OK;
 8001d48:	2300      	movs	r3, #0
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	3710      	adds	r7, #16
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop
 8001d54:	40023c00 	.word	0x40023c00
 8001d58:	40023800 	.word	0x40023800
 8001d5c:	08004af0 	.word	0x08004af0
 8001d60:	20000004 	.word	0x20000004
 8001d64:	20000008 	.word	0x20000008

08001d68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001d6c:	b094      	sub	sp, #80	; 0x50
 8001d6e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001d70:	2300      	movs	r3, #0
 8001d72:	647b      	str	r3, [r7, #68]	; 0x44
 8001d74:	2300      	movs	r3, #0
 8001d76:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001d78:	2300      	movs	r3, #0
 8001d7a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d80:	4b79      	ldr	r3, [pc, #484]	; (8001f68 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d82:	689b      	ldr	r3, [r3, #8]
 8001d84:	f003 030c 	and.w	r3, r3, #12
 8001d88:	2b08      	cmp	r3, #8
 8001d8a:	d00d      	beq.n	8001da8 <HAL_RCC_GetSysClockFreq+0x40>
 8001d8c:	2b08      	cmp	r3, #8
 8001d8e:	f200 80e1 	bhi.w	8001f54 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d002      	beq.n	8001d9c <HAL_RCC_GetSysClockFreq+0x34>
 8001d96:	2b04      	cmp	r3, #4
 8001d98:	d003      	beq.n	8001da2 <HAL_RCC_GetSysClockFreq+0x3a>
 8001d9a:	e0db      	b.n	8001f54 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001d9c:	4b73      	ldr	r3, [pc, #460]	; (8001f6c <HAL_RCC_GetSysClockFreq+0x204>)
 8001d9e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001da0:	e0db      	b.n	8001f5a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001da2:	4b73      	ldr	r3, [pc, #460]	; (8001f70 <HAL_RCC_GetSysClockFreq+0x208>)
 8001da4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001da6:	e0d8      	b.n	8001f5a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001da8:	4b6f      	ldr	r3, [pc, #444]	; (8001f68 <HAL_RCC_GetSysClockFreq+0x200>)
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001db0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001db2:	4b6d      	ldr	r3, [pc, #436]	; (8001f68 <HAL_RCC_GetSysClockFreq+0x200>)
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d063      	beq.n	8001e86 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001dbe:	4b6a      	ldr	r3, [pc, #424]	; (8001f68 <HAL_RCC_GetSysClockFreq+0x200>)
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	099b      	lsrs	r3, r3, #6
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	63bb      	str	r3, [r7, #56]	; 0x38
 8001dc8:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001dca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001dcc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001dd0:	633b      	str	r3, [r7, #48]	; 0x30
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	637b      	str	r3, [r7, #52]	; 0x34
 8001dd6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001dda:	4622      	mov	r2, r4
 8001ddc:	462b      	mov	r3, r5
 8001dde:	f04f 0000 	mov.w	r0, #0
 8001de2:	f04f 0100 	mov.w	r1, #0
 8001de6:	0159      	lsls	r1, r3, #5
 8001de8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001dec:	0150      	lsls	r0, r2, #5
 8001dee:	4602      	mov	r2, r0
 8001df0:	460b      	mov	r3, r1
 8001df2:	4621      	mov	r1, r4
 8001df4:	1a51      	subs	r1, r2, r1
 8001df6:	6139      	str	r1, [r7, #16]
 8001df8:	4629      	mov	r1, r5
 8001dfa:	eb63 0301 	sbc.w	r3, r3, r1
 8001dfe:	617b      	str	r3, [r7, #20]
 8001e00:	f04f 0200 	mov.w	r2, #0
 8001e04:	f04f 0300 	mov.w	r3, #0
 8001e08:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001e0c:	4659      	mov	r1, fp
 8001e0e:	018b      	lsls	r3, r1, #6
 8001e10:	4651      	mov	r1, sl
 8001e12:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001e16:	4651      	mov	r1, sl
 8001e18:	018a      	lsls	r2, r1, #6
 8001e1a:	4651      	mov	r1, sl
 8001e1c:	ebb2 0801 	subs.w	r8, r2, r1
 8001e20:	4659      	mov	r1, fp
 8001e22:	eb63 0901 	sbc.w	r9, r3, r1
 8001e26:	f04f 0200 	mov.w	r2, #0
 8001e2a:	f04f 0300 	mov.w	r3, #0
 8001e2e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001e32:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001e36:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001e3a:	4690      	mov	r8, r2
 8001e3c:	4699      	mov	r9, r3
 8001e3e:	4623      	mov	r3, r4
 8001e40:	eb18 0303 	adds.w	r3, r8, r3
 8001e44:	60bb      	str	r3, [r7, #8]
 8001e46:	462b      	mov	r3, r5
 8001e48:	eb49 0303 	adc.w	r3, r9, r3
 8001e4c:	60fb      	str	r3, [r7, #12]
 8001e4e:	f04f 0200 	mov.w	r2, #0
 8001e52:	f04f 0300 	mov.w	r3, #0
 8001e56:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001e5a:	4629      	mov	r1, r5
 8001e5c:	024b      	lsls	r3, r1, #9
 8001e5e:	4621      	mov	r1, r4
 8001e60:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001e64:	4621      	mov	r1, r4
 8001e66:	024a      	lsls	r2, r1, #9
 8001e68:	4610      	mov	r0, r2
 8001e6a:	4619      	mov	r1, r3
 8001e6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e6e:	2200      	movs	r2, #0
 8001e70:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e72:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001e74:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001e78:	f7fe fa0a 	bl	8000290 <__aeabi_uldivmod>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	460b      	mov	r3, r1
 8001e80:	4613      	mov	r3, r2
 8001e82:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001e84:	e058      	b.n	8001f38 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e86:	4b38      	ldr	r3, [pc, #224]	; (8001f68 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	099b      	lsrs	r3, r3, #6
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	4618      	mov	r0, r3
 8001e90:	4611      	mov	r1, r2
 8001e92:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001e96:	623b      	str	r3, [r7, #32]
 8001e98:	2300      	movs	r3, #0
 8001e9a:	627b      	str	r3, [r7, #36]	; 0x24
 8001e9c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001ea0:	4642      	mov	r2, r8
 8001ea2:	464b      	mov	r3, r9
 8001ea4:	f04f 0000 	mov.w	r0, #0
 8001ea8:	f04f 0100 	mov.w	r1, #0
 8001eac:	0159      	lsls	r1, r3, #5
 8001eae:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001eb2:	0150      	lsls	r0, r2, #5
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	460b      	mov	r3, r1
 8001eb8:	4641      	mov	r1, r8
 8001eba:	ebb2 0a01 	subs.w	sl, r2, r1
 8001ebe:	4649      	mov	r1, r9
 8001ec0:	eb63 0b01 	sbc.w	fp, r3, r1
 8001ec4:	f04f 0200 	mov.w	r2, #0
 8001ec8:	f04f 0300 	mov.w	r3, #0
 8001ecc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001ed0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001ed4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001ed8:	ebb2 040a 	subs.w	r4, r2, sl
 8001edc:	eb63 050b 	sbc.w	r5, r3, fp
 8001ee0:	f04f 0200 	mov.w	r2, #0
 8001ee4:	f04f 0300 	mov.w	r3, #0
 8001ee8:	00eb      	lsls	r3, r5, #3
 8001eea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001eee:	00e2      	lsls	r2, r4, #3
 8001ef0:	4614      	mov	r4, r2
 8001ef2:	461d      	mov	r5, r3
 8001ef4:	4643      	mov	r3, r8
 8001ef6:	18e3      	adds	r3, r4, r3
 8001ef8:	603b      	str	r3, [r7, #0]
 8001efa:	464b      	mov	r3, r9
 8001efc:	eb45 0303 	adc.w	r3, r5, r3
 8001f00:	607b      	str	r3, [r7, #4]
 8001f02:	f04f 0200 	mov.w	r2, #0
 8001f06:	f04f 0300 	mov.w	r3, #0
 8001f0a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001f0e:	4629      	mov	r1, r5
 8001f10:	028b      	lsls	r3, r1, #10
 8001f12:	4621      	mov	r1, r4
 8001f14:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001f18:	4621      	mov	r1, r4
 8001f1a:	028a      	lsls	r2, r1, #10
 8001f1c:	4610      	mov	r0, r2
 8001f1e:	4619      	mov	r1, r3
 8001f20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f22:	2200      	movs	r2, #0
 8001f24:	61bb      	str	r3, [r7, #24]
 8001f26:	61fa      	str	r2, [r7, #28]
 8001f28:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001f2c:	f7fe f9b0 	bl	8000290 <__aeabi_uldivmod>
 8001f30:	4602      	mov	r2, r0
 8001f32:	460b      	mov	r3, r1
 8001f34:	4613      	mov	r3, r2
 8001f36:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001f38:	4b0b      	ldr	r3, [pc, #44]	; (8001f68 <HAL_RCC_GetSysClockFreq+0x200>)
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	0c1b      	lsrs	r3, r3, #16
 8001f3e:	f003 0303 	and.w	r3, r3, #3
 8001f42:	3301      	adds	r3, #1
 8001f44:	005b      	lsls	r3, r3, #1
 8001f46:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001f48:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001f4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f50:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001f52:	e002      	b.n	8001f5a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001f54:	4b05      	ldr	r3, [pc, #20]	; (8001f6c <HAL_RCC_GetSysClockFreq+0x204>)
 8001f56:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001f58:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	3750      	adds	r7, #80	; 0x50
 8001f60:	46bd      	mov	sp, r7
 8001f62:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001f66:	bf00      	nop
 8001f68:	40023800 	.word	0x40023800
 8001f6c:	00f42400 	.word	0x00f42400
 8001f70:	007a1200 	.word	0x007a1200

08001f74 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f74:	b480      	push	{r7}
 8001f76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f78:	4b03      	ldr	r3, [pc, #12]	; (8001f88 <HAL_RCC_GetHCLKFreq+0x14>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr
 8001f86:	bf00      	nop
 8001f88:	20000004 	.word	0x20000004

08001f8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001f90:	f7ff fff0 	bl	8001f74 <HAL_RCC_GetHCLKFreq>
 8001f94:	4602      	mov	r2, r0
 8001f96:	4b05      	ldr	r3, [pc, #20]	; (8001fac <HAL_RCC_GetPCLK1Freq+0x20>)
 8001f98:	689b      	ldr	r3, [r3, #8]
 8001f9a:	0a9b      	lsrs	r3, r3, #10
 8001f9c:	f003 0307 	and.w	r3, r3, #7
 8001fa0:	4903      	ldr	r1, [pc, #12]	; (8001fb0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001fa2:	5ccb      	ldrb	r3, [r1, r3]
 8001fa4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fa8:	4618      	mov	r0, r3
 8001faa:	bd80      	pop	{r7, pc}
 8001fac:	40023800 	.word	0x40023800
 8001fb0:	08004b00 	.word	0x08004b00

08001fb4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001fb8:	f7ff ffdc 	bl	8001f74 <HAL_RCC_GetHCLKFreq>
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	4b05      	ldr	r3, [pc, #20]	; (8001fd4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001fc0:	689b      	ldr	r3, [r3, #8]
 8001fc2:	0b5b      	lsrs	r3, r3, #13
 8001fc4:	f003 0307 	and.w	r3, r3, #7
 8001fc8:	4903      	ldr	r1, [pc, #12]	; (8001fd8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001fca:	5ccb      	ldrb	r3, [r1, r3]
 8001fcc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	bd80      	pop	{r7, pc}
 8001fd4:	40023800 	.word	0x40023800
 8001fd8:	08004b00 	.word	0x08004b00

08001fdc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b082      	sub	sp, #8
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d101      	bne.n	8001fee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001fea:	2301      	movs	r3, #1
 8001fec:	e041      	b.n	8002072 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ff4:	b2db      	uxtb	r3, r3
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d106      	bne.n	8002008 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002002:	6878      	ldr	r0, [r7, #4]
 8002004:	f7fe fe48 	bl	8000c98 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2202      	movs	r2, #2
 800200c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681a      	ldr	r2, [r3, #0]
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	3304      	adds	r3, #4
 8002018:	4619      	mov	r1, r3
 800201a:	4610      	mov	r0, r2
 800201c:	f000 fa96 	bl	800254c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2201      	movs	r2, #1
 8002024:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2201      	movs	r2, #1
 800202c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2201      	movs	r2, #1
 8002034:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2201      	movs	r2, #1
 800203c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2201      	movs	r2, #1
 8002044:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2201      	movs	r2, #1
 800204c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2201      	movs	r2, #1
 8002054:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2201      	movs	r2, #1
 800205c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2201      	movs	r2, #1
 8002064:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2201      	movs	r2, #1
 800206c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002070:	2300      	movs	r3, #0
}
 8002072:	4618      	mov	r0, r3
 8002074:	3708      	adds	r7, #8
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}
	...

0800207c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800207c:	b480      	push	{r7}
 800207e:	b085      	sub	sp, #20
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800208a:	b2db      	uxtb	r3, r3
 800208c:	2b01      	cmp	r3, #1
 800208e:	d001      	beq.n	8002094 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002090:	2301      	movs	r3, #1
 8002092:	e04e      	b.n	8002132 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2202      	movs	r2, #2
 8002098:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	68da      	ldr	r2, [r3, #12]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f042 0201 	orr.w	r2, r2, #1
 80020aa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a23      	ldr	r2, [pc, #140]	; (8002140 <HAL_TIM_Base_Start_IT+0xc4>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d022      	beq.n	80020fc <HAL_TIM_Base_Start_IT+0x80>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020be:	d01d      	beq.n	80020fc <HAL_TIM_Base_Start_IT+0x80>
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a1f      	ldr	r2, [pc, #124]	; (8002144 <HAL_TIM_Base_Start_IT+0xc8>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d018      	beq.n	80020fc <HAL_TIM_Base_Start_IT+0x80>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4a1e      	ldr	r2, [pc, #120]	; (8002148 <HAL_TIM_Base_Start_IT+0xcc>)
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d013      	beq.n	80020fc <HAL_TIM_Base_Start_IT+0x80>
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a1c      	ldr	r2, [pc, #112]	; (800214c <HAL_TIM_Base_Start_IT+0xd0>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d00e      	beq.n	80020fc <HAL_TIM_Base_Start_IT+0x80>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4a1b      	ldr	r2, [pc, #108]	; (8002150 <HAL_TIM_Base_Start_IT+0xd4>)
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d009      	beq.n	80020fc <HAL_TIM_Base_Start_IT+0x80>
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a19      	ldr	r2, [pc, #100]	; (8002154 <HAL_TIM_Base_Start_IT+0xd8>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d004      	beq.n	80020fc <HAL_TIM_Base_Start_IT+0x80>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4a18      	ldr	r2, [pc, #96]	; (8002158 <HAL_TIM_Base_Start_IT+0xdc>)
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d111      	bne.n	8002120 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	689b      	ldr	r3, [r3, #8]
 8002102:	f003 0307 	and.w	r3, r3, #7
 8002106:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	2b06      	cmp	r3, #6
 800210c:	d010      	beq.n	8002130 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	681a      	ldr	r2, [r3, #0]
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f042 0201 	orr.w	r2, r2, #1
 800211c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800211e:	e007      	b.n	8002130 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	681a      	ldr	r2, [r3, #0]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f042 0201 	orr.w	r2, r2, #1
 800212e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002130:	2300      	movs	r3, #0
}
 8002132:	4618      	mov	r0, r3
 8002134:	3714      	adds	r7, #20
 8002136:	46bd      	mov	sp, r7
 8002138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213c:	4770      	bx	lr
 800213e:	bf00      	nop
 8002140:	40010000 	.word	0x40010000
 8002144:	40000400 	.word	0x40000400
 8002148:	40000800 	.word	0x40000800
 800214c:	40000c00 	.word	0x40000c00
 8002150:	40010400 	.word	0x40010400
 8002154:	40014000 	.word	0x40014000
 8002158:	40001800 	.word	0x40001800

0800215c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b082      	sub	sp, #8
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	691b      	ldr	r3, [r3, #16]
 800216a:	f003 0302 	and.w	r3, r3, #2
 800216e:	2b02      	cmp	r3, #2
 8002170:	d122      	bne.n	80021b8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	68db      	ldr	r3, [r3, #12]
 8002178:	f003 0302 	and.w	r3, r3, #2
 800217c:	2b02      	cmp	r3, #2
 800217e:	d11b      	bne.n	80021b8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f06f 0202 	mvn.w	r2, #2
 8002188:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2201      	movs	r2, #1
 800218e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	699b      	ldr	r3, [r3, #24]
 8002196:	f003 0303 	and.w	r3, r3, #3
 800219a:	2b00      	cmp	r3, #0
 800219c:	d003      	beq.n	80021a6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800219e:	6878      	ldr	r0, [r7, #4]
 80021a0:	f000 f9b5 	bl	800250e <HAL_TIM_IC_CaptureCallback>
 80021a4:	e005      	b.n	80021b2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80021a6:	6878      	ldr	r0, [r7, #4]
 80021a8:	f000 f9a7 	bl	80024fa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021ac:	6878      	ldr	r0, [r7, #4]
 80021ae:	f000 f9b8 	bl	8002522 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2200      	movs	r2, #0
 80021b6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	691b      	ldr	r3, [r3, #16]
 80021be:	f003 0304 	and.w	r3, r3, #4
 80021c2:	2b04      	cmp	r3, #4
 80021c4:	d122      	bne.n	800220c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	68db      	ldr	r3, [r3, #12]
 80021cc:	f003 0304 	and.w	r3, r3, #4
 80021d0:	2b04      	cmp	r3, #4
 80021d2:	d11b      	bne.n	800220c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f06f 0204 	mvn.w	r2, #4
 80021dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2202      	movs	r2, #2
 80021e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	699b      	ldr	r3, [r3, #24]
 80021ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d003      	beq.n	80021fa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021f2:	6878      	ldr	r0, [r7, #4]
 80021f4:	f000 f98b 	bl	800250e <HAL_TIM_IC_CaptureCallback>
 80021f8:	e005      	b.n	8002206 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021fa:	6878      	ldr	r0, [r7, #4]
 80021fc:	f000 f97d 	bl	80024fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002200:	6878      	ldr	r0, [r7, #4]
 8002202:	f000 f98e 	bl	8002522 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2200      	movs	r2, #0
 800220a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	691b      	ldr	r3, [r3, #16]
 8002212:	f003 0308 	and.w	r3, r3, #8
 8002216:	2b08      	cmp	r3, #8
 8002218:	d122      	bne.n	8002260 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	68db      	ldr	r3, [r3, #12]
 8002220:	f003 0308 	and.w	r3, r3, #8
 8002224:	2b08      	cmp	r3, #8
 8002226:	d11b      	bne.n	8002260 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f06f 0208 	mvn.w	r2, #8
 8002230:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2204      	movs	r2, #4
 8002236:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	69db      	ldr	r3, [r3, #28]
 800223e:	f003 0303 	and.w	r3, r3, #3
 8002242:	2b00      	cmp	r3, #0
 8002244:	d003      	beq.n	800224e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002246:	6878      	ldr	r0, [r7, #4]
 8002248:	f000 f961 	bl	800250e <HAL_TIM_IC_CaptureCallback>
 800224c:	e005      	b.n	800225a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800224e:	6878      	ldr	r0, [r7, #4]
 8002250:	f000 f953 	bl	80024fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002254:	6878      	ldr	r0, [r7, #4]
 8002256:	f000 f964 	bl	8002522 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2200      	movs	r2, #0
 800225e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	691b      	ldr	r3, [r3, #16]
 8002266:	f003 0310 	and.w	r3, r3, #16
 800226a:	2b10      	cmp	r3, #16
 800226c:	d122      	bne.n	80022b4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	68db      	ldr	r3, [r3, #12]
 8002274:	f003 0310 	and.w	r3, r3, #16
 8002278:	2b10      	cmp	r3, #16
 800227a:	d11b      	bne.n	80022b4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f06f 0210 	mvn.w	r2, #16
 8002284:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2208      	movs	r2, #8
 800228a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	69db      	ldr	r3, [r3, #28]
 8002292:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002296:	2b00      	cmp	r3, #0
 8002298:	d003      	beq.n	80022a2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800229a:	6878      	ldr	r0, [r7, #4]
 800229c:	f000 f937 	bl	800250e <HAL_TIM_IC_CaptureCallback>
 80022a0:	e005      	b.n	80022ae <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022a2:	6878      	ldr	r0, [r7, #4]
 80022a4:	f000 f929 	bl	80024fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022a8:	6878      	ldr	r0, [r7, #4]
 80022aa:	f000 f93a 	bl	8002522 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2200      	movs	r2, #0
 80022b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	691b      	ldr	r3, [r3, #16]
 80022ba:	f003 0301 	and.w	r3, r3, #1
 80022be:	2b01      	cmp	r3, #1
 80022c0:	d10e      	bne.n	80022e0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	68db      	ldr	r3, [r3, #12]
 80022c8:	f003 0301 	and.w	r3, r3, #1
 80022cc:	2b01      	cmp	r3, #1
 80022ce:	d107      	bne.n	80022e0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f06f 0201 	mvn.w	r2, #1
 80022d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80022da:	6878      	ldr	r0, [r7, #4]
 80022dc:	f7fe fc06 	bl	8000aec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	691b      	ldr	r3, [r3, #16]
 80022e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022ea:	2b80      	cmp	r3, #128	; 0x80
 80022ec:	d10e      	bne.n	800230c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	68db      	ldr	r3, [r3, #12]
 80022f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022f8:	2b80      	cmp	r3, #128	; 0x80
 80022fa:	d107      	bne.n	800230c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002304:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002306:	6878      	ldr	r0, [r7, #4]
 8002308:	f000 fae0 	bl	80028cc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	691b      	ldr	r3, [r3, #16]
 8002312:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002316:	2b40      	cmp	r3, #64	; 0x40
 8002318:	d10e      	bne.n	8002338 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	68db      	ldr	r3, [r3, #12]
 8002320:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002324:	2b40      	cmp	r3, #64	; 0x40
 8002326:	d107      	bne.n	8002338 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002330:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002332:	6878      	ldr	r0, [r7, #4]
 8002334:	f000 f8ff 	bl	8002536 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	691b      	ldr	r3, [r3, #16]
 800233e:	f003 0320 	and.w	r3, r3, #32
 8002342:	2b20      	cmp	r3, #32
 8002344:	d10e      	bne.n	8002364 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	68db      	ldr	r3, [r3, #12]
 800234c:	f003 0320 	and.w	r3, r3, #32
 8002350:	2b20      	cmp	r3, #32
 8002352:	d107      	bne.n	8002364 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f06f 0220 	mvn.w	r2, #32
 800235c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800235e:	6878      	ldr	r0, [r7, #4]
 8002360:	f000 faaa 	bl	80028b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002364:	bf00      	nop
 8002366:	3708      	adds	r7, #8
 8002368:	46bd      	mov	sp, r7
 800236a:	bd80      	pop	{r7, pc}

0800236c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b084      	sub	sp, #16
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
 8002374:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002376:	2300      	movs	r3, #0
 8002378:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002380:	2b01      	cmp	r3, #1
 8002382:	d101      	bne.n	8002388 <HAL_TIM_ConfigClockSource+0x1c>
 8002384:	2302      	movs	r3, #2
 8002386:	e0b4      	b.n	80024f2 <HAL_TIM_ConfigClockSource+0x186>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2201      	movs	r2, #1
 800238c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2202      	movs	r2, #2
 8002394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	689b      	ldr	r3, [r3, #8]
 800239e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80023a0:	68bb      	ldr	r3, [r7, #8]
 80023a2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80023a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80023ae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	68ba      	ldr	r2, [r7, #8]
 80023b6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80023c0:	d03e      	beq.n	8002440 <HAL_TIM_ConfigClockSource+0xd4>
 80023c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80023c6:	f200 8087 	bhi.w	80024d8 <HAL_TIM_ConfigClockSource+0x16c>
 80023ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023ce:	f000 8086 	beq.w	80024de <HAL_TIM_ConfigClockSource+0x172>
 80023d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023d6:	d87f      	bhi.n	80024d8 <HAL_TIM_ConfigClockSource+0x16c>
 80023d8:	2b70      	cmp	r3, #112	; 0x70
 80023da:	d01a      	beq.n	8002412 <HAL_TIM_ConfigClockSource+0xa6>
 80023dc:	2b70      	cmp	r3, #112	; 0x70
 80023de:	d87b      	bhi.n	80024d8 <HAL_TIM_ConfigClockSource+0x16c>
 80023e0:	2b60      	cmp	r3, #96	; 0x60
 80023e2:	d050      	beq.n	8002486 <HAL_TIM_ConfigClockSource+0x11a>
 80023e4:	2b60      	cmp	r3, #96	; 0x60
 80023e6:	d877      	bhi.n	80024d8 <HAL_TIM_ConfigClockSource+0x16c>
 80023e8:	2b50      	cmp	r3, #80	; 0x50
 80023ea:	d03c      	beq.n	8002466 <HAL_TIM_ConfigClockSource+0xfa>
 80023ec:	2b50      	cmp	r3, #80	; 0x50
 80023ee:	d873      	bhi.n	80024d8 <HAL_TIM_ConfigClockSource+0x16c>
 80023f0:	2b40      	cmp	r3, #64	; 0x40
 80023f2:	d058      	beq.n	80024a6 <HAL_TIM_ConfigClockSource+0x13a>
 80023f4:	2b40      	cmp	r3, #64	; 0x40
 80023f6:	d86f      	bhi.n	80024d8 <HAL_TIM_ConfigClockSource+0x16c>
 80023f8:	2b30      	cmp	r3, #48	; 0x30
 80023fa:	d064      	beq.n	80024c6 <HAL_TIM_ConfigClockSource+0x15a>
 80023fc:	2b30      	cmp	r3, #48	; 0x30
 80023fe:	d86b      	bhi.n	80024d8 <HAL_TIM_ConfigClockSource+0x16c>
 8002400:	2b20      	cmp	r3, #32
 8002402:	d060      	beq.n	80024c6 <HAL_TIM_ConfigClockSource+0x15a>
 8002404:	2b20      	cmp	r3, #32
 8002406:	d867      	bhi.n	80024d8 <HAL_TIM_ConfigClockSource+0x16c>
 8002408:	2b00      	cmp	r3, #0
 800240a:	d05c      	beq.n	80024c6 <HAL_TIM_ConfigClockSource+0x15a>
 800240c:	2b10      	cmp	r3, #16
 800240e:	d05a      	beq.n	80024c6 <HAL_TIM_ConfigClockSource+0x15a>
 8002410:	e062      	b.n	80024d8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6818      	ldr	r0, [r3, #0]
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	6899      	ldr	r1, [r3, #8]
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	685a      	ldr	r2, [r3, #4]
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	68db      	ldr	r3, [r3, #12]
 8002422:	f000 f9ad 	bl	8002780 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800242e:	68bb      	ldr	r3, [r7, #8]
 8002430:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002434:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	68ba      	ldr	r2, [r7, #8]
 800243c:	609a      	str	r2, [r3, #8]
      break;
 800243e:	e04f      	b.n	80024e0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6818      	ldr	r0, [r3, #0]
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	6899      	ldr	r1, [r3, #8]
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	685a      	ldr	r2, [r3, #4]
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	68db      	ldr	r3, [r3, #12]
 8002450:	f000 f996 	bl	8002780 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	689a      	ldr	r2, [r3, #8]
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002462:	609a      	str	r2, [r3, #8]
      break;
 8002464:	e03c      	b.n	80024e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6818      	ldr	r0, [r3, #0]
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	6859      	ldr	r1, [r3, #4]
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	68db      	ldr	r3, [r3, #12]
 8002472:	461a      	mov	r2, r3
 8002474:	f000 f90a 	bl	800268c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	2150      	movs	r1, #80	; 0x50
 800247e:	4618      	mov	r0, r3
 8002480:	f000 f963 	bl	800274a <TIM_ITRx_SetConfig>
      break;
 8002484:	e02c      	b.n	80024e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6818      	ldr	r0, [r3, #0]
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	6859      	ldr	r1, [r3, #4]
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	68db      	ldr	r3, [r3, #12]
 8002492:	461a      	mov	r2, r3
 8002494:	f000 f929 	bl	80026ea <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	2160      	movs	r1, #96	; 0x60
 800249e:	4618      	mov	r0, r3
 80024a0:	f000 f953 	bl	800274a <TIM_ITRx_SetConfig>
      break;
 80024a4:	e01c      	b.n	80024e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6818      	ldr	r0, [r3, #0]
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	6859      	ldr	r1, [r3, #4]
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	68db      	ldr	r3, [r3, #12]
 80024b2:	461a      	mov	r2, r3
 80024b4:	f000 f8ea 	bl	800268c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	2140      	movs	r1, #64	; 0x40
 80024be:	4618      	mov	r0, r3
 80024c0:	f000 f943 	bl	800274a <TIM_ITRx_SetConfig>
      break;
 80024c4:	e00c      	b.n	80024e0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681a      	ldr	r2, [r3, #0]
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4619      	mov	r1, r3
 80024d0:	4610      	mov	r0, r2
 80024d2:	f000 f93a 	bl	800274a <TIM_ITRx_SetConfig>
      break;
 80024d6:	e003      	b.n	80024e0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80024d8:	2301      	movs	r3, #1
 80024da:	73fb      	strb	r3, [r7, #15]
      break;
 80024dc:	e000      	b.n	80024e0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80024de:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2201      	movs	r2, #1
 80024e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2200      	movs	r2, #0
 80024ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80024f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	3710      	adds	r7, #16
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}

080024fa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80024fa:	b480      	push	{r7}
 80024fc:	b083      	sub	sp, #12
 80024fe:	af00      	add	r7, sp, #0
 8002500:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002502:	bf00      	nop
 8002504:	370c      	adds	r7, #12
 8002506:	46bd      	mov	sp, r7
 8002508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250c:	4770      	bx	lr

0800250e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800250e:	b480      	push	{r7}
 8002510:	b083      	sub	sp, #12
 8002512:	af00      	add	r7, sp, #0
 8002514:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002516:	bf00      	nop
 8002518:	370c      	adds	r7, #12
 800251a:	46bd      	mov	sp, r7
 800251c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002520:	4770      	bx	lr

08002522 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002522:	b480      	push	{r7}
 8002524:	b083      	sub	sp, #12
 8002526:	af00      	add	r7, sp, #0
 8002528:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800252a:	bf00      	nop
 800252c:	370c      	adds	r7, #12
 800252e:	46bd      	mov	sp, r7
 8002530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002534:	4770      	bx	lr

08002536 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002536:	b480      	push	{r7}
 8002538:	b083      	sub	sp, #12
 800253a:	af00      	add	r7, sp, #0
 800253c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800253e:	bf00      	nop
 8002540:	370c      	adds	r7, #12
 8002542:	46bd      	mov	sp, r7
 8002544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002548:	4770      	bx	lr
	...

0800254c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800254c:	b480      	push	{r7}
 800254e:	b085      	sub	sp, #20
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
 8002554:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	4a40      	ldr	r2, [pc, #256]	; (8002660 <TIM_Base_SetConfig+0x114>)
 8002560:	4293      	cmp	r3, r2
 8002562:	d013      	beq.n	800258c <TIM_Base_SetConfig+0x40>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800256a:	d00f      	beq.n	800258c <TIM_Base_SetConfig+0x40>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	4a3d      	ldr	r2, [pc, #244]	; (8002664 <TIM_Base_SetConfig+0x118>)
 8002570:	4293      	cmp	r3, r2
 8002572:	d00b      	beq.n	800258c <TIM_Base_SetConfig+0x40>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	4a3c      	ldr	r2, [pc, #240]	; (8002668 <TIM_Base_SetConfig+0x11c>)
 8002578:	4293      	cmp	r3, r2
 800257a:	d007      	beq.n	800258c <TIM_Base_SetConfig+0x40>
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	4a3b      	ldr	r2, [pc, #236]	; (800266c <TIM_Base_SetConfig+0x120>)
 8002580:	4293      	cmp	r3, r2
 8002582:	d003      	beq.n	800258c <TIM_Base_SetConfig+0x40>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	4a3a      	ldr	r2, [pc, #232]	; (8002670 <TIM_Base_SetConfig+0x124>)
 8002588:	4293      	cmp	r3, r2
 800258a:	d108      	bne.n	800259e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002592:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	68fa      	ldr	r2, [r7, #12]
 800259a:	4313      	orrs	r3, r2
 800259c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	4a2f      	ldr	r2, [pc, #188]	; (8002660 <TIM_Base_SetConfig+0x114>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d02b      	beq.n	80025fe <TIM_Base_SetConfig+0xb2>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025ac:	d027      	beq.n	80025fe <TIM_Base_SetConfig+0xb2>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	4a2c      	ldr	r2, [pc, #176]	; (8002664 <TIM_Base_SetConfig+0x118>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d023      	beq.n	80025fe <TIM_Base_SetConfig+0xb2>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	4a2b      	ldr	r2, [pc, #172]	; (8002668 <TIM_Base_SetConfig+0x11c>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d01f      	beq.n	80025fe <TIM_Base_SetConfig+0xb2>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	4a2a      	ldr	r2, [pc, #168]	; (800266c <TIM_Base_SetConfig+0x120>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d01b      	beq.n	80025fe <TIM_Base_SetConfig+0xb2>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	4a29      	ldr	r2, [pc, #164]	; (8002670 <TIM_Base_SetConfig+0x124>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d017      	beq.n	80025fe <TIM_Base_SetConfig+0xb2>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	4a28      	ldr	r2, [pc, #160]	; (8002674 <TIM_Base_SetConfig+0x128>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d013      	beq.n	80025fe <TIM_Base_SetConfig+0xb2>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	4a27      	ldr	r2, [pc, #156]	; (8002678 <TIM_Base_SetConfig+0x12c>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d00f      	beq.n	80025fe <TIM_Base_SetConfig+0xb2>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	4a26      	ldr	r2, [pc, #152]	; (800267c <TIM_Base_SetConfig+0x130>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d00b      	beq.n	80025fe <TIM_Base_SetConfig+0xb2>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	4a25      	ldr	r2, [pc, #148]	; (8002680 <TIM_Base_SetConfig+0x134>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d007      	beq.n	80025fe <TIM_Base_SetConfig+0xb2>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	4a24      	ldr	r2, [pc, #144]	; (8002684 <TIM_Base_SetConfig+0x138>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d003      	beq.n	80025fe <TIM_Base_SetConfig+0xb2>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	4a23      	ldr	r2, [pc, #140]	; (8002688 <TIM_Base_SetConfig+0x13c>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d108      	bne.n	8002610 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002604:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	68db      	ldr	r3, [r3, #12]
 800260a:	68fa      	ldr	r2, [r7, #12]
 800260c:	4313      	orrs	r3, r2
 800260e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	695b      	ldr	r3, [r3, #20]
 800261a:	4313      	orrs	r3, r2
 800261c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	68fa      	ldr	r2, [r7, #12]
 8002622:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	689a      	ldr	r2, [r3, #8]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	681a      	ldr	r2, [r3, #0]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	4a0a      	ldr	r2, [pc, #40]	; (8002660 <TIM_Base_SetConfig+0x114>)
 8002638:	4293      	cmp	r3, r2
 800263a:	d003      	beq.n	8002644 <TIM_Base_SetConfig+0xf8>
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	4a0c      	ldr	r2, [pc, #48]	; (8002670 <TIM_Base_SetConfig+0x124>)
 8002640:	4293      	cmp	r3, r2
 8002642:	d103      	bne.n	800264c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	691a      	ldr	r2, [r3, #16]
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2201      	movs	r2, #1
 8002650:	615a      	str	r2, [r3, #20]
}
 8002652:	bf00      	nop
 8002654:	3714      	adds	r7, #20
 8002656:	46bd      	mov	sp, r7
 8002658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265c:	4770      	bx	lr
 800265e:	bf00      	nop
 8002660:	40010000 	.word	0x40010000
 8002664:	40000400 	.word	0x40000400
 8002668:	40000800 	.word	0x40000800
 800266c:	40000c00 	.word	0x40000c00
 8002670:	40010400 	.word	0x40010400
 8002674:	40014000 	.word	0x40014000
 8002678:	40014400 	.word	0x40014400
 800267c:	40014800 	.word	0x40014800
 8002680:	40001800 	.word	0x40001800
 8002684:	40001c00 	.word	0x40001c00
 8002688:	40002000 	.word	0x40002000

0800268c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800268c:	b480      	push	{r7}
 800268e:	b087      	sub	sp, #28
 8002690:	af00      	add	r7, sp, #0
 8002692:	60f8      	str	r0, [r7, #12]
 8002694:	60b9      	str	r1, [r7, #8]
 8002696:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	6a1b      	ldr	r3, [r3, #32]
 800269c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	6a1b      	ldr	r3, [r3, #32]
 80026a2:	f023 0201 	bic.w	r2, r3, #1
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	699b      	ldr	r3, [r3, #24]
 80026ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80026b0:	693b      	ldr	r3, [r7, #16]
 80026b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80026b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	011b      	lsls	r3, r3, #4
 80026bc:	693a      	ldr	r2, [r7, #16]
 80026be:	4313      	orrs	r3, r2
 80026c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80026c2:	697b      	ldr	r3, [r7, #20]
 80026c4:	f023 030a 	bic.w	r3, r3, #10
 80026c8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80026ca:	697a      	ldr	r2, [r7, #20]
 80026cc:	68bb      	ldr	r3, [r7, #8]
 80026ce:	4313      	orrs	r3, r2
 80026d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	693a      	ldr	r2, [r7, #16]
 80026d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	697a      	ldr	r2, [r7, #20]
 80026dc:	621a      	str	r2, [r3, #32]
}
 80026de:	bf00      	nop
 80026e0:	371c      	adds	r7, #28
 80026e2:	46bd      	mov	sp, r7
 80026e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e8:	4770      	bx	lr

080026ea <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80026ea:	b480      	push	{r7}
 80026ec:	b087      	sub	sp, #28
 80026ee:	af00      	add	r7, sp, #0
 80026f0:	60f8      	str	r0, [r7, #12]
 80026f2:	60b9      	str	r1, [r7, #8]
 80026f4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	6a1b      	ldr	r3, [r3, #32]
 80026fa:	f023 0210 	bic.w	r2, r3, #16
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	699b      	ldr	r3, [r3, #24]
 8002706:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	6a1b      	ldr	r3, [r3, #32]
 800270c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800270e:	697b      	ldr	r3, [r7, #20]
 8002710:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002714:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	031b      	lsls	r3, r3, #12
 800271a:	697a      	ldr	r2, [r7, #20]
 800271c:	4313      	orrs	r3, r2
 800271e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002720:	693b      	ldr	r3, [r7, #16]
 8002722:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002726:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002728:	68bb      	ldr	r3, [r7, #8]
 800272a:	011b      	lsls	r3, r3, #4
 800272c:	693a      	ldr	r2, [r7, #16]
 800272e:	4313      	orrs	r3, r2
 8002730:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	697a      	ldr	r2, [r7, #20]
 8002736:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	693a      	ldr	r2, [r7, #16]
 800273c:	621a      	str	r2, [r3, #32]
}
 800273e:	bf00      	nop
 8002740:	371c      	adds	r7, #28
 8002742:	46bd      	mov	sp, r7
 8002744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002748:	4770      	bx	lr

0800274a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800274a:	b480      	push	{r7}
 800274c:	b085      	sub	sp, #20
 800274e:	af00      	add	r7, sp, #0
 8002750:	6078      	str	r0, [r7, #4]
 8002752:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	689b      	ldr	r3, [r3, #8]
 8002758:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002760:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002762:	683a      	ldr	r2, [r7, #0]
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	4313      	orrs	r3, r2
 8002768:	f043 0307 	orr.w	r3, r3, #7
 800276c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	68fa      	ldr	r2, [r7, #12]
 8002772:	609a      	str	r2, [r3, #8]
}
 8002774:	bf00      	nop
 8002776:	3714      	adds	r7, #20
 8002778:	46bd      	mov	sp, r7
 800277a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277e:	4770      	bx	lr

08002780 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002780:	b480      	push	{r7}
 8002782:	b087      	sub	sp, #28
 8002784:	af00      	add	r7, sp, #0
 8002786:	60f8      	str	r0, [r7, #12]
 8002788:	60b9      	str	r1, [r7, #8]
 800278a:	607a      	str	r2, [r7, #4]
 800278c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	689b      	ldr	r3, [r3, #8]
 8002792:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002794:	697b      	ldr	r3, [r7, #20]
 8002796:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800279a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	021a      	lsls	r2, r3, #8
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	431a      	orrs	r2, r3
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	4313      	orrs	r3, r2
 80027a8:	697a      	ldr	r2, [r7, #20]
 80027aa:	4313      	orrs	r3, r2
 80027ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	697a      	ldr	r2, [r7, #20]
 80027b2:	609a      	str	r2, [r3, #8]
}
 80027b4:	bf00      	nop
 80027b6:	371c      	adds	r7, #28
 80027b8:	46bd      	mov	sp, r7
 80027ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027be:	4770      	bx	lr

080027c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80027c0:	b480      	push	{r7}
 80027c2:	b085      	sub	sp, #20
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
 80027c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027d0:	2b01      	cmp	r3, #1
 80027d2:	d101      	bne.n	80027d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80027d4:	2302      	movs	r3, #2
 80027d6:	e05a      	b.n	800288e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2201      	movs	r2, #1
 80027dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2202      	movs	r2, #2
 80027e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	689b      	ldr	r3, [r3, #8]
 80027f6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027fe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	68fa      	ldr	r2, [r7, #12]
 8002806:	4313      	orrs	r3, r2
 8002808:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	68fa      	ldr	r2, [r7, #12]
 8002810:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4a21      	ldr	r2, [pc, #132]	; (800289c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d022      	beq.n	8002862 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002824:	d01d      	beq.n	8002862 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a1d      	ldr	r2, [pc, #116]	; (80028a0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d018      	beq.n	8002862 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a1b      	ldr	r2, [pc, #108]	; (80028a4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d013      	beq.n	8002862 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a1a      	ldr	r2, [pc, #104]	; (80028a8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d00e      	beq.n	8002862 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a18      	ldr	r2, [pc, #96]	; (80028ac <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d009      	beq.n	8002862 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4a17      	ldr	r2, [pc, #92]	; (80028b0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d004      	beq.n	8002862 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a15      	ldr	r2, [pc, #84]	; (80028b4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d10c      	bne.n	800287c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002868:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	68ba      	ldr	r2, [r7, #8]
 8002870:	4313      	orrs	r3, r2
 8002872:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	68ba      	ldr	r2, [r7, #8]
 800287a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2201      	movs	r2, #1
 8002880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2200      	movs	r2, #0
 8002888:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800288c:	2300      	movs	r3, #0
}
 800288e:	4618      	mov	r0, r3
 8002890:	3714      	adds	r7, #20
 8002892:	46bd      	mov	sp, r7
 8002894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002898:	4770      	bx	lr
 800289a:	bf00      	nop
 800289c:	40010000 	.word	0x40010000
 80028a0:	40000400 	.word	0x40000400
 80028a4:	40000800 	.word	0x40000800
 80028a8:	40000c00 	.word	0x40000c00
 80028ac:	40010400 	.word	0x40010400
 80028b0:	40014000 	.word	0x40014000
 80028b4:	40001800 	.word	0x40001800

080028b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b083      	sub	sp, #12
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80028c0:	bf00      	nop
 80028c2:	370c      	adds	r7, #12
 80028c4:	46bd      	mov	sp, r7
 80028c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ca:	4770      	bx	lr

080028cc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80028cc:	b480      	push	{r7}
 80028ce:	b083      	sub	sp, #12
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80028d4:	bf00      	nop
 80028d6:	370c      	adds	r7, #12
 80028d8:	46bd      	mov	sp, r7
 80028da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028de:	4770      	bx	lr

080028e0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b082      	sub	sp, #8
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d101      	bne.n	80028f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80028ee:	2301      	movs	r3, #1
 80028f0:	e03f      	b.n	8002972 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028f8:	b2db      	uxtb	r3, r3
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d106      	bne.n	800290c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2200      	movs	r2, #0
 8002902:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002906:	6878      	ldr	r0, [r7, #4]
 8002908:	f7fe f9ee 	bl	8000ce8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2224      	movs	r2, #36	; 0x24
 8002910:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	68da      	ldr	r2, [r3, #12]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002922:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002924:	6878      	ldr	r0, [r7, #4]
 8002926:	f000 f829 	bl	800297c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	691a      	ldr	r2, [r3, #16]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002938:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	695a      	ldr	r2, [r3, #20]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002948:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	68da      	ldr	r2, [r3, #12]
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002958:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2200      	movs	r2, #0
 800295e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2220      	movs	r2, #32
 8002964:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2220      	movs	r2, #32
 800296c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002970:	2300      	movs	r3, #0
}
 8002972:	4618      	mov	r0, r3
 8002974:	3708      	adds	r7, #8
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}
	...

0800297c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800297c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002980:	b0c0      	sub	sp, #256	; 0x100
 8002982:	af00      	add	r7, sp, #0
 8002984:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002988:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	691b      	ldr	r3, [r3, #16]
 8002990:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002994:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002998:	68d9      	ldr	r1, [r3, #12]
 800299a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800299e:	681a      	ldr	r2, [r3, #0]
 80029a0:	ea40 0301 	orr.w	r3, r0, r1
 80029a4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80029a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029aa:	689a      	ldr	r2, [r3, #8]
 80029ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029b0:	691b      	ldr	r3, [r3, #16]
 80029b2:	431a      	orrs	r2, r3
 80029b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029b8:	695b      	ldr	r3, [r3, #20]
 80029ba:	431a      	orrs	r2, r3
 80029bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029c0:	69db      	ldr	r3, [r3, #28]
 80029c2:	4313      	orrs	r3, r2
 80029c4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80029c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	68db      	ldr	r3, [r3, #12]
 80029d0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80029d4:	f021 010c 	bic.w	r1, r1, #12
 80029d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029dc:	681a      	ldr	r2, [r3, #0]
 80029de:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80029e2:	430b      	orrs	r3, r1
 80029e4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80029e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	695b      	ldr	r3, [r3, #20]
 80029ee:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80029f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029f6:	6999      	ldr	r1, [r3, #24]
 80029f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029fc:	681a      	ldr	r2, [r3, #0]
 80029fe:	ea40 0301 	orr.w	r3, r0, r1
 8002a02:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002a04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a08:	681a      	ldr	r2, [r3, #0]
 8002a0a:	4b8f      	ldr	r3, [pc, #572]	; (8002c48 <UART_SetConfig+0x2cc>)
 8002a0c:	429a      	cmp	r2, r3
 8002a0e:	d005      	beq.n	8002a1c <UART_SetConfig+0xa0>
 8002a10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a14:	681a      	ldr	r2, [r3, #0]
 8002a16:	4b8d      	ldr	r3, [pc, #564]	; (8002c4c <UART_SetConfig+0x2d0>)
 8002a18:	429a      	cmp	r2, r3
 8002a1a:	d104      	bne.n	8002a26 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002a1c:	f7ff faca 	bl	8001fb4 <HAL_RCC_GetPCLK2Freq>
 8002a20:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002a24:	e003      	b.n	8002a2e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002a26:	f7ff fab1 	bl	8001f8c <HAL_RCC_GetPCLK1Freq>
 8002a2a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002a2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a32:	69db      	ldr	r3, [r3, #28]
 8002a34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a38:	f040 810c 	bne.w	8002c54 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002a3c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002a40:	2200      	movs	r2, #0
 8002a42:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002a46:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002a4a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002a4e:	4622      	mov	r2, r4
 8002a50:	462b      	mov	r3, r5
 8002a52:	1891      	adds	r1, r2, r2
 8002a54:	65b9      	str	r1, [r7, #88]	; 0x58
 8002a56:	415b      	adcs	r3, r3
 8002a58:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002a5a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002a5e:	4621      	mov	r1, r4
 8002a60:	eb12 0801 	adds.w	r8, r2, r1
 8002a64:	4629      	mov	r1, r5
 8002a66:	eb43 0901 	adc.w	r9, r3, r1
 8002a6a:	f04f 0200 	mov.w	r2, #0
 8002a6e:	f04f 0300 	mov.w	r3, #0
 8002a72:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002a76:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002a7a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002a7e:	4690      	mov	r8, r2
 8002a80:	4699      	mov	r9, r3
 8002a82:	4623      	mov	r3, r4
 8002a84:	eb18 0303 	adds.w	r3, r8, r3
 8002a88:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002a8c:	462b      	mov	r3, r5
 8002a8e:	eb49 0303 	adc.w	r3, r9, r3
 8002a92:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002a96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002aa2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002aa6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002aaa:	460b      	mov	r3, r1
 8002aac:	18db      	adds	r3, r3, r3
 8002aae:	653b      	str	r3, [r7, #80]	; 0x50
 8002ab0:	4613      	mov	r3, r2
 8002ab2:	eb42 0303 	adc.w	r3, r2, r3
 8002ab6:	657b      	str	r3, [r7, #84]	; 0x54
 8002ab8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002abc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002ac0:	f7fd fbe6 	bl	8000290 <__aeabi_uldivmod>
 8002ac4:	4602      	mov	r2, r0
 8002ac6:	460b      	mov	r3, r1
 8002ac8:	4b61      	ldr	r3, [pc, #388]	; (8002c50 <UART_SetConfig+0x2d4>)
 8002aca:	fba3 2302 	umull	r2, r3, r3, r2
 8002ace:	095b      	lsrs	r3, r3, #5
 8002ad0:	011c      	lsls	r4, r3, #4
 8002ad2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002adc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002ae0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002ae4:	4642      	mov	r2, r8
 8002ae6:	464b      	mov	r3, r9
 8002ae8:	1891      	adds	r1, r2, r2
 8002aea:	64b9      	str	r1, [r7, #72]	; 0x48
 8002aec:	415b      	adcs	r3, r3
 8002aee:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002af0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002af4:	4641      	mov	r1, r8
 8002af6:	eb12 0a01 	adds.w	sl, r2, r1
 8002afa:	4649      	mov	r1, r9
 8002afc:	eb43 0b01 	adc.w	fp, r3, r1
 8002b00:	f04f 0200 	mov.w	r2, #0
 8002b04:	f04f 0300 	mov.w	r3, #0
 8002b08:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002b0c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002b10:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002b14:	4692      	mov	sl, r2
 8002b16:	469b      	mov	fp, r3
 8002b18:	4643      	mov	r3, r8
 8002b1a:	eb1a 0303 	adds.w	r3, sl, r3
 8002b1e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002b22:	464b      	mov	r3, r9
 8002b24:	eb4b 0303 	adc.w	r3, fp, r3
 8002b28:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002b2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	2200      	movs	r2, #0
 8002b34:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002b38:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002b3c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002b40:	460b      	mov	r3, r1
 8002b42:	18db      	adds	r3, r3, r3
 8002b44:	643b      	str	r3, [r7, #64]	; 0x40
 8002b46:	4613      	mov	r3, r2
 8002b48:	eb42 0303 	adc.w	r3, r2, r3
 8002b4c:	647b      	str	r3, [r7, #68]	; 0x44
 8002b4e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002b52:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002b56:	f7fd fb9b 	bl	8000290 <__aeabi_uldivmod>
 8002b5a:	4602      	mov	r2, r0
 8002b5c:	460b      	mov	r3, r1
 8002b5e:	4611      	mov	r1, r2
 8002b60:	4b3b      	ldr	r3, [pc, #236]	; (8002c50 <UART_SetConfig+0x2d4>)
 8002b62:	fba3 2301 	umull	r2, r3, r3, r1
 8002b66:	095b      	lsrs	r3, r3, #5
 8002b68:	2264      	movs	r2, #100	; 0x64
 8002b6a:	fb02 f303 	mul.w	r3, r2, r3
 8002b6e:	1acb      	subs	r3, r1, r3
 8002b70:	00db      	lsls	r3, r3, #3
 8002b72:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002b76:	4b36      	ldr	r3, [pc, #216]	; (8002c50 <UART_SetConfig+0x2d4>)
 8002b78:	fba3 2302 	umull	r2, r3, r3, r2
 8002b7c:	095b      	lsrs	r3, r3, #5
 8002b7e:	005b      	lsls	r3, r3, #1
 8002b80:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002b84:	441c      	add	r4, r3
 8002b86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002b90:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002b94:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002b98:	4642      	mov	r2, r8
 8002b9a:	464b      	mov	r3, r9
 8002b9c:	1891      	adds	r1, r2, r2
 8002b9e:	63b9      	str	r1, [r7, #56]	; 0x38
 8002ba0:	415b      	adcs	r3, r3
 8002ba2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ba4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002ba8:	4641      	mov	r1, r8
 8002baa:	1851      	adds	r1, r2, r1
 8002bac:	6339      	str	r1, [r7, #48]	; 0x30
 8002bae:	4649      	mov	r1, r9
 8002bb0:	414b      	adcs	r3, r1
 8002bb2:	637b      	str	r3, [r7, #52]	; 0x34
 8002bb4:	f04f 0200 	mov.w	r2, #0
 8002bb8:	f04f 0300 	mov.w	r3, #0
 8002bbc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002bc0:	4659      	mov	r1, fp
 8002bc2:	00cb      	lsls	r3, r1, #3
 8002bc4:	4651      	mov	r1, sl
 8002bc6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002bca:	4651      	mov	r1, sl
 8002bcc:	00ca      	lsls	r2, r1, #3
 8002bce:	4610      	mov	r0, r2
 8002bd0:	4619      	mov	r1, r3
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	4642      	mov	r2, r8
 8002bd6:	189b      	adds	r3, r3, r2
 8002bd8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002bdc:	464b      	mov	r3, r9
 8002bde:	460a      	mov	r2, r1
 8002be0:	eb42 0303 	adc.w	r3, r2, r3
 8002be4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002be8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002bf4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002bf8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002bfc:	460b      	mov	r3, r1
 8002bfe:	18db      	adds	r3, r3, r3
 8002c00:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c02:	4613      	mov	r3, r2
 8002c04:	eb42 0303 	adc.w	r3, r2, r3
 8002c08:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c0a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002c0e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002c12:	f7fd fb3d 	bl	8000290 <__aeabi_uldivmod>
 8002c16:	4602      	mov	r2, r0
 8002c18:	460b      	mov	r3, r1
 8002c1a:	4b0d      	ldr	r3, [pc, #52]	; (8002c50 <UART_SetConfig+0x2d4>)
 8002c1c:	fba3 1302 	umull	r1, r3, r3, r2
 8002c20:	095b      	lsrs	r3, r3, #5
 8002c22:	2164      	movs	r1, #100	; 0x64
 8002c24:	fb01 f303 	mul.w	r3, r1, r3
 8002c28:	1ad3      	subs	r3, r2, r3
 8002c2a:	00db      	lsls	r3, r3, #3
 8002c2c:	3332      	adds	r3, #50	; 0x32
 8002c2e:	4a08      	ldr	r2, [pc, #32]	; (8002c50 <UART_SetConfig+0x2d4>)
 8002c30:	fba2 2303 	umull	r2, r3, r2, r3
 8002c34:	095b      	lsrs	r3, r3, #5
 8002c36:	f003 0207 	and.w	r2, r3, #7
 8002c3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4422      	add	r2, r4
 8002c42:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002c44:	e105      	b.n	8002e52 <UART_SetConfig+0x4d6>
 8002c46:	bf00      	nop
 8002c48:	40011000 	.word	0x40011000
 8002c4c:	40011400 	.word	0x40011400
 8002c50:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002c54:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c58:	2200      	movs	r2, #0
 8002c5a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002c5e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002c62:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002c66:	4642      	mov	r2, r8
 8002c68:	464b      	mov	r3, r9
 8002c6a:	1891      	adds	r1, r2, r2
 8002c6c:	6239      	str	r1, [r7, #32]
 8002c6e:	415b      	adcs	r3, r3
 8002c70:	627b      	str	r3, [r7, #36]	; 0x24
 8002c72:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002c76:	4641      	mov	r1, r8
 8002c78:	1854      	adds	r4, r2, r1
 8002c7a:	4649      	mov	r1, r9
 8002c7c:	eb43 0501 	adc.w	r5, r3, r1
 8002c80:	f04f 0200 	mov.w	r2, #0
 8002c84:	f04f 0300 	mov.w	r3, #0
 8002c88:	00eb      	lsls	r3, r5, #3
 8002c8a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c8e:	00e2      	lsls	r2, r4, #3
 8002c90:	4614      	mov	r4, r2
 8002c92:	461d      	mov	r5, r3
 8002c94:	4643      	mov	r3, r8
 8002c96:	18e3      	adds	r3, r4, r3
 8002c98:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002c9c:	464b      	mov	r3, r9
 8002c9e:	eb45 0303 	adc.w	r3, r5, r3
 8002ca2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002ca6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	2200      	movs	r2, #0
 8002cae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002cb2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002cb6:	f04f 0200 	mov.w	r2, #0
 8002cba:	f04f 0300 	mov.w	r3, #0
 8002cbe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002cc2:	4629      	mov	r1, r5
 8002cc4:	008b      	lsls	r3, r1, #2
 8002cc6:	4621      	mov	r1, r4
 8002cc8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002ccc:	4621      	mov	r1, r4
 8002cce:	008a      	lsls	r2, r1, #2
 8002cd0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002cd4:	f7fd fadc 	bl	8000290 <__aeabi_uldivmod>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	460b      	mov	r3, r1
 8002cdc:	4b60      	ldr	r3, [pc, #384]	; (8002e60 <UART_SetConfig+0x4e4>)
 8002cde:	fba3 2302 	umull	r2, r3, r3, r2
 8002ce2:	095b      	lsrs	r3, r3, #5
 8002ce4:	011c      	lsls	r4, r3, #4
 8002ce6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002cea:	2200      	movs	r2, #0
 8002cec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002cf0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002cf4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002cf8:	4642      	mov	r2, r8
 8002cfa:	464b      	mov	r3, r9
 8002cfc:	1891      	adds	r1, r2, r2
 8002cfe:	61b9      	str	r1, [r7, #24]
 8002d00:	415b      	adcs	r3, r3
 8002d02:	61fb      	str	r3, [r7, #28]
 8002d04:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d08:	4641      	mov	r1, r8
 8002d0a:	1851      	adds	r1, r2, r1
 8002d0c:	6139      	str	r1, [r7, #16]
 8002d0e:	4649      	mov	r1, r9
 8002d10:	414b      	adcs	r3, r1
 8002d12:	617b      	str	r3, [r7, #20]
 8002d14:	f04f 0200 	mov.w	r2, #0
 8002d18:	f04f 0300 	mov.w	r3, #0
 8002d1c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002d20:	4659      	mov	r1, fp
 8002d22:	00cb      	lsls	r3, r1, #3
 8002d24:	4651      	mov	r1, sl
 8002d26:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002d2a:	4651      	mov	r1, sl
 8002d2c:	00ca      	lsls	r2, r1, #3
 8002d2e:	4610      	mov	r0, r2
 8002d30:	4619      	mov	r1, r3
 8002d32:	4603      	mov	r3, r0
 8002d34:	4642      	mov	r2, r8
 8002d36:	189b      	adds	r3, r3, r2
 8002d38:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002d3c:	464b      	mov	r3, r9
 8002d3e:	460a      	mov	r2, r1
 8002d40:	eb42 0303 	adc.w	r3, r2, r3
 8002d44:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002d48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	2200      	movs	r2, #0
 8002d50:	67bb      	str	r3, [r7, #120]	; 0x78
 8002d52:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002d54:	f04f 0200 	mov.w	r2, #0
 8002d58:	f04f 0300 	mov.w	r3, #0
 8002d5c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002d60:	4649      	mov	r1, r9
 8002d62:	008b      	lsls	r3, r1, #2
 8002d64:	4641      	mov	r1, r8
 8002d66:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002d6a:	4641      	mov	r1, r8
 8002d6c:	008a      	lsls	r2, r1, #2
 8002d6e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002d72:	f7fd fa8d 	bl	8000290 <__aeabi_uldivmod>
 8002d76:	4602      	mov	r2, r0
 8002d78:	460b      	mov	r3, r1
 8002d7a:	4b39      	ldr	r3, [pc, #228]	; (8002e60 <UART_SetConfig+0x4e4>)
 8002d7c:	fba3 1302 	umull	r1, r3, r3, r2
 8002d80:	095b      	lsrs	r3, r3, #5
 8002d82:	2164      	movs	r1, #100	; 0x64
 8002d84:	fb01 f303 	mul.w	r3, r1, r3
 8002d88:	1ad3      	subs	r3, r2, r3
 8002d8a:	011b      	lsls	r3, r3, #4
 8002d8c:	3332      	adds	r3, #50	; 0x32
 8002d8e:	4a34      	ldr	r2, [pc, #208]	; (8002e60 <UART_SetConfig+0x4e4>)
 8002d90:	fba2 2303 	umull	r2, r3, r2, r3
 8002d94:	095b      	lsrs	r3, r3, #5
 8002d96:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d9a:	441c      	add	r4, r3
 8002d9c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002da0:	2200      	movs	r2, #0
 8002da2:	673b      	str	r3, [r7, #112]	; 0x70
 8002da4:	677a      	str	r2, [r7, #116]	; 0x74
 8002da6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002daa:	4642      	mov	r2, r8
 8002dac:	464b      	mov	r3, r9
 8002dae:	1891      	adds	r1, r2, r2
 8002db0:	60b9      	str	r1, [r7, #8]
 8002db2:	415b      	adcs	r3, r3
 8002db4:	60fb      	str	r3, [r7, #12]
 8002db6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002dba:	4641      	mov	r1, r8
 8002dbc:	1851      	adds	r1, r2, r1
 8002dbe:	6039      	str	r1, [r7, #0]
 8002dc0:	4649      	mov	r1, r9
 8002dc2:	414b      	adcs	r3, r1
 8002dc4:	607b      	str	r3, [r7, #4]
 8002dc6:	f04f 0200 	mov.w	r2, #0
 8002dca:	f04f 0300 	mov.w	r3, #0
 8002dce:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002dd2:	4659      	mov	r1, fp
 8002dd4:	00cb      	lsls	r3, r1, #3
 8002dd6:	4651      	mov	r1, sl
 8002dd8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002ddc:	4651      	mov	r1, sl
 8002dde:	00ca      	lsls	r2, r1, #3
 8002de0:	4610      	mov	r0, r2
 8002de2:	4619      	mov	r1, r3
 8002de4:	4603      	mov	r3, r0
 8002de6:	4642      	mov	r2, r8
 8002de8:	189b      	adds	r3, r3, r2
 8002dea:	66bb      	str	r3, [r7, #104]	; 0x68
 8002dec:	464b      	mov	r3, r9
 8002dee:	460a      	mov	r2, r1
 8002df0:	eb42 0303 	adc.w	r3, r2, r3
 8002df4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002df6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	663b      	str	r3, [r7, #96]	; 0x60
 8002e00:	667a      	str	r2, [r7, #100]	; 0x64
 8002e02:	f04f 0200 	mov.w	r2, #0
 8002e06:	f04f 0300 	mov.w	r3, #0
 8002e0a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002e0e:	4649      	mov	r1, r9
 8002e10:	008b      	lsls	r3, r1, #2
 8002e12:	4641      	mov	r1, r8
 8002e14:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002e18:	4641      	mov	r1, r8
 8002e1a:	008a      	lsls	r2, r1, #2
 8002e1c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002e20:	f7fd fa36 	bl	8000290 <__aeabi_uldivmod>
 8002e24:	4602      	mov	r2, r0
 8002e26:	460b      	mov	r3, r1
 8002e28:	4b0d      	ldr	r3, [pc, #52]	; (8002e60 <UART_SetConfig+0x4e4>)
 8002e2a:	fba3 1302 	umull	r1, r3, r3, r2
 8002e2e:	095b      	lsrs	r3, r3, #5
 8002e30:	2164      	movs	r1, #100	; 0x64
 8002e32:	fb01 f303 	mul.w	r3, r1, r3
 8002e36:	1ad3      	subs	r3, r2, r3
 8002e38:	011b      	lsls	r3, r3, #4
 8002e3a:	3332      	adds	r3, #50	; 0x32
 8002e3c:	4a08      	ldr	r2, [pc, #32]	; (8002e60 <UART_SetConfig+0x4e4>)
 8002e3e:	fba2 2303 	umull	r2, r3, r2, r3
 8002e42:	095b      	lsrs	r3, r3, #5
 8002e44:	f003 020f 	and.w	r2, r3, #15
 8002e48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4422      	add	r2, r4
 8002e50:	609a      	str	r2, [r3, #8]
}
 8002e52:	bf00      	nop
 8002e54:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e5e:	bf00      	nop
 8002e60:	51eb851f 	.word	0x51eb851f

08002e64 <__errno>:
 8002e64:	4b01      	ldr	r3, [pc, #4]	; (8002e6c <__errno+0x8>)
 8002e66:	6818      	ldr	r0, [r3, #0]
 8002e68:	4770      	bx	lr
 8002e6a:	bf00      	nop
 8002e6c:	20000010 	.word	0x20000010

08002e70 <__libc_init_array>:
 8002e70:	b570      	push	{r4, r5, r6, lr}
 8002e72:	4d0d      	ldr	r5, [pc, #52]	; (8002ea8 <__libc_init_array+0x38>)
 8002e74:	4c0d      	ldr	r4, [pc, #52]	; (8002eac <__libc_init_array+0x3c>)
 8002e76:	1b64      	subs	r4, r4, r5
 8002e78:	10a4      	asrs	r4, r4, #2
 8002e7a:	2600      	movs	r6, #0
 8002e7c:	42a6      	cmp	r6, r4
 8002e7e:	d109      	bne.n	8002e94 <__libc_init_array+0x24>
 8002e80:	4d0b      	ldr	r5, [pc, #44]	; (8002eb0 <__libc_init_array+0x40>)
 8002e82:	4c0c      	ldr	r4, [pc, #48]	; (8002eb4 <__libc_init_array+0x44>)
 8002e84:	f001 fdf2 	bl	8004a6c <_init>
 8002e88:	1b64      	subs	r4, r4, r5
 8002e8a:	10a4      	asrs	r4, r4, #2
 8002e8c:	2600      	movs	r6, #0
 8002e8e:	42a6      	cmp	r6, r4
 8002e90:	d105      	bne.n	8002e9e <__libc_init_array+0x2e>
 8002e92:	bd70      	pop	{r4, r5, r6, pc}
 8002e94:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e98:	4798      	blx	r3
 8002e9a:	3601      	adds	r6, #1
 8002e9c:	e7ee      	b.n	8002e7c <__libc_init_array+0xc>
 8002e9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ea2:	4798      	blx	r3
 8002ea4:	3601      	adds	r6, #1
 8002ea6:	e7f2      	b.n	8002e8e <__libc_init_array+0x1e>
 8002ea8:	08004cc4 	.word	0x08004cc4
 8002eac:	08004cc4 	.word	0x08004cc4
 8002eb0:	08004cc4 	.word	0x08004cc4
 8002eb4:	08004cc8 	.word	0x08004cc8

08002eb8 <memset>:
 8002eb8:	4402      	add	r2, r0
 8002eba:	4603      	mov	r3, r0
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d100      	bne.n	8002ec2 <memset+0xa>
 8002ec0:	4770      	bx	lr
 8002ec2:	f803 1b01 	strb.w	r1, [r3], #1
 8002ec6:	e7f9      	b.n	8002ebc <memset+0x4>

08002ec8 <iprintf>:
 8002ec8:	b40f      	push	{r0, r1, r2, r3}
 8002eca:	4b0a      	ldr	r3, [pc, #40]	; (8002ef4 <iprintf+0x2c>)
 8002ecc:	b513      	push	{r0, r1, r4, lr}
 8002ece:	681c      	ldr	r4, [r3, #0]
 8002ed0:	b124      	cbz	r4, 8002edc <iprintf+0x14>
 8002ed2:	69a3      	ldr	r3, [r4, #24]
 8002ed4:	b913      	cbnz	r3, 8002edc <iprintf+0x14>
 8002ed6:	4620      	mov	r0, r4
 8002ed8:	f000 f87e 	bl	8002fd8 <__sinit>
 8002edc:	ab05      	add	r3, sp, #20
 8002ede:	9a04      	ldr	r2, [sp, #16]
 8002ee0:	68a1      	ldr	r1, [r4, #8]
 8002ee2:	9301      	str	r3, [sp, #4]
 8002ee4:	4620      	mov	r0, r4
 8002ee6:	f000 f9f3 	bl	80032d0 <_vfiprintf_r>
 8002eea:	b002      	add	sp, #8
 8002eec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002ef0:	b004      	add	sp, #16
 8002ef2:	4770      	bx	lr
 8002ef4:	20000010 	.word	0x20000010

08002ef8 <iscanf>:
 8002ef8:	b40f      	push	{r0, r1, r2, r3}
 8002efa:	4b0a      	ldr	r3, [pc, #40]	; (8002f24 <iscanf+0x2c>)
 8002efc:	b513      	push	{r0, r1, r4, lr}
 8002efe:	681c      	ldr	r4, [r3, #0]
 8002f00:	b124      	cbz	r4, 8002f0c <iscanf+0x14>
 8002f02:	69a3      	ldr	r3, [r4, #24]
 8002f04:	b913      	cbnz	r3, 8002f0c <iscanf+0x14>
 8002f06:	4620      	mov	r0, r4
 8002f08:	f000 f866 	bl	8002fd8 <__sinit>
 8002f0c:	ab05      	add	r3, sp, #20
 8002f0e:	9a04      	ldr	r2, [sp, #16]
 8002f10:	6861      	ldr	r1, [r4, #4]
 8002f12:	9301      	str	r3, [sp, #4]
 8002f14:	4620      	mov	r0, r4
 8002f16:	f000 fe45 	bl	8003ba4 <_vfiscanf_r>
 8002f1a:	b002      	add	sp, #8
 8002f1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002f20:	b004      	add	sp, #16
 8002f22:	4770      	bx	lr
 8002f24:	20000010 	.word	0x20000010

08002f28 <std>:
 8002f28:	2300      	movs	r3, #0
 8002f2a:	b510      	push	{r4, lr}
 8002f2c:	4604      	mov	r4, r0
 8002f2e:	e9c0 3300 	strd	r3, r3, [r0]
 8002f32:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002f36:	6083      	str	r3, [r0, #8]
 8002f38:	8181      	strh	r1, [r0, #12]
 8002f3a:	6643      	str	r3, [r0, #100]	; 0x64
 8002f3c:	81c2      	strh	r2, [r0, #14]
 8002f3e:	6183      	str	r3, [r0, #24]
 8002f40:	4619      	mov	r1, r3
 8002f42:	2208      	movs	r2, #8
 8002f44:	305c      	adds	r0, #92	; 0x5c
 8002f46:	f7ff ffb7 	bl	8002eb8 <memset>
 8002f4a:	4b05      	ldr	r3, [pc, #20]	; (8002f60 <std+0x38>)
 8002f4c:	6263      	str	r3, [r4, #36]	; 0x24
 8002f4e:	4b05      	ldr	r3, [pc, #20]	; (8002f64 <std+0x3c>)
 8002f50:	62a3      	str	r3, [r4, #40]	; 0x28
 8002f52:	4b05      	ldr	r3, [pc, #20]	; (8002f68 <std+0x40>)
 8002f54:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002f56:	4b05      	ldr	r3, [pc, #20]	; (8002f6c <std+0x44>)
 8002f58:	6224      	str	r4, [r4, #32]
 8002f5a:	6323      	str	r3, [r4, #48]	; 0x30
 8002f5c:	bd10      	pop	{r4, pc}
 8002f5e:	bf00      	nop
 8002f60:	08004051 	.word	0x08004051
 8002f64:	08004073 	.word	0x08004073
 8002f68:	080040ab 	.word	0x080040ab
 8002f6c:	080040cf 	.word	0x080040cf

08002f70 <_cleanup_r>:
 8002f70:	4901      	ldr	r1, [pc, #4]	; (8002f78 <_cleanup_r+0x8>)
 8002f72:	f000 b8cc 	b.w	800310e <_fwalk_reent>
 8002f76:	bf00      	nop
 8002f78:	0800473d 	.word	0x0800473d

08002f7c <__sfmoreglue>:
 8002f7c:	b570      	push	{r4, r5, r6, lr}
 8002f7e:	2268      	movs	r2, #104	; 0x68
 8002f80:	1e4d      	subs	r5, r1, #1
 8002f82:	4355      	muls	r5, r2
 8002f84:	460e      	mov	r6, r1
 8002f86:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002f8a:	f000 f903 	bl	8003194 <_malloc_r>
 8002f8e:	4604      	mov	r4, r0
 8002f90:	b140      	cbz	r0, 8002fa4 <__sfmoreglue+0x28>
 8002f92:	2100      	movs	r1, #0
 8002f94:	e9c0 1600 	strd	r1, r6, [r0]
 8002f98:	300c      	adds	r0, #12
 8002f9a:	60a0      	str	r0, [r4, #8]
 8002f9c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002fa0:	f7ff ff8a 	bl	8002eb8 <memset>
 8002fa4:	4620      	mov	r0, r4
 8002fa6:	bd70      	pop	{r4, r5, r6, pc}

08002fa8 <__sfp_lock_acquire>:
 8002fa8:	4801      	ldr	r0, [pc, #4]	; (8002fb0 <__sfp_lock_acquire+0x8>)
 8002faa:	f000 b8d0 	b.w	800314e <__retarget_lock_acquire_recursive>
 8002fae:	bf00      	nop
 8002fb0:	20000129 	.word	0x20000129

08002fb4 <__sfp_lock_release>:
 8002fb4:	4801      	ldr	r0, [pc, #4]	; (8002fbc <__sfp_lock_release+0x8>)
 8002fb6:	f000 b8cb 	b.w	8003150 <__retarget_lock_release_recursive>
 8002fba:	bf00      	nop
 8002fbc:	20000129 	.word	0x20000129

08002fc0 <__sinit_lock_acquire>:
 8002fc0:	4801      	ldr	r0, [pc, #4]	; (8002fc8 <__sinit_lock_acquire+0x8>)
 8002fc2:	f000 b8c4 	b.w	800314e <__retarget_lock_acquire_recursive>
 8002fc6:	bf00      	nop
 8002fc8:	2000012a 	.word	0x2000012a

08002fcc <__sinit_lock_release>:
 8002fcc:	4801      	ldr	r0, [pc, #4]	; (8002fd4 <__sinit_lock_release+0x8>)
 8002fce:	f000 b8bf 	b.w	8003150 <__retarget_lock_release_recursive>
 8002fd2:	bf00      	nop
 8002fd4:	2000012a 	.word	0x2000012a

08002fd8 <__sinit>:
 8002fd8:	b510      	push	{r4, lr}
 8002fda:	4604      	mov	r4, r0
 8002fdc:	f7ff fff0 	bl	8002fc0 <__sinit_lock_acquire>
 8002fe0:	69a3      	ldr	r3, [r4, #24]
 8002fe2:	b11b      	cbz	r3, 8002fec <__sinit+0x14>
 8002fe4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002fe8:	f7ff bff0 	b.w	8002fcc <__sinit_lock_release>
 8002fec:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8002ff0:	6523      	str	r3, [r4, #80]	; 0x50
 8002ff2:	4b13      	ldr	r3, [pc, #76]	; (8003040 <__sinit+0x68>)
 8002ff4:	4a13      	ldr	r2, [pc, #76]	; (8003044 <__sinit+0x6c>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	62a2      	str	r2, [r4, #40]	; 0x28
 8002ffa:	42a3      	cmp	r3, r4
 8002ffc:	bf04      	itt	eq
 8002ffe:	2301      	moveq	r3, #1
 8003000:	61a3      	streq	r3, [r4, #24]
 8003002:	4620      	mov	r0, r4
 8003004:	f000 f820 	bl	8003048 <__sfp>
 8003008:	6060      	str	r0, [r4, #4]
 800300a:	4620      	mov	r0, r4
 800300c:	f000 f81c 	bl	8003048 <__sfp>
 8003010:	60a0      	str	r0, [r4, #8]
 8003012:	4620      	mov	r0, r4
 8003014:	f000 f818 	bl	8003048 <__sfp>
 8003018:	2200      	movs	r2, #0
 800301a:	60e0      	str	r0, [r4, #12]
 800301c:	2104      	movs	r1, #4
 800301e:	6860      	ldr	r0, [r4, #4]
 8003020:	f7ff ff82 	bl	8002f28 <std>
 8003024:	68a0      	ldr	r0, [r4, #8]
 8003026:	2201      	movs	r2, #1
 8003028:	2109      	movs	r1, #9
 800302a:	f7ff ff7d 	bl	8002f28 <std>
 800302e:	68e0      	ldr	r0, [r4, #12]
 8003030:	2202      	movs	r2, #2
 8003032:	2112      	movs	r1, #18
 8003034:	f7ff ff78 	bl	8002f28 <std>
 8003038:	2301      	movs	r3, #1
 800303a:	61a3      	str	r3, [r4, #24]
 800303c:	e7d2      	b.n	8002fe4 <__sinit+0xc>
 800303e:	bf00      	nop
 8003040:	08004b08 	.word	0x08004b08
 8003044:	08002f71 	.word	0x08002f71

08003048 <__sfp>:
 8003048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800304a:	4607      	mov	r7, r0
 800304c:	f7ff ffac 	bl	8002fa8 <__sfp_lock_acquire>
 8003050:	4b1e      	ldr	r3, [pc, #120]	; (80030cc <__sfp+0x84>)
 8003052:	681e      	ldr	r6, [r3, #0]
 8003054:	69b3      	ldr	r3, [r6, #24]
 8003056:	b913      	cbnz	r3, 800305e <__sfp+0x16>
 8003058:	4630      	mov	r0, r6
 800305a:	f7ff ffbd 	bl	8002fd8 <__sinit>
 800305e:	3648      	adds	r6, #72	; 0x48
 8003060:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003064:	3b01      	subs	r3, #1
 8003066:	d503      	bpl.n	8003070 <__sfp+0x28>
 8003068:	6833      	ldr	r3, [r6, #0]
 800306a:	b30b      	cbz	r3, 80030b0 <__sfp+0x68>
 800306c:	6836      	ldr	r6, [r6, #0]
 800306e:	e7f7      	b.n	8003060 <__sfp+0x18>
 8003070:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003074:	b9d5      	cbnz	r5, 80030ac <__sfp+0x64>
 8003076:	4b16      	ldr	r3, [pc, #88]	; (80030d0 <__sfp+0x88>)
 8003078:	60e3      	str	r3, [r4, #12]
 800307a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800307e:	6665      	str	r5, [r4, #100]	; 0x64
 8003080:	f000 f864 	bl	800314c <__retarget_lock_init_recursive>
 8003084:	f7ff ff96 	bl	8002fb4 <__sfp_lock_release>
 8003088:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800308c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003090:	6025      	str	r5, [r4, #0]
 8003092:	61a5      	str	r5, [r4, #24]
 8003094:	2208      	movs	r2, #8
 8003096:	4629      	mov	r1, r5
 8003098:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800309c:	f7ff ff0c 	bl	8002eb8 <memset>
 80030a0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80030a4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80030a8:	4620      	mov	r0, r4
 80030aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80030ac:	3468      	adds	r4, #104	; 0x68
 80030ae:	e7d9      	b.n	8003064 <__sfp+0x1c>
 80030b0:	2104      	movs	r1, #4
 80030b2:	4638      	mov	r0, r7
 80030b4:	f7ff ff62 	bl	8002f7c <__sfmoreglue>
 80030b8:	4604      	mov	r4, r0
 80030ba:	6030      	str	r0, [r6, #0]
 80030bc:	2800      	cmp	r0, #0
 80030be:	d1d5      	bne.n	800306c <__sfp+0x24>
 80030c0:	f7ff ff78 	bl	8002fb4 <__sfp_lock_release>
 80030c4:	230c      	movs	r3, #12
 80030c6:	603b      	str	r3, [r7, #0]
 80030c8:	e7ee      	b.n	80030a8 <__sfp+0x60>
 80030ca:	bf00      	nop
 80030cc:	08004b08 	.word	0x08004b08
 80030d0:	ffff0001 	.word	0xffff0001

080030d4 <_fwalk>:
 80030d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80030d8:	460f      	mov	r7, r1
 80030da:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80030de:	2600      	movs	r6, #0
 80030e0:	e9d4 8501 	ldrd	r8, r5, [r4, #4]
 80030e4:	f1b8 0801 	subs.w	r8, r8, #1
 80030e8:	d505      	bpl.n	80030f6 <_fwalk+0x22>
 80030ea:	6824      	ldr	r4, [r4, #0]
 80030ec:	2c00      	cmp	r4, #0
 80030ee:	d1f7      	bne.n	80030e0 <_fwalk+0xc>
 80030f0:	4630      	mov	r0, r6
 80030f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80030f6:	89ab      	ldrh	r3, [r5, #12]
 80030f8:	2b01      	cmp	r3, #1
 80030fa:	d906      	bls.n	800310a <_fwalk+0x36>
 80030fc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003100:	3301      	adds	r3, #1
 8003102:	d002      	beq.n	800310a <_fwalk+0x36>
 8003104:	4628      	mov	r0, r5
 8003106:	47b8      	blx	r7
 8003108:	4306      	orrs	r6, r0
 800310a:	3568      	adds	r5, #104	; 0x68
 800310c:	e7ea      	b.n	80030e4 <_fwalk+0x10>

0800310e <_fwalk_reent>:
 800310e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003112:	4606      	mov	r6, r0
 8003114:	4688      	mov	r8, r1
 8003116:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800311a:	2700      	movs	r7, #0
 800311c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003120:	f1b9 0901 	subs.w	r9, r9, #1
 8003124:	d505      	bpl.n	8003132 <_fwalk_reent+0x24>
 8003126:	6824      	ldr	r4, [r4, #0]
 8003128:	2c00      	cmp	r4, #0
 800312a:	d1f7      	bne.n	800311c <_fwalk_reent+0xe>
 800312c:	4638      	mov	r0, r7
 800312e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003132:	89ab      	ldrh	r3, [r5, #12]
 8003134:	2b01      	cmp	r3, #1
 8003136:	d907      	bls.n	8003148 <_fwalk_reent+0x3a>
 8003138:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800313c:	3301      	adds	r3, #1
 800313e:	d003      	beq.n	8003148 <_fwalk_reent+0x3a>
 8003140:	4629      	mov	r1, r5
 8003142:	4630      	mov	r0, r6
 8003144:	47c0      	blx	r8
 8003146:	4307      	orrs	r7, r0
 8003148:	3568      	adds	r5, #104	; 0x68
 800314a:	e7e9      	b.n	8003120 <_fwalk_reent+0x12>

0800314c <__retarget_lock_init_recursive>:
 800314c:	4770      	bx	lr

0800314e <__retarget_lock_acquire_recursive>:
 800314e:	4770      	bx	lr

08003150 <__retarget_lock_release_recursive>:
 8003150:	4770      	bx	lr
	...

08003154 <sbrk_aligned>:
 8003154:	b570      	push	{r4, r5, r6, lr}
 8003156:	4e0e      	ldr	r6, [pc, #56]	; (8003190 <sbrk_aligned+0x3c>)
 8003158:	460c      	mov	r4, r1
 800315a:	6831      	ldr	r1, [r6, #0]
 800315c:	4605      	mov	r5, r0
 800315e:	b911      	cbnz	r1, 8003166 <sbrk_aligned+0x12>
 8003160:	f000 ff2e 	bl	8003fc0 <_sbrk_r>
 8003164:	6030      	str	r0, [r6, #0]
 8003166:	4621      	mov	r1, r4
 8003168:	4628      	mov	r0, r5
 800316a:	f000 ff29 	bl	8003fc0 <_sbrk_r>
 800316e:	1c43      	adds	r3, r0, #1
 8003170:	d00a      	beq.n	8003188 <sbrk_aligned+0x34>
 8003172:	1cc4      	adds	r4, r0, #3
 8003174:	f024 0403 	bic.w	r4, r4, #3
 8003178:	42a0      	cmp	r0, r4
 800317a:	d007      	beq.n	800318c <sbrk_aligned+0x38>
 800317c:	1a21      	subs	r1, r4, r0
 800317e:	4628      	mov	r0, r5
 8003180:	f000 ff1e 	bl	8003fc0 <_sbrk_r>
 8003184:	3001      	adds	r0, #1
 8003186:	d101      	bne.n	800318c <sbrk_aligned+0x38>
 8003188:	f04f 34ff 	mov.w	r4, #4294967295
 800318c:	4620      	mov	r0, r4
 800318e:	bd70      	pop	{r4, r5, r6, pc}
 8003190:	20000130 	.word	0x20000130

08003194 <_malloc_r>:
 8003194:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003198:	1ccd      	adds	r5, r1, #3
 800319a:	f025 0503 	bic.w	r5, r5, #3
 800319e:	3508      	adds	r5, #8
 80031a0:	2d0c      	cmp	r5, #12
 80031a2:	bf38      	it	cc
 80031a4:	250c      	movcc	r5, #12
 80031a6:	2d00      	cmp	r5, #0
 80031a8:	4607      	mov	r7, r0
 80031aa:	db01      	blt.n	80031b0 <_malloc_r+0x1c>
 80031ac:	42a9      	cmp	r1, r5
 80031ae:	d905      	bls.n	80031bc <_malloc_r+0x28>
 80031b0:	230c      	movs	r3, #12
 80031b2:	603b      	str	r3, [r7, #0]
 80031b4:	2600      	movs	r6, #0
 80031b6:	4630      	mov	r0, r6
 80031b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80031bc:	4e2e      	ldr	r6, [pc, #184]	; (8003278 <_malloc_r+0xe4>)
 80031be:	f001 fb91 	bl	80048e4 <__malloc_lock>
 80031c2:	6833      	ldr	r3, [r6, #0]
 80031c4:	461c      	mov	r4, r3
 80031c6:	bb34      	cbnz	r4, 8003216 <_malloc_r+0x82>
 80031c8:	4629      	mov	r1, r5
 80031ca:	4638      	mov	r0, r7
 80031cc:	f7ff ffc2 	bl	8003154 <sbrk_aligned>
 80031d0:	1c43      	adds	r3, r0, #1
 80031d2:	4604      	mov	r4, r0
 80031d4:	d14d      	bne.n	8003272 <_malloc_r+0xde>
 80031d6:	6834      	ldr	r4, [r6, #0]
 80031d8:	4626      	mov	r6, r4
 80031da:	2e00      	cmp	r6, #0
 80031dc:	d140      	bne.n	8003260 <_malloc_r+0xcc>
 80031de:	6823      	ldr	r3, [r4, #0]
 80031e0:	4631      	mov	r1, r6
 80031e2:	4638      	mov	r0, r7
 80031e4:	eb04 0803 	add.w	r8, r4, r3
 80031e8:	f000 feea 	bl	8003fc0 <_sbrk_r>
 80031ec:	4580      	cmp	r8, r0
 80031ee:	d13a      	bne.n	8003266 <_malloc_r+0xd2>
 80031f0:	6821      	ldr	r1, [r4, #0]
 80031f2:	3503      	adds	r5, #3
 80031f4:	1a6d      	subs	r5, r5, r1
 80031f6:	f025 0503 	bic.w	r5, r5, #3
 80031fa:	3508      	adds	r5, #8
 80031fc:	2d0c      	cmp	r5, #12
 80031fe:	bf38      	it	cc
 8003200:	250c      	movcc	r5, #12
 8003202:	4629      	mov	r1, r5
 8003204:	4638      	mov	r0, r7
 8003206:	f7ff ffa5 	bl	8003154 <sbrk_aligned>
 800320a:	3001      	adds	r0, #1
 800320c:	d02b      	beq.n	8003266 <_malloc_r+0xd2>
 800320e:	6823      	ldr	r3, [r4, #0]
 8003210:	442b      	add	r3, r5
 8003212:	6023      	str	r3, [r4, #0]
 8003214:	e00e      	b.n	8003234 <_malloc_r+0xa0>
 8003216:	6822      	ldr	r2, [r4, #0]
 8003218:	1b52      	subs	r2, r2, r5
 800321a:	d41e      	bmi.n	800325a <_malloc_r+0xc6>
 800321c:	2a0b      	cmp	r2, #11
 800321e:	d916      	bls.n	800324e <_malloc_r+0xba>
 8003220:	1961      	adds	r1, r4, r5
 8003222:	42a3      	cmp	r3, r4
 8003224:	6025      	str	r5, [r4, #0]
 8003226:	bf18      	it	ne
 8003228:	6059      	strne	r1, [r3, #4]
 800322a:	6863      	ldr	r3, [r4, #4]
 800322c:	bf08      	it	eq
 800322e:	6031      	streq	r1, [r6, #0]
 8003230:	5162      	str	r2, [r4, r5]
 8003232:	604b      	str	r3, [r1, #4]
 8003234:	4638      	mov	r0, r7
 8003236:	f104 060b 	add.w	r6, r4, #11
 800323a:	f001 fb59 	bl	80048f0 <__malloc_unlock>
 800323e:	f026 0607 	bic.w	r6, r6, #7
 8003242:	1d23      	adds	r3, r4, #4
 8003244:	1af2      	subs	r2, r6, r3
 8003246:	d0b6      	beq.n	80031b6 <_malloc_r+0x22>
 8003248:	1b9b      	subs	r3, r3, r6
 800324a:	50a3      	str	r3, [r4, r2]
 800324c:	e7b3      	b.n	80031b6 <_malloc_r+0x22>
 800324e:	6862      	ldr	r2, [r4, #4]
 8003250:	42a3      	cmp	r3, r4
 8003252:	bf0c      	ite	eq
 8003254:	6032      	streq	r2, [r6, #0]
 8003256:	605a      	strne	r2, [r3, #4]
 8003258:	e7ec      	b.n	8003234 <_malloc_r+0xa0>
 800325a:	4623      	mov	r3, r4
 800325c:	6864      	ldr	r4, [r4, #4]
 800325e:	e7b2      	b.n	80031c6 <_malloc_r+0x32>
 8003260:	4634      	mov	r4, r6
 8003262:	6876      	ldr	r6, [r6, #4]
 8003264:	e7b9      	b.n	80031da <_malloc_r+0x46>
 8003266:	230c      	movs	r3, #12
 8003268:	603b      	str	r3, [r7, #0]
 800326a:	4638      	mov	r0, r7
 800326c:	f001 fb40 	bl	80048f0 <__malloc_unlock>
 8003270:	e7a1      	b.n	80031b6 <_malloc_r+0x22>
 8003272:	6025      	str	r5, [r4, #0]
 8003274:	e7de      	b.n	8003234 <_malloc_r+0xa0>
 8003276:	bf00      	nop
 8003278:	2000012c 	.word	0x2000012c

0800327c <__sfputc_r>:
 800327c:	6893      	ldr	r3, [r2, #8]
 800327e:	3b01      	subs	r3, #1
 8003280:	2b00      	cmp	r3, #0
 8003282:	b410      	push	{r4}
 8003284:	6093      	str	r3, [r2, #8]
 8003286:	da08      	bge.n	800329a <__sfputc_r+0x1e>
 8003288:	6994      	ldr	r4, [r2, #24]
 800328a:	42a3      	cmp	r3, r4
 800328c:	db01      	blt.n	8003292 <__sfputc_r+0x16>
 800328e:	290a      	cmp	r1, #10
 8003290:	d103      	bne.n	800329a <__sfputc_r+0x1e>
 8003292:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003296:	f001 b8e9 	b.w	800446c <__swbuf_r>
 800329a:	6813      	ldr	r3, [r2, #0]
 800329c:	1c58      	adds	r0, r3, #1
 800329e:	6010      	str	r0, [r2, #0]
 80032a0:	7019      	strb	r1, [r3, #0]
 80032a2:	4608      	mov	r0, r1
 80032a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80032a8:	4770      	bx	lr

080032aa <__sfputs_r>:
 80032aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032ac:	4606      	mov	r6, r0
 80032ae:	460f      	mov	r7, r1
 80032b0:	4614      	mov	r4, r2
 80032b2:	18d5      	adds	r5, r2, r3
 80032b4:	42ac      	cmp	r4, r5
 80032b6:	d101      	bne.n	80032bc <__sfputs_r+0x12>
 80032b8:	2000      	movs	r0, #0
 80032ba:	e007      	b.n	80032cc <__sfputs_r+0x22>
 80032bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80032c0:	463a      	mov	r2, r7
 80032c2:	4630      	mov	r0, r6
 80032c4:	f7ff ffda 	bl	800327c <__sfputc_r>
 80032c8:	1c43      	adds	r3, r0, #1
 80032ca:	d1f3      	bne.n	80032b4 <__sfputs_r+0xa>
 80032cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080032d0 <_vfiprintf_r>:
 80032d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80032d4:	460d      	mov	r5, r1
 80032d6:	b09d      	sub	sp, #116	; 0x74
 80032d8:	4614      	mov	r4, r2
 80032da:	4698      	mov	r8, r3
 80032dc:	4606      	mov	r6, r0
 80032de:	b118      	cbz	r0, 80032e8 <_vfiprintf_r+0x18>
 80032e0:	6983      	ldr	r3, [r0, #24]
 80032e2:	b90b      	cbnz	r3, 80032e8 <_vfiprintf_r+0x18>
 80032e4:	f7ff fe78 	bl	8002fd8 <__sinit>
 80032e8:	4b89      	ldr	r3, [pc, #548]	; (8003510 <_vfiprintf_r+0x240>)
 80032ea:	429d      	cmp	r5, r3
 80032ec:	d11b      	bne.n	8003326 <_vfiprintf_r+0x56>
 80032ee:	6875      	ldr	r5, [r6, #4]
 80032f0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80032f2:	07d9      	lsls	r1, r3, #31
 80032f4:	d405      	bmi.n	8003302 <_vfiprintf_r+0x32>
 80032f6:	89ab      	ldrh	r3, [r5, #12]
 80032f8:	059a      	lsls	r2, r3, #22
 80032fa:	d402      	bmi.n	8003302 <_vfiprintf_r+0x32>
 80032fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80032fe:	f7ff ff26 	bl	800314e <__retarget_lock_acquire_recursive>
 8003302:	89ab      	ldrh	r3, [r5, #12]
 8003304:	071b      	lsls	r3, r3, #28
 8003306:	d501      	bpl.n	800330c <_vfiprintf_r+0x3c>
 8003308:	692b      	ldr	r3, [r5, #16]
 800330a:	b9eb      	cbnz	r3, 8003348 <_vfiprintf_r+0x78>
 800330c:	4629      	mov	r1, r5
 800330e:	4630      	mov	r0, r6
 8003310:	f001 f910 	bl	8004534 <__swsetup_r>
 8003314:	b1c0      	cbz	r0, 8003348 <_vfiprintf_r+0x78>
 8003316:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003318:	07dc      	lsls	r4, r3, #31
 800331a:	d50e      	bpl.n	800333a <_vfiprintf_r+0x6a>
 800331c:	f04f 30ff 	mov.w	r0, #4294967295
 8003320:	b01d      	add	sp, #116	; 0x74
 8003322:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003326:	4b7b      	ldr	r3, [pc, #492]	; (8003514 <_vfiprintf_r+0x244>)
 8003328:	429d      	cmp	r5, r3
 800332a:	d101      	bne.n	8003330 <_vfiprintf_r+0x60>
 800332c:	68b5      	ldr	r5, [r6, #8]
 800332e:	e7df      	b.n	80032f0 <_vfiprintf_r+0x20>
 8003330:	4b79      	ldr	r3, [pc, #484]	; (8003518 <_vfiprintf_r+0x248>)
 8003332:	429d      	cmp	r5, r3
 8003334:	bf08      	it	eq
 8003336:	68f5      	ldreq	r5, [r6, #12]
 8003338:	e7da      	b.n	80032f0 <_vfiprintf_r+0x20>
 800333a:	89ab      	ldrh	r3, [r5, #12]
 800333c:	0598      	lsls	r0, r3, #22
 800333e:	d4ed      	bmi.n	800331c <_vfiprintf_r+0x4c>
 8003340:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003342:	f7ff ff05 	bl	8003150 <__retarget_lock_release_recursive>
 8003346:	e7e9      	b.n	800331c <_vfiprintf_r+0x4c>
 8003348:	2300      	movs	r3, #0
 800334a:	9309      	str	r3, [sp, #36]	; 0x24
 800334c:	2320      	movs	r3, #32
 800334e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003352:	f8cd 800c 	str.w	r8, [sp, #12]
 8003356:	2330      	movs	r3, #48	; 0x30
 8003358:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800351c <_vfiprintf_r+0x24c>
 800335c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003360:	f04f 0901 	mov.w	r9, #1
 8003364:	4623      	mov	r3, r4
 8003366:	469a      	mov	sl, r3
 8003368:	f813 2b01 	ldrb.w	r2, [r3], #1
 800336c:	b10a      	cbz	r2, 8003372 <_vfiprintf_r+0xa2>
 800336e:	2a25      	cmp	r2, #37	; 0x25
 8003370:	d1f9      	bne.n	8003366 <_vfiprintf_r+0x96>
 8003372:	ebba 0b04 	subs.w	fp, sl, r4
 8003376:	d00b      	beq.n	8003390 <_vfiprintf_r+0xc0>
 8003378:	465b      	mov	r3, fp
 800337a:	4622      	mov	r2, r4
 800337c:	4629      	mov	r1, r5
 800337e:	4630      	mov	r0, r6
 8003380:	f7ff ff93 	bl	80032aa <__sfputs_r>
 8003384:	3001      	adds	r0, #1
 8003386:	f000 80aa 	beq.w	80034de <_vfiprintf_r+0x20e>
 800338a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800338c:	445a      	add	r2, fp
 800338e:	9209      	str	r2, [sp, #36]	; 0x24
 8003390:	f89a 3000 	ldrb.w	r3, [sl]
 8003394:	2b00      	cmp	r3, #0
 8003396:	f000 80a2 	beq.w	80034de <_vfiprintf_r+0x20e>
 800339a:	2300      	movs	r3, #0
 800339c:	f04f 32ff 	mov.w	r2, #4294967295
 80033a0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80033a4:	f10a 0a01 	add.w	sl, sl, #1
 80033a8:	9304      	str	r3, [sp, #16]
 80033aa:	9307      	str	r3, [sp, #28]
 80033ac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80033b0:	931a      	str	r3, [sp, #104]	; 0x68
 80033b2:	4654      	mov	r4, sl
 80033b4:	2205      	movs	r2, #5
 80033b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80033ba:	4858      	ldr	r0, [pc, #352]	; (800351c <_vfiprintf_r+0x24c>)
 80033bc:	f7fc ff18 	bl	80001f0 <memchr>
 80033c0:	9a04      	ldr	r2, [sp, #16]
 80033c2:	b9d8      	cbnz	r0, 80033fc <_vfiprintf_r+0x12c>
 80033c4:	06d1      	lsls	r1, r2, #27
 80033c6:	bf44      	itt	mi
 80033c8:	2320      	movmi	r3, #32
 80033ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80033ce:	0713      	lsls	r3, r2, #28
 80033d0:	bf44      	itt	mi
 80033d2:	232b      	movmi	r3, #43	; 0x2b
 80033d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80033d8:	f89a 3000 	ldrb.w	r3, [sl]
 80033dc:	2b2a      	cmp	r3, #42	; 0x2a
 80033de:	d015      	beq.n	800340c <_vfiprintf_r+0x13c>
 80033e0:	9a07      	ldr	r2, [sp, #28]
 80033e2:	4654      	mov	r4, sl
 80033e4:	2000      	movs	r0, #0
 80033e6:	f04f 0c0a 	mov.w	ip, #10
 80033ea:	4621      	mov	r1, r4
 80033ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 80033f0:	3b30      	subs	r3, #48	; 0x30
 80033f2:	2b09      	cmp	r3, #9
 80033f4:	d94e      	bls.n	8003494 <_vfiprintf_r+0x1c4>
 80033f6:	b1b0      	cbz	r0, 8003426 <_vfiprintf_r+0x156>
 80033f8:	9207      	str	r2, [sp, #28]
 80033fa:	e014      	b.n	8003426 <_vfiprintf_r+0x156>
 80033fc:	eba0 0308 	sub.w	r3, r0, r8
 8003400:	fa09 f303 	lsl.w	r3, r9, r3
 8003404:	4313      	orrs	r3, r2
 8003406:	9304      	str	r3, [sp, #16]
 8003408:	46a2      	mov	sl, r4
 800340a:	e7d2      	b.n	80033b2 <_vfiprintf_r+0xe2>
 800340c:	9b03      	ldr	r3, [sp, #12]
 800340e:	1d19      	adds	r1, r3, #4
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	9103      	str	r1, [sp, #12]
 8003414:	2b00      	cmp	r3, #0
 8003416:	bfbb      	ittet	lt
 8003418:	425b      	neglt	r3, r3
 800341a:	f042 0202 	orrlt.w	r2, r2, #2
 800341e:	9307      	strge	r3, [sp, #28]
 8003420:	9307      	strlt	r3, [sp, #28]
 8003422:	bfb8      	it	lt
 8003424:	9204      	strlt	r2, [sp, #16]
 8003426:	7823      	ldrb	r3, [r4, #0]
 8003428:	2b2e      	cmp	r3, #46	; 0x2e
 800342a:	d10c      	bne.n	8003446 <_vfiprintf_r+0x176>
 800342c:	7863      	ldrb	r3, [r4, #1]
 800342e:	2b2a      	cmp	r3, #42	; 0x2a
 8003430:	d135      	bne.n	800349e <_vfiprintf_r+0x1ce>
 8003432:	9b03      	ldr	r3, [sp, #12]
 8003434:	1d1a      	adds	r2, r3, #4
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	9203      	str	r2, [sp, #12]
 800343a:	2b00      	cmp	r3, #0
 800343c:	bfb8      	it	lt
 800343e:	f04f 33ff 	movlt.w	r3, #4294967295
 8003442:	3402      	adds	r4, #2
 8003444:	9305      	str	r3, [sp, #20]
 8003446:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800352c <_vfiprintf_r+0x25c>
 800344a:	7821      	ldrb	r1, [r4, #0]
 800344c:	2203      	movs	r2, #3
 800344e:	4650      	mov	r0, sl
 8003450:	f7fc fece 	bl	80001f0 <memchr>
 8003454:	b140      	cbz	r0, 8003468 <_vfiprintf_r+0x198>
 8003456:	2340      	movs	r3, #64	; 0x40
 8003458:	eba0 000a 	sub.w	r0, r0, sl
 800345c:	fa03 f000 	lsl.w	r0, r3, r0
 8003460:	9b04      	ldr	r3, [sp, #16]
 8003462:	4303      	orrs	r3, r0
 8003464:	3401      	adds	r4, #1
 8003466:	9304      	str	r3, [sp, #16]
 8003468:	f814 1b01 	ldrb.w	r1, [r4], #1
 800346c:	482c      	ldr	r0, [pc, #176]	; (8003520 <_vfiprintf_r+0x250>)
 800346e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003472:	2206      	movs	r2, #6
 8003474:	f7fc febc 	bl	80001f0 <memchr>
 8003478:	2800      	cmp	r0, #0
 800347a:	d03f      	beq.n	80034fc <_vfiprintf_r+0x22c>
 800347c:	4b29      	ldr	r3, [pc, #164]	; (8003524 <_vfiprintf_r+0x254>)
 800347e:	bb1b      	cbnz	r3, 80034c8 <_vfiprintf_r+0x1f8>
 8003480:	9b03      	ldr	r3, [sp, #12]
 8003482:	3307      	adds	r3, #7
 8003484:	f023 0307 	bic.w	r3, r3, #7
 8003488:	3308      	adds	r3, #8
 800348a:	9303      	str	r3, [sp, #12]
 800348c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800348e:	443b      	add	r3, r7
 8003490:	9309      	str	r3, [sp, #36]	; 0x24
 8003492:	e767      	b.n	8003364 <_vfiprintf_r+0x94>
 8003494:	fb0c 3202 	mla	r2, ip, r2, r3
 8003498:	460c      	mov	r4, r1
 800349a:	2001      	movs	r0, #1
 800349c:	e7a5      	b.n	80033ea <_vfiprintf_r+0x11a>
 800349e:	2300      	movs	r3, #0
 80034a0:	3401      	adds	r4, #1
 80034a2:	9305      	str	r3, [sp, #20]
 80034a4:	4619      	mov	r1, r3
 80034a6:	f04f 0c0a 	mov.w	ip, #10
 80034aa:	4620      	mov	r0, r4
 80034ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 80034b0:	3a30      	subs	r2, #48	; 0x30
 80034b2:	2a09      	cmp	r2, #9
 80034b4:	d903      	bls.n	80034be <_vfiprintf_r+0x1ee>
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d0c5      	beq.n	8003446 <_vfiprintf_r+0x176>
 80034ba:	9105      	str	r1, [sp, #20]
 80034bc:	e7c3      	b.n	8003446 <_vfiprintf_r+0x176>
 80034be:	fb0c 2101 	mla	r1, ip, r1, r2
 80034c2:	4604      	mov	r4, r0
 80034c4:	2301      	movs	r3, #1
 80034c6:	e7f0      	b.n	80034aa <_vfiprintf_r+0x1da>
 80034c8:	ab03      	add	r3, sp, #12
 80034ca:	9300      	str	r3, [sp, #0]
 80034cc:	462a      	mov	r2, r5
 80034ce:	4b16      	ldr	r3, [pc, #88]	; (8003528 <_vfiprintf_r+0x258>)
 80034d0:	a904      	add	r1, sp, #16
 80034d2:	4630      	mov	r0, r6
 80034d4:	f3af 8000 	nop.w
 80034d8:	4607      	mov	r7, r0
 80034da:	1c78      	adds	r0, r7, #1
 80034dc:	d1d6      	bne.n	800348c <_vfiprintf_r+0x1bc>
 80034de:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80034e0:	07d9      	lsls	r1, r3, #31
 80034e2:	d405      	bmi.n	80034f0 <_vfiprintf_r+0x220>
 80034e4:	89ab      	ldrh	r3, [r5, #12]
 80034e6:	059a      	lsls	r2, r3, #22
 80034e8:	d402      	bmi.n	80034f0 <_vfiprintf_r+0x220>
 80034ea:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80034ec:	f7ff fe30 	bl	8003150 <__retarget_lock_release_recursive>
 80034f0:	89ab      	ldrh	r3, [r5, #12]
 80034f2:	065b      	lsls	r3, r3, #25
 80034f4:	f53f af12 	bmi.w	800331c <_vfiprintf_r+0x4c>
 80034f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80034fa:	e711      	b.n	8003320 <_vfiprintf_r+0x50>
 80034fc:	ab03      	add	r3, sp, #12
 80034fe:	9300      	str	r3, [sp, #0]
 8003500:	462a      	mov	r2, r5
 8003502:	4b09      	ldr	r3, [pc, #36]	; (8003528 <_vfiprintf_r+0x258>)
 8003504:	a904      	add	r1, sp, #16
 8003506:	4630      	mov	r0, r6
 8003508:	f000 f880 	bl	800360c <_printf_i>
 800350c:	e7e4      	b.n	80034d8 <_vfiprintf_r+0x208>
 800350e:	bf00      	nop
 8003510:	08004b2c 	.word	0x08004b2c
 8003514:	08004b4c 	.word	0x08004b4c
 8003518:	08004b0c 	.word	0x08004b0c
 800351c:	08004b6c 	.word	0x08004b6c
 8003520:	08004b76 	.word	0x08004b76
 8003524:	00000000 	.word	0x00000000
 8003528:	080032ab 	.word	0x080032ab
 800352c:	08004b72 	.word	0x08004b72

08003530 <_printf_common>:
 8003530:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003534:	4616      	mov	r6, r2
 8003536:	4699      	mov	r9, r3
 8003538:	688a      	ldr	r2, [r1, #8]
 800353a:	690b      	ldr	r3, [r1, #16]
 800353c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003540:	4293      	cmp	r3, r2
 8003542:	bfb8      	it	lt
 8003544:	4613      	movlt	r3, r2
 8003546:	6033      	str	r3, [r6, #0]
 8003548:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800354c:	4607      	mov	r7, r0
 800354e:	460c      	mov	r4, r1
 8003550:	b10a      	cbz	r2, 8003556 <_printf_common+0x26>
 8003552:	3301      	adds	r3, #1
 8003554:	6033      	str	r3, [r6, #0]
 8003556:	6823      	ldr	r3, [r4, #0]
 8003558:	0699      	lsls	r1, r3, #26
 800355a:	bf42      	ittt	mi
 800355c:	6833      	ldrmi	r3, [r6, #0]
 800355e:	3302      	addmi	r3, #2
 8003560:	6033      	strmi	r3, [r6, #0]
 8003562:	6825      	ldr	r5, [r4, #0]
 8003564:	f015 0506 	ands.w	r5, r5, #6
 8003568:	d106      	bne.n	8003578 <_printf_common+0x48>
 800356a:	f104 0a19 	add.w	sl, r4, #25
 800356e:	68e3      	ldr	r3, [r4, #12]
 8003570:	6832      	ldr	r2, [r6, #0]
 8003572:	1a9b      	subs	r3, r3, r2
 8003574:	42ab      	cmp	r3, r5
 8003576:	dc26      	bgt.n	80035c6 <_printf_common+0x96>
 8003578:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800357c:	1e13      	subs	r3, r2, #0
 800357e:	6822      	ldr	r2, [r4, #0]
 8003580:	bf18      	it	ne
 8003582:	2301      	movne	r3, #1
 8003584:	0692      	lsls	r2, r2, #26
 8003586:	d42b      	bmi.n	80035e0 <_printf_common+0xb0>
 8003588:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800358c:	4649      	mov	r1, r9
 800358e:	4638      	mov	r0, r7
 8003590:	47c0      	blx	r8
 8003592:	3001      	adds	r0, #1
 8003594:	d01e      	beq.n	80035d4 <_printf_common+0xa4>
 8003596:	6823      	ldr	r3, [r4, #0]
 8003598:	68e5      	ldr	r5, [r4, #12]
 800359a:	6832      	ldr	r2, [r6, #0]
 800359c:	f003 0306 	and.w	r3, r3, #6
 80035a0:	2b04      	cmp	r3, #4
 80035a2:	bf08      	it	eq
 80035a4:	1aad      	subeq	r5, r5, r2
 80035a6:	68a3      	ldr	r3, [r4, #8]
 80035a8:	6922      	ldr	r2, [r4, #16]
 80035aa:	bf0c      	ite	eq
 80035ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80035b0:	2500      	movne	r5, #0
 80035b2:	4293      	cmp	r3, r2
 80035b4:	bfc4      	itt	gt
 80035b6:	1a9b      	subgt	r3, r3, r2
 80035b8:	18ed      	addgt	r5, r5, r3
 80035ba:	2600      	movs	r6, #0
 80035bc:	341a      	adds	r4, #26
 80035be:	42b5      	cmp	r5, r6
 80035c0:	d11a      	bne.n	80035f8 <_printf_common+0xc8>
 80035c2:	2000      	movs	r0, #0
 80035c4:	e008      	b.n	80035d8 <_printf_common+0xa8>
 80035c6:	2301      	movs	r3, #1
 80035c8:	4652      	mov	r2, sl
 80035ca:	4649      	mov	r1, r9
 80035cc:	4638      	mov	r0, r7
 80035ce:	47c0      	blx	r8
 80035d0:	3001      	adds	r0, #1
 80035d2:	d103      	bne.n	80035dc <_printf_common+0xac>
 80035d4:	f04f 30ff 	mov.w	r0, #4294967295
 80035d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80035dc:	3501      	adds	r5, #1
 80035de:	e7c6      	b.n	800356e <_printf_common+0x3e>
 80035e0:	18e1      	adds	r1, r4, r3
 80035e2:	1c5a      	adds	r2, r3, #1
 80035e4:	2030      	movs	r0, #48	; 0x30
 80035e6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80035ea:	4422      	add	r2, r4
 80035ec:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80035f0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80035f4:	3302      	adds	r3, #2
 80035f6:	e7c7      	b.n	8003588 <_printf_common+0x58>
 80035f8:	2301      	movs	r3, #1
 80035fa:	4622      	mov	r2, r4
 80035fc:	4649      	mov	r1, r9
 80035fe:	4638      	mov	r0, r7
 8003600:	47c0      	blx	r8
 8003602:	3001      	adds	r0, #1
 8003604:	d0e6      	beq.n	80035d4 <_printf_common+0xa4>
 8003606:	3601      	adds	r6, #1
 8003608:	e7d9      	b.n	80035be <_printf_common+0x8e>
	...

0800360c <_printf_i>:
 800360c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003610:	7e0f      	ldrb	r7, [r1, #24]
 8003612:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003614:	2f78      	cmp	r7, #120	; 0x78
 8003616:	4691      	mov	r9, r2
 8003618:	4680      	mov	r8, r0
 800361a:	460c      	mov	r4, r1
 800361c:	469a      	mov	sl, r3
 800361e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003622:	d807      	bhi.n	8003634 <_printf_i+0x28>
 8003624:	2f62      	cmp	r7, #98	; 0x62
 8003626:	d80a      	bhi.n	800363e <_printf_i+0x32>
 8003628:	2f00      	cmp	r7, #0
 800362a:	f000 80d8 	beq.w	80037de <_printf_i+0x1d2>
 800362e:	2f58      	cmp	r7, #88	; 0x58
 8003630:	f000 80a3 	beq.w	800377a <_printf_i+0x16e>
 8003634:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003638:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800363c:	e03a      	b.n	80036b4 <_printf_i+0xa8>
 800363e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003642:	2b15      	cmp	r3, #21
 8003644:	d8f6      	bhi.n	8003634 <_printf_i+0x28>
 8003646:	a101      	add	r1, pc, #4	; (adr r1, 800364c <_printf_i+0x40>)
 8003648:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800364c:	080036a5 	.word	0x080036a5
 8003650:	080036b9 	.word	0x080036b9
 8003654:	08003635 	.word	0x08003635
 8003658:	08003635 	.word	0x08003635
 800365c:	08003635 	.word	0x08003635
 8003660:	08003635 	.word	0x08003635
 8003664:	080036b9 	.word	0x080036b9
 8003668:	08003635 	.word	0x08003635
 800366c:	08003635 	.word	0x08003635
 8003670:	08003635 	.word	0x08003635
 8003674:	08003635 	.word	0x08003635
 8003678:	080037c5 	.word	0x080037c5
 800367c:	080036e9 	.word	0x080036e9
 8003680:	080037a7 	.word	0x080037a7
 8003684:	08003635 	.word	0x08003635
 8003688:	08003635 	.word	0x08003635
 800368c:	080037e7 	.word	0x080037e7
 8003690:	08003635 	.word	0x08003635
 8003694:	080036e9 	.word	0x080036e9
 8003698:	08003635 	.word	0x08003635
 800369c:	08003635 	.word	0x08003635
 80036a0:	080037af 	.word	0x080037af
 80036a4:	682b      	ldr	r3, [r5, #0]
 80036a6:	1d1a      	adds	r2, r3, #4
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	602a      	str	r2, [r5, #0]
 80036ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80036b0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80036b4:	2301      	movs	r3, #1
 80036b6:	e0a3      	b.n	8003800 <_printf_i+0x1f4>
 80036b8:	6820      	ldr	r0, [r4, #0]
 80036ba:	6829      	ldr	r1, [r5, #0]
 80036bc:	0606      	lsls	r6, r0, #24
 80036be:	f101 0304 	add.w	r3, r1, #4
 80036c2:	d50a      	bpl.n	80036da <_printf_i+0xce>
 80036c4:	680e      	ldr	r6, [r1, #0]
 80036c6:	602b      	str	r3, [r5, #0]
 80036c8:	2e00      	cmp	r6, #0
 80036ca:	da03      	bge.n	80036d4 <_printf_i+0xc8>
 80036cc:	232d      	movs	r3, #45	; 0x2d
 80036ce:	4276      	negs	r6, r6
 80036d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80036d4:	485e      	ldr	r0, [pc, #376]	; (8003850 <_printf_i+0x244>)
 80036d6:	230a      	movs	r3, #10
 80036d8:	e019      	b.n	800370e <_printf_i+0x102>
 80036da:	680e      	ldr	r6, [r1, #0]
 80036dc:	602b      	str	r3, [r5, #0]
 80036de:	f010 0f40 	tst.w	r0, #64	; 0x40
 80036e2:	bf18      	it	ne
 80036e4:	b236      	sxthne	r6, r6
 80036e6:	e7ef      	b.n	80036c8 <_printf_i+0xbc>
 80036e8:	682b      	ldr	r3, [r5, #0]
 80036ea:	6820      	ldr	r0, [r4, #0]
 80036ec:	1d19      	adds	r1, r3, #4
 80036ee:	6029      	str	r1, [r5, #0]
 80036f0:	0601      	lsls	r1, r0, #24
 80036f2:	d501      	bpl.n	80036f8 <_printf_i+0xec>
 80036f4:	681e      	ldr	r6, [r3, #0]
 80036f6:	e002      	b.n	80036fe <_printf_i+0xf2>
 80036f8:	0646      	lsls	r6, r0, #25
 80036fa:	d5fb      	bpl.n	80036f4 <_printf_i+0xe8>
 80036fc:	881e      	ldrh	r6, [r3, #0]
 80036fe:	4854      	ldr	r0, [pc, #336]	; (8003850 <_printf_i+0x244>)
 8003700:	2f6f      	cmp	r7, #111	; 0x6f
 8003702:	bf0c      	ite	eq
 8003704:	2308      	moveq	r3, #8
 8003706:	230a      	movne	r3, #10
 8003708:	2100      	movs	r1, #0
 800370a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800370e:	6865      	ldr	r5, [r4, #4]
 8003710:	60a5      	str	r5, [r4, #8]
 8003712:	2d00      	cmp	r5, #0
 8003714:	bfa2      	ittt	ge
 8003716:	6821      	ldrge	r1, [r4, #0]
 8003718:	f021 0104 	bicge.w	r1, r1, #4
 800371c:	6021      	strge	r1, [r4, #0]
 800371e:	b90e      	cbnz	r6, 8003724 <_printf_i+0x118>
 8003720:	2d00      	cmp	r5, #0
 8003722:	d04d      	beq.n	80037c0 <_printf_i+0x1b4>
 8003724:	4615      	mov	r5, r2
 8003726:	fbb6 f1f3 	udiv	r1, r6, r3
 800372a:	fb03 6711 	mls	r7, r3, r1, r6
 800372e:	5dc7      	ldrb	r7, [r0, r7]
 8003730:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003734:	4637      	mov	r7, r6
 8003736:	42bb      	cmp	r3, r7
 8003738:	460e      	mov	r6, r1
 800373a:	d9f4      	bls.n	8003726 <_printf_i+0x11a>
 800373c:	2b08      	cmp	r3, #8
 800373e:	d10b      	bne.n	8003758 <_printf_i+0x14c>
 8003740:	6823      	ldr	r3, [r4, #0]
 8003742:	07de      	lsls	r6, r3, #31
 8003744:	d508      	bpl.n	8003758 <_printf_i+0x14c>
 8003746:	6923      	ldr	r3, [r4, #16]
 8003748:	6861      	ldr	r1, [r4, #4]
 800374a:	4299      	cmp	r1, r3
 800374c:	bfde      	ittt	le
 800374e:	2330      	movle	r3, #48	; 0x30
 8003750:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003754:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003758:	1b52      	subs	r2, r2, r5
 800375a:	6122      	str	r2, [r4, #16]
 800375c:	f8cd a000 	str.w	sl, [sp]
 8003760:	464b      	mov	r3, r9
 8003762:	aa03      	add	r2, sp, #12
 8003764:	4621      	mov	r1, r4
 8003766:	4640      	mov	r0, r8
 8003768:	f7ff fee2 	bl	8003530 <_printf_common>
 800376c:	3001      	adds	r0, #1
 800376e:	d14c      	bne.n	800380a <_printf_i+0x1fe>
 8003770:	f04f 30ff 	mov.w	r0, #4294967295
 8003774:	b004      	add	sp, #16
 8003776:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800377a:	4835      	ldr	r0, [pc, #212]	; (8003850 <_printf_i+0x244>)
 800377c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003780:	6829      	ldr	r1, [r5, #0]
 8003782:	6823      	ldr	r3, [r4, #0]
 8003784:	f851 6b04 	ldr.w	r6, [r1], #4
 8003788:	6029      	str	r1, [r5, #0]
 800378a:	061d      	lsls	r5, r3, #24
 800378c:	d514      	bpl.n	80037b8 <_printf_i+0x1ac>
 800378e:	07df      	lsls	r7, r3, #31
 8003790:	bf44      	itt	mi
 8003792:	f043 0320 	orrmi.w	r3, r3, #32
 8003796:	6023      	strmi	r3, [r4, #0]
 8003798:	b91e      	cbnz	r6, 80037a2 <_printf_i+0x196>
 800379a:	6823      	ldr	r3, [r4, #0]
 800379c:	f023 0320 	bic.w	r3, r3, #32
 80037a0:	6023      	str	r3, [r4, #0]
 80037a2:	2310      	movs	r3, #16
 80037a4:	e7b0      	b.n	8003708 <_printf_i+0xfc>
 80037a6:	6823      	ldr	r3, [r4, #0]
 80037a8:	f043 0320 	orr.w	r3, r3, #32
 80037ac:	6023      	str	r3, [r4, #0]
 80037ae:	2378      	movs	r3, #120	; 0x78
 80037b0:	4828      	ldr	r0, [pc, #160]	; (8003854 <_printf_i+0x248>)
 80037b2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80037b6:	e7e3      	b.n	8003780 <_printf_i+0x174>
 80037b8:	0659      	lsls	r1, r3, #25
 80037ba:	bf48      	it	mi
 80037bc:	b2b6      	uxthmi	r6, r6
 80037be:	e7e6      	b.n	800378e <_printf_i+0x182>
 80037c0:	4615      	mov	r5, r2
 80037c2:	e7bb      	b.n	800373c <_printf_i+0x130>
 80037c4:	682b      	ldr	r3, [r5, #0]
 80037c6:	6826      	ldr	r6, [r4, #0]
 80037c8:	6961      	ldr	r1, [r4, #20]
 80037ca:	1d18      	adds	r0, r3, #4
 80037cc:	6028      	str	r0, [r5, #0]
 80037ce:	0635      	lsls	r5, r6, #24
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	d501      	bpl.n	80037d8 <_printf_i+0x1cc>
 80037d4:	6019      	str	r1, [r3, #0]
 80037d6:	e002      	b.n	80037de <_printf_i+0x1d2>
 80037d8:	0670      	lsls	r0, r6, #25
 80037da:	d5fb      	bpl.n	80037d4 <_printf_i+0x1c8>
 80037dc:	8019      	strh	r1, [r3, #0]
 80037de:	2300      	movs	r3, #0
 80037e0:	6123      	str	r3, [r4, #16]
 80037e2:	4615      	mov	r5, r2
 80037e4:	e7ba      	b.n	800375c <_printf_i+0x150>
 80037e6:	682b      	ldr	r3, [r5, #0]
 80037e8:	1d1a      	adds	r2, r3, #4
 80037ea:	602a      	str	r2, [r5, #0]
 80037ec:	681d      	ldr	r5, [r3, #0]
 80037ee:	6862      	ldr	r2, [r4, #4]
 80037f0:	2100      	movs	r1, #0
 80037f2:	4628      	mov	r0, r5
 80037f4:	f7fc fcfc 	bl	80001f0 <memchr>
 80037f8:	b108      	cbz	r0, 80037fe <_printf_i+0x1f2>
 80037fa:	1b40      	subs	r0, r0, r5
 80037fc:	6060      	str	r0, [r4, #4]
 80037fe:	6863      	ldr	r3, [r4, #4]
 8003800:	6123      	str	r3, [r4, #16]
 8003802:	2300      	movs	r3, #0
 8003804:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003808:	e7a8      	b.n	800375c <_printf_i+0x150>
 800380a:	6923      	ldr	r3, [r4, #16]
 800380c:	462a      	mov	r2, r5
 800380e:	4649      	mov	r1, r9
 8003810:	4640      	mov	r0, r8
 8003812:	47d0      	blx	sl
 8003814:	3001      	adds	r0, #1
 8003816:	d0ab      	beq.n	8003770 <_printf_i+0x164>
 8003818:	6823      	ldr	r3, [r4, #0]
 800381a:	079b      	lsls	r3, r3, #30
 800381c:	d413      	bmi.n	8003846 <_printf_i+0x23a>
 800381e:	68e0      	ldr	r0, [r4, #12]
 8003820:	9b03      	ldr	r3, [sp, #12]
 8003822:	4298      	cmp	r0, r3
 8003824:	bfb8      	it	lt
 8003826:	4618      	movlt	r0, r3
 8003828:	e7a4      	b.n	8003774 <_printf_i+0x168>
 800382a:	2301      	movs	r3, #1
 800382c:	4632      	mov	r2, r6
 800382e:	4649      	mov	r1, r9
 8003830:	4640      	mov	r0, r8
 8003832:	47d0      	blx	sl
 8003834:	3001      	adds	r0, #1
 8003836:	d09b      	beq.n	8003770 <_printf_i+0x164>
 8003838:	3501      	adds	r5, #1
 800383a:	68e3      	ldr	r3, [r4, #12]
 800383c:	9903      	ldr	r1, [sp, #12]
 800383e:	1a5b      	subs	r3, r3, r1
 8003840:	42ab      	cmp	r3, r5
 8003842:	dcf2      	bgt.n	800382a <_printf_i+0x21e>
 8003844:	e7eb      	b.n	800381e <_printf_i+0x212>
 8003846:	2500      	movs	r5, #0
 8003848:	f104 0619 	add.w	r6, r4, #25
 800384c:	e7f5      	b.n	800383a <_printf_i+0x22e>
 800384e:	bf00      	nop
 8003850:	08004b7d 	.word	0x08004b7d
 8003854:	08004b8e 	.word	0x08004b8e

08003858 <__svfiscanf_r>:
 8003858:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800385c:	461d      	mov	r5, r3
 800385e:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 8003860:	07df      	lsls	r7, r3, #31
 8003862:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8003866:	4606      	mov	r6, r0
 8003868:	460c      	mov	r4, r1
 800386a:	4692      	mov	sl, r2
 800386c:	d405      	bmi.n	800387a <__svfiscanf_r+0x22>
 800386e:	898b      	ldrh	r3, [r1, #12]
 8003870:	0598      	lsls	r0, r3, #22
 8003872:	d402      	bmi.n	800387a <__svfiscanf_r+0x22>
 8003874:	6d88      	ldr	r0, [r1, #88]	; 0x58
 8003876:	f7ff fc6a 	bl	800314e <__retarget_lock_acquire_recursive>
 800387a:	2300      	movs	r3, #0
 800387c:	e9cd 3344 	strd	r3, r3, [sp, #272]	; 0x110
 8003880:	4ba6      	ldr	r3, [pc, #664]	; (8003b1c <__svfiscanf_r+0x2c4>)
 8003882:	93a0      	str	r3, [sp, #640]	; 0x280
 8003884:	f10d 0804 	add.w	r8, sp, #4
 8003888:	4ba5      	ldr	r3, [pc, #660]	; (8003b20 <__svfiscanf_r+0x2c8>)
 800388a:	4fa6      	ldr	r7, [pc, #664]	; (8003b24 <__svfiscanf_r+0x2cc>)
 800388c:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8003b28 <__svfiscanf_r+0x2d0>
 8003890:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8003894:	93a1      	str	r3, [sp, #644]	; 0x284
 8003896:	9500      	str	r5, [sp, #0]
 8003898:	f89a 3000 	ldrb.w	r3, [sl]
 800389c:	2b00      	cmp	r3, #0
 800389e:	f000 8173 	beq.w	8003b88 <__svfiscanf_r+0x330>
 80038a2:	5dd9      	ldrb	r1, [r3, r7]
 80038a4:	f011 0108 	ands.w	r1, r1, #8
 80038a8:	f10a 0501 	add.w	r5, sl, #1
 80038ac:	d019      	beq.n	80038e2 <__svfiscanf_r+0x8a>
 80038ae:	6863      	ldr	r3, [r4, #4]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	dd0f      	ble.n	80038d4 <__svfiscanf_r+0x7c>
 80038b4:	6823      	ldr	r3, [r4, #0]
 80038b6:	781a      	ldrb	r2, [r3, #0]
 80038b8:	5cba      	ldrb	r2, [r7, r2]
 80038ba:	0711      	lsls	r1, r2, #28
 80038bc:	d401      	bmi.n	80038c2 <__svfiscanf_r+0x6a>
 80038be:	46aa      	mov	sl, r5
 80038c0:	e7ea      	b.n	8003898 <__svfiscanf_r+0x40>
 80038c2:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80038c4:	3201      	adds	r2, #1
 80038c6:	9245      	str	r2, [sp, #276]	; 0x114
 80038c8:	6862      	ldr	r2, [r4, #4]
 80038ca:	3301      	adds	r3, #1
 80038cc:	3a01      	subs	r2, #1
 80038ce:	6062      	str	r2, [r4, #4]
 80038d0:	6023      	str	r3, [r4, #0]
 80038d2:	e7ec      	b.n	80038ae <__svfiscanf_r+0x56>
 80038d4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80038d6:	4621      	mov	r1, r4
 80038d8:	4630      	mov	r0, r6
 80038da:	4798      	blx	r3
 80038dc:	2800      	cmp	r0, #0
 80038de:	d0e9      	beq.n	80038b4 <__svfiscanf_r+0x5c>
 80038e0:	e7ed      	b.n	80038be <__svfiscanf_r+0x66>
 80038e2:	2b25      	cmp	r3, #37	; 0x25
 80038e4:	d012      	beq.n	800390c <__svfiscanf_r+0xb4>
 80038e6:	469a      	mov	sl, r3
 80038e8:	6863      	ldr	r3, [r4, #4]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	f340 8095 	ble.w	8003a1a <__svfiscanf_r+0x1c2>
 80038f0:	6822      	ldr	r2, [r4, #0]
 80038f2:	7813      	ldrb	r3, [r2, #0]
 80038f4:	4553      	cmp	r3, sl
 80038f6:	f040 8147 	bne.w	8003b88 <__svfiscanf_r+0x330>
 80038fa:	6863      	ldr	r3, [r4, #4]
 80038fc:	3b01      	subs	r3, #1
 80038fe:	6063      	str	r3, [r4, #4]
 8003900:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8003902:	3201      	adds	r2, #1
 8003904:	3301      	adds	r3, #1
 8003906:	6022      	str	r2, [r4, #0]
 8003908:	9345      	str	r3, [sp, #276]	; 0x114
 800390a:	e7d8      	b.n	80038be <__svfiscanf_r+0x66>
 800390c:	9141      	str	r1, [sp, #260]	; 0x104
 800390e:	9143      	str	r1, [sp, #268]	; 0x10c
 8003910:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8003914:	2b2a      	cmp	r3, #42	; 0x2a
 8003916:	bf02      	ittt	eq
 8003918:	2310      	moveq	r3, #16
 800391a:	9341      	streq	r3, [sp, #260]	; 0x104
 800391c:	f10a 0502 	addeq.w	r5, sl, #2
 8003920:	220a      	movs	r2, #10
 8003922:	46aa      	mov	sl, r5
 8003924:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8003928:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800392c:	2b09      	cmp	r3, #9
 800392e:	d91e      	bls.n	800396e <__svfiscanf_r+0x116>
 8003930:	487d      	ldr	r0, [pc, #500]	; (8003b28 <__svfiscanf_r+0x2d0>)
 8003932:	2203      	movs	r2, #3
 8003934:	f7fc fc5c 	bl	80001f0 <memchr>
 8003938:	b140      	cbz	r0, 800394c <__svfiscanf_r+0xf4>
 800393a:	2301      	movs	r3, #1
 800393c:	eba0 0009 	sub.w	r0, r0, r9
 8003940:	fa03 f000 	lsl.w	r0, r3, r0
 8003944:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8003946:	4318      	orrs	r0, r3
 8003948:	9041      	str	r0, [sp, #260]	; 0x104
 800394a:	4655      	mov	r5, sl
 800394c:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003950:	2b78      	cmp	r3, #120	; 0x78
 8003952:	d807      	bhi.n	8003964 <__svfiscanf_r+0x10c>
 8003954:	2b57      	cmp	r3, #87	; 0x57
 8003956:	d811      	bhi.n	800397c <__svfiscanf_r+0x124>
 8003958:	2b25      	cmp	r3, #37	; 0x25
 800395a:	d0c4      	beq.n	80038e6 <__svfiscanf_r+0x8e>
 800395c:	d858      	bhi.n	8003a10 <__svfiscanf_r+0x1b8>
 800395e:	2b00      	cmp	r3, #0
 8003960:	f000 80c8 	beq.w	8003af4 <__svfiscanf_r+0x29c>
 8003964:	2303      	movs	r3, #3
 8003966:	9347      	str	r3, [sp, #284]	; 0x11c
 8003968:	230a      	movs	r3, #10
 800396a:	9342      	str	r3, [sp, #264]	; 0x108
 800396c:	e07c      	b.n	8003a68 <__svfiscanf_r+0x210>
 800396e:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8003970:	fb02 1103 	mla	r1, r2, r3, r1
 8003974:	3930      	subs	r1, #48	; 0x30
 8003976:	9143      	str	r1, [sp, #268]	; 0x10c
 8003978:	4655      	mov	r5, sl
 800397a:	e7d2      	b.n	8003922 <__svfiscanf_r+0xca>
 800397c:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8003980:	2a20      	cmp	r2, #32
 8003982:	d8ef      	bhi.n	8003964 <__svfiscanf_r+0x10c>
 8003984:	a101      	add	r1, pc, #4	; (adr r1, 800398c <__svfiscanf_r+0x134>)
 8003986:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800398a:	bf00      	nop
 800398c:	08003a53 	.word	0x08003a53
 8003990:	08003965 	.word	0x08003965
 8003994:	08003965 	.word	0x08003965
 8003998:	08003ab1 	.word	0x08003ab1
 800399c:	08003965 	.word	0x08003965
 80039a0:	08003965 	.word	0x08003965
 80039a4:	08003965 	.word	0x08003965
 80039a8:	08003965 	.word	0x08003965
 80039ac:	08003965 	.word	0x08003965
 80039b0:	08003965 	.word	0x08003965
 80039b4:	08003965 	.word	0x08003965
 80039b8:	08003ac7 	.word	0x08003ac7
 80039bc:	08003a9d 	.word	0x08003a9d
 80039c0:	08003a17 	.word	0x08003a17
 80039c4:	08003a17 	.word	0x08003a17
 80039c8:	08003a17 	.word	0x08003a17
 80039cc:	08003965 	.word	0x08003965
 80039d0:	08003aa1 	.word	0x08003aa1
 80039d4:	08003965 	.word	0x08003965
 80039d8:	08003965 	.word	0x08003965
 80039dc:	08003965 	.word	0x08003965
 80039e0:	08003965 	.word	0x08003965
 80039e4:	08003ad7 	.word	0x08003ad7
 80039e8:	08003aa9 	.word	0x08003aa9
 80039ec:	08003a4b 	.word	0x08003a4b
 80039f0:	08003965 	.word	0x08003965
 80039f4:	08003965 	.word	0x08003965
 80039f8:	08003ad3 	.word	0x08003ad3
 80039fc:	08003965 	.word	0x08003965
 8003a00:	08003a9d 	.word	0x08003a9d
 8003a04:	08003965 	.word	0x08003965
 8003a08:	08003965 	.word	0x08003965
 8003a0c:	08003a53 	.word	0x08003a53
 8003a10:	3b45      	subs	r3, #69	; 0x45
 8003a12:	2b02      	cmp	r3, #2
 8003a14:	d8a6      	bhi.n	8003964 <__svfiscanf_r+0x10c>
 8003a16:	2305      	movs	r3, #5
 8003a18:	e025      	b.n	8003a66 <__svfiscanf_r+0x20e>
 8003a1a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8003a1c:	4621      	mov	r1, r4
 8003a1e:	4630      	mov	r0, r6
 8003a20:	4798      	blx	r3
 8003a22:	2800      	cmp	r0, #0
 8003a24:	f43f af64 	beq.w	80038f0 <__svfiscanf_r+0x98>
 8003a28:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003a2a:	07da      	lsls	r2, r3, #31
 8003a2c:	f140 80a4 	bpl.w	8003b78 <__svfiscanf_r+0x320>
 8003a30:	9844      	ldr	r0, [sp, #272]	; 0x110
 8003a32:	2800      	cmp	r0, #0
 8003a34:	d067      	beq.n	8003b06 <__svfiscanf_r+0x2ae>
 8003a36:	89a3      	ldrh	r3, [r4, #12]
 8003a38:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003a3c:	bf18      	it	ne
 8003a3e:	f04f 30ff 	movne.w	r0, #4294967295
 8003a42:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8003a46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a4a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8003a4c:	f042 0220 	orr.w	r2, r2, #32
 8003a50:	9241      	str	r2, [sp, #260]	; 0x104
 8003a52:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8003a54:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a58:	9241      	str	r2, [sp, #260]	; 0x104
 8003a5a:	2210      	movs	r2, #16
 8003a5c:	2b6f      	cmp	r3, #111	; 0x6f
 8003a5e:	9242      	str	r2, [sp, #264]	; 0x108
 8003a60:	bf34      	ite	cc
 8003a62:	2303      	movcc	r3, #3
 8003a64:	2304      	movcs	r3, #4
 8003a66:	9347      	str	r3, [sp, #284]	; 0x11c
 8003a68:	6863      	ldr	r3, [r4, #4]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	dd4e      	ble.n	8003b0c <__svfiscanf_r+0x2b4>
 8003a6e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8003a70:	065b      	lsls	r3, r3, #25
 8003a72:	d404      	bmi.n	8003a7e <__svfiscanf_r+0x226>
 8003a74:	6823      	ldr	r3, [r4, #0]
 8003a76:	781a      	ldrb	r2, [r3, #0]
 8003a78:	5cba      	ldrb	r2, [r7, r2]
 8003a7a:	0710      	lsls	r0, r2, #28
 8003a7c:	d456      	bmi.n	8003b2c <__svfiscanf_r+0x2d4>
 8003a7e:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8003a80:	2b02      	cmp	r3, #2
 8003a82:	dc65      	bgt.n	8003b50 <__svfiscanf_r+0x2f8>
 8003a84:	466b      	mov	r3, sp
 8003a86:	4622      	mov	r2, r4
 8003a88:	a941      	add	r1, sp, #260	; 0x104
 8003a8a:	4630      	mov	r0, r6
 8003a8c:	f000 f8b2 	bl	8003bf4 <_scanf_chars>
 8003a90:	2801      	cmp	r0, #1
 8003a92:	d079      	beq.n	8003b88 <__svfiscanf_r+0x330>
 8003a94:	2802      	cmp	r0, #2
 8003a96:	f47f af12 	bne.w	80038be <__svfiscanf_r+0x66>
 8003a9a:	e7c5      	b.n	8003a28 <__svfiscanf_r+0x1d0>
 8003a9c:	220a      	movs	r2, #10
 8003a9e:	e7dd      	b.n	8003a5c <__svfiscanf_r+0x204>
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	9342      	str	r3, [sp, #264]	; 0x108
 8003aa4:	2303      	movs	r3, #3
 8003aa6:	e7de      	b.n	8003a66 <__svfiscanf_r+0x20e>
 8003aa8:	2308      	movs	r3, #8
 8003aaa:	9342      	str	r3, [sp, #264]	; 0x108
 8003aac:	2304      	movs	r3, #4
 8003aae:	e7da      	b.n	8003a66 <__svfiscanf_r+0x20e>
 8003ab0:	4629      	mov	r1, r5
 8003ab2:	4640      	mov	r0, r8
 8003ab4:	f000 fa94 	bl	8003fe0 <__sccl>
 8003ab8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8003aba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003abe:	9341      	str	r3, [sp, #260]	; 0x104
 8003ac0:	4605      	mov	r5, r0
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	e7cf      	b.n	8003a66 <__svfiscanf_r+0x20e>
 8003ac6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8003ac8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003acc:	9341      	str	r3, [sp, #260]	; 0x104
 8003ace:	2300      	movs	r3, #0
 8003ad0:	e7c9      	b.n	8003a66 <__svfiscanf_r+0x20e>
 8003ad2:	2302      	movs	r3, #2
 8003ad4:	e7c7      	b.n	8003a66 <__svfiscanf_r+0x20e>
 8003ad6:	9841      	ldr	r0, [sp, #260]	; 0x104
 8003ad8:	06c3      	lsls	r3, r0, #27
 8003ada:	f53f aef0 	bmi.w	80038be <__svfiscanf_r+0x66>
 8003ade:	9b00      	ldr	r3, [sp, #0]
 8003ae0:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8003ae2:	1d19      	adds	r1, r3, #4
 8003ae4:	9100      	str	r1, [sp, #0]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f010 0f01 	tst.w	r0, #1
 8003aec:	bf14      	ite	ne
 8003aee:	801a      	strhne	r2, [r3, #0]
 8003af0:	601a      	streq	r2, [r3, #0]
 8003af2:	e6e4      	b.n	80038be <__svfiscanf_r+0x66>
 8003af4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003af6:	07d8      	lsls	r0, r3, #31
 8003af8:	d405      	bmi.n	8003b06 <__svfiscanf_r+0x2ae>
 8003afa:	89a3      	ldrh	r3, [r4, #12]
 8003afc:	0599      	lsls	r1, r3, #22
 8003afe:	d402      	bmi.n	8003b06 <__svfiscanf_r+0x2ae>
 8003b00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003b02:	f7ff fb25 	bl	8003150 <__retarget_lock_release_recursive>
 8003b06:	f04f 30ff 	mov.w	r0, #4294967295
 8003b0a:	e79a      	b.n	8003a42 <__svfiscanf_r+0x1ea>
 8003b0c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8003b0e:	4621      	mov	r1, r4
 8003b10:	4630      	mov	r0, r6
 8003b12:	4798      	blx	r3
 8003b14:	2800      	cmp	r0, #0
 8003b16:	d0aa      	beq.n	8003a6e <__svfiscanf_r+0x216>
 8003b18:	e786      	b.n	8003a28 <__svfiscanf_r+0x1d0>
 8003b1a:	bf00      	nop
 8003b1c:	0800433d 	.word	0x0800433d
 8003b20:	08003ead 	.word	0x08003ead
 8003b24:	08004bbb 	.word	0x08004bbb
 8003b28:	08004b72 	.word	0x08004b72
 8003b2c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8003b2e:	3201      	adds	r2, #1
 8003b30:	9245      	str	r2, [sp, #276]	; 0x114
 8003b32:	6862      	ldr	r2, [r4, #4]
 8003b34:	3a01      	subs	r2, #1
 8003b36:	2a00      	cmp	r2, #0
 8003b38:	6062      	str	r2, [r4, #4]
 8003b3a:	dd02      	ble.n	8003b42 <__svfiscanf_r+0x2ea>
 8003b3c:	3301      	adds	r3, #1
 8003b3e:	6023      	str	r3, [r4, #0]
 8003b40:	e798      	b.n	8003a74 <__svfiscanf_r+0x21c>
 8003b42:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8003b44:	4621      	mov	r1, r4
 8003b46:	4630      	mov	r0, r6
 8003b48:	4798      	blx	r3
 8003b4a:	2800      	cmp	r0, #0
 8003b4c:	d092      	beq.n	8003a74 <__svfiscanf_r+0x21c>
 8003b4e:	e76b      	b.n	8003a28 <__svfiscanf_r+0x1d0>
 8003b50:	2b04      	cmp	r3, #4
 8003b52:	dc06      	bgt.n	8003b62 <__svfiscanf_r+0x30a>
 8003b54:	466b      	mov	r3, sp
 8003b56:	4622      	mov	r2, r4
 8003b58:	a941      	add	r1, sp, #260	; 0x104
 8003b5a:	4630      	mov	r0, r6
 8003b5c:	f000 f8a4 	bl	8003ca8 <_scanf_i>
 8003b60:	e796      	b.n	8003a90 <__svfiscanf_r+0x238>
 8003b62:	4b0f      	ldr	r3, [pc, #60]	; (8003ba0 <__svfiscanf_r+0x348>)
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	f43f aeaa 	beq.w	80038be <__svfiscanf_r+0x66>
 8003b6a:	466b      	mov	r3, sp
 8003b6c:	4622      	mov	r2, r4
 8003b6e:	a941      	add	r1, sp, #260	; 0x104
 8003b70:	4630      	mov	r0, r6
 8003b72:	f3af 8000 	nop.w
 8003b76:	e78b      	b.n	8003a90 <__svfiscanf_r+0x238>
 8003b78:	89a3      	ldrh	r3, [r4, #12]
 8003b7a:	0599      	lsls	r1, r3, #22
 8003b7c:	f53f af58 	bmi.w	8003a30 <__svfiscanf_r+0x1d8>
 8003b80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003b82:	f7ff fae5 	bl	8003150 <__retarget_lock_release_recursive>
 8003b86:	e753      	b.n	8003a30 <__svfiscanf_r+0x1d8>
 8003b88:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003b8a:	07da      	lsls	r2, r3, #31
 8003b8c:	d405      	bmi.n	8003b9a <__svfiscanf_r+0x342>
 8003b8e:	89a3      	ldrh	r3, [r4, #12]
 8003b90:	059b      	lsls	r3, r3, #22
 8003b92:	d402      	bmi.n	8003b9a <__svfiscanf_r+0x342>
 8003b94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003b96:	f7ff fadb 	bl	8003150 <__retarget_lock_release_recursive>
 8003b9a:	9844      	ldr	r0, [sp, #272]	; 0x110
 8003b9c:	e751      	b.n	8003a42 <__svfiscanf_r+0x1ea>
 8003b9e:	bf00      	nop
 8003ba0:	00000000 	.word	0x00000000

08003ba4 <_vfiscanf_r>:
 8003ba4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003ba6:	460c      	mov	r4, r1
 8003ba8:	4605      	mov	r5, r0
 8003baa:	b138      	cbz	r0, 8003bbc <_vfiscanf_r+0x18>
 8003bac:	6981      	ldr	r1, [r0, #24]
 8003bae:	b929      	cbnz	r1, 8003bbc <_vfiscanf_r+0x18>
 8003bb0:	e9cd 2300 	strd	r2, r3, [sp]
 8003bb4:	f7ff fa10 	bl	8002fd8 <__sinit>
 8003bb8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003bbc:	490a      	ldr	r1, [pc, #40]	; (8003be8 <_vfiscanf_r+0x44>)
 8003bbe:	428c      	cmp	r4, r1
 8003bc0:	d107      	bne.n	8003bd2 <_vfiscanf_r+0x2e>
 8003bc2:	686c      	ldr	r4, [r5, #4]
 8003bc4:	4621      	mov	r1, r4
 8003bc6:	4628      	mov	r0, r5
 8003bc8:	b003      	add	sp, #12
 8003bca:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003bce:	f7ff be43 	b.w	8003858 <__svfiscanf_r>
 8003bd2:	4906      	ldr	r1, [pc, #24]	; (8003bec <_vfiscanf_r+0x48>)
 8003bd4:	428c      	cmp	r4, r1
 8003bd6:	d101      	bne.n	8003bdc <_vfiscanf_r+0x38>
 8003bd8:	68ac      	ldr	r4, [r5, #8]
 8003bda:	e7f3      	b.n	8003bc4 <_vfiscanf_r+0x20>
 8003bdc:	4904      	ldr	r1, [pc, #16]	; (8003bf0 <_vfiscanf_r+0x4c>)
 8003bde:	428c      	cmp	r4, r1
 8003be0:	bf08      	it	eq
 8003be2:	68ec      	ldreq	r4, [r5, #12]
 8003be4:	e7ee      	b.n	8003bc4 <_vfiscanf_r+0x20>
 8003be6:	bf00      	nop
 8003be8:	08004b2c 	.word	0x08004b2c
 8003bec:	08004b4c 	.word	0x08004b4c
 8003bf0:	08004b0c 	.word	0x08004b0c

08003bf4 <_scanf_chars>:
 8003bf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003bf8:	4615      	mov	r5, r2
 8003bfa:	688a      	ldr	r2, [r1, #8]
 8003bfc:	4680      	mov	r8, r0
 8003bfe:	460c      	mov	r4, r1
 8003c00:	b932      	cbnz	r2, 8003c10 <_scanf_chars+0x1c>
 8003c02:	698a      	ldr	r2, [r1, #24]
 8003c04:	2a00      	cmp	r2, #0
 8003c06:	bf0c      	ite	eq
 8003c08:	2201      	moveq	r2, #1
 8003c0a:	f04f 32ff 	movne.w	r2, #4294967295
 8003c0e:	608a      	str	r2, [r1, #8]
 8003c10:	6822      	ldr	r2, [r4, #0]
 8003c12:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8003ca4 <_scanf_chars+0xb0>
 8003c16:	06d1      	lsls	r1, r2, #27
 8003c18:	bf5f      	itttt	pl
 8003c1a:	681a      	ldrpl	r2, [r3, #0]
 8003c1c:	1d11      	addpl	r1, r2, #4
 8003c1e:	6019      	strpl	r1, [r3, #0]
 8003c20:	6816      	ldrpl	r6, [r2, #0]
 8003c22:	2700      	movs	r7, #0
 8003c24:	69a0      	ldr	r0, [r4, #24]
 8003c26:	b188      	cbz	r0, 8003c4c <_scanf_chars+0x58>
 8003c28:	2801      	cmp	r0, #1
 8003c2a:	d107      	bne.n	8003c3c <_scanf_chars+0x48>
 8003c2c:	682a      	ldr	r2, [r5, #0]
 8003c2e:	7811      	ldrb	r1, [r2, #0]
 8003c30:	6962      	ldr	r2, [r4, #20]
 8003c32:	5c52      	ldrb	r2, [r2, r1]
 8003c34:	b952      	cbnz	r2, 8003c4c <_scanf_chars+0x58>
 8003c36:	2f00      	cmp	r7, #0
 8003c38:	d031      	beq.n	8003c9e <_scanf_chars+0xaa>
 8003c3a:	e022      	b.n	8003c82 <_scanf_chars+0x8e>
 8003c3c:	2802      	cmp	r0, #2
 8003c3e:	d120      	bne.n	8003c82 <_scanf_chars+0x8e>
 8003c40:	682b      	ldr	r3, [r5, #0]
 8003c42:	781b      	ldrb	r3, [r3, #0]
 8003c44:	f813 3009 	ldrb.w	r3, [r3, r9]
 8003c48:	071b      	lsls	r3, r3, #28
 8003c4a:	d41a      	bmi.n	8003c82 <_scanf_chars+0x8e>
 8003c4c:	6823      	ldr	r3, [r4, #0]
 8003c4e:	06da      	lsls	r2, r3, #27
 8003c50:	bf5e      	ittt	pl
 8003c52:	682b      	ldrpl	r3, [r5, #0]
 8003c54:	781b      	ldrbpl	r3, [r3, #0]
 8003c56:	f806 3b01 	strbpl.w	r3, [r6], #1
 8003c5a:	682a      	ldr	r2, [r5, #0]
 8003c5c:	686b      	ldr	r3, [r5, #4]
 8003c5e:	3201      	adds	r2, #1
 8003c60:	602a      	str	r2, [r5, #0]
 8003c62:	68a2      	ldr	r2, [r4, #8]
 8003c64:	3b01      	subs	r3, #1
 8003c66:	3a01      	subs	r2, #1
 8003c68:	606b      	str	r3, [r5, #4]
 8003c6a:	3701      	adds	r7, #1
 8003c6c:	60a2      	str	r2, [r4, #8]
 8003c6e:	b142      	cbz	r2, 8003c82 <_scanf_chars+0x8e>
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	dcd7      	bgt.n	8003c24 <_scanf_chars+0x30>
 8003c74:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8003c78:	4629      	mov	r1, r5
 8003c7a:	4640      	mov	r0, r8
 8003c7c:	4798      	blx	r3
 8003c7e:	2800      	cmp	r0, #0
 8003c80:	d0d0      	beq.n	8003c24 <_scanf_chars+0x30>
 8003c82:	6823      	ldr	r3, [r4, #0]
 8003c84:	f013 0310 	ands.w	r3, r3, #16
 8003c88:	d105      	bne.n	8003c96 <_scanf_chars+0xa2>
 8003c8a:	68e2      	ldr	r2, [r4, #12]
 8003c8c:	3201      	adds	r2, #1
 8003c8e:	60e2      	str	r2, [r4, #12]
 8003c90:	69a2      	ldr	r2, [r4, #24]
 8003c92:	b102      	cbz	r2, 8003c96 <_scanf_chars+0xa2>
 8003c94:	7033      	strb	r3, [r6, #0]
 8003c96:	6923      	ldr	r3, [r4, #16]
 8003c98:	443b      	add	r3, r7
 8003c9a:	6123      	str	r3, [r4, #16]
 8003c9c:	2000      	movs	r0, #0
 8003c9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003ca2:	bf00      	nop
 8003ca4:	08004bbb 	.word	0x08004bbb

08003ca8 <_scanf_i>:
 8003ca8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003cac:	4698      	mov	r8, r3
 8003cae:	4b76      	ldr	r3, [pc, #472]	; (8003e88 <_scanf_i+0x1e0>)
 8003cb0:	460c      	mov	r4, r1
 8003cb2:	4682      	mov	sl, r0
 8003cb4:	4616      	mov	r6, r2
 8003cb6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003cba:	b087      	sub	sp, #28
 8003cbc:	ab03      	add	r3, sp, #12
 8003cbe:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003cc2:	4b72      	ldr	r3, [pc, #456]	; (8003e8c <_scanf_i+0x1e4>)
 8003cc4:	69a1      	ldr	r1, [r4, #24]
 8003cc6:	4a72      	ldr	r2, [pc, #456]	; (8003e90 <_scanf_i+0x1e8>)
 8003cc8:	2903      	cmp	r1, #3
 8003cca:	bf18      	it	ne
 8003ccc:	461a      	movne	r2, r3
 8003cce:	68a3      	ldr	r3, [r4, #8]
 8003cd0:	9201      	str	r2, [sp, #4]
 8003cd2:	1e5a      	subs	r2, r3, #1
 8003cd4:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8003cd8:	bf88      	it	hi
 8003cda:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8003cde:	4627      	mov	r7, r4
 8003ce0:	bf82      	ittt	hi
 8003ce2:	eb03 0905 	addhi.w	r9, r3, r5
 8003ce6:	f240 135d 	movwhi	r3, #349	; 0x15d
 8003cea:	60a3      	strhi	r3, [r4, #8]
 8003cec:	f857 3b1c 	ldr.w	r3, [r7], #28
 8003cf0:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8003cf4:	bf98      	it	ls
 8003cf6:	f04f 0900 	movls.w	r9, #0
 8003cfa:	6023      	str	r3, [r4, #0]
 8003cfc:	463d      	mov	r5, r7
 8003cfe:	f04f 0b00 	mov.w	fp, #0
 8003d02:	6831      	ldr	r1, [r6, #0]
 8003d04:	ab03      	add	r3, sp, #12
 8003d06:	7809      	ldrb	r1, [r1, #0]
 8003d08:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8003d0c:	2202      	movs	r2, #2
 8003d0e:	f7fc fa6f 	bl	80001f0 <memchr>
 8003d12:	b328      	cbz	r0, 8003d60 <_scanf_i+0xb8>
 8003d14:	f1bb 0f01 	cmp.w	fp, #1
 8003d18:	d159      	bne.n	8003dce <_scanf_i+0x126>
 8003d1a:	6862      	ldr	r2, [r4, #4]
 8003d1c:	b92a      	cbnz	r2, 8003d2a <_scanf_i+0x82>
 8003d1e:	6822      	ldr	r2, [r4, #0]
 8003d20:	2308      	movs	r3, #8
 8003d22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d26:	6063      	str	r3, [r4, #4]
 8003d28:	6022      	str	r2, [r4, #0]
 8003d2a:	6822      	ldr	r2, [r4, #0]
 8003d2c:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8003d30:	6022      	str	r2, [r4, #0]
 8003d32:	68a2      	ldr	r2, [r4, #8]
 8003d34:	1e51      	subs	r1, r2, #1
 8003d36:	60a1      	str	r1, [r4, #8]
 8003d38:	b192      	cbz	r2, 8003d60 <_scanf_i+0xb8>
 8003d3a:	6832      	ldr	r2, [r6, #0]
 8003d3c:	1c51      	adds	r1, r2, #1
 8003d3e:	6031      	str	r1, [r6, #0]
 8003d40:	7812      	ldrb	r2, [r2, #0]
 8003d42:	f805 2b01 	strb.w	r2, [r5], #1
 8003d46:	6872      	ldr	r2, [r6, #4]
 8003d48:	3a01      	subs	r2, #1
 8003d4a:	2a00      	cmp	r2, #0
 8003d4c:	6072      	str	r2, [r6, #4]
 8003d4e:	dc07      	bgt.n	8003d60 <_scanf_i+0xb8>
 8003d50:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8003d54:	4631      	mov	r1, r6
 8003d56:	4650      	mov	r0, sl
 8003d58:	4790      	blx	r2
 8003d5a:	2800      	cmp	r0, #0
 8003d5c:	f040 8085 	bne.w	8003e6a <_scanf_i+0x1c2>
 8003d60:	f10b 0b01 	add.w	fp, fp, #1
 8003d64:	f1bb 0f03 	cmp.w	fp, #3
 8003d68:	d1cb      	bne.n	8003d02 <_scanf_i+0x5a>
 8003d6a:	6863      	ldr	r3, [r4, #4]
 8003d6c:	b90b      	cbnz	r3, 8003d72 <_scanf_i+0xca>
 8003d6e:	230a      	movs	r3, #10
 8003d70:	6063      	str	r3, [r4, #4]
 8003d72:	6863      	ldr	r3, [r4, #4]
 8003d74:	4947      	ldr	r1, [pc, #284]	; (8003e94 <_scanf_i+0x1ec>)
 8003d76:	6960      	ldr	r0, [r4, #20]
 8003d78:	1ac9      	subs	r1, r1, r3
 8003d7a:	f000 f931 	bl	8003fe0 <__sccl>
 8003d7e:	f04f 0b00 	mov.w	fp, #0
 8003d82:	68a3      	ldr	r3, [r4, #8]
 8003d84:	6822      	ldr	r2, [r4, #0]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d03d      	beq.n	8003e06 <_scanf_i+0x15e>
 8003d8a:	6831      	ldr	r1, [r6, #0]
 8003d8c:	6960      	ldr	r0, [r4, #20]
 8003d8e:	f891 c000 	ldrb.w	ip, [r1]
 8003d92:	f810 000c 	ldrb.w	r0, [r0, ip]
 8003d96:	2800      	cmp	r0, #0
 8003d98:	d035      	beq.n	8003e06 <_scanf_i+0x15e>
 8003d9a:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8003d9e:	d124      	bne.n	8003dea <_scanf_i+0x142>
 8003da0:	0510      	lsls	r0, r2, #20
 8003da2:	d522      	bpl.n	8003dea <_scanf_i+0x142>
 8003da4:	f10b 0b01 	add.w	fp, fp, #1
 8003da8:	f1b9 0f00 	cmp.w	r9, #0
 8003dac:	d003      	beq.n	8003db6 <_scanf_i+0x10e>
 8003dae:	3301      	adds	r3, #1
 8003db0:	f109 39ff 	add.w	r9, r9, #4294967295
 8003db4:	60a3      	str	r3, [r4, #8]
 8003db6:	6873      	ldr	r3, [r6, #4]
 8003db8:	3b01      	subs	r3, #1
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	6073      	str	r3, [r6, #4]
 8003dbe:	dd1b      	ble.n	8003df8 <_scanf_i+0x150>
 8003dc0:	6833      	ldr	r3, [r6, #0]
 8003dc2:	3301      	adds	r3, #1
 8003dc4:	6033      	str	r3, [r6, #0]
 8003dc6:	68a3      	ldr	r3, [r4, #8]
 8003dc8:	3b01      	subs	r3, #1
 8003dca:	60a3      	str	r3, [r4, #8]
 8003dcc:	e7d9      	b.n	8003d82 <_scanf_i+0xda>
 8003dce:	f1bb 0f02 	cmp.w	fp, #2
 8003dd2:	d1ae      	bne.n	8003d32 <_scanf_i+0x8a>
 8003dd4:	6822      	ldr	r2, [r4, #0]
 8003dd6:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8003dda:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8003dde:	d1bf      	bne.n	8003d60 <_scanf_i+0xb8>
 8003de0:	2310      	movs	r3, #16
 8003de2:	6063      	str	r3, [r4, #4]
 8003de4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003de8:	e7a2      	b.n	8003d30 <_scanf_i+0x88>
 8003dea:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8003dee:	6022      	str	r2, [r4, #0]
 8003df0:	780b      	ldrb	r3, [r1, #0]
 8003df2:	f805 3b01 	strb.w	r3, [r5], #1
 8003df6:	e7de      	b.n	8003db6 <_scanf_i+0x10e>
 8003df8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8003dfc:	4631      	mov	r1, r6
 8003dfe:	4650      	mov	r0, sl
 8003e00:	4798      	blx	r3
 8003e02:	2800      	cmp	r0, #0
 8003e04:	d0df      	beq.n	8003dc6 <_scanf_i+0x11e>
 8003e06:	6823      	ldr	r3, [r4, #0]
 8003e08:	05db      	lsls	r3, r3, #23
 8003e0a:	d50d      	bpl.n	8003e28 <_scanf_i+0x180>
 8003e0c:	42bd      	cmp	r5, r7
 8003e0e:	d909      	bls.n	8003e24 <_scanf_i+0x17c>
 8003e10:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8003e14:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003e18:	4632      	mov	r2, r6
 8003e1a:	4650      	mov	r0, sl
 8003e1c:	4798      	blx	r3
 8003e1e:	f105 39ff 	add.w	r9, r5, #4294967295
 8003e22:	464d      	mov	r5, r9
 8003e24:	42bd      	cmp	r5, r7
 8003e26:	d02d      	beq.n	8003e84 <_scanf_i+0x1dc>
 8003e28:	6822      	ldr	r2, [r4, #0]
 8003e2a:	f012 0210 	ands.w	r2, r2, #16
 8003e2e:	d113      	bne.n	8003e58 <_scanf_i+0x1b0>
 8003e30:	702a      	strb	r2, [r5, #0]
 8003e32:	6863      	ldr	r3, [r4, #4]
 8003e34:	9e01      	ldr	r6, [sp, #4]
 8003e36:	4639      	mov	r1, r7
 8003e38:	4650      	mov	r0, sl
 8003e3a:	47b0      	blx	r6
 8003e3c:	6821      	ldr	r1, [r4, #0]
 8003e3e:	f8d8 3000 	ldr.w	r3, [r8]
 8003e42:	f011 0f20 	tst.w	r1, #32
 8003e46:	d013      	beq.n	8003e70 <_scanf_i+0x1c8>
 8003e48:	1d1a      	adds	r2, r3, #4
 8003e4a:	f8c8 2000 	str.w	r2, [r8]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	6018      	str	r0, [r3, #0]
 8003e52:	68e3      	ldr	r3, [r4, #12]
 8003e54:	3301      	adds	r3, #1
 8003e56:	60e3      	str	r3, [r4, #12]
 8003e58:	1bed      	subs	r5, r5, r7
 8003e5a:	44ab      	add	fp, r5
 8003e5c:	6925      	ldr	r5, [r4, #16]
 8003e5e:	445d      	add	r5, fp
 8003e60:	6125      	str	r5, [r4, #16]
 8003e62:	2000      	movs	r0, #0
 8003e64:	b007      	add	sp, #28
 8003e66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e6a:	f04f 0b00 	mov.w	fp, #0
 8003e6e:	e7ca      	b.n	8003e06 <_scanf_i+0x15e>
 8003e70:	1d1a      	adds	r2, r3, #4
 8003e72:	f8c8 2000 	str.w	r2, [r8]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f011 0f01 	tst.w	r1, #1
 8003e7c:	bf14      	ite	ne
 8003e7e:	8018      	strhne	r0, [r3, #0]
 8003e80:	6018      	streq	r0, [r3, #0]
 8003e82:	e7e6      	b.n	8003e52 <_scanf_i+0x1aa>
 8003e84:	2001      	movs	r0, #1
 8003e86:	e7ed      	b.n	8003e64 <_scanf_i+0x1bc>
 8003e88:	08004aa4 	.word	0x08004aa4
 8003e8c:	080042c5 	.word	0x080042c5
 8003e90:	080041dd 	.word	0x080041dd
 8003e94:	08004bb8 	.word	0x08004bb8

08003e98 <lflush>:
 8003e98:	8983      	ldrh	r3, [r0, #12]
 8003e9a:	f003 0309 	and.w	r3, r3, #9
 8003e9e:	2b09      	cmp	r3, #9
 8003ea0:	d101      	bne.n	8003ea6 <lflush+0xe>
 8003ea2:	f000 bc87 	b.w	80047b4 <fflush>
 8003ea6:	2000      	movs	r0, #0
 8003ea8:	4770      	bx	lr
	...

08003eac <__srefill_r>:
 8003eac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003eae:	460c      	mov	r4, r1
 8003eb0:	4605      	mov	r5, r0
 8003eb2:	b118      	cbz	r0, 8003ebc <__srefill_r+0x10>
 8003eb4:	6983      	ldr	r3, [r0, #24]
 8003eb6:	b90b      	cbnz	r3, 8003ebc <__srefill_r+0x10>
 8003eb8:	f7ff f88e 	bl	8002fd8 <__sinit>
 8003ebc:	4b3b      	ldr	r3, [pc, #236]	; (8003fac <__srefill_r+0x100>)
 8003ebe:	429c      	cmp	r4, r3
 8003ec0:	d10a      	bne.n	8003ed8 <__srefill_r+0x2c>
 8003ec2:	686c      	ldr	r4, [r5, #4]
 8003ec4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003ec8:	2300      	movs	r3, #0
 8003eca:	6063      	str	r3, [r4, #4]
 8003ecc:	89a3      	ldrh	r3, [r4, #12]
 8003ece:	069e      	lsls	r6, r3, #26
 8003ed0:	d50c      	bpl.n	8003eec <__srefill_r+0x40>
 8003ed2:	f04f 30ff 	mov.w	r0, #4294967295
 8003ed6:	e066      	b.n	8003fa6 <__srefill_r+0xfa>
 8003ed8:	4b35      	ldr	r3, [pc, #212]	; (8003fb0 <__srefill_r+0x104>)
 8003eda:	429c      	cmp	r4, r3
 8003edc:	d101      	bne.n	8003ee2 <__srefill_r+0x36>
 8003ede:	68ac      	ldr	r4, [r5, #8]
 8003ee0:	e7f0      	b.n	8003ec4 <__srefill_r+0x18>
 8003ee2:	4b34      	ldr	r3, [pc, #208]	; (8003fb4 <__srefill_r+0x108>)
 8003ee4:	429c      	cmp	r4, r3
 8003ee6:	bf08      	it	eq
 8003ee8:	68ec      	ldreq	r4, [r5, #12]
 8003eea:	e7eb      	b.n	8003ec4 <__srefill_r+0x18>
 8003eec:	0758      	lsls	r0, r3, #29
 8003eee:	d448      	bmi.n	8003f82 <__srefill_r+0xd6>
 8003ef0:	06d9      	lsls	r1, r3, #27
 8003ef2:	d405      	bmi.n	8003f00 <__srefill_r+0x54>
 8003ef4:	2309      	movs	r3, #9
 8003ef6:	602b      	str	r3, [r5, #0]
 8003ef8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003efc:	81a3      	strh	r3, [r4, #12]
 8003efe:	e7e8      	b.n	8003ed2 <__srefill_r+0x26>
 8003f00:	071a      	lsls	r2, r3, #28
 8003f02:	d50b      	bpl.n	8003f1c <__srefill_r+0x70>
 8003f04:	4621      	mov	r1, r4
 8003f06:	4628      	mov	r0, r5
 8003f08:	f000 fc18 	bl	800473c <_fflush_r>
 8003f0c:	2800      	cmp	r0, #0
 8003f0e:	d1e0      	bne.n	8003ed2 <__srefill_r+0x26>
 8003f10:	89a3      	ldrh	r3, [r4, #12]
 8003f12:	60a0      	str	r0, [r4, #8]
 8003f14:	f023 0308 	bic.w	r3, r3, #8
 8003f18:	81a3      	strh	r3, [r4, #12]
 8003f1a:	61a0      	str	r0, [r4, #24]
 8003f1c:	89a3      	ldrh	r3, [r4, #12]
 8003f1e:	f043 0304 	orr.w	r3, r3, #4
 8003f22:	81a3      	strh	r3, [r4, #12]
 8003f24:	6923      	ldr	r3, [r4, #16]
 8003f26:	b91b      	cbnz	r3, 8003f30 <__srefill_r+0x84>
 8003f28:	4621      	mov	r1, r4
 8003f2a:	4628      	mov	r0, r5
 8003f2c:	f000 fc8c 	bl	8004848 <__smakebuf_r>
 8003f30:	89a6      	ldrh	r6, [r4, #12]
 8003f32:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 8003f36:	07b3      	lsls	r3, r6, #30
 8003f38:	d00f      	beq.n	8003f5a <__srefill_r+0xae>
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	81a3      	strh	r3, [r4, #12]
 8003f3e:	4b1e      	ldr	r3, [pc, #120]	; (8003fb8 <__srefill_r+0x10c>)
 8003f40:	491e      	ldr	r1, [pc, #120]	; (8003fbc <__srefill_r+0x110>)
 8003f42:	6818      	ldr	r0, [r3, #0]
 8003f44:	f006 0609 	and.w	r6, r6, #9
 8003f48:	f7ff f8c4 	bl	80030d4 <_fwalk>
 8003f4c:	2e09      	cmp	r6, #9
 8003f4e:	81a7      	strh	r7, [r4, #12]
 8003f50:	d103      	bne.n	8003f5a <__srefill_r+0xae>
 8003f52:	4621      	mov	r1, r4
 8003f54:	4628      	mov	r0, r5
 8003f56:	f000 fb6b 	bl	8004630 <__sflush_r>
 8003f5a:	6922      	ldr	r2, [r4, #16]
 8003f5c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8003f5e:	6963      	ldr	r3, [r4, #20]
 8003f60:	6a21      	ldr	r1, [r4, #32]
 8003f62:	6022      	str	r2, [r4, #0]
 8003f64:	4628      	mov	r0, r5
 8003f66:	47b0      	blx	r6
 8003f68:	2800      	cmp	r0, #0
 8003f6a:	6060      	str	r0, [r4, #4]
 8003f6c:	dc1c      	bgt.n	8003fa8 <__srefill_r+0xfc>
 8003f6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003f72:	bf17      	itett	ne
 8003f74:	2200      	movne	r2, #0
 8003f76:	f043 0320 	orreq.w	r3, r3, #32
 8003f7a:	6062      	strne	r2, [r4, #4]
 8003f7c:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 8003f80:	e7bc      	b.n	8003efc <__srefill_r+0x50>
 8003f82:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003f84:	2900      	cmp	r1, #0
 8003f86:	d0cd      	beq.n	8003f24 <__srefill_r+0x78>
 8003f88:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003f8c:	4299      	cmp	r1, r3
 8003f8e:	d002      	beq.n	8003f96 <__srefill_r+0xea>
 8003f90:	4628      	mov	r0, r5
 8003f92:	f000 fcb3 	bl	80048fc <_free_r>
 8003f96:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003f98:	6063      	str	r3, [r4, #4]
 8003f9a:	2000      	movs	r0, #0
 8003f9c:	6360      	str	r0, [r4, #52]	; 0x34
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d0c0      	beq.n	8003f24 <__srefill_r+0x78>
 8003fa2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003fa4:	6023      	str	r3, [r4, #0]
 8003fa6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003fa8:	2000      	movs	r0, #0
 8003faa:	e7fc      	b.n	8003fa6 <__srefill_r+0xfa>
 8003fac:	08004b2c 	.word	0x08004b2c
 8003fb0:	08004b4c 	.word	0x08004b4c
 8003fb4:	08004b0c 	.word	0x08004b0c
 8003fb8:	08004b08 	.word	0x08004b08
 8003fbc:	08003e99 	.word	0x08003e99

08003fc0 <_sbrk_r>:
 8003fc0:	b538      	push	{r3, r4, r5, lr}
 8003fc2:	4d06      	ldr	r5, [pc, #24]	; (8003fdc <_sbrk_r+0x1c>)
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	4604      	mov	r4, r0
 8003fc8:	4608      	mov	r0, r1
 8003fca:	602b      	str	r3, [r5, #0]
 8003fcc:	f7fc ff76 	bl	8000ebc <_sbrk>
 8003fd0:	1c43      	adds	r3, r0, #1
 8003fd2:	d102      	bne.n	8003fda <_sbrk_r+0x1a>
 8003fd4:	682b      	ldr	r3, [r5, #0]
 8003fd6:	b103      	cbz	r3, 8003fda <_sbrk_r+0x1a>
 8003fd8:	6023      	str	r3, [r4, #0]
 8003fda:	bd38      	pop	{r3, r4, r5, pc}
 8003fdc:	20000134 	.word	0x20000134

08003fe0 <__sccl>:
 8003fe0:	b570      	push	{r4, r5, r6, lr}
 8003fe2:	780b      	ldrb	r3, [r1, #0]
 8003fe4:	4604      	mov	r4, r0
 8003fe6:	2b5e      	cmp	r3, #94	; 0x5e
 8003fe8:	bf0b      	itete	eq
 8003fea:	784b      	ldrbeq	r3, [r1, #1]
 8003fec:	1c48      	addne	r0, r1, #1
 8003fee:	1c88      	addeq	r0, r1, #2
 8003ff0:	2200      	movne	r2, #0
 8003ff2:	bf08      	it	eq
 8003ff4:	2201      	moveq	r2, #1
 8003ff6:	1e61      	subs	r1, r4, #1
 8003ff8:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8003ffc:	f801 2f01 	strb.w	r2, [r1, #1]!
 8004000:	42a9      	cmp	r1, r5
 8004002:	d1fb      	bne.n	8003ffc <__sccl+0x1c>
 8004004:	b90b      	cbnz	r3, 800400a <__sccl+0x2a>
 8004006:	3801      	subs	r0, #1
 8004008:	bd70      	pop	{r4, r5, r6, pc}
 800400a:	f082 0201 	eor.w	r2, r2, #1
 800400e:	54e2      	strb	r2, [r4, r3]
 8004010:	4605      	mov	r5, r0
 8004012:	4628      	mov	r0, r5
 8004014:	f810 1b01 	ldrb.w	r1, [r0], #1
 8004018:	292d      	cmp	r1, #45	; 0x2d
 800401a:	d006      	beq.n	800402a <__sccl+0x4a>
 800401c:	295d      	cmp	r1, #93	; 0x5d
 800401e:	d0f3      	beq.n	8004008 <__sccl+0x28>
 8004020:	b909      	cbnz	r1, 8004026 <__sccl+0x46>
 8004022:	4628      	mov	r0, r5
 8004024:	e7f0      	b.n	8004008 <__sccl+0x28>
 8004026:	460b      	mov	r3, r1
 8004028:	e7f1      	b.n	800400e <__sccl+0x2e>
 800402a:	786e      	ldrb	r6, [r5, #1]
 800402c:	2e5d      	cmp	r6, #93	; 0x5d
 800402e:	d0fa      	beq.n	8004026 <__sccl+0x46>
 8004030:	42b3      	cmp	r3, r6
 8004032:	dcf8      	bgt.n	8004026 <__sccl+0x46>
 8004034:	3502      	adds	r5, #2
 8004036:	4619      	mov	r1, r3
 8004038:	3101      	adds	r1, #1
 800403a:	428e      	cmp	r6, r1
 800403c:	5462      	strb	r2, [r4, r1]
 800403e:	dcfb      	bgt.n	8004038 <__sccl+0x58>
 8004040:	1af1      	subs	r1, r6, r3
 8004042:	3901      	subs	r1, #1
 8004044:	1c58      	adds	r0, r3, #1
 8004046:	42b3      	cmp	r3, r6
 8004048:	bfa8      	it	ge
 800404a:	2100      	movge	r1, #0
 800404c:	1843      	adds	r3, r0, r1
 800404e:	e7e0      	b.n	8004012 <__sccl+0x32>

08004050 <__sread>:
 8004050:	b510      	push	{r4, lr}
 8004052:	460c      	mov	r4, r1
 8004054:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004058:	f000 fccc 	bl	80049f4 <_read_r>
 800405c:	2800      	cmp	r0, #0
 800405e:	bfab      	itete	ge
 8004060:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004062:	89a3      	ldrhlt	r3, [r4, #12]
 8004064:	181b      	addge	r3, r3, r0
 8004066:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800406a:	bfac      	ite	ge
 800406c:	6563      	strge	r3, [r4, #84]	; 0x54
 800406e:	81a3      	strhlt	r3, [r4, #12]
 8004070:	bd10      	pop	{r4, pc}

08004072 <__swrite>:
 8004072:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004076:	461f      	mov	r7, r3
 8004078:	898b      	ldrh	r3, [r1, #12]
 800407a:	05db      	lsls	r3, r3, #23
 800407c:	4605      	mov	r5, r0
 800407e:	460c      	mov	r4, r1
 8004080:	4616      	mov	r6, r2
 8004082:	d505      	bpl.n	8004090 <__swrite+0x1e>
 8004084:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004088:	2302      	movs	r3, #2
 800408a:	2200      	movs	r2, #0
 800408c:	f000 fba4 	bl	80047d8 <_lseek_r>
 8004090:	89a3      	ldrh	r3, [r4, #12]
 8004092:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004096:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800409a:	81a3      	strh	r3, [r4, #12]
 800409c:	4632      	mov	r2, r6
 800409e:	463b      	mov	r3, r7
 80040a0:	4628      	mov	r0, r5
 80040a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80040a6:	f000 ba33 	b.w	8004510 <_write_r>

080040aa <__sseek>:
 80040aa:	b510      	push	{r4, lr}
 80040ac:	460c      	mov	r4, r1
 80040ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80040b2:	f000 fb91 	bl	80047d8 <_lseek_r>
 80040b6:	1c43      	adds	r3, r0, #1
 80040b8:	89a3      	ldrh	r3, [r4, #12]
 80040ba:	bf15      	itete	ne
 80040bc:	6560      	strne	r0, [r4, #84]	; 0x54
 80040be:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80040c2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80040c6:	81a3      	strheq	r3, [r4, #12]
 80040c8:	bf18      	it	ne
 80040ca:	81a3      	strhne	r3, [r4, #12]
 80040cc:	bd10      	pop	{r4, pc}

080040ce <__sclose>:
 80040ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80040d2:	f000 ba9d 	b.w	8004610 <_close_r>
	...

080040d8 <_strtol_l.constprop.0>:
 80040d8:	2b01      	cmp	r3, #1
 80040da:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80040de:	d001      	beq.n	80040e4 <_strtol_l.constprop.0+0xc>
 80040e0:	2b24      	cmp	r3, #36	; 0x24
 80040e2:	d906      	bls.n	80040f2 <_strtol_l.constprop.0+0x1a>
 80040e4:	f7fe febe 	bl	8002e64 <__errno>
 80040e8:	2316      	movs	r3, #22
 80040ea:	6003      	str	r3, [r0, #0]
 80040ec:	2000      	movs	r0, #0
 80040ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80040f2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80041d8 <_strtol_l.constprop.0+0x100>
 80040f6:	460d      	mov	r5, r1
 80040f8:	462e      	mov	r6, r5
 80040fa:	f815 4b01 	ldrb.w	r4, [r5], #1
 80040fe:	f814 700c 	ldrb.w	r7, [r4, ip]
 8004102:	f017 0708 	ands.w	r7, r7, #8
 8004106:	d1f7      	bne.n	80040f8 <_strtol_l.constprop.0+0x20>
 8004108:	2c2d      	cmp	r4, #45	; 0x2d
 800410a:	d132      	bne.n	8004172 <_strtol_l.constprop.0+0x9a>
 800410c:	782c      	ldrb	r4, [r5, #0]
 800410e:	2701      	movs	r7, #1
 8004110:	1cb5      	adds	r5, r6, #2
 8004112:	2b00      	cmp	r3, #0
 8004114:	d05b      	beq.n	80041ce <_strtol_l.constprop.0+0xf6>
 8004116:	2b10      	cmp	r3, #16
 8004118:	d109      	bne.n	800412e <_strtol_l.constprop.0+0x56>
 800411a:	2c30      	cmp	r4, #48	; 0x30
 800411c:	d107      	bne.n	800412e <_strtol_l.constprop.0+0x56>
 800411e:	782c      	ldrb	r4, [r5, #0]
 8004120:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8004124:	2c58      	cmp	r4, #88	; 0x58
 8004126:	d14d      	bne.n	80041c4 <_strtol_l.constprop.0+0xec>
 8004128:	786c      	ldrb	r4, [r5, #1]
 800412a:	2310      	movs	r3, #16
 800412c:	3502      	adds	r5, #2
 800412e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8004132:	f108 38ff 	add.w	r8, r8, #4294967295
 8004136:	f04f 0c00 	mov.w	ip, #0
 800413a:	fbb8 f9f3 	udiv	r9, r8, r3
 800413e:	4666      	mov	r6, ip
 8004140:	fb03 8a19 	mls	sl, r3, r9, r8
 8004144:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8004148:	f1be 0f09 	cmp.w	lr, #9
 800414c:	d816      	bhi.n	800417c <_strtol_l.constprop.0+0xa4>
 800414e:	4674      	mov	r4, lr
 8004150:	42a3      	cmp	r3, r4
 8004152:	dd24      	ble.n	800419e <_strtol_l.constprop.0+0xc6>
 8004154:	f1bc 0f00 	cmp.w	ip, #0
 8004158:	db1e      	blt.n	8004198 <_strtol_l.constprop.0+0xc0>
 800415a:	45b1      	cmp	r9, r6
 800415c:	d31c      	bcc.n	8004198 <_strtol_l.constprop.0+0xc0>
 800415e:	d101      	bne.n	8004164 <_strtol_l.constprop.0+0x8c>
 8004160:	45a2      	cmp	sl, r4
 8004162:	db19      	blt.n	8004198 <_strtol_l.constprop.0+0xc0>
 8004164:	fb06 4603 	mla	r6, r6, r3, r4
 8004168:	f04f 0c01 	mov.w	ip, #1
 800416c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004170:	e7e8      	b.n	8004144 <_strtol_l.constprop.0+0x6c>
 8004172:	2c2b      	cmp	r4, #43	; 0x2b
 8004174:	bf04      	itt	eq
 8004176:	782c      	ldrbeq	r4, [r5, #0]
 8004178:	1cb5      	addeq	r5, r6, #2
 800417a:	e7ca      	b.n	8004112 <_strtol_l.constprop.0+0x3a>
 800417c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8004180:	f1be 0f19 	cmp.w	lr, #25
 8004184:	d801      	bhi.n	800418a <_strtol_l.constprop.0+0xb2>
 8004186:	3c37      	subs	r4, #55	; 0x37
 8004188:	e7e2      	b.n	8004150 <_strtol_l.constprop.0+0x78>
 800418a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800418e:	f1be 0f19 	cmp.w	lr, #25
 8004192:	d804      	bhi.n	800419e <_strtol_l.constprop.0+0xc6>
 8004194:	3c57      	subs	r4, #87	; 0x57
 8004196:	e7db      	b.n	8004150 <_strtol_l.constprop.0+0x78>
 8004198:	f04f 3cff 	mov.w	ip, #4294967295
 800419c:	e7e6      	b.n	800416c <_strtol_l.constprop.0+0x94>
 800419e:	f1bc 0f00 	cmp.w	ip, #0
 80041a2:	da05      	bge.n	80041b0 <_strtol_l.constprop.0+0xd8>
 80041a4:	2322      	movs	r3, #34	; 0x22
 80041a6:	6003      	str	r3, [r0, #0]
 80041a8:	4646      	mov	r6, r8
 80041aa:	b942      	cbnz	r2, 80041be <_strtol_l.constprop.0+0xe6>
 80041ac:	4630      	mov	r0, r6
 80041ae:	e79e      	b.n	80040ee <_strtol_l.constprop.0+0x16>
 80041b0:	b107      	cbz	r7, 80041b4 <_strtol_l.constprop.0+0xdc>
 80041b2:	4276      	negs	r6, r6
 80041b4:	2a00      	cmp	r2, #0
 80041b6:	d0f9      	beq.n	80041ac <_strtol_l.constprop.0+0xd4>
 80041b8:	f1bc 0f00 	cmp.w	ip, #0
 80041bc:	d000      	beq.n	80041c0 <_strtol_l.constprop.0+0xe8>
 80041be:	1e69      	subs	r1, r5, #1
 80041c0:	6011      	str	r1, [r2, #0]
 80041c2:	e7f3      	b.n	80041ac <_strtol_l.constprop.0+0xd4>
 80041c4:	2430      	movs	r4, #48	; 0x30
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d1b1      	bne.n	800412e <_strtol_l.constprop.0+0x56>
 80041ca:	2308      	movs	r3, #8
 80041cc:	e7af      	b.n	800412e <_strtol_l.constprop.0+0x56>
 80041ce:	2c30      	cmp	r4, #48	; 0x30
 80041d0:	d0a5      	beq.n	800411e <_strtol_l.constprop.0+0x46>
 80041d2:	230a      	movs	r3, #10
 80041d4:	e7ab      	b.n	800412e <_strtol_l.constprop.0+0x56>
 80041d6:	bf00      	nop
 80041d8:	08004bbb 	.word	0x08004bbb

080041dc <_strtol_r>:
 80041dc:	f7ff bf7c 	b.w	80040d8 <_strtol_l.constprop.0>

080041e0 <_strtoul_l.constprop.0>:
 80041e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80041e4:	4f36      	ldr	r7, [pc, #216]	; (80042c0 <_strtoul_l.constprop.0+0xe0>)
 80041e6:	4686      	mov	lr, r0
 80041e8:	460d      	mov	r5, r1
 80041ea:	4628      	mov	r0, r5
 80041ec:	f815 4b01 	ldrb.w	r4, [r5], #1
 80041f0:	5de6      	ldrb	r6, [r4, r7]
 80041f2:	f016 0608 	ands.w	r6, r6, #8
 80041f6:	d1f8      	bne.n	80041ea <_strtoul_l.constprop.0+0xa>
 80041f8:	2c2d      	cmp	r4, #45	; 0x2d
 80041fa:	d12f      	bne.n	800425c <_strtoul_l.constprop.0+0x7c>
 80041fc:	782c      	ldrb	r4, [r5, #0]
 80041fe:	2601      	movs	r6, #1
 8004200:	1c85      	adds	r5, r0, #2
 8004202:	2b00      	cmp	r3, #0
 8004204:	d057      	beq.n	80042b6 <_strtoul_l.constprop.0+0xd6>
 8004206:	2b10      	cmp	r3, #16
 8004208:	d109      	bne.n	800421e <_strtoul_l.constprop.0+0x3e>
 800420a:	2c30      	cmp	r4, #48	; 0x30
 800420c:	d107      	bne.n	800421e <_strtoul_l.constprop.0+0x3e>
 800420e:	7828      	ldrb	r0, [r5, #0]
 8004210:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8004214:	2858      	cmp	r0, #88	; 0x58
 8004216:	d149      	bne.n	80042ac <_strtoul_l.constprop.0+0xcc>
 8004218:	786c      	ldrb	r4, [r5, #1]
 800421a:	2310      	movs	r3, #16
 800421c:	3502      	adds	r5, #2
 800421e:	f04f 38ff 	mov.w	r8, #4294967295
 8004222:	2700      	movs	r7, #0
 8004224:	fbb8 f8f3 	udiv	r8, r8, r3
 8004228:	fb03 f908 	mul.w	r9, r3, r8
 800422c:	ea6f 0909 	mvn.w	r9, r9
 8004230:	4638      	mov	r0, r7
 8004232:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8004236:	f1bc 0f09 	cmp.w	ip, #9
 800423a:	d814      	bhi.n	8004266 <_strtoul_l.constprop.0+0x86>
 800423c:	4664      	mov	r4, ip
 800423e:	42a3      	cmp	r3, r4
 8004240:	dd22      	ble.n	8004288 <_strtoul_l.constprop.0+0xa8>
 8004242:	2f00      	cmp	r7, #0
 8004244:	db1d      	blt.n	8004282 <_strtoul_l.constprop.0+0xa2>
 8004246:	4580      	cmp	r8, r0
 8004248:	d31b      	bcc.n	8004282 <_strtoul_l.constprop.0+0xa2>
 800424a:	d101      	bne.n	8004250 <_strtoul_l.constprop.0+0x70>
 800424c:	45a1      	cmp	r9, r4
 800424e:	db18      	blt.n	8004282 <_strtoul_l.constprop.0+0xa2>
 8004250:	fb00 4003 	mla	r0, r0, r3, r4
 8004254:	2701      	movs	r7, #1
 8004256:	f815 4b01 	ldrb.w	r4, [r5], #1
 800425a:	e7ea      	b.n	8004232 <_strtoul_l.constprop.0+0x52>
 800425c:	2c2b      	cmp	r4, #43	; 0x2b
 800425e:	bf04      	itt	eq
 8004260:	782c      	ldrbeq	r4, [r5, #0]
 8004262:	1c85      	addeq	r5, r0, #2
 8004264:	e7cd      	b.n	8004202 <_strtoul_l.constprop.0+0x22>
 8004266:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800426a:	f1bc 0f19 	cmp.w	ip, #25
 800426e:	d801      	bhi.n	8004274 <_strtoul_l.constprop.0+0x94>
 8004270:	3c37      	subs	r4, #55	; 0x37
 8004272:	e7e4      	b.n	800423e <_strtoul_l.constprop.0+0x5e>
 8004274:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8004278:	f1bc 0f19 	cmp.w	ip, #25
 800427c:	d804      	bhi.n	8004288 <_strtoul_l.constprop.0+0xa8>
 800427e:	3c57      	subs	r4, #87	; 0x57
 8004280:	e7dd      	b.n	800423e <_strtoul_l.constprop.0+0x5e>
 8004282:	f04f 37ff 	mov.w	r7, #4294967295
 8004286:	e7e6      	b.n	8004256 <_strtoul_l.constprop.0+0x76>
 8004288:	2f00      	cmp	r7, #0
 800428a:	da07      	bge.n	800429c <_strtoul_l.constprop.0+0xbc>
 800428c:	2322      	movs	r3, #34	; 0x22
 800428e:	f8ce 3000 	str.w	r3, [lr]
 8004292:	f04f 30ff 	mov.w	r0, #4294967295
 8004296:	b932      	cbnz	r2, 80042a6 <_strtoul_l.constprop.0+0xc6>
 8004298:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800429c:	b106      	cbz	r6, 80042a0 <_strtoul_l.constprop.0+0xc0>
 800429e:	4240      	negs	r0, r0
 80042a0:	2a00      	cmp	r2, #0
 80042a2:	d0f9      	beq.n	8004298 <_strtoul_l.constprop.0+0xb8>
 80042a4:	b107      	cbz	r7, 80042a8 <_strtoul_l.constprop.0+0xc8>
 80042a6:	1e69      	subs	r1, r5, #1
 80042a8:	6011      	str	r1, [r2, #0]
 80042aa:	e7f5      	b.n	8004298 <_strtoul_l.constprop.0+0xb8>
 80042ac:	2430      	movs	r4, #48	; 0x30
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d1b5      	bne.n	800421e <_strtoul_l.constprop.0+0x3e>
 80042b2:	2308      	movs	r3, #8
 80042b4:	e7b3      	b.n	800421e <_strtoul_l.constprop.0+0x3e>
 80042b6:	2c30      	cmp	r4, #48	; 0x30
 80042b8:	d0a9      	beq.n	800420e <_strtoul_l.constprop.0+0x2e>
 80042ba:	230a      	movs	r3, #10
 80042bc:	e7af      	b.n	800421e <_strtoul_l.constprop.0+0x3e>
 80042be:	bf00      	nop
 80042c0:	08004bbb 	.word	0x08004bbb

080042c4 <_strtoul_r>:
 80042c4:	f7ff bf8c 	b.w	80041e0 <_strtoul_l.constprop.0>

080042c8 <__submore>:
 80042c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80042cc:	460c      	mov	r4, r1
 80042ce:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80042d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80042d4:	4299      	cmp	r1, r3
 80042d6:	d11d      	bne.n	8004314 <__submore+0x4c>
 80042d8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80042dc:	f7fe ff5a 	bl	8003194 <_malloc_r>
 80042e0:	b918      	cbnz	r0, 80042ea <__submore+0x22>
 80042e2:	f04f 30ff 	mov.w	r0, #4294967295
 80042e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80042ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80042ee:	63a3      	str	r3, [r4, #56]	; 0x38
 80042f0:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80042f4:	6360      	str	r0, [r4, #52]	; 0x34
 80042f6:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 80042fa:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80042fe:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8004302:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8004306:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800430a:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800430e:	6020      	str	r0, [r4, #0]
 8004310:	2000      	movs	r0, #0
 8004312:	e7e8      	b.n	80042e6 <__submore+0x1e>
 8004314:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8004316:	0077      	lsls	r7, r6, #1
 8004318:	463a      	mov	r2, r7
 800431a:	f000 fb3b 	bl	8004994 <_realloc_r>
 800431e:	4605      	mov	r5, r0
 8004320:	2800      	cmp	r0, #0
 8004322:	d0de      	beq.n	80042e2 <__submore+0x1a>
 8004324:	eb00 0806 	add.w	r8, r0, r6
 8004328:	4601      	mov	r1, r0
 800432a:	4632      	mov	r2, r6
 800432c:	4640      	mov	r0, r8
 800432e:	f000 facb 	bl	80048c8 <memcpy>
 8004332:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8004336:	f8c4 8000 	str.w	r8, [r4]
 800433a:	e7e9      	b.n	8004310 <__submore+0x48>

0800433c <_ungetc_r>:
 800433c:	b570      	push	{r4, r5, r6, lr}
 800433e:	4614      	mov	r4, r2
 8004340:	1c4a      	adds	r2, r1, #1
 8004342:	4606      	mov	r6, r0
 8004344:	460d      	mov	r5, r1
 8004346:	d103      	bne.n	8004350 <_ungetc_r+0x14>
 8004348:	f04f 35ff 	mov.w	r5, #4294967295
 800434c:	4628      	mov	r0, r5
 800434e:	bd70      	pop	{r4, r5, r6, pc}
 8004350:	b118      	cbz	r0, 800435a <_ungetc_r+0x1e>
 8004352:	6983      	ldr	r3, [r0, #24]
 8004354:	b90b      	cbnz	r3, 800435a <_ungetc_r+0x1e>
 8004356:	f7fe fe3f 	bl	8002fd8 <__sinit>
 800435a:	4b41      	ldr	r3, [pc, #260]	; (8004460 <_ungetc_r+0x124>)
 800435c:	429c      	cmp	r4, r3
 800435e:	d11d      	bne.n	800439c <_ungetc_r+0x60>
 8004360:	6874      	ldr	r4, [r6, #4]
 8004362:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004364:	07db      	lsls	r3, r3, #31
 8004366:	d405      	bmi.n	8004374 <_ungetc_r+0x38>
 8004368:	89a3      	ldrh	r3, [r4, #12]
 800436a:	0598      	lsls	r0, r3, #22
 800436c:	d402      	bmi.n	8004374 <_ungetc_r+0x38>
 800436e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004370:	f7fe feed 	bl	800314e <__retarget_lock_acquire_recursive>
 8004374:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004378:	f023 0320 	bic.w	r3, r3, #32
 800437c:	0759      	lsls	r1, r3, #29
 800437e:	81a3      	strh	r3, [r4, #12]
 8004380:	b29a      	uxth	r2, r3
 8004382:	d42d      	bmi.n	80043e0 <_ungetc_r+0xa4>
 8004384:	06d3      	lsls	r3, r2, #27
 8004386:	d413      	bmi.n	80043b0 <_ungetc_r+0x74>
 8004388:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800438a:	07dd      	lsls	r5, r3, #31
 800438c:	d4dc      	bmi.n	8004348 <_ungetc_r+0xc>
 800438e:	f412 7f00 	tst.w	r2, #512	; 0x200
 8004392:	d1d9      	bne.n	8004348 <_ungetc_r+0xc>
 8004394:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004396:	f7fe fedb 	bl	8003150 <__retarget_lock_release_recursive>
 800439a:	e7d5      	b.n	8004348 <_ungetc_r+0xc>
 800439c:	4b31      	ldr	r3, [pc, #196]	; (8004464 <_ungetc_r+0x128>)
 800439e:	429c      	cmp	r4, r3
 80043a0:	d101      	bne.n	80043a6 <_ungetc_r+0x6a>
 80043a2:	68b4      	ldr	r4, [r6, #8]
 80043a4:	e7dd      	b.n	8004362 <_ungetc_r+0x26>
 80043a6:	4b30      	ldr	r3, [pc, #192]	; (8004468 <_ungetc_r+0x12c>)
 80043a8:	429c      	cmp	r4, r3
 80043aa:	bf08      	it	eq
 80043ac:	68f4      	ldreq	r4, [r6, #12]
 80043ae:	e7d8      	b.n	8004362 <_ungetc_r+0x26>
 80043b0:	0710      	lsls	r0, r2, #28
 80043b2:	d511      	bpl.n	80043d8 <_ungetc_r+0x9c>
 80043b4:	4621      	mov	r1, r4
 80043b6:	4630      	mov	r0, r6
 80043b8:	f000 f9c0 	bl	800473c <_fflush_r>
 80043bc:	b130      	cbz	r0, 80043cc <_ungetc_r+0x90>
 80043be:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80043c0:	07d9      	lsls	r1, r3, #31
 80043c2:	d4c1      	bmi.n	8004348 <_ungetc_r+0xc>
 80043c4:	89a3      	ldrh	r3, [r4, #12]
 80043c6:	f413 7f00 	tst.w	r3, #512	; 0x200
 80043ca:	e7e2      	b.n	8004392 <_ungetc_r+0x56>
 80043cc:	89a3      	ldrh	r3, [r4, #12]
 80043ce:	60a0      	str	r0, [r4, #8]
 80043d0:	f023 0308 	bic.w	r3, r3, #8
 80043d4:	81a3      	strh	r3, [r4, #12]
 80043d6:	61a0      	str	r0, [r4, #24]
 80043d8:	89a3      	ldrh	r3, [r4, #12]
 80043da:	f043 0304 	orr.w	r3, r3, #4
 80043de:	81a3      	strh	r3, [r4, #12]
 80043e0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80043e2:	6862      	ldr	r2, [r4, #4]
 80043e4:	b2ed      	uxtb	r5, r5
 80043e6:	b1d3      	cbz	r3, 800441e <_ungetc_r+0xe2>
 80043e8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80043ea:	4293      	cmp	r3, r2
 80043ec:	dc05      	bgt.n	80043fa <_ungetc_r+0xbe>
 80043ee:	4621      	mov	r1, r4
 80043f0:	4630      	mov	r0, r6
 80043f2:	f7ff ff69 	bl	80042c8 <__submore>
 80043f6:	2800      	cmp	r0, #0
 80043f8:	d1e1      	bne.n	80043be <_ungetc_r+0x82>
 80043fa:	6823      	ldr	r3, [r4, #0]
 80043fc:	1e5a      	subs	r2, r3, #1
 80043fe:	6022      	str	r2, [r4, #0]
 8004400:	f803 5c01 	strb.w	r5, [r3, #-1]
 8004404:	6863      	ldr	r3, [r4, #4]
 8004406:	3301      	adds	r3, #1
 8004408:	6063      	str	r3, [r4, #4]
 800440a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800440c:	07da      	lsls	r2, r3, #31
 800440e:	d49d      	bmi.n	800434c <_ungetc_r+0x10>
 8004410:	89a3      	ldrh	r3, [r4, #12]
 8004412:	059b      	lsls	r3, r3, #22
 8004414:	d49a      	bmi.n	800434c <_ungetc_r+0x10>
 8004416:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004418:	f7fe fe9a 	bl	8003150 <__retarget_lock_release_recursive>
 800441c:	e796      	b.n	800434c <_ungetc_r+0x10>
 800441e:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8004420:	6920      	ldr	r0, [r4, #16]
 8004422:	6823      	ldr	r3, [r4, #0]
 8004424:	f001 0101 	and.w	r1, r1, #1
 8004428:	b160      	cbz	r0, 8004444 <_ungetc_r+0x108>
 800442a:	4298      	cmp	r0, r3
 800442c:	d20a      	bcs.n	8004444 <_ungetc_r+0x108>
 800442e:	f813 0c01 	ldrb.w	r0, [r3, #-1]
 8004432:	42a8      	cmp	r0, r5
 8004434:	d106      	bne.n	8004444 <_ungetc_r+0x108>
 8004436:	3b01      	subs	r3, #1
 8004438:	3201      	adds	r2, #1
 800443a:	6023      	str	r3, [r4, #0]
 800443c:	6062      	str	r2, [r4, #4]
 800443e:	2900      	cmp	r1, #0
 8004440:	d184      	bne.n	800434c <_ungetc_r+0x10>
 8004442:	e7e5      	b.n	8004410 <_ungetc_r+0xd4>
 8004444:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8004448:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800444c:	6363      	str	r3, [r4, #52]	; 0x34
 800444e:	2303      	movs	r3, #3
 8004450:	63a3      	str	r3, [r4, #56]	; 0x38
 8004452:	4623      	mov	r3, r4
 8004454:	f803 5f46 	strb.w	r5, [r3, #70]!
 8004458:	6023      	str	r3, [r4, #0]
 800445a:	2301      	movs	r3, #1
 800445c:	6063      	str	r3, [r4, #4]
 800445e:	e7ee      	b.n	800443e <_ungetc_r+0x102>
 8004460:	08004b2c 	.word	0x08004b2c
 8004464:	08004b4c 	.word	0x08004b4c
 8004468:	08004b0c 	.word	0x08004b0c

0800446c <__swbuf_r>:
 800446c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800446e:	460e      	mov	r6, r1
 8004470:	4614      	mov	r4, r2
 8004472:	4605      	mov	r5, r0
 8004474:	b118      	cbz	r0, 800447e <__swbuf_r+0x12>
 8004476:	6983      	ldr	r3, [r0, #24]
 8004478:	b90b      	cbnz	r3, 800447e <__swbuf_r+0x12>
 800447a:	f7fe fdad 	bl	8002fd8 <__sinit>
 800447e:	4b21      	ldr	r3, [pc, #132]	; (8004504 <__swbuf_r+0x98>)
 8004480:	429c      	cmp	r4, r3
 8004482:	d12b      	bne.n	80044dc <__swbuf_r+0x70>
 8004484:	686c      	ldr	r4, [r5, #4]
 8004486:	69a3      	ldr	r3, [r4, #24]
 8004488:	60a3      	str	r3, [r4, #8]
 800448a:	89a3      	ldrh	r3, [r4, #12]
 800448c:	071a      	lsls	r2, r3, #28
 800448e:	d52f      	bpl.n	80044f0 <__swbuf_r+0x84>
 8004490:	6923      	ldr	r3, [r4, #16]
 8004492:	b36b      	cbz	r3, 80044f0 <__swbuf_r+0x84>
 8004494:	6923      	ldr	r3, [r4, #16]
 8004496:	6820      	ldr	r0, [r4, #0]
 8004498:	1ac0      	subs	r0, r0, r3
 800449a:	6963      	ldr	r3, [r4, #20]
 800449c:	b2f6      	uxtb	r6, r6
 800449e:	4283      	cmp	r3, r0
 80044a0:	4637      	mov	r7, r6
 80044a2:	dc04      	bgt.n	80044ae <__swbuf_r+0x42>
 80044a4:	4621      	mov	r1, r4
 80044a6:	4628      	mov	r0, r5
 80044a8:	f000 f948 	bl	800473c <_fflush_r>
 80044ac:	bb30      	cbnz	r0, 80044fc <__swbuf_r+0x90>
 80044ae:	68a3      	ldr	r3, [r4, #8]
 80044b0:	3b01      	subs	r3, #1
 80044b2:	60a3      	str	r3, [r4, #8]
 80044b4:	6823      	ldr	r3, [r4, #0]
 80044b6:	1c5a      	adds	r2, r3, #1
 80044b8:	6022      	str	r2, [r4, #0]
 80044ba:	701e      	strb	r6, [r3, #0]
 80044bc:	6963      	ldr	r3, [r4, #20]
 80044be:	3001      	adds	r0, #1
 80044c0:	4283      	cmp	r3, r0
 80044c2:	d004      	beq.n	80044ce <__swbuf_r+0x62>
 80044c4:	89a3      	ldrh	r3, [r4, #12]
 80044c6:	07db      	lsls	r3, r3, #31
 80044c8:	d506      	bpl.n	80044d8 <__swbuf_r+0x6c>
 80044ca:	2e0a      	cmp	r6, #10
 80044cc:	d104      	bne.n	80044d8 <__swbuf_r+0x6c>
 80044ce:	4621      	mov	r1, r4
 80044d0:	4628      	mov	r0, r5
 80044d2:	f000 f933 	bl	800473c <_fflush_r>
 80044d6:	b988      	cbnz	r0, 80044fc <__swbuf_r+0x90>
 80044d8:	4638      	mov	r0, r7
 80044da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80044dc:	4b0a      	ldr	r3, [pc, #40]	; (8004508 <__swbuf_r+0x9c>)
 80044de:	429c      	cmp	r4, r3
 80044e0:	d101      	bne.n	80044e6 <__swbuf_r+0x7a>
 80044e2:	68ac      	ldr	r4, [r5, #8]
 80044e4:	e7cf      	b.n	8004486 <__swbuf_r+0x1a>
 80044e6:	4b09      	ldr	r3, [pc, #36]	; (800450c <__swbuf_r+0xa0>)
 80044e8:	429c      	cmp	r4, r3
 80044ea:	bf08      	it	eq
 80044ec:	68ec      	ldreq	r4, [r5, #12]
 80044ee:	e7ca      	b.n	8004486 <__swbuf_r+0x1a>
 80044f0:	4621      	mov	r1, r4
 80044f2:	4628      	mov	r0, r5
 80044f4:	f000 f81e 	bl	8004534 <__swsetup_r>
 80044f8:	2800      	cmp	r0, #0
 80044fa:	d0cb      	beq.n	8004494 <__swbuf_r+0x28>
 80044fc:	f04f 37ff 	mov.w	r7, #4294967295
 8004500:	e7ea      	b.n	80044d8 <__swbuf_r+0x6c>
 8004502:	bf00      	nop
 8004504:	08004b2c 	.word	0x08004b2c
 8004508:	08004b4c 	.word	0x08004b4c
 800450c:	08004b0c 	.word	0x08004b0c

08004510 <_write_r>:
 8004510:	b538      	push	{r3, r4, r5, lr}
 8004512:	4d07      	ldr	r5, [pc, #28]	; (8004530 <_write_r+0x20>)
 8004514:	4604      	mov	r4, r0
 8004516:	4608      	mov	r0, r1
 8004518:	4611      	mov	r1, r2
 800451a:	2200      	movs	r2, #0
 800451c:	602a      	str	r2, [r5, #0]
 800451e:	461a      	mov	r2, r3
 8004520:	f7fc fc7b 	bl	8000e1a <_write>
 8004524:	1c43      	adds	r3, r0, #1
 8004526:	d102      	bne.n	800452e <_write_r+0x1e>
 8004528:	682b      	ldr	r3, [r5, #0]
 800452a:	b103      	cbz	r3, 800452e <_write_r+0x1e>
 800452c:	6023      	str	r3, [r4, #0]
 800452e:	bd38      	pop	{r3, r4, r5, pc}
 8004530:	20000134 	.word	0x20000134

08004534 <__swsetup_r>:
 8004534:	4b32      	ldr	r3, [pc, #200]	; (8004600 <__swsetup_r+0xcc>)
 8004536:	b570      	push	{r4, r5, r6, lr}
 8004538:	681d      	ldr	r5, [r3, #0]
 800453a:	4606      	mov	r6, r0
 800453c:	460c      	mov	r4, r1
 800453e:	b125      	cbz	r5, 800454a <__swsetup_r+0x16>
 8004540:	69ab      	ldr	r3, [r5, #24]
 8004542:	b913      	cbnz	r3, 800454a <__swsetup_r+0x16>
 8004544:	4628      	mov	r0, r5
 8004546:	f7fe fd47 	bl	8002fd8 <__sinit>
 800454a:	4b2e      	ldr	r3, [pc, #184]	; (8004604 <__swsetup_r+0xd0>)
 800454c:	429c      	cmp	r4, r3
 800454e:	d10f      	bne.n	8004570 <__swsetup_r+0x3c>
 8004550:	686c      	ldr	r4, [r5, #4]
 8004552:	89a3      	ldrh	r3, [r4, #12]
 8004554:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004558:	0719      	lsls	r1, r3, #28
 800455a:	d42c      	bmi.n	80045b6 <__swsetup_r+0x82>
 800455c:	06dd      	lsls	r5, r3, #27
 800455e:	d411      	bmi.n	8004584 <__swsetup_r+0x50>
 8004560:	2309      	movs	r3, #9
 8004562:	6033      	str	r3, [r6, #0]
 8004564:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004568:	81a3      	strh	r3, [r4, #12]
 800456a:	f04f 30ff 	mov.w	r0, #4294967295
 800456e:	e03e      	b.n	80045ee <__swsetup_r+0xba>
 8004570:	4b25      	ldr	r3, [pc, #148]	; (8004608 <__swsetup_r+0xd4>)
 8004572:	429c      	cmp	r4, r3
 8004574:	d101      	bne.n	800457a <__swsetup_r+0x46>
 8004576:	68ac      	ldr	r4, [r5, #8]
 8004578:	e7eb      	b.n	8004552 <__swsetup_r+0x1e>
 800457a:	4b24      	ldr	r3, [pc, #144]	; (800460c <__swsetup_r+0xd8>)
 800457c:	429c      	cmp	r4, r3
 800457e:	bf08      	it	eq
 8004580:	68ec      	ldreq	r4, [r5, #12]
 8004582:	e7e6      	b.n	8004552 <__swsetup_r+0x1e>
 8004584:	0758      	lsls	r0, r3, #29
 8004586:	d512      	bpl.n	80045ae <__swsetup_r+0x7a>
 8004588:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800458a:	b141      	cbz	r1, 800459e <__swsetup_r+0x6a>
 800458c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004590:	4299      	cmp	r1, r3
 8004592:	d002      	beq.n	800459a <__swsetup_r+0x66>
 8004594:	4630      	mov	r0, r6
 8004596:	f000 f9b1 	bl	80048fc <_free_r>
 800459a:	2300      	movs	r3, #0
 800459c:	6363      	str	r3, [r4, #52]	; 0x34
 800459e:	89a3      	ldrh	r3, [r4, #12]
 80045a0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80045a4:	81a3      	strh	r3, [r4, #12]
 80045a6:	2300      	movs	r3, #0
 80045a8:	6063      	str	r3, [r4, #4]
 80045aa:	6923      	ldr	r3, [r4, #16]
 80045ac:	6023      	str	r3, [r4, #0]
 80045ae:	89a3      	ldrh	r3, [r4, #12]
 80045b0:	f043 0308 	orr.w	r3, r3, #8
 80045b4:	81a3      	strh	r3, [r4, #12]
 80045b6:	6923      	ldr	r3, [r4, #16]
 80045b8:	b94b      	cbnz	r3, 80045ce <__swsetup_r+0x9a>
 80045ba:	89a3      	ldrh	r3, [r4, #12]
 80045bc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80045c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80045c4:	d003      	beq.n	80045ce <__swsetup_r+0x9a>
 80045c6:	4621      	mov	r1, r4
 80045c8:	4630      	mov	r0, r6
 80045ca:	f000 f93d 	bl	8004848 <__smakebuf_r>
 80045ce:	89a0      	ldrh	r0, [r4, #12]
 80045d0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80045d4:	f010 0301 	ands.w	r3, r0, #1
 80045d8:	d00a      	beq.n	80045f0 <__swsetup_r+0xbc>
 80045da:	2300      	movs	r3, #0
 80045dc:	60a3      	str	r3, [r4, #8]
 80045de:	6963      	ldr	r3, [r4, #20]
 80045e0:	425b      	negs	r3, r3
 80045e2:	61a3      	str	r3, [r4, #24]
 80045e4:	6923      	ldr	r3, [r4, #16]
 80045e6:	b943      	cbnz	r3, 80045fa <__swsetup_r+0xc6>
 80045e8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80045ec:	d1ba      	bne.n	8004564 <__swsetup_r+0x30>
 80045ee:	bd70      	pop	{r4, r5, r6, pc}
 80045f0:	0781      	lsls	r1, r0, #30
 80045f2:	bf58      	it	pl
 80045f4:	6963      	ldrpl	r3, [r4, #20]
 80045f6:	60a3      	str	r3, [r4, #8]
 80045f8:	e7f4      	b.n	80045e4 <__swsetup_r+0xb0>
 80045fa:	2000      	movs	r0, #0
 80045fc:	e7f7      	b.n	80045ee <__swsetup_r+0xba>
 80045fe:	bf00      	nop
 8004600:	20000010 	.word	0x20000010
 8004604:	08004b2c 	.word	0x08004b2c
 8004608:	08004b4c 	.word	0x08004b4c
 800460c:	08004b0c 	.word	0x08004b0c

08004610 <_close_r>:
 8004610:	b538      	push	{r3, r4, r5, lr}
 8004612:	4d06      	ldr	r5, [pc, #24]	; (800462c <_close_r+0x1c>)
 8004614:	2300      	movs	r3, #0
 8004616:	4604      	mov	r4, r0
 8004618:	4608      	mov	r0, r1
 800461a:	602b      	str	r3, [r5, #0]
 800461c:	f7fc fc19 	bl	8000e52 <_close>
 8004620:	1c43      	adds	r3, r0, #1
 8004622:	d102      	bne.n	800462a <_close_r+0x1a>
 8004624:	682b      	ldr	r3, [r5, #0]
 8004626:	b103      	cbz	r3, 800462a <_close_r+0x1a>
 8004628:	6023      	str	r3, [r4, #0]
 800462a:	bd38      	pop	{r3, r4, r5, pc}
 800462c:	20000134 	.word	0x20000134

08004630 <__sflush_r>:
 8004630:	898a      	ldrh	r2, [r1, #12]
 8004632:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004636:	4605      	mov	r5, r0
 8004638:	0710      	lsls	r0, r2, #28
 800463a:	460c      	mov	r4, r1
 800463c:	d458      	bmi.n	80046f0 <__sflush_r+0xc0>
 800463e:	684b      	ldr	r3, [r1, #4]
 8004640:	2b00      	cmp	r3, #0
 8004642:	dc05      	bgt.n	8004650 <__sflush_r+0x20>
 8004644:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004646:	2b00      	cmp	r3, #0
 8004648:	dc02      	bgt.n	8004650 <__sflush_r+0x20>
 800464a:	2000      	movs	r0, #0
 800464c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004650:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004652:	2e00      	cmp	r6, #0
 8004654:	d0f9      	beq.n	800464a <__sflush_r+0x1a>
 8004656:	2300      	movs	r3, #0
 8004658:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800465c:	682f      	ldr	r7, [r5, #0]
 800465e:	602b      	str	r3, [r5, #0]
 8004660:	d032      	beq.n	80046c8 <__sflush_r+0x98>
 8004662:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004664:	89a3      	ldrh	r3, [r4, #12]
 8004666:	075a      	lsls	r2, r3, #29
 8004668:	d505      	bpl.n	8004676 <__sflush_r+0x46>
 800466a:	6863      	ldr	r3, [r4, #4]
 800466c:	1ac0      	subs	r0, r0, r3
 800466e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004670:	b10b      	cbz	r3, 8004676 <__sflush_r+0x46>
 8004672:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004674:	1ac0      	subs	r0, r0, r3
 8004676:	2300      	movs	r3, #0
 8004678:	4602      	mov	r2, r0
 800467a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800467c:	6a21      	ldr	r1, [r4, #32]
 800467e:	4628      	mov	r0, r5
 8004680:	47b0      	blx	r6
 8004682:	1c43      	adds	r3, r0, #1
 8004684:	89a3      	ldrh	r3, [r4, #12]
 8004686:	d106      	bne.n	8004696 <__sflush_r+0x66>
 8004688:	6829      	ldr	r1, [r5, #0]
 800468a:	291d      	cmp	r1, #29
 800468c:	d82c      	bhi.n	80046e8 <__sflush_r+0xb8>
 800468e:	4a2a      	ldr	r2, [pc, #168]	; (8004738 <__sflush_r+0x108>)
 8004690:	40ca      	lsrs	r2, r1
 8004692:	07d6      	lsls	r6, r2, #31
 8004694:	d528      	bpl.n	80046e8 <__sflush_r+0xb8>
 8004696:	2200      	movs	r2, #0
 8004698:	6062      	str	r2, [r4, #4]
 800469a:	04d9      	lsls	r1, r3, #19
 800469c:	6922      	ldr	r2, [r4, #16]
 800469e:	6022      	str	r2, [r4, #0]
 80046a0:	d504      	bpl.n	80046ac <__sflush_r+0x7c>
 80046a2:	1c42      	adds	r2, r0, #1
 80046a4:	d101      	bne.n	80046aa <__sflush_r+0x7a>
 80046a6:	682b      	ldr	r3, [r5, #0]
 80046a8:	b903      	cbnz	r3, 80046ac <__sflush_r+0x7c>
 80046aa:	6560      	str	r0, [r4, #84]	; 0x54
 80046ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80046ae:	602f      	str	r7, [r5, #0]
 80046b0:	2900      	cmp	r1, #0
 80046b2:	d0ca      	beq.n	800464a <__sflush_r+0x1a>
 80046b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80046b8:	4299      	cmp	r1, r3
 80046ba:	d002      	beq.n	80046c2 <__sflush_r+0x92>
 80046bc:	4628      	mov	r0, r5
 80046be:	f000 f91d 	bl	80048fc <_free_r>
 80046c2:	2000      	movs	r0, #0
 80046c4:	6360      	str	r0, [r4, #52]	; 0x34
 80046c6:	e7c1      	b.n	800464c <__sflush_r+0x1c>
 80046c8:	6a21      	ldr	r1, [r4, #32]
 80046ca:	2301      	movs	r3, #1
 80046cc:	4628      	mov	r0, r5
 80046ce:	47b0      	blx	r6
 80046d0:	1c41      	adds	r1, r0, #1
 80046d2:	d1c7      	bne.n	8004664 <__sflush_r+0x34>
 80046d4:	682b      	ldr	r3, [r5, #0]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d0c4      	beq.n	8004664 <__sflush_r+0x34>
 80046da:	2b1d      	cmp	r3, #29
 80046dc:	d001      	beq.n	80046e2 <__sflush_r+0xb2>
 80046de:	2b16      	cmp	r3, #22
 80046e0:	d101      	bne.n	80046e6 <__sflush_r+0xb6>
 80046e2:	602f      	str	r7, [r5, #0]
 80046e4:	e7b1      	b.n	800464a <__sflush_r+0x1a>
 80046e6:	89a3      	ldrh	r3, [r4, #12]
 80046e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80046ec:	81a3      	strh	r3, [r4, #12]
 80046ee:	e7ad      	b.n	800464c <__sflush_r+0x1c>
 80046f0:	690f      	ldr	r7, [r1, #16]
 80046f2:	2f00      	cmp	r7, #0
 80046f4:	d0a9      	beq.n	800464a <__sflush_r+0x1a>
 80046f6:	0793      	lsls	r3, r2, #30
 80046f8:	680e      	ldr	r6, [r1, #0]
 80046fa:	bf08      	it	eq
 80046fc:	694b      	ldreq	r3, [r1, #20]
 80046fe:	600f      	str	r7, [r1, #0]
 8004700:	bf18      	it	ne
 8004702:	2300      	movne	r3, #0
 8004704:	eba6 0807 	sub.w	r8, r6, r7
 8004708:	608b      	str	r3, [r1, #8]
 800470a:	f1b8 0f00 	cmp.w	r8, #0
 800470e:	dd9c      	ble.n	800464a <__sflush_r+0x1a>
 8004710:	6a21      	ldr	r1, [r4, #32]
 8004712:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004714:	4643      	mov	r3, r8
 8004716:	463a      	mov	r2, r7
 8004718:	4628      	mov	r0, r5
 800471a:	47b0      	blx	r6
 800471c:	2800      	cmp	r0, #0
 800471e:	dc06      	bgt.n	800472e <__sflush_r+0xfe>
 8004720:	89a3      	ldrh	r3, [r4, #12]
 8004722:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004726:	81a3      	strh	r3, [r4, #12]
 8004728:	f04f 30ff 	mov.w	r0, #4294967295
 800472c:	e78e      	b.n	800464c <__sflush_r+0x1c>
 800472e:	4407      	add	r7, r0
 8004730:	eba8 0800 	sub.w	r8, r8, r0
 8004734:	e7e9      	b.n	800470a <__sflush_r+0xda>
 8004736:	bf00      	nop
 8004738:	20400001 	.word	0x20400001

0800473c <_fflush_r>:
 800473c:	b538      	push	{r3, r4, r5, lr}
 800473e:	690b      	ldr	r3, [r1, #16]
 8004740:	4605      	mov	r5, r0
 8004742:	460c      	mov	r4, r1
 8004744:	b913      	cbnz	r3, 800474c <_fflush_r+0x10>
 8004746:	2500      	movs	r5, #0
 8004748:	4628      	mov	r0, r5
 800474a:	bd38      	pop	{r3, r4, r5, pc}
 800474c:	b118      	cbz	r0, 8004756 <_fflush_r+0x1a>
 800474e:	6983      	ldr	r3, [r0, #24]
 8004750:	b90b      	cbnz	r3, 8004756 <_fflush_r+0x1a>
 8004752:	f7fe fc41 	bl	8002fd8 <__sinit>
 8004756:	4b14      	ldr	r3, [pc, #80]	; (80047a8 <_fflush_r+0x6c>)
 8004758:	429c      	cmp	r4, r3
 800475a:	d11b      	bne.n	8004794 <_fflush_r+0x58>
 800475c:	686c      	ldr	r4, [r5, #4]
 800475e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d0ef      	beq.n	8004746 <_fflush_r+0xa>
 8004766:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004768:	07d0      	lsls	r0, r2, #31
 800476a:	d404      	bmi.n	8004776 <_fflush_r+0x3a>
 800476c:	0599      	lsls	r1, r3, #22
 800476e:	d402      	bmi.n	8004776 <_fflush_r+0x3a>
 8004770:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004772:	f7fe fcec 	bl	800314e <__retarget_lock_acquire_recursive>
 8004776:	4628      	mov	r0, r5
 8004778:	4621      	mov	r1, r4
 800477a:	f7ff ff59 	bl	8004630 <__sflush_r>
 800477e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004780:	07da      	lsls	r2, r3, #31
 8004782:	4605      	mov	r5, r0
 8004784:	d4e0      	bmi.n	8004748 <_fflush_r+0xc>
 8004786:	89a3      	ldrh	r3, [r4, #12]
 8004788:	059b      	lsls	r3, r3, #22
 800478a:	d4dd      	bmi.n	8004748 <_fflush_r+0xc>
 800478c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800478e:	f7fe fcdf 	bl	8003150 <__retarget_lock_release_recursive>
 8004792:	e7d9      	b.n	8004748 <_fflush_r+0xc>
 8004794:	4b05      	ldr	r3, [pc, #20]	; (80047ac <_fflush_r+0x70>)
 8004796:	429c      	cmp	r4, r3
 8004798:	d101      	bne.n	800479e <_fflush_r+0x62>
 800479a:	68ac      	ldr	r4, [r5, #8]
 800479c:	e7df      	b.n	800475e <_fflush_r+0x22>
 800479e:	4b04      	ldr	r3, [pc, #16]	; (80047b0 <_fflush_r+0x74>)
 80047a0:	429c      	cmp	r4, r3
 80047a2:	bf08      	it	eq
 80047a4:	68ec      	ldreq	r4, [r5, #12]
 80047a6:	e7da      	b.n	800475e <_fflush_r+0x22>
 80047a8:	08004b2c 	.word	0x08004b2c
 80047ac:	08004b4c 	.word	0x08004b4c
 80047b0:	08004b0c 	.word	0x08004b0c

080047b4 <fflush>:
 80047b4:	4601      	mov	r1, r0
 80047b6:	b920      	cbnz	r0, 80047c2 <fflush+0xe>
 80047b8:	4b04      	ldr	r3, [pc, #16]	; (80047cc <fflush+0x18>)
 80047ba:	4905      	ldr	r1, [pc, #20]	; (80047d0 <fflush+0x1c>)
 80047bc:	6818      	ldr	r0, [r3, #0]
 80047be:	f7fe bca6 	b.w	800310e <_fwalk_reent>
 80047c2:	4b04      	ldr	r3, [pc, #16]	; (80047d4 <fflush+0x20>)
 80047c4:	6818      	ldr	r0, [r3, #0]
 80047c6:	f7ff bfb9 	b.w	800473c <_fflush_r>
 80047ca:	bf00      	nop
 80047cc:	08004b08 	.word	0x08004b08
 80047d0:	0800473d 	.word	0x0800473d
 80047d4:	20000010 	.word	0x20000010

080047d8 <_lseek_r>:
 80047d8:	b538      	push	{r3, r4, r5, lr}
 80047da:	4d07      	ldr	r5, [pc, #28]	; (80047f8 <_lseek_r+0x20>)
 80047dc:	4604      	mov	r4, r0
 80047de:	4608      	mov	r0, r1
 80047e0:	4611      	mov	r1, r2
 80047e2:	2200      	movs	r2, #0
 80047e4:	602a      	str	r2, [r5, #0]
 80047e6:	461a      	mov	r2, r3
 80047e8:	f7fc fb5a 	bl	8000ea0 <_lseek>
 80047ec:	1c43      	adds	r3, r0, #1
 80047ee:	d102      	bne.n	80047f6 <_lseek_r+0x1e>
 80047f0:	682b      	ldr	r3, [r5, #0]
 80047f2:	b103      	cbz	r3, 80047f6 <_lseek_r+0x1e>
 80047f4:	6023      	str	r3, [r4, #0]
 80047f6:	bd38      	pop	{r3, r4, r5, pc}
 80047f8:	20000134 	.word	0x20000134

080047fc <__swhatbuf_r>:
 80047fc:	b570      	push	{r4, r5, r6, lr}
 80047fe:	460e      	mov	r6, r1
 8004800:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004804:	2900      	cmp	r1, #0
 8004806:	b096      	sub	sp, #88	; 0x58
 8004808:	4614      	mov	r4, r2
 800480a:	461d      	mov	r5, r3
 800480c:	da08      	bge.n	8004820 <__swhatbuf_r+0x24>
 800480e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004812:	2200      	movs	r2, #0
 8004814:	602a      	str	r2, [r5, #0]
 8004816:	061a      	lsls	r2, r3, #24
 8004818:	d410      	bmi.n	800483c <__swhatbuf_r+0x40>
 800481a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800481e:	e00e      	b.n	800483e <__swhatbuf_r+0x42>
 8004820:	466a      	mov	r2, sp
 8004822:	f000 f8f9 	bl	8004a18 <_fstat_r>
 8004826:	2800      	cmp	r0, #0
 8004828:	dbf1      	blt.n	800480e <__swhatbuf_r+0x12>
 800482a:	9a01      	ldr	r2, [sp, #4]
 800482c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004830:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004834:	425a      	negs	r2, r3
 8004836:	415a      	adcs	r2, r3
 8004838:	602a      	str	r2, [r5, #0]
 800483a:	e7ee      	b.n	800481a <__swhatbuf_r+0x1e>
 800483c:	2340      	movs	r3, #64	; 0x40
 800483e:	2000      	movs	r0, #0
 8004840:	6023      	str	r3, [r4, #0]
 8004842:	b016      	add	sp, #88	; 0x58
 8004844:	bd70      	pop	{r4, r5, r6, pc}
	...

08004848 <__smakebuf_r>:
 8004848:	898b      	ldrh	r3, [r1, #12]
 800484a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800484c:	079d      	lsls	r5, r3, #30
 800484e:	4606      	mov	r6, r0
 8004850:	460c      	mov	r4, r1
 8004852:	d507      	bpl.n	8004864 <__smakebuf_r+0x1c>
 8004854:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004858:	6023      	str	r3, [r4, #0]
 800485a:	6123      	str	r3, [r4, #16]
 800485c:	2301      	movs	r3, #1
 800485e:	6163      	str	r3, [r4, #20]
 8004860:	b002      	add	sp, #8
 8004862:	bd70      	pop	{r4, r5, r6, pc}
 8004864:	ab01      	add	r3, sp, #4
 8004866:	466a      	mov	r2, sp
 8004868:	f7ff ffc8 	bl	80047fc <__swhatbuf_r>
 800486c:	9900      	ldr	r1, [sp, #0]
 800486e:	4605      	mov	r5, r0
 8004870:	4630      	mov	r0, r6
 8004872:	f7fe fc8f 	bl	8003194 <_malloc_r>
 8004876:	b948      	cbnz	r0, 800488c <__smakebuf_r+0x44>
 8004878:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800487c:	059a      	lsls	r2, r3, #22
 800487e:	d4ef      	bmi.n	8004860 <__smakebuf_r+0x18>
 8004880:	f023 0303 	bic.w	r3, r3, #3
 8004884:	f043 0302 	orr.w	r3, r3, #2
 8004888:	81a3      	strh	r3, [r4, #12]
 800488a:	e7e3      	b.n	8004854 <__smakebuf_r+0xc>
 800488c:	4b0d      	ldr	r3, [pc, #52]	; (80048c4 <__smakebuf_r+0x7c>)
 800488e:	62b3      	str	r3, [r6, #40]	; 0x28
 8004890:	89a3      	ldrh	r3, [r4, #12]
 8004892:	6020      	str	r0, [r4, #0]
 8004894:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004898:	81a3      	strh	r3, [r4, #12]
 800489a:	9b00      	ldr	r3, [sp, #0]
 800489c:	6163      	str	r3, [r4, #20]
 800489e:	9b01      	ldr	r3, [sp, #4]
 80048a0:	6120      	str	r0, [r4, #16]
 80048a2:	b15b      	cbz	r3, 80048bc <__smakebuf_r+0x74>
 80048a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80048a8:	4630      	mov	r0, r6
 80048aa:	f000 f8c7 	bl	8004a3c <_isatty_r>
 80048ae:	b128      	cbz	r0, 80048bc <__smakebuf_r+0x74>
 80048b0:	89a3      	ldrh	r3, [r4, #12]
 80048b2:	f023 0303 	bic.w	r3, r3, #3
 80048b6:	f043 0301 	orr.w	r3, r3, #1
 80048ba:	81a3      	strh	r3, [r4, #12]
 80048bc:	89a0      	ldrh	r0, [r4, #12]
 80048be:	4305      	orrs	r5, r0
 80048c0:	81a5      	strh	r5, [r4, #12]
 80048c2:	e7cd      	b.n	8004860 <__smakebuf_r+0x18>
 80048c4:	08002f71 	.word	0x08002f71

080048c8 <memcpy>:
 80048c8:	440a      	add	r2, r1
 80048ca:	4291      	cmp	r1, r2
 80048cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80048d0:	d100      	bne.n	80048d4 <memcpy+0xc>
 80048d2:	4770      	bx	lr
 80048d4:	b510      	push	{r4, lr}
 80048d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80048da:	f803 4f01 	strb.w	r4, [r3, #1]!
 80048de:	4291      	cmp	r1, r2
 80048e0:	d1f9      	bne.n	80048d6 <memcpy+0xe>
 80048e2:	bd10      	pop	{r4, pc}

080048e4 <__malloc_lock>:
 80048e4:	4801      	ldr	r0, [pc, #4]	; (80048ec <__malloc_lock+0x8>)
 80048e6:	f7fe bc32 	b.w	800314e <__retarget_lock_acquire_recursive>
 80048ea:	bf00      	nop
 80048ec:	20000128 	.word	0x20000128

080048f0 <__malloc_unlock>:
 80048f0:	4801      	ldr	r0, [pc, #4]	; (80048f8 <__malloc_unlock+0x8>)
 80048f2:	f7fe bc2d 	b.w	8003150 <__retarget_lock_release_recursive>
 80048f6:	bf00      	nop
 80048f8:	20000128 	.word	0x20000128

080048fc <_free_r>:
 80048fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80048fe:	2900      	cmp	r1, #0
 8004900:	d044      	beq.n	800498c <_free_r+0x90>
 8004902:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004906:	9001      	str	r0, [sp, #4]
 8004908:	2b00      	cmp	r3, #0
 800490a:	f1a1 0404 	sub.w	r4, r1, #4
 800490e:	bfb8      	it	lt
 8004910:	18e4      	addlt	r4, r4, r3
 8004912:	f7ff ffe7 	bl	80048e4 <__malloc_lock>
 8004916:	4a1e      	ldr	r2, [pc, #120]	; (8004990 <_free_r+0x94>)
 8004918:	9801      	ldr	r0, [sp, #4]
 800491a:	6813      	ldr	r3, [r2, #0]
 800491c:	b933      	cbnz	r3, 800492c <_free_r+0x30>
 800491e:	6063      	str	r3, [r4, #4]
 8004920:	6014      	str	r4, [r2, #0]
 8004922:	b003      	add	sp, #12
 8004924:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004928:	f7ff bfe2 	b.w	80048f0 <__malloc_unlock>
 800492c:	42a3      	cmp	r3, r4
 800492e:	d908      	bls.n	8004942 <_free_r+0x46>
 8004930:	6825      	ldr	r5, [r4, #0]
 8004932:	1961      	adds	r1, r4, r5
 8004934:	428b      	cmp	r3, r1
 8004936:	bf01      	itttt	eq
 8004938:	6819      	ldreq	r1, [r3, #0]
 800493a:	685b      	ldreq	r3, [r3, #4]
 800493c:	1949      	addeq	r1, r1, r5
 800493e:	6021      	streq	r1, [r4, #0]
 8004940:	e7ed      	b.n	800491e <_free_r+0x22>
 8004942:	461a      	mov	r2, r3
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	b10b      	cbz	r3, 800494c <_free_r+0x50>
 8004948:	42a3      	cmp	r3, r4
 800494a:	d9fa      	bls.n	8004942 <_free_r+0x46>
 800494c:	6811      	ldr	r1, [r2, #0]
 800494e:	1855      	adds	r5, r2, r1
 8004950:	42a5      	cmp	r5, r4
 8004952:	d10b      	bne.n	800496c <_free_r+0x70>
 8004954:	6824      	ldr	r4, [r4, #0]
 8004956:	4421      	add	r1, r4
 8004958:	1854      	adds	r4, r2, r1
 800495a:	42a3      	cmp	r3, r4
 800495c:	6011      	str	r1, [r2, #0]
 800495e:	d1e0      	bne.n	8004922 <_free_r+0x26>
 8004960:	681c      	ldr	r4, [r3, #0]
 8004962:	685b      	ldr	r3, [r3, #4]
 8004964:	6053      	str	r3, [r2, #4]
 8004966:	4421      	add	r1, r4
 8004968:	6011      	str	r1, [r2, #0]
 800496a:	e7da      	b.n	8004922 <_free_r+0x26>
 800496c:	d902      	bls.n	8004974 <_free_r+0x78>
 800496e:	230c      	movs	r3, #12
 8004970:	6003      	str	r3, [r0, #0]
 8004972:	e7d6      	b.n	8004922 <_free_r+0x26>
 8004974:	6825      	ldr	r5, [r4, #0]
 8004976:	1961      	adds	r1, r4, r5
 8004978:	428b      	cmp	r3, r1
 800497a:	bf04      	itt	eq
 800497c:	6819      	ldreq	r1, [r3, #0]
 800497e:	685b      	ldreq	r3, [r3, #4]
 8004980:	6063      	str	r3, [r4, #4]
 8004982:	bf04      	itt	eq
 8004984:	1949      	addeq	r1, r1, r5
 8004986:	6021      	streq	r1, [r4, #0]
 8004988:	6054      	str	r4, [r2, #4]
 800498a:	e7ca      	b.n	8004922 <_free_r+0x26>
 800498c:	b003      	add	sp, #12
 800498e:	bd30      	pop	{r4, r5, pc}
 8004990:	2000012c 	.word	0x2000012c

08004994 <_realloc_r>:
 8004994:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004998:	4680      	mov	r8, r0
 800499a:	4614      	mov	r4, r2
 800499c:	460e      	mov	r6, r1
 800499e:	b921      	cbnz	r1, 80049aa <_realloc_r+0x16>
 80049a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80049a4:	4611      	mov	r1, r2
 80049a6:	f7fe bbf5 	b.w	8003194 <_malloc_r>
 80049aa:	b92a      	cbnz	r2, 80049b8 <_realloc_r+0x24>
 80049ac:	f7ff ffa6 	bl	80048fc <_free_r>
 80049b0:	4625      	mov	r5, r4
 80049b2:	4628      	mov	r0, r5
 80049b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80049b8:	f000 f850 	bl	8004a5c <_malloc_usable_size_r>
 80049bc:	4284      	cmp	r4, r0
 80049be:	4607      	mov	r7, r0
 80049c0:	d802      	bhi.n	80049c8 <_realloc_r+0x34>
 80049c2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80049c6:	d812      	bhi.n	80049ee <_realloc_r+0x5a>
 80049c8:	4621      	mov	r1, r4
 80049ca:	4640      	mov	r0, r8
 80049cc:	f7fe fbe2 	bl	8003194 <_malloc_r>
 80049d0:	4605      	mov	r5, r0
 80049d2:	2800      	cmp	r0, #0
 80049d4:	d0ed      	beq.n	80049b2 <_realloc_r+0x1e>
 80049d6:	42bc      	cmp	r4, r7
 80049d8:	4622      	mov	r2, r4
 80049da:	4631      	mov	r1, r6
 80049dc:	bf28      	it	cs
 80049de:	463a      	movcs	r2, r7
 80049e0:	f7ff ff72 	bl	80048c8 <memcpy>
 80049e4:	4631      	mov	r1, r6
 80049e6:	4640      	mov	r0, r8
 80049e8:	f7ff ff88 	bl	80048fc <_free_r>
 80049ec:	e7e1      	b.n	80049b2 <_realloc_r+0x1e>
 80049ee:	4635      	mov	r5, r6
 80049f0:	e7df      	b.n	80049b2 <_realloc_r+0x1e>
	...

080049f4 <_read_r>:
 80049f4:	b538      	push	{r3, r4, r5, lr}
 80049f6:	4d07      	ldr	r5, [pc, #28]	; (8004a14 <_read_r+0x20>)
 80049f8:	4604      	mov	r4, r0
 80049fa:	4608      	mov	r0, r1
 80049fc:	4611      	mov	r1, r2
 80049fe:	2200      	movs	r2, #0
 8004a00:	602a      	str	r2, [r5, #0]
 8004a02:	461a      	mov	r2, r3
 8004a04:	f7fc f9ec 	bl	8000de0 <_read>
 8004a08:	1c43      	adds	r3, r0, #1
 8004a0a:	d102      	bne.n	8004a12 <_read_r+0x1e>
 8004a0c:	682b      	ldr	r3, [r5, #0]
 8004a0e:	b103      	cbz	r3, 8004a12 <_read_r+0x1e>
 8004a10:	6023      	str	r3, [r4, #0]
 8004a12:	bd38      	pop	{r3, r4, r5, pc}
 8004a14:	20000134 	.word	0x20000134

08004a18 <_fstat_r>:
 8004a18:	b538      	push	{r3, r4, r5, lr}
 8004a1a:	4d07      	ldr	r5, [pc, #28]	; (8004a38 <_fstat_r+0x20>)
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	4604      	mov	r4, r0
 8004a20:	4608      	mov	r0, r1
 8004a22:	4611      	mov	r1, r2
 8004a24:	602b      	str	r3, [r5, #0]
 8004a26:	f7fc fa20 	bl	8000e6a <_fstat>
 8004a2a:	1c43      	adds	r3, r0, #1
 8004a2c:	d102      	bne.n	8004a34 <_fstat_r+0x1c>
 8004a2e:	682b      	ldr	r3, [r5, #0]
 8004a30:	b103      	cbz	r3, 8004a34 <_fstat_r+0x1c>
 8004a32:	6023      	str	r3, [r4, #0]
 8004a34:	bd38      	pop	{r3, r4, r5, pc}
 8004a36:	bf00      	nop
 8004a38:	20000134 	.word	0x20000134

08004a3c <_isatty_r>:
 8004a3c:	b538      	push	{r3, r4, r5, lr}
 8004a3e:	4d06      	ldr	r5, [pc, #24]	; (8004a58 <_isatty_r+0x1c>)
 8004a40:	2300      	movs	r3, #0
 8004a42:	4604      	mov	r4, r0
 8004a44:	4608      	mov	r0, r1
 8004a46:	602b      	str	r3, [r5, #0]
 8004a48:	f7fc fa1f 	bl	8000e8a <_isatty>
 8004a4c:	1c43      	adds	r3, r0, #1
 8004a4e:	d102      	bne.n	8004a56 <_isatty_r+0x1a>
 8004a50:	682b      	ldr	r3, [r5, #0]
 8004a52:	b103      	cbz	r3, 8004a56 <_isatty_r+0x1a>
 8004a54:	6023      	str	r3, [r4, #0]
 8004a56:	bd38      	pop	{r3, r4, r5, pc}
 8004a58:	20000134 	.word	0x20000134

08004a5c <_malloc_usable_size_r>:
 8004a5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004a60:	1f18      	subs	r0, r3, #4
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	bfbc      	itt	lt
 8004a66:	580b      	ldrlt	r3, [r1, r0]
 8004a68:	18c0      	addlt	r0, r0, r3
 8004a6a:	4770      	bx	lr

08004a6c <_init>:
 8004a6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a6e:	bf00      	nop
 8004a70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a72:	bc08      	pop	{r3}
 8004a74:	469e      	mov	lr, r3
 8004a76:	4770      	bx	lr

08004a78 <_fini>:
 8004a78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a7a:	bf00      	nop
 8004a7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a7e:	bc08      	pop	{r3}
 8004a80:	469e      	mov	lr, r3
 8004a82:	4770      	bx	lr
