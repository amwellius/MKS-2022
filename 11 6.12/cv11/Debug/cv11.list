
cv11.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000868c  080001b0  080001b0  000101b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000230  08008840  08008840  00018840  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008a70  08008a70  0002011c  2**0
                  CONTENTS
  4 .ARM          00000008  08008a70  08008a70  00018a70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008a78  08008a78  0002011c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008a78  08008a78  00018a78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008a7c  08008a7c  00018a7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000011c  20000000  08008a80  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002011c  2**0
                  CONTENTS
 10 .bss          00000a28  2000011c  2000011c  0002011c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000b44  20000b44  0002011c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002011c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d3f0  00000000  00000000  0002014c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000267f  00000000  00000000  0002d53c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000af0  00000000  00000000  0002fbc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000009c8  00000000  00000000  000306b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025309  00000000  00000000  00031078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e2cd  00000000  00000000  00056381  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d37fb  00000000  00000000  0006464e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00137e49  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002fa8  00000000  00000000  00137e9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000011c 	.word	0x2000011c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08008824 	.word	0x08008824

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000120 	.word	0x20000120
 80001ec:	08008824 	.word	0x08008824

080001f0 <__aeabi_drsub>:
 80001f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001f4:	e002      	b.n	80001fc <__adddf3>
 80001f6:	bf00      	nop

080001f8 <__aeabi_dsub>:
 80001f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001fc <__adddf3>:
 80001fc:	b530      	push	{r4, r5, lr}
 80001fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000202:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000206:	ea94 0f05 	teq	r4, r5
 800020a:	bf08      	it	eq
 800020c:	ea90 0f02 	teqeq	r0, r2
 8000210:	bf1f      	itttt	ne
 8000212:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000216:	ea55 0c02 	orrsne.w	ip, r5, r2
 800021a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000222:	f000 80e2 	beq.w	80003ea <__adddf3+0x1ee>
 8000226:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800022a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022e:	bfb8      	it	lt
 8000230:	426d      	neglt	r5, r5
 8000232:	dd0c      	ble.n	800024e <__adddf3+0x52>
 8000234:	442c      	add	r4, r5
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	ea82 0000 	eor.w	r0, r2, r0
 8000242:	ea83 0101 	eor.w	r1, r3, r1
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	2d36      	cmp	r5, #54	; 0x36
 8000250:	bf88      	it	hi
 8000252:	bd30      	pophi	{r4, r5, pc}
 8000254:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000258:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800025c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000260:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000264:	d002      	beq.n	800026c <__adddf3+0x70>
 8000266:	4240      	negs	r0, r0
 8000268:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800026c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000270:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000274:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000278:	d002      	beq.n	8000280 <__adddf3+0x84>
 800027a:	4252      	negs	r2, r2
 800027c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000280:	ea94 0f05 	teq	r4, r5
 8000284:	f000 80a7 	beq.w	80003d6 <__adddf3+0x1da>
 8000288:	f1a4 0401 	sub.w	r4, r4, #1
 800028c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000290:	db0d      	blt.n	80002ae <__adddf3+0xb2>
 8000292:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000296:	fa22 f205 	lsr.w	r2, r2, r5
 800029a:	1880      	adds	r0, r0, r2
 800029c:	f141 0100 	adc.w	r1, r1, #0
 80002a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a4:	1880      	adds	r0, r0, r2
 80002a6:	fa43 f305 	asr.w	r3, r3, r5
 80002aa:	4159      	adcs	r1, r3
 80002ac:	e00e      	b.n	80002cc <__adddf3+0xd0>
 80002ae:	f1a5 0520 	sub.w	r5, r5, #32
 80002b2:	f10e 0e20 	add.w	lr, lr, #32
 80002b6:	2a01      	cmp	r2, #1
 80002b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002bc:	bf28      	it	cs
 80002be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002c2:	fa43 f305 	asr.w	r3, r3, r5
 80002c6:	18c0      	adds	r0, r0, r3
 80002c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002d0:	d507      	bpl.n	80002e2 <__adddf3+0xe6>
 80002d2:	f04f 0e00 	mov.w	lr, #0
 80002d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002de:	eb6e 0101 	sbc.w	r1, lr, r1
 80002e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002e6:	d31b      	bcc.n	8000320 <__adddf3+0x124>
 80002e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002ec:	d30c      	bcc.n	8000308 <__adddf3+0x10c>
 80002ee:	0849      	lsrs	r1, r1, #1
 80002f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f8:	f104 0401 	add.w	r4, r4, #1
 80002fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000300:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000304:	f080 809a 	bcs.w	800043c <__adddf3+0x240>
 8000308:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800030c:	bf08      	it	eq
 800030e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000312:	f150 0000 	adcs.w	r0, r0, #0
 8000316:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800031a:	ea41 0105 	orr.w	r1, r1, r5
 800031e:	bd30      	pop	{r4, r5, pc}
 8000320:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000324:	4140      	adcs	r0, r0
 8000326:	eb41 0101 	adc.w	r1, r1, r1
 800032a:	3c01      	subs	r4, #1
 800032c:	bf28      	it	cs
 800032e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000332:	d2e9      	bcs.n	8000308 <__adddf3+0x10c>
 8000334:	f091 0f00 	teq	r1, #0
 8000338:	bf04      	itt	eq
 800033a:	4601      	moveq	r1, r0
 800033c:	2000      	moveq	r0, #0
 800033e:	fab1 f381 	clz	r3, r1
 8000342:	bf08      	it	eq
 8000344:	3320      	addeq	r3, #32
 8000346:	f1a3 030b 	sub.w	r3, r3, #11
 800034a:	f1b3 0220 	subs.w	r2, r3, #32
 800034e:	da0c      	bge.n	800036a <__adddf3+0x16e>
 8000350:	320c      	adds	r2, #12
 8000352:	dd08      	ble.n	8000366 <__adddf3+0x16a>
 8000354:	f102 0c14 	add.w	ip, r2, #20
 8000358:	f1c2 020c 	rsb	r2, r2, #12
 800035c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000360:	fa21 f102 	lsr.w	r1, r1, r2
 8000364:	e00c      	b.n	8000380 <__adddf3+0x184>
 8000366:	f102 0214 	add.w	r2, r2, #20
 800036a:	bfd8      	it	le
 800036c:	f1c2 0c20 	rsble	ip, r2, #32
 8000370:	fa01 f102 	lsl.w	r1, r1, r2
 8000374:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000378:	bfdc      	itt	le
 800037a:	ea41 010c 	orrle.w	r1, r1, ip
 800037e:	4090      	lslle	r0, r2
 8000380:	1ae4      	subs	r4, r4, r3
 8000382:	bfa2      	ittt	ge
 8000384:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000388:	4329      	orrge	r1, r5
 800038a:	bd30      	popge	{r4, r5, pc}
 800038c:	ea6f 0404 	mvn.w	r4, r4
 8000390:	3c1f      	subs	r4, #31
 8000392:	da1c      	bge.n	80003ce <__adddf3+0x1d2>
 8000394:	340c      	adds	r4, #12
 8000396:	dc0e      	bgt.n	80003b6 <__adddf3+0x1ba>
 8000398:	f104 0414 	add.w	r4, r4, #20
 800039c:	f1c4 0220 	rsb	r2, r4, #32
 80003a0:	fa20 f004 	lsr.w	r0, r0, r4
 80003a4:	fa01 f302 	lsl.w	r3, r1, r2
 80003a8:	ea40 0003 	orr.w	r0, r0, r3
 80003ac:	fa21 f304 	lsr.w	r3, r1, r4
 80003b0:	ea45 0103 	orr.w	r1, r5, r3
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f1c4 040c 	rsb	r4, r4, #12
 80003ba:	f1c4 0220 	rsb	r2, r4, #32
 80003be:	fa20 f002 	lsr.w	r0, r0, r2
 80003c2:	fa01 f304 	lsl.w	r3, r1, r4
 80003c6:	ea40 0003 	orr.w	r0, r0, r3
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	fa21 f004 	lsr.w	r0, r1, r4
 80003d2:	4629      	mov	r1, r5
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f094 0f00 	teq	r4, #0
 80003da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003de:	bf06      	itte	eq
 80003e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003e4:	3401      	addeq	r4, #1
 80003e6:	3d01      	subne	r5, #1
 80003e8:	e74e      	b.n	8000288 <__adddf3+0x8c>
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf18      	it	ne
 80003f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f4:	d029      	beq.n	800044a <__adddf3+0x24e>
 80003f6:	ea94 0f05 	teq	r4, r5
 80003fa:	bf08      	it	eq
 80003fc:	ea90 0f02 	teqeq	r0, r2
 8000400:	d005      	beq.n	800040e <__adddf3+0x212>
 8000402:	ea54 0c00 	orrs.w	ip, r4, r0
 8000406:	bf04      	itt	eq
 8000408:	4619      	moveq	r1, r3
 800040a:	4610      	moveq	r0, r2
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	ea91 0f03 	teq	r1, r3
 8000412:	bf1e      	ittt	ne
 8000414:	2100      	movne	r1, #0
 8000416:	2000      	movne	r0, #0
 8000418:	bd30      	popne	{r4, r5, pc}
 800041a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041e:	d105      	bne.n	800042c <__adddf3+0x230>
 8000420:	0040      	lsls	r0, r0, #1
 8000422:	4149      	adcs	r1, r1
 8000424:	bf28      	it	cs
 8000426:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800042a:	bd30      	pop	{r4, r5, pc}
 800042c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000430:	bf3c      	itt	cc
 8000432:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000436:	bd30      	popcc	{r4, r5, pc}
 8000438:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800043c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000440:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000444:	f04f 0000 	mov.w	r0, #0
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf1a      	itte	ne
 8000450:	4619      	movne	r1, r3
 8000452:	4610      	movne	r0, r2
 8000454:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000458:	bf1c      	itt	ne
 800045a:	460b      	movne	r3, r1
 800045c:	4602      	movne	r2, r0
 800045e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000462:	bf06      	itte	eq
 8000464:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000468:	ea91 0f03 	teqeq	r1, r3
 800046c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	bf00      	nop

08000474 <__aeabi_ui2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f04f 0500 	mov.w	r5, #0
 800048c:	f04f 0100 	mov.w	r1, #0
 8000490:	e750      	b.n	8000334 <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_i2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ac:	bf48      	it	mi
 80004ae:	4240      	negmi	r0, r0
 80004b0:	f04f 0100 	mov.w	r1, #0
 80004b4:	e73e      	b.n	8000334 <__adddf3+0x138>
 80004b6:	bf00      	nop

080004b8 <__aeabi_f2d>:
 80004b8:	0042      	lsls	r2, r0, #1
 80004ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004be:	ea4f 0131 	mov.w	r1, r1, rrx
 80004c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c6:	bf1f      	itttt	ne
 80004c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004d4:	4770      	bxne	lr
 80004d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004da:	bf08      	it	eq
 80004dc:	4770      	bxeq	lr
 80004de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004e2:	bf04      	itt	eq
 80004e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e8:	4770      	bxeq	lr
 80004ea:	b530      	push	{r4, r5, lr}
 80004ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f8:	e71c      	b.n	8000334 <__adddf3+0x138>
 80004fa:	bf00      	nop

080004fc <__aeabi_ul2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f04f 0500 	mov.w	r5, #0
 800050a:	e00a      	b.n	8000522 <__aeabi_l2d+0x16>

0800050c <__aeabi_l2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800051a:	d502      	bpl.n	8000522 <__aeabi_l2d+0x16>
 800051c:	4240      	negs	r0, r0
 800051e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000522:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000526:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800052a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800052e:	f43f aed8 	beq.w	80002e2 <__adddf3+0xe6>
 8000532:	f04f 0203 	mov.w	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000542:	bf18      	it	ne
 8000544:	3203      	addne	r2, #3
 8000546:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800054a:	f1c2 0320 	rsb	r3, r2, #32
 800054e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000552:	fa20 f002 	lsr.w	r0, r0, r2
 8000556:	fa01 fe03 	lsl.w	lr, r1, r3
 800055a:	ea40 000e 	orr.w	r0, r0, lr
 800055e:	fa21 f102 	lsr.w	r1, r1, r2
 8000562:	4414      	add	r4, r2
 8000564:	e6bd      	b.n	80002e2 <__adddf3+0xe6>
 8000566:	bf00      	nop

08000568 <__aeabi_dmul>:
 8000568:	b570      	push	{r4, r5, r6, lr}
 800056a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800056e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000572:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000576:	bf1d      	ittte	ne
 8000578:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800057c:	ea94 0f0c 	teqne	r4, ip
 8000580:	ea95 0f0c 	teqne	r5, ip
 8000584:	f000 f8de 	bleq	8000744 <__aeabi_dmul+0x1dc>
 8000588:	442c      	add	r4, r5
 800058a:	ea81 0603 	eor.w	r6, r1, r3
 800058e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000592:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000596:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800059a:	bf18      	it	ne
 800059c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a8:	d038      	beq.n	800061c <__aeabi_dmul+0xb4>
 80005aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ae:	f04f 0500 	mov.w	r5, #0
 80005b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005be:	f04f 0600 	mov.w	r6, #0
 80005c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005c6:	f09c 0f00 	teq	ip, #0
 80005ca:	bf18      	it	ne
 80005cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005dc:	d204      	bcs.n	80005e8 <__aeabi_dmul+0x80>
 80005de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005e2:	416d      	adcs	r5, r5
 80005e4:	eb46 0606 	adc.w	r6, r6, r6
 80005e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000600:	bf88      	it	hi
 8000602:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000606:	d81e      	bhi.n	8000646 <__aeabi_dmul+0xde>
 8000608:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800060c:	bf08      	it	eq
 800060e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000612:	f150 0000 	adcs.w	r0, r0, #0
 8000616:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000620:	ea46 0101 	orr.w	r1, r6, r1
 8000624:	ea40 0002 	orr.w	r0, r0, r2
 8000628:	ea81 0103 	eor.w	r1, r1, r3
 800062c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000630:	bfc2      	ittt	gt
 8000632:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000636:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800063a:	bd70      	popgt	{r4, r5, r6, pc}
 800063c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000640:	f04f 0e00 	mov.w	lr, #0
 8000644:	3c01      	subs	r4, #1
 8000646:	f300 80ab 	bgt.w	80007a0 <__aeabi_dmul+0x238>
 800064a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800064e:	bfde      	ittt	le
 8000650:	2000      	movle	r0, #0
 8000652:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000656:	bd70      	pople	{r4, r5, r6, pc}
 8000658:	f1c4 0400 	rsb	r4, r4, #0
 800065c:	3c20      	subs	r4, #32
 800065e:	da35      	bge.n	80006cc <__aeabi_dmul+0x164>
 8000660:	340c      	adds	r4, #12
 8000662:	dc1b      	bgt.n	800069c <__aeabi_dmul+0x134>
 8000664:	f104 0414 	add.w	r4, r4, #20
 8000668:	f1c4 0520 	rsb	r5, r4, #32
 800066c:	fa00 f305 	lsl.w	r3, r0, r5
 8000670:	fa20 f004 	lsr.w	r0, r0, r4
 8000674:	fa01 f205 	lsl.w	r2, r1, r5
 8000678:	ea40 0002 	orr.w	r0, r0, r2
 800067c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000680:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000684:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000688:	fa21 f604 	lsr.w	r6, r1, r4
 800068c:	eb42 0106 	adc.w	r1, r2, r6
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 040c 	rsb	r4, r4, #12
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f304 	lsl.w	r3, r0, r4
 80006a8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ac:	fa01 f204 	lsl.w	r2, r1, r4
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006bc:	f141 0100 	adc.w	r1, r1, #0
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 0520 	rsb	r5, r4, #32
 80006d0:	fa00 f205 	lsl.w	r2, r0, r5
 80006d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d8:	fa20 f304 	lsr.w	r3, r0, r4
 80006dc:	fa01 f205 	lsl.w	r2, r1, r5
 80006e0:	ea43 0302 	orr.w	r3, r3, r2
 80006e4:	fa21 f004 	lsr.w	r0, r1, r4
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	fa21 f204 	lsr.w	r2, r1, r4
 80006f0:	ea20 0002 	bic.w	r0, r0, r2
 80006f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f094 0f00 	teq	r4, #0
 8000708:	d10f      	bne.n	800072a <__aeabi_dmul+0x1c2>
 800070a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800070e:	0040      	lsls	r0, r0, #1
 8000710:	eb41 0101 	adc.w	r1, r1, r1
 8000714:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3c01      	subeq	r4, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1a6>
 800071e:	ea41 0106 	orr.w	r1, r1, r6
 8000722:	f095 0f00 	teq	r5, #0
 8000726:	bf18      	it	ne
 8000728:	4770      	bxne	lr
 800072a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800072e:	0052      	lsls	r2, r2, #1
 8000730:	eb43 0303 	adc.w	r3, r3, r3
 8000734:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000738:	bf08      	it	eq
 800073a:	3d01      	subeq	r5, #1
 800073c:	d0f7      	beq.n	800072e <__aeabi_dmul+0x1c6>
 800073e:	ea43 0306 	orr.w	r3, r3, r6
 8000742:	4770      	bx	lr
 8000744:	ea94 0f0c 	teq	r4, ip
 8000748:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800074c:	bf18      	it	ne
 800074e:	ea95 0f0c 	teqne	r5, ip
 8000752:	d00c      	beq.n	800076e <__aeabi_dmul+0x206>
 8000754:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000758:	bf18      	it	ne
 800075a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075e:	d1d1      	bne.n	8000704 <__aeabi_dmul+0x19c>
 8000760:	ea81 0103 	eor.w	r1, r1, r3
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	f04f 0000 	mov.w	r0, #0
 800076c:	bd70      	pop	{r4, r5, r6, pc}
 800076e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000772:	bf06      	itte	eq
 8000774:	4610      	moveq	r0, r2
 8000776:	4619      	moveq	r1, r3
 8000778:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800077c:	d019      	beq.n	80007b2 <__aeabi_dmul+0x24a>
 800077e:	ea94 0f0c 	teq	r4, ip
 8000782:	d102      	bne.n	800078a <__aeabi_dmul+0x222>
 8000784:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000788:	d113      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800078a:	ea95 0f0c 	teq	r5, ip
 800078e:	d105      	bne.n	800079c <__aeabi_dmul+0x234>
 8000790:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000794:	bf1c      	itt	ne
 8000796:	4610      	movne	r0, r2
 8000798:	4619      	movne	r1, r3
 800079a:	d10a      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800079c:	ea81 0103 	eor.w	r1, r1, r3
 80007a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ac:	f04f 0000 	mov.w	r0, #0
 80007b0:	bd70      	pop	{r4, r5, r6, pc}
 80007b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ba:	bd70      	pop	{r4, r5, r6, pc}

080007bc <__aeabi_ddiv>:
 80007bc:	b570      	push	{r4, r5, r6, lr}
 80007be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ca:	bf1d      	ittte	ne
 80007cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007d0:	ea94 0f0c 	teqne	r4, ip
 80007d4:	ea95 0f0c 	teqne	r5, ip
 80007d8:	f000 f8a7 	bleq	800092a <__aeabi_ddiv+0x16e>
 80007dc:	eba4 0405 	sub.w	r4, r4, r5
 80007e0:	ea81 0e03 	eor.w	lr, r1, r3
 80007e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007ec:	f000 8088 	beq.w	8000900 <__aeabi_ddiv+0x144>
 80007f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000800:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000804:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000808:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800080c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000810:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000814:	429d      	cmp	r5, r3
 8000816:	bf08      	it	eq
 8000818:	4296      	cmpeq	r6, r2
 800081a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800081e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000822:	d202      	bcs.n	800082a <__aeabi_ddiv+0x6e>
 8000824:	085b      	lsrs	r3, r3, #1
 8000826:	ea4f 0232 	mov.w	r2, r2, rrx
 800082a:	1ab6      	subs	r6, r6, r2
 800082c:	eb65 0503 	sbc.w	r5, r5, r3
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800083a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000898:	ea55 0e06 	orrs.w	lr, r5, r6
 800089c:	d018      	beq.n	80008d0 <__aeabi_ddiv+0x114>
 800089e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ba:	d1c0      	bne.n	800083e <__aeabi_ddiv+0x82>
 80008bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c0:	d10b      	bne.n	80008da <__aeabi_ddiv+0x11e>
 80008c2:	ea41 0100 	orr.w	r1, r1, r0
 80008c6:	f04f 0000 	mov.w	r0, #0
 80008ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ce:	e7b6      	b.n	800083e <__aeabi_ddiv+0x82>
 80008d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d4:	bf04      	itt	eq
 80008d6:	4301      	orreq	r1, r0
 80008d8:	2000      	moveq	r0, #0
 80008da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008de:	bf88      	it	hi
 80008e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008e4:	f63f aeaf 	bhi.w	8000646 <__aeabi_dmul+0xde>
 80008e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008ec:	bf04      	itt	eq
 80008ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008f6:	f150 0000 	adcs.w	r0, r0, #0
 80008fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	pop	{r4, r5, r6, pc}
 8000900:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000904:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000908:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800090c:	bfc2      	ittt	gt
 800090e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000912:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000916:	bd70      	popgt	{r4, r5, r6, pc}
 8000918:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800091c:	f04f 0e00 	mov.w	lr, #0
 8000920:	3c01      	subs	r4, #1
 8000922:	e690      	b.n	8000646 <__aeabi_dmul+0xde>
 8000924:	ea45 0e06 	orr.w	lr, r5, r6
 8000928:	e68d      	b.n	8000646 <__aeabi_dmul+0xde>
 800092a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800092e:	ea94 0f0c 	teq	r4, ip
 8000932:	bf08      	it	eq
 8000934:	ea95 0f0c 	teqeq	r5, ip
 8000938:	f43f af3b 	beq.w	80007b2 <__aeabi_dmul+0x24a>
 800093c:	ea94 0f0c 	teq	r4, ip
 8000940:	d10a      	bne.n	8000958 <__aeabi_ddiv+0x19c>
 8000942:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000946:	f47f af34 	bne.w	80007b2 <__aeabi_dmul+0x24a>
 800094a:	ea95 0f0c 	teq	r5, ip
 800094e:	f47f af25 	bne.w	800079c <__aeabi_dmul+0x234>
 8000952:	4610      	mov	r0, r2
 8000954:	4619      	mov	r1, r3
 8000956:	e72c      	b.n	80007b2 <__aeabi_dmul+0x24a>
 8000958:	ea95 0f0c 	teq	r5, ip
 800095c:	d106      	bne.n	800096c <__aeabi_ddiv+0x1b0>
 800095e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000962:	f43f aefd 	beq.w	8000760 <__aeabi_dmul+0x1f8>
 8000966:	4610      	mov	r0, r2
 8000968:	4619      	mov	r1, r3
 800096a:	e722      	b.n	80007b2 <__aeabi_dmul+0x24a>
 800096c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000970:	bf18      	it	ne
 8000972:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000976:	f47f aec5 	bne.w	8000704 <__aeabi_dmul+0x19c>
 800097a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800097e:	f47f af0d 	bne.w	800079c <__aeabi_dmul+0x234>
 8000982:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000986:	f47f aeeb 	bne.w	8000760 <__aeabi_dmul+0x1f8>
 800098a:	e712      	b.n	80007b2 <__aeabi_dmul+0x24a>

0800098c <__gedf2>:
 800098c:	f04f 3cff 	mov.w	ip, #4294967295
 8000990:	e006      	b.n	80009a0 <__cmpdf2+0x4>
 8000992:	bf00      	nop

08000994 <__ledf2>:
 8000994:	f04f 0c01 	mov.w	ip, #1
 8000998:	e002      	b.n	80009a0 <__cmpdf2+0x4>
 800099a:	bf00      	nop

0800099c <__cmpdf2>:
 800099c:	f04f 0c01 	mov.w	ip, #1
 80009a0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009b6:	d01b      	beq.n	80009f0 <__cmpdf2+0x54>
 80009b8:	b001      	add	sp, #4
 80009ba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009be:	bf0c      	ite	eq
 80009c0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009c4:	ea91 0f03 	teqne	r1, r3
 80009c8:	bf02      	ittt	eq
 80009ca:	ea90 0f02 	teqeq	r0, r2
 80009ce:	2000      	moveq	r0, #0
 80009d0:	4770      	bxeq	lr
 80009d2:	f110 0f00 	cmn.w	r0, #0
 80009d6:	ea91 0f03 	teq	r1, r3
 80009da:	bf58      	it	pl
 80009dc:	4299      	cmppl	r1, r3
 80009de:	bf08      	it	eq
 80009e0:	4290      	cmpeq	r0, r2
 80009e2:	bf2c      	ite	cs
 80009e4:	17d8      	asrcs	r0, r3, #31
 80009e6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ea:	f040 0001 	orr.w	r0, r0, #1
 80009ee:	4770      	bx	lr
 80009f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f8:	d102      	bne.n	8000a00 <__cmpdf2+0x64>
 80009fa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009fe:	d107      	bne.n	8000a10 <__cmpdf2+0x74>
 8000a00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a08:	d1d6      	bne.n	80009b8 <__cmpdf2+0x1c>
 8000a0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a0e:	d0d3      	beq.n	80009b8 <__cmpdf2+0x1c>
 8000a10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop

08000a18 <__aeabi_cdrcmple>:
 8000a18:	4684      	mov	ip, r0
 8000a1a:	4610      	mov	r0, r2
 8000a1c:	4662      	mov	r2, ip
 8000a1e:	468c      	mov	ip, r1
 8000a20:	4619      	mov	r1, r3
 8000a22:	4663      	mov	r3, ip
 8000a24:	e000      	b.n	8000a28 <__aeabi_cdcmpeq>
 8000a26:	bf00      	nop

08000a28 <__aeabi_cdcmpeq>:
 8000a28:	b501      	push	{r0, lr}
 8000a2a:	f7ff ffb7 	bl	800099c <__cmpdf2>
 8000a2e:	2800      	cmp	r0, #0
 8000a30:	bf48      	it	mi
 8000a32:	f110 0f00 	cmnmi.w	r0, #0
 8000a36:	bd01      	pop	{r0, pc}

08000a38 <__aeabi_dcmpeq>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff fff4 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a40:	bf0c      	ite	eq
 8000a42:	2001      	moveq	r0, #1
 8000a44:	2000      	movne	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmplt>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffea 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a54:	bf34      	ite	cc
 8000a56:	2001      	movcc	r0, #1
 8000a58:	2000      	movcs	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmple>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffe0 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a68:	bf94      	ite	ls
 8000a6a:	2001      	movls	r0, #1
 8000a6c:	2000      	movhi	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpge>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffce 	bl	8000a18 <__aeabi_cdrcmple>
 8000a7c:	bf94      	ite	ls
 8000a7e:	2001      	movls	r0, #1
 8000a80:	2000      	movhi	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmpgt>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffc4 	bl	8000a18 <__aeabi_cdrcmple>
 8000a90:	bf34      	ite	cc
 8000a92:	2001      	movcc	r0, #1
 8000a94:	2000      	movcs	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_d2iz>:
 8000a9c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa4:	d215      	bcs.n	8000ad2 <__aeabi_d2iz+0x36>
 8000aa6:	d511      	bpl.n	8000acc <__aeabi_d2iz+0x30>
 8000aa8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000aac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab0:	d912      	bls.n	8000ad8 <__aeabi_d2iz+0x3c>
 8000ab2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000abe:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ac2:	fa23 f002 	lsr.w	r0, r3, r2
 8000ac6:	bf18      	it	ne
 8000ac8:	4240      	negne	r0, r0
 8000aca:	4770      	bx	lr
 8000acc:	f04f 0000 	mov.w	r0, #0
 8000ad0:	4770      	bx	lr
 8000ad2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ad6:	d105      	bne.n	8000ae4 <__aeabi_d2iz+0x48>
 8000ad8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000adc:	bf08      	it	eq
 8000ade:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ae2:	4770      	bx	lr
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop

08000aec <__aeabi_d2f>:
 8000aec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000af0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000af4:	bf24      	itt	cs
 8000af6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000afa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000afe:	d90d      	bls.n	8000b1c <__aeabi_d2f+0x30>
 8000b00:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b04:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b08:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b0c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b10:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b14:	bf08      	it	eq
 8000b16:	f020 0001 	biceq.w	r0, r0, #1
 8000b1a:	4770      	bx	lr
 8000b1c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b20:	d121      	bne.n	8000b66 <__aeabi_d2f+0x7a>
 8000b22:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b26:	bfbc      	itt	lt
 8000b28:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b2c:	4770      	bxlt	lr
 8000b2e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b32:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b36:	f1c2 0218 	rsb	r2, r2, #24
 8000b3a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b3e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b42:	fa20 f002 	lsr.w	r0, r0, r2
 8000b46:	bf18      	it	ne
 8000b48:	f040 0001 	orrne.w	r0, r0, #1
 8000b4c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b50:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b54:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b58:	ea40 000c 	orr.w	r0, r0, ip
 8000b5c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b60:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b64:	e7cc      	b.n	8000b00 <__aeabi_d2f+0x14>
 8000b66:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b6a:	d107      	bne.n	8000b7c <__aeabi_d2f+0x90>
 8000b6c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b70:	bf1e      	ittt	ne
 8000b72:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b76:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b7a:	4770      	bxne	lr
 8000b7c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b80:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b84:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop

08000b8c <__aeabi_uldivmod>:
 8000b8c:	b953      	cbnz	r3, 8000ba4 <__aeabi_uldivmod+0x18>
 8000b8e:	b94a      	cbnz	r2, 8000ba4 <__aeabi_uldivmod+0x18>
 8000b90:	2900      	cmp	r1, #0
 8000b92:	bf08      	it	eq
 8000b94:	2800      	cmpeq	r0, #0
 8000b96:	bf1c      	itt	ne
 8000b98:	f04f 31ff 	movne.w	r1, #4294967295
 8000b9c:	f04f 30ff 	movne.w	r0, #4294967295
 8000ba0:	f000 b974 	b.w	8000e8c <__aeabi_idiv0>
 8000ba4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ba8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bac:	f000 f806 	bl	8000bbc <__udivmoddi4>
 8000bb0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bb4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bb8:	b004      	add	sp, #16
 8000bba:	4770      	bx	lr

08000bbc <__udivmoddi4>:
 8000bbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bc0:	9d08      	ldr	r5, [sp, #32]
 8000bc2:	4604      	mov	r4, r0
 8000bc4:	468e      	mov	lr, r1
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d14d      	bne.n	8000c66 <__udivmoddi4+0xaa>
 8000bca:	428a      	cmp	r2, r1
 8000bcc:	4694      	mov	ip, r2
 8000bce:	d969      	bls.n	8000ca4 <__udivmoddi4+0xe8>
 8000bd0:	fab2 f282 	clz	r2, r2
 8000bd4:	b152      	cbz	r2, 8000bec <__udivmoddi4+0x30>
 8000bd6:	fa01 f302 	lsl.w	r3, r1, r2
 8000bda:	f1c2 0120 	rsb	r1, r2, #32
 8000bde:	fa20 f101 	lsr.w	r1, r0, r1
 8000be2:	fa0c fc02 	lsl.w	ip, ip, r2
 8000be6:	ea41 0e03 	orr.w	lr, r1, r3
 8000bea:	4094      	lsls	r4, r2
 8000bec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bf0:	0c21      	lsrs	r1, r4, #16
 8000bf2:	fbbe f6f8 	udiv	r6, lr, r8
 8000bf6:	fa1f f78c 	uxth.w	r7, ip
 8000bfa:	fb08 e316 	mls	r3, r8, r6, lr
 8000bfe:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c02:	fb06 f107 	mul.w	r1, r6, r7
 8000c06:	4299      	cmp	r1, r3
 8000c08:	d90a      	bls.n	8000c20 <__udivmoddi4+0x64>
 8000c0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c0e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c12:	f080 811f 	bcs.w	8000e54 <__udivmoddi4+0x298>
 8000c16:	4299      	cmp	r1, r3
 8000c18:	f240 811c 	bls.w	8000e54 <__udivmoddi4+0x298>
 8000c1c:	3e02      	subs	r6, #2
 8000c1e:	4463      	add	r3, ip
 8000c20:	1a5b      	subs	r3, r3, r1
 8000c22:	b2a4      	uxth	r4, r4
 8000c24:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c28:	fb08 3310 	mls	r3, r8, r0, r3
 8000c2c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c30:	fb00 f707 	mul.w	r7, r0, r7
 8000c34:	42a7      	cmp	r7, r4
 8000c36:	d90a      	bls.n	8000c4e <__udivmoddi4+0x92>
 8000c38:	eb1c 0404 	adds.w	r4, ip, r4
 8000c3c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c40:	f080 810a 	bcs.w	8000e58 <__udivmoddi4+0x29c>
 8000c44:	42a7      	cmp	r7, r4
 8000c46:	f240 8107 	bls.w	8000e58 <__udivmoddi4+0x29c>
 8000c4a:	4464      	add	r4, ip
 8000c4c:	3802      	subs	r0, #2
 8000c4e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c52:	1be4      	subs	r4, r4, r7
 8000c54:	2600      	movs	r6, #0
 8000c56:	b11d      	cbz	r5, 8000c60 <__udivmoddi4+0xa4>
 8000c58:	40d4      	lsrs	r4, r2
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	e9c5 4300 	strd	r4, r3, [r5]
 8000c60:	4631      	mov	r1, r6
 8000c62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c66:	428b      	cmp	r3, r1
 8000c68:	d909      	bls.n	8000c7e <__udivmoddi4+0xc2>
 8000c6a:	2d00      	cmp	r5, #0
 8000c6c:	f000 80ef 	beq.w	8000e4e <__udivmoddi4+0x292>
 8000c70:	2600      	movs	r6, #0
 8000c72:	e9c5 0100 	strd	r0, r1, [r5]
 8000c76:	4630      	mov	r0, r6
 8000c78:	4631      	mov	r1, r6
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	fab3 f683 	clz	r6, r3
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	d14a      	bne.n	8000d1c <__udivmoddi4+0x160>
 8000c86:	428b      	cmp	r3, r1
 8000c88:	d302      	bcc.n	8000c90 <__udivmoddi4+0xd4>
 8000c8a:	4282      	cmp	r2, r0
 8000c8c:	f200 80f9 	bhi.w	8000e82 <__udivmoddi4+0x2c6>
 8000c90:	1a84      	subs	r4, r0, r2
 8000c92:	eb61 0303 	sbc.w	r3, r1, r3
 8000c96:	2001      	movs	r0, #1
 8000c98:	469e      	mov	lr, r3
 8000c9a:	2d00      	cmp	r5, #0
 8000c9c:	d0e0      	beq.n	8000c60 <__udivmoddi4+0xa4>
 8000c9e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000ca2:	e7dd      	b.n	8000c60 <__udivmoddi4+0xa4>
 8000ca4:	b902      	cbnz	r2, 8000ca8 <__udivmoddi4+0xec>
 8000ca6:	deff      	udf	#255	; 0xff
 8000ca8:	fab2 f282 	clz	r2, r2
 8000cac:	2a00      	cmp	r2, #0
 8000cae:	f040 8092 	bne.w	8000dd6 <__udivmoddi4+0x21a>
 8000cb2:	eba1 010c 	sub.w	r1, r1, ip
 8000cb6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cba:	fa1f fe8c 	uxth.w	lr, ip
 8000cbe:	2601      	movs	r6, #1
 8000cc0:	0c20      	lsrs	r0, r4, #16
 8000cc2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000cc6:	fb07 1113 	mls	r1, r7, r3, r1
 8000cca:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cce:	fb0e f003 	mul.w	r0, lr, r3
 8000cd2:	4288      	cmp	r0, r1
 8000cd4:	d908      	bls.n	8000ce8 <__udivmoddi4+0x12c>
 8000cd6:	eb1c 0101 	adds.w	r1, ip, r1
 8000cda:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cde:	d202      	bcs.n	8000ce6 <__udivmoddi4+0x12a>
 8000ce0:	4288      	cmp	r0, r1
 8000ce2:	f200 80cb 	bhi.w	8000e7c <__udivmoddi4+0x2c0>
 8000ce6:	4643      	mov	r3, r8
 8000ce8:	1a09      	subs	r1, r1, r0
 8000cea:	b2a4      	uxth	r4, r4
 8000cec:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cf0:	fb07 1110 	mls	r1, r7, r0, r1
 8000cf4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000cf8:	fb0e fe00 	mul.w	lr, lr, r0
 8000cfc:	45a6      	cmp	lr, r4
 8000cfe:	d908      	bls.n	8000d12 <__udivmoddi4+0x156>
 8000d00:	eb1c 0404 	adds.w	r4, ip, r4
 8000d04:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d08:	d202      	bcs.n	8000d10 <__udivmoddi4+0x154>
 8000d0a:	45a6      	cmp	lr, r4
 8000d0c:	f200 80bb 	bhi.w	8000e86 <__udivmoddi4+0x2ca>
 8000d10:	4608      	mov	r0, r1
 8000d12:	eba4 040e 	sub.w	r4, r4, lr
 8000d16:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d1a:	e79c      	b.n	8000c56 <__udivmoddi4+0x9a>
 8000d1c:	f1c6 0720 	rsb	r7, r6, #32
 8000d20:	40b3      	lsls	r3, r6
 8000d22:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d26:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d2a:	fa20 f407 	lsr.w	r4, r0, r7
 8000d2e:	fa01 f306 	lsl.w	r3, r1, r6
 8000d32:	431c      	orrs	r4, r3
 8000d34:	40f9      	lsrs	r1, r7
 8000d36:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d3a:	fa00 f306 	lsl.w	r3, r0, r6
 8000d3e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d42:	0c20      	lsrs	r0, r4, #16
 8000d44:	fa1f fe8c 	uxth.w	lr, ip
 8000d48:	fb09 1118 	mls	r1, r9, r8, r1
 8000d4c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d50:	fb08 f00e 	mul.w	r0, r8, lr
 8000d54:	4288      	cmp	r0, r1
 8000d56:	fa02 f206 	lsl.w	r2, r2, r6
 8000d5a:	d90b      	bls.n	8000d74 <__udivmoddi4+0x1b8>
 8000d5c:	eb1c 0101 	adds.w	r1, ip, r1
 8000d60:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d64:	f080 8088 	bcs.w	8000e78 <__udivmoddi4+0x2bc>
 8000d68:	4288      	cmp	r0, r1
 8000d6a:	f240 8085 	bls.w	8000e78 <__udivmoddi4+0x2bc>
 8000d6e:	f1a8 0802 	sub.w	r8, r8, #2
 8000d72:	4461      	add	r1, ip
 8000d74:	1a09      	subs	r1, r1, r0
 8000d76:	b2a4      	uxth	r4, r4
 8000d78:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d7c:	fb09 1110 	mls	r1, r9, r0, r1
 8000d80:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d84:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d88:	458e      	cmp	lr, r1
 8000d8a:	d908      	bls.n	8000d9e <__udivmoddi4+0x1e2>
 8000d8c:	eb1c 0101 	adds.w	r1, ip, r1
 8000d90:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d94:	d26c      	bcs.n	8000e70 <__udivmoddi4+0x2b4>
 8000d96:	458e      	cmp	lr, r1
 8000d98:	d96a      	bls.n	8000e70 <__udivmoddi4+0x2b4>
 8000d9a:	3802      	subs	r0, #2
 8000d9c:	4461      	add	r1, ip
 8000d9e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000da2:	fba0 9402 	umull	r9, r4, r0, r2
 8000da6:	eba1 010e 	sub.w	r1, r1, lr
 8000daa:	42a1      	cmp	r1, r4
 8000dac:	46c8      	mov	r8, r9
 8000dae:	46a6      	mov	lr, r4
 8000db0:	d356      	bcc.n	8000e60 <__udivmoddi4+0x2a4>
 8000db2:	d053      	beq.n	8000e5c <__udivmoddi4+0x2a0>
 8000db4:	b15d      	cbz	r5, 8000dce <__udivmoddi4+0x212>
 8000db6:	ebb3 0208 	subs.w	r2, r3, r8
 8000dba:	eb61 010e 	sbc.w	r1, r1, lr
 8000dbe:	fa01 f707 	lsl.w	r7, r1, r7
 8000dc2:	fa22 f306 	lsr.w	r3, r2, r6
 8000dc6:	40f1      	lsrs	r1, r6
 8000dc8:	431f      	orrs	r7, r3
 8000dca:	e9c5 7100 	strd	r7, r1, [r5]
 8000dce:	2600      	movs	r6, #0
 8000dd0:	4631      	mov	r1, r6
 8000dd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dd6:	f1c2 0320 	rsb	r3, r2, #32
 8000dda:	40d8      	lsrs	r0, r3
 8000ddc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000de0:	fa21 f303 	lsr.w	r3, r1, r3
 8000de4:	4091      	lsls	r1, r2
 8000de6:	4301      	orrs	r1, r0
 8000de8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dec:	fa1f fe8c 	uxth.w	lr, ip
 8000df0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000df4:	fb07 3610 	mls	r6, r7, r0, r3
 8000df8:	0c0b      	lsrs	r3, r1, #16
 8000dfa:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000dfe:	fb00 f60e 	mul.w	r6, r0, lr
 8000e02:	429e      	cmp	r6, r3
 8000e04:	fa04 f402 	lsl.w	r4, r4, r2
 8000e08:	d908      	bls.n	8000e1c <__udivmoddi4+0x260>
 8000e0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e0e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e12:	d22f      	bcs.n	8000e74 <__udivmoddi4+0x2b8>
 8000e14:	429e      	cmp	r6, r3
 8000e16:	d92d      	bls.n	8000e74 <__udivmoddi4+0x2b8>
 8000e18:	3802      	subs	r0, #2
 8000e1a:	4463      	add	r3, ip
 8000e1c:	1b9b      	subs	r3, r3, r6
 8000e1e:	b289      	uxth	r1, r1
 8000e20:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e24:	fb07 3316 	mls	r3, r7, r6, r3
 8000e28:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e2c:	fb06 f30e 	mul.w	r3, r6, lr
 8000e30:	428b      	cmp	r3, r1
 8000e32:	d908      	bls.n	8000e46 <__udivmoddi4+0x28a>
 8000e34:	eb1c 0101 	adds.w	r1, ip, r1
 8000e38:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e3c:	d216      	bcs.n	8000e6c <__udivmoddi4+0x2b0>
 8000e3e:	428b      	cmp	r3, r1
 8000e40:	d914      	bls.n	8000e6c <__udivmoddi4+0x2b0>
 8000e42:	3e02      	subs	r6, #2
 8000e44:	4461      	add	r1, ip
 8000e46:	1ac9      	subs	r1, r1, r3
 8000e48:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e4c:	e738      	b.n	8000cc0 <__udivmoddi4+0x104>
 8000e4e:	462e      	mov	r6, r5
 8000e50:	4628      	mov	r0, r5
 8000e52:	e705      	b.n	8000c60 <__udivmoddi4+0xa4>
 8000e54:	4606      	mov	r6, r0
 8000e56:	e6e3      	b.n	8000c20 <__udivmoddi4+0x64>
 8000e58:	4618      	mov	r0, r3
 8000e5a:	e6f8      	b.n	8000c4e <__udivmoddi4+0x92>
 8000e5c:	454b      	cmp	r3, r9
 8000e5e:	d2a9      	bcs.n	8000db4 <__udivmoddi4+0x1f8>
 8000e60:	ebb9 0802 	subs.w	r8, r9, r2
 8000e64:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e68:	3801      	subs	r0, #1
 8000e6a:	e7a3      	b.n	8000db4 <__udivmoddi4+0x1f8>
 8000e6c:	4646      	mov	r6, r8
 8000e6e:	e7ea      	b.n	8000e46 <__udivmoddi4+0x28a>
 8000e70:	4620      	mov	r0, r4
 8000e72:	e794      	b.n	8000d9e <__udivmoddi4+0x1e2>
 8000e74:	4640      	mov	r0, r8
 8000e76:	e7d1      	b.n	8000e1c <__udivmoddi4+0x260>
 8000e78:	46d0      	mov	r8, sl
 8000e7a:	e77b      	b.n	8000d74 <__udivmoddi4+0x1b8>
 8000e7c:	3b02      	subs	r3, #2
 8000e7e:	4461      	add	r1, ip
 8000e80:	e732      	b.n	8000ce8 <__udivmoddi4+0x12c>
 8000e82:	4630      	mov	r0, r6
 8000e84:	e709      	b.n	8000c9a <__udivmoddi4+0xde>
 8000e86:	4464      	add	r4, ip
 8000e88:	3802      	subs	r0, #2
 8000e8a:	e742      	b.n	8000d12 <__udivmoddi4+0x156>

08000e8c <__aeabi_idiv0>:
 8000e8c:	4770      	bx	lr
 8000e8e:	bf00      	nop

08000e90 <step>:
/* USER CODE BEGIN 0 */
extern USBD_HandleTypeDef hUsbDeviceFS;

float x, y;

void step(int x, int y, bool btn) {
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b086      	sub	sp, #24
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	60f8      	str	r0, [r7, #12]
 8000e98:	60b9      	str	r1, [r7, #8]
 8000e9a:	4613      	mov	r3, r2
 8000e9c:	71fb      	strb	r3, [r7, #7]
	uint8_t buff[4];
	if (btn) {
 8000e9e:	79fb      	ldrb	r3, [r7, #7]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d002      	beq.n	8000eaa <step+0x1a>
		buff[0] = 0x01; // stiskni leve tlacitko
 8000ea4:	2301      	movs	r3, #1
 8000ea6:	753b      	strb	r3, [r7, #20]
 8000ea8:	e001      	b.n	8000eae <step+0x1e>
	}
	else  {
		buff[0] = 0x00; // stiskni leve tlacitko
 8000eaa:	2300      	movs	r3, #0
 8000eac:	753b      	strb	r3, [r7, #20]
	}
	buff[1] = (int8_t)(x); // posun X +10
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	b2db      	uxtb	r3, r3
 8000eb2:	757b      	strb	r3, [r7, #21]
	buff[2] = (int8_t)(y); // posun Y -3
 8000eb4:	68bb      	ldr	r3, [r7, #8]
 8000eb6:	b2db      	uxtb	r3, r3
 8000eb8:	75bb      	strb	r3, [r7, #22]
	buff[3] = 0; // bez scrollu
 8000eba:	2300      	movs	r3, #0
 8000ebc:	75fb      	strb	r3, [r7, #23]
	USBD_HID_SendReport(&hUsbDeviceFS, buff, sizeof(buff));
 8000ebe:	f107 0314 	add.w	r3, r7, #20
 8000ec2:	2204      	movs	r2, #4
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	4807      	ldr	r0, [pc, #28]	; (8000ee4 <step+0x54>)
 8000ec8:	f004 fc0c 	bl	80056e4 <USBD_HID_SendReport>
	HAL_Delay(USBD_HID_GetPollingInterval(&hUsbDeviceFS));
 8000ecc:	4805      	ldr	r0, [pc, #20]	; (8000ee4 <step+0x54>)
 8000ece:	f004 fc39 	bl	8005744 <USBD_HID_GetPollingInterval>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f000 fc19 	bl	800170c <HAL_Delay>
}
 8000eda:	bf00      	nop
 8000edc:	3718      	adds	r7, #24
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	20000148 	.word	0x20000148

08000ee8 <circle>:

void circle(int radius) {
 8000ee8:	b5b0      	push	{r4, r5, r7, lr}
 8000eea:	b084      	sub	sp, #16
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
	int16_t n = 360;
 8000ef0:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8000ef4:	81bb      	strh	r3, [r7, #12]
	for (int16_t i=0; i<n; i+=5) {
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	81fb      	strh	r3, [r7, #14]
 8000efa:	e078      	b.n	8000fee <circle+0x106>
		x = radius * cos(i*2*3.14 / 360);
 8000efc:	6878      	ldr	r0, [r7, #4]
 8000efe:	f7ff fac9 	bl	8000494 <__aeabi_i2d>
 8000f02:	4604      	mov	r4, r0
 8000f04:	460d      	mov	r5, r1
 8000f06:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000f0a:	005b      	lsls	r3, r3, #1
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f7ff fac1 	bl	8000494 <__aeabi_i2d>
 8000f12:	a33f      	add	r3, pc, #252	; (adr r3, 8001010 <circle+0x128>)
 8000f14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f18:	f7ff fb26 	bl	8000568 <__aeabi_dmul>
 8000f1c:	4602      	mov	r2, r0
 8000f1e:	460b      	mov	r3, r1
 8000f20:	4610      	mov	r0, r2
 8000f22:	4619      	mov	r1, r3
 8000f24:	f04f 0200 	mov.w	r2, #0
 8000f28:	4b3b      	ldr	r3, [pc, #236]	; (8001018 <circle+0x130>)
 8000f2a:	f7ff fc47 	bl	80007bc <__aeabi_ddiv>
 8000f2e:	4602      	mov	r2, r0
 8000f30:	460b      	mov	r3, r1
 8000f32:	ec43 2b17 	vmov	d7, r2, r3
 8000f36:	eeb0 0a47 	vmov.f32	s0, s14
 8000f3a:	eef0 0a67 	vmov.f32	s1, s15
 8000f3e:	f006 fbd3 	bl	80076e8 <cos>
 8000f42:	ec53 2b10 	vmov	r2, r3, d0
 8000f46:	4620      	mov	r0, r4
 8000f48:	4629      	mov	r1, r5
 8000f4a:	f7ff fb0d 	bl	8000568 <__aeabi_dmul>
 8000f4e:	4602      	mov	r2, r0
 8000f50:	460b      	mov	r3, r1
 8000f52:	4610      	mov	r0, r2
 8000f54:	4619      	mov	r1, r3
 8000f56:	f7ff fdc9 	bl	8000aec <__aeabi_d2f>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	4a2f      	ldr	r2, [pc, #188]	; (800101c <circle+0x134>)
 8000f5e:	6013      	str	r3, [r2, #0]
		y = radius * sin(i*2*3.14 / 360);
 8000f60:	6878      	ldr	r0, [r7, #4]
 8000f62:	f7ff fa97 	bl	8000494 <__aeabi_i2d>
 8000f66:	4604      	mov	r4, r0
 8000f68:	460d      	mov	r5, r1
 8000f6a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000f6e:	005b      	lsls	r3, r3, #1
 8000f70:	4618      	mov	r0, r3
 8000f72:	f7ff fa8f 	bl	8000494 <__aeabi_i2d>
 8000f76:	a326      	add	r3, pc, #152	; (adr r3, 8001010 <circle+0x128>)
 8000f78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f7c:	f7ff faf4 	bl	8000568 <__aeabi_dmul>
 8000f80:	4602      	mov	r2, r0
 8000f82:	460b      	mov	r3, r1
 8000f84:	4610      	mov	r0, r2
 8000f86:	4619      	mov	r1, r3
 8000f88:	f04f 0200 	mov.w	r2, #0
 8000f8c:	4b22      	ldr	r3, [pc, #136]	; (8001018 <circle+0x130>)
 8000f8e:	f7ff fc15 	bl	80007bc <__aeabi_ddiv>
 8000f92:	4602      	mov	r2, r0
 8000f94:	460b      	mov	r3, r1
 8000f96:	ec43 2b17 	vmov	d7, r2, r3
 8000f9a:	eeb0 0a47 	vmov.f32	s0, s14
 8000f9e:	eef0 0a67 	vmov.f32	s1, s15
 8000fa2:	f006 fbf5 	bl	8007790 <sin>
 8000fa6:	ec53 2b10 	vmov	r2, r3, d0
 8000faa:	4620      	mov	r0, r4
 8000fac:	4629      	mov	r1, r5
 8000fae:	f7ff fadb 	bl	8000568 <__aeabi_dmul>
 8000fb2:	4602      	mov	r2, r0
 8000fb4:	460b      	mov	r3, r1
 8000fb6:	4610      	mov	r0, r2
 8000fb8:	4619      	mov	r1, r3
 8000fba:	f7ff fd97 	bl	8000aec <__aeabi_d2f>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	4a17      	ldr	r2, [pc, #92]	; (8001020 <circle+0x138>)
 8000fc2:	6013      	str	r3, [r2, #0]
		step(x,y,1);
 8000fc4:	4b15      	ldr	r3, [pc, #84]	; (800101c <circle+0x134>)
 8000fc6:	edd3 7a00 	vldr	s15, [r3]
 8000fca:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8000fce:	4b14      	ldr	r3, [pc, #80]	; (8001020 <circle+0x138>)
 8000fd0:	edd3 7a00 	vldr	s15, [r3]
 8000fd4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000fd8:	2201      	movs	r2, #1
 8000fda:	ee17 1a90 	vmov	r1, s15
 8000fde:	ee17 0a10 	vmov	r0, s14
 8000fe2:	f7ff ff55 	bl	8000e90 <step>
	for (int16_t i=0; i<n; i+=5) {
 8000fe6:	89fb      	ldrh	r3, [r7, #14]
 8000fe8:	3305      	adds	r3, #5
 8000fea:	b29b      	uxth	r3, r3
 8000fec:	81fb      	strh	r3, [r7, #14]
 8000fee:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000ff2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000ff6:	429a      	cmp	r2, r3
 8000ff8:	db80      	blt.n	8000efc <circle+0x14>
	}
	step(0, 0, 0);
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	2100      	movs	r1, #0
 8000ffe:	2000      	movs	r0, #0
 8001000:	f7ff ff46 	bl	8000e90 <step>
	step(dx, dy, 1);
	sx += dx;
	sy += dy;
		*/

}
 8001004:	bf00      	nop
 8001006:	3710      	adds	r7, #16
 8001008:	46bd      	mov	sp, r7
 800100a:	bdb0      	pop	{r4, r5, r7, pc}
 800100c:	f3af 8000 	nop.w
 8001010:	51eb851f 	.word	0x51eb851f
 8001014:	40091eb8 	.word	0x40091eb8
 8001018:	40768000 	.word	0x40768000
 800101c:	20000138 	.word	0x20000138
 8001020:	2000013c 	.word	0x2000013c
 8001024:	00000000 	.word	0x00000000

08001028 <halfcircle>:

void halfcircle(int radius) {
 8001028:	b5b0      	push	{r4, r5, r7, lr}
 800102a:	b084      	sub	sp, #16
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
	int16_t n = 270;
 8001030:	f44f 7387 	mov.w	r3, #270	; 0x10e
 8001034:	81bb      	strh	r3, [r7, #12]
	for (int16_t i=90; i<n; i+=5) {
 8001036:	235a      	movs	r3, #90	; 0x5a
 8001038:	81fb      	strh	r3, [r7, #14]
 800103a:	e078      	b.n	800112e <halfcircle+0x106>
		x = radius * cos(i*2*3.14 / 360);
 800103c:	6878      	ldr	r0, [r7, #4]
 800103e:	f7ff fa29 	bl	8000494 <__aeabi_i2d>
 8001042:	4604      	mov	r4, r0
 8001044:	460d      	mov	r5, r1
 8001046:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800104a:	005b      	lsls	r3, r3, #1
 800104c:	4618      	mov	r0, r3
 800104e:	f7ff fa21 	bl	8000494 <__aeabi_i2d>
 8001052:	a33f      	add	r3, pc, #252	; (adr r3, 8001150 <halfcircle+0x128>)
 8001054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001058:	f7ff fa86 	bl	8000568 <__aeabi_dmul>
 800105c:	4602      	mov	r2, r0
 800105e:	460b      	mov	r3, r1
 8001060:	4610      	mov	r0, r2
 8001062:	4619      	mov	r1, r3
 8001064:	f04f 0200 	mov.w	r2, #0
 8001068:	4b3b      	ldr	r3, [pc, #236]	; (8001158 <halfcircle+0x130>)
 800106a:	f7ff fba7 	bl	80007bc <__aeabi_ddiv>
 800106e:	4602      	mov	r2, r0
 8001070:	460b      	mov	r3, r1
 8001072:	ec43 2b17 	vmov	d7, r2, r3
 8001076:	eeb0 0a47 	vmov.f32	s0, s14
 800107a:	eef0 0a67 	vmov.f32	s1, s15
 800107e:	f006 fb33 	bl	80076e8 <cos>
 8001082:	ec53 2b10 	vmov	r2, r3, d0
 8001086:	4620      	mov	r0, r4
 8001088:	4629      	mov	r1, r5
 800108a:	f7ff fa6d 	bl	8000568 <__aeabi_dmul>
 800108e:	4602      	mov	r2, r0
 8001090:	460b      	mov	r3, r1
 8001092:	4610      	mov	r0, r2
 8001094:	4619      	mov	r1, r3
 8001096:	f7ff fd29 	bl	8000aec <__aeabi_d2f>
 800109a:	4603      	mov	r3, r0
 800109c:	4a2f      	ldr	r2, [pc, #188]	; (800115c <halfcircle+0x134>)
 800109e:	6013      	str	r3, [r2, #0]
		y = radius * sin(i*2*3.14 / 360);
 80010a0:	6878      	ldr	r0, [r7, #4]
 80010a2:	f7ff f9f7 	bl	8000494 <__aeabi_i2d>
 80010a6:	4604      	mov	r4, r0
 80010a8:	460d      	mov	r5, r1
 80010aa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80010ae:	005b      	lsls	r3, r3, #1
 80010b0:	4618      	mov	r0, r3
 80010b2:	f7ff f9ef 	bl	8000494 <__aeabi_i2d>
 80010b6:	a326      	add	r3, pc, #152	; (adr r3, 8001150 <halfcircle+0x128>)
 80010b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010bc:	f7ff fa54 	bl	8000568 <__aeabi_dmul>
 80010c0:	4602      	mov	r2, r0
 80010c2:	460b      	mov	r3, r1
 80010c4:	4610      	mov	r0, r2
 80010c6:	4619      	mov	r1, r3
 80010c8:	f04f 0200 	mov.w	r2, #0
 80010cc:	4b22      	ldr	r3, [pc, #136]	; (8001158 <halfcircle+0x130>)
 80010ce:	f7ff fb75 	bl	80007bc <__aeabi_ddiv>
 80010d2:	4602      	mov	r2, r0
 80010d4:	460b      	mov	r3, r1
 80010d6:	ec43 2b17 	vmov	d7, r2, r3
 80010da:	eeb0 0a47 	vmov.f32	s0, s14
 80010de:	eef0 0a67 	vmov.f32	s1, s15
 80010e2:	f006 fb55 	bl	8007790 <sin>
 80010e6:	ec53 2b10 	vmov	r2, r3, d0
 80010ea:	4620      	mov	r0, r4
 80010ec:	4629      	mov	r1, r5
 80010ee:	f7ff fa3b 	bl	8000568 <__aeabi_dmul>
 80010f2:	4602      	mov	r2, r0
 80010f4:	460b      	mov	r3, r1
 80010f6:	4610      	mov	r0, r2
 80010f8:	4619      	mov	r1, r3
 80010fa:	f7ff fcf7 	bl	8000aec <__aeabi_d2f>
 80010fe:	4603      	mov	r3, r0
 8001100:	4a17      	ldr	r2, [pc, #92]	; (8001160 <halfcircle+0x138>)
 8001102:	6013      	str	r3, [r2, #0]
		step(x,y,1);
 8001104:	4b15      	ldr	r3, [pc, #84]	; (800115c <halfcircle+0x134>)
 8001106:	edd3 7a00 	vldr	s15, [r3]
 800110a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800110e:	4b14      	ldr	r3, [pc, #80]	; (8001160 <halfcircle+0x138>)
 8001110:	edd3 7a00 	vldr	s15, [r3]
 8001114:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001118:	2201      	movs	r2, #1
 800111a:	ee17 1a90 	vmov	r1, s15
 800111e:	ee17 0a10 	vmov	r0, s14
 8001122:	f7ff feb5 	bl	8000e90 <step>
	for (int16_t i=90; i<n; i+=5) {
 8001126:	89fb      	ldrh	r3, [r7, #14]
 8001128:	3305      	adds	r3, #5
 800112a:	b29b      	uxth	r3, r3
 800112c:	81fb      	strh	r3, [r7, #14]
 800112e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001132:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001136:	429a      	cmp	r2, r3
 8001138:	db80      	blt.n	800103c <halfcircle+0x14>
	}
	step(0, 0, 0);
 800113a:	2200      	movs	r2, #0
 800113c:	2100      	movs	r1, #0
 800113e:	2000      	movs	r0, #0
 8001140:	f7ff fea6 	bl	8000e90 <step>
}
 8001144:	bf00      	nop
 8001146:	3710      	adds	r7, #16
 8001148:	46bd      	mov	sp, r7
 800114a:	bdb0      	pop	{r4, r5, r7, pc}
 800114c:	f3af 8000 	nop.w
 8001150:	51eb851f 	.word	0x51eb851f
 8001154:	40091eb8 	.word	0x40091eb8
 8001158:	40768000 	.word	0x40768000
 800115c:	20000138 	.word	0x20000138
 8001160:	2000013c 	.word	0x2000013c

08001164 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001168:	f000 fa5e 	bl	8001628 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800116c:	f000 f850 	bl	8001210 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001170:	f000 f8b8 	bl	80012e4 <MX_GPIO_Init>
	MX_USB_DEVICE_Init();
 8001174:	f005 fe44 	bl	8006e00 <MX_USB_DEVICE_Init>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		if (HAL_GPIO_ReadPin(USER_Btn_GPIO_Port, USER_Btn_Pin)==1) {
 8001178:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800117c:	4823      	ldr	r0, [pc, #140]	; (800120c <main+0xa8>)
 800117e:	f000 fda7 	bl	8001cd0 <HAL_GPIO_ReadPin>
 8001182:	4603      	mov	r3, r0
 8001184:	2b01      	cmp	r3, #1
 8001186:	d1f7      	bne.n	8001178 <main+0x14>
			//step(10, -3, 1);
			//step(0, 0, 0);

			circle(10);
 8001188:	200a      	movs	r0, #10
 800118a:	f7ff fead 	bl	8000ee8 <circle>
			step(0, 0, 0);
 800118e:	2200      	movs	r2, #0
 8001190:	2100      	movs	r1, #0
 8001192:	2000      	movs	r0, #0
 8001194:	f7ff fe7c 	bl	8000e90 <step>

			step(-40, 40, 0);
 8001198:	2200      	movs	r2, #0
 800119a:	2128      	movs	r1, #40	; 0x28
 800119c:	f06f 0027 	mvn.w	r0, #39	; 0x27
 80011a0:	f7ff fe76 	bl	8000e90 <step>
			circle(3);
 80011a4:	2003      	movs	r0, #3
 80011a6:	f7ff fe9f 	bl	8000ee8 <circle>
			step(0, 0, 0);
 80011aa:	2200      	movs	r2, #0
 80011ac:	2100      	movs	r1, #0
 80011ae:	2000      	movs	r0, #0
 80011b0:	f7ff fe6e 	bl	8000e90 <step>

			step(80, 0, 0);
 80011b4:	2200      	movs	r2, #0
 80011b6:	2100      	movs	r1, #0
 80011b8:	2050      	movs	r0, #80	; 0x50
 80011ba:	f7ff fe69 	bl	8000e90 <step>
			circle(3);
 80011be:	2003      	movs	r0, #3
 80011c0:	f7ff fe92 	bl	8000ee8 <circle>
			step(0, 0, 0);
 80011c4:	2200      	movs	r2, #0
 80011c6:	2100      	movs	r1, #0
 80011c8:	2000      	movs	r0, #0
 80011ca:	f7ff fe61 	bl	8000e90 <step>

			step(-40, 0, 1);
 80011ce:	2201      	movs	r2, #1
 80011d0:	2100      	movs	r1, #0
 80011d2:	f06f 0027 	mvn.w	r0, #39	; 0x27
 80011d6:	f7ff fe5b 	bl	8000e90 <step>
			step(0, 20,1);
 80011da:	2201      	movs	r2, #1
 80011dc:	2114      	movs	r1, #20
 80011de:	2000      	movs	r0, #0
 80011e0:	f7ff fe56 	bl	8000e90 <step>
			step(0, 0, 0);
 80011e4:	2200      	movs	r2, #0
 80011e6:	2100      	movs	r1, #0
 80011e8:	2000      	movs	r0, #0
 80011ea:	f7ff fe51 	bl	8000e90 <step>

			step(20, 30, 1);
 80011ee:	2201      	movs	r2, #1
 80011f0:	211e      	movs	r1, #30
 80011f2:	2014      	movs	r0, #20
 80011f4:	f7ff fe4c 	bl	8000e90 <step>
			halfcircle(5);
 80011f8:	2005      	movs	r0, #5
 80011fa:	f7ff ff15 	bl	8001028 <halfcircle>
			step(0, 0, 0);
 80011fe:	2200      	movs	r2, #0
 8001200:	2100      	movs	r1, #0
 8001202:	2000      	movs	r0, #0
 8001204:	f7ff fe44 	bl	8000e90 <step>
		if (HAL_GPIO_ReadPin(USER_Btn_GPIO_Port, USER_Btn_Pin)==1) {
 8001208:	e7b6      	b.n	8001178 <main+0x14>
 800120a:	bf00      	nop
 800120c:	40020800 	.word	0x40020800

08001210 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b094      	sub	sp, #80	; 0x50
 8001214:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001216:	f107 0320 	add.w	r3, r7, #32
 800121a:	2230      	movs	r2, #48	; 0x30
 800121c:	2100      	movs	r1, #0
 800121e:	4618      	mov	r0, r3
 8001220:	f006 fa58 	bl	80076d4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001224:	f107 030c 	add.w	r3, r7, #12
 8001228:	2200      	movs	r2, #0
 800122a:	601a      	str	r2, [r3, #0]
 800122c:	605a      	str	r2, [r3, #4]
 800122e:	609a      	str	r2, [r3, #8]
 8001230:	60da      	str	r2, [r3, #12]
 8001232:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001234:	2300      	movs	r3, #0
 8001236:	60bb      	str	r3, [r7, #8]
 8001238:	4b28      	ldr	r3, [pc, #160]	; (80012dc <SystemClock_Config+0xcc>)
 800123a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800123c:	4a27      	ldr	r2, [pc, #156]	; (80012dc <SystemClock_Config+0xcc>)
 800123e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001242:	6413      	str	r3, [r2, #64]	; 0x40
 8001244:	4b25      	ldr	r3, [pc, #148]	; (80012dc <SystemClock_Config+0xcc>)
 8001246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001248:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800124c:	60bb      	str	r3, [r7, #8]
 800124e:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001250:	2300      	movs	r3, #0
 8001252:	607b      	str	r3, [r7, #4]
 8001254:	4b22      	ldr	r3, [pc, #136]	; (80012e0 <SystemClock_Config+0xd0>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4a21      	ldr	r2, [pc, #132]	; (80012e0 <SystemClock_Config+0xd0>)
 800125a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800125e:	6013      	str	r3, [r2, #0]
 8001260:	4b1f      	ldr	r3, [pc, #124]	; (80012e0 <SystemClock_Config+0xd0>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001268:	607b      	str	r3, [r7, #4]
 800126a:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800126c:	2301      	movs	r3, #1
 800126e:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001270:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001274:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001276:	2302      	movs	r3, #2
 8001278:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800127a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800127e:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 4;
 8001280:	2304      	movs	r3, #4
 8001282:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 168;
 8001284:	23a8      	movs	r3, #168	; 0xa8
 8001286:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001288:	2302      	movs	r3, #2
 800128a:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 800128c:	2307      	movs	r3, #7
 800128e:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001290:	f107 0320 	add.w	r3, r7, #32
 8001294:	4618      	mov	r0, r3
 8001296:	f001 ffb1 	bl	80031fc <HAL_RCC_OscConfig>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d001      	beq.n	80012a4 <SystemClock_Config+0x94>
	{
		Error_Handler();
 80012a0:	f000 f924 	bl	80014ec <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012a4:	230f      	movs	r3, #15
 80012a6:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012a8:	2302      	movs	r3, #2
 80012aa:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012ac:	2300      	movs	r3, #0
 80012ae:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80012b0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80012b4:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80012b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012ba:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80012bc:	f107 030c 	add.w	r3, r7, #12
 80012c0:	2105      	movs	r1, #5
 80012c2:	4618      	mov	r0, r3
 80012c4:	f002 fa12 	bl	80036ec <HAL_RCC_ClockConfig>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d001      	beq.n	80012d2 <SystemClock_Config+0xc2>
	{
		Error_Handler();
 80012ce:	f000 f90d 	bl	80014ec <Error_Handler>
	}
}
 80012d2:	bf00      	nop
 80012d4:	3750      	adds	r7, #80	; 0x50
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	40023800 	.word	0x40023800
 80012e0:	40007000 	.word	0x40007000

080012e4 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b08c      	sub	sp, #48	; 0x30
 80012e8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ea:	f107 031c 	add.w	r3, r7, #28
 80012ee:	2200      	movs	r2, #0
 80012f0:	601a      	str	r2, [r3, #0]
 80012f2:	605a      	str	r2, [r3, #4]
 80012f4:	609a      	str	r2, [r3, #8]
 80012f6:	60da      	str	r2, [r3, #12]
 80012f8:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80012fa:	2300      	movs	r3, #0
 80012fc:	61bb      	str	r3, [r7, #24]
 80012fe:	4b75      	ldr	r3, [pc, #468]	; (80014d4 <MX_GPIO_Init+0x1f0>)
 8001300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001302:	4a74      	ldr	r2, [pc, #464]	; (80014d4 <MX_GPIO_Init+0x1f0>)
 8001304:	f043 0304 	orr.w	r3, r3, #4
 8001308:	6313      	str	r3, [r2, #48]	; 0x30
 800130a:	4b72      	ldr	r3, [pc, #456]	; (80014d4 <MX_GPIO_Init+0x1f0>)
 800130c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130e:	f003 0304 	and.w	r3, r3, #4
 8001312:	61bb      	str	r3, [r7, #24]
 8001314:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001316:	2300      	movs	r3, #0
 8001318:	617b      	str	r3, [r7, #20]
 800131a:	4b6e      	ldr	r3, [pc, #440]	; (80014d4 <MX_GPIO_Init+0x1f0>)
 800131c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131e:	4a6d      	ldr	r2, [pc, #436]	; (80014d4 <MX_GPIO_Init+0x1f0>)
 8001320:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001324:	6313      	str	r3, [r2, #48]	; 0x30
 8001326:	4b6b      	ldr	r3, [pc, #428]	; (80014d4 <MX_GPIO_Init+0x1f0>)
 8001328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800132e:	617b      	str	r3, [r7, #20]
 8001330:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001332:	2300      	movs	r3, #0
 8001334:	613b      	str	r3, [r7, #16]
 8001336:	4b67      	ldr	r3, [pc, #412]	; (80014d4 <MX_GPIO_Init+0x1f0>)
 8001338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133a:	4a66      	ldr	r2, [pc, #408]	; (80014d4 <MX_GPIO_Init+0x1f0>)
 800133c:	f043 0301 	orr.w	r3, r3, #1
 8001340:	6313      	str	r3, [r2, #48]	; 0x30
 8001342:	4b64      	ldr	r3, [pc, #400]	; (80014d4 <MX_GPIO_Init+0x1f0>)
 8001344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001346:	f003 0301 	and.w	r3, r3, #1
 800134a:	613b      	str	r3, [r7, #16]
 800134c:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800134e:	2300      	movs	r3, #0
 8001350:	60fb      	str	r3, [r7, #12]
 8001352:	4b60      	ldr	r3, [pc, #384]	; (80014d4 <MX_GPIO_Init+0x1f0>)
 8001354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001356:	4a5f      	ldr	r2, [pc, #380]	; (80014d4 <MX_GPIO_Init+0x1f0>)
 8001358:	f043 0302 	orr.w	r3, r3, #2
 800135c:	6313      	str	r3, [r2, #48]	; 0x30
 800135e:	4b5d      	ldr	r3, [pc, #372]	; (80014d4 <MX_GPIO_Init+0x1f0>)
 8001360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001362:	f003 0302 	and.w	r3, r3, #2
 8001366:	60fb      	str	r3, [r7, #12]
 8001368:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800136a:	2300      	movs	r3, #0
 800136c:	60bb      	str	r3, [r7, #8]
 800136e:	4b59      	ldr	r3, [pc, #356]	; (80014d4 <MX_GPIO_Init+0x1f0>)
 8001370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001372:	4a58      	ldr	r2, [pc, #352]	; (80014d4 <MX_GPIO_Init+0x1f0>)
 8001374:	f043 0308 	orr.w	r3, r3, #8
 8001378:	6313      	str	r3, [r2, #48]	; 0x30
 800137a:	4b56      	ldr	r3, [pc, #344]	; (80014d4 <MX_GPIO_Init+0x1f0>)
 800137c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137e:	f003 0308 	and.w	r3, r3, #8
 8001382:	60bb      	str	r3, [r7, #8]
 8001384:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8001386:	2300      	movs	r3, #0
 8001388:	607b      	str	r3, [r7, #4]
 800138a:	4b52      	ldr	r3, [pc, #328]	; (80014d4 <MX_GPIO_Init+0x1f0>)
 800138c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138e:	4a51      	ldr	r2, [pc, #324]	; (80014d4 <MX_GPIO_Init+0x1f0>)
 8001390:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001394:	6313      	str	r3, [r2, #48]	; 0x30
 8001396:	4b4f      	ldr	r3, [pc, #316]	; (80014d4 <MX_GPIO_Init+0x1f0>)
 8001398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800139e:	607b      	str	r3, [r7, #4]
 80013a0:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80013a2:	2200      	movs	r2, #0
 80013a4:	f244 0181 	movw	r1, #16513	; 0x4081
 80013a8:	484b      	ldr	r0, [pc, #300]	; (80014d8 <MX_GPIO_Init+0x1f4>)
 80013aa:	f000 fca9 	bl	8001d00 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80013ae:	2200      	movs	r2, #0
 80013b0:	2140      	movs	r1, #64	; 0x40
 80013b2:	484a      	ldr	r0, [pc, #296]	; (80014dc <MX_GPIO_Init+0x1f8>)
 80013b4:	f000 fca4 	bl	8001d00 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : USER_Btn_Pin */
	GPIO_InitStruct.Pin = USER_Btn_Pin;
 80013b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013bc:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013be:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80013c2:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c4:	2300      	movs	r3, #0
 80013c6:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80013c8:	f107 031c 	add.w	r3, r7, #28
 80013cc:	4619      	mov	r1, r3
 80013ce:	4844      	ldr	r0, [pc, #272]	; (80014e0 <MX_GPIO_Init+0x1fc>)
 80013d0:	f000 fad2 	bl	8001978 <HAL_GPIO_Init>

	/*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
	GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80013d4:	2332      	movs	r3, #50	; 0x32
 80013d6:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013d8:	2302      	movs	r3, #2
 80013da:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013dc:	2300      	movs	r3, #0
 80013de:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013e0:	2303      	movs	r3, #3
 80013e2:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80013e4:	230b      	movs	r3, #11
 80013e6:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013e8:	f107 031c 	add.w	r3, r7, #28
 80013ec:	4619      	mov	r1, r3
 80013ee:	483c      	ldr	r0, [pc, #240]	; (80014e0 <MX_GPIO_Init+0x1fc>)
 80013f0:	f000 fac2 	bl	8001978 <HAL_GPIO_Init>

	/*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
	GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80013f4:	2386      	movs	r3, #134	; 0x86
 80013f6:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013f8:	2302      	movs	r3, #2
 80013fa:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fc:	2300      	movs	r3, #0
 80013fe:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001400:	2303      	movs	r3, #3
 8001402:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001404:	230b      	movs	r3, #11
 8001406:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001408:	f107 031c 	add.w	r3, r7, #28
 800140c:	4619      	mov	r1, r3
 800140e:	4835      	ldr	r0, [pc, #212]	; (80014e4 <MX_GPIO_Init+0x200>)
 8001410:	f000 fab2 	bl	8001978 <HAL_GPIO_Init>

	/*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
	GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001414:	f244 0381 	movw	r3, #16513	; 0x4081
 8001418:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800141a:	2301      	movs	r3, #1
 800141c:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141e:	2300      	movs	r3, #0
 8001420:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001422:	2300      	movs	r3, #0
 8001424:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001426:	f107 031c 	add.w	r3, r7, #28
 800142a:	4619      	mov	r1, r3
 800142c:	482a      	ldr	r0, [pc, #168]	; (80014d8 <MX_GPIO_Init+0x1f4>)
 800142e:	f000 faa3 	bl	8001978 <HAL_GPIO_Init>

	/*Configure GPIO pin : RMII_TXD1_Pin */
	GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001432:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001436:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001438:	2302      	movs	r3, #2
 800143a:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143c:	2300      	movs	r3, #0
 800143e:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001440:	2303      	movs	r3, #3
 8001442:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001444:	230b      	movs	r3, #11
 8001446:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001448:	f107 031c 	add.w	r3, r7, #28
 800144c:	4619      	mov	r1, r3
 800144e:	4822      	ldr	r0, [pc, #136]	; (80014d8 <MX_GPIO_Init+0x1f4>)
 8001450:	f000 fa92 	bl	8001978 <HAL_GPIO_Init>

	/*Configure GPIO pins : STLK_RX_Pin STLK_TX_Pin */
	GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001454:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001458:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800145a:	2302      	movs	r3, #2
 800145c:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145e:	2300      	movs	r3, #0
 8001460:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001462:	2303      	movs	r3, #3
 8001464:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001466:	2307      	movs	r3, #7
 8001468:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800146a:	f107 031c 	add.w	r3, r7, #28
 800146e:	4619      	mov	r1, r3
 8001470:	481d      	ldr	r0, [pc, #116]	; (80014e8 <MX_GPIO_Init+0x204>)
 8001472:	f000 fa81 	bl	8001978 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_PowerSwitchOn_Pin */
	GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001476:	2340      	movs	r3, #64	; 0x40
 8001478:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800147a:	2301      	movs	r3, #1
 800147c:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147e:	2300      	movs	r3, #0
 8001480:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001482:	2300      	movs	r3, #0
 8001484:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001486:	f107 031c 	add.w	r3, r7, #28
 800148a:	4619      	mov	r1, r3
 800148c:	4813      	ldr	r0, [pc, #76]	; (80014dc <MX_GPIO_Init+0x1f8>)
 800148e:	f000 fa73 	bl	8001978 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_OverCurrent_Pin */
	GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001492:	2380      	movs	r3, #128	; 0x80
 8001494:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001496:	2300      	movs	r3, #0
 8001498:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149a:	2300      	movs	r3, #0
 800149c:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800149e:	f107 031c 	add.w	r3, r7, #28
 80014a2:	4619      	mov	r1, r3
 80014a4:	480d      	ldr	r0, [pc, #52]	; (80014dc <MX_GPIO_Init+0x1f8>)
 80014a6:	f000 fa67 	bl	8001978 <HAL_GPIO_Init>

	/*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
	GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80014aa:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80014ae:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b0:	2302      	movs	r3, #2
 80014b2:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b4:	2300      	movs	r3, #0
 80014b6:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014b8:	2303      	movs	r3, #3
 80014ba:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80014bc:	230b      	movs	r3, #11
 80014be:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80014c0:	f107 031c 	add.w	r3, r7, #28
 80014c4:	4619      	mov	r1, r3
 80014c6:	4805      	ldr	r0, [pc, #20]	; (80014dc <MX_GPIO_Init+0x1f8>)
 80014c8:	f000 fa56 	bl	8001978 <HAL_GPIO_Init>

}
 80014cc:	bf00      	nop
 80014ce:	3730      	adds	r7, #48	; 0x30
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	40023800 	.word	0x40023800
 80014d8:	40020400 	.word	0x40020400
 80014dc:	40021800 	.word	0x40021800
 80014e0:	40020800 	.word	0x40020800
 80014e4:	40020000 	.word	0x40020000
 80014e8:	40020c00 	.word	0x40020c00

080014ec <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014f0:	b672      	cpsid	i
}
 80014f2:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80014f4:	e7fe      	b.n	80014f4 <Error_Handler+0x8>
	...

080014f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b083      	sub	sp, #12
 80014fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014fe:	2300      	movs	r3, #0
 8001500:	607b      	str	r3, [r7, #4]
 8001502:	4b10      	ldr	r3, [pc, #64]	; (8001544 <HAL_MspInit+0x4c>)
 8001504:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001506:	4a0f      	ldr	r2, [pc, #60]	; (8001544 <HAL_MspInit+0x4c>)
 8001508:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800150c:	6453      	str	r3, [r2, #68]	; 0x44
 800150e:	4b0d      	ldr	r3, [pc, #52]	; (8001544 <HAL_MspInit+0x4c>)
 8001510:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001512:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001516:	607b      	str	r3, [r7, #4]
 8001518:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800151a:	2300      	movs	r3, #0
 800151c:	603b      	str	r3, [r7, #0]
 800151e:	4b09      	ldr	r3, [pc, #36]	; (8001544 <HAL_MspInit+0x4c>)
 8001520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001522:	4a08      	ldr	r2, [pc, #32]	; (8001544 <HAL_MspInit+0x4c>)
 8001524:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001528:	6413      	str	r3, [r2, #64]	; 0x40
 800152a:	4b06      	ldr	r3, [pc, #24]	; (8001544 <HAL_MspInit+0x4c>)
 800152c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800152e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001532:	603b      	str	r3, [r7, #0]
 8001534:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001536:	bf00      	nop
 8001538:	370c      	adds	r7, #12
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr
 8001542:	bf00      	nop
 8001544:	40023800 	.word	0x40023800

08001548 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800154c:	e7fe      	b.n	800154c <NMI_Handler+0x4>

0800154e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800154e:	b480      	push	{r7}
 8001550:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001552:	e7fe      	b.n	8001552 <HardFault_Handler+0x4>

08001554 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001558:	e7fe      	b.n	8001558 <MemManage_Handler+0x4>

0800155a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800155a:	b480      	push	{r7}
 800155c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800155e:	e7fe      	b.n	800155e <BusFault_Handler+0x4>

08001560 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001564:	e7fe      	b.n	8001564 <UsageFault_Handler+0x4>

08001566 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001566:	b480      	push	{r7}
 8001568:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800156a:	bf00      	nop
 800156c:	46bd      	mov	sp, r7
 800156e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001572:	4770      	bx	lr

08001574 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001574:	b480      	push	{r7}
 8001576:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001578:	bf00      	nop
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr

08001582 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001582:	b480      	push	{r7}
 8001584:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001586:	bf00      	nop
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr

08001590 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001594:	f000 f89a 	bl	80016cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001598:	bf00      	nop
 800159a:	bd80      	pop	{r7, pc}

0800159c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80015a0:	4802      	ldr	r0, [pc, #8]	; (80015ac <OTG_FS_IRQHandler+0x10>)
 80015a2:	f000 fd16 	bl	8001fd2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80015a6:	bf00      	nop
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	20000624 	.word	0x20000624

080015b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015b4:	4b06      	ldr	r3, [pc, #24]	; (80015d0 <SystemInit+0x20>)
 80015b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015ba:	4a05      	ldr	r2, [pc, #20]	; (80015d0 <SystemInit+0x20>)
 80015bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015c4:	bf00      	nop
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr
 80015ce:	bf00      	nop
 80015d0:	e000ed00 	.word	0xe000ed00

080015d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80015d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800160c <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80015d8:	480d      	ldr	r0, [pc, #52]	; (8001610 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80015da:	490e      	ldr	r1, [pc, #56]	; (8001614 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80015dc:	4a0e      	ldr	r2, [pc, #56]	; (8001618 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80015de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015e0:	e002      	b.n	80015e8 <LoopCopyDataInit>

080015e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015e6:	3304      	adds	r3, #4

080015e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015ec:	d3f9      	bcc.n	80015e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015ee:	4a0b      	ldr	r2, [pc, #44]	; (800161c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80015f0:	4c0b      	ldr	r4, [pc, #44]	; (8001620 <LoopFillZerobss+0x26>)
  movs r3, #0
 80015f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015f4:	e001      	b.n	80015fa <LoopFillZerobss>

080015f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015f8:	3204      	adds	r2, #4

080015fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015fc:	d3fb      	bcc.n	80015f6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80015fe:	f7ff ffd7 	bl	80015b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001602:	f006 f843 	bl	800768c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001606:	f7ff fdad 	bl	8001164 <main>
  bx  lr    
 800160a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800160c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001610:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001614:	2000011c 	.word	0x2000011c
  ldr r2, =_sidata
 8001618:	08008a80 	.word	0x08008a80
  ldr r2, =_sbss
 800161c:	2000011c 	.word	0x2000011c
  ldr r4, =_ebss
 8001620:	20000b44 	.word	0x20000b44

08001624 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001624:	e7fe      	b.n	8001624 <ADC_IRQHandler>
	...

08001628 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800162c:	4b0e      	ldr	r3, [pc, #56]	; (8001668 <HAL_Init+0x40>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a0d      	ldr	r2, [pc, #52]	; (8001668 <HAL_Init+0x40>)
 8001632:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001636:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001638:	4b0b      	ldr	r3, [pc, #44]	; (8001668 <HAL_Init+0x40>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4a0a      	ldr	r2, [pc, #40]	; (8001668 <HAL_Init+0x40>)
 800163e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001642:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001644:	4b08      	ldr	r3, [pc, #32]	; (8001668 <HAL_Init+0x40>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a07      	ldr	r2, [pc, #28]	; (8001668 <HAL_Init+0x40>)
 800164a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800164e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001650:	2003      	movs	r0, #3
 8001652:	f000 f94f 	bl	80018f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001656:	2000      	movs	r0, #0
 8001658:	f000 f808 	bl	800166c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800165c:	f7ff ff4c 	bl	80014f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001660:	2300      	movs	r3, #0
}
 8001662:	4618      	mov	r0, r3
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	40023c00 	.word	0x40023c00

0800166c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b082      	sub	sp, #8
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001674:	4b12      	ldr	r3, [pc, #72]	; (80016c0 <HAL_InitTick+0x54>)
 8001676:	681a      	ldr	r2, [r3, #0]
 8001678:	4b12      	ldr	r3, [pc, #72]	; (80016c4 <HAL_InitTick+0x58>)
 800167a:	781b      	ldrb	r3, [r3, #0]
 800167c:	4619      	mov	r1, r3
 800167e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001682:	fbb3 f3f1 	udiv	r3, r3, r1
 8001686:	fbb2 f3f3 	udiv	r3, r2, r3
 800168a:	4618      	mov	r0, r3
 800168c:	f000 f967 	bl	800195e <HAL_SYSTICK_Config>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d001      	beq.n	800169a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001696:	2301      	movs	r3, #1
 8001698:	e00e      	b.n	80016b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	2b0f      	cmp	r3, #15
 800169e:	d80a      	bhi.n	80016b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016a0:	2200      	movs	r2, #0
 80016a2:	6879      	ldr	r1, [r7, #4]
 80016a4:	f04f 30ff 	mov.w	r0, #4294967295
 80016a8:	f000 f92f 	bl	800190a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016ac:	4a06      	ldr	r2, [pc, #24]	; (80016c8 <HAL_InitTick+0x5c>)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016b2:	2300      	movs	r3, #0
 80016b4:	e000      	b.n	80016b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016b6:	2301      	movs	r3, #1
}
 80016b8:	4618      	mov	r0, r3
 80016ba:	3708      	adds	r7, #8
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	20000000 	.word	0x20000000
 80016c4:	20000008 	.word	0x20000008
 80016c8:	20000004 	.word	0x20000004

080016cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016cc:	b480      	push	{r7}
 80016ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016d0:	4b06      	ldr	r3, [pc, #24]	; (80016ec <HAL_IncTick+0x20>)
 80016d2:	781b      	ldrb	r3, [r3, #0]
 80016d4:	461a      	mov	r2, r3
 80016d6:	4b06      	ldr	r3, [pc, #24]	; (80016f0 <HAL_IncTick+0x24>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4413      	add	r3, r2
 80016dc:	4a04      	ldr	r2, [pc, #16]	; (80016f0 <HAL_IncTick+0x24>)
 80016de:	6013      	str	r3, [r2, #0]
}
 80016e0:	bf00      	nop
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr
 80016ea:	bf00      	nop
 80016ec:	20000008 	.word	0x20000008
 80016f0:	20000140 	.word	0x20000140

080016f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0
  return uwTick;
 80016f8:	4b03      	ldr	r3, [pc, #12]	; (8001708 <HAL_GetTick+0x14>)
 80016fa:	681b      	ldr	r3, [r3, #0]
}
 80016fc:	4618      	mov	r0, r3
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr
 8001706:	bf00      	nop
 8001708:	20000140 	.word	0x20000140

0800170c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b084      	sub	sp, #16
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001714:	f7ff ffee 	bl	80016f4 <HAL_GetTick>
 8001718:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001724:	d005      	beq.n	8001732 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001726:	4b0a      	ldr	r3, [pc, #40]	; (8001750 <HAL_Delay+0x44>)
 8001728:	781b      	ldrb	r3, [r3, #0]
 800172a:	461a      	mov	r2, r3
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	4413      	add	r3, r2
 8001730:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001732:	bf00      	nop
 8001734:	f7ff ffde 	bl	80016f4 <HAL_GetTick>
 8001738:	4602      	mov	r2, r0
 800173a:	68bb      	ldr	r3, [r7, #8]
 800173c:	1ad3      	subs	r3, r2, r3
 800173e:	68fa      	ldr	r2, [r7, #12]
 8001740:	429a      	cmp	r2, r3
 8001742:	d8f7      	bhi.n	8001734 <HAL_Delay+0x28>
  {
  }
}
 8001744:	bf00      	nop
 8001746:	bf00      	nop
 8001748:	3710      	adds	r7, #16
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	20000008 	.word	0x20000008

08001754 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001754:	b480      	push	{r7}
 8001756:	b085      	sub	sp, #20
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	f003 0307 	and.w	r3, r3, #7
 8001762:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001764:	4b0c      	ldr	r3, [pc, #48]	; (8001798 <__NVIC_SetPriorityGrouping+0x44>)
 8001766:	68db      	ldr	r3, [r3, #12]
 8001768:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800176a:	68ba      	ldr	r2, [r7, #8]
 800176c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001770:	4013      	ands	r3, r2
 8001772:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001778:	68bb      	ldr	r3, [r7, #8]
 800177a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800177c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001780:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001784:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001786:	4a04      	ldr	r2, [pc, #16]	; (8001798 <__NVIC_SetPriorityGrouping+0x44>)
 8001788:	68bb      	ldr	r3, [r7, #8]
 800178a:	60d3      	str	r3, [r2, #12]
}
 800178c:	bf00      	nop
 800178e:	3714      	adds	r7, #20
 8001790:	46bd      	mov	sp, r7
 8001792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001796:	4770      	bx	lr
 8001798:	e000ed00 	.word	0xe000ed00

0800179c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017a0:	4b04      	ldr	r3, [pc, #16]	; (80017b4 <__NVIC_GetPriorityGrouping+0x18>)
 80017a2:	68db      	ldr	r3, [r3, #12]
 80017a4:	0a1b      	lsrs	r3, r3, #8
 80017a6:	f003 0307 	and.w	r3, r3, #7
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	46bd      	mov	sp, r7
 80017ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b2:	4770      	bx	lr
 80017b4:	e000ed00 	.word	0xe000ed00

080017b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b083      	sub	sp, #12
 80017bc:	af00      	add	r7, sp, #0
 80017be:	4603      	mov	r3, r0
 80017c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	db0b      	blt.n	80017e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017ca:	79fb      	ldrb	r3, [r7, #7]
 80017cc:	f003 021f 	and.w	r2, r3, #31
 80017d0:	4907      	ldr	r1, [pc, #28]	; (80017f0 <__NVIC_EnableIRQ+0x38>)
 80017d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017d6:	095b      	lsrs	r3, r3, #5
 80017d8:	2001      	movs	r0, #1
 80017da:	fa00 f202 	lsl.w	r2, r0, r2
 80017de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80017e2:	bf00      	nop
 80017e4:	370c      	adds	r7, #12
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr
 80017ee:	bf00      	nop
 80017f0:	e000e100 	.word	0xe000e100

080017f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b083      	sub	sp, #12
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	4603      	mov	r3, r0
 80017fc:	6039      	str	r1, [r7, #0]
 80017fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001800:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001804:	2b00      	cmp	r3, #0
 8001806:	db0a      	blt.n	800181e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	b2da      	uxtb	r2, r3
 800180c:	490c      	ldr	r1, [pc, #48]	; (8001840 <__NVIC_SetPriority+0x4c>)
 800180e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001812:	0112      	lsls	r2, r2, #4
 8001814:	b2d2      	uxtb	r2, r2
 8001816:	440b      	add	r3, r1
 8001818:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800181c:	e00a      	b.n	8001834 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	b2da      	uxtb	r2, r3
 8001822:	4908      	ldr	r1, [pc, #32]	; (8001844 <__NVIC_SetPriority+0x50>)
 8001824:	79fb      	ldrb	r3, [r7, #7]
 8001826:	f003 030f 	and.w	r3, r3, #15
 800182a:	3b04      	subs	r3, #4
 800182c:	0112      	lsls	r2, r2, #4
 800182e:	b2d2      	uxtb	r2, r2
 8001830:	440b      	add	r3, r1
 8001832:	761a      	strb	r2, [r3, #24]
}
 8001834:	bf00      	nop
 8001836:	370c      	adds	r7, #12
 8001838:	46bd      	mov	sp, r7
 800183a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183e:	4770      	bx	lr
 8001840:	e000e100 	.word	0xe000e100
 8001844:	e000ed00 	.word	0xe000ed00

08001848 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001848:	b480      	push	{r7}
 800184a:	b089      	sub	sp, #36	; 0x24
 800184c:	af00      	add	r7, sp, #0
 800184e:	60f8      	str	r0, [r7, #12]
 8001850:	60b9      	str	r1, [r7, #8]
 8001852:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	f003 0307 	and.w	r3, r3, #7
 800185a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800185c:	69fb      	ldr	r3, [r7, #28]
 800185e:	f1c3 0307 	rsb	r3, r3, #7
 8001862:	2b04      	cmp	r3, #4
 8001864:	bf28      	it	cs
 8001866:	2304      	movcs	r3, #4
 8001868:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800186a:	69fb      	ldr	r3, [r7, #28]
 800186c:	3304      	adds	r3, #4
 800186e:	2b06      	cmp	r3, #6
 8001870:	d902      	bls.n	8001878 <NVIC_EncodePriority+0x30>
 8001872:	69fb      	ldr	r3, [r7, #28]
 8001874:	3b03      	subs	r3, #3
 8001876:	e000      	b.n	800187a <NVIC_EncodePriority+0x32>
 8001878:	2300      	movs	r3, #0
 800187a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800187c:	f04f 32ff 	mov.w	r2, #4294967295
 8001880:	69bb      	ldr	r3, [r7, #24]
 8001882:	fa02 f303 	lsl.w	r3, r2, r3
 8001886:	43da      	mvns	r2, r3
 8001888:	68bb      	ldr	r3, [r7, #8]
 800188a:	401a      	ands	r2, r3
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001890:	f04f 31ff 	mov.w	r1, #4294967295
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	fa01 f303 	lsl.w	r3, r1, r3
 800189a:	43d9      	mvns	r1, r3
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018a0:	4313      	orrs	r3, r2
         );
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	3724      	adds	r7, #36	; 0x24
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr
	...

080018b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b082      	sub	sp, #8
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	3b01      	subs	r3, #1
 80018bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018c0:	d301      	bcc.n	80018c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018c2:	2301      	movs	r3, #1
 80018c4:	e00f      	b.n	80018e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018c6:	4a0a      	ldr	r2, [pc, #40]	; (80018f0 <SysTick_Config+0x40>)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	3b01      	subs	r3, #1
 80018cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018ce:	210f      	movs	r1, #15
 80018d0:	f04f 30ff 	mov.w	r0, #4294967295
 80018d4:	f7ff ff8e 	bl	80017f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018d8:	4b05      	ldr	r3, [pc, #20]	; (80018f0 <SysTick_Config+0x40>)
 80018da:	2200      	movs	r2, #0
 80018dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018de:	4b04      	ldr	r3, [pc, #16]	; (80018f0 <SysTick_Config+0x40>)
 80018e0:	2207      	movs	r2, #7
 80018e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018e4:	2300      	movs	r3, #0
}
 80018e6:	4618      	mov	r0, r3
 80018e8:	3708      	adds	r7, #8
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	e000e010 	.word	0xe000e010

080018f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b082      	sub	sp, #8
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018fc:	6878      	ldr	r0, [r7, #4]
 80018fe:	f7ff ff29 	bl	8001754 <__NVIC_SetPriorityGrouping>
}
 8001902:	bf00      	nop
 8001904:	3708      	adds	r7, #8
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}

0800190a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800190a:	b580      	push	{r7, lr}
 800190c:	b086      	sub	sp, #24
 800190e:	af00      	add	r7, sp, #0
 8001910:	4603      	mov	r3, r0
 8001912:	60b9      	str	r1, [r7, #8]
 8001914:	607a      	str	r2, [r7, #4]
 8001916:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001918:	2300      	movs	r3, #0
 800191a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800191c:	f7ff ff3e 	bl	800179c <__NVIC_GetPriorityGrouping>
 8001920:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001922:	687a      	ldr	r2, [r7, #4]
 8001924:	68b9      	ldr	r1, [r7, #8]
 8001926:	6978      	ldr	r0, [r7, #20]
 8001928:	f7ff ff8e 	bl	8001848 <NVIC_EncodePriority>
 800192c:	4602      	mov	r2, r0
 800192e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001932:	4611      	mov	r1, r2
 8001934:	4618      	mov	r0, r3
 8001936:	f7ff ff5d 	bl	80017f4 <__NVIC_SetPriority>
}
 800193a:	bf00      	nop
 800193c:	3718      	adds	r7, #24
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}

08001942 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001942:	b580      	push	{r7, lr}
 8001944:	b082      	sub	sp, #8
 8001946:	af00      	add	r7, sp, #0
 8001948:	4603      	mov	r3, r0
 800194a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800194c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001950:	4618      	mov	r0, r3
 8001952:	f7ff ff31 	bl	80017b8 <__NVIC_EnableIRQ>
}
 8001956:	bf00      	nop
 8001958:	3708      	adds	r7, #8
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}

0800195e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800195e:	b580      	push	{r7, lr}
 8001960:	b082      	sub	sp, #8
 8001962:	af00      	add	r7, sp, #0
 8001964:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001966:	6878      	ldr	r0, [r7, #4]
 8001968:	f7ff ffa2 	bl	80018b0 <SysTick_Config>
 800196c:	4603      	mov	r3, r0
}
 800196e:	4618      	mov	r0, r3
 8001970:	3708      	adds	r7, #8
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}
	...

08001978 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001978:	b480      	push	{r7}
 800197a:	b089      	sub	sp, #36	; 0x24
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
 8001980:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001982:	2300      	movs	r3, #0
 8001984:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001986:	2300      	movs	r3, #0
 8001988:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800198a:	2300      	movs	r3, #0
 800198c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800198e:	2300      	movs	r3, #0
 8001990:	61fb      	str	r3, [r7, #28]
 8001992:	e177      	b.n	8001c84 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001994:	2201      	movs	r2, #1
 8001996:	69fb      	ldr	r3, [r7, #28]
 8001998:	fa02 f303 	lsl.w	r3, r2, r3
 800199c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	697a      	ldr	r2, [r7, #20]
 80019a4:	4013      	ands	r3, r2
 80019a6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80019a8:	693a      	ldr	r2, [r7, #16]
 80019aa:	697b      	ldr	r3, [r7, #20]
 80019ac:	429a      	cmp	r2, r3
 80019ae:	f040 8166 	bne.w	8001c7e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	f003 0303 	and.w	r3, r3, #3
 80019ba:	2b01      	cmp	r3, #1
 80019bc:	d005      	beq.n	80019ca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019c6:	2b02      	cmp	r3, #2
 80019c8:	d130      	bne.n	8001a2c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	689b      	ldr	r3, [r3, #8]
 80019ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80019d0:	69fb      	ldr	r3, [r7, #28]
 80019d2:	005b      	lsls	r3, r3, #1
 80019d4:	2203      	movs	r2, #3
 80019d6:	fa02 f303 	lsl.w	r3, r2, r3
 80019da:	43db      	mvns	r3, r3
 80019dc:	69ba      	ldr	r2, [r7, #24]
 80019de:	4013      	ands	r3, r2
 80019e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	68da      	ldr	r2, [r3, #12]
 80019e6:	69fb      	ldr	r3, [r7, #28]
 80019e8:	005b      	lsls	r3, r3, #1
 80019ea:	fa02 f303 	lsl.w	r3, r2, r3
 80019ee:	69ba      	ldr	r2, [r7, #24]
 80019f0:	4313      	orrs	r3, r2
 80019f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	69ba      	ldr	r2, [r7, #24]
 80019f8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a00:	2201      	movs	r2, #1
 8001a02:	69fb      	ldr	r3, [r7, #28]
 8001a04:	fa02 f303 	lsl.w	r3, r2, r3
 8001a08:	43db      	mvns	r3, r3
 8001a0a:	69ba      	ldr	r2, [r7, #24]
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	091b      	lsrs	r3, r3, #4
 8001a16:	f003 0201 	and.w	r2, r3, #1
 8001a1a:	69fb      	ldr	r3, [r7, #28]
 8001a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a20:	69ba      	ldr	r2, [r7, #24]
 8001a22:	4313      	orrs	r3, r2
 8001a24:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	69ba      	ldr	r2, [r7, #24]
 8001a2a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	f003 0303 	and.w	r3, r3, #3
 8001a34:	2b03      	cmp	r3, #3
 8001a36:	d017      	beq.n	8001a68 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	68db      	ldr	r3, [r3, #12]
 8001a3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a3e:	69fb      	ldr	r3, [r7, #28]
 8001a40:	005b      	lsls	r3, r3, #1
 8001a42:	2203      	movs	r2, #3
 8001a44:	fa02 f303 	lsl.w	r3, r2, r3
 8001a48:	43db      	mvns	r3, r3
 8001a4a:	69ba      	ldr	r2, [r7, #24]
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	689a      	ldr	r2, [r3, #8]
 8001a54:	69fb      	ldr	r3, [r7, #28]
 8001a56:	005b      	lsls	r3, r3, #1
 8001a58:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5c:	69ba      	ldr	r2, [r7, #24]
 8001a5e:	4313      	orrs	r3, r2
 8001a60:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	69ba      	ldr	r2, [r7, #24]
 8001a66:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	f003 0303 	and.w	r3, r3, #3
 8001a70:	2b02      	cmp	r3, #2
 8001a72:	d123      	bne.n	8001abc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a74:	69fb      	ldr	r3, [r7, #28]
 8001a76:	08da      	lsrs	r2, r3, #3
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	3208      	adds	r2, #8
 8001a7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a80:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a82:	69fb      	ldr	r3, [r7, #28]
 8001a84:	f003 0307 	and.w	r3, r3, #7
 8001a88:	009b      	lsls	r3, r3, #2
 8001a8a:	220f      	movs	r2, #15
 8001a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a90:	43db      	mvns	r3, r3
 8001a92:	69ba      	ldr	r2, [r7, #24]
 8001a94:	4013      	ands	r3, r2
 8001a96:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	691a      	ldr	r2, [r3, #16]
 8001a9c:	69fb      	ldr	r3, [r7, #28]
 8001a9e:	f003 0307 	and.w	r3, r3, #7
 8001aa2:	009b      	lsls	r3, r3, #2
 8001aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa8:	69ba      	ldr	r2, [r7, #24]
 8001aaa:	4313      	orrs	r3, r2
 8001aac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001aae:	69fb      	ldr	r3, [r7, #28]
 8001ab0:	08da      	lsrs	r2, r3, #3
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	3208      	adds	r2, #8
 8001ab6:	69b9      	ldr	r1, [r7, #24]
 8001ab8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001ac2:	69fb      	ldr	r3, [r7, #28]
 8001ac4:	005b      	lsls	r3, r3, #1
 8001ac6:	2203      	movs	r2, #3
 8001ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8001acc:	43db      	mvns	r3, r3
 8001ace:	69ba      	ldr	r2, [r7, #24]
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	f003 0203 	and.w	r2, r3, #3
 8001adc:	69fb      	ldr	r3, [r7, #28]
 8001ade:	005b      	lsls	r3, r3, #1
 8001ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae4:	69ba      	ldr	r2, [r7, #24]
 8001ae6:	4313      	orrs	r3, r2
 8001ae8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	69ba      	ldr	r2, [r7, #24]
 8001aee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	f000 80c0 	beq.w	8001c7e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001afe:	2300      	movs	r3, #0
 8001b00:	60fb      	str	r3, [r7, #12]
 8001b02:	4b66      	ldr	r3, [pc, #408]	; (8001c9c <HAL_GPIO_Init+0x324>)
 8001b04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b06:	4a65      	ldr	r2, [pc, #404]	; (8001c9c <HAL_GPIO_Init+0x324>)
 8001b08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b0c:	6453      	str	r3, [r2, #68]	; 0x44
 8001b0e:	4b63      	ldr	r3, [pc, #396]	; (8001c9c <HAL_GPIO_Init+0x324>)
 8001b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b16:	60fb      	str	r3, [r7, #12]
 8001b18:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b1a:	4a61      	ldr	r2, [pc, #388]	; (8001ca0 <HAL_GPIO_Init+0x328>)
 8001b1c:	69fb      	ldr	r3, [r7, #28]
 8001b1e:	089b      	lsrs	r3, r3, #2
 8001b20:	3302      	adds	r3, #2
 8001b22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b26:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b28:	69fb      	ldr	r3, [r7, #28]
 8001b2a:	f003 0303 	and.w	r3, r3, #3
 8001b2e:	009b      	lsls	r3, r3, #2
 8001b30:	220f      	movs	r2, #15
 8001b32:	fa02 f303 	lsl.w	r3, r2, r3
 8001b36:	43db      	mvns	r3, r3
 8001b38:	69ba      	ldr	r2, [r7, #24]
 8001b3a:	4013      	ands	r3, r2
 8001b3c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	4a58      	ldr	r2, [pc, #352]	; (8001ca4 <HAL_GPIO_Init+0x32c>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d037      	beq.n	8001bb6 <HAL_GPIO_Init+0x23e>
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	4a57      	ldr	r2, [pc, #348]	; (8001ca8 <HAL_GPIO_Init+0x330>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d031      	beq.n	8001bb2 <HAL_GPIO_Init+0x23a>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	4a56      	ldr	r2, [pc, #344]	; (8001cac <HAL_GPIO_Init+0x334>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d02b      	beq.n	8001bae <HAL_GPIO_Init+0x236>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	4a55      	ldr	r2, [pc, #340]	; (8001cb0 <HAL_GPIO_Init+0x338>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d025      	beq.n	8001baa <HAL_GPIO_Init+0x232>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	4a54      	ldr	r2, [pc, #336]	; (8001cb4 <HAL_GPIO_Init+0x33c>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d01f      	beq.n	8001ba6 <HAL_GPIO_Init+0x22e>
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	4a53      	ldr	r2, [pc, #332]	; (8001cb8 <HAL_GPIO_Init+0x340>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d019      	beq.n	8001ba2 <HAL_GPIO_Init+0x22a>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	4a52      	ldr	r2, [pc, #328]	; (8001cbc <HAL_GPIO_Init+0x344>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d013      	beq.n	8001b9e <HAL_GPIO_Init+0x226>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	4a51      	ldr	r2, [pc, #324]	; (8001cc0 <HAL_GPIO_Init+0x348>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d00d      	beq.n	8001b9a <HAL_GPIO_Init+0x222>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	4a50      	ldr	r2, [pc, #320]	; (8001cc4 <HAL_GPIO_Init+0x34c>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d007      	beq.n	8001b96 <HAL_GPIO_Init+0x21e>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	4a4f      	ldr	r2, [pc, #316]	; (8001cc8 <HAL_GPIO_Init+0x350>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d101      	bne.n	8001b92 <HAL_GPIO_Init+0x21a>
 8001b8e:	2309      	movs	r3, #9
 8001b90:	e012      	b.n	8001bb8 <HAL_GPIO_Init+0x240>
 8001b92:	230a      	movs	r3, #10
 8001b94:	e010      	b.n	8001bb8 <HAL_GPIO_Init+0x240>
 8001b96:	2308      	movs	r3, #8
 8001b98:	e00e      	b.n	8001bb8 <HAL_GPIO_Init+0x240>
 8001b9a:	2307      	movs	r3, #7
 8001b9c:	e00c      	b.n	8001bb8 <HAL_GPIO_Init+0x240>
 8001b9e:	2306      	movs	r3, #6
 8001ba0:	e00a      	b.n	8001bb8 <HAL_GPIO_Init+0x240>
 8001ba2:	2305      	movs	r3, #5
 8001ba4:	e008      	b.n	8001bb8 <HAL_GPIO_Init+0x240>
 8001ba6:	2304      	movs	r3, #4
 8001ba8:	e006      	b.n	8001bb8 <HAL_GPIO_Init+0x240>
 8001baa:	2303      	movs	r3, #3
 8001bac:	e004      	b.n	8001bb8 <HAL_GPIO_Init+0x240>
 8001bae:	2302      	movs	r3, #2
 8001bb0:	e002      	b.n	8001bb8 <HAL_GPIO_Init+0x240>
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e000      	b.n	8001bb8 <HAL_GPIO_Init+0x240>
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	69fa      	ldr	r2, [r7, #28]
 8001bba:	f002 0203 	and.w	r2, r2, #3
 8001bbe:	0092      	lsls	r2, r2, #2
 8001bc0:	4093      	lsls	r3, r2
 8001bc2:	69ba      	ldr	r2, [r7, #24]
 8001bc4:	4313      	orrs	r3, r2
 8001bc6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001bc8:	4935      	ldr	r1, [pc, #212]	; (8001ca0 <HAL_GPIO_Init+0x328>)
 8001bca:	69fb      	ldr	r3, [r7, #28]
 8001bcc:	089b      	lsrs	r3, r3, #2
 8001bce:	3302      	adds	r3, #2
 8001bd0:	69ba      	ldr	r2, [r7, #24]
 8001bd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001bd6:	4b3d      	ldr	r3, [pc, #244]	; (8001ccc <HAL_GPIO_Init+0x354>)
 8001bd8:	689b      	ldr	r3, [r3, #8]
 8001bda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bdc:	693b      	ldr	r3, [r7, #16]
 8001bde:	43db      	mvns	r3, r3
 8001be0:	69ba      	ldr	r2, [r7, #24]
 8001be2:	4013      	ands	r3, r2
 8001be4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d003      	beq.n	8001bfa <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001bf2:	69ba      	ldr	r2, [r7, #24]
 8001bf4:	693b      	ldr	r3, [r7, #16]
 8001bf6:	4313      	orrs	r3, r2
 8001bf8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001bfa:	4a34      	ldr	r2, [pc, #208]	; (8001ccc <HAL_GPIO_Init+0x354>)
 8001bfc:	69bb      	ldr	r3, [r7, #24]
 8001bfe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c00:	4b32      	ldr	r3, [pc, #200]	; (8001ccc <HAL_GPIO_Init+0x354>)
 8001c02:	68db      	ldr	r3, [r3, #12]
 8001c04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c06:	693b      	ldr	r3, [r7, #16]
 8001c08:	43db      	mvns	r3, r3
 8001c0a:	69ba      	ldr	r2, [r7, #24]
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d003      	beq.n	8001c24 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001c1c:	69ba      	ldr	r2, [r7, #24]
 8001c1e:	693b      	ldr	r3, [r7, #16]
 8001c20:	4313      	orrs	r3, r2
 8001c22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c24:	4a29      	ldr	r2, [pc, #164]	; (8001ccc <HAL_GPIO_Init+0x354>)
 8001c26:	69bb      	ldr	r3, [r7, #24]
 8001c28:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c2a:	4b28      	ldr	r3, [pc, #160]	; (8001ccc <HAL_GPIO_Init+0x354>)
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c30:	693b      	ldr	r3, [r7, #16]
 8001c32:	43db      	mvns	r3, r3
 8001c34:	69ba      	ldr	r2, [r7, #24]
 8001c36:	4013      	ands	r3, r2
 8001c38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d003      	beq.n	8001c4e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001c46:	69ba      	ldr	r2, [r7, #24]
 8001c48:	693b      	ldr	r3, [r7, #16]
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c4e:	4a1f      	ldr	r2, [pc, #124]	; (8001ccc <HAL_GPIO_Init+0x354>)
 8001c50:	69bb      	ldr	r3, [r7, #24]
 8001c52:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c54:	4b1d      	ldr	r3, [pc, #116]	; (8001ccc <HAL_GPIO_Init+0x354>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c5a:	693b      	ldr	r3, [r7, #16]
 8001c5c:	43db      	mvns	r3, r3
 8001c5e:	69ba      	ldr	r2, [r7, #24]
 8001c60:	4013      	ands	r3, r2
 8001c62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d003      	beq.n	8001c78 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001c70:	69ba      	ldr	r2, [r7, #24]
 8001c72:	693b      	ldr	r3, [r7, #16]
 8001c74:	4313      	orrs	r3, r2
 8001c76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c78:	4a14      	ldr	r2, [pc, #80]	; (8001ccc <HAL_GPIO_Init+0x354>)
 8001c7a:	69bb      	ldr	r3, [r7, #24]
 8001c7c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c7e:	69fb      	ldr	r3, [r7, #28]
 8001c80:	3301      	adds	r3, #1
 8001c82:	61fb      	str	r3, [r7, #28]
 8001c84:	69fb      	ldr	r3, [r7, #28]
 8001c86:	2b0f      	cmp	r3, #15
 8001c88:	f67f ae84 	bls.w	8001994 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c8c:	bf00      	nop
 8001c8e:	bf00      	nop
 8001c90:	3724      	adds	r7, #36	; 0x24
 8001c92:	46bd      	mov	sp, r7
 8001c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c98:	4770      	bx	lr
 8001c9a:	bf00      	nop
 8001c9c:	40023800 	.word	0x40023800
 8001ca0:	40013800 	.word	0x40013800
 8001ca4:	40020000 	.word	0x40020000
 8001ca8:	40020400 	.word	0x40020400
 8001cac:	40020800 	.word	0x40020800
 8001cb0:	40020c00 	.word	0x40020c00
 8001cb4:	40021000 	.word	0x40021000
 8001cb8:	40021400 	.word	0x40021400
 8001cbc:	40021800 	.word	0x40021800
 8001cc0:	40021c00 	.word	0x40021c00
 8001cc4:	40022000 	.word	0x40022000
 8001cc8:	40022400 	.word	0x40022400
 8001ccc:	40013c00 	.word	0x40013c00

08001cd0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b085      	sub	sp, #20
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
 8001cd8:	460b      	mov	r3, r1
 8001cda:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	691a      	ldr	r2, [r3, #16]
 8001ce0:	887b      	ldrh	r3, [r7, #2]
 8001ce2:	4013      	ands	r3, r2
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d002      	beq.n	8001cee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001ce8:	2301      	movs	r3, #1
 8001cea:	73fb      	strb	r3, [r7, #15]
 8001cec:	e001      	b.n	8001cf2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001cf2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	3714      	adds	r7, #20
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfe:	4770      	bx	lr

08001d00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b083      	sub	sp, #12
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
 8001d08:	460b      	mov	r3, r1
 8001d0a:	807b      	strh	r3, [r7, #2]
 8001d0c:	4613      	mov	r3, r2
 8001d0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d10:	787b      	ldrb	r3, [r7, #1]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d003      	beq.n	8001d1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d16:	887a      	ldrh	r2, [r7, #2]
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001d1c:	e003      	b.n	8001d26 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001d1e:	887b      	ldrh	r3, [r7, #2]
 8001d20:	041a      	lsls	r2, r3, #16
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	619a      	str	r2, [r3, #24]
}
 8001d26:	bf00      	nop
 8001d28:	370c      	adds	r7, #12
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr

08001d32 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001d32:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d34:	b08f      	sub	sp, #60	; 0x3c
 8001d36:	af0a      	add	r7, sp, #40	; 0x28
 8001d38:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d101      	bne.n	8001d44 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001d40:	2301      	movs	r3, #1
 8001d42:	e10f      	b.n	8001f64 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001d50:	b2db      	uxtb	r3, r3
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d106      	bne.n	8001d64 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2200      	movs	r2, #0
 8001d5a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001d5e:	6878      	ldr	r0, [r7, #4]
 8001d60:	f005 f984 	bl	800706c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2203      	movs	r2, #3
 8001d68:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001d6c:	68bb      	ldr	r3, [r7, #8]
 8001d6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d102      	bne.n	8001d7e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4618      	mov	r0, r3
 8001d84:	f001 ffbf 	bl	8003d06 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	603b      	str	r3, [r7, #0]
 8001d8e:	687e      	ldr	r6, [r7, #4]
 8001d90:	466d      	mov	r5, sp
 8001d92:	f106 0410 	add.w	r4, r6, #16
 8001d96:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d98:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d9a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d9c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d9e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001da2:	e885 0003 	stmia.w	r5, {r0, r1}
 8001da6:	1d33      	adds	r3, r6, #4
 8001da8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001daa:	6838      	ldr	r0, [r7, #0]
 8001dac:	f001 fe96 	bl	8003adc <USB_CoreInit>
 8001db0:	4603      	mov	r3, r0
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d005      	beq.n	8001dc2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2202      	movs	r2, #2
 8001dba:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	e0d0      	b.n	8001f64 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	2100      	movs	r1, #0
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f001 ffad 	bl	8003d28 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001dce:	2300      	movs	r3, #0
 8001dd0:	73fb      	strb	r3, [r7, #15]
 8001dd2:	e04a      	b.n	8001e6a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001dd4:	7bfa      	ldrb	r2, [r7, #15]
 8001dd6:	6879      	ldr	r1, [r7, #4]
 8001dd8:	4613      	mov	r3, r2
 8001dda:	00db      	lsls	r3, r3, #3
 8001ddc:	4413      	add	r3, r2
 8001dde:	009b      	lsls	r3, r3, #2
 8001de0:	440b      	add	r3, r1
 8001de2:	333d      	adds	r3, #61	; 0x3d
 8001de4:	2201      	movs	r2, #1
 8001de6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001de8:	7bfa      	ldrb	r2, [r7, #15]
 8001dea:	6879      	ldr	r1, [r7, #4]
 8001dec:	4613      	mov	r3, r2
 8001dee:	00db      	lsls	r3, r3, #3
 8001df0:	4413      	add	r3, r2
 8001df2:	009b      	lsls	r3, r3, #2
 8001df4:	440b      	add	r3, r1
 8001df6:	333c      	adds	r3, #60	; 0x3c
 8001df8:	7bfa      	ldrb	r2, [r7, #15]
 8001dfa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001dfc:	7bfa      	ldrb	r2, [r7, #15]
 8001dfe:	7bfb      	ldrb	r3, [r7, #15]
 8001e00:	b298      	uxth	r0, r3
 8001e02:	6879      	ldr	r1, [r7, #4]
 8001e04:	4613      	mov	r3, r2
 8001e06:	00db      	lsls	r3, r3, #3
 8001e08:	4413      	add	r3, r2
 8001e0a:	009b      	lsls	r3, r3, #2
 8001e0c:	440b      	add	r3, r1
 8001e0e:	3344      	adds	r3, #68	; 0x44
 8001e10:	4602      	mov	r2, r0
 8001e12:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001e14:	7bfa      	ldrb	r2, [r7, #15]
 8001e16:	6879      	ldr	r1, [r7, #4]
 8001e18:	4613      	mov	r3, r2
 8001e1a:	00db      	lsls	r3, r3, #3
 8001e1c:	4413      	add	r3, r2
 8001e1e:	009b      	lsls	r3, r3, #2
 8001e20:	440b      	add	r3, r1
 8001e22:	3340      	adds	r3, #64	; 0x40
 8001e24:	2200      	movs	r2, #0
 8001e26:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001e28:	7bfa      	ldrb	r2, [r7, #15]
 8001e2a:	6879      	ldr	r1, [r7, #4]
 8001e2c:	4613      	mov	r3, r2
 8001e2e:	00db      	lsls	r3, r3, #3
 8001e30:	4413      	add	r3, r2
 8001e32:	009b      	lsls	r3, r3, #2
 8001e34:	440b      	add	r3, r1
 8001e36:	3348      	adds	r3, #72	; 0x48
 8001e38:	2200      	movs	r2, #0
 8001e3a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001e3c:	7bfa      	ldrb	r2, [r7, #15]
 8001e3e:	6879      	ldr	r1, [r7, #4]
 8001e40:	4613      	mov	r3, r2
 8001e42:	00db      	lsls	r3, r3, #3
 8001e44:	4413      	add	r3, r2
 8001e46:	009b      	lsls	r3, r3, #2
 8001e48:	440b      	add	r3, r1
 8001e4a:	334c      	adds	r3, #76	; 0x4c
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001e50:	7bfa      	ldrb	r2, [r7, #15]
 8001e52:	6879      	ldr	r1, [r7, #4]
 8001e54:	4613      	mov	r3, r2
 8001e56:	00db      	lsls	r3, r3, #3
 8001e58:	4413      	add	r3, r2
 8001e5a:	009b      	lsls	r3, r3, #2
 8001e5c:	440b      	add	r3, r1
 8001e5e:	3354      	adds	r3, #84	; 0x54
 8001e60:	2200      	movs	r2, #0
 8001e62:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e64:	7bfb      	ldrb	r3, [r7, #15]
 8001e66:	3301      	adds	r3, #1
 8001e68:	73fb      	strb	r3, [r7, #15]
 8001e6a:	7bfa      	ldrb	r2, [r7, #15]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	429a      	cmp	r2, r3
 8001e72:	d3af      	bcc.n	8001dd4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e74:	2300      	movs	r3, #0
 8001e76:	73fb      	strb	r3, [r7, #15]
 8001e78:	e044      	b.n	8001f04 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001e7a:	7bfa      	ldrb	r2, [r7, #15]
 8001e7c:	6879      	ldr	r1, [r7, #4]
 8001e7e:	4613      	mov	r3, r2
 8001e80:	00db      	lsls	r3, r3, #3
 8001e82:	4413      	add	r3, r2
 8001e84:	009b      	lsls	r3, r3, #2
 8001e86:	440b      	add	r3, r1
 8001e88:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001e90:	7bfa      	ldrb	r2, [r7, #15]
 8001e92:	6879      	ldr	r1, [r7, #4]
 8001e94:	4613      	mov	r3, r2
 8001e96:	00db      	lsls	r3, r3, #3
 8001e98:	4413      	add	r3, r2
 8001e9a:	009b      	lsls	r3, r3, #2
 8001e9c:	440b      	add	r3, r1
 8001e9e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001ea2:	7bfa      	ldrb	r2, [r7, #15]
 8001ea4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001ea6:	7bfa      	ldrb	r2, [r7, #15]
 8001ea8:	6879      	ldr	r1, [r7, #4]
 8001eaa:	4613      	mov	r3, r2
 8001eac:	00db      	lsls	r3, r3, #3
 8001eae:	4413      	add	r3, r2
 8001eb0:	009b      	lsls	r3, r3, #2
 8001eb2:	440b      	add	r3, r1
 8001eb4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001eb8:	2200      	movs	r2, #0
 8001eba:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001ebc:	7bfa      	ldrb	r2, [r7, #15]
 8001ebe:	6879      	ldr	r1, [r7, #4]
 8001ec0:	4613      	mov	r3, r2
 8001ec2:	00db      	lsls	r3, r3, #3
 8001ec4:	4413      	add	r3, r2
 8001ec6:	009b      	lsls	r3, r3, #2
 8001ec8:	440b      	add	r3, r1
 8001eca:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001ece:	2200      	movs	r2, #0
 8001ed0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001ed2:	7bfa      	ldrb	r2, [r7, #15]
 8001ed4:	6879      	ldr	r1, [r7, #4]
 8001ed6:	4613      	mov	r3, r2
 8001ed8:	00db      	lsls	r3, r3, #3
 8001eda:	4413      	add	r3, r2
 8001edc:	009b      	lsls	r3, r3, #2
 8001ede:	440b      	add	r3, r1
 8001ee0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001ee8:	7bfa      	ldrb	r2, [r7, #15]
 8001eea:	6879      	ldr	r1, [r7, #4]
 8001eec:	4613      	mov	r3, r2
 8001eee:	00db      	lsls	r3, r3, #3
 8001ef0:	4413      	add	r3, r2
 8001ef2:	009b      	lsls	r3, r3, #2
 8001ef4:	440b      	add	r3, r1
 8001ef6:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001efa:	2200      	movs	r2, #0
 8001efc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001efe:	7bfb      	ldrb	r3, [r7, #15]
 8001f00:	3301      	adds	r3, #1
 8001f02:	73fb      	strb	r3, [r7, #15]
 8001f04:	7bfa      	ldrb	r2, [r7, #15]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	429a      	cmp	r2, r3
 8001f0c:	d3b5      	bcc.n	8001e7a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	603b      	str	r3, [r7, #0]
 8001f14:	687e      	ldr	r6, [r7, #4]
 8001f16:	466d      	mov	r5, sp
 8001f18:	f106 0410 	add.w	r4, r6, #16
 8001f1c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f1e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f20:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f22:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f24:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001f28:	e885 0003 	stmia.w	r5, {r0, r1}
 8001f2c:	1d33      	adds	r3, r6, #4
 8001f2e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f30:	6838      	ldr	r0, [r7, #0]
 8001f32:	f001 ff45 	bl	8003dc0 <USB_DevInit>
 8001f36:	4603      	mov	r3, r0
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d005      	beq.n	8001f48 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2202      	movs	r2, #2
 8001f40:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001f44:	2301      	movs	r3, #1
 8001f46:	e00d      	b.n	8001f64 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2201      	movs	r2, #1
 8001f54:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f003 f894 	bl	800508a <USB_DevDisconnect>

  return HAL_OK;
 8001f62:	2300      	movs	r3, #0
}
 8001f64:	4618      	mov	r0, r3
 8001f66:	3714      	adds	r7, #20
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001f6c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b084      	sub	sp, #16
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001f80:	2b01      	cmp	r3, #1
 8001f82:	d101      	bne.n	8001f88 <HAL_PCD_Start+0x1c>
 8001f84:	2302      	movs	r3, #2
 8001f86:	e020      	b.n	8001fca <HAL_PCD_Start+0x5e>
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f94:	2b01      	cmp	r3, #1
 8001f96:	d109      	bne.n	8001fac <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001f9c:	2b01      	cmp	r3, #1
 8001f9e:	d005      	beq.n	8001fac <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fa4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f001 fe97 	bl	8003ce4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f003 f844 	bl	8005048 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001fc8:	2300      	movs	r3, #0
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	3710      	adds	r7, #16
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}

08001fd2 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001fd2:	b590      	push	{r4, r7, lr}
 8001fd4:	b08d      	sub	sp, #52	; 0x34
 8001fd6:	af00      	add	r7, sp, #0
 8001fd8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001fe0:	6a3b      	ldr	r3, [r7, #32]
 8001fe2:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f003 f902 	bl	80051f2 <USB_GetMode>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	f040 848a 	bne.w	800290a <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f003 f866 	bl	80050cc <USB_ReadInterrupts>
 8002000:	4603      	mov	r3, r0
 8002002:	2b00      	cmp	r3, #0
 8002004:	f000 8480 	beq.w	8002908 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002008:	69fb      	ldr	r3, [r7, #28]
 800200a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800200e:	689b      	ldr	r3, [r3, #8]
 8002010:	0a1b      	lsrs	r3, r3, #8
 8002012:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4618      	mov	r0, r3
 8002022:	f003 f853 	bl	80050cc <USB_ReadInterrupts>
 8002026:	4603      	mov	r3, r0
 8002028:	f003 0302 	and.w	r3, r3, #2
 800202c:	2b02      	cmp	r3, #2
 800202e:	d107      	bne.n	8002040 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	695a      	ldr	r2, [r3, #20]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f002 0202 	and.w	r2, r2, #2
 800203e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4618      	mov	r0, r3
 8002046:	f003 f841 	bl	80050cc <USB_ReadInterrupts>
 800204a:	4603      	mov	r3, r0
 800204c:	f003 0310 	and.w	r3, r3, #16
 8002050:	2b10      	cmp	r3, #16
 8002052:	d161      	bne.n	8002118 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	699a      	ldr	r2, [r3, #24]
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f022 0210 	bic.w	r2, r2, #16
 8002062:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002064:	6a3b      	ldr	r3, [r7, #32]
 8002066:	6a1b      	ldr	r3, [r3, #32]
 8002068:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800206a:	69bb      	ldr	r3, [r7, #24]
 800206c:	f003 020f 	and.w	r2, r3, #15
 8002070:	4613      	mov	r3, r2
 8002072:	00db      	lsls	r3, r3, #3
 8002074:	4413      	add	r3, r2
 8002076:	009b      	lsls	r3, r3, #2
 8002078:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800207c:	687a      	ldr	r2, [r7, #4]
 800207e:	4413      	add	r3, r2
 8002080:	3304      	adds	r3, #4
 8002082:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002084:	69bb      	ldr	r3, [r7, #24]
 8002086:	0c5b      	lsrs	r3, r3, #17
 8002088:	f003 030f 	and.w	r3, r3, #15
 800208c:	2b02      	cmp	r3, #2
 800208e:	d124      	bne.n	80020da <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002090:	69ba      	ldr	r2, [r7, #24]
 8002092:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002096:	4013      	ands	r3, r2
 8002098:	2b00      	cmp	r3, #0
 800209a:	d035      	beq.n	8002108 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80020a0:	69bb      	ldr	r3, [r7, #24]
 80020a2:	091b      	lsrs	r3, r3, #4
 80020a4:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80020a6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80020aa:	b29b      	uxth	r3, r3
 80020ac:	461a      	mov	r2, r3
 80020ae:	6a38      	ldr	r0, [r7, #32]
 80020b0:	f002 fe78 	bl	8004da4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80020b4:	697b      	ldr	r3, [r7, #20]
 80020b6:	691a      	ldr	r2, [r3, #16]
 80020b8:	69bb      	ldr	r3, [r7, #24]
 80020ba:	091b      	lsrs	r3, r3, #4
 80020bc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80020c0:	441a      	add	r2, r3
 80020c2:	697b      	ldr	r3, [r7, #20]
 80020c4:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	6a1a      	ldr	r2, [r3, #32]
 80020ca:	69bb      	ldr	r3, [r7, #24]
 80020cc:	091b      	lsrs	r3, r3, #4
 80020ce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80020d2:	441a      	add	r2, r3
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	621a      	str	r2, [r3, #32]
 80020d8:	e016      	b.n	8002108 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80020da:	69bb      	ldr	r3, [r7, #24]
 80020dc:	0c5b      	lsrs	r3, r3, #17
 80020de:	f003 030f 	and.w	r3, r3, #15
 80020e2:	2b06      	cmp	r3, #6
 80020e4:	d110      	bne.n	8002108 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80020ec:	2208      	movs	r2, #8
 80020ee:	4619      	mov	r1, r3
 80020f0:	6a38      	ldr	r0, [r7, #32]
 80020f2:	f002 fe57 	bl	8004da4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80020f6:	697b      	ldr	r3, [r7, #20]
 80020f8:	6a1a      	ldr	r2, [r3, #32]
 80020fa:	69bb      	ldr	r3, [r7, #24]
 80020fc:	091b      	lsrs	r3, r3, #4
 80020fe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002102:	441a      	add	r2, r3
 8002104:	697b      	ldr	r3, [r7, #20]
 8002106:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	699a      	ldr	r2, [r3, #24]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f042 0210 	orr.w	r2, r2, #16
 8002116:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4618      	mov	r0, r3
 800211e:	f002 ffd5 	bl	80050cc <USB_ReadInterrupts>
 8002122:	4603      	mov	r3, r0
 8002124:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002128:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800212c:	f040 80a7 	bne.w	800227e <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002130:	2300      	movs	r3, #0
 8002132:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4618      	mov	r0, r3
 800213a:	f002 ffda 	bl	80050f2 <USB_ReadDevAllOutEpInterrupt>
 800213e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002140:	e099      	b.n	8002276 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002144:	f003 0301 	and.w	r3, r3, #1
 8002148:	2b00      	cmp	r3, #0
 800214a:	f000 808e 	beq.w	800226a <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002154:	b2d2      	uxtb	r2, r2
 8002156:	4611      	mov	r1, r2
 8002158:	4618      	mov	r0, r3
 800215a:	f002 fffe 	bl	800515a <USB_ReadDevOutEPInterrupt>
 800215e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002160:	693b      	ldr	r3, [r7, #16]
 8002162:	f003 0301 	and.w	r3, r3, #1
 8002166:	2b00      	cmp	r3, #0
 8002168:	d00c      	beq.n	8002184 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800216a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800216c:	015a      	lsls	r2, r3, #5
 800216e:	69fb      	ldr	r3, [r7, #28]
 8002170:	4413      	add	r3, r2
 8002172:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002176:	461a      	mov	r2, r3
 8002178:	2301      	movs	r3, #1
 800217a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800217c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800217e:	6878      	ldr	r0, [r7, #4]
 8002180:	f000 feaa 	bl	8002ed8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002184:	693b      	ldr	r3, [r7, #16]
 8002186:	f003 0308 	and.w	r3, r3, #8
 800218a:	2b00      	cmp	r3, #0
 800218c:	d00c      	beq.n	80021a8 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800218e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002190:	015a      	lsls	r2, r3, #5
 8002192:	69fb      	ldr	r3, [r7, #28]
 8002194:	4413      	add	r3, r2
 8002196:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800219a:	461a      	mov	r2, r3
 800219c:	2308      	movs	r3, #8
 800219e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80021a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80021a2:	6878      	ldr	r0, [r7, #4]
 80021a4:	f000 ff80 	bl	80030a8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80021a8:	693b      	ldr	r3, [r7, #16]
 80021aa:	f003 0310 	and.w	r3, r3, #16
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d008      	beq.n	80021c4 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80021b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b4:	015a      	lsls	r2, r3, #5
 80021b6:	69fb      	ldr	r3, [r7, #28]
 80021b8:	4413      	add	r3, r2
 80021ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021be:	461a      	mov	r2, r3
 80021c0:	2310      	movs	r3, #16
 80021c2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80021c4:	693b      	ldr	r3, [r7, #16]
 80021c6:	f003 0302 	and.w	r3, r3, #2
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d030      	beq.n	8002230 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80021ce:	6a3b      	ldr	r3, [r7, #32]
 80021d0:	695b      	ldr	r3, [r3, #20]
 80021d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021d6:	2b80      	cmp	r3, #128	; 0x80
 80021d8:	d109      	bne.n	80021ee <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80021da:	69fb      	ldr	r3, [r7, #28]
 80021dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	69fa      	ldr	r2, [r7, #28]
 80021e4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80021e8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80021ec:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80021ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021f0:	4613      	mov	r3, r2
 80021f2:	00db      	lsls	r3, r3, #3
 80021f4:	4413      	add	r3, r2
 80021f6:	009b      	lsls	r3, r3, #2
 80021f8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80021fc:	687a      	ldr	r2, [r7, #4]
 80021fe:	4413      	add	r3, r2
 8002200:	3304      	adds	r3, #4
 8002202:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002204:	697b      	ldr	r3, [r7, #20]
 8002206:	78db      	ldrb	r3, [r3, #3]
 8002208:	2b01      	cmp	r3, #1
 800220a:	d108      	bne.n	800221e <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800220c:	697b      	ldr	r3, [r7, #20]
 800220e:	2200      	movs	r2, #0
 8002210:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002214:	b2db      	uxtb	r3, r3
 8002216:	4619      	mov	r1, r3
 8002218:	6878      	ldr	r0, [r7, #4]
 800221a:	f005 f83b 	bl	8007294 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800221e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002220:	015a      	lsls	r2, r3, #5
 8002222:	69fb      	ldr	r3, [r7, #28]
 8002224:	4413      	add	r3, r2
 8002226:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800222a:	461a      	mov	r2, r3
 800222c:	2302      	movs	r3, #2
 800222e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002230:	693b      	ldr	r3, [r7, #16]
 8002232:	f003 0320 	and.w	r3, r3, #32
 8002236:	2b00      	cmp	r3, #0
 8002238:	d008      	beq.n	800224c <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800223a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800223c:	015a      	lsls	r2, r3, #5
 800223e:	69fb      	ldr	r3, [r7, #28]
 8002240:	4413      	add	r3, r2
 8002242:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002246:	461a      	mov	r2, r3
 8002248:	2320      	movs	r3, #32
 800224a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800224c:	693b      	ldr	r3, [r7, #16]
 800224e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002252:	2b00      	cmp	r3, #0
 8002254:	d009      	beq.n	800226a <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002258:	015a      	lsls	r2, r3, #5
 800225a:	69fb      	ldr	r3, [r7, #28]
 800225c:	4413      	add	r3, r2
 800225e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002262:	461a      	mov	r2, r3
 8002264:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002268:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800226a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800226c:	3301      	adds	r3, #1
 800226e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002272:	085b      	lsrs	r3, r3, #1
 8002274:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002278:	2b00      	cmp	r3, #0
 800227a:	f47f af62 	bne.w	8002142 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4618      	mov	r0, r3
 8002284:	f002 ff22 	bl	80050cc <USB_ReadInterrupts>
 8002288:	4603      	mov	r3, r0
 800228a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800228e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002292:	f040 80db 	bne.w	800244c <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4618      	mov	r0, r3
 800229c:	f002 ff43 	bl	8005126 <USB_ReadDevAllInEpInterrupt>
 80022a0:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80022a2:	2300      	movs	r3, #0
 80022a4:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80022a6:	e0cd      	b.n	8002444 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80022a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022aa:	f003 0301 	and.w	r3, r3, #1
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	f000 80c2 	beq.w	8002438 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022ba:	b2d2      	uxtb	r2, r2
 80022bc:	4611      	mov	r1, r2
 80022be:	4618      	mov	r0, r3
 80022c0:	f002 ff69 	bl	8005196 <USB_ReadDevInEPInterrupt>
 80022c4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	f003 0301 	and.w	r3, r3, #1
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d057      	beq.n	8002380 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80022d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d2:	f003 030f 	and.w	r3, r3, #15
 80022d6:	2201      	movs	r2, #1
 80022d8:	fa02 f303 	lsl.w	r3, r2, r3
 80022dc:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80022de:	69fb      	ldr	r3, [r7, #28]
 80022e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80022e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	43db      	mvns	r3, r3
 80022ea:	69f9      	ldr	r1, [r7, #28]
 80022ec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80022f0:	4013      	ands	r3, r2
 80022f2:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80022f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f6:	015a      	lsls	r2, r3, #5
 80022f8:	69fb      	ldr	r3, [r7, #28]
 80022fa:	4413      	add	r3, r2
 80022fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002300:	461a      	mov	r2, r3
 8002302:	2301      	movs	r3, #1
 8002304:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	691b      	ldr	r3, [r3, #16]
 800230a:	2b01      	cmp	r3, #1
 800230c:	d132      	bne.n	8002374 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800230e:	6879      	ldr	r1, [r7, #4]
 8002310:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002312:	4613      	mov	r3, r2
 8002314:	00db      	lsls	r3, r3, #3
 8002316:	4413      	add	r3, r2
 8002318:	009b      	lsls	r3, r3, #2
 800231a:	440b      	add	r3, r1
 800231c:	334c      	adds	r3, #76	; 0x4c
 800231e:	6819      	ldr	r1, [r3, #0]
 8002320:	6878      	ldr	r0, [r7, #4]
 8002322:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002324:	4613      	mov	r3, r2
 8002326:	00db      	lsls	r3, r3, #3
 8002328:	4413      	add	r3, r2
 800232a:	009b      	lsls	r3, r3, #2
 800232c:	4403      	add	r3, r0
 800232e:	3348      	adds	r3, #72	; 0x48
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4419      	add	r1, r3
 8002334:	6878      	ldr	r0, [r7, #4]
 8002336:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002338:	4613      	mov	r3, r2
 800233a:	00db      	lsls	r3, r3, #3
 800233c:	4413      	add	r3, r2
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	4403      	add	r3, r0
 8002342:	334c      	adds	r3, #76	; 0x4c
 8002344:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002348:	2b00      	cmp	r3, #0
 800234a:	d113      	bne.n	8002374 <HAL_PCD_IRQHandler+0x3a2>
 800234c:	6879      	ldr	r1, [r7, #4]
 800234e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002350:	4613      	mov	r3, r2
 8002352:	00db      	lsls	r3, r3, #3
 8002354:	4413      	add	r3, r2
 8002356:	009b      	lsls	r3, r3, #2
 8002358:	440b      	add	r3, r1
 800235a:	3354      	adds	r3, #84	; 0x54
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d108      	bne.n	8002374 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6818      	ldr	r0, [r3, #0]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800236c:	461a      	mov	r2, r3
 800236e:	2101      	movs	r1, #1
 8002370:	f002 ff70 	bl	8005254 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002376:	b2db      	uxtb	r3, r3
 8002378:	4619      	mov	r1, r3
 800237a:	6878      	ldr	r0, [r7, #4]
 800237c:	f004 ff05 	bl	800718a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002380:	693b      	ldr	r3, [r7, #16]
 8002382:	f003 0308 	and.w	r3, r3, #8
 8002386:	2b00      	cmp	r3, #0
 8002388:	d008      	beq.n	800239c <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800238a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800238c:	015a      	lsls	r2, r3, #5
 800238e:	69fb      	ldr	r3, [r7, #28]
 8002390:	4413      	add	r3, r2
 8002392:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002396:	461a      	mov	r2, r3
 8002398:	2308      	movs	r3, #8
 800239a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800239c:	693b      	ldr	r3, [r7, #16]
 800239e:	f003 0310 	and.w	r3, r3, #16
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d008      	beq.n	80023b8 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80023a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a8:	015a      	lsls	r2, r3, #5
 80023aa:	69fb      	ldr	r3, [r7, #28]
 80023ac:	4413      	add	r3, r2
 80023ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80023b2:	461a      	mov	r2, r3
 80023b4:	2310      	movs	r3, #16
 80023b6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80023b8:	693b      	ldr	r3, [r7, #16]
 80023ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d008      	beq.n	80023d4 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80023c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c4:	015a      	lsls	r2, r3, #5
 80023c6:	69fb      	ldr	r3, [r7, #28]
 80023c8:	4413      	add	r3, r2
 80023ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80023ce:	461a      	mov	r2, r3
 80023d0:	2340      	movs	r3, #64	; 0x40
 80023d2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80023d4:	693b      	ldr	r3, [r7, #16]
 80023d6:	f003 0302 	and.w	r3, r3, #2
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d023      	beq.n	8002426 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80023de:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80023e0:	6a38      	ldr	r0, [r7, #32]
 80023e2:	f001 fe51 	bl	8004088 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80023e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023e8:	4613      	mov	r3, r2
 80023ea:	00db      	lsls	r3, r3, #3
 80023ec:	4413      	add	r3, r2
 80023ee:	009b      	lsls	r3, r3, #2
 80023f0:	3338      	adds	r3, #56	; 0x38
 80023f2:	687a      	ldr	r2, [r7, #4]
 80023f4:	4413      	add	r3, r2
 80023f6:	3304      	adds	r3, #4
 80023f8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80023fa:	697b      	ldr	r3, [r7, #20]
 80023fc:	78db      	ldrb	r3, [r3, #3]
 80023fe:	2b01      	cmp	r3, #1
 8002400:	d108      	bne.n	8002414 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002402:	697b      	ldr	r3, [r7, #20]
 8002404:	2200      	movs	r2, #0
 8002406:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800240a:	b2db      	uxtb	r3, r3
 800240c:	4619      	mov	r1, r3
 800240e:	6878      	ldr	r0, [r7, #4]
 8002410:	f004 ff52 	bl	80072b8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002416:	015a      	lsls	r2, r3, #5
 8002418:	69fb      	ldr	r3, [r7, #28]
 800241a:	4413      	add	r3, r2
 800241c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002420:	461a      	mov	r2, r3
 8002422:	2302      	movs	r3, #2
 8002424:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002426:	693b      	ldr	r3, [r7, #16]
 8002428:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800242c:	2b00      	cmp	r3, #0
 800242e:	d003      	beq.n	8002438 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002430:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002432:	6878      	ldr	r0, [r7, #4]
 8002434:	f000 fcc3 	bl	8002dbe <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800243a:	3301      	adds	r3, #1
 800243c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800243e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002440:	085b      	lsrs	r3, r3, #1
 8002442:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002446:	2b00      	cmp	r3, #0
 8002448:	f47f af2e 	bne.w	80022a8 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4618      	mov	r0, r3
 8002452:	f002 fe3b 	bl	80050cc <USB_ReadInterrupts>
 8002456:	4603      	mov	r3, r0
 8002458:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800245c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002460:	d122      	bne.n	80024a8 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002462:	69fb      	ldr	r3, [r7, #28]
 8002464:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	69fa      	ldr	r2, [r7, #28]
 800246c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002470:	f023 0301 	bic.w	r3, r3, #1
 8002474:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800247c:	2b01      	cmp	r3, #1
 800247e:	d108      	bne.n	8002492 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2200      	movs	r2, #0
 8002484:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002488:	2100      	movs	r1, #0
 800248a:	6878      	ldr	r0, [r7, #4]
 800248c:	f000 feaa 	bl	80031e4 <HAL_PCDEx_LPM_Callback>
 8002490:	e002      	b.n	8002498 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002492:	6878      	ldr	r0, [r7, #4]
 8002494:	f004 fef0 	bl	8007278 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	695a      	ldr	r2, [r3, #20]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80024a6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4618      	mov	r0, r3
 80024ae:	f002 fe0d 	bl	80050cc <USB_ReadInterrupts>
 80024b2:	4603      	mov	r3, r0
 80024b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80024b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80024bc:	d112      	bne.n	80024e4 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80024be:	69fb      	ldr	r3, [r7, #28]
 80024c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80024c4:	689b      	ldr	r3, [r3, #8]
 80024c6:	f003 0301 	and.w	r3, r3, #1
 80024ca:	2b01      	cmp	r3, #1
 80024cc:	d102      	bne.n	80024d4 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80024ce:	6878      	ldr	r0, [r7, #4]
 80024d0:	f004 feac 	bl	800722c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	695a      	ldr	r2, [r3, #20]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80024e2:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4618      	mov	r0, r3
 80024ea:	f002 fdef 	bl	80050cc <USB_ReadInterrupts>
 80024ee:	4603      	mov	r3, r0
 80024f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024f8:	f040 80b7 	bne.w	800266a <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80024fc:	69fb      	ldr	r3, [r7, #28]
 80024fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	69fa      	ldr	r2, [r7, #28]
 8002506:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800250a:	f023 0301 	bic.w	r3, r3, #1
 800250e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	2110      	movs	r1, #16
 8002516:	4618      	mov	r0, r3
 8002518:	f001 fdb6 	bl	8004088 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800251c:	2300      	movs	r3, #0
 800251e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002520:	e046      	b.n	80025b0 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002524:	015a      	lsls	r2, r3, #5
 8002526:	69fb      	ldr	r3, [r7, #28]
 8002528:	4413      	add	r3, r2
 800252a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800252e:	461a      	mov	r2, r3
 8002530:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002534:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002536:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002538:	015a      	lsls	r2, r3, #5
 800253a:	69fb      	ldr	r3, [r7, #28]
 800253c:	4413      	add	r3, r2
 800253e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002546:	0151      	lsls	r1, r2, #5
 8002548:	69fa      	ldr	r2, [r7, #28]
 800254a:	440a      	add	r2, r1
 800254c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002550:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002554:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002558:	015a      	lsls	r2, r3, #5
 800255a:	69fb      	ldr	r3, [r7, #28]
 800255c:	4413      	add	r3, r2
 800255e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002562:	461a      	mov	r2, r3
 8002564:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002568:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800256a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800256c:	015a      	lsls	r2, r3, #5
 800256e:	69fb      	ldr	r3, [r7, #28]
 8002570:	4413      	add	r3, r2
 8002572:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800257a:	0151      	lsls	r1, r2, #5
 800257c:	69fa      	ldr	r2, [r7, #28]
 800257e:	440a      	add	r2, r1
 8002580:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002584:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002588:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800258a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800258c:	015a      	lsls	r2, r3, #5
 800258e:	69fb      	ldr	r3, [r7, #28]
 8002590:	4413      	add	r3, r2
 8002592:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800259a:	0151      	lsls	r1, r2, #5
 800259c:	69fa      	ldr	r2, [r7, #28]
 800259e:	440a      	add	r2, r1
 80025a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80025a4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80025a8:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025ac:	3301      	adds	r3, #1
 80025ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80025b6:	429a      	cmp	r2, r3
 80025b8:	d3b3      	bcc.n	8002522 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80025ba:	69fb      	ldr	r3, [r7, #28]
 80025bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80025c0:	69db      	ldr	r3, [r3, #28]
 80025c2:	69fa      	ldr	r2, [r7, #28]
 80025c4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80025c8:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80025cc:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d016      	beq.n	8002604 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80025d6:	69fb      	ldr	r3, [r7, #28]
 80025d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80025dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80025e0:	69fa      	ldr	r2, [r7, #28]
 80025e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80025e6:	f043 030b 	orr.w	r3, r3, #11
 80025ea:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80025ee:	69fb      	ldr	r3, [r7, #28]
 80025f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80025f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025f6:	69fa      	ldr	r2, [r7, #28]
 80025f8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80025fc:	f043 030b 	orr.w	r3, r3, #11
 8002600:	6453      	str	r3, [r2, #68]	; 0x44
 8002602:	e015      	b.n	8002630 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002604:	69fb      	ldr	r3, [r7, #28]
 8002606:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800260a:	695b      	ldr	r3, [r3, #20]
 800260c:	69fa      	ldr	r2, [r7, #28]
 800260e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002612:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002616:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800261a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800261c:	69fb      	ldr	r3, [r7, #28]
 800261e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002622:	691b      	ldr	r3, [r3, #16]
 8002624:	69fa      	ldr	r2, [r7, #28]
 8002626:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800262a:	f043 030b 	orr.w	r3, r3, #11
 800262e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002630:	69fb      	ldr	r3, [r7, #28]
 8002632:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	69fa      	ldr	r2, [r7, #28]
 800263a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800263e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002642:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6818      	ldr	r0, [r3, #0]
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	691b      	ldr	r3, [r3, #16]
 800264c:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002654:	461a      	mov	r2, r3
 8002656:	f002 fdfd 	bl	8005254 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	695a      	ldr	r2, [r3, #20]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002668:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4618      	mov	r0, r3
 8002670:	f002 fd2c 	bl	80050cc <USB_ReadInterrupts>
 8002674:	4603      	mov	r3, r0
 8002676:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800267a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800267e:	d124      	bne.n	80026ca <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4618      	mov	r0, r3
 8002686:	f002 fdc2 	bl	800520e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4618      	mov	r0, r3
 8002690:	f001 fd77 	bl	8004182 <USB_GetDevSpeed>
 8002694:	4603      	mov	r3, r0
 8002696:	461a      	mov	r2, r3
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681c      	ldr	r4, [r3, #0]
 80026a0:	f001 fa10 	bl	8003ac4 <HAL_RCC_GetHCLKFreq>
 80026a4:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80026aa:	b2db      	uxtb	r3, r3
 80026ac:	461a      	mov	r2, r3
 80026ae:	4620      	mov	r0, r4
 80026b0:	f001 fa76 	bl	8003ba0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80026b4:	6878      	ldr	r0, [r7, #4]
 80026b6:	f004 fd90 	bl	80071da <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	695a      	ldr	r2, [r3, #20]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80026c8:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4618      	mov	r0, r3
 80026d0:	f002 fcfc 	bl	80050cc <USB_ReadInterrupts>
 80026d4:	4603      	mov	r3, r0
 80026d6:	f003 0308 	and.w	r3, r3, #8
 80026da:	2b08      	cmp	r3, #8
 80026dc:	d10a      	bne.n	80026f4 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80026de:	6878      	ldr	r0, [r7, #4]
 80026e0:	f004 fd6d 	bl	80071be <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	695a      	ldr	r2, [r3, #20]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f002 0208 	and.w	r2, r2, #8
 80026f2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4618      	mov	r0, r3
 80026fa:	f002 fce7 	bl	80050cc <USB_ReadInterrupts>
 80026fe:	4603      	mov	r3, r0
 8002700:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002704:	2b80      	cmp	r3, #128	; 0x80
 8002706:	d122      	bne.n	800274e <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002708:	6a3b      	ldr	r3, [r7, #32]
 800270a:	699b      	ldr	r3, [r3, #24]
 800270c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002710:	6a3b      	ldr	r3, [r7, #32]
 8002712:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002714:	2301      	movs	r3, #1
 8002716:	627b      	str	r3, [r7, #36]	; 0x24
 8002718:	e014      	b.n	8002744 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800271a:	6879      	ldr	r1, [r7, #4]
 800271c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800271e:	4613      	mov	r3, r2
 8002720:	00db      	lsls	r3, r3, #3
 8002722:	4413      	add	r3, r2
 8002724:	009b      	lsls	r3, r3, #2
 8002726:	440b      	add	r3, r1
 8002728:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800272c:	781b      	ldrb	r3, [r3, #0]
 800272e:	2b01      	cmp	r3, #1
 8002730:	d105      	bne.n	800273e <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002734:	b2db      	uxtb	r3, r3
 8002736:	4619      	mov	r1, r3
 8002738:	6878      	ldr	r0, [r7, #4]
 800273a:	f000 fb0f 	bl	8002d5c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800273e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002740:	3301      	adds	r3, #1
 8002742:	627b      	str	r3, [r7, #36]	; 0x24
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800274a:	429a      	cmp	r2, r3
 800274c:	d3e5      	bcc.n	800271a <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4618      	mov	r0, r3
 8002754:	f002 fcba 	bl	80050cc <USB_ReadInterrupts>
 8002758:	4603      	mov	r3, r0
 800275a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800275e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002762:	d13b      	bne.n	80027dc <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002764:	2301      	movs	r3, #1
 8002766:	627b      	str	r3, [r7, #36]	; 0x24
 8002768:	e02b      	b.n	80027c2 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800276a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800276c:	015a      	lsls	r2, r3, #5
 800276e:	69fb      	ldr	r3, [r7, #28]
 8002770:	4413      	add	r3, r2
 8002772:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800277a:	6879      	ldr	r1, [r7, #4]
 800277c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800277e:	4613      	mov	r3, r2
 8002780:	00db      	lsls	r3, r3, #3
 8002782:	4413      	add	r3, r2
 8002784:	009b      	lsls	r3, r3, #2
 8002786:	440b      	add	r3, r1
 8002788:	3340      	adds	r3, #64	; 0x40
 800278a:	781b      	ldrb	r3, [r3, #0]
 800278c:	2b01      	cmp	r3, #1
 800278e:	d115      	bne.n	80027bc <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002790:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002792:	2b00      	cmp	r3, #0
 8002794:	da12      	bge.n	80027bc <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002796:	6879      	ldr	r1, [r7, #4]
 8002798:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800279a:	4613      	mov	r3, r2
 800279c:	00db      	lsls	r3, r3, #3
 800279e:	4413      	add	r3, r2
 80027a0:	009b      	lsls	r3, r3, #2
 80027a2:	440b      	add	r3, r1
 80027a4:	333f      	adds	r3, #63	; 0x3f
 80027a6:	2201      	movs	r2, #1
 80027a8:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80027aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ac:	b2db      	uxtb	r3, r3
 80027ae:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80027b2:	b2db      	uxtb	r3, r3
 80027b4:	4619      	mov	r1, r3
 80027b6:	6878      	ldr	r0, [r7, #4]
 80027b8:	f000 fad0 	bl	8002d5c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80027bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027be:	3301      	adds	r3, #1
 80027c0:	627b      	str	r3, [r7, #36]	; 0x24
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027c8:	429a      	cmp	r2, r3
 80027ca:	d3ce      	bcc.n	800276a <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	695a      	ldr	r2, [r3, #20]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80027da:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4618      	mov	r0, r3
 80027e2:	f002 fc73 	bl	80050cc <USB_ReadInterrupts>
 80027e6:	4603      	mov	r3, r0
 80027e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027ec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80027f0:	d155      	bne.n	800289e <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80027f2:	2301      	movs	r3, #1
 80027f4:	627b      	str	r3, [r7, #36]	; 0x24
 80027f6:	e045      	b.n	8002884 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80027f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027fa:	015a      	lsls	r2, r3, #5
 80027fc:	69fb      	ldr	r3, [r7, #28]
 80027fe:	4413      	add	r3, r2
 8002800:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002808:	6879      	ldr	r1, [r7, #4]
 800280a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800280c:	4613      	mov	r3, r2
 800280e:	00db      	lsls	r3, r3, #3
 8002810:	4413      	add	r3, r2
 8002812:	009b      	lsls	r3, r3, #2
 8002814:	440b      	add	r3, r1
 8002816:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800281a:	781b      	ldrb	r3, [r3, #0]
 800281c:	2b01      	cmp	r3, #1
 800281e:	d12e      	bne.n	800287e <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002820:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002822:	2b00      	cmp	r3, #0
 8002824:	da2b      	bge.n	800287e <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002826:	69bb      	ldr	r3, [r7, #24]
 8002828:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8002832:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002836:	429a      	cmp	r2, r3
 8002838:	d121      	bne.n	800287e <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800283a:	6879      	ldr	r1, [r7, #4]
 800283c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800283e:	4613      	mov	r3, r2
 8002840:	00db      	lsls	r3, r3, #3
 8002842:	4413      	add	r3, r2
 8002844:	009b      	lsls	r3, r3, #2
 8002846:	440b      	add	r3, r1
 8002848:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800284c:	2201      	movs	r2, #1
 800284e:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002850:	6a3b      	ldr	r3, [r7, #32]
 8002852:	699b      	ldr	r3, [r3, #24]
 8002854:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002858:	6a3b      	ldr	r3, [r7, #32]
 800285a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800285c:	6a3b      	ldr	r3, [r7, #32]
 800285e:	695b      	ldr	r3, [r3, #20]
 8002860:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002864:	2b00      	cmp	r3, #0
 8002866:	d10a      	bne.n	800287e <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002868:	69fb      	ldr	r3, [r7, #28]
 800286a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	69fa      	ldr	r2, [r7, #28]
 8002872:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002876:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800287a:	6053      	str	r3, [r2, #4]
            break;
 800287c:	e007      	b.n	800288e <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800287e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002880:	3301      	adds	r3, #1
 8002882:	627b      	str	r3, [r7, #36]	; 0x24
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800288a:	429a      	cmp	r2, r3
 800288c:	d3b4      	bcc.n	80027f8 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	695a      	ldr	r2, [r3, #20]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800289c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4618      	mov	r0, r3
 80028a4:	f002 fc12 	bl	80050cc <USB_ReadInterrupts>
 80028a8:	4603      	mov	r3, r0
 80028aa:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80028ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028b2:	d10a      	bne.n	80028ca <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80028b4:	6878      	ldr	r0, [r7, #4]
 80028b6:	f004 fd11 	bl	80072dc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	695a      	ldr	r2, [r3, #20]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80028c8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4618      	mov	r0, r3
 80028d0:	f002 fbfc 	bl	80050cc <USB_ReadInterrupts>
 80028d4:	4603      	mov	r3, r0
 80028d6:	f003 0304 	and.w	r3, r3, #4
 80028da:	2b04      	cmp	r3, #4
 80028dc:	d115      	bne.n	800290a <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80028e6:	69bb      	ldr	r3, [r7, #24]
 80028e8:	f003 0304 	and.w	r3, r3, #4
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d002      	beq.n	80028f6 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80028f0:	6878      	ldr	r0, [r7, #4]
 80028f2:	f004 fd01 	bl	80072f8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	6859      	ldr	r1, [r3, #4]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	69ba      	ldr	r2, [r7, #24]
 8002902:	430a      	orrs	r2, r1
 8002904:	605a      	str	r2, [r3, #4]
 8002906:	e000      	b.n	800290a <HAL_PCD_IRQHandler+0x938>
      return;
 8002908:	bf00      	nop
    }
  }
}
 800290a:	3734      	adds	r7, #52	; 0x34
 800290c:	46bd      	mov	sp, r7
 800290e:	bd90      	pop	{r4, r7, pc}

08002910 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b082      	sub	sp, #8
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
 8002918:	460b      	mov	r3, r1
 800291a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002922:	2b01      	cmp	r3, #1
 8002924:	d101      	bne.n	800292a <HAL_PCD_SetAddress+0x1a>
 8002926:	2302      	movs	r3, #2
 8002928:	e013      	b.n	8002952 <HAL_PCD_SetAddress+0x42>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2201      	movs	r2, #1
 800292e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	78fa      	ldrb	r2, [r7, #3]
 8002936:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	78fa      	ldrb	r2, [r7, #3]
 8002940:	4611      	mov	r1, r2
 8002942:	4618      	mov	r0, r3
 8002944:	f002 fb5a 	bl	8004ffc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2200      	movs	r2, #0
 800294c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002950:	2300      	movs	r3, #0
}
 8002952:	4618      	mov	r0, r3
 8002954:	3708      	adds	r7, #8
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}

0800295a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800295a:	b580      	push	{r7, lr}
 800295c:	b084      	sub	sp, #16
 800295e:	af00      	add	r7, sp, #0
 8002960:	6078      	str	r0, [r7, #4]
 8002962:	4608      	mov	r0, r1
 8002964:	4611      	mov	r1, r2
 8002966:	461a      	mov	r2, r3
 8002968:	4603      	mov	r3, r0
 800296a:	70fb      	strb	r3, [r7, #3]
 800296c:	460b      	mov	r3, r1
 800296e:	803b      	strh	r3, [r7, #0]
 8002970:	4613      	mov	r3, r2
 8002972:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002974:	2300      	movs	r3, #0
 8002976:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002978:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800297c:	2b00      	cmp	r3, #0
 800297e:	da0f      	bge.n	80029a0 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002980:	78fb      	ldrb	r3, [r7, #3]
 8002982:	f003 020f 	and.w	r2, r3, #15
 8002986:	4613      	mov	r3, r2
 8002988:	00db      	lsls	r3, r3, #3
 800298a:	4413      	add	r3, r2
 800298c:	009b      	lsls	r3, r3, #2
 800298e:	3338      	adds	r3, #56	; 0x38
 8002990:	687a      	ldr	r2, [r7, #4]
 8002992:	4413      	add	r3, r2
 8002994:	3304      	adds	r3, #4
 8002996:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	2201      	movs	r2, #1
 800299c:	705a      	strb	r2, [r3, #1]
 800299e:	e00f      	b.n	80029c0 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80029a0:	78fb      	ldrb	r3, [r7, #3]
 80029a2:	f003 020f 	and.w	r2, r3, #15
 80029a6:	4613      	mov	r3, r2
 80029a8:	00db      	lsls	r3, r3, #3
 80029aa:	4413      	add	r3, r2
 80029ac:	009b      	lsls	r3, r3, #2
 80029ae:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80029b2:	687a      	ldr	r2, [r7, #4]
 80029b4:	4413      	add	r3, r2
 80029b6:	3304      	adds	r3, #4
 80029b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	2200      	movs	r2, #0
 80029be:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80029c0:	78fb      	ldrb	r3, [r7, #3]
 80029c2:	f003 030f 	and.w	r3, r3, #15
 80029c6:	b2da      	uxtb	r2, r3
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80029cc:	883a      	ldrh	r2, [r7, #0]
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	78ba      	ldrb	r2, [r7, #2]
 80029d6:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	785b      	ldrb	r3, [r3, #1]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d004      	beq.n	80029ea <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	781b      	ldrb	r3, [r3, #0]
 80029e4:	b29a      	uxth	r2, r3
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80029ea:	78bb      	ldrb	r3, [r7, #2]
 80029ec:	2b02      	cmp	r3, #2
 80029ee:	d102      	bne.n	80029f6 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	2200      	movs	r2, #0
 80029f4:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80029fc:	2b01      	cmp	r3, #1
 80029fe:	d101      	bne.n	8002a04 <HAL_PCD_EP_Open+0xaa>
 8002a00:	2302      	movs	r3, #2
 8002a02:	e00e      	b.n	8002a22 <HAL_PCD_EP_Open+0xc8>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2201      	movs	r2, #1
 8002a08:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	68f9      	ldr	r1, [r7, #12]
 8002a12:	4618      	mov	r0, r3
 8002a14:	f001 fbda 	bl	80041cc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8002a20:	7afb      	ldrb	r3, [r7, #11]
}
 8002a22:	4618      	mov	r0, r3
 8002a24:	3710      	adds	r7, #16
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}

08002a2a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002a2a:	b580      	push	{r7, lr}
 8002a2c:	b084      	sub	sp, #16
 8002a2e:	af00      	add	r7, sp, #0
 8002a30:	6078      	str	r0, [r7, #4]
 8002a32:	460b      	mov	r3, r1
 8002a34:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002a36:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	da0f      	bge.n	8002a5e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a3e:	78fb      	ldrb	r3, [r7, #3]
 8002a40:	f003 020f 	and.w	r2, r3, #15
 8002a44:	4613      	mov	r3, r2
 8002a46:	00db      	lsls	r3, r3, #3
 8002a48:	4413      	add	r3, r2
 8002a4a:	009b      	lsls	r3, r3, #2
 8002a4c:	3338      	adds	r3, #56	; 0x38
 8002a4e:	687a      	ldr	r2, [r7, #4]
 8002a50:	4413      	add	r3, r2
 8002a52:	3304      	adds	r3, #4
 8002a54:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	2201      	movs	r2, #1
 8002a5a:	705a      	strb	r2, [r3, #1]
 8002a5c:	e00f      	b.n	8002a7e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002a5e:	78fb      	ldrb	r3, [r7, #3]
 8002a60:	f003 020f 	and.w	r2, r3, #15
 8002a64:	4613      	mov	r3, r2
 8002a66:	00db      	lsls	r3, r3, #3
 8002a68:	4413      	add	r3, r2
 8002a6a:	009b      	lsls	r3, r3, #2
 8002a6c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002a70:	687a      	ldr	r2, [r7, #4]
 8002a72:	4413      	add	r3, r2
 8002a74:	3304      	adds	r3, #4
 8002a76:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002a7e:	78fb      	ldrb	r3, [r7, #3]
 8002a80:	f003 030f 	and.w	r3, r3, #15
 8002a84:	b2da      	uxtb	r2, r3
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002a90:	2b01      	cmp	r3, #1
 8002a92:	d101      	bne.n	8002a98 <HAL_PCD_EP_Close+0x6e>
 8002a94:	2302      	movs	r3, #2
 8002a96:	e00e      	b.n	8002ab6 <HAL_PCD_EP_Close+0x8c>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	68f9      	ldr	r1, [r7, #12]
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f001 fc18 	bl	80042dc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2200      	movs	r2, #0
 8002ab0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8002ab4:	2300      	movs	r3, #0
}
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	3710      	adds	r7, #16
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}

08002abe <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002abe:	b580      	push	{r7, lr}
 8002ac0:	b086      	sub	sp, #24
 8002ac2:	af00      	add	r7, sp, #0
 8002ac4:	60f8      	str	r0, [r7, #12]
 8002ac6:	607a      	str	r2, [r7, #4]
 8002ac8:	603b      	str	r3, [r7, #0]
 8002aca:	460b      	mov	r3, r1
 8002acc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ace:	7afb      	ldrb	r3, [r7, #11]
 8002ad0:	f003 020f 	and.w	r2, r3, #15
 8002ad4:	4613      	mov	r3, r2
 8002ad6:	00db      	lsls	r3, r3, #3
 8002ad8:	4413      	add	r3, r2
 8002ada:	009b      	lsls	r3, r3, #2
 8002adc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002ae0:	68fa      	ldr	r2, [r7, #12]
 8002ae2:	4413      	add	r3, r2
 8002ae4:	3304      	adds	r3, #4
 8002ae6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002ae8:	697b      	ldr	r3, [r7, #20]
 8002aea:	687a      	ldr	r2, [r7, #4]
 8002aec:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	683a      	ldr	r2, [r7, #0]
 8002af2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	2200      	movs	r2, #0
 8002af8:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	2200      	movs	r2, #0
 8002afe:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002b00:	7afb      	ldrb	r3, [r7, #11]
 8002b02:	f003 030f 	and.w	r3, r3, #15
 8002b06:	b2da      	uxtb	r2, r3
 8002b08:	697b      	ldr	r3, [r7, #20]
 8002b0a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	691b      	ldr	r3, [r3, #16]
 8002b10:	2b01      	cmp	r3, #1
 8002b12:	d102      	bne.n	8002b1a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002b14:	687a      	ldr	r2, [r7, #4]
 8002b16:	697b      	ldr	r3, [r7, #20]
 8002b18:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002b1a:	7afb      	ldrb	r3, [r7, #11]
 8002b1c:	f003 030f 	and.w	r3, r3, #15
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d109      	bne.n	8002b38 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	6818      	ldr	r0, [r3, #0]
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	691b      	ldr	r3, [r3, #16]
 8002b2c:	b2db      	uxtb	r3, r3
 8002b2e:	461a      	mov	r2, r3
 8002b30:	6979      	ldr	r1, [r7, #20]
 8002b32:	f001 fef7 	bl	8004924 <USB_EP0StartXfer>
 8002b36:	e008      	b.n	8002b4a <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	6818      	ldr	r0, [r3, #0]
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	691b      	ldr	r3, [r3, #16]
 8002b40:	b2db      	uxtb	r3, r3
 8002b42:	461a      	mov	r2, r3
 8002b44:	6979      	ldr	r1, [r7, #20]
 8002b46:	f001 fca5 	bl	8004494 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002b4a:	2300      	movs	r3, #0
}
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	3718      	adds	r7, #24
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bd80      	pop	{r7, pc}

08002b54 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b086      	sub	sp, #24
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	60f8      	str	r0, [r7, #12]
 8002b5c:	607a      	str	r2, [r7, #4]
 8002b5e:	603b      	str	r3, [r7, #0]
 8002b60:	460b      	mov	r3, r1
 8002b62:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b64:	7afb      	ldrb	r3, [r7, #11]
 8002b66:	f003 020f 	and.w	r2, r3, #15
 8002b6a:	4613      	mov	r3, r2
 8002b6c:	00db      	lsls	r3, r3, #3
 8002b6e:	4413      	add	r3, r2
 8002b70:	009b      	lsls	r3, r3, #2
 8002b72:	3338      	adds	r3, #56	; 0x38
 8002b74:	68fa      	ldr	r2, [r7, #12]
 8002b76:	4413      	add	r3, r2
 8002b78:	3304      	adds	r3, #4
 8002b7a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	687a      	ldr	r2, [r7, #4]
 8002b80:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	683a      	ldr	r2, [r7, #0]
 8002b86:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002b88:	697b      	ldr	r3, [r7, #20]
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8002b8e:	697b      	ldr	r3, [r7, #20]
 8002b90:	2201      	movs	r2, #1
 8002b92:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002b94:	7afb      	ldrb	r3, [r7, #11]
 8002b96:	f003 030f 	and.w	r3, r3, #15
 8002b9a:	b2da      	uxtb	r2, r3
 8002b9c:	697b      	ldr	r3, [r7, #20]
 8002b9e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	691b      	ldr	r3, [r3, #16]
 8002ba4:	2b01      	cmp	r3, #1
 8002ba6:	d102      	bne.n	8002bae <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002ba8:	687a      	ldr	r2, [r7, #4]
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002bae:	7afb      	ldrb	r3, [r7, #11]
 8002bb0:	f003 030f 	and.w	r3, r3, #15
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d109      	bne.n	8002bcc <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	6818      	ldr	r0, [r3, #0]
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	691b      	ldr	r3, [r3, #16]
 8002bc0:	b2db      	uxtb	r3, r3
 8002bc2:	461a      	mov	r2, r3
 8002bc4:	6979      	ldr	r1, [r7, #20]
 8002bc6:	f001 fead 	bl	8004924 <USB_EP0StartXfer>
 8002bca:	e008      	b.n	8002bde <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	6818      	ldr	r0, [r3, #0]
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	691b      	ldr	r3, [r3, #16]
 8002bd4:	b2db      	uxtb	r3, r3
 8002bd6:	461a      	mov	r2, r3
 8002bd8:	6979      	ldr	r1, [r7, #20]
 8002bda:	f001 fc5b 	bl	8004494 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002bde:	2300      	movs	r3, #0
}
 8002be0:	4618      	mov	r0, r3
 8002be2:	3718      	adds	r7, #24
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bd80      	pop	{r7, pc}

08002be8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b084      	sub	sp, #16
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
 8002bf0:	460b      	mov	r3, r1
 8002bf2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002bf4:	78fb      	ldrb	r3, [r7, #3]
 8002bf6:	f003 020f 	and.w	r2, r3, #15
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	429a      	cmp	r2, r3
 8002c00:	d901      	bls.n	8002c06 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	e050      	b.n	8002ca8 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002c06:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	da0f      	bge.n	8002c2e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c0e:	78fb      	ldrb	r3, [r7, #3]
 8002c10:	f003 020f 	and.w	r2, r3, #15
 8002c14:	4613      	mov	r3, r2
 8002c16:	00db      	lsls	r3, r3, #3
 8002c18:	4413      	add	r3, r2
 8002c1a:	009b      	lsls	r3, r3, #2
 8002c1c:	3338      	adds	r3, #56	; 0x38
 8002c1e:	687a      	ldr	r2, [r7, #4]
 8002c20:	4413      	add	r3, r2
 8002c22:	3304      	adds	r3, #4
 8002c24:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	2201      	movs	r2, #1
 8002c2a:	705a      	strb	r2, [r3, #1]
 8002c2c:	e00d      	b.n	8002c4a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002c2e:	78fa      	ldrb	r2, [r7, #3]
 8002c30:	4613      	mov	r3, r2
 8002c32:	00db      	lsls	r3, r3, #3
 8002c34:	4413      	add	r3, r2
 8002c36:	009b      	lsls	r3, r3, #2
 8002c38:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002c3c:	687a      	ldr	r2, [r7, #4]
 8002c3e:	4413      	add	r3, r2
 8002c40:	3304      	adds	r3, #4
 8002c42:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	2200      	movs	r2, #0
 8002c48:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	2201      	movs	r2, #1
 8002c4e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002c50:	78fb      	ldrb	r3, [r7, #3]
 8002c52:	f003 030f 	and.w	r3, r3, #15
 8002c56:	b2da      	uxtb	r2, r3
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002c62:	2b01      	cmp	r3, #1
 8002c64:	d101      	bne.n	8002c6a <HAL_PCD_EP_SetStall+0x82>
 8002c66:	2302      	movs	r3, #2
 8002c68:	e01e      	b.n	8002ca8 <HAL_PCD_EP_SetStall+0xc0>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2201      	movs	r2, #1
 8002c6e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	68f9      	ldr	r1, [r7, #12]
 8002c78:	4618      	mov	r0, r3
 8002c7a:	f002 f8eb 	bl	8004e54 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002c7e:	78fb      	ldrb	r3, [r7, #3]
 8002c80:	f003 030f 	and.w	r3, r3, #15
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d10a      	bne.n	8002c9e <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6818      	ldr	r0, [r3, #0]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	691b      	ldr	r3, [r3, #16]
 8002c90:	b2d9      	uxtb	r1, r3
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002c98:	461a      	mov	r2, r3
 8002c9a:	f002 fadb 	bl	8005254 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002ca6:	2300      	movs	r3, #0
}
 8002ca8:	4618      	mov	r0, r3
 8002caa:	3710      	adds	r7, #16
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bd80      	pop	{r7, pc}

08002cb0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b084      	sub	sp, #16
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
 8002cb8:	460b      	mov	r3, r1
 8002cba:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002cbc:	78fb      	ldrb	r3, [r7, #3]
 8002cbe:	f003 020f 	and.w	r2, r3, #15
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	429a      	cmp	r2, r3
 8002cc8:	d901      	bls.n	8002cce <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e042      	b.n	8002d54 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002cce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	da0f      	bge.n	8002cf6 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002cd6:	78fb      	ldrb	r3, [r7, #3]
 8002cd8:	f003 020f 	and.w	r2, r3, #15
 8002cdc:	4613      	mov	r3, r2
 8002cde:	00db      	lsls	r3, r3, #3
 8002ce0:	4413      	add	r3, r2
 8002ce2:	009b      	lsls	r3, r3, #2
 8002ce4:	3338      	adds	r3, #56	; 0x38
 8002ce6:	687a      	ldr	r2, [r7, #4]
 8002ce8:	4413      	add	r3, r2
 8002cea:	3304      	adds	r3, #4
 8002cec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	2201      	movs	r2, #1
 8002cf2:	705a      	strb	r2, [r3, #1]
 8002cf4:	e00f      	b.n	8002d16 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002cf6:	78fb      	ldrb	r3, [r7, #3]
 8002cf8:	f003 020f 	and.w	r2, r3, #15
 8002cfc:	4613      	mov	r3, r2
 8002cfe:	00db      	lsls	r3, r3, #3
 8002d00:	4413      	add	r3, r2
 8002d02:	009b      	lsls	r3, r3, #2
 8002d04:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002d08:	687a      	ldr	r2, [r7, #4]
 8002d0a:	4413      	add	r3, r2
 8002d0c:	3304      	adds	r3, #4
 8002d0e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	2200      	movs	r2, #0
 8002d14:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002d1c:	78fb      	ldrb	r3, [r7, #3]
 8002d1e:	f003 030f 	and.w	r3, r3, #15
 8002d22:	b2da      	uxtb	r2, r3
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002d2e:	2b01      	cmp	r3, #1
 8002d30:	d101      	bne.n	8002d36 <HAL_PCD_EP_ClrStall+0x86>
 8002d32:	2302      	movs	r3, #2
 8002d34:	e00e      	b.n	8002d54 <HAL_PCD_EP_ClrStall+0xa4>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2201      	movs	r2, #1
 8002d3a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	68f9      	ldr	r1, [r7, #12]
 8002d44:	4618      	mov	r0, r3
 8002d46:	f002 f8f3 	bl	8004f30 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002d52:	2300      	movs	r3, #0
}
 8002d54:	4618      	mov	r0, r3
 8002d56:	3710      	adds	r7, #16
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bd80      	pop	{r7, pc}

08002d5c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b084      	sub	sp, #16
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
 8002d64:	460b      	mov	r3, r1
 8002d66:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002d68:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	da0c      	bge.n	8002d8a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d70:	78fb      	ldrb	r3, [r7, #3]
 8002d72:	f003 020f 	and.w	r2, r3, #15
 8002d76:	4613      	mov	r3, r2
 8002d78:	00db      	lsls	r3, r3, #3
 8002d7a:	4413      	add	r3, r2
 8002d7c:	009b      	lsls	r3, r3, #2
 8002d7e:	3338      	adds	r3, #56	; 0x38
 8002d80:	687a      	ldr	r2, [r7, #4]
 8002d82:	4413      	add	r3, r2
 8002d84:	3304      	adds	r3, #4
 8002d86:	60fb      	str	r3, [r7, #12]
 8002d88:	e00c      	b.n	8002da4 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d8a:	78fb      	ldrb	r3, [r7, #3]
 8002d8c:	f003 020f 	and.w	r2, r3, #15
 8002d90:	4613      	mov	r3, r2
 8002d92:	00db      	lsls	r3, r3, #3
 8002d94:	4413      	add	r3, r2
 8002d96:	009b      	lsls	r3, r3, #2
 8002d98:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002d9c:	687a      	ldr	r2, [r7, #4]
 8002d9e:	4413      	add	r3, r2
 8002da0:	3304      	adds	r3, #4
 8002da2:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	68f9      	ldr	r1, [r7, #12]
 8002daa:	4618      	mov	r0, r3
 8002dac:	f001 ff12 	bl	8004bd4 <USB_EPStopXfer>
 8002db0:	4603      	mov	r3, r0
 8002db2:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002db4:	7afb      	ldrb	r3, [r7, #11]
}
 8002db6:	4618      	mov	r0, r3
 8002db8:	3710      	adds	r7, #16
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bd80      	pop	{r7, pc}

08002dbe <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002dbe:	b580      	push	{r7, lr}
 8002dc0:	b08a      	sub	sp, #40	; 0x28
 8002dc2:	af02      	add	r7, sp, #8
 8002dc4:	6078      	str	r0, [r7, #4]
 8002dc6:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002dce:	697b      	ldr	r3, [r7, #20]
 8002dd0:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002dd2:	683a      	ldr	r2, [r7, #0]
 8002dd4:	4613      	mov	r3, r2
 8002dd6:	00db      	lsls	r3, r3, #3
 8002dd8:	4413      	add	r3, r2
 8002dda:	009b      	lsls	r3, r3, #2
 8002ddc:	3338      	adds	r3, #56	; 0x38
 8002dde:	687a      	ldr	r2, [r7, #4]
 8002de0:	4413      	add	r3, r2
 8002de2:	3304      	adds	r3, #4
 8002de4:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	6a1a      	ldr	r2, [r3, #32]
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	699b      	ldr	r3, [r3, #24]
 8002dee:	429a      	cmp	r2, r3
 8002df0:	d901      	bls.n	8002df6 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002df2:	2301      	movs	r3, #1
 8002df4:	e06c      	b.n	8002ed0 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	699a      	ldr	r2, [r3, #24]
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	6a1b      	ldr	r3, [r3, #32]
 8002dfe:	1ad3      	subs	r3, r2, r3
 8002e00:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	68db      	ldr	r3, [r3, #12]
 8002e06:	69fa      	ldr	r2, [r7, #28]
 8002e08:	429a      	cmp	r2, r3
 8002e0a:	d902      	bls.n	8002e12 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	68db      	ldr	r3, [r3, #12]
 8002e10:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002e12:	69fb      	ldr	r3, [r7, #28]
 8002e14:	3303      	adds	r3, #3
 8002e16:	089b      	lsrs	r3, r3, #2
 8002e18:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002e1a:	e02b      	b.n	8002e74 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	699a      	ldr	r2, [r3, #24]
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	6a1b      	ldr	r3, [r3, #32]
 8002e24:	1ad3      	subs	r3, r2, r3
 8002e26:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	68db      	ldr	r3, [r3, #12]
 8002e2c:	69fa      	ldr	r2, [r7, #28]
 8002e2e:	429a      	cmp	r2, r3
 8002e30:	d902      	bls.n	8002e38 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	68db      	ldr	r3, [r3, #12]
 8002e36:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002e38:	69fb      	ldr	r3, [r7, #28]
 8002e3a:	3303      	adds	r3, #3
 8002e3c:	089b      	lsrs	r3, r3, #2
 8002e3e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	6919      	ldr	r1, [r3, #16]
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	b2da      	uxtb	r2, r3
 8002e48:	69fb      	ldr	r3, [r7, #28]
 8002e4a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002e50:	b2db      	uxtb	r3, r3
 8002e52:	9300      	str	r3, [sp, #0]
 8002e54:	4603      	mov	r3, r0
 8002e56:	6978      	ldr	r0, [r7, #20]
 8002e58:	f001 ff66 	bl	8004d28 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	691a      	ldr	r2, [r3, #16]
 8002e60:	69fb      	ldr	r3, [r7, #28]
 8002e62:	441a      	add	r2, r3
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	6a1a      	ldr	r2, [r3, #32]
 8002e6c:	69fb      	ldr	r3, [r7, #28]
 8002e6e:	441a      	add	r2, r3
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	015a      	lsls	r2, r3, #5
 8002e78:	693b      	ldr	r3, [r7, #16]
 8002e7a:	4413      	add	r3, r2
 8002e7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e80:	699b      	ldr	r3, [r3, #24]
 8002e82:	b29b      	uxth	r3, r3
 8002e84:	69ba      	ldr	r2, [r7, #24]
 8002e86:	429a      	cmp	r2, r3
 8002e88:	d809      	bhi.n	8002e9e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	6a1a      	ldr	r2, [r3, #32]
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002e92:	429a      	cmp	r2, r3
 8002e94:	d203      	bcs.n	8002e9e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	699b      	ldr	r3, [r3, #24]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d1be      	bne.n	8002e1c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	699a      	ldr	r2, [r3, #24]
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	6a1b      	ldr	r3, [r3, #32]
 8002ea6:	429a      	cmp	r2, r3
 8002ea8:	d811      	bhi.n	8002ece <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	f003 030f 	and.w	r3, r3, #15
 8002eb0:	2201      	movs	r2, #1
 8002eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb6:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002eb8:	693b      	ldr	r3, [r7, #16]
 8002eba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ebe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ec0:	68bb      	ldr	r3, [r7, #8]
 8002ec2:	43db      	mvns	r3, r3
 8002ec4:	6939      	ldr	r1, [r7, #16]
 8002ec6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002eca:	4013      	ands	r3, r2
 8002ecc:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002ece:	2300      	movs	r3, #0
}
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	3720      	adds	r7, #32
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bd80      	pop	{r7, pc}

08002ed8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b088      	sub	sp, #32
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
 8002ee0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ee8:	69fb      	ldr	r3, [r7, #28]
 8002eea:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002eec:	69fb      	ldr	r3, [r7, #28]
 8002eee:	333c      	adds	r3, #60	; 0x3c
 8002ef0:	3304      	adds	r3, #4
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	015a      	lsls	r2, r3, #5
 8002efa:	69bb      	ldr	r3, [r7, #24]
 8002efc:	4413      	add	r3, r2
 8002efe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f02:	689b      	ldr	r3, [r3, #8]
 8002f04:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	691b      	ldr	r3, [r3, #16]
 8002f0a:	2b01      	cmp	r3, #1
 8002f0c:	d17b      	bne.n	8003006 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	f003 0308 	and.w	r3, r3, #8
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d015      	beq.n	8002f44 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002f18:	697b      	ldr	r3, [r7, #20]
 8002f1a:	4a61      	ldr	r2, [pc, #388]	; (80030a0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	f240 80b9 	bls.w	8003094 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	f000 80b3 	beq.w	8003094 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	015a      	lsls	r2, r3, #5
 8002f32:	69bb      	ldr	r3, [r7, #24]
 8002f34:	4413      	add	r3, r2
 8002f36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f3a:	461a      	mov	r2, r3
 8002f3c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f40:	6093      	str	r3, [r2, #8]
 8002f42:	e0a7      	b.n	8003094 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002f44:	693b      	ldr	r3, [r7, #16]
 8002f46:	f003 0320 	and.w	r3, r3, #32
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d009      	beq.n	8002f62 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	015a      	lsls	r2, r3, #5
 8002f52:	69bb      	ldr	r3, [r7, #24]
 8002f54:	4413      	add	r3, r2
 8002f56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f5a:	461a      	mov	r2, r3
 8002f5c:	2320      	movs	r3, #32
 8002f5e:	6093      	str	r3, [r2, #8]
 8002f60:	e098      	b.n	8003094 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	f040 8093 	bne.w	8003094 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002f6e:	697b      	ldr	r3, [r7, #20]
 8002f70:	4a4b      	ldr	r2, [pc, #300]	; (80030a0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d90f      	bls.n	8002f96 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d00a      	beq.n	8002f96 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	015a      	lsls	r2, r3, #5
 8002f84:	69bb      	ldr	r3, [r7, #24]
 8002f86:	4413      	add	r3, r2
 8002f88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f8c:	461a      	mov	r2, r3
 8002f8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f92:	6093      	str	r3, [r2, #8]
 8002f94:	e07e      	b.n	8003094 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002f96:	683a      	ldr	r2, [r7, #0]
 8002f98:	4613      	mov	r3, r2
 8002f9a:	00db      	lsls	r3, r3, #3
 8002f9c:	4413      	add	r3, r2
 8002f9e:	009b      	lsls	r3, r3, #2
 8002fa0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002fa4:	687a      	ldr	r2, [r7, #4]
 8002fa6:	4413      	add	r3, r2
 8002fa8:	3304      	adds	r3, #4
 8002faa:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	69da      	ldr	r2, [r3, #28]
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	0159      	lsls	r1, r3, #5
 8002fb4:	69bb      	ldr	r3, [r7, #24]
 8002fb6:	440b      	add	r3, r1
 8002fb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fbc:	691b      	ldr	r3, [r3, #16]
 8002fbe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fc2:	1ad2      	subs	r2, r2, r3
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d114      	bne.n	8002ff8 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	699b      	ldr	r3, [r3, #24]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d109      	bne.n	8002fea <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6818      	ldr	r0, [r3, #0]
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002fe0:	461a      	mov	r2, r3
 8002fe2:	2101      	movs	r1, #1
 8002fe4:	f002 f936 	bl	8005254 <USB_EP0_OutStart>
 8002fe8:	e006      	b.n	8002ff8 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	691a      	ldr	r2, [r3, #16]
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	6a1b      	ldr	r3, [r3, #32]
 8002ff2:	441a      	add	r2, r3
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	b2db      	uxtb	r3, r3
 8002ffc:	4619      	mov	r1, r3
 8002ffe:	6878      	ldr	r0, [r7, #4]
 8003000:	f004 f8a8 	bl	8007154 <HAL_PCD_DataOutStageCallback>
 8003004:	e046      	b.n	8003094 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	4a26      	ldr	r2, [pc, #152]	; (80030a4 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d124      	bne.n	8003058 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003014:	2b00      	cmp	r3, #0
 8003016:	d00a      	beq.n	800302e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	015a      	lsls	r2, r3, #5
 800301c:	69bb      	ldr	r3, [r7, #24]
 800301e:	4413      	add	r3, r2
 8003020:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003024:	461a      	mov	r2, r3
 8003026:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800302a:	6093      	str	r3, [r2, #8]
 800302c:	e032      	b.n	8003094 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800302e:	693b      	ldr	r3, [r7, #16]
 8003030:	f003 0320 	and.w	r3, r3, #32
 8003034:	2b00      	cmp	r3, #0
 8003036:	d008      	beq.n	800304a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	015a      	lsls	r2, r3, #5
 800303c:	69bb      	ldr	r3, [r7, #24]
 800303e:	4413      	add	r3, r2
 8003040:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003044:	461a      	mov	r2, r3
 8003046:	2320      	movs	r3, #32
 8003048:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	b2db      	uxtb	r3, r3
 800304e:	4619      	mov	r1, r3
 8003050:	6878      	ldr	r0, [r7, #4]
 8003052:	f004 f87f 	bl	8007154 <HAL_PCD_DataOutStageCallback>
 8003056:	e01d      	b.n	8003094 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d114      	bne.n	8003088 <PCD_EP_OutXfrComplete_int+0x1b0>
 800305e:	6879      	ldr	r1, [r7, #4]
 8003060:	683a      	ldr	r2, [r7, #0]
 8003062:	4613      	mov	r3, r2
 8003064:	00db      	lsls	r3, r3, #3
 8003066:	4413      	add	r3, r2
 8003068:	009b      	lsls	r3, r3, #2
 800306a:	440b      	add	r3, r1
 800306c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d108      	bne.n	8003088 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6818      	ldr	r0, [r3, #0]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003080:	461a      	mov	r2, r3
 8003082:	2100      	movs	r1, #0
 8003084:	f002 f8e6 	bl	8005254 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	b2db      	uxtb	r3, r3
 800308c:	4619      	mov	r1, r3
 800308e:	6878      	ldr	r0, [r7, #4]
 8003090:	f004 f860 	bl	8007154 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003094:	2300      	movs	r3, #0
}
 8003096:	4618      	mov	r0, r3
 8003098:	3720      	adds	r7, #32
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}
 800309e:	bf00      	nop
 80030a0:	4f54300a 	.word	0x4f54300a
 80030a4:	4f54310a 	.word	0x4f54310a

080030a8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b086      	sub	sp, #24
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
 80030b0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80030b8:	697b      	ldr	r3, [r7, #20]
 80030ba:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	333c      	adds	r3, #60	; 0x3c
 80030c0:	3304      	adds	r3, #4
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	015a      	lsls	r2, r3, #5
 80030ca:	693b      	ldr	r3, [r7, #16]
 80030cc:	4413      	add	r3, r2
 80030ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030d2:	689b      	ldr	r3, [r3, #8]
 80030d4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	4a15      	ldr	r2, [pc, #84]	; (8003130 <PCD_EP_OutSetupPacket_int+0x88>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d90e      	bls.n	80030fc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80030de:	68bb      	ldr	r3, [r7, #8]
 80030e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d009      	beq.n	80030fc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	015a      	lsls	r2, r3, #5
 80030ec:	693b      	ldr	r3, [r7, #16]
 80030ee:	4413      	add	r3, r2
 80030f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030f4:	461a      	mov	r2, r3
 80030f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80030fa:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80030fc:	6878      	ldr	r0, [r7, #4]
 80030fe:	f004 f817 	bl	8007130 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	4a0a      	ldr	r2, [pc, #40]	; (8003130 <PCD_EP_OutSetupPacket_int+0x88>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d90c      	bls.n	8003124 <PCD_EP_OutSetupPacket_int+0x7c>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	691b      	ldr	r3, [r3, #16]
 800310e:	2b01      	cmp	r3, #1
 8003110:	d108      	bne.n	8003124 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6818      	ldr	r0, [r3, #0]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800311c:	461a      	mov	r2, r3
 800311e:	2101      	movs	r1, #1
 8003120:	f002 f898 	bl	8005254 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003124:	2300      	movs	r3, #0
}
 8003126:	4618      	mov	r0, r3
 8003128:	3718      	adds	r7, #24
 800312a:	46bd      	mov	sp, r7
 800312c:	bd80      	pop	{r7, pc}
 800312e:	bf00      	nop
 8003130:	4f54300a 	.word	0x4f54300a

08003134 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003134:	b480      	push	{r7}
 8003136:	b085      	sub	sp, #20
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
 800313c:	460b      	mov	r3, r1
 800313e:	70fb      	strb	r3, [r7, #3]
 8003140:	4613      	mov	r3, r2
 8003142:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800314a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800314c:	78fb      	ldrb	r3, [r7, #3]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d107      	bne.n	8003162 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003152:	883b      	ldrh	r3, [r7, #0]
 8003154:	0419      	lsls	r1, r3, #16
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	68ba      	ldr	r2, [r7, #8]
 800315c:	430a      	orrs	r2, r1
 800315e:	629a      	str	r2, [r3, #40]	; 0x28
 8003160:	e028      	b.n	80031b4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003168:	0c1b      	lsrs	r3, r3, #16
 800316a:	68ba      	ldr	r2, [r7, #8]
 800316c:	4413      	add	r3, r2
 800316e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003170:	2300      	movs	r3, #0
 8003172:	73fb      	strb	r3, [r7, #15]
 8003174:	e00d      	b.n	8003192 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681a      	ldr	r2, [r3, #0]
 800317a:	7bfb      	ldrb	r3, [r7, #15]
 800317c:	3340      	adds	r3, #64	; 0x40
 800317e:	009b      	lsls	r3, r3, #2
 8003180:	4413      	add	r3, r2
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	0c1b      	lsrs	r3, r3, #16
 8003186:	68ba      	ldr	r2, [r7, #8]
 8003188:	4413      	add	r3, r2
 800318a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800318c:	7bfb      	ldrb	r3, [r7, #15]
 800318e:	3301      	adds	r3, #1
 8003190:	73fb      	strb	r3, [r7, #15]
 8003192:	7bfa      	ldrb	r2, [r7, #15]
 8003194:	78fb      	ldrb	r3, [r7, #3]
 8003196:	3b01      	subs	r3, #1
 8003198:	429a      	cmp	r2, r3
 800319a:	d3ec      	bcc.n	8003176 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800319c:	883b      	ldrh	r3, [r7, #0]
 800319e:	0418      	lsls	r0, r3, #16
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6819      	ldr	r1, [r3, #0]
 80031a4:	78fb      	ldrb	r3, [r7, #3]
 80031a6:	3b01      	subs	r3, #1
 80031a8:	68ba      	ldr	r2, [r7, #8]
 80031aa:	4302      	orrs	r2, r0
 80031ac:	3340      	adds	r3, #64	; 0x40
 80031ae:	009b      	lsls	r3, r3, #2
 80031b0:	440b      	add	r3, r1
 80031b2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80031b4:	2300      	movs	r3, #0
}
 80031b6:	4618      	mov	r0, r3
 80031b8:	3714      	adds	r7, #20
 80031ba:	46bd      	mov	sp, r7
 80031bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c0:	4770      	bx	lr

080031c2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80031c2:	b480      	push	{r7}
 80031c4:	b083      	sub	sp, #12
 80031c6:	af00      	add	r7, sp, #0
 80031c8:	6078      	str	r0, [r7, #4]
 80031ca:	460b      	mov	r3, r1
 80031cc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	887a      	ldrh	r2, [r7, #2]
 80031d4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80031d6:	2300      	movs	r3, #0
}
 80031d8:	4618      	mov	r0, r3
 80031da:	370c      	adds	r7, #12
 80031dc:	46bd      	mov	sp, r7
 80031de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e2:	4770      	bx	lr

080031e4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80031e4:	b480      	push	{r7}
 80031e6:	b083      	sub	sp, #12
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
 80031ec:	460b      	mov	r3, r1
 80031ee:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80031f0:	bf00      	nop
 80031f2:	370c      	adds	r7, #12
 80031f4:	46bd      	mov	sp, r7
 80031f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fa:	4770      	bx	lr

080031fc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b086      	sub	sp, #24
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d101      	bne.n	800320e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800320a:	2301      	movs	r3, #1
 800320c:	e267      	b.n	80036de <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f003 0301 	and.w	r3, r3, #1
 8003216:	2b00      	cmp	r3, #0
 8003218:	d075      	beq.n	8003306 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800321a:	4b88      	ldr	r3, [pc, #544]	; (800343c <HAL_RCC_OscConfig+0x240>)
 800321c:	689b      	ldr	r3, [r3, #8]
 800321e:	f003 030c 	and.w	r3, r3, #12
 8003222:	2b04      	cmp	r3, #4
 8003224:	d00c      	beq.n	8003240 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003226:	4b85      	ldr	r3, [pc, #532]	; (800343c <HAL_RCC_OscConfig+0x240>)
 8003228:	689b      	ldr	r3, [r3, #8]
 800322a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800322e:	2b08      	cmp	r3, #8
 8003230:	d112      	bne.n	8003258 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003232:	4b82      	ldr	r3, [pc, #520]	; (800343c <HAL_RCC_OscConfig+0x240>)
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800323a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800323e:	d10b      	bne.n	8003258 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003240:	4b7e      	ldr	r3, [pc, #504]	; (800343c <HAL_RCC_OscConfig+0x240>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003248:	2b00      	cmp	r3, #0
 800324a:	d05b      	beq.n	8003304 <HAL_RCC_OscConfig+0x108>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d157      	bne.n	8003304 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003254:	2301      	movs	r3, #1
 8003256:	e242      	b.n	80036de <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003260:	d106      	bne.n	8003270 <HAL_RCC_OscConfig+0x74>
 8003262:	4b76      	ldr	r3, [pc, #472]	; (800343c <HAL_RCC_OscConfig+0x240>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4a75      	ldr	r2, [pc, #468]	; (800343c <HAL_RCC_OscConfig+0x240>)
 8003268:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800326c:	6013      	str	r3, [r2, #0]
 800326e:	e01d      	b.n	80032ac <HAL_RCC_OscConfig+0xb0>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003278:	d10c      	bne.n	8003294 <HAL_RCC_OscConfig+0x98>
 800327a:	4b70      	ldr	r3, [pc, #448]	; (800343c <HAL_RCC_OscConfig+0x240>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a6f      	ldr	r2, [pc, #444]	; (800343c <HAL_RCC_OscConfig+0x240>)
 8003280:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003284:	6013      	str	r3, [r2, #0]
 8003286:	4b6d      	ldr	r3, [pc, #436]	; (800343c <HAL_RCC_OscConfig+0x240>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4a6c      	ldr	r2, [pc, #432]	; (800343c <HAL_RCC_OscConfig+0x240>)
 800328c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003290:	6013      	str	r3, [r2, #0]
 8003292:	e00b      	b.n	80032ac <HAL_RCC_OscConfig+0xb0>
 8003294:	4b69      	ldr	r3, [pc, #420]	; (800343c <HAL_RCC_OscConfig+0x240>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a68      	ldr	r2, [pc, #416]	; (800343c <HAL_RCC_OscConfig+0x240>)
 800329a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800329e:	6013      	str	r3, [r2, #0]
 80032a0:	4b66      	ldr	r3, [pc, #408]	; (800343c <HAL_RCC_OscConfig+0x240>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a65      	ldr	r2, [pc, #404]	; (800343c <HAL_RCC_OscConfig+0x240>)
 80032a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d013      	beq.n	80032dc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032b4:	f7fe fa1e 	bl	80016f4 <HAL_GetTick>
 80032b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032ba:	e008      	b.n	80032ce <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032bc:	f7fe fa1a 	bl	80016f4 <HAL_GetTick>
 80032c0:	4602      	mov	r2, r0
 80032c2:	693b      	ldr	r3, [r7, #16]
 80032c4:	1ad3      	subs	r3, r2, r3
 80032c6:	2b64      	cmp	r3, #100	; 0x64
 80032c8:	d901      	bls.n	80032ce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80032ca:	2303      	movs	r3, #3
 80032cc:	e207      	b.n	80036de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032ce:	4b5b      	ldr	r3, [pc, #364]	; (800343c <HAL_RCC_OscConfig+0x240>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d0f0      	beq.n	80032bc <HAL_RCC_OscConfig+0xc0>
 80032da:	e014      	b.n	8003306 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032dc:	f7fe fa0a 	bl	80016f4 <HAL_GetTick>
 80032e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032e2:	e008      	b.n	80032f6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032e4:	f7fe fa06 	bl	80016f4 <HAL_GetTick>
 80032e8:	4602      	mov	r2, r0
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	1ad3      	subs	r3, r2, r3
 80032ee:	2b64      	cmp	r3, #100	; 0x64
 80032f0:	d901      	bls.n	80032f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80032f2:	2303      	movs	r3, #3
 80032f4:	e1f3      	b.n	80036de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032f6:	4b51      	ldr	r3, [pc, #324]	; (800343c <HAL_RCC_OscConfig+0x240>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d1f0      	bne.n	80032e4 <HAL_RCC_OscConfig+0xe8>
 8003302:	e000      	b.n	8003306 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003304:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f003 0302 	and.w	r3, r3, #2
 800330e:	2b00      	cmp	r3, #0
 8003310:	d063      	beq.n	80033da <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003312:	4b4a      	ldr	r3, [pc, #296]	; (800343c <HAL_RCC_OscConfig+0x240>)
 8003314:	689b      	ldr	r3, [r3, #8]
 8003316:	f003 030c 	and.w	r3, r3, #12
 800331a:	2b00      	cmp	r3, #0
 800331c:	d00b      	beq.n	8003336 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800331e:	4b47      	ldr	r3, [pc, #284]	; (800343c <HAL_RCC_OscConfig+0x240>)
 8003320:	689b      	ldr	r3, [r3, #8]
 8003322:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003326:	2b08      	cmp	r3, #8
 8003328:	d11c      	bne.n	8003364 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800332a:	4b44      	ldr	r3, [pc, #272]	; (800343c <HAL_RCC_OscConfig+0x240>)
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003332:	2b00      	cmp	r3, #0
 8003334:	d116      	bne.n	8003364 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003336:	4b41      	ldr	r3, [pc, #260]	; (800343c <HAL_RCC_OscConfig+0x240>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f003 0302 	and.w	r3, r3, #2
 800333e:	2b00      	cmp	r3, #0
 8003340:	d005      	beq.n	800334e <HAL_RCC_OscConfig+0x152>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	68db      	ldr	r3, [r3, #12]
 8003346:	2b01      	cmp	r3, #1
 8003348:	d001      	beq.n	800334e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800334a:	2301      	movs	r3, #1
 800334c:	e1c7      	b.n	80036de <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800334e:	4b3b      	ldr	r3, [pc, #236]	; (800343c <HAL_RCC_OscConfig+0x240>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	691b      	ldr	r3, [r3, #16]
 800335a:	00db      	lsls	r3, r3, #3
 800335c:	4937      	ldr	r1, [pc, #220]	; (800343c <HAL_RCC_OscConfig+0x240>)
 800335e:	4313      	orrs	r3, r2
 8003360:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003362:	e03a      	b.n	80033da <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	68db      	ldr	r3, [r3, #12]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d020      	beq.n	80033ae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800336c:	4b34      	ldr	r3, [pc, #208]	; (8003440 <HAL_RCC_OscConfig+0x244>)
 800336e:	2201      	movs	r2, #1
 8003370:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003372:	f7fe f9bf 	bl	80016f4 <HAL_GetTick>
 8003376:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003378:	e008      	b.n	800338c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800337a:	f7fe f9bb 	bl	80016f4 <HAL_GetTick>
 800337e:	4602      	mov	r2, r0
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	1ad3      	subs	r3, r2, r3
 8003384:	2b02      	cmp	r3, #2
 8003386:	d901      	bls.n	800338c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003388:	2303      	movs	r3, #3
 800338a:	e1a8      	b.n	80036de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800338c:	4b2b      	ldr	r3, [pc, #172]	; (800343c <HAL_RCC_OscConfig+0x240>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f003 0302 	and.w	r3, r3, #2
 8003394:	2b00      	cmp	r3, #0
 8003396:	d0f0      	beq.n	800337a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003398:	4b28      	ldr	r3, [pc, #160]	; (800343c <HAL_RCC_OscConfig+0x240>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	691b      	ldr	r3, [r3, #16]
 80033a4:	00db      	lsls	r3, r3, #3
 80033a6:	4925      	ldr	r1, [pc, #148]	; (800343c <HAL_RCC_OscConfig+0x240>)
 80033a8:	4313      	orrs	r3, r2
 80033aa:	600b      	str	r3, [r1, #0]
 80033ac:	e015      	b.n	80033da <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033ae:	4b24      	ldr	r3, [pc, #144]	; (8003440 <HAL_RCC_OscConfig+0x244>)
 80033b0:	2200      	movs	r2, #0
 80033b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033b4:	f7fe f99e 	bl	80016f4 <HAL_GetTick>
 80033b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033ba:	e008      	b.n	80033ce <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80033bc:	f7fe f99a 	bl	80016f4 <HAL_GetTick>
 80033c0:	4602      	mov	r2, r0
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	1ad3      	subs	r3, r2, r3
 80033c6:	2b02      	cmp	r3, #2
 80033c8:	d901      	bls.n	80033ce <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80033ca:	2303      	movs	r3, #3
 80033cc:	e187      	b.n	80036de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033ce:	4b1b      	ldr	r3, [pc, #108]	; (800343c <HAL_RCC_OscConfig+0x240>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f003 0302 	and.w	r3, r3, #2
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d1f0      	bne.n	80033bc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f003 0308 	and.w	r3, r3, #8
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d036      	beq.n	8003454 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	695b      	ldr	r3, [r3, #20]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d016      	beq.n	800341c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033ee:	4b15      	ldr	r3, [pc, #84]	; (8003444 <HAL_RCC_OscConfig+0x248>)
 80033f0:	2201      	movs	r2, #1
 80033f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033f4:	f7fe f97e 	bl	80016f4 <HAL_GetTick>
 80033f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033fa:	e008      	b.n	800340e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033fc:	f7fe f97a 	bl	80016f4 <HAL_GetTick>
 8003400:	4602      	mov	r2, r0
 8003402:	693b      	ldr	r3, [r7, #16]
 8003404:	1ad3      	subs	r3, r2, r3
 8003406:	2b02      	cmp	r3, #2
 8003408:	d901      	bls.n	800340e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800340a:	2303      	movs	r3, #3
 800340c:	e167      	b.n	80036de <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800340e:	4b0b      	ldr	r3, [pc, #44]	; (800343c <HAL_RCC_OscConfig+0x240>)
 8003410:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003412:	f003 0302 	and.w	r3, r3, #2
 8003416:	2b00      	cmp	r3, #0
 8003418:	d0f0      	beq.n	80033fc <HAL_RCC_OscConfig+0x200>
 800341a:	e01b      	b.n	8003454 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800341c:	4b09      	ldr	r3, [pc, #36]	; (8003444 <HAL_RCC_OscConfig+0x248>)
 800341e:	2200      	movs	r2, #0
 8003420:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003422:	f7fe f967 	bl	80016f4 <HAL_GetTick>
 8003426:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003428:	e00e      	b.n	8003448 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800342a:	f7fe f963 	bl	80016f4 <HAL_GetTick>
 800342e:	4602      	mov	r2, r0
 8003430:	693b      	ldr	r3, [r7, #16]
 8003432:	1ad3      	subs	r3, r2, r3
 8003434:	2b02      	cmp	r3, #2
 8003436:	d907      	bls.n	8003448 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003438:	2303      	movs	r3, #3
 800343a:	e150      	b.n	80036de <HAL_RCC_OscConfig+0x4e2>
 800343c:	40023800 	.word	0x40023800
 8003440:	42470000 	.word	0x42470000
 8003444:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003448:	4b88      	ldr	r3, [pc, #544]	; (800366c <HAL_RCC_OscConfig+0x470>)
 800344a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800344c:	f003 0302 	and.w	r3, r3, #2
 8003450:	2b00      	cmp	r3, #0
 8003452:	d1ea      	bne.n	800342a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f003 0304 	and.w	r3, r3, #4
 800345c:	2b00      	cmp	r3, #0
 800345e:	f000 8097 	beq.w	8003590 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003462:	2300      	movs	r3, #0
 8003464:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003466:	4b81      	ldr	r3, [pc, #516]	; (800366c <HAL_RCC_OscConfig+0x470>)
 8003468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800346a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800346e:	2b00      	cmp	r3, #0
 8003470:	d10f      	bne.n	8003492 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003472:	2300      	movs	r3, #0
 8003474:	60bb      	str	r3, [r7, #8]
 8003476:	4b7d      	ldr	r3, [pc, #500]	; (800366c <HAL_RCC_OscConfig+0x470>)
 8003478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800347a:	4a7c      	ldr	r2, [pc, #496]	; (800366c <HAL_RCC_OscConfig+0x470>)
 800347c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003480:	6413      	str	r3, [r2, #64]	; 0x40
 8003482:	4b7a      	ldr	r3, [pc, #488]	; (800366c <HAL_RCC_OscConfig+0x470>)
 8003484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003486:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800348a:	60bb      	str	r3, [r7, #8]
 800348c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800348e:	2301      	movs	r3, #1
 8003490:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003492:	4b77      	ldr	r3, [pc, #476]	; (8003670 <HAL_RCC_OscConfig+0x474>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800349a:	2b00      	cmp	r3, #0
 800349c:	d118      	bne.n	80034d0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800349e:	4b74      	ldr	r3, [pc, #464]	; (8003670 <HAL_RCC_OscConfig+0x474>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a73      	ldr	r2, [pc, #460]	; (8003670 <HAL_RCC_OscConfig+0x474>)
 80034a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034aa:	f7fe f923 	bl	80016f4 <HAL_GetTick>
 80034ae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034b0:	e008      	b.n	80034c4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034b2:	f7fe f91f 	bl	80016f4 <HAL_GetTick>
 80034b6:	4602      	mov	r2, r0
 80034b8:	693b      	ldr	r3, [r7, #16]
 80034ba:	1ad3      	subs	r3, r2, r3
 80034bc:	2b02      	cmp	r3, #2
 80034be:	d901      	bls.n	80034c4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80034c0:	2303      	movs	r3, #3
 80034c2:	e10c      	b.n	80036de <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034c4:	4b6a      	ldr	r3, [pc, #424]	; (8003670 <HAL_RCC_OscConfig+0x474>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d0f0      	beq.n	80034b2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	689b      	ldr	r3, [r3, #8]
 80034d4:	2b01      	cmp	r3, #1
 80034d6:	d106      	bne.n	80034e6 <HAL_RCC_OscConfig+0x2ea>
 80034d8:	4b64      	ldr	r3, [pc, #400]	; (800366c <HAL_RCC_OscConfig+0x470>)
 80034da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034dc:	4a63      	ldr	r2, [pc, #396]	; (800366c <HAL_RCC_OscConfig+0x470>)
 80034de:	f043 0301 	orr.w	r3, r3, #1
 80034e2:	6713      	str	r3, [r2, #112]	; 0x70
 80034e4:	e01c      	b.n	8003520 <HAL_RCC_OscConfig+0x324>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	689b      	ldr	r3, [r3, #8]
 80034ea:	2b05      	cmp	r3, #5
 80034ec:	d10c      	bne.n	8003508 <HAL_RCC_OscConfig+0x30c>
 80034ee:	4b5f      	ldr	r3, [pc, #380]	; (800366c <HAL_RCC_OscConfig+0x470>)
 80034f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034f2:	4a5e      	ldr	r2, [pc, #376]	; (800366c <HAL_RCC_OscConfig+0x470>)
 80034f4:	f043 0304 	orr.w	r3, r3, #4
 80034f8:	6713      	str	r3, [r2, #112]	; 0x70
 80034fa:	4b5c      	ldr	r3, [pc, #368]	; (800366c <HAL_RCC_OscConfig+0x470>)
 80034fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034fe:	4a5b      	ldr	r2, [pc, #364]	; (800366c <HAL_RCC_OscConfig+0x470>)
 8003500:	f043 0301 	orr.w	r3, r3, #1
 8003504:	6713      	str	r3, [r2, #112]	; 0x70
 8003506:	e00b      	b.n	8003520 <HAL_RCC_OscConfig+0x324>
 8003508:	4b58      	ldr	r3, [pc, #352]	; (800366c <HAL_RCC_OscConfig+0x470>)
 800350a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800350c:	4a57      	ldr	r2, [pc, #348]	; (800366c <HAL_RCC_OscConfig+0x470>)
 800350e:	f023 0301 	bic.w	r3, r3, #1
 8003512:	6713      	str	r3, [r2, #112]	; 0x70
 8003514:	4b55      	ldr	r3, [pc, #340]	; (800366c <HAL_RCC_OscConfig+0x470>)
 8003516:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003518:	4a54      	ldr	r2, [pc, #336]	; (800366c <HAL_RCC_OscConfig+0x470>)
 800351a:	f023 0304 	bic.w	r3, r3, #4
 800351e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	689b      	ldr	r3, [r3, #8]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d015      	beq.n	8003554 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003528:	f7fe f8e4 	bl	80016f4 <HAL_GetTick>
 800352c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800352e:	e00a      	b.n	8003546 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003530:	f7fe f8e0 	bl	80016f4 <HAL_GetTick>
 8003534:	4602      	mov	r2, r0
 8003536:	693b      	ldr	r3, [r7, #16]
 8003538:	1ad3      	subs	r3, r2, r3
 800353a:	f241 3288 	movw	r2, #5000	; 0x1388
 800353e:	4293      	cmp	r3, r2
 8003540:	d901      	bls.n	8003546 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003542:	2303      	movs	r3, #3
 8003544:	e0cb      	b.n	80036de <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003546:	4b49      	ldr	r3, [pc, #292]	; (800366c <HAL_RCC_OscConfig+0x470>)
 8003548:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800354a:	f003 0302 	and.w	r3, r3, #2
 800354e:	2b00      	cmp	r3, #0
 8003550:	d0ee      	beq.n	8003530 <HAL_RCC_OscConfig+0x334>
 8003552:	e014      	b.n	800357e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003554:	f7fe f8ce 	bl	80016f4 <HAL_GetTick>
 8003558:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800355a:	e00a      	b.n	8003572 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800355c:	f7fe f8ca 	bl	80016f4 <HAL_GetTick>
 8003560:	4602      	mov	r2, r0
 8003562:	693b      	ldr	r3, [r7, #16]
 8003564:	1ad3      	subs	r3, r2, r3
 8003566:	f241 3288 	movw	r2, #5000	; 0x1388
 800356a:	4293      	cmp	r3, r2
 800356c:	d901      	bls.n	8003572 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800356e:	2303      	movs	r3, #3
 8003570:	e0b5      	b.n	80036de <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003572:	4b3e      	ldr	r3, [pc, #248]	; (800366c <HAL_RCC_OscConfig+0x470>)
 8003574:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003576:	f003 0302 	and.w	r3, r3, #2
 800357a:	2b00      	cmp	r3, #0
 800357c:	d1ee      	bne.n	800355c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800357e:	7dfb      	ldrb	r3, [r7, #23]
 8003580:	2b01      	cmp	r3, #1
 8003582:	d105      	bne.n	8003590 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003584:	4b39      	ldr	r3, [pc, #228]	; (800366c <HAL_RCC_OscConfig+0x470>)
 8003586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003588:	4a38      	ldr	r2, [pc, #224]	; (800366c <HAL_RCC_OscConfig+0x470>)
 800358a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800358e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	699b      	ldr	r3, [r3, #24]
 8003594:	2b00      	cmp	r3, #0
 8003596:	f000 80a1 	beq.w	80036dc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800359a:	4b34      	ldr	r3, [pc, #208]	; (800366c <HAL_RCC_OscConfig+0x470>)
 800359c:	689b      	ldr	r3, [r3, #8]
 800359e:	f003 030c 	and.w	r3, r3, #12
 80035a2:	2b08      	cmp	r3, #8
 80035a4:	d05c      	beq.n	8003660 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	699b      	ldr	r3, [r3, #24]
 80035aa:	2b02      	cmp	r3, #2
 80035ac:	d141      	bne.n	8003632 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035ae:	4b31      	ldr	r3, [pc, #196]	; (8003674 <HAL_RCC_OscConfig+0x478>)
 80035b0:	2200      	movs	r2, #0
 80035b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035b4:	f7fe f89e 	bl	80016f4 <HAL_GetTick>
 80035b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035ba:	e008      	b.n	80035ce <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035bc:	f7fe f89a 	bl	80016f4 <HAL_GetTick>
 80035c0:	4602      	mov	r2, r0
 80035c2:	693b      	ldr	r3, [r7, #16]
 80035c4:	1ad3      	subs	r3, r2, r3
 80035c6:	2b02      	cmp	r3, #2
 80035c8:	d901      	bls.n	80035ce <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80035ca:	2303      	movs	r3, #3
 80035cc:	e087      	b.n	80036de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035ce:	4b27      	ldr	r3, [pc, #156]	; (800366c <HAL_RCC_OscConfig+0x470>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d1f0      	bne.n	80035bc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	69da      	ldr	r2, [r3, #28]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6a1b      	ldr	r3, [r3, #32]
 80035e2:	431a      	orrs	r2, r3
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035e8:	019b      	lsls	r3, r3, #6
 80035ea:	431a      	orrs	r2, r3
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035f0:	085b      	lsrs	r3, r3, #1
 80035f2:	3b01      	subs	r3, #1
 80035f4:	041b      	lsls	r3, r3, #16
 80035f6:	431a      	orrs	r2, r3
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035fc:	061b      	lsls	r3, r3, #24
 80035fe:	491b      	ldr	r1, [pc, #108]	; (800366c <HAL_RCC_OscConfig+0x470>)
 8003600:	4313      	orrs	r3, r2
 8003602:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003604:	4b1b      	ldr	r3, [pc, #108]	; (8003674 <HAL_RCC_OscConfig+0x478>)
 8003606:	2201      	movs	r2, #1
 8003608:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800360a:	f7fe f873 	bl	80016f4 <HAL_GetTick>
 800360e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003610:	e008      	b.n	8003624 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003612:	f7fe f86f 	bl	80016f4 <HAL_GetTick>
 8003616:	4602      	mov	r2, r0
 8003618:	693b      	ldr	r3, [r7, #16]
 800361a:	1ad3      	subs	r3, r2, r3
 800361c:	2b02      	cmp	r3, #2
 800361e:	d901      	bls.n	8003624 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003620:	2303      	movs	r3, #3
 8003622:	e05c      	b.n	80036de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003624:	4b11      	ldr	r3, [pc, #68]	; (800366c <HAL_RCC_OscConfig+0x470>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800362c:	2b00      	cmp	r3, #0
 800362e:	d0f0      	beq.n	8003612 <HAL_RCC_OscConfig+0x416>
 8003630:	e054      	b.n	80036dc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003632:	4b10      	ldr	r3, [pc, #64]	; (8003674 <HAL_RCC_OscConfig+0x478>)
 8003634:	2200      	movs	r2, #0
 8003636:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003638:	f7fe f85c 	bl	80016f4 <HAL_GetTick>
 800363c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800363e:	e008      	b.n	8003652 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003640:	f7fe f858 	bl	80016f4 <HAL_GetTick>
 8003644:	4602      	mov	r2, r0
 8003646:	693b      	ldr	r3, [r7, #16]
 8003648:	1ad3      	subs	r3, r2, r3
 800364a:	2b02      	cmp	r3, #2
 800364c:	d901      	bls.n	8003652 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800364e:	2303      	movs	r3, #3
 8003650:	e045      	b.n	80036de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003652:	4b06      	ldr	r3, [pc, #24]	; (800366c <HAL_RCC_OscConfig+0x470>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800365a:	2b00      	cmp	r3, #0
 800365c:	d1f0      	bne.n	8003640 <HAL_RCC_OscConfig+0x444>
 800365e:	e03d      	b.n	80036dc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	699b      	ldr	r3, [r3, #24]
 8003664:	2b01      	cmp	r3, #1
 8003666:	d107      	bne.n	8003678 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003668:	2301      	movs	r3, #1
 800366a:	e038      	b.n	80036de <HAL_RCC_OscConfig+0x4e2>
 800366c:	40023800 	.word	0x40023800
 8003670:	40007000 	.word	0x40007000
 8003674:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003678:	4b1b      	ldr	r3, [pc, #108]	; (80036e8 <HAL_RCC_OscConfig+0x4ec>)
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	699b      	ldr	r3, [r3, #24]
 8003682:	2b01      	cmp	r3, #1
 8003684:	d028      	beq.n	80036d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003690:	429a      	cmp	r2, r3
 8003692:	d121      	bne.n	80036d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800369e:	429a      	cmp	r2, r3
 80036a0:	d11a      	bne.n	80036d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80036a2:	68fa      	ldr	r2, [r7, #12]
 80036a4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80036a8:	4013      	ands	r3, r2
 80036aa:	687a      	ldr	r2, [r7, #4]
 80036ac:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80036ae:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d111      	bne.n	80036d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036be:	085b      	lsrs	r3, r3, #1
 80036c0:	3b01      	subs	r3, #1
 80036c2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80036c4:	429a      	cmp	r2, r3
 80036c6:	d107      	bne.n	80036d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036d2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80036d4:	429a      	cmp	r2, r3
 80036d6:	d001      	beq.n	80036dc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80036d8:	2301      	movs	r3, #1
 80036da:	e000      	b.n	80036de <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80036dc:	2300      	movs	r3, #0
}
 80036de:	4618      	mov	r0, r3
 80036e0:	3718      	adds	r7, #24
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bd80      	pop	{r7, pc}
 80036e6:	bf00      	nop
 80036e8:	40023800 	.word	0x40023800

080036ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b084      	sub	sp, #16
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
 80036f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d101      	bne.n	8003700 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80036fc:	2301      	movs	r3, #1
 80036fe:	e0cc      	b.n	800389a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003700:	4b68      	ldr	r3, [pc, #416]	; (80038a4 <HAL_RCC_ClockConfig+0x1b8>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f003 030f 	and.w	r3, r3, #15
 8003708:	683a      	ldr	r2, [r7, #0]
 800370a:	429a      	cmp	r2, r3
 800370c:	d90c      	bls.n	8003728 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800370e:	4b65      	ldr	r3, [pc, #404]	; (80038a4 <HAL_RCC_ClockConfig+0x1b8>)
 8003710:	683a      	ldr	r2, [r7, #0]
 8003712:	b2d2      	uxtb	r2, r2
 8003714:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003716:	4b63      	ldr	r3, [pc, #396]	; (80038a4 <HAL_RCC_ClockConfig+0x1b8>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f003 030f 	and.w	r3, r3, #15
 800371e:	683a      	ldr	r2, [r7, #0]
 8003720:	429a      	cmp	r2, r3
 8003722:	d001      	beq.n	8003728 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003724:	2301      	movs	r3, #1
 8003726:	e0b8      	b.n	800389a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f003 0302 	and.w	r3, r3, #2
 8003730:	2b00      	cmp	r3, #0
 8003732:	d020      	beq.n	8003776 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f003 0304 	and.w	r3, r3, #4
 800373c:	2b00      	cmp	r3, #0
 800373e:	d005      	beq.n	800374c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003740:	4b59      	ldr	r3, [pc, #356]	; (80038a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003742:	689b      	ldr	r3, [r3, #8]
 8003744:	4a58      	ldr	r2, [pc, #352]	; (80038a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003746:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800374a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f003 0308 	and.w	r3, r3, #8
 8003754:	2b00      	cmp	r3, #0
 8003756:	d005      	beq.n	8003764 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003758:	4b53      	ldr	r3, [pc, #332]	; (80038a8 <HAL_RCC_ClockConfig+0x1bc>)
 800375a:	689b      	ldr	r3, [r3, #8]
 800375c:	4a52      	ldr	r2, [pc, #328]	; (80038a8 <HAL_RCC_ClockConfig+0x1bc>)
 800375e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003762:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003764:	4b50      	ldr	r3, [pc, #320]	; (80038a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003766:	689b      	ldr	r3, [r3, #8]
 8003768:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	689b      	ldr	r3, [r3, #8]
 8003770:	494d      	ldr	r1, [pc, #308]	; (80038a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003772:	4313      	orrs	r3, r2
 8003774:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f003 0301 	and.w	r3, r3, #1
 800377e:	2b00      	cmp	r3, #0
 8003780:	d044      	beq.n	800380c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	2b01      	cmp	r3, #1
 8003788:	d107      	bne.n	800379a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800378a:	4b47      	ldr	r3, [pc, #284]	; (80038a8 <HAL_RCC_ClockConfig+0x1bc>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003792:	2b00      	cmp	r3, #0
 8003794:	d119      	bne.n	80037ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003796:	2301      	movs	r3, #1
 8003798:	e07f      	b.n	800389a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	2b02      	cmp	r3, #2
 80037a0:	d003      	beq.n	80037aa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80037a6:	2b03      	cmp	r3, #3
 80037a8:	d107      	bne.n	80037ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037aa:	4b3f      	ldr	r3, [pc, #252]	; (80038a8 <HAL_RCC_ClockConfig+0x1bc>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d109      	bne.n	80037ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
 80037b8:	e06f      	b.n	800389a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037ba:	4b3b      	ldr	r3, [pc, #236]	; (80038a8 <HAL_RCC_ClockConfig+0x1bc>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f003 0302 	and.w	r3, r3, #2
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d101      	bne.n	80037ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037c6:	2301      	movs	r3, #1
 80037c8:	e067      	b.n	800389a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80037ca:	4b37      	ldr	r3, [pc, #220]	; (80038a8 <HAL_RCC_ClockConfig+0x1bc>)
 80037cc:	689b      	ldr	r3, [r3, #8]
 80037ce:	f023 0203 	bic.w	r2, r3, #3
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	4934      	ldr	r1, [pc, #208]	; (80038a8 <HAL_RCC_ClockConfig+0x1bc>)
 80037d8:	4313      	orrs	r3, r2
 80037da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80037dc:	f7fd ff8a 	bl	80016f4 <HAL_GetTick>
 80037e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037e2:	e00a      	b.n	80037fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037e4:	f7fd ff86 	bl	80016f4 <HAL_GetTick>
 80037e8:	4602      	mov	r2, r0
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	1ad3      	subs	r3, r2, r3
 80037ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d901      	bls.n	80037fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80037f6:	2303      	movs	r3, #3
 80037f8:	e04f      	b.n	800389a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037fa:	4b2b      	ldr	r3, [pc, #172]	; (80038a8 <HAL_RCC_ClockConfig+0x1bc>)
 80037fc:	689b      	ldr	r3, [r3, #8]
 80037fe:	f003 020c 	and.w	r2, r3, #12
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	009b      	lsls	r3, r3, #2
 8003808:	429a      	cmp	r2, r3
 800380a:	d1eb      	bne.n	80037e4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800380c:	4b25      	ldr	r3, [pc, #148]	; (80038a4 <HAL_RCC_ClockConfig+0x1b8>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f003 030f 	and.w	r3, r3, #15
 8003814:	683a      	ldr	r2, [r7, #0]
 8003816:	429a      	cmp	r2, r3
 8003818:	d20c      	bcs.n	8003834 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800381a:	4b22      	ldr	r3, [pc, #136]	; (80038a4 <HAL_RCC_ClockConfig+0x1b8>)
 800381c:	683a      	ldr	r2, [r7, #0]
 800381e:	b2d2      	uxtb	r2, r2
 8003820:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003822:	4b20      	ldr	r3, [pc, #128]	; (80038a4 <HAL_RCC_ClockConfig+0x1b8>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f003 030f 	and.w	r3, r3, #15
 800382a:	683a      	ldr	r2, [r7, #0]
 800382c:	429a      	cmp	r2, r3
 800382e:	d001      	beq.n	8003834 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003830:	2301      	movs	r3, #1
 8003832:	e032      	b.n	800389a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f003 0304 	and.w	r3, r3, #4
 800383c:	2b00      	cmp	r3, #0
 800383e:	d008      	beq.n	8003852 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003840:	4b19      	ldr	r3, [pc, #100]	; (80038a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003842:	689b      	ldr	r3, [r3, #8]
 8003844:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	68db      	ldr	r3, [r3, #12]
 800384c:	4916      	ldr	r1, [pc, #88]	; (80038a8 <HAL_RCC_ClockConfig+0x1bc>)
 800384e:	4313      	orrs	r3, r2
 8003850:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f003 0308 	and.w	r3, r3, #8
 800385a:	2b00      	cmp	r3, #0
 800385c:	d009      	beq.n	8003872 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800385e:	4b12      	ldr	r3, [pc, #72]	; (80038a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003860:	689b      	ldr	r3, [r3, #8]
 8003862:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	691b      	ldr	r3, [r3, #16]
 800386a:	00db      	lsls	r3, r3, #3
 800386c:	490e      	ldr	r1, [pc, #56]	; (80038a8 <HAL_RCC_ClockConfig+0x1bc>)
 800386e:	4313      	orrs	r3, r2
 8003870:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003872:	f000 f821 	bl	80038b8 <HAL_RCC_GetSysClockFreq>
 8003876:	4602      	mov	r2, r0
 8003878:	4b0b      	ldr	r3, [pc, #44]	; (80038a8 <HAL_RCC_ClockConfig+0x1bc>)
 800387a:	689b      	ldr	r3, [r3, #8]
 800387c:	091b      	lsrs	r3, r3, #4
 800387e:	f003 030f 	and.w	r3, r3, #15
 8003882:	490a      	ldr	r1, [pc, #40]	; (80038ac <HAL_RCC_ClockConfig+0x1c0>)
 8003884:	5ccb      	ldrb	r3, [r1, r3]
 8003886:	fa22 f303 	lsr.w	r3, r2, r3
 800388a:	4a09      	ldr	r2, [pc, #36]	; (80038b0 <HAL_RCC_ClockConfig+0x1c4>)
 800388c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800388e:	4b09      	ldr	r3, [pc, #36]	; (80038b4 <HAL_RCC_ClockConfig+0x1c8>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4618      	mov	r0, r3
 8003894:	f7fd feea 	bl	800166c <HAL_InitTick>

  return HAL_OK;
 8003898:	2300      	movs	r3, #0
}
 800389a:	4618      	mov	r0, r3
 800389c:	3710      	adds	r7, #16
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd80      	pop	{r7, pc}
 80038a2:	bf00      	nop
 80038a4:	40023c00 	.word	0x40023c00
 80038a8:	40023800 	.word	0x40023800
 80038ac:	08008888 	.word	0x08008888
 80038b0:	20000000 	.word	0x20000000
 80038b4:	20000004 	.word	0x20000004

080038b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80038bc:	b094      	sub	sp, #80	; 0x50
 80038be:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80038c0:	2300      	movs	r3, #0
 80038c2:	647b      	str	r3, [r7, #68]	; 0x44
 80038c4:	2300      	movs	r3, #0
 80038c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80038c8:	2300      	movs	r3, #0
 80038ca:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80038cc:	2300      	movs	r3, #0
 80038ce:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80038d0:	4b79      	ldr	r3, [pc, #484]	; (8003ab8 <HAL_RCC_GetSysClockFreq+0x200>)
 80038d2:	689b      	ldr	r3, [r3, #8]
 80038d4:	f003 030c 	and.w	r3, r3, #12
 80038d8:	2b08      	cmp	r3, #8
 80038da:	d00d      	beq.n	80038f8 <HAL_RCC_GetSysClockFreq+0x40>
 80038dc:	2b08      	cmp	r3, #8
 80038de:	f200 80e1 	bhi.w	8003aa4 <HAL_RCC_GetSysClockFreq+0x1ec>
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d002      	beq.n	80038ec <HAL_RCC_GetSysClockFreq+0x34>
 80038e6:	2b04      	cmp	r3, #4
 80038e8:	d003      	beq.n	80038f2 <HAL_RCC_GetSysClockFreq+0x3a>
 80038ea:	e0db      	b.n	8003aa4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80038ec:	4b73      	ldr	r3, [pc, #460]	; (8003abc <HAL_RCC_GetSysClockFreq+0x204>)
 80038ee:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80038f0:	e0db      	b.n	8003aaa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80038f2:	4b73      	ldr	r3, [pc, #460]	; (8003ac0 <HAL_RCC_GetSysClockFreq+0x208>)
 80038f4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80038f6:	e0d8      	b.n	8003aaa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80038f8:	4b6f      	ldr	r3, [pc, #444]	; (8003ab8 <HAL_RCC_GetSysClockFreq+0x200>)
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003900:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003902:	4b6d      	ldr	r3, [pc, #436]	; (8003ab8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800390a:	2b00      	cmp	r3, #0
 800390c:	d063      	beq.n	80039d6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800390e:	4b6a      	ldr	r3, [pc, #424]	; (8003ab8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	099b      	lsrs	r3, r3, #6
 8003914:	2200      	movs	r2, #0
 8003916:	63bb      	str	r3, [r7, #56]	; 0x38
 8003918:	63fa      	str	r2, [r7, #60]	; 0x3c
 800391a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800391c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003920:	633b      	str	r3, [r7, #48]	; 0x30
 8003922:	2300      	movs	r3, #0
 8003924:	637b      	str	r3, [r7, #52]	; 0x34
 8003926:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800392a:	4622      	mov	r2, r4
 800392c:	462b      	mov	r3, r5
 800392e:	f04f 0000 	mov.w	r0, #0
 8003932:	f04f 0100 	mov.w	r1, #0
 8003936:	0159      	lsls	r1, r3, #5
 8003938:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800393c:	0150      	lsls	r0, r2, #5
 800393e:	4602      	mov	r2, r0
 8003940:	460b      	mov	r3, r1
 8003942:	4621      	mov	r1, r4
 8003944:	1a51      	subs	r1, r2, r1
 8003946:	6139      	str	r1, [r7, #16]
 8003948:	4629      	mov	r1, r5
 800394a:	eb63 0301 	sbc.w	r3, r3, r1
 800394e:	617b      	str	r3, [r7, #20]
 8003950:	f04f 0200 	mov.w	r2, #0
 8003954:	f04f 0300 	mov.w	r3, #0
 8003958:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800395c:	4659      	mov	r1, fp
 800395e:	018b      	lsls	r3, r1, #6
 8003960:	4651      	mov	r1, sl
 8003962:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003966:	4651      	mov	r1, sl
 8003968:	018a      	lsls	r2, r1, #6
 800396a:	4651      	mov	r1, sl
 800396c:	ebb2 0801 	subs.w	r8, r2, r1
 8003970:	4659      	mov	r1, fp
 8003972:	eb63 0901 	sbc.w	r9, r3, r1
 8003976:	f04f 0200 	mov.w	r2, #0
 800397a:	f04f 0300 	mov.w	r3, #0
 800397e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003982:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003986:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800398a:	4690      	mov	r8, r2
 800398c:	4699      	mov	r9, r3
 800398e:	4623      	mov	r3, r4
 8003990:	eb18 0303 	adds.w	r3, r8, r3
 8003994:	60bb      	str	r3, [r7, #8]
 8003996:	462b      	mov	r3, r5
 8003998:	eb49 0303 	adc.w	r3, r9, r3
 800399c:	60fb      	str	r3, [r7, #12]
 800399e:	f04f 0200 	mov.w	r2, #0
 80039a2:	f04f 0300 	mov.w	r3, #0
 80039a6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80039aa:	4629      	mov	r1, r5
 80039ac:	024b      	lsls	r3, r1, #9
 80039ae:	4621      	mov	r1, r4
 80039b0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80039b4:	4621      	mov	r1, r4
 80039b6:	024a      	lsls	r2, r1, #9
 80039b8:	4610      	mov	r0, r2
 80039ba:	4619      	mov	r1, r3
 80039bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80039be:	2200      	movs	r2, #0
 80039c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80039c2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80039c4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80039c8:	f7fd f8e0 	bl	8000b8c <__aeabi_uldivmod>
 80039cc:	4602      	mov	r2, r0
 80039ce:	460b      	mov	r3, r1
 80039d0:	4613      	mov	r3, r2
 80039d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80039d4:	e058      	b.n	8003a88 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039d6:	4b38      	ldr	r3, [pc, #224]	; (8003ab8 <HAL_RCC_GetSysClockFreq+0x200>)
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	099b      	lsrs	r3, r3, #6
 80039dc:	2200      	movs	r2, #0
 80039de:	4618      	mov	r0, r3
 80039e0:	4611      	mov	r1, r2
 80039e2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80039e6:	623b      	str	r3, [r7, #32]
 80039e8:	2300      	movs	r3, #0
 80039ea:	627b      	str	r3, [r7, #36]	; 0x24
 80039ec:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80039f0:	4642      	mov	r2, r8
 80039f2:	464b      	mov	r3, r9
 80039f4:	f04f 0000 	mov.w	r0, #0
 80039f8:	f04f 0100 	mov.w	r1, #0
 80039fc:	0159      	lsls	r1, r3, #5
 80039fe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a02:	0150      	lsls	r0, r2, #5
 8003a04:	4602      	mov	r2, r0
 8003a06:	460b      	mov	r3, r1
 8003a08:	4641      	mov	r1, r8
 8003a0a:	ebb2 0a01 	subs.w	sl, r2, r1
 8003a0e:	4649      	mov	r1, r9
 8003a10:	eb63 0b01 	sbc.w	fp, r3, r1
 8003a14:	f04f 0200 	mov.w	r2, #0
 8003a18:	f04f 0300 	mov.w	r3, #0
 8003a1c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003a20:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003a24:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003a28:	ebb2 040a 	subs.w	r4, r2, sl
 8003a2c:	eb63 050b 	sbc.w	r5, r3, fp
 8003a30:	f04f 0200 	mov.w	r2, #0
 8003a34:	f04f 0300 	mov.w	r3, #0
 8003a38:	00eb      	lsls	r3, r5, #3
 8003a3a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003a3e:	00e2      	lsls	r2, r4, #3
 8003a40:	4614      	mov	r4, r2
 8003a42:	461d      	mov	r5, r3
 8003a44:	4643      	mov	r3, r8
 8003a46:	18e3      	adds	r3, r4, r3
 8003a48:	603b      	str	r3, [r7, #0]
 8003a4a:	464b      	mov	r3, r9
 8003a4c:	eb45 0303 	adc.w	r3, r5, r3
 8003a50:	607b      	str	r3, [r7, #4]
 8003a52:	f04f 0200 	mov.w	r2, #0
 8003a56:	f04f 0300 	mov.w	r3, #0
 8003a5a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003a5e:	4629      	mov	r1, r5
 8003a60:	028b      	lsls	r3, r1, #10
 8003a62:	4621      	mov	r1, r4
 8003a64:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003a68:	4621      	mov	r1, r4
 8003a6a:	028a      	lsls	r2, r1, #10
 8003a6c:	4610      	mov	r0, r2
 8003a6e:	4619      	mov	r1, r3
 8003a70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a72:	2200      	movs	r2, #0
 8003a74:	61bb      	str	r3, [r7, #24]
 8003a76:	61fa      	str	r2, [r7, #28]
 8003a78:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003a7c:	f7fd f886 	bl	8000b8c <__aeabi_uldivmod>
 8003a80:	4602      	mov	r2, r0
 8003a82:	460b      	mov	r3, r1
 8003a84:	4613      	mov	r3, r2
 8003a86:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003a88:	4b0b      	ldr	r3, [pc, #44]	; (8003ab8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	0c1b      	lsrs	r3, r3, #16
 8003a8e:	f003 0303 	and.w	r3, r3, #3
 8003a92:	3301      	adds	r3, #1
 8003a94:	005b      	lsls	r3, r3, #1
 8003a96:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003a98:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003a9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003aa0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003aa2:	e002      	b.n	8003aaa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003aa4:	4b05      	ldr	r3, [pc, #20]	; (8003abc <HAL_RCC_GetSysClockFreq+0x204>)
 8003aa6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003aa8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003aaa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003aac:	4618      	mov	r0, r3
 8003aae:	3750      	adds	r7, #80	; 0x50
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ab6:	bf00      	nop
 8003ab8:	40023800 	.word	0x40023800
 8003abc:	00f42400 	.word	0x00f42400
 8003ac0:	007a1200 	.word	0x007a1200

08003ac4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ac8:	4b03      	ldr	r3, [pc, #12]	; (8003ad8 <HAL_RCC_GetHCLKFreq+0x14>)
 8003aca:	681b      	ldr	r3, [r3, #0]
}
 8003acc:	4618      	mov	r0, r3
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad4:	4770      	bx	lr
 8003ad6:	bf00      	nop
 8003ad8:	20000000 	.word	0x20000000

08003adc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003adc:	b084      	sub	sp, #16
 8003ade:	b580      	push	{r7, lr}
 8003ae0:	b084      	sub	sp, #16
 8003ae2:	af00      	add	r7, sp, #0
 8003ae4:	6078      	str	r0, [r7, #4]
 8003ae6:	f107 001c 	add.w	r0, r7, #28
 8003aea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003aee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003af0:	2b01      	cmp	r3, #1
 8003af2:	d122      	bne.n	8003b3a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003af8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	68db      	ldr	r3, [r3, #12]
 8003b04:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003b08:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b0c:	687a      	ldr	r2, [r7, #4]
 8003b0e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	68db      	ldr	r3, [r3, #12]
 8003b14:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003b1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b1e:	2b01      	cmp	r3, #1
 8003b20:	d105      	bne.n	8003b2e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	68db      	ldr	r3, [r3, #12]
 8003b26:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003b2e:	6878      	ldr	r0, [r7, #4]
 8003b30:	f001 fbee 	bl	8005310 <USB_CoreReset>
 8003b34:	4603      	mov	r3, r0
 8003b36:	73fb      	strb	r3, [r7, #15]
 8003b38:	e01a      	b.n	8003b70 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	68db      	ldr	r3, [r3, #12]
 8003b3e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003b46:	6878      	ldr	r0, [r7, #4]
 8003b48:	f001 fbe2 	bl	8005310 <USB_CoreReset>
 8003b4c:	4603      	mov	r3, r0
 8003b4e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003b50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d106      	bne.n	8003b64 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b5a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	639a      	str	r2, [r3, #56]	; 0x38
 8003b62:	e005      	b.n	8003b70 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b68:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003b70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b72:	2b01      	cmp	r3, #1
 8003b74:	d10b      	bne.n	8003b8e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	689b      	ldr	r3, [r3, #8]
 8003b7a:	f043 0206 	orr.w	r2, r3, #6
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	689b      	ldr	r3, [r3, #8]
 8003b86:	f043 0220 	orr.w	r2, r3, #32
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003b8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b90:	4618      	mov	r0, r3
 8003b92:	3710      	adds	r7, #16
 8003b94:	46bd      	mov	sp, r7
 8003b96:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003b9a:	b004      	add	sp, #16
 8003b9c:	4770      	bx	lr
	...

08003ba0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	b087      	sub	sp, #28
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	60f8      	str	r0, [r7, #12]
 8003ba8:	60b9      	str	r1, [r7, #8]
 8003baa:	4613      	mov	r3, r2
 8003bac:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003bae:	79fb      	ldrb	r3, [r7, #7]
 8003bb0:	2b02      	cmp	r3, #2
 8003bb2:	d165      	bne.n	8003c80 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003bb4:	68bb      	ldr	r3, [r7, #8]
 8003bb6:	4a41      	ldr	r2, [pc, #260]	; (8003cbc <USB_SetTurnaroundTime+0x11c>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d906      	bls.n	8003bca <USB_SetTurnaroundTime+0x2a>
 8003bbc:	68bb      	ldr	r3, [r7, #8]
 8003bbe:	4a40      	ldr	r2, [pc, #256]	; (8003cc0 <USB_SetTurnaroundTime+0x120>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d202      	bcs.n	8003bca <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003bc4:	230f      	movs	r3, #15
 8003bc6:	617b      	str	r3, [r7, #20]
 8003bc8:	e062      	b.n	8003c90 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003bca:	68bb      	ldr	r3, [r7, #8]
 8003bcc:	4a3c      	ldr	r2, [pc, #240]	; (8003cc0 <USB_SetTurnaroundTime+0x120>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d306      	bcc.n	8003be0 <USB_SetTurnaroundTime+0x40>
 8003bd2:	68bb      	ldr	r3, [r7, #8]
 8003bd4:	4a3b      	ldr	r2, [pc, #236]	; (8003cc4 <USB_SetTurnaroundTime+0x124>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d202      	bcs.n	8003be0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003bda:	230e      	movs	r3, #14
 8003bdc:	617b      	str	r3, [r7, #20]
 8003bde:	e057      	b.n	8003c90 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	4a38      	ldr	r2, [pc, #224]	; (8003cc4 <USB_SetTurnaroundTime+0x124>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d306      	bcc.n	8003bf6 <USB_SetTurnaroundTime+0x56>
 8003be8:	68bb      	ldr	r3, [r7, #8]
 8003bea:	4a37      	ldr	r2, [pc, #220]	; (8003cc8 <USB_SetTurnaroundTime+0x128>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d202      	bcs.n	8003bf6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003bf0:	230d      	movs	r3, #13
 8003bf2:	617b      	str	r3, [r7, #20]
 8003bf4:	e04c      	b.n	8003c90 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003bf6:	68bb      	ldr	r3, [r7, #8]
 8003bf8:	4a33      	ldr	r2, [pc, #204]	; (8003cc8 <USB_SetTurnaroundTime+0x128>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d306      	bcc.n	8003c0c <USB_SetTurnaroundTime+0x6c>
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	4a32      	ldr	r2, [pc, #200]	; (8003ccc <USB_SetTurnaroundTime+0x12c>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d802      	bhi.n	8003c0c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8003c06:	230c      	movs	r3, #12
 8003c08:	617b      	str	r3, [r7, #20]
 8003c0a:	e041      	b.n	8003c90 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	4a2f      	ldr	r2, [pc, #188]	; (8003ccc <USB_SetTurnaroundTime+0x12c>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d906      	bls.n	8003c22 <USB_SetTurnaroundTime+0x82>
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	4a2e      	ldr	r2, [pc, #184]	; (8003cd0 <USB_SetTurnaroundTime+0x130>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d802      	bhi.n	8003c22 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003c1c:	230b      	movs	r3, #11
 8003c1e:	617b      	str	r3, [r7, #20]
 8003c20:	e036      	b.n	8003c90 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003c22:	68bb      	ldr	r3, [r7, #8]
 8003c24:	4a2a      	ldr	r2, [pc, #168]	; (8003cd0 <USB_SetTurnaroundTime+0x130>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d906      	bls.n	8003c38 <USB_SetTurnaroundTime+0x98>
 8003c2a:	68bb      	ldr	r3, [r7, #8]
 8003c2c:	4a29      	ldr	r2, [pc, #164]	; (8003cd4 <USB_SetTurnaroundTime+0x134>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d802      	bhi.n	8003c38 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8003c32:	230a      	movs	r3, #10
 8003c34:	617b      	str	r3, [r7, #20]
 8003c36:	e02b      	b.n	8003c90 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	4a26      	ldr	r2, [pc, #152]	; (8003cd4 <USB_SetTurnaroundTime+0x134>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d906      	bls.n	8003c4e <USB_SetTurnaroundTime+0xae>
 8003c40:	68bb      	ldr	r3, [r7, #8]
 8003c42:	4a25      	ldr	r2, [pc, #148]	; (8003cd8 <USB_SetTurnaroundTime+0x138>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d202      	bcs.n	8003c4e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003c48:	2309      	movs	r3, #9
 8003c4a:	617b      	str	r3, [r7, #20]
 8003c4c:	e020      	b.n	8003c90 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003c4e:	68bb      	ldr	r3, [r7, #8]
 8003c50:	4a21      	ldr	r2, [pc, #132]	; (8003cd8 <USB_SetTurnaroundTime+0x138>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d306      	bcc.n	8003c64 <USB_SetTurnaroundTime+0xc4>
 8003c56:	68bb      	ldr	r3, [r7, #8]
 8003c58:	4a20      	ldr	r2, [pc, #128]	; (8003cdc <USB_SetTurnaroundTime+0x13c>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d802      	bhi.n	8003c64 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8003c5e:	2308      	movs	r3, #8
 8003c60:	617b      	str	r3, [r7, #20]
 8003c62:	e015      	b.n	8003c90 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	4a1d      	ldr	r2, [pc, #116]	; (8003cdc <USB_SetTurnaroundTime+0x13c>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d906      	bls.n	8003c7a <USB_SetTurnaroundTime+0xda>
 8003c6c:	68bb      	ldr	r3, [r7, #8]
 8003c6e:	4a1c      	ldr	r2, [pc, #112]	; (8003ce0 <USB_SetTurnaroundTime+0x140>)
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d202      	bcs.n	8003c7a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003c74:	2307      	movs	r3, #7
 8003c76:	617b      	str	r3, [r7, #20]
 8003c78:	e00a      	b.n	8003c90 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003c7a:	2306      	movs	r3, #6
 8003c7c:	617b      	str	r3, [r7, #20]
 8003c7e:	e007      	b.n	8003c90 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003c80:	79fb      	ldrb	r3, [r7, #7]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d102      	bne.n	8003c8c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003c86:	2309      	movs	r3, #9
 8003c88:	617b      	str	r3, [r7, #20]
 8003c8a:	e001      	b.n	8003c90 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003c8c:	2309      	movs	r3, #9
 8003c8e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	68db      	ldr	r3, [r3, #12]
 8003c94:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	68da      	ldr	r2, [r3, #12]
 8003ca0:	697b      	ldr	r3, [r7, #20]
 8003ca2:	029b      	lsls	r3, r3, #10
 8003ca4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8003ca8:	431a      	orrs	r2, r3
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003cae:	2300      	movs	r3, #0
}
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	371c      	adds	r7, #28
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cba:	4770      	bx	lr
 8003cbc:	00d8acbf 	.word	0x00d8acbf
 8003cc0:	00e4e1c0 	.word	0x00e4e1c0
 8003cc4:	00f42400 	.word	0x00f42400
 8003cc8:	01067380 	.word	0x01067380
 8003ccc:	011a499f 	.word	0x011a499f
 8003cd0:	01312cff 	.word	0x01312cff
 8003cd4:	014ca43f 	.word	0x014ca43f
 8003cd8:	016e3600 	.word	0x016e3600
 8003cdc:	01a6ab1f 	.word	0x01a6ab1f
 8003ce0:	01e84800 	.word	0x01e84800

08003ce4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	b083      	sub	sp, #12
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	689b      	ldr	r3, [r3, #8]
 8003cf0:	f043 0201 	orr.w	r2, r3, #1
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003cf8:	2300      	movs	r3, #0
}
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	370c      	adds	r7, #12
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d04:	4770      	bx	lr

08003d06 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003d06:	b480      	push	{r7}
 8003d08:	b083      	sub	sp, #12
 8003d0a:	af00      	add	r7, sp, #0
 8003d0c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	689b      	ldr	r3, [r3, #8]
 8003d12:	f023 0201 	bic.w	r2, r3, #1
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003d1a:	2300      	movs	r3, #0
}
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	370c      	adds	r7, #12
 8003d20:	46bd      	mov	sp, r7
 8003d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d26:	4770      	bx	lr

08003d28 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b084      	sub	sp, #16
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
 8003d30:	460b      	mov	r3, r1
 8003d32:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003d34:	2300      	movs	r3, #0
 8003d36:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	68db      	ldr	r3, [r3, #12]
 8003d3c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003d44:	78fb      	ldrb	r3, [r7, #3]
 8003d46:	2b01      	cmp	r3, #1
 8003d48:	d115      	bne.n	8003d76 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	68db      	ldr	r3, [r3, #12]
 8003d4e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003d56:	2001      	movs	r0, #1
 8003d58:	f7fd fcd8 	bl	800170c <HAL_Delay>
      ms++;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	3301      	adds	r3, #1
 8003d60:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003d62:	6878      	ldr	r0, [r7, #4]
 8003d64:	f001 fa45 	bl	80051f2 <USB_GetMode>
 8003d68:	4603      	mov	r3, r0
 8003d6a:	2b01      	cmp	r3, #1
 8003d6c:	d01e      	beq.n	8003dac <USB_SetCurrentMode+0x84>
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	2b31      	cmp	r3, #49	; 0x31
 8003d72:	d9f0      	bls.n	8003d56 <USB_SetCurrentMode+0x2e>
 8003d74:	e01a      	b.n	8003dac <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003d76:	78fb      	ldrb	r3, [r7, #3]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d115      	bne.n	8003da8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	68db      	ldr	r3, [r3, #12]
 8003d80:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003d88:	2001      	movs	r0, #1
 8003d8a:	f7fd fcbf 	bl	800170c <HAL_Delay>
      ms++;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	3301      	adds	r3, #1
 8003d92:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003d94:	6878      	ldr	r0, [r7, #4]
 8003d96:	f001 fa2c 	bl	80051f2 <USB_GetMode>
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d005      	beq.n	8003dac <USB_SetCurrentMode+0x84>
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	2b31      	cmp	r3, #49	; 0x31
 8003da4:	d9f0      	bls.n	8003d88 <USB_SetCurrentMode+0x60>
 8003da6:	e001      	b.n	8003dac <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003da8:	2301      	movs	r3, #1
 8003daa:	e005      	b.n	8003db8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	2b32      	cmp	r3, #50	; 0x32
 8003db0:	d101      	bne.n	8003db6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003db2:	2301      	movs	r3, #1
 8003db4:	e000      	b.n	8003db8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003db6:	2300      	movs	r3, #0
}
 8003db8:	4618      	mov	r0, r3
 8003dba:	3710      	adds	r7, #16
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	bd80      	pop	{r7, pc}

08003dc0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003dc0:	b084      	sub	sp, #16
 8003dc2:	b580      	push	{r7, lr}
 8003dc4:	b086      	sub	sp, #24
 8003dc6:	af00      	add	r7, sp, #0
 8003dc8:	6078      	str	r0, [r7, #4]
 8003dca:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003dce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003dda:	2300      	movs	r3, #0
 8003ddc:	613b      	str	r3, [r7, #16]
 8003dde:	e009      	b.n	8003df4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003de0:	687a      	ldr	r2, [r7, #4]
 8003de2:	693b      	ldr	r3, [r7, #16]
 8003de4:	3340      	adds	r3, #64	; 0x40
 8003de6:	009b      	lsls	r3, r3, #2
 8003de8:	4413      	add	r3, r2
 8003dea:	2200      	movs	r2, #0
 8003dec:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003dee:	693b      	ldr	r3, [r7, #16]
 8003df0:	3301      	adds	r3, #1
 8003df2:	613b      	str	r3, [r7, #16]
 8003df4:	693b      	ldr	r3, [r7, #16]
 8003df6:	2b0e      	cmp	r3, #14
 8003df8:	d9f2      	bls.n	8003de0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003dfa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d11c      	bne.n	8003e3a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	68fa      	ldr	r2, [r7, #12]
 8003e0a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e0e:	f043 0302 	orr.w	r3, r3, #2
 8003e12:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e18:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e24:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e30:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	639a      	str	r2, [r3, #56]	; 0x38
 8003e38:	e00b      	b.n	8003e52 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e3e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e4a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003e58:	461a      	mov	r2, r3
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e64:	4619      	mov	r1, r3
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e6c:	461a      	mov	r2, r3
 8003e6e:	680b      	ldr	r3, [r1, #0]
 8003e70:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003e72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e74:	2b01      	cmp	r3, #1
 8003e76:	d10c      	bne.n	8003e92 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003e78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d104      	bne.n	8003e88 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003e7e:	2100      	movs	r1, #0
 8003e80:	6878      	ldr	r0, [r7, #4]
 8003e82:	f000 f965 	bl	8004150 <USB_SetDevSpeed>
 8003e86:	e008      	b.n	8003e9a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003e88:	2101      	movs	r1, #1
 8003e8a:	6878      	ldr	r0, [r7, #4]
 8003e8c:	f000 f960 	bl	8004150 <USB_SetDevSpeed>
 8003e90:	e003      	b.n	8003e9a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003e92:	2103      	movs	r1, #3
 8003e94:	6878      	ldr	r0, [r7, #4]
 8003e96:	f000 f95b 	bl	8004150 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003e9a:	2110      	movs	r1, #16
 8003e9c:	6878      	ldr	r0, [r7, #4]
 8003e9e:	f000 f8f3 	bl	8004088 <USB_FlushTxFifo>
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d001      	beq.n	8003eac <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003eac:	6878      	ldr	r0, [r7, #4]
 8003eae:	f000 f91f 	bl	80040f0 <USB_FlushRxFifo>
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d001      	beq.n	8003ebc <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8003eb8:	2301      	movs	r3, #1
 8003eba:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ec2:	461a      	mov	r2, r3
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ece:	461a      	mov	r2, r3
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003eda:	461a      	mov	r2, r3
 8003edc:	2300      	movs	r3, #0
 8003ede:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	613b      	str	r3, [r7, #16]
 8003ee4:	e043      	b.n	8003f6e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003ee6:	693b      	ldr	r3, [r7, #16]
 8003ee8:	015a      	lsls	r2, r3, #5
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	4413      	add	r3, r2
 8003eee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003ef8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003efc:	d118      	bne.n	8003f30 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8003efe:	693b      	ldr	r3, [r7, #16]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d10a      	bne.n	8003f1a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003f04:	693b      	ldr	r3, [r7, #16]
 8003f06:	015a      	lsls	r2, r3, #5
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	4413      	add	r3, r2
 8003f0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f10:	461a      	mov	r2, r3
 8003f12:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003f16:	6013      	str	r3, [r2, #0]
 8003f18:	e013      	b.n	8003f42 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003f1a:	693b      	ldr	r3, [r7, #16]
 8003f1c:	015a      	lsls	r2, r3, #5
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	4413      	add	r3, r2
 8003f22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f26:	461a      	mov	r2, r3
 8003f28:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003f2c:	6013      	str	r3, [r2, #0]
 8003f2e:	e008      	b.n	8003f42 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003f30:	693b      	ldr	r3, [r7, #16]
 8003f32:	015a      	lsls	r2, r3, #5
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	4413      	add	r3, r2
 8003f38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f3c:	461a      	mov	r2, r3
 8003f3e:	2300      	movs	r3, #0
 8003f40:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003f42:	693b      	ldr	r3, [r7, #16]
 8003f44:	015a      	lsls	r2, r3, #5
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	4413      	add	r3, r2
 8003f4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f4e:	461a      	mov	r2, r3
 8003f50:	2300      	movs	r3, #0
 8003f52:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003f54:	693b      	ldr	r3, [r7, #16]
 8003f56:	015a      	lsls	r2, r3, #5
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	4413      	add	r3, r2
 8003f5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f60:	461a      	mov	r2, r3
 8003f62:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003f66:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003f68:	693b      	ldr	r3, [r7, #16]
 8003f6a:	3301      	adds	r3, #1
 8003f6c:	613b      	str	r3, [r7, #16]
 8003f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f70:	693a      	ldr	r2, [r7, #16]
 8003f72:	429a      	cmp	r2, r3
 8003f74:	d3b7      	bcc.n	8003ee6 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003f76:	2300      	movs	r3, #0
 8003f78:	613b      	str	r3, [r7, #16]
 8003f7a:	e043      	b.n	8004004 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003f7c:	693b      	ldr	r3, [r7, #16]
 8003f7e:	015a      	lsls	r2, r3, #5
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	4413      	add	r3, r2
 8003f84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003f8e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003f92:	d118      	bne.n	8003fc6 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8003f94:	693b      	ldr	r3, [r7, #16]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d10a      	bne.n	8003fb0 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003f9a:	693b      	ldr	r3, [r7, #16]
 8003f9c:	015a      	lsls	r2, r3, #5
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	4413      	add	r3, r2
 8003fa2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fa6:	461a      	mov	r2, r3
 8003fa8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003fac:	6013      	str	r3, [r2, #0]
 8003fae:	e013      	b.n	8003fd8 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003fb0:	693b      	ldr	r3, [r7, #16]
 8003fb2:	015a      	lsls	r2, r3, #5
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	4413      	add	r3, r2
 8003fb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fbc:	461a      	mov	r2, r3
 8003fbe:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003fc2:	6013      	str	r3, [r2, #0]
 8003fc4:	e008      	b.n	8003fd8 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003fc6:	693b      	ldr	r3, [r7, #16]
 8003fc8:	015a      	lsls	r2, r3, #5
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	4413      	add	r3, r2
 8003fce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fd2:	461a      	mov	r2, r3
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003fd8:	693b      	ldr	r3, [r7, #16]
 8003fda:	015a      	lsls	r2, r3, #5
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	4413      	add	r3, r2
 8003fe0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fe4:	461a      	mov	r2, r3
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003fea:	693b      	ldr	r3, [r7, #16]
 8003fec:	015a      	lsls	r2, r3, #5
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	4413      	add	r3, r2
 8003ff2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ff6:	461a      	mov	r2, r3
 8003ff8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003ffc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003ffe:	693b      	ldr	r3, [r7, #16]
 8004000:	3301      	adds	r3, #1
 8004002:	613b      	str	r3, [r7, #16]
 8004004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004006:	693a      	ldr	r2, [r7, #16]
 8004008:	429a      	cmp	r2, r3
 800400a:	d3b7      	bcc.n	8003f7c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004012:	691b      	ldr	r3, [r3, #16]
 8004014:	68fa      	ldr	r2, [r7, #12]
 8004016:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800401a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800401e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2200      	movs	r2, #0
 8004024:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800402c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800402e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004030:	2b00      	cmp	r3, #0
 8004032:	d105      	bne.n	8004040 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	699b      	ldr	r3, [r3, #24]
 8004038:	f043 0210 	orr.w	r2, r3, #16
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	699a      	ldr	r2, [r3, #24]
 8004044:	4b0f      	ldr	r3, [pc, #60]	; (8004084 <USB_DevInit+0x2c4>)
 8004046:	4313      	orrs	r3, r2
 8004048:	687a      	ldr	r2, [r7, #4]
 800404a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800404c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800404e:	2b00      	cmp	r3, #0
 8004050:	d005      	beq.n	800405e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	699b      	ldr	r3, [r3, #24]
 8004056:	f043 0208 	orr.w	r2, r3, #8
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800405e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004060:	2b01      	cmp	r3, #1
 8004062:	d107      	bne.n	8004074 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	699b      	ldr	r3, [r3, #24]
 8004068:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800406c:	f043 0304 	orr.w	r3, r3, #4
 8004070:	687a      	ldr	r2, [r7, #4]
 8004072:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004074:	7dfb      	ldrb	r3, [r7, #23]
}
 8004076:	4618      	mov	r0, r3
 8004078:	3718      	adds	r7, #24
 800407a:	46bd      	mov	sp, r7
 800407c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004080:	b004      	add	sp, #16
 8004082:	4770      	bx	lr
 8004084:	803c3800 	.word	0x803c3800

08004088 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004088:	b480      	push	{r7}
 800408a:	b085      	sub	sp, #20
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
 8004090:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004092:	2300      	movs	r3, #0
 8004094:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	3301      	adds	r3, #1
 800409a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	4a13      	ldr	r2, [pc, #76]	; (80040ec <USB_FlushTxFifo+0x64>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d901      	bls.n	80040a8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80040a4:	2303      	movs	r3, #3
 80040a6:	e01b      	b.n	80040e0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	691b      	ldr	r3, [r3, #16]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	daf2      	bge.n	8004096 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80040b0:	2300      	movs	r3, #0
 80040b2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	019b      	lsls	r3, r3, #6
 80040b8:	f043 0220 	orr.w	r2, r3, #32
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	3301      	adds	r3, #1
 80040c4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	4a08      	ldr	r2, [pc, #32]	; (80040ec <USB_FlushTxFifo+0x64>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d901      	bls.n	80040d2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80040ce:	2303      	movs	r3, #3
 80040d0:	e006      	b.n	80040e0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	691b      	ldr	r3, [r3, #16]
 80040d6:	f003 0320 	and.w	r3, r3, #32
 80040da:	2b20      	cmp	r3, #32
 80040dc:	d0f0      	beq.n	80040c0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80040de:	2300      	movs	r3, #0
}
 80040e0:	4618      	mov	r0, r3
 80040e2:	3714      	adds	r7, #20
 80040e4:	46bd      	mov	sp, r7
 80040e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ea:	4770      	bx	lr
 80040ec:	00030d40 	.word	0x00030d40

080040f0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80040f0:	b480      	push	{r7}
 80040f2:	b085      	sub	sp, #20
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80040f8:	2300      	movs	r3, #0
 80040fa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	3301      	adds	r3, #1
 8004100:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	4a11      	ldr	r2, [pc, #68]	; (800414c <USB_FlushRxFifo+0x5c>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d901      	bls.n	800410e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800410a:	2303      	movs	r3, #3
 800410c:	e018      	b.n	8004140 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	691b      	ldr	r3, [r3, #16]
 8004112:	2b00      	cmp	r3, #0
 8004114:	daf2      	bge.n	80040fc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004116:	2300      	movs	r3, #0
 8004118:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2210      	movs	r2, #16
 800411e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	3301      	adds	r3, #1
 8004124:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	4a08      	ldr	r2, [pc, #32]	; (800414c <USB_FlushRxFifo+0x5c>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d901      	bls.n	8004132 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800412e:	2303      	movs	r3, #3
 8004130:	e006      	b.n	8004140 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	691b      	ldr	r3, [r3, #16]
 8004136:	f003 0310 	and.w	r3, r3, #16
 800413a:	2b10      	cmp	r3, #16
 800413c:	d0f0      	beq.n	8004120 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800413e:	2300      	movs	r3, #0
}
 8004140:	4618      	mov	r0, r3
 8004142:	3714      	adds	r7, #20
 8004144:	46bd      	mov	sp, r7
 8004146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414a:	4770      	bx	lr
 800414c:	00030d40 	.word	0x00030d40

08004150 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004150:	b480      	push	{r7}
 8004152:	b085      	sub	sp, #20
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
 8004158:	460b      	mov	r3, r1
 800415a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004166:	681a      	ldr	r2, [r3, #0]
 8004168:	78fb      	ldrb	r3, [r7, #3]
 800416a:	68f9      	ldr	r1, [r7, #12]
 800416c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004170:	4313      	orrs	r3, r2
 8004172:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004174:	2300      	movs	r3, #0
}
 8004176:	4618      	mov	r0, r3
 8004178:	3714      	adds	r7, #20
 800417a:	46bd      	mov	sp, r7
 800417c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004180:	4770      	bx	lr

08004182 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004182:	b480      	push	{r7}
 8004184:	b087      	sub	sp, #28
 8004186:	af00      	add	r7, sp, #0
 8004188:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800418e:	693b      	ldr	r3, [r7, #16]
 8004190:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004194:	689b      	ldr	r3, [r3, #8]
 8004196:	f003 0306 	and.w	r3, r3, #6
 800419a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d102      	bne.n	80041a8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80041a2:	2300      	movs	r3, #0
 80041a4:	75fb      	strb	r3, [r7, #23]
 80041a6:	e00a      	b.n	80041be <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	2b02      	cmp	r3, #2
 80041ac:	d002      	beq.n	80041b4 <USB_GetDevSpeed+0x32>
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	2b06      	cmp	r3, #6
 80041b2:	d102      	bne.n	80041ba <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80041b4:	2302      	movs	r3, #2
 80041b6:	75fb      	strb	r3, [r7, #23]
 80041b8:	e001      	b.n	80041be <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80041ba:	230f      	movs	r3, #15
 80041bc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80041be:	7dfb      	ldrb	r3, [r7, #23]
}
 80041c0:	4618      	mov	r0, r3
 80041c2:	371c      	adds	r7, #28
 80041c4:	46bd      	mov	sp, r7
 80041c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ca:	4770      	bx	lr

080041cc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80041cc:	b480      	push	{r7}
 80041ce:	b085      	sub	sp, #20
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
 80041d4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	781b      	ldrb	r3, [r3, #0]
 80041de:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	785b      	ldrb	r3, [r3, #1]
 80041e4:	2b01      	cmp	r3, #1
 80041e6:	d13a      	bne.n	800425e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041ee:	69da      	ldr	r2, [r3, #28]
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	781b      	ldrb	r3, [r3, #0]
 80041f4:	f003 030f 	and.w	r3, r3, #15
 80041f8:	2101      	movs	r1, #1
 80041fa:	fa01 f303 	lsl.w	r3, r1, r3
 80041fe:	b29b      	uxth	r3, r3
 8004200:	68f9      	ldr	r1, [r7, #12]
 8004202:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004206:	4313      	orrs	r3, r2
 8004208:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	015a      	lsls	r2, r3, #5
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	4413      	add	r3, r2
 8004212:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800421c:	2b00      	cmp	r3, #0
 800421e:	d155      	bne.n	80042cc <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004220:	68bb      	ldr	r3, [r7, #8]
 8004222:	015a      	lsls	r2, r3, #5
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	4413      	add	r3, r2
 8004228:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800422c:	681a      	ldr	r2, [r3, #0]
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	68db      	ldr	r3, [r3, #12]
 8004232:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	791b      	ldrb	r3, [r3, #4]
 800423a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800423c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800423e:	68bb      	ldr	r3, [r7, #8]
 8004240:	059b      	lsls	r3, r3, #22
 8004242:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004244:	4313      	orrs	r3, r2
 8004246:	68ba      	ldr	r2, [r7, #8]
 8004248:	0151      	lsls	r1, r2, #5
 800424a:	68fa      	ldr	r2, [r7, #12]
 800424c:	440a      	add	r2, r1
 800424e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004252:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004256:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800425a:	6013      	str	r3, [r2, #0]
 800425c:	e036      	b.n	80042cc <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004264:	69da      	ldr	r2, [r3, #28]
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	781b      	ldrb	r3, [r3, #0]
 800426a:	f003 030f 	and.w	r3, r3, #15
 800426e:	2101      	movs	r1, #1
 8004270:	fa01 f303 	lsl.w	r3, r1, r3
 8004274:	041b      	lsls	r3, r3, #16
 8004276:	68f9      	ldr	r1, [r7, #12]
 8004278:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800427c:	4313      	orrs	r3, r2
 800427e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	015a      	lsls	r2, r3, #5
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	4413      	add	r3, r2
 8004288:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004292:	2b00      	cmp	r3, #0
 8004294:	d11a      	bne.n	80042cc <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004296:	68bb      	ldr	r3, [r7, #8]
 8004298:	015a      	lsls	r2, r3, #5
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	4413      	add	r3, r2
 800429e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042a2:	681a      	ldr	r2, [r3, #0]
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	68db      	ldr	r3, [r3, #12]
 80042a8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	791b      	ldrb	r3, [r3, #4]
 80042b0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80042b2:	430b      	orrs	r3, r1
 80042b4:	4313      	orrs	r3, r2
 80042b6:	68ba      	ldr	r2, [r7, #8]
 80042b8:	0151      	lsls	r1, r2, #5
 80042ba:	68fa      	ldr	r2, [r7, #12]
 80042bc:	440a      	add	r2, r1
 80042be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80042c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80042ca:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80042cc:	2300      	movs	r3, #0
}
 80042ce:	4618      	mov	r0, r3
 80042d0:	3714      	adds	r7, #20
 80042d2:	46bd      	mov	sp, r7
 80042d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d8:	4770      	bx	lr
	...

080042dc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80042dc:	b480      	push	{r7}
 80042de:	b085      	sub	sp, #20
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
 80042e4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	781b      	ldrb	r3, [r3, #0]
 80042ee:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	785b      	ldrb	r3, [r3, #1]
 80042f4:	2b01      	cmp	r3, #1
 80042f6:	d161      	bne.n	80043bc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80042f8:	68bb      	ldr	r3, [r7, #8]
 80042fa:	015a      	lsls	r2, r3, #5
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	4413      	add	r3, r2
 8004300:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800430a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800430e:	d11f      	bne.n	8004350 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004310:	68bb      	ldr	r3, [r7, #8]
 8004312:	015a      	lsls	r2, r3, #5
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	4413      	add	r3, r2
 8004318:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	68ba      	ldr	r2, [r7, #8]
 8004320:	0151      	lsls	r1, r2, #5
 8004322:	68fa      	ldr	r2, [r7, #12]
 8004324:	440a      	add	r2, r1
 8004326:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800432a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800432e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	015a      	lsls	r2, r3, #5
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	4413      	add	r3, r2
 8004338:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	68ba      	ldr	r2, [r7, #8]
 8004340:	0151      	lsls	r1, r2, #5
 8004342:	68fa      	ldr	r2, [r7, #12]
 8004344:	440a      	add	r2, r1
 8004346:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800434a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800434e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004356:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	781b      	ldrb	r3, [r3, #0]
 800435c:	f003 030f 	and.w	r3, r3, #15
 8004360:	2101      	movs	r1, #1
 8004362:	fa01 f303 	lsl.w	r3, r1, r3
 8004366:	b29b      	uxth	r3, r3
 8004368:	43db      	mvns	r3, r3
 800436a:	68f9      	ldr	r1, [r7, #12]
 800436c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004370:	4013      	ands	r3, r2
 8004372:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800437a:	69da      	ldr	r2, [r3, #28]
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	781b      	ldrb	r3, [r3, #0]
 8004380:	f003 030f 	and.w	r3, r3, #15
 8004384:	2101      	movs	r1, #1
 8004386:	fa01 f303 	lsl.w	r3, r1, r3
 800438a:	b29b      	uxth	r3, r3
 800438c:	43db      	mvns	r3, r3
 800438e:	68f9      	ldr	r1, [r7, #12]
 8004390:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004394:	4013      	ands	r3, r2
 8004396:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	015a      	lsls	r2, r3, #5
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	4413      	add	r3, r2
 80043a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043a4:	681a      	ldr	r2, [r3, #0]
 80043a6:	68bb      	ldr	r3, [r7, #8]
 80043a8:	0159      	lsls	r1, r3, #5
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	440b      	add	r3, r1
 80043ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043b2:	4619      	mov	r1, r3
 80043b4:	4b35      	ldr	r3, [pc, #212]	; (800448c <USB_DeactivateEndpoint+0x1b0>)
 80043b6:	4013      	ands	r3, r2
 80043b8:	600b      	str	r3, [r1, #0]
 80043ba:	e060      	b.n	800447e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80043bc:	68bb      	ldr	r3, [r7, #8]
 80043be:	015a      	lsls	r2, r3, #5
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	4413      	add	r3, r2
 80043c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80043ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80043d2:	d11f      	bne.n	8004414 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	015a      	lsls	r2, r3, #5
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	4413      	add	r3, r2
 80043dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	68ba      	ldr	r2, [r7, #8]
 80043e4:	0151      	lsls	r1, r2, #5
 80043e6:	68fa      	ldr	r2, [r7, #12]
 80043e8:	440a      	add	r2, r1
 80043ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80043ee:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80043f2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	015a      	lsls	r2, r3, #5
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	4413      	add	r3, r2
 80043fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	68ba      	ldr	r2, [r7, #8]
 8004404:	0151      	lsls	r1, r2, #5
 8004406:	68fa      	ldr	r2, [r7, #12]
 8004408:	440a      	add	r2, r1
 800440a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800440e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004412:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800441a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	781b      	ldrb	r3, [r3, #0]
 8004420:	f003 030f 	and.w	r3, r3, #15
 8004424:	2101      	movs	r1, #1
 8004426:	fa01 f303 	lsl.w	r3, r1, r3
 800442a:	041b      	lsls	r3, r3, #16
 800442c:	43db      	mvns	r3, r3
 800442e:	68f9      	ldr	r1, [r7, #12]
 8004430:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004434:	4013      	ands	r3, r2
 8004436:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800443e:	69da      	ldr	r2, [r3, #28]
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	781b      	ldrb	r3, [r3, #0]
 8004444:	f003 030f 	and.w	r3, r3, #15
 8004448:	2101      	movs	r1, #1
 800444a:	fa01 f303 	lsl.w	r3, r1, r3
 800444e:	041b      	lsls	r3, r3, #16
 8004450:	43db      	mvns	r3, r3
 8004452:	68f9      	ldr	r1, [r7, #12]
 8004454:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004458:	4013      	ands	r3, r2
 800445a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800445c:	68bb      	ldr	r3, [r7, #8]
 800445e:	015a      	lsls	r2, r3, #5
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	4413      	add	r3, r2
 8004464:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004468:	681a      	ldr	r2, [r3, #0]
 800446a:	68bb      	ldr	r3, [r7, #8]
 800446c:	0159      	lsls	r1, r3, #5
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	440b      	add	r3, r1
 8004472:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004476:	4619      	mov	r1, r3
 8004478:	4b05      	ldr	r3, [pc, #20]	; (8004490 <USB_DeactivateEndpoint+0x1b4>)
 800447a:	4013      	ands	r3, r2
 800447c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800447e:	2300      	movs	r3, #0
}
 8004480:	4618      	mov	r0, r3
 8004482:	3714      	adds	r7, #20
 8004484:	46bd      	mov	sp, r7
 8004486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448a:	4770      	bx	lr
 800448c:	ec337800 	.word	0xec337800
 8004490:	eff37800 	.word	0xeff37800

08004494 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b08a      	sub	sp, #40	; 0x28
 8004498:	af02      	add	r7, sp, #8
 800449a:	60f8      	str	r0, [r7, #12]
 800449c:	60b9      	str	r1, [r7, #8]
 800449e:	4613      	mov	r3, r2
 80044a0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80044a6:	68bb      	ldr	r3, [r7, #8]
 80044a8:	781b      	ldrb	r3, [r3, #0]
 80044aa:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	785b      	ldrb	r3, [r3, #1]
 80044b0:	2b01      	cmp	r3, #1
 80044b2:	f040 815c 	bne.w	800476e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80044b6:	68bb      	ldr	r3, [r7, #8]
 80044b8:	699b      	ldr	r3, [r3, #24]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d132      	bne.n	8004524 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80044be:	69bb      	ldr	r3, [r7, #24]
 80044c0:	015a      	lsls	r2, r3, #5
 80044c2:	69fb      	ldr	r3, [r7, #28]
 80044c4:	4413      	add	r3, r2
 80044c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044ca:	691b      	ldr	r3, [r3, #16]
 80044cc:	69ba      	ldr	r2, [r7, #24]
 80044ce:	0151      	lsls	r1, r2, #5
 80044d0:	69fa      	ldr	r2, [r7, #28]
 80044d2:	440a      	add	r2, r1
 80044d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80044d8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80044dc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80044e0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80044e2:	69bb      	ldr	r3, [r7, #24]
 80044e4:	015a      	lsls	r2, r3, #5
 80044e6:	69fb      	ldr	r3, [r7, #28]
 80044e8:	4413      	add	r3, r2
 80044ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044ee:	691b      	ldr	r3, [r3, #16]
 80044f0:	69ba      	ldr	r2, [r7, #24]
 80044f2:	0151      	lsls	r1, r2, #5
 80044f4:	69fa      	ldr	r2, [r7, #28]
 80044f6:	440a      	add	r2, r1
 80044f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80044fc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004500:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004502:	69bb      	ldr	r3, [r7, #24]
 8004504:	015a      	lsls	r2, r3, #5
 8004506:	69fb      	ldr	r3, [r7, #28]
 8004508:	4413      	add	r3, r2
 800450a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800450e:	691b      	ldr	r3, [r3, #16]
 8004510:	69ba      	ldr	r2, [r7, #24]
 8004512:	0151      	lsls	r1, r2, #5
 8004514:	69fa      	ldr	r2, [r7, #28]
 8004516:	440a      	add	r2, r1
 8004518:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800451c:	0cdb      	lsrs	r3, r3, #19
 800451e:	04db      	lsls	r3, r3, #19
 8004520:	6113      	str	r3, [r2, #16]
 8004522:	e074      	b.n	800460e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004524:	69bb      	ldr	r3, [r7, #24]
 8004526:	015a      	lsls	r2, r3, #5
 8004528:	69fb      	ldr	r3, [r7, #28]
 800452a:	4413      	add	r3, r2
 800452c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004530:	691b      	ldr	r3, [r3, #16]
 8004532:	69ba      	ldr	r2, [r7, #24]
 8004534:	0151      	lsls	r1, r2, #5
 8004536:	69fa      	ldr	r2, [r7, #28]
 8004538:	440a      	add	r2, r1
 800453a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800453e:	0cdb      	lsrs	r3, r3, #19
 8004540:	04db      	lsls	r3, r3, #19
 8004542:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004544:	69bb      	ldr	r3, [r7, #24]
 8004546:	015a      	lsls	r2, r3, #5
 8004548:	69fb      	ldr	r3, [r7, #28]
 800454a:	4413      	add	r3, r2
 800454c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004550:	691b      	ldr	r3, [r3, #16]
 8004552:	69ba      	ldr	r2, [r7, #24]
 8004554:	0151      	lsls	r1, r2, #5
 8004556:	69fa      	ldr	r2, [r7, #28]
 8004558:	440a      	add	r2, r1
 800455a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800455e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004562:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004566:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004568:	69bb      	ldr	r3, [r7, #24]
 800456a:	015a      	lsls	r2, r3, #5
 800456c:	69fb      	ldr	r3, [r7, #28]
 800456e:	4413      	add	r3, r2
 8004570:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004574:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004576:	68bb      	ldr	r3, [r7, #8]
 8004578:	6999      	ldr	r1, [r3, #24]
 800457a:	68bb      	ldr	r3, [r7, #8]
 800457c:	68db      	ldr	r3, [r3, #12]
 800457e:	440b      	add	r3, r1
 8004580:	1e59      	subs	r1, r3, #1
 8004582:	68bb      	ldr	r3, [r7, #8]
 8004584:	68db      	ldr	r3, [r3, #12]
 8004586:	fbb1 f3f3 	udiv	r3, r1, r3
 800458a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800458c:	4b9d      	ldr	r3, [pc, #628]	; (8004804 <USB_EPStartXfer+0x370>)
 800458e:	400b      	ands	r3, r1
 8004590:	69b9      	ldr	r1, [r7, #24]
 8004592:	0148      	lsls	r0, r1, #5
 8004594:	69f9      	ldr	r1, [r7, #28]
 8004596:	4401      	add	r1, r0
 8004598:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800459c:	4313      	orrs	r3, r2
 800459e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80045a0:	69bb      	ldr	r3, [r7, #24]
 80045a2:	015a      	lsls	r2, r3, #5
 80045a4:	69fb      	ldr	r3, [r7, #28]
 80045a6:	4413      	add	r3, r2
 80045a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045ac:	691a      	ldr	r2, [r3, #16]
 80045ae:	68bb      	ldr	r3, [r7, #8]
 80045b0:	699b      	ldr	r3, [r3, #24]
 80045b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80045b6:	69b9      	ldr	r1, [r7, #24]
 80045b8:	0148      	lsls	r0, r1, #5
 80045ba:	69f9      	ldr	r1, [r7, #28]
 80045bc:	4401      	add	r1, r0
 80045be:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80045c2:	4313      	orrs	r3, r2
 80045c4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	791b      	ldrb	r3, [r3, #4]
 80045ca:	2b01      	cmp	r3, #1
 80045cc:	d11f      	bne.n	800460e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80045ce:	69bb      	ldr	r3, [r7, #24]
 80045d0:	015a      	lsls	r2, r3, #5
 80045d2:	69fb      	ldr	r3, [r7, #28]
 80045d4:	4413      	add	r3, r2
 80045d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045da:	691b      	ldr	r3, [r3, #16]
 80045dc:	69ba      	ldr	r2, [r7, #24]
 80045de:	0151      	lsls	r1, r2, #5
 80045e0:	69fa      	ldr	r2, [r7, #28]
 80045e2:	440a      	add	r2, r1
 80045e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045e8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80045ec:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80045ee:	69bb      	ldr	r3, [r7, #24]
 80045f0:	015a      	lsls	r2, r3, #5
 80045f2:	69fb      	ldr	r3, [r7, #28]
 80045f4:	4413      	add	r3, r2
 80045f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045fa:	691b      	ldr	r3, [r3, #16]
 80045fc:	69ba      	ldr	r2, [r7, #24]
 80045fe:	0151      	lsls	r1, r2, #5
 8004600:	69fa      	ldr	r2, [r7, #28]
 8004602:	440a      	add	r2, r1
 8004604:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004608:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800460c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800460e:	79fb      	ldrb	r3, [r7, #7]
 8004610:	2b01      	cmp	r3, #1
 8004612:	d14b      	bne.n	80046ac <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	695b      	ldr	r3, [r3, #20]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d009      	beq.n	8004630 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800461c:	69bb      	ldr	r3, [r7, #24]
 800461e:	015a      	lsls	r2, r3, #5
 8004620:	69fb      	ldr	r3, [r7, #28]
 8004622:	4413      	add	r3, r2
 8004624:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004628:	461a      	mov	r2, r3
 800462a:	68bb      	ldr	r3, [r7, #8]
 800462c:	695b      	ldr	r3, [r3, #20]
 800462e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	791b      	ldrb	r3, [r3, #4]
 8004634:	2b01      	cmp	r3, #1
 8004636:	d128      	bne.n	800468a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004638:	69fb      	ldr	r3, [r7, #28]
 800463a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800463e:	689b      	ldr	r3, [r3, #8]
 8004640:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004644:	2b00      	cmp	r3, #0
 8004646:	d110      	bne.n	800466a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004648:	69bb      	ldr	r3, [r7, #24]
 800464a:	015a      	lsls	r2, r3, #5
 800464c:	69fb      	ldr	r3, [r7, #28]
 800464e:	4413      	add	r3, r2
 8004650:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	69ba      	ldr	r2, [r7, #24]
 8004658:	0151      	lsls	r1, r2, #5
 800465a:	69fa      	ldr	r2, [r7, #28]
 800465c:	440a      	add	r2, r1
 800465e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004662:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004666:	6013      	str	r3, [r2, #0]
 8004668:	e00f      	b.n	800468a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800466a:	69bb      	ldr	r3, [r7, #24]
 800466c:	015a      	lsls	r2, r3, #5
 800466e:	69fb      	ldr	r3, [r7, #28]
 8004670:	4413      	add	r3, r2
 8004672:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	69ba      	ldr	r2, [r7, #24]
 800467a:	0151      	lsls	r1, r2, #5
 800467c:	69fa      	ldr	r2, [r7, #28]
 800467e:	440a      	add	r2, r1
 8004680:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004684:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004688:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800468a:	69bb      	ldr	r3, [r7, #24]
 800468c:	015a      	lsls	r2, r3, #5
 800468e:	69fb      	ldr	r3, [r7, #28]
 8004690:	4413      	add	r3, r2
 8004692:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	69ba      	ldr	r2, [r7, #24]
 800469a:	0151      	lsls	r1, r2, #5
 800469c:	69fa      	ldr	r2, [r7, #28]
 800469e:	440a      	add	r2, r1
 80046a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80046a4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80046a8:	6013      	str	r3, [r2, #0]
 80046aa:	e133      	b.n	8004914 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80046ac:	69bb      	ldr	r3, [r7, #24]
 80046ae:	015a      	lsls	r2, r3, #5
 80046b0:	69fb      	ldr	r3, [r7, #28]
 80046b2:	4413      	add	r3, r2
 80046b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	69ba      	ldr	r2, [r7, #24]
 80046bc:	0151      	lsls	r1, r2, #5
 80046be:	69fa      	ldr	r2, [r7, #28]
 80046c0:	440a      	add	r2, r1
 80046c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80046c6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80046ca:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80046cc:	68bb      	ldr	r3, [r7, #8]
 80046ce:	791b      	ldrb	r3, [r3, #4]
 80046d0:	2b01      	cmp	r3, #1
 80046d2:	d015      	beq.n	8004700 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80046d4:	68bb      	ldr	r3, [r7, #8]
 80046d6:	699b      	ldr	r3, [r3, #24]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	f000 811b 	beq.w	8004914 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80046de:	69fb      	ldr	r3, [r7, #28]
 80046e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80046e6:	68bb      	ldr	r3, [r7, #8]
 80046e8:	781b      	ldrb	r3, [r3, #0]
 80046ea:	f003 030f 	and.w	r3, r3, #15
 80046ee:	2101      	movs	r1, #1
 80046f0:	fa01 f303 	lsl.w	r3, r1, r3
 80046f4:	69f9      	ldr	r1, [r7, #28]
 80046f6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80046fa:	4313      	orrs	r3, r2
 80046fc:	634b      	str	r3, [r1, #52]	; 0x34
 80046fe:	e109      	b.n	8004914 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004700:	69fb      	ldr	r3, [r7, #28]
 8004702:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004706:	689b      	ldr	r3, [r3, #8]
 8004708:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800470c:	2b00      	cmp	r3, #0
 800470e:	d110      	bne.n	8004732 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004710:	69bb      	ldr	r3, [r7, #24]
 8004712:	015a      	lsls	r2, r3, #5
 8004714:	69fb      	ldr	r3, [r7, #28]
 8004716:	4413      	add	r3, r2
 8004718:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	69ba      	ldr	r2, [r7, #24]
 8004720:	0151      	lsls	r1, r2, #5
 8004722:	69fa      	ldr	r2, [r7, #28]
 8004724:	440a      	add	r2, r1
 8004726:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800472a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800472e:	6013      	str	r3, [r2, #0]
 8004730:	e00f      	b.n	8004752 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004732:	69bb      	ldr	r3, [r7, #24]
 8004734:	015a      	lsls	r2, r3, #5
 8004736:	69fb      	ldr	r3, [r7, #28]
 8004738:	4413      	add	r3, r2
 800473a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	69ba      	ldr	r2, [r7, #24]
 8004742:	0151      	lsls	r1, r2, #5
 8004744:	69fa      	ldr	r2, [r7, #28]
 8004746:	440a      	add	r2, r1
 8004748:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800474c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004750:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004752:	68bb      	ldr	r3, [r7, #8]
 8004754:	6919      	ldr	r1, [r3, #16]
 8004756:	68bb      	ldr	r3, [r7, #8]
 8004758:	781a      	ldrb	r2, [r3, #0]
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	699b      	ldr	r3, [r3, #24]
 800475e:	b298      	uxth	r0, r3
 8004760:	79fb      	ldrb	r3, [r7, #7]
 8004762:	9300      	str	r3, [sp, #0]
 8004764:	4603      	mov	r3, r0
 8004766:	68f8      	ldr	r0, [r7, #12]
 8004768:	f000 fade 	bl	8004d28 <USB_WritePacket>
 800476c:	e0d2      	b.n	8004914 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800476e:	69bb      	ldr	r3, [r7, #24]
 8004770:	015a      	lsls	r2, r3, #5
 8004772:	69fb      	ldr	r3, [r7, #28]
 8004774:	4413      	add	r3, r2
 8004776:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800477a:	691b      	ldr	r3, [r3, #16]
 800477c:	69ba      	ldr	r2, [r7, #24]
 800477e:	0151      	lsls	r1, r2, #5
 8004780:	69fa      	ldr	r2, [r7, #28]
 8004782:	440a      	add	r2, r1
 8004784:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004788:	0cdb      	lsrs	r3, r3, #19
 800478a:	04db      	lsls	r3, r3, #19
 800478c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800478e:	69bb      	ldr	r3, [r7, #24]
 8004790:	015a      	lsls	r2, r3, #5
 8004792:	69fb      	ldr	r3, [r7, #28]
 8004794:	4413      	add	r3, r2
 8004796:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800479a:	691b      	ldr	r3, [r3, #16]
 800479c:	69ba      	ldr	r2, [r7, #24]
 800479e:	0151      	lsls	r1, r2, #5
 80047a0:	69fa      	ldr	r2, [r7, #28]
 80047a2:	440a      	add	r2, r1
 80047a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80047a8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80047ac:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80047b0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80047b2:	68bb      	ldr	r3, [r7, #8]
 80047b4:	699b      	ldr	r3, [r3, #24]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d126      	bne.n	8004808 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80047ba:	69bb      	ldr	r3, [r7, #24]
 80047bc:	015a      	lsls	r2, r3, #5
 80047be:	69fb      	ldr	r3, [r7, #28]
 80047c0:	4413      	add	r3, r2
 80047c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047c6:	691a      	ldr	r2, [r3, #16]
 80047c8:	68bb      	ldr	r3, [r7, #8]
 80047ca:	68db      	ldr	r3, [r3, #12]
 80047cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80047d0:	69b9      	ldr	r1, [r7, #24]
 80047d2:	0148      	lsls	r0, r1, #5
 80047d4:	69f9      	ldr	r1, [r7, #28]
 80047d6:	4401      	add	r1, r0
 80047d8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80047dc:	4313      	orrs	r3, r2
 80047de:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80047e0:	69bb      	ldr	r3, [r7, #24]
 80047e2:	015a      	lsls	r2, r3, #5
 80047e4:	69fb      	ldr	r3, [r7, #28]
 80047e6:	4413      	add	r3, r2
 80047e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047ec:	691b      	ldr	r3, [r3, #16]
 80047ee:	69ba      	ldr	r2, [r7, #24]
 80047f0:	0151      	lsls	r1, r2, #5
 80047f2:	69fa      	ldr	r2, [r7, #28]
 80047f4:	440a      	add	r2, r1
 80047f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80047fa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80047fe:	6113      	str	r3, [r2, #16]
 8004800:	e03a      	b.n	8004878 <USB_EPStartXfer+0x3e4>
 8004802:	bf00      	nop
 8004804:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	699a      	ldr	r2, [r3, #24]
 800480c:	68bb      	ldr	r3, [r7, #8]
 800480e:	68db      	ldr	r3, [r3, #12]
 8004810:	4413      	add	r3, r2
 8004812:	1e5a      	subs	r2, r3, #1
 8004814:	68bb      	ldr	r3, [r7, #8]
 8004816:	68db      	ldr	r3, [r3, #12]
 8004818:	fbb2 f3f3 	udiv	r3, r2, r3
 800481c:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800481e:	68bb      	ldr	r3, [r7, #8]
 8004820:	68db      	ldr	r3, [r3, #12]
 8004822:	8afa      	ldrh	r2, [r7, #22]
 8004824:	fb03 f202 	mul.w	r2, r3, r2
 8004828:	68bb      	ldr	r3, [r7, #8]
 800482a:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800482c:	69bb      	ldr	r3, [r7, #24]
 800482e:	015a      	lsls	r2, r3, #5
 8004830:	69fb      	ldr	r3, [r7, #28]
 8004832:	4413      	add	r3, r2
 8004834:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004838:	691a      	ldr	r2, [r3, #16]
 800483a:	8afb      	ldrh	r3, [r7, #22]
 800483c:	04d9      	lsls	r1, r3, #19
 800483e:	4b38      	ldr	r3, [pc, #224]	; (8004920 <USB_EPStartXfer+0x48c>)
 8004840:	400b      	ands	r3, r1
 8004842:	69b9      	ldr	r1, [r7, #24]
 8004844:	0148      	lsls	r0, r1, #5
 8004846:	69f9      	ldr	r1, [r7, #28]
 8004848:	4401      	add	r1, r0
 800484a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800484e:	4313      	orrs	r3, r2
 8004850:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8004852:	69bb      	ldr	r3, [r7, #24]
 8004854:	015a      	lsls	r2, r3, #5
 8004856:	69fb      	ldr	r3, [r7, #28]
 8004858:	4413      	add	r3, r2
 800485a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800485e:	691a      	ldr	r2, [r3, #16]
 8004860:	68bb      	ldr	r3, [r7, #8]
 8004862:	69db      	ldr	r3, [r3, #28]
 8004864:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004868:	69b9      	ldr	r1, [r7, #24]
 800486a:	0148      	lsls	r0, r1, #5
 800486c:	69f9      	ldr	r1, [r7, #28]
 800486e:	4401      	add	r1, r0
 8004870:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004874:	4313      	orrs	r3, r2
 8004876:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004878:	79fb      	ldrb	r3, [r7, #7]
 800487a:	2b01      	cmp	r3, #1
 800487c:	d10d      	bne.n	800489a <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800487e:	68bb      	ldr	r3, [r7, #8]
 8004880:	691b      	ldr	r3, [r3, #16]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d009      	beq.n	800489a <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004886:	68bb      	ldr	r3, [r7, #8]
 8004888:	6919      	ldr	r1, [r3, #16]
 800488a:	69bb      	ldr	r3, [r7, #24]
 800488c:	015a      	lsls	r2, r3, #5
 800488e:	69fb      	ldr	r3, [r7, #28]
 8004890:	4413      	add	r3, r2
 8004892:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004896:	460a      	mov	r2, r1
 8004898:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800489a:	68bb      	ldr	r3, [r7, #8]
 800489c:	791b      	ldrb	r3, [r3, #4]
 800489e:	2b01      	cmp	r3, #1
 80048a0:	d128      	bne.n	80048f4 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80048a2:	69fb      	ldr	r3, [r7, #28]
 80048a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048a8:	689b      	ldr	r3, [r3, #8]
 80048aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d110      	bne.n	80048d4 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80048b2:	69bb      	ldr	r3, [r7, #24]
 80048b4:	015a      	lsls	r2, r3, #5
 80048b6:	69fb      	ldr	r3, [r7, #28]
 80048b8:	4413      	add	r3, r2
 80048ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	69ba      	ldr	r2, [r7, #24]
 80048c2:	0151      	lsls	r1, r2, #5
 80048c4:	69fa      	ldr	r2, [r7, #28]
 80048c6:	440a      	add	r2, r1
 80048c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80048cc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80048d0:	6013      	str	r3, [r2, #0]
 80048d2:	e00f      	b.n	80048f4 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80048d4:	69bb      	ldr	r3, [r7, #24]
 80048d6:	015a      	lsls	r2, r3, #5
 80048d8:	69fb      	ldr	r3, [r7, #28]
 80048da:	4413      	add	r3, r2
 80048dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	69ba      	ldr	r2, [r7, #24]
 80048e4:	0151      	lsls	r1, r2, #5
 80048e6:	69fa      	ldr	r2, [r7, #28]
 80048e8:	440a      	add	r2, r1
 80048ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80048ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048f2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80048f4:	69bb      	ldr	r3, [r7, #24]
 80048f6:	015a      	lsls	r2, r3, #5
 80048f8:	69fb      	ldr	r3, [r7, #28]
 80048fa:	4413      	add	r3, r2
 80048fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	69ba      	ldr	r2, [r7, #24]
 8004904:	0151      	lsls	r1, r2, #5
 8004906:	69fa      	ldr	r2, [r7, #28]
 8004908:	440a      	add	r2, r1
 800490a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800490e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004912:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004914:	2300      	movs	r3, #0
}
 8004916:	4618      	mov	r0, r3
 8004918:	3720      	adds	r7, #32
 800491a:	46bd      	mov	sp, r7
 800491c:	bd80      	pop	{r7, pc}
 800491e:	bf00      	nop
 8004920:	1ff80000 	.word	0x1ff80000

08004924 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004924:	b480      	push	{r7}
 8004926:	b087      	sub	sp, #28
 8004928:	af00      	add	r7, sp, #0
 800492a:	60f8      	str	r0, [r7, #12]
 800492c:	60b9      	str	r1, [r7, #8]
 800492e:	4613      	mov	r3, r2
 8004930:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8004936:	68bb      	ldr	r3, [r7, #8]
 8004938:	781b      	ldrb	r3, [r3, #0]
 800493a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800493c:	68bb      	ldr	r3, [r7, #8]
 800493e:	785b      	ldrb	r3, [r3, #1]
 8004940:	2b01      	cmp	r3, #1
 8004942:	f040 80ce 	bne.w	8004ae2 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004946:	68bb      	ldr	r3, [r7, #8]
 8004948:	699b      	ldr	r3, [r3, #24]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d132      	bne.n	80049b4 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800494e:	693b      	ldr	r3, [r7, #16]
 8004950:	015a      	lsls	r2, r3, #5
 8004952:	697b      	ldr	r3, [r7, #20]
 8004954:	4413      	add	r3, r2
 8004956:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800495a:	691b      	ldr	r3, [r3, #16]
 800495c:	693a      	ldr	r2, [r7, #16]
 800495e:	0151      	lsls	r1, r2, #5
 8004960:	697a      	ldr	r2, [r7, #20]
 8004962:	440a      	add	r2, r1
 8004964:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004968:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800496c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004970:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004972:	693b      	ldr	r3, [r7, #16]
 8004974:	015a      	lsls	r2, r3, #5
 8004976:	697b      	ldr	r3, [r7, #20]
 8004978:	4413      	add	r3, r2
 800497a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800497e:	691b      	ldr	r3, [r3, #16]
 8004980:	693a      	ldr	r2, [r7, #16]
 8004982:	0151      	lsls	r1, r2, #5
 8004984:	697a      	ldr	r2, [r7, #20]
 8004986:	440a      	add	r2, r1
 8004988:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800498c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004990:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004992:	693b      	ldr	r3, [r7, #16]
 8004994:	015a      	lsls	r2, r3, #5
 8004996:	697b      	ldr	r3, [r7, #20]
 8004998:	4413      	add	r3, r2
 800499a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800499e:	691b      	ldr	r3, [r3, #16]
 80049a0:	693a      	ldr	r2, [r7, #16]
 80049a2:	0151      	lsls	r1, r2, #5
 80049a4:	697a      	ldr	r2, [r7, #20]
 80049a6:	440a      	add	r2, r1
 80049a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049ac:	0cdb      	lsrs	r3, r3, #19
 80049ae:	04db      	lsls	r3, r3, #19
 80049b0:	6113      	str	r3, [r2, #16]
 80049b2:	e04e      	b.n	8004a52 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80049b4:	693b      	ldr	r3, [r7, #16]
 80049b6:	015a      	lsls	r2, r3, #5
 80049b8:	697b      	ldr	r3, [r7, #20]
 80049ba:	4413      	add	r3, r2
 80049bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049c0:	691b      	ldr	r3, [r3, #16]
 80049c2:	693a      	ldr	r2, [r7, #16]
 80049c4:	0151      	lsls	r1, r2, #5
 80049c6:	697a      	ldr	r2, [r7, #20]
 80049c8:	440a      	add	r2, r1
 80049ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049ce:	0cdb      	lsrs	r3, r3, #19
 80049d0:	04db      	lsls	r3, r3, #19
 80049d2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80049d4:	693b      	ldr	r3, [r7, #16]
 80049d6:	015a      	lsls	r2, r3, #5
 80049d8:	697b      	ldr	r3, [r7, #20]
 80049da:	4413      	add	r3, r2
 80049dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049e0:	691b      	ldr	r3, [r3, #16]
 80049e2:	693a      	ldr	r2, [r7, #16]
 80049e4:	0151      	lsls	r1, r2, #5
 80049e6:	697a      	ldr	r2, [r7, #20]
 80049e8:	440a      	add	r2, r1
 80049ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049ee:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80049f2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80049f6:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80049f8:	68bb      	ldr	r3, [r7, #8]
 80049fa:	699a      	ldr	r2, [r3, #24]
 80049fc:	68bb      	ldr	r3, [r7, #8]
 80049fe:	68db      	ldr	r3, [r3, #12]
 8004a00:	429a      	cmp	r2, r3
 8004a02:	d903      	bls.n	8004a0c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	68da      	ldr	r2, [r3, #12]
 8004a08:	68bb      	ldr	r3, [r7, #8]
 8004a0a:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004a0c:	693b      	ldr	r3, [r7, #16]
 8004a0e:	015a      	lsls	r2, r3, #5
 8004a10:	697b      	ldr	r3, [r7, #20]
 8004a12:	4413      	add	r3, r2
 8004a14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a18:	691b      	ldr	r3, [r3, #16]
 8004a1a:	693a      	ldr	r2, [r7, #16]
 8004a1c:	0151      	lsls	r1, r2, #5
 8004a1e:	697a      	ldr	r2, [r7, #20]
 8004a20:	440a      	add	r2, r1
 8004a22:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a26:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004a2a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004a2c:	693b      	ldr	r3, [r7, #16]
 8004a2e:	015a      	lsls	r2, r3, #5
 8004a30:	697b      	ldr	r3, [r7, #20]
 8004a32:	4413      	add	r3, r2
 8004a34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a38:	691a      	ldr	r2, [r3, #16]
 8004a3a:	68bb      	ldr	r3, [r7, #8]
 8004a3c:	699b      	ldr	r3, [r3, #24]
 8004a3e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a42:	6939      	ldr	r1, [r7, #16]
 8004a44:	0148      	lsls	r0, r1, #5
 8004a46:	6979      	ldr	r1, [r7, #20]
 8004a48:	4401      	add	r1, r0
 8004a4a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004a4e:	4313      	orrs	r3, r2
 8004a50:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004a52:	79fb      	ldrb	r3, [r7, #7]
 8004a54:	2b01      	cmp	r3, #1
 8004a56:	d11e      	bne.n	8004a96 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	695b      	ldr	r3, [r3, #20]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d009      	beq.n	8004a74 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004a60:	693b      	ldr	r3, [r7, #16]
 8004a62:	015a      	lsls	r2, r3, #5
 8004a64:	697b      	ldr	r3, [r7, #20]
 8004a66:	4413      	add	r3, r2
 8004a68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a6c:	461a      	mov	r2, r3
 8004a6e:	68bb      	ldr	r3, [r7, #8]
 8004a70:	695b      	ldr	r3, [r3, #20]
 8004a72:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004a74:	693b      	ldr	r3, [r7, #16]
 8004a76:	015a      	lsls	r2, r3, #5
 8004a78:	697b      	ldr	r3, [r7, #20]
 8004a7a:	4413      	add	r3, r2
 8004a7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	693a      	ldr	r2, [r7, #16]
 8004a84:	0151      	lsls	r1, r2, #5
 8004a86:	697a      	ldr	r2, [r7, #20]
 8004a88:	440a      	add	r2, r1
 8004a8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a8e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004a92:	6013      	str	r3, [r2, #0]
 8004a94:	e097      	b.n	8004bc6 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004a96:	693b      	ldr	r3, [r7, #16]
 8004a98:	015a      	lsls	r2, r3, #5
 8004a9a:	697b      	ldr	r3, [r7, #20]
 8004a9c:	4413      	add	r3, r2
 8004a9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	693a      	ldr	r2, [r7, #16]
 8004aa6:	0151      	lsls	r1, r2, #5
 8004aa8:	697a      	ldr	r2, [r7, #20]
 8004aaa:	440a      	add	r2, r1
 8004aac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ab0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004ab4:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8004ab6:	68bb      	ldr	r3, [r7, #8]
 8004ab8:	699b      	ldr	r3, [r3, #24]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	f000 8083 	beq.w	8004bc6 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004ac0:	697b      	ldr	r3, [r7, #20]
 8004ac2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ac6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ac8:	68bb      	ldr	r3, [r7, #8]
 8004aca:	781b      	ldrb	r3, [r3, #0]
 8004acc:	f003 030f 	and.w	r3, r3, #15
 8004ad0:	2101      	movs	r1, #1
 8004ad2:	fa01 f303 	lsl.w	r3, r1, r3
 8004ad6:	6979      	ldr	r1, [r7, #20]
 8004ad8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004adc:	4313      	orrs	r3, r2
 8004ade:	634b      	str	r3, [r1, #52]	; 0x34
 8004ae0:	e071      	b.n	8004bc6 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004ae2:	693b      	ldr	r3, [r7, #16]
 8004ae4:	015a      	lsls	r2, r3, #5
 8004ae6:	697b      	ldr	r3, [r7, #20]
 8004ae8:	4413      	add	r3, r2
 8004aea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004aee:	691b      	ldr	r3, [r3, #16]
 8004af0:	693a      	ldr	r2, [r7, #16]
 8004af2:	0151      	lsls	r1, r2, #5
 8004af4:	697a      	ldr	r2, [r7, #20]
 8004af6:	440a      	add	r2, r1
 8004af8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004afc:	0cdb      	lsrs	r3, r3, #19
 8004afe:	04db      	lsls	r3, r3, #19
 8004b00:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004b02:	693b      	ldr	r3, [r7, #16]
 8004b04:	015a      	lsls	r2, r3, #5
 8004b06:	697b      	ldr	r3, [r7, #20]
 8004b08:	4413      	add	r3, r2
 8004b0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b0e:	691b      	ldr	r3, [r3, #16]
 8004b10:	693a      	ldr	r2, [r7, #16]
 8004b12:	0151      	lsls	r1, r2, #5
 8004b14:	697a      	ldr	r2, [r7, #20]
 8004b16:	440a      	add	r2, r1
 8004b18:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b1c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004b20:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004b24:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8004b26:	68bb      	ldr	r3, [r7, #8]
 8004b28:	699b      	ldr	r3, [r3, #24]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d003      	beq.n	8004b36 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8004b2e:	68bb      	ldr	r3, [r7, #8]
 8004b30:	68da      	ldr	r2, [r3, #12]
 8004b32:	68bb      	ldr	r3, [r7, #8]
 8004b34:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8004b36:	68bb      	ldr	r3, [r7, #8]
 8004b38:	68da      	ldr	r2, [r3, #12]
 8004b3a:	68bb      	ldr	r3, [r7, #8]
 8004b3c:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004b3e:	693b      	ldr	r3, [r7, #16]
 8004b40:	015a      	lsls	r2, r3, #5
 8004b42:	697b      	ldr	r3, [r7, #20]
 8004b44:	4413      	add	r3, r2
 8004b46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b4a:	691b      	ldr	r3, [r3, #16]
 8004b4c:	693a      	ldr	r2, [r7, #16]
 8004b4e:	0151      	lsls	r1, r2, #5
 8004b50:	697a      	ldr	r2, [r7, #20]
 8004b52:	440a      	add	r2, r1
 8004b54:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b58:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004b5c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8004b5e:	693b      	ldr	r3, [r7, #16]
 8004b60:	015a      	lsls	r2, r3, #5
 8004b62:	697b      	ldr	r3, [r7, #20]
 8004b64:	4413      	add	r3, r2
 8004b66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b6a:	691a      	ldr	r2, [r3, #16]
 8004b6c:	68bb      	ldr	r3, [r7, #8]
 8004b6e:	69db      	ldr	r3, [r3, #28]
 8004b70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b74:	6939      	ldr	r1, [r7, #16]
 8004b76:	0148      	lsls	r0, r1, #5
 8004b78:	6979      	ldr	r1, [r7, #20]
 8004b7a:	4401      	add	r1, r0
 8004b7c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004b80:	4313      	orrs	r3, r2
 8004b82:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8004b84:	79fb      	ldrb	r3, [r7, #7]
 8004b86:	2b01      	cmp	r3, #1
 8004b88:	d10d      	bne.n	8004ba6 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004b8a:	68bb      	ldr	r3, [r7, #8]
 8004b8c:	691b      	ldr	r3, [r3, #16]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d009      	beq.n	8004ba6 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004b92:	68bb      	ldr	r3, [r7, #8]
 8004b94:	6919      	ldr	r1, [r3, #16]
 8004b96:	693b      	ldr	r3, [r7, #16]
 8004b98:	015a      	lsls	r2, r3, #5
 8004b9a:	697b      	ldr	r3, [r7, #20]
 8004b9c:	4413      	add	r3, r2
 8004b9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ba2:	460a      	mov	r2, r1
 8004ba4:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004ba6:	693b      	ldr	r3, [r7, #16]
 8004ba8:	015a      	lsls	r2, r3, #5
 8004baa:	697b      	ldr	r3, [r7, #20]
 8004bac:	4413      	add	r3, r2
 8004bae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	693a      	ldr	r2, [r7, #16]
 8004bb6:	0151      	lsls	r1, r2, #5
 8004bb8:	697a      	ldr	r2, [r7, #20]
 8004bba:	440a      	add	r2, r1
 8004bbc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004bc0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004bc4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004bc6:	2300      	movs	r3, #0
}
 8004bc8:	4618      	mov	r0, r3
 8004bca:	371c      	adds	r7, #28
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd2:	4770      	bx	lr

08004bd4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004bd4:	b480      	push	{r7}
 8004bd6:	b087      	sub	sp, #28
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
 8004bdc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004bde:	2300      	movs	r3, #0
 8004be0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8004be2:	2300      	movs	r3, #0
 8004be4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	785b      	ldrb	r3, [r3, #1]
 8004bee:	2b01      	cmp	r3, #1
 8004bf0:	d14a      	bne.n	8004c88 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	781b      	ldrb	r3, [r3, #0]
 8004bf6:	015a      	lsls	r2, r3, #5
 8004bf8:	693b      	ldr	r3, [r7, #16]
 8004bfa:	4413      	add	r3, r2
 8004bfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004c06:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004c0a:	f040 8086 	bne.w	8004d1a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	781b      	ldrb	r3, [r3, #0]
 8004c12:	015a      	lsls	r2, r3, #5
 8004c14:	693b      	ldr	r3, [r7, #16]
 8004c16:	4413      	add	r3, r2
 8004c18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	683a      	ldr	r2, [r7, #0]
 8004c20:	7812      	ldrb	r2, [r2, #0]
 8004c22:	0151      	lsls	r1, r2, #5
 8004c24:	693a      	ldr	r2, [r7, #16]
 8004c26:	440a      	add	r2, r1
 8004c28:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c2c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004c30:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	781b      	ldrb	r3, [r3, #0]
 8004c36:	015a      	lsls	r2, r3, #5
 8004c38:	693b      	ldr	r3, [r7, #16]
 8004c3a:	4413      	add	r3, r2
 8004c3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	683a      	ldr	r2, [r7, #0]
 8004c44:	7812      	ldrb	r2, [r2, #0]
 8004c46:	0151      	lsls	r1, r2, #5
 8004c48:	693a      	ldr	r2, [r7, #16]
 8004c4a:	440a      	add	r2, r1
 8004c4c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c50:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004c54:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	3301      	adds	r3, #1
 8004c5a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	f242 7210 	movw	r2, #10000	; 0x2710
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d902      	bls.n	8004c6c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8004c66:	2301      	movs	r3, #1
 8004c68:	75fb      	strb	r3, [r7, #23]
          break;
 8004c6a:	e056      	b.n	8004d1a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	781b      	ldrb	r3, [r3, #0]
 8004c70:	015a      	lsls	r2, r3, #5
 8004c72:	693b      	ldr	r3, [r7, #16]
 8004c74:	4413      	add	r3, r2
 8004c76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004c80:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004c84:	d0e7      	beq.n	8004c56 <USB_EPStopXfer+0x82>
 8004c86:	e048      	b.n	8004d1a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	781b      	ldrb	r3, [r3, #0]
 8004c8c:	015a      	lsls	r2, r3, #5
 8004c8e:	693b      	ldr	r3, [r7, #16]
 8004c90:	4413      	add	r3, r2
 8004c92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004c9c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004ca0:	d13b      	bne.n	8004d1a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	781b      	ldrb	r3, [r3, #0]
 8004ca6:	015a      	lsls	r2, r3, #5
 8004ca8:	693b      	ldr	r3, [r7, #16]
 8004caa:	4413      	add	r3, r2
 8004cac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	683a      	ldr	r2, [r7, #0]
 8004cb4:	7812      	ldrb	r2, [r2, #0]
 8004cb6:	0151      	lsls	r1, r2, #5
 8004cb8:	693a      	ldr	r2, [r7, #16]
 8004cba:	440a      	add	r2, r1
 8004cbc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004cc0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004cc4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	781b      	ldrb	r3, [r3, #0]
 8004cca:	015a      	lsls	r2, r3, #5
 8004ccc:	693b      	ldr	r3, [r7, #16]
 8004cce:	4413      	add	r3, r2
 8004cd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	683a      	ldr	r2, [r7, #0]
 8004cd8:	7812      	ldrb	r2, [r2, #0]
 8004cda:	0151      	lsls	r1, r2, #5
 8004cdc:	693a      	ldr	r2, [r7, #16]
 8004cde:	440a      	add	r2, r1
 8004ce0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ce4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004ce8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	3301      	adds	r3, #1
 8004cee:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	f242 7210 	movw	r2, #10000	; 0x2710
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d902      	bls.n	8004d00 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	75fb      	strb	r3, [r7, #23]
          break;
 8004cfe:	e00c      	b.n	8004d1a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	781b      	ldrb	r3, [r3, #0]
 8004d04:	015a      	lsls	r2, r3, #5
 8004d06:	693b      	ldr	r3, [r7, #16]
 8004d08:	4413      	add	r3, r2
 8004d0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004d14:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004d18:	d0e7      	beq.n	8004cea <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8004d1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	371c      	adds	r7, #28
 8004d20:	46bd      	mov	sp, r7
 8004d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d26:	4770      	bx	lr

08004d28 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004d28:	b480      	push	{r7}
 8004d2a:	b089      	sub	sp, #36	; 0x24
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	60f8      	str	r0, [r7, #12]
 8004d30:	60b9      	str	r1, [r7, #8]
 8004d32:	4611      	mov	r1, r2
 8004d34:	461a      	mov	r2, r3
 8004d36:	460b      	mov	r3, r1
 8004d38:	71fb      	strb	r3, [r7, #7]
 8004d3a:	4613      	mov	r3, r2
 8004d3c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004d42:	68bb      	ldr	r3, [r7, #8]
 8004d44:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004d46:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d123      	bne.n	8004d96 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004d4e:	88bb      	ldrh	r3, [r7, #4]
 8004d50:	3303      	adds	r3, #3
 8004d52:	089b      	lsrs	r3, r3, #2
 8004d54:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004d56:	2300      	movs	r3, #0
 8004d58:	61bb      	str	r3, [r7, #24]
 8004d5a:	e018      	b.n	8004d8e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004d5c:	79fb      	ldrb	r3, [r7, #7]
 8004d5e:	031a      	lsls	r2, r3, #12
 8004d60:	697b      	ldr	r3, [r7, #20]
 8004d62:	4413      	add	r3, r2
 8004d64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d68:	461a      	mov	r2, r3
 8004d6a:	69fb      	ldr	r3, [r7, #28]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004d70:	69fb      	ldr	r3, [r7, #28]
 8004d72:	3301      	adds	r3, #1
 8004d74:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004d76:	69fb      	ldr	r3, [r7, #28]
 8004d78:	3301      	adds	r3, #1
 8004d7a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004d7c:	69fb      	ldr	r3, [r7, #28]
 8004d7e:	3301      	adds	r3, #1
 8004d80:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004d82:	69fb      	ldr	r3, [r7, #28]
 8004d84:	3301      	adds	r3, #1
 8004d86:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004d88:	69bb      	ldr	r3, [r7, #24]
 8004d8a:	3301      	adds	r3, #1
 8004d8c:	61bb      	str	r3, [r7, #24]
 8004d8e:	69ba      	ldr	r2, [r7, #24]
 8004d90:	693b      	ldr	r3, [r7, #16]
 8004d92:	429a      	cmp	r2, r3
 8004d94:	d3e2      	bcc.n	8004d5c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004d96:	2300      	movs	r3, #0
}
 8004d98:	4618      	mov	r0, r3
 8004d9a:	3724      	adds	r7, #36	; 0x24
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da2:	4770      	bx	lr

08004da4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004da4:	b480      	push	{r7}
 8004da6:	b08b      	sub	sp, #44	; 0x2c
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	60f8      	str	r0, [r7, #12]
 8004dac:	60b9      	str	r1, [r7, #8]
 8004dae:	4613      	mov	r3, r2
 8004db0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004db6:	68bb      	ldr	r3, [r7, #8]
 8004db8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004dba:	88fb      	ldrh	r3, [r7, #6]
 8004dbc:	089b      	lsrs	r3, r3, #2
 8004dbe:	b29b      	uxth	r3, r3
 8004dc0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004dc2:	88fb      	ldrh	r3, [r7, #6]
 8004dc4:	f003 0303 	and.w	r3, r3, #3
 8004dc8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004dca:	2300      	movs	r3, #0
 8004dcc:	623b      	str	r3, [r7, #32]
 8004dce:	e014      	b.n	8004dfa <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004dd0:	69bb      	ldr	r3, [r7, #24]
 8004dd2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004dd6:	681a      	ldr	r2, [r3, #0]
 8004dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dda:	601a      	str	r2, [r3, #0]
    pDest++;
 8004ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dde:	3301      	adds	r3, #1
 8004de0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de4:	3301      	adds	r3, #1
 8004de6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dea:	3301      	adds	r3, #1
 8004dec:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004df0:	3301      	adds	r3, #1
 8004df2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8004df4:	6a3b      	ldr	r3, [r7, #32]
 8004df6:	3301      	adds	r3, #1
 8004df8:	623b      	str	r3, [r7, #32]
 8004dfa:	6a3a      	ldr	r2, [r7, #32]
 8004dfc:	697b      	ldr	r3, [r7, #20]
 8004dfe:	429a      	cmp	r2, r3
 8004e00:	d3e6      	bcc.n	8004dd0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004e02:	8bfb      	ldrh	r3, [r7, #30]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d01e      	beq.n	8004e46 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004e08:	2300      	movs	r3, #0
 8004e0a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004e0c:	69bb      	ldr	r3, [r7, #24]
 8004e0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e12:	461a      	mov	r2, r3
 8004e14:	f107 0310 	add.w	r3, r7, #16
 8004e18:	6812      	ldr	r2, [r2, #0]
 8004e1a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004e1c:	693a      	ldr	r2, [r7, #16]
 8004e1e:	6a3b      	ldr	r3, [r7, #32]
 8004e20:	b2db      	uxtb	r3, r3
 8004e22:	00db      	lsls	r3, r3, #3
 8004e24:	fa22 f303 	lsr.w	r3, r2, r3
 8004e28:	b2da      	uxtb	r2, r3
 8004e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e2c:	701a      	strb	r2, [r3, #0]
      i++;
 8004e2e:	6a3b      	ldr	r3, [r7, #32]
 8004e30:	3301      	adds	r3, #1
 8004e32:	623b      	str	r3, [r7, #32]
      pDest++;
 8004e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e36:	3301      	adds	r3, #1
 8004e38:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8004e3a:	8bfb      	ldrh	r3, [r7, #30]
 8004e3c:	3b01      	subs	r3, #1
 8004e3e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004e40:	8bfb      	ldrh	r3, [r7, #30]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d1ea      	bne.n	8004e1c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004e48:	4618      	mov	r0, r3
 8004e4a:	372c      	adds	r7, #44	; 0x2c
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e52:	4770      	bx	lr

08004e54 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004e54:	b480      	push	{r7}
 8004e56:	b085      	sub	sp, #20
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
 8004e5c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	781b      	ldrb	r3, [r3, #0]
 8004e66:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	785b      	ldrb	r3, [r3, #1]
 8004e6c:	2b01      	cmp	r3, #1
 8004e6e:	d12c      	bne.n	8004eca <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004e70:	68bb      	ldr	r3, [r7, #8]
 8004e72:	015a      	lsls	r2, r3, #5
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	4413      	add	r3, r2
 8004e78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	db12      	blt.n	8004ea8 <USB_EPSetStall+0x54>
 8004e82:	68bb      	ldr	r3, [r7, #8]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d00f      	beq.n	8004ea8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004e88:	68bb      	ldr	r3, [r7, #8]
 8004e8a:	015a      	lsls	r2, r3, #5
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	4413      	add	r3, r2
 8004e90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	68ba      	ldr	r2, [r7, #8]
 8004e98:	0151      	lsls	r1, r2, #5
 8004e9a:	68fa      	ldr	r2, [r7, #12]
 8004e9c:	440a      	add	r2, r1
 8004e9e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ea2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004ea6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004ea8:	68bb      	ldr	r3, [r7, #8]
 8004eaa:	015a      	lsls	r2, r3, #5
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	4413      	add	r3, r2
 8004eb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	68ba      	ldr	r2, [r7, #8]
 8004eb8:	0151      	lsls	r1, r2, #5
 8004eba:	68fa      	ldr	r2, [r7, #12]
 8004ebc:	440a      	add	r2, r1
 8004ebe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ec2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004ec6:	6013      	str	r3, [r2, #0]
 8004ec8:	e02b      	b.n	8004f22 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004eca:	68bb      	ldr	r3, [r7, #8]
 8004ecc:	015a      	lsls	r2, r3, #5
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	4413      	add	r3, r2
 8004ed2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	db12      	blt.n	8004f02 <USB_EPSetStall+0xae>
 8004edc:	68bb      	ldr	r3, [r7, #8]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d00f      	beq.n	8004f02 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004ee2:	68bb      	ldr	r3, [r7, #8]
 8004ee4:	015a      	lsls	r2, r3, #5
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	4413      	add	r3, r2
 8004eea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	68ba      	ldr	r2, [r7, #8]
 8004ef2:	0151      	lsls	r1, r2, #5
 8004ef4:	68fa      	ldr	r2, [r7, #12]
 8004ef6:	440a      	add	r2, r1
 8004ef8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004efc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004f00:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004f02:	68bb      	ldr	r3, [r7, #8]
 8004f04:	015a      	lsls	r2, r3, #5
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	4413      	add	r3, r2
 8004f0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	68ba      	ldr	r2, [r7, #8]
 8004f12:	0151      	lsls	r1, r2, #5
 8004f14:	68fa      	ldr	r2, [r7, #12]
 8004f16:	440a      	add	r2, r1
 8004f18:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f1c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004f20:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004f22:	2300      	movs	r3, #0
}
 8004f24:	4618      	mov	r0, r3
 8004f26:	3714      	adds	r7, #20
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2e:	4770      	bx	lr

08004f30 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004f30:	b480      	push	{r7}
 8004f32:	b085      	sub	sp, #20
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
 8004f38:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	781b      	ldrb	r3, [r3, #0]
 8004f42:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	785b      	ldrb	r3, [r3, #1]
 8004f48:	2b01      	cmp	r3, #1
 8004f4a:	d128      	bne.n	8004f9e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004f4c:	68bb      	ldr	r3, [r7, #8]
 8004f4e:	015a      	lsls	r2, r3, #5
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	4413      	add	r3, r2
 8004f54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	68ba      	ldr	r2, [r7, #8]
 8004f5c:	0151      	lsls	r1, r2, #5
 8004f5e:	68fa      	ldr	r2, [r7, #12]
 8004f60:	440a      	add	r2, r1
 8004f62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f66:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004f6a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	791b      	ldrb	r3, [r3, #4]
 8004f70:	2b03      	cmp	r3, #3
 8004f72:	d003      	beq.n	8004f7c <USB_EPClearStall+0x4c>
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	791b      	ldrb	r3, [r3, #4]
 8004f78:	2b02      	cmp	r3, #2
 8004f7a:	d138      	bne.n	8004fee <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004f7c:	68bb      	ldr	r3, [r7, #8]
 8004f7e:	015a      	lsls	r2, r3, #5
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	4413      	add	r3, r2
 8004f84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	68ba      	ldr	r2, [r7, #8]
 8004f8c:	0151      	lsls	r1, r2, #5
 8004f8e:	68fa      	ldr	r2, [r7, #12]
 8004f90:	440a      	add	r2, r1
 8004f92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f9a:	6013      	str	r3, [r2, #0]
 8004f9c:	e027      	b.n	8004fee <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004f9e:	68bb      	ldr	r3, [r7, #8]
 8004fa0:	015a      	lsls	r2, r3, #5
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	4413      	add	r3, r2
 8004fa6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	68ba      	ldr	r2, [r7, #8]
 8004fae:	0151      	lsls	r1, r2, #5
 8004fb0:	68fa      	ldr	r2, [r7, #12]
 8004fb2:	440a      	add	r2, r1
 8004fb4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004fb8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004fbc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	791b      	ldrb	r3, [r3, #4]
 8004fc2:	2b03      	cmp	r3, #3
 8004fc4:	d003      	beq.n	8004fce <USB_EPClearStall+0x9e>
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	791b      	ldrb	r3, [r3, #4]
 8004fca:	2b02      	cmp	r3, #2
 8004fcc:	d10f      	bne.n	8004fee <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004fce:	68bb      	ldr	r3, [r7, #8]
 8004fd0:	015a      	lsls	r2, r3, #5
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	4413      	add	r3, r2
 8004fd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	68ba      	ldr	r2, [r7, #8]
 8004fde:	0151      	lsls	r1, r2, #5
 8004fe0:	68fa      	ldr	r2, [r7, #12]
 8004fe2:	440a      	add	r2, r1
 8004fe4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004fe8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fec:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004fee:	2300      	movs	r3, #0
}
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	3714      	adds	r7, #20
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffa:	4770      	bx	lr

08004ffc <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004ffc:	b480      	push	{r7}
 8004ffe:	b085      	sub	sp, #20
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
 8005004:	460b      	mov	r3, r1
 8005006:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	68fa      	ldr	r2, [r7, #12]
 8005016:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800501a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800501e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005026:	681a      	ldr	r2, [r3, #0]
 8005028:	78fb      	ldrb	r3, [r7, #3]
 800502a:	011b      	lsls	r3, r3, #4
 800502c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005030:	68f9      	ldr	r1, [r7, #12]
 8005032:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005036:	4313      	orrs	r3, r2
 8005038:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800503a:	2300      	movs	r3, #0
}
 800503c:	4618      	mov	r0, r3
 800503e:	3714      	adds	r7, #20
 8005040:	46bd      	mov	sp, r7
 8005042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005046:	4770      	bx	lr

08005048 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005048:	b480      	push	{r7}
 800504a:	b085      	sub	sp, #20
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	68fa      	ldr	r2, [r7, #12]
 800505e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005062:	f023 0303 	bic.w	r3, r3, #3
 8005066:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800506e:	685b      	ldr	r3, [r3, #4]
 8005070:	68fa      	ldr	r2, [r7, #12]
 8005072:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005076:	f023 0302 	bic.w	r3, r3, #2
 800507a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800507c:	2300      	movs	r3, #0
}
 800507e:	4618      	mov	r0, r3
 8005080:	3714      	adds	r7, #20
 8005082:	46bd      	mov	sp, r7
 8005084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005088:	4770      	bx	lr

0800508a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800508a:	b480      	push	{r7}
 800508c:	b085      	sub	sp, #20
 800508e:	af00      	add	r7, sp, #0
 8005090:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	68fa      	ldr	r2, [r7, #12]
 80050a0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80050a4:	f023 0303 	bic.w	r3, r3, #3
 80050a8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050b0:	685b      	ldr	r3, [r3, #4]
 80050b2:	68fa      	ldr	r2, [r7, #12]
 80050b4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80050b8:	f043 0302 	orr.w	r3, r3, #2
 80050bc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80050be:	2300      	movs	r3, #0
}
 80050c0:	4618      	mov	r0, r3
 80050c2:	3714      	adds	r7, #20
 80050c4:	46bd      	mov	sp, r7
 80050c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ca:	4770      	bx	lr

080050cc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80050cc:	b480      	push	{r7}
 80050ce:	b085      	sub	sp, #20
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	695b      	ldr	r3, [r3, #20]
 80050d8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	699b      	ldr	r3, [r3, #24]
 80050de:	68fa      	ldr	r2, [r7, #12]
 80050e0:	4013      	ands	r3, r2
 80050e2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80050e4:	68fb      	ldr	r3, [r7, #12]
}
 80050e6:	4618      	mov	r0, r3
 80050e8:	3714      	adds	r7, #20
 80050ea:	46bd      	mov	sp, r7
 80050ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f0:	4770      	bx	lr

080050f2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80050f2:	b480      	push	{r7}
 80050f4:	b085      	sub	sp, #20
 80050f6:	af00      	add	r7, sp, #0
 80050f8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005104:	699b      	ldr	r3, [r3, #24]
 8005106:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800510e:	69db      	ldr	r3, [r3, #28]
 8005110:	68ba      	ldr	r2, [r7, #8]
 8005112:	4013      	ands	r3, r2
 8005114:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005116:	68bb      	ldr	r3, [r7, #8]
 8005118:	0c1b      	lsrs	r3, r3, #16
}
 800511a:	4618      	mov	r0, r3
 800511c:	3714      	adds	r7, #20
 800511e:	46bd      	mov	sp, r7
 8005120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005124:	4770      	bx	lr

08005126 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005126:	b480      	push	{r7}
 8005128:	b085      	sub	sp, #20
 800512a:	af00      	add	r7, sp, #0
 800512c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005138:	699b      	ldr	r3, [r3, #24]
 800513a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005142:	69db      	ldr	r3, [r3, #28]
 8005144:	68ba      	ldr	r2, [r7, #8]
 8005146:	4013      	ands	r3, r2
 8005148:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800514a:	68bb      	ldr	r3, [r7, #8]
 800514c:	b29b      	uxth	r3, r3
}
 800514e:	4618      	mov	r0, r3
 8005150:	3714      	adds	r7, #20
 8005152:	46bd      	mov	sp, r7
 8005154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005158:	4770      	bx	lr

0800515a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800515a:	b480      	push	{r7}
 800515c:	b085      	sub	sp, #20
 800515e:	af00      	add	r7, sp, #0
 8005160:	6078      	str	r0, [r7, #4]
 8005162:	460b      	mov	r3, r1
 8005164:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800516a:	78fb      	ldrb	r3, [r7, #3]
 800516c:	015a      	lsls	r2, r3, #5
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	4413      	add	r3, r2
 8005172:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005176:	689b      	ldr	r3, [r3, #8]
 8005178:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005180:	695b      	ldr	r3, [r3, #20]
 8005182:	68ba      	ldr	r2, [r7, #8]
 8005184:	4013      	ands	r3, r2
 8005186:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005188:	68bb      	ldr	r3, [r7, #8]
}
 800518a:	4618      	mov	r0, r3
 800518c:	3714      	adds	r7, #20
 800518e:	46bd      	mov	sp, r7
 8005190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005194:	4770      	bx	lr

08005196 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005196:	b480      	push	{r7}
 8005198:	b087      	sub	sp, #28
 800519a:	af00      	add	r7, sp, #0
 800519c:	6078      	str	r0, [r7, #4]
 800519e:	460b      	mov	r3, r1
 80051a0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80051a6:	697b      	ldr	r3, [r7, #20]
 80051a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051ac:	691b      	ldr	r3, [r3, #16]
 80051ae:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80051b0:	697b      	ldr	r3, [r7, #20]
 80051b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051b8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80051ba:	78fb      	ldrb	r3, [r7, #3]
 80051bc:	f003 030f 	and.w	r3, r3, #15
 80051c0:	68fa      	ldr	r2, [r7, #12]
 80051c2:	fa22 f303 	lsr.w	r3, r2, r3
 80051c6:	01db      	lsls	r3, r3, #7
 80051c8:	b2db      	uxtb	r3, r3
 80051ca:	693a      	ldr	r2, [r7, #16]
 80051cc:	4313      	orrs	r3, r2
 80051ce:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80051d0:	78fb      	ldrb	r3, [r7, #3]
 80051d2:	015a      	lsls	r2, r3, #5
 80051d4:	697b      	ldr	r3, [r7, #20]
 80051d6:	4413      	add	r3, r2
 80051d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051dc:	689b      	ldr	r3, [r3, #8]
 80051de:	693a      	ldr	r2, [r7, #16]
 80051e0:	4013      	ands	r3, r2
 80051e2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80051e4:	68bb      	ldr	r3, [r7, #8]
}
 80051e6:	4618      	mov	r0, r3
 80051e8:	371c      	adds	r7, #28
 80051ea:	46bd      	mov	sp, r7
 80051ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f0:	4770      	bx	lr

080051f2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80051f2:	b480      	push	{r7}
 80051f4:	b083      	sub	sp, #12
 80051f6:	af00      	add	r7, sp, #0
 80051f8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	695b      	ldr	r3, [r3, #20]
 80051fe:	f003 0301 	and.w	r3, r3, #1
}
 8005202:	4618      	mov	r0, r3
 8005204:	370c      	adds	r7, #12
 8005206:	46bd      	mov	sp, r7
 8005208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520c:	4770      	bx	lr

0800520e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800520e:	b480      	push	{r7}
 8005210:	b085      	sub	sp, #20
 8005212:	af00      	add	r7, sp, #0
 8005214:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	68fa      	ldr	r2, [r7, #12]
 8005224:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005228:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800522c:	f023 0307 	bic.w	r3, r3, #7
 8005230:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005238:	685b      	ldr	r3, [r3, #4]
 800523a:	68fa      	ldr	r2, [r7, #12]
 800523c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005240:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005244:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005246:	2300      	movs	r3, #0
}
 8005248:	4618      	mov	r0, r3
 800524a:	3714      	adds	r7, #20
 800524c:	46bd      	mov	sp, r7
 800524e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005252:	4770      	bx	lr

08005254 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005254:	b480      	push	{r7}
 8005256:	b087      	sub	sp, #28
 8005258:	af00      	add	r7, sp, #0
 800525a:	60f8      	str	r0, [r7, #12]
 800525c:	460b      	mov	r3, r1
 800525e:	607a      	str	r2, [r7, #4]
 8005260:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	333c      	adds	r3, #60	; 0x3c
 800526a:	3304      	adds	r3, #4
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005270:	693b      	ldr	r3, [r7, #16]
 8005272:	4a26      	ldr	r2, [pc, #152]	; (800530c <USB_EP0_OutStart+0xb8>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d90a      	bls.n	800528e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005278:	697b      	ldr	r3, [r7, #20]
 800527a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005284:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005288:	d101      	bne.n	800528e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800528a:	2300      	movs	r3, #0
 800528c:	e037      	b.n	80052fe <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800528e:	697b      	ldr	r3, [r7, #20]
 8005290:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005294:	461a      	mov	r2, r3
 8005296:	2300      	movs	r3, #0
 8005298:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800529a:	697b      	ldr	r3, [r7, #20]
 800529c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052a0:	691b      	ldr	r3, [r3, #16]
 80052a2:	697a      	ldr	r2, [r7, #20]
 80052a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80052a8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80052ac:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80052ae:	697b      	ldr	r3, [r7, #20]
 80052b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052b4:	691b      	ldr	r3, [r3, #16]
 80052b6:	697a      	ldr	r2, [r7, #20]
 80052b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80052bc:	f043 0318 	orr.w	r3, r3, #24
 80052c0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80052c2:	697b      	ldr	r3, [r7, #20]
 80052c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052c8:	691b      	ldr	r3, [r3, #16]
 80052ca:	697a      	ldr	r2, [r7, #20]
 80052cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80052d0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80052d4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80052d6:	7afb      	ldrb	r3, [r7, #11]
 80052d8:	2b01      	cmp	r3, #1
 80052da:	d10f      	bne.n	80052fc <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80052dc:	697b      	ldr	r3, [r7, #20]
 80052de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052e2:	461a      	mov	r2, r3
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80052e8:	697b      	ldr	r3, [r7, #20]
 80052ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	697a      	ldr	r2, [r7, #20]
 80052f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80052f6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80052fa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80052fc:	2300      	movs	r3, #0
}
 80052fe:	4618      	mov	r0, r3
 8005300:	371c      	adds	r7, #28
 8005302:	46bd      	mov	sp, r7
 8005304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005308:	4770      	bx	lr
 800530a:	bf00      	nop
 800530c:	4f54300a 	.word	0x4f54300a

08005310 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005310:	b480      	push	{r7}
 8005312:	b085      	sub	sp, #20
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005318:	2300      	movs	r3, #0
 800531a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	3301      	adds	r3, #1
 8005320:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	4a13      	ldr	r2, [pc, #76]	; (8005374 <USB_CoreReset+0x64>)
 8005326:	4293      	cmp	r3, r2
 8005328:	d901      	bls.n	800532e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800532a:	2303      	movs	r3, #3
 800532c:	e01b      	b.n	8005366 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	691b      	ldr	r3, [r3, #16]
 8005332:	2b00      	cmp	r3, #0
 8005334:	daf2      	bge.n	800531c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005336:	2300      	movs	r3, #0
 8005338:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	691b      	ldr	r3, [r3, #16]
 800533e:	f043 0201 	orr.w	r2, r3, #1
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	3301      	adds	r3, #1
 800534a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	4a09      	ldr	r2, [pc, #36]	; (8005374 <USB_CoreReset+0x64>)
 8005350:	4293      	cmp	r3, r2
 8005352:	d901      	bls.n	8005358 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005354:	2303      	movs	r3, #3
 8005356:	e006      	b.n	8005366 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	691b      	ldr	r3, [r3, #16]
 800535c:	f003 0301 	and.w	r3, r3, #1
 8005360:	2b01      	cmp	r3, #1
 8005362:	d0f0      	beq.n	8005346 <USB_CoreReset+0x36>

  return HAL_OK;
 8005364:	2300      	movs	r3, #0
}
 8005366:	4618      	mov	r0, r3
 8005368:	3714      	adds	r7, #20
 800536a:	46bd      	mov	sp, r7
 800536c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005370:	4770      	bx	lr
 8005372:	bf00      	nop
 8005374:	00030d40 	.word	0x00030d40

08005378 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b084      	sub	sp, #16
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
 8005380:	460b      	mov	r3, r1
 8005382:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = (USBD_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8005384:	2010      	movs	r0, #16
 8005386:	f002 f93d 	bl	8007604 <USBD_static_malloc>
 800538a:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d109      	bne.n	80053a6 <USBD_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	32b0      	adds	r2, #176	; 0xb0
 800539c:	2100      	movs	r1, #0
 800539e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80053a2:	2302      	movs	r3, #2
 80053a4:	e048      	b.n	8005438 <USBD_HID_Init+0xc0>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	32b0      	adds	r2, #176	; 0xb0
 80053b0:	68f9      	ldr	r1, [r7, #12]
 80053b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	32b0      	adds	r2, #176	; 0xb0
 80053c0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	7c1b      	ldrb	r3, [r3, #16]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d10d      	bne.n	80053ee <USBD_HID_Init+0x76>
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_HS_BINTERVAL;
 80053d2:	4b1b      	ldr	r3, [pc, #108]	; (8005440 <USBD_HID_Init+0xc8>)
 80053d4:	781b      	ldrb	r3, [r3, #0]
 80053d6:	f003 020f 	and.w	r2, r3, #15
 80053da:	6879      	ldr	r1, [r7, #4]
 80053dc:	4613      	mov	r3, r2
 80053de:	009b      	lsls	r3, r3, #2
 80053e0:	4413      	add	r3, r2
 80053e2:	009b      	lsls	r3, r3, #2
 80053e4:	440b      	add	r3, r1
 80053e6:	3326      	adds	r3, #38	; 0x26
 80053e8:	2207      	movs	r2, #7
 80053ea:	801a      	strh	r2, [r3, #0]
 80053ec:	e00c      	b.n	8005408 <USBD_HID_Init+0x90>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_FS_BINTERVAL;
 80053ee:	4b14      	ldr	r3, [pc, #80]	; (8005440 <USBD_HID_Init+0xc8>)
 80053f0:	781b      	ldrb	r3, [r3, #0]
 80053f2:	f003 020f 	and.w	r2, r3, #15
 80053f6:	6879      	ldr	r1, [r7, #4]
 80053f8:	4613      	mov	r3, r2
 80053fa:	009b      	lsls	r3, r3, #2
 80053fc:	4413      	add	r3, r2
 80053fe:	009b      	lsls	r3, r3, #2
 8005400:	440b      	add	r3, r1
 8005402:	3326      	adds	r3, #38	; 0x26
 8005404:	220a      	movs	r2, #10
 8005406:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HIDInEpAdd, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8005408:	4b0d      	ldr	r3, [pc, #52]	; (8005440 <USBD_HID_Init+0xc8>)
 800540a:	7819      	ldrb	r1, [r3, #0]
 800540c:	2304      	movs	r3, #4
 800540e:	2203      	movs	r2, #3
 8005410:	6878      	ldr	r0, [r7, #4]
 8005412:	f001 ffe6 	bl	80073e2 <USBD_LL_OpenEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 1U;
 8005416:	4b0a      	ldr	r3, [pc, #40]	; (8005440 <USBD_HID_Init+0xc8>)
 8005418:	781b      	ldrb	r3, [r3, #0]
 800541a:	f003 020f 	and.w	r2, r3, #15
 800541e:	6879      	ldr	r1, [r7, #4]
 8005420:	4613      	mov	r3, r2
 8005422:	009b      	lsls	r3, r3, #2
 8005424:	4413      	add	r3, r2
 8005426:	009b      	lsls	r3, r3, #2
 8005428:	440b      	add	r3, r1
 800542a:	3324      	adds	r3, #36	; 0x24
 800542c:	2201      	movs	r2, #1
 800542e:	801a      	strh	r2, [r3, #0]

  hhid->state = HID_IDLE;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	2200      	movs	r2, #0
 8005434:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8005436:	2300      	movs	r3, #0
}
 8005438:	4618      	mov	r0, r3
 800543a:	3710      	adds	r7, #16
 800543c:	46bd      	mov	sp, r7
 800543e:	bd80      	pop	{r7, pc}
 8005440:	200000ca 	.word	0x200000ca

08005444 <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005444:	b580      	push	{r7, lr}
 8005446:	b082      	sub	sp, #8
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
 800544c:	460b      	mov	r3, r1
 800544e:	70fb      	strb	r3, [r7, #3]
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HIDInEpAdd);
 8005450:	4b1f      	ldr	r3, [pc, #124]	; (80054d0 <USBD_HID_DeInit+0x8c>)
 8005452:	781b      	ldrb	r3, [r3, #0]
 8005454:	4619      	mov	r1, r3
 8005456:	6878      	ldr	r0, [r7, #4]
 8005458:	f001 ffe9 	bl	800742e <USBD_LL_CloseEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 0U;
 800545c:	4b1c      	ldr	r3, [pc, #112]	; (80054d0 <USBD_HID_DeInit+0x8c>)
 800545e:	781b      	ldrb	r3, [r3, #0]
 8005460:	f003 020f 	and.w	r2, r3, #15
 8005464:	6879      	ldr	r1, [r7, #4]
 8005466:	4613      	mov	r3, r2
 8005468:	009b      	lsls	r3, r3, #2
 800546a:	4413      	add	r3, r2
 800546c:	009b      	lsls	r3, r3, #2
 800546e:	440b      	add	r3, r1
 8005470:	3324      	adds	r3, #36	; 0x24
 8005472:	2200      	movs	r2, #0
 8005474:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = 0U;
 8005476:	4b16      	ldr	r3, [pc, #88]	; (80054d0 <USBD_HID_DeInit+0x8c>)
 8005478:	781b      	ldrb	r3, [r3, #0]
 800547a:	f003 020f 	and.w	r2, r3, #15
 800547e:	6879      	ldr	r1, [r7, #4]
 8005480:	4613      	mov	r3, r2
 8005482:	009b      	lsls	r3, r3, #2
 8005484:	4413      	add	r3, r2
 8005486:	009b      	lsls	r3, r3, #2
 8005488:	440b      	add	r3, r1
 800548a:	3326      	adds	r3, #38	; 0x26
 800548c:	2200      	movs	r2, #0
 800548e:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	32b0      	adds	r2, #176	; 0xb0
 800549a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d011      	beq.n	80054c6 <USBD_HID_DeInit+0x82>
  {
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	32b0      	adds	r2, #176	; 0xb0
 80054ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054b0:	4618      	mov	r0, r3
 80054b2:	f002 f8b5 	bl	8007620 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	32b0      	adds	r2, #176	; 0xb0
 80054c0:	2100      	movs	r1, #0
 80054c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return (uint8_t)USBD_OK;
 80054c6:	2300      	movs	r3, #0
}
 80054c8:	4618      	mov	r0, r3
 80054ca:	3708      	adds	r7, #8
 80054cc:	46bd      	mov	sp, r7
 80054ce:	bd80      	pop	{r7, pc}
 80054d0:	200000ca 	.word	0x200000ca

080054d4 <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b086      	sub	sp, #24
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
 80054dc:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	32b0      	adds	r2, #176	; 0xb0
 80054e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054ec:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 80054ee:	2300      	movs	r3, #0
 80054f0:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 80054f2:	2300      	movs	r3, #0
 80054f4:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d101      	bne.n	8005500 <USBD_HID_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 80054fc:	2303      	movs	r3, #3
 80054fe:	e0e8      	b.n	80056d2 <USBD_HID_Setup+0x1fe>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	781b      	ldrb	r3, [r3, #0]
 8005504:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005508:	2b00      	cmp	r3, #0
 800550a:	d046      	beq.n	800559a <USBD_HID_Setup+0xc6>
 800550c:	2b20      	cmp	r3, #32
 800550e:	f040 80d8 	bne.w	80056c2 <USBD_HID_Setup+0x1ee>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	785b      	ldrb	r3, [r3, #1]
 8005516:	3b02      	subs	r3, #2
 8005518:	2b09      	cmp	r3, #9
 800551a:	d836      	bhi.n	800558a <USBD_HID_Setup+0xb6>
 800551c:	a201      	add	r2, pc, #4	; (adr r2, 8005524 <USBD_HID_Setup+0x50>)
 800551e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005522:	bf00      	nop
 8005524:	0800557b 	.word	0x0800557b
 8005528:	0800555b 	.word	0x0800555b
 800552c:	0800558b 	.word	0x0800558b
 8005530:	0800558b 	.word	0x0800558b
 8005534:	0800558b 	.word	0x0800558b
 8005538:	0800558b 	.word	0x0800558b
 800553c:	0800558b 	.word	0x0800558b
 8005540:	0800558b 	.word	0x0800558b
 8005544:	08005569 	.word	0x08005569
 8005548:	0800554d 	.word	0x0800554d
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	885b      	ldrh	r3, [r3, #2]
 8005550:	b2db      	uxtb	r3, r3
 8005552:	461a      	mov	r2, r3
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	601a      	str	r2, [r3, #0]
          break;
 8005558:	e01e      	b.n	8005598 <USBD_HID_Setup+0xc4>

        case HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	2201      	movs	r2, #1
 800555e:	4619      	mov	r1, r3
 8005560:	6878      	ldr	r0, [r7, #4]
 8005562:	f001 fbe9 	bl	8006d38 <USBD_CtlSendData>
          break;
 8005566:	e017      	b.n	8005598 <USBD_HID_Setup+0xc4>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	885b      	ldrh	r3, [r3, #2]
 800556c:	0a1b      	lsrs	r3, r3, #8
 800556e:	b29b      	uxth	r3, r3
 8005570:	b2db      	uxtb	r3, r3
 8005572:	461a      	mov	r2, r3
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	605a      	str	r2, [r3, #4]
          break;
 8005578:	e00e      	b.n	8005598 <USBD_HID_Setup+0xc4>

        case HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	3304      	adds	r3, #4
 800557e:	2201      	movs	r2, #1
 8005580:	4619      	mov	r1, r3
 8005582:	6878      	ldr	r0, [r7, #4]
 8005584:	f001 fbd8 	bl	8006d38 <USBD_CtlSendData>
          break;
 8005588:	e006      	b.n	8005598 <USBD_HID_Setup+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800558a:	6839      	ldr	r1, [r7, #0]
 800558c:	6878      	ldr	r0, [r7, #4]
 800558e:	f001 fb62 	bl	8006c56 <USBD_CtlError>
          ret = USBD_FAIL;
 8005592:	2303      	movs	r3, #3
 8005594:	75fb      	strb	r3, [r7, #23]
          break;
 8005596:	bf00      	nop
      }
      break;
 8005598:	e09a      	b.n	80056d0 <USBD_HID_Setup+0x1fc>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	785b      	ldrb	r3, [r3, #1]
 800559e:	2b0b      	cmp	r3, #11
 80055a0:	f200 8086 	bhi.w	80056b0 <USBD_HID_Setup+0x1dc>
 80055a4:	a201      	add	r2, pc, #4	; (adr r2, 80055ac <USBD_HID_Setup+0xd8>)
 80055a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055aa:	bf00      	nop
 80055ac:	080055dd 	.word	0x080055dd
 80055b0:	080056bf 	.word	0x080056bf
 80055b4:	080056b1 	.word	0x080056b1
 80055b8:	080056b1 	.word	0x080056b1
 80055bc:	080056b1 	.word	0x080056b1
 80055c0:	080056b1 	.word	0x080056b1
 80055c4:	08005607 	.word	0x08005607
 80055c8:	080056b1 	.word	0x080056b1
 80055cc:	080056b1 	.word	0x080056b1
 80055d0:	080056b1 	.word	0x080056b1
 80055d4:	0800565f 	.word	0x0800565f
 80055d8:	08005689 	.word	0x08005689
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80055e2:	b2db      	uxtb	r3, r3
 80055e4:	2b03      	cmp	r3, #3
 80055e6:	d107      	bne.n	80055f8 <USBD_HID_Setup+0x124>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80055e8:	f107 030a 	add.w	r3, r7, #10
 80055ec:	2202      	movs	r2, #2
 80055ee:	4619      	mov	r1, r3
 80055f0:	6878      	ldr	r0, [r7, #4]
 80055f2:	f001 fba1 	bl	8006d38 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80055f6:	e063      	b.n	80056c0 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 80055f8:	6839      	ldr	r1, [r7, #0]
 80055fa:	6878      	ldr	r0, [r7, #4]
 80055fc:	f001 fb2b 	bl	8006c56 <USBD_CtlError>
            ret = USBD_FAIL;
 8005600:	2303      	movs	r3, #3
 8005602:	75fb      	strb	r3, [r7, #23]
          break;
 8005604:	e05c      	b.n	80056c0 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	885b      	ldrh	r3, [r3, #2]
 800560a:	0a1b      	lsrs	r3, r3, #8
 800560c:	b29b      	uxth	r3, r3
 800560e:	2b22      	cmp	r3, #34	; 0x22
 8005610:	d108      	bne.n	8005624 <USBD_HID_Setup+0x150>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	88db      	ldrh	r3, [r3, #6]
 8005616:	2b4a      	cmp	r3, #74	; 0x4a
 8005618:	bf28      	it	cs
 800561a:	234a      	movcs	r3, #74	; 0x4a
 800561c:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 800561e:	4b2f      	ldr	r3, [pc, #188]	; (80056dc <USBD_HID_Setup+0x208>)
 8005620:	613b      	str	r3, [r7, #16]
 8005622:	e015      	b.n	8005650 <USBD_HID_Setup+0x17c>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	885b      	ldrh	r3, [r3, #2]
 8005628:	0a1b      	lsrs	r3, r3, #8
 800562a:	b29b      	uxth	r3, r3
 800562c:	2b21      	cmp	r3, #33	; 0x21
 800562e:	d108      	bne.n	8005642 <USBD_HID_Setup+0x16e>
          {
            pbuf = USBD_HID_Desc;
 8005630:	4b2b      	ldr	r3, [pc, #172]	; (80056e0 <USBD_HID_Setup+0x20c>)
 8005632:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	88db      	ldrh	r3, [r3, #6]
 8005638:	2b09      	cmp	r3, #9
 800563a:	bf28      	it	cs
 800563c:	2309      	movcs	r3, #9
 800563e:	82bb      	strh	r3, [r7, #20]
 8005640:	e006      	b.n	8005650 <USBD_HID_Setup+0x17c>
          }
          else
          {
            USBD_CtlError(pdev, req);
 8005642:	6839      	ldr	r1, [r7, #0]
 8005644:	6878      	ldr	r0, [r7, #4]
 8005646:	f001 fb06 	bl	8006c56 <USBD_CtlError>
            ret = USBD_FAIL;
 800564a:	2303      	movs	r3, #3
 800564c:	75fb      	strb	r3, [r7, #23]
            break;
 800564e:	e037      	b.n	80056c0 <USBD_HID_Setup+0x1ec>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 8005650:	8abb      	ldrh	r3, [r7, #20]
 8005652:	461a      	mov	r2, r3
 8005654:	6939      	ldr	r1, [r7, #16]
 8005656:	6878      	ldr	r0, [r7, #4]
 8005658:	f001 fb6e 	bl	8006d38 <USBD_CtlSendData>
          break;
 800565c:	e030      	b.n	80056c0 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005664:	b2db      	uxtb	r3, r3
 8005666:	2b03      	cmp	r3, #3
 8005668:	d107      	bne.n	800567a <USBD_HID_Setup+0x1a6>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	3308      	adds	r3, #8
 800566e:	2201      	movs	r2, #1
 8005670:	4619      	mov	r1, r3
 8005672:	6878      	ldr	r0, [r7, #4]
 8005674:	f001 fb60 	bl	8006d38 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005678:	e022      	b.n	80056c0 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 800567a:	6839      	ldr	r1, [r7, #0]
 800567c:	6878      	ldr	r0, [r7, #4]
 800567e:	f001 faea 	bl	8006c56 <USBD_CtlError>
            ret = USBD_FAIL;
 8005682:	2303      	movs	r3, #3
 8005684:	75fb      	strb	r3, [r7, #23]
          break;
 8005686:	e01b      	b.n	80056c0 <USBD_HID_Setup+0x1ec>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800568e:	b2db      	uxtb	r3, r3
 8005690:	2b03      	cmp	r3, #3
 8005692:	d106      	bne.n	80056a2 <USBD_HID_Setup+0x1ce>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	885b      	ldrh	r3, [r3, #2]
 8005698:	b2db      	uxtb	r3, r3
 800569a:	461a      	mov	r2, r3
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80056a0:	e00e      	b.n	80056c0 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 80056a2:	6839      	ldr	r1, [r7, #0]
 80056a4:	6878      	ldr	r0, [r7, #4]
 80056a6:	f001 fad6 	bl	8006c56 <USBD_CtlError>
            ret = USBD_FAIL;
 80056aa:	2303      	movs	r3, #3
 80056ac:	75fb      	strb	r3, [r7, #23]
          break;
 80056ae:	e007      	b.n	80056c0 <USBD_HID_Setup+0x1ec>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80056b0:	6839      	ldr	r1, [r7, #0]
 80056b2:	6878      	ldr	r0, [r7, #4]
 80056b4:	f001 facf 	bl	8006c56 <USBD_CtlError>
          ret = USBD_FAIL;
 80056b8:	2303      	movs	r3, #3
 80056ba:	75fb      	strb	r3, [r7, #23]
          break;
 80056bc:	e000      	b.n	80056c0 <USBD_HID_Setup+0x1ec>
          break;
 80056be:	bf00      	nop
      }
      break;
 80056c0:	e006      	b.n	80056d0 <USBD_HID_Setup+0x1fc>

    default:
      USBD_CtlError(pdev, req);
 80056c2:	6839      	ldr	r1, [r7, #0]
 80056c4:	6878      	ldr	r0, [r7, #4]
 80056c6:	f001 fac6 	bl	8006c56 <USBD_CtlError>
      ret = USBD_FAIL;
 80056ca:	2303      	movs	r3, #3
 80056cc:	75fb      	strb	r3, [r7, #23]
      break;
 80056ce:	bf00      	nop
  }

  return (uint8_t)ret;
 80056d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80056d2:	4618      	mov	r0, r3
 80056d4:	3718      	adds	r7, #24
 80056d6:	46bd      	mov	sp, r7
 80056d8:	bd80      	pop	{r7, pc}
 80056da:	bf00      	nop
 80056dc:	20000080 	.word	0x20000080
 80056e0:	20000068 	.word	0x20000068

080056e4 <USBD_HID_SendReport>:
  * @param  pdev: device instance
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b086      	sub	sp, #24
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	60f8      	str	r0, [r7, #12]
 80056ec:	60b9      	str	r1, [r7, #8]
 80056ee:	4613      	mov	r3, r2
 80056f0:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	32b0      	adds	r2, #176	; 0xb0
 80056fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005700:	617b      	str	r3, [r7, #20]

  if (hhid == NULL)
 8005702:	697b      	ldr	r3, [r7, #20]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d101      	bne.n	800570c <USBD_HID_SendReport+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8005708:	2303      	movs	r3, #3
 800570a:	e014      	b.n	8005736 <USBD_HID_SendReport+0x52>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005712:	b2db      	uxtb	r3, r3
 8005714:	2b03      	cmp	r3, #3
 8005716:	d10d      	bne.n	8005734 <USBD_HID_SendReport+0x50>
  {
    if (hhid->state == HID_IDLE)
 8005718:	697b      	ldr	r3, [r7, #20]
 800571a:	7b1b      	ldrb	r3, [r3, #12]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d109      	bne.n	8005734 <USBD_HID_SendReport+0x50>
    {
      hhid->state = HID_BUSY;
 8005720:	697b      	ldr	r3, [r7, #20]
 8005722:	2201      	movs	r2, #1
 8005724:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HIDInEpAdd, report, len);
 8005726:	4b06      	ldr	r3, [pc, #24]	; (8005740 <USBD_HID_SendReport+0x5c>)
 8005728:	7819      	ldrb	r1, [r3, #0]
 800572a:	88fb      	ldrh	r3, [r7, #6]
 800572c:	68ba      	ldr	r2, [r7, #8]
 800572e:	68f8      	ldr	r0, [r7, #12]
 8005730:	f001 ff25 	bl	800757e <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 8005734:	2300      	movs	r3, #0
}
 8005736:	4618      	mov	r0, r3
 8005738:	3718      	adds	r7, #24
 800573a:	46bd      	mov	sp, r7
 800573c:	bd80      	pop	{r7, pc}
 800573e:	bf00      	nop
 8005740:	200000ca 	.word	0x200000ca

08005744 <USBD_HID_GetPollingInterval>:
  *         return polling interval from endpoint descriptor
  * @param  pdev: device instance
  * @retval polling interval
  */
uint32_t USBD_HID_GetPollingInterval(USBD_HandleTypeDef *pdev)
{
 8005744:	b480      	push	{r7}
 8005746:	b085      	sub	sp, #20
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
  uint32_t polling_interval;

  /* HIGH-speed endpoints */
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	7c1b      	ldrb	r3, [r3, #16]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d102      	bne.n	800575a <USBD_HID_GetPollingInterval+0x16>
  {
    /* Sets the data transfer polling interval for high speed transfers.
     Values between 1..16 are allowed. Values correspond to interval
     of 2 ^ (bInterval-1). This option (8 ms, corresponds to HID_HS_BINTERVAL */
    polling_interval = (((1U << (HID_HS_BINTERVAL - 1U))) / 8U);
 8005754:	2308      	movs	r3, #8
 8005756:	60fb      	str	r3, [r7, #12]
 8005758:	e001      	b.n	800575e <USBD_HID_GetPollingInterval+0x1a>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    /* Sets the data transfer polling interval for low and full
    speed transfers */
    polling_interval =  HID_FS_BINTERVAL;
 800575a:	230a      	movs	r3, #10
 800575c:	60fb      	str	r3, [r7, #12]
  }

  return ((uint32_t)(polling_interval));
 800575e:	68fb      	ldr	r3, [r7, #12]
}
 8005760:	4618      	mov	r0, r3
 8005762:	3714      	adds	r7, #20
 8005764:	46bd      	mov	sp, r7
 8005766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576a:	4770      	bx	lr

0800576c <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b084      	sub	sp, #16
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8005774:	2181      	movs	r1, #129	; 0x81
 8005776:	4809      	ldr	r0, [pc, #36]	; (800579c <USBD_HID_GetFSCfgDesc+0x30>)
 8005778:	f000 fc35 	bl	8005fe6 <USBD_GetEpDesc>
 800577c:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d002      	beq.n	800578a <USBD_HID_GetFSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	220a      	movs	r2, #10
 8005788:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2222      	movs	r2, #34	; 0x22
 800578e:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8005790:	4b02      	ldr	r3, [pc, #8]	; (800579c <USBD_HID_GetFSCfgDesc+0x30>)
}
 8005792:	4618      	mov	r0, r3
 8005794:	3710      	adds	r7, #16
 8005796:	46bd      	mov	sp, r7
 8005798:	bd80      	pop	{r7, pc}
 800579a:	bf00      	nop
 800579c:	20000044 	.word	0x20000044

080057a0 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b084      	sub	sp, #16
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 80057a8:	2181      	movs	r1, #129	; 0x81
 80057aa:	4809      	ldr	r0, [pc, #36]	; (80057d0 <USBD_HID_GetHSCfgDesc+0x30>)
 80057ac:	f000 fc1b 	bl	8005fe6 <USBD_GetEpDesc>
 80057b0:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d002      	beq.n	80057be <USBD_HID_GetHSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_HS_BINTERVAL;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	2207      	movs	r2, #7
 80057bc:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2222      	movs	r2, #34	; 0x22
 80057c2:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 80057c4:	4b02      	ldr	r3, [pc, #8]	; (80057d0 <USBD_HID_GetHSCfgDesc+0x30>)
}
 80057c6:	4618      	mov	r0, r3
 80057c8:	3710      	adds	r7, #16
 80057ca:	46bd      	mov	sp, r7
 80057cc:	bd80      	pop	{r7, pc}
 80057ce:	bf00      	nop
 80057d0:	20000044 	.word	0x20000044

080057d4 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b084      	sub	sp, #16
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 80057dc:	2181      	movs	r1, #129	; 0x81
 80057de:	4809      	ldr	r0, [pc, #36]	; (8005804 <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
 80057e0:	f000 fc01 	bl	8005fe6 <USBD_GetEpDesc>
 80057e4:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d002      	beq.n	80057f2 <USBD_HID_GetOtherSpeedCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	220a      	movs	r2, #10
 80057f0:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	2222      	movs	r2, #34	; 0x22
 80057f6:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 80057f8:	4b02      	ldr	r3, [pc, #8]	; (8005804 <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
}
 80057fa:	4618      	mov	r0, r3
 80057fc:	3710      	adds	r7, #16
 80057fe:	46bd      	mov	sp, r7
 8005800:	bd80      	pop	{r7, pc}
 8005802:	bf00      	nop
 8005804:	20000044 	.word	0x20000044

08005808 <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005808:	b480      	push	{r7}
 800580a:	b083      	sub	sp, #12
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
 8005810:	460b      	mov	r3, r1
 8005812:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = HID_IDLE;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	32b0      	adds	r2, #176	; 0xb0
 800581e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005822:	2200      	movs	r2, #0
 8005824:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8005826:	2300      	movs	r3, #0
}
 8005828:	4618      	mov	r0, r3
 800582a:	370c      	adds	r7, #12
 800582c:	46bd      	mov	sp, r7
 800582e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005832:	4770      	bx	lr

08005834 <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8005834:	b480      	push	{r7}
 8005836:	b083      	sub	sp, #12
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	220a      	movs	r2, #10
 8005840:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 8005842:	4b03      	ldr	r3, [pc, #12]	; (8005850 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8005844:	4618      	mov	r0, r3
 8005846:	370c      	adds	r7, #12
 8005848:	46bd      	mov	sp, r7
 800584a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584e:	4770      	bx	lr
 8005850:	20000074 	.word	0x20000074

08005854 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005854:	b580      	push	{r7, lr}
 8005856:	b086      	sub	sp, #24
 8005858:	af00      	add	r7, sp, #0
 800585a:	60f8      	str	r0, [r7, #12]
 800585c:	60b9      	str	r1, [r7, #8]
 800585e:	4613      	mov	r3, r2
 8005860:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d101      	bne.n	800586c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005868:	2303      	movs	r3, #3
 800586a:	e01f      	b.n	80058ac <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	2200      	movs	r2, #0
 8005870:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	2200      	movs	r2, #0
 8005878:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	2200      	movs	r2, #0
 8005880:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005884:	68bb      	ldr	r3, [r7, #8]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d003      	beq.n	8005892 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	68ba      	ldr	r2, [r7, #8]
 800588e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	2201      	movs	r2, #1
 8005896:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	79fa      	ldrb	r2, [r7, #7]
 800589e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80058a0:	68f8      	ldr	r0, [r7, #12]
 80058a2:	f001 fd37 	bl	8007314 <USBD_LL_Init>
 80058a6:	4603      	mov	r3, r0
 80058a8:	75fb      	strb	r3, [r7, #23]

  return ret;
 80058aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80058ac:	4618      	mov	r0, r3
 80058ae:	3718      	adds	r7, #24
 80058b0:	46bd      	mov	sp, r7
 80058b2:	bd80      	pop	{r7, pc}

080058b4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b084      	sub	sp, #16
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
 80058bc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80058be:	2300      	movs	r3, #0
 80058c0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d101      	bne.n	80058cc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80058c8:	2303      	movs	r3, #3
 80058ca:	e025      	b.n	8005918 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	683a      	ldr	r2, [r7, #0]
 80058d0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	32ae      	adds	r2, #174	; 0xae
 80058de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d00f      	beq.n	8005908 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	32ae      	adds	r2, #174	; 0xae
 80058f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058f8:	f107 020e 	add.w	r2, r7, #14
 80058fc:	4610      	mov	r0, r2
 80058fe:	4798      	blx	r3
 8005900:	4602      	mov	r2, r0
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800590e:	1c5a      	adds	r2, r3, #1
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8005916:	2300      	movs	r3, #0
}
 8005918:	4618      	mov	r0, r3
 800591a:	3710      	adds	r7, #16
 800591c:	46bd      	mov	sp, r7
 800591e:	bd80      	pop	{r7, pc}

08005920 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005920:	b580      	push	{r7, lr}
 8005922:	b082      	sub	sp, #8
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005928:	6878      	ldr	r0, [r7, #4]
 800592a:	f001 fd3f 	bl	80073ac <USBD_LL_Start>
 800592e:	4603      	mov	r3, r0
}
 8005930:	4618      	mov	r0, r3
 8005932:	3708      	adds	r7, #8
 8005934:	46bd      	mov	sp, r7
 8005936:	bd80      	pop	{r7, pc}

08005938 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8005938:	b480      	push	{r7}
 800593a:	b083      	sub	sp, #12
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005940:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8005942:	4618      	mov	r0, r3
 8005944:	370c      	adds	r7, #12
 8005946:	46bd      	mov	sp, r7
 8005948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594c:	4770      	bx	lr

0800594e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800594e:	b580      	push	{r7, lr}
 8005950:	b084      	sub	sp, #16
 8005952:	af00      	add	r7, sp, #0
 8005954:	6078      	str	r0, [r7, #4]
 8005956:	460b      	mov	r3, r1
 8005958:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800595a:	2300      	movs	r3, #0
 800595c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005964:	2b00      	cmp	r3, #0
 8005966:	d009      	beq.n	800597c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	78fa      	ldrb	r2, [r7, #3]
 8005972:	4611      	mov	r1, r2
 8005974:	6878      	ldr	r0, [r7, #4]
 8005976:	4798      	blx	r3
 8005978:	4603      	mov	r3, r0
 800597a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800597c:	7bfb      	ldrb	r3, [r7, #15]
}
 800597e:	4618      	mov	r0, r3
 8005980:	3710      	adds	r7, #16
 8005982:	46bd      	mov	sp, r7
 8005984:	bd80      	pop	{r7, pc}

08005986 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005986:	b580      	push	{r7, lr}
 8005988:	b084      	sub	sp, #16
 800598a:	af00      	add	r7, sp, #0
 800598c:	6078      	str	r0, [r7, #4]
 800598e:	460b      	mov	r3, r1
 8005990:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005992:	2300      	movs	r3, #0
 8005994:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800599c:	685b      	ldr	r3, [r3, #4]
 800599e:	78fa      	ldrb	r2, [r7, #3]
 80059a0:	4611      	mov	r1, r2
 80059a2:	6878      	ldr	r0, [r7, #4]
 80059a4:	4798      	blx	r3
 80059a6:	4603      	mov	r3, r0
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d001      	beq.n	80059b0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80059ac:	2303      	movs	r3, #3
 80059ae:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80059b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80059b2:	4618      	mov	r0, r3
 80059b4:	3710      	adds	r7, #16
 80059b6:	46bd      	mov	sp, r7
 80059b8:	bd80      	pop	{r7, pc}

080059ba <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80059ba:	b580      	push	{r7, lr}
 80059bc:	b084      	sub	sp, #16
 80059be:	af00      	add	r7, sp, #0
 80059c0:	6078      	str	r0, [r7, #4]
 80059c2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80059ca:	6839      	ldr	r1, [r7, #0]
 80059cc:	4618      	mov	r0, r3
 80059ce:	f001 f908 	bl	8006be2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2201      	movs	r2, #1
 80059d6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80059e0:	461a      	mov	r2, r3
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80059ee:	f003 031f 	and.w	r3, r3, #31
 80059f2:	2b02      	cmp	r3, #2
 80059f4:	d01a      	beq.n	8005a2c <USBD_LL_SetupStage+0x72>
 80059f6:	2b02      	cmp	r3, #2
 80059f8:	d822      	bhi.n	8005a40 <USBD_LL_SetupStage+0x86>
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d002      	beq.n	8005a04 <USBD_LL_SetupStage+0x4a>
 80059fe:	2b01      	cmp	r3, #1
 8005a00:	d00a      	beq.n	8005a18 <USBD_LL_SetupStage+0x5e>
 8005a02:	e01d      	b.n	8005a40 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005a0a:	4619      	mov	r1, r3
 8005a0c:	6878      	ldr	r0, [r7, #4]
 8005a0e:	f000 fb5f 	bl	80060d0 <USBD_StdDevReq>
 8005a12:	4603      	mov	r3, r0
 8005a14:	73fb      	strb	r3, [r7, #15]
      break;
 8005a16:	e020      	b.n	8005a5a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005a1e:	4619      	mov	r1, r3
 8005a20:	6878      	ldr	r0, [r7, #4]
 8005a22:	f000 fbc7 	bl	80061b4 <USBD_StdItfReq>
 8005a26:	4603      	mov	r3, r0
 8005a28:	73fb      	strb	r3, [r7, #15]
      break;
 8005a2a:	e016      	b.n	8005a5a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005a32:	4619      	mov	r1, r3
 8005a34:	6878      	ldr	r0, [r7, #4]
 8005a36:	f000 fc29 	bl	800628c <USBD_StdEPReq>
 8005a3a:	4603      	mov	r3, r0
 8005a3c:	73fb      	strb	r3, [r7, #15]
      break;
 8005a3e:	e00c      	b.n	8005a5a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005a46:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005a4a:	b2db      	uxtb	r3, r3
 8005a4c:	4619      	mov	r1, r3
 8005a4e:	6878      	ldr	r0, [r7, #4]
 8005a50:	f001 fd0c 	bl	800746c <USBD_LL_StallEP>
 8005a54:	4603      	mov	r3, r0
 8005a56:	73fb      	strb	r3, [r7, #15]
      break;
 8005a58:	bf00      	nop
  }

  return ret;
 8005a5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	3710      	adds	r7, #16
 8005a60:	46bd      	mov	sp, r7
 8005a62:	bd80      	pop	{r7, pc}

08005a64 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b086      	sub	sp, #24
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	60f8      	str	r0, [r7, #12]
 8005a6c:	460b      	mov	r3, r1
 8005a6e:	607a      	str	r2, [r7, #4]
 8005a70:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8005a72:	2300      	movs	r3, #0
 8005a74:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8005a76:	7afb      	ldrb	r3, [r7, #11]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d16e      	bne.n	8005b5a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005a82:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005a8a:	2b03      	cmp	r3, #3
 8005a8c:	f040 8098 	bne.w	8005bc0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8005a90:	693b      	ldr	r3, [r7, #16]
 8005a92:	689a      	ldr	r2, [r3, #8]
 8005a94:	693b      	ldr	r3, [r7, #16]
 8005a96:	68db      	ldr	r3, [r3, #12]
 8005a98:	429a      	cmp	r2, r3
 8005a9a:	d913      	bls.n	8005ac4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8005a9c:	693b      	ldr	r3, [r7, #16]
 8005a9e:	689a      	ldr	r2, [r3, #8]
 8005aa0:	693b      	ldr	r3, [r7, #16]
 8005aa2:	68db      	ldr	r3, [r3, #12]
 8005aa4:	1ad2      	subs	r2, r2, r3
 8005aa6:	693b      	ldr	r3, [r7, #16]
 8005aa8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005aaa:	693b      	ldr	r3, [r7, #16]
 8005aac:	68da      	ldr	r2, [r3, #12]
 8005aae:	693b      	ldr	r3, [r7, #16]
 8005ab0:	689b      	ldr	r3, [r3, #8]
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	bf28      	it	cs
 8005ab6:	4613      	movcs	r3, r2
 8005ab8:	461a      	mov	r2, r3
 8005aba:	6879      	ldr	r1, [r7, #4]
 8005abc:	68f8      	ldr	r0, [r7, #12]
 8005abe:	f001 f967 	bl	8006d90 <USBD_CtlContinueRx>
 8005ac2:	e07d      	b.n	8005bc0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005aca:	f003 031f 	and.w	r3, r3, #31
 8005ace:	2b02      	cmp	r3, #2
 8005ad0:	d014      	beq.n	8005afc <USBD_LL_DataOutStage+0x98>
 8005ad2:	2b02      	cmp	r3, #2
 8005ad4:	d81d      	bhi.n	8005b12 <USBD_LL_DataOutStage+0xae>
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d002      	beq.n	8005ae0 <USBD_LL_DataOutStage+0x7c>
 8005ada:	2b01      	cmp	r3, #1
 8005adc:	d003      	beq.n	8005ae6 <USBD_LL_DataOutStage+0x82>
 8005ade:	e018      	b.n	8005b12 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	75bb      	strb	r3, [r7, #22]
            break;
 8005ae4:	e018      	b.n	8005b18 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005aec:	b2db      	uxtb	r3, r3
 8005aee:	4619      	mov	r1, r3
 8005af0:	68f8      	ldr	r0, [r7, #12]
 8005af2:	f000 fa5e 	bl	8005fb2 <USBD_CoreFindIF>
 8005af6:	4603      	mov	r3, r0
 8005af8:	75bb      	strb	r3, [r7, #22]
            break;
 8005afa:	e00d      	b.n	8005b18 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005b02:	b2db      	uxtb	r3, r3
 8005b04:	4619      	mov	r1, r3
 8005b06:	68f8      	ldr	r0, [r7, #12]
 8005b08:	f000 fa60 	bl	8005fcc <USBD_CoreFindEP>
 8005b0c:	4603      	mov	r3, r0
 8005b0e:	75bb      	strb	r3, [r7, #22]
            break;
 8005b10:	e002      	b.n	8005b18 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8005b12:	2300      	movs	r3, #0
 8005b14:	75bb      	strb	r3, [r7, #22]
            break;
 8005b16:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8005b18:	7dbb      	ldrb	r3, [r7, #22]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d119      	bne.n	8005b52 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b24:	b2db      	uxtb	r3, r3
 8005b26:	2b03      	cmp	r3, #3
 8005b28:	d113      	bne.n	8005b52 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8005b2a:	7dba      	ldrb	r2, [r7, #22]
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	32ae      	adds	r2, #174	; 0xae
 8005b30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b34:	691b      	ldr	r3, [r3, #16]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d00b      	beq.n	8005b52 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8005b3a:	7dba      	ldrb	r2, [r7, #22]
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8005b42:	7dba      	ldrb	r2, [r7, #22]
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	32ae      	adds	r2, #174	; 0xae
 8005b48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b4c:	691b      	ldr	r3, [r3, #16]
 8005b4e:	68f8      	ldr	r0, [r7, #12]
 8005b50:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8005b52:	68f8      	ldr	r0, [r7, #12]
 8005b54:	f001 f92d 	bl	8006db2 <USBD_CtlSendStatus>
 8005b58:	e032      	b.n	8005bc0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8005b5a:	7afb      	ldrb	r3, [r7, #11]
 8005b5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b60:	b2db      	uxtb	r3, r3
 8005b62:	4619      	mov	r1, r3
 8005b64:	68f8      	ldr	r0, [r7, #12]
 8005b66:	f000 fa31 	bl	8005fcc <USBD_CoreFindEP>
 8005b6a:	4603      	mov	r3, r0
 8005b6c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005b6e:	7dbb      	ldrb	r3, [r7, #22]
 8005b70:	2bff      	cmp	r3, #255	; 0xff
 8005b72:	d025      	beq.n	8005bc0 <USBD_LL_DataOutStage+0x15c>
 8005b74:	7dbb      	ldrb	r3, [r7, #22]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d122      	bne.n	8005bc0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b80:	b2db      	uxtb	r3, r3
 8005b82:	2b03      	cmp	r3, #3
 8005b84:	d117      	bne.n	8005bb6 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8005b86:	7dba      	ldrb	r2, [r7, #22]
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	32ae      	adds	r2, #174	; 0xae
 8005b8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b90:	699b      	ldr	r3, [r3, #24]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d00f      	beq.n	8005bb6 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8005b96:	7dba      	ldrb	r2, [r7, #22]
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8005b9e:	7dba      	ldrb	r2, [r7, #22]
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	32ae      	adds	r2, #174	; 0xae
 8005ba4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ba8:	699b      	ldr	r3, [r3, #24]
 8005baa:	7afa      	ldrb	r2, [r7, #11]
 8005bac:	4611      	mov	r1, r2
 8005bae:	68f8      	ldr	r0, [r7, #12]
 8005bb0:	4798      	blx	r3
 8005bb2:	4603      	mov	r3, r0
 8005bb4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8005bb6:	7dfb      	ldrb	r3, [r7, #23]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d001      	beq.n	8005bc0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8005bbc:	7dfb      	ldrb	r3, [r7, #23]
 8005bbe:	e000      	b.n	8005bc2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8005bc0:	2300      	movs	r3, #0
}
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	3718      	adds	r7, #24
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	bd80      	pop	{r7, pc}

08005bca <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005bca:	b580      	push	{r7, lr}
 8005bcc:	b086      	sub	sp, #24
 8005bce:	af00      	add	r7, sp, #0
 8005bd0:	60f8      	str	r0, [r7, #12]
 8005bd2:	460b      	mov	r3, r1
 8005bd4:	607a      	str	r2, [r7, #4]
 8005bd6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8005bd8:	7afb      	ldrb	r3, [r7, #11]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d16f      	bne.n	8005cbe <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	3314      	adds	r3, #20
 8005be2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005bea:	2b02      	cmp	r3, #2
 8005bec:	d15a      	bne.n	8005ca4 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8005bee:	693b      	ldr	r3, [r7, #16]
 8005bf0:	689a      	ldr	r2, [r3, #8]
 8005bf2:	693b      	ldr	r3, [r7, #16]
 8005bf4:	68db      	ldr	r3, [r3, #12]
 8005bf6:	429a      	cmp	r2, r3
 8005bf8:	d914      	bls.n	8005c24 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005bfa:	693b      	ldr	r3, [r7, #16]
 8005bfc:	689a      	ldr	r2, [r3, #8]
 8005bfe:	693b      	ldr	r3, [r7, #16]
 8005c00:	68db      	ldr	r3, [r3, #12]
 8005c02:	1ad2      	subs	r2, r2, r3
 8005c04:	693b      	ldr	r3, [r7, #16]
 8005c06:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005c08:	693b      	ldr	r3, [r7, #16]
 8005c0a:	689b      	ldr	r3, [r3, #8]
 8005c0c:	461a      	mov	r2, r3
 8005c0e:	6879      	ldr	r1, [r7, #4]
 8005c10:	68f8      	ldr	r0, [r7, #12]
 8005c12:	f001 f8ac 	bl	8006d6e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005c16:	2300      	movs	r3, #0
 8005c18:	2200      	movs	r2, #0
 8005c1a:	2100      	movs	r1, #0
 8005c1c:	68f8      	ldr	r0, [r7, #12]
 8005c1e:	f001 fccf 	bl	80075c0 <USBD_LL_PrepareReceive>
 8005c22:	e03f      	b.n	8005ca4 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005c24:	693b      	ldr	r3, [r7, #16]
 8005c26:	68da      	ldr	r2, [r3, #12]
 8005c28:	693b      	ldr	r3, [r7, #16]
 8005c2a:	689b      	ldr	r3, [r3, #8]
 8005c2c:	429a      	cmp	r2, r3
 8005c2e:	d11c      	bne.n	8005c6a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005c30:	693b      	ldr	r3, [r7, #16]
 8005c32:	685a      	ldr	r2, [r3, #4]
 8005c34:	693b      	ldr	r3, [r7, #16]
 8005c36:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005c38:	429a      	cmp	r2, r3
 8005c3a:	d316      	bcc.n	8005c6a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8005c3c:	693b      	ldr	r3, [r7, #16]
 8005c3e:	685a      	ldr	r2, [r3, #4]
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005c46:	429a      	cmp	r2, r3
 8005c48:	d20f      	bcs.n	8005c6a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	2100      	movs	r1, #0
 8005c4e:	68f8      	ldr	r0, [r7, #12]
 8005c50:	f001 f88d 	bl	8006d6e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	2200      	movs	r2, #0
 8005c58:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	2200      	movs	r2, #0
 8005c60:	2100      	movs	r1, #0
 8005c62:	68f8      	ldr	r0, [r7, #12]
 8005c64:	f001 fcac 	bl	80075c0 <USBD_LL_PrepareReceive>
 8005c68:	e01c      	b.n	8005ca4 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c70:	b2db      	uxtb	r3, r3
 8005c72:	2b03      	cmp	r3, #3
 8005c74:	d10f      	bne.n	8005c96 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c7c:	68db      	ldr	r3, [r3, #12]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d009      	beq.n	8005c96 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	2200      	movs	r2, #0
 8005c86:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c90:	68db      	ldr	r3, [r3, #12]
 8005c92:	68f8      	ldr	r0, [r7, #12]
 8005c94:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005c96:	2180      	movs	r1, #128	; 0x80
 8005c98:	68f8      	ldr	r0, [r7, #12]
 8005c9a:	f001 fbe7 	bl	800746c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005c9e:	68f8      	ldr	r0, [r7, #12]
 8005ca0:	f001 f89a 	bl	8006dd8 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d03a      	beq.n	8005d24 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8005cae:	68f8      	ldr	r0, [r7, #12]
 8005cb0:	f7ff fe42 	bl	8005938 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005cbc:	e032      	b.n	8005d24 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8005cbe:	7afb      	ldrb	r3, [r7, #11]
 8005cc0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005cc4:	b2db      	uxtb	r3, r3
 8005cc6:	4619      	mov	r1, r3
 8005cc8:	68f8      	ldr	r0, [r7, #12]
 8005cca:	f000 f97f 	bl	8005fcc <USBD_CoreFindEP>
 8005cce:	4603      	mov	r3, r0
 8005cd0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005cd2:	7dfb      	ldrb	r3, [r7, #23]
 8005cd4:	2bff      	cmp	r3, #255	; 0xff
 8005cd6:	d025      	beq.n	8005d24 <USBD_LL_DataInStage+0x15a>
 8005cd8:	7dfb      	ldrb	r3, [r7, #23]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d122      	bne.n	8005d24 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ce4:	b2db      	uxtb	r3, r3
 8005ce6:	2b03      	cmp	r3, #3
 8005ce8:	d11c      	bne.n	8005d24 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8005cea:	7dfa      	ldrb	r2, [r7, #23]
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	32ae      	adds	r2, #174	; 0xae
 8005cf0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005cf4:	695b      	ldr	r3, [r3, #20]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d014      	beq.n	8005d24 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8005cfa:	7dfa      	ldrb	r2, [r7, #23]
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8005d02:	7dfa      	ldrb	r2, [r7, #23]
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	32ae      	adds	r2, #174	; 0xae
 8005d08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d0c:	695b      	ldr	r3, [r3, #20]
 8005d0e:	7afa      	ldrb	r2, [r7, #11]
 8005d10:	4611      	mov	r1, r2
 8005d12:	68f8      	ldr	r0, [r7, #12]
 8005d14:	4798      	blx	r3
 8005d16:	4603      	mov	r3, r0
 8005d18:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8005d1a:	7dbb      	ldrb	r3, [r7, #22]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d001      	beq.n	8005d24 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8005d20:	7dbb      	ldrb	r3, [r7, #22]
 8005d22:	e000      	b.n	8005d26 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8005d24:	2300      	movs	r3, #0
}
 8005d26:	4618      	mov	r0, r3
 8005d28:	3718      	adds	r7, #24
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	bd80      	pop	{r7, pc}

08005d2e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005d2e:	b580      	push	{r7, lr}
 8005d30:	b084      	sub	sp, #16
 8005d32:	af00      	add	r7, sp, #0
 8005d34:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8005d36:	2300      	movs	r3, #0
 8005d38:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2201      	movs	r2, #1
 8005d3e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2200      	movs	r2, #0
 8005d46:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2200      	movs	r2, #0
 8005d54:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d014      	beq.n	8005d94 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d70:	685b      	ldr	r3, [r3, #4]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d00e      	beq.n	8005d94 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d7c:	685b      	ldr	r3, [r3, #4]
 8005d7e:	687a      	ldr	r2, [r7, #4]
 8005d80:	6852      	ldr	r2, [r2, #4]
 8005d82:	b2d2      	uxtb	r2, r2
 8005d84:	4611      	mov	r1, r2
 8005d86:	6878      	ldr	r0, [r7, #4]
 8005d88:	4798      	blx	r3
 8005d8a:	4603      	mov	r3, r0
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d001      	beq.n	8005d94 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8005d90:	2303      	movs	r3, #3
 8005d92:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005d94:	2340      	movs	r3, #64	; 0x40
 8005d96:	2200      	movs	r2, #0
 8005d98:	2100      	movs	r1, #0
 8005d9a:	6878      	ldr	r0, [r7, #4]
 8005d9c:	f001 fb21 	bl	80073e2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2201      	movs	r2, #1
 8005da4:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2240      	movs	r2, #64	; 0x40
 8005dac:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005db0:	2340      	movs	r3, #64	; 0x40
 8005db2:	2200      	movs	r2, #0
 8005db4:	2180      	movs	r1, #128	; 0x80
 8005db6:	6878      	ldr	r0, [r7, #4]
 8005db8:	f001 fb13 	bl	80073e2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2201      	movs	r2, #1
 8005dc0:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2240      	movs	r2, #64	; 0x40
 8005dc6:	621a      	str	r2, [r3, #32]

  return ret;
 8005dc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dca:	4618      	mov	r0, r3
 8005dcc:	3710      	adds	r7, #16
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	bd80      	pop	{r7, pc}

08005dd2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005dd2:	b480      	push	{r7}
 8005dd4:	b083      	sub	sp, #12
 8005dd6:	af00      	add	r7, sp, #0
 8005dd8:	6078      	str	r0, [r7, #4]
 8005dda:	460b      	mov	r3, r1
 8005ddc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	78fa      	ldrb	r2, [r7, #3]
 8005de2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005de4:	2300      	movs	r3, #0
}
 8005de6:	4618      	mov	r0, r3
 8005de8:	370c      	adds	r7, #12
 8005dea:	46bd      	mov	sp, r7
 8005dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df0:	4770      	bx	lr

08005df2 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005df2:	b480      	push	{r7}
 8005df4:	b083      	sub	sp, #12
 8005df6:	af00      	add	r7, sp, #0
 8005df8:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e00:	b2da      	uxtb	r2, r3
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2204      	movs	r2, #4
 8005e0c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005e10:	2300      	movs	r3, #0
}
 8005e12:	4618      	mov	r0, r3
 8005e14:	370c      	adds	r7, #12
 8005e16:	46bd      	mov	sp, r7
 8005e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1c:	4770      	bx	lr

08005e1e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005e1e:	b480      	push	{r7}
 8005e20:	b083      	sub	sp, #12
 8005e22:	af00      	add	r7, sp, #0
 8005e24:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e2c:	b2db      	uxtb	r3, r3
 8005e2e:	2b04      	cmp	r3, #4
 8005e30:	d106      	bne.n	8005e40 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8005e38:	b2da      	uxtb	r2, r3
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005e40:	2300      	movs	r3, #0
}
 8005e42:	4618      	mov	r0, r3
 8005e44:	370c      	adds	r7, #12
 8005e46:	46bd      	mov	sp, r7
 8005e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4c:	4770      	bx	lr

08005e4e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005e4e:	b580      	push	{r7, lr}
 8005e50:	b082      	sub	sp, #8
 8005e52:	af00      	add	r7, sp, #0
 8005e54:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e5c:	b2db      	uxtb	r3, r3
 8005e5e:	2b03      	cmp	r3, #3
 8005e60:	d110      	bne.n	8005e84 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d00b      	beq.n	8005e84 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e72:	69db      	ldr	r3, [r3, #28]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d005      	beq.n	8005e84 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e7e:	69db      	ldr	r3, [r3, #28]
 8005e80:	6878      	ldr	r0, [r7, #4]
 8005e82:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8005e84:	2300      	movs	r3, #0
}
 8005e86:	4618      	mov	r0, r3
 8005e88:	3708      	adds	r7, #8
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	bd80      	pop	{r7, pc}

08005e8e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8005e8e:	b580      	push	{r7, lr}
 8005e90:	b082      	sub	sp, #8
 8005e92:	af00      	add	r7, sp, #0
 8005e94:	6078      	str	r0, [r7, #4]
 8005e96:	460b      	mov	r3, r1
 8005e98:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	32ae      	adds	r2, #174	; 0xae
 8005ea4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d101      	bne.n	8005eb0 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8005eac:	2303      	movs	r3, #3
 8005eae:	e01c      	b.n	8005eea <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005eb6:	b2db      	uxtb	r3, r3
 8005eb8:	2b03      	cmp	r3, #3
 8005eba:	d115      	bne.n	8005ee8 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	32ae      	adds	r2, #174	; 0xae
 8005ec6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005eca:	6a1b      	ldr	r3, [r3, #32]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d00b      	beq.n	8005ee8 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	32ae      	adds	r2, #174	; 0xae
 8005eda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ede:	6a1b      	ldr	r3, [r3, #32]
 8005ee0:	78fa      	ldrb	r2, [r7, #3]
 8005ee2:	4611      	mov	r1, r2
 8005ee4:	6878      	ldr	r0, [r7, #4]
 8005ee6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005ee8:	2300      	movs	r3, #0
}
 8005eea:	4618      	mov	r0, r3
 8005eec:	3708      	adds	r7, #8
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	bd80      	pop	{r7, pc}

08005ef2 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8005ef2:	b580      	push	{r7, lr}
 8005ef4:	b082      	sub	sp, #8
 8005ef6:	af00      	add	r7, sp, #0
 8005ef8:	6078      	str	r0, [r7, #4]
 8005efa:	460b      	mov	r3, r1
 8005efc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	32ae      	adds	r2, #174	; 0xae
 8005f08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d101      	bne.n	8005f14 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8005f10:	2303      	movs	r3, #3
 8005f12:	e01c      	b.n	8005f4e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f1a:	b2db      	uxtb	r3, r3
 8005f1c:	2b03      	cmp	r3, #3
 8005f1e:	d115      	bne.n	8005f4c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	32ae      	adds	r2, #174	; 0xae
 8005f2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d00b      	beq.n	8005f4c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	32ae      	adds	r2, #174	; 0xae
 8005f3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f44:	78fa      	ldrb	r2, [r7, #3]
 8005f46:	4611      	mov	r1, r2
 8005f48:	6878      	ldr	r0, [r7, #4]
 8005f4a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005f4c:	2300      	movs	r3, #0
}
 8005f4e:	4618      	mov	r0, r3
 8005f50:	3708      	adds	r7, #8
 8005f52:	46bd      	mov	sp, r7
 8005f54:	bd80      	pop	{r7, pc}

08005f56 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8005f56:	b480      	push	{r7}
 8005f58:	b083      	sub	sp, #12
 8005f5a:	af00      	add	r7, sp, #0
 8005f5c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005f5e:	2300      	movs	r3, #0
}
 8005f60:	4618      	mov	r0, r3
 8005f62:	370c      	adds	r7, #12
 8005f64:	46bd      	mov	sp, r7
 8005f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6a:	4770      	bx	lr

08005f6c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b084      	sub	sp, #16
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8005f74:	2300      	movs	r3, #0
 8005f76:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2201      	movs	r2, #1
 8005f7c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d00e      	beq.n	8005fa8 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f90:	685b      	ldr	r3, [r3, #4]
 8005f92:	687a      	ldr	r2, [r7, #4]
 8005f94:	6852      	ldr	r2, [r2, #4]
 8005f96:	b2d2      	uxtb	r2, r2
 8005f98:	4611      	mov	r1, r2
 8005f9a:	6878      	ldr	r0, [r7, #4]
 8005f9c:	4798      	blx	r3
 8005f9e:	4603      	mov	r3, r0
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d001      	beq.n	8005fa8 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8005fa4:	2303      	movs	r3, #3
 8005fa6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005fa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005faa:	4618      	mov	r0, r3
 8005fac:	3710      	adds	r7, #16
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	bd80      	pop	{r7, pc}

08005fb2 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005fb2:	b480      	push	{r7}
 8005fb4:	b083      	sub	sp, #12
 8005fb6:	af00      	add	r7, sp, #0
 8005fb8:	6078      	str	r0, [r7, #4]
 8005fba:	460b      	mov	r3, r1
 8005fbc:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005fbe:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	370c      	adds	r7, #12
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fca:	4770      	bx	lr

08005fcc <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005fcc:	b480      	push	{r7}
 8005fce:	b083      	sub	sp, #12
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
 8005fd4:	460b      	mov	r3, r1
 8005fd6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005fd8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005fda:	4618      	mov	r0, r3
 8005fdc:	370c      	adds	r7, #12
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe4:	4770      	bx	lr

08005fe6 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8005fe6:	b580      	push	{r7, lr}
 8005fe8:	b086      	sub	sp, #24
 8005fea:	af00      	add	r7, sp, #0
 8005fec:	6078      	str	r0, [r7, #4]
 8005fee:	460b      	mov	r3, r1
 8005ff0:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	885b      	ldrh	r3, [r3, #2]
 8006002:	b29a      	uxth	r2, r3
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	781b      	ldrb	r3, [r3, #0]
 8006008:	b29b      	uxth	r3, r3
 800600a:	429a      	cmp	r2, r3
 800600c:	d920      	bls.n	8006050 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	781b      	ldrb	r3, [r3, #0]
 8006012:	b29b      	uxth	r3, r3
 8006014:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8006016:	e013      	b.n	8006040 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8006018:	f107 030a 	add.w	r3, r7, #10
 800601c:	4619      	mov	r1, r3
 800601e:	6978      	ldr	r0, [r7, #20]
 8006020:	f000 f81b 	bl	800605a <USBD_GetNextDesc>
 8006024:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8006026:	697b      	ldr	r3, [r7, #20]
 8006028:	785b      	ldrb	r3, [r3, #1]
 800602a:	2b05      	cmp	r3, #5
 800602c:	d108      	bne.n	8006040 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800602e:	697b      	ldr	r3, [r7, #20]
 8006030:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8006032:	693b      	ldr	r3, [r7, #16]
 8006034:	789b      	ldrb	r3, [r3, #2]
 8006036:	78fa      	ldrb	r2, [r7, #3]
 8006038:	429a      	cmp	r2, r3
 800603a:	d008      	beq.n	800604e <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800603c:	2300      	movs	r3, #0
 800603e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	885b      	ldrh	r3, [r3, #2]
 8006044:	b29a      	uxth	r2, r3
 8006046:	897b      	ldrh	r3, [r7, #10]
 8006048:	429a      	cmp	r2, r3
 800604a:	d8e5      	bhi.n	8006018 <USBD_GetEpDesc+0x32>
 800604c:	e000      	b.n	8006050 <USBD_GetEpDesc+0x6a>
          break;
 800604e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8006050:	693b      	ldr	r3, [r7, #16]
}
 8006052:	4618      	mov	r0, r3
 8006054:	3718      	adds	r7, #24
 8006056:	46bd      	mov	sp, r7
 8006058:	bd80      	pop	{r7, pc}

0800605a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800605a:	b480      	push	{r7}
 800605c:	b085      	sub	sp, #20
 800605e:	af00      	add	r7, sp, #0
 8006060:	6078      	str	r0, [r7, #4]
 8006062:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	881a      	ldrh	r2, [r3, #0]
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	781b      	ldrb	r3, [r3, #0]
 8006070:	b29b      	uxth	r3, r3
 8006072:	4413      	add	r3, r2
 8006074:	b29a      	uxth	r2, r3
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	781b      	ldrb	r3, [r3, #0]
 800607e:	461a      	mov	r2, r3
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	4413      	add	r3, r2
 8006084:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006086:	68fb      	ldr	r3, [r7, #12]
}
 8006088:	4618      	mov	r0, r3
 800608a:	3714      	adds	r7, #20
 800608c:	46bd      	mov	sp, r7
 800608e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006092:	4770      	bx	lr

08006094 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006094:	b480      	push	{r7}
 8006096:	b087      	sub	sp, #28
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80060a0:	697b      	ldr	r3, [r7, #20]
 80060a2:	781b      	ldrb	r3, [r3, #0]
 80060a4:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80060a6:	697b      	ldr	r3, [r7, #20]
 80060a8:	3301      	adds	r3, #1
 80060aa:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80060ac:	697b      	ldr	r3, [r7, #20]
 80060ae:	781b      	ldrb	r3, [r3, #0]
 80060b0:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80060b2:	8a3b      	ldrh	r3, [r7, #16]
 80060b4:	021b      	lsls	r3, r3, #8
 80060b6:	b21a      	sxth	r2, r3
 80060b8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80060bc:	4313      	orrs	r3, r2
 80060be:	b21b      	sxth	r3, r3
 80060c0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80060c2:	89fb      	ldrh	r3, [r7, #14]
}
 80060c4:	4618      	mov	r0, r3
 80060c6:	371c      	adds	r7, #28
 80060c8:	46bd      	mov	sp, r7
 80060ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ce:	4770      	bx	lr

080060d0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b084      	sub	sp, #16
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
 80060d8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80060da:	2300      	movs	r3, #0
 80060dc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	781b      	ldrb	r3, [r3, #0]
 80060e2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80060e6:	2b40      	cmp	r3, #64	; 0x40
 80060e8:	d005      	beq.n	80060f6 <USBD_StdDevReq+0x26>
 80060ea:	2b40      	cmp	r3, #64	; 0x40
 80060ec:	d857      	bhi.n	800619e <USBD_StdDevReq+0xce>
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d00f      	beq.n	8006112 <USBD_StdDevReq+0x42>
 80060f2:	2b20      	cmp	r3, #32
 80060f4:	d153      	bne.n	800619e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	32ae      	adds	r2, #174	; 0xae
 8006100:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006104:	689b      	ldr	r3, [r3, #8]
 8006106:	6839      	ldr	r1, [r7, #0]
 8006108:	6878      	ldr	r0, [r7, #4]
 800610a:	4798      	blx	r3
 800610c:	4603      	mov	r3, r0
 800610e:	73fb      	strb	r3, [r7, #15]
      break;
 8006110:	e04a      	b.n	80061a8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006112:	683b      	ldr	r3, [r7, #0]
 8006114:	785b      	ldrb	r3, [r3, #1]
 8006116:	2b09      	cmp	r3, #9
 8006118:	d83b      	bhi.n	8006192 <USBD_StdDevReq+0xc2>
 800611a:	a201      	add	r2, pc, #4	; (adr r2, 8006120 <USBD_StdDevReq+0x50>)
 800611c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006120:	08006175 	.word	0x08006175
 8006124:	08006189 	.word	0x08006189
 8006128:	08006193 	.word	0x08006193
 800612c:	0800617f 	.word	0x0800617f
 8006130:	08006193 	.word	0x08006193
 8006134:	08006153 	.word	0x08006153
 8006138:	08006149 	.word	0x08006149
 800613c:	08006193 	.word	0x08006193
 8006140:	0800616b 	.word	0x0800616b
 8006144:	0800615d 	.word	0x0800615d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006148:	6839      	ldr	r1, [r7, #0]
 800614a:	6878      	ldr	r0, [r7, #4]
 800614c:	f000 fa3c 	bl	80065c8 <USBD_GetDescriptor>
          break;
 8006150:	e024      	b.n	800619c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006152:	6839      	ldr	r1, [r7, #0]
 8006154:	6878      	ldr	r0, [r7, #4]
 8006156:	f000 fba1 	bl	800689c <USBD_SetAddress>
          break;
 800615a:	e01f      	b.n	800619c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800615c:	6839      	ldr	r1, [r7, #0]
 800615e:	6878      	ldr	r0, [r7, #4]
 8006160:	f000 fbe0 	bl	8006924 <USBD_SetConfig>
 8006164:	4603      	mov	r3, r0
 8006166:	73fb      	strb	r3, [r7, #15]
          break;
 8006168:	e018      	b.n	800619c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800616a:	6839      	ldr	r1, [r7, #0]
 800616c:	6878      	ldr	r0, [r7, #4]
 800616e:	f000 fc83 	bl	8006a78 <USBD_GetConfig>
          break;
 8006172:	e013      	b.n	800619c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006174:	6839      	ldr	r1, [r7, #0]
 8006176:	6878      	ldr	r0, [r7, #4]
 8006178:	f000 fcb4 	bl	8006ae4 <USBD_GetStatus>
          break;
 800617c:	e00e      	b.n	800619c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800617e:	6839      	ldr	r1, [r7, #0]
 8006180:	6878      	ldr	r0, [r7, #4]
 8006182:	f000 fce3 	bl	8006b4c <USBD_SetFeature>
          break;
 8006186:	e009      	b.n	800619c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006188:	6839      	ldr	r1, [r7, #0]
 800618a:	6878      	ldr	r0, [r7, #4]
 800618c:	f000 fd07 	bl	8006b9e <USBD_ClrFeature>
          break;
 8006190:	e004      	b.n	800619c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8006192:	6839      	ldr	r1, [r7, #0]
 8006194:	6878      	ldr	r0, [r7, #4]
 8006196:	f000 fd5e 	bl	8006c56 <USBD_CtlError>
          break;
 800619a:	bf00      	nop
      }
      break;
 800619c:	e004      	b.n	80061a8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800619e:	6839      	ldr	r1, [r7, #0]
 80061a0:	6878      	ldr	r0, [r7, #4]
 80061a2:	f000 fd58 	bl	8006c56 <USBD_CtlError>
      break;
 80061a6:	bf00      	nop
  }

  return ret;
 80061a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80061aa:	4618      	mov	r0, r3
 80061ac:	3710      	adds	r7, #16
 80061ae:	46bd      	mov	sp, r7
 80061b0:	bd80      	pop	{r7, pc}
 80061b2:	bf00      	nop

080061b4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b084      	sub	sp, #16
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
 80061bc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80061be:	2300      	movs	r3, #0
 80061c0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	781b      	ldrb	r3, [r3, #0]
 80061c6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80061ca:	2b40      	cmp	r3, #64	; 0x40
 80061cc:	d005      	beq.n	80061da <USBD_StdItfReq+0x26>
 80061ce:	2b40      	cmp	r3, #64	; 0x40
 80061d0:	d852      	bhi.n	8006278 <USBD_StdItfReq+0xc4>
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d001      	beq.n	80061da <USBD_StdItfReq+0x26>
 80061d6:	2b20      	cmp	r3, #32
 80061d8:	d14e      	bne.n	8006278 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80061e0:	b2db      	uxtb	r3, r3
 80061e2:	3b01      	subs	r3, #1
 80061e4:	2b02      	cmp	r3, #2
 80061e6:	d840      	bhi.n	800626a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	889b      	ldrh	r3, [r3, #4]
 80061ec:	b2db      	uxtb	r3, r3
 80061ee:	2b01      	cmp	r3, #1
 80061f0:	d836      	bhi.n	8006260 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	889b      	ldrh	r3, [r3, #4]
 80061f6:	b2db      	uxtb	r3, r3
 80061f8:	4619      	mov	r1, r3
 80061fa:	6878      	ldr	r0, [r7, #4]
 80061fc:	f7ff fed9 	bl	8005fb2 <USBD_CoreFindIF>
 8006200:	4603      	mov	r3, r0
 8006202:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006204:	7bbb      	ldrb	r3, [r7, #14]
 8006206:	2bff      	cmp	r3, #255	; 0xff
 8006208:	d01d      	beq.n	8006246 <USBD_StdItfReq+0x92>
 800620a:	7bbb      	ldrb	r3, [r7, #14]
 800620c:	2b00      	cmp	r3, #0
 800620e:	d11a      	bne.n	8006246 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8006210:	7bba      	ldrb	r2, [r7, #14]
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	32ae      	adds	r2, #174	; 0xae
 8006216:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800621a:	689b      	ldr	r3, [r3, #8]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d00f      	beq.n	8006240 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8006220:	7bba      	ldrb	r2, [r7, #14]
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006228:	7bba      	ldrb	r2, [r7, #14]
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	32ae      	adds	r2, #174	; 0xae
 800622e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006232:	689b      	ldr	r3, [r3, #8]
 8006234:	6839      	ldr	r1, [r7, #0]
 8006236:	6878      	ldr	r0, [r7, #4]
 8006238:	4798      	blx	r3
 800623a:	4603      	mov	r3, r0
 800623c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800623e:	e004      	b.n	800624a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8006240:	2303      	movs	r3, #3
 8006242:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006244:	e001      	b.n	800624a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8006246:	2303      	movs	r3, #3
 8006248:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	88db      	ldrh	r3, [r3, #6]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d110      	bne.n	8006274 <USBD_StdItfReq+0xc0>
 8006252:	7bfb      	ldrb	r3, [r7, #15]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d10d      	bne.n	8006274 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006258:	6878      	ldr	r0, [r7, #4]
 800625a:	f000 fdaa 	bl	8006db2 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800625e:	e009      	b.n	8006274 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8006260:	6839      	ldr	r1, [r7, #0]
 8006262:	6878      	ldr	r0, [r7, #4]
 8006264:	f000 fcf7 	bl	8006c56 <USBD_CtlError>
          break;
 8006268:	e004      	b.n	8006274 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800626a:	6839      	ldr	r1, [r7, #0]
 800626c:	6878      	ldr	r0, [r7, #4]
 800626e:	f000 fcf2 	bl	8006c56 <USBD_CtlError>
          break;
 8006272:	e000      	b.n	8006276 <USBD_StdItfReq+0xc2>
          break;
 8006274:	bf00      	nop
      }
      break;
 8006276:	e004      	b.n	8006282 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8006278:	6839      	ldr	r1, [r7, #0]
 800627a:	6878      	ldr	r0, [r7, #4]
 800627c:	f000 fceb 	bl	8006c56 <USBD_CtlError>
      break;
 8006280:	bf00      	nop
  }

  return ret;
 8006282:	7bfb      	ldrb	r3, [r7, #15]
}
 8006284:	4618      	mov	r0, r3
 8006286:	3710      	adds	r7, #16
 8006288:	46bd      	mov	sp, r7
 800628a:	bd80      	pop	{r7, pc}

0800628c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800628c:	b580      	push	{r7, lr}
 800628e:	b084      	sub	sp, #16
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
 8006294:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8006296:	2300      	movs	r3, #0
 8006298:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	889b      	ldrh	r3, [r3, #4]
 800629e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	781b      	ldrb	r3, [r3, #0]
 80062a4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80062a8:	2b40      	cmp	r3, #64	; 0x40
 80062aa:	d007      	beq.n	80062bc <USBD_StdEPReq+0x30>
 80062ac:	2b40      	cmp	r3, #64	; 0x40
 80062ae:	f200 817f 	bhi.w	80065b0 <USBD_StdEPReq+0x324>
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d02a      	beq.n	800630c <USBD_StdEPReq+0x80>
 80062b6:	2b20      	cmp	r3, #32
 80062b8:	f040 817a 	bne.w	80065b0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80062bc:	7bbb      	ldrb	r3, [r7, #14]
 80062be:	4619      	mov	r1, r3
 80062c0:	6878      	ldr	r0, [r7, #4]
 80062c2:	f7ff fe83 	bl	8005fcc <USBD_CoreFindEP>
 80062c6:	4603      	mov	r3, r0
 80062c8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80062ca:	7b7b      	ldrb	r3, [r7, #13]
 80062cc:	2bff      	cmp	r3, #255	; 0xff
 80062ce:	f000 8174 	beq.w	80065ba <USBD_StdEPReq+0x32e>
 80062d2:	7b7b      	ldrb	r3, [r7, #13]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	f040 8170 	bne.w	80065ba <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80062da:	7b7a      	ldrb	r2, [r7, #13]
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80062e2:	7b7a      	ldrb	r2, [r7, #13]
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	32ae      	adds	r2, #174	; 0xae
 80062e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062ec:	689b      	ldr	r3, [r3, #8]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	f000 8163 	beq.w	80065ba <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80062f4:	7b7a      	ldrb	r2, [r7, #13]
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	32ae      	adds	r2, #174	; 0xae
 80062fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062fe:	689b      	ldr	r3, [r3, #8]
 8006300:	6839      	ldr	r1, [r7, #0]
 8006302:	6878      	ldr	r0, [r7, #4]
 8006304:	4798      	blx	r3
 8006306:	4603      	mov	r3, r0
 8006308:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800630a:	e156      	b.n	80065ba <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	785b      	ldrb	r3, [r3, #1]
 8006310:	2b03      	cmp	r3, #3
 8006312:	d008      	beq.n	8006326 <USBD_StdEPReq+0x9a>
 8006314:	2b03      	cmp	r3, #3
 8006316:	f300 8145 	bgt.w	80065a4 <USBD_StdEPReq+0x318>
 800631a:	2b00      	cmp	r3, #0
 800631c:	f000 809b 	beq.w	8006456 <USBD_StdEPReq+0x1ca>
 8006320:	2b01      	cmp	r3, #1
 8006322:	d03c      	beq.n	800639e <USBD_StdEPReq+0x112>
 8006324:	e13e      	b.n	80065a4 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800632c:	b2db      	uxtb	r3, r3
 800632e:	2b02      	cmp	r3, #2
 8006330:	d002      	beq.n	8006338 <USBD_StdEPReq+0xac>
 8006332:	2b03      	cmp	r3, #3
 8006334:	d016      	beq.n	8006364 <USBD_StdEPReq+0xd8>
 8006336:	e02c      	b.n	8006392 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006338:	7bbb      	ldrb	r3, [r7, #14]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d00d      	beq.n	800635a <USBD_StdEPReq+0xce>
 800633e:	7bbb      	ldrb	r3, [r7, #14]
 8006340:	2b80      	cmp	r3, #128	; 0x80
 8006342:	d00a      	beq.n	800635a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006344:	7bbb      	ldrb	r3, [r7, #14]
 8006346:	4619      	mov	r1, r3
 8006348:	6878      	ldr	r0, [r7, #4]
 800634a:	f001 f88f 	bl	800746c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800634e:	2180      	movs	r1, #128	; 0x80
 8006350:	6878      	ldr	r0, [r7, #4]
 8006352:	f001 f88b 	bl	800746c <USBD_LL_StallEP>
 8006356:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006358:	e020      	b.n	800639c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800635a:	6839      	ldr	r1, [r7, #0]
 800635c:	6878      	ldr	r0, [r7, #4]
 800635e:	f000 fc7a 	bl	8006c56 <USBD_CtlError>
              break;
 8006362:	e01b      	b.n	800639c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	885b      	ldrh	r3, [r3, #2]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d10e      	bne.n	800638a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800636c:	7bbb      	ldrb	r3, [r7, #14]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d00b      	beq.n	800638a <USBD_StdEPReq+0xfe>
 8006372:	7bbb      	ldrb	r3, [r7, #14]
 8006374:	2b80      	cmp	r3, #128	; 0x80
 8006376:	d008      	beq.n	800638a <USBD_StdEPReq+0xfe>
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	88db      	ldrh	r3, [r3, #6]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d104      	bne.n	800638a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006380:	7bbb      	ldrb	r3, [r7, #14]
 8006382:	4619      	mov	r1, r3
 8006384:	6878      	ldr	r0, [r7, #4]
 8006386:	f001 f871 	bl	800746c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800638a:	6878      	ldr	r0, [r7, #4]
 800638c:	f000 fd11 	bl	8006db2 <USBD_CtlSendStatus>

              break;
 8006390:	e004      	b.n	800639c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8006392:	6839      	ldr	r1, [r7, #0]
 8006394:	6878      	ldr	r0, [r7, #4]
 8006396:	f000 fc5e 	bl	8006c56 <USBD_CtlError>
              break;
 800639a:	bf00      	nop
          }
          break;
 800639c:	e107      	b.n	80065ae <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80063a4:	b2db      	uxtb	r3, r3
 80063a6:	2b02      	cmp	r3, #2
 80063a8:	d002      	beq.n	80063b0 <USBD_StdEPReq+0x124>
 80063aa:	2b03      	cmp	r3, #3
 80063ac:	d016      	beq.n	80063dc <USBD_StdEPReq+0x150>
 80063ae:	e04b      	b.n	8006448 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80063b0:	7bbb      	ldrb	r3, [r7, #14]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d00d      	beq.n	80063d2 <USBD_StdEPReq+0x146>
 80063b6:	7bbb      	ldrb	r3, [r7, #14]
 80063b8:	2b80      	cmp	r3, #128	; 0x80
 80063ba:	d00a      	beq.n	80063d2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80063bc:	7bbb      	ldrb	r3, [r7, #14]
 80063be:	4619      	mov	r1, r3
 80063c0:	6878      	ldr	r0, [r7, #4]
 80063c2:	f001 f853 	bl	800746c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80063c6:	2180      	movs	r1, #128	; 0x80
 80063c8:	6878      	ldr	r0, [r7, #4]
 80063ca:	f001 f84f 	bl	800746c <USBD_LL_StallEP>
 80063ce:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80063d0:	e040      	b.n	8006454 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80063d2:	6839      	ldr	r1, [r7, #0]
 80063d4:	6878      	ldr	r0, [r7, #4]
 80063d6:	f000 fc3e 	bl	8006c56 <USBD_CtlError>
              break;
 80063da:	e03b      	b.n	8006454 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	885b      	ldrh	r3, [r3, #2]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d136      	bne.n	8006452 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80063e4:	7bbb      	ldrb	r3, [r7, #14]
 80063e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d004      	beq.n	80063f8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80063ee:	7bbb      	ldrb	r3, [r7, #14]
 80063f0:	4619      	mov	r1, r3
 80063f2:	6878      	ldr	r0, [r7, #4]
 80063f4:	f001 f859 	bl	80074aa <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80063f8:	6878      	ldr	r0, [r7, #4]
 80063fa:	f000 fcda 	bl	8006db2 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80063fe:	7bbb      	ldrb	r3, [r7, #14]
 8006400:	4619      	mov	r1, r3
 8006402:	6878      	ldr	r0, [r7, #4]
 8006404:	f7ff fde2 	bl	8005fcc <USBD_CoreFindEP>
 8006408:	4603      	mov	r3, r0
 800640a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800640c:	7b7b      	ldrb	r3, [r7, #13]
 800640e:	2bff      	cmp	r3, #255	; 0xff
 8006410:	d01f      	beq.n	8006452 <USBD_StdEPReq+0x1c6>
 8006412:	7b7b      	ldrb	r3, [r7, #13]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d11c      	bne.n	8006452 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8006418:	7b7a      	ldrb	r2, [r7, #13]
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8006420:	7b7a      	ldrb	r2, [r7, #13]
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	32ae      	adds	r2, #174	; 0xae
 8006426:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800642a:	689b      	ldr	r3, [r3, #8]
 800642c:	2b00      	cmp	r3, #0
 800642e:	d010      	beq.n	8006452 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006430:	7b7a      	ldrb	r2, [r7, #13]
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	32ae      	adds	r2, #174	; 0xae
 8006436:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800643a:	689b      	ldr	r3, [r3, #8]
 800643c:	6839      	ldr	r1, [r7, #0]
 800643e:	6878      	ldr	r0, [r7, #4]
 8006440:	4798      	blx	r3
 8006442:	4603      	mov	r3, r0
 8006444:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8006446:	e004      	b.n	8006452 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8006448:	6839      	ldr	r1, [r7, #0]
 800644a:	6878      	ldr	r0, [r7, #4]
 800644c:	f000 fc03 	bl	8006c56 <USBD_CtlError>
              break;
 8006450:	e000      	b.n	8006454 <USBD_StdEPReq+0x1c8>
              break;
 8006452:	bf00      	nop
          }
          break;
 8006454:	e0ab      	b.n	80065ae <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800645c:	b2db      	uxtb	r3, r3
 800645e:	2b02      	cmp	r3, #2
 8006460:	d002      	beq.n	8006468 <USBD_StdEPReq+0x1dc>
 8006462:	2b03      	cmp	r3, #3
 8006464:	d032      	beq.n	80064cc <USBD_StdEPReq+0x240>
 8006466:	e097      	b.n	8006598 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006468:	7bbb      	ldrb	r3, [r7, #14]
 800646a:	2b00      	cmp	r3, #0
 800646c:	d007      	beq.n	800647e <USBD_StdEPReq+0x1f2>
 800646e:	7bbb      	ldrb	r3, [r7, #14]
 8006470:	2b80      	cmp	r3, #128	; 0x80
 8006472:	d004      	beq.n	800647e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8006474:	6839      	ldr	r1, [r7, #0]
 8006476:	6878      	ldr	r0, [r7, #4]
 8006478:	f000 fbed 	bl	8006c56 <USBD_CtlError>
                break;
 800647c:	e091      	b.n	80065a2 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800647e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006482:	2b00      	cmp	r3, #0
 8006484:	da0b      	bge.n	800649e <USBD_StdEPReq+0x212>
 8006486:	7bbb      	ldrb	r3, [r7, #14]
 8006488:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800648c:	4613      	mov	r3, r2
 800648e:	009b      	lsls	r3, r3, #2
 8006490:	4413      	add	r3, r2
 8006492:	009b      	lsls	r3, r3, #2
 8006494:	3310      	adds	r3, #16
 8006496:	687a      	ldr	r2, [r7, #4]
 8006498:	4413      	add	r3, r2
 800649a:	3304      	adds	r3, #4
 800649c:	e00b      	b.n	80064b6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800649e:	7bbb      	ldrb	r3, [r7, #14]
 80064a0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80064a4:	4613      	mov	r3, r2
 80064a6:	009b      	lsls	r3, r3, #2
 80064a8:	4413      	add	r3, r2
 80064aa:	009b      	lsls	r3, r3, #2
 80064ac:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80064b0:	687a      	ldr	r2, [r7, #4]
 80064b2:	4413      	add	r3, r2
 80064b4:	3304      	adds	r3, #4
 80064b6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80064b8:	68bb      	ldr	r3, [r7, #8]
 80064ba:	2200      	movs	r2, #0
 80064bc:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80064be:	68bb      	ldr	r3, [r7, #8]
 80064c0:	2202      	movs	r2, #2
 80064c2:	4619      	mov	r1, r3
 80064c4:	6878      	ldr	r0, [r7, #4]
 80064c6:	f000 fc37 	bl	8006d38 <USBD_CtlSendData>
              break;
 80064ca:	e06a      	b.n	80065a2 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80064cc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	da11      	bge.n	80064f8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80064d4:	7bbb      	ldrb	r3, [r7, #14]
 80064d6:	f003 020f 	and.w	r2, r3, #15
 80064da:	6879      	ldr	r1, [r7, #4]
 80064dc:	4613      	mov	r3, r2
 80064de:	009b      	lsls	r3, r3, #2
 80064e0:	4413      	add	r3, r2
 80064e2:	009b      	lsls	r3, r3, #2
 80064e4:	440b      	add	r3, r1
 80064e6:	3324      	adds	r3, #36	; 0x24
 80064e8:	881b      	ldrh	r3, [r3, #0]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d117      	bne.n	800651e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80064ee:	6839      	ldr	r1, [r7, #0]
 80064f0:	6878      	ldr	r0, [r7, #4]
 80064f2:	f000 fbb0 	bl	8006c56 <USBD_CtlError>
                  break;
 80064f6:	e054      	b.n	80065a2 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80064f8:	7bbb      	ldrb	r3, [r7, #14]
 80064fa:	f003 020f 	and.w	r2, r3, #15
 80064fe:	6879      	ldr	r1, [r7, #4]
 8006500:	4613      	mov	r3, r2
 8006502:	009b      	lsls	r3, r3, #2
 8006504:	4413      	add	r3, r2
 8006506:	009b      	lsls	r3, r3, #2
 8006508:	440b      	add	r3, r1
 800650a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800650e:	881b      	ldrh	r3, [r3, #0]
 8006510:	2b00      	cmp	r3, #0
 8006512:	d104      	bne.n	800651e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006514:	6839      	ldr	r1, [r7, #0]
 8006516:	6878      	ldr	r0, [r7, #4]
 8006518:	f000 fb9d 	bl	8006c56 <USBD_CtlError>
                  break;
 800651c:	e041      	b.n	80065a2 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800651e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006522:	2b00      	cmp	r3, #0
 8006524:	da0b      	bge.n	800653e <USBD_StdEPReq+0x2b2>
 8006526:	7bbb      	ldrb	r3, [r7, #14]
 8006528:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800652c:	4613      	mov	r3, r2
 800652e:	009b      	lsls	r3, r3, #2
 8006530:	4413      	add	r3, r2
 8006532:	009b      	lsls	r3, r3, #2
 8006534:	3310      	adds	r3, #16
 8006536:	687a      	ldr	r2, [r7, #4]
 8006538:	4413      	add	r3, r2
 800653a:	3304      	adds	r3, #4
 800653c:	e00b      	b.n	8006556 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800653e:	7bbb      	ldrb	r3, [r7, #14]
 8006540:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006544:	4613      	mov	r3, r2
 8006546:	009b      	lsls	r3, r3, #2
 8006548:	4413      	add	r3, r2
 800654a:	009b      	lsls	r3, r3, #2
 800654c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006550:	687a      	ldr	r2, [r7, #4]
 8006552:	4413      	add	r3, r2
 8006554:	3304      	adds	r3, #4
 8006556:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006558:	7bbb      	ldrb	r3, [r7, #14]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d002      	beq.n	8006564 <USBD_StdEPReq+0x2d8>
 800655e:	7bbb      	ldrb	r3, [r7, #14]
 8006560:	2b80      	cmp	r3, #128	; 0x80
 8006562:	d103      	bne.n	800656c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8006564:	68bb      	ldr	r3, [r7, #8]
 8006566:	2200      	movs	r2, #0
 8006568:	601a      	str	r2, [r3, #0]
 800656a:	e00e      	b.n	800658a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800656c:	7bbb      	ldrb	r3, [r7, #14]
 800656e:	4619      	mov	r1, r3
 8006570:	6878      	ldr	r0, [r7, #4]
 8006572:	f000 ffb9 	bl	80074e8 <USBD_LL_IsStallEP>
 8006576:	4603      	mov	r3, r0
 8006578:	2b00      	cmp	r3, #0
 800657a:	d003      	beq.n	8006584 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800657c:	68bb      	ldr	r3, [r7, #8]
 800657e:	2201      	movs	r2, #1
 8006580:	601a      	str	r2, [r3, #0]
 8006582:	e002      	b.n	800658a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8006584:	68bb      	ldr	r3, [r7, #8]
 8006586:	2200      	movs	r2, #0
 8006588:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800658a:	68bb      	ldr	r3, [r7, #8]
 800658c:	2202      	movs	r2, #2
 800658e:	4619      	mov	r1, r3
 8006590:	6878      	ldr	r0, [r7, #4]
 8006592:	f000 fbd1 	bl	8006d38 <USBD_CtlSendData>
              break;
 8006596:	e004      	b.n	80065a2 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8006598:	6839      	ldr	r1, [r7, #0]
 800659a:	6878      	ldr	r0, [r7, #4]
 800659c:	f000 fb5b 	bl	8006c56 <USBD_CtlError>
              break;
 80065a0:	bf00      	nop
          }
          break;
 80065a2:	e004      	b.n	80065ae <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80065a4:	6839      	ldr	r1, [r7, #0]
 80065a6:	6878      	ldr	r0, [r7, #4]
 80065a8:	f000 fb55 	bl	8006c56 <USBD_CtlError>
          break;
 80065ac:	bf00      	nop
      }
      break;
 80065ae:	e005      	b.n	80065bc <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80065b0:	6839      	ldr	r1, [r7, #0]
 80065b2:	6878      	ldr	r0, [r7, #4]
 80065b4:	f000 fb4f 	bl	8006c56 <USBD_CtlError>
      break;
 80065b8:	e000      	b.n	80065bc <USBD_StdEPReq+0x330>
      break;
 80065ba:	bf00      	nop
  }

  return ret;
 80065bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80065be:	4618      	mov	r0, r3
 80065c0:	3710      	adds	r7, #16
 80065c2:	46bd      	mov	sp, r7
 80065c4:	bd80      	pop	{r7, pc}
	...

080065c8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80065c8:	b580      	push	{r7, lr}
 80065ca:	b084      	sub	sp, #16
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
 80065d0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80065d2:	2300      	movs	r3, #0
 80065d4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80065d6:	2300      	movs	r3, #0
 80065d8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80065da:	2300      	movs	r3, #0
 80065dc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80065de:	683b      	ldr	r3, [r7, #0]
 80065e0:	885b      	ldrh	r3, [r3, #2]
 80065e2:	0a1b      	lsrs	r3, r3, #8
 80065e4:	b29b      	uxth	r3, r3
 80065e6:	3b01      	subs	r3, #1
 80065e8:	2b06      	cmp	r3, #6
 80065ea:	f200 8128 	bhi.w	800683e <USBD_GetDescriptor+0x276>
 80065ee:	a201      	add	r2, pc, #4	; (adr r2, 80065f4 <USBD_GetDescriptor+0x2c>)
 80065f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065f4:	08006611 	.word	0x08006611
 80065f8:	08006629 	.word	0x08006629
 80065fc:	08006669 	.word	0x08006669
 8006600:	0800683f 	.word	0x0800683f
 8006604:	0800683f 	.word	0x0800683f
 8006608:	080067df 	.word	0x080067df
 800660c:	0800680b 	.word	0x0800680b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	687a      	ldr	r2, [r7, #4]
 800661a:	7c12      	ldrb	r2, [r2, #16]
 800661c:	f107 0108 	add.w	r1, r7, #8
 8006620:	4610      	mov	r0, r2
 8006622:	4798      	blx	r3
 8006624:	60f8      	str	r0, [r7, #12]
      break;
 8006626:	e112      	b.n	800684e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	7c1b      	ldrb	r3, [r3, #16]
 800662c:	2b00      	cmp	r3, #0
 800662e:	d10d      	bne.n	800664c <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006636:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006638:	f107 0208 	add.w	r2, r7, #8
 800663c:	4610      	mov	r0, r2
 800663e:	4798      	blx	r3
 8006640:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	3301      	adds	r3, #1
 8006646:	2202      	movs	r2, #2
 8006648:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800664a:	e100      	b.n	800684e <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006654:	f107 0208 	add.w	r2, r7, #8
 8006658:	4610      	mov	r0, r2
 800665a:	4798      	blx	r3
 800665c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	3301      	adds	r3, #1
 8006662:	2202      	movs	r2, #2
 8006664:	701a      	strb	r2, [r3, #0]
      break;
 8006666:	e0f2      	b.n	800684e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	885b      	ldrh	r3, [r3, #2]
 800666c:	b2db      	uxtb	r3, r3
 800666e:	2b05      	cmp	r3, #5
 8006670:	f200 80ac 	bhi.w	80067cc <USBD_GetDescriptor+0x204>
 8006674:	a201      	add	r2, pc, #4	; (adr r2, 800667c <USBD_GetDescriptor+0xb4>)
 8006676:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800667a:	bf00      	nop
 800667c:	08006695 	.word	0x08006695
 8006680:	080066c9 	.word	0x080066c9
 8006684:	080066fd 	.word	0x080066fd
 8006688:	08006731 	.word	0x08006731
 800668c:	08006765 	.word	0x08006765
 8006690:	08006799 	.word	0x08006799
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800669a:	685b      	ldr	r3, [r3, #4]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d00b      	beq.n	80066b8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066a6:	685b      	ldr	r3, [r3, #4]
 80066a8:	687a      	ldr	r2, [r7, #4]
 80066aa:	7c12      	ldrb	r2, [r2, #16]
 80066ac:	f107 0108 	add.w	r1, r7, #8
 80066b0:	4610      	mov	r0, r2
 80066b2:	4798      	blx	r3
 80066b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80066b6:	e091      	b.n	80067dc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80066b8:	6839      	ldr	r1, [r7, #0]
 80066ba:	6878      	ldr	r0, [r7, #4]
 80066bc:	f000 facb 	bl	8006c56 <USBD_CtlError>
            err++;
 80066c0:	7afb      	ldrb	r3, [r7, #11]
 80066c2:	3301      	adds	r3, #1
 80066c4:	72fb      	strb	r3, [r7, #11]
          break;
 80066c6:	e089      	b.n	80067dc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066ce:	689b      	ldr	r3, [r3, #8]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d00b      	beq.n	80066ec <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066da:	689b      	ldr	r3, [r3, #8]
 80066dc:	687a      	ldr	r2, [r7, #4]
 80066de:	7c12      	ldrb	r2, [r2, #16]
 80066e0:	f107 0108 	add.w	r1, r7, #8
 80066e4:	4610      	mov	r0, r2
 80066e6:	4798      	blx	r3
 80066e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80066ea:	e077      	b.n	80067dc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80066ec:	6839      	ldr	r1, [r7, #0]
 80066ee:	6878      	ldr	r0, [r7, #4]
 80066f0:	f000 fab1 	bl	8006c56 <USBD_CtlError>
            err++;
 80066f4:	7afb      	ldrb	r3, [r7, #11]
 80066f6:	3301      	adds	r3, #1
 80066f8:	72fb      	strb	r3, [r7, #11]
          break;
 80066fa:	e06f      	b.n	80067dc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006702:	68db      	ldr	r3, [r3, #12]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d00b      	beq.n	8006720 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800670e:	68db      	ldr	r3, [r3, #12]
 8006710:	687a      	ldr	r2, [r7, #4]
 8006712:	7c12      	ldrb	r2, [r2, #16]
 8006714:	f107 0108 	add.w	r1, r7, #8
 8006718:	4610      	mov	r0, r2
 800671a:	4798      	blx	r3
 800671c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800671e:	e05d      	b.n	80067dc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006720:	6839      	ldr	r1, [r7, #0]
 8006722:	6878      	ldr	r0, [r7, #4]
 8006724:	f000 fa97 	bl	8006c56 <USBD_CtlError>
            err++;
 8006728:	7afb      	ldrb	r3, [r7, #11]
 800672a:	3301      	adds	r3, #1
 800672c:	72fb      	strb	r3, [r7, #11]
          break;
 800672e:	e055      	b.n	80067dc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006736:	691b      	ldr	r3, [r3, #16]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d00b      	beq.n	8006754 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006742:	691b      	ldr	r3, [r3, #16]
 8006744:	687a      	ldr	r2, [r7, #4]
 8006746:	7c12      	ldrb	r2, [r2, #16]
 8006748:	f107 0108 	add.w	r1, r7, #8
 800674c:	4610      	mov	r0, r2
 800674e:	4798      	blx	r3
 8006750:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006752:	e043      	b.n	80067dc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006754:	6839      	ldr	r1, [r7, #0]
 8006756:	6878      	ldr	r0, [r7, #4]
 8006758:	f000 fa7d 	bl	8006c56 <USBD_CtlError>
            err++;
 800675c:	7afb      	ldrb	r3, [r7, #11]
 800675e:	3301      	adds	r3, #1
 8006760:	72fb      	strb	r3, [r7, #11]
          break;
 8006762:	e03b      	b.n	80067dc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800676a:	695b      	ldr	r3, [r3, #20]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d00b      	beq.n	8006788 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006776:	695b      	ldr	r3, [r3, #20]
 8006778:	687a      	ldr	r2, [r7, #4]
 800677a:	7c12      	ldrb	r2, [r2, #16]
 800677c:	f107 0108 	add.w	r1, r7, #8
 8006780:	4610      	mov	r0, r2
 8006782:	4798      	blx	r3
 8006784:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006786:	e029      	b.n	80067dc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006788:	6839      	ldr	r1, [r7, #0]
 800678a:	6878      	ldr	r0, [r7, #4]
 800678c:	f000 fa63 	bl	8006c56 <USBD_CtlError>
            err++;
 8006790:	7afb      	ldrb	r3, [r7, #11]
 8006792:	3301      	adds	r3, #1
 8006794:	72fb      	strb	r3, [r7, #11]
          break;
 8006796:	e021      	b.n	80067dc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800679e:	699b      	ldr	r3, [r3, #24]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d00b      	beq.n	80067bc <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80067aa:	699b      	ldr	r3, [r3, #24]
 80067ac:	687a      	ldr	r2, [r7, #4]
 80067ae:	7c12      	ldrb	r2, [r2, #16]
 80067b0:	f107 0108 	add.w	r1, r7, #8
 80067b4:	4610      	mov	r0, r2
 80067b6:	4798      	blx	r3
 80067b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80067ba:	e00f      	b.n	80067dc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80067bc:	6839      	ldr	r1, [r7, #0]
 80067be:	6878      	ldr	r0, [r7, #4]
 80067c0:	f000 fa49 	bl	8006c56 <USBD_CtlError>
            err++;
 80067c4:	7afb      	ldrb	r3, [r7, #11]
 80067c6:	3301      	adds	r3, #1
 80067c8:	72fb      	strb	r3, [r7, #11]
          break;
 80067ca:	e007      	b.n	80067dc <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80067cc:	6839      	ldr	r1, [r7, #0]
 80067ce:	6878      	ldr	r0, [r7, #4]
 80067d0:	f000 fa41 	bl	8006c56 <USBD_CtlError>
          err++;
 80067d4:	7afb      	ldrb	r3, [r7, #11]
 80067d6:	3301      	adds	r3, #1
 80067d8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80067da:	bf00      	nop
      }
      break;
 80067dc:	e037      	b.n	800684e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	7c1b      	ldrb	r3, [r3, #16]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d109      	bne.n	80067fa <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067ee:	f107 0208 	add.w	r2, r7, #8
 80067f2:	4610      	mov	r0, r2
 80067f4:	4798      	blx	r3
 80067f6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80067f8:	e029      	b.n	800684e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80067fa:	6839      	ldr	r1, [r7, #0]
 80067fc:	6878      	ldr	r0, [r7, #4]
 80067fe:	f000 fa2a 	bl	8006c56 <USBD_CtlError>
        err++;
 8006802:	7afb      	ldrb	r3, [r7, #11]
 8006804:	3301      	adds	r3, #1
 8006806:	72fb      	strb	r3, [r7, #11]
      break;
 8006808:	e021      	b.n	800684e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	7c1b      	ldrb	r3, [r3, #16]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d10d      	bne.n	800682e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800681a:	f107 0208 	add.w	r2, r7, #8
 800681e:	4610      	mov	r0, r2
 8006820:	4798      	blx	r3
 8006822:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	3301      	adds	r3, #1
 8006828:	2207      	movs	r2, #7
 800682a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800682c:	e00f      	b.n	800684e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800682e:	6839      	ldr	r1, [r7, #0]
 8006830:	6878      	ldr	r0, [r7, #4]
 8006832:	f000 fa10 	bl	8006c56 <USBD_CtlError>
        err++;
 8006836:	7afb      	ldrb	r3, [r7, #11]
 8006838:	3301      	adds	r3, #1
 800683a:	72fb      	strb	r3, [r7, #11]
      break;
 800683c:	e007      	b.n	800684e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800683e:	6839      	ldr	r1, [r7, #0]
 8006840:	6878      	ldr	r0, [r7, #4]
 8006842:	f000 fa08 	bl	8006c56 <USBD_CtlError>
      err++;
 8006846:	7afb      	ldrb	r3, [r7, #11]
 8006848:	3301      	adds	r3, #1
 800684a:	72fb      	strb	r3, [r7, #11]
      break;
 800684c:	bf00      	nop
  }

  if (err != 0U)
 800684e:	7afb      	ldrb	r3, [r7, #11]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d11e      	bne.n	8006892 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	88db      	ldrh	r3, [r3, #6]
 8006858:	2b00      	cmp	r3, #0
 800685a:	d016      	beq.n	800688a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800685c:	893b      	ldrh	r3, [r7, #8]
 800685e:	2b00      	cmp	r3, #0
 8006860:	d00e      	beq.n	8006880 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8006862:	683b      	ldr	r3, [r7, #0]
 8006864:	88da      	ldrh	r2, [r3, #6]
 8006866:	893b      	ldrh	r3, [r7, #8]
 8006868:	4293      	cmp	r3, r2
 800686a:	bf28      	it	cs
 800686c:	4613      	movcs	r3, r2
 800686e:	b29b      	uxth	r3, r3
 8006870:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006872:	893b      	ldrh	r3, [r7, #8]
 8006874:	461a      	mov	r2, r3
 8006876:	68f9      	ldr	r1, [r7, #12]
 8006878:	6878      	ldr	r0, [r7, #4]
 800687a:	f000 fa5d 	bl	8006d38 <USBD_CtlSendData>
 800687e:	e009      	b.n	8006894 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006880:	6839      	ldr	r1, [r7, #0]
 8006882:	6878      	ldr	r0, [r7, #4]
 8006884:	f000 f9e7 	bl	8006c56 <USBD_CtlError>
 8006888:	e004      	b.n	8006894 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800688a:	6878      	ldr	r0, [r7, #4]
 800688c:	f000 fa91 	bl	8006db2 <USBD_CtlSendStatus>
 8006890:	e000      	b.n	8006894 <USBD_GetDescriptor+0x2cc>
    return;
 8006892:	bf00      	nop
  }
}
 8006894:	3710      	adds	r7, #16
 8006896:	46bd      	mov	sp, r7
 8006898:	bd80      	pop	{r7, pc}
 800689a:	bf00      	nop

0800689c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800689c:	b580      	push	{r7, lr}
 800689e:	b084      	sub	sp, #16
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
 80068a4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	889b      	ldrh	r3, [r3, #4]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d131      	bne.n	8006912 <USBD_SetAddress+0x76>
 80068ae:	683b      	ldr	r3, [r7, #0]
 80068b0:	88db      	ldrh	r3, [r3, #6]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d12d      	bne.n	8006912 <USBD_SetAddress+0x76>
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	885b      	ldrh	r3, [r3, #2]
 80068ba:	2b7f      	cmp	r3, #127	; 0x7f
 80068bc:	d829      	bhi.n	8006912 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	885b      	ldrh	r3, [r3, #2]
 80068c2:	b2db      	uxtb	r3, r3
 80068c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80068c8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80068d0:	b2db      	uxtb	r3, r3
 80068d2:	2b03      	cmp	r3, #3
 80068d4:	d104      	bne.n	80068e0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80068d6:	6839      	ldr	r1, [r7, #0]
 80068d8:	6878      	ldr	r0, [r7, #4]
 80068da:	f000 f9bc 	bl	8006c56 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068de:	e01d      	b.n	800691c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	7bfa      	ldrb	r2, [r7, #15]
 80068e4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80068e8:	7bfb      	ldrb	r3, [r7, #15]
 80068ea:	4619      	mov	r1, r3
 80068ec:	6878      	ldr	r0, [r7, #4]
 80068ee:	f000 fe27 	bl	8007540 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80068f2:	6878      	ldr	r0, [r7, #4]
 80068f4:	f000 fa5d 	bl	8006db2 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80068f8:	7bfb      	ldrb	r3, [r7, #15]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d004      	beq.n	8006908 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	2202      	movs	r2, #2
 8006902:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006906:	e009      	b.n	800691c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2201      	movs	r2, #1
 800690c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006910:	e004      	b.n	800691c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006912:	6839      	ldr	r1, [r7, #0]
 8006914:	6878      	ldr	r0, [r7, #4]
 8006916:	f000 f99e 	bl	8006c56 <USBD_CtlError>
  }
}
 800691a:	bf00      	nop
 800691c:	bf00      	nop
 800691e:	3710      	adds	r7, #16
 8006920:	46bd      	mov	sp, r7
 8006922:	bd80      	pop	{r7, pc}

08006924 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006924:	b580      	push	{r7, lr}
 8006926:	b084      	sub	sp, #16
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
 800692c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800692e:	2300      	movs	r3, #0
 8006930:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	885b      	ldrh	r3, [r3, #2]
 8006936:	b2da      	uxtb	r2, r3
 8006938:	4b4e      	ldr	r3, [pc, #312]	; (8006a74 <USBD_SetConfig+0x150>)
 800693a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800693c:	4b4d      	ldr	r3, [pc, #308]	; (8006a74 <USBD_SetConfig+0x150>)
 800693e:	781b      	ldrb	r3, [r3, #0]
 8006940:	2b01      	cmp	r3, #1
 8006942:	d905      	bls.n	8006950 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006944:	6839      	ldr	r1, [r7, #0]
 8006946:	6878      	ldr	r0, [r7, #4]
 8006948:	f000 f985 	bl	8006c56 <USBD_CtlError>
    return USBD_FAIL;
 800694c:	2303      	movs	r3, #3
 800694e:	e08c      	b.n	8006a6a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006956:	b2db      	uxtb	r3, r3
 8006958:	2b02      	cmp	r3, #2
 800695a:	d002      	beq.n	8006962 <USBD_SetConfig+0x3e>
 800695c:	2b03      	cmp	r3, #3
 800695e:	d029      	beq.n	80069b4 <USBD_SetConfig+0x90>
 8006960:	e075      	b.n	8006a4e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8006962:	4b44      	ldr	r3, [pc, #272]	; (8006a74 <USBD_SetConfig+0x150>)
 8006964:	781b      	ldrb	r3, [r3, #0]
 8006966:	2b00      	cmp	r3, #0
 8006968:	d020      	beq.n	80069ac <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800696a:	4b42      	ldr	r3, [pc, #264]	; (8006a74 <USBD_SetConfig+0x150>)
 800696c:	781b      	ldrb	r3, [r3, #0]
 800696e:	461a      	mov	r2, r3
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006974:	4b3f      	ldr	r3, [pc, #252]	; (8006a74 <USBD_SetConfig+0x150>)
 8006976:	781b      	ldrb	r3, [r3, #0]
 8006978:	4619      	mov	r1, r3
 800697a:	6878      	ldr	r0, [r7, #4]
 800697c:	f7fe ffe7 	bl	800594e <USBD_SetClassConfig>
 8006980:	4603      	mov	r3, r0
 8006982:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006984:	7bfb      	ldrb	r3, [r7, #15]
 8006986:	2b00      	cmp	r3, #0
 8006988:	d008      	beq.n	800699c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800698a:	6839      	ldr	r1, [r7, #0]
 800698c:	6878      	ldr	r0, [r7, #4]
 800698e:	f000 f962 	bl	8006c56 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	2202      	movs	r2, #2
 8006996:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800699a:	e065      	b.n	8006a68 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800699c:	6878      	ldr	r0, [r7, #4]
 800699e:	f000 fa08 	bl	8006db2 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	2203      	movs	r2, #3
 80069a6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80069aa:	e05d      	b.n	8006a68 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80069ac:	6878      	ldr	r0, [r7, #4]
 80069ae:	f000 fa00 	bl	8006db2 <USBD_CtlSendStatus>
      break;
 80069b2:	e059      	b.n	8006a68 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80069b4:	4b2f      	ldr	r3, [pc, #188]	; (8006a74 <USBD_SetConfig+0x150>)
 80069b6:	781b      	ldrb	r3, [r3, #0]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d112      	bne.n	80069e2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2202      	movs	r2, #2
 80069c0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80069c4:	4b2b      	ldr	r3, [pc, #172]	; (8006a74 <USBD_SetConfig+0x150>)
 80069c6:	781b      	ldrb	r3, [r3, #0]
 80069c8:	461a      	mov	r2, r3
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80069ce:	4b29      	ldr	r3, [pc, #164]	; (8006a74 <USBD_SetConfig+0x150>)
 80069d0:	781b      	ldrb	r3, [r3, #0]
 80069d2:	4619      	mov	r1, r3
 80069d4:	6878      	ldr	r0, [r7, #4]
 80069d6:	f7fe ffd6 	bl	8005986 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80069da:	6878      	ldr	r0, [r7, #4]
 80069dc:	f000 f9e9 	bl	8006db2 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80069e0:	e042      	b.n	8006a68 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80069e2:	4b24      	ldr	r3, [pc, #144]	; (8006a74 <USBD_SetConfig+0x150>)
 80069e4:	781b      	ldrb	r3, [r3, #0]
 80069e6:	461a      	mov	r2, r3
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	685b      	ldr	r3, [r3, #4]
 80069ec:	429a      	cmp	r2, r3
 80069ee:	d02a      	beq.n	8006a46 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	685b      	ldr	r3, [r3, #4]
 80069f4:	b2db      	uxtb	r3, r3
 80069f6:	4619      	mov	r1, r3
 80069f8:	6878      	ldr	r0, [r7, #4]
 80069fa:	f7fe ffc4 	bl	8005986 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80069fe:	4b1d      	ldr	r3, [pc, #116]	; (8006a74 <USBD_SetConfig+0x150>)
 8006a00:	781b      	ldrb	r3, [r3, #0]
 8006a02:	461a      	mov	r2, r3
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006a08:	4b1a      	ldr	r3, [pc, #104]	; (8006a74 <USBD_SetConfig+0x150>)
 8006a0a:	781b      	ldrb	r3, [r3, #0]
 8006a0c:	4619      	mov	r1, r3
 8006a0e:	6878      	ldr	r0, [r7, #4]
 8006a10:	f7fe ff9d 	bl	800594e <USBD_SetClassConfig>
 8006a14:	4603      	mov	r3, r0
 8006a16:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006a18:	7bfb      	ldrb	r3, [r7, #15]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d00f      	beq.n	8006a3e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8006a1e:	6839      	ldr	r1, [r7, #0]
 8006a20:	6878      	ldr	r0, [r7, #4]
 8006a22:	f000 f918 	bl	8006c56 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	685b      	ldr	r3, [r3, #4]
 8006a2a:	b2db      	uxtb	r3, r3
 8006a2c:	4619      	mov	r1, r3
 8006a2e:	6878      	ldr	r0, [r7, #4]
 8006a30:	f7fe ffa9 	bl	8005986 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2202      	movs	r2, #2
 8006a38:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006a3c:	e014      	b.n	8006a68 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006a3e:	6878      	ldr	r0, [r7, #4]
 8006a40:	f000 f9b7 	bl	8006db2 <USBD_CtlSendStatus>
      break;
 8006a44:	e010      	b.n	8006a68 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006a46:	6878      	ldr	r0, [r7, #4]
 8006a48:	f000 f9b3 	bl	8006db2 <USBD_CtlSendStatus>
      break;
 8006a4c:	e00c      	b.n	8006a68 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8006a4e:	6839      	ldr	r1, [r7, #0]
 8006a50:	6878      	ldr	r0, [r7, #4]
 8006a52:	f000 f900 	bl	8006c56 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006a56:	4b07      	ldr	r3, [pc, #28]	; (8006a74 <USBD_SetConfig+0x150>)
 8006a58:	781b      	ldrb	r3, [r3, #0]
 8006a5a:	4619      	mov	r1, r3
 8006a5c:	6878      	ldr	r0, [r7, #4]
 8006a5e:	f7fe ff92 	bl	8005986 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8006a62:	2303      	movs	r3, #3
 8006a64:	73fb      	strb	r3, [r7, #15]
      break;
 8006a66:	bf00      	nop
  }

  return ret;
 8006a68:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	3710      	adds	r7, #16
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	bd80      	pop	{r7, pc}
 8006a72:	bf00      	nop
 8006a74:	20000144 	.word	0x20000144

08006a78 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b082      	sub	sp, #8
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
 8006a80:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006a82:	683b      	ldr	r3, [r7, #0]
 8006a84:	88db      	ldrh	r3, [r3, #6]
 8006a86:	2b01      	cmp	r3, #1
 8006a88:	d004      	beq.n	8006a94 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006a8a:	6839      	ldr	r1, [r7, #0]
 8006a8c:	6878      	ldr	r0, [r7, #4]
 8006a8e:	f000 f8e2 	bl	8006c56 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006a92:	e023      	b.n	8006adc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a9a:	b2db      	uxtb	r3, r3
 8006a9c:	2b02      	cmp	r3, #2
 8006a9e:	dc02      	bgt.n	8006aa6 <USBD_GetConfig+0x2e>
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	dc03      	bgt.n	8006aac <USBD_GetConfig+0x34>
 8006aa4:	e015      	b.n	8006ad2 <USBD_GetConfig+0x5a>
 8006aa6:	2b03      	cmp	r3, #3
 8006aa8:	d00b      	beq.n	8006ac2 <USBD_GetConfig+0x4a>
 8006aaa:	e012      	b.n	8006ad2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2200      	movs	r2, #0
 8006ab0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	3308      	adds	r3, #8
 8006ab6:	2201      	movs	r2, #1
 8006ab8:	4619      	mov	r1, r3
 8006aba:	6878      	ldr	r0, [r7, #4]
 8006abc:	f000 f93c 	bl	8006d38 <USBD_CtlSendData>
        break;
 8006ac0:	e00c      	b.n	8006adc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	3304      	adds	r3, #4
 8006ac6:	2201      	movs	r2, #1
 8006ac8:	4619      	mov	r1, r3
 8006aca:	6878      	ldr	r0, [r7, #4]
 8006acc:	f000 f934 	bl	8006d38 <USBD_CtlSendData>
        break;
 8006ad0:	e004      	b.n	8006adc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8006ad2:	6839      	ldr	r1, [r7, #0]
 8006ad4:	6878      	ldr	r0, [r7, #4]
 8006ad6:	f000 f8be 	bl	8006c56 <USBD_CtlError>
        break;
 8006ada:	bf00      	nop
}
 8006adc:	bf00      	nop
 8006ade:	3708      	adds	r7, #8
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	bd80      	pop	{r7, pc}

08006ae4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	b082      	sub	sp, #8
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
 8006aec:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006af4:	b2db      	uxtb	r3, r3
 8006af6:	3b01      	subs	r3, #1
 8006af8:	2b02      	cmp	r3, #2
 8006afa:	d81e      	bhi.n	8006b3a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006afc:	683b      	ldr	r3, [r7, #0]
 8006afe:	88db      	ldrh	r3, [r3, #6]
 8006b00:	2b02      	cmp	r3, #2
 8006b02:	d004      	beq.n	8006b0e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006b04:	6839      	ldr	r1, [r7, #0]
 8006b06:	6878      	ldr	r0, [r7, #4]
 8006b08:	f000 f8a5 	bl	8006c56 <USBD_CtlError>
        break;
 8006b0c:	e01a      	b.n	8006b44 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	2201      	movs	r2, #1
 8006b12:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d005      	beq.n	8006b2a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	68db      	ldr	r3, [r3, #12]
 8006b22:	f043 0202 	orr.w	r2, r3, #2
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	330c      	adds	r3, #12
 8006b2e:	2202      	movs	r2, #2
 8006b30:	4619      	mov	r1, r3
 8006b32:	6878      	ldr	r0, [r7, #4]
 8006b34:	f000 f900 	bl	8006d38 <USBD_CtlSendData>
      break;
 8006b38:	e004      	b.n	8006b44 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8006b3a:	6839      	ldr	r1, [r7, #0]
 8006b3c:	6878      	ldr	r0, [r7, #4]
 8006b3e:	f000 f88a 	bl	8006c56 <USBD_CtlError>
      break;
 8006b42:	bf00      	nop
  }
}
 8006b44:	bf00      	nop
 8006b46:	3708      	adds	r7, #8
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	bd80      	pop	{r7, pc}

08006b4c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	b082      	sub	sp, #8
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
 8006b54:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	885b      	ldrh	r3, [r3, #2]
 8006b5a:	2b01      	cmp	r3, #1
 8006b5c:	d107      	bne.n	8006b6e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	2201      	movs	r2, #1
 8006b62:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006b66:	6878      	ldr	r0, [r7, #4]
 8006b68:	f000 f923 	bl	8006db2 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8006b6c:	e013      	b.n	8006b96 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	885b      	ldrh	r3, [r3, #2]
 8006b72:	2b02      	cmp	r3, #2
 8006b74:	d10b      	bne.n	8006b8e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	889b      	ldrh	r3, [r3, #4]
 8006b7a:	0a1b      	lsrs	r3, r3, #8
 8006b7c:	b29b      	uxth	r3, r3
 8006b7e:	b2da      	uxtb	r2, r3
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8006b86:	6878      	ldr	r0, [r7, #4]
 8006b88:	f000 f913 	bl	8006db2 <USBD_CtlSendStatus>
}
 8006b8c:	e003      	b.n	8006b96 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8006b8e:	6839      	ldr	r1, [r7, #0]
 8006b90:	6878      	ldr	r0, [r7, #4]
 8006b92:	f000 f860 	bl	8006c56 <USBD_CtlError>
}
 8006b96:	bf00      	nop
 8006b98:	3708      	adds	r7, #8
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	bd80      	pop	{r7, pc}

08006b9e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b9e:	b580      	push	{r7, lr}
 8006ba0:	b082      	sub	sp, #8
 8006ba2:	af00      	add	r7, sp, #0
 8006ba4:	6078      	str	r0, [r7, #4]
 8006ba6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006bae:	b2db      	uxtb	r3, r3
 8006bb0:	3b01      	subs	r3, #1
 8006bb2:	2b02      	cmp	r3, #2
 8006bb4:	d80b      	bhi.n	8006bce <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006bb6:	683b      	ldr	r3, [r7, #0]
 8006bb8:	885b      	ldrh	r3, [r3, #2]
 8006bba:	2b01      	cmp	r3, #1
 8006bbc:	d10c      	bne.n	8006bd8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006bc6:	6878      	ldr	r0, [r7, #4]
 8006bc8:	f000 f8f3 	bl	8006db2 <USBD_CtlSendStatus>
      }
      break;
 8006bcc:	e004      	b.n	8006bd8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8006bce:	6839      	ldr	r1, [r7, #0]
 8006bd0:	6878      	ldr	r0, [r7, #4]
 8006bd2:	f000 f840 	bl	8006c56 <USBD_CtlError>
      break;
 8006bd6:	e000      	b.n	8006bda <USBD_ClrFeature+0x3c>
      break;
 8006bd8:	bf00      	nop
  }
}
 8006bda:	bf00      	nop
 8006bdc:	3708      	adds	r7, #8
 8006bde:	46bd      	mov	sp, r7
 8006be0:	bd80      	pop	{r7, pc}

08006be2 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006be2:	b580      	push	{r7, lr}
 8006be4:	b084      	sub	sp, #16
 8006be6:	af00      	add	r7, sp, #0
 8006be8:	6078      	str	r0, [r7, #4]
 8006bea:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006bec:	683b      	ldr	r3, [r7, #0]
 8006bee:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	781a      	ldrb	r2, [r3, #0]
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	3301      	adds	r3, #1
 8006bfc:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	781a      	ldrb	r2, [r3, #0]
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	3301      	adds	r3, #1
 8006c0a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006c0c:	68f8      	ldr	r0, [r7, #12]
 8006c0e:	f7ff fa41 	bl	8006094 <SWAPBYTE>
 8006c12:	4603      	mov	r3, r0
 8006c14:	461a      	mov	r2, r3
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	3301      	adds	r3, #1
 8006c1e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	3301      	adds	r3, #1
 8006c24:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006c26:	68f8      	ldr	r0, [r7, #12]
 8006c28:	f7ff fa34 	bl	8006094 <SWAPBYTE>
 8006c2c:	4603      	mov	r3, r0
 8006c2e:	461a      	mov	r2, r3
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	3301      	adds	r3, #1
 8006c38:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	3301      	adds	r3, #1
 8006c3e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006c40:	68f8      	ldr	r0, [r7, #12]
 8006c42:	f7ff fa27 	bl	8006094 <SWAPBYTE>
 8006c46:	4603      	mov	r3, r0
 8006c48:	461a      	mov	r2, r3
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	80da      	strh	r2, [r3, #6]
}
 8006c4e:	bf00      	nop
 8006c50:	3710      	adds	r7, #16
 8006c52:	46bd      	mov	sp, r7
 8006c54:	bd80      	pop	{r7, pc}

08006c56 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c56:	b580      	push	{r7, lr}
 8006c58:	b082      	sub	sp, #8
 8006c5a:	af00      	add	r7, sp, #0
 8006c5c:	6078      	str	r0, [r7, #4]
 8006c5e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006c60:	2180      	movs	r1, #128	; 0x80
 8006c62:	6878      	ldr	r0, [r7, #4]
 8006c64:	f000 fc02 	bl	800746c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006c68:	2100      	movs	r1, #0
 8006c6a:	6878      	ldr	r0, [r7, #4]
 8006c6c:	f000 fbfe 	bl	800746c <USBD_LL_StallEP>
}
 8006c70:	bf00      	nop
 8006c72:	3708      	adds	r7, #8
 8006c74:	46bd      	mov	sp, r7
 8006c76:	bd80      	pop	{r7, pc}

08006c78 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	b086      	sub	sp, #24
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	60f8      	str	r0, [r7, #12]
 8006c80:	60b9      	str	r1, [r7, #8]
 8006c82:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006c84:	2300      	movs	r3, #0
 8006c86:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d036      	beq.n	8006cfc <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8006c92:	6938      	ldr	r0, [r7, #16]
 8006c94:	f000 f836 	bl	8006d04 <USBD_GetLen>
 8006c98:	4603      	mov	r3, r0
 8006c9a:	3301      	adds	r3, #1
 8006c9c:	b29b      	uxth	r3, r3
 8006c9e:	005b      	lsls	r3, r3, #1
 8006ca0:	b29a      	uxth	r2, r3
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006ca6:	7dfb      	ldrb	r3, [r7, #23]
 8006ca8:	68ba      	ldr	r2, [r7, #8]
 8006caa:	4413      	add	r3, r2
 8006cac:	687a      	ldr	r2, [r7, #4]
 8006cae:	7812      	ldrb	r2, [r2, #0]
 8006cb0:	701a      	strb	r2, [r3, #0]
  idx++;
 8006cb2:	7dfb      	ldrb	r3, [r7, #23]
 8006cb4:	3301      	adds	r3, #1
 8006cb6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006cb8:	7dfb      	ldrb	r3, [r7, #23]
 8006cba:	68ba      	ldr	r2, [r7, #8]
 8006cbc:	4413      	add	r3, r2
 8006cbe:	2203      	movs	r2, #3
 8006cc0:	701a      	strb	r2, [r3, #0]
  idx++;
 8006cc2:	7dfb      	ldrb	r3, [r7, #23]
 8006cc4:	3301      	adds	r3, #1
 8006cc6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006cc8:	e013      	b.n	8006cf2 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8006cca:	7dfb      	ldrb	r3, [r7, #23]
 8006ccc:	68ba      	ldr	r2, [r7, #8]
 8006cce:	4413      	add	r3, r2
 8006cd0:	693a      	ldr	r2, [r7, #16]
 8006cd2:	7812      	ldrb	r2, [r2, #0]
 8006cd4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006cd6:	693b      	ldr	r3, [r7, #16]
 8006cd8:	3301      	adds	r3, #1
 8006cda:	613b      	str	r3, [r7, #16]
    idx++;
 8006cdc:	7dfb      	ldrb	r3, [r7, #23]
 8006cde:	3301      	adds	r3, #1
 8006ce0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006ce2:	7dfb      	ldrb	r3, [r7, #23]
 8006ce4:	68ba      	ldr	r2, [r7, #8]
 8006ce6:	4413      	add	r3, r2
 8006ce8:	2200      	movs	r2, #0
 8006cea:	701a      	strb	r2, [r3, #0]
    idx++;
 8006cec:	7dfb      	ldrb	r3, [r7, #23]
 8006cee:	3301      	adds	r3, #1
 8006cf0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006cf2:	693b      	ldr	r3, [r7, #16]
 8006cf4:	781b      	ldrb	r3, [r3, #0]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d1e7      	bne.n	8006cca <USBD_GetString+0x52>
 8006cfa:	e000      	b.n	8006cfe <USBD_GetString+0x86>
    return;
 8006cfc:	bf00      	nop
  }
}
 8006cfe:	3718      	adds	r7, #24
 8006d00:	46bd      	mov	sp, r7
 8006d02:	bd80      	pop	{r7, pc}

08006d04 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006d04:	b480      	push	{r7}
 8006d06:	b085      	sub	sp, #20
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006d14:	e005      	b.n	8006d22 <USBD_GetLen+0x1e>
  {
    len++;
 8006d16:	7bfb      	ldrb	r3, [r7, #15]
 8006d18:	3301      	adds	r3, #1
 8006d1a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006d1c:	68bb      	ldr	r3, [r7, #8]
 8006d1e:	3301      	adds	r3, #1
 8006d20:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8006d22:	68bb      	ldr	r3, [r7, #8]
 8006d24:	781b      	ldrb	r3, [r3, #0]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d1f5      	bne.n	8006d16 <USBD_GetLen+0x12>
  }

  return len;
 8006d2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	3714      	adds	r7, #20
 8006d30:	46bd      	mov	sp, r7
 8006d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d36:	4770      	bx	lr

08006d38 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b084      	sub	sp, #16
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	60f8      	str	r0, [r7, #12]
 8006d40:	60b9      	str	r1, [r7, #8]
 8006d42:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	2202      	movs	r2, #2
 8006d48:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	687a      	ldr	r2, [r7, #4]
 8006d50:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	687a      	ldr	r2, [r7, #4]
 8006d56:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	68ba      	ldr	r2, [r7, #8]
 8006d5c:	2100      	movs	r1, #0
 8006d5e:	68f8      	ldr	r0, [r7, #12]
 8006d60:	f000 fc0d 	bl	800757e <USBD_LL_Transmit>

  return USBD_OK;
 8006d64:	2300      	movs	r3, #0
}
 8006d66:	4618      	mov	r0, r3
 8006d68:	3710      	adds	r7, #16
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	bd80      	pop	{r7, pc}

08006d6e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006d6e:	b580      	push	{r7, lr}
 8006d70:	b084      	sub	sp, #16
 8006d72:	af00      	add	r7, sp, #0
 8006d74:	60f8      	str	r0, [r7, #12]
 8006d76:	60b9      	str	r1, [r7, #8]
 8006d78:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	68ba      	ldr	r2, [r7, #8]
 8006d7e:	2100      	movs	r1, #0
 8006d80:	68f8      	ldr	r0, [r7, #12]
 8006d82:	f000 fbfc 	bl	800757e <USBD_LL_Transmit>

  return USBD_OK;
 8006d86:	2300      	movs	r3, #0
}
 8006d88:	4618      	mov	r0, r3
 8006d8a:	3710      	adds	r7, #16
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	bd80      	pop	{r7, pc}

08006d90 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006d90:	b580      	push	{r7, lr}
 8006d92:	b084      	sub	sp, #16
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	60f8      	str	r0, [r7, #12]
 8006d98:	60b9      	str	r1, [r7, #8]
 8006d9a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	68ba      	ldr	r2, [r7, #8]
 8006da0:	2100      	movs	r1, #0
 8006da2:	68f8      	ldr	r0, [r7, #12]
 8006da4:	f000 fc0c 	bl	80075c0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006da8:	2300      	movs	r3, #0
}
 8006daa:	4618      	mov	r0, r3
 8006dac:	3710      	adds	r7, #16
 8006dae:	46bd      	mov	sp, r7
 8006db0:	bd80      	pop	{r7, pc}

08006db2 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006db2:	b580      	push	{r7, lr}
 8006db4:	b082      	sub	sp, #8
 8006db6:	af00      	add	r7, sp, #0
 8006db8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	2204      	movs	r2, #4
 8006dbe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	2100      	movs	r1, #0
 8006dc8:	6878      	ldr	r0, [r7, #4]
 8006dca:	f000 fbd8 	bl	800757e <USBD_LL_Transmit>

  return USBD_OK;
 8006dce:	2300      	movs	r3, #0
}
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	3708      	adds	r7, #8
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	bd80      	pop	{r7, pc}

08006dd8 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b082      	sub	sp, #8
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2205      	movs	r2, #5
 8006de4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006de8:	2300      	movs	r3, #0
 8006dea:	2200      	movs	r2, #0
 8006dec:	2100      	movs	r1, #0
 8006dee:	6878      	ldr	r0, [r7, #4]
 8006df0:	f000 fbe6 	bl	80075c0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006df4:	2300      	movs	r3, #0
}
 8006df6:	4618      	mov	r0, r3
 8006df8:	3708      	adds	r7, #8
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	bd80      	pop	{r7, pc}
	...

08006e00 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006e04:	2200      	movs	r2, #0
 8006e06:	490e      	ldr	r1, [pc, #56]	; (8006e40 <MX_USB_DEVICE_Init+0x40>)
 8006e08:	480e      	ldr	r0, [pc, #56]	; (8006e44 <MX_USB_DEVICE_Init+0x44>)
 8006e0a:	f7fe fd23 	bl	8005854 <USBD_Init>
 8006e0e:	4603      	mov	r3, r0
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d001      	beq.n	8006e18 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006e14:	f7fa fb6a 	bl	80014ec <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8006e18:	490b      	ldr	r1, [pc, #44]	; (8006e48 <MX_USB_DEVICE_Init+0x48>)
 8006e1a:	480a      	ldr	r0, [pc, #40]	; (8006e44 <MX_USB_DEVICE_Init+0x44>)
 8006e1c:	f7fe fd4a 	bl	80058b4 <USBD_RegisterClass>
 8006e20:	4603      	mov	r3, r0
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d001      	beq.n	8006e2a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006e26:	f7fa fb61 	bl	80014ec <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006e2a:	4806      	ldr	r0, [pc, #24]	; (8006e44 <MX_USB_DEVICE_Init+0x44>)
 8006e2c:	f7fe fd78 	bl	8005920 <USBD_Start>
 8006e30:	4603      	mov	r3, r0
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d001      	beq.n	8006e3a <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 8006e36:	f7fa fb59 	bl	80014ec <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006e3a:	bf00      	nop
 8006e3c:	bd80      	pop	{r7, pc}
 8006e3e:	bf00      	nop
 8006e40:	200000cc 	.word	0x200000cc
 8006e44:	20000148 	.word	0x20000148
 8006e48:	2000000c 	.word	0x2000000c

08006e4c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006e4c:	b480      	push	{r7}
 8006e4e:	b083      	sub	sp, #12
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	4603      	mov	r3, r0
 8006e54:	6039      	str	r1, [r7, #0]
 8006e56:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	2212      	movs	r2, #18
 8006e5c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006e5e:	4b03      	ldr	r3, [pc, #12]	; (8006e6c <USBD_FS_DeviceDescriptor+0x20>)
}
 8006e60:	4618      	mov	r0, r3
 8006e62:	370c      	adds	r7, #12
 8006e64:	46bd      	mov	sp, r7
 8006e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6a:	4770      	bx	lr
 8006e6c:	200000e8 	.word	0x200000e8

08006e70 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006e70:	b480      	push	{r7}
 8006e72:	b083      	sub	sp, #12
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	4603      	mov	r3, r0
 8006e78:	6039      	str	r1, [r7, #0]
 8006e7a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006e7c:	683b      	ldr	r3, [r7, #0]
 8006e7e:	2204      	movs	r2, #4
 8006e80:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006e82:	4b03      	ldr	r3, [pc, #12]	; (8006e90 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006e84:	4618      	mov	r0, r3
 8006e86:	370c      	adds	r7, #12
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8e:	4770      	bx	lr
 8006e90:	200000fc 	.word	0x200000fc

08006e94 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006e94:	b580      	push	{r7, lr}
 8006e96:	b082      	sub	sp, #8
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	4603      	mov	r3, r0
 8006e9c:	6039      	str	r1, [r7, #0]
 8006e9e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006ea0:	79fb      	ldrb	r3, [r7, #7]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d105      	bne.n	8006eb2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006ea6:	683a      	ldr	r2, [r7, #0]
 8006ea8:	4907      	ldr	r1, [pc, #28]	; (8006ec8 <USBD_FS_ProductStrDescriptor+0x34>)
 8006eaa:	4808      	ldr	r0, [pc, #32]	; (8006ecc <USBD_FS_ProductStrDescriptor+0x38>)
 8006eac:	f7ff fee4 	bl	8006c78 <USBD_GetString>
 8006eb0:	e004      	b.n	8006ebc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006eb2:	683a      	ldr	r2, [r7, #0]
 8006eb4:	4904      	ldr	r1, [pc, #16]	; (8006ec8 <USBD_FS_ProductStrDescriptor+0x34>)
 8006eb6:	4805      	ldr	r0, [pc, #20]	; (8006ecc <USBD_FS_ProductStrDescriptor+0x38>)
 8006eb8:	f7ff fede 	bl	8006c78 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006ebc:	4b02      	ldr	r3, [pc, #8]	; (8006ec8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	3708      	adds	r7, #8
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	bd80      	pop	{r7, pc}
 8006ec6:	bf00      	nop
 8006ec8:	20000424 	.word	0x20000424
 8006ecc:	08008840 	.word	0x08008840

08006ed0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	b082      	sub	sp, #8
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	4603      	mov	r3, r0
 8006ed8:	6039      	str	r1, [r7, #0]
 8006eda:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006edc:	683a      	ldr	r2, [r7, #0]
 8006ede:	4904      	ldr	r1, [pc, #16]	; (8006ef0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006ee0:	4804      	ldr	r0, [pc, #16]	; (8006ef4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8006ee2:	f7ff fec9 	bl	8006c78 <USBD_GetString>
  return USBD_StrDesc;
 8006ee6:	4b02      	ldr	r3, [pc, #8]	; (8006ef0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8006ee8:	4618      	mov	r0, r3
 8006eea:	3708      	adds	r7, #8
 8006eec:	46bd      	mov	sp, r7
 8006eee:	bd80      	pop	{r7, pc}
 8006ef0:	20000424 	.word	0x20000424
 8006ef4:	08008858 	.word	0x08008858

08006ef8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006ef8:	b580      	push	{r7, lr}
 8006efa:	b082      	sub	sp, #8
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	4603      	mov	r3, r0
 8006f00:	6039      	str	r1, [r7, #0]
 8006f02:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006f04:	683b      	ldr	r3, [r7, #0]
 8006f06:	221a      	movs	r2, #26
 8006f08:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8006f0a:	f000 f843 	bl	8006f94 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8006f0e:	4b02      	ldr	r3, [pc, #8]	; (8006f18 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006f10:	4618      	mov	r0, r3
 8006f12:	3708      	adds	r7, #8
 8006f14:	46bd      	mov	sp, r7
 8006f16:	bd80      	pop	{r7, pc}
 8006f18:	20000100 	.word	0x20000100

08006f1c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006f1c:	b580      	push	{r7, lr}
 8006f1e:	b082      	sub	sp, #8
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	4603      	mov	r3, r0
 8006f24:	6039      	str	r1, [r7, #0]
 8006f26:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006f28:	79fb      	ldrb	r3, [r7, #7]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d105      	bne.n	8006f3a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006f2e:	683a      	ldr	r2, [r7, #0]
 8006f30:	4907      	ldr	r1, [pc, #28]	; (8006f50 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006f32:	4808      	ldr	r0, [pc, #32]	; (8006f54 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006f34:	f7ff fea0 	bl	8006c78 <USBD_GetString>
 8006f38:	e004      	b.n	8006f44 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006f3a:	683a      	ldr	r2, [r7, #0]
 8006f3c:	4904      	ldr	r1, [pc, #16]	; (8006f50 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006f3e:	4805      	ldr	r0, [pc, #20]	; (8006f54 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006f40:	f7ff fe9a 	bl	8006c78 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006f44:	4b02      	ldr	r3, [pc, #8]	; (8006f50 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8006f46:	4618      	mov	r0, r3
 8006f48:	3708      	adds	r7, #8
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	bd80      	pop	{r7, pc}
 8006f4e:	bf00      	nop
 8006f50:	20000424 	.word	0x20000424
 8006f54:	0800886c 	.word	0x0800886c

08006f58 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006f58:	b580      	push	{r7, lr}
 8006f5a:	b082      	sub	sp, #8
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	4603      	mov	r3, r0
 8006f60:	6039      	str	r1, [r7, #0]
 8006f62:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006f64:	79fb      	ldrb	r3, [r7, #7]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d105      	bne.n	8006f76 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006f6a:	683a      	ldr	r2, [r7, #0]
 8006f6c:	4907      	ldr	r1, [pc, #28]	; (8006f8c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006f6e:	4808      	ldr	r0, [pc, #32]	; (8006f90 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006f70:	f7ff fe82 	bl	8006c78 <USBD_GetString>
 8006f74:	e004      	b.n	8006f80 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006f76:	683a      	ldr	r2, [r7, #0]
 8006f78:	4904      	ldr	r1, [pc, #16]	; (8006f8c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006f7a:	4805      	ldr	r0, [pc, #20]	; (8006f90 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006f7c:	f7ff fe7c 	bl	8006c78 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006f80:	4b02      	ldr	r3, [pc, #8]	; (8006f8c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8006f82:	4618      	mov	r0, r3
 8006f84:	3708      	adds	r7, #8
 8006f86:	46bd      	mov	sp, r7
 8006f88:	bd80      	pop	{r7, pc}
 8006f8a:	bf00      	nop
 8006f8c:	20000424 	.word	0x20000424
 8006f90:	08008878 	.word	0x08008878

08006f94 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006f94:	b580      	push	{r7, lr}
 8006f96:	b084      	sub	sp, #16
 8006f98:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006f9a:	4b0f      	ldr	r3, [pc, #60]	; (8006fd8 <Get_SerialNum+0x44>)
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006fa0:	4b0e      	ldr	r3, [pc, #56]	; (8006fdc <Get_SerialNum+0x48>)
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8006fa6:	4b0e      	ldr	r3, [pc, #56]	; (8006fe0 <Get_SerialNum+0x4c>)
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8006fac:	68fa      	ldr	r2, [r7, #12]
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	4413      	add	r3, r2
 8006fb2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d009      	beq.n	8006fce <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8006fba:	2208      	movs	r2, #8
 8006fbc:	4909      	ldr	r1, [pc, #36]	; (8006fe4 <Get_SerialNum+0x50>)
 8006fbe:	68f8      	ldr	r0, [r7, #12]
 8006fc0:	f000 f814 	bl	8006fec <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006fc4:	2204      	movs	r2, #4
 8006fc6:	4908      	ldr	r1, [pc, #32]	; (8006fe8 <Get_SerialNum+0x54>)
 8006fc8:	68b8      	ldr	r0, [r7, #8]
 8006fca:	f000 f80f 	bl	8006fec <IntToUnicode>
  }
}
 8006fce:	bf00      	nop
 8006fd0:	3710      	adds	r7, #16
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	bd80      	pop	{r7, pc}
 8006fd6:	bf00      	nop
 8006fd8:	1fff7a10 	.word	0x1fff7a10
 8006fdc:	1fff7a14 	.word	0x1fff7a14
 8006fe0:	1fff7a18 	.word	0x1fff7a18
 8006fe4:	20000102 	.word	0x20000102
 8006fe8:	20000112 	.word	0x20000112

08006fec <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006fec:	b480      	push	{r7}
 8006fee:	b087      	sub	sp, #28
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	60f8      	str	r0, [r7, #12]
 8006ff4:	60b9      	str	r1, [r7, #8]
 8006ff6:	4613      	mov	r3, r2
 8006ff8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8006ffe:	2300      	movs	r3, #0
 8007000:	75fb      	strb	r3, [r7, #23]
 8007002:	e027      	b.n	8007054 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	0f1b      	lsrs	r3, r3, #28
 8007008:	2b09      	cmp	r3, #9
 800700a:	d80b      	bhi.n	8007024 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	0f1b      	lsrs	r3, r3, #28
 8007010:	b2da      	uxtb	r2, r3
 8007012:	7dfb      	ldrb	r3, [r7, #23]
 8007014:	005b      	lsls	r3, r3, #1
 8007016:	4619      	mov	r1, r3
 8007018:	68bb      	ldr	r3, [r7, #8]
 800701a:	440b      	add	r3, r1
 800701c:	3230      	adds	r2, #48	; 0x30
 800701e:	b2d2      	uxtb	r2, r2
 8007020:	701a      	strb	r2, [r3, #0]
 8007022:	e00a      	b.n	800703a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	0f1b      	lsrs	r3, r3, #28
 8007028:	b2da      	uxtb	r2, r3
 800702a:	7dfb      	ldrb	r3, [r7, #23]
 800702c:	005b      	lsls	r3, r3, #1
 800702e:	4619      	mov	r1, r3
 8007030:	68bb      	ldr	r3, [r7, #8]
 8007032:	440b      	add	r3, r1
 8007034:	3237      	adds	r2, #55	; 0x37
 8007036:	b2d2      	uxtb	r2, r2
 8007038:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	011b      	lsls	r3, r3, #4
 800703e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007040:	7dfb      	ldrb	r3, [r7, #23]
 8007042:	005b      	lsls	r3, r3, #1
 8007044:	3301      	adds	r3, #1
 8007046:	68ba      	ldr	r2, [r7, #8]
 8007048:	4413      	add	r3, r2
 800704a:	2200      	movs	r2, #0
 800704c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800704e:	7dfb      	ldrb	r3, [r7, #23]
 8007050:	3301      	adds	r3, #1
 8007052:	75fb      	strb	r3, [r7, #23]
 8007054:	7dfa      	ldrb	r2, [r7, #23]
 8007056:	79fb      	ldrb	r3, [r7, #7]
 8007058:	429a      	cmp	r2, r3
 800705a:	d3d3      	bcc.n	8007004 <IntToUnicode+0x18>
  }
}
 800705c:	bf00      	nop
 800705e:	bf00      	nop
 8007060:	371c      	adds	r7, #28
 8007062:	46bd      	mov	sp, r7
 8007064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007068:	4770      	bx	lr
	...

0800706c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800706c:	b580      	push	{r7, lr}
 800706e:	b08a      	sub	sp, #40	; 0x28
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007074:	f107 0314 	add.w	r3, r7, #20
 8007078:	2200      	movs	r2, #0
 800707a:	601a      	str	r2, [r3, #0]
 800707c:	605a      	str	r2, [r3, #4]
 800707e:	609a      	str	r2, [r3, #8]
 8007080:	60da      	str	r2, [r3, #12]
 8007082:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800708c:	d147      	bne.n	800711e <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800708e:	2300      	movs	r3, #0
 8007090:	613b      	str	r3, [r7, #16]
 8007092:	4b25      	ldr	r3, [pc, #148]	; (8007128 <HAL_PCD_MspInit+0xbc>)
 8007094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007096:	4a24      	ldr	r2, [pc, #144]	; (8007128 <HAL_PCD_MspInit+0xbc>)
 8007098:	f043 0301 	orr.w	r3, r3, #1
 800709c:	6313      	str	r3, [r2, #48]	; 0x30
 800709e:	4b22      	ldr	r3, [pc, #136]	; (8007128 <HAL_PCD_MspInit+0xbc>)
 80070a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070a2:	f003 0301 	and.w	r3, r3, #1
 80070a6:	613b      	str	r3, [r7, #16]
 80070a8:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80070aa:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80070ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80070b0:	2302      	movs	r3, #2
 80070b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80070b4:	2300      	movs	r3, #0
 80070b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80070b8:	2303      	movs	r3, #3
 80070ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80070bc:	230a      	movs	r3, #10
 80070be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80070c0:	f107 0314 	add.w	r3, r7, #20
 80070c4:	4619      	mov	r1, r3
 80070c6:	4819      	ldr	r0, [pc, #100]	; (800712c <HAL_PCD_MspInit+0xc0>)
 80070c8:	f7fa fc56 	bl	8001978 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80070cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80070d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80070d2:	2300      	movs	r3, #0
 80070d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80070d6:	2300      	movs	r3, #0
 80070d8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80070da:	f107 0314 	add.w	r3, r7, #20
 80070de:	4619      	mov	r1, r3
 80070e0:	4812      	ldr	r0, [pc, #72]	; (800712c <HAL_PCD_MspInit+0xc0>)
 80070e2:	f7fa fc49 	bl	8001978 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80070e6:	4b10      	ldr	r3, [pc, #64]	; (8007128 <HAL_PCD_MspInit+0xbc>)
 80070e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070ea:	4a0f      	ldr	r2, [pc, #60]	; (8007128 <HAL_PCD_MspInit+0xbc>)
 80070ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070f0:	6353      	str	r3, [r2, #52]	; 0x34
 80070f2:	2300      	movs	r3, #0
 80070f4:	60fb      	str	r3, [r7, #12]
 80070f6:	4b0c      	ldr	r3, [pc, #48]	; (8007128 <HAL_PCD_MspInit+0xbc>)
 80070f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070fa:	4a0b      	ldr	r2, [pc, #44]	; (8007128 <HAL_PCD_MspInit+0xbc>)
 80070fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007100:	6453      	str	r3, [r2, #68]	; 0x44
 8007102:	4b09      	ldr	r3, [pc, #36]	; (8007128 <HAL_PCD_MspInit+0xbc>)
 8007104:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007106:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800710a:	60fb      	str	r3, [r7, #12]
 800710c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800710e:	2200      	movs	r2, #0
 8007110:	2100      	movs	r1, #0
 8007112:	2043      	movs	r0, #67	; 0x43
 8007114:	f7fa fbf9 	bl	800190a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007118:	2043      	movs	r0, #67	; 0x43
 800711a:	f7fa fc12 	bl	8001942 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800711e:	bf00      	nop
 8007120:	3728      	adds	r7, #40	; 0x28
 8007122:	46bd      	mov	sp, r7
 8007124:	bd80      	pop	{r7, pc}
 8007126:	bf00      	nop
 8007128:	40023800 	.word	0x40023800
 800712c:	40020000 	.word	0x40020000

08007130 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007130:	b580      	push	{r7, lr}
 8007132:	b082      	sub	sp, #8
 8007134:	af00      	add	r7, sp, #0
 8007136:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007144:	4619      	mov	r1, r3
 8007146:	4610      	mov	r0, r2
 8007148:	f7fe fc37 	bl	80059ba <USBD_LL_SetupStage>
}
 800714c:	bf00      	nop
 800714e:	3708      	adds	r7, #8
 8007150:	46bd      	mov	sp, r7
 8007152:	bd80      	pop	{r7, pc}

08007154 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007154:	b580      	push	{r7, lr}
 8007156:	b082      	sub	sp, #8
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]
 800715c:	460b      	mov	r3, r1
 800715e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8007166:	78fa      	ldrb	r2, [r7, #3]
 8007168:	6879      	ldr	r1, [r7, #4]
 800716a:	4613      	mov	r3, r2
 800716c:	00db      	lsls	r3, r3, #3
 800716e:	4413      	add	r3, r2
 8007170:	009b      	lsls	r3, r3, #2
 8007172:	440b      	add	r3, r1
 8007174:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8007178:	681a      	ldr	r2, [r3, #0]
 800717a:	78fb      	ldrb	r3, [r7, #3]
 800717c:	4619      	mov	r1, r3
 800717e:	f7fe fc71 	bl	8005a64 <USBD_LL_DataOutStage>
}
 8007182:	bf00      	nop
 8007184:	3708      	adds	r7, #8
 8007186:	46bd      	mov	sp, r7
 8007188:	bd80      	pop	{r7, pc}

0800718a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800718a:	b580      	push	{r7, lr}
 800718c:	b082      	sub	sp, #8
 800718e:	af00      	add	r7, sp, #0
 8007190:	6078      	str	r0, [r7, #4]
 8007192:	460b      	mov	r3, r1
 8007194:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800719c:	78fa      	ldrb	r2, [r7, #3]
 800719e:	6879      	ldr	r1, [r7, #4]
 80071a0:	4613      	mov	r3, r2
 80071a2:	00db      	lsls	r3, r3, #3
 80071a4:	4413      	add	r3, r2
 80071a6:	009b      	lsls	r3, r3, #2
 80071a8:	440b      	add	r3, r1
 80071aa:	334c      	adds	r3, #76	; 0x4c
 80071ac:	681a      	ldr	r2, [r3, #0]
 80071ae:	78fb      	ldrb	r3, [r7, #3]
 80071b0:	4619      	mov	r1, r3
 80071b2:	f7fe fd0a 	bl	8005bca <USBD_LL_DataInStage>
}
 80071b6:	bf00      	nop
 80071b8:	3708      	adds	r7, #8
 80071ba:	46bd      	mov	sp, r7
 80071bc:	bd80      	pop	{r7, pc}

080071be <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80071be:	b580      	push	{r7, lr}
 80071c0:	b082      	sub	sp, #8
 80071c2:	af00      	add	r7, sp, #0
 80071c4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80071cc:	4618      	mov	r0, r3
 80071ce:	f7fe fe3e 	bl	8005e4e <USBD_LL_SOF>
}
 80071d2:	bf00      	nop
 80071d4:	3708      	adds	r7, #8
 80071d6:	46bd      	mov	sp, r7
 80071d8:	bd80      	pop	{r7, pc}

080071da <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80071da:	b580      	push	{r7, lr}
 80071dc:	b084      	sub	sp, #16
 80071de:	af00      	add	r7, sp, #0
 80071e0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80071e2:	2301      	movs	r3, #1
 80071e4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	68db      	ldr	r3, [r3, #12]
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d102      	bne.n	80071f4 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80071ee:	2300      	movs	r3, #0
 80071f0:	73fb      	strb	r3, [r7, #15]
 80071f2:	e008      	b.n	8007206 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	68db      	ldr	r3, [r3, #12]
 80071f8:	2b02      	cmp	r3, #2
 80071fa:	d102      	bne.n	8007202 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80071fc:	2301      	movs	r3, #1
 80071fe:	73fb      	strb	r3, [r7, #15]
 8007200:	e001      	b.n	8007206 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8007202:	f7fa f973 	bl	80014ec <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800720c:	7bfa      	ldrb	r2, [r7, #15]
 800720e:	4611      	mov	r1, r2
 8007210:	4618      	mov	r0, r3
 8007212:	f7fe fdde 	bl	8005dd2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800721c:	4618      	mov	r0, r3
 800721e:	f7fe fd86 	bl	8005d2e <USBD_LL_Reset>
}
 8007222:	bf00      	nop
 8007224:	3710      	adds	r7, #16
 8007226:	46bd      	mov	sp, r7
 8007228:	bd80      	pop	{r7, pc}
	...

0800722c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800722c:	b580      	push	{r7, lr}
 800722e:	b082      	sub	sp, #8
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800723a:	4618      	mov	r0, r3
 800723c:	f7fe fdd9 	bl	8005df2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	687a      	ldr	r2, [r7, #4]
 800724c:	6812      	ldr	r2, [r2, #0]
 800724e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007252:	f043 0301 	orr.w	r3, r3, #1
 8007256:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	6a1b      	ldr	r3, [r3, #32]
 800725c:	2b00      	cmp	r3, #0
 800725e:	d005      	beq.n	800726c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007260:	4b04      	ldr	r3, [pc, #16]	; (8007274 <HAL_PCD_SuspendCallback+0x48>)
 8007262:	691b      	ldr	r3, [r3, #16]
 8007264:	4a03      	ldr	r2, [pc, #12]	; (8007274 <HAL_PCD_SuspendCallback+0x48>)
 8007266:	f043 0306 	orr.w	r3, r3, #6
 800726a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800726c:	bf00      	nop
 800726e:	3708      	adds	r7, #8
 8007270:	46bd      	mov	sp, r7
 8007272:	bd80      	pop	{r7, pc}
 8007274:	e000ed00 	.word	0xe000ed00

08007278 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007278:	b580      	push	{r7, lr}
 800727a:	b082      	sub	sp, #8
 800727c:	af00      	add	r7, sp, #0
 800727e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007286:	4618      	mov	r0, r3
 8007288:	f7fe fdc9 	bl	8005e1e <USBD_LL_Resume>
}
 800728c:	bf00      	nop
 800728e:	3708      	adds	r7, #8
 8007290:	46bd      	mov	sp, r7
 8007292:	bd80      	pop	{r7, pc}

08007294 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007294:	b580      	push	{r7, lr}
 8007296:	b082      	sub	sp, #8
 8007298:	af00      	add	r7, sp, #0
 800729a:	6078      	str	r0, [r7, #4]
 800729c:	460b      	mov	r3, r1
 800729e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80072a6:	78fa      	ldrb	r2, [r7, #3]
 80072a8:	4611      	mov	r1, r2
 80072aa:	4618      	mov	r0, r3
 80072ac:	f7fe fe21 	bl	8005ef2 <USBD_LL_IsoOUTIncomplete>
}
 80072b0:	bf00      	nop
 80072b2:	3708      	adds	r7, #8
 80072b4:	46bd      	mov	sp, r7
 80072b6:	bd80      	pop	{r7, pc}

080072b8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80072b8:	b580      	push	{r7, lr}
 80072ba:	b082      	sub	sp, #8
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
 80072c0:	460b      	mov	r3, r1
 80072c2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80072ca:	78fa      	ldrb	r2, [r7, #3]
 80072cc:	4611      	mov	r1, r2
 80072ce:	4618      	mov	r0, r3
 80072d0:	f7fe fddd 	bl	8005e8e <USBD_LL_IsoINIncomplete>
}
 80072d4:	bf00      	nop
 80072d6:	3708      	adds	r7, #8
 80072d8:	46bd      	mov	sp, r7
 80072da:	bd80      	pop	{r7, pc}

080072dc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80072dc:	b580      	push	{r7, lr}
 80072de:	b082      	sub	sp, #8
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80072ea:	4618      	mov	r0, r3
 80072ec:	f7fe fe33 	bl	8005f56 <USBD_LL_DevConnected>
}
 80072f0:	bf00      	nop
 80072f2:	3708      	adds	r7, #8
 80072f4:	46bd      	mov	sp, r7
 80072f6:	bd80      	pop	{r7, pc}

080072f8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80072f8:	b580      	push	{r7, lr}
 80072fa:	b082      	sub	sp, #8
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007306:	4618      	mov	r0, r3
 8007308:	f7fe fe30 	bl	8005f6c <USBD_LL_DevDisconnected>
}
 800730c:	bf00      	nop
 800730e:	3708      	adds	r7, #8
 8007310:	46bd      	mov	sp, r7
 8007312:	bd80      	pop	{r7, pc}

08007314 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007314:	b580      	push	{r7, lr}
 8007316:	b082      	sub	sp, #8
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	781b      	ldrb	r3, [r3, #0]
 8007320:	2b00      	cmp	r3, #0
 8007322:	d13c      	bne.n	800739e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007324:	4a20      	ldr	r2, [pc, #128]	; (80073a8 <USBD_LL_Init+0x94>)
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	4a1e      	ldr	r2, [pc, #120]	; (80073a8 <USBD_LL_Init+0x94>)
 8007330:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007334:	4b1c      	ldr	r3, [pc, #112]	; (80073a8 <USBD_LL_Init+0x94>)
 8007336:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800733a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800733c:	4b1a      	ldr	r3, [pc, #104]	; (80073a8 <USBD_LL_Init+0x94>)
 800733e:	2204      	movs	r2, #4
 8007340:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007342:	4b19      	ldr	r3, [pc, #100]	; (80073a8 <USBD_LL_Init+0x94>)
 8007344:	2202      	movs	r2, #2
 8007346:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007348:	4b17      	ldr	r3, [pc, #92]	; (80073a8 <USBD_LL_Init+0x94>)
 800734a:	2200      	movs	r2, #0
 800734c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800734e:	4b16      	ldr	r3, [pc, #88]	; (80073a8 <USBD_LL_Init+0x94>)
 8007350:	2202      	movs	r2, #2
 8007352:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8007354:	4b14      	ldr	r3, [pc, #80]	; (80073a8 <USBD_LL_Init+0x94>)
 8007356:	2201      	movs	r2, #1
 8007358:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800735a:	4b13      	ldr	r3, [pc, #76]	; (80073a8 <USBD_LL_Init+0x94>)
 800735c:	2200      	movs	r2, #0
 800735e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007360:	4b11      	ldr	r3, [pc, #68]	; (80073a8 <USBD_LL_Init+0x94>)
 8007362:	2200      	movs	r2, #0
 8007364:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8007366:	4b10      	ldr	r3, [pc, #64]	; (80073a8 <USBD_LL_Init+0x94>)
 8007368:	2201      	movs	r2, #1
 800736a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800736c:	4b0e      	ldr	r3, [pc, #56]	; (80073a8 <USBD_LL_Init+0x94>)
 800736e:	2200      	movs	r2, #0
 8007370:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007372:	480d      	ldr	r0, [pc, #52]	; (80073a8 <USBD_LL_Init+0x94>)
 8007374:	f7fa fcdd 	bl	8001d32 <HAL_PCD_Init>
 8007378:	4603      	mov	r3, r0
 800737a:	2b00      	cmp	r3, #0
 800737c:	d001      	beq.n	8007382 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800737e:	f7fa f8b5 	bl	80014ec <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007382:	2180      	movs	r1, #128	; 0x80
 8007384:	4808      	ldr	r0, [pc, #32]	; (80073a8 <USBD_LL_Init+0x94>)
 8007386:	f7fb ff1c 	bl	80031c2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800738a:	2240      	movs	r2, #64	; 0x40
 800738c:	2100      	movs	r1, #0
 800738e:	4806      	ldr	r0, [pc, #24]	; (80073a8 <USBD_LL_Init+0x94>)
 8007390:	f7fb fed0 	bl	8003134 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007394:	2280      	movs	r2, #128	; 0x80
 8007396:	2101      	movs	r1, #1
 8007398:	4803      	ldr	r0, [pc, #12]	; (80073a8 <USBD_LL_Init+0x94>)
 800739a:	f7fb fecb 	bl	8003134 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800739e:	2300      	movs	r3, #0
}
 80073a0:	4618      	mov	r0, r3
 80073a2:	3708      	adds	r7, #8
 80073a4:	46bd      	mov	sp, r7
 80073a6:	bd80      	pop	{r7, pc}
 80073a8:	20000624 	.word	0x20000624

080073ac <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80073ac:	b580      	push	{r7, lr}
 80073ae:	b084      	sub	sp, #16
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80073b4:	2300      	movs	r3, #0
 80073b6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80073b8:	2300      	movs	r3, #0
 80073ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80073c2:	4618      	mov	r0, r3
 80073c4:	f7fa fdd2 	bl	8001f6c <HAL_PCD_Start>
 80073c8:	4603      	mov	r3, r0
 80073ca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80073cc:	7bfb      	ldrb	r3, [r7, #15]
 80073ce:	4618      	mov	r0, r3
 80073d0:	f000 f930 	bl	8007634 <USBD_Get_USB_Status>
 80073d4:	4603      	mov	r3, r0
 80073d6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80073d8:	7bbb      	ldrb	r3, [r7, #14]
}
 80073da:	4618      	mov	r0, r3
 80073dc:	3710      	adds	r7, #16
 80073de:	46bd      	mov	sp, r7
 80073e0:	bd80      	pop	{r7, pc}

080073e2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80073e2:	b580      	push	{r7, lr}
 80073e4:	b084      	sub	sp, #16
 80073e6:	af00      	add	r7, sp, #0
 80073e8:	6078      	str	r0, [r7, #4]
 80073ea:	4608      	mov	r0, r1
 80073ec:	4611      	mov	r1, r2
 80073ee:	461a      	mov	r2, r3
 80073f0:	4603      	mov	r3, r0
 80073f2:	70fb      	strb	r3, [r7, #3]
 80073f4:	460b      	mov	r3, r1
 80073f6:	70bb      	strb	r3, [r7, #2]
 80073f8:	4613      	mov	r3, r2
 80073fa:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80073fc:	2300      	movs	r3, #0
 80073fe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007400:	2300      	movs	r3, #0
 8007402:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800740a:	78bb      	ldrb	r3, [r7, #2]
 800740c:	883a      	ldrh	r2, [r7, #0]
 800740e:	78f9      	ldrb	r1, [r7, #3]
 8007410:	f7fb faa3 	bl	800295a <HAL_PCD_EP_Open>
 8007414:	4603      	mov	r3, r0
 8007416:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007418:	7bfb      	ldrb	r3, [r7, #15]
 800741a:	4618      	mov	r0, r3
 800741c:	f000 f90a 	bl	8007634 <USBD_Get_USB_Status>
 8007420:	4603      	mov	r3, r0
 8007422:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007424:	7bbb      	ldrb	r3, [r7, #14]
}
 8007426:	4618      	mov	r0, r3
 8007428:	3710      	adds	r7, #16
 800742a:	46bd      	mov	sp, r7
 800742c:	bd80      	pop	{r7, pc}

0800742e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800742e:	b580      	push	{r7, lr}
 8007430:	b084      	sub	sp, #16
 8007432:	af00      	add	r7, sp, #0
 8007434:	6078      	str	r0, [r7, #4]
 8007436:	460b      	mov	r3, r1
 8007438:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800743a:	2300      	movs	r3, #0
 800743c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800743e:	2300      	movs	r3, #0
 8007440:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007448:	78fa      	ldrb	r2, [r7, #3]
 800744a:	4611      	mov	r1, r2
 800744c:	4618      	mov	r0, r3
 800744e:	f7fb faec 	bl	8002a2a <HAL_PCD_EP_Close>
 8007452:	4603      	mov	r3, r0
 8007454:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007456:	7bfb      	ldrb	r3, [r7, #15]
 8007458:	4618      	mov	r0, r3
 800745a:	f000 f8eb 	bl	8007634 <USBD_Get_USB_Status>
 800745e:	4603      	mov	r3, r0
 8007460:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007462:	7bbb      	ldrb	r3, [r7, #14]
}
 8007464:	4618      	mov	r0, r3
 8007466:	3710      	adds	r7, #16
 8007468:	46bd      	mov	sp, r7
 800746a:	bd80      	pop	{r7, pc}

0800746c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800746c:	b580      	push	{r7, lr}
 800746e:	b084      	sub	sp, #16
 8007470:	af00      	add	r7, sp, #0
 8007472:	6078      	str	r0, [r7, #4]
 8007474:	460b      	mov	r3, r1
 8007476:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007478:	2300      	movs	r3, #0
 800747a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800747c:	2300      	movs	r3, #0
 800747e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007486:	78fa      	ldrb	r2, [r7, #3]
 8007488:	4611      	mov	r1, r2
 800748a:	4618      	mov	r0, r3
 800748c:	f7fb fbac 	bl	8002be8 <HAL_PCD_EP_SetStall>
 8007490:	4603      	mov	r3, r0
 8007492:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007494:	7bfb      	ldrb	r3, [r7, #15]
 8007496:	4618      	mov	r0, r3
 8007498:	f000 f8cc 	bl	8007634 <USBD_Get_USB_Status>
 800749c:	4603      	mov	r3, r0
 800749e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80074a0:	7bbb      	ldrb	r3, [r7, #14]
}
 80074a2:	4618      	mov	r0, r3
 80074a4:	3710      	adds	r7, #16
 80074a6:	46bd      	mov	sp, r7
 80074a8:	bd80      	pop	{r7, pc}

080074aa <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80074aa:	b580      	push	{r7, lr}
 80074ac:	b084      	sub	sp, #16
 80074ae:	af00      	add	r7, sp, #0
 80074b0:	6078      	str	r0, [r7, #4]
 80074b2:	460b      	mov	r3, r1
 80074b4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80074b6:	2300      	movs	r3, #0
 80074b8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80074ba:	2300      	movs	r3, #0
 80074bc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80074c4:	78fa      	ldrb	r2, [r7, #3]
 80074c6:	4611      	mov	r1, r2
 80074c8:	4618      	mov	r0, r3
 80074ca:	f7fb fbf1 	bl	8002cb0 <HAL_PCD_EP_ClrStall>
 80074ce:	4603      	mov	r3, r0
 80074d0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80074d2:	7bfb      	ldrb	r3, [r7, #15]
 80074d4:	4618      	mov	r0, r3
 80074d6:	f000 f8ad 	bl	8007634 <USBD_Get_USB_Status>
 80074da:	4603      	mov	r3, r0
 80074dc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80074de:	7bbb      	ldrb	r3, [r7, #14]
}
 80074e0:	4618      	mov	r0, r3
 80074e2:	3710      	adds	r7, #16
 80074e4:	46bd      	mov	sp, r7
 80074e6:	bd80      	pop	{r7, pc}

080074e8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80074e8:	b480      	push	{r7}
 80074ea:	b085      	sub	sp, #20
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
 80074f0:	460b      	mov	r3, r1
 80074f2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80074fa:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80074fc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007500:	2b00      	cmp	r3, #0
 8007502:	da0b      	bge.n	800751c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007504:	78fb      	ldrb	r3, [r7, #3]
 8007506:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800750a:	68f9      	ldr	r1, [r7, #12]
 800750c:	4613      	mov	r3, r2
 800750e:	00db      	lsls	r3, r3, #3
 8007510:	4413      	add	r3, r2
 8007512:	009b      	lsls	r3, r3, #2
 8007514:	440b      	add	r3, r1
 8007516:	333e      	adds	r3, #62	; 0x3e
 8007518:	781b      	ldrb	r3, [r3, #0]
 800751a:	e00b      	b.n	8007534 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800751c:	78fb      	ldrb	r3, [r7, #3]
 800751e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007522:	68f9      	ldr	r1, [r7, #12]
 8007524:	4613      	mov	r3, r2
 8007526:	00db      	lsls	r3, r3, #3
 8007528:	4413      	add	r3, r2
 800752a:	009b      	lsls	r3, r3, #2
 800752c:	440b      	add	r3, r1
 800752e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8007532:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007534:	4618      	mov	r0, r3
 8007536:	3714      	adds	r7, #20
 8007538:	46bd      	mov	sp, r7
 800753a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753e:	4770      	bx	lr

08007540 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007540:	b580      	push	{r7, lr}
 8007542:	b084      	sub	sp, #16
 8007544:	af00      	add	r7, sp, #0
 8007546:	6078      	str	r0, [r7, #4]
 8007548:	460b      	mov	r3, r1
 800754a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800754c:	2300      	movs	r3, #0
 800754e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007550:	2300      	movs	r3, #0
 8007552:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800755a:	78fa      	ldrb	r2, [r7, #3]
 800755c:	4611      	mov	r1, r2
 800755e:	4618      	mov	r0, r3
 8007560:	f7fb f9d6 	bl	8002910 <HAL_PCD_SetAddress>
 8007564:	4603      	mov	r3, r0
 8007566:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007568:	7bfb      	ldrb	r3, [r7, #15]
 800756a:	4618      	mov	r0, r3
 800756c:	f000 f862 	bl	8007634 <USBD_Get_USB_Status>
 8007570:	4603      	mov	r3, r0
 8007572:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007574:	7bbb      	ldrb	r3, [r7, #14]
}
 8007576:	4618      	mov	r0, r3
 8007578:	3710      	adds	r7, #16
 800757a:	46bd      	mov	sp, r7
 800757c:	bd80      	pop	{r7, pc}

0800757e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800757e:	b580      	push	{r7, lr}
 8007580:	b086      	sub	sp, #24
 8007582:	af00      	add	r7, sp, #0
 8007584:	60f8      	str	r0, [r7, #12]
 8007586:	607a      	str	r2, [r7, #4]
 8007588:	603b      	str	r3, [r7, #0]
 800758a:	460b      	mov	r3, r1
 800758c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800758e:	2300      	movs	r3, #0
 8007590:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007592:	2300      	movs	r3, #0
 8007594:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800759c:	7af9      	ldrb	r1, [r7, #11]
 800759e:	683b      	ldr	r3, [r7, #0]
 80075a0:	687a      	ldr	r2, [r7, #4]
 80075a2:	f7fb fad7 	bl	8002b54 <HAL_PCD_EP_Transmit>
 80075a6:	4603      	mov	r3, r0
 80075a8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80075aa:	7dfb      	ldrb	r3, [r7, #23]
 80075ac:	4618      	mov	r0, r3
 80075ae:	f000 f841 	bl	8007634 <USBD_Get_USB_Status>
 80075b2:	4603      	mov	r3, r0
 80075b4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80075b6:	7dbb      	ldrb	r3, [r7, #22]
}
 80075b8:	4618      	mov	r0, r3
 80075ba:	3718      	adds	r7, #24
 80075bc:	46bd      	mov	sp, r7
 80075be:	bd80      	pop	{r7, pc}

080075c0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80075c0:	b580      	push	{r7, lr}
 80075c2:	b086      	sub	sp, #24
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	60f8      	str	r0, [r7, #12]
 80075c8:	607a      	str	r2, [r7, #4]
 80075ca:	603b      	str	r3, [r7, #0]
 80075cc:	460b      	mov	r3, r1
 80075ce:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80075d0:	2300      	movs	r3, #0
 80075d2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80075d4:	2300      	movs	r3, #0
 80075d6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80075de:	7af9      	ldrb	r1, [r7, #11]
 80075e0:	683b      	ldr	r3, [r7, #0]
 80075e2:	687a      	ldr	r2, [r7, #4]
 80075e4:	f7fb fa6b 	bl	8002abe <HAL_PCD_EP_Receive>
 80075e8:	4603      	mov	r3, r0
 80075ea:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80075ec:	7dfb      	ldrb	r3, [r7, #23]
 80075ee:	4618      	mov	r0, r3
 80075f0:	f000 f820 	bl	8007634 <USBD_Get_USB_Status>
 80075f4:	4603      	mov	r3, r0
 80075f6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80075f8:	7dbb      	ldrb	r3, [r7, #22]
}
 80075fa:	4618      	mov	r0, r3
 80075fc:	3718      	adds	r7, #24
 80075fe:	46bd      	mov	sp, r7
 8007600:	bd80      	pop	{r7, pc}
	...

08007604 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007604:	b480      	push	{r7}
 8007606:	b083      	sub	sp, #12
 8007608:	af00      	add	r7, sp, #0
 800760a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800760c:	4b03      	ldr	r3, [pc, #12]	; (800761c <USBD_static_malloc+0x18>)
}
 800760e:	4618      	mov	r0, r3
 8007610:	370c      	adds	r7, #12
 8007612:	46bd      	mov	sp, r7
 8007614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007618:	4770      	bx	lr
 800761a:	bf00      	nop
 800761c:	20000b30 	.word	0x20000b30

08007620 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007620:	b480      	push	{r7}
 8007622:	b083      	sub	sp, #12
 8007624:	af00      	add	r7, sp, #0
 8007626:	6078      	str	r0, [r7, #4]

}
 8007628:	bf00      	nop
 800762a:	370c      	adds	r7, #12
 800762c:	46bd      	mov	sp, r7
 800762e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007632:	4770      	bx	lr

08007634 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007634:	b480      	push	{r7}
 8007636:	b085      	sub	sp, #20
 8007638:	af00      	add	r7, sp, #0
 800763a:	4603      	mov	r3, r0
 800763c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800763e:	2300      	movs	r3, #0
 8007640:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007642:	79fb      	ldrb	r3, [r7, #7]
 8007644:	2b03      	cmp	r3, #3
 8007646:	d817      	bhi.n	8007678 <USBD_Get_USB_Status+0x44>
 8007648:	a201      	add	r2, pc, #4	; (adr r2, 8007650 <USBD_Get_USB_Status+0x1c>)
 800764a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800764e:	bf00      	nop
 8007650:	08007661 	.word	0x08007661
 8007654:	08007667 	.word	0x08007667
 8007658:	0800766d 	.word	0x0800766d
 800765c:	08007673 	.word	0x08007673
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007660:	2300      	movs	r3, #0
 8007662:	73fb      	strb	r3, [r7, #15]
    break;
 8007664:	e00b      	b.n	800767e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007666:	2303      	movs	r3, #3
 8007668:	73fb      	strb	r3, [r7, #15]
    break;
 800766a:	e008      	b.n	800767e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800766c:	2301      	movs	r3, #1
 800766e:	73fb      	strb	r3, [r7, #15]
    break;
 8007670:	e005      	b.n	800767e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007672:	2303      	movs	r3, #3
 8007674:	73fb      	strb	r3, [r7, #15]
    break;
 8007676:	e002      	b.n	800767e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007678:	2303      	movs	r3, #3
 800767a:	73fb      	strb	r3, [r7, #15]
    break;
 800767c:	bf00      	nop
  }
  return usb_status;
 800767e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007680:	4618      	mov	r0, r3
 8007682:	3714      	adds	r7, #20
 8007684:	46bd      	mov	sp, r7
 8007686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768a:	4770      	bx	lr

0800768c <__libc_init_array>:
 800768c:	b570      	push	{r4, r5, r6, lr}
 800768e:	4d0d      	ldr	r5, [pc, #52]	; (80076c4 <__libc_init_array+0x38>)
 8007690:	4c0d      	ldr	r4, [pc, #52]	; (80076c8 <__libc_init_array+0x3c>)
 8007692:	1b64      	subs	r4, r4, r5
 8007694:	10a4      	asrs	r4, r4, #2
 8007696:	2600      	movs	r6, #0
 8007698:	42a6      	cmp	r6, r4
 800769a:	d109      	bne.n	80076b0 <__libc_init_array+0x24>
 800769c:	4d0b      	ldr	r5, [pc, #44]	; (80076cc <__libc_init_array+0x40>)
 800769e:	4c0c      	ldr	r4, [pc, #48]	; (80076d0 <__libc_init_array+0x44>)
 80076a0:	f001 f8c0 	bl	8008824 <_init>
 80076a4:	1b64      	subs	r4, r4, r5
 80076a6:	10a4      	asrs	r4, r4, #2
 80076a8:	2600      	movs	r6, #0
 80076aa:	42a6      	cmp	r6, r4
 80076ac:	d105      	bne.n	80076ba <__libc_init_array+0x2e>
 80076ae:	bd70      	pop	{r4, r5, r6, pc}
 80076b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80076b4:	4798      	blx	r3
 80076b6:	3601      	adds	r6, #1
 80076b8:	e7ee      	b.n	8007698 <__libc_init_array+0xc>
 80076ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80076be:	4798      	blx	r3
 80076c0:	3601      	adds	r6, #1
 80076c2:	e7f2      	b.n	80076aa <__libc_init_array+0x1e>
 80076c4:	08008a78 	.word	0x08008a78
 80076c8:	08008a78 	.word	0x08008a78
 80076cc:	08008a78 	.word	0x08008a78
 80076d0:	08008a7c 	.word	0x08008a7c

080076d4 <memset>:
 80076d4:	4402      	add	r2, r0
 80076d6:	4603      	mov	r3, r0
 80076d8:	4293      	cmp	r3, r2
 80076da:	d100      	bne.n	80076de <memset+0xa>
 80076dc:	4770      	bx	lr
 80076de:	f803 1b01 	strb.w	r1, [r3], #1
 80076e2:	e7f9      	b.n	80076d8 <memset+0x4>
 80076e4:	0000      	movs	r0, r0
	...

080076e8 <cos>:
 80076e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80076ea:	ec53 2b10 	vmov	r2, r3, d0
 80076ee:	4826      	ldr	r0, [pc, #152]	; (8007788 <cos+0xa0>)
 80076f0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80076f4:	4281      	cmp	r1, r0
 80076f6:	dc06      	bgt.n	8007706 <cos+0x1e>
 80076f8:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8007780 <cos+0x98>
 80076fc:	b005      	add	sp, #20
 80076fe:	f85d eb04 	ldr.w	lr, [sp], #4
 8007702:	f000 baa9 	b.w	8007c58 <__kernel_cos>
 8007706:	4821      	ldr	r0, [pc, #132]	; (800778c <cos+0xa4>)
 8007708:	4281      	cmp	r1, r0
 800770a:	dd09      	ble.n	8007720 <cos+0x38>
 800770c:	ee10 0a10 	vmov	r0, s0
 8007710:	4619      	mov	r1, r3
 8007712:	f7f8 fd71 	bl	80001f8 <__aeabi_dsub>
 8007716:	ec41 0b10 	vmov	d0, r0, r1
 800771a:	b005      	add	sp, #20
 800771c:	f85d fb04 	ldr.w	pc, [sp], #4
 8007720:	4668      	mov	r0, sp
 8007722:	f000 f88d 	bl	8007840 <__ieee754_rem_pio2>
 8007726:	f000 0003 	and.w	r0, r0, #3
 800772a:	2801      	cmp	r0, #1
 800772c:	d00b      	beq.n	8007746 <cos+0x5e>
 800772e:	2802      	cmp	r0, #2
 8007730:	d016      	beq.n	8007760 <cos+0x78>
 8007732:	b9e0      	cbnz	r0, 800776e <cos+0x86>
 8007734:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007738:	ed9d 0b00 	vldr	d0, [sp]
 800773c:	f000 fa8c 	bl	8007c58 <__kernel_cos>
 8007740:	ec51 0b10 	vmov	r0, r1, d0
 8007744:	e7e7      	b.n	8007716 <cos+0x2e>
 8007746:	ed9d 1b02 	vldr	d1, [sp, #8]
 800774a:	ed9d 0b00 	vldr	d0, [sp]
 800774e:	f000 fe9b 	bl	8008488 <__kernel_sin>
 8007752:	ec53 2b10 	vmov	r2, r3, d0
 8007756:	ee10 0a10 	vmov	r0, s0
 800775a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800775e:	e7da      	b.n	8007716 <cos+0x2e>
 8007760:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007764:	ed9d 0b00 	vldr	d0, [sp]
 8007768:	f000 fa76 	bl	8007c58 <__kernel_cos>
 800776c:	e7f1      	b.n	8007752 <cos+0x6a>
 800776e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007772:	ed9d 0b00 	vldr	d0, [sp]
 8007776:	2001      	movs	r0, #1
 8007778:	f000 fe86 	bl	8008488 <__kernel_sin>
 800777c:	e7e0      	b.n	8007740 <cos+0x58>
 800777e:	bf00      	nop
	...
 8007788:	3fe921fb 	.word	0x3fe921fb
 800778c:	7fefffff 	.word	0x7fefffff

08007790 <sin>:
 8007790:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007792:	ec53 2b10 	vmov	r2, r3, d0
 8007796:	4828      	ldr	r0, [pc, #160]	; (8007838 <sin+0xa8>)
 8007798:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800779c:	4281      	cmp	r1, r0
 800779e:	dc07      	bgt.n	80077b0 <sin+0x20>
 80077a0:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8007830 <sin+0xa0>
 80077a4:	2000      	movs	r0, #0
 80077a6:	b005      	add	sp, #20
 80077a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80077ac:	f000 be6c 	b.w	8008488 <__kernel_sin>
 80077b0:	4822      	ldr	r0, [pc, #136]	; (800783c <sin+0xac>)
 80077b2:	4281      	cmp	r1, r0
 80077b4:	dd09      	ble.n	80077ca <sin+0x3a>
 80077b6:	ee10 0a10 	vmov	r0, s0
 80077ba:	4619      	mov	r1, r3
 80077bc:	f7f8 fd1c 	bl	80001f8 <__aeabi_dsub>
 80077c0:	ec41 0b10 	vmov	d0, r0, r1
 80077c4:	b005      	add	sp, #20
 80077c6:	f85d fb04 	ldr.w	pc, [sp], #4
 80077ca:	4668      	mov	r0, sp
 80077cc:	f000 f838 	bl	8007840 <__ieee754_rem_pio2>
 80077d0:	f000 0003 	and.w	r0, r0, #3
 80077d4:	2801      	cmp	r0, #1
 80077d6:	d00c      	beq.n	80077f2 <sin+0x62>
 80077d8:	2802      	cmp	r0, #2
 80077da:	d011      	beq.n	8007800 <sin+0x70>
 80077dc:	b9f0      	cbnz	r0, 800781c <sin+0x8c>
 80077de:	ed9d 1b02 	vldr	d1, [sp, #8]
 80077e2:	ed9d 0b00 	vldr	d0, [sp]
 80077e6:	2001      	movs	r0, #1
 80077e8:	f000 fe4e 	bl	8008488 <__kernel_sin>
 80077ec:	ec51 0b10 	vmov	r0, r1, d0
 80077f0:	e7e6      	b.n	80077c0 <sin+0x30>
 80077f2:	ed9d 1b02 	vldr	d1, [sp, #8]
 80077f6:	ed9d 0b00 	vldr	d0, [sp]
 80077fa:	f000 fa2d 	bl	8007c58 <__kernel_cos>
 80077fe:	e7f5      	b.n	80077ec <sin+0x5c>
 8007800:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007804:	ed9d 0b00 	vldr	d0, [sp]
 8007808:	2001      	movs	r0, #1
 800780a:	f000 fe3d 	bl	8008488 <__kernel_sin>
 800780e:	ec53 2b10 	vmov	r2, r3, d0
 8007812:	ee10 0a10 	vmov	r0, s0
 8007816:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800781a:	e7d1      	b.n	80077c0 <sin+0x30>
 800781c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007820:	ed9d 0b00 	vldr	d0, [sp]
 8007824:	f000 fa18 	bl	8007c58 <__kernel_cos>
 8007828:	e7f1      	b.n	800780e <sin+0x7e>
 800782a:	bf00      	nop
 800782c:	f3af 8000 	nop.w
	...
 8007838:	3fe921fb 	.word	0x3fe921fb
 800783c:	7fefffff 	.word	0x7fefffff

08007840 <__ieee754_rem_pio2>:
 8007840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007844:	ed2d 8b02 	vpush	{d8}
 8007848:	ec55 4b10 	vmov	r4, r5, d0
 800784c:	4bca      	ldr	r3, [pc, #808]	; (8007b78 <__ieee754_rem_pio2+0x338>)
 800784e:	b08b      	sub	sp, #44	; 0x2c
 8007850:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8007854:	4598      	cmp	r8, r3
 8007856:	4682      	mov	sl, r0
 8007858:	9502      	str	r5, [sp, #8]
 800785a:	dc08      	bgt.n	800786e <__ieee754_rem_pio2+0x2e>
 800785c:	2200      	movs	r2, #0
 800785e:	2300      	movs	r3, #0
 8007860:	ed80 0b00 	vstr	d0, [r0]
 8007864:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8007868:	f04f 0b00 	mov.w	fp, #0
 800786c:	e028      	b.n	80078c0 <__ieee754_rem_pio2+0x80>
 800786e:	4bc3      	ldr	r3, [pc, #780]	; (8007b7c <__ieee754_rem_pio2+0x33c>)
 8007870:	4598      	cmp	r8, r3
 8007872:	dc78      	bgt.n	8007966 <__ieee754_rem_pio2+0x126>
 8007874:	9b02      	ldr	r3, [sp, #8]
 8007876:	4ec2      	ldr	r6, [pc, #776]	; (8007b80 <__ieee754_rem_pio2+0x340>)
 8007878:	2b00      	cmp	r3, #0
 800787a:	ee10 0a10 	vmov	r0, s0
 800787e:	a3b0      	add	r3, pc, #704	; (adr r3, 8007b40 <__ieee754_rem_pio2+0x300>)
 8007880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007884:	4629      	mov	r1, r5
 8007886:	dd39      	ble.n	80078fc <__ieee754_rem_pio2+0xbc>
 8007888:	f7f8 fcb6 	bl	80001f8 <__aeabi_dsub>
 800788c:	45b0      	cmp	r8, r6
 800788e:	4604      	mov	r4, r0
 8007890:	460d      	mov	r5, r1
 8007892:	d01b      	beq.n	80078cc <__ieee754_rem_pio2+0x8c>
 8007894:	a3ac      	add	r3, pc, #688	; (adr r3, 8007b48 <__ieee754_rem_pio2+0x308>)
 8007896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800789a:	f7f8 fcad 	bl	80001f8 <__aeabi_dsub>
 800789e:	4602      	mov	r2, r0
 80078a0:	460b      	mov	r3, r1
 80078a2:	e9ca 2300 	strd	r2, r3, [sl]
 80078a6:	4620      	mov	r0, r4
 80078a8:	4629      	mov	r1, r5
 80078aa:	f7f8 fca5 	bl	80001f8 <__aeabi_dsub>
 80078ae:	a3a6      	add	r3, pc, #664	; (adr r3, 8007b48 <__ieee754_rem_pio2+0x308>)
 80078b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078b4:	f7f8 fca0 	bl	80001f8 <__aeabi_dsub>
 80078b8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80078bc:	f04f 0b01 	mov.w	fp, #1
 80078c0:	4658      	mov	r0, fp
 80078c2:	b00b      	add	sp, #44	; 0x2c
 80078c4:	ecbd 8b02 	vpop	{d8}
 80078c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078cc:	a3a0      	add	r3, pc, #640	; (adr r3, 8007b50 <__ieee754_rem_pio2+0x310>)
 80078ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078d2:	f7f8 fc91 	bl	80001f8 <__aeabi_dsub>
 80078d6:	a3a0      	add	r3, pc, #640	; (adr r3, 8007b58 <__ieee754_rem_pio2+0x318>)
 80078d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078dc:	4604      	mov	r4, r0
 80078de:	460d      	mov	r5, r1
 80078e0:	f7f8 fc8a 	bl	80001f8 <__aeabi_dsub>
 80078e4:	4602      	mov	r2, r0
 80078e6:	460b      	mov	r3, r1
 80078e8:	e9ca 2300 	strd	r2, r3, [sl]
 80078ec:	4620      	mov	r0, r4
 80078ee:	4629      	mov	r1, r5
 80078f0:	f7f8 fc82 	bl	80001f8 <__aeabi_dsub>
 80078f4:	a398      	add	r3, pc, #608	; (adr r3, 8007b58 <__ieee754_rem_pio2+0x318>)
 80078f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078fa:	e7db      	b.n	80078b4 <__ieee754_rem_pio2+0x74>
 80078fc:	f7f8 fc7e 	bl	80001fc <__adddf3>
 8007900:	45b0      	cmp	r8, r6
 8007902:	4604      	mov	r4, r0
 8007904:	460d      	mov	r5, r1
 8007906:	d016      	beq.n	8007936 <__ieee754_rem_pio2+0xf6>
 8007908:	a38f      	add	r3, pc, #572	; (adr r3, 8007b48 <__ieee754_rem_pio2+0x308>)
 800790a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800790e:	f7f8 fc75 	bl	80001fc <__adddf3>
 8007912:	4602      	mov	r2, r0
 8007914:	460b      	mov	r3, r1
 8007916:	e9ca 2300 	strd	r2, r3, [sl]
 800791a:	4620      	mov	r0, r4
 800791c:	4629      	mov	r1, r5
 800791e:	f7f8 fc6b 	bl	80001f8 <__aeabi_dsub>
 8007922:	a389      	add	r3, pc, #548	; (adr r3, 8007b48 <__ieee754_rem_pio2+0x308>)
 8007924:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007928:	f7f8 fc68 	bl	80001fc <__adddf3>
 800792c:	f04f 3bff 	mov.w	fp, #4294967295
 8007930:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8007934:	e7c4      	b.n	80078c0 <__ieee754_rem_pio2+0x80>
 8007936:	a386      	add	r3, pc, #536	; (adr r3, 8007b50 <__ieee754_rem_pio2+0x310>)
 8007938:	e9d3 2300 	ldrd	r2, r3, [r3]
 800793c:	f7f8 fc5e 	bl	80001fc <__adddf3>
 8007940:	a385      	add	r3, pc, #532	; (adr r3, 8007b58 <__ieee754_rem_pio2+0x318>)
 8007942:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007946:	4604      	mov	r4, r0
 8007948:	460d      	mov	r5, r1
 800794a:	f7f8 fc57 	bl	80001fc <__adddf3>
 800794e:	4602      	mov	r2, r0
 8007950:	460b      	mov	r3, r1
 8007952:	e9ca 2300 	strd	r2, r3, [sl]
 8007956:	4620      	mov	r0, r4
 8007958:	4629      	mov	r1, r5
 800795a:	f7f8 fc4d 	bl	80001f8 <__aeabi_dsub>
 800795e:	a37e      	add	r3, pc, #504	; (adr r3, 8007b58 <__ieee754_rem_pio2+0x318>)
 8007960:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007964:	e7e0      	b.n	8007928 <__ieee754_rem_pio2+0xe8>
 8007966:	4b87      	ldr	r3, [pc, #540]	; (8007b84 <__ieee754_rem_pio2+0x344>)
 8007968:	4598      	cmp	r8, r3
 800796a:	f300 80d9 	bgt.w	8007b20 <__ieee754_rem_pio2+0x2e0>
 800796e:	f000 fe49 	bl	8008604 <fabs>
 8007972:	ec55 4b10 	vmov	r4, r5, d0
 8007976:	ee10 0a10 	vmov	r0, s0
 800797a:	a379      	add	r3, pc, #484	; (adr r3, 8007b60 <__ieee754_rem_pio2+0x320>)
 800797c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007980:	4629      	mov	r1, r5
 8007982:	f7f8 fdf1 	bl	8000568 <__aeabi_dmul>
 8007986:	4b80      	ldr	r3, [pc, #512]	; (8007b88 <__ieee754_rem_pio2+0x348>)
 8007988:	2200      	movs	r2, #0
 800798a:	f7f8 fc37 	bl	80001fc <__adddf3>
 800798e:	f7f9 f885 	bl	8000a9c <__aeabi_d2iz>
 8007992:	4683      	mov	fp, r0
 8007994:	f7f8 fd7e 	bl	8000494 <__aeabi_i2d>
 8007998:	4602      	mov	r2, r0
 800799a:	460b      	mov	r3, r1
 800799c:	ec43 2b18 	vmov	d8, r2, r3
 80079a0:	a367      	add	r3, pc, #412	; (adr r3, 8007b40 <__ieee754_rem_pio2+0x300>)
 80079a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079a6:	f7f8 fddf 	bl	8000568 <__aeabi_dmul>
 80079aa:	4602      	mov	r2, r0
 80079ac:	460b      	mov	r3, r1
 80079ae:	4620      	mov	r0, r4
 80079b0:	4629      	mov	r1, r5
 80079b2:	f7f8 fc21 	bl	80001f8 <__aeabi_dsub>
 80079b6:	a364      	add	r3, pc, #400	; (adr r3, 8007b48 <__ieee754_rem_pio2+0x308>)
 80079b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079bc:	4606      	mov	r6, r0
 80079be:	460f      	mov	r7, r1
 80079c0:	ec51 0b18 	vmov	r0, r1, d8
 80079c4:	f7f8 fdd0 	bl	8000568 <__aeabi_dmul>
 80079c8:	f1bb 0f1f 	cmp.w	fp, #31
 80079cc:	4604      	mov	r4, r0
 80079ce:	460d      	mov	r5, r1
 80079d0:	dc0d      	bgt.n	80079ee <__ieee754_rem_pio2+0x1ae>
 80079d2:	4b6e      	ldr	r3, [pc, #440]	; (8007b8c <__ieee754_rem_pio2+0x34c>)
 80079d4:	f10b 32ff 	add.w	r2, fp, #4294967295
 80079d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079dc:	4543      	cmp	r3, r8
 80079de:	d006      	beq.n	80079ee <__ieee754_rem_pio2+0x1ae>
 80079e0:	4622      	mov	r2, r4
 80079e2:	462b      	mov	r3, r5
 80079e4:	4630      	mov	r0, r6
 80079e6:	4639      	mov	r1, r7
 80079e8:	f7f8 fc06 	bl	80001f8 <__aeabi_dsub>
 80079ec:	e00f      	b.n	8007a0e <__ieee754_rem_pio2+0x1ce>
 80079ee:	462b      	mov	r3, r5
 80079f0:	4622      	mov	r2, r4
 80079f2:	4630      	mov	r0, r6
 80079f4:	4639      	mov	r1, r7
 80079f6:	f7f8 fbff 	bl	80001f8 <__aeabi_dsub>
 80079fa:	ea4f 5328 	mov.w	r3, r8, asr #20
 80079fe:	9303      	str	r3, [sp, #12]
 8007a00:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8007a04:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8007a08:	f1b8 0f10 	cmp.w	r8, #16
 8007a0c:	dc02      	bgt.n	8007a14 <__ieee754_rem_pio2+0x1d4>
 8007a0e:	e9ca 0100 	strd	r0, r1, [sl]
 8007a12:	e039      	b.n	8007a88 <__ieee754_rem_pio2+0x248>
 8007a14:	a34e      	add	r3, pc, #312	; (adr r3, 8007b50 <__ieee754_rem_pio2+0x310>)
 8007a16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a1a:	ec51 0b18 	vmov	r0, r1, d8
 8007a1e:	f7f8 fda3 	bl	8000568 <__aeabi_dmul>
 8007a22:	4604      	mov	r4, r0
 8007a24:	460d      	mov	r5, r1
 8007a26:	4602      	mov	r2, r0
 8007a28:	460b      	mov	r3, r1
 8007a2a:	4630      	mov	r0, r6
 8007a2c:	4639      	mov	r1, r7
 8007a2e:	f7f8 fbe3 	bl	80001f8 <__aeabi_dsub>
 8007a32:	4602      	mov	r2, r0
 8007a34:	460b      	mov	r3, r1
 8007a36:	4680      	mov	r8, r0
 8007a38:	4689      	mov	r9, r1
 8007a3a:	4630      	mov	r0, r6
 8007a3c:	4639      	mov	r1, r7
 8007a3e:	f7f8 fbdb 	bl	80001f8 <__aeabi_dsub>
 8007a42:	4622      	mov	r2, r4
 8007a44:	462b      	mov	r3, r5
 8007a46:	f7f8 fbd7 	bl	80001f8 <__aeabi_dsub>
 8007a4a:	a343      	add	r3, pc, #268	; (adr r3, 8007b58 <__ieee754_rem_pio2+0x318>)
 8007a4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a50:	4604      	mov	r4, r0
 8007a52:	460d      	mov	r5, r1
 8007a54:	ec51 0b18 	vmov	r0, r1, d8
 8007a58:	f7f8 fd86 	bl	8000568 <__aeabi_dmul>
 8007a5c:	4622      	mov	r2, r4
 8007a5e:	462b      	mov	r3, r5
 8007a60:	f7f8 fbca 	bl	80001f8 <__aeabi_dsub>
 8007a64:	4602      	mov	r2, r0
 8007a66:	460b      	mov	r3, r1
 8007a68:	4604      	mov	r4, r0
 8007a6a:	460d      	mov	r5, r1
 8007a6c:	4640      	mov	r0, r8
 8007a6e:	4649      	mov	r1, r9
 8007a70:	f7f8 fbc2 	bl	80001f8 <__aeabi_dsub>
 8007a74:	9a03      	ldr	r2, [sp, #12]
 8007a76:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8007a7a:	1ad3      	subs	r3, r2, r3
 8007a7c:	2b31      	cmp	r3, #49	; 0x31
 8007a7e:	dc24      	bgt.n	8007aca <__ieee754_rem_pio2+0x28a>
 8007a80:	e9ca 0100 	strd	r0, r1, [sl]
 8007a84:	4646      	mov	r6, r8
 8007a86:	464f      	mov	r7, r9
 8007a88:	e9da 8900 	ldrd	r8, r9, [sl]
 8007a8c:	4630      	mov	r0, r6
 8007a8e:	4642      	mov	r2, r8
 8007a90:	464b      	mov	r3, r9
 8007a92:	4639      	mov	r1, r7
 8007a94:	f7f8 fbb0 	bl	80001f8 <__aeabi_dsub>
 8007a98:	462b      	mov	r3, r5
 8007a9a:	4622      	mov	r2, r4
 8007a9c:	f7f8 fbac 	bl	80001f8 <__aeabi_dsub>
 8007aa0:	9b02      	ldr	r3, [sp, #8]
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8007aa8:	f6bf af0a 	bge.w	80078c0 <__ieee754_rem_pio2+0x80>
 8007aac:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8007ab0:	f8ca 3004 	str.w	r3, [sl, #4]
 8007ab4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007ab8:	f8ca 8000 	str.w	r8, [sl]
 8007abc:	f8ca 0008 	str.w	r0, [sl, #8]
 8007ac0:	f8ca 300c 	str.w	r3, [sl, #12]
 8007ac4:	f1cb 0b00 	rsb	fp, fp, #0
 8007ac8:	e6fa      	b.n	80078c0 <__ieee754_rem_pio2+0x80>
 8007aca:	a327      	add	r3, pc, #156	; (adr r3, 8007b68 <__ieee754_rem_pio2+0x328>)
 8007acc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ad0:	ec51 0b18 	vmov	r0, r1, d8
 8007ad4:	f7f8 fd48 	bl	8000568 <__aeabi_dmul>
 8007ad8:	4604      	mov	r4, r0
 8007ada:	460d      	mov	r5, r1
 8007adc:	4602      	mov	r2, r0
 8007ade:	460b      	mov	r3, r1
 8007ae0:	4640      	mov	r0, r8
 8007ae2:	4649      	mov	r1, r9
 8007ae4:	f7f8 fb88 	bl	80001f8 <__aeabi_dsub>
 8007ae8:	4602      	mov	r2, r0
 8007aea:	460b      	mov	r3, r1
 8007aec:	4606      	mov	r6, r0
 8007aee:	460f      	mov	r7, r1
 8007af0:	4640      	mov	r0, r8
 8007af2:	4649      	mov	r1, r9
 8007af4:	f7f8 fb80 	bl	80001f8 <__aeabi_dsub>
 8007af8:	4622      	mov	r2, r4
 8007afa:	462b      	mov	r3, r5
 8007afc:	f7f8 fb7c 	bl	80001f8 <__aeabi_dsub>
 8007b00:	a31b      	add	r3, pc, #108	; (adr r3, 8007b70 <__ieee754_rem_pio2+0x330>)
 8007b02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b06:	4604      	mov	r4, r0
 8007b08:	460d      	mov	r5, r1
 8007b0a:	ec51 0b18 	vmov	r0, r1, d8
 8007b0e:	f7f8 fd2b 	bl	8000568 <__aeabi_dmul>
 8007b12:	4622      	mov	r2, r4
 8007b14:	462b      	mov	r3, r5
 8007b16:	f7f8 fb6f 	bl	80001f8 <__aeabi_dsub>
 8007b1a:	4604      	mov	r4, r0
 8007b1c:	460d      	mov	r5, r1
 8007b1e:	e75f      	b.n	80079e0 <__ieee754_rem_pio2+0x1a0>
 8007b20:	4b1b      	ldr	r3, [pc, #108]	; (8007b90 <__ieee754_rem_pio2+0x350>)
 8007b22:	4598      	cmp	r8, r3
 8007b24:	dd36      	ble.n	8007b94 <__ieee754_rem_pio2+0x354>
 8007b26:	ee10 2a10 	vmov	r2, s0
 8007b2a:	462b      	mov	r3, r5
 8007b2c:	4620      	mov	r0, r4
 8007b2e:	4629      	mov	r1, r5
 8007b30:	f7f8 fb62 	bl	80001f8 <__aeabi_dsub>
 8007b34:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8007b38:	e9ca 0100 	strd	r0, r1, [sl]
 8007b3c:	e694      	b.n	8007868 <__ieee754_rem_pio2+0x28>
 8007b3e:	bf00      	nop
 8007b40:	54400000 	.word	0x54400000
 8007b44:	3ff921fb 	.word	0x3ff921fb
 8007b48:	1a626331 	.word	0x1a626331
 8007b4c:	3dd0b461 	.word	0x3dd0b461
 8007b50:	1a600000 	.word	0x1a600000
 8007b54:	3dd0b461 	.word	0x3dd0b461
 8007b58:	2e037073 	.word	0x2e037073
 8007b5c:	3ba3198a 	.word	0x3ba3198a
 8007b60:	6dc9c883 	.word	0x6dc9c883
 8007b64:	3fe45f30 	.word	0x3fe45f30
 8007b68:	2e000000 	.word	0x2e000000
 8007b6c:	3ba3198a 	.word	0x3ba3198a
 8007b70:	252049c1 	.word	0x252049c1
 8007b74:	397b839a 	.word	0x397b839a
 8007b78:	3fe921fb 	.word	0x3fe921fb
 8007b7c:	4002d97b 	.word	0x4002d97b
 8007b80:	3ff921fb 	.word	0x3ff921fb
 8007b84:	413921fb 	.word	0x413921fb
 8007b88:	3fe00000 	.word	0x3fe00000
 8007b8c:	08008898 	.word	0x08008898
 8007b90:	7fefffff 	.word	0x7fefffff
 8007b94:	ea4f 5428 	mov.w	r4, r8, asr #20
 8007b98:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8007b9c:	ee10 0a10 	vmov	r0, s0
 8007ba0:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 8007ba4:	ee10 6a10 	vmov	r6, s0
 8007ba8:	460f      	mov	r7, r1
 8007baa:	f7f8 ff77 	bl	8000a9c <__aeabi_d2iz>
 8007bae:	f7f8 fc71 	bl	8000494 <__aeabi_i2d>
 8007bb2:	4602      	mov	r2, r0
 8007bb4:	460b      	mov	r3, r1
 8007bb6:	4630      	mov	r0, r6
 8007bb8:	4639      	mov	r1, r7
 8007bba:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007bbe:	f7f8 fb1b 	bl	80001f8 <__aeabi_dsub>
 8007bc2:	4b23      	ldr	r3, [pc, #140]	; (8007c50 <__ieee754_rem_pio2+0x410>)
 8007bc4:	2200      	movs	r2, #0
 8007bc6:	f7f8 fccf 	bl	8000568 <__aeabi_dmul>
 8007bca:	460f      	mov	r7, r1
 8007bcc:	4606      	mov	r6, r0
 8007bce:	f7f8 ff65 	bl	8000a9c <__aeabi_d2iz>
 8007bd2:	f7f8 fc5f 	bl	8000494 <__aeabi_i2d>
 8007bd6:	4602      	mov	r2, r0
 8007bd8:	460b      	mov	r3, r1
 8007bda:	4630      	mov	r0, r6
 8007bdc:	4639      	mov	r1, r7
 8007bde:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007be2:	f7f8 fb09 	bl	80001f8 <__aeabi_dsub>
 8007be6:	4b1a      	ldr	r3, [pc, #104]	; (8007c50 <__ieee754_rem_pio2+0x410>)
 8007be8:	2200      	movs	r2, #0
 8007bea:	f7f8 fcbd 	bl	8000568 <__aeabi_dmul>
 8007bee:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007bf2:	ad04      	add	r5, sp, #16
 8007bf4:	f04f 0803 	mov.w	r8, #3
 8007bf8:	46a9      	mov	r9, r5
 8007bfa:	2600      	movs	r6, #0
 8007bfc:	2700      	movs	r7, #0
 8007bfe:	4632      	mov	r2, r6
 8007c00:	463b      	mov	r3, r7
 8007c02:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8007c06:	46c3      	mov	fp, r8
 8007c08:	3d08      	subs	r5, #8
 8007c0a:	f108 38ff 	add.w	r8, r8, #4294967295
 8007c0e:	f7f8 ff13 	bl	8000a38 <__aeabi_dcmpeq>
 8007c12:	2800      	cmp	r0, #0
 8007c14:	d1f3      	bne.n	8007bfe <__ieee754_rem_pio2+0x3be>
 8007c16:	4b0f      	ldr	r3, [pc, #60]	; (8007c54 <__ieee754_rem_pio2+0x414>)
 8007c18:	9301      	str	r3, [sp, #4]
 8007c1a:	2302      	movs	r3, #2
 8007c1c:	9300      	str	r3, [sp, #0]
 8007c1e:	4622      	mov	r2, r4
 8007c20:	465b      	mov	r3, fp
 8007c22:	4651      	mov	r1, sl
 8007c24:	4648      	mov	r0, r9
 8007c26:	f000 f8df 	bl	8007de8 <__kernel_rem_pio2>
 8007c2a:	9b02      	ldr	r3, [sp, #8]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	4683      	mov	fp, r0
 8007c30:	f6bf ae46 	bge.w	80078c0 <__ieee754_rem_pio2+0x80>
 8007c34:	e9da 2100 	ldrd	r2, r1, [sl]
 8007c38:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007c3c:	e9ca 2300 	strd	r2, r3, [sl]
 8007c40:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8007c44:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007c48:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8007c4c:	e73a      	b.n	8007ac4 <__ieee754_rem_pio2+0x284>
 8007c4e:	bf00      	nop
 8007c50:	41700000 	.word	0x41700000
 8007c54:	08008918 	.word	0x08008918

08007c58 <__kernel_cos>:
 8007c58:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c5c:	ec57 6b10 	vmov	r6, r7, d0
 8007c60:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8007c64:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8007c68:	ed8d 1b00 	vstr	d1, [sp]
 8007c6c:	da07      	bge.n	8007c7e <__kernel_cos+0x26>
 8007c6e:	ee10 0a10 	vmov	r0, s0
 8007c72:	4639      	mov	r1, r7
 8007c74:	f7f8 ff12 	bl	8000a9c <__aeabi_d2iz>
 8007c78:	2800      	cmp	r0, #0
 8007c7a:	f000 8088 	beq.w	8007d8e <__kernel_cos+0x136>
 8007c7e:	4632      	mov	r2, r6
 8007c80:	463b      	mov	r3, r7
 8007c82:	4630      	mov	r0, r6
 8007c84:	4639      	mov	r1, r7
 8007c86:	f7f8 fc6f 	bl	8000568 <__aeabi_dmul>
 8007c8a:	4b51      	ldr	r3, [pc, #324]	; (8007dd0 <__kernel_cos+0x178>)
 8007c8c:	2200      	movs	r2, #0
 8007c8e:	4604      	mov	r4, r0
 8007c90:	460d      	mov	r5, r1
 8007c92:	f7f8 fc69 	bl	8000568 <__aeabi_dmul>
 8007c96:	a340      	add	r3, pc, #256	; (adr r3, 8007d98 <__kernel_cos+0x140>)
 8007c98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c9c:	4682      	mov	sl, r0
 8007c9e:	468b      	mov	fp, r1
 8007ca0:	4620      	mov	r0, r4
 8007ca2:	4629      	mov	r1, r5
 8007ca4:	f7f8 fc60 	bl	8000568 <__aeabi_dmul>
 8007ca8:	a33d      	add	r3, pc, #244	; (adr r3, 8007da0 <__kernel_cos+0x148>)
 8007caa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cae:	f7f8 faa5 	bl	80001fc <__adddf3>
 8007cb2:	4622      	mov	r2, r4
 8007cb4:	462b      	mov	r3, r5
 8007cb6:	f7f8 fc57 	bl	8000568 <__aeabi_dmul>
 8007cba:	a33b      	add	r3, pc, #236	; (adr r3, 8007da8 <__kernel_cos+0x150>)
 8007cbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cc0:	f7f8 fa9a 	bl	80001f8 <__aeabi_dsub>
 8007cc4:	4622      	mov	r2, r4
 8007cc6:	462b      	mov	r3, r5
 8007cc8:	f7f8 fc4e 	bl	8000568 <__aeabi_dmul>
 8007ccc:	a338      	add	r3, pc, #224	; (adr r3, 8007db0 <__kernel_cos+0x158>)
 8007cce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cd2:	f7f8 fa93 	bl	80001fc <__adddf3>
 8007cd6:	4622      	mov	r2, r4
 8007cd8:	462b      	mov	r3, r5
 8007cda:	f7f8 fc45 	bl	8000568 <__aeabi_dmul>
 8007cde:	a336      	add	r3, pc, #216	; (adr r3, 8007db8 <__kernel_cos+0x160>)
 8007ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ce4:	f7f8 fa88 	bl	80001f8 <__aeabi_dsub>
 8007ce8:	4622      	mov	r2, r4
 8007cea:	462b      	mov	r3, r5
 8007cec:	f7f8 fc3c 	bl	8000568 <__aeabi_dmul>
 8007cf0:	a333      	add	r3, pc, #204	; (adr r3, 8007dc0 <__kernel_cos+0x168>)
 8007cf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cf6:	f7f8 fa81 	bl	80001fc <__adddf3>
 8007cfa:	4622      	mov	r2, r4
 8007cfc:	462b      	mov	r3, r5
 8007cfe:	f7f8 fc33 	bl	8000568 <__aeabi_dmul>
 8007d02:	4622      	mov	r2, r4
 8007d04:	462b      	mov	r3, r5
 8007d06:	f7f8 fc2f 	bl	8000568 <__aeabi_dmul>
 8007d0a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007d0e:	4604      	mov	r4, r0
 8007d10:	460d      	mov	r5, r1
 8007d12:	4630      	mov	r0, r6
 8007d14:	4639      	mov	r1, r7
 8007d16:	f7f8 fc27 	bl	8000568 <__aeabi_dmul>
 8007d1a:	460b      	mov	r3, r1
 8007d1c:	4602      	mov	r2, r0
 8007d1e:	4629      	mov	r1, r5
 8007d20:	4620      	mov	r0, r4
 8007d22:	f7f8 fa69 	bl	80001f8 <__aeabi_dsub>
 8007d26:	4b2b      	ldr	r3, [pc, #172]	; (8007dd4 <__kernel_cos+0x17c>)
 8007d28:	4598      	cmp	r8, r3
 8007d2a:	4606      	mov	r6, r0
 8007d2c:	460f      	mov	r7, r1
 8007d2e:	dc10      	bgt.n	8007d52 <__kernel_cos+0xfa>
 8007d30:	4602      	mov	r2, r0
 8007d32:	460b      	mov	r3, r1
 8007d34:	4650      	mov	r0, sl
 8007d36:	4659      	mov	r1, fp
 8007d38:	f7f8 fa5e 	bl	80001f8 <__aeabi_dsub>
 8007d3c:	460b      	mov	r3, r1
 8007d3e:	4926      	ldr	r1, [pc, #152]	; (8007dd8 <__kernel_cos+0x180>)
 8007d40:	4602      	mov	r2, r0
 8007d42:	2000      	movs	r0, #0
 8007d44:	f7f8 fa58 	bl	80001f8 <__aeabi_dsub>
 8007d48:	ec41 0b10 	vmov	d0, r0, r1
 8007d4c:	b003      	add	sp, #12
 8007d4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d52:	4b22      	ldr	r3, [pc, #136]	; (8007ddc <__kernel_cos+0x184>)
 8007d54:	4920      	ldr	r1, [pc, #128]	; (8007dd8 <__kernel_cos+0x180>)
 8007d56:	4598      	cmp	r8, r3
 8007d58:	bfcc      	ite	gt
 8007d5a:	4d21      	ldrgt	r5, [pc, #132]	; (8007de0 <__kernel_cos+0x188>)
 8007d5c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8007d60:	2400      	movs	r4, #0
 8007d62:	4622      	mov	r2, r4
 8007d64:	462b      	mov	r3, r5
 8007d66:	2000      	movs	r0, #0
 8007d68:	f7f8 fa46 	bl	80001f8 <__aeabi_dsub>
 8007d6c:	4622      	mov	r2, r4
 8007d6e:	4680      	mov	r8, r0
 8007d70:	4689      	mov	r9, r1
 8007d72:	462b      	mov	r3, r5
 8007d74:	4650      	mov	r0, sl
 8007d76:	4659      	mov	r1, fp
 8007d78:	f7f8 fa3e 	bl	80001f8 <__aeabi_dsub>
 8007d7c:	4632      	mov	r2, r6
 8007d7e:	463b      	mov	r3, r7
 8007d80:	f7f8 fa3a 	bl	80001f8 <__aeabi_dsub>
 8007d84:	4602      	mov	r2, r0
 8007d86:	460b      	mov	r3, r1
 8007d88:	4640      	mov	r0, r8
 8007d8a:	4649      	mov	r1, r9
 8007d8c:	e7da      	b.n	8007d44 <__kernel_cos+0xec>
 8007d8e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8007dc8 <__kernel_cos+0x170>
 8007d92:	e7db      	b.n	8007d4c <__kernel_cos+0xf4>
 8007d94:	f3af 8000 	nop.w
 8007d98:	be8838d4 	.word	0xbe8838d4
 8007d9c:	bda8fae9 	.word	0xbda8fae9
 8007da0:	bdb4b1c4 	.word	0xbdb4b1c4
 8007da4:	3e21ee9e 	.word	0x3e21ee9e
 8007da8:	809c52ad 	.word	0x809c52ad
 8007dac:	3e927e4f 	.word	0x3e927e4f
 8007db0:	19cb1590 	.word	0x19cb1590
 8007db4:	3efa01a0 	.word	0x3efa01a0
 8007db8:	16c15177 	.word	0x16c15177
 8007dbc:	3f56c16c 	.word	0x3f56c16c
 8007dc0:	5555554c 	.word	0x5555554c
 8007dc4:	3fa55555 	.word	0x3fa55555
 8007dc8:	00000000 	.word	0x00000000
 8007dcc:	3ff00000 	.word	0x3ff00000
 8007dd0:	3fe00000 	.word	0x3fe00000
 8007dd4:	3fd33332 	.word	0x3fd33332
 8007dd8:	3ff00000 	.word	0x3ff00000
 8007ddc:	3fe90000 	.word	0x3fe90000
 8007de0:	3fd20000 	.word	0x3fd20000
 8007de4:	00000000 	.word	0x00000000

08007de8 <__kernel_rem_pio2>:
 8007de8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dec:	ed2d 8b02 	vpush	{d8}
 8007df0:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8007df4:	f112 0f14 	cmn.w	r2, #20
 8007df8:	9308      	str	r3, [sp, #32]
 8007dfa:	9101      	str	r1, [sp, #4]
 8007dfc:	4bc4      	ldr	r3, [pc, #784]	; (8008110 <__kernel_rem_pio2+0x328>)
 8007dfe:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8007e00:	900b      	str	r0, [sp, #44]	; 0x2c
 8007e02:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007e06:	9302      	str	r3, [sp, #8]
 8007e08:	9b08      	ldr	r3, [sp, #32]
 8007e0a:	f103 33ff 	add.w	r3, r3, #4294967295
 8007e0e:	bfa8      	it	ge
 8007e10:	1ed4      	subge	r4, r2, #3
 8007e12:	9306      	str	r3, [sp, #24]
 8007e14:	bfb2      	itee	lt
 8007e16:	2400      	movlt	r4, #0
 8007e18:	2318      	movge	r3, #24
 8007e1a:	fb94 f4f3 	sdivge	r4, r4, r3
 8007e1e:	f06f 0317 	mvn.w	r3, #23
 8007e22:	fb04 3303 	mla	r3, r4, r3, r3
 8007e26:	eb03 0a02 	add.w	sl, r3, r2
 8007e2a:	9b02      	ldr	r3, [sp, #8]
 8007e2c:	9a06      	ldr	r2, [sp, #24]
 8007e2e:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 8008100 <__kernel_rem_pio2+0x318>
 8007e32:	eb03 0802 	add.w	r8, r3, r2
 8007e36:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8007e38:	1aa7      	subs	r7, r4, r2
 8007e3a:	ae22      	add	r6, sp, #136	; 0x88
 8007e3c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8007e40:	2500      	movs	r5, #0
 8007e42:	4545      	cmp	r5, r8
 8007e44:	dd13      	ble.n	8007e6e <__kernel_rem_pio2+0x86>
 8007e46:	9b08      	ldr	r3, [sp, #32]
 8007e48:	ed9f 8bad 	vldr	d8, [pc, #692]	; 8008100 <__kernel_rem_pio2+0x318>
 8007e4c:	aa22      	add	r2, sp, #136	; 0x88
 8007e4e:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8007e52:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8007e56:	f04f 0800 	mov.w	r8, #0
 8007e5a:	9b02      	ldr	r3, [sp, #8]
 8007e5c:	4598      	cmp	r8, r3
 8007e5e:	dc2f      	bgt.n	8007ec0 <__kernel_rem_pio2+0xd8>
 8007e60:	ed8d 8b04 	vstr	d8, [sp, #16]
 8007e64:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8007e68:	462f      	mov	r7, r5
 8007e6a:	2600      	movs	r6, #0
 8007e6c:	e01b      	b.n	8007ea6 <__kernel_rem_pio2+0xbe>
 8007e6e:	42ef      	cmn	r7, r5
 8007e70:	d407      	bmi.n	8007e82 <__kernel_rem_pio2+0x9a>
 8007e72:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8007e76:	f7f8 fb0d 	bl	8000494 <__aeabi_i2d>
 8007e7a:	e8e6 0102 	strd	r0, r1, [r6], #8
 8007e7e:	3501      	adds	r5, #1
 8007e80:	e7df      	b.n	8007e42 <__kernel_rem_pio2+0x5a>
 8007e82:	ec51 0b18 	vmov	r0, r1, d8
 8007e86:	e7f8      	b.n	8007e7a <__kernel_rem_pio2+0x92>
 8007e88:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007e8c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8007e90:	f7f8 fb6a 	bl	8000568 <__aeabi_dmul>
 8007e94:	4602      	mov	r2, r0
 8007e96:	460b      	mov	r3, r1
 8007e98:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007e9c:	f7f8 f9ae 	bl	80001fc <__adddf3>
 8007ea0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007ea4:	3601      	adds	r6, #1
 8007ea6:	9b06      	ldr	r3, [sp, #24]
 8007ea8:	429e      	cmp	r6, r3
 8007eaa:	f1a7 0708 	sub.w	r7, r7, #8
 8007eae:	ddeb      	ble.n	8007e88 <__kernel_rem_pio2+0xa0>
 8007eb0:	ed9d 7b04 	vldr	d7, [sp, #16]
 8007eb4:	f108 0801 	add.w	r8, r8, #1
 8007eb8:	ecab 7b02 	vstmia	fp!, {d7}
 8007ebc:	3508      	adds	r5, #8
 8007ebe:	e7cc      	b.n	8007e5a <__kernel_rem_pio2+0x72>
 8007ec0:	9b02      	ldr	r3, [sp, #8]
 8007ec2:	aa0e      	add	r2, sp, #56	; 0x38
 8007ec4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007ec8:	930d      	str	r3, [sp, #52]	; 0x34
 8007eca:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8007ecc:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8007ed0:	9c02      	ldr	r4, [sp, #8]
 8007ed2:	930c      	str	r3, [sp, #48]	; 0x30
 8007ed4:	00e3      	lsls	r3, r4, #3
 8007ed6:	930a      	str	r3, [sp, #40]	; 0x28
 8007ed8:	ab9a      	add	r3, sp, #616	; 0x268
 8007eda:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007ede:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8007ee2:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 8007ee6:	ab72      	add	r3, sp, #456	; 0x1c8
 8007ee8:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 8007eec:	46c3      	mov	fp, r8
 8007eee:	46a1      	mov	r9, r4
 8007ef0:	f1b9 0f00 	cmp.w	r9, #0
 8007ef4:	f1a5 0508 	sub.w	r5, r5, #8
 8007ef8:	dc77      	bgt.n	8007fea <__kernel_rem_pio2+0x202>
 8007efa:	ec47 6b10 	vmov	d0, r6, r7
 8007efe:	4650      	mov	r0, sl
 8007f00:	f000 fc0a 	bl	8008718 <scalbn>
 8007f04:	ec57 6b10 	vmov	r6, r7, d0
 8007f08:	2200      	movs	r2, #0
 8007f0a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8007f0e:	ee10 0a10 	vmov	r0, s0
 8007f12:	4639      	mov	r1, r7
 8007f14:	f7f8 fb28 	bl	8000568 <__aeabi_dmul>
 8007f18:	ec41 0b10 	vmov	d0, r0, r1
 8007f1c:	f000 fb7c 	bl	8008618 <floor>
 8007f20:	4b7c      	ldr	r3, [pc, #496]	; (8008114 <__kernel_rem_pio2+0x32c>)
 8007f22:	ec51 0b10 	vmov	r0, r1, d0
 8007f26:	2200      	movs	r2, #0
 8007f28:	f7f8 fb1e 	bl	8000568 <__aeabi_dmul>
 8007f2c:	4602      	mov	r2, r0
 8007f2e:	460b      	mov	r3, r1
 8007f30:	4630      	mov	r0, r6
 8007f32:	4639      	mov	r1, r7
 8007f34:	f7f8 f960 	bl	80001f8 <__aeabi_dsub>
 8007f38:	460f      	mov	r7, r1
 8007f3a:	4606      	mov	r6, r0
 8007f3c:	f7f8 fdae 	bl	8000a9c <__aeabi_d2iz>
 8007f40:	9004      	str	r0, [sp, #16]
 8007f42:	f7f8 faa7 	bl	8000494 <__aeabi_i2d>
 8007f46:	4602      	mov	r2, r0
 8007f48:	460b      	mov	r3, r1
 8007f4a:	4630      	mov	r0, r6
 8007f4c:	4639      	mov	r1, r7
 8007f4e:	f7f8 f953 	bl	80001f8 <__aeabi_dsub>
 8007f52:	f1ba 0f00 	cmp.w	sl, #0
 8007f56:	4606      	mov	r6, r0
 8007f58:	460f      	mov	r7, r1
 8007f5a:	dd6d      	ble.n	8008038 <__kernel_rem_pio2+0x250>
 8007f5c:	1e62      	subs	r2, r4, #1
 8007f5e:	ab0e      	add	r3, sp, #56	; 0x38
 8007f60:	9d04      	ldr	r5, [sp, #16]
 8007f62:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8007f66:	f1ca 0118 	rsb	r1, sl, #24
 8007f6a:	fa40 f301 	asr.w	r3, r0, r1
 8007f6e:	441d      	add	r5, r3
 8007f70:	408b      	lsls	r3, r1
 8007f72:	1ac0      	subs	r0, r0, r3
 8007f74:	ab0e      	add	r3, sp, #56	; 0x38
 8007f76:	9504      	str	r5, [sp, #16]
 8007f78:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8007f7c:	f1ca 0317 	rsb	r3, sl, #23
 8007f80:	fa40 fb03 	asr.w	fp, r0, r3
 8007f84:	f1bb 0f00 	cmp.w	fp, #0
 8007f88:	dd65      	ble.n	8008056 <__kernel_rem_pio2+0x26e>
 8007f8a:	9b04      	ldr	r3, [sp, #16]
 8007f8c:	2200      	movs	r2, #0
 8007f8e:	3301      	adds	r3, #1
 8007f90:	9304      	str	r3, [sp, #16]
 8007f92:	4615      	mov	r5, r2
 8007f94:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8007f98:	4294      	cmp	r4, r2
 8007f9a:	f300 809c 	bgt.w	80080d6 <__kernel_rem_pio2+0x2ee>
 8007f9e:	f1ba 0f00 	cmp.w	sl, #0
 8007fa2:	dd07      	ble.n	8007fb4 <__kernel_rem_pio2+0x1cc>
 8007fa4:	f1ba 0f01 	cmp.w	sl, #1
 8007fa8:	f000 80c0 	beq.w	800812c <__kernel_rem_pio2+0x344>
 8007fac:	f1ba 0f02 	cmp.w	sl, #2
 8007fb0:	f000 80c6 	beq.w	8008140 <__kernel_rem_pio2+0x358>
 8007fb4:	f1bb 0f02 	cmp.w	fp, #2
 8007fb8:	d14d      	bne.n	8008056 <__kernel_rem_pio2+0x26e>
 8007fba:	4632      	mov	r2, r6
 8007fbc:	463b      	mov	r3, r7
 8007fbe:	4956      	ldr	r1, [pc, #344]	; (8008118 <__kernel_rem_pio2+0x330>)
 8007fc0:	2000      	movs	r0, #0
 8007fc2:	f7f8 f919 	bl	80001f8 <__aeabi_dsub>
 8007fc6:	4606      	mov	r6, r0
 8007fc8:	460f      	mov	r7, r1
 8007fca:	2d00      	cmp	r5, #0
 8007fcc:	d043      	beq.n	8008056 <__kernel_rem_pio2+0x26e>
 8007fce:	4650      	mov	r0, sl
 8007fd0:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 8008108 <__kernel_rem_pio2+0x320>
 8007fd4:	f000 fba0 	bl	8008718 <scalbn>
 8007fd8:	4630      	mov	r0, r6
 8007fda:	4639      	mov	r1, r7
 8007fdc:	ec53 2b10 	vmov	r2, r3, d0
 8007fe0:	f7f8 f90a 	bl	80001f8 <__aeabi_dsub>
 8007fe4:	4606      	mov	r6, r0
 8007fe6:	460f      	mov	r7, r1
 8007fe8:	e035      	b.n	8008056 <__kernel_rem_pio2+0x26e>
 8007fea:	4b4c      	ldr	r3, [pc, #304]	; (800811c <__kernel_rem_pio2+0x334>)
 8007fec:	2200      	movs	r2, #0
 8007fee:	4630      	mov	r0, r6
 8007ff0:	4639      	mov	r1, r7
 8007ff2:	f7f8 fab9 	bl	8000568 <__aeabi_dmul>
 8007ff6:	f7f8 fd51 	bl	8000a9c <__aeabi_d2iz>
 8007ffa:	f7f8 fa4b 	bl	8000494 <__aeabi_i2d>
 8007ffe:	4602      	mov	r2, r0
 8008000:	460b      	mov	r3, r1
 8008002:	ec43 2b18 	vmov	d8, r2, r3
 8008006:	4b46      	ldr	r3, [pc, #280]	; (8008120 <__kernel_rem_pio2+0x338>)
 8008008:	2200      	movs	r2, #0
 800800a:	f7f8 faad 	bl	8000568 <__aeabi_dmul>
 800800e:	4602      	mov	r2, r0
 8008010:	460b      	mov	r3, r1
 8008012:	4630      	mov	r0, r6
 8008014:	4639      	mov	r1, r7
 8008016:	f7f8 f8ef 	bl	80001f8 <__aeabi_dsub>
 800801a:	f7f8 fd3f 	bl	8000a9c <__aeabi_d2iz>
 800801e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008022:	f84b 0b04 	str.w	r0, [fp], #4
 8008026:	ec51 0b18 	vmov	r0, r1, d8
 800802a:	f7f8 f8e7 	bl	80001fc <__adddf3>
 800802e:	f109 39ff 	add.w	r9, r9, #4294967295
 8008032:	4606      	mov	r6, r0
 8008034:	460f      	mov	r7, r1
 8008036:	e75b      	b.n	8007ef0 <__kernel_rem_pio2+0x108>
 8008038:	d106      	bne.n	8008048 <__kernel_rem_pio2+0x260>
 800803a:	1e63      	subs	r3, r4, #1
 800803c:	aa0e      	add	r2, sp, #56	; 0x38
 800803e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8008042:	ea4f 5be0 	mov.w	fp, r0, asr #23
 8008046:	e79d      	b.n	8007f84 <__kernel_rem_pio2+0x19c>
 8008048:	4b36      	ldr	r3, [pc, #216]	; (8008124 <__kernel_rem_pio2+0x33c>)
 800804a:	2200      	movs	r2, #0
 800804c:	f7f8 fd12 	bl	8000a74 <__aeabi_dcmpge>
 8008050:	2800      	cmp	r0, #0
 8008052:	d13d      	bne.n	80080d0 <__kernel_rem_pio2+0x2e8>
 8008054:	4683      	mov	fp, r0
 8008056:	2200      	movs	r2, #0
 8008058:	2300      	movs	r3, #0
 800805a:	4630      	mov	r0, r6
 800805c:	4639      	mov	r1, r7
 800805e:	f7f8 fceb 	bl	8000a38 <__aeabi_dcmpeq>
 8008062:	2800      	cmp	r0, #0
 8008064:	f000 80c0 	beq.w	80081e8 <__kernel_rem_pio2+0x400>
 8008068:	1e65      	subs	r5, r4, #1
 800806a:	462b      	mov	r3, r5
 800806c:	2200      	movs	r2, #0
 800806e:	9902      	ldr	r1, [sp, #8]
 8008070:	428b      	cmp	r3, r1
 8008072:	da6c      	bge.n	800814e <__kernel_rem_pio2+0x366>
 8008074:	2a00      	cmp	r2, #0
 8008076:	f000 8089 	beq.w	800818c <__kernel_rem_pio2+0x3a4>
 800807a:	ab0e      	add	r3, sp, #56	; 0x38
 800807c:	f1aa 0a18 	sub.w	sl, sl, #24
 8008080:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8008084:	2b00      	cmp	r3, #0
 8008086:	f000 80ad 	beq.w	80081e4 <__kernel_rem_pio2+0x3fc>
 800808a:	4650      	mov	r0, sl
 800808c:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 8008108 <__kernel_rem_pio2+0x320>
 8008090:	f000 fb42 	bl	8008718 <scalbn>
 8008094:	ab9a      	add	r3, sp, #616	; 0x268
 8008096:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800809a:	ec57 6b10 	vmov	r6, r7, d0
 800809e:	00ec      	lsls	r4, r5, #3
 80080a0:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 80080a4:	46aa      	mov	sl, r5
 80080a6:	f1ba 0f00 	cmp.w	sl, #0
 80080aa:	f280 80d6 	bge.w	800825a <__kernel_rem_pio2+0x472>
 80080ae:	ed9f 8b14 	vldr	d8, [pc, #80]	; 8008100 <__kernel_rem_pio2+0x318>
 80080b2:	462e      	mov	r6, r5
 80080b4:	2e00      	cmp	r6, #0
 80080b6:	f2c0 8104 	blt.w	80082c2 <__kernel_rem_pio2+0x4da>
 80080ba:	ab72      	add	r3, sp, #456	; 0x1c8
 80080bc:	ed8d 8b06 	vstr	d8, [sp, #24]
 80080c0:	f8df a064 	ldr.w	sl, [pc, #100]	; 8008128 <__kernel_rem_pio2+0x340>
 80080c4:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 80080c8:	f04f 0800 	mov.w	r8, #0
 80080cc:	1baf      	subs	r7, r5, r6
 80080ce:	e0ea      	b.n	80082a6 <__kernel_rem_pio2+0x4be>
 80080d0:	f04f 0b02 	mov.w	fp, #2
 80080d4:	e759      	b.n	8007f8a <__kernel_rem_pio2+0x1a2>
 80080d6:	f8d8 3000 	ldr.w	r3, [r8]
 80080da:	b955      	cbnz	r5, 80080f2 <__kernel_rem_pio2+0x30a>
 80080dc:	b123      	cbz	r3, 80080e8 <__kernel_rem_pio2+0x300>
 80080de:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80080e2:	f8c8 3000 	str.w	r3, [r8]
 80080e6:	2301      	movs	r3, #1
 80080e8:	3201      	adds	r2, #1
 80080ea:	f108 0804 	add.w	r8, r8, #4
 80080ee:	461d      	mov	r5, r3
 80080f0:	e752      	b.n	8007f98 <__kernel_rem_pio2+0x1b0>
 80080f2:	1acb      	subs	r3, r1, r3
 80080f4:	f8c8 3000 	str.w	r3, [r8]
 80080f8:	462b      	mov	r3, r5
 80080fa:	e7f5      	b.n	80080e8 <__kernel_rem_pio2+0x300>
 80080fc:	f3af 8000 	nop.w
	...
 800810c:	3ff00000 	.word	0x3ff00000
 8008110:	08008a60 	.word	0x08008a60
 8008114:	40200000 	.word	0x40200000
 8008118:	3ff00000 	.word	0x3ff00000
 800811c:	3e700000 	.word	0x3e700000
 8008120:	41700000 	.word	0x41700000
 8008124:	3fe00000 	.word	0x3fe00000
 8008128:	08008a20 	.word	0x08008a20
 800812c:	1e62      	subs	r2, r4, #1
 800812e:	ab0e      	add	r3, sp, #56	; 0x38
 8008130:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008134:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8008138:	a90e      	add	r1, sp, #56	; 0x38
 800813a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800813e:	e739      	b.n	8007fb4 <__kernel_rem_pio2+0x1cc>
 8008140:	1e62      	subs	r2, r4, #1
 8008142:	ab0e      	add	r3, sp, #56	; 0x38
 8008144:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008148:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800814c:	e7f4      	b.n	8008138 <__kernel_rem_pio2+0x350>
 800814e:	a90e      	add	r1, sp, #56	; 0x38
 8008150:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8008154:	3b01      	subs	r3, #1
 8008156:	430a      	orrs	r2, r1
 8008158:	e789      	b.n	800806e <__kernel_rem_pio2+0x286>
 800815a:	3301      	adds	r3, #1
 800815c:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8008160:	2900      	cmp	r1, #0
 8008162:	d0fa      	beq.n	800815a <__kernel_rem_pio2+0x372>
 8008164:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008166:	f502 721a 	add.w	r2, r2, #616	; 0x268
 800816a:	446a      	add	r2, sp
 800816c:	3a98      	subs	r2, #152	; 0x98
 800816e:	920a      	str	r2, [sp, #40]	; 0x28
 8008170:	9a08      	ldr	r2, [sp, #32]
 8008172:	18e3      	adds	r3, r4, r3
 8008174:	18a5      	adds	r5, r4, r2
 8008176:	aa22      	add	r2, sp, #136	; 0x88
 8008178:	f104 0801 	add.w	r8, r4, #1
 800817c:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8008180:	9304      	str	r3, [sp, #16]
 8008182:	9b04      	ldr	r3, [sp, #16]
 8008184:	4543      	cmp	r3, r8
 8008186:	da04      	bge.n	8008192 <__kernel_rem_pio2+0x3aa>
 8008188:	461c      	mov	r4, r3
 800818a:	e6a3      	b.n	8007ed4 <__kernel_rem_pio2+0xec>
 800818c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800818e:	2301      	movs	r3, #1
 8008190:	e7e4      	b.n	800815c <__kernel_rem_pio2+0x374>
 8008192:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008194:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8008198:	f7f8 f97c 	bl	8000494 <__aeabi_i2d>
 800819c:	e8e5 0102 	strd	r0, r1, [r5], #8
 80081a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80081a2:	46ab      	mov	fp, r5
 80081a4:	461c      	mov	r4, r3
 80081a6:	f04f 0900 	mov.w	r9, #0
 80081aa:	2600      	movs	r6, #0
 80081ac:	2700      	movs	r7, #0
 80081ae:	9b06      	ldr	r3, [sp, #24]
 80081b0:	4599      	cmp	r9, r3
 80081b2:	dd06      	ble.n	80081c2 <__kernel_rem_pio2+0x3da>
 80081b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80081b6:	e8e3 6702 	strd	r6, r7, [r3], #8
 80081ba:	f108 0801 	add.w	r8, r8, #1
 80081be:	930a      	str	r3, [sp, #40]	; 0x28
 80081c0:	e7df      	b.n	8008182 <__kernel_rem_pio2+0x39a>
 80081c2:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 80081c6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 80081ca:	f7f8 f9cd 	bl	8000568 <__aeabi_dmul>
 80081ce:	4602      	mov	r2, r0
 80081d0:	460b      	mov	r3, r1
 80081d2:	4630      	mov	r0, r6
 80081d4:	4639      	mov	r1, r7
 80081d6:	f7f8 f811 	bl	80001fc <__adddf3>
 80081da:	f109 0901 	add.w	r9, r9, #1
 80081de:	4606      	mov	r6, r0
 80081e0:	460f      	mov	r7, r1
 80081e2:	e7e4      	b.n	80081ae <__kernel_rem_pio2+0x3c6>
 80081e4:	3d01      	subs	r5, #1
 80081e6:	e748      	b.n	800807a <__kernel_rem_pio2+0x292>
 80081e8:	ec47 6b10 	vmov	d0, r6, r7
 80081ec:	f1ca 0000 	rsb	r0, sl, #0
 80081f0:	f000 fa92 	bl	8008718 <scalbn>
 80081f4:	ec57 6b10 	vmov	r6, r7, d0
 80081f8:	4ba0      	ldr	r3, [pc, #640]	; (800847c <__kernel_rem_pio2+0x694>)
 80081fa:	ee10 0a10 	vmov	r0, s0
 80081fe:	2200      	movs	r2, #0
 8008200:	4639      	mov	r1, r7
 8008202:	f7f8 fc37 	bl	8000a74 <__aeabi_dcmpge>
 8008206:	b1f8      	cbz	r0, 8008248 <__kernel_rem_pio2+0x460>
 8008208:	4b9d      	ldr	r3, [pc, #628]	; (8008480 <__kernel_rem_pio2+0x698>)
 800820a:	2200      	movs	r2, #0
 800820c:	4630      	mov	r0, r6
 800820e:	4639      	mov	r1, r7
 8008210:	f7f8 f9aa 	bl	8000568 <__aeabi_dmul>
 8008214:	f7f8 fc42 	bl	8000a9c <__aeabi_d2iz>
 8008218:	4680      	mov	r8, r0
 800821a:	f7f8 f93b 	bl	8000494 <__aeabi_i2d>
 800821e:	4b97      	ldr	r3, [pc, #604]	; (800847c <__kernel_rem_pio2+0x694>)
 8008220:	2200      	movs	r2, #0
 8008222:	f7f8 f9a1 	bl	8000568 <__aeabi_dmul>
 8008226:	460b      	mov	r3, r1
 8008228:	4602      	mov	r2, r0
 800822a:	4639      	mov	r1, r7
 800822c:	4630      	mov	r0, r6
 800822e:	f7f7 ffe3 	bl	80001f8 <__aeabi_dsub>
 8008232:	f7f8 fc33 	bl	8000a9c <__aeabi_d2iz>
 8008236:	1c65      	adds	r5, r4, #1
 8008238:	ab0e      	add	r3, sp, #56	; 0x38
 800823a:	f10a 0a18 	add.w	sl, sl, #24
 800823e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8008242:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8008246:	e720      	b.n	800808a <__kernel_rem_pio2+0x2a2>
 8008248:	4630      	mov	r0, r6
 800824a:	4639      	mov	r1, r7
 800824c:	f7f8 fc26 	bl	8000a9c <__aeabi_d2iz>
 8008250:	ab0e      	add	r3, sp, #56	; 0x38
 8008252:	4625      	mov	r5, r4
 8008254:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8008258:	e717      	b.n	800808a <__kernel_rem_pio2+0x2a2>
 800825a:	ab0e      	add	r3, sp, #56	; 0x38
 800825c:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8008260:	f7f8 f918 	bl	8000494 <__aeabi_i2d>
 8008264:	4632      	mov	r2, r6
 8008266:	463b      	mov	r3, r7
 8008268:	f7f8 f97e 	bl	8000568 <__aeabi_dmul>
 800826c:	4b84      	ldr	r3, [pc, #528]	; (8008480 <__kernel_rem_pio2+0x698>)
 800826e:	e968 0102 	strd	r0, r1, [r8, #-8]!
 8008272:	2200      	movs	r2, #0
 8008274:	4630      	mov	r0, r6
 8008276:	4639      	mov	r1, r7
 8008278:	f7f8 f976 	bl	8000568 <__aeabi_dmul>
 800827c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008280:	4606      	mov	r6, r0
 8008282:	460f      	mov	r7, r1
 8008284:	e70f      	b.n	80080a6 <__kernel_rem_pio2+0x2be>
 8008286:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800828a:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800828e:	f7f8 f96b 	bl	8000568 <__aeabi_dmul>
 8008292:	4602      	mov	r2, r0
 8008294:	460b      	mov	r3, r1
 8008296:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800829a:	f7f7 ffaf 	bl	80001fc <__adddf3>
 800829e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80082a2:	f108 0801 	add.w	r8, r8, #1
 80082a6:	9b02      	ldr	r3, [sp, #8]
 80082a8:	4598      	cmp	r8, r3
 80082aa:	dc01      	bgt.n	80082b0 <__kernel_rem_pio2+0x4c8>
 80082ac:	45b8      	cmp	r8, r7
 80082ae:	ddea      	ble.n	8008286 <__kernel_rem_pio2+0x49e>
 80082b0:	ed9d 7b06 	vldr	d7, [sp, #24]
 80082b4:	ab4a      	add	r3, sp, #296	; 0x128
 80082b6:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80082ba:	ed87 7b00 	vstr	d7, [r7]
 80082be:	3e01      	subs	r6, #1
 80082c0:	e6f8      	b.n	80080b4 <__kernel_rem_pio2+0x2cc>
 80082c2:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 80082c4:	2b02      	cmp	r3, #2
 80082c6:	dc0b      	bgt.n	80082e0 <__kernel_rem_pio2+0x4f8>
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	dc35      	bgt.n	8008338 <__kernel_rem_pio2+0x550>
 80082cc:	d059      	beq.n	8008382 <__kernel_rem_pio2+0x59a>
 80082ce:	9b04      	ldr	r3, [sp, #16]
 80082d0:	f003 0007 	and.w	r0, r3, #7
 80082d4:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 80082d8:	ecbd 8b02 	vpop	{d8}
 80082dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082e0:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 80082e2:	2b03      	cmp	r3, #3
 80082e4:	d1f3      	bne.n	80082ce <__kernel_rem_pio2+0x4e6>
 80082e6:	ab4a      	add	r3, sp, #296	; 0x128
 80082e8:	4423      	add	r3, r4
 80082ea:	9306      	str	r3, [sp, #24]
 80082ec:	461c      	mov	r4, r3
 80082ee:	469a      	mov	sl, r3
 80082f0:	9502      	str	r5, [sp, #8]
 80082f2:	9b02      	ldr	r3, [sp, #8]
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	f1aa 0a08 	sub.w	sl, sl, #8
 80082fa:	dc6b      	bgt.n	80083d4 <__kernel_rem_pio2+0x5ec>
 80082fc:	46aa      	mov	sl, r5
 80082fe:	f1ba 0f01 	cmp.w	sl, #1
 8008302:	f1a4 0408 	sub.w	r4, r4, #8
 8008306:	f300 8085 	bgt.w	8008414 <__kernel_rem_pio2+0x62c>
 800830a:	9c06      	ldr	r4, [sp, #24]
 800830c:	2000      	movs	r0, #0
 800830e:	3408      	adds	r4, #8
 8008310:	2100      	movs	r1, #0
 8008312:	2d01      	cmp	r5, #1
 8008314:	f300 809d 	bgt.w	8008452 <__kernel_rem_pio2+0x66a>
 8008318:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800831c:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 8008320:	f1bb 0f00 	cmp.w	fp, #0
 8008324:	f040 809b 	bne.w	800845e <__kernel_rem_pio2+0x676>
 8008328:	9b01      	ldr	r3, [sp, #4]
 800832a:	e9c3 5600 	strd	r5, r6, [r3]
 800832e:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8008332:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8008336:	e7ca      	b.n	80082ce <__kernel_rem_pio2+0x4e6>
 8008338:	3408      	adds	r4, #8
 800833a:	ab4a      	add	r3, sp, #296	; 0x128
 800833c:	441c      	add	r4, r3
 800833e:	462e      	mov	r6, r5
 8008340:	2000      	movs	r0, #0
 8008342:	2100      	movs	r1, #0
 8008344:	2e00      	cmp	r6, #0
 8008346:	da36      	bge.n	80083b6 <__kernel_rem_pio2+0x5ce>
 8008348:	f1bb 0f00 	cmp.w	fp, #0
 800834c:	d039      	beq.n	80083c2 <__kernel_rem_pio2+0x5da>
 800834e:	4602      	mov	r2, r0
 8008350:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008354:	9c01      	ldr	r4, [sp, #4]
 8008356:	e9c4 2300 	strd	r2, r3, [r4]
 800835a:	4602      	mov	r2, r0
 800835c:	460b      	mov	r3, r1
 800835e:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8008362:	f7f7 ff49 	bl	80001f8 <__aeabi_dsub>
 8008366:	ae4c      	add	r6, sp, #304	; 0x130
 8008368:	2401      	movs	r4, #1
 800836a:	42a5      	cmp	r5, r4
 800836c:	da2c      	bge.n	80083c8 <__kernel_rem_pio2+0x5e0>
 800836e:	f1bb 0f00 	cmp.w	fp, #0
 8008372:	d002      	beq.n	800837a <__kernel_rem_pio2+0x592>
 8008374:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008378:	4619      	mov	r1, r3
 800837a:	9b01      	ldr	r3, [sp, #4]
 800837c:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8008380:	e7a5      	b.n	80082ce <__kernel_rem_pio2+0x4e6>
 8008382:	f504 731a 	add.w	r3, r4, #616	; 0x268
 8008386:	eb0d 0403 	add.w	r4, sp, r3
 800838a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800838e:	2000      	movs	r0, #0
 8008390:	2100      	movs	r1, #0
 8008392:	2d00      	cmp	r5, #0
 8008394:	da09      	bge.n	80083aa <__kernel_rem_pio2+0x5c2>
 8008396:	f1bb 0f00 	cmp.w	fp, #0
 800839a:	d002      	beq.n	80083a2 <__kernel_rem_pio2+0x5ba>
 800839c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80083a0:	4619      	mov	r1, r3
 80083a2:	9b01      	ldr	r3, [sp, #4]
 80083a4:	e9c3 0100 	strd	r0, r1, [r3]
 80083a8:	e791      	b.n	80082ce <__kernel_rem_pio2+0x4e6>
 80083aa:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80083ae:	f7f7 ff25 	bl	80001fc <__adddf3>
 80083b2:	3d01      	subs	r5, #1
 80083b4:	e7ed      	b.n	8008392 <__kernel_rem_pio2+0x5aa>
 80083b6:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80083ba:	f7f7 ff1f 	bl	80001fc <__adddf3>
 80083be:	3e01      	subs	r6, #1
 80083c0:	e7c0      	b.n	8008344 <__kernel_rem_pio2+0x55c>
 80083c2:	4602      	mov	r2, r0
 80083c4:	460b      	mov	r3, r1
 80083c6:	e7c5      	b.n	8008354 <__kernel_rem_pio2+0x56c>
 80083c8:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 80083cc:	f7f7 ff16 	bl	80001fc <__adddf3>
 80083d0:	3401      	adds	r4, #1
 80083d2:	e7ca      	b.n	800836a <__kernel_rem_pio2+0x582>
 80083d4:	e9da 8900 	ldrd	r8, r9, [sl]
 80083d8:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 80083dc:	9b02      	ldr	r3, [sp, #8]
 80083de:	3b01      	subs	r3, #1
 80083e0:	9302      	str	r3, [sp, #8]
 80083e2:	4632      	mov	r2, r6
 80083e4:	463b      	mov	r3, r7
 80083e6:	4640      	mov	r0, r8
 80083e8:	4649      	mov	r1, r9
 80083ea:	f7f7 ff07 	bl	80001fc <__adddf3>
 80083ee:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80083f2:	4602      	mov	r2, r0
 80083f4:	460b      	mov	r3, r1
 80083f6:	4640      	mov	r0, r8
 80083f8:	4649      	mov	r1, r9
 80083fa:	f7f7 fefd 	bl	80001f8 <__aeabi_dsub>
 80083fe:	4632      	mov	r2, r6
 8008400:	463b      	mov	r3, r7
 8008402:	f7f7 fefb 	bl	80001fc <__adddf3>
 8008406:	ed9d 7b08 	vldr	d7, [sp, #32]
 800840a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800840e:	ed8a 7b00 	vstr	d7, [sl]
 8008412:	e76e      	b.n	80082f2 <__kernel_rem_pio2+0x50a>
 8008414:	e9d4 8900 	ldrd	r8, r9, [r4]
 8008418:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800841c:	4640      	mov	r0, r8
 800841e:	4632      	mov	r2, r6
 8008420:	463b      	mov	r3, r7
 8008422:	4649      	mov	r1, r9
 8008424:	f7f7 feea 	bl	80001fc <__adddf3>
 8008428:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800842c:	4602      	mov	r2, r0
 800842e:	460b      	mov	r3, r1
 8008430:	4640      	mov	r0, r8
 8008432:	4649      	mov	r1, r9
 8008434:	f7f7 fee0 	bl	80001f8 <__aeabi_dsub>
 8008438:	4632      	mov	r2, r6
 800843a:	463b      	mov	r3, r7
 800843c:	f7f7 fede 	bl	80001fc <__adddf3>
 8008440:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008444:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8008448:	ed84 7b00 	vstr	d7, [r4]
 800844c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008450:	e755      	b.n	80082fe <__kernel_rem_pio2+0x516>
 8008452:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8008456:	f7f7 fed1 	bl	80001fc <__adddf3>
 800845a:	3d01      	subs	r5, #1
 800845c:	e759      	b.n	8008312 <__kernel_rem_pio2+0x52a>
 800845e:	9b01      	ldr	r3, [sp, #4]
 8008460:	9a01      	ldr	r2, [sp, #4]
 8008462:	601d      	str	r5, [r3, #0]
 8008464:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8008468:	605c      	str	r4, [r3, #4]
 800846a:	609f      	str	r7, [r3, #8]
 800846c:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8008470:	60d3      	str	r3, [r2, #12]
 8008472:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008476:	6110      	str	r0, [r2, #16]
 8008478:	6153      	str	r3, [r2, #20]
 800847a:	e728      	b.n	80082ce <__kernel_rem_pio2+0x4e6>
 800847c:	41700000 	.word	0x41700000
 8008480:	3e700000 	.word	0x3e700000
 8008484:	00000000 	.word	0x00000000

08008488 <__kernel_sin>:
 8008488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800848c:	ed2d 8b04 	vpush	{d8-d9}
 8008490:	eeb0 8a41 	vmov.f32	s16, s2
 8008494:	eef0 8a61 	vmov.f32	s17, s3
 8008498:	ec55 4b10 	vmov	r4, r5, d0
 800849c:	b083      	sub	sp, #12
 800849e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80084a2:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80084a6:	9001      	str	r0, [sp, #4]
 80084a8:	da06      	bge.n	80084b8 <__kernel_sin+0x30>
 80084aa:	ee10 0a10 	vmov	r0, s0
 80084ae:	4629      	mov	r1, r5
 80084b0:	f7f8 faf4 	bl	8000a9c <__aeabi_d2iz>
 80084b4:	2800      	cmp	r0, #0
 80084b6:	d051      	beq.n	800855c <__kernel_sin+0xd4>
 80084b8:	4622      	mov	r2, r4
 80084ba:	462b      	mov	r3, r5
 80084bc:	4620      	mov	r0, r4
 80084be:	4629      	mov	r1, r5
 80084c0:	f7f8 f852 	bl	8000568 <__aeabi_dmul>
 80084c4:	4682      	mov	sl, r0
 80084c6:	468b      	mov	fp, r1
 80084c8:	4602      	mov	r2, r0
 80084ca:	460b      	mov	r3, r1
 80084cc:	4620      	mov	r0, r4
 80084ce:	4629      	mov	r1, r5
 80084d0:	f7f8 f84a 	bl	8000568 <__aeabi_dmul>
 80084d4:	a341      	add	r3, pc, #260	; (adr r3, 80085dc <__kernel_sin+0x154>)
 80084d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084da:	4680      	mov	r8, r0
 80084dc:	4689      	mov	r9, r1
 80084de:	4650      	mov	r0, sl
 80084e0:	4659      	mov	r1, fp
 80084e2:	f7f8 f841 	bl	8000568 <__aeabi_dmul>
 80084e6:	a33f      	add	r3, pc, #252	; (adr r3, 80085e4 <__kernel_sin+0x15c>)
 80084e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084ec:	f7f7 fe84 	bl	80001f8 <__aeabi_dsub>
 80084f0:	4652      	mov	r2, sl
 80084f2:	465b      	mov	r3, fp
 80084f4:	f7f8 f838 	bl	8000568 <__aeabi_dmul>
 80084f8:	a33c      	add	r3, pc, #240	; (adr r3, 80085ec <__kernel_sin+0x164>)
 80084fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084fe:	f7f7 fe7d 	bl	80001fc <__adddf3>
 8008502:	4652      	mov	r2, sl
 8008504:	465b      	mov	r3, fp
 8008506:	f7f8 f82f 	bl	8000568 <__aeabi_dmul>
 800850a:	a33a      	add	r3, pc, #232	; (adr r3, 80085f4 <__kernel_sin+0x16c>)
 800850c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008510:	f7f7 fe72 	bl	80001f8 <__aeabi_dsub>
 8008514:	4652      	mov	r2, sl
 8008516:	465b      	mov	r3, fp
 8008518:	f7f8 f826 	bl	8000568 <__aeabi_dmul>
 800851c:	a337      	add	r3, pc, #220	; (adr r3, 80085fc <__kernel_sin+0x174>)
 800851e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008522:	f7f7 fe6b 	bl	80001fc <__adddf3>
 8008526:	9b01      	ldr	r3, [sp, #4]
 8008528:	4606      	mov	r6, r0
 800852a:	460f      	mov	r7, r1
 800852c:	b9eb      	cbnz	r3, 800856a <__kernel_sin+0xe2>
 800852e:	4602      	mov	r2, r0
 8008530:	460b      	mov	r3, r1
 8008532:	4650      	mov	r0, sl
 8008534:	4659      	mov	r1, fp
 8008536:	f7f8 f817 	bl	8000568 <__aeabi_dmul>
 800853a:	a325      	add	r3, pc, #148	; (adr r3, 80085d0 <__kernel_sin+0x148>)
 800853c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008540:	f7f7 fe5a 	bl	80001f8 <__aeabi_dsub>
 8008544:	4642      	mov	r2, r8
 8008546:	464b      	mov	r3, r9
 8008548:	f7f8 f80e 	bl	8000568 <__aeabi_dmul>
 800854c:	4602      	mov	r2, r0
 800854e:	460b      	mov	r3, r1
 8008550:	4620      	mov	r0, r4
 8008552:	4629      	mov	r1, r5
 8008554:	f7f7 fe52 	bl	80001fc <__adddf3>
 8008558:	4604      	mov	r4, r0
 800855a:	460d      	mov	r5, r1
 800855c:	ec45 4b10 	vmov	d0, r4, r5
 8008560:	b003      	add	sp, #12
 8008562:	ecbd 8b04 	vpop	{d8-d9}
 8008566:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800856a:	4b1b      	ldr	r3, [pc, #108]	; (80085d8 <__kernel_sin+0x150>)
 800856c:	ec51 0b18 	vmov	r0, r1, d8
 8008570:	2200      	movs	r2, #0
 8008572:	f7f7 fff9 	bl	8000568 <__aeabi_dmul>
 8008576:	4632      	mov	r2, r6
 8008578:	ec41 0b19 	vmov	d9, r0, r1
 800857c:	463b      	mov	r3, r7
 800857e:	4640      	mov	r0, r8
 8008580:	4649      	mov	r1, r9
 8008582:	f7f7 fff1 	bl	8000568 <__aeabi_dmul>
 8008586:	4602      	mov	r2, r0
 8008588:	460b      	mov	r3, r1
 800858a:	ec51 0b19 	vmov	r0, r1, d9
 800858e:	f7f7 fe33 	bl	80001f8 <__aeabi_dsub>
 8008592:	4652      	mov	r2, sl
 8008594:	465b      	mov	r3, fp
 8008596:	f7f7 ffe7 	bl	8000568 <__aeabi_dmul>
 800859a:	ec53 2b18 	vmov	r2, r3, d8
 800859e:	f7f7 fe2b 	bl	80001f8 <__aeabi_dsub>
 80085a2:	a30b      	add	r3, pc, #44	; (adr r3, 80085d0 <__kernel_sin+0x148>)
 80085a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085a8:	4606      	mov	r6, r0
 80085aa:	460f      	mov	r7, r1
 80085ac:	4640      	mov	r0, r8
 80085ae:	4649      	mov	r1, r9
 80085b0:	f7f7 ffda 	bl	8000568 <__aeabi_dmul>
 80085b4:	4602      	mov	r2, r0
 80085b6:	460b      	mov	r3, r1
 80085b8:	4630      	mov	r0, r6
 80085ba:	4639      	mov	r1, r7
 80085bc:	f7f7 fe1e 	bl	80001fc <__adddf3>
 80085c0:	4602      	mov	r2, r0
 80085c2:	460b      	mov	r3, r1
 80085c4:	4620      	mov	r0, r4
 80085c6:	4629      	mov	r1, r5
 80085c8:	f7f7 fe16 	bl	80001f8 <__aeabi_dsub>
 80085cc:	e7c4      	b.n	8008558 <__kernel_sin+0xd0>
 80085ce:	bf00      	nop
 80085d0:	55555549 	.word	0x55555549
 80085d4:	3fc55555 	.word	0x3fc55555
 80085d8:	3fe00000 	.word	0x3fe00000
 80085dc:	5acfd57c 	.word	0x5acfd57c
 80085e0:	3de5d93a 	.word	0x3de5d93a
 80085e4:	8a2b9ceb 	.word	0x8a2b9ceb
 80085e8:	3e5ae5e6 	.word	0x3e5ae5e6
 80085ec:	57b1fe7d 	.word	0x57b1fe7d
 80085f0:	3ec71de3 	.word	0x3ec71de3
 80085f4:	19c161d5 	.word	0x19c161d5
 80085f8:	3f2a01a0 	.word	0x3f2a01a0
 80085fc:	1110f8a6 	.word	0x1110f8a6
 8008600:	3f811111 	.word	0x3f811111

08008604 <fabs>:
 8008604:	ec51 0b10 	vmov	r0, r1, d0
 8008608:	ee10 2a10 	vmov	r2, s0
 800860c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008610:	ec43 2b10 	vmov	d0, r2, r3
 8008614:	4770      	bx	lr
	...

08008618 <floor>:
 8008618:	ec51 0b10 	vmov	r0, r1, d0
 800861c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008620:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8008624:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8008628:	2e13      	cmp	r6, #19
 800862a:	ee10 5a10 	vmov	r5, s0
 800862e:	ee10 8a10 	vmov	r8, s0
 8008632:	460c      	mov	r4, r1
 8008634:	dc32      	bgt.n	800869c <floor+0x84>
 8008636:	2e00      	cmp	r6, #0
 8008638:	da14      	bge.n	8008664 <floor+0x4c>
 800863a:	a333      	add	r3, pc, #204	; (adr r3, 8008708 <floor+0xf0>)
 800863c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008640:	f7f7 fddc 	bl	80001fc <__adddf3>
 8008644:	2200      	movs	r2, #0
 8008646:	2300      	movs	r3, #0
 8008648:	f7f8 fa1e 	bl	8000a88 <__aeabi_dcmpgt>
 800864c:	b138      	cbz	r0, 800865e <floor+0x46>
 800864e:	2c00      	cmp	r4, #0
 8008650:	da57      	bge.n	8008702 <floor+0xea>
 8008652:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8008656:	431d      	orrs	r5, r3
 8008658:	d001      	beq.n	800865e <floor+0x46>
 800865a:	4c2d      	ldr	r4, [pc, #180]	; (8008710 <floor+0xf8>)
 800865c:	2500      	movs	r5, #0
 800865e:	4621      	mov	r1, r4
 8008660:	4628      	mov	r0, r5
 8008662:	e025      	b.n	80086b0 <floor+0x98>
 8008664:	4f2b      	ldr	r7, [pc, #172]	; (8008714 <floor+0xfc>)
 8008666:	4137      	asrs	r7, r6
 8008668:	ea01 0307 	and.w	r3, r1, r7
 800866c:	4303      	orrs	r3, r0
 800866e:	d01f      	beq.n	80086b0 <floor+0x98>
 8008670:	a325      	add	r3, pc, #148	; (adr r3, 8008708 <floor+0xf0>)
 8008672:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008676:	f7f7 fdc1 	bl	80001fc <__adddf3>
 800867a:	2200      	movs	r2, #0
 800867c:	2300      	movs	r3, #0
 800867e:	f7f8 fa03 	bl	8000a88 <__aeabi_dcmpgt>
 8008682:	2800      	cmp	r0, #0
 8008684:	d0eb      	beq.n	800865e <floor+0x46>
 8008686:	2c00      	cmp	r4, #0
 8008688:	bfbe      	ittt	lt
 800868a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800868e:	fa43 f606 	asrlt.w	r6, r3, r6
 8008692:	19a4      	addlt	r4, r4, r6
 8008694:	ea24 0407 	bic.w	r4, r4, r7
 8008698:	2500      	movs	r5, #0
 800869a:	e7e0      	b.n	800865e <floor+0x46>
 800869c:	2e33      	cmp	r6, #51	; 0x33
 800869e:	dd0b      	ble.n	80086b8 <floor+0xa0>
 80086a0:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80086a4:	d104      	bne.n	80086b0 <floor+0x98>
 80086a6:	ee10 2a10 	vmov	r2, s0
 80086aa:	460b      	mov	r3, r1
 80086ac:	f7f7 fda6 	bl	80001fc <__adddf3>
 80086b0:	ec41 0b10 	vmov	d0, r0, r1
 80086b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80086b8:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 80086bc:	f04f 33ff 	mov.w	r3, #4294967295
 80086c0:	fa23 f707 	lsr.w	r7, r3, r7
 80086c4:	4207      	tst	r7, r0
 80086c6:	d0f3      	beq.n	80086b0 <floor+0x98>
 80086c8:	a30f      	add	r3, pc, #60	; (adr r3, 8008708 <floor+0xf0>)
 80086ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086ce:	f7f7 fd95 	bl	80001fc <__adddf3>
 80086d2:	2200      	movs	r2, #0
 80086d4:	2300      	movs	r3, #0
 80086d6:	f7f8 f9d7 	bl	8000a88 <__aeabi_dcmpgt>
 80086da:	2800      	cmp	r0, #0
 80086dc:	d0bf      	beq.n	800865e <floor+0x46>
 80086de:	2c00      	cmp	r4, #0
 80086e0:	da02      	bge.n	80086e8 <floor+0xd0>
 80086e2:	2e14      	cmp	r6, #20
 80086e4:	d103      	bne.n	80086ee <floor+0xd6>
 80086e6:	3401      	adds	r4, #1
 80086e8:	ea25 0507 	bic.w	r5, r5, r7
 80086ec:	e7b7      	b.n	800865e <floor+0x46>
 80086ee:	2301      	movs	r3, #1
 80086f0:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80086f4:	fa03 f606 	lsl.w	r6, r3, r6
 80086f8:	4435      	add	r5, r6
 80086fa:	4545      	cmp	r5, r8
 80086fc:	bf38      	it	cc
 80086fe:	18e4      	addcc	r4, r4, r3
 8008700:	e7f2      	b.n	80086e8 <floor+0xd0>
 8008702:	2500      	movs	r5, #0
 8008704:	462c      	mov	r4, r5
 8008706:	e7aa      	b.n	800865e <floor+0x46>
 8008708:	8800759c 	.word	0x8800759c
 800870c:	7e37e43c 	.word	0x7e37e43c
 8008710:	bff00000 	.word	0xbff00000
 8008714:	000fffff 	.word	0x000fffff

08008718 <scalbn>:
 8008718:	b570      	push	{r4, r5, r6, lr}
 800871a:	ec55 4b10 	vmov	r4, r5, d0
 800871e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8008722:	4606      	mov	r6, r0
 8008724:	462b      	mov	r3, r5
 8008726:	b99a      	cbnz	r2, 8008750 <scalbn+0x38>
 8008728:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800872c:	4323      	orrs	r3, r4
 800872e:	d036      	beq.n	800879e <scalbn+0x86>
 8008730:	4b39      	ldr	r3, [pc, #228]	; (8008818 <scalbn+0x100>)
 8008732:	4629      	mov	r1, r5
 8008734:	ee10 0a10 	vmov	r0, s0
 8008738:	2200      	movs	r2, #0
 800873a:	f7f7 ff15 	bl	8000568 <__aeabi_dmul>
 800873e:	4b37      	ldr	r3, [pc, #220]	; (800881c <scalbn+0x104>)
 8008740:	429e      	cmp	r6, r3
 8008742:	4604      	mov	r4, r0
 8008744:	460d      	mov	r5, r1
 8008746:	da10      	bge.n	800876a <scalbn+0x52>
 8008748:	a32b      	add	r3, pc, #172	; (adr r3, 80087f8 <scalbn+0xe0>)
 800874a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800874e:	e03a      	b.n	80087c6 <scalbn+0xae>
 8008750:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8008754:	428a      	cmp	r2, r1
 8008756:	d10c      	bne.n	8008772 <scalbn+0x5a>
 8008758:	ee10 2a10 	vmov	r2, s0
 800875c:	4620      	mov	r0, r4
 800875e:	4629      	mov	r1, r5
 8008760:	f7f7 fd4c 	bl	80001fc <__adddf3>
 8008764:	4604      	mov	r4, r0
 8008766:	460d      	mov	r5, r1
 8008768:	e019      	b.n	800879e <scalbn+0x86>
 800876a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800876e:	460b      	mov	r3, r1
 8008770:	3a36      	subs	r2, #54	; 0x36
 8008772:	4432      	add	r2, r6
 8008774:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8008778:	428a      	cmp	r2, r1
 800877a:	dd08      	ble.n	800878e <scalbn+0x76>
 800877c:	2d00      	cmp	r5, #0
 800877e:	a120      	add	r1, pc, #128	; (adr r1, 8008800 <scalbn+0xe8>)
 8008780:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008784:	da1c      	bge.n	80087c0 <scalbn+0xa8>
 8008786:	a120      	add	r1, pc, #128	; (adr r1, 8008808 <scalbn+0xf0>)
 8008788:	e9d1 0100 	ldrd	r0, r1, [r1]
 800878c:	e018      	b.n	80087c0 <scalbn+0xa8>
 800878e:	2a00      	cmp	r2, #0
 8008790:	dd08      	ble.n	80087a4 <scalbn+0x8c>
 8008792:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008796:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800879a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800879e:	ec45 4b10 	vmov	d0, r4, r5
 80087a2:	bd70      	pop	{r4, r5, r6, pc}
 80087a4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80087a8:	da19      	bge.n	80087de <scalbn+0xc6>
 80087aa:	f24c 3350 	movw	r3, #50000	; 0xc350
 80087ae:	429e      	cmp	r6, r3
 80087b0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 80087b4:	dd0a      	ble.n	80087cc <scalbn+0xb4>
 80087b6:	a112      	add	r1, pc, #72	; (adr r1, 8008800 <scalbn+0xe8>)
 80087b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d1e2      	bne.n	8008786 <scalbn+0x6e>
 80087c0:	a30f      	add	r3, pc, #60	; (adr r3, 8008800 <scalbn+0xe8>)
 80087c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087c6:	f7f7 fecf 	bl	8000568 <__aeabi_dmul>
 80087ca:	e7cb      	b.n	8008764 <scalbn+0x4c>
 80087cc:	a10a      	add	r1, pc, #40	; (adr r1, 80087f8 <scalbn+0xe0>)
 80087ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d0b8      	beq.n	8008748 <scalbn+0x30>
 80087d6:	a10e      	add	r1, pc, #56	; (adr r1, 8008810 <scalbn+0xf8>)
 80087d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80087dc:	e7b4      	b.n	8008748 <scalbn+0x30>
 80087de:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80087e2:	3236      	adds	r2, #54	; 0x36
 80087e4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80087e8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80087ec:	4620      	mov	r0, r4
 80087ee:	4b0c      	ldr	r3, [pc, #48]	; (8008820 <scalbn+0x108>)
 80087f0:	2200      	movs	r2, #0
 80087f2:	e7e8      	b.n	80087c6 <scalbn+0xae>
 80087f4:	f3af 8000 	nop.w
 80087f8:	c2f8f359 	.word	0xc2f8f359
 80087fc:	01a56e1f 	.word	0x01a56e1f
 8008800:	8800759c 	.word	0x8800759c
 8008804:	7e37e43c 	.word	0x7e37e43c
 8008808:	8800759c 	.word	0x8800759c
 800880c:	fe37e43c 	.word	0xfe37e43c
 8008810:	c2f8f359 	.word	0xc2f8f359
 8008814:	81a56e1f 	.word	0x81a56e1f
 8008818:	43500000 	.word	0x43500000
 800881c:	ffff3cb0 	.word	0xffff3cb0
 8008820:	3c900000 	.word	0x3c900000

08008824 <_init>:
 8008824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008826:	bf00      	nop
 8008828:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800882a:	bc08      	pop	{r3}
 800882c:	469e      	mov	lr, r3
 800882e:	4770      	bx	lr

08008830 <_fini>:
 8008830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008832:	bf00      	nop
 8008834:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008836:	bc08      	pop	{r3}
 8008838:	469e      	mov	lr, r3
 800883a:	4770      	bx	lr
