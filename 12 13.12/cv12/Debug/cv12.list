
cv12.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000190c4  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000df54  08019274  08019274  00029274  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080271c8  080271c8  00040098  2**0
                  CONTENTS
  4 .ARM          00000008  080271c8  080271c8  000371c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080271d0  080271d0  00040098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080271d0  080271d0  000371d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080271d4  080271d4  000371d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  080271d8  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00040098  2**0
                  CONTENTS
 10 .bss          00010e84  20000098  20000098  00040098  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20010f1c  20010f1c  00040098  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00040098  2**0
                  CONTENTS, READONLY
 13 .debug_info   00035e18  00000000  00000000  000400c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00007f0b  00000000  00000000  00075ee0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000024d8  00000000  00000000  0007ddf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002358  00000000  00000000  000802c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00036c0e  00000000  00000000  00082620  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00039f5d  00000000  00000000  000b922e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00101c93  00000000  00000000  000f318b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001f4e1e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000a0e4  00000000  00000000  001f4e70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000098 	.word	0x20000098
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0801925c 	.word	0x0801925c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000009c 	.word	0x2000009c
 80001ec:	0801925c 	.word	0x0801925c

080001f0 <strcmp>:
 80001f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f8:	2a01      	cmp	r2, #1
 80001fa:	bf28      	it	cs
 80001fc:	429a      	cmpcs	r2, r3
 80001fe:	d0f7      	beq.n	80001f0 <strcmp>
 8000200:	1ad0      	subs	r0, r2, r3
 8000202:	4770      	bx	lr

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr
	...

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b974 	b.w	80005c0 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468e      	mov	lr, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14d      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4694      	mov	ip, r2
 8000302:	d969      	bls.n	80003d8 <__udivmoddi4+0xe8>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b152      	cbz	r2, 8000320 <__udivmoddi4+0x30>
 800030a:	fa01 f302 	lsl.w	r3, r1, r2
 800030e:	f1c2 0120 	rsb	r1, r2, #32
 8000312:	fa20 f101 	lsr.w	r1, r0, r1
 8000316:	fa0c fc02 	lsl.w	ip, ip, r2
 800031a:	ea41 0e03 	orr.w	lr, r1, r3
 800031e:	4094      	lsls	r4, r2
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	0c21      	lsrs	r1, r4, #16
 8000326:	fbbe f6f8 	udiv	r6, lr, r8
 800032a:	fa1f f78c 	uxth.w	r7, ip
 800032e:	fb08 e316 	mls	r3, r8, r6, lr
 8000332:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000336:	fb06 f107 	mul.w	r1, r6, r7
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 30ff 	add.w	r0, r6, #4294967295
 8000346:	f080 811f 	bcs.w	8000588 <__udivmoddi4+0x298>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 811c 	bls.w	8000588 <__udivmoddi4+0x298>
 8000350:	3e02      	subs	r6, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a5b      	subs	r3, r3, r1
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb3 f0f8 	udiv	r0, r3, r8
 800035c:	fb08 3310 	mls	r3, r8, r0, r3
 8000360:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000364:	fb00 f707 	mul.w	r7, r0, r7
 8000368:	42a7      	cmp	r7, r4
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x92>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 33ff 	add.w	r3, r0, #4294967295
 8000374:	f080 810a 	bcs.w	800058c <__udivmoddi4+0x29c>
 8000378:	42a7      	cmp	r7, r4
 800037a:	f240 8107 	bls.w	800058c <__udivmoddi4+0x29c>
 800037e:	4464      	add	r4, ip
 8000380:	3802      	subs	r0, #2
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	1be4      	subs	r4, r4, r7
 8000388:	2600      	movs	r6, #0
 800038a:	b11d      	cbz	r5, 8000394 <__udivmoddi4+0xa4>
 800038c:	40d4      	lsrs	r4, r2
 800038e:	2300      	movs	r3, #0
 8000390:	e9c5 4300 	strd	r4, r3, [r5]
 8000394:	4631      	mov	r1, r6
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d909      	bls.n	80003b2 <__udivmoddi4+0xc2>
 800039e:	2d00      	cmp	r5, #0
 80003a0:	f000 80ef 	beq.w	8000582 <__udivmoddi4+0x292>
 80003a4:	2600      	movs	r6, #0
 80003a6:	e9c5 0100 	strd	r0, r1, [r5]
 80003aa:	4630      	mov	r0, r6
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	fab3 f683 	clz	r6, r3
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d14a      	bne.n	8000450 <__udivmoddi4+0x160>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d302      	bcc.n	80003c4 <__udivmoddi4+0xd4>
 80003be:	4282      	cmp	r2, r0
 80003c0:	f200 80f9 	bhi.w	80005b6 <__udivmoddi4+0x2c6>
 80003c4:	1a84      	subs	r4, r0, r2
 80003c6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	469e      	mov	lr, r3
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	d0e0      	beq.n	8000394 <__udivmoddi4+0xa4>
 80003d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003d6:	e7dd      	b.n	8000394 <__udivmoddi4+0xa4>
 80003d8:	b902      	cbnz	r2, 80003dc <__udivmoddi4+0xec>
 80003da:	deff      	udf	#255	; 0xff
 80003dc:	fab2 f282 	clz	r2, r2
 80003e0:	2a00      	cmp	r2, #0
 80003e2:	f040 8092 	bne.w	800050a <__udivmoddi4+0x21a>
 80003e6:	eba1 010c 	sub.w	r1, r1, ip
 80003ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ee:	fa1f fe8c 	uxth.w	lr, ip
 80003f2:	2601      	movs	r6, #1
 80003f4:	0c20      	lsrs	r0, r4, #16
 80003f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003fa:	fb07 1113 	mls	r1, r7, r3, r1
 80003fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000402:	fb0e f003 	mul.w	r0, lr, r3
 8000406:	4288      	cmp	r0, r1
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x12c>
 800040a:	eb1c 0101 	adds.w	r1, ip, r1
 800040e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x12a>
 8000414:	4288      	cmp	r0, r1
 8000416:	f200 80cb 	bhi.w	80005b0 <__udivmoddi4+0x2c0>
 800041a:	4643      	mov	r3, r8
 800041c:	1a09      	subs	r1, r1, r0
 800041e:	b2a4      	uxth	r4, r4
 8000420:	fbb1 f0f7 	udiv	r0, r1, r7
 8000424:	fb07 1110 	mls	r1, r7, r0, r1
 8000428:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800042c:	fb0e fe00 	mul.w	lr, lr, r0
 8000430:	45a6      	cmp	lr, r4
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x156>
 8000434:	eb1c 0404 	adds.w	r4, ip, r4
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295
 800043c:	d202      	bcs.n	8000444 <__udivmoddi4+0x154>
 800043e:	45a6      	cmp	lr, r4
 8000440:	f200 80bb 	bhi.w	80005ba <__udivmoddi4+0x2ca>
 8000444:	4608      	mov	r0, r1
 8000446:	eba4 040e 	sub.w	r4, r4, lr
 800044a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800044e:	e79c      	b.n	800038a <__udivmoddi4+0x9a>
 8000450:	f1c6 0720 	rsb	r7, r6, #32
 8000454:	40b3      	lsls	r3, r6
 8000456:	fa22 fc07 	lsr.w	ip, r2, r7
 800045a:	ea4c 0c03 	orr.w	ip, ip, r3
 800045e:	fa20 f407 	lsr.w	r4, r0, r7
 8000462:	fa01 f306 	lsl.w	r3, r1, r6
 8000466:	431c      	orrs	r4, r3
 8000468:	40f9      	lsrs	r1, r7
 800046a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800046e:	fa00 f306 	lsl.w	r3, r0, r6
 8000472:	fbb1 f8f9 	udiv	r8, r1, r9
 8000476:	0c20      	lsrs	r0, r4, #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fb09 1118 	mls	r1, r9, r8, r1
 8000480:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000484:	fb08 f00e 	mul.w	r0, r8, lr
 8000488:	4288      	cmp	r0, r1
 800048a:	fa02 f206 	lsl.w	r2, r2, r6
 800048e:	d90b      	bls.n	80004a8 <__udivmoddi4+0x1b8>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f108 3aff 	add.w	sl, r8, #4294967295
 8000498:	f080 8088 	bcs.w	80005ac <__udivmoddi4+0x2bc>
 800049c:	4288      	cmp	r0, r1
 800049e:	f240 8085 	bls.w	80005ac <__udivmoddi4+0x2bc>
 80004a2:	f1a8 0802 	sub.w	r8, r8, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1a09      	subs	r1, r1, r0
 80004aa:	b2a4      	uxth	r4, r4
 80004ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80004b0:	fb09 1110 	mls	r1, r9, r0, r1
 80004b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004bc:	458e      	cmp	lr, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x1e2>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004c8:	d26c      	bcs.n	80005a4 <__udivmoddi4+0x2b4>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d96a      	bls.n	80005a4 <__udivmoddi4+0x2b4>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004d6:	fba0 9402 	umull	r9, r4, r0, r2
 80004da:	eba1 010e 	sub.w	r1, r1, lr
 80004de:	42a1      	cmp	r1, r4
 80004e0:	46c8      	mov	r8, r9
 80004e2:	46a6      	mov	lr, r4
 80004e4:	d356      	bcc.n	8000594 <__udivmoddi4+0x2a4>
 80004e6:	d053      	beq.n	8000590 <__udivmoddi4+0x2a0>
 80004e8:	b15d      	cbz	r5, 8000502 <__udivmoddi4+0x212>
 80004ea:	ebb3 0208 	subs.w	r2, r3, r8
 80004ee:	eb61 010e 	sbc.w	r1, r1, lr
 80004f2:	fa01 f707 	lsl.w	r7, r1, r7
 80004f6:	fa22 f306 	lsr.w	r3, r2, r6
 80004fa:	40f1      	lsrs	r1, r6
 80004fc:	431f      	orrs	r7, r3
 80004fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000502:	2600      	movs	r6, #0
 8000504:	4631      	mov	r1, r6
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	f1c2 0320 	rsb	r3, r2, #32
 800050e:	40d8      	lsrs	r0, r3
 8000510:	fa0c fc02 	lsl.w	ip, ip, r2
 8000514:	fa21 f303 	lsr.w	r3, r1, r3
 8000518:	4091      	lsls	r1, r2
 800051a:	4301      	orrs	r1, r0
 800051c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000520:	fa1f fe8c 	uxth.w	lr, ip
 8000524:	fbb3 f0f7 	udiv	r0, r3, r7
 8000528:	fb07 3610 	mls	r6, r7, r0, r3
 800052c:	0c0b      	lsrs	r3, r1, #16
 800052e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000532:	fb00 f60e 	mul.w	r6, r0, lr
 8000536:	429e      	cmp	r6, r3
 8000538:	fa04 f402 	lsl.w	r4, r4, r2
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x260>
 800053e:	eb1c 0303 	adds.w	r3, ip, r3
 8000542:	f100 38ff 	add.w	r8, r0, #4294967295
 8000546:	d22f      	bcs.n	80005a8 <__udivmoddi4+0x2b8>
 8000548:	429e      	cmp	r6, r3
 800054a:	d92d      	bls.n	80005a8 <__udivmoddi4+0x2b8>
 800054c:	3802      	subs	r0, #2
 800054e:	4463      	add	r3, ip
 8000550:	1b9b      	subs	r3, r3, r6
 8000552:	b289      	uxth	r1, r1
 8000554:	fbb3 f6f7 	udiv	r6, r3, r7
 8000558:	fb07 3316 	mls	r3, r7, r6, r3
 800055c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000560:	fb06 f30e 	mul.w	r3, r6, lr
 8000564:	428b      	cmp	r3, r1
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x28a>
 8000568:	eb1c 0101 	adds.w	r1, ip, r1
 800056c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000570:	d216      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000572:	428b      	cmp	r3, r1
 8000574:	d914      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000576:	3e02      	subs	r6, #2
 8000578:	4461      	add	r1, ip
 800057a:	1ac9      	subs	r1, r1, r3
 800057c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000580:	e738      	b.n	80003f4 <__udivmoddi4+0x104>
 8000582:	462e      	mov	r6, r5
 8000584:	4628      	mov	r0, r5
 8000586:	e705      	b.n	8000394 <__udivmoddi4+0xa4>
 8000588:	4606      	mov	r6, r0
 800058a:	e6e3      	b.n	8000354 <__udivmoddi4+0x64>
 800058c:	4618      	mov	r0, r3
 800058e:	e6f8      	b.n	8000382 <__udivmoddi4+0x92>
 8000590:	454b      	cmp	r3, r9
 8000592:	d2a9      	bcs.n	80004e8 <__udivmoddi4+0x1f8>
 8000594:	ebb9 0802 	subs.w	r8, r9, r2
 8000598:	eb64 0e0c 	sbc.w	lr, r4, ip
 800059c:	3801      	subs	r0, #1
 800059e:	e7a3      	b.n	80004e8 <__udivmoddi4+0x1f8>
 80005a0:	4646      	mov	r6, r8
 80005a2:	e7ea      	b.n	800057a <__udivmoddi4+0x28a>
 80005a4:	4620      	mov	r0, r4
 80005a6:	e794      	b.n	80004d2 <__udivmoddi4+0x1e2>
 80005a8:	4640      	mov	r0, r8
 80005aa:	e7d1      	b.n	8000550 <__udivmoddi4+0x260>
 80005ac:	46d0      	mov	r8, sl
 80005ae:	e77b      	b.n	80004a8 <__udivmoddi4+0x1b8>
 80005b0:	3b02      	subs	r3, #2
 80005b2:	4461      	add	r1, ip
 80005b4:	e732      	b.n	800041c <__udivmoddi4+0x12c>
 80005b6:	4630      	mov	r0, r6
 80005b8:	e709      	b.n	80003ce <__udivmoddi4+0xde>
 80005ba:	4464      	add	r4, ip
 80005bc:	3802      	subs	r0, #2
 80005be:	e742      	b.n	8000446 <__udivmoddi4+0x156>

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005c4:	b480      	push	{r7}
 80005c6:	b085      	sub	sp, #20
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	60f8      	str	r0, [r7, #12]
 80005cc:	60b9      	str	r1, [r7, #8]
 80005ce:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005d0:	68fb      	ldr	r3, [r7, #12]
 80005d2:	4a07      	ldr	r2, [pc, #28]	; (80005f0 <vApplicationGetIdleTaskMemory+0x2c>)
 80005d4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005d6:	68bb      	ldr	r3, [r7, #8]
 80005d8:	4a06      	ldr	r2, [pc, #24]	; (80005f4 <vApplicationGetIdleTaskMemory+0x30>)
 80005da:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	2280      	movs	r2, #128	; 0x80
 80005e0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005e2:	bf00      	nop
 80005e4:	3714      	adds	r7, #20
 80005e6:	46bd      	mov	sp, r7
 80005e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop
 80005f0:	200000b4 	.word	0x200000b4
 80005f4:	20000168 	.word	0x20000168

080005f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f8:	b5b0      	push	{r4, r5, r7, lr}
 80005fa:	b088      	sub	sp, #32
 80005fc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005fe:	f000 fd9b 	bl	8001138 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000602:	f000 f81d 	bl	8000640 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000606:	f000 f8af 	bl	8000768 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800060a:	f000 f883 	bl	8000714 <MX_USART3_UART_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 1024);
 800060e:	4b0a      	ldr	r3, [pc, #40]	; (8000638 <main+0x40>)
 8000610:	1d3c      	adds	r4, r7, #4
 8000612:	461d      	mov	r5, r3
 8000614:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000616:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000618:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800061c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000620:	1d3b      	adds	r3, r7, #4
 8000622:	2100      	movs	r1, #0
 8000624:	4618      	mov	r0, r3
 8000626:	f004 fae3 	bl	8004bf0 <osThreadCreate>
 800062a:	4603      	mov	r3, r0
 800062c:	4a03      	ldr	r2, [pc, #12]	; (800063c <main+0x44>)
 800062e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000630:	f004 fac7 	bl	8004bc2 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000634:	e7fe      	b.n	8000634 <main+0x3c>
 8000636:	bf00      	nop
 8000638:	08019280 	.word	0x08019280
 800063c:	200003ac 	.word	0x200003ac

08000640 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b094      	sub	sp, #80	; 0x50
 8000644:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000646:	f107 0320 	add.w	r3, r7, #32
 800064a:	2230      	movs	r2, #48	; 0x30
 800064c:	2100      	movs	r1, #0
 800064e:	4618      	mov	r0, r3
 8000650:	f017 fe1b 	bl	801828a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000654:	f107 030c 	add.w	r3, r7, #12
 8000658:	2200      	movs	r2, #0
 800065a:	601a      	str	r2, [r3, #0]
 800065c:	605a      	str	r2, [r3, #4]
 800065e:	609a      	str	r2, [r3, #8]
 8000660:	60da      	str	r2, [r3, #12]
 8000662:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000664:	2300      	movs	r3, #0
 8000666:	60bb      	str	r3, [r7, #8]
 8000668:	4b28      	ldr	r3, [pc, #160]	; (800070c <SystemClock_Config+0xcc>)
 800066a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800066c:	4a27      	ldr	r2, [pc, #156]	; (800070c <SystemClock_Config+0xcc>)
 800066e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000672:	6413      	str	r3, [r2, #64]	; 0x40
 8000674:	4b25      	ldr	r3, [pc, #148]	; (800070c <SystemClock_Config+0xcc>)
 8000676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000678:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800067c:	60bb      	str	r3, [r7, #8]
 800067e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000680:	2300      	movs	r3, #0
 8000682:	607b      	str	r3, [r7, #4]
 8000684:	4b22      	ldr	r3, [pc, #136]	; (8000710 <SystemClock_Config+0xd0>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	4a21      	ldr	r2, [pc, #132]	; (8000710 <SystemClock_Config+0xd0>)
 800068a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800068e:	6013      	str	r3, [r2, #0]
 8000690:	4b1f      	ldr	r3, [pc, #124]	; (8000710 <SystemClock_Config+0xd0>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000698:	607b      	str	r3, [r7, #4]
 800069a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800069c:	2301      	movs	r3, #1
 800069e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80006a0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80006a4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006a6:	2302      	movs	r3, #2
 80006a8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006aa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006b0:	2304      	movs	r3, #4
 80006b2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80006b4:	23a8      	movs	r3, #168	; 0xa8
 80006b6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006b8:	2302      	movs	r3, #2
 80006ba:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006bc:	2307      	movs	r3, #7
 80006be:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c0:	f107 0320 	add.w	r3, r7, #32
 80006c4:	4618      	mov	r0, r3
 80006c6:	f002 faf5 	bl	8002cb4 <HAL_RCC_OscConfig>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006d0:	f000 f938 	bl	8000944 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006d4:	230f      	movs	r3, #15
 80006d6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006d8:	2302      	movs	r3, #2
 80006da:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006dc:	2300      	movs	r3, #0
 80006de:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006e0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006e4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006ea:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006ec:	f107 030c 	add.w	r3, r7, #12
 80006f0:	2105      	movs	r1, #5
 80006f2:	4618      	mov	r0, r3
 80006f4:	f002 fd56 	bl	80031a4 <HAL_RCC_ClockConfig>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006fe:	f000 f921 	bl	8000944 <Error_Handler>
  }
}
 8000702:	bf00      	nop
 8000704:	3750      	adds	r7, #80	; 0x50
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	40023800 	.word	0x40023800
 8000710:	40007000 	.word	0x40007000

08000714 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000718:	4b11      	ldr	r3, [pc, #68]	; (8000760 <MX_USART3_UART_Init+0x4c>)
 800071a:	4a12      	ldr	r2, [pc, #72]	; (8000764 <MX_USART3_UART_Init+0x50>)
 800071c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800071e:	4b10      	ldr	r3, [pc, #64]	; (8000760 <MX_USART3_UART_Init+0x4c>)
 8000720:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000724:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000726:	4b0e      	ldr	r3, [pc, #56]	; (8000760 <MX_USART3_UART_Init+0x4c>)
 8000728:	2200      	movs	r2, #0
 800072a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800072c:	4b0c      	ldr	r3, [pc, #48]	; (8000760 <MX_USART3_UART_Init+0x4c>)
 800072e:	2200      	movs	r2, #0
 8000730:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000732:	4b0b      	ldr	r3, [pc, #44]	; (8000760 <MX_USART3_UART_Init+0x4c>)
 8000734:	2200      	movs	r2, #0
 8000736:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000738:	4b09      	ldr	r3, [pc, #36]	; (8000760 <MX_USART3_UART_Init+0x4c>)
 800073a:	220c      	movs	r2, #12
 800073c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800073e:	4b08      	ldr	r3, [pc, #32]	; (8000760 <MX_USART3_UART_Init+0x4c>)
 8000740:	2200      	movs	r2, #0
 8000742:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000744:	4b06      	ldr	r3, [pc, #24]	; (8000760 <MX_USART3_UART_Init+0x4c>)
 8000746:	2200      	movs	r2, #0
 8000748:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800074a:	4805      	ldr	r0, [pc, #20]	; (8000760 <MX_USART3_UART_Init+0x4c>)
 800074c:	f003 fa2a 	bl	8003ba4 <HAL_UART_Init>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000756:	f000 f8f5 	bl	8000944 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800075a:	bf00      	nop
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	20000368 	.word	0x20000368
 8000764:	40004800 	.word	0x40004800

08000768 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b08c      	sub	sp, #48	; 0x30
 800076c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800076e:	f107 031c 	add.w	r3, r7, #28
 8000772:	2200      	movs	r2, #0
 8000774:	601a      	str	r2, [r3, #0]
 8000776:	605a      	str	r2, [r3, #4]
 8000778:	609a      	str	r2, [r3, #8]
 800077a:	60da      	str	r2, [r3, #12]
 800077c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800077e:	2300      	movs	r3, #0
 8000780:	61bb      	str	r3, [r7, #24]
 8000782:	4b5b      	ldr	r3, [pc, #364]	; (80008f0 <MX_GPIO_Init+0x188>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000786:	4a5a      	ldr	r2, [pc, #360]	; (80008f0 <MX_GPIO_Init+0x188>)
 8000788:	f043 0304 	orr.w	r3, r3, #4
 800078c:	6313      	str	r3, [r2, #48]	; 0x30
 800078e:	4b58      	ldr	r3, [pc, #352]	; (80008f0 <MX_GPIO_Init+0x188>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	f003 0304 	and.w	r3, r3, #4
 8000796:	61bb      	str	r3, [r7, #24]
 8000798:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800079a:	2300      	movs	r3, #0
 800079c:	617b      	str	r3, [r7, #20]
 800079e:	4b54      	ldr	r3, [pc, #336]	; (80008f0 <MX_GPIO_Init+0x188>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	4a53      	ldr	r2, [pc, #332]	; (80008f0 <MX_GPIO_Init+0x188>)
 80007a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007a8:	6313      	str	r3, [r2, #48]	; 0x30
 80007aa:	4b51      	ldr	r3, [pc, #324]	; (80008f0 <MX_GPIO_Init+0x188>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007b2:	617b      	str	r3, [r7, #20]
 80007b4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007b6:	2300      	movs	r3, #0
 80007b8:	613b      	str	r3, [r7, #16]
 80007ba:	4b4d      	ldr	r3, [pc, #308]	; (80008f0 <MX_GPIO_Init+0x188>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	4a4c      	ldr	r2, [pc, #304]	; (80008f0 <MX_GPIO_Init+0x188>)
 80007c0:	f043 0301 	orr.w	r3, r3, #1
 80007c4:	6313      	str	r3, [r2, #48]	; 0x30
 80007c6:	4b4a      	ldr	r3, [pc, #296]	; (80008f0 <MX_GPIO_Init+0x188>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	f003 0301 	and.w	r3, r3, #1
 80007ce:	613b      	str	r3, [r7, #16]
 80007d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007d2:	2300      	movs	r3, #0
 80007d4:	60fb      	str	r3, [r7, #12]
 80007d6:	4b46      	ldr	r3, [pc, #280]	; (80008f0 <MX_GPIO_Init+0x188>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	4a45      	ldr	r2, [pc, #276]	; (80008f0 <MX_GPIO_Init+0x188>)
 80007dc:	f043 0302 	orr.w	r3, r3, #2
 80007e0:	6313      	str	r3, [r2, #48]	; 0x30
 80007e2:	4b43      	ldr	r3, [pc, #268]	; (80008f0 <MX_GPIO_Init+0x188>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	f003 0302 	and.w	r3, r3, #2
 80007ea:	60fb      	str	r3, [r7, #12]
 80007ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007ee:	2300      	movs	r3, #0
 80007f0:	60bb      	str	r3, [r7, #8]
 80007f2:	4b3f      	ldr	r3, [pc, #252]	; (80008f0 <MX_GPIO_Init+0x188>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	4a3e      	ldr	r2, [pc, #248]	; (80008f0 <MX_GPIO_Init+0x188>)
 80007f8:	f043 0308 	orr.w	r3, r3, #8
 80007fc:	6313      	str	r3, [r2, #48]	; 0x30
 80007fe:	4b3c      	ldr	r3, [pc, #240]	; (80008f0 <MX_GPIO_Init+0x188>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	f003 0308 	and.w	r3, r3, #8
 8000806:	60bb      	str	r3, [r7, #8]
 8000808:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800080a:	2300      	movs	r3, #0
 800080c:	607b      	str	r3, [r7, #4]
 800080e:	4b38      	ldr	r3, [pc, #224]	; (80008f0 <MX_GPIO_Init+0x188>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	4a37      	ldr	r2, [pc, #220]	; (80008f0 <MX_GPIO_Init+0x188>)
 8000814:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000818:	6313      	str	r3, [r2, #48]	; 0x30
 800081a:	4b35      	ldr	r3, [pc, #212]	; (80008f0 <MX_GPIO_Init+0x188>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000822:	607b      	str	r3, [r7, #4]
 8000824:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000826:	2200      	movs	r2, #0
 8000828:	f244 0181 	movw	r1, #16513	; 0x4081
 800082c:	4831      	ldr	r0, [pc, #196]	; (80008f4 <MX_GPIO_Init+0x18c>)
 800082e:	f002 fa27 	bl	8002c80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000832:	2200      	movs	r2, #0
 8000834:	2140      	movs	r1, #64	; 0x40
 8000836:	4830      	ldr	r0, [pc, #192]	; (80008f8 <MX_GPIO_Init+0x190>)
 8000838:	f002 fa22 	bl	8002c80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800083c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000840:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000842:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000846:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000848:	2300      	movs	r3, #0
 800084a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800084c:	f107 031c 	add.w	r3, r7, #28
 8000850:	4619      	mov	r1, r3
 8000852:	482a      	ldr	r0, [pc, #168]	; (80008fc <MX_GPIO_Init+0x194>)
 8000854:	f002 f868 	bl	8002928 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000858:	f244 0381 	movw	r3, #16513	; 0x4081
 800085c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800085e:	2301      	movs	r3, #1
 8000860:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000862:	2300      	movs	r3, #0
 8000864:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000866:	2300      	movs	r3, #0
 8000868:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800086a:	f107 031c 	add.w	r3, r7, #28
 800086e:	4619      	mov	r1, r3
 8000870:	4820      	ldr	r0, [pc, #128]	; (80008f4 <MX_GPIO_Init+0x18c>)
 8000872:	f002 f859 	bl	8002928 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000876:	2340      	movs	r3, #64	; 0x40
 8000878:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800087a:	2301      	movs	r3, #1
 800087c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087e:	2300      	movs	r3, #0
 8000880:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000882:	2300      	movs	r3, #0
 8000884:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000886:	f107 031c 	add.w	r3, r7, #28
 800088a:	4619      	mov	r1, r3
 800088c:	481a      	ldr	r0, [pc, #104]	; (80008f8 <MX_GPIO_Init+0x190>)
 800088e:	f002 f84b 	bl	8002928 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000892:	2380      	movs	r3, #128	; 0x80
 8000894:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000896:	2300      	movs	r3, #0
 8000898:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089a:	2300      	movs	r3, #0
 800089c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800089e:	f107 031c 	add.w	r3, r7, #28
 80008a2:	4619      	mov	r1, r3
 80008a4:	4814      	ldr	r0, [pc, #80]	; (80008f8 <MX_GPIO_Init+0x190>)
 80008a6:	f002 f83f 	bl	8002928 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80008aa:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80008ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008b0:	2302      	movs	r3, #2
 80008b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b4:	2300      	movs	r3, #0
 80008b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008b8:	2303      	movs	r3, #3
 80008ba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80008bc:	230a      	movs	r3, #10
 80008be:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008c0:	f107 031c 	add.w	r3, r7, #28
 80008c4:	4619      	mov	r1, r3
 80008c6:	480e      	ldr	r0, [pc, #56]	; (8000900 <MX_GPIO_Init+0x198>)
 80008c8:	f002 f82e 	bl	8002928 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80008cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80008d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008d2:	2300      	movs	r3, #0
 80008d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d6:	2300      	movs	r3, #0
 80008d8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80008da:	f107 031c 	add.w	r3, r7, #28
 80008de:	4619      	mov	r1, r3
 80008e0:	4807      	ldr	r0, [pc, #28]	; (8000900 <MX_GPIO_Init+0x198>)
 80008e2:	f002 f821 	bl	8002928 <HAL_GPIO_Init>

}
 80008e6:	bf00      	nop
 80008e8:	3730      	adds	r7, #48	; 0x30
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	40023800 	.word	0x40023800
 80008f4:	40020400 	.word	0x40020400
 80008f8:	40021800 	.word	0x40021800
 80008fc:	40020800 	.word	0x40020800
 8000900:	40020000 	.word	0x40020000

08000904 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b082      	sub	sp, #8
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 800090c:	f003 fc0c 	bl	8004128 <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */

  /* Initialize tcp echo server */
  tcpecho_init();
 8000910:	f000 fa74 	bl	8000dfc <tcpecho_init>
  /* Initialize HTTP server */
  httpd_init();
 8000914:	f00a fa2c 	bl	800ad70 <httpd_init>

  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000918:	2001      	movs	r0, #1
 800091a:	f004 f9b5 	bl	8004c88 <osDelay>
 800091e:	e7fb      	b.n	8000918 <StartDefaultTask+0x14>

08000920 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b082      	sub	sp, #8
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	4a04      	ldr	r2, [pc, #16]	; (8000940 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800092e:	4293      	cmp	r3, r2
 8000930:	d101      	bne.n	8000936 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000932:	f000 fc23 	bl	800117c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000936:	bf00      	nop
 8000938:	3708      	adds	r7, #8
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	40002000 	.word	0x40002000

08000944 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000948:	b672      	cpsid	i
}
 800094a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800094c:	e7fe      	b.n	800094c <Error_Handler+0x8>
	...

08000950 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b082      	sub	sp, #8
 8000954:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000956:	2300      	movs	r3, #0
 8000958:	607b      	str	r3, [r7, #4]
 800095a:	4b12      	ldr	r3, [pc, #72]	; (80009a4 <HAL_MspInit+0x54>)
 800095c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800095e:	4a11      	ldr	r2, [pc, #68]	; (80009a4 <HAL_MspInit+0x54>)
 8000960:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000964:	6453      	str	r3, [r2, #68]	; 0x44
 8000966:	4b0f      	ldr	r3, [pc, #60]	; (80009a4 <HAL_MspInit+0x54>)
 8000968:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800096a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800096e:	607b      	str	r3, [r7, #4]
 8000970:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000972:	2300      	movs	r3, #0
 8000974:	603b      	str	r3, [r7, #0]
 8000976:	4b0b      	ldr	r3, [pc, #44]	; (80009a4 <HAL_MspInit+0x54>)
 8000978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800097a:	4a0a      	ldr	r2, [pc, #40]	; (80009a4 <HAL_MspInit+0x54>)
 800097c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000980:	6413      	str	r3, [r2, #64]	; 0x40
 8000982:	4b08      	ldr	r3, [pc, #32]	; (80009a4 <HAL_MspInit+0x54>)
 8000984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000986:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800098a:	603b      	str	r3, [r7, #0]
 800098c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800098e:	2200      	movs	r2, #0
 8000990:	210f      	movs	r1, #15
 8000992:	f06f 0001 	mvn.w	r0, #1
 8000996:	f000 fced 	bl	8001374 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800099a:	bf00      	nop
 800099c:	3708      	adds	r7, #8
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	40023800 	.word	0x40023800

080009a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b08a      	sub	sp, #40	; 0x28
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b0:	f107 0314 	add.w	r3, r7, #20
 80009b4:	2200      	movs	r2, #0
 80009b6:	601a      	str	r2, [r3, #0]
 80009b8:	605a      	str	r2, [r3, #4]
 80009ba:	609a      	str	r2, [r3, #8]
 80009bc:	60da      	str	r2, [r3, #12]
 80009be:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	4a19      	ldr	r2, [pc, #100]	; (8000a2c <HAL_UART_MspInit+0x84>)
 80009c6:	4293      	cmp	r3, r2
 80009c8:	d12c      	bne.n	8000a24 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80009ca:	2300      	movs	r3, #0
 80009cc:	613b      	str	r3, [r7, #16]
 80009ce:	4b18      	ldr	r3, [pc, #96]	; (8000a30 <HAL_UART_MspInit+0x88>)
 80009d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009d2:	4a17      	ldr	r2, [pc, #92]	; (8000a30 <HAL_UART_MspInit+0x88>)
 80009d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80009d8:	6413      	str	r3, [r2, #64]	; 0x40
 80009da:	4b15      	ldr	r3, [pc, #84]	; (8000a30 <HAL_UART_MspInit+0x88>)
 80009dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80009e2:	613b      	str	r3, [r7, #16]
 80009e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80009e6:	2300      	movs	r3, #0
 80009e8:	60fb      	str	r3, [r7, #12]
 80009ea:	4b11      	ldr	r3, [pc, #68]	; (8000a30 <HAL_UART_MspInit+0x88>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ee:	4a10      	ldr	r2, [pc, #64]	; (8000a30 <HAL_UART_MspInit+0x88>)
 80009f0:	f043 0308 	orr.w	r3, r3, #8
 80009f4:	6313      	str	r3, [r2, #48]	; 0x30
 80009f6:	4b0e      	ldr	r3, [pc, #56]	; (8000a30 <HAL_UART_MspInit+0x88>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fa:	f003 0308 	and.w	r3, r3, #8
 80009fe:	60fb      	str	r3, [r7, #12]
 8000a00:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000a02:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000a06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a08:	2302      	movs	r3, #2
 8000a0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a10:	2303      	movs	r3, #3
 8000a12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000a14:	2307      	movs	r3, #7
 8000a16:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a18:	f107 0314 	add.w	r3, r7, #20
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	4805      	ldr	r0, [pc, #20]	; (8000a34 <HAL_UART_MspInit+0x8c>)
 8000a20:	f001 ff82 	bl	8002928 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000a24:	bf00      	nop
 8000a26:	3728      	adds	r7, #40	; 0x28
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	40004800 	.word	0x40004800
 8000a30:	40023800 	.word	0x40023800
 8000a34:	40020c00 	.word	0x40020c00

08000a38 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b08e      	sub	sp, #56	; 0x38
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000a40:	2300      	movs	r3, #0
 8000a42:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000a44:	2300      	movs	r3, #0
 8000a46:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 8000a48:	2300      	movs	r3, #0
 8000a4a:	60fb      	str	r3, [r7, #12]
 8000a4c:	4b33      	ldr	r3, [pc, #204]	; (8000b1c <HAL_InitTick+0xe4>)
 8000a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a50:	4a32      	ldr	r2, [pc, #200]	; (8000b1c <HAL_InitTick+0xe4>)
 8000a52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a56:	6413      	str	r3, [r2, #64]	; 0x40
 8000a58:	4b30      	ldr	r3, [pc, #192]	; (8000b1c <HAL_InitTick+0xe4>)
 8000a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a60:	60fb      	str	r3, [r7, #12]
 8000a62:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a64:	f107 0210 	add.w	r2, r7, #16
 8000a68:	f107 0314 	add.w	r3, r7, #20
 8000a6c:	4611      	mov	r1, r2
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f002 fdb8 	bl	80035e4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000a74:	6a3b      	ldr	r3, [r7, #32]
 8000a76:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM14 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000a78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d103      	bne.n	8000a86 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000a7e:	f002 fd89 	bl	8003594 <HAL_RCC_GetPCLK1Freq>
 8000a82:	6378      	str	r0, [r7, #52]	; 0x34
 8000a84:	e004      	b.n	8000a90 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000a86:	f002 fd85 	bl	8003594 <HAL_RCC_GetPCLK1Freq>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	005b      	lsls	r3, r3, #1
 8000a8e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a92:	4a23      	ldr	r2, [pc, #140]	; (8000b20 <HAL_InitTick+0xe8>)
 8000a94:	fba2 2303 	umull	r2, r3, r2, r3
 8000a98:	0c9b      	lsrs	r3, r3, #18
 8000a9a:	3b01      	subs	r3, #1
 8000a9c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 8000a9e:	4b21      	ldr	r3, [pc, #132]	; (8000b24 <HAL_InitTick+0xec>)
 8000aa0:	4a21      	ldr	r2, [pc, #132]	; (8000b28 <HAL_InitTick+0xf0>)
 8000aa2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 8000aa4:	4b1f      	ldr	r3, [pc, #124]	; (8000b24 <HAL_InitTick+0xec>)
 8000aa6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000aaa:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 8000aac:	4a1d      	ldr	r2, [pc, #116]	; (8000b24 <HAL_InitTick+0xec>)
 8000aae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ab0:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 8000ab2:	4b1c      	ldr	r3, [pc, #112]	; (8000b24 <HAL_InitTick+0xec>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ab8:	4b1a      	ldr	r3, [pc, #104]	; (8000b24 <HAL_InitTick+0xec>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	609a      	str	r2, [r3, #8]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000abe:	4b19      	ldr	r3, [pc, #100]	; (8000b24 <HAL_InitTick+0xec>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim14);
 8000ac4:	4817      	ldr	r0, [pc, #92]	; (8000b24 <HAL_InitTick+0xec>)
 8000ac6:	f002 fdbf 	bl	8003648 <HAL_TIM_Base_Init>
 8000aca:	4603      	mov	r3, r0
 8000acc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000ad0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d11b      	bne.n	8000b10 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim14);
 8000ad8:	4812      	ldr	r0, [pc, #72]	; (8000b24 <HAL_InitTick+0xec>)
 8000ada:	f002 fe0f 	bl	80036fc <HAL_TIM_Base_Start_IT>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000ae4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d111      	bne.n	8000b10 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM14 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8000aec:	202d      	movs	r0, #45	; 0x2d
 8000aee:	f000 fc5d 	bl	80013ac <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	2b0f      	cmp	r3, #15
 8000af6:	d808      	bhi.n	8000b0a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority, 0U);
 8000af8:	2200      	movs	r2, #0
 8000afa:	6879      	ldr	r1, [r7, #4]
 8000afc:	202d      	movs	r0, #45	; 0x2d
 8000afe:	f000 fc39 	bl	8001374 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b02:	4a0a      	ldr	r2, [pc, #40]	; (8000b2c <HAL_InitTick+0xf4>)
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	6013      	str	r3, [r2, #0]
 8000b08:	e002      	b.n	8000b10 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000b10:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000b14:	4618      	mov	r0, r3
 8000b16:	3738      	adds	r7, #56	; 0x38
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	40023800 	.word	0x40023800
 8000b20:	431bde83 	.word	0x431bde83
 8000b24:	200003b0 	.word	0x200003b0
 8000b28:	40002000 	.word	0x40002000
 8000b2c:	20000004 	.word	0x20000004

08000b30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b34:	e7fe      	b.n	8000b34 <NMI_Handler+0x4>

08000b36 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b36:	b480      	push	{r7}
 8000b38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b3a:	e7fe      	b.n	8000b3a <HardFault_Handler+0x4>

08000b3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b40:	e7fe      	b.n	8000b40 <MemManage_Handler+0x4>

08000b42 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b42:	b480      	push	{r7}
 8000b44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b46:	e7fe      	b.n	8000b46 <BusFault_Handler+0x4>

08000b48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b4c:	e7fe      	b.n	8000b4c <UsageFault_Handler+0x4>

08000b4e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b4e:	b480      	push	{r7}
 8000b50:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b52:	bf00      	nop
 8000b54:	46bd      	mov	sp, r7
 8000b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5a:	4770      	bx	lr

08000b5c <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8000b60:	4802      	ldr	r0, [pc, #8]	; (8000b6c <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8000b62:	f002 fe3b 	bl	80037dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8000b66:	bf00      	nop
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	200003b0 	.word	0x200003b0

08000b70 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000b74:	4802      	ldr	r0, [pc, #8]	; (8000b80 <ETH_IRQHandler+0x10>)
 8000b76:	f001 f801 	bl	8001b7c <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000b7a:	bf00      	nop
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	20004f18 	.word	0x20004f18

08000b84 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
	return 1;
 8000b88:	2301      	movs	r3, #1
}
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b92:	4770      	bx	lr

08000b94 <_kill>:

int _kill(int pid, int sig)
{
 8000b94:	b480      	push	{r7}
 8000b96:	b083      	sub	sp, #12
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
 8000b9c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000b9e:	4b05      	ldr	r3, [pc, #20]	; (8000bb4 <_kill+0x20>)
 8000ba0:	2216      	movs	r2, #22
 8000ba2:	601a      	str	r2, [r3, #0]
	return -1;
 8000ba4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ba8:	4618      	mov	r0, r3
 8000baa:	370c      	adds	r7, #12
 8000bac:	46bd      	mov	sp, r7
 8000bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb2:	4770      	bx	lr
 8000bb4:	20010f18 	.word	0x20010f18

08000bb8 <_exit>:

void _exit (int status)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b082      	sub	sp, #8
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000bc0:	f04f 31ff 	mov.w	r1, #4294967295
 8000bc4:	6878      	ldr	r0, [r7, #4]
 8000bc6:	f7ff ffe5 	bl	8000b94 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000bca:	e7fe      	b.n	8000bca <_exit+0x12>

08000bcc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b086      	sub	sp, #24
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	60f8      	str	r0, [r7, #12]
 8000bd4:	60b9      	str	r1, [r7, #8]
 8000bd6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bd8:	2300      	movs	r3, #0
 8000bda:	617b      	str	r3, [r7, #20]
 8000bdc:	e00a      	b.n	8000bf4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000bde:	f3af 8000 	nop.w
 8000be2:	4601      	mov	r1, r0
 8000be4:	68bb      	ldr	r3, [r7, #8]
 8000be6:	1c5a      	adds	r2, r3, #1
 8000be8:	60ba      	str	r2, [r7, #8]
 8000bea:	b2ca      	uxtb	r2, r1
 8000bec:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bee:	697b      	ldr	r3, [r7, #20]
 8000bf0:	3301      	adds	r3, #1
 8000bf2:	617b      	str	r3, [r7, #20]
 8000bf4:	697a      	ldr	r2, [r7, #20]
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	429a      	cmp	r2, r3
 8000bfa:	dbf0      	blt.n	8000bde <_read+0x12>
	}

return len;
 8000bfc:	687b      	ldr	r3, [r7, #4]
}
 8000bfe:	4618      	mov	r0, r3
 8000c00:	3718      	adds	r7, #24
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}

08000c06 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c06:	b580      	push	{r7, lr}
 8000c08:	b086      	sub	sp, #24
 8000c0a:	af00      	add	r7, sp, #0
 8000c0c:	60f8      	str	r0, [r7, #12]
 8000c0e:	60b9      	str	r1, [r7, #8]
 8000c10:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c12:	2300      	movs	r3, #0
 8000c14:	617b      	str	r3, [r7, #20]
 8000c16:	e009      	b.n	8000c2c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000c18:	68bb      	ldr	r3, [r7, #8]
 8000c1a:	1c5a      	adds	r2, r3, #1
 8000c1c:	60ba      	str	r2, [r7, #8]
 8000c1e:	781b      	ldrb	r3, [r3, #0]
 8000c20:	4618      	mov	r0, r3
 8000c22:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c26:	697b      	ldr	r3, [r7, #20]
 8000c28:	3301      	adds	r3, #1
 8000c2a:	617b      	str	r3, [r7, #20]
 8000c2c:	697a      	ldr	r2, [r7, #20]
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	429a      	cmp	r2, r3
 8000c32:	dbf1      	blt.n	8000c18 <_write+0x12>
	}
	return len;
 8000c34:	687b      	ldr	r3, [r7, #4]
}
 8000c36:	4618      	mov	r0, r3
 8000c38:	3718      	adds	r7, #24
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}

08000c3e <_close>:

int _close(int file)
{
 8000c3e:	b480      	push	{r7}
 8000c40:	b083      	sub	sp, #12
 8000c42:	af00      	add	r7, sp, #0
 8000c44:	6078      	str	r0, [r7, #4]
	return -1;
 8000c46:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	370c      	adds	r7, #12
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c54:	4770      	bx	lr

08000c56 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c56:	b480      	push	{r7}
 8000c58:	b083      	sub	sp, #12
 8000c5a:	af00      	add	r7, sp, #0
 8000c5c:	6078      	str	r0, [r7, #4]
 8000c5e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c66:	605a      	str	r2, [r3, #4]
	return 0;
 8000c68:	2300      	movs	r3, #0
}
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	370c      	adds	r7, #12
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr

08000c76 <_isatty>:

int _isatty(int file)
{
 8000c76:	b480      	push	{r7}
 8000c78:	b083      	sub	sp, #12
 8000c7a:	af00      	add	r7, sp, #0
 8000c7c:	6078      	str	r0, [r7, #4]
	return 1;
 8000c7e:	2301      	movs	r3, #1
}
 8000c80:	4618      	mov	r0, r3
 8000c82:	370c      	adds	r7, #12
 8000c84:	46bd      	mov	sp, r7
 8000c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8a:	4770      	bx	lr

08000c8c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b085      	sub	sp, #20
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	60f8      	str	r0, [r7, #12]
 8000c94:	60b9      	str	r1, [r7, #8]
 8000c96:	607a      	str	r2, [r7, #4]
	return 0;
 8000c98:	2300      	movs	r3, #0
}
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	3714      	adds	r7, #20
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca4:	4770      	bx	lr
	...

08000ca8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b087      	sub	sp, #28
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cb0:	4a14      	ldr	r2, [pc, #80]	; (8000d04 <_sbrk+0x5c>)
 8000cb2:	4b15      	ldr	r3, [pc, #84]	; (8000d08 <_sbrk+0x60>)
 8000cb4:	1ad3      	subs	r3, r2, r3
 8000cb6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cb8:	697b      	ldr	r3, [r7, #20]
 8000cba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cbc:	4b13      	ldr	r3, [pc, #76]	; (8000d0c <_sbrk+0x64>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d102      	bne.n	8000cca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cc4:	4b11      	ldr	r3, [pc, #68]	; (8000d0c <_sbrk+0x64>)
 8000cc6:	4a12      	ldr	r2, [pc, #72]	; (8000d10 <_sbrk+0x68>)
 8000cc8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cca:	4b10      	ldr	r3, [pc, #64]	; (8000d0c <_sbrk+0x64>)
 8000ccc:	681a      	ldr	r2, [r3, #0]
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	4413      	add	r3, r2
 8000cd2:	693a      	ldr	r2, [r7, #16]
 8000cd4:	429a      	cmp	r2, r3
 8000cd6:	d205      	bcs.n	8000ce4 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000cd8:	4b0e      	ldr	r3, [pc, #56]	; (8000d14 <_sbrk+0x6c>)
 8000cda:	220c      	movs	r2, #12
 8000cdc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cde:	f04f 33ff 	mov.w	r3, #4294967295
 8000ce2:	e009      	b.n	8000cf8 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ce4:	4b09      	ldr	r3, [pc, #36]	; (8000d0c <_sbrk+0x64>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cea:	4b08      	ldr	r3, [pc, #32]	; (8000d0c <_sbrk+0x64>)
 8000cec:	681a      	ldr	r2, [r3, #0]
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	4413      	add	r3, r2
 8000cf2:	4a06      	ldr	r2, [pc, #24]	; (8000d0c <_sbrk+0x64>)
 8000cf4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cf6:	68fb      	ldr	r3, [r7, #12]
}
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	371c      	adds	r7, #28
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d02:	4770      	bx	lr
 8000d04:	20030000 	.word	0x20030000
 8000d08:	00000400 	.word	0x00000400
 8000d0c:	200003f8 	.word	0x200003f8
 8000d10:	20010f20 	.word	0x20010f20
 8000d14:	20010f18 	.word	0x20010f18

08000d18 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d1c:	4b06      	ldr	r3, [pc, #24]	; (8000d38 <SystemInit+0x20>)
 8000d1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d22:	4a05      	ldr	r2, [pc, #20]	; (8000d38 <SystemInit+0x20>)
 8000d24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d28:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d2c:	bf00      	nop
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr
 8000d36:	bf00      	nop
 8000d38:	e000ed00 	.word	0xe000ed00

08000d3c <tcpecho_thread>:



/*-----------------------------------------------------------------------------------*/
static void tcpecho_thread(void *arg)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b08a      	sub	sp, #40	; 0x28
 8000d40:	af02      	add	r7, sp, #8
 8000d42:	6078      	str	r0, [r7, #4]
  u16_t len;
      
  LWIP_UNUSED_ARG(arg);

  /* Create a new connection identifier. */
  conn = netconn_new(NETCONN_TCP);
 8000d44:	2200      	movs	r2, #0
 8000d46:	2100      	movs	r1, #0
 8000d48:	2010      	movs	r0, #16
 8000d4a:	f006 ff25 	bl	8007b98 <netconn_new_with_proto_and_callback>
 8000d4e:	61f8      	str	r0, [r7, #28]
  
  if (conn!=NULL)
 8000d50:	69fb      	ldr	r3, [r7, #28]
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d04e      	beq.n	8000df4 <tcpecho_thread+0xb8>
  {  
    /* Bind connection to well known port number 7. */
    err = netconn_bind(conn, NULL, 7);
 8000d56:	2207      	movs	r2, #7
 8000d58:	2100      	movs	r1, #0
 8000d5a:	69f8      	ldr	r0, [r7, #28]
 8000d5c:	f006 ffd6 	bl	8007d0c <netconn_bind>
 8000d60:	4603      	mov	r3, r0
 8000d62:	76fb      	strb	r3, [r7, #27]
    
    if (err == ERR_OK)
 8000d64:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d13f      	bne.n	8000dec <tcpecho_thread+0xb0>
    {
      /* Tell connection to go into listening mode. */
      netconn_listen(conn);
 8000d6c:	21ff      	movs	r1, #255	; 0xff
 8000d6e:	69f8      	ldr	r0, [r7, #28]
 8000d70:	f007 f804 	bl	8007d7c <netconn_listen_with_backlog>
    
      while (1) 
      {
        /* Grab new connection. */
         accept_err = netconn_accept(conn, &newconn);
 8000d74:	f107 0314 	add.w	r3, r7, #20
 8000d78:	4619      	mov	r1, r3
 8000d7a:	69f8      	ldr	r0, [r7, #28]
 8000d7c:	f007 f82a 	bl	8007dd4 <netconn_accept>
 8000d80:	4603      	mov	r3, r0
 8000d82:	76bb      	strb	r3, [r7, #26]
    
        /* Process the new connection. */
        if (accept_err == ERR_OK) 
 8000d84:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d1f3      	bne.n	8000d74 <tcpecho_thread+0x38>
        {

          while (netconn_recv(newconn, &buf) == ERR_OK) 
 8000d8c:	e01b      	b.n	8000dc6 <tcpecho_thread+0x8a>
          {
            do 
            {
              netbuf_data(buf, &data, &len);
 8000d8e:	693b      	ldr	r3, [r7, #16]
 8000d90:	f107 020a 	add.w	r2, r7, #10
 8000d94:	f107 010c 	add.w	r1, r7, #12
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f008 ffbd 	bl	8009d18 <netbuf_data>
              netconn_write(newconn, data, len, NETCONN_COPY);
 8000d9e:	6978      	ldr	r0, [r7, #20]
 8000da0:	68f9      	ldr	r1, [r7, #12]
 8000da2:	897b      	ldrh	r3, [r7, #10]
 8000da4:	461a      	mov	r2, r3
 8000da6:	2300      	movs	r3, #0
 8000da8:	9300      	str	r3, [sp, #0]
 8000daa:	2301      	movs	r3, #1
 8000dac:	f007 fa94 	bl	80082d8 <netconn_write_partly>
          
            } 
            while (netbuf_next(buf) >= 0);
 8000db0:	693b      	ldr	r3, [r7, #16]
 8000db2:	4618      	mov	r0, r3
 8000db4:	f008 fffa 	bl	8009dac <netbuf_next>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	dae7      	bge.n	8000d8e <tcpecho_thread+0x52>
          
            netbuf_delete(buf);
 8000dbe:	693b      	ldr	r3, [r7, #16]
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f008 ff89 	bl	8009cd8 <netbuf_delete>
          while (netconn_recv(newconn, &buf) == ERR_OK) 
 8000dc6:	697b      	ldr	r3, [r7, #20]
 8000dc8:	f107 0210 	add.w	r2, r7, #16
 8000dcc:	4611      	mov	r1, r2
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f007 fa08 	bl	80081e4 <netconn_recv>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d0d9      	beq.n	8000d8e <tcpecho_thread+0x52>
          }
        
          /* Close connection and discard connection identifier. */
          netconn_close(newconn);
 8000dda:	697b      	ldr	r3, [r7, #20]
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f007 fb7d 	bl	80084dc <netconn_close>
          netconn_delete(newconn);
 8000de2:	697b      	ldr	r3, [r7, #20]
 8000de4:	4618      	mov	r0, r3
 8000de6:	f006 ff75 	bl	8007cd4 <netconn_delete>
         accept_err = netconn_accept(conn, &newconn);
 8000dea:	e7c3      	b.n	8000d74 <tcpecho_thread+0x38>
        }
      }
    }
    else
    {
      netconn_delete(newconn);
 8000dec:	697b      	ldr	r3, [r7, #20]
 8000dee:	4618      	mov	r0, r3
 8000df0:	f006 ff70 	bl	8007cd4 <netconn_delete>
    }
  }
}
 8000df4:	bf00      	nop
 8000df6:	3720      	adds	r7, #32
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}

08000dfc <tcpecho_init>:
/*-----------------------------------------------------------------------------------*/

void tcpecho_init(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b082      	sub	sp, #8
 8000e00:	af02      	add	r7, sp, #8
  sys_thread_new("tcpecho_thread", tcpecho_thread, NULL, DEFAULT_THREAD_STACKSIZE, TCPECHO_THREAD_PRIO);
 8000e02:	2304      	movs	r3, #4
 8000e04:	9300      	str	r3, [sp, #0]
 8000e06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	4903      	ldr	r1, [pc, #12]	; (8000e1c <tcpecho_init+0x20>)
 8000e0e:	4804      	ldr	r0, [pc, #16]	; (8000e20 <tcpecho_init+0x24>)
 8000e10:	f017 f8bc 	bl	8017f8c <sys_thread_new>
}
 8000e14:	bf00      	nop
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	08000d3d 	.word	0x08000d3d
 8000e20:	0801929c 	.word	0x0801929c

08000e24 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000e24:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e5c <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e28:	480d      	ldr	r0, [pc, #52]	; (8000e60 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e2a:	490e      	ldr	r1, [pc, #56]	; (8000e64 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e2c:	4a0e      	ldr	r2, [pc, #56]	; (8000e68 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e30:	e002      	b.n	8000e38 <LoopCopyDataInit>

08000e32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e36:	3304      	adds	r3, #4

08000e38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e3c:	d3f9      	bcc.n	8000e32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e3e:	4a0b      	ldr	r2, [pc, #44]	; (8000e6c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e40:	4c0b      	ldr	r4, [pc, #44]	; (8000e70 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e44:	e001      	b.n	8000e4a <LoopFillZerobss>

08000e46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e48:	3204      	adds	r2, #4

08000e4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e4c:	d3fb      	bcc.n	8000e46 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e4e:	f7ff ff63 	bl	8000d18 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e52:	f017 f9d5 	bl	8018200 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e56:	f7ff fbcf 	bl	80005f8 <main>
  bx  lr    
 8000e5a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000e5c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000e60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e64:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 8000e68:	080271d8 	.word	0x080271d8
  ldr r2, =_sbss
 8000e6c:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 8000e70:	20010f1c 	.word	0x20010f1c

08000e74 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e74:	e7fe      	b.n	8000e74 <ADC_IRQHandler>

08000e76 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8000e76:	b480      	push	{r7}
 8000e78:	b083      	sub	sp, #12
 8000e7a:	af00      	add	r7, sp, #0
 8000e7c:	6078      	str	r0, [r7, #4]
 8000e7e:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d00b      	beq.n	8000e9e <LAN8742_RegisterBusIO+0x28>
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	68db      	ldr	r3, [r3, #12]
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d007      	beq.n	8000e9e <LAN8742_RegisterBusIO+0x28>
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	689b      	ldr	r3, [r3, #8]
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d003      	beq.n	8000e9e <LAN8742_RegisterBusIO+0x28>
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	691b      	ldr	r3, [r3, #16]
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d102      	bne.n	8000ea4 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8000e9e:	f04f 33ff 	mov.w	r3, #4294967295
 8000ea2:	e014      	b.n	8000ece <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	681a      	ldr	r2, [r3, #0]
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	685a      	ldr	r2, [r3, #4]
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	68da      	ldr	r2, [r3, #12]
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	689a      	ldr	r2, [r3, #8]
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	691a      	ldr	r2, [r3, #16]
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 8000ecc:	2300      	movs	r3, #0
}
 8000ece:	4618      	mov	r0, r3
 8000ed0:	370c      	adds	r7, #12
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed8:	4770      	bx	lr

08000eda <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8000eda:	b580      	push	{r7, lr}
 8000edc:	b086      	sub	sp, #24
 8000ede:	af00      	add	r7, sp, #0
 8000ee0:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	60fb      	str	r3, [r7, #12]
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	60bb      	str	r3, [r7, #8]
 8000eea:	2300      	movs	r3, #0
 8000eec:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	685b      	ldr	r3, [r3, #4]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d17c      	bne.n	8000ff4 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	689b      	ldr	r3, [r3, #8]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d002      	beq.n	8000f08 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	689b      	ldr	r3, [r3, #8]
 8000f06:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	2220      	movs	r2, #32
 8000f0c:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000f0e:	2300      	movs	r3, #0
 8000f10:	617b      	str	r3, [r7, #20]
 8000f12:	e01c      	b.n	8000f4e <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	695b      	ldr	r3, [r3, #20]
 8000f18:	f107 0208 	add.w	r2, r7, #8
 8000f1c:	2112      	movs	r1, #18
 8000f1e:	6978      	ldr	r0, [r7, #20]
 8000f20:	4798      	blx	r3
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	da03      	bge.n	8000f30 <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 8000f28:	f06f 0304 	mvn.w	r3, #4
 8000f2c:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 8000f2e:	e00b      	b.n	8000f48 <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8000f30:	68bb      	ldr	r3, [r7, #8]
 8000f32:	f003 031f 	and.w	r3, r3, #31
 8000f36:	697a      	ldr	r2, [r7, #20]
 8000f38:	429a      	cmp	r2, r3
 8000f3a:	d105      	bne.n	8000f48 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	697a      	ldr	r2, [r7, #20]
 8000f40:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8000f42:	2300      	movs	r3, #0
 8000f44:	613b      	str	r3, [r7, #16]
         break;
 8000f46:	e005      	b.n	8000f54 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	3301      	adds	r3, #1
 8000f4c:	617b      	str	r3, [r7, #20]
 8000f4e:	697b      	ldr	r3, [r7, #20]
 8000f50:	2b1f      	cmp	r3, #31
 8000f52:	d9df      	bls.n	8000f14 <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	2b1f      	cmp	r3, #31
 8000f5a:	d902      	bls.n	8000f62 <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8000f5c:	f06f 0302 	mvn.w	r3, #2
 8000f60:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8000f62:	693b      	ldr	r3, [r7, #16]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d145      	bne.n	8000ff4 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	691b      	ldr	r3, [r3, #16]
 8000f6c:	687a      	ldr	r2, [r7, #4]
 8000f6e:	6810      	ldr	r0, [r2, #0]
 8000f70:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000f74:	2100      	movs	r1, #0
 8000f76:	4798      	blx	r3
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	db37      	blt.n	8000fee <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	695b      	ldr	r3, [r3, #20]
 8000f82:	687a      	ldr	r2, [r7, #4]
 8000f84:	6810      	ldr	r0, [r2, #0]
 8000f86:	f107 0208 	add.w	r2, r7, #8
 8000f8a:	2100      	movs	r1, #0
 8000f8c:	4798      	blx	r3
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	db28      	blt.n	8000fe6 <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	699b      	ldr	r3, [r3, #24]
 8000f98:	4798      	blx	r3
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8000f9e:	e01c      	b.n	8000fda <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	699b      	ldr	r3, [r3, #24]
 8000fa4:	4798      	blx	r3
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	461a      	mov	r2, r3
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	1ad3      	subs	r3, r2, r3
 8000fae:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000fb2:	d80e      	bhi.n	8000fd2 <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	695b      	ldr	r3, [r3, #20]
 8000fb8:	687a      	ldr	r2, [r7, #4]
 8000fba:	6810      	ldr	r0, [r2, #0]
 8000fbc:	f107 0208 	add.w	r2, r7, #8
 8000fc0:	2100      	movs	r1, #0
 8000fc2:	4798      	blx	r3
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	da07      	bge.n	8000fda <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 8000fca:	f06f 0304 	mvn.w	r3, #4
 8000fce:	613b      	str	r3, [r7, #16]
                 break;
 8000fd0:	e010      	b.n	8000ff4 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 8000fd2:	f06f 0301 	mvn.w	r3, #1
 8000fd6:	613b      	str	r3, [r7, #16]
               break;
 8000fd8:	e00c      	b.n	8000ff4 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8000fda:	68bb      	ldr	r3, [r7, #8]
 8000fdc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d1dd      	bne.n	8000fa0 <LAN8742_Init+0xc6>
 8000fe4:	e006      	b.n	8000ff4 <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 8000fe6:	f06f 0304 	mvn.w	r3, #4
 8000fea:	613b      	str	r3, [r7, #16]
 8000fec:	e002      	b.n	8000ff4 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 8000fee:	f06f 0303 	mvn.w	r3, #3
 8000ff2:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 8000ff4:	693b      	ldr	r3, [r7, #16]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d112      	bne.n	8001020 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	699b      	ldr	r3, [r3, #24]
 8000ffe:	4798      	blx	r3
 8001000:	4603      	mov	r3, r0
 8001002:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8001004:	bf00      	nop
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	699b      	ldr	r3, [r3, #24]
 800100a:	4798      	blx	r3
 800100c:	4603      	mov	r3, r0
 800100e:	461a      	mov	r2, r3
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	1ad3      	subs	r3, r2, r3
 8001014:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001018:	d9f5      	bls.n	8001006 <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	2201      	movs	r2, #1
 800101e:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 8001020:	693b      	ldr	r3, [r7, #16]
 }
 8001022:	4618      	mov	r0, r3
 8001024:	3718      	adds	r7, #24
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}

0800102a <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 800102a:	b580      	push	{r7, lr}
 800102c:	b084      	sub	sp, #16
 800102e:	af00      	add	r7, sp, #0
 8001030:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8001032:	2300      	movs	r3, #0
 8001034:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	695b      	ldr	r3, [r3, #20]
 800103a:	687a      	ldr	r2, [r7, #4]
 800103c:	6810      	ldr	r0, [r2, #0]
 800103e:	f107 020c 	add.w	r2, r7, #12
 8001042:	2101      	movs	r1, #1
 8001044:	4798      	blx	r3
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	da02      	bge.n	8001052 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 800104c:	f06f 0304 	mvn.w	r3, #4
 8001050:	e06e      	b.n	8001130 <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	695b      	ldr	r3, [r3, #20]
 8001056:	687a      	ldr	r2, [r7, #4]
 8001058:	6810      	ldr	r0, [r2, #0]
 800105a:	f107 020c 	add.w	r2, r7, #12
 800105e:	2101      	movs	r1, #1
 8001060:	4798      	blx	r3
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	da02      	bge.n	800106e <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001068:	f06f 0304 	mvn.w	r3, #4
 800106c:	e060      	b.n	8001130 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	f003 0304 	and.w	r3, r3, #4
 8001074:	2b00      	cmp	r3, #0
 8001076:	d101      	bne.n	800107c <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 8001078:	2301      	movs	r3, #1
 800107a:	e059      	b.n	8001130 <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	695b      	ldr	r3, [r3, #20]
 8001080:	687a      	ldr	r2, [r7, #4]
 8001082:	6810      	ldr	r0, [r2, #0]
 8001084:	f107 020c 	add.w	r2, r7, #12
 8001088:	2100      	movs	r1, #0
 800108a:	4798      	blx	r3
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	da02      	bge.n	8001098 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001092:	f06f 0304 	mvn.w	r3, #4
 8001096:	e04b      	b.n	8001130 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d11b      	bne.n	80010da <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d006      	beq.n	80010ba <LAN8742_GetLinkState+0x90>
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d001      	beq.n	80010ba <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80010b6:	2302      	movs	r3, #2
 80010b8:	e03a      	b.n	8001130 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d001      	beq.n	80010c8 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80010c4:	2303      	movs	r3, #3
 80010c6:	e033      	b.n	8001130 <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d001      	beq.n	80010d6 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80010d2:	2304      	movs	r3, #4
 80010d4:	e02c      	b.n	8001130 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80010d6:	2305      	movs	r3, #5
 80010d8:	e02a      	b.n	8001130 <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	695b      	ldr	r3, [r3, #20]
 80010de:	687a      	ldr	r2, [r7, #4]
 80010e0:	6810      	ldr	r0, [r2, #0]
 80010e2:	f107 020c 	add.w	r2, r7, #12
 80010e6:	211f      	movs	r1, #31
 80010e8:	4798      	blx	r3
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	da02      	bge.n	80010f6 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 80010f0:	f06f 0304 	mvn.w	r3, #4
 80010f4:	e01c      	b.n	8001130 <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d101      	bne.n	8001104 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8001100:	2306      	movs	r3, #6
 8001102:	e015      	b.n	8001130 <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	f003 031c 	and.w	r3, r3, #28
 800110a:	2b18      	cmp	r3, #24
 800110c:	d101      	bne.n	8001112 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 800110e:	2302      	movs	r3, #2
 8001110:	e00e      	b.n	8001130 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	f003 031c 	and.w	r3, r3, #28
 8001118:	2b08      	cmp	r3, #8
 800111a:	d101      	bne.n	8001120 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 800111c:	2303      	movs	r3, #3
 800111e:	e007      	b.n	8001130 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	f003 031c 	and.w	r3, r3, #28
 8001126:	2b14      	cmp	r3, #20
 8001128:	d101      	bne.n	800112e <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 800112a:	2304      	movs	r3, #4
 800112c:	e000      	b.n	8001130 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 800112e:	2305      	movs	r3, #5
    }				
  }
}
 8001130:	4618      	mov	r0, r3
 8001132:	3710      	adds	r7, #16
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}

08001138 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800113c:	4b0e      	ldr	r3, [pc, #56]	; (8001178 <HAL_Init+0x40>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4a0d      	ldr	r2, [pc, #52]	; (8001178 <HAL_Init+0x40>)
 8001142:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001146:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001148:	4b0b      	ldr	r3, [pc, #44]	; (8001178 <HAL_Init+0x40>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4a0a      	ldr	r2, [pc, #40]	; (8001178 <HAL_Init+0x40>)
 800114e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001152:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001154:	4b08      	ldr	r3, [pc, #32]	; (8001178 <HAL_Init+0x40>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4a07      	ldr	r2, [pc, #28]	; (8001178 <HAL_Init+0x40>)
 800115a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800115e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001160:	2003      	movs	r0, #3
 8001162:	f000 f8fc 	bl	800135e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001166:	200f      	movs	r0, #15
 8001168:	f7ff fc66 	bl	8000a38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800116c:	f7ff fbf0 	bl	8000950 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001170:	2300      	movs	r3, #0
}
 8001172:	4618      	mov	r0, r3
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	40023c00 	.word	0x40023c00

0800117c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001180:	4b06      	ldr	r3, [pc, #24]	; (800119c <HAL_IncTick+0x20>)
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	461a      	mov	r2, r3
 8001186:	4b06      	ldr	r3, [pc, #24]	; (80011a0 <HAL_IncTick+0x24>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	4413      	add	r3, r2
 800118c:	4a04      	ldr	r2, [pc, #16]	; (80011a0 <HAL_IncTick+0x24>)
 800118e:	6013      	str	r3, [r2, #0]
}
 8001190:	bf00      	nop
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr
 800119a:	bf00      	nop
 800119c:	20000008 	.word	0x20000008
 80011a0:	200003fc 	.word	0x200003fc

080011a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
  return uwTick;
 80011a8:	4b03      	ldr	r3, [pc, #12]	; (80011b8 <HAL_GetTick+0x14>)
 80011aa:	681b      	ldr	r3, [r3, #0]
}
 80011ac:	4618      	mov	r0, r3
 80011ae:	46bd      	mov	sp, r7
 80011b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b4:	4770      	bx	lr
 80011b6:	bf00      	nop
 80011b8:	200003fc 	.word	0x200003fc

080011bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b084      	sub	sp, #16
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011c4:	f7ff ffee 	bl	80011a4 <HAL_GetTick>
 80011c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011d4:	d005      	beq.n	80011e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011d6:	4b0a      	ldr	r3, [pc, #40]	; (8001200 <HAL_Delay+0x44>)
 80011d8:	781b      	ldrb	r3, [r3, #0]
 80011da:	461a      	mov	r2, r3
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	4413      	add	r3, r2
 80011e0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80011e2:	bf00      	nop
 80011e4:	f7ff ffde 	bl	80011a4 <HAL_GetTick>
 80011e8:	4602      	mov	r2, r0
 80011ea:	68bb      	ldr	r3, [r7, #8]
 80011ec:	1ad3      	subs	r3, r2, r3
 80011ee:	68fa      	ldr	r2, [r7, #12]
 80011f0:	429a      	cmp	r2, r3
 80011f2:	d8f7      	bhi.n	80011e4 <HAL_Delay+0x28>
  {
  }
}
 80011f4:	bf00      	nop
 80011f6:	bf00      	nop
 80011f8:	3710      	adds	r7, #16
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	20000008 	.word	0x20000008

08001204 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001204:	b480      	push	{r7}
 8001206:	b085      	sub	sp, #20
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	f003 0307 	and.w	r3, r3, #7
 8001212:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001214:	4b0c      	ldr	r3, [pc, #48]	; (8001248 <__NVIC_SetPriorityGrouping+0x44>)
 8001216:	68db      	ldr	r3, [r3, #12]
 8001218:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800121a:	68ba      	ldr	r2, [r7, #8]
 800121c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001220:	4013      	ands	r3, r2
 8001222:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001228:	68bb      	ldr	r3, [r7, #8]
 800122a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800122c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001230:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001234:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001236:	4a04      	ldr	r2, [pc, #16]	; (8001248 <__NVIC_SetPriorityGrouping+0x44>)
 8001238:	68bb      	ldr	r3, [r7, #8]
 800123a:	60d3      	str	r3, [r2, #12]
}
 800123c:	bf00      	nop
 800123e:	3714      	adds	r7, #20
 8001240:	46bd      	mov	sp, r7
 8001242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001246:	4770      	bx	lr
 8001248:	e000ed00 	.word	0xe000ed00

0800124c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001250:	4b04      	ldr	r3, [pc, #16]	; (8001264 <__NVIC_GetPriorityGrouping+0x18>)
 8001252:	68db      	ldr	r3, [r3, #12]
 8001254:	0a1b      	lsrs	r3, r3, #8
 8001256:	f003 0307 	and.w	r3, r3, #7
}
 800125a:	4618      	mov	r0, r3
 800125c:	46bd      	mov	sp, r7
 800125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001262:	4770      	bx	lr
 8001264:	e000ed00 	.word	0xe000ed00

08001268 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001268:	b480      	push	{r7}
 800126a:	b083      	sub	sp, #12
 800126c:	af00      	add	r7, sp, #0
 800126e:	4603      	mov	r3, r0
 8001270:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001272:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001276:	2b00      	cmp	r3, #0
 8001278:	db0b      	blt.n	8001292 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800127a:	79fb      	ldrb	r3, [r7, #7]
 800127c:	f003 021f 	and.w	r2, r3, #31
 8001280:	4907      	ldr	r1, [pc, #28]	; (80012a0 <__NVIC_EnableIRQ+0x38>)
 8001282:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001286:	095b      	lsrs	r3, r3, #5
 8001288:	2001      	movs	r0, #1
 800128a:	fa00 f202 	lsl.w	r2, r0, r2
 800128e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001292:	bf00      	nop
 8001294:	370c      	adds	r7, #12
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr
 800129e:	bf00      	nop
 80012a0:	e000e100 	.word	0xe000e100

080012a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b083      	sub	sp, #12
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	4603      	mov	r3, r0
 80012ac:	6039      	str	r1, [r7, #0]
 80012ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	db0a      	blt.n	80012ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	b2da      	uxtb	r2, r3
 80012bc:	490c      	ldr	r1, [pc, #48]	; (80012f0 <__NVIC_SetPriority+0x4c>)
 80012be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012c2:	0112      	lsls	r2, r2, #4
 80012c4:	b2d2      	uxtb	r2, r2
 80012c6:	440b      	add	r3, r1
 80012c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012cc:	e00a      	b.n	80012e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	b2da      	uxtb	r2, r3
 80012d2:	4908      	ldr	r1, [pc, #32]	; (80012f4 <__NVIC_SetPriority+0x50>)
 80012d4:	79fb      	ldrb	r3, [r7, #7]
 80012d6:	f003 030f 	and.w	r3, r3, #15
 80012da:	3b04      	subs	r3, #4
 80012dc:	0112      	lsls	r2, r2, #4
 80012de:	b2d2      	uxtb	r2, r2
 80012e0:	440b      	add	r3, r1
 80012e2:	761a      	strb	r2, [r3, #24]
}
 80012e4:	bf00      	nop
 80012e6:	370c      	adds	r7, #12
 80012e8:	46bd      	mov	sp, r7
 80012ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ee:	4770      	bx	lr
 80012f0:	e000e100 	.word	0xe000e100
 80012f4:	e000ed00 	.word	0xe000ed00

080012f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b089      	sub	sp, #36	; 0x24
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	60f8      	str	r0, [r7, #12]
 8001300:	60b9      	str	r1, [r7, #8]
 8001302:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	f003 0307 	and.w	r3, r3, #7
 800130a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800130c:	69fb      	ldr	r3, [r7, #28]
 800130e:	f1c3 0307 	rsb	r3, r3, #7
 8001312:	2b04      	cmp	r3, #4
 8001314:	bf28      	it	cs
 8001316:	2304      	movcs	r3, #4
 8001318:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800131a:	69fb      	ldr	r3, [r7, #28]
 800131c:	3304      	adds	r3, #4
 800131e:	2b06      	cmp	r3, #6
 8001320:	d902      	bls.n	8001328 <NVIC_EncodePriority+0x30>
 8001322:	69fb      	ldr	r3, [r7, #28]
 8001324:	3b03      	subs	r3, #3
 8001326:	e000      	b.n	800132a <NVIC_EncodePriority+0x32>
 8001328:	2300      	movs	r3, #0
 800132a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800132c:	f04f 32ff 	mov.w	r2, #4294967295
 8001330:	69bb      	ldr	r3, [r7, #24]
 8001332:	fa02 f303 	lsl.w	r3, r2, r3
 8001336:	43da      	mvns	r2, r3
 8001338:	68bb      	ldr	r3, [r7, #8]
 800133a:	401a      	ands	r2, r3
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001340:	f04f 31ff 	mov.w	r1, #4294967295
 8001344:	697b      	ldr	r3, [r7, #20]
 8001346:	fa01 f303 	lsl.w	r3, r1, r3
 800134a:	43d9      	mvns	r1, r3
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001350:	4313      	orrs	r3, r2
         );
}
 8001352:	4618      	mov	r0, r3
 8001354:	3724      	adds	r7, #36	; 0x24
 8001356:	46bd      	mov	sp, r7
 8001358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135c:	4770      	bx	lr

0800135e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800135e:	b580      	push	{r7, lr}
 8001360:	b082      	sub	sp, #8
 8001362:	af00      	add	r7, sp, #0
 8001364:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001366:	6878      	ldr	r0, [r7, #4]
 8001368:	f7ff ff4c 	bl	8001204 <__NVIC_SetPriorityGrouping>
}
 800136c:	bf00      	nop
 800136e:	3708      	adds	r7, #8
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}

08001374 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001374:	b580      	push	{r7, lr}
 8001376:	b086      	sub	sp, #24
 8001378:	af00      	add	r7, sp, #0
 800137a:	4603      	mov	r3, r0
 800137c:	60b9      	str	r1, [r7, #8]
 800137e:	607a      	str	r2, [r7, #4]
 8001380:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001382:	2300      	movs	r3, #0
 8001384:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001386:	f7ff ff61 	bl	800124c <__NVIC_GetPriorityGrouping>
 800138a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800138c:	687a      	ldr	r2, [r7, #4]
 800138e:	68b9      	ldr	r1, [r7, #8]
 8001390:	6978      	ldr	r0, [r7, #20]
 8001392:	f7ff ffb1 	bl	80012f8 <NVIC_EncodePriority>
 8001396:	4602      	mov	r2, r0
 8001398:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800139c:	4611      	mov	r1, r2
 800139e:	4618      	mov	r0, r3
 80013a0:	f7ff ff80 	bl	80012a4 <__NVIC_SetPriority>
}
 80013a4:	bf00      	nop
 80013a6:	3718      	adds	r7, #24
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}

080013ac <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b082      	sub	sp, #8
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	4603      	mov	r3, r0
 80013b4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ba:	4618      	mov	r0, r3
 80013bc:	f7ff ff54 	bl	8001268 <__NVIC_EnableIRQ>
}
 80013c0:	bf00      	nop
 80013c2:	3708      	adds	r7, #8
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}

080013c8 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b084      	sub	sp, #16
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d101      	bne.n	80013da <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80013d6:	2301      	movs	r3, #1
 80013d8:	e06c      	b.n	80014b4 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d106      	bne.n	80013f2 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	2223      	movs	r2, #35	; 0x23
 80013e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80013ec:	6878      	ldr	r0, [r7, #4]
 80013ee:	f003 f999 	bl	8004724 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013f2:	2300      	movs	r3, #0
 80013f4:	60bb      	str	r3, [r7, #8]
 80013f6:	4b31      	ldr	r3, [pc, #196]	; (80014bc <HAL_ETH_Init+0xf4>)
 80013f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013fa:	4a30      	ldr	r2, [pc, #192]	; (80014bc <HAL_ETH_Init+0xf4>)
 80013fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001400:	6453      	str	r3, [r2, #68]	; 0x44
 8001402:	4b2e      	ldr	r3, [pc, #184]	; (80014bc <HAL_ETH_Init+0xf4>)
 8001404:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001406:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800140a:	60bb      	str	r3, [r7, #8]
 800140c:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800140e:	4b2c      	ldr	r3, [pc, #176]	; (80014c0 <HAL_ETH_Init+0xf8>)
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	4a2b      	ldr	r2, [pc, #172]	; (80014c0 <HAL_ETH_Init+0xf8>)
 8001414:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001418:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800141a:	4b29      	ldr	r3, [pc, #164]	; (80014c0 <HAL_ETH_Init+0xf8>)
 800141c:	685a      	ldr	r2, [r3, #4]
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	689b      	ldr	r3, [r3, #8]
 8001422:	4927      	ldr	r1, [pc, #156]	; (80014c0 <HAL_ETH_Init+0xf8>)
 8001424:	4313      	orrs	r3, r2
 8001426:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001428:	4b25      	ldr	r3, [pc, #148]	; (80014c0 <HAL_ETH_Init+0xf8>)
 800142a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	687a      	ldr	r2, [r7, #4]
 8001438:	6812      	ldr	r2, [r2, #0]
 800143a:	f043 0301 	orr.w	r3, r3, #1
 800143e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001442:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001444:	f7ff feae 	bl	80011a4 <HAL_GetTick>
 8001448:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800144a:	e011      	b.n	8001470 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 800144c:	f7ff feaa 	bl	80011a4 <HAL_GetTick>
 8001450:	4602      	mov	r2, r0
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	1ad3      	subs	r3, r2, r3
 8001456:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800145a:	d909      	bls.n	8001470 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2204      	movs	r2, #4
 8001460:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	22e0      	movs	r2, #224	; 0xe0
 8001468:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 800146c:	2301      	movs	r3, #1
 800146e:	e021      	b.n	80014b4 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f003 0301 	and.w	r3, r3, #1
 800147e:	2b00      	cmp	r3, #0
 8001480:	d1e4      	bne.n	800144c <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001482:	6878      	ldr	r0, [r7, #4]
 8001484:	f000 ffaa 	bl	80023dc <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001488:	6878      	ldr	r0, [r7, #4]
 800148a:	f001 f851 	bl	8002530 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800148e:	6878      	ldr	r0, [r7, #4]
 8001490:	f001 f8a7 	bl	80025e2 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	461a      	mov	r2, r3
 800149a:	2100      	movs	r1, #0
 800149c:	6878      	ldr	r0, [r7, #4]
 800149e:	f001 f80f 	bl	80024c0 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	2200      	movs	r2, #0
 80014a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	2210      	movs	r2, #16
 80014ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80014b2:	2300      	movs	r3, #0
}
 80014b4:	4618      	mov	r0, r3
 80014b6:	3710      	adds	r7, #16
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	40023800 	.word	0x40023800
 80014c0:	40013800 	.word	0x40013800

080014c4 <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b084      	sub	sp, #16
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80014d2:	2b10      	cmp	r3, #16
 80014d4:	d150      	bne.n	8001578 <HAL_ETH_Start+0xb4>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	2223      	movs	r2, #35	; 0x23
 80014da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	2204      	movs	r2, #4
 80014e2:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 80014e4:	6878      	ldr	r0, [r7, #4]
 80014e6:	f000 fa79 	bl	80019dc <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	681a      	ldr	r2, [r3, #0]
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f042 0208 	orr.w	r2, r2, #8
 80014f8:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001502:	2001      	movs	r0, #1
 8001504:	f7ff fe5a 	bl	80011bc <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	68fa      	ldr	r2, [r7, #12]
 800150e:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	681a      	ldr	r2, [r3, #0]
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f042 0204 	orr.w	r2, r2, #4
 800151e:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001528:	2001      	movs	r0, #1
 800152a:	f7ff fe47 	bl	80011bc <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	68fa      	ldr	r2, [r7, #12]
 8001534:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8001536:	6878      	ldr	r0, [r7, #4]
 8001538:	f000 fdf1 	bl	800211e <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001544:	699b      	ldr	r3, [r3, #24]
 8001546:	687a      	ldr	r2, [r7, #4]
 8001548:	6812      	ldr	r2, [r2, #0]
 800154a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800154e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001552:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800155c:	699b      	ldr	r3, [r3, #24]
 800155e:	687a      	ldr	r2, [r7, #4]
 8001560:	6812      	ldr	r2, [r2, #0]
 8001562:	f043 0302 	orr.w	r3, r3, #2
 8001566:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800156a:	6193      	str	r3, [r2, #24]

    heth->gState = HAL_ETH_STATE_STARTED;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	2223      	movs	r2, #35	; 0x23
 8001570:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8001574:	2300      	movs	r3, #0
 8001576:	e000      	b.n	800157a <HAL_ETH_Start+0xb6>
  }
  else
  {
    return HAL_ERROR;
 8001578:	2301      	movs	r3, #1
  }
}
 800157a:	4618      	mov	r0, r3
 800157c:	3710      	adds	r7, #16
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}

08001582 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8001582:	b580      	push	{r7, lr}
 8001584:	b084      	sub	sp, #16
 8001586:	af00      	add	r7, sp, #0
 8001588:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001590:	2b10      	cmp	r3, #16
 8001592:	d17f      	bne.n	8001694 <HAL_ETH_Start_IT+0x112>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2223      	movs	r2, #35	; 0x23
 8001598:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	2201      	movs	r2, #1
 80015a0:	659a      	str	r2, [r3, #88]	; 0x58
    /* Disable MMC Interrupts */
    SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f442 7202 	orr.w	r2, r2, #520	; 0x208
 80015b0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable Rx MMC Interrupts */
    SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 80015ba:	687a      	ldr	r2, [r7, #4]
 80015bc:	6812      	ldr	r2, [r2, #0]
 80015be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015c2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80015c6:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
            ETH_MMCRIMR_RFCEM);

    /* Disable Tx MMC Interrupts */
    SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f442 1203 	orr.w	r2, r2, #2146304	; 0x20c000
 80015da:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            ETH_MMCTIMR_TGFSCM);

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	2204      	movs	r2, #4
 80015e2:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 80015e4:	6878      	ldr	r0, [r7, #4]
 80015e6:	f000 f9f9 	bl	80019dc <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	681a      	ldr	r2, [r3, #0]
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f042 0208 	orr.w	r2, r2, #8
 80015f8:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001602:	2001      	movs	r0, #1
 8001604:	f7ff fdda 	bl	80011bc <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	68fa      	ldr	r2, [r7, #12]
 800160e:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	681a      	ldr	r2, [r3, #0]
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f042 0204 	orr.w	r2, r2, #4
 800161e:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001628:	2001      	movs	r0, #1
 800162a:	f7ff fdc7 	bl	80011bc <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	68fa      	ldr	r2, [r7, #12]
 8001634:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8001636:	6878      	ldr	r0, [r7, #4]
 8001638:	f000 fd71 	bl	800211e <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001644:	699b      	ldr	r3, [r3, #24]
 8001646:	687a      	ldr	r2, [r7, #4]
 8001648:	6812      	ldr	r2, [r2, #0]
 800164a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800164e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001652:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800165c:	699b      	ldr	r3, [r3, #24]
 800165e:	687a      	ldr	r2, [r7, #4]
 8001660:	6812      	ldr	r2, [r2, #0]
 8001662:	f043 0302 	orr.w	r3, r3, #2
 8001666:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800166a:	6193      	str	r3, [r2, #24]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001674:	69db      	ldr	r3, [r3, #28]
 8001676:	687a      	ldr	r2, [r7, #4]
 8001678:	6812      	ldr	r2, [r2, #0]
 800167a:	f443 33d0 	orr.w	r3, r3, #106496	; 0x1a000
 800167e:	f043 03c1 	orr.w	r3, r3, #193	; 0xc1
 8001682:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001686:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	2223      	movs	r2, #35	; 0x23
 800168c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    return HAL_OK;
 8001690:	2300      	movs	r3, #0
 8001692:	e000      	b.n	8001696 <HAL_ETH_Start_IT+0x114>
  }
  else
  {
    return HAL_ERROR;
 8001694:	2301      	movs	r3, #1
  }
}
 8001696:	4618      	mov	r0, r3
 8001698:	3710      	adds	r7, #16
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}

0800169e <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 800169e:	b580      	push	{r7, lr}
 80016a0:	b086      	sub	sp, #24
 80016a2:	af00      	add	r7, sp, #0
 80016a4:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80016ac:	2b23      	cmp	r3, #35	; 0x23
 80016ae:	d170      	bne.n	8001792 <HAL_ETH_Stop_IT+0xf4>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2223      	movs	r2, #35	; 0x23
 80016b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016c0:	69db      	ldr	r3, [r3, #28]
 80016c2:	687a      	ldr	r2, [r7, #4]
 80016c4:	6812      	ldr	r2, [r2, #0]
 80016c6:	f423 33d0 	bic.w	r3, r3, #106496	; 0x1a000
 80016ca:	f023 03c1 	bic.w	r3, r3, #193	; 0xc1
 80016ce:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80016d2:	61d3      	str	r3, [r2, #28]
                                    ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016dc:	699b      	ldr	r3, [r3, #24]
 80016de:	687a      	ldr	r2, [r7, #4]
 80016e0:	6812      	ldr	r2, [r2, #0]
 80016e2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80016e6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80016ea:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016f4:	699b      	ldr	r3, [r3, #24]
 80016f6:	687a      	ldr	r2, [r7, #4]
 80016f8:	6812      	ldr	r2, [r2, #0]
 80016fa:	f023 0302 	bic.w	r3, r3, #2
 80016fe:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001702:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	681a      	ldr	r2, [r3, #0]
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f022 0204 	bic.w	r2, r2, #4
 8001712:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800171c:	2001      	movs	r0, #1
 800171e:	f7ff fd4d 	bl	80011bc <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	693a      	ldr	r2, [r7, #16]
 8001728:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 800172a:	6878      	ldr	r0, [r7, #4]
 800172c:	f000 fcf7 	bl	800211e <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	681a      	ldr	r2, [r3, #0]
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f022 0208 	bic.w	r2, r2, #8
 800173e:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001748:	2001      	movs	r0, #1
 800174a:	f7ff fd37 	bl	80011bc <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	693a      	ldr	r2, [r7, #16]
 8001754:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8001756:	2300      	movs	r3, #0
 8001758:	617b      	str	r3, [r7, #20]
 800175a:	e00e      	b.n	800177a <HAL_ETH_Stop_IT+0xdc>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	697a      	ldr	r2, [r7, #20]
 8001760:	3212      	adds	r2, #18
 8001762:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001766:	60fb      	str	r3, [r7, #12]
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	605a      	str	r2, [r3, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	3301      	adds	r3, #1
 8001778:	617b      	str	r3, [r7, #20]
 800177a:	697b      	ldr	r3, [r7, #20]
 800177c:	2b03      	cmp	r3, #3
 800177e:	d9ed      	bls.n	800175c <HAL_ETH_Stop_IT+0xbe>
    }

    heth->RxDescList.ItMode = 0U;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	2200      	movs	r2, #0
 8001784:	659a      	str	r2, [r3, #88]	; 0x58

    heth->gState = HAL_ETH_STATE_READY;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	2210      	movs	r2, #16
 800178a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 800178e:	2300      	movs	r3, #0
 8001790:	e000      	b.n	8001794 <HAL_ETH_Stop_IT+0xf6>
  }
  else
  {
    return HAL_ERROR;
 8001792:	2301      	movs	r3, #1
  }
}
 8001794:	4618      	mov	r0, r3
 8001796:	3718      	adds	r7, #24
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}

0800179c <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b082      	sub	sp, #8
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
 80017a4:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d109      	bne.n	80017c0 <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017b2:	f043 0201 	orr.w	r2, r3, #1
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 80017bc:	2301      	movs	r3, #1
 80017be:	e045      	b.n	800184c <HAL_ETH_Transmit_IT+0xb0>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80017c6:	2b23      	cmp	r3, #35	; 0x23
 80017c8:	d13f      	bne.n	800184a <HAL_ETH_Transmit_IT+0xae>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 80017d2:	2201      	movs	r2, #1
 80017d4:	6839      	ldr	r1, [r7, #0]
 80017d6:	6878      	ldr	r0, [r7, #4]
 80017d8:	f000 ff70 	bl	80026bc <ETH_Prepare_Tx_Descriptors>
 80017dc:	4603      	mov	r3, r0
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d009      	beq.n	80017f6 <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017e8:	f043 0202 	orr.w	r2, r3, #2
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 80017f2:	2301      	movs	r3, #1
 80017f4:	e02a      	b.n	800184c <HAL_ETH_Transmit_IT+0xb0>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80017f6:	f3bf 8f4f 	dsb	sy
}
 80017fa:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001800:	1c5a      	adds	r2, r3, #1
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	629a      	str	r2, [r3, #40]	; 0x28
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800180a:	2b03      	cmp	r3, #3
 800180c:	d904      	bls.n	8001818 <HAL_ETH_Transmit_IT+0x7c>
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001812:	1f1a      	subs	r2, r3, #4
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001820:	695b      	ldr	r3, [r3, #20]
 8001822:	f003 0304 	and.w	r3, r3, #4
 8001826:	2b00      	cmp	r3, #0
 8001828:	d00d      	beq.n	8001846 <HAL_ETH_Transmit_IT+0xaa>
    {
      /* Clear TBUS ETHERNET DMA flag */
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001832:	461a      	mov	r2, r3
 8001834:	2304      	movs	r3, #4
 8001836:	6153      	str	r3, [r2, #20]
      /* Resume DMA transmission*/
      (heth->Instance)->DMATPDR = 0U;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001840:	461a      	mov	r2, r3
 8001842:	2300      	movs	r3, #0
 8001844:	6053      	str	r3, [r2, #4]
    }

    return HAL_OK;
 8001846:	2300      	movs	r3, #0
 8001848:	e000      	b.n	800184c <HAL_ETH_Transmit_IT+0xb0>

  }
  else
  {
    return HAL_ERROR;
 800184a:	2301      	movs	r3, #1
  }
}
 800184c:	4618      	mov	r0, r3
 800184e:	3708      	adds	r7, #8
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}

08001854 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b088      	sub	sp, #32
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
 800185c:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 800185e:	2300      	movs	r3, #0
 8001860:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8001862:	2300      	movs	r3, #0
 8001864:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d109      	bne.n	8001880 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001872:	f043 0201 	orr.w	r2, r3, #1
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 800187c:	2301      	movs	r3, #1
 800187e:	e0a8      	b.n	80019d2 <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001886:	2b23      	cmp	r3, #35	; 0x23
 8001888:	d001      	beq.n	800188e <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 800188a:	2301      	movs	r3, #1
 800188c:	e0a1      	b.n	80019d2 <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001892:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	69fa      	ldr	r2, [r7, #28]
 8001898:	3212      	adds	r2, #18
 800189a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800189e:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80018a4:	f1c3 0304 	rsb	r3, r3, #4
 80018a8:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80018aa:	e06a      	b.n	8001982 <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 80018ac:	69bb      	ldr	r3, [r7, #24]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d007      	beq.n	80018c8 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC6;
 80018b8:	69bb      	ldr	r3, [r7, #24]
 80018ba:	699a      	ldr	r2, [r3, #24]
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC7;
 80018c0:	69bb      	ldr	r3, [r7, #24]
 80018c2:	69da      	ldr	r2, [r3, #28]
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 80018c8:	69bb      	ldr	r3, [r7, #24]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d103      	bne.n	80018dc <HAL_ETH_ReadData+0x88>
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d040      	beq.n	800195e <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 80018dc:	69bb      	ldr	r3, [r7, #24]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d005      	beq.n	80018f4 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2200      	movs	r2, #0
 80018ec:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	2200      	movs	r2, #0
 80018f2:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	695b      	ldr	r3, [r3, #20]
 80018f8:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 80018fa:	69bb      	ldr	r3, [r7, #24]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001902:	2b00      	cmp	r3, #0
 8001904:	d00c      	beq.n	8001920 <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8001906:	69bb      	ldr	r3, [r7, #24]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	0c1b      	lsrs	r3, r3, #16
 800190c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001910:	3b04      	subs	r3, #4
 8001912:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8001914:	69bb      	ldr	r3, [r7, #24]
 8001916:	681a      	ldr	r2, [r3, #0]
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 800191c:	2301      	movs	r3, #1
 800191e:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8001920:	69bb      	ldr	r3, [r7, #24]
 8001922:	689a      	ldr	r2, [r3, #8]
 8001924:	69bb      	ldr	r3, [r7, #24]
 8001926:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8001934:	69bb      	ldr	r3, [r7, #24]
 8001936:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001938:	461a      	mov	r2, r3
 800193a:	693b      	ldr	r3, [r7, #16]
 800193c:	b29b      	uxth	r3, r3
 800193e:	f003 f8cb 	bl	8004ad8 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001946:	1c5a      	adds	r2, r3, #1
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001950:	693b      	ldr	r3, [r7, #16]
 8001952:	441a      	add	r2, r3
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8001958:	69bb      	ldr	r3, [r7, #24]
 800195a:	2200      	movs	r2, #0
 800195c:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 800195e:	69fb      	ldr	r3, [r7, #28]
 8001960:	3301      	adds	r3, #1
 8001962:	61fb      	str	r3, [r7, #28]
 8001964:	69fb      	ldr	r3, [r7, #28]
 8001966:	2b03      	cmp	r3, #3
 8001968:	d902      	bls.n	8001970 <HAL_ETH_ReadData+0x11c>
 800196a:	69fb      	ldr	r3, [r7, #28]
 800196c:	3b04      	subs	r3, #4
 800196e:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	69fa      	ldr	r2, [r7, #28]
 8001974:	3212      	adds	r2, #18
 8001976:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800197a:	61bb      	str	r3, [r7, #24]
    desccnt++;
 800197c:	697b      	ldr	r3, [r7, #20]
 800197e:	3301      	adds	r3, #1
 8001980:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001982:	69bb      	ldr	r3, [r7, #24]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	2b00      	cmp	r3, #0
 8001988:	db06      	blt.n	8001998 <HAL_ETH_ReadData+0x144>
 800198a:	697a      	ldr	r2, [r7, #20]
 800198c:	68bb      	ldr	r3, [r7, #8]
 800198e:	429a      	cmp	r2, r3
 8001990:	d202      	bcs.n	8001998 <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 8001992:	7bfb      	ldrb	r3, [r7, #15]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d089      	beq.n	80018ac <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800199c:	697b      	ldr	r3, [r7, #20]
 800199e:	441a      	add	r2, r3
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d002      	beq.n	80019b2 <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 80019ac:	6878      	ldr	r0, [r7, #4]
 80019ae:	f000 f815 	bl	80019dc <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	69fa      	ldr	r2, [r7, #28]
 80019b6:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 80019b8:	7bfb      	ldrb	r3, [r7, #15]
 80019ba:	2b01      	cmp	r3, #1
 80019bc:	d108      	bne.n	80019d0 <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2200      	movs	r2, #0
 80019ca:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80019cc:	2300      	movs	r3, #0
 80019ce:	e000      	b.n	80019d2 <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 80019d0:	2301      	movs	r3, #1
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	3720      	adds	r7, #32
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
	...

080019dc <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b088      	sub	sp, #32
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 80019e4:	2300      	movs	r3, #0
 80019e6:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 80019e8:	2301      	movs	r3, #1
 80019ea:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80019f0:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	69fa      	ldr	r2, [r7, #28]
 80019f6:	3212      	adds	r2, #18
 80019f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019fc:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001a02:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8001a04:	e040      	b.n	8001a88 <ETH_UpdateDescriptor+0xac>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8001a06:	697b      	ldr	r3, [r7, #20]
 8001a08:	6a1b      	ldr	r3, [r3, #32]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d112      	bne.n	8001a34 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8001a0e:	f107 030c 	add.w	r3, r7, #12
 8001a12:	4618      	mov	r0, r3
 8001a14:	f003 f830 	bl	8004a78 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d102      	bne.n	8001a24 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	74fb      	strb	r3, [r7, #19]
 8001a22:	e007      	b.n	8001a34 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	461a      	mov	r2, r3
 8001a28:	697b      	ldr	r3, [r7, #20]
 8001a2a:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	461a      	mov	r2, r3
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8001a34:	7cfb      	ldrb	r3, [r7, #19]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d026      	beq.n	8001a88 <ETH_UpdateDescriptor+0xac>
    {
      if (heth->RxDescList.ItMode == 0U)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d103      	bne.n	8001a4a <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8001a42:	697b      	ldr	r3, [r7, #20]
 8001a44:	4a1e      	ldr	r2, [pc, #120]	; (8001ac0 <ETH_UpdateDescriptor+0xe4>)
 8001a46:	605a      	str	r2, [r3, #4]
 8001a48:	e003      	b.n	8001a52 <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8001a4a:	697b      	ldr	r3, [r7, #20]
 8001a4c:	f244 52f8 	movw	r2, #17912	; 0x45f8
 8001a50:	605a      	str	r2, [r3, #4]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001a52:	f3bf 8f5f 	dmb	sy
}
 8001a56:	bf00      	nop
         is fully performed.
         The __DMB() instruction is added to avoid any potential compiler optimization that
         may lead to abnormal behavior. */
      __DMB();

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8001a58:	697b      	ldr	r3, [r7, #20]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001a64:	69fb      	ldr	r3, [r7, #28]
 8001a66:	3301      	adds	r3, #1
 8001a68:	61fb      	str	r3, [r7, #28]
 8001a6a:	69fb      	ldr	r3, [r7, #28]
 8001a6c:	2b03      	cmp	r3, #3
 8001a6e:	d902      	bls.n	8001a76 <ETH_UpdateDescriptor+0x9a>
 8001a70:	69fb      	ldr	r3, [r7, #28]
 8001a72:	3b04      	subs	r3, #4
 8001a74:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	69fa      	ldr	r2, [r7, #28]
 8001a7a:	3212      	adds	r2, #18
 8001a7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a80:	617b      	str	r3, [r7, #20]
      desccount--;
 8001a82:	69bb      	ldr	r3, [r7, #24]
 8001a84:	3b01      	subs	r3, #1
 8001a86:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8001a88:	69bb      	ldr	r3, [r7, #24]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d002      	beq.n	8001a94 <ETH_UpdateDescriptor+0xb8>
 8001a8e:	7cfb      	ldrb	r3, [r7, #19]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d1b8      	bne.n	8001a06 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001a98:	69ba      	ldr	r2, [r7, #24]
 8001a9a:	429a      	cmp	r2, r3
 8001a9c:	d00c      	beq.n	8001ab8 <ETH_UpdateDescriptor+0xdc>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, 0);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001aa6:	461a      	mov	r2, r3
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	6093      	str	r3, [r2, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	69fa      	ldr	r2, [r7, #28]
 8001ab0:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	69ba      	ldr	r2, [r7, #24]
 8001ab6:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 8001ab8:	bf00      	nop
 8001aba:	3720      	adds	r7, #32
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}
 8001ac0:	800045f8 	.word	0x800045f8

08001ac4 <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b086      	sub	sp, #24
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	3318      	adds	r3, #24
 8001ad0:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 8001ad2:	68bb      	ldr	r3, [r7, #8]
 8001ad4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ad6:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 8001ad8:	68bb      	ldr	r3, [r7, #8]
 8001ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001adc:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8001ae2:	e03f      	b.n	8001b64 <HAL_ETH_ReleaseTxPacket+0xa0>
  {
    pktInUse = 1U;
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 8001ae8:	697b      	ldr	r3, [r7, #20]
 8001aea:	3b01      	subs	r3, #1
 8001aec:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 8001aee:	68ba      	ldr	r2, [r7, #8]
 8001af0:	693b      	ldr	r3, [r7, #16]
 8001af2:	3304      	adds	r3, #4
 8001af4:	009b      	lsls	r3, r3, #2
 8001af6:	4413      	add	r3, r2
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d106      	bne.n	8001b0c <HAL_ETH_ReleaseTxPacket+0x48>
    {
      /* No packet in use, skip to next.  */
      idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8001afe:	693b      	ldr	r3, [r7, #16]
 8001b00:	3301      	adds	r3, #1
 8001b02:	f003 0303 	and.w	r3, r3, #3
 8001b06:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 8001b0c:	7bbb      	ldrb	r3, [r7, #14]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d028      	beq.n	8001b64 <HAL_ETH_ReleaseTxPacket+0xa0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	68d9      	ldr	r1, [r3, #12]
 8001b16:	693a      	ldr	r2, [r7, #16]
 8001b18:	4613      	mov	r3, r2
 8001b1a:	009b      	lsls	r3, r3, #2
 8001b1c:	4413      	add	r3, r2
 8001b1e:	00db      	lsls	r3, r3, #3
 8001b20:	440b      	add	r3, r1
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	db1b      	blt.n	8001b60 <HAL_ETH_ReleaseTxPacket+0x9c>
#ifdef HAL_ETH_USE_PTP
        /* Handle Ptp  */
        HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 8001b28:	68ba      	ldr	r2, [r7, #8]
 8001b2a:	693b      	ldr	r3, [r7, #16]
 8001b2c:	3304      	adds	r3, #4
 8001b2e:	009b      	lsls	r3, r3, #2
 8001b30:	4413      	add	r3, r2
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	4618      	mov	r0, r3
 8001b36:	f003 f80f 	bl	8004b58 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 8001b3a:	68ba      	ldr	r2, [r7, #8]
 8001b3c:	693b      	ldr	r3, [r7, #16]
 8001b3e:	3304      	adds	r3, #4
 8001b40:	009b      	lsls	r3, r3, #2
 8001b42:	4413      	add	r3, r2
 8001b44:	2200      	movs	r2, #0
 8001b46:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8001b48:	693b      	ldr	r3, [r7, #16]
 8001b4a:	3301      	adds	r3, #1
 8001b4c:	f003 0303 	and.w	r3, r3, #3
 8001b50:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 8001b52:	68bb      	ldr	r3, [r7, #8]
 8001b54:	697a      	ldr	r2, [r7, #20]
 8001b56:	629a      	str	r2, [r3, #40]	; 0x28
        dmatxdesclist->releaseIndex = idx;
 8001b58:	68bb      	ldr	r3, [r7, #8]
 8001b5a:	693a      	ldr	r2, [r7, #16]
 8001b5c:	62da      	str	r2, [r3, #44]	; 0x2c
 8001b5e:	e001      	b.n	8001b64 <HAL_ETH_ReleaseTxPacket+0xa0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 8001b60:	2300      	movs	r3, #0
 8001b62:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d002      	beq.n	8001b70 <HAL_ETH_ReleaseTxPacket+0xac>
 8001b6a:	7bfb      	ldrb	r3, [r7, #15]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d1b9      	bne.n	8001ae4 <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 8001b70:	2300      	movs	r3, #0
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	3718      	adds	r7, #24
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}
	...

08001b7c <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b082      	sub	sp, #8
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b8c:	695b      	ldr	r3, [r3, #20]
 8001b8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b92:	2b40      	cmp	r3, #64	; 0x40
 8001b94:	d112      	bne.n	8001bbc <HAL_ETH_IRQHandler+0x40>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_RIE))
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b9e:	69db      	ldr	r3, [r3, #28]
 8001ba0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ba4:	2b40      	cmp	r3, #64	; 0x40
 8001ba6:	d109      	bne.n	8001bbc <HAL_ETH_IRQHandler+0x40>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bb0:	461a      	mov	r2, r3
 8001bb2:	4b50      	ldr	r3, [pc, #320]	; (8001cf4 <HAL_ETH_IRQHandler+0x178>)
 8001bb4:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 8001bb6:	6878      	ldr	r0, [r7, #4]
 8001bb8:	f002 fb18 	bl	80041ec <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bc4:	695b      	ldr	r3, [r3, #20]
 8001bc6:	f003 0301 	and.w	r3, r3, #1
 8001bca:	2b01      	cmp	r3, #1
 8001bcc:	d113      	bne.n	8001bf6 <HAL_ETH_IRQHandler+0x7a>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_TIE))
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bd6:	69db      	ldr	r3, [r3, #28]
 8001bd8:	f003 0301 	and.w	r3, r3, #1
 8001bdc:	2b01      	cmp	r3, #1
 8001bde:	d10a      	bne.n	8001bf6 <HAL_ETH_IRQHandler+0x7a>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001be8:	461a      	mov	r2, r3
 8001bea:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8001bee:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 8001bf0:	6878      	ldr	r0, [r7, #4]
 8001bf2:	f002 fb0b 	bl	800420c <HAL_ETH_TxCpltCallback>
    }
  }


  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bfe:	695b      	ldr	r3, [r3, #20]
 8001c00:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001c08:	d14c      	bne.n	8001ca4 <HAL_ETH_IRQHandler+0x128>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_AISE))
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c12:	69db      	ldr	r3, [r3, #28]
 8001c14:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001c1c:	d142      	bne.n	8001ca4 <HAL_ETH_IRQHandler+0x128>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c24:	f043 0208 	orr.w	r2, r3, #8
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c36:	695b      	ldr	r3, [r3, #20]
 8001c38:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c3c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001c40:	d11a      	bne.n	8001c78 <HAL_ETH_IRQHandler+0xfc>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c4a:	695a      	ldr	r2, [r3, #20]
 8001c4c:	4b2a      	ldr	r3, [pc, #168]	; (8001cf8 <HAL_ETH_IRQHandler+0x17c>)
 8001c4e:	4013      	ands	r3, r2
 8001c50:	687a      	ldr	r2, [r7, #4]
 8001c52:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c5e:	69db      	ldr	r3, [r3, #28]
 8001c60:	687a      	ldr	r2, [r7, #4]
 8001c62:	6812      	ldr	r2, [r2, #0]
 8001c64:	f423 33c0 	bic.w	r3, r3, #98304	; 0x18000
 8001c68:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001c6c:	61d3      	str	r3, [r2, #28]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	22e0      	movs	r2, #224	; 0xe0
 8001c72:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8001c76:	e012      	b.n	8001c9e <HAL_ETH_IRQHandler+0x122>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c80:	695a      	ldr	r2, [r3, #20]
 8001c82:	f248 6380 	movw	r3, #34432	; 0x8680
 8001c86:	4013      	ands	r3, r2
 8001c88:	687a      	ldr	r2, [r7, #4]
 8001c8a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                                                              ETH_DMASR_RBUS | ETH_DMASR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c96:	461a      	mov	r2, r3
 8001c98:	f248 6380 	movw	r3, #34432	; 0x8680
 8001c9c:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 8001c9e:	6878      	ldr	r0, [r7, #4]
 8001ca0:	f002 fac4 	bl	800422c <HAL_ETH_ErrorCallback>
    }
  }


  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001caa:	f003 0308 	and.w	r3, r3, #8
 8001cae:	2b08      	cmp	r3, #8
 8001cb0:	d10e      	bne.n	8001cd0 <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cb8:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8001cc2:	6878      	ldr	r0, [r7, #4]
 8001cc4:	f000 f81c 	bl	8001d00 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2200      	movs	r2, #0
 8001ccc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }


  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8001cd0:	4b0a      	ldr	r3, [pc, #40]	; (8001cfc <HAL_ETH_IRQHandler+0x180>)
 8001cd2:	695b      	ldr	r3, [r3, #20]
 8001cd4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d006      	beq.n	8001cea <HAL_ETH_IRQHandler+0x16e>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8001cdc:	4b07      	ldr	r3, [pc, #28]	; (8001cfc <HAL_ETH_IRQHandler+0x180>)
 8001cde:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001ce2:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8001ce4:	6878      	ldr	r0, [r7, #4]
 8001ce6:	f000 f815 	bl	8001d14 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 8001cea:	bf00      	nop
 8001cec:	3708      	adds	r7, #8
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}
 8001cf2:	bf00      	nop
 8001cf4:	00010040 	.word	0x00010040
 8001cf8:	007e2000 	.word	0x007e2000
 8001cfc:	40013c00 	.word	0x40013c00

08001d00 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b083      	sub	sp, #12
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8001d08:	bf00      	nop
 8001d0a:	370c      	adds	r7, #12
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d12:	4770      	bx	lr

08001d14 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b083      	sub	sp, #12
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8001d1c:	bf00      	nop
 8001d1e:	370c      	adds	r7, #12
 8001d20:	46bd      	mov	sp, r7
 8001d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d26:	4770      	bx	lr

08001d28 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b086      	sub	sp, #24
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	60f8      	str	r0, [r7, #12]
 8001d30:	60b9      	str	r1, [r7, #8]
 8001d32:	607a      	str	r2, [r7, #4]
 8001d34:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	691b      	ldr	r3, [r3, #16]
 8001d3c:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001d3e:	697b      	ldr	r3, [r7, #20]
 8001d40:	f003 031c 	and.w	r3, r3, #28
 8001d44:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8001d46:	68bb      	ldr	r3, [r7, #8]
 8001d48:	02db      	lsls	r3, r3, #11
 8001d4a:	b29b      	uxth	r3, r3
 8001d4c:	697a      	ldr	r2, [r7, #20]
 8001d4e:	4313      	orrs	r3, r2
 8001d50:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	019b      	lsls	r3, r3, #6
 8001d56:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001d5a:	697a      	ldr	r2, [r7, #20]
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	f023 0302 	bic.w	r3, r3, #2
 8001d66:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	f043 0301 	orr.w	r3, r3, #1
 8001d6e:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	697a      	ldr	r2, [r7, #20]
 8001d76:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8001d78:	f7ff fa14 	bl	80011a4 <HAL_GetTick>
 8001d7c:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001d7e:	e00d      	b.n	8001d9c <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8001d80:	f7ff fa10 	bl	80011a4 <HAL_GetTick>
 8001d84:	4602      	mov	r2, r0
 8001d86:	693b      	ldr	r3, [r7, #16]
 8001d88:	1ad3      	subs	r3, r2, r3
 8001d8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d8e:	d301      	bcc.n	8001d94 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8001d90:	2301      	movs	r3, #1
 8001d92:	e010      	b.n	8001db6 <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	691b      	ldr	r3, [r3, #16]
 8001d9a:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	f003 0301 	and.w	r3, r3, #1
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d1ec      	bne.n	8001d80 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	695b      	ldr	r3, [r3, #20]
 8001dac:	b29b      	uxth	r3, r3
 8001dae:	461a      	mov	r2, r3
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8001db4:	2300      	movs	r3, #0
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	3718      	adds	r7, #24
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}

08001dbe <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8001dbe:	b580      	push	{r7, lr}
 8001dc0:	b086      	sub	sp, #24
 8001dc2:	af00      	add	r7, sp, #0
 8001dc4:	60f8      	str	r0, [r7, #12]
 8001dc6:	60b9      	str	r1, [r7, #8]
 8001dc8:	607a      	str	r2, [r7, #4]
 8001dca:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	691b      	ldr	r3, [r3, #16]
 8001dd2:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	f003 031c 	and.w	r3, r3, #28
 8001dda:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8001ddc:	68bb      	ldr	r3, [r7, #8]
 8001dde:	02db      	lsls	r3, r3, #11
 8001de0:	b29b      	uxth	r3, r3
 8001de2:	697a      	ldr	r2, [r7, #20]
 8001de4:	4313      	orrs	r3, r2
 8001de6:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	019b      	lsls	r3, r3, #6
 8001dec:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001df0:	697a      	ldr	r2, [r7, #20]
 8001df2:	4313      	orrs	r3, r2
 8001df4:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8001df6:	697b      	ldr	r3, [r7, #20]
 8001df8:	f043 0302 	orr.w	r3, r3, #2
 8001dfc:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8001dfe:	697b      	ldr	r3, [r7, #20]
 8001e00:	f043 0301 	orr.w	r3, r3, #1
 8001e04:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	b29a      	uxth	r2, r3
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	697a      	ldr	r2, [r7, #20]
 8001e16:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001e18:	f7ff f9c4 	bl	80011a4 <HAL_GetTick>
 8001e1c:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001e1e:	e00d      	b.n	8001e3c <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8001e20:	f7ff f9c0 	bl	80011a4 <HAL_GetTick>
 8001e24:	4602      	mov	r2, r0
 8001e26:	693b      	ldr	r3, [r7, #16]
 8001e28:	1ad3      	subs	r3, r2, r3
 8001e2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e2e:	d301      	bcc.n	8001e34 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8001e30:	2301      	movs	r3, #1
 8001e32:	e009      	b.n	8001e48 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	691b      	ldr	r3, [r3, #16]
 8001e3a:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001e3c:	697b      	ldr	r3, [r7, #20]
 8001e3e:	f003 0301 	and.w	r3, r3, #1
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d1ec      	bne.n	8001e20 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8001e46:	2300      	movs	r3, #0
}
 8001e48:	4618      	mov	r0, r3
 8001e4a:	3718      	adds	r7, #24
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd80      	pop	{r7, pc}

08001e50 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b083      	sub	sp, #12
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
 8001e58:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d101      	bne.n	8001e64 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8001e60:	2301      	movs	r3, #1
 8001e62:	e0d9      	b.n	8002018 <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f003 0310 	and.w	r3, r3, #16
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	bf14      	ite	ne
 8001e72:	2301      	movne	r3, #1
 8001e74:	2300      	moveq	r3, #0
 8001e76:	b2db      	uxtb	r3, r3
 8001e78:	461a      	mov	r2, r3
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	bf0c      	ite	eq
 8001e9c:	2301      	moveq	r3, #1
 8001e9e:	2300      	movne	r3, #0
 8001ea0:	b2db      	uxtb	r3, r3
 8001ea2:	461a      	mov	r2, r3
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	bf14      	ite	ne
 8001eb8:	2301      	movne	r3, #1
 8001eba:	2300      	moveq	r3, #0
 8001ebc:	b2db      	uxtb	r3, r3
 8001ebe:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	bf0c      	ite	eq
 8001ed2:	2301      	moveq	r3, #1
 8001ed4:	2300      	movne	r3, #0
 8001ed6:	b2db      	uxtb	r3, r3
 8001ed8:	461a      	mov	r2, r3
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	bf14      	ite	ne
 8001eec:	2301      	movne	r3, #1
 8001eee:	2300      	moveq	r3, #0
 8001ef0:	b2db      	uxtb	r3, r3
 8001ef2:	461a      	mov	r2, r3
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	bf0c      	ite	eq
 8001f22:	2301      	moveq	r3, #1
 8001f24:	2300      	movne	r3, #0
 8001f26:	b2db      	uxtb	r3, r3
 8001f28:	461a      	mov	r2, r3
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	bf0c      	ite	eq
 8001f3c:	2301      	moveq	r3, #1
 8001f3e:	2300      	movne	r3, #0
 8001f40:	b2db      	uxtb	r3, r3
 8001f42:	461a      	mov	r2, r3
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	bf14      	ite	ne
 8001f56:	2301      	movne	r3, #1
 8001f58:	2300      	moveq	r3, #0
 8001f5a:	b2db      	uxtb	r3, r3
 8001f5c:	461a      	mov	r2, r3
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	bf14      	ite	ne
 8001f7e:	2301      	movne	r3, #1
 8001f80:	2300      	moveq	r3, #0
 8001f82:	b2db      	uxtb	r3, r3
 8001f84:	461a      	mov	r2, r3
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	699b      	ldr	r3, [r3, #24]
 8001f90:	f003 0302 	and.w	r3, r3, #2
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	bf14      	ite	ne
 8001f98:	2301      	movne	r3, #1
 8001f9a:	2300      	moveq	r3, #0
 8001f9c:	b2db      	uxtb	r3, r3
 8001f9e:	461a      	mov	r2, r3
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	699b      	ldr	r3, [r3, #24]
 8001fac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	bf0c      	ite	eq
 8001fb4:	2301      	moveq	r3, #1
 8001fb6:	2300      	movne	r3, #0
 8001fb8:	b2db      	uxtb	r3, r3
 8001fba:	461a      	mov	r2, r3
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	699b      	ldr	r3, [r3, #24]
 8001fc8:	f003 0230 	and.w	r2, r3, #48	; 0x30
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	699b      	ldr	r3, [r3, #24]
 8001fd6:	0c1b      	lsrs	r3, r3, #16
 8001fd8:	b29a      	uxth	r2, r3
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	699b      	ldr	r3, [r3, #24]
 8001fe4:	f003 0304 	and.w	r3, r3, #4
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	bf14      	ite	ne
 8001fec:	2301      	movne	r3, #1
 8001fee:	2300      	moveq	r3, #0
 8001ff0:	b2db      	uxtb	r3, r3
 8001ff2:	461a      	mov	r2, r3
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	699b      	ldr	r3, [r3, #24]
 8002000:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8002004:	2b00      	cmp	r3, #0
 8002006:	bf14      	ite	ne
 8002008:	2301      	movne	r3, #1
 800200a:	2300      	moveq	r3, #0
 800200c:	b2db      	uxtb	r3, r3
 800200e:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 8002016:	2300      	movs	r3, #0
}
 8002018:	4618      	mov	r0, r3
 800201a:	370c      	adds	r7, #12
 800201c:	46bd      	mov	sp, r7
 800201e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002022:	4770      	bx	lr

08002024 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b082      	sub	sp, #8
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
 800202c:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d101      	bne.n	8002038 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002034:	2301      	movs	r3, #1
 8002036:	e00b      	b.n	8002050 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800203e:	2b10      	cmp	r3, #16
 8002040:	d105      	bne.n	800204e <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8002042:	6839      	ldr	r1, [r7, #0]
 8002044:	6878      	ldr	r0, [r7, #4]
 8002046:	f000 f88f 	bl	8002168 <ETH_SetMACConfig>

    return HAL_OK;
 800204a:	2300      	movs	r3, #0
 800204c:	e000      	b.n	8002050 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 800204e:	2301      	movs	r3, #1
  }
}
 8002050:	4618      	mov	r0, r3
 8002052:	3708      	adds	r7, #8
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}

08002058 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b084      	sub	sp, #16
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	691b      	ldr	r3, [r3, #16]
 8002066:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	f023 031c 	bic.w	r3, r3, #28
 800206e:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002070:	f001 fa84 	bl	800357c <HAL_RCC_GetHCLKFreq>
 8002074:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8002076:	68bb      	ldr	r3, [r7, #8]
 8002078:	4a1d      	ldr	r2, [pc, #116]	; (80020f0 <HAL_ETH_SetMDIOClockRange+0x98>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d908      	bls.n	8002090 <HAL_ETH_SetMDIOClockRange+0x38>
 800207e:	68bb      	ldr	r3, [r7, #8]
 8002080:	4a1c      	ldr	r2, [pc, #112]	; (80020f4 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d804      	bhi.n	8002090 <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	f043 0308 	orr.w	r3, r3, #8
 800208c:	60fb      	str	r3, [r7, #12]
 800208e:	e027      	b.n	80020e0 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	4a18      	ldr	r2, [pc, #96]	; (80020f4 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8002094:	4293      	cmp	r3, r2
 8002096:	d908      	bls.n	80020aa <HAL_ETH_SetMDIOClockRange+0x52>
 8002098:	68bb      	ldr	r3, [r7, #8]
 800209a:	4a17      	ldr	r2, [pc, #92]	; (80020f8 <HAL_ETH_SetMDIOClockRange+0xa0>)
 800209c:	4293      	cmp	r3, r2
 800209e:	d204      	bcs.n	80020aa <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	f043 030c 	orr.w	r3, r3, #12
 80020a6:	60fb      	str	r3, [r7, #12]
 80020a8:	e01a      	b.n	80020e0 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 80020aa:	68bb      	ldr	r3, [r7, #8]
 80020ac:	4a12      	ldr	r2, [pc, #72]	; (80020f8 <HAL_ETH_SetMDIOClockRange+0xa0>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d303      	bcc.n	80020ba <HAL_ETH_SetMDIOClockRange+0x62>
 80020b2:	68bb      	ldr	r3, [r7, #8]
 80020b4:	4a11      	ldr	r2, [pc, #68]	; (80020fc <HAL_ETH_SetMDIOClockRange+0xa4>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d911      	bls.n	80020de <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 80020ba:	68bb      	ldr	r3, [r7, #8]
 80020bc:	4a0f      	ldr	r2, [pc, #60]	; (80020fc <HAL_ETH_SetMDIOClockRange+0xa4>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d908      	bls.n	80020d4 <HAL_ETH_SetMDIOClockRange+0x7c>
 80020c2:	68bb      	ldr	r3, [r7, #8]
 80020c4:	4a0e      	ldr	r2, [pc, #56]	; (8002100 <HAL_ETH_SetMDIOClockRange+0xa8>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d804      	bhi.n	80020d4 <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	f043 0304 	orr.w	r3, r3, #4
 80020d0:	60fb      	str	r3, [r7, #12]
 80020d2:	e005      	b.n	80020e0 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	f043 0310 	orr.w	r3, r3, #16
 80020da:	60fb      	str	r3, [r7, #12]
 80020dc:	e000      	b.n	80020e0 <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 80020de:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	68fa      	ldr	r2, [r7, #12]
 80020e6:	611a      	str	r2, [r3, #16]
}
 80020e8:	bf00      	nop
 80020ea:	3710      	adds	r7, #16
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}
 80020f0:	01312cff 	.word	0x01312cff
 80020f4:	02160ebf 	.word	0x02160ebf
 80020f8:	03938700 	.word	0x03938700
 80020fc:	05f5e0ff 	.word	0x05f5e0ff
 8002100:	08f0d17f 	.word	0x08f0d17f

08002104 <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(ETH_HandleTypeDef *heth)
{
 8002104:	b480      	push	{r7}
 8002106:	b083      	sub	sp, #12
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
}
 8002112:	4618      	mov	r0, r3
 8002114:	370c      	adds	r7, #12
 8002116:	46bd      	mov	sp, r7
 8002118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211c:	4770      	bx	lr

0800211e <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 800211e:	b580      	push	{r7, lr}
 8002120:	b084      	sub	sp, #16
 8002122:	af00      	add	r7, sp, #0
 8002124:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002126:	2300      	movs	r3, #0
 8002128:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002132:	699b      	ldr	r3, [r3, #24]
 8002134:	687a      	ldr	r2, [r7, #4]
 8002136:	6812      	ldr	r2, [r2, #0]
 8002138:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800213c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002140:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800214a:	699b      	ldr	r3, [r3, #24]
 800214c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800214e:	2001      	movs	r0, #1
 8002150:	f7ff f834 	bl	80011bc <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681a      	ldr	r2, [r3, #0]
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800215e:	6193      	str	r3, [r2, #24]
}
 8002160:	bf00      	nop
 8002162:	3710      	adds	r7, #16
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}

08002168 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b084      	sub	sp, #16
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
 8002170:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800217a:	68fa      	ldr	r2, [r7, #12]
 800217c:	4b51      	ldr	r3, [pc, #324]	; (80022c4 <ETH_SetMACConfig+0x15c>)
 800217e:	4013      	ands	r3, r2
 8002180:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	7c1b      	ldrb	r3, [r3, #16]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d102      	bne.n	8002190 <ETH_SetMACConfig+0x28>
 800218a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800218e:	e000      	b.n	8002192 <ETH_SetMACConfig+0x2a>
 8002190:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	7c5b      	ldrb	r3, [r3, #17]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d102      	bne.n	80021a0 <ETH_SetMACConfig+0x38>
 800219a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800219e:	e000      	b.n	80021a2 <ETH_SetMACConfig+0x3a>
 80021a0:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80021a2:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80021a8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	7fdb      	ldrb	r3, [r3, #31]
 80021ae:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80021b0:	431a      	orrs	r2, r3
                        macconf->Speed |
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80021b6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80021b8:	683a      	ldr	r2, [r7, #0]
 80021ba:	7f92      	ldrb	r2, [r2, #30]
 80021bc:	2a00      	cmp	r2, #0
 80021be:	d102      	bne.n	80021c6 <ETH_SetMACConfig+0x5e>
 80021c0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80021c4:	e000      	b.n	80021c8 <ETH_SetMACConfig+0x60>
 80021c6:	2200      	movs	r2, #0
                        macconf->Speed |
 80021c8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	7f1b      	ldrb	r3, [r3, #28]
 80021ce:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80021d0:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80021d6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	791b      	ldrb	r3, [r3, #4]
 80021dc:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80021de:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80021e0:	683a      	ldr	r2, [r7, #0]
 80021e2:	f892 2020 	ldrb.w	r2, [r2, #32]
 80021e6:	2a00      	cmp	r2, #0
 80021e8:	d102      	bne.n	80021f0 <ETH_SetMACConfig+0x88>
 80021ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80021ee:	e000      	b.n	80021f2 <ETH_SetMACConfig+0x8a>
 80021f0:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80021f2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	7bdb      	ldrb	r3, [r3, #15]
 80021f8:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80021fa:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002200:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002208:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800220a:	4313      	orrs	r3, r2
 800220c:	68fa      	ldr	r2, [r7, #12]
 800220e:	4313      	orrs	r3, r2
 8002210:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	68fa      	ldr	r2, [r7, #12]
 8002218:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002222:	2001      	movs	r0, #1
 8002224:	f7fe ffca 	bl	80011bc <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	68fa      	ldr	r2, [r7, #12]
 800222e:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	699b      	ldr	r3, [r3, #24]
 8002236:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002238:	68fa      	ldr	r2, [r7, #12]
 800223a:	f64f 7341 	movw	r3, #65345	; 0xff41
 800223e:	4013      	ands	r3, r2
 8002240:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002246:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002248:	683a      	ldr	r2, [r7, #0]
 800224a:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800224e:	2a00      	cmp	r2, #0
 8002250:	d101      	bne.n	8002256 <ETH_SetMACConfig+0xee>
 8002252:	2280      	movs	r2, #128	; 0x80
 8002254:	e000      	b.n	8002258 <ETH_SetMACConfig+0xf0>
 8002256:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002258:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800225e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002260:	683a      	ldr	r2, [r7, #0]
 8002262:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8002266:	2a01      	cmp	r2, #1
 8002268:	d101      	bne.n	800226e <ETH_SetMACConfig+0x106>
 800226a:	2208      	movs	r2, #8
 800226c:	e000      	b.n	8002270 <ETH_SetMACConfig+0x108>
 800226e:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002270:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8002272:	683a      	ldr	r2, [r7, #0]
 8002274:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8002278:	2a01      	cmp	r2, #1
 800227a:	d101      	bne.n	8002280 <ETH_SetMACConfig+0x118>
 800227c:	2204      	movs	r2, #4
 800227e:	e000      	b.n	8002282 <ETH_SetMACConfig+0x11a>
 8002280:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002282:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002284:	683a      	ldr	r2, [r7, #0]
 8002286:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 800228a:	2a01      	cmp	r2, #1
 800228c:	d101      	bne.n	8002292 <ETH_SetMACConfig+0x12a>
 800228e:	2202      	movs	r2, #2
 8002290:	e000      	b.n	8002294 <ETH_SetMACConfig+0x12c>
 8002292:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002294:	4313      	orrs	r3, r2
 8002296:	68fa      	ldr	r2, [r7, #12]
 8002298:	4313      	orrs	r3, r2
 800229a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	68fa      	ldr	r2, [r7, #12]
 80022a2:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	699b      	ldr	r3, [r3, #24]
 80022aa:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80022ac:	2001      	movs	r0, #1
 80022ae:	f7fe ff85 	bl	80011bc <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	68fa      	ldr	r2, [r7, #12]
 80022b8:	619a      	str	r2, [r3, #24]
}
 80022ba:	bf00      	nop
 80022bc:	3710      	adds	r7, #16
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	bf00      	nop
 80022c4:	ff20810f 	.word	0xff20810f

080022c8 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b084      	sub	sp, #16
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
 80022d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022da:	699b      	ldr	r3, [r3, #24]
 80022dc:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80022de:	68fa      	ldr	r2, [r7, #12]
 80022e0:	4b3d      	ldr	r3, [pc, #244]	; (80023d8 <ETH_SetDMAConfig+0x110>)
 80022e2:	4013      	ands	r3, r2
 80022e4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	7b1b      	ldrb	r3, [r3, #12]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d102      	bne.n	80022f4 <ETH_SetDMAConfig+0x2c>
 80022ee:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80022f2:	e000      	b.n	80022f6 <ETH_SetDMAConfig+0x2e>
 80022f4:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	7b5b      	ldrb	r3, [r3, #13]
 80022fa:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80022fc:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80022fe:	683a      	ldr	r2, [r7, #0]
 8002300:	7f52      	ldrb	r2, [r2, #29]
 8002302:	2a00      	cmp	r2, #0
 8002304:	d102      	bne.n	800230c <ETH_SetDMAConfig+0x44>
 8002306:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800230a:	e000      	b.n	800230e <ETH_SetDMAConfig+0x46>
 800230c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800230e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	7b9b      	ldrb	r3, [r3, #14]
 8002314:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002316:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800231c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	7f1b      	ldrb	r3, [r3, #28]
 8002322:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002324:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	7f9b      	ldrb	r3, [r3, #30]
 800232a:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800232c:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002332:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800233a:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800233c:	4313      	orrs	r3, r2
 800233e:	68fa      	ldr	r2, [r7, #12]
 8002340:	4313      	orrs	r3, r2
 8002342:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800234c:	461a      	mov	r2, r3
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800235a:	699b      	ldr	r3, [r3, #24]
 800235c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800235e:	2001      	movs	r0, #1
 8002360:	f7fe ff2c 	bl	80011bc <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800236c:	461a      	mov	r2, r3
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	791b      	ldrb	r3, [r3, #4]
 8002376:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800237c:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8002382:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002388:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002390:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8002392:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002398:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800239a:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80023a0:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80023a2:	687a      	ldr	r2, [r7, #4]
 80023a4:	6812      	ldr	r2, [r2, #0]
 80023a6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80023aa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80023ae:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80023bc:	2001      	movs	r0, #1
 80023be:	f7fe fefd 	bl	80011bc <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023ca:	461a      	mov	r2, r3
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	6013      	str	r3, [r2, #0]
}
 80023d0:	bf00      	nop
 80023d2:	3710      	adds	r7, #16
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}
 80023d8:	f8de3f23 	.word	0xf8de3f23

080023dc <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b0a6      	sub	sp, #152	; 0x98
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80023e4:	2301      	movs	r3, #1
 80023e6:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 80023ea:	2301      	movs	r3, #1
 80023ec:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80023f0:	2300      	movs	r3, #0
 80023f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80023f4:	2300      	movs	r3, #0
 80023f6:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80023fa:	2301      	movs	r3, #1
 80023fc:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002400:	2300      	movs	r3, #0
 8002402:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8002406:	2301      	movs	r3, #1
 8002408:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 800240c:	2300      	movs	r3, #0
 800240e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8002412:	2300      	movs	r3, #0
 8002414:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002418:	2300      	movs	r3, #0
 800241a:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 800241c:	2300      	movs	r3, #0
 800241e:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002422:	2300      	movs	r3, #0
 8002424:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002426:	2300      	movs	r3, #0
 8002428:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800242c:	2300      	movs	r3, #0
 800242e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002432:	2300      	movs	r3, #0
 8002434:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002438:	2300      	movs	r3, #0
 800243a:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800243e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002442:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002444:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002448:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800244a:	2300      	movs	r3, #0
 800244c:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002450:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002454:	4619      	mov	r1, r3
 8002456:	6878      	ldr	r0, [r7, #4]
 8002458:	f7ff fe86 	bl	8002168 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 800245c:	2301      	movs	r3, #1
 800245e:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002460:	2301      	movs	r3, #1
 8002462:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002464:	2301      	movs	r3, #1
 8002466:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 800246a:	2301      	movs	r3, #1
 800246c:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800246e:	2300      	movs	r3, #0
 8002470:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002472:	2300      	movs	r3, #0
 8002474:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002478:	2300      	movs	r3, #0
 800247a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800247e:	2300      	movs	r3, #0
 8002480:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002482:	2301      	movs	r3, #1
 8002484:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002488:	2301      	movs	r3, #1
 800248a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800248c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002490:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002492:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002496:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002498:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800249c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 800249e:	2301      	movs	r3, #1
 80024a0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80024a4:	2300      	movs	r3, #0
 80024a6:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80024a8:	2300      	movs	r3, #0
 80024aa:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80024ac:	f107 0308 	add.w	r3, r7, #8
 80024b0:	4619      	mov	r1, r3
 80024b2:	6878      	ldr	r0, [r7, #4]
 80024b4:	f7ff ff08 	bl	80022c8 <ETH_SetDMAConfig>
}
 80024b8:	bf00      	nop
 80024ba:	3798      	adds	r7, #152	; 0x98
 80024bc:	46bd      	mov	sp, r7
 80024be:	bd80      	pop	{r7, pc}

080024c0 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80024c0:	b480      	push	{r7}
 80024c2:	b087      	sub	sp, #28
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	60f8      	str	r0, [r7, #12]
 80024c8:	60b9      	str	r1, [r7, #8]
 80024ca:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	3305      	adds	r3, #5
 80024d0:	781b      	ldrb	r3, [r3, #0]
 80024d2:	021b      	lsls	r3, r3, #8
 80024d4:	687a      	ldr	r2, [r7, #4]
 80024d6:	3204      	adds	r2, #4
 80024d8:	7812      	ldrb	r2, [r2, #0]
 80024da:	4313      	orrs	r3, r2
 80024dc:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80024de:	68ba      	ldr	r2, [r7, #8]
 80024e0:	4b11      	ldr	r3, [pc, #68]	; (8002528 <ETH_MACAddressConfig+0x68>)
 80024e2:	4413      	add	r3, r2
 80024e4:	461a      	mov	r2, r3
 80024e6:	697b      	ldr	r3, [r7, #20]
 80024e8:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	3303      	adds	r3, #3
 80024ee:	781b      	ldrb	r3, [r3, #0]
 80024f0:	061a      	lsls	r2, r3, #24
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	3302      	adds	r3, #2
 80024f6:	781b      	ldrb	r3, [r3, #0]
 80024f8:	041b      	lsls	r3, r3, #16
 80024fa:	431a      	orrs	r2, r3
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	3301      	adds	r3, #1
 8002500:	781b      	ldrb	r3, [r3, #0]
 8002502:	021b      	lsls	r3, r3, #8
 8002504:	4313      	orrs	r3, r2
 8002506:	687a      	ldr	r2, [r7, #4]
 8002508:	7812      	ldrb	r2, [r2, #0]
 800250a:	4313      	orrs	r3, r2
 800250c:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800250e:	68ba      	ldr	r2, [r7, #8]
 8002510:	4b06      	ldr	r3, [pc, #24]	; (800252c <ETH_MACAddressConfig+0x6c>)
 8002512:	4413      	add	r3, r2
 8002514:	461a      	mov	r2, r3
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	6013      	str	r3, [r2, #0]
}
 800251a:	bf00      	nop
 800251c:	371c      	adds	r7, #28
 800251e:	46bd      	mov	sp, r7
 8002520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002524:	4770      	bx	lr
 8002526:	bf00      	nop
 8002528:	40028040 	.word	0x40028040
 800252c:	40028044 	.word	0x40028044

08002530 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002530:	b480      	push	{r7}
 8002532:	b085      	sub	sp, #20
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002538:	2300      	movs	r3, #0
 800253a:	60fb      	str	r3, [r7, #12]
 800253c:	e03e      	b.n	80025bc <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	68d9      	ldr	r1, [r3, #12]
 8002542:	68fa      	ldr	r2, [r7, #12]
 8002544:	4613      	mov	r3, r2
 8002546:	009b      	lsls	r3, r3, #2
 8002548:	4413      	add	r3, r2
 800254a:	00db      	lsls	r3, r3, #3
 800254c:	440b      	add	r3, r1
 800254e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	2200      	movs	r2, #0
 8002554:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002556:	68bb      	ldr	r3, [r7, #8]
 8002558:	2200      	movs	r2, #0
 800255a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	2200      	movs	r2, #0
 8002560:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8002562:	68bb      	ldr	r3, [r7, #8]
 8002564:	2200      	movs	r2, #0
 8002566:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002568:	68b9      	ldr	r1, [r7, #8]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	68fa      	ldr	r2, [r7, #12]
 800256e:	3206      	adds	r2, #6
 8002570:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	2b02      	cmp	r3, #2
 8002584:	d80c      	bhi.n	80025a0 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	68d9      	ldr	r1, [r3, #12]
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	1c5a      	adds	r2, r3, #1
 800258e:	4613      	mov	r3, r2
 8002590:	009b      	lsls	r3, r3, #2
 8002592:	4413      	add	r3, r2
 8002594:	00db      	lsls	r3, r3, #3
 8002596:	440b      	add	r3, r1
 8002598:	461a      	mov	r2, r3
 800259a:	68bb      	ldr	r3, [r7, #8]
 800259c:	60da      	str	r2, [r3, #12]
 800259e:	e004      	b.n	80025aa <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	68db      	ldr	r3, [r3, #12]
 80025a4:	461a      	mov	r2, r3
 80025a6:	68bb      	ldr	r3, [r7, #8]
 80025a8:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80025aa:	68bb      	ldr	r3, [r7, #8]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80025b2:	68bb      	ldr	r3, [r7, #8]
 80025b4:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	3301      	adds	r3, #1
 80025ba:	60fb      	str	r3, [r7, #12]
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	2b03      	cmp	r3, #3
 80025c0:	d9bd      	bls.n	800253e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2200      	movs	r2, #0
 80025c6:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	68da      	ldr	r2, [r3, #12]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025d4:	611a      	str	r2, [r3, #16]
}
 80025d6:	bf00      	nop
 80025d8:	3714      	adds	r7, #20
 80025da:	46bd      	mov	sp, r7
 80025dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e0:	4770      	bx	lr

080025e2 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80025e2:	b480      	push	{r7}
 80025e4:	b085      	sub	sp, #20
 80025e6:	af00      	add	r7, sp, #0
 80025e8:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80025ea:	2300      	movs	r3, #0
 80025ec:	60fb      	str	r3, [r7, #12]
 80025ee:	e046      	b.n	800267e <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6919      	ldr	r1, [r3, #16]
 80025f4:	68fa      	ldr	r2, [r7, #12]
 80025f6:	4613      	mov	r3, r2
 80025f8:	009b      	lsls	r3, r3, #2
 80025fa:	4413      	add	r3, r2
 80025fc:	00db      	lsls	r3, r3, #3
 80025fe:	440b      	add	r3, r1
 8002600:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002602:	68bb      	ldr	r3, [r7, #8]
 8002604:	2200      	movs	r2, #0
 8002606:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002608:	68bb      	ldr	r3, [r7, #8]
 800260a:	2200      	movs	r2, #0
 800260c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800260e:	68bb      	ldr	r3, [r7, #8]
 8002610:	2200      	movs	r2, #0
 8002612:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	2200      	movs	r2, #0
 8002618:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800261a:	68bb      	ldr	r3, [r7, #8]
 800261c:	2200      	movs	r2, #0
 800261e:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	2200      	movs	r2, #0
 8002624:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002626:	68bb      	ldr	r3, [r7, #8]
 8002628:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800262c:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 800262e:	68bb      	ldr	r3, [r7, #8]
 8002630:	f244 52f8 	movw	r2, #17912	; 0x45f8
 8002634:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002636:	68bb      	ldr	r3, [r7, #8]
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800263e:	68bb      	ldr	r3, [r7, #8]
 8002640:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002642:	68b9      	ldr	r1, [r7, #8]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	68fa      	ldr	r2, [r7, #12]
 8002648:	3212      	adds	r2, #18
 800264a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	2b02      	cmp	r3, #2
 8002652:	d80c      	bhi.n	800266e <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6919      	ldr	r1, [r3, #16]
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	1c5a      	adds	r2, r3, #1
 800265c:	4613      	mov	r3, r2
 800265e:	009b      	lsls	r3, r3, #2
 8002660:	4413      	add	r3, r2
 8002662:	00db      	lsls	r3, r3, #3
 8002664:	440b      	add	r3, r1
 8002666:	461a      	mov	r2, r3
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	60da      	str	r2, [r3, #12]
 800266c:	e004      	b.n	8002678 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	691b      	ldr	r3, [r3, #16]
 8002672:	461a      	mov	r2, r3
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	3301      	adds	r3, #1
 800267c:	60fb      	str	r3, [r7, #12]
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	2b03      	cmp	r3, #3
 8002682:	d9b5      	bls.n	80025f0 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2200      	movs	r2, #0
 8002688:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2200      	movs	r2, #0
 800268e:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2200      	movs	r2, #0
 8002694:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2200      	movs	r2, #0
 800269a:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2200      	movs	r2, #0
 80026a0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	691a      	ldr	r2, [r3, #16]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026ae:	60da      	str	r2, [r3, #12]
}
 80026b0:	bf00      	nop
 80026b2:	3714      	adds	r7, #20
 80026b4:	46bd      	mov	sp, r7
 80026b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ba:	4770      	bx	lr

080026bc <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 80026bc:	b480      	push	{r7}
 80026be:	b08d      	sub	sp, #52	; 0x34
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	60f8      	str	r0, [r7, #12]
 80026c4:	60b9      	str	r1, [r7, #8]
 80026c6:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	3318      	adds	r3, #24
 80026cc:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	691b      	ldr	r3, [r3, #16]
 80026d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	691b      	ldr	r3, [r3, #16]
 80026d8:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 80026da:	2300      	movs	r3, #0
 80026dc:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80026e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026e6:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	689b      	ldr	r3, [r3, #8]
 80026ec:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 80026ee:	2300      	movs	r3, #0
 80026f0:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80026f2:	6a3b      	ldr	r3, [r7, #32]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80026fa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80026fe:	d007      	beq.n	8002710 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002700:	697a      	ldr	r2, [r7, #20]
 8002702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002704:	3304      	adds	r3, #4
 8002706:	009b      	lsls	r3, r3, #2
 8002708:	4413      	add	r3, r2
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d001      	beq.n	8002714 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8002710:	2302      	movs	r3, #2
 8002712:	e103      	b.n	800291c <ETH_Prepare_Tx_Descriptors+0x260>
  }


  descnbr += 1U;
 8002714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002716:	3301      	adds	r3, #1
 8002718:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 800271a:	69fb      	ldr	r3, [r7, #28]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	461a      	mov	r2, r3
 8002720:	6a3b      	ldr	r3, [r7, #32]
 8002722:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8002724:	6a3b      	ldr	r3, [r7, #32]
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 800272c:	f023 031f 	bic.w	r3, r3, #31
 8002730:	69fa      	ldr	r2, [r7, #28]
 8002732:	6852      	ldr	r2, [r2, #4]
 8002734:	431a      	orrs	r2, r3
 8002736:	6a3b      	ldr	r3, [r7, #32]
 8002738:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 800273a:	68bb      	ldr	r3, [r7, #8]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 0301 	and.w	r3, r3, #1
 8002742:	2b00      	cmp	r3, #0
 8002744:	d008      	beq.n	8002758 <ETH_Prepare_Tx_Descriptors+0x9c>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8002746:	6a3b      	ldr	r3, [r7, #32]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800274e:	68bb      	ldr	r3, [r7, #8]
 8002750:	695b      	ldr	r3, [r3, #20]
 8002752:	431a      	orrs	r2, r3
 8002754:	6a3b      	ldr	r3, [r7, #32]
 8002756:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8002758:	68bb      	ldr	r3, [r7, #8]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f003 0320 	and.w	r3, r3, #32
 8002760:	2b00      	cmp	r3, #0
 8002762:	d008      	beq.n	8002776 <ETH_Prepare_Tx_Descriptors+0xba>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8002764:	6a3b      	ldr	r3, [r7, #32]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800276c:	68bb      	ldr	r3, [r7, #8]
 800276e:	691b      	ldr	r3, [r3, #16]
 8002770:	431a      	orrs	r2, r3
 8002772:	6a3b      	ldr	r3, [r7, #32]
 8002774:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8002776:	68bb      	ldr	r3, [r7, #8]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f003 0304 	and.w	r3, r3, #4
 800277e:	2b00      	cmp	r3, #0
 8002780:	d005      	beq.n	800278e <ETH_Prepare_Tx_Descriptors+0xd2>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8002782:	6a3b      	ldr	r3, [r7, #32]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800278a:	6a3b      	ldr	r3, [r7, #32]
 800278c:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 800278e:	6a3b      	ldr	r3, [r7, #32]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002796:	6a3b      	ldr	r3, [r7, #32]
 8002798:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 800279a:	f3bf 8f5f 	dmb	sy
}
 800279e:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80027a0:	6a3b      	ldr	r3, [r7, #32]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80027a8:	6a3b      	ldr	r3, [r7, #32]
 80027aa:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 80027ac:	e084      	b.n	80028b8 <ETH_Prepare_Tx_Descriptors+0x1fc>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80027ae:	6a3b      	ldr	r3, [r7, #32]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80027b6:	6a3b      	ldr	r3, [r7, #32]
 80027b8:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d006      	beq.n	80027ce <ETH_Prepare_Tx_Descriptors+0x112>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80027c0:	6a3b      	ldr	r3, [r7, #32]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80027c8:	6a3b      	ldr	r3, [r7, #32]
 80027ca:	601a      	str	r2, [r3, #0]
 80027cc:	e005      	b.n	80027da <ETH_Prepare_Tx_Descriptors+0x11e>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80027ce:	6a3b      	ldr	r3, [r7, #32]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80027d6:	6a3b      	ldr	r3, [r7, #32]
 80027d8:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 80027da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027dc:	3301      	adds	r3, #1
 80027de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80027e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027e2:	2b03      	cmp	r3, #3
 80027e4:	d902      	bls.n	80027ec <ETH_Prepare_Tx_Descriptors+0x130>
 80027e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027e8:	3b04      	subs	r3, #4
 80027ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80027ec:	697b      	ldr	r3, [r7, #20]
 80027ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027f4:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 80027f6:	6a3b      	ldr	r3, [r7, #32]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80027fe:	6a3b      	ldr	r3, [r7, #32]
 8002800:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8002802:	6a3b      	ldr	r3, [r7, #32]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800280a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800280e:	d007      	beq.n	8002820 <ETH_Prepare_Tx_Descriptors+0x164>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002810:	697a      	ldr	r2, [r7, #20]
 8002812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002814:	3304      	adds	r3, #4
 8002816:	009b      	lsls	r3, r3, #2
 8002818:	4413      	add	r3, r2
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d029      	beq.n	8002874 <ETH_Prepare_Tx_Descriptors+0x1b8>
    {
      descidx = firstdescidx;
 8002820:	693b      	ldr	r3, [r7, #16]
 8002822:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002828:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800282c:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 800282e:	2300      	movs	r3, #0
 8002830:	62bb      	str	r3, [r7, #40]	; 0x28
 8002832:	e019      	b.n	8002868 <ETH_Prepare_Tx_Descriptors+0x1ac>
  __ASM volatile ("dmb 0xF":::"memory");
 8002834:	f3bf 8f5f 	dmb	sy
}
 8002838:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 800283a:	6a3b      	ldr	r3, [r7, #32]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002842:	6a3b      	ldr	r3, [r7, #32]
 8002844:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8002846:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002848:	3301      	adds	r3, #1
 800284a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800284c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800284e:	2b03      	cmp	r3, #3
 8002850:	d902      	bls.n	8002858 <ETH_Prepare_Tx_Descriptors+0x19c>
 8002852:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002854:	3b04      	subs	r3, #4
 8002856:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002858:	697b      	ldr	r3, [r7, #20]
 800285a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800285c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002860:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 8002862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002864:	3301      	adds	r3, #1
 8002866:	62bb      	str	r3, [r7, #40]	; 0x28
 8002868:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800286a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800286c:	429a      	cmp	r2, r3
 800286e:	d3e1      	bcc.n	8002834 <ETH_Prepare_Tx_Descriptors+0x178>
      }

      return HAL_ETH_ERROR_BUSY;
 8002870:	2302      	movs	r3, #2
 8002872:	e053      	b.n	800291c <ETH_Prepare_Tx_Descriptors+0x260>
    }

    descnbr += 1U;
 8002874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002876:	3301      	adds	r3, #1
 8002878:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 800287a:	69fb      	ldr	r3, [r7, #28]
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8002880:	69fb      	ldr	r3, [r7, #28]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	461a      	mov	r2, r3
 8002886:	6a3b      	ldr	r3, [r7, #32]
 8002888:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 800288a:	6a3b      	ldr	r3, [r7, #32]
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 8002892:	f023 031f 	bic.w	r3, r3, #31
 8002896:	69fa      	ldr	r2, [r7, #28]
 8002898:	6852      	ldr	r2, [r2, #4]
 800289a:	431a      	orrs	r2, r3
 800289c:	6a3b      	ldr	r3, [r7, #32]
 800289e:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 80028a0:	69bb      	ldr	r3, [r7, #24]
 80028a2:	3301      	adds	r3, #1
 80028a4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 80028a6:	f3bf 8f5f 	dmb	sy
}
 80028aa:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80028ac:	6a3b      	ldr	r3, [r7, #32]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80028b4:	6a3b      	ldr	r3, [r7, #32]
 80028b6:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 80028b8:	69fb      	ldr	r3, [r7, #28]
 80028ba:	689b      	ldr	r3, [r3, #8]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	f47f af76 	bne.w	80027ae <ETH_Prepare_Tx_Descriptors+0xf2>
  }

  if (ItMode != ((uint32_t)RESET))
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d006      	beq.n	80028d6 <ETH_Prepare_Tx_Descriptors+0x21a>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80028c8:	6a3b      	ldr	r3, [r7, #32]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80028d0:	6a3b      	ldr	r3, [r7, #32]
 80028d2:	601a      	str	r2, [r3, #0]
 80028d4:	e005      	b.n	80028e2 <ETH_Prepare_Tx_Descriptors+0x226>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80028d6:	6a3b      	ldr	r3, [r7, #32]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80028de:	6a3b      	ldr	r3, [r7, #32]
 80028e0:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80028e2:	6a3b      	ldr	r3, [r7, #32]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80028ea:	6a3b      	ldr	r3, [r7, #32]
 80028ec:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 80028ee:	697b      	ldr	r3, [r7, #20]
 80028f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80028f2:	6979      	ldr	r1, [r7, #20]
 80028f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028f6:	3304      	adds	r3, #4
 80028f8:	009b      	lsls	r3, r3, #2
 80028fa:	440b      	add	r3, r1
 80028fc:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 80028fe:	697b      	ldr	r3, [r7, #20]
 8002900:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002902:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8002904:	b672      	cpsid	i
}
 8002906:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800290c:	69bb      	ldr	r3, [r7, #24]
 800290e:	4413      	add	r3, r2
 8002910:	1c5a      	adds	r2, r3, #1
 8002912:	697b      	ldr	r3, [r7, #20]
 8002914:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8002916:	b662      	cpsie	i
}
 8002918:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 800291a:	2300      	movs	r3, #0
}
 800291c:	4618      	mov	r0, r3
 800291e:	3734      	adds	r7, #52	; 0x34
 8002920:	46bd      	mov	sp, r7
 8002922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002926:	4770      	bx	lr

08002928 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002928:	b480      	push	{r7}
 800292a:	b089      	sub	sp, #36	; 0x24
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
 8002930:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002932:	2300      	movs	r3, #0
 8002934:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002936:	2300      	movs	r3, #0
 8002938:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800293a:	2300      	movs	r3, #0
 800293c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800293e:	2300      	movs	r3, #0
 8002940:	61fb      	str	r3, [r7, #28]
 8002942:	e177      	b.n	8002c34 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002944:	2201      	movs	r2, #1
 8002946:	69fb      	ldr	r3, [r7, #28]
 8002948:	fa02 f303 	lsl.w	r3, r2, r3
 800294c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	697a      	ldr	r2, [r7, #20]
 8002954:	4013      	ands	r3, r2
 8002956:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002958:	693a      	ldr	r2, [r7, #16]
 800295a:	697b      	ldr	r3, [r7, #20]
 800295c:	429a      	cmp	r2, r3
 800295e:	f040 8166 	bne.w	8002c2e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	f003 0303 	and.w	r3, r3, #3
 800296a:	2b01      	cmp	r3, #1
 800296c:	d005      	beq.n	800297a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002976:	2b02      	cmp	r3, #2
 8002978:	d130      	bne.n	80029dc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	689b      	ldr	r3, [r3, #8]
 800297e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002980:	69fb      	ldr	r3, [r7, #28]
 8002982:	005b      	lsls	r3, r3, #1
 8002984:	2203      	movs	r2, #3
 8002986:	fa02 f303 	lsl.w	r3, r2, r3
 800298a:	43db      	mvns	r3, r3
 800298c:	69ba      	ldr	r2, [r7, #24]
 800298e:	4013      	ands	r3, r2
 8002990:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	68da      	ldr	r2, [r3, #12]
 8002996:	69fb      	ldr	r3, [r7, #28]
 8002998:	005b      	lsls	r3, r3, #1
 800299a:	fa02 f303 	lsl.w	r3, r2, r3
 800299e:	69ba      	ldr	r2, [r7, #24]
 80029a0:	4313      	orrs	r3, r2
 80029a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	69ba      	ldr	r2, [r7, #24]
 80029a8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80029b0:	2201      	movs	r2, #1
 80029b2:	69fb      	ldr	r3, [r7, #28]
 80029b4:	fa02 f303 	lsl.w	r3, r2, r3
 80029b8:	43db      	mvns	r3, r3
 80029ba:	69ba      	ldr	r2, [r7, #24]
 80029bc:	4013      	ands	r3, r2
 80029be:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	091b      	lsrs	r3, r3, #4
 80029c6:	f003 0201 	and.w	r2, r3, #1
 80029ca:	69fb      	ldr	r3, [r7, #28]
 80029cc:	fa02 f303 	lsl.w	r3, r2, r3
 80029d0:	69ba      	ldr	r2, [r7, #24]
 80029d2:	4313      	orrs	r3, r2
 80029d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	69ba      	ldr	r2, [r7, #24]
 80029da:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	f003 0303 	and.w	r3, r3, #3
 80029e4:	2b03      	cmp	r3, #3
 80029e6:	d017      	beq.n	8002a18 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	68db      	ldr	r3, [r3, #12]
 80029ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80029ee:	69fb      	ldr	r3, [r7, #28]
 80029f0:	005b      	lsls	r3, r3, #1
 80029f2:	2203      	movs	r2, #3
 80029f4:	fa02 f303 	lsl.w	r3, r2, r3
 80029f8:	43db      	mvns	r3, r3
 80029fa:	69ba      	ldr	r2, [r7, #24]
 80029fc:	4013      	ands	r3, r2
 80029fe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	689a      	ldr	r2, [r3, #8]
 8002a04:	69fb      	ldr	r3, [r7, #28]
 8002a06:	005b      	lsls	r3, r3, #1
 8002a08:	fa02 f303 	lsl.w	r3, r2, r3
 8002a0c:	69ba      	ldr	r2, [r7, #24]
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	69ba      	ldr	r2, [r7, #24]
 8002a16:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	f003 0303 	and.w	r3, r3, #3
 8002a20:	2b02      	cmp	r3, #2
 8002a22:	d123      	bne.n	8002a6c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002a24:	69fb      	ldr	r3, [r7, #28]
 8002a26:	08da      	lsrs	r2, r3, #3
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	3208      	adds	r2, #8
 8002a2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a30:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002a32:	69fb      	ldr	r3, [r7, #28]
 8002a34:	f003 0307 	and.w	r3, r3, #7
 8002a38:	009b      	lsls	r3, r3, #2
 8002a3a:	220f      	movs	r2, #15
 8002a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a40:	43db      	mvns	r3, r3
 8002a42:	69ba      	ldr	r2, [r7, #24]
 8002a44:	4013      	ands	r3, r2
 8002a46:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	691a      	ldr	r2, [r3, #16]
 8002a4c:	69fb      	ldr	r3, [r7, #28]
 8002a4e:	f003 0307 	and.w	r3, r3, #7
 8002a52:	009b      	lsls	r3, r3, #2
 8002a54:	fa02 f303 	lsl.w	r3, r2, r3
 8002a58:	69ba      	ldr	r2, [r7, #24]
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002a5e:	69fb      	ldr	r3, [r7, #28]
 8002a60:	08da      	lsrs	r2, r3, #3
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	3208      	adds	r2, #8
 8002a66:	69b9      	ldr	r1, [r7, #24]
 8002a68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002a72:	69fb      	ldr	r3, [r7, #28]
 8002a74:	005b      	lsls	r3, r3, #1
 8002a76:	2203      	movs	r2, #3
 8002a78:	fa02 f303 	lsl.w	r3, r2, r3
 8002a7c:	43db      	mvns	r3, r3
 8002a7e:	69ba      	ldr	r2, [r7, #24]
 8002a80:	4013      	ands	r3, r2
 8002a82:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	f003 0203 	and.w	r2, r3, #3
 8002a8c:	69fb      	ldr	r3, [r7, #28]
 8002a8e:	005b      	lsls	r3, r3, #1
 8002a90:	fa02 f303 	lsl.w	r3, r2, r3
 8002a94:	69ba      	ldr	r2, [r7, #24]
 8002a96:	4313      	orrs	r3, r2
 8002a98:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	69ba      	ldr	r2, [r7, #24]
 8002a9e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	f000 80c0 	beq.w	8002c2e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002aae:	2300      	movs	r3, #0
 8002ab0:	60fb      	str	r3, [r7, #12]
 8002ab2:	4b66      	ldr	r3, [pc, #408]	; (8002c4c <HAL_GPIO_Init+0x324>)
 8002ab4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ab6:	4a65      	ldr	r2, [pc, #404]	; (8002c4c <HAL_GPIO_Init+0x324>)
 8002ab8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002abc:	6453      	str	r3, [r2, #68]	; 0x44
 8002abe:	4b63      	ldr	r3, [pc, #396]	; (8002c4c <HAL_GPIO_Init+0x324>)
 8002ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ac2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ac6:	60fb      	str	r3, [r7, #12]
 8002ac8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002aca:	4a61      	ldr	r2, [pc, #388]	; (8002c50 <HAL_GPIO_Init+0x328>)
 8002acc:	69fb      	ldr	r3, [r7, #28]
 8002ace:	089b      	lsrs	r3, r3, #2
 8002ad0:	3302      	adds	r3, #2
 8002ad2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ad6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002ad8:	69fb      	ldr	r3, [r7, #28]
 8002ada:	f003 0303 	and.w	r3, r3, #3
 8002ade:	009b      	lsls	r3, r3, #2
 8002ae0:	220f      	movs	r2, #15
 8002ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae6:	43db      	mvns	r3, r3
 8002ae8:	69ba      	ldr	r2, [r7, #24]
 8002aea:	4013      	ands	r3, r2
 8002aec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	4a58      	ldr	r2, [pc, #352]	; (8002c54 <HAL_GPIO_Init+0x32c>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d037      	beq.n	8002b66 <HAL_GPIO_Init+0x23e>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	4a57      	ldr	r2, [pc, #348]	; (8002c58 <HAL_GPIO_Init+0x330>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d031      	beq.n	8002b62 <HAL_GPIO_Init+0x23a>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	4a56      	ldr	r2, [pc, #344]	; (8002c5c <HAL_GPIO_Init+0x334>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d02b      	beq.n	8002b5e <HAL_GPIO_Init+0x236>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	4a55      	ldr	r2, [pc, #340]	; (8002c60 <HAL_GPIO_Init+0x338>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d025      	beq.n	8002b5a <HAL_GPIO_Init+0x232>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	4a54      	ldr	r2, [pc, #336]	; (8002c64 <HAL_GPIO_Init+0x33c>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d01f      	beq.n	8002b56 <HAL_GPIO_Init+0x22e>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	4a53      	ldr	r2, [pc, #332]	; (8002c68 <HAL_GPIO_Init+0x340>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d019      	beq.n	8002b52 <HAL_GPIO_Init+0x22a>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	4a52      	ldr	r2, [pc, #328]	; (8002c6c <HAL_GPIO_Init+0x344>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d013      	beq.n	8002b4e <HAL_GPIO_Init+0x226>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	4a51      	ldr	r2, [pc, #324]	; (8002c70 <HAL_GPIO_Init+0x348>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d00d      	beq.n	8002b4a <HAL_GPIO_Init+0x222>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	4a50      	ldr	r2, [pc, #320]	; (8002c74 <HAL_GPIO_Init+0x34c>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d007      	beq.n	8002b46 <HAL_GPIO_Init+0x21e>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	4a4f      	ldr	r2, [pc, #316]	; (8002c78 <HAL_GPIO_Init+0x350>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d101      	bne.n	8002b42 <HAL_GPIO_Init+0x21a>
 8002b3e:	2309      	movs	r3, #9
 8002b40:	e012      	b.n	8002b68 <HAL_GPIO_Init+0x240>
 8002b42:	230a      	movs	r3, #10
 8002b44:	e010      	b.n	8002b68 <HAL_GPIO_Init+0x240>
 8002b46:	2308      	movs	r3, #8
 8002b48:	e00e      	b.n	8002b68 <HAL_GPIO_Init+0x240>
 8002b4a:	2307      	movs	r3, #7
 8002b4c:	e00c      	b.n	8002b68 <HAL_GPIO_Init+0x240>
 8002b4e:	2306      	movs	r3, #6
 8002b50:	e00a      	b.n	8002b68 <HAL_GPIO_Init+0x240>
 8002b52:	2305      	movs	r3, #5
 8002b54:	e008      	b.n	8002b68 <HAL_GPIO_Init+0x240>
 8002b56:	2304      	movs	r3, #4
 8002b58:	e006      	b.n	8002b68 <HAL_GPIO_Init+0x240>
 8002b5a:	2303      	movs	r3, #3
 8002b5c:	e004      	b.n	8002b68 <HAL_GPIO_Init+0x240>
 8002b5e:	2302      	movs	r3, #2
 8002b60:	e002      	b.n	8002b68 <HAL_GPIO_Init+0x240>
 8002b62:	2301      	movs	r3, #1
 8002b64:	e000      	b.n	8002b68 <HAL_GPIO_Init+0x240>
 8002b66:	2300      	movs	r3, #0
 8002b68:	69fa      	ldr	r2, [r7, #28]
 8002b6a:	f002 0203 	and.w	r2, r2, #3
 8002b6e:	0092      	lsls	r2, r2, #2
 8002b70:	4093      	lsls	r3, r2
 8002b72:	69ba      	ldr	r2, [r7, #24]
 8002b74:	4313      	orrs	r3, r2
 8002b76:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b78:	4935      	ldr	r1, [pc, #212]	; (8002c50 <HAL_GPIO_Init+0x328>)
 8002b7a:	69fb      	ldr	r3, [r7, #28]
 8002b7c:	089b      	lsrs	r3, r3, #2
 8002b7e:	3302      	adds	r3, #2
 8002b80:	69ba      	ldr	r2, [r7, #24]
 8002b82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b86:	4b3d      	ldr	r3, [pc, #244]	; (8002c7c <HAL_GPIO_Init+0x354>)
 8002b88:	689b      	ldr	r3, [r3, #8]
 8002b8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b8c:	693b      	ldr	r3, [r7, #16]
 8002b8e:	43db      	mvns	r3, r3
 8002b90:	69ba      	ldr	r2, [r7, #24]
 8002b92:	4013      	ands	r3, r2
 8002b94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d003      	beq.n	8002baa <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002ba2:	69ba      	ldr	r2, [r7, #24]
 8002ba4:	693b      	ldr	r3, [r7, #16]
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002baa:	4a34      	ldr	r2, [pc, #208]	; (8002c7c <HAL_GPIO_Init+0x354>)
 8002bac:	69bb      	ldr	r3, [r7, #24]
 8002bae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002bb0:	4b32      	ldr	r3, [pc, #200]	; (8002c7c <HAL_GPIO_Init+0x354>)
 8002bb2:	68db      	ldr	r3, [r3, #12]
 8002bb4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bb6:	693b      	ldr	r3, [r7, #16]
 8002bb8:	43db      	mvns	r3, r3
 8002bba:	69ba      	ldr	r2, [r7, #24]
 8002bbc:	4013      	ands	r3, r2
 8002bbe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d003      	beq.n	8002bd4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002bcc:	69ba      	ldr	r2, [r7, #24]
 8002bce:	693b      	ldr	r3, [r7, #16]
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002bd4:	4a29      	ldr	r2, [pc, #164]	; (8002c7c <HAL_GPIO_Init+0x354>)
 8002bd6:	69bb      	ldr	r3, [r7, #24]
 8002bd8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002bda:	4b28      	ldr	r3, [pc, #160]	; (8002c7c <HAL_GPIO_Init+0x354>)
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002be0:	693b      	ldr	r3, [r7, #16]
 8002be2:	43db      	mvns	r3, r3
 8002be4:	69ba      	ldr	r2, [r7, #24]
 8002be6:	4013      	ands	r3, r2
 8002be8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d003      	beq.n	8002bfe <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002bf6:	69ba      	ldr	r2, [r7, #24]
 8002bf8:	693b      	ldr	r3, [r7, #16]
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002bfe:	4a1f      	ldr	r2, [pc, #124]	; (8002c7c <HAL_GPIO_Init+0x354>)
 8002c00:	69bb      	ldr	r3, [r7, #24]
 8002c02:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c04:	4b1d      	ldr	r3, [pc, #116]	; (8002c7c <HAL_GPIO_Init+0x354>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c0a:	693b      	ldr	r3, [r7, #16]
 8002c0c:	43db      	mvns	r3, r3
 8002c0e:	69ba      	ldr	r2, [r7, #24]
 8002c10:	4013      	ands	r3, r2
 8002c12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d003      	beq.n	8002c28 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002c20:	69ba      	ldr	r2, [r7, #24]
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	4313      	orrs	r3, r2
 8002c26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002c28:	4a14      	ldr	r2, [pc, #80]	; (8002c7c <HAL_GPIO_Init+0x354>)
 8002c2a:	69bb      	ldr	r3, [r7, #24]
 8002c2c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c2e:	69fb      	ldr	r3, [r7, #28]
 8002c30:	3301      	adds	r3, #1
 8002c32:	61fb      	str	r3, [r7, #28]
 8002c34:	69fb      	ldr	r3, [r7, #28]
 8002c36:	2b0f      	cmp	r3, #15
 8002c38:	f67f ae84 	bls.w	8002944 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002c3c:	bf00      	nop
 8002c3e:	bf00      	nop
 8002c40:	3724      	adds	r7, #36	; 0x24
 8002c42:	46bd      	mov	sp, r7
 8002c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c48:	4770      	bx	lr
 8002c4a:	bf00      	nop
 8002c4c:	40023800 	.word	0x40023800
 8002c50:	40013800 	.word	0x40013800
 8002c54:	40020000 	.word	0x40020000
 8002c58:	40020400 	.word	0x40020400
 8002c5c:	40020800 	.word	0x40020800
 8002c60:	40020c00 	.word	0x40020c00
 8002c64:	40021000 	.word	0x40021000
 8002c68:	40021400 	.word	0x40021400
 8002c6c:	40021800 	.word	0x40021800
 8002c70:	40021c00 	.word	0x40021c00
 8002c74:	40022000 	.word	0x40022000
 8002c78:	40022400 	.word	0x40022400
 8002c7c:	40013c00 	.word	0x40013c00

08002c80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c80:	b480      	push	{r7}
 8002c82:	b083      	sub	sp, #12
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
 8002c88:	460b      	mov	r3, r1
 8002c8a:	807b      	strh	r3, [r7, #2]
 8002c8c:	4613      	mov	r3, r2
 8002c8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c90:	787b      	ldrb	r3, [r7, #1]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d003      	beq.n	8002c9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c96:	887a      	ldrh	r2, [r7, #2]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002c9c:	e003      	b.n	8002ca6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002c9e:	887b      	ldrh	r3, [r7, #2]
 8002ca0:	041a      	lsls	r2, r3, #16
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	619a      	str	r2, [r3, #24]
}
 8002ca6:	bf00      	nop
 8002ca8:	370c      	adds	r7, #12
 8002caa:	46bd      	mov	sp, r7
 8002cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb0:	4770      	bx	lr
	...

08002cb4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b086      	sub	sp, #24
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d101      	bne.n	8002cc6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	e267      	b.n	8003196 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f003 0301 	and.w	r3, r3, #1
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d075      	beq.n	8002dbe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002cd2:	4b88      	ldr	r3, [pc, #544]	; (8002ef4 <HAL_RCC_OscConfig+0x240>)
 8002cd4:	689b      	ldr	r3, [r3, #8]
 8002cd6:	f003 030c 	and.w	r3, r3, #12
 8002cda:	2b04      	cmp	r3, #4
 8002cdc:	d00c      	beq.n	8002cf8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002cde:	4b85      	ldr	r3, [pc, #532]	; (8002ef4 <HAL_RCC_OscConfig+0x240>)
 8002ce0:	689b      	ldr	r3, [r3, #8]
 8002ce2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002ce6:	2b08      	cmp	r3, #8
 8002ce8:	d112      	bne.n	8002d10 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002cea:	4b82      	ldr	r3, [pc, #520]	; (8002ef4 <HAL_RCC_OscConfig+0x240>)
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cf2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002cf6:	d10b      	bne.n	8002d10 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cf8:	4b7e      	ldr	r3, [pc, #504]	; (8002ef4 <HAL_RCC_OscConfig+0x240>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d05b      	beq.n	8002dbc <HAL_RCC_OscConfig+0x108>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d157      	bne.n	8002dbc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	e242      	b.n	8003196 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d18:	d106      	bne.n	8002d28 <HAL_RCC_OscConfig+0x74>
 8002d1a:	4b76      	ldr	r3, [pc, #472]	; (8002ef4 <HAL_RCC_OscConfig+0x240>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4a75      	ldr	r2, [pc, #468]	; (8002ef4 <HAL_RCC_OscConfig+0x240>)
 8002d20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d24:	6013      	str	r3, [r2, #0]
 8002d26:	e01d      	b.n	8002d64 <HAL_RCC_OscConfig+0xb0>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d30:	d10c      	bne.n	8002d4c <HAL_RCC_OscConfig+0x98>
 8002d32:	4b70      	ldr	r3, [pc, #448]	; (8002ef4 <HAL_RCC_OscConfig+0x240>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a6f      	ldr	r2, [pc, #444]	; (8002ef4 <HAL_RCC_OscConfig+0x240>)
 8002d38:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d3c:	6013      	str	r3, [r2, #0]
 8002d3e:	4b6d      	ldr	r3, [pc, #436]	; (8002ef4 <HAL_RCC_OscConfig+0x240>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4a6c      	ldr	r2, [pc, #432]	; (8002ef4 <HAL_RCC_OscConfig+0x240>)
 8002d44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d48:	6013      	str	r3, [r2, #0]
 8002d4a:	e00b      	b.n	8002d64 <HAL_RCC_OscConfig+0xb0>
 8002d4c:	4b69      	ldr	r3, [pc, #420]	; (8002ef4 <HAL_RCC_OscConfig+0x240>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a68      	ldr	r2, [pc, #416]	; (8002ef4 <HAL_RCC_OscConfig+0x240>)
 8002d52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d56:	6013      	str	r3, [r2, #0]
 8002d58:	4b66      	ldr	r3, [pc, #408]	; (8002ef4 <HAL_RCC_OscConfig+0x240>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a65      	ldr	r2, [pc, #404]	; (8002ef4 <HAL_RCC_OscConfig+0x240>)
 8002d5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d62:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d013      	beq.n	8002d94 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d6c:	f7fe fa1a 	bl	80011a4 <HAL_GetTick>
 8002d70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d72:	e008      	b.n	8002d86 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d74:	f7fe fa16 	bl	80011a4 <HAL_GetTick>
 8002d78:	4602      	mov	r2, r0
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	1ad3      	subs	r3, r2, r3
 8002d7e:	2b64      	cmp	r3, #100	; 0x64
 8002d80:	d901      	bls.n	8002d86 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002d82:	2303      	movs	r3, #3
 8002d84:	e207      	b.n	8003196 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d86:	4b5b      	ldr	r3, [pc, #364]	; (8002ef4 <HAL_RCC_OscConfig+0x240>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d0f0      	beq.n	8002d74 <HAL_RCC_OscConfig+0xc0>
 8002d92:	e014      	b.n	8002dbe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d94:	f7fe fa06 	bl	80011a4 <HAL_GetTick>
 8002d98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d9a:	e008      	b.n	8002dae <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d9c:	f7fe fa02 	bl	80011a4 <HAL_GetTick>
 8002da0:	4602      	mov	r2, r0
 8002da2:	693b      	ldr	r3, [r7, #16]
 8002da4:	1ad3      	subs	r3, r2, r3
 8002da6:	2b64      	cmp	r3, #100	; 0x64
 8002da8:	d901      	bls.n	8002dae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002daa:	2303      	movs	r3, #3
 8002dac:	e1f3      	b.n	8003196 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dae:	4b51      	ldr	r3, [pc, #324]	; (8002ef4 <HAL_RCC_OscConfig+0x240>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d1f0      	bne.n	8002d9c <HAL_RCC_OscConfig+0xe8>
 8002dba:	e000      	b.n	8002dbe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dbc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f003 0302 	and.w	r3, r3, #2
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d063      	beq.n	8002e92 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002dca:	4b4a      	ldr	r3, [pc, #296]	; (8002ef4 <HAL_RCC_OscConfig+0x240>)
 8002dcc:	689b      	ldr	r3, [r3, #8]
 8002dce:	f003 030c 	and.w	r3, r3, #12
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d00b      	beq.n	8002dee <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002dd6:	4b47      	ldr	r3, [pc, #284]	; (8002ef4 <HAL_RCC_OscConfig+0x240>)
 8002dd8:	689b      	ldr	r3, [r3, #8]
 8002dda:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002dde:	2b08      	cmp	r3, #8
 8002de0:	d11c      	bne.n	8002e1c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002de2:	4b44      	ldr	r3, [pc, #272]	; (8002ef4 <HAL_RCC_OscConfig+0x240>)
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d116      	bne.n	8002e1c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dee:	4b41      	ldr	r3, [pc, #260]	; (8002ef4 <HAL_RCC_OscConfig+0x240>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f003 0302 	and.w	r3, r3, #2
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d005      	beq.n	8002e06 <HAL_RCC_OscConfig+0x152>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	68db      	ldr	r3, [r3, #12]
 8002dfe:	2b01      	cmp	r3, #1
 8002e00:	d001      	beq.n	8002e06 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	e1c7      	b.n	8003196 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e06:	4b3b      	ldr	r3, [pc, #236]	; (8002ef4 <HAL_RCC_OscConfig+0x240>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	691b      	ldr	r3, [r3, #16]
 8002e12:	00db      	lsls	r3, r3, #3
 8002e14:	4937      	ldr	r1, [pc, #220]	; (8002ef4 <HAL_RCC_OscConfig+0x240>)
 8002e16:	4313      	orrs	r3, r2
 8002e18:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e1a:	e03a      	b.n	8002e92 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	68db      	ldr	r3, [r3, #12]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d020      	beq.n	8002e66 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e24:	4b34      	ldr	r3, [pc, #208]	; (8002ef8 <HAL_RCC_OscConfig+0x244>)
 8002e26:	2201      	movs	r2, #1
 8002e28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e2a:	f7fe f9bb 	bl	80011a4 <HAL_GetTick>
 8002e2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e30:	e008      	b.n	8002e44 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e32:	f7fe f9b7 	bl	80011a4 <HAL_GetTick>
 8002e36:	4602      	mov	r2, r0
 8002e38:	693b      	ldr	r3, [r7, #16]
 8002e3a:	1ad3      	subs	r3, r2, r3
 8002e3c:	2b02      	cmp	r3, #2
 8002e3e:	d901      	bls.n	8002e44 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002e40:	2303      	movs	r3, #3
 8002e42:	e1a8      	b.n	8003196 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e44:	4b2b      	ldr	r3, [pc, #172]	; (8002ef4 <HAL_RCC_OscConfig+0x240>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f003 0302 	and.w	r3, r3, #2
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d0f0      	beq.n	8002e32 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e50:	4b28      	ldr	r3, [pc, #160]	; (8002ef4 <HAL_RCC_OscConfig+0x240>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	691b      	ldr	r3, [r3, #16]
 8002e5c:	00db      	lsls	r3, r3, #3
 8002e5e:	4925      	ldr	r1, [pc, #148]	; (8002ef4 <HAL_RCC_OscConfig+0x240>)
 8002e60:	4313      	orrs	r3, r2
 8002e62:	600b      	str	r3, [r1, #0]
 8002e64:	e015      	b.n	8002e92 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e66:	4b24      	ldr	r3, [pc, #144]	; (8002ef8 <HAL_RCC_OscConfig+0x244>)
 8002e68:	2200      	movs	r2, #0
 8002e6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e6c:	f7fe f99a 	bl	80011a4 <HAL_GetTick>
 8002e70:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e72:	e008      	b.n	8002e86 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e74:	f7fe f996 	bl	80011a4 <HAL_GetTick>
 8002e78:	4602      	mov	r2, r0
 8002e7a:	693b      	ldr	r3, [r7, #16]
 8002e7c:	1ad3      	subs	r3, r2, r3
 8002e7e:	2b02      	cmp	r3, #2
 8002e80:	d901      	bls.n	8002e86 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002e82:	2303      	movs	r3, #3
 8002e84:	e187      	b.n	8003196 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e86:	4b1b      	ldr	r3, [pc, #108]	; (8002ef4 <HAL_RCC_OscConfig+0x240>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f003 0302 	and.w	r3, r3, #2
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d1f0      	bne.n	8002e74 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f003 0308 	and.w	r3, r3, #8
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d036      	beq.n	8002f0c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	695b      	ldr	r3, [r3, #20]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d016      	beq.n	8002ed4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ea6:	4b15      	ldr	r3, [pc, #84]	; (8002efc <HAL_RCC_OscConfig+0x248>)
 8002ea8:	2201      	movs	r2, #1
 8002eaa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002eac:	f7fe f97a 	bl	80011a4 <HAL_GetTick>
 8002eb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002eb2:	e008      	b.n	8002ec6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002eb4:	f7fe f976 	bl	80011a4 <HAL_GetTick>
 8002eb8:	4602      	mov	r2, r0
 8002eba:	693b      	ldr	r3, [r7, #16]
 8002ebc:	1ad3      	subs	r3, r2, r3
 8002ebe:	2b02      	cmp	r3, #2
 8002ec0:	d901      	bls.n	8002ec6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002ec2:	2303      	movs	r3, #3
 8002ec4:	e167      	b.n	8003196 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ec6:	4b0b      	ldr	r3, [pc, #44]	; (8002ef4 <HAL_RCC_OscConfig+0x240>)
 8002ec8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002eca:	f003 0302 	and.w	r3, r3, #2
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d0f0      	beq.n	8002eb4 <HAL_RCC_OscConfig+0x200>
 8002ed2:	e01b      	b.n	8002f0c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ed4:	4b09      	ldr	r3, [pc, #36]	; (8002efc <HAL_RCC_OscConfig+0x248>)
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002eda:	f7fe f963 	bl	80011a4 <HAL_GetTick>
 8002ede:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ee0:	e00e      	b.n	8002f00 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ee2:	f7fe f95f 	bl	80011a4 <HAL_GetTick>
 8002ee6:	4602      	mov	r2, r0
 8002ee8:	693b      	ldr	r3, [r7, #16]
 8002eea:	1ad3      	subs	r3, r2, r3
 8002eec:	2b02      	cmp	r3, #2
 8002eee:	d907      	bls.n	8002f00 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002ef0:	2303      	movs	r3, #3
 8002ef2:	e150      	b.n	8003196 <HAL_RCC_OscConfig+0x4e2>
 8002ef4:	40023800 	.word	0x40023800
 8002ef8:	42470000 	.word	0x42470000
 8002efc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f00:	4b88      	ldr	r3, [pc, #544]	; (8003124 <HAL_RCC_OscConfig+0x470>)
 8002f02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f04:	f003 0302 	and.w	r3, r3, #2
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d1ea      	bne.n	8002ee2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f003 0304 	and.w	r3, r3, #4
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	f000 8097 	beq.w	8003048 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f1e:	4b81      	ldr	r3, [pc, #516]	; (8003124 <HAL_RCC_OscConfig+0x470>)
 8002f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d10f      	bne.n	8002f4a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	60bb      	str	r3, [r7, #8]
 8002f2e:	4b7d      	ldr	r3, [pc, #500]	; (8003124 <HAL_RCC_OscConfig+0x470>)
 8002f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f32:	4a7c      	ldr	r2, [pc, #496]	; (8003124 <HAL_RCC_OscConfig+0x470>)
 8002f34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f38:	6413      	str	r3, [r2, #64]	; 0x40
 8002f3a:	4b7a      	ldr	r3, [pc, #488]	; (8003124 <HAL_RCC_OscConfig+0x470>)
 8002f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f42:	60bb      	str	r3, [r7, #8]
 8002f44:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f46:	2301      	movs	r3, #1
 8002f48:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f4a:	4b77      	ldr	r3, [pc, #476]	; (8003128 <HAL_RCC_OscConfig+0x474>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d118      	bne.n	8002f88 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f56:	4b74      	ldr	r3, [pc, #464]	; (8003128 <HAL_RCC_OscConfig+0x474>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a73      	ldr	r2, [pc, #460]	; (8003128 <HAL_RCC_OscConfig+0x474>)
 8002f5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f60:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f62:	f7fe f91f 	bl	80011a4 <HAL_GetTick>
 8002f66:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f68:	e008      	b.n	8002f7c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f6a:	f7fe f91b 	bl	80011a4 <HAL_GetTick>
 8002f6e:	4602      	mov	r2, r0
 8002f70:	693b      	ldr	r3, [r7, #16]
 8002f72:	1ad3      	subs	r3, r2, r3
 8002f74:	2b02      	cmp	r3, #2
 8002f76:	d901      	bls.n	8002f7c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002f78:	2303      	movs	r3, #3
 8002f7a:	e10c      	b.n	8003196 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f7c:	4b6a      	ldr	r3, [pc, #424]	; (8003128 <HAL_RCC_OscConfig+0x474>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d0f0      	beq.n	8002f6a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	689b      	ldr	r3, [r3, #8]
 8002f8c:	2b01      	cmp	r3, #1
 8002f8e:	d106      	bne.n	8002f9e <HAL_RCC_OscConfig+0x2ea>
 8002f90:	4b64      	ldr	r3, [pc, #400]	; (8003124 <HAL_RCC_OscConfig+0x470>)
 8002f92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f94:	4a63      	ldr	r2, [pc, #396]	; (8003124 <HAL_RCC_OscConfig+0x470>)
 8002f96:	f043 0301 	orr.w	r3, r3, #1
 8002f9a:	6713      	str	r3, [r2, #112]	; 0x70
 8002f9c:	e01c      	b.n	8002fd8 <HAL_RCC_OscConfig+0x324>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	689b      	ldr	r3, [r3, #8]
 8002fa2:	2b05      	cmp	r3, #5
 8002fa4:	d10c      	bne.n	8002fc0 <HAL_RCC_OscConfig+0x30c>
 8002fa6:	4b5f      	ldr	r3, [pc, #380]	; (8003124 <HAL_RCC_OscConfig+0x470>)
 8002fa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002faa:	4a5e      	ldr	r2, [pc, #376]	; (8003124 <HAL_RCC_OscConfig+0x470>)
 8002fac:	f043 0304 	orr.w	r3, r3, #4
 8002fb0:	6713      	str	r3, [r2, #112]	; 0x70
 8002fb2:	4b5c      	ldr	r3, [pc, #368]	; (8003124 <HAL_RCC_OscConfig+0x470>)
 8002fb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fb6:	4a5b      	ldr	r2, [pc, #364]	; (8003124 <HAL_RCC_OscConfig+0x470>)
 8002fb8:	f043 0301 	orr.w	r3, r3, #1
 8002fbc:	6713      	str	r3, [r2, #112]	; 0x70
 8002fbe:	e00b      	b.n	8002fd8 <HAL_RCC_OscConfig+0x324>
 8002fc0:	4b58      	ldr	r3, [pc, #352]	; (8003124 <HAL_RCC_OscConfig+0x470>)
 8002fc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fc4:	4a57      	ldr	r2, [pc, #348]	; (8003124 <HAL_RCC_OscConfig+0x470>)
 8002fc6:	f023 0301 	bic.w	r3, r3, #1
 8002fca:	6713      	str	r3, [r2, #112]	; 0x70
 8002fcc:	4b55      	ldr	r3, [pc, #340]	; (8003124 <HAL_RCC_OscConfig+0x470>)
 8002fce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fd0:	4a54      	ldr	r2, [pc, #336]	; (8003124 <HAL_RCC_OscConfig+0x470>)
 8002fd2:	f023 0304 	bic.w	r3, r3, #4
 8002fd6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	689b      	ldr	r3, [r3, #8]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d015      	beq.n	800300c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fe0:	f7fe f8e0 	bl	80011a4 <HAL_GetTick>
 8002fe4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fe6:	e00a      	b.n	8002ffe <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fe8:	f7fe f8dc 	bl	80011a4 <HAL_GetTick>
 8002fec:	4602      	mov	r2, r0
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	1ad3      	subs	r3, r2, r3
 8002ff2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d901      	bls.n	8002ffe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002ffa:	2303      	movs	r3, #3
 8002ffc:	e0cb      	b.n	8003196 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ffe:	4b49      	ldr	r3, [pc, #292]	; (8003124 <HAL_RCC_OscConfig+0x470>)
 8003000:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003002:	f003 0302 	and.w	r3, r3, #2
 8003006:	2b00      	cmp	r3, #0
 8003008:	d0ee      	beq.n	8002fe8 <HAL_RCC_OscConfig+0x334>
 800300a:	e014      	b.n	8003036 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800300c:	f7fe f8ca 	bl	80011a4 <HAL_GetTick>
 8003010:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003012:	e00a      	b.n	800302a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003014:	f7fe f8c6 	bl	80011a4 <HAL_GetTick>
 8003018:	4602      	mov	r2, r0
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	1ad3      	subs	r3, r2, r3
 800301e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003022:	4293      	cmp	r3, r2
 8003024:	d901      	bls.n	800302a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003026:	2303      	movs	r3, #3
 8003028:	e0b5      	b.n	8003196 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800302a:	4b3e      	ldr	r3, [pc, #248]	; (8003124 <HAL_RCC_OscConfig+0x470>)
 800302c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800302e:	f003 0302 	and.w	r3, r3, #2
 8003032:	2b00      	cmp	r3, #0
 8003034:	d1ee      	bne.n	8003014 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003036:	7dfb      	ldrb	r3, [r7, #23]
 8003038:	2b01      	cmp	r3, #1
 800303a:	d105      	bne.n	8003048 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800303c:	4b39      	ldr	r3, [pc, #228]	; (8003124 <HAL_RCC_OscConfig+0x470>)
 800303e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003040:	4a38      	ldr	r2, [pc, #224]	; (8003124 <HAL_RCC_OscConfig+0x470>)
 8003042:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003046:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	699b      	ldr	r3, [r3, #24]
 800304c:	2b00      	cmp	r3, #0
 800304e:	f000 80a1 	beq.w	8003194 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003052:	4b34      	ldr	r3, [pc, #208]	; (8003124 <HAL_RCC_OscConfig+0x470>)
 8003054:	689b      	ldr	r3, [r3, #8]
 8003056:	f003 030c 	and.w	r3, r3, #12
 800305a:	2b08      	cmp	r3, #8
 800305c:	d05c      	beq.n	8003118 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	699b      	ldr	r3, [r3, #24]
 8003062:	2b02      	cmp	r3, #2
 8003064:	d141      	bne.n	80030ea <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003066:	4b31      	ldr	r3, [pc, #196]	; (800312c <HAL_RCC_OscConfig+0x478>)
 8003068:	2200      	movs	r2, #0
 800306a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800306c:	f7fe f89a 	bl	80011a4 <HAL_GetTick>
 8003070:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003072:	e008      	b.n	8003086 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003074:	f7fe f896 	bl	80011a4 <HAL_GetTick>
 8003078:	4602      	mov	r2, r0
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	1ad3      	subs	r3, r2, r3
 800307e:	2b02      	cmp	r3, #2
 8003080:	d901      	bls.n	8003086 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003082:	2303      	movs	r3, #3
 8003084:	e087      	b.n	8003196 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003086:	4b27      	ldr	r3, [pc, #156]	; (8003124 <HAL_RCC_OscConfig+0x470>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800308e:	2b00      	cmp	r3, #0
 8003090:	d1f0      	bne.n	8003074 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	69da      	ldr	r2, [r3, #28]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6a1b      	ldr	r3, [r3, #32]
 800309a:	431a      	orrs	r2, r3
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030a0:	019b      	lsls	r3, r3, #6
 80030a2:	431a      	orrs	r2, r3
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030a8:	085b      	lsrs	r3, r3, #1
 80030aa:	3b01      	subs	r3, #1
 80030ac:	041b      	lsls	r3, r3, #16
 80030ae:	431a      	orrs	r2, r3
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030b4:	061b      	lsls	r3, r3, #24
 80030b6:	491b      	ldr	r1, [pc, #108]	; (8003124 <HAL_RCC_OscConfig+0x470>)
 80030b8:	4313      	orrs	r3, r2
 80030ba:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030bc:	4b1b      	ldr	r3, [pc, #108]	; (800312c <HAL_RCC_OscConfig+0x478>)
 80030be:	2201      	movs	r2, #1
 80030c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030c2:	f7fe f86f 	bl	80011a4 <HAL_GetTick>
 80030c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030c8:	e008      	b.n	80030dc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030ca:	f7fe f86b 	bl	80011a4 <HAL_GetTick>
 80030ce:	4602      	mov	r2, r0
 80030d0:	693b      	ldr	r3, [r7, #16]
 80030d2:	1ad3      	subs	r3, r2, r3
 80030d4:	2b02      	cmp	r3, #2
 80030d6:	d901      	bls.n	80030dc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80030d8:	2303      	movs	r3, #3
 80030da:	e05c      	b.n	8003196 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030dc:	4b11      	ldr	r3, [pc, #68]	; (8003124 <HAL_RCC_OscConfig+0x470>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d0f0      	beq.n	80030ca <HAL_RCC_OscConfig+0x416>
 80030e8:	e054      	b.n	8003194 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030ea:	4b10      	ldr	r3, [pc, #64]	; (800312c <HAL_RCC_OscConfig+0x478>)
 80030ec:	2200      	movs	r2, #0
 80030ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030f0:	f7fe f858 	bl	80011a4 <HAL_GetTick>
 80030f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030f6:	e008      	b.n	800310a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030f8:	f7fe f854 	bl	80011a4 <HAL_GetTick>
 80030fc:	4602      	mov	r2, r0
 80030fe:	693b      	ldr	r3, [r7, #16]
 8003100:	1ad3      	subs	r3, r2, r3
 8003102:	2b02      	cmp	r3, #2
 8003104:	d901      	bls.n	800310a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003106:	2303      	movs	r3, #3
 8003108:	e045      	b.n	8003196 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800310a:	4b06      	ldr	r3, [pc, #24]	; (8003124 <HAL_RCC_OscConfig+0x470>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003112:	2b00      	cmp	r3, #0
 8003114:	d1f0      	bne.n	80030f8 <HAL_RCC_OscConfig+0x444>
 8003116:	e03d      	b.n	8003194 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	699b      	ldr	r3, [r3, #24]
 800311c:	2b01      	cmp	r3, #1
 800311e:	d107      	bne.n	8003130 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003120:	2301      	movs	r3, #1
 8003122:	e038      	b.n	8003196 <HAL_RCC_OscConfig+0x4e2>
 8003124:	40023800 	.word	0x40023800
 8003128:	40007000 	.word	0x40007000
 800312c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003130:	4b1b      	ldr	r3, [pc, #108]	; (80031a0 <HAL_RCC_OscConfig+0x4ec>)
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	699b      	ldr	r3, [r3, #24]
 800313a:	2b01      	cmp	r3, #1
 800313c:	d028      	beq.n	8003190 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003148:	429a      	cmp	r2, r3
 800314a:	d121      	bne.n	8003190 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003156:	429a      	cmp	r2, r3
 8003158:	d11a      	bne.n	8003190 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800315a:	68fa      	ldr	r2, [r7, #12]
 800315c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003160:	4013      	ands	r3, r2
 8003162:	687a      	ldr	r2, [r7, #4]
 8003164:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003166:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003168:	4293      	cmp	r3, r2
 800316a:	d111      	bne.n	8003190 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003176:	085b      	lsrs	r3, r3, #1
 8003178:	3b01      	subs	r3, #1
 800317a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800317c:	429a      	cmp	r2, r3
 800317e:	d107      	bne.n	8003190 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800318a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800318c:	429a      	cmp	r2, r3
 800318e:	d001      	beq.n	8003194 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003190:	2301      	movs	r3, #1
 8003192:	e000      	b.n	8003196 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003194:	2300      	movs	r3, #0
}
 8003196:	4618      	mov	r0, r3
 8003198:	3718      	adds	r7, #24
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}
 800319e:	bf00      	nop
 80031a0:	40023800 	.word	0x40023800

080031a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b084      	sub	sp, #16
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
 80031ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d101      	bne.n	80031b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031b4:	2301      	movs	r3, #1
 80031b6:	e0cc      	b.n	8003352 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80031b8:	4b68      	ldr	r3, [pc, #416]	; (800335c <HAL_RCC_ClockConfig+0x1b8>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f003 030f 	and.w	r3, r3, #15
 80031c0:	683a      	ldr	r2, [r7, #0]
 80031c2:	429a      	cmp	r2, r3
 80031c4:	d90c      	bls.n	80031e0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031c6:	4b65      	ldr	r3, [pc, #404]	; (800335c <HAL_RCC_ClockConfig+0x1b8>)
 80031c8:	683a      	ldr	r2, [r7, #0]
 80031ca:	b2d2      	uxtb	r2, r2
 80031cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031ce:	4b63      	ldr	r3, [pc, #396]	; (800335c <HAL_RCC_ClockConfig+0x1b8>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f003 030f 	and.w	r3, r3, #15
 80031d6:	683a      	ldr	r2, [r7, #0]
 80031d8:	429a      	cmp	r2, r3
 80031da:	d001      	beq.n	80031e0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80031dc:	2301      	movs	r3, #1
 80031de:	e0b8      	b.n	8003352 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f003 0302 	and.w	r3, r3, #2
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d020      	beq.n	800322e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f003 0304 	and.w	r3, r3, #4
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d005      	beq.n	8003204 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80031f8:	4b59      	ldr	r3, [pc, #356]	; (8003360 <HAL_RCC_ClockConfig+0x1bc>)
 80031fa:	689b      	ldr	r3, [r3, #8]
 80031fc:	4a58      	ldr	r2, [pc, #352]	; (8003360 <HAL_RCC_ClockConfig+0x1bc>)
 80031fe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003202:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f003 0308 	and.w	r3, r3, #8
 800320c:	2b00      	cmp	r3, #0
 800320e:	d005      	beq.n	800321c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003210:	4b53      	ldr	r3, [pc, #332]	; (8003360 <HAL_RCC_ClockConfig+0x1bc>)
 8003212:	689b      	ldr	r3, [r3, #8]
 8003214:	4a52      	ldr	r2, [pc, #328]	; (8003360 <HAL_RCC_ClockConfig+0x1bc>)
 8003216:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800321a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800321c:	4b50      	ldr	r3, [pc, #320]	; (8003360 <HAL_RCC_ClockConfig+0x1bc>)
 800321e:	689b      	ldr	r3, [r3, #8]
 8003220:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	689b      	ldr	r3, [r3, #8]
 8003228:	494d      	ldr	r1, [pc, #308]	; (8003360 <HAL_RCC_ClockConfig+0x1bc>)
 800322a:	4313      	orrs	r3, r2
 800322c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f003 0301 	and.w	r3, r3, #1
 8003236:	2b00      	cmp	r3, #0
 8003238:	d044      	beq.n	80032c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	2b01      	cmp	r3, #1
 8003240:	d107      	bne.n	8003252 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003242:	4b47      	ldr	r3, [pc, #284]	; (8003360 <HAL_RCC_ClockConfig+0x1bc>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800324a:	2b00      	cmp	r3, #0
 800324c:	d119      	bne.n	8003282 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800324e:	2301      	movs	r3, #1
 8003250:	e07f      	b.n	8003352 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	2b02      	cmp	r3, #2
 8003258:	d003      	beq.n	8003262 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800325e:	2b03      	cmp	r3, #3
 8003260:	d107      	bne.n	8003272 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003262:	4b3f      	ldr	r3, [pc, #252]	; (8003360 <HAL_RCC_ClockConfig+0x1bc>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800326a:	2b00      	cmp	r3, #0
 800326c:	d109      	bne.n	8003282 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	e06f      	b.n	8003352 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003272:	4b3b      	ldr	r3, [pc, #236]	; (8003360 <HAL_RCC_ClockConfig+0x1bc>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f003 0302 	and.w	r3, r3, #2
 800327a:	2b00      	cmp	r3, #0
 800327c:	d101      	bne.n	8003282 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800327e:	2301      	movs	r3, #1
 8003280:	e067      	b.n	8003352 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003282:	4b37      	ldr	r3, [pc, #220]	; (8003360 <HAL_RCC_ClockConfig+0x1bc>)
 8003284:	689b      	ldr	r3, [r3, #8]
 8003286:	f023 0203 	bic.w	r2, r3, #3
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	4934      	ldr	r1, [pc, #208]	; (8003360 <HAL_RCC_ClockConfig+0x1bc>)
 8003290:	4313      	orrs	r3, r2
 8003292:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003294:	f7fd ff86 	bl	80011a4 <HAL_GetTick>
 8003298:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800329a:	e00a      	b.n	80032b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800329c:	f7fd ff82 	bl	80011a4 <HAL_GetTick>
 80032a0:	4602      	mov	r2, r0
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	1ad3      	subs	r3, r2, r3
 80032a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d901      	bls.n	80032b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80032ae:	2303      	movs	r3, #3
 80032b0:	e04f      	b.n	8003352 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032b2:	4b2b      	ldr	r3, [pc, #172]	; (8003360 <HAL_RCC_ClockConfig+0x1bc>)
 80032b4:	689b      	ldr	r3, [r3, #8]
 80032b6:	f003 020c 	and.w	r2, r3, #12
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	009b      	lsls	r3, r3, #2
 80032c0:	429a      	cmp	r2, r3
 80032c2:	d1eb      	bne.n	800329c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80032c4:	4b25      	ldr	r3, [pc, #148]	; (800335c <HAL_RCC_ClockConfig+0x1b8>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f003 030f 	and.w	r3, r3, #15
 80032cc:	683a      	ldr	r2, [r7, #0]
 80032ce:	429a      	cmp	r2, r3
 80032d0:	d20c      	bcs.n	80032ec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032d2:	4b22      	ldr	r3, [pc, #136]	; (800335c <HAL_RCC_ClockConfig+0x1b8>)
 80032d4:	683a      	ldr	r2, [r7, #0]
 80032d6:	b2d2      	uxtb	r2, r2
 80032d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032da:	4b20      	ldr	r3, [pc, #128]	; (800335c <HAL_RCC_ClockConfig+0x1b8>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f003 030f 	and.w	r3, r3, #15
 80032e2:	683a      	ldr	r2, [r7, #0]
 80032e4:	429a      	cmp	r2, r3
 80032e6:	d001      	beq.n	80032ec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80032e8:	2301      	movs	r3, #1
 80032ea:	e032      	b.n	8003352 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f003 0304 	and.w	r3, r3, #4
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d008      	beq.n	800330a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032f8:	4b19      	ldr	r3, [pc, #100]	; (8003360 <HAL_RCC_ClockConfig+0x1bc>)
 80032fa:	689b      	ldr	r3, [r3, #8]
 80032fc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	68db      	ldr	r3, [r3, #12]
 8003304:	4916      	ldr	r1, [pc, #88]	; (8003360 <HAL_RCC_ClockConfig+0x1bc>)
 8003306:	4313      	orrs	r3, r2
 8003308:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f003 0308 	and.w	r3, r3, #8
 8003312:	2b00      	cmp	r3, #0
 8003314:	d009      	beq.n	800332a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003316:	4b12      	ldr	r3, [pc, #72]	; (8003360 <HAL_RCC_ClockConfig+0x1bc>)
 8003318:	689b      	ldr	r3, [r3, #8]
 800331a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	691b      	ldr	r3, [r3, #16]
 8003322:	00db      	lsls	r3, r3, #3
 8003324:	490e      	ldr	r1, [pc, #56]	; (8003360 <HAL_RCC_ClockConfig+0x1bc>)
 8003326:	4313      	orrs	r3, r2
 8003328:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800332a:	f000 f821 	bl	8003370 <HAL_RCC_GetSysClockFreq>
 800332e:	4602      	mov	r2, r0
 8003330:	4b0b      	ldr	r3, [pc, #44]	; (8003360 <HAL_RCC_ClockConfig+0x1bc>)
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	091b      	lsrs	r3, r3, #4
 8003336:	f003 030f 	and.w	r3, r3, #15
 800333a:	490a      	ldr	r1, [pc, #40]	; (8003364 <HAL_RCC_ClockConfig+0x1c0>)
 800333c:	5ccb      	ldrb	r3, [r1, r3]
 800333e:	fa22 f303 	lsr.w	r3, r2, r3
 8003342:	4a09      	ldr	r2, [pc, #36]	; (8003368 <HAL_RCC_ClockConfig+0x1c4>)
 8003344:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003346:	4b09      	ldr	r3, [pc, #36]	; (800336c <HAL_RCC_ClockConfig+0x1c8>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4618      	mov	r0, r3
 800334c:	f7fd fb74 	bl	8000a38 <HAL_InitTick>

  return HAL_OK;
 8003350:	2300      	movs	r3, #0
}
 8003352:	4618      	mov	r0, r3
 8003354:	3710      	adds	r7, #16
 8003356:	46bd      	mov	sp, r7
 8003358:	bd80      	pop	{r7, pc}
 800335a:	bf00      	nop
 800335c:	40023c00 	.word	0x40023c00
 8003360:	40023800 	.word	0x40023800
 8003364:	0801cde0 	.word	0x0801cde0
 8003368:	20000000 	.word	0x20000000
 800336c:	20000004 	.word	0x20000004

08003370 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003370:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003374:	b094      	sub	sp, #80	; 0x50
 8003376:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003378:	2300      	movs	r3, #0
 800337a:	647b      	str	r3, [r7, #68]	; 0x44
 800337c:	2300      	movs	r3, #0
 800337e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003380:	2300      	movs	r3, #0
 8003382:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003384:	2300      	movs	r3, #0
 8003386:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003388:	4b79      	ldr	r3, [pc, #484]	; (8003570 <HAL_RCC_GetSysClockFreq+0x200>)
 800338a:	689b      	ldr	r3, [r3, #8]
 800338c:	f003 030c 	and.w	r3, r3, #12
 8003390:	2b08      	cmp	r3, #8
 8003392:	d00d      	beq.n	80033b0 <HAL_RCC_GetSysClockFreq+0x40>
 8003394:	2b08      	cmp	r3, #8
 8003396:	f200 80e1 	bhi.w	800355c <HAL_RCC_GetSysClockFreq+0x1ec>
 800339a:	2b00      	cmp	r3, #0
 800339c:	d002      	beq.n	80033a4 <HAL_RCC_GetSysClockFreq+0x34>
 800339e:	2b04      	cmp	r3, #4
 80033a0:	d003      	beq.n	80033aa <HAL_RCC_GetSysClockFreq+0x3a>
 80033a2:	e0db      	b.n	800355c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80033a4:	4b73      	ldr	r3, [pc, #460]	; (8003574 <HAL_RCC_GetSysClockFreq+0x204>)
 80033a6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80033a8:	e0db      	b.n	8003562 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80033aa:	4b73      	ldr	r3, [pc, #460]	; (8003578 <HAL_RCC_GetSysClockFreq+0x208>)
 80033ac:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80033ae:	e0d8      	b.n	8003562 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80033b0:	4b6f      	ldr	r3, [pc, #444]	; (8003570 <HAL_RCC_GetSysClockFreq+0x200>)
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80033b8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80033ba:	4b6d      	ldr	r3, [pc, #436]	; (8003570 <HAL_RCC_GetSysClockFreq+0x200>)
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d063      	beq.n	800348e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033c6:	4b6a      	ldr	r3, [pc, #424]	; (8003570 <HAL_RCC_GetSysClockFreq+0x200>)
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	099b      	lsrs	r3, r3, #6
 80033cc:	2200      	movs	r2, #0
 80033ce:	63bb      	str	r3, [r7, #56]	; 0x38
 80033d0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80033d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033d8:	633b      	str	r3, [r7, #48]	; 0x30
 80033da:	2300      	movs	r3, #0
 80033dc:	637b      	str	r3, [r7, #52]	; 0x34
 80033de:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80033e2:	4622      	mov	r2, r4
 80033e4:	462b      	mov	r3, r5
 80033e6:	f04f 0000 	mov.w	r0, #0
 80033ea:	f04f 0100 	mov.w	r1, #0
 80033ee:	0159      	lsls	r1, r3, #5
 80033f0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80033f4:	0150      	lsls	r0, r2, #5
 80033f6:	4602      	mov	r2, r0
 80033f8:	460b      	mov	r3, r1
 80033fa:	4621      	mov	r1, r4
 80033fc:	1a51      	subs	r1, r2, r1
 80033fe:	6139      	str	r1, [r7, #16]
 8003400:	4629      	mov	r1, r5
 8003402:	eb63 0301 	sbc.w	r3, r3, r1
 8003406:	617b      	str	r3, [r7, #20]
 8003408:	f04f 0200 	mov.w	r2, #0
 800340c:	f04f 0300 	mov.w	r3, #0
 8003410:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003414:	4659      	mov	r1, fp
 8003416:	018b      	lsls	r3, r1, #6
 8003418:	4651      	mov	r1, sl
 800341a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800341e:	4651      	mov	r1, sl
 8003420:	018a      	lsls	r2, r1, #6
 8003422:	4651      	mov	r1, sl
 8003424:	ebb2 0801 	subs.w	r8, r2, r1
 8003428:	4659      	mov	r1, fp
 800342a:	eb63 0901 	sbc.w	r9, r3, r1
 800342e:	f04f 0200 	mov.w	r2, #0
 8003432:	f04f 0300 	mov.w	r3, #0
 8003436:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800343a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800343e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003442:	4690      	mov	r8, r2
 8003444:	4699      	mov	r9, r3
 8003446:	4623      	mov	r3, r4
 8003448:	eb18 0303 	adds.w	r3, r8, r3
 800344c:	60bb      	str	r3, [r7, #8]
 800344e:	462b      	mov	r3, r5
 8003450:	eb49 0303 	adc.w	r3, r9, r3
 8003454:	60fb      	str	r3, [r7, #12]
 8003456:	f04f 0200 	mov.w	r2, #0
 800345a:	f04f 0300 	mov.w	r3, #0
 800345e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003462:	4629      	mov	r1, r5
 8003464:	024b      	lsls	r3, r1, #9
 8003466:	4621      	mov	r1, r4
 8003468:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800346c:	4621      	mov	r1, r4
 800346e:	024a      	lsls	r2, r1, #9
 8003470:	4610      	mov	r0, r2
 8003472:	4619      	mov	r1, r3
 8003474:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003476:	2200      	movs	r2, #0
 8003478:	62bb      	str	r3, [r7, #40]	; 0x28
 800347a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800347c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003480:	f7fc ff1e 	bl	80002c0 <__aeabi_uldivmod>
 8003484:	4602      	mov	r2, r0
 8003486:	460b      	mov	r3, r1
 8003488:	4613      	mov	r3, r2
 800348a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800348c:	e058      	b.n	8003540 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800348e:	4b38      	ldr	r3, [pc, #224]	; (8003570 <HAL_RCC_GetSysClockFreq+0x200>)
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	099b      	lsrs	r3, r3, #6
 8003494:	2200      	movs	r2, #0
 8003496:	4618      	mov	r0, r3
 8003498:	4611      	mov	r1, r2
 800349a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800349e:	623b      	str	r3, [r7, #32]
 80034a0:	2300      	movs	r3, #0
 80034a2:	627b      	str	r3, [r7, #36]	; 0x24
 80034a4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80034a8:	4642      	mov	r2, r8
 80034aa:	464b      	mov	r3, r9
 80034ac:	f04f 0000 	mov.w	r0, #0
 80034b0:	f04f 0100 	mov.w	r1, #0
 80034b4:	0159      	lsls	r1, r3, #5
 80034b6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80034ba:	0150      	lsls	r0, r2, #5
 80034bc:	4602      	mov	r2, r0
 80034be:	460b      	mov	r3, r1
 80034c0:	4641      	mov	r1, r8
 80034c2:	ebb2 0a01 	subs.w	sl, r2, r1
 80034c6:	4649      	mov	r1, r9
 80034c8:	eb63 0b01 	sbc.w	fp, r3, r1
 80034cc:	f04f 0200 	mov.w	r2, #0
 80034d0:	f04f 0300 	mov.w	r3, #0
 80034d4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80034d8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80034dc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80034e0:	ebb2 040a 	subs.w	r4, r2, sl
 80034e4:	eb63 050b 	sbc.w	r5, r3, fp
 80034e8:	f04f 0200 	mov.w	r2, #0
 80034ec:	f04f 0300 	mov.w	r3, #0
 80034f0:	00eb      	lsls	r3, r5, #3
 80034f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80034f6:	00e2      	lsls	r2, r4, #3
 80034f8:	4614      	mov	r4, r2
 80034fa:	461d      	mov	r5, r3
 80034fc:	4643      	mov	r3, r8
 80034fe:	18e3      	adds	r3, r4, r3
 8003500:	603b      	str	r3, [r7, #0]
 8003502:	464b      	mov	r3, r9
 8003504:	eb45 0303 	adc.w	r3, r5, r3
 8003508:	607b      	str	r3, [r7, #4]
 800350a:	f04f 0200 	mov.w	r2, #0
 800350e:	f04f 0300 	mov.w	r3, #0
 8003512:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003516:	4629      	mov	r1, r5
 8003518:	028b      	lsls	r3, r1, #10
 800351a:	4621      	mov	r1, r4
 800351c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003520:	4621      	mov	r1, r4
 8003522:	028a      	lsls	r2, r1, #10
 8003524:	4610      	mov	r0, r2
 8003526:	4619      	mov	r1, r3
 8003528:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800352a:	2200      	movs	r2, #0
 800352c:	61bb      	str	r3, [r7, #24]
 800352e:	61fa      	str	r2, [r7, #28]
 8003530:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003534:	f7fc fec4 	bl	80002c0 <__aeabi_uldivmod>
 8003538:	4602      	mov	r2, r0
 800353a:	460b      	mov	r3, r1
 800353c:	4613      	mov	r3, r2
 800353e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003540:	4b0b      	ldr	r3, [pc, #44]	; (8003570 <HAL_RCC_GetSysClockFreq+0x200>)
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	0c1b      	lsrs	r3, r3, #16
 8003546:	f003 0303 	and.w	r3, r3, #3
 800354a:	3301      	adds	r3, #1
 800354c:	005b      	lsls	r3, r3, #1
 800354e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003550:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003552:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003554:	fbb2 f3f3 	udiv	r3, r2, r3
 8003558:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800355a:	e002      	b.n	8003562 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800355c:	4b05      	ldr	r3, [pc, #20]	; (8003574 <HAL_RCC_GetSysClockFreq+0x204>)
 800355e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003560:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003562:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003564:	4618      	mov	r0, r3
 8003566:	3750      	adds	r7, #80	; 0x50
 8003568:	46bd      	mov	sp, r7
 800356a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800356e:	bf00      	nop
 8003570:	40023800 	.word	0x40023800
 8003574:	00f42400 	.word	0x00f42400
 8003578:	007a1200 	.word	0x007a1200

0800357c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800357c:	b480      	push	{r7}
 800357e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003580:	4b03      	ldr	r3, [pc, #12]	; (8003590 <HAL_RCC_GetHCLKFreq+0x14>)
 8003582:	681b      	ldr	r3, [r3, #0]
}
 8003584:	4618      	mov	r0, r3
 8003586:	46bd      	mov	sp, r7
 8003588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358c:	4770      	bx	lr
 800358e:	bf00      	nop
 8003590:	20000000 	.word	0x20000000

08003594 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003598:	f7ff fff0 	bl	800357c <HAL_RCC_GetHCLKFreq>
 800359c:	4602      	mov	r2, r0
 800359e:	4b05      	ldr	r3, [pc, #20]	; (80035b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80035a0:	689b      	ldr	r3, [r3, #8]
 80035a2:	0a9b      	lsrs	r3, r3, #10
 80035a4:	f003 0307 	and.w	r3, r3, #7
 80035a8:	4903      	ldr	r1, [pc, #12]	; (80035b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80035aa:	5ccb      	ldrb	r3, [r1, r3]
 80035ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035b0:	4618      	mov	r0, r3
 80035b2:	bd80      	pop	{r7, pc}
 80035b4:	40023800 	.word	0x40023800
 80035b8:	0801cdf0 	.word	0x0801cdf0

080035bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80035c0:	f7ff ffdc 	bl	800357c <HAL_RCC_GetHCLKFreq>
 80035c4:	4602      	mov	r2, r0
 80035c6:	4b05      	ldr	r3, [pc, #20]	; (80035dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80035c8:	689b      	ldr	r3, [r3, #8]
 80035ca:	0b5b      	lsrs	r3, r3, #13
 80035cc:	f003 0307 	and.w	r3, r3, #7
 80035d0:	4903      	ldr	r1, [pc, #12]	; (80035e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80035d2:	5ccb      	ldrb	r3, [r1, r3]
 80035d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035d8:	4618      	mov	r0, r3
 80035da:	bd80      	pop	{r7, pc}
 80035dc:	40023800 	.word	0x40023800
 80035e0:	0801cdf0 	.word	0x0801cdf0

080035e4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b083      	sub	sp, #12
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
 80035ec:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	220f      	movs	r2, #15
 80035f2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80035f4:	4b12      	ldr	r3, [pc, #72]	; (8003640 <HAL_RCC_GetClockConfig+0x5c>)
 80035f6:	689b      	ldr	r3, [r3, #8]
 80035f8:	f003 0203 	and.w	r2, r3, #3
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003600:	4b0f      	ldr	r3, [pc, #60]	; (8003640 <HAL_RCC_GetClockConfig+0x5c>)
 8003602:	689b      	ldr	r3, [r3, #8]
 8003604:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800360c:	4b0c      	ldr	r3, [pc, #48]	; (8003640 <HAL_RCC_GetClockConfig+0x5c>)
 800360e:	689b      	ldr	r3, [r3, #8]
 8003610:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003618:	4b09      	ldr	r3, [pc, #36]	; (8003640 <HAL_RCC_GetClockConfig+0x5c>)
 800361a:	689b      	ldr	r3, [r3, #8]
 800361c:	08db      	lsrs	r3, r3, #3
 800361e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003626:	4b07      	ldr	r3, [pc, #28]	; (8003644 <HAL_RCC_GetClockConfig+0x60>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f003 020f 	and.w	r2, r3, #15
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	601a      	str	r2, [r3, #0]
}
 8003632:	bf00      	nop
 8003634:	370c      	adds	r7, #12
 8003636:	46bd      	mov	sp, r7
 8003638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363c:	4770      	bx	lr
 800363e:	bf00      	nop
 8003640:	40023800 	.word	0x40023800
 8003644:	40023c00 	.word	0x40023c00

08003648 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b082      	sub	sp, #8
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d101      	bne.n	800365a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003656:	2301      	movs	r3, #1
 8003658:	e041      	b.n	80036de <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003660:	b2db      	uxtb	r3, r3
 8003662:	2b00      	cmp	r3, #0
 8003664:	d106      	bne.n	8003674 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2200      	movs	r2, #0
 800366a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800366e:	6878      	ldr	r0, [r7, #4]
 8003670:	f000 f839 	bl	80036e6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2202      	movs	r2, #2
 8003678:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681a      	ldr	r2, [r3, #0]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	3304      	adds	r3, #4
 8003684:	4619      	mov	r1, r3
 8003686:	4610      	mov	r0, r2
 8003688:	f000 f9d8 	bl	8003a3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2201      	movs	r2, #1
 8003690:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2201      	movs	r2, #1
 8003698:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2201      	movs	r2, #1
 80036a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2201      	movs	r2, #1
 80036a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2201      	movs	r2, #1
 80036b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2201      	movs	r2, #1
 80036b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2201      	movs	r2, #1
 80036c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2201      	movs	r2, #1
 80036c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2201      	movs	r2, #1
 80036d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2201      	movs	r2, #1
 80036d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80036dc:	2300      	movs	r3, #0
}
 80036de:	4618      	mov	r0, r3
 80036e0:	3708      	adds	r7, #8
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bd80      	pop	{r7, pc}

080036e6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80036e6:	b480      	push	{r7}
 80036e8:	b083      	sub	sp, #12
 80036ea:	af00      	add	r7, sp, #0
 80036ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80036ee:	bf00      	nop
 80036f0:	370c      	adds	r7, #12
 80036f2:	46bd      	mov	sp, r7
 80036f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f8:	4770      	bx	lr
	...

080036fc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80036fc:	b480      	push	{r7}
 80036fe:	b085      	sub	sp, #20
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800370a:	b2db      	uxtb	r3, r3
 800370c:	2b01      	cmp	r3, #1
 800370e:	d001      	beq.n	8003714 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003710:	2301      	movs	r3, #1
 8003712:	e04e      	b.n	80037b2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2202      	movs	r2, #2
 8003718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	68da      	ldr	r2, [r3, #12]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f042 0201 	orr.w	r2, r2, #1
 800372a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a23      	ldr	r2, [pc, #140]	; (80037c0 <HAL_TIM_Base_Start_IT+0xc4>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d022      	beq.n	800377c <HAL_TIM_Base_Start_IT+0x80>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800373e:	d01d      	beq.n	800377c <HAL_TIM_Base_Start_IT+0x80>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a1f      	ldr	r2, [pc, #124]	; (80037c4 <HAL_TIM_Base_Start_IT+0xc8>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d018      	beq.n	800377c <HAL_TIM_Base_Start_IT+0x80>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a1e      	ldr	r2, [pc, #120]	; (80037c8 <HAL_TIM_Base_Start_IT+0xcc>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d013      	beq.n	800377c <HAL_TIM_Base_Start_IT+0x80>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a1c      	ldr	r2, [pc, #112]	; (80037cc <HAL_TIM_Base_Start_IT+0xd0>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d00e      	beq.n	800377c <HAL_TIM_Base_Start_IT+0x80>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4a1b      	ldr	r2, [pc, #108]	; (80037d0 <HAL_TIM_Base_Start_IT+0xd4>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d009      	beq.n	800377c <HAL_TIM_Base_Start_IT+0x80>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a19      	ldr	r2, [pc, #100]	; (80037d4 <HAL_TIM_Base_Start_IT+0xd8>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d004      	beq.n	800377c <HAL_TIM_Base_Start_IT+0x80>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a18      	ldr	r2, [pc, #96]	; (80037d8 <HAL_TIM_Base_Start_IT+0xdc>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d111      	bne.n	80037a0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	689b      	ldr	r3, [r3, #8]
 8003782:	f003 0307 	and.w	r3, r3, #7
 8003786:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	2b06      	cmp	r3, #6
 800378c:	d010      	beq.n	80037b0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	681a      	ldr	r2, [r3, #0]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f042 0201 	orr.w	r2, r2, #1
 800379c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800379e:	e007      	b.n	80037b0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	681a      	ldr	r2, [r3, #0]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f042 0201 	orr.w	r2, r2, #1
 80037ae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80037b0:	2300      	movs	r3, #0
}
 80037b2:	4618      	mov	r0, r3
 80037b4:	3714      	adds	r7, #20
 80037b6:	46bd      	mov	sp, r7
 80037b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037bc:	4770      	bx	lr
 80037be:	bf00      	nop
 80037c0:	40010000 	.word	0x40010000
 80037c4:	40000400 	.word	0x40000400
 80037c8:	40000800 	.word	0x40000800
 80037cc:	40000c00 	.word	0x40000c00
 80037d0:	40010400 	.word	0x40010400
 80037d4:	40014000 	.word	0x40014000
 80037d8:	40001800 	.word	0x40001800

080037dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b082      	sub	sp, #8
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	691b      	ldr	r3, [r3, #16]
 80037ea:	f003 0302 	and.w	r3, r3, #2
 80037ee:	2b02      	cmp	r3, #2
 80037f0:	d122      	bne.n	8003838 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	68db      	ldr	r3, [r3, #12]
 80037f8:	f003 0302 	and.w	r3, r3, #2
 80037fc:	2b02      	cmp	r3, #2
 80037fe:	d11b      	bne.n	8003838 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f06f 0202 	mvn.w	r2, #2
 8003808:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2201      	movs	r2, #1
 800380e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	699b      	ldr	r3, [r3, #24]
 8003816:	f003 0303 	and.w	r3, r3, #3
 800381a:	2b00      	cmp	r3, #0
 800381c:	d003      	beq.n	8003826 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800381e:	6878      	ldr	r0, [r7, #4]
 8003820:	f000 f8ee 	bl	8003a00 <HAL_TIM_IC_CaptureCallback>
 8003824:	e005      	b.n	8003832 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003826:	6878      	ldr	r0, [r7, #4]
 8003828:	f000 f8e0 	bl	80039ec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800382c:	6878      	ldr	r0, [r7, #4]
 800382e:	f000 f8f1 	bl	8003a14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2200      	movs	r2, #0
 8003836:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	691b      	ldr	r3, [r3, #16]
 800383e:	f003 0304 	and.w	r3, r3, #4
 8003842:	2b04      	cmp	r3, #4
 8003844:	d122      	bne.n	800388c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	68db      	ldr	r3, [r3, #12]
 800384c:	f003 0304 	and.w	r3, r3, #4
 8003850:	2b04      	cmp	r3, #4
 8003852:	d11b      	bne.n	800388c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f06f 0204 	mvn.w	r2, #4
 800385c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2202      	movs	r2, #2
 8003862:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	699b      	ldr	r3, [r3, #24]
 800386a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800386e:	2b00      	cmp	r3, #0
 8003870:	d003      	beq.n	800387a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003872:	6878      	ldr	r0, [r7, #4]
 8003874:	f000 f8c4 	bl	8003a00 <HAL_TIM_IC_CaptureCallback>
 8003878:	e005      	b.n	8003886 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800387a:	6878      	ldr	r0, [r7, #4]
 800387c:	f000 f8b6 	bl	80039ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003880:	6878      	ldr	r0, [r7, #4]
 8003882:	f000 f8c7 	bl	8003a14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2200      	movs	r2, #0
 800388a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	691b      	ldr	r3, [r3, #16]
 8003892:	f003 0308 	and.w	r3, r3, #8
 8003896:	2b08      	cmp	r3, #8
 8003898:	d122      	bne.n	80038e0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	68db      	ldr	r3, [r3, #12]
 80038a0:	f003 0308 	and.w	r3, r3, #8
 80038a4:	2b08      	cmp	r3, #8
 80038a6:	d11b      	bne.n	80038e0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f06f 0208 	mvn.w	r2, #8
 80038b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2204      	movs	r2, #4
 80038b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	69db      	ldr	r3, [r3, #28]
 80038be:	f003 0303 	and.w	r3, r3, #3
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d003      	beq.n	80038ce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038c6:	6878      	ldr	r0, [r7, #4]
 80038c8:	f000 f89a 	bl	8003a00 <HAL_TIM_IC_CaptureCallback>
 80038cc:	e005      	b.n	80038da <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038ce:	6878      	ldr	r0, [r7, #4]
 80038d0:	f000 f88c 	bl	80039ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038d4:	6878      	ldr	r0, [r7, #4]
 80038d6:	f000 f89d 	bl	8003a14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2200      	movs	r2, #0
 80038de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	691b      	ldr	r3, [r3, #16]
 80038e6:	f003 0310 	and.w	r3, r3, #16
 80038ea:	2b10      	cmp	r3, #16
 80038ec:	d122      	bne.n	8003934 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	68db      	ldr	r3, [r3, #12]
 80038f4:	f003 0310 	and.w	r3, r3, #16
 80038f8:	2b10      	cmp	r3, #16
 80038fa:	d11b      	bne.n	8003934 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f06f 0210 	mvn.w	r2, #16
 8003904:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2208      	movs	r2, #8
 800390a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	69db      	ldr	r3, [r3, #28]
 8003912:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003916:	2b00      	cmp	r3, #0
 8003918:	d003      	beq.n	8003922 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800391a:	6878      	ldr	r0, [r7, #4]
 800391c:	f000 f870 	bl	8003a00 <HAL_TIM_IC_CaptureCallback>
 8003920:	e005      	b.n	800392e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003922:	6878      	ldr	r0, [r7, #4]
 8003924:	f000 f862 	bl	80039ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003928:	6878      	ldr	r0, [r7, #4]
 800392a:	f000 f873 	bl	8003a14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2200      	movs	r2, #0
 8003932:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	691b      	ldr	r3, [r3, #16]
 800393a:	f003 0301 	and.w	r3, r3, #1
 800393e:	2b01      	cmp	r3, #1
 8003940:	d10e      	bne.n	8003960 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	68db      	ldr	r3, [r3, #12]
 8003948:	f003 0301 	and.w	r3, r3, #1
 800394c:	2b01      	cmp	r3, #1
 800394e:	d107      	bne.n	8003960 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f06f 0201 	mvn.w	r2, #1
 8003958:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800395a:	6878      	ldr	r0, [r7, #4]
 800395c:	f7fc ffe0 	bl	8000920 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	691b      	ldr	r3, [r3, #16]
 8003966:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800396a:	2b80      	cmp	r3, #128	; 0x80
 800396c:	d10e      	bne.n	800398c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	68db      	ldr	r3, [r3, #12]
 8003974:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003978:	2b80      	cmp	r3, #128	; 0x80
 800397a:	d107      	bne.n	800398c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003984:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003986:	6878      	ldr	r0, [r7, #4]
 8003988:	f000 f902 	bl	8003b90 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	691b      	ldr	r3, [r3, #16]
 8003992:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003996:	2b40      	cmp	r3, #64	; 0x40
 8003998:	d10e      	bne.n	80039b8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	68db      	ldr	r3, [r3, #12]
 80039a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039a4:	2b40      	cmp	r3, #64	; 0x40
 80039a6:	d107      	bne.n	80039b8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80039b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80039b2:	6878      	ldr	r0, [r7, #4]
 80039b4:	f000 f838 	bl	8003a28 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	691b      	ldr	r3, [r3, #16]
 80039be:	f003 0320 	and.w	r3, r3, #32
 80039c2:	2b20      	cmp	r3, #32
 80039c4:	d10e      	bne.n	80039e4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	68db      	ldr	r3, [r3, #12]
 80039cc:	f003 0320 	and.w	r3, r3, #32
 80039d0:	2b20      	cmp	r3, #32
 80039d2:	d107      	bne.n	80039e4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f06f 0220 	mvn.w	r2, #32
 80039dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80039de:	6878      	ldr	r0, [r7, #4]
 80039e0:	f000 f8cc 	bl	8003b7c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80039e4:	bf00      	nop
 80039e6:	3708      	adds	r7, #8
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bd80      	pop	{r7, pc}

080039ec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80039ec:	b480      	push	{r7}
 80039ee:	b083      	sub	sp, #12
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80039f4:	bf00      	nop
 80039f6:	370c      	adds	r7, #12
 80039f8:	46bd      	mov	sp, r7
 80039fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fe:	4770      	bx	lr

08003a00 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003a00:	b480      	push	{r7}
 8003a02:	b083      	sub	sp, #12
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003a08:	bf00      	nop
 8003a0a:	370c      	adds	r7, #12
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a12:	4770      	bx	lr

08003a14 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003a14:	b480      	push	{r7}
 8003a16:	b083      	sub	sp, #12
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003a1c:	bf00      	nop
 8003a1e:	370c      	adds	r7, #12
 8003a20:	46bd      	mov	sp, r7
 8003a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a26:	4770      	bx	lr

08003a28 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	b083      	sub	sp, #12
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003a30:	bf00      	nop
 8003a32:	370c      	adds	r7, #12
 8003a34:	46bd      	mov	sp, r7
 8003a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3a:	4770      	bx	lr

08003a3c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	b085      	sub	sp, #20
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
 8003a44:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	4a40      	ldr	r2, [pc, #256]	; (8003b50 <TIM_Base_SetConfig+0x114>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d013      	beq.n	8003a7c <TIM_Base_SetConfig+0x40>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a5a:	d00f      	beq.n	8003a7c <TIM_Base_SetConfig+0x40>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	4a3d      	ldr	r2, [pc, #244]	; (8003b54 <TIM_Base_SetConfig+0x118>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d00b      	beq.n	8003a7c <TIM_Base_SetConfig+0x40>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	4a3c      	ldr	r2, [pc, #240]	; (8003b58 <TIM_Base_SetConfig+0x11c>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d007      	beq.n	8003a7c <TIM_Base_SetConfig+0x40>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	4a3b      	ldr	r2, [pc, #236]	; (8003b5c <TIM_Base_SetConfig+0x120>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d003      	beq.n	8003a7c <TIM_Base_SetConfig+0x40>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	4a3a      	ldr	r2, [pc, #232]	; (8003b60 <TIM_Base_SetConfig+0x124>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d108      	bne.n	8003a8e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a82:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	68fa      	ldr	r2, [r7, #12]
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	4a2f      	ldr	r2, [pc, #188]	; (8003b50 <TIM_Base_SetConfig+0x114>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d02b      	beq.n	8003aee <TIM_Base_SetConfig+0xb2>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a9c:	d027      	beq.n	8003aee <TIM_Base_SetConfig+0xb2>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	4a2c      	ldr	r2, [pc, #176]	; (8003b54 <TIM_Base_SetConfig+0x118>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d023      	beq.n	8003aee <TIM_Base_SetConfig+0xb2>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	4a2b      	ldr	r2, [pc, #172]	; (8003b58 <TIM_Base_SetConfig+0x11c>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d01f      	beq.n	8003aee <TIM_Base_SetConfig+0xb2>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	4a2a      	ldr	r2, [pc, #168]	; (8003b5c <TIM_Base_SetConfig+0x120>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d01b      	beq.n	8003aee <TIM_Base_SetConfig+0xb2>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	4a29      	ldr	r2, [pc, #164]	; (8003b60 <TIM_Base_SetConfig+0x124>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d017      	beq.n	8003aee <TIM_Base_SetConfig+0xb2>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	4a28      	ldr	r2, [pc, #160]	; (8003b64 <TIM_Base_SetConfig+0x128>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d013      	beq.n	8003aee <TIM_Base_SetConfig+0xb2>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	4a27      	ldr	r2, [pc, #156]	; (8003b68 <TIM_Base_SetConfig+0x12c>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d00f      	beq.n	8003aee <TIM_Base_SetConfig+0xb2>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	4a26      	ldr	r2, [pc, #152]	; (8003b6c <TIM_Base_SetConfig+0x130>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d00b      	beq.n	8003aee <TIM_Base_SetConfig+0xb2>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	4a25      	ldr	r2, [pc, #148]	; (8003b70 <TIM_Base_SetConfig+0x134>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d007      	beq.n	8003aee <TIM_Base_SetConfig+0xb2>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	4a24      	ldr	r2, [pc, #144]	; (8003b74 <TIM_Base_SetConfig+0x138>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d003      	beq.n	8003aee <TIM_Base_SetConfig+0xb2>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	4a23      	ldr	r2, [pc, #140]	; (8003b78 <TIM_Base_SetConfig+0x13c>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d108      	bne.n	8003b00 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003af4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	68db      	ldr	r3, [r3, #12]
 8003afa:	68fa      	ldr	r2, [r7, #12]
 8003afc:	4313      	orrs	r3, r2
 8003afe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	695b      	ldr	r3, [r3, #20]
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	68fa      	ldr	r2, [r7, #12]
 8003b12:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	689a      	ldr	r2, [r3, #8]
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	681a      	ldr	r2, [r3, #0]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	4a0a      	ldr	r2, [pc, #40]	; (8003b50 <TIM_Base_SetConfig+0x114>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d003      	beq.n	8003b34 <TIM_Base_SetConfig+0xf8>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	4a0c      	ldr	r2, [pc, #48]	; (8003b60 <TIM_Base_SetConfig+0x124>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d103      	bne.n	8003b3c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	691a      	ldr	r2, [r3, #16]
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2201      	movs	r2, #1
 8003b40:	615a      	str	r2, [r3, #20]
}
 8003b42:	bf00      	nop
 8003b44:	3714      	adds	r7, #20
 8003b46:	46bd      	mov	sp, r7
 8003b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4c:	4770      	bx	lr
 8003b4e:	bf00      	nop
 8003b50:	40010000 	.word	0x40010000
 8003b54:	40000400 	.word	0x40000400
 8003b58:	40000800 	.word	0x40000800
 8003b5c:	40000c00 	.word	0x40000c00
 8003b60:	40010400 	.word	0x40010400
 8003b64:	40014000 	.word	0x40014000
 8003b68:	40014400 	.word	0x40014400
 8003b6c:	40014800 	.word	0x40014800
 8003b70:	40001800 	.word	0x40001800
 8003b74:	40001c00 	.word	0x40001c00
 8003b78:	40002000 	.word	0x40002000

08003b7c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	b083      	sub	sp, #12
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003b84:	bf00      	nop
 8003b86:	370c      	adds	r7, #12
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8e:	4770      	bx	lr

08003b90 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003b90:	b480      	push	{r7}
 8003b92:	b083      	sub	sp, #12
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003b98:	bf00      	nop
 8003b9a:	370c      	adds	r7, #12
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba2:	4770      	bx	lr

08003ba4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b082      	sub	sp, #8
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d101      	bne.n	8003bb6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	e03f      	b.n	8003c36 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bbc:	b2db      	uxtb	r3, r3
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d106      	bne.n	8003bd0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003bca:	6878      	ldr	r0, [r7, #4]
 8003bcc:	f7fc feec 	bl	80009a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2224      	movs	r2, #36	; 0x24
 8003bd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	68da      	ldr	r2, [r3, #12]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003be6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003be8:	6878      	ldr	r0, [r7, #4]
 8003bea:	f000 f829 	bl	8003c40 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	691a      	ldr	r2, [r3, #16]
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003bfc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	695a      	ldr	r2, [r3, #20]
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003c0c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	68da      	ldr	r2, [r3, #12]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003c1c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2200      	movs	r2, #0
 8003c22:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2220      	movs	r2, #32
 8003c28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2220      	movs	r2, #32
 8003c30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003c34:	2300      	movs	r3, #0
}
 8003c36:	4618      	mov	r0, r3
 8003c38:	3708      	adds	r7, #8
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bd80      	pop	{r7, pc}
	...

08003c40 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c44:	b0c0      	sub	sp, #256	; 0x100
 8003c46:	af00      	add	r7, sp, #0
 8003c48:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	691b      	ldr	r3, [r3, #16]
 8003c54:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003c58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c5c:	68d9      	ldr	r1, [r3, #12]
 8003c5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c62:	681a      	ldr	r2, [r3, #0]
 8003c64:	ea40 0301 	orr.w	r3, r0, r1
 8003c68:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003c6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c6e:	689a      	ldr	r2, [r3, #8]
 8003c70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c74:	691b      	ldr	r3, [r3, #16]
 8003c76:	431a      	orrs	r2, r3
 8003c78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c7c:	695b      	ldr	r3, [r3, #20]
 8003c7e:	431a      	orrs	r2, r3
 8003c80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c84:	69db      	ldr	r3, [r3, #28]
 8003c86:	4313      	orrs	r3, r2
 8003c88:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003c8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	68db      	ldr	r3, [r3, #12]
 8003c94:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003c98:	f021 010c 	bic.w	r1, r1, #12
 8003c9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ca0:	681a      	ldr	r2, [r3, #0]
 8003ca2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003ca6:	430b      	orrs	r3, r1
 8003ca8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003caa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	695b      	ldr	r3, [r3, #20]
 8003cb2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003cb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cba:	6999      	ldr	r1, [r3, #24]
 8003cbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cc0:	681a      	ldr	r2, [r3, #0]
 8003cc2:	ea40 0301 	orr.w	r3, r0, r1
 8003cc6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003cc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ccc:	681a      	ldr	r2, [r3, #0]
 8003cce:	4b8f      	ldr	r3, [pc, #572]	; (8003f0c <UART_SetConfig+0x2cc>)
 8003cd0:	429a      	cmp	r2, r3
 8003cd2:	d005      	beq.n	8003ce0 <UART_SetConfig+0xa0>
 8003cd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cd8:	681a      	ldr	r2, [r3, #0]
 8003cda:	4b8d      	ldr	r3, [pc, #564]	; (8003f10 <UART_SetConfig+0x2d0>)
 8003cdc:	429a      	cmp	r2, r3
 8003cde:	d104      	bne.n	8003cea <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003ce0:	f7ff fc6c 	bl	80035bc <HAL_RCC_GetPCLK2Freq>
 8003ce4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003ce8:	e003      	b.n	8003cf2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003cea:	f7ff fc53 	bl	8003594 <HAL_RCC_GetPCLK1Freq>
 8003cee:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003cf2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cf6:	69db      	ldr	r3, [r3, #28]
 8003cf8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003cfc:	f040 810c 	bne.w	8003f18 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003d00:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d04:	2200      	movs	r2, #0
 8003d06:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003d0a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003d0e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003d12:	4622      	mov	r2, r4
 8003d14:	462b      	mov	r3, r5
 8003d16:	1891      	adds	r1, r2, r2
 8003d18:	65b9      	str	r1, [r7, #88]	; 0x58
 8003d1a:	415b      	adcs	r3, r3
 8003d1c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003d1e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003d22:	4621      	mov	r1, r4
 8003d24:	eb12 0801 	adds.w	r8, r2, r1
 8003d28:	4629      	mov	r1, r5
 8003d2a:	eb43 0901 	adc.w	r9, r3, r1
 8003d2e:	f04f 0200 	mov.w	r2, #0
 8003d32:	f04f 0300 	mov.w	r3, #0
 8003d36:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003d3a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003d3e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003d42:	4690      	mov	r8, r2
 8003d44:	4699      	mov	r9, r3
 8003d46:	4623      	mov	r3, r4
 8003d48:	eb18 0303 	adds.w	r3, r8, r3
 8003d4c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003d50:	462b      	mov	r3, r5
 8003d52:	eb49 0303 	adc.w	r3, r9, r3
 8003d56:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003d5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	2200      	movs	r2, #0
 8003d62:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003d66:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003d6a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003d6e:	460b      	mov	r3, r1
 8003d70:	18db      	adds	r3, r3, r3
 8003d72:	653b      	str	r3, [r7, #80]	; 0x50
 8003d74:	4613      	mov	r3, r2
 8003d76:	eb42 0303 	adc.w	r3, r2, r3
 8003d7a:	657b      	str	r3, [r7, #84]	; 0x54
 8003d7c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003d80:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003d84:	f7fc fa9c 	bl	80002c0 <__aeabi_uldivmod>
 8003d88:	4602      	mov	r2, r0
 8003d8a:	460b      	mov	r3, r1
 8003d8c:	4b61      	ldr	r3, [pc, #388]	; (8003f14 <UART_SetConfig+0x2d4>)
 8003d8e:	fba3 2302 	umull	r2, r3, r3, r2
 8003d92:	095b      	lsrs	r3, r3, #5
 8003d94:	011c      	lsls	r4, r3, #4
 8003d96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003da0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003da4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003da8:	4642      	mov	r2, r8
 8003daa:	464b      	mov	r3, r9
 8003dac:	1891      	adds	r1, r2, r2
 8003dae:	64b9      	str	r1, [r7, #72]	; 0x48
 8003db0:	415b      	adcs	r3, r3
 8003db2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003db4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003db8:	4641      	mov	r1, r8
 8003dba:	eb12 0a01 	adds.w	sl, r2, r1
 8003dbe:	4649      	mov	r1, r9
 8003dc0:	eb43 0b01 	adc.w	fp, r3, r1
 8003dc4:	f04f 0200 	mov.w	r2, #0
 8003dc8:	f04f 0300 	mov.w	r3, #0
 8003dcc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003dd0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003dd4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003dd8:	4692      	mov	sl, r2
 8003dda:	469b      	mov	fp, r3
 8003ddc:	4643      	mov	r3, r8
 8003dde:	eb1a 0303 	adds.w	r3, sl, r3
 8003de2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003de6:	464b      	mov	r3, r9
 8003de8:	eb4b 0303 	adc.w	r3, fp, r3
 8003dec:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003df0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	2200      	movs	r2, #0
 8003df8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003dfc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003e00:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003e04:	460b      	mov	r3, r1
 8003e06:	18db      	adds	r3, r3, r3
 8003e08:	643b      	str	r3, [r7, #64]	; 0x40
 8003e0a:	4613      	mov	r3, r2
 8003e0c:	eb42 0303 	adc.w	r3, r2, r3
 8003e10:	647b      	str	r3, [r7, #68]	; 0x44
 8003e12:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003e16:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003e1a:	f7fc fa51 	bl	80002c0 <__aeabi_uldivmod>
 8003e1e:	4602      	mov	r2, r0
 8003e20:	460b      	mov	r3, r1
 8003e22:	4611      	mov	r1, r2
 8003e24:	4b3b      	ldr	r3, [pc, #236]	; (8003f14 <UART_SetConfig+0x2d4>)
 8003e26:	fba3 2301 	umull	r2, r3, r3, r1
 8003e2a:	095b      	lsrs	r3, r3, #5
 8003e2c:	2264      	movs	r2, #100	; 0x64
 8003e2e:	fb02 f303 	mul.w	r3, r2, r3
 8003e32:	1acb      	subs	r3, r1, r3
 8003e34:	00db      	lsls	r3, r3, #3
 8003e36:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003e3a:	4b36      	ldr	r3, [pc, #216]	; (8003f14 <UART_SetConfig+0x2d4>)
 8003e3c:	fba3 2302 	umull	r2, r3, r3, r2
 8003e40:	095b      	lsrs	r3, r3, #5
 8003e42:	005b      	lsls	r3, r3, #1
 8003e44:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003e48:	441c      	add	r4, r3
 8003e4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e4e:	2200      	movs	r2, #0
 8003e50:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003e54:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003e58:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003e5c:	4642      	mov	r2, r8
 8003e5e:	464b      	mov	r3, r9
 8003e60:	1891      	adds	r1, r2, r2
 8003e62:	63b9      	str	r1, [r7, #56]	; 0x38
 8003e64:	415b      	adcs	r3, r3
 8003e66:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e68:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003e6c:	4641      	mov	r1, r8
 8003e6e:	1851      	adds	r1, r2, r1
 8003e70:	6339      	str	r1, [r7, #48]	; 0x30
 8003e72:	4649      	mov	r1, r9
 8003e74:	414b      	adcs	r3, r1
 8003e76:	637b      	str	r3, [r7, #52]	; 0x34
 8003e78:	f04f 0200 	mov.w	r2, #0
 8003e7c:	f04f 0300 	mov.w	r3, #0
 8003e80:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003e84:	4659      	mov	r1, fp
 8003e86:	00cb      	lsls	r3, r1, #3
 8003e88:	4651      	mov	r1, sl
 8003e8a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003e8e:	4651      	mov	r1, sl
 8003e90:	00ca      	lsls	r2, r1, #3
 8003e92:	4610      	mov	r0, r2
 8003e94:	4619      	mov	r1, r3
 8003e96:	4603      	mov	r3, r0
 8003e98:	4642      	mov	r2, r8
 8003e9a:	189b      	adds	r3, r3, r2
 8003e9c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003ea0:	464b      	mov	r3, r9
 8003ea2:	460a      	mov	r2, r1
 8003ea4:	eb42 0303 	adc.w	r3, r2, r3
 8003ea8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003eac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003eb8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003ebc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003ec0:	460b      	mov	r3, r1
 8003ec2:	18db      	adds	r3, r3, r3
 8003ec4:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ec6:	4613      	mov	r3, r2
 8003ec8:	eb42 0303 	adc.w	r3, r2, r3
 8003ecc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ece:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003ed2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003ed6:	f7fc f9f3 	bl	80002c0 <__aeabi_uldivmod>
 8003eda:	4602      	mov	r2, r0
 8003edc:	460b      	mov	r3, r1
 8003ede:	4b0d      	ldr	r3, [pc, #52]	; (8003f14 <UART_SetConfig+0x2d4>)
 8003ee0:	fba3 1302 	umull	r1, r3, r3, r2
 8003ee4:	095b      	lsrs	r3, r3, #5
 8003ee6:	2164      	movs	r1, #100	; 0x64
 8003ee8:	fb01 f303 	mul.w	r3, r1, r3
 8003eec:	1ad3      	subs	r3, r2, r3
 8003eee:	00db      	lsls	r3, r3, #3
 8003ef0:	3332      	adds	r3, #50	; 0x32
 8003ef2:	4a08      	ldr	r2, [pc, #32]	; (8003f14 <UART_SetConfig+0x2d4>)
 8003ef4:	fba2 2303 	umull	r2, r3, r2, r3
 8003ef8:	095b      	lsrs	r3, r3, #5
 8003efa:	f003 0207 	and.w	r2, r3, #7
 8003efe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4422      	add	r2, r4
 8003f06:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003f08:	e105      	b.n	8004116 <UART_SetConfig+0x4d6>
 8003f0a:	bf00      	nop
 8003f0c:	40011000 	.word	0x40011000
 8003f10:	40011400 	.word	0x40011400
 8003f14:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003f18:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003f22:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003f26:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003f2a:	4642      	mov	r2, r8
 8003f2c:	464b      	mov	r3, r9
 8003f2e:	1891      	adds	r1, r2, r2
 8003f30:	6239      	str	r1, [r7, #32]
 8003f32:	415b      	adcs	r3, r3
 8003f34:	627b      	str	r3, [r7, #36]	; 0x24
 8003f36:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003f3a:	4641      	mov	r1, r8
 8003f3c:	1854      	adds	r4, r2, r1
 8003f3e:	4649      	mov	r1, r9
 8003f40:	eb43 0501 	adc.w	r5, r3, r1
 8003f44:	f04f 0200 	mov.w	r2, #0
 8003f48:	f04f 0300 	mov.w	r3, #0
 8003f4c:	00eb      	lsls	r3, r5, #3
 8003f4e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003f52:	00e2      	lsls	r2, r4, #3
 8003f54:	4614      	mov	r4, r2
 8003f56:	461d      	mov	r5, r3
 8003f58:	4643      	mov	r3, r8
 8003f5a:	18e3      	adds	r3, r4, r3
 8003f5c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003f60:	464b      	mov	r3, r9
 8003f62:	eb45 0303 	adc.w	r3, r5, r3
 8003f66:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003f6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	2200      	movs	r2, #0
 8003f72:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003f76:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003f7a:	f04f 0200 	mov.w	r2, #0
 8003f7e:	f04f 0300 	mov.w	r3, #0
 8003f82:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003f86:	4629      	mov	r1, r5
 8003f88:	008b      	lsls	r3, r1, #2
 8003f8a:	4621      	mov	r1, r4
 8003f8c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003f90:	4621      	mov	r1, r4
 8003f92:	008a      	lsls	r2, r1, #2
 8003f94:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003f98:	f7fc f992 	bl	80002c0 <__aeabi_uldivmod>
 8003f9c:	4602      	mov	r2, r0
 8003f9e:	460b      	mov	r3, r1
 8003fa0:	4b60      	ldr	r3, [pc, #384]	; (8004124 <UART_SetConfig+0x4e4>)
 8003fa2:	fba3 2302 	umull	r2, r3, r3, r2
 8003fa6:	095b      	lsrs	r3, r3, #5
 8003fa8:	011c      	lsls	r4, r3, #4
 8003faa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003fae:	2200      	movs	r2, #0
 8003fb0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003fb4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003fb8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003fbc:	4642      	mov	r2, r8
 8003fbe:	464b      	mov	r3, r9
 8003fc0:	1891      	adds	r1, r2, r2
 8003fc2:	61b9      	str	r1, [r7, #24]
 8003fc4:	415b      	adcs	r3, r3
 8003fc6:	61fb      	str	r3, [r7, #28]
 8003fc8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003fcc:	4641      	mov	r1, r8
 8003fce:	1851      	adds	r1, r2, r1
 8003fd0:	6139      	str	r1, [r7, #16]
 8003fd2:	4649      	mov	r1, r9
 8003fd4:	414b      	adcs	r3, r1
 8003fd6:	617b      	str	r3, [r7, #20]
 8003fd8:	f04f 0200 	mov.w	r2, #0
 8003fdc:	f04f 0300 	mov.w	r3, #0
 8003fe0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003fe4:	4659      	mov	r1, fp
 8003fe6:	00cb      	lsls	r3, r1, #3
 8003fe8:	4651      	mov	r1, sl
 8003fea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003fee:	4651      	mov	r1, sl
 8003ff0:	00ca      	lsls	r2, r1, #3
 8003ff2:	4610      	mov	r0, r2
 8003ff4:	4619      	mov	r1, r3
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	4642      	mov	r2, r8
 8003ffa:	189b      	adds	r3, r3, r2
 8003ffc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004000:	464b      	mov	r3, r9
 8004002:	460a      	mov	r2, r1
 8004004:	eb42 0303 	adc.w	r3, r2, r3
 8004008:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800400c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	2200      	movs	r2, #0
 8004014:	67bb      	str	r3, [r7, #120]	; 0x78
 8004016:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004018:	f04f 0200 	mov.w	r2, #0
 800401c:	f04f 0300 	mov.w	r3, #0
 8004020:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004024:	4649      	mov	r1, r9
 8004026:	008b      	lsls	r3, r1, #2
 8004028:	4641      	mov	r1, r8
 800402a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800402e:	4641      	mov	r1, r8
 8004030:	008a      	lsls	r2, r1, #2
 8004032:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004036:	f7fc f943 	bl	80002c0 <__aeabi_uldivmod>
 800403a:	4602      	mov	r2, r0
 800403c:	460b      	mov	r3, r1
 800403e:	4b39      	ldr	r3, [pc, #228]	; (8004124 <UART_SetConfig+0x4e4>)
 8004040:	fba3 1302 	umull	r1, r3, r3, r2
 8004044:	095b      	lsrs	r3, r3, #5
 8004046:	2164      	movs	r1, #100	; 0x64
 8004048:	fb01 f303 	mul.w	r3, r1, r3
 800404c:	1ad3      	subs	r3, r2, r3
 800404e:	011b      	lsls	r3, r3, #4
 8004050:	3332      	adds	r3, #50	; 0x32
 8004052:	4a34      	ldr	r2, [pc, #208]	; (8004124 <UART_SetConfig+0x4e4>)
 8004054:	fba2 2303 	umull	r2, r3, r2, r3
 8004058:	095b      	lsrs	r3, r3, #5
 800405a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800405e:	441c      	add	r4, r3
 8004060:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004064:	2200      	movs	r2, #0
 8004066:	673b      	str	r3, [r7, #112]	; 0x70
 8004068:	677a      	str	r2, [r7, #116]	; 0x74
 800406a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800406e:	4642      	mov	r2, r8
 8004070:	464b      	mov	r3, r9
 8004072:	1891      	adds	r1, r2, r2
 8004074:	60b9      	str	r1, [r7, #8]
 8004076:	415b      	adcs	r3, r3
 8004078:	60fb      	str	r3, [r7, #12]
 800407a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800407e:	4641      	mov	r1, r8
 8004080:	1851      	adds	r1, r2, r1
 8004082:	6039      	str	r1, [r7, #0]
 8004084:	4649      	mov	r1, r9
 8004086:	414b      	adcs	r3, r1
 8004088:	607b      	str	r3, [r7, #4]
 800408a:	f04f 0200 	mov.w	r2, #0
 800408e:	f04f 0300 	mov.w	r3, #0
 8004092:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004096:	4659      	mov	r1, fp
 8004098:	00cb      	lsls	r3, r1, #3
 800409a:	4651      	mov	r1, sl
 800409c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80040a0:	4651      	mov	r1, sl
 80040a2:	00ca      	lsls	r2, r1, #3
 80040a4:	4610      	mov	r0, r2
 80040a6:	4619      	mov	r1, r3
 80040a8:	4603      	mov	r3, r0
 80040aa:	4642      	mov	r2, r8
 80040ac:	189b      	adds	r3, r3, r2
 80040ae:	66bb      	str	r3, [r7, #104]	; 0x68
 80040b0:	464b      	mov	r3, r9
 80040b2:	460a      	mov	r2, r1
 80040b4:	eb42 0303 	adc.w	r3, r2, r3
 80040b8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80040ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	2200      	movs	r2, #0
 80040c2:	663b      	str	r3, [r7, #96]	; 0x60
 80040c4:	667a      	str	r2, [r7, #100]	; 0x64
 80040c6:	f04f 0200 	mov.w	r2, #0
 80040ca:	f04f 0300 	mov.w	r3, #0
 80040ce:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80040d2:	4649      	mov	r1, r9
 80040d4:	008b      	lsls	r3, r1, #2
 80040d6:	4641      	mov	r1, r8
 80040d8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80040dc:	4641      	mov	r1, r8
 80040de:	008a      	lsls	r2, r1, #2
 80040e0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80040e4:	f7fc f8ec 	bl	80002c0 <__aeabi_uldivmod>
 80040e8:	4602      	mov	r2, r0
 80040ea:	460b      	mov	r3, r1
 80040ec:	4b0d      	ldr	r3, [pc, #52]	; (8004124 <UART_SetConfig+0x4e4>)
 80040ee:	fba3 1302 	umull	r1, r3, r3, r2
 80040f2:	095b      	lsrs	r3, r3, #5
 80040f4:	2164      	movs	r1, #100	; 0x64
 80040f6:	fb01 f303 	mul.w	r3, r1, r3
 80040fa:	1ad3      	subs	r3, r2, r3
 80040fc:	011b      	lsls	r3, r3, #4
 80040fe:	3332      	adds	r3, #50	; 0x32
 8004100:	4a08      	ldr	r2, [pc, #32]	; (8004124 <UART_SetConfig+0x4e4>)
 8004102:	fba2 2303 	umull	r2, r3, r2, r3
 8004106:	095b      	lsrs	r3, r3, #5
 8004108:	f003 020f 	and.w	r2, r3, #15
 800410c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	4422      	add	r2, r4
 8004114:	609a      	str	r2, [r3, #8]
}
 8004116:	bf00      	nop
 8004118:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800411c:	46bd      	mov	sp, r7
 800411e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004122:	bf00      	nop
 8004124:	51eb851f 	.word	0x51eb851f

08004128 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8004128:	b5b0      	push	{r4, r5, r7, lr}
 800412a:	b08c      	sub	sp, #48	; 0x30
 800412c:	af04      	add	r7, sp, #16
  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 800412e:	2100      	movs	r1, #0
 8004130:	2000      	movs	r0, #0
 8004132:	f005 ffd9 	bl	800a0e8 <tcpip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 8004136:	4b20      	ldr	r3, [pc, #128]	; (80041b8 <MX_LWIP_Init+0x90>)
 8004138:	2200      	movs	r2, #0
 800413a:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 800413c:	4b1f      	ldr	r3, [pc, #124]	; (80041bc <MX_LWIP_Init+0x94>)
 800413e:	2200      	movs	r2, #0
 8004140:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 8004142:	4b1f      	ldr	r3, [pc, #124]	; (80041c0 <MX_LWIP_Init+0x98>)
 8004144:	2200      	movs	r2, #0
 8004146:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8004148:	4b1e      	ldr	r3, [pc, #120]	; (80041c4 <MX_LWIP_Init+0x9c>)
 800414a:	9302      	str	r3, [sp, #8]
 800414c:	4b1e      	ldr	r3, [pc, #120]	; (80041c8 <MX_LWIP_Init+0xa0>)
 800414e:	9301      	str	r3, [sp, #4]
 8004150:	2300      	movs	r3, #0
 8004152:	9300      	str	r3, [sp, #0]
 8004154:	4b1a      	ldr	r3, [pc, #104]	; (80041c0 <MX_LWIP_Init+0x98>)
 8004156:	4a19      	ldr	r2, [pc, #100]	; (80041bc <MX_LWIP_Init+0x94>)
 8004158:	4917      	ldr	r1, [pc, #92]	; (80041b8 <MX_LWIP_Init+0x90>)
 800415a:	481c      	ldr	r0, [pc, #112]	; (80041cc <MX_LWIP_Init+0xa4>)
 800415c:	f007 fbde 	bl	800b91c <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8004160:	481a      	ldr	r0, [pc, #104]	; (80041cc <MX_LWIP_Init+0xa4>)
 8004162:	f007 fd95 	bl	800bc90 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8004166:	4b19      	ldr	r3, [pc, #100]	; (80041cc <MX_LWIP_Init+0xa4>)
 8004168:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800416c:	089b      	lsrs	r3, r3, #2
 800416e:	f003 0301 	and.w	r3, r3, #1
 8004172:	b2db      	uxtb	r3, r3
 8004174:	2b00      	cmp	r3, #0
 8004176:	d003      	beq.n	8004180 <MX_LWIP_Init+0x58>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8004178:	4814      	ldr	r0, [pc, #80]	; (80041cc <MX_LWIP_Init+0xa4>)
 800417a:	f007 fd99 	bl	800bcb0 <netif_set_up>
 800417e:	e002      	b.n	8004186 <MX_LWIP_Init+0x5e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8004180:	4812      	ldr	r0, [pc, #72]	; (80041cc <MX_LWIP_Init+0xa4>)
 8004182:	f007 fe01 	bl	800bd88 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8004186:	4912      	ldr	r1, [pc, #72]	; (80041d0 <MX_LWIP_Init+0xa8>)
 8004188:	4810      	ldr	r0, [pc, #64]	; (80041cc <MX_LWIP_Init+0xa4>)
 800418a:	f007 fe97 	bl	800bebc <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthLink, ethernet_link_thread, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE *2);
 800418e:	4b11      	ldr	r3, [pc, #68]	; (80041d4 <MX_LWIP_Init+0xac>)
 8004190:	1d3c      	adds	r4, r7, #4
 8004192:	461d      	mov	r5, r3
 8004194:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004196:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004198:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800419c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthLink), &gnetif);
 80041a0:	1d3b      	adds	r3, r7, #4
 80041a2:	490a      	ldr	r1, [pc, #40]	; (80041cc <MX_LWIP_Init+0xa4>)
 80041a4:	4618      	mov	r0, r3
 80041a6:	f000 fd23 	bl	8004bf0 <osThreadCreate>
/* USER CODE END H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 80041aa:	4808      	ldr	r0, [pc, #32]	; (80041cc <MX_LWIP_Init+0xa4>)
 80041ac:	f00f ff52 	bl	8014054 <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 80041b0:	bf00      	nop
 80041b2:	3720      	adds	r7, #32
 80041b4:	46bd      	mov	sp, r7
 80041b6:	bdb0      	pop	{r4, r5, r7, pc}
 80041b8:	20000438 	.word	0x20000438
 80041bc:	2000043c 	.word	0x2000043c
 80041c0:	20000440 	.word	0x20000440
 80041c4:	08009ff9 	.word	0x08009ff9
 80041c8:	08004679 	.word	0x08004679
 80041cc:	20000400 	.word	0x20000400
 80041d0:	080041d9 	.word	0x080041d9
 80041d4:	080192b4 	.word	0x080192b4

080041d8 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 80041d8:	b480      	push	{r7}
 80041da:	b083      	sub	sp, #12
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 80041e0:	bf00      	nop
 80041e2:	370c      	adds	r7, #12
 80041e4:	46bd      	mov	sp, r7
 80041e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ea:	4770      	bx	lr

080041ec <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b082      	sub	sp, #8
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 80041f4:	4b04      	ldr	r3, [pc, #16]	; (8004208 <HAL_ETH_RxCpltCallback+0x1c>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4618      	mov	r0, r3
 80041fa:	f000 fe75 	bl	8004ee8 <osSemaphoreRelease>
}
 80041fe:	bf00      	nop
 8004200:	3708      	adds	r7, #8
 8004202:	46bd      	mov	sp, r7
 8004204:	bd80      	pop	{r7, pc}
 8004206:	bf00      	nop
 8004208:	20004f10 	.word	0x20004f10

0800420c <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b082      	sub	sp, #8
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 8004214:	4b04      	ldr	r3, [pc, #16]	; (8004228 <HAL_ETH_TxCpltCallback+0x1c>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4618      	mov	r0, r3
 800421a:	f000 fe65 	bl	8004ee8 <osSemaphoreRelease>
}
 800421e:	bf00      	nop
 8004220:	3708      	adds	r7, #8
 8004222:	46bd      	mov	sp, r7
 8004224:	bd80      	pop	{r7, pc}
 8004226:	bf00      	nop
 8004228:	20004f14 	.word	0x20004f14

0800422c <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b082      	sub	sp, #8
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 8004234:	6878      	ldr	r0, [r7, #4]
 8004236:	f7fd ff65 	bl	8002104 <HAL_ETH_GetDMAError>
 800423a:	4603      	mov	r3, r0
 800423c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004240:	2b80      	cmp	r3, #128	; 0x80
 8004242:	d104      	bne.n	800424e <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 8004244:	4b04      	ldr	r3, [pc, #16]	; (8004258 <HAL_ETH_ErrorCallback+0x2c>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4618      	mov	r0, r3
 800424a:	f000 fe4d 	bl	8004ee8 <osSemaphoreRelease>
  }
}
 800424e:	bf00      	nop
 8004250:	3708      	adds	r7, #8
 8004252:	46bd      	mov	sp, r7
 8004254:	bd80      	pop	{r7, pc}
 8004256:	bf00      	nop
 8004258:	20004f10 	.word	0x20004f10

0800425c <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800425c:	b5b0      	push	{r4, r5, r7, lr}
 800425e:	b0a8      	sub	sp, #160	; 0xa0
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8004264:	2300      	movs	r3, #0
 8004266:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t duplex, speed = 0;
 800426a:	2300      	movs	r3, #0
 800426c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  int32_t PHYLinkState = 0;
 8004270:	2300      	movs	r3, #0
 8004272:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  ETH_MACConfigTypeDef MACConf = {0};
 8004276:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800427a:	2264      	movs	r2, #100	; 0x64
 800427c:	2100      	movs	r1, #0
 800427e:	4618      	mov	r0, r3
 8004280:	f014 f803 	bl	801828a <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8004284:	4b85      	ldr	r3, [pc, #532]	; (800449c <low_level_init+0x240>)
 8004286:	4a86      	ldr	r2, [pc, #536]	; (80044a0 <low_level_init+0x244>)
 8004288:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800428a:	2300      	movs	r3, #0
 800428c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  MACAddr[1] = 0x80;
 8004290:	2380      	movs	r3, #128	; 0x80
 8004292:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  MACAddr[2] = 0xE1;
 8004296:	23e1      	movs	r3, #225	; 0xe1
 8004298:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  MACAddr[3] = 0xFE;
 800429c:	23fe      	movs	r3, #254	; 0xfe
 800429e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  MACAddr[4] = 0xEC;
 80042a2:	23ec      	movs	r3, #236	; 0xec
 80042a4:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  MACAddr[5] = 0x72;
 80042a8:	2372      	movs	r3, #114	; 0x72
 80042aa:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  heth.Init.MACAddr = &MACAddr[0];
 80042ae:	4a7b      	ldr	r2, [pc, #492]	; (800449c <low_level_init+0x240>)
 80042b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80042b4:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80042b6:	4b79      	ldr	r3, [pc, #484]	; (800449c <low_level_init+0x240>)
 80042b8:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80042bc:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80042be:	4b77      	ldr	r3, [pc, #476]	; (800449c <low_level_init+0x240>)
 80042c0:	4a78      	ldr	r2, [pc, #480]	; (80044a4 <low_level_init+0x248>)
 80042c2:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80042c4:	4b75      	ldr	r3, [pc, #468]	; (800449c <low_level_init+0x240>)
 80042c6:	4a78      	ldr	r2, [pc, #480]	; (80044a8 <low_level_init+0x24c>)
 80042c8:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 80042ca:	4b74      	ldr	r3, [pc, #464]	; (800449c <low_level_init+0x240>)
 80042cc:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80042d0:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 80042d2:	4872      	ldr	r0, [pc, #456]	; (800449c <low_level_init+0x240>)
 80042d4:	f7fd f878 	bl	80013c8 <HAL_ETH_Init>
 80042d8:	4603      	mov	r3, r0
 80042da:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80042de:	2238      	movs	r2, #56	; 0x38
 80042e0:	2100      	movs	r1, #0
 80042e2:	4872      	ldr	r0, [pc, #456]	; (80044ac <low_level_init+0x250>)
 80042e4:	f013 ffd1 	bl	801828a <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80042e8:	4b70      	ldr	r3, [pc, #448]	; (80044ac <low_level_init+0x250>)
 80042ea:	2221      	movs	r2, #33	; 0x21
 80042ec:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80042ee:	4b6f      	ldr	r3, [pc, #444]	; (80044ac <low_level_init+0x250>)
 80042f0:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 80042f4:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80042f6:	4b6d      	ldr	r3, [pc, #436]	; (80044ac <low_level_init+0x250>)
 80042f8:	2200      	movs	r2, #0
 80042fa:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 80042fc:	486c      	ldr	r0, [pc, #432]	; (80044b0 <low_level_init+0x254>)
 80042fe:	f007 f9c7 	bl	800b690 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2206      	movs	r2, #6
 8004306:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800430a:	4b64      	ldr	r3, [pc, #400]	; (800449c <low_level_init+0x240>)
 800430c:	685b      	ldr	r3, [r3, #4]
 800430e:	781a      	ldrb	r2, [r3, #0]
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8004316:	4b61      	ldr	r3, [pc, #388]	; (800449c <low_level_init+0x240>)
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	785a      	ldrb	r2, [r3, #1]
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8004322:	4b5e      	ldr	r3, [pc, #376]	; (800449c <low_level_init+0x240>)
 8004324:	685b      	ldr	r3, [r3, #4]
 8004326:	789a      	ldrb	r2, [r3, #2]
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800432e:	4b5b      	ldr	r3, [pc, #364]	; (800449c <low_level_init+0x240>)
 8004330:	685b      	ldr	r3, [r3, #4]
 8004332:	78da      	ldrb	r2, [r3, #3]
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800433a:	4b58      	ldr	r3, [pc, #352]	; (800449c <low_level_init+0x240>)
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	791a      	ldrb	r2, [r3, #4]
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8004346:	4b55      	ldr	r3, [pc, #340]	; (800449c <low_level_init+0x240>)
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	795a      	ldrb	r2, [r3, #5]
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8004358:	851a      	strh	r2, [r3, #40]	; 0x28

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004360:	f043 030a 	orr.w	r3, r3, #10
 8004364:	b2da      	uxtb	r2, r3
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = xSemaphoreCreateBinary();
 800436c:	2203      	movs	r2, #3
 800436e:	2100      	movs	r1, #0
 8004370:	2001      	movs	r0, #1
 8004372:	f001 f89d 	bl	80054b0 <xQueueGenericCreate>
 8004376:	4603      	mov	r3, r0
 8004378:	4a4e      	ldr	r2, [pc, #312]	; (80044b4 <low_level_init+0x258>)
 800437a:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  TxPktSemaphore = xSemaphoreCreateBinary();
 800437c:	2203      	movs	r2, #3
 800437e:	2100      	movs	r1, #0
 8004380:	2001      	movs	r0, #1
 8004382:	f001 f895 	bl	80054b0 <xQueueGenericCreate>
 8004386:	4603      	mov	r3, r0
 8004388:	4a4b      	ldr	r2, [pc, #300]	; (80044b8 <low_level_init+0x25c>)
 800438a:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 800438c:	4b4b      	ldr	r3, [pc, #300]	; (80044bc <low_level_init+0x260>)
 800438e:	f107 0408 	add.w	r4, r7, #8
 8004392:	461d      	mov	r5, r3
 8004394:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004396:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004398:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800439c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 80043a0:	f107 0308 	add.w	r3, r7, #8
 80043a4:	6879      	ldr	r1, [r7, #4]
 80043a6:	4618      	mov	r0, r3
 80043a8:	f000 fc22 	bl	8004bf0 <osThreadCreate>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 80043ac:	4944      	ldr	r1, [pc, #272]	; (80044c0 <low_level_init+0x264>)
 80043ae:	4845      	ldr	r0, [pc, #276]	; (80044c4 <low_level_init+0x268>)
 80043b0:	f7fc fd61 	bl	8000e76 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 80043b4:	4843      	ldr	r0, [pc, #268]	; (80044c4 <low_level_init+0x268>)
 80043b6:	f7fc fd90 	bl	8000eda <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 80043ba:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d165      	bne.n	800448e <low_level_init+0x232>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 80043c2:	4840      	ldr	r0, [pc, #256]	; (80044c4 <low_level_init+0x268>)
 80043c4:	f7fc fe31 	bl	800102a <LAN8742_GetLinkState>
 80043c8:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 80043cc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80043d0:	2b01      	cmp	r3, #1
 80043d2:	dc06      	bgt.n	80043e2 <low_level_init+0x186>
    {
      netif_set_link_down(netif);
 80043d4:	6878      	ldr	r0, [r7, #4]
 80043d6:	f007 fd41 	bl	800be5c <netif_set_link_down>
      netif_set_down(netif);
 80043da:	6878      	ldr	r0, [r7, #4]
 80043dc:	f007 fcd4 	bl	800bd88 <netif_set_down>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 80043e0:	e057      	b.n	8004492 <low_level_init+0x236>
      switch (PHYLinkState)
 80043e2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80043e6:	3b02      	subs	r3, #2
 80043e8:	2b03      	cmp	r3, #3
 80043ea:	d82b      	bhi.n	8004444 <low_level_init+0x1e8>
 80043ec:	a201      	add	r2, pc, #4	; (adr r2, 80043f4 <low_level_init+0x198>)
 80043ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043f2:	bf00      	nop
 80043f4:	08004405 	.word	0x08004405
 80043f8:	08004417 	.word	0x08004417
 80043fc:	08004427 	.word	0x08004427
 8004400:	08004437 	.word	0x08004437
        duplex = ETH_FULLDUPLEX_MODE;
 8004404:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004408:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_100M;
 800440c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004410:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 8004414:	e01f      	b.n	8004456 <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 8004416:	2300      	movs	r3, #0
 8004418:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_100M;
 800441c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004420:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 8004424:	e017      	b.n	8004456 <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 8004426:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800442a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_10M;
 800442e:	2300      	movs	r3, #0
 8004430:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 8004434:	e00f      	b.n	8004456 <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 8004436:	2300      	movs	r3, #0
 8004438:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_10M;
 800443c:	2300      	movs	r3, #0
 800443e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 8004442:	e008      	b.n	8004456 <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 8004444:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004448:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_100M;
 800444c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004450:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 8004454:	bf00      	nop
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 8004456:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800445a:	4619      	mov	r1, r3
 800445c:	480f      	ldr	r0, [pc, #60]	; (800449c <low_level_init+0x240>)
 800445e:	f7fd fcf7 	bl	8001e50 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 8004462:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004466:	647b      	str	r3, [r7, #68]	; 0x44
    MACConf.Speed = speed;
 8004468:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800446c:	643b      	str	r3, [r7, #64]	; 0x40
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 800446e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004472:	4619      	mov	r1, r3
 8004474:	4809      	ldr	r0, [pc, #36]	; (800449c <low_level_init+0x240>)
 8004476:	f7fd fdd5 	bl	8002024 <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&heth);
 800447a:	4808      	ldr	r0, [pc, #32]	; (800449c <low_level_init+0x240>)
 800447c:	f7fd f881 	bl	8001582 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 8004480:	6878      	ldr	r0, [r7, #4]
 8004482:	f007 fc15 	bl	800bcb0 <netif_set_up>
    netif_set_link_up(netif);
 8004486:	6878      	ldr	r0, [r7, #4]
 8004488:	f007 fcb0 	bl	800bdec <netif_set_link_up>
}
 800448c:	e001      	b.n	8004492 <low_level_init+0x236>
    Error_Handler();
 800448e:	f7fc fa59 	bl	8000944 <Error_Handler>
}
 8004492:	bf00      	nop
 8004494:	37a0      	adds	r7, #160	; 0xa0
 8004496:	46bd      	mov	sp, r7
 8004498:	bdb0      	pop	{r4, r5, r7, pc}
 800449a:	bf00      	nop
 800449c:	20004f18 	.word	0x20004f18
 80044a0:	40028000 	.word	0x40028000
 80044a4:	20004e70 	.word	0x20004e70
 80044a8:	20004dd0 	.word	0x20004dd0
 80044ac:	20004fc8 	.word	0x20004fc8
 80044b0:	0801cdf8 	.word	0x0801cdf8
 80044b4:	20004f10 	.word	0x20004f10
 80044b8:	20004f14 	.word	0x20004f14
 80044bc:	080192d8 	.word	0x080192d8
 80044c0:	2000000c 	.word	0x2000000c
 80044c4:	20005000 	.word	0x20005000

080044c8 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b092      	sub	sp, #72	; 0x48
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
 80044d0:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 80044d2:	2300      	movs	r3, #0
 80044d4:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 80044d6:	2300      	movs	r3, #0
 80044d8:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 80044da:	2300      	movs	r3, #0
 80044dc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 80044e0:	f107 030c 	add.w	r3, r7, #12
 80044e4:	2230      	movs	r2, #48	; 0x30
 80044e6:	2100      	movs	r1, #0
 80044e8:	4618      	mov	r0, r3
 80044ea:	f013 fece 	bl	801828a <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 80044ee:	f107 030c 	add.w	r3, r7, #12
 80044f2:	2230      	movs	r2, #48	; 0x30
 80044f4:	2100      	movs	r1, #0
 80044f6:	4618      	mov	r0, r3
 80044f8:	f013 fec7 	bl	801828a <memset>

  for(q = p; q != NULL; q = q->next)
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	643b      	str	r3, [r7, #64]	; 0x40
 8004500:	e045      	b.n	800458e <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 8004502:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004504:	2b03      	cmp	r3, #3
 8004506:	d902      	bls.n	800450e <low_level_output+0x46>
      return ERR_IF;
 8004508:	f06f 030b 	mvn.w	r3, #11
 800450c:	e065      	b.n	80045da <low_level_output+0x112>

    Txbuffer[i].buffer = q->payload;
 800450e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004510:	6859      	ldr	r1, [r3, #4]
 8004512:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004514:	4613      	mov	r3, r2
 8004516:	005b      	lsls	r3, r3, #1
 8004518:	4413      	add	r3, r2
 800451a:	009b      	lsls	r3, r3, #2
 800451c:	3348      	adds	r3, #72	; 0x48
 800451e:	443b      	add	r3, r7
 8004520:	3b3c      	subs	r3, #60	; 0x3c
 8004522:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8004524:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004526:	895b      	ldrh	r3, [r3, #10]
 8004528:	4619      	mov	r1, r3
 800452a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800452c:	4613      	mov	r3, r2
 800452e:	005b      	lsls	r3, r3, #1
 8004530:	4413      	add	r3, r2
 8004532:	009b      	lsls	r3, r3, #2
 8004534:	3348      	adds	r3, #72	; 0x48
 8004536:	443b      	add	r3, r7
 8004538:	3b38      	subs	r3, #56	; 0x38
 800453a:	6019      	str	r1, [r3, #0]

    if(i>0)
 800453c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800453e:	2b00      	cmp	r3, #0
 8004540:	d011      	beq.n	8004566 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8004542:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004544:	1e5a      	subs	r2, r3, #1
 8004546:	f107 000c 	add.w	r0, r7, #12
 800454a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800454c:	460b      	mov	r3, r1
 800454e:	005b      	lsls	r3, r3, #1
 8004550:	440b      	add	r3, r1
 8004552:	009b      	lsls	r3, r3, #2
 8004554:	18c1      	adds	r1, r0, r3
 8004556:	4613      	mov	r3, r2
 8004558:	005b      	lsls	r3, r3, #1
 800455a:	4413      	add	r3, r2
 800455c:	009b      	lsls	r3, r3, #2
 800455e:	3348      	adds	r3, #72	; 0x48
 8004560:	443b      	add	r3, r7
 8004562:	3b34      	subs	r3, #52	; 0x34
 8004564:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8004566:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d109      	bne.n	8004582 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 800456e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004570:	4613      	mov	r3, r2
 8004572:	005b      	lsls	r3, r3, #1
 8004574:	4413      	add	r3, r2
 8004576:	009b      	lsls	r3, r3, #2
 8004578:	3348      	adds	r3, #72	; 0x48
 800457a:	443b      	add	r3, r7
 800457c:	3b34      	subs	r3, #52	; 0x34
 800457e:	2200      	movs	r2, #0
 8004580:	601a      	str	r2, [r3, #0]
    }

    i++;
 8004582:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004584:	3301      	adds	r3, #1
 8004586:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 8004588:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	643b      	str	r3, [r7, #64]	; 0x40
 800458e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004590:	2b00      	cmp	r3, #0
 8004592:	d1b6      	bne.n	8004502 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	891b      	ldrh	r3, [r3, #8]
 8004598:	461a      	mov	r2, r3
 800459a:	4b12      	ldr	r3, [pc, #72]	; (80045e4 <low_level_output+0x11c>)
 800459c:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800459e:	4a11      	ldr	r2, [pc, #68]	; (80045e4 <low_level_output+0x11c>)
 80045a0:	f107 030c 	add.w	r3, r7, #12
 80045a4:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 80045a6:	4a0f      	ldr	r2, [pc, #60]	; (80045e4 <low_level_output+0x11c>)
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	6353      	str	r3, [r2, #52]	; 0x34

  pbuf_ref(p);
 80045ac:	6838      	ldr	r0, [r7, #0]
 80045ae:	f008 f8d9 	bl	800c764 <pbuf_ref>

  HAL_ETH_Transmit_IT(&heth, &TxConfig);
 80045b2:	490c      	ldr	r1, [pc, #48]	; (80045e4 <low_level_output+0x11c>)
 80045b4:	480c      	ldr	r0, [pc, #48]	; (80045e8 <low_level_output+0x120>)
 80045b6:	f7fd f8f1 	bl	800179c <HAL_ETH_Transmit_IT>
  while(osSemaphoreWait(TxPktSemaphore, TIME_WAITING_FOR_INPUT)!=osOK)
 80045ba:	bf00      	nop
 80045bc:	4b0b      	ldr	r3, [pc, #44]	; (80045ec <low_level_output+0x124>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f04f 31ff 	mov.w	r1, #4294967295
 80045c4:	4618      	mov	r0, r3
 80045c6:	f000 fc41 	bl	8004e4c <osSemaphoreWait>
 80045ca:	4603      	mov	r3, r0
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d1f5      	bne.n	80045bc <low_level_output+0xf4>

  {
  }

  HAL_ETH_ReleaseTxPacket(&heth);
 80045d0:	4805      	ldr	r0, [pc, #20]	; (80045e8 <low_level_output+0x120>)
 80045d2:	f7fd fa77 	bl	8001ac4 <HAL_ETH_ReleaseTxPacket>

  return errval;
 80045d6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 80045da:	4618      	mov	r0, r3
 80045dc:	3748      	adds	r7, #72	; 0x48
 80045de:	46bd      	mov	sp, r7
 80045e0:	bd80      	pop	{r7, pc}
 80045e2:	bf00      	nop
 80045e4:	20004fc8 	.word	0x20004fc8
 80045e8:	20004f18 	.word	0x20004f18
 80045ec:	20004f14 	.word	0x20004f14

080045f0 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b084      	sub	sp, #16
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80045f8:	2300      	movs	r3, #0
 80045fa:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 80045fc:	4b07      	ldr	r3, [pc, #28]	; (800461c <low_level_input+0x2c>)
 80045fe:	781b      	ldrb	r3, [r3, #0]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d105      	bne.n	8004610 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8004604:	f107 030c 	add.w	r3, r7, #12
 8004608:	4619      	mov	r1, r3
 800460a:	4805      	ldr	r0, [pc, #20]	; (8004620 <low_level_input+0x30>)
 800460c:	f7fd f922 	bl	8001854 <HAL_ETH_ReadData>
  }

  return p;
 8004610:	68fb      	ldr	r3, [r7, #12]
}
 8004612:	4618      	mov	r0, r3
 8004614:	3710      	adds	r7, #16
 8004616:	46bd      	mov	sp, r7
 8004618:	bd80      	pop	{r7, pc}
 800461a:	bf00      	nop
 800461c:	20004dcc 	.word	0x20004dcc
 8004620:	20004f18 	.word	0x20004f18

08004624 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
static void ethernetif_input(void const * argument)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b084      	sub	sp, #16
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800462c:	2300      	movs	r3, #0
 800462e:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8004634:	4b0f      	ldr	r3, [pc, #60]	; (8004674 <ethernetif_input+0x50>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f04f 31ff 	mov.w	r1, #4294967295
 800463c:	4618      	mov	r0, r3
 800463e:	f000 fc05 	bl	8004e4c <osSemaphoreWait>
 8004642:	4603      	mov	r3, r0
 8004644:	2b00      	cmp	r3, #0
 8004646:	d1f5      	bne.n	8004634 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 8004648:	68b8      	ldr	r0, [r7, #8]
 800464a:	f7ff ffd1 	bl	80045f0 <low_level_input>
 800464e:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d00a      	beq.n	800466c <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 8004656:	68bb      	ldr	r3, [r7, #8]
 8004658:	691b      	ldr	r3, [r3, #16]
 800465a:	68b9      	ldr	r1, [r7, #8]
 800465c:	68f8      	ldr	r0, [r7, #12]
 800465e:	4798      	blx	r3
 8004660:	4603      	mov	r3, r0
 8004662:	2b00      	cmp	r3, #0
 8004664:	d002      	beq.n	800466c <ethernetif_input+0x48>
          {
            pbuf_free(p);
 8004666:	68f8      	ldr	r0, [r7, #12]
 8004668:	f007 ffd6 	bl	800c618 <pbuf_free>
          }
        }
      } while(p!=NULL);
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d1ea      	bne.n	8004648 <ethernetif_input+0x24>
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8004672:	e7df      	b.n	8004634 <ethernetif_input+0x10>
 8004674:	20004f10 	.word	0x20004f10

08004678 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b082      	sub	sp, #8
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d106      	bne.n	8004694 <ethernetif_init+0x1c>
 8004686:	4b0e      	ldr	r3, [pc, #56]	; (80046c0 <ethernetif_init+0x48>)
 8004688:	f240 12df 	movw	r2, #479	; 0x1df
 800468c:	490d      	ldr	r1, [pc, #52]	; (80046c4 <ethernetif_init+0x4c>)
 800468e:	480e      	ldr	r0, [pc, #56]	; (80046c8 <ethernetif_init+0x50>)
 8004690:	f013 fe98 	bl	80183c4 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2273      	movs	r2, #115	; 0x73
 8004698:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  netif->name[1] = IFNAME1;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2274      	movs	r2, #116	; 0x74
 80046a0:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	4a09      	ldr	r2, [pc, #36]	; (80046cc <ethernetif_init+0x54>)
 80046a8:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	4a08      	ldr	r2, [pc, #32]	; (80046d0 <ethernetif_init+0x58>)
 80046ae:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 80046b0:	6878      	ldr	r0, [r7, #4]
 80046b2:	f7ff fdd3 	bl	800425c <low_level_init>

  return ERR_OK;
 80046b6:	2300      	movs	r3, #0
}
 80046b8:	4618      	mov	r0, r3
 80046ba:	3708      	adds	r7, #8
 80046bc:	46bd      	mov	sp, r7
 80046be:	bd80      	pop	{r7, pc}
 80046c0:	080192f4 	.word	0x080192f4
 80046c4:	08019310 	.word	0x08019310
 80046c8:	08019320 	.word	0x08019320
 80046cc:	08015f21 	.word	0x08015f21
 80046d0:	080044c9 	.word	0x080044c9

080046d4 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b084      	sub	sp, #16
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 80046e0:	68f9      	ldr	r1, [r7, #12]
 80046e2:	4809      	ldr	r0, [pc, #36]	; (8004708 <pbuf_free_custom+0x34>)
 80046e4:	f007 f8c4 	bl	800b870 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 80046e8:	4b08      	ldr	r3, [pc, #32]	; (800470c <pbuf_free_custom+0x38>)
 80046ea:	781b      	ldrb	r3, [r3, #0]
 80046ec:	2b01      	cmp	r3, #1
 80046ee:	d107      	bne.n	8004700 <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 80046f0:	4b06      	ldr	r3, [pc, #24]	; (800470c <pbuf_free_custom+0x38>)
 80046f2:	2200      	movs	r2, #0
 80046f4:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 80046f6:	4b06      	ldr	r3, [pc, #24]	; (8004710 <pbuf_free_custom+0x3c>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4618      	mov	r0, r3
 80046fc:	f000 fbf4 	bl	8004ee8 <osSemaphoreRelease>
  }
}
 8004700:	bf00      	nop
 8004702:	3710      	adds	r7, #16
 8004704:	46bd      	mov	sp, r7
 8004706:	bd80      	pop	{r7, pc}
 8004708:	0801cdf8 	.word	0x0801cdf8
 800470c:	20004dcc 	.word	0x20004dcc
 8004710:	20004f10 	.word	0x20004f10

08004714 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8004714:	b580      	push	{r7, lr}
 8004716:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8004718:	f7fc fd44 	bl	80011a4 <HAL_GetTick>
 800471c:	4603      	mov	r3, r0
}
 800471e:	4618      	mov	r0, r3
 8004720:	bd80      	pop	{r7, pc}
	...

08004724 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b08e      	sub	sp, #56	; 0x38
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800472c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004730:	2200      	movs	r2, #0
 8004732:	601a      	str	r2, [r3, #0]
 8004734:	605a      	str	r2, [r3, #4]
 8004736:	609a      	str	r2, [r3, #8]
 8004738:	60da      	str	r2, [r3, #12]
 800473a:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a59      	ldr	r2, [pc, #356]	; (80048a8 <HAL_ETH_MspInit+0x184>)
 8004742:	4293      	cmp	r3, r2
 8004744:	f040 80ac 	bne.w	80048a0 <HAL_ETH_MspInit+0x17c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8004748:	2300      	movs	r3, #0
 800474a:	623b      	str	r3, [r7, #32]
 800474c:	4b57      	ldr	r3, [pc, #348]	; (80048ac <HAL_ETH_MspInit+0x188>)
 800474e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004750:	4a56      	ldr	r2, [pc, #344]	; (80048ac <HAL_ETH_MspInit+0x188>)
 8004752:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004756:	6313      	str	r3, [r2, #48]	; 0x30
 8004758:	4b54      	ldr	r3, [pc, #336]	; (80048ac <HAL_ETH_MspInit+0x188>)
 800475a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800475c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004760:	623b      	str	r3, [r7, #32]
 8004762:	6a3b      	ldr	r3, [r7, #32]
 8004764:	2300      	movs	r3, #0
 8004766:	61fb      	str	r3, [r7, #28]
 8004768:	4b50      	ldr	r3, [pc, #320]	; (80048ac <HAL_ETH_MspInit+0x188>)
 800476a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800476c:	4a4f      	ldr	r2, [pc, #316]	; (80048ac <HAL_ETH_MspInit+0x188>)
 800476e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004772:	6313      	str	r3, [r2, #48]	; 0x30
 8004774:	4b4d      	ldr	r3, [pc, #308]	; (80048ac <HAL_ETH_MspInit+0x188>)
 8004776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004778:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800477c:	61fb      	str	r3, [r7, #28]
 800477e:	69fb      	ldr	r3, [r7, #28]
 8004780:	2300      	movs	r3, #0
 8004782:	61bb      	str	r3, [r7, #24]
 8004784:	4b49      	ldr	r3, [pc, #292]	; (80048ac <HAL_ETH_MspInit+0x188>)
 8004786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004788:	4a48      	ldr	r2, [pc, #288]	; (80048ac <HAL_ETH_MspInit+0x188>)
 800478a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800478e:	6313      	str	r3, [r2, #48]	; 0x30
 8004790:	4b46      	ldr	r3, [pc, #280]	; (80048ac <HAL_ETH_MspInit+0x188>)
 8004792:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004794:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004798:	61bb      	str	r3, [r7, #24]
 800479a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800479c:	2300      	movs	r3, #0
 800479e:	617b      	str	r3, [r7, #20]
 80047a0:	4b42      	ldr	r3, [pc, #264]	; (80048ac <HAL_ETH_MspInit+0x188>)
 80047a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047a4:	4a41      	ldr	r2, [pc, #260]	; (80048ac <HAL_ETH_MspInit+0x188>)
 80047a6:	f043 0304 	orr.w	r3, r3, #4
 80047aa:	6313      	str	r3, [r2, #48]	; 0x30
 80047ac:	4b3f      	ldr	r3, [pc, #252]	; (80048ac <HAL_ETH_MspInit+0x188>)
 80047ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047b0:	f003 0304 	and.w	r3, r3, #4
 80047b4:	617b      	str	r3, [r7, #20]
 80047b6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80047b8:	2300      	movs	r3, #0
 80047ba:	613b      	str	r3, [r7, #16]
 80047bc:	4b3b      	ldr	r3, [pc, #236]	; (80048ac <HAL_ETH_MspInit+0x188>)
 80047be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047c0:	4a3a      	ldr	r2, [pc, #232]	; (80048ac <HAL_ETH_MspInit+0x188>)
 80047c2:	f043 0301 	orr.w	r3, r3, #1
 80047c6:	6313      	str	r3, [r2, #48]	; 0x30
 80047c8:	4b38      	ldr	r3, [pc, #224]	; (80048ac <HAL_ETH_MspInit+0x188>)
 80047ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047cc:	f003 0301 	and.w	r3, r3, #1
 80047d0:	613b      	str	r3, [r7, #16]
 80047d2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80047d4:	2300      	movs	r3, #0
 80047d6:	60fb      	str	r3, [r7, #12]
 80047d8:	4b34      	ldr	r3, [pc, #208]	; (80048ac <HAL_ETH_MspInit+0x188>)
 80047da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047dc:	4a33      	ldr	r2, [pc, #204]	; (80048ac <HAL_ETH_MspInit+0x188>)
 80047de:	f043 0302 	orr.w	r3, r3, #2
 80047e2:	6313      	str	r3, [r2, #48]	; 0x30
 80047e4:	4b31      	ldr	r3, [pc, #196]	; (80048ac <HAL_ETH_MspInit+0x188>)
 80047e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047e8:	f003 0302 	and.w	r3, r3, #2
 80047ec:	60fb      	str	r3, [r7, #12]
 80047ee:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80047f0:	2300      	movs	r3, #0
 80047f2:	60bb      	str	r3, [r7, #8]
 80047f4:	4b2d      	ldr	r3, [pc, #180]	; (80048ac <HAL_ETH_MspInit+0x188>)
 80047f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047f8:	4a2c      	ldr	r2, [pc, #176]	; (80048ac <HAL_ETH_MspInit+0x188>)
 80047fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80047fe:	6313      	str	r3, [r2, #48]	; 0x30
 8004800:	4b2a      	ldr	r3, [pc, #168]	; (80048ac <HAL_ETH_MspInit+0x188>)
 8004802:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004804:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004808:	60bb      	str	r3, [r7, #8]
 800480a:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800480c:	2332      	movs	r3, #50	; 0x32
 800480e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004810:	2302      	movs	r3, #2
 8004812:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004814:	2300      	movs	r3, #0
 8004816:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004818:	2303      	movs	r3, #3
 800481a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800481c:	230b      	movs	r3, #11
 800481e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004820:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004824:	4619      	mov	r1, r3
 8004826:	4822      	ldr	r0, [pc, #136]	; (80048b0 <HAL_ETH_MspInit+0x18c>)
 8004828:	f7fe f87e 	bl	8002928 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800482c:	2386      	movs	r3, #134	; 0x86
 800482e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004830:	2302      	movs	r3, #2
 8004832:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004834:	2300      	movs	r3, #0
 8004836:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004838:	2303      	movs	r3, #3
 800483a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800483c:	230b      	movs	r3, #11
 800483e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004840:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004844:	4619      	mov	r1, r3
 8004846:	481b      	ldr	r0, [pc, #108]	; (80048b4 <HAL_ETH_MspInit+0x190>)
 8004848:	f7fe f86e 	bl	8002928 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800484c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004850:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004852:	2302      	movs	r3, #2
 8004854:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004856:	2300      	movs	r3, #0
 8004858:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800485a:	2303      	movs	r3, #3
 800485c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800485e:	230b      	movs	r3, #11
 8004860:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8004862:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004866:	4619      	mov	r1, r3
 8004868:	4813      	ldr	r0, [pc, #76]	; (80048b8 <HAL_ETH_MspInit+0x194>)
 800486a:	f7fe f85d 	bl	8002928 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800486e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8004872:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004874:	2302      	movs	r3, #2
 8004876:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004878:	2300      	movs	r3, #0
 800487a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800487c:	2303      	movs	r3, #3
 800487e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004880:	230b      	movs	r3, #11
 8004882:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004884:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004888:	4619      	mov	r1, r3
 800488a:	480c      	ldr	r0, [pc, #48]	; (80048bc <HAL_ETH_MspInit+0x198>)
 800488c:	f7fe f84c 	bl	8002928 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8004890:	2200      	movs	r2, #0
 8004892:	2105      	movs	r1, #5
 8004894:	203d      	movs	r0, #61	; 0x3d
 8004896:	f7fc fd6d 	bl	8001374 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800489a:	203d      	movs	r0, #61	; 0x3d
 800489c:	f7fc fd86 	bl	80013ac <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80048a0:	bf00      	nop
 80048a2:	3738      	adds	r7, #56	; 0x38
 80048a4:	46bd      	mov	sp, r7
 80048a6:	bd80      	pop	{r7, pc}
 80048a8:	40028000 	.word	0x40028000
 80048ac:	40023800 	.word	0x40023800
 80048b0:	40020800 	.word	0x40020800
 80048b4:	40020000 	.word	0x40020000
 80048b8:	40020400 	.word	0x40020400
 80048bc:	40021800 	.word	0x40021800

080048c0 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 80048c4:	4802      	ldr	r0, [pc, #8]	; (80048d0 <ETH_PHY_IO_Init+0x10>)
 80048c6:	f7fd fbc7 	bl	8002058 <HAL_ETH_SetMDIOClockRange>

  return 0;
 80048ca:	2300      	movs	r3, #0
}
 80048cc:	4618      	mov	r0, r3
 80048ce:	bd80      	pop	{r7, pc}
 80048d0:	20004f18 	.word	0x20004f18

080048d4 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 80048d4:	b480      	push	{r7}
 80048d6:	af00      	add	r7, sp, #0
  return 0;
 80048d8:	2300      	movs	r3, #0
}
 80048da:	4618      	mov	r0, r3
 80048dc:	46bd      	mov	sp, r7
 80048de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e2:	4770      	bx	lr

080048e4 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b084      	sub	sp, #16
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	60f8      	str	r0, [r7, #12]
 80048ec:	60b9      	str	r1, [r7, #8]
 80048ee:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	68ba      	ldr	r2, [r7, #8]
 80048f4:	68f9      	ldr	r1, [r7, #12]
 80048f6:	4807      	ldr	r0, [pc, #28]	; (8004914 <ETH_PHY_IO_ReadReg+0x30>)
 80048f8:	f7fd fa16 	bl	8001d28 <HAL_ETH_ReadPHYRegister>
 80048fc:	4603      	mov	r3, r0
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d002      	beq.n	8004908 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8004902:	f04f 33ff 	mov.w	r3, #4294967295
 8004906:	e000      	b.n	800490a <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8004908:	2300      	movs	r3, #0
}
 800490a:	4618      	mov	r0, r3
 800490c:	3710      	adds	r7, #16
 800490e:	46bd      	mov	sp, r7
 8004910:	bd80      	pop	{r7, pc}
 8004912:	bf00      	nop
 8004914:	20004f18 	.word	0x20004f18

08004918 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b084      	sub	sp, #16
 800491c:	af00      	add	r7, sp, #0
 800491e:	60f8      	str	r0, [r7, #12]
 8004920:	60b9      	str	r1, [r7, #8]
 8004922:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	68ba      	ldr	r2, [r7, #8]
 8004928:	68f9      	ldr	r1, [r7, #12]
 800492a:	4807      	ldr	r0, [pc, #28]	; (8004948 <ETH_PHY_IO_WriteReg+0x30>)
 800492c:	f7fd fa47 	bl	8001dbe <HAL_ETH_WritePHYRegister>
 8004930:	4603      	mov	r3, r0
 8004932:	2b00      	cmp	r3, #0
 8004934:	d002      	beq.n	800493c <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 8004936:	f04f 33ff 	mov.w	r3, #4294967295
 800493a:	e000      	b.n	800493e <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 800493c:	2300      	movs	r3, #0
}
 800493e:	4618      	mov	r0, r3
 8004940:	3710      	adds	r7, #16
 8004942:	46bd      	mov	sp, r7
 8004944:	bd80      	pop	{r7, pc}
 8004946:	bf00      	nop
 8004948:	20004f18 	.word	0x20004f18

0800494c <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8004950:	f7fc fc28 	bl	80011a4 <HAL_GetTick>
 8004954:	4603      	mov	r3, r0
}
 8004956:	4618      	mov	r0, r3
 8004958:	bd80      	pop	{r7, pc}
	...

0800495c <ethernet_link_thread>:
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */

void ethernet_link_thread(void const * argument)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b0a0      	sub	sp, #128	; 0x80
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8004964:	f107 0308 	add.w	r3, r7, #8
 8004968:	2264      	movs	r2, #100	; 0x64
 800496a:	2100      	movs	r1, #0
 800496c:	4618      	mov	r0, r3
 800496e:	f013 fc8c 	bl	801828a <memset>
  int32_t PHYLinkState = 0;
 8004972:	2300      	movs	r3, #0
 8004974:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8004976:	2300      	movs	r3, #0
 8004978:	67fb      	str	r3, [r7, #124]	; 0x7c
 800497a:	2300      	movs	r3, #0
 800497c:	67bb      	str	r3, [r7, #120]	; 0x78
 800497e:	2300      	movs	r3, #0
 8004980:	677b      	str	r3, [r7, #116]	; 0x74

  struct netif *netif = (struct netif *) argument;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	66fb      	str	r3, [r7, #108]	; 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8004986:	483a      	ldr	r0, [pc, #232]	; (8004a70 <ethernet_link_thread+0x114>)
 8004988:	f7fc fb4f 	bl	800102a <LAN8742_GetLinkState>
 800498c:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 800498e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004990:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004994:	089b      	lsrs	r3, r3, #2
 8004996:	f003 0301 	and.w	r3, r3, #1
 800499a:	b2db      	uxtb	r3, r3
 800499c:	2b00      	cmp	r3, #0
 800499e:	d00c      	beq.n	80049ba <ethernet_link_thread+0x5e>
 80049a0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80049a2:	2b01      	cmp	r3, #1
 80049a4:	dc09      	bgt.n	80049ba <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 80049a6:	4833      	ldr	r0, [pc, #204]	; (8004a74 <ethernet_link_thread+0x118>)
 80049a8:	f7fc fe79 	bl	800169e <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 80049ac:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80049ae:	f007 f9eb 	bl	800bd88 <netif_set_down>
    netif_set_link_down(netif);
 80049b2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80049b4:	f007 fa52 	bl	800be5c <netif_set_link_down>
 80049b8:	e055      	b.n	8004a66 <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 80049ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049bc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80049c0:	f003 0304 	and.w	r3, r3, #4
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d14e      	bne.n	8004a66 <ethernet_link_thread+0x10a>
 80049c8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80049ca:	2b01      	cmp	r3, #1
 80049cc:	dd4b      	ble.n	8004a66 <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
 80049ce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80049d0:	3b02      	subs	r3, #2
 80049d2:	2b03      	cmp	r3, #3
 80049d4:	d82a      	bhi.n	8004a2c <ethernet_link_thread+0xd0>
 80049d6:	a201      	add	r2, pc, #4	; (adr r2, 80049dc <ethernet_link_thread+0x80>)
 80049d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049dc:	080049ed 	.word	0x080049ed
 80049e0:	080049ff 	.word	0x080049ff
 80049e4:	08004a0f 	.word	0x08004a0f
 80049e8:	08004a1f 	.word	0x08004a1f
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 80049ec:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80049f0:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 80049f2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80049f6:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80049f8:	2301      	movs	r3, #1
 80049fa:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80049fc:	e017      	b.n	8004a2e <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 80049fe:	2300      	movs	r3, #0
 8004a00:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8004a02:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004a06:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8004a08:	2301      	movs	r3, #1
 8004a0a:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8004a0c:	e00f      	b.n	8004a2e <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8004a0e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004a12:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8004a14:	2300      	movs	r3, #0
 8004a16:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8004a18:	2301      	movs	r3, #1
 8004a1a:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8004a1c:	e007      	b.n	8004a2e <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8004a1e:	2300      	movs	r3, #0
 8004a20:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8004a22:	2300      	movs	r3, #0
 8004a24:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8004a26:	2301      	movs	r3, #1
 8004a28:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8004a2a:	e000      	b.n	8004a2e <ethernet_link_thread+0xd2>
    default:
      break;
 8004a2c:	bf00      	nop
    }

    if(linkchanged)
 8004a2e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d018      	beq.n	8004a66 <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8004a34:	f107 0308 	add.w	r3, r7, #8
 8004a38:	4619      	mov	r1, r3
 8004a3a:	480e      	ldr	r0, [pc, #56]	; (8004a74 <ethernet_link_thread+0x118>)
 8004a3c:	f7fd fa08 	bl	8001e50 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8004a40:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a42:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 8004a44:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004a46:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8004a48:	f107 0308 	add.w	r3, r7, #8
 8004a4c:	4619      	mov	r1, r3
 8004a4e:	4809      	ldr	r0, [pc, #36]	; (8004a74 <ethernet_link_thread+0x118>)
 8004a50:	f7fd fae8 	bl	8002024 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 8004a54:	4807      	ldr	r0, [pc, #28]	; (8004a74 <ethernet_link_thread+0x118>)
 8004a56:	f7fc fd35 	bl	80014c4 <HAL_ETH_Start>
      netif_set_up(netif);
 8004a5a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004a5c:	f007 f928 	bl	800bcb0 <netif_set_up>
      netif_set_link_up(netif);
 8004a60:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004a62:	f007 f9c3 	bl	800bdec <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 8004a66:	2064      	movs	r0, #100	; 0x64
 8004a68:	f000 f90e 	bl	8004c88 <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8004a6c:	e78b      	b.n	8004986 <ethernet_link_thread+0x2a>
 8004a6e:	bf00      	nop
 8004a70:	20005000 	.word	0x20005000
 8004a74:	20004f18 	.word	0x20004f18

08004a78 <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b086      	sub	sp, #24
 8004a7c:	af02      	add	r7, sp, #8
 8004a7e:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8004a80:	4812      	ldr	r0, [pc, #72]	; (8004acc <HAL_ETH_RxAllocateCallback+0x54>)
 8004a82:	f006 fe81 	bl	800b788 <memp_malloc_pool>
 8004a86:	60f8      	str	r0, [r7, #12]
  if (p)
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d014      	beq.n	8004ab8 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	f103 0220 	add.w	r2, r3, #32
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	4a0d      	ldr	r2, [pc, #52]	; (8004ad0 <HAL_ETH_RxAllocateCallback+0x58>)
 8004a9c:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8004aa6:	9201      	str	r2, [sp, #4]
 8004aa8:	9300      	str	r3, [sp, #0]
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	2241      	movs	r2, #65	; 0x41
 8004aae:	2100      	movs	r1, #0
 8004ab0:	2000      	movs	r0, #0
 8004ab2:	f007 fbf7 	bl	800c2a4 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8004ab6:	e005      	b.n	8004ac4 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8004ab8:	4b06      	ldr	r3, [pc, #24]	; (8004ad4 <HAL_ETH_RxAllocateCallback+0x5c>)
 8004aba:	2201      	movs	r2, #1
 8004abc:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	601a      	str	r2, [r3, #0]
}
 8004ac4:	bf00      	nop
 8004ac6:	3710      	adds	r7, #16
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	bd80      	pop	{r7, pc}
 8004acc:	0801cdf8 	.word	0x0801cdf8
 8004ad0:	080046d5 	.word	0x080046d5
 8004ad4:	20004dcc 	.word	0x20004dcc

08004ad8 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8004ad8:	b480      	push	{r7}
 8004ada:	b089      	sub	sp, #36	; 0x24
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	60f8      	str	r0, [r7, #12]
 8004ae0:	60b9      	str	r1, [r7, #8]
 8004ae2:	607a      	str	r2, [r7, #4]
 8004ae4:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 8004aea:	68bb      	ldr	r3, [r7, #8]
 8004aec:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8004aee:	2300      	movs	r3, #0
 8004af0:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	3b20      	subs	r3, #32
 8004af6:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 8004af8:	69fb      	ldr	r3, [r7, #28]
 8004afa:	2200      	movs	r2, #0
 8004afc:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 8004afe:	69fb      	ldr	r3, [r7, #28]
 8004b00:	2200      	movs	r2, #0
 8004b02:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8004b04:	69fb      	ldr	r3, [r7, #28]
 8004b06:	887a      	ldrh	r2, [r7, #2]
 8004b08:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 8004b0a:	69bb      	ldr	r3, [r7, #24]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d103      	bne.n	8004b1a <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 8004b12:	69bb      	ldr	r3, [r7, #24]
 8004b14:	69fa      	ldr	r2, [r7, #28]
 8004b16:	601a      	str	r2, [r3, #0]
 8004b18:	e003      	b.n	8004b22 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 8004b1a:	697b      	ldr	r3, [r7, #20]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	69fa      	ldr	r2, [r7, #28]
 8004b20:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 8004b22:	697b      	ldr	r3, [r7, #20]
 8004b24:	69fa      	ldr	r2, [r7, #28]
 8004b26:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8004b28:	69bb      	ldr	r3, [r7, #24]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	61fb      	str	r3, [r7, #28]
 8004b2e:	e009      	b.n	8004b44 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8004b30:	69fb      	ldr	r3, [r7, #28]
 8004b32:	891a      	ldrh	r2, [r3, #8]
 8004b34:	887b      	ldrh	r3, [r7, #2]
 8004b36:	4413      	add	r3, r2
 8004b38:	b29a      	uxth	r2, r3
 8004b3a:	69fb      	ldr	r3, [r7, #28]
 8004b3c:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8004b3e:	69fb      	ldr	r3, [r7, #28]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	61fb      	str	r3, [r7, #28]
 8004b44:	69fb      	ldr	r3, [r7, #28]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d1f2      	bne.n	8004b30 <HAL_ETH_RxLinkCallback+0x58>
  }

/* USER CODE END HAL ETH RxLinkCallback */
}
 8004b4a:	bf00      	nop
 8004b4c:	bf00      	nop
 8004b4e:	3724      	adds	r7, #36	; 0x24
 8004b50:	46bd      	mov	sp, r7
 8004b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b56:	4770      	bx	lr

08004b58 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b082      	sub	sp, #8
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 8004b60:	6878      	ldr	r0, [r7, #4]
 8004b62:	f007 fd59 	bl	800c618 <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 8004b66:	bf00      	nop
 8004b68:	3708      	adds	r7, #8
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	bd80      	pop	{r7, pc}

08004b6e <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004b6e:	b480      	push	{r7}
 8004b70:	b085      	sub	sp, #20
 8004b72:	af00      	add	r7, sp, #0
 8004b74:	4603      	mov	r3, r0
 8004b76:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004b78:	2300      	movs	r3, #0
 8004b7a:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004b7c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004b80:	2b84      	cmp	r3, #132	; 0x84
 8004b82:	d005      	beq.n	8004b90 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8004b84:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	4413      	add	r3, r2
 8004b8c:	3303      	adds	r3, #3
 8004b8e:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004b90:	68fb      	ldr	r3, [r7, #12]
}
 8004b92:	4618      	mov	r0, r3
 8004b94:	3714      	adds	r7, #20
 8004b96:	46bd      	mov	sp, r7
 8004b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9c:	4770      	bx	lr

08004b9e <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8004b9e:	b480      	push	{r7}
 8004ba0:	b083      	sub	sp, #12
 8004ba2:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004ba4:	f3ef 8305 	mrs	r3, IPSR
 8004ba8:	607b      	str	r3, [r7, #4]
  return(result);
 8004baa:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	bf14      	ite	ne
 8004bb0:	2301      	movne	r3, #1
 8004bb2:	2300      	moveq	r3, #0
 8004bb4:	b2db      	uxtb	r3, r3
}
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	370c      	adds	r7, #12
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc0:	4770      	bx	lr

08004bc2 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004bc2:	b580      	push	{r7, lr}
 8004bc4:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004bc6:	f001 fd3b 	bl	8006640 <vTaskStartScheduler>
  
  return osOK;
 8004bca:	2300      	movs	r3, #0
}
 8004bcc:	4618      	mov	r0, r3
 8004bce:	bd80      	pop	{r7, pc}

08004bd0 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8004bd4:	f7ff ffe3 	bl	8004b9e <inHandlerMode>
 8004bd8:	4603      	mov	r3, r0
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d003      	beq.n	8004be6 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8004bde:	f001 fe53 	bl	8006888 <xTaskGetTickCountFromISR>
 8004be2:	4603      	mov	r3, r0
 8004be4:	e002      	b.n	8004bec <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8004be6:	f001 fe3f 	bl	8006868 <xTaskGetTickCount>
 8004bea:	4603      	mov	r3, r0
  }
}
 8004bec:	4618      	mov	r0, r3
 8004bee:	bd80      	pop	{r7, pc}

08004bf0 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004bf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004bf2:	b089      	sub	sp, #36	; 0x24
 8004bf4:	af04      	add	r7, sp, #16
 8004bf6:	6078      	str	r0, [r7, #4]
 8004bf8:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	695b      	ldr	r3, [r3, #20]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d020      	beq.n	8004c44 <osThreadCreate+0x54>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	699b      	ldr	r3, [r3, #24]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d01c      	beq.n	8004c44 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	685c      	ldr	r4, [r3, #4]
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681d      	ldr	r5, [r3, #0]
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	691e      	ldr	r6, [r3, #16]
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	f7ff ffa6 	bl	8004b6e <makeFreeRtosPriority>
 8004c22:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	695b      	ldr	r3, [r3, #20]
 8004c28:	687a      	ldr	r2, [r7, #4]
 8004c2a:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004c2c:	9202      	str	r2, [sp, #8]
 8004c2e:	9301      	str	r3, [sp, #4]
 8004c30:	9100      	str	r1, [sp, #0]
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	4632      	mov	r2, r6
 8004c36:	4629      	mov	r1, r5
 8004c38:	4620      	mov	r0, r4
 8004c3a:	f001 fb23 	bl	8006284 <xTaskCreateStatic>
 8004c3e:	4603      	mov	r3, r0
 8004c40:	60fb      	str	r3, [r7, #12]
 8004c42:	e01c      	b.n	8004c7e <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	685c      	ldr	r4, [r3, #4]
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004c50:	b29e      	uxth	r6, r3
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004c58:	4618      	mov	r0, r3
 8004c5a:	f7ff ff88 	bl	8004b6e <makeFreeRtosPriority>
 8004c5e:	4602      	mov	r2, r0
 8004c60:	f107 030c 	add.w	r3, r7, #12
 8004c64:	9301      	str	r3, [sp, #4]
 8004c66:	9200      	str	r2, [sp, #0]
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	4632      	mov	r2, r6
 8004c6c:	4629      	mov	r1, r5
 8004c6e:	4620      	mov	r0, r4
 8004c70:	f001 fb65 	bl	800633e <xTaskCreate>
 8004c74:	4603      	mov	r3, r0
 8004c76:	2b01      	cmp	r3, #1
 8004c78:	d001      	beq.n	8004c7e <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	e000      	b.n	8004c80 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
}
 8004c80:	4618      	mov	r0, r3
 8004c82:	3714      	adds	r7, #20
 8004c84:	46bd      	mov	sp, r7
 8004c86:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004c88 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b084      	sub	sp, #16
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d001      	beq.n	8004c9e <osDelay+0x16>
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	e000      	b.n	8004ca0 <osDelay+0x18>
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	f001 fc99 	bl	80065d8 <vTaskDelay>
  
  return osOK;
 8004ca6:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8004ca8:	4618      	mov	r0, r3
 8004caa:	3710      	adds	r7, #16
 8004cac:	46bd      	mov	sp, r7
 8004cae:	bd80      	pop	{r7, pc}

08004cb0 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b082      	sub	sp, #8
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	685b      	ldr	r3, [r3, #4]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d007      	beq.n	8004cd0 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	685b      	ldr	r3, [r3, #4]
 8004cc4:	4619      	mov	r1, r3
 8004cc6:	2001      	movs	r0, #1
 8004cc8:	f000 fc7d 	bl	80055c6 <xQueueCreateMutexStatic>
 8004ccc:	4603      	mov	r3, r0
 8004cce:	e003      	b.n	8004cd8 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8004cd0:	2001      	movs	r0, #1
 8004cd2:	f000 fc60 	bl	8005596 <xQueueCreateMutex>
 8004cd6:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8004cd8:	4618      	mov	r0, r3
 8004cda:	3708      	adds	r7, #8
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	bd80      	pop	{r7, pc}

08004ce0 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b084      	sub	sp, #16
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
 8004ce8:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8004cea:	2300      	movs	r3, #0
 8004cec:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d101      	bne.n	8004cf8 <osMutexWait+0x18>
    return osErrorParameter;
 8004cf4:	2380      	movs	r3, #128	; 0x80
 8004cf6:	e03a      	b.n	8004d6e <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d02:	d103      	bne.n	8004d0c <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8004d04:	f04f 33ff 	mov.w	r3, #4294967295
 8004d08:	60fb      	str	r3, [r7, #12]
 8004d0a:	e009      	b.n	8004d20 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d006      	beq.n	8004d20 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d101      	bne.n	8004d20 <osMutexWait+0x40>
      ticks = 1;
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8004d20:	f7ff ff3d 	bl	8004b9e <inHandlerMode>
 8004d24:	4603      	mov	r3, r0
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d017      	beq.n	8004d5a <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8004d2a:	f107 0308 	add.w	r3, r7, #8
 8004d2e:	461a      	mov	r2, r3
 8004d30:	2100      	movs	r1, #0
 8004d32:	6878      	ldr	r0, [r7, #4]
 8004d34:	f001 f874 	bl	8005e20 <xQueueReceiveFromISR>
 8004d38:	4603      	mov	r3, r0
 8004d3a:	2b01      	cmp	r3, #1
 8004d3c:	d001      	beq.n	8004d42 <osMutexWait+0x62>
      return osErrorOS;
 8004d3e:	23ff      	movs	r3, #255	; 0xff
 8004d40:	e015      	b.n	8004d6e <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8004d42:	68bb      	ldr	r3, [r7, #8]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d011      	beq.n	8004d6c <osMutexWait+0x8c>
 8004d48:	4b0b      	ldr	r3, [pc, #44]	; (8004d78 <osMutexWait+0x98>)
 8004d4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d4e:	601a      	str	r2, [r3, #0]
 8004d50:	f3bf 8f4f 	dsb	sy
 8004d54:	f3bf 8f6f 	isb	sy
 8004d58:	e008      	b.n	8004d6c <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8004d5a:	68f9      	ldr	r1, [r7, #12]
 8004d5c:	6878      	ldr	r0, [r7, #4]
 8004d5e:	f000 ff53 	bl	8005c08 <xQueueSemaphoreTake>
 8004d62:	4603      	mov	r3, r0
 8004d64:	2b01      	cmp	r3, #1
 8004d66:	d001      	beq.n	8004d6c <osMutexWait+0x8c>
    return osErrorOS;
 8004d68:	23ff      	movs	r3, #255	; 0xff
 8004d6a:	e000      	b.n	8004d6e <osMutexWait+0x8e>
  }
  
  return osOK;
 8004d6c:	2300      	movs	r3, #0
}
 8004d6e:	4618      	mov	r0, r3
 8004d70:	3710      	adds	r7, #16
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bd80      	pop	{r7, pc}
 8004d76:	bf00      	nop
 8004d78:	e000ed04 	.word	0xe000ed04

08004d7c <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b084      	sub	sp, #16
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8004d84:	2300      	movs	r3, #0
 8004d86:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8004d88:	2300      	movs	r3, #0
 8004d8a:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8004d8c:	f7ff ff07 	bl	8004b9e <inHandlerMode>
 8004d90:	4603      	mov	r3, r0
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d016      	beq.n	8004dc4 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8004d96:	f107 0308 	add.w	r3, r7, #8
 8004d9a:	4619      	mov	r1, r3
 8004d9c:	6878      	ldr	r0, [r7, #4]
 8004d9e:	f000 fdc6 	bl	800592e <xQueueGiveFromISR>
 8004da2:	4603      	mov	r3, r0
 8004da4:	2b01      	cmp	r3, #1
 8004da6:	d001      	beq.n	8004dac <osMutexRelease+0x30>
      return osErrorOS;
 8004da8:	23ff      	movs	r3, #255	; 0xff
 8004daa:	e017      	b.n	8004ddc <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8004dac:	68bb      	ldr	r3, [r7, #8]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d013      	beq.n	8004dda <osMutexRelease+0x5e>
 8004db2:	4b0c      	ldr	r3, [pc, #48]	; (8004de4 <osMutexRelease+0x68>)
 8004db4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004db8:	601a      	str	r2, [r3, #0]
 8004dba:	f3bf 8f4f 	dsb	sy
 8004dbe:	f3bf 8f6f 	isb	sy
 8004dc2:	e00a      	b.n	8004dda <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	2100      	movs	r1, #0
 8004dca:	6878      	ldr	r0, [r7, #4]
 8004dcc:	f000 fc16 	bl	80055fc <xQueueGenericSend>
 8004dd0:	4603      	mov	r3, r0
 8004dd2:	2b01      	cmp	r3, #1
 8004dd4:	d001      	beq.n	8004dda <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8004dd6:	23ff      	movs	r3, #255	; 0xff
 8004dd8:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8004dda:	68fb      	ldr	r3, [r7, #12]
}
 8004ddc:	4618      	mov	r0, r3
 8004dde:	3710      	adds	r7, #16
 8004de0:	46bd      	mov	sp, r7
 8004de2:	bd80      	pop	{r7, pc}
 8004de4:	e000ed04 	.word	0xe000ed04

08004de8 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b086      	sub	sp, #24
 8004dec:	af02      	add	r7, sp, #8
 8004dee:	6078      	str	r0, [r7, #4]
 8004df0:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	685b      	ldr	r3, [r3, #4]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d00f      	beq.n	8004e1a <osSemaphoreCreate+0x32>
    if (count == 1) {
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	2b01      	cmp	r3, #1
 8004dfe:	d10a      	bne.n	8004e16 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	685b      	ldr	r3, [r3, #4]
 8004e04:	2203      	movs	r2, #3
 8004e06:	9200      	str	r2, [sp, #0]
 8004e08:	2200      	movs	r2, #0
 8004e0a:	2100      	movs	r1, #0
 8004e0c:	2001      	movs	r0, #1
 8004e0e:	f000 fad7 	bl	80053c0 <xQueueGenericCreateStatic>
 8004e12:	4603      	mov	r3, r0
 8004e14:	e016      	b.n	8004e44 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8004e16:	2300      	movs	r3, #0
 8004e18:	e014      	b.n	8004e44 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	2b01      	cmp	r3, #1
 8004e1e:	d110      	bne.n	8004e42 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8004e20:	2203      	movs	r2, #3
 8004e22:	2100      	movs	r1, #0
 8004e24:	2001      	movs	r0, #1
 8004e26:	f000 fb43 	bl	80054b0 <xQueueGenericCreate>
 8004e2a:	60f8      	str	r0, [r7, #12]
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d005      	beq.n	8004e3e <osSemaphoreCreate+0x56>
 8004e32:	2300      	movs	r3, #0
 8004e34:	2200      	movs	r2, #0
 8004e36:	2100      	movs	r1, #0
 8004e38:	68f8      	ldr	r0, [r7, #12]
 8004e3a:	f000 fbdf 	bl	80055fc <xQueueGenericSend>
      return sema;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	e000      	b.n	8004e44 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8004e42:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8004e44:	4618      	mov	r0, r3
 8004e46:	3710      	adds	r7, #16
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	bd80      	pop	{r7, pc}

08004e4c <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b084      	sub	sp, #16
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
 8004e54:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8004e56:	2300      	movs	r3, #0
 8004e58:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d101      	bne.n	8004e64 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8004e60:	2380      	movs	r3, #128	; 0x80
 8004e62:	e03a      	b.n	8004eda <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8004e64:	2300      	movs	r3, #0
 8004e66:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e6e:	d103      	bne.n	8004e78 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8004e70:	f04f 33ff 	mov.w	r3, #4294967295
 8004e74:	60fb      	str	r3, [r7, #12]
 8004e76:	e009      	b.n	8004e8c <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d006      	beq.n	8004e8c <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d101      	bne.n	8004e8c <osSemaphoreWait+0x40>
      ticks = 1;
 8004e88:	2301      	movs	r3, #1
 8004e8a:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8004e8c:	f7ff fe87 	bl	8004b9e <inHandlerMode>
 8004e90:	4603      	mov	r3, r0
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d017      	beq.n	8004ec6 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8004e96:	f107 0308 	add.w	r3, r7, #8
 8004e9a:	461a      	mov	r2, r3
 8004e9c:	2100      	movs	r1, #0
 8004e9e:	6878      	ldr	r0, [r7, #4]
 8004ea0:	f000 ffbe 	bl	8005e20 <xQueueReceiveFromISR>
 8004ea4:	4603      	mov	r3, r0
 8004ea6:	2b01      	cmp	r3, #1
 8004ea8:	d001      	beq.n	8004eae <osSemaphoreWait+0x62>
      return osErrorOS;
 8004eaa:	23ff      	movs	r3, #255	; 0xff
 8004eac:	e015      	b.n	8004eda <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8004eae:	68bb      	ldr	r3, [r7, #8]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d011      	beq.n	8004ed8 <osSemaphoreWait+0x8c>
 8004eb4:	4b0b      	ldr	r3, [pc, #44]	; (8004ee4 <osSemaphoreWait+0x98>)
 8004eb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004eba:	601a      	str	r2, [r3, #0]
 8004ebc:	f3bf 8f4f 	dsb	sy
 8004ec0:	f3bf 8f6f 	isb	sy
 8004ec4:	e008      	b.n	8004ed8 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8004ec6:	68f9      	ldr	r1, [r7, #12]
 8004ec8:	6878      	ldr	r0, [r7, #4]
 8004eca:	f000 fe9d 	bl	8005c08 <xQueueSemaphoreTake>
 8004ece:	4603      	mov	r3, r0
 8004ed0:	2b01      	cmp	r3, #1
 8004ed2:	d001      	beq.n	8004ed8 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8004ed4:	23ff      	movs	r3, #255	; 0xff
 8004ed6:	e000      	b.n	8004eda <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8004ed8:	2300      	movs	r3, #0
}
 8004eda:	4618      	mov	r0, r3
 8004edc:	3710      	adds	r7, #16
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bd80      	pop	{r7, pc}
 8004ee2:	bf00      	nop
 8004ee4:	e000ed04 	.word	0xe000ed04

08004ee8 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b084      	sub	sp, #16
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8004ef8:	f7ff fe51 	bl	8004b9e <inHandlerMode>
 8004efc:	4603      	mov	r3, r0
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d016      	beq.n	8004f30 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8004f02:	f107 0308 	add.w	r3, r7, #8
 8004f06:	4619      	mov	r1, r3
 8004f08:	6878      	ldr	r0, [r7, #4]
 8004f0a:	f000 fd10 	bl	800592e <xQueueGiveFromISR>
 8004f0e:	4603      	mov	r3, r0
 8004f10:	2b01      	cmp	r3, #1
 8004f12:	d001      	beq.n	8004f18 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8004f14:	23ff      	movs	r3, #255	; 0xff
 8004f16:	e017      	b.n	8004f48 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8004f18:	68bb      	ldr	r3, [r7, #8]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d013      	beq.n	8004f46 <osSemaphoreRelease+0x5e>
 8004f1e:	4b0c      	ldr	r3, [pc, #48]	; (8004f50 <osSemaphoreRelease+0x68>)
 8004f20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f24:	601a      	str	r2, [r3, #0]
 8004f26:	f3bf 8f4f 	dsb	sy
 8004f2a:	f3bf 8f6f 	isb	sy
 8004f2e:	e00a      	b.n	8004f46 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8004f30:	2300      	movs	r3, #0
 8004f32:	2200      	movs	r2, #0
 8004f34:	2100      	movs	r1, #0
 8004f36:	6878      	ldr	r0, [r7, #4]
 8004f38:	f000 fb60 	bl	80055fc <xQueueGenericSend>
 8004f3c:	4603      	mov	r3, r0
 8004f3e:	2b01      	cmp	r3, #1
 8004f40:	d001      	beq.n	8004f46 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8004f42:	23ff      	movs	r3, #255	; 0xff
 8004f44:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8004f46:	68fb      	ldr	r3, [r7, #12]
}
 8004f48:	4618      	mov	r0, r3
 8004f4a:	3710      	adds	r7, #16
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	bd80      	pop	{r7, pc}
 8004f50:	e000ed04 	.word	0xe000ed04

08004f54 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b082      	sub	sp, #8
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8004f5c:	f7ff fe1f 	bl	8004b9e <inHandlerMode>
 8004f60:	4603      	mov	r3, r0
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d001      	beq.n	8004f6a <osSemaphoreDelete+0x16>
    return osErrorISR;
 8004f66:	2382      	movs	r3, #130	; 0x82
 8004f68:	e003      	b.n	8004f72 <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 8004f6a:	6878      	ldr	r0, [r7, #4]
 8004f6c:	f001 f814 	bl	8005f98 <vQueueDelete>

  return osOK; 
 8004f70:	2300      	movs	r3, #0
}
 8004f72:	4618      	mov	r0, r3
 8004f74:	3708      	adds	r7, #8
 8004f76:	46bd      	mov	sp, r7
 8004f78:	bd80      	pop	{r7, pc}

08004f7a <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8004f7a:	b590      	push	{r4, r7, lr}
 8004f7c:	b085      	sub	sp, #20
 8004f7e:	af02      	add	r7, sp, #8
 8004f80:	6078      	str	r0, [r7, #4]
 8004f82:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	689b      	ldr	r3, [r3, #8]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d011      	beq.n	8004fb0 <osMessageCreate+0x36>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	68db      	ldr	r3, [r3, #12]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d00d      	beq.n	8004fb0 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6818      	ldr	r0, [r3, #0]
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6859      	ldr	r1, [r3, #4]
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	689a      	ldr	r2, [r3, #8]
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	68db      	ldr	r3, [r3, #12]
 8004fa4:	2400      	movs	r4, #0
 8004fa6:	9400      	str	r4, [sp, #0]
 8004fa8:	f000 fa0a 	bl	80053c0 <xQueueGenericCreateStatic>
 8004fac:	4603      	mov	r3, r0
 8004fae:	e008      	b.n	8004fc2 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6818      	ldr	r0, [r3, #0]
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	685b      	ldr	r3, [r3, #4]
 8004fb8:	2200      	movs	r2, #0
 8004fba:	4619      	mov	r1, r3
 8004fbc:	f000 fa78 	bl	80054b0 <xQueueGenericCreate>
 8004fc0:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	370c      	adds	r7, #12
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	bd90      	pop	{r4, r7, pc}
	...

08004fcc <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b086      	sub	sp, #24
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	60f8      	str	r0, [r7, #12]
 8004fd4:	60b9      	str	r1, [r7, #8]
 8004fd6:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8004fd8:	2300      	movs	r3, #0
 8004fda:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8004fe0:	697b      	ldr	r3, [r7, #20]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d101      	bne.n	8004fea <osMessagePut+0x1e>
    ticks = 1;
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8004fea:	f7ff fdd8 	bl	8004b9e <inHandlerMode>
 8004fee:	4603      	mov	r3, r0
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d018      	beq.n	8005026 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8004ff4:	f107 0210 	add.w	r2, r7, #16
 8004ff8:	f107 0108 	add.w	r1, r7, #8
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	68f8      	ldr	r0, [r7, #12]
 8005000:	f000 fbfa 	bl	80057f8 <xQueueGenericSendFromISR>
 8005004:	4603      	mov	r3, r0
 8005006:	2b01      	cmp	r3, #1
 8005008:	d001      	beq.n	800500e <osMessagePut+0x42>
      return osErrorOS;
 800500a:	23ff      	movs	r3, #255	; 0xff
 800500c:	e018      	b.n	8005040 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800500e:	693b      	ldr	r3, [r7, #16]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d014      	beq.n	800503e <osMessagePut+0x72>
 8005014:	4b0c      	ldr	r3, [pc, #48]	; (8005048 <osMessagePut+0x7c>)
 8005016:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800501a:	601a      	str	r2, [r3, #0]
 800501c:	f3bf 8f4f 	dsb	sy
 8005020:	f3bf 8f6f 	isb	sy
 8005024:	e00b      	b.n	800503e <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8005026:	f107 0108 	add.w	r1, r7, #8
 800502a:	2300      	movs	r3, #0
 800502c:	697a      	ldr	r2, [r7, #20]
 800502e:	68f8      	ldr	r0, [r7, #12]
 8005030:	f000 fae4 	bl	80055fc <xQueueGenericSend>
 8005034:	4603      	mov	r3, r0
 8005036:	2b01      	cmp	r3, #1
 8005038:	d001      	beq.n	800503e <osMessagePut+0x72>
      return osErrorOS;
 800503a:	23ff      	movs	r3, #255	; 0xff
 800503c:	e000      	b.n	8005040 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800503e:	2300      	movs	r3, #0
}
 8005040:	4618      	mov	r0, r3
 8005042:	3718      	adds	r7, #24
 8005044:	46bd      	mov	sp, r7
 8005046:	bd80      	pop	{r7, pc}
 8005048:	e000ed04 	.word	0xe000ed04

0800504c <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800504c:	b590      	push	{r4, r7, lr}
 800504e:	b08b      	sub	sp, #44	; 0x2c
 8005050:	af00      	add	r7, sp, #0
 8005052:	60f8      	str	r0, [r7, #12]
 8005054:	60b9      	str	r1, [r7, #8]
 8005056:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8005058:	68bb      	ldr	r3, [r7, #8]
 800505a:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800505c:	2300      	movs	r3, #0
 800505e:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8005060:	68bb      	ldr	r3, [r7, #8]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d10a      	bne.n	800507c <osMessageGet+0x30>
    event.status = osErrorParameter;
 8005066:	2380      	movs	r3, #128	; 0x80
 8005068:	617b      	str	r3, [r7, #20]
    return event;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	461c      	mov	r4, r3
 800506e:	f107 0314 	add.w	r3, r7, #20
 8005072:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005076:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800507a:	e054      	b.n	8005126 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800507c:	2300      	movs	r3, #0
 800507e:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8005080:	2300      	movs	r3, #0
 8005082:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	f1b3 3fff 	cmp.w	r3, #4294967295
 800508a:	d103      	bne.n	8005094 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800508c:	f04f 33ff 	mov.w	r3, #4294967295
 8005090:	627b      	str	r3, [r7, #36]	; 0x24
 8005092:	e009      	b.n	80050a8 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d006      	beq.n	80050a8 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800509e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d101      	bne.n	80050a8 <osMessageGet+0x5c>
      ticks = 1;
 80050a4:	2301      	movs	r3, #1
 80050a6:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 80050a8:	f7ff fd79 	bl	8004b9e <inHandlerMode>
 80050ac:	4603      	mov	r3, r0
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d01c      	beq.n	80050ec <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 80050b2:	f107 0220 	add.w	r2, r7, #32
 80050b6:	f107 0314 	add.w	r3, r7, #20
 80050ba:	3304      	adds	r3, #4
 80050bc:	4619      	mov	r1, r3
 80050be:	68b8      	ldr	r0, [r7, #8]
 80050c0:	f000 feae 	bl	8005e20 <xQueueReceiveFromISR>
 80050c4:	4603      	mov	r3, r0
 80050c6:	2b01      	cmp	r3, #1
 80050c8:	d102      	bne.n	80050d0 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 80050ca:	2310      	movs	r3, #16
 80050cc:	617b      	str	r3, [r7, #20]
 80050ce:	e001      	b.n	80050d4 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 80050d0:	2300      	movs	r3, #0
 80050d2:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 80050d4:	6a3b      	ldr	r3, [r7, #32]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d01d      	beq.n	8005116 <osMessageGet+0xca>
 80050da:	4b15      	ldr	r3, [pc, #84]	; (8005130 <osMessageGet+0xe4>)
 80050dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050e0:	601a      	str	r2, [r3, #0]
 80050e2:	f3bf 8f4f 	dsb	sy
 80050e6:	f3bf 8f6f 	isb	sy
 80050ea:	e014      	b.n	8005116 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 80050ec:	f107 0314 	add.w	r3, r7, #20
 80050f0:	3304      	adds	r3, #4
 80050f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050f4:	4619      	mov	r1, r3
 80050f6:	68b8      	ldr	r0, [r7, #8]
 80050f8:	f000 fca6 	bl	8005a48 <xQueueReceive>
 80050fc:	4603      	mov	r3, r0
 80050fe:	2b01      	cmp	r3, #1
 8005100:	d102      	bne.n	8005108 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8005102:	2310      	movs	r3, #16
 8005104:	617b      	str	r3, [r7, #20]
 8005106:	e006      	b.n	8005116 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8005108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800510a:	2b00      	cmp	r3, #0
 800510c:	d101      	bne.n	8005112 <osMessageGet+0xc6>
 800510e:	2300      	movs	r3, #0
 8005110:	e000      	b.n	8005114 <osMessageGet+0xc8>
 8005112:	2340      	movs	r3, #64	; 0x40
 8005114:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	461c      	mov	r4, r3
 800511a:	f107 0314 	add.w	r3, r7, #20
 800511e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005122:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8005126:	68f8      	ldr	r0, [r7, #12]
 8005128:	372c      	adds	r7, #44	; 0x2c
 800512a:	46bd      	mov	sp, r7
 800512c:	bd90      	pop	{r4, r7, pc}
 800512e:	bf00      	nop
 8005130:	e000ed04 	.word	0xe000ed04

08005134 <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b082      	sub	sp, #8
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800513c:	f7ff fd2f 	bl	8004b9e <inHandlerMode>
 8005140:	4603      	mov	r3, r0
 8005142:	2b00      	cmp	r3, #0
 8005144:	d004      	beq.n	8005150 <osMessageWaiting+0x1c>
    return uxQueueMessagesWaitingFromISR(queue_id);
 8005146:	6878      	ldr	r0, [r7, #4]
 8005148:	f000 ff08 	bl	8005f5c <uxQueueMessagesWaitingFromISR>
 800514c:	4603      	mov	r3, r0
 800514e:	e003      	b.n	8005158 <osMessageWaiting+0x24>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 8005150:	6878      	ldr	r0, [r7, #4]
 8005152:	f000 fee5 	bl	8005f20 <uxQueueMessagesWaiting>
 8005156:	4603      	mov	r3, r0
  }
}
 8005158:	4618      	mov	r0, r3
 800515a:	3708      	adds	r7, #8
 800515c:	46bd      	mov	sp, r7
 800515e:	bd80      	pop	{r7, pc}

08005160 <osMessageDelete>:
* @brief Delete a Message Queue
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osMessageDelete (osMessageQId queue_id)
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b082      	sub	sp, #8
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8005168:	f7ff fd19 	bl	8004b9e <inHandlerMode>
 800516c:	4603      	mov	r3, r0
 800516e:	2b00      	cmp	r3, #0
 8005170:	d001      	beq.n	8005176 <osMessageDelete+0x16>
    return osErrorISR;
 8005172:	2382      	movs	r3, #130	; 0x82
 8005174:	e003      	b.n	800517e <osMessageDelete+0x1e>
  }

  vQueueDelete(queue_id);
 8005176:	6878      	ldr	r0, [r7, #4]
 8005178:	f000 ff0e 	bl	8005f98 <vQueueDelete>

  return osOK; 
 800517c:	2300      	movs	r3, #0
}
 800517e:	4618      	mov	r0, r3
 8005180:	3708      	adds	r7, #8
 8005182:	46bd      	mov	sp, r7
 8005184:	bd80      	pop	{r7, pc}

08005186 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005186:	b480      	push	{r7}
 8005188:	b083      	sub	sp, #12
 800518a:	af00      	add	r7, sp, #0
 800518c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	f103 0208 	add.w	r2, r3, #8
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	f04f 32ff 	mov.w	r2, #4294967295
 800519e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	f103 0208 	add.w	r2, r3, #8
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	f103 0208 	add.w	r2, r3, #8
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2200      	movs	r2, #0
 80051b8:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80051ba:	bf00      	nop
 80051bc:	370c      	adds	r7, #12
 80051be:	46bd      	mov	sp, r7
 80051c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c4:	4770      	bx	lr

080051c6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80051c6:	b480      	push	{r7}
 80051c8:	b083      	sub	sp, #12
 80051ca:	af00      	add	r7, sp, #0
 80051cc:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2200      	movs	r2, #0
 80051d2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80051d4:	bf00      	nop
 80051d6:	370c      	adds	r7, #12
 80051d8:	46bd      	mov	sp, r7
 80051da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051de:	4770      	bx	lr

080051e0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80051e0:	b480      	push	{r7}
 80051e2:	b085      	sub	sp, #20
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
 80051e8:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	685b      	ldr	r3, [r3, #4]
 80051ee:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	68fa      	ldr	r2, [r7, #12]
 80051f4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	689a      	ldr	r2, [r3, #8]
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	689b      	ldr	r3, [r3, #8]
 8005202:	683a      	ldr	r2, [r7, #0]
 8005204:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	683a      	ldr	r2, [r7, #0]
 800520a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	687a      	ldr	r2, [r7, #4]
 8005210:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	1c5a      	adds	r2, r3, #1
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	601a      	str	r2, [r3, #0]
}
 800521c:	bf00      	nop
 800521e:	3714      	adds	r7, #20
 8005220:	46bd      	mov	sp, r7
 8005222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005226:	4770      	bx	lr

08005228 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005228:	b480      	push	{r7}
 800522a:	b085      	sub	sp, #20
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
 8005230:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005238:	68bb      	ldr	r3, [r7, #8]
 800523a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800523e:	d103      	bne.n	8005248 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	691b      	ldr	r3, [r3, #16]
 8005244:	60fb      	str	r3, [r7, #12]
 8005246:	e00c      	b.n	8005262 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	3308      	adds	r3, #8
 800524c:	60fb      	str	r3, [r7, #12]
 800524e:	e002      	b.n	8005256 <vListInsert+0x2e>
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	685b      	ldr	r3, [r3, #4]
 8005254:	60fb      	str	r3, [r7, #12]
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	685b      	ldr	r3, [r3, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	68ba      	ldr	r2, [r7, #8]
 800525e:	429a      	cmp	r2, r3
 8005260:	d2f6      	bcs.n	8005250 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	685a      	ldr	r2, [r3, #4]
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	685b      	ldr	r3, [r3, #4]
 800526e:	683a      	ldr	r2, [r7, #0]
 8005270:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	68fa      	ldr	r2, [r7, #12]
 8005276:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	683a      	ldr	r2, [r7, #0]
 800527c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	687a      	ldr	r2, [r7, #4]
 8005282:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	1c5a      	adds	r2, r3, #1
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	601a      	str	r2, [r3, #0]
}
 800528e:	bf00      	nop
 8005290:	3714      	adds	r7, #20
 8005292:	46bd      	mov	sp, r7
 8005294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005298:	4770      	bx	lr

0800529a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800529a:	b480      	push	{r7}
 800529c:	b085      	sub	sp, #20
 800529e:	af00      	add	r7, sp, #0
 80052a0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	691b      	ldr	r3, [r3, #16]
 80052a6:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	685b      	ldr	r3, [r3, #4]
 80052ac:	687a      	ldr	r2, [r7, #4]
 80052ae:	6892      	ldr	r2, [r2, #8]
 80052b0:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	689b      	ldr	r3, [r3, #8]
 80052b6:	687a      	ldr	r2, [r7, #4]
 80052b8:	6852      	ldr	r2, [r2, #4]
 80052ba:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	685b      	ldr	r3, [r3, #4]
 80052c0:	687a      	ldr	r2, [r7, #4]
 80052c2:	429a      	cmp	r2, r3
 80052c4:	d103      	bne.n	80052ce <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	689a      	ldr	r2, [r3, #8]
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2200      	movs	r2, #0
 80052d2:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	1e5a      	subs	r2, r3, #1
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
}
 80052e2:	4618      	mov	r0, r3
 80052e4:	3714      	adds	r7, #20
 80052e6:	46bd      	mov	sp, r7
 80052e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ec:	4770      	bx	lr
	...

080052f0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b084      	sub	sp, #16
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
 80052f8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d10a      	bne.n	800531a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005304:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005308:	f383 8811 	msr	BASEPRI, r3
 800530c:	f3bf 8f6f 	isb	sy
 8005310:	f3bf 8f4f 	dsb	sy
 8005314:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005316:	bf00      	nop
 8005318:	e7fe      	b.n	8005318 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800531a:	f002 f913 	bl	8007544 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681a      	ldr	r2, [r3, #0]
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005326:	68f9      	ldr	r1, [r7, #12]
 8005328:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800532a:	fb01 f303 	mul.w	r3, r1, r3
 800532e:	441a      	add	r2, r3
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	2200      	movs	r2, #0
 8005338:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681a      	ldr	r2, [r3, #0]
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681a      	ldr	r2, [r3, #0]
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800534a:	3b01      	subs	r3, #1
 800534c:	68f9      	ldr	r1, [r7, #12]
 800534e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005350:	fb01 f303 	mul.w	r3, r1, r3
 8005354:	441a      	add	r2, r3
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	22ff      	movs	r2, #255	; 0xff
 800535e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	22ff      	movs	r2, #255	; 0xff
 8005366:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d114      	bne.n	800539a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	691b      	ldr	r3, [r3, #16]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d01a      	beq.n	80053ae <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	3310      	adds	r3, #16
 800537c:	4618      	mov	r0, r3
 800537e:	f001 fbd3 	bl	8006b28 <xTaskRemoveFromEventList>
 8005382:	4603      	mov	r3, r0
 8005384:	2b00      	cmp	r3, #0
 8005386:	d012      	beq.n	80053ae <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005388:	4b0c      	ldr	r3, [pc, #48]	; (80053bc <xQueueGenericReset+0xcc>)
 800538a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800538e:	601a      	str	r2, [r3, #0]
 8005390:	f3bf 8f4f 	dsb	sy
 8005394:	f3bf 8f6f 	isb	sy
 8005398:	e009      	b.n	80053ae <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	3310      	adds	r3, #16
 800539e:	4618      	mov	r0, r3
 80053a0:	f7ff fef1 	bl	8005186 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	3324      	adds	r3, #36	; 0x24
 80053a8:	4618      	mov	r0, r3
 80053aa:	f7ff feec 	bl	8005186 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80053ae:	f002 f8f9 	bl	80075a4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80053b2:	2301      	movs	r3, #1
}
 80053b4:	4618      	mov	r0, r3
 80053b6:	3710      	adds	r7, #16
 80053b8:	46bd      	mov	sp, r7
 80053ba:	bd80      	pop	{r7, pc}
 80053bc:	e000ed04 	.word	0xe000ed04

080053c0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b08e      	sub	sp, #56	; 0x38
 80053c4:	af02      	add	r7, sp, #8
 80053c6:	60f8      	str	r0, [r7, #12]
 80053c8:	60b9      	str	r1, [r7, #8]
 80053ca:	607a      	str	r2, [r7, #4]
 80053cc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d10a      	bne.n	80053ea <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80053d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053d8:	f383 8811 	msr	BASEPRI, r3
 80053dc:	f3bf 8f6f 	isb	sy
 80053e0:	f3bf 8f4f 	dsb	sy
 80053e4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80053e6:	bf00      	nop
 80053e8:	e7fe      	b.n	80053e8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d10a      	bne.n	8005406 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80053f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053f4:	f383 8811 	msr	BASEPRI, r3
 80053f8:	f3bf 8f6f 	isb	sy
 80053fc:	f3bf 8f4f 	dsb	sy
 8005400:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005402:	bf00      	nop
 8005404:	e7fe      	b.n	8005404 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d002      	beq.n	8005412 <xQueueGenericCreateStatic+0x52>
 800540c:	68bb      	ldr	r3, [r7, #8]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d001      	beq.n	8005416 <xQueueGenericCreateStatic+0x56>
 8005412:	2301      	movs	r3, #1
 8005414:	e000      	b.n	8005418 <xQueueGenericCreateStatic+0x58>
 8005416:	2300      	movs	r3, #0
 8005418:	2b00      	cmp	r3, #0
 800541a:	d10a      	bne.n	8005432 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800541c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005420:	f383 8811 	msr	BASEPRI, r3
 8005424:	f3bf 8f6f 	isb	sy
 8005428:	f3bf 8f4f 	dsb	sy
 800542c:	623b      	str	r3, [r7, #32]
}
 800542e:	bf00      	nop
 8005430:	e7fe      	b.n	8005430 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d102      	bne.n	800543e <xQueueGenericCreateStatic+0x7e>
 8005438:	68bb      	ldr	r3, [r7, #8]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d101      	bne.n	8005442 <xQueueGenericCreateStatic+0x82>
 800543e:	2301      	movs	r3, #1
 8005440:	e000      	b.n	8005444 <xQueueGenericCreateStatic+0x84>
 8005442:	2300      	movs	r3, #0
 8005444:	2b00      	cmp	r3, #0
 8005446:	d10a      	bne.n	800545e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005448:	f04f 0350 	mov.w	r3, #80	; 0x50
 800544c:	f383 8811 	msr	BASEPRI, r3
 8005450:	f3bf 8f6f 	isb	sy
 8005454:	f3bf 8f4f 	dsb	sy
 8005458:	61fb      	str	r3, [r7, #28]
}
 800545a:	bf00      	nop
 800545c:	e7fe      	b.n	800545c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800545e:	2348      	movs	r3, #72	; 0x48
 8005460:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005462:	697b      	ldr	r3, [r7, #20]
 8005464:	2b48      	cmp	r3, #72	; 0x48
 8005466:	d00a      	beq.n	800547e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005468:	f04f 0350 	mov.w	r3, #80	; 0x50
 800546c:	f383 8811 	msr	BASEPRI, r3
 8005470:	f3bf 8f6f 	isb	sy
 8005474:	f3bf 8f4f 	dsb	sy
 8005478:	61bb      	str	r3, [r7, #24]
}
 800547a:	bf00      	nop
 800547c:	e7fe      	b.n	800547c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800547e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005486:	2b00      	cmp	r3, #0
 8005488:	d00d      	beq.n	80054a6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800548a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800548c:	2201      	movs	r2, #1
 800548e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005492:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005498:	9300      	str	r3, [sp, #0]
 800549a:	4613      	mov	r3, r2
 800549c:	687a      	ldr	r2, [r7, #4]
 800549e:	68b9      	ldr	r1, [r7, #8]
 80054a0:	68f8      	ldr	r0, [r7, #12]
 80054a2:	f000 f83f 	bl	8005524 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80054a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80054a8:	4618      	mov	r0, r3
 80054aa:	3730      	adds	r7, #48	; 0x30
 80054ac:	46bd      	mov	sp, r7
 80054ae:	bd80      	pop	{r7, pc}

080054b0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b08a      	sub	sp, #40	; 0x28
 80054b4:	af02      	add	r7, sp, #8
 80054b6:	60f8      	str	r0, [r7, #12]
 80054b8:	60b9      	str	r1, [r7, #8]
 80054ba:	4613      	mov	r3, r2
 80054bc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d10a      	bne.n	80054da <xQueueGenericCreate+0x2a>
	__asm volatile
 80054c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054c8:	f383 8811 	msr	BASEPRI, r3
 80054cc:	f3bf 8f6f 	isb	sy
 80054d0:	f3bf 8f4f 	dsb	sy
 80054d4:	613b      	str	r3, [r7, #16]
}
 80054d6:	bf00      	nop
 80054d8:	e7fe      	b.n	80054d8 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	68ba      	ldr	r2, [r7, #8]
 80054de:	fb02 f303 	mul.w	r3, r2, r3
 80054e2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80054e4:	69fb      	ldr	r3, [r7, #28]
 80054e6:	3348      	adds	r3, #72	; 0x48
 80054e8:	4618      	mov	r0, r3
 80054ea:	f002 f94d 	bl	8007788 <pvPortMalloc>
 80054ee:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80054f0:	69bb      	ldr	r3, [r7, #24]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d011      	beq.n	800551a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80054f6:	69bb      	ldr	r3, [r7, #24]
 80054f8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80054fa:	697b      	ldr	r3, [r7, #20]
 80054fc:	3348      	adds	r3, #72	; 0x48
 80054fe:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005500:	69bb      	ldr	r3, [r7, #24]
 8005502:	2200      	movs	r2, #0
 8005504:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005508:	79fa      	ldrb	r2, [r7, #7]
 800550a:	69bb      	ldr	r3, [r7, #24]
 800550c:	9300      	str	r3, [sp, #0]
 800550e:	4613      	mov	r3, r2
 8005510:	697a      	ldr	r2, [r7, #20]
 8005512:	68b9      	ldr	r1, [r7, #8]
 8005514:	68f8      	ldr	r0, [r7, #12]
 8005516:	f000 f805 	bl	8005524 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800551a:	69bb      	ldr	r3, [r7, #24]
	}
 800551c:	4618      	mov	r0, r3
 800551e:	3720      	adds	r7, #32
 8005520:	46bd      	mov	sp, r7
 8005522:	bd80      	pop	{r7, pc}

08005524 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b084      	sub	sp, #16
 8005528:	af00      	add	r7, sp, #0
 800552a:	60f8      	str	r0, [r7, #12]
 800552c:	60b9      	str	r1, [r7, #8]
 800552e:	607a      	str	r2, [r7, #4]
 8005530:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005532:	68bb      	ldr	r3, [r7, #8]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d103      	bne.n	8005540 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005538:	69bb      	ldr	r3, [r7, #24]
 800553a:	69ba      	ldr	r2, [r7, #24]
 800553c:	601a      	str	r2, [r3, #0]
 800553e:	e002      	b.n	8005546 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005540:	69bb      	ldr	r3, [r7, #24]
 8005542:	687a      	ldr	r2, [r7, #4]
 8005544:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005546:	69bb      	ldr	r3, [r7, #24]
 8005548:	68fa      	ldr	r2, [r7, #12]
 800554a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800554c:	69bb      	ldr	r3, [r7, #24]
 800554e:	68ba      	ldr	r2, [r7, #8]
 8005550:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005552:	2101      	movs	r1, #1
 8005554:	69b8      	ldr	r0, [r7, #24]
 8005556:	f7ff fecb 	bl	80052f0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800555a:	bf00      	nop
 800555c:	3710      	adds	r7, #16
 800555e:	46bd      	mov	sp, r7
 8005560:	bd80      	pop	{r7, pc}

08005562 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8005562:	b580      	push	{r7, lr}
 8005564:	b082      	sub	sp, #8
 8005566:	af00      	add	r7, sp, #0
 8005568:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d00e      	beq.n	800558e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2200      	movs	r2, #0
 8005574:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2200      	movs	r2, #0
 800557a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2200      	movs	r2, #0
 8005580:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8005582:	2300      	movs	r3, #0
 8005584:	2200      	movs	r2, #0
 8005586:	2100      	movs	r1, #0
 8005588:	6878      	ldr	r0, [r7, #4]
 800558a:	f000 f837 	bl	80055fc <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800558e:	bf00      	nop
 8005590:	3708      	adds	r7, #8
 8005592:	46bd      	mov	sp, r7
 8005594:	bd80      	pop	{r7, pc}

08005596 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8005596:	b580      	push	{r7, lr}
 8005598:	b086      	sub	sp, #24
 800559a:	af00      	add	r7, sp, #0
 800559c:	4603      	mov	r3, r0
 800559e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80055a0:	2301      	movs	r3, #1
 80055a2:	617b      	str	r3, [r7, #20]
 80055a4:	2300      	movs	r3, #0
 80055a6:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80055a8:	79fb      	ldrb	r3, [r7, #7]
 80055aa:	461a      	mov	r2, r3
 80055ac:	6939      	ldr	r1, [r7, #16]
 80055ae:	6978      	ldr	r0, [r7, #20]
 80055b0:	f7ff ff7e 	bl	80054b0 <xQueueGenericCreate>
 80055b4:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80055b6:	68f8      	ldr	r0, [r7, #12]
 80055b8:	f7ff ffd3 	bl	8005562 <prvInitialiseMutex>

		return xNewQueue;
 80055bc:	68fb      	ldr	r3, [r7, #12]
	}
 80055be:	4618      	mov	r0, r3
 80055c0:	3718      	adds	r7, #24
 80055c2:	46bd      	mov	sp, r7
 80055c4:	bd80      	pop	{r7, pc}

080055c6 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80055c6:	b580      	push	{r7, lr}
 80055c8:	b088      	sub	sp, #32
 80055ca:	af02      	add	r7, sp, #8
 80055cc:	4603      	mov	r3, r0
 80055ce:	6039      	str	r1, [r7, #0]
 80055d0:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80055d2:	2301      	movs	r3, #1
 80055d4:	617b      	str	r3, [r7, #20]
 80055d6:	2300      	movs	r3, #0
 80055d8:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80055da:	79fb      	ldrb	r3, [r7, #7]
 80055dc:	9300      	str	r3, [sp, #0]
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	2200      	movs	r2, #0
 80055e2:	6939      	ldr	r1, [r7, #16]
 80055e4:	6978      	ldr	r0, [r7, #20]
 80055e6:	f7ff feeb 	bl	80053c0 <xQueueGenericCreateStatic>
 80055ea:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80055ec:	68f8      	ldr	r0, [r7, #12]
 80055ee:	f7ff ffb8 	bl	8005562 <prvInitialiseMutex>

		return xNewQueue;
 80055f2:	68fb      	ldr	r3, [r7, #12]
	}
 80055f4:	4618      	mov	r0, r3
 80055f6:	3718      	adds	r7, #24
 80055f8:	46bd      	mov	sp, r7
 80055fa:	bd80      	pop	{r7, pc}

080055fc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b08e      	sub	sp, #56	; 0x38
 8005600:	af00      	add	r7, sp, #0
 8005602:	60f8      	str	r0, [r7, #12]
 8005604:	60b9      	str	r1, [r7, #8]
 8005606:	607a      	str	r2, [r7, #4]
 8005608:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800560a:	2300      	movs	r3, #0
 800560c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005614:	2b00      	cmp	r3, #0
 8005616:	d10a      	bne.n	800562e <xQueueGenericSend+0x32>
	__asm volatile
 8005618:	f04f 0350 	mov.w	r3, #80	; 0x50
 800561c:	f383 8811 	msr	BASEPRI, r3
 8005620:	f3bf 8f6f 	isb	sy
 8005624:	f3bf 8f4f 	dsb	sy
 8005628:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800562a:	bf00      	nop
 800562c:	e7fe      	b.n	800562c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800562e:	68bb      	ldr	r3, [r7, #8]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d103      	bne.n	800563c <xQueueGenericSend+0x40>
 8005634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005638:	2b00      	cmp	r3, #0
 800563a:	d101      	bne.n	8005640 <xQueueGenericSend+0x44>
 800563c:	2301      	movs	r3, #1
 800563e:	e000      	b.n	8005642 <xQueueGenericSend+0x46>
 8005640:	2300      	movs	r3, #0
 8005642:	2b00      	cmp	r3, #0
 8005644:	d10a      	bne.n	800565c <xQueueGenericSend+0x60>
	__asm volatile
 8005646:	f04f 0350 	mov.w	r3, #80	; 0x50
 800564a:	f383 8811 	msr	BASEPRI, r3
 800564e:	f3bf 8f6f 	isb	sy
 8005652:	f3bf 8f4f 	dsb	sy
 8005656:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005658:	bf00      	nop
 800565a:	e7fe      	b.n	800565a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	2b02      	cmp	r3, #2
 8005660:	d103      	bne.n	800566a <xQueueGenericSend+0x6e>
 8005662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005664:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005666:	2b01      	cmp	r3, #1
 8005668:	d101      	bne.n	800566e <xQueueGenericSend+0x72>
 800566a:	2301      	movs	r3, #1
 800566c:	e000      	b.n	8005670 <xQueueGenericSend+0x74>
 800566e:	2300      	movs	r3, #0
 8005670:	2b00      	cmp	r3, #0
 8005672:	d10a      	bne.n	800568a <xQueueGenericSend+0x8e>
	__asm volatile
 8005674:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005678:	f383 8811 	msr	BASEPRI, r3
 800567c:	f3bf 8f6f 	isb	sy
 8005680:	f3bf 8f4f 	dsb	sy
 8005684:	623b      	str	r3, [r7, #32]
}
 8005686:	bf00      	nop
 8005688:	e7fe      	b.n	8005688 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800568a:	f001 fc0d 	bl	8006ea8 <xTaskGetSchedulerState>
 800568e:	4603      	mov	r3, r0
 8005690:	2b00      	cmp	r3, #0
 8005692:	d102      	bne.n	800569a <xQueueGenericSend+0x9e>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d101      	bne.n	800569e <xQueueGenericSend+0xa2>
 800569a:	2301      	movs	r3, #1
 800569c:	e000      	b.n	80056a0 <xQueueGenericSend+0xa4>
 800569e:	2300      	movs	r3, #0
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d10a      	bne.n	80056ba <xQueueGenericSend+0xbe>
	__asm volatile
 80056a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056a8:	f383 8811 	msr	BASEPRI, r3
 80056ac:	f3bf 8f6f 	isb	sy
 80056b0:	f3bf 8f4f 	dsb	sy
 80056b4:	61fb      	str	r3, [r7, #28]
}
 80056b6:	bf00      	nop
 80056b8:	e7fe      	b.n	80056b8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80056ba:	f001 ff43 	bl	8007544 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80056be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80056c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056c6:	429a      	cmp	r2, r3
 80056c8:	d302      	bcc.n	80056d0 <xQueueGenericSend+0xd4>
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	2b02      	cmp	r3, #2
 80056ce:	d129      	bne.n	8005724 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80056d0:	683a      	ldr	r2, [r7, #0]
 80056d2:	68b9      	ldr	r1, [r7, #8]
 80056d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80056d6:	f000 fc9a 	bl	800600e <prvCopyDataToQueue>
 80056da:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80056dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d010      	beq.n	8005706 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80056e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056e6:	3324      	adds	r3, #36	; 0x24
 80056e8:	4618      	mov	r0, r3
 80056ea:	f001 fa1d 	bl	8006b28 <xTaskRemoveFromEventList>
 80056ee:	4603      	mov	r3, r0
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d013      	beq.n	800571c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80056f4:	4b3f      	ldr	r3, [pc, #252]	; (80057f4 <xQueueGenericSend+0x1f8>)
 80056f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056fa:	601a      	str	r2, [r3, #0]
 80056fc:	f3bf 8f4f 	dsb	sy
 8005700:	f3bf 8f6f 	isb	sy
 8005704:	e00a      	b.n	800571c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005708:	2b00      	cmp	r3, #0
 800570a:	d007      	beq.n	800571c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800570c:	4b39      	ldr	r3, [pc, #228]	; (80057f4 <xQueueGenericSend+0x1f8>)
 800570e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005712:	601a      	str	r2, [r3, #0]
 8005714:	f3bf 8f4f 	dsb	sy
 8005718:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800571c:	f001 ff42 	bl	80075a4 <vPortExitCritical>
				return pdPASS;
 8005720:	2301      	movs	r3, #1
 8005722:	e063      	b.n	80057ec <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d103      	bne.n	8005732 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800572a:	f001 ff3b 	bl	80075a4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800572e:	2300      	movs	r3, #0
 8005730:	e05c      	b.n	80057ec <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005732:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005734:	2b00      	cmp	r3, #0
 8005736:	d106      	bne.n	8005746 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005738:	f107 0314 	add.w	r3, r7, #20
 800573c:	4618      	mov	r0, r3
 800573e:	f001 fa55 	bl	8006bec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005742:	2301      	movs	r3, #1
 8005744:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005746:	f001 ff2d 	bl	80075a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800574a:	f000 ffe3 	bl	8006714 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800574e:	f001 fef9 	bl	8007544 <vPortEnterCritical>
 8005752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005754:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005758:	b25b      	sxtb	r3, r3
 800575a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800575e:	d103      	bne.n	8005768 <xQueueGenericSend+0x16c>
 8005760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005762:	2200      	movs	r2, #0
 8005764:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005768:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800576a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800576e:	b25b      	sxtb	r3, r3
 8005770:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005774:	d103      	bne.n	800577e <xQueueGenericSend+0x182>
 8005776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005778:	2200      	movs	r2, #0
 800577a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800577e:	f001 ff11 	bl	80075a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005782:	1d3a      	adds	r2, r7, #4
 8005784:	f107 0314 	add.w	r3, r7, #20
 8005788:	4611      	mov	r1, r2
 800578a:	4618      	mov	r0, r3
 800578c:	f001 fa44 	bl	8006c18 <xTaskCheckForTimeOut>
 8005790:	4603      	mov	r3, r0
 8005792:	2b00      	cmp	r3, #0
 8005794:	d124      	bne.n	80057e0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005796:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005798:	f000 fd31 	bl	80061fe <prvIsQueueFull>
 800579c:	4603      	mov	r3, r0
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d018      	beq.n	80057d4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80057a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057a4:	3310      	adds	r3, #16
 80057a6:	687a      	ldr	r2, [r7, #4]
 80057a8:	4611      	mov	r1, r2
 80057aa:	4618      	mov	r0, r3
 80057ac:	f001 f998 	bl	8006ae0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80057b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80057b2:	f000 fcbc 	bl	800612e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80057b6:	f000 ffbb 	bl	8006730 <xTaskResumeAll>
 80057ba:	4603      	mov	r3, r0
 80057bc:	2b00      	cmp	r3, #0
 80057be:	f47f af7c 	bne.w	80056ba <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80057c2:	4b0c      	ldr	r3, [pc, #48]	; (80057f4 <xQueueGenericSend+0x1f8>)
 80057c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057c8:	601a      	str	r2, [r3, #0]
 80057ca:	f3bf 8f4f 	dsb	sy
 80057ce:	f3bf 8f6f 	isb	sy
 80057d2:	e772      	b.n	80056ba <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80057d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80057d6:	f000 fcaa 	bl	800612e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80057da:	f000 ffa9 	bl	8006730 <xTaskResumeAll>
 80057de:	e76c      	b.n	80056ba <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80057e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80057e2:	f000 fca4 	bl	800612e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80057e6:	f000 ffa3 	bl	8006730 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80057ea:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80057ec:	4618      	mov	r0, r3
 80057ee:	3738      	adds	r7, #56	; 0x38
 80057f0:	46bd      	mov	sp, r7
 80057f2:	bd80      	pop	{r7, pc}
 80057f4:	e000ed04 	.word	0xe000ed04

080057f8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b090      	sub	sp, #64	; 0x40
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	60f8      	str	r0, [r7, #12]
 8005800:	60b9      	str	r1, [r7, #8]
 8005802:	607a      	str	r2, [r7, #4]
 8005804:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800580a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800580c:	2b00      	cmp	r3, #0
 800580e:	d10a      	bne.n	8005826 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005810:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005814:	f383 8811 	msr	BASEPRI, r3
 8005818:	f3bf 8f6f 	isb	sy
 800581c:	f3bf 8f4f 	dsb	sy
 8005820:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005822:	bf00      	nop
 8005824:	e7fe      	b.n	8005824 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005826:	68bb      	ldr	r3, [r7, #8]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d103      	bne.n	8005834 <xQueueGenericSendFromISR+0x3c>
 800582c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800582e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005830:	2b00      	cmp	r3, #0
 8005832:	d101      	bne.n	8005838 <xQueueGenericSendFromISR+0x40>
 8005834:	2301      	movs	r3, #1
 8005836:	e000      	b.n	800583a <xQueueGenericSendFromISR+0x42>
 8005838:	2300      	movs	r3, #0
 800583a:	2b00      	cmp	r3, #0
 800583c:	d10a      	bne.n	8005854 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800583e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005842:	f383 8811 	msr	BASEPRI, r3
 8005846:	f3bf 8f6f 	isb	sy
 800584a:	f3bf 8f4f 	dsb	sy
 800584e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005850:	bf00      	nop
 8005852:	e7fe      	b.n	8005852 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	2b02      	cmp	r3, #2
 8005858:	d103      	bne.n	8005862 <xQueueGenericSendFromISR+0x6a>
 800585a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800585c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800585e:	2b01      	cmp	r3, #1
 8005860:	d101      	bne.n	8005866 <xQueueGenericSendFromISR+0x6e>
 8005862:	2301      	movs	r3, #1
 8005864:	e000      	b.n	8005868 <xQueueGenericSendFromISR+0x70>
 8005866:	2300      	movs	r3, #0
 8005868:	2b00      	cmp	r3, #0
 800586a:	d10a      	bne.n	8005882 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800586c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005870:	f383 8811 	msr	BASEPRI, r3
 8005874:	f3bf 8f6f 	isb	sy
 8005878:	f3bf 8f4f 	dsb	sy
 800587c:	623b      	str	r3, [r7, #32]
}
 800587e:	bf00      	nop
 8005880:	e7fe      	b.n	8005880 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005882:	f001 ff41 	bl	8007708 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005886:	f3ef 8211 	mrs	r2, BASEPRI
 800588a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800588e:	f383 8811 	msr	BASEPRI, r3
 8005892:	f3bf 8f6f 	isb	sy
 8005896:	f3bf 8f4f 	dsb	sy
 800589a:	61fa      	str	r2, [r7, #28]
 800589c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800589e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80058a0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80058a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80058a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058aa:	429a      	cmp	r2, r3
 80058ac:	d302      	bcc.n	80058b4 <xQueueGenericSendFromISR+0xbc>
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	2b02      	cmp	r3, #2
 80058b2:	d12f      	bne.n	8005914 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80058b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058b6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80058ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80058be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058c2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80058c4:	683a      	ldr	r2, [r7, #0]
 80058c6:	68b9      	ldr	r1, [r7, #8]
 80058c8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80058ca:	f000 fba0 	bl	800600e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80058ce:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80058d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058d6:	d112      	bne.n	80058fe <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80058d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d016      	beq.n	800590e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80058e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058e2:	3324      	adds	r3, #36	; 0x24
 80058e4:	4618      	mov	r0, r3
 80058e6:	f001 f91f 	bl	8006b28 <xTaskRemoveFromEventList>
 80058ea:	4603      	mov	r3, r0
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d00e      	beq.n	800590e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d00b      	beq.n	800590e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	2201      	movs	r2, #1
 80058fa:	601a      	str	r2, [r3, #0]
 80058fc:	e007      	b.n	800590e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80058fe:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005902:	3301      	adds	r3, #1
 8005904:	b2db      	uxtb	r3, r3
 8005906:	b25a      	sxtb	r2, r3
 8005908:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800590a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800590e:	2301      	movs	r3, #1
 8005910:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8005912:	e001      	b.n	8005918 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005914:	2300      	movs	r3, #0
 8005916:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005918:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800591a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800591c:	697b      	ldr	r3, [r7, #20]
 800591e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005922:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005924:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005926:	4618      	mov	r0, r3
 8005928:	3740      	adds	r7, #64	; 0x40
 800592a:	46bd      	mov	sp, r7
 800592c:	bd80      	pop	{r7, pc}

0800592e <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800592e:	b580      	push	{r7, lr}
 8005930:	b08e      	sub	sp, #56	; 0x38
 8005932:	af00      	add	r7, sp, #0
 8005934:	6078      	str	r0, [r7, #4]
 8005936:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800593c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800593e:	2b00      	cmp	r3, #0
 8005940:	d10a      	bne.n	8005958 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8005942:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005946:	f383 8811 	msr	BASEPRI, r3
 800594a:	f3bf 8f6f 	isb	sy
 800594e:	f3bf 8f4f 	dsb	sy
 8005952:	623b      	str	r3, [r7, #32]
}
 8005954:	bf00      	nop
 8005956:	e7fe      	b.n	8005956 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005958:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800595a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800595c:	2b00      	cmp	r3, #0
 800595e:	d00a      	beq.n	8005976 <xQueueGiveFromISR+0x48>
	__asm volatile
 8005960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005964:	f383 8811 	msr	BASEPRI, r3
 8005968:	f3bf 8f6f 	isb	sy
 800596c:	f3bf 8f4f 	dsb	sy
 8005970:	61fb      	str	r3, [r7, #28]
}
 8005972:	bf00      	nop
 8005974:	e7fe      	b.n	8005974 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8005976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d103      	bne.n	8005986 <xQueueGiveFromISR+0x58>
 800597e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005980:	689b      	ldr	r3, [r3, #8]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d101      	bne.n	800598a <xQueueGiveFromISR+0x5c>
 8005986:	2301      	movs	r3, #1
 8005988:	e000      	b.n	800598c <xQueueGiveFromISR+0x5e>
 800598a:	2300      	movs	r3, #0
 800598c:	2b00      	cmp	r3, #0
 800598e:	d10a      	bne.n	80059a6 <xQueueGiveFromISR+0x78>
	__asm volatile
 8005990:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005994:	f383 8811 	msr	BASEPRI, r3
 8005998:	f3bf 8f6f 	isb	sy
 800599c:	f3bf 8f4f 	dsb	sy
 80059a0:	61bb      	str	r3, [r7, #24]
}
 80059a2:	bf00      	nop
 80059a4:	e7fe      	b.n	80059a4 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80059a6:	f001 feaf 	bl	8007708 <vPortValidateInterruptPriority>
	__asm volatile
 80059aa:	f3ef 8211 	mrs	r2, BASEPRI
 80059ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059b2:	f383 8811 	msr	BASEPRI, r3
 80059b6:	f3bf 8f6f 	isb	sy
 80059ba:	f3bf 8f4f 	dsb	sy
 80059be:	617a      	str	r2, [r7, #20]
 80059c0:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80059c2:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80059c4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80059c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059ca:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80059cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80059d2:	429a      	cmp	r2, r3
 80059d4:	d22b      	bcs.n	8005a2e <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80059d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059d8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80059dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80059e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059e2:	1c5a      	adds	r2, r3, #1
 80059e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059e6:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80059e8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80059ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059f0:	d112      	bne.n	8005a18 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80059f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d016      	beq.n	8005a28 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80059fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059fc:	3324      	adds	r3, #36	; 0x24
 80059fe:	4618      	mov	r0, r3
 8005a00:	f001 f892 	bl	8006b28 <xTaskRemoveFromEventList>
 8005a04:	4603      	mov	r3, r0
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d00e      	beq.n	8005a28 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d00b      	beq.n	8005a28 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	2201      	movs	r2, #1
 8005a14:	601a      	str	r2, [r3, #0]
 8005a16:	e007      	b.n	8005a28 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005a18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005a1c:	3301      	adds	r3, #1
 8005a1e:	b2db      	uxtb	r3, r3
 8005a20:	b25a      	sxtb	r2, r3
 8005a22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005a28:	2301      	movs	r3, #1
 8005a2a:	637b      	str	r3, [r7, #52]	; 0x34
 8005a2c:	e001      	b.n	8005a32 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005a2e:	2300      	movs	r3, #0
 8005a30:	637b      	str	r3, [r7, #52]	; 0x34
 8005a32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a34:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	f383 8811 	msr	BASEPRI, r3
}
 8005a3c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005a3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005a40:	4618      	mov	r0, r3
 8005a42:	3738      	adds	r7, #56	; 0x38
 8005a44:	46bd      	mov	sp, r7
 8005a46:	bd80      	pop	{r7, pc}

08005a48 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	b08c      	sub	sp, #48	; 0x30
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	60f8      	str	r0, [r7, #12]
 8005a50:	60b9      	str	r1, [r7, #8]
 8005a52:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005a54:	2300      	movs	r3, #0
 8005a56:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005a5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d10a      	bne.n	8005a78 <xQueueReceive+0x30>
	__asm volatile
 8005a62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a66:	f383 8811 	msr	BASEPRI, r3
 8005a6a:	f3bf 8f6f 	isb	sy
 8005a6e:	f3bf 8f4f 	dsb	sy
 8005a72:	623b      	str	r3, [r7, #32]
}
 8005a74:	bf00      	nop
 8005a76:	e7fe      	b.n	8005a76 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005a78:	68bb      	ldr	r3, [r7, #8]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d103      	bne.n	8005a86 <xQueueReceive+0x3e>
 8005a7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d101      	bne.n	8005a8a <xQueueReceive+0x42>
 8005a86:	2301      	movs	r3, #1
 8005a88:	e000      	b.n	8005a8c <xQueueReceive+0x44>
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d10a      	bne.n	8005aa6 <xQueueReceive+0x5e>
	__asm volatile
 8005a90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a94:	f383 8811 	msr	BASEPRI, r3
 8005a98:	f3bf 8f6f 	isb	sy
 8005a9c:	f3bf 8f4f 	dsb	sy
 8005aa0:	61fb      	str	r3, [r7, #28]
}
 8005aa2:	bf00      	nop
 8005aa4:	e7fe      	b.n	8005aa4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005aa6:	f001 f9ff 	bl	8006ea8 <xTaskGetSchedulerState>
 8005aaa:	4603      	mov	r3, r0
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d102      	bne.n	8005ab6 <xQueueReceive+0x6e>
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d101      	bne.n	8005aba <xQueueReceive+0x72>
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	e000      	b.n	8005abc <xQueueReceive+0x74>
 8005aba:	2300      	movs	r3, #0
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d10a      	bne.n	8005ad6 <xQueueReceive+0x8e>
	__asm volatile
 8005ac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ac4:	f383 8811 	msr	BASEPRI, r3
 8005ac8:	f3bf 8f6f 	isb	sy
 8005acc:	f3bf 8f4f 	dsb	sy
 8005ad0:	61bb      	str	r3, [r7, #24]
}
 8005ad2:	bf00      	nop
 8005ad4:	e7fe      	b.n	8005ad4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005ad6:	f001 fd35 	bl	8007544 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005ada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005adc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ade:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d01f      	beq.n	8005b26 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005ae6:	68b9      	ldr	r1, [r7, #8]
 8005ae8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005aea:	f000 fafa 	bl	80060e2 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005af0:	1e5a      	subs	r2, r3, #1
 8005af2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005af4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005af6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005af8:	691b      	ldr	r3, [r3, #16]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d00f      	beq.n	8005b1e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005afe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b00:	3310      	adds	r3, #16
 8005b02:	4618      	mov	r0, r3
 8005b04:	f001 f810 	bl	8006b28 <xTaskRemoveFromEventList>
 8005b08:	4603      	mov	r3, r0
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d007      	beq.n	8005b1e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005b0e:	4b3d      	ldr	r3, [pc, #244]	; (8005c04 <xQueueReceive+0x1bc>)
 8005b10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b14:	601a      	str	r2, [r3, #0]
 8005b16:	f3bf 8f4f 	dsb	sy
 8005b1a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005b1e:	f001 fd41 	bl	80075a4 <vPortExitCritical>
				return pdPASS;
 8005b22:	2301      	movs	r3, #1
 8005b24:	e069      	b.n	8005bfa <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d103      	bne.n	8005b34 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005b2c:	f001 fd3a 	bl	80075a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005b30:	2300      	movs	r3, #0
 8005b32:	e062      	b.n	8005bfa <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005b34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d106      	bne.n	8005b48 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005b3a:	f107 0310 	add.w	r3, r7, #16
 8005b3e:	4618      	mov	r0, r3
 8005b40:	f001 f854 	bl	8006bec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005b44:	2301      	movs	r3, #1
 8005b46:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005b48:	f001 fd2c 	bl	80075a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005b4c:	f000 fde2 	bl	8006714 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005b50:	f001 fcf8 	bl	8007544 <vPortEnterCritical>
 8005b54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b56:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005b5a:	b25b      	sxtb	r3, r3
 8005b5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b60:	d103      	bne.n	8005b6a <xQueueReceive+0x122>
 8005b62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b64:	2200      	movs	r2, #0
 8005b66:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005b6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b6c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005b70:	b25b      	sxtb	r3, r3
 8005b72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b76:	d103      	bne.n	8005b80 <xQueueReceive+0x138>
 8005b78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005b80:	f001 fd10 	bl	80075a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005b84:	1d3a      	adds	r2, r7, #4
 8005b86:	f107 0310 	add.w	r3, r7, #16
 8005b8a:	4611      	mov	r1, r2
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	f001 f843 	bl	8006c18 <xTaskCheckForTimeOut>
 8005b92:	4603      	mov	r3, r0
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d123      	bne.n	8005be0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005b98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b9a:	f000 fb1a 	bl	80061d2 <prvIsQueueEmpty>
 8005b9e:	4603      	mov	r3, r0
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d017      	beq.n	8005bd4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005ba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ba6:	3324      	adds	r3, #36	; 0x24
 8005ba8:	687a      	ldr	r2, [r7, #4]
 8005baa:	4611      	mov	r1, r2
 8005bac:	4618      	mov	r0, r3
 8005bae:	f000 ff97 	bl	8006ae0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005bb2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005bb4:	f000 fabb 	bl	800612e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005bb8:	f000 fdba 	bl	8006730 <xTaskResumeAll>
 8005bbc:	4603      	mov	r3, r0
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d189      	bne.n	8005ad6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005bc2:	4b10      	ldr	r3, [pc, #64]	; (8005c04 <xQueueReceive+0x1bc>)
 8005bc4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005bc8:	601a      	str	r2, [r3, #0]
 8005bca:	f3bf 8f4f 	dsb	sy
 8005bce:	f3bf 8f6f 	isb	sy
 8005bd2:	e780      	b.n	8005ad6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005bd4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005bd6:	f000 faaa 	bl	800612e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005bda:	f000 fda9 	bl	8006730 <xTaskResumeAll>
 8005bde:	e77a      	b.n	8005ad6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005be0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005be2:	f000 faa4 	bl	800612e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005be6:	f000 fda3 	bl	8006730 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005bea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005bec:	f000 faf1 	bl	80061d2 <prvIsQueueEmpty>
 8005bf0:	4603      	mov	r3, r0
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	f43f af6f 	beq.w	8005ad6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005bf8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	3730      	adds	r7, #48	; 0x30
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	bd80      	pop	{r7, pc}
 8005c02:	bf00      	nop
 8005c04:	e000ed04 	.word	0xe000ed04

08005c08 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b08e      	sub	sp, #56	; 0x38
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
 8005c10:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8005c12:	2300      	movs	r3, #0
 8005c14:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005c1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d10a      	bne.n	8005c3a <xQueueSemaphoreTake+0x32>
	__asm volatile
 8005c24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c28:	f383 8811 	msr	BASEPRI, r3
 8005c2c:	f3bf 8f6f 	isb	sy
 8005c30:	f3bf 8f4f 	dsb	sy
 8005c34:	623b      	str	r3, [r7, #32]
}
 8005c36:	bf00      	nop
 8005c38:	e7fe      	b.n	8005c38 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005c3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d00a      	beq.n	8005c58 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8005c42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c46:	f383 8811 	msr	BASEPRI, r3
 8005c4a:	f3bf 8f6f 	isb	sy
 8005c4e:	f3bf 8f4f 	dsb	sy
 8005c52:	61fb      	str	r3, [r7, #28]
}
 8005c54:	bf00      	nop
 8005c56:	e7fe      	b.n	8005c56 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005c58:	f001 f926 	bl	8006ea8 <xTaskGetSchedulerState>
 8005c5c:	4603      	mov	r3, r0
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d102      	bne.n	8005c68 <xQueueSemaphoreTake+0x60>
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d101      	bne.n	8005c6c <xQueueSemaphoreTake+0x64>
 8005c68:	2301      	movs	r3, #1
 8005c6a:	e000      	b.n	8005c6e <xQueueSemaphoreTake+0x66>
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d10a      	bne.n	8005c88 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8005c72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c76:	f383 8811 	msr	BASEPRI, r3
 8005c7a:	f3bf 8f6f 	isb	sy
 8005c7e:	f3bf 8f4f 	dsb	sy
 8005c82:	61bb      	str	r3, [r7, #24]
}
 8005c84:	bf00      	nop
 8005c86:	e7fe      	b.n	8005c86 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005c88:	f001 fc5c 	bl	8007544 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8005c8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c90:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005c92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d024      	beq.n	8005ce2 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005c98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c9a:	1e5a      	subs	r2, r3, #1
 8005c9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c9e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005ca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d104      	bne.n	8005cb2 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8005ca8:	f001 faa6 	bl	80071f8 <pvTaskIncrementMutexHeldCount>
 8005cac:	4602      	mov	r2, r0
 8005cae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cb0:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005cb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cb4:	691b      	ldr	r3, [r3, #16]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d00f      	beq.n	8005cda <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005cba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cbc:	3310      	adds	r3, #16
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	f000 ff32 	bl	8006b28 <xTaskRemoveFromEventList>
 8005cc4:	4603      	mov	r3, r0
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d007      	beq.n	8005cda <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005cca:	4b54      	ldr	r3, [pc, #336]	; (8005e1c <xQueueSemaphoreTake+0x214>)
 8005ccc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005cd0:	601a      	str	r2, [r3, #0]
 8005cd2:	f3bf 8f4f 	dsb	sy
 8005cd6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005cda:	f001 fc63 	bl	80075a4 <vPortExitCritical>
				return pdPASS;
 8005cde:	2301      	movs	r3, #1
 8005ce0:	e097      	b.n	8005e12 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d111      	bne.n	8005d0c <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8005ce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d00a      	beq.n	8005d04 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8005cee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cf2:	f383 8811 	msr	BASEPRI, r3
 8005cf6:	f3bf 8f6f 	isb	sy
 8005cfa:	f3bf 8f4f 	dsb	sy
 8005cfe:	617b      	str	r3, [r7, #20]
}
 8005d00:	bf00      	nop
 8005d02:	e7fe      	b.n	8005d02 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8005d04:	f001 fc4e 	bl	80075a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005d08:	2300      	movs	r3, #0
 8005d0a:	e082      	b.n	8005e12 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005d0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d106      	bne.n	8005d20 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005d12:	f107 030c 	add.w	r3, r7, #12
 8005d16:	4618      	mov	r0, r3
 8005d18:	f000 ff68 	bl	8006bec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005d1c:	2301      	movs	r3, #1
 8005d1e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005d20:	f001 fc40 	bl	80075a4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005d24:	f000 fcf6 	bl	8006714 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005d28:	f001 fc0c 	bl	8007544 <vPortEnterCritical>
 8005d2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d2e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005d32:	b25b      	sxtb	r3, r3
 8005d34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d38:	d103      	bne.n	8005d42 <xQueueSemaphoreTake+0x13a>
 8005d3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d44:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005d48:	b25b      	sxtb	r3, r3
 8005d4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d4e:	d103      	bne.n	8005d58 <xQueueSemaphoreTake+0x150>
 8005d50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d52:	2200      	movs	r2, #0
 8005d54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005d58:	f001 fc24 	bl	80075a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005d5c:	463a      	mov	r2, r7
 8005d5e:	f107 030c 	add.w	r3, r7, #12
 8005d62:	4611      	mov	r1, r2
 8005d64:	4618      	mov	r0, r3
 8005d66:	f000 ff57 	bl	8006c18 <xTaskCheckForTimeOut>
 8005d6a:	4603      	mov	r3, r0
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d132      	bne.n	8005dd6 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005d70:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005d72:	f000 fa2e 	bl	80061d2 <prvIsQueueEmpty>
 8005d76:	4603      	mov	r3, r0
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d026      	beq.n	8005dca <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005d7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d109      	bne.n	8005d98 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8005d84:	f001 fbde 	bl	8007544 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005d88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d8a:	689b      	ldr	r3, [r3, #8]
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	f001 f8a9 	bl	8006ee4 <xTaskPriorityInherit>
 8005d92:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8005d94:	f001 fc06 	bl	80075a4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005d98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d9a:	3324      	adds	r3, #36	; 0x24
 8005d9c:	683a      	ldr	r2, [r7, #0]
 8005d9e:	4611      	mov	r1, r2
 8005da0:	4618      	mov	r0, r3
 8005da2:	f000 fe9d 	bl	8006ae0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005da6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005da8:	f000 f9c1 	bl	800612e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005dac:	f000 fcc0 	bl	8006730 <xTaskResumeAll>
 8005db0:	4603      	mov	r3, r0
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	f47f af68 	bne.w	8005c88 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8005db8:	4b18      	ldr	r3, [pc, #96]	; (8005e1c <xQueueSemaphoreTake+0x214>)
 8005dba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005dbe:	601a      	str	r2, [r3, #0]
 8005dc0:	f3bf 8f4f 	dsb	sy
 8005dc4:	f3bf 8f6f 	isb	sy
 8005dc8:	e75e      	b.n	8005c88 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8005dca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005dcc:	f000 f9af 	bl	800612e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005dd0:	f000 fcae 	bl	8006730 <xTaskResumeAll>
 8005dd4:	e758      	b.n	8005c88 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8005dd6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005dd8:	f000 f9a9 	bl	800612e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005ddc:	f000 fca8 	bl	8006730 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005de0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005de2:	f000 f9f6 	bl	80061d2 <prvIsQueueEmpty>
 8005de6:	4603      	mov	r3, r0
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	f43f af4d 	beq.w	8005c88 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8005dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d00d      	beq.n	8005e10 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8005df4:	f001 fba6 	bl	8007544 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005df8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005dfa:	f000 f8f0 	bl	8005fde <prvGetDisinheritPriorityAfterTimeout>
 8005dfe:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8005e00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e02:	689b      	ldr	r3, [r3, #8]
 8005e04:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005e06:	4618      	mov	r0, r3
 8005e08:	f001 f968 	bl	80070dc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8005e0c:	f001 fbca 	bl	80075a4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005e10:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005e12:	4618      	mov	r0, r3
 8005e14:	3738      	adds	r7, #56	; 0x38
 8005e16:	46bd      	mov	sp, r7
 8005e18:	bd80      	pop	{r7, pc}
 8005e1a:	bf00      	nop
 8005e1c:	e000ed04 	.word	0xe000ed04

08005e20 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b08e      	sub	sp, #56	; 0x38
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	60f8      	str	r0, [r7, #12]
 8005e28:	60b9      	str	r1, [r7, #8]
 8005e2a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005e30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d10a      	bne.n	8005e4c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8005e36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e3a:	f383 8811 	msr	BASEPRI, r3
 8005e3e:	f3bf 8f6f 	isb	sy
 8005e42:	f3bf 8f4f 	dsb	sy
 8005e46:	623b      	str	r3, [r7, #32]
}
 8005e48:	bf00      	nop
 8005e4a:	e7fe      	b.n	8005e4a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005e4c:	68bb      	ldr	r3, [r7, #8]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d103      	bne.n	8005e5a <xQueueReceiveFromISR+0x3a>
 8005e52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d101      	bne.n	8005e5e <xQueueReceiveFromISR+0x3e>
 8005e5a:	2301      	movs	r3, #1
 8005e5c:	e000      	b.n	8005e60 <xQueueReceiveFromISR+0x40>
 8005e5e:	2300      	movs	r3, #0
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d10a      	bne.n	8005e7a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8005e64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e68:	f383 8811 	msr	BASEPRI, r3
 8005e6c:	f3bf 8f6f 	isb	sy
 8005e70:	f3bf 8f4f 	dsb	sy
 8005e74:	61fb      	str	r3, [r7, #28]
}
 8005e76:	bf00      	nop
 8005e78:	e7fe      	b.n	8005e78 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005e7a:	f001 fc45 	bl	8007708 <vPortValidateInterruptPriority>
	__asm volatile
 8005e7e:	f3ef 8211 	mrs	r2, BASEPRI
 8005e82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e86:	f383 8811 	msr	BASEPRI, r3
 8005e8a:	f3bf 8f6f 	isb	sy
 8005e8e:	f3bf 8f4f 	dsb	sy
 8005e92:	61ba      	str	r2, [r7, #24]
 8005e94:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8005e96:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005e98:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005e9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e9e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005ea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d02f      	beq.n	8005f06 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8005ea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ea8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005eac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005eb0:	68b9      	ldr	r1, [r7, #8]
 8005eb2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005eb4:	f000 f915 	bl	80060e2 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005eb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eba:	1e5a      	subs	r2, r3, #1
 8005ebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ebe:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8005ec0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005ec4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ec8:	d112      	bne.n	8005ef0 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005eca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ecc:	691b      	ldr	r3, [r3, #16]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d016      	beq.n	8005f00 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005ed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ed4:	3310      	adds	r3, #16
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	f000 fe26 	bl	8006b28 <xTaskRemoveFromEventList>
 8005edc:	4603      	mov	r3, r0
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d00e      	beq.n	8005f00 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d00b      	beq.n	8005f00 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2201      	movs	r2, #1
 8005eec:	601a      	str	r2, [r3, #0]
 8005eee:	e007      	b.n	8005f00 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005ef0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005ef4:	3301      	adds	r3, #1
 8005ef6:	b2db      	uxtb	r3, r3
 8005ef8:	b25a      	sxtb	r2, r3
 8005efa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005efc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8005f00:	2301      	movs	r3, #1
 8005f02:	637b      	str	r3, [r7, #52]	; 0x34
 8005f04:	e001      	b.n	8005f0a <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8005f06:	2300      	movs	r3, #0
 8005f08:	637b      	str	r3, [r7, #52]	; 0x34
 8005f0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f0c:	613b      	str	r3, [r7, #16]
	__asm volatile
 8005f0e:	693b      	ldr	r3, [r7, #16]
 8005f10:	f383 8811 	msr	BASEPRI, r3
}
 8005f14:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005f16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005f18:	4618      	mov	r0, r3
 8005f1a:	3738      	adds	r7, #56	; 0x38
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	bd80      	pop	{r7, pc}

08005f20 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b084      	sub	sp, #16
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d10a      	bne.n	8005f44 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 8005f2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f32:	f383 8811 	msr	BASEPRI, r3
 8005f36:	f3bf 8f6f 	isb	sy
 8005f3a:	f3bf 8f4f 	dsb	sy
 8005f3e:	60bb      	str	r3, [r7, #8]
}
 8005f40:	bf00      	nop
 8005f42:	e7fe      	b.n	8005f42 <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 8005f44:	f001 fafe 	bl	8007544 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f4c:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8005f4e:	f001 fb29 	bl	80075a4 <vPortExitCritical>

	return uxReturn;
 8005f52:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8005f54:	4618      	mov	r0, r3
 8005f56:	3710      	adds	r7, #16
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	bd80      	pop	{r7, pc}

08005f5c <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8005f5c:	b480      	push	{r7}
 8005f5e:	b087      	sub	sp, #28
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8005f68:	697b      	ldr	r3, [r7, #20]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d10a      	bne.n	8005f84 <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 8005f6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f72:	f383 8811 	msr	BASEPRI, r3
 8005f76:	f3bf 8f6f 	isb	sy
 8005f7a:	f3bf 8f4f 	dsb	sy
 8005f7e:	60fb      	str	r3, [r7, #12]
}
 8005f80:	bf00      	nop
 8005f82:	e7fe      	b.n	8005f82 <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 8005f84:	697b      	ldr	r3, [r7, #20]
 8005f86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f88:	613b      	str	r3, [r7, #16]

	return uxReturn;
 8005f8a:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	371c      	adds	r7, #28
 8005f90:	46bd      	mov	sp, r7
 8005f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f96:	4770      	bx	lr

08005f98 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b084      	sub	sp, #16
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d10a      	bne.n	8005fc0 <vQueueDelete+0x28>
	__asm volatile
 8005faa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fae:	f383 8811 	msr	BASEPRI, r3
 8005fb2:	f3bf 8f6f 	isb	sy
 8005fb6:	f3bf 8f4f 	dsb	sy
 8005fba:	60bb      	str	r3, [r7, #8]
}
 8005fbc:	bf00      	nop
 8005fbe:	e7fe      	b.n	8005fbe <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8005fc0:	68f8      	ldr	r0, [r7, #12]
 8005fc2:	f000 f935 	bl	8006230 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d102      	bne.n	8005fd6 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8005fd0:	68f8      	ldr	r0, [r7, #12]
 8005fd2:	f001 fca5 	bl	8007920 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8005fd6:	bf00      	nop
 8005fd8:	3710      	adds	r7, #16
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	bd80      	pop	{r7, pc}

08005fde <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8005fde:	b480      	push	{r7}
 8005fe0:	b085      	sub	sp, #20
 8005fe2:	af00      	add	r7, sp, #0
 8005fe4:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d006      	beq.n	8005ffc <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f1c3 0307 	rsb	r3, r3, #7
 8005ff8:	60fb      	str	r3, [r7, #12]
 8005ffa:	e001      	b.n	8006000 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8005ffc:	2300      	movs	r3, #0
 8005ffe:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8006000:	68fb      	ldr	r3, [r7, #12]
	}
 8006002:	4618      	mov	r0, r3
 8006004:	3714      	adds	r7, #20
 8006006:	46bd      	mov	sp, r7
 8006008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600c:	4770      	bx	lr

0800600e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800600e:	b580      	push	{r7, lr}
 8006010:	b086      	sub	sp, #24
 8006012:	af00      	add	r7, sp, #0
 8006014:	60f8      	str	r0, [r7, #12]
 8006016:	60b9      	str	r1, [r7, #8]
 8006018:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800601a:	2300      	movs	r3, #0
 800601c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006022:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006028:	2b00      	cmp	r3, #0
 800602a:	d10d      	bne.n	8006048 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	2b00      	cmp	r3, #0
 8006032:	d14d      	bne.n	80060d0 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	689b      	ldr	r3, [r3, #8]
 8006038:	4618      	mov	r0, r3
 800603a:	f000 ffc9 	bl	8006fd0 <xTaskPriorityDisinherit>
 800603e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	2200      	movs	r2, #0
 8006044:	609a      	str	r2, [r3, #8]
 8006046:	e043      	b.n	80060d0 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d119      	bne.n	8006082 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	6858      	ldr	r0, [r3, #4]
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006056:	461a      	mov	r2, r3
 8006058:	68b9      	ldr	r1, [r7, #8]
 800605a:	f012 f908 	bl	801826e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	685a      	ldr	r2, [r3, #4]
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006066:	441a      	add	r2, r3
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	685a      	ldr	r2, [r3, #4]
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	689b      	ldr	r3, [r3, #8]
 8006074:	429a      	cmp	r2, r3
 8006076:	d32b      	bcc.n	80060d0 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681a      	ldr	r2, [r3, #0]
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	605a      	str	r2, [r3, #4]
 8006080:	e026      	b.n	80060d0 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	68d8      	ldr	r0, [r3, #12]
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800608a:	461a      	mov	r2, r3
 800608c:	68b9      	ldr	r1, [r7, #8]
 800608e:	f012 f8ee 	bl	801826e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	68da      	ldr	r2, [r3, #12]
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800609a:	425b      	negs	r3, r3
 800609c:	441a      	add	r2, r3
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	68da      	ldr	r2, [r3, #12]
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	429a      	cmp	r2, r3
 80060ac:	d207      	bcs.n	80060be <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	689a      	ldr	r2, [r3, #8]
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060b6:	425b      	negs	r3, r3
 80060b8:	441a      	add	r2, r3
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	2b02      	cmp	r3, #2
 80060c2:	d105      	bne.n	80060d0 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80060c4:	693b      	ldr	r3, [r7, #16]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d002      	beq.n	80060d0 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80060ca:	693b      	ldr	r3, [r7, #16]
 80060cc:	3b01      	subs	r3, #1
 80060ce:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80060d0:	693b      	ldr	r3, [r7, #16]
 80060d2:	1c5a      	adds	r2, r3, #1
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80060d8:	697b      	ldr	r3, [r7, #20]
}
 80060da:	4618      	mov	r0, r3
 80060dc:	3718      	adds	r7, #24
 80060de:	46bd      	mov	sp, r7
 80060e0:	bd80      	pop	{r7, pc}

080060e2 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80060e2:	b580      	push	{r7, lr}
 80060e4:	b082      	sub	sp, #8
 80060e6:	af00      	add	r7, sp, #0
 80060e8:	6078      	str	r0, [r7, #4]
 80060ea:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d018      	beq.n	8006126 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	68da      	ldr	r2, [r3, #12]
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060fc:	441a      	add	r2, r3
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	68da      	ldr	r2, [r3, #12]
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	689b      	ldr	r3, [r3, #8]
 800610a:	429a      	cmp	r2, r3
 800610c:	d303      	bcc.n	8006116 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681a      	ldr	r2, [r3, #0]
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	68d9      	ldr	r1, [r3, #12]
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800611e:	461a      	mov	r2, r3
 8006120:	6838      	ldr	r0, [r7, #0]
 8006122:	f012 f8a4 	bl	801826e <memcpy>
	}
}
 8006126:	bf00      	nop
 8006128:	3708      	adds	r7, #8
 800612a:	46bd      	mov	sp, r7
 800612c:	bd80      	pop	{r7, pc}

0800612e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800612e:	b580      	push	{r7, lr}
 8006130:	b084      	sub	sp, #16
 8006132:	af00      	add	r7, sp, #0
 8006134:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006136:	f001 fa05 	bl	8007544 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006140:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006142:	e011      	b.n	8006168 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006148:	2b00      	cmp	r3, #0
 800614a:	d012      	beq.n	8006172 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	3324      	adds	r3, #36	; 0x24
 8006150:	4618      	mov	r0, r3
 8006152:	f000 fce9 	bl	8006b28 <xTaskRemoveFromEventList>
 8006156:	4603      	mov	r3, r0
 8006158:	2b00      	cmp	r3, #0
 800615a:	d001      	beq.n	8006160 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800615c:	f000 fdbe 	bl	8006cdc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006160:	7bfb      	ldrb	r3, [r7, #15]
 8006162:	3b01      	subs	r3, #1
 8006164:	b2db      	uxtb	r3, r3
 8006166:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006168:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800616c:	2b00      	cmp	r3, #0
 800616e:	dce9      	bgt.n	8006144 <prvUnlockQueue+0x16>
 8006170:	e000      	b.n	8006174 <prvUnlockQueue+0x46>
					break;
 8006172:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	22ff      	movs	r2, #255	; 0xff
 8006178:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800617c:	f001 fa12 	bl	80075a4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006180:	f001 f9e0 	bl	8007544 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800618a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800618c:	e011      	b.n	80061b2 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	691b      	ldr	r3, [r3, #16]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d012      	beq.n	80061bc <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	3310      	adds	r3, #16
 800619a:	4618      	mov	r0, r3
 800619c:	f000 fcc4 	bl	8006b28 <xTaskRemoveFromEventList>
 80061a0:	4603      	mov	r3, r0
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d001      	beq.n	80061aa <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80061a6:	f000 fd99 	bl	8006cdc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80061aa:	7bbb      	ldrb	r3, [r7, #14]
 80061ac:	3b01      	subs	r3, #1
 80061ae:	b2db      	uxtb	r3, r3
 80061b0:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80061b2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	dce9      	bgt.n	800618e <prvUnlockQueue+0x60>
 80061ba:	e000      	b.n	80061be <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80061bc:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	22ff      	movs	r2, #255	; 0xff
 80061c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80061c6:	f001 f9ed 	bl	80075a4 <vPortExitCritical>
}
 80061ca:	bf00      	nop
 80061cc:	3710      	adds	r7, #16
 80061ce:	46bd      	mov	sp, r7
 80061d0:	bd80      	pop	{r7, pc}

080061d2 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80061d2:	b580      	push	{r7, lr}
 80061d4:	b084      	sub	sp, #16
 80061d6:	af00      	add	r7, sp, #0
 80061d8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80061da:	f001 f9b3 	bl	8007544 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d102      	bne.n	80061ec <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80061e6:	2301      	movs	r3, #1
 80061e8:	60fb      	str	r3, [r7, #12]
 80061ea:	e001      	b.n	80061f0 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80061ec:	2300      	movs	r3, #0
 80061ee:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80061f0:	f001 f9d8 	bl	80075a4 <vPortExitCritical>

	return xReturn;
 80061f4:	68fb      	ldr	r3, [r7, #12]
}
 80061f6:	4618      	mov	r0, r3
 80061f8:	3710      	adds	r7, #16
 80061fa:	46bd      	mov	sp, r7
 80061fc:	bd80      	pop	{r7, pc}

080061fe <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80061fe:	b580      	push	{r7, lr}
 8006200:	b084      	sub	sp, #16
 8006202:	af00      	add	r7, sp, #0
 8006204:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006206:	f001 f99d 	bl	8007544 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006212:	429a      	cmp	r2, r3
 8006214:	d102      	bne.n	800621c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006216:	2301      	movs	r3, #1
 8006218:	60fb      	str	r3, [r7, #12]
 800621a:	e001      	b.n	8006220 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800621c:	2300      	movs	r3, #0
 800621e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006220:	f001 f9c0 	bl	80075a4 <vPortExitCritical>

	return xReturn;
 8006224:	68fb      	ldr	r3, [r7, #12]
}
 8006226:	4618      	mov	r0, r3
 8006228:	3710      	adds	r7, #16
 800622a:	46bd      	mov	sp, r7
 800622c:	bd80      	pop	{r7, pc}
	...

08006230 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8006230:	b480      	push	{r7}
 8006232:	b085      	sub	sp, #20
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006238:	2300      	movs	r3, #0
 800623a:	60fb      	str	r3, [r7, #12]
 800623c:	e016      	b.n	800626c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800623e:	4a10      	ldr	r2, [pc, #64]	; (8006280 <vQueueUnregisterQueue+0x50>)
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	00db      	lsls	r3, r3, #3
 8006244:	4413      	add	r3, r2
 8006246:	685b      	ldr	r3, [r3, #4]
 8006248:	687a      	ldr	r2, [r7, #4]
 800624a:	429a      	cmp	r2, r3
 800624c:	d10b      	bne.n	8006266 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800624e:	4a0c      	ldr	r2, [pc, #48]	; (8006280 <vQueueUnregisterQueue+0x50>)
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	2100      	movs	r1, #0
 8006254:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8006258:	4a09      	ldr	r2, [pc, #36]	; (8006280 <vQueueUnregisterQueue+0x50>)
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	00db      	lsls	r3, r3, #3
 800625e:	4413      	add	r3, r2
 8006260:	2200      	movs	r2, #0
 8006262:	605a      	str	r2, [r3, #4]
				break;
 8006264:	e006      	b.n	8006274 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	3301      	adds	r3, #1
 800626a:	60fb      	str	r3, [r7, #12]
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	2b07      	cmp	r3, #7
 8006270:	d9e5      	bls.n	800623e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8006272:	bf00      	nop
 8006274:	bf00      	nop
 8006276:	3714      	adds	r7, #20
 8006278:	46bd      	mov	sp, r7
 800627a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627e:	4770      	bx	lr
 8006280:	20005020 	.word	0x20005020

08006284 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006284:	b580      	push	{r7, lr}
 8006286:	b08e      	sub	sp, #56	; 0x38
 8006288:	af04      	add	r7, sp, #16
 800628a:	60f8      	str	r0, [r7, #12]
 800628c:	60b9      	str	r1, [r7, #8]
 800628e:	607a      	str	r2, [r7, #4]
 8006290:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006292:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006294:	2b00      	cmp	r3, #0
 8006296:	d10a      	bne.n	80062ae <xTaskCreateStatic+0x2a>
	__asm volatile
 8006298:	f04f 0350 	mov.w	r3, #80	; 0x50
 800629c:	f383 8811 	msr	BASEPRI, r3
 80062a0:	f3bf 8f6f 	isb	sy
 80062a4:	f3bf 8f4f 	dsb	sy
 80062a8:	623b      	str	r3, [r7, #32]
}
 80062aa:	bf00      	nop
 80062ac:	e7fe      	b.n	80062ac <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80062ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d10a      	bne.n	80062ca <xTaskCreateStatic+0x46>
	__asm volatile
 80062b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062b8:	f383 8811 	msr	BASEPRI, r3
 80062bc:	f3bf 8f6f 	isb	sy
 80062c0:	f3bf 8f4f 	dsb	sy
 80062c4:	61fb      	str	r3, [r7, #28]
}
 80062c6:	bf00      	nop
 80062c8:	e7fe      	b.n	80062c8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80062ca:	23b4      	movs	r3, #180	; 0xb4
 80062cc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80062ce:	693b      	ldr	r3, [r7, #16]
 80062d0:	2bb4      	cmp	r3, #180	; 0xb4
 80062d2:	d00a      	beq.n	80062ea <xTaskCreateStatic+0x66>
	__asm volatile
 80062d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062d8:	f383 8811 	msr	BASEPRI, r3
 80062dc:	f3bf 8f6f 	isb	sy
 80062e0:	f3bf 8f4f 	dsb	sy
 80062e4:	61bb      	str	r3, [r7, #24]
}
 80062e6:	bf00      	nop
 80062e8:	e7fe      	b.n	80062e8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80062ea:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80062ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d01e      	beq.n	8006330 <xTaskCreateStatic+0xac>
 80062f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d01b      	beq.n	8006330 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80062f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062fa:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80062fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006300:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006304:	2202      	movs	r2, #2
 8006306:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800630a:	2300      	movs	r3, #0
 800630c:	9303      	str	r3, [sp, #12]
 800630e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006310:	9302      	str	r3, [sp, #8]
 8006312:	f107 0314 	add.w	r3, r7, #20
 8006316:	9301      	str	r3, [sp, #4]
 8006318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800631a:	9300      	str	r3, [sp, #0]
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	687a      	ldr	r2, [r7, #4]
 8006320:	68b9      	ldr	r1, [r7, #8]
 8006322:	68f8      	ldr	r0, [r7, #12]
 8006324:	f000 f850 	bl	80063c8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006328:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800632a:	f000 f8eb 	bl	8006504 <prvAddNewTaskToReadyList>
 800632e:	e001      	b.n	8006334 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006330:	2300      	movs	r3, #0
 8006332:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006334:	697b      	ldr	r3, [r7, #20]
	}
 8006336:	4618      	mov	r0, r3
 8006338:	3728      	adds	r7, #40	; 0x28
 800633a:	46bd      	mov	sp, r7
 800633c:	bd80      	pop	{r7, pc}

0800633e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800633e:	b580      	push	{r7, lr}
 8006340:	b08c      	sub	sp, #48	; 0x30
 8006342:	af04      	add	r7, sp, #16
 8006344:	60f8      	str	r0, [r7, #12]
 8006346:	60b9      	str	r1, [r7, #8]
 8006348:	603b      	str	r3, [r7, #0]
 800634a:	4613      	mov	r3, r2
 800634c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800634e:	88fb      	ldrh	r3, [r7, #6]
 8006350:	009b      	lsls	r3, r3, #2
 8006352:	4618      	mov	r0, r3
 8006354:	f001 fa18 	bl	8007788 <pvPortMalloc>
 8006358:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800635a:	697b      	ldr	r3, [r7, #20]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d00e      	beq.n	800637e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006360:	20b4      	movs	r0, #180	; 0xb4
 8006362:	f001 fa11 	bl	8007788 <pvPortMalloc>
 8006366:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006368:	69fb      	ldr	r3, [r7, #28]
 800636a:	2b00      	cmp	r3, #0
 800636c:	d003      	beq.n	8006376 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800636e:	69fb      	ldr	r3, [r7, #28]
 8006370:	697a      	ldr	r2, [r7, #20]
 8006372:	631a      	str	r2, [r3, #48]	; 0x30
 8006374:	e005      	b.n	8006382 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006376:	6978      	ldr	r0, [r7, #20]
 8006378:	f001 fad2 	bl	8007920 <vPortFree>
 800637c:	e001      	b.n	8006382 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800637e:	2300      	movs	r3, #0
 8006380:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006382:	69fb      	ldr	r3, [r7, #28]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d017      	beq.n	80063b8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006388:	69fb      	ldr	r3, [r7, #28]
 800638a:	2200      	movs	r2, #0
 800638c:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006390:	88fa      	ldrh	r2, [r7, #6]
 8006392:	2300      	movs	r3, #0
 8006394:	9303      	str	r3, [sp, #12]
 8006396:	69fb      	ldr	r3, [r7, #28]
 8006398:	9302      	str	r3, [sp, #8]
 800639a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800639c:	9301      	str	r3, [sp, #4]
 800639e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063a0:	9300      	str	r3, [sp, #0]
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	68b9      	ldr	r1, [r7, #8]
 80063a6:	68f8      	ldr	r0, [r7, #12]
 80063a8:	f000 f80e 	bl	80063c8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80063ac:	69f8      	ldr	r0, [r7, #28]
 80063ae:	f000 f8a9 	bl	8006504 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80063b2:	2301      	movs	r3, #1
 80063b4:	61bb      	str	r3, [r7, #24]
 80063b6:	e002      	b.n	80063be <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80063b8:	f04f 33ff 	mov.w	r3, #4294967295
 80063bc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80063be:	69bb      	ldr	r3, [r7, #24]
	}
 80063c0:	4618      	mov	r0, r3
 80063c2:	3720      	adds	r7, #32
 80063c4:	46bd      	mov	sp, r7
 80063c6:	bd80      	pop	{r7, pc}

080063c8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b088      	sub	sp, #32
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	60f8      	str	r0, [r7, #12]
 80063d0:	60b9      	str	r1, [r7, #8]
 80063d2:	607a      	str	r2, [r7, #4]
 80063d4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80063d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80063e0:	3b01      	subs	r3, #1
 80063e2:	009b      	lsls	r3, r3, #2
 80063e4:	4413      	add	r3, r2
 80063e6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80063e8:	69bb      	ldr	r3, [r7, #24]
 80063ea:	f023 0307 	bic.w	r3, r3, #7
 80063ee:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80063f0:	69bb      	ldr	r3, [r7, #24]
 80063f2:	f003 0307 	and.w	r3, r3, #7
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d00a      	beq.n	8006410 <prvInitialiseNewTask+0x48>
	__asm volatile
 80063fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063fe:	f383 8811 	msr	BASEPRI, r3
 8006402:	f3bf 8f6f 	isb	sy
 8006406:	f3bf 8f4f 	dsb	sy
 800640a:	617b      	str	r3, [r7, #20]
}
 800640c:	bf00      	nop
 800640e:	e7fe      	b.n	800640e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006410:	68bb      	ldr	r3, [r7, #8]
 8006412:	2b00      	cmp	r3, #0
 8006414:	d01f      	beq.n	8006456 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006416:	2300      	movs	r3, #0
 8006418:	61fb      	str	r3, [r7, #28]
 800641a:	e012      	b.n	8006442 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800641c:	68ba      	ldr	r2, [r7, #8]
 800641e:	69fb      	ldr	r3, [r7, #28]
 8006420:	4413      	add	r3, r2
 8006422:	7819      	ldrb	r1, [r3, #0]
 8006424:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006426:	69fb      	ldr	r3, [r7, #28]
 8006428:	4413      	add	r3, r2
 800642a:	3334      	adds	r3, #52	; 0x34
 800642c:	460a      	mov	r2, r1
 800642e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006430:	68ba      	ldr	r2, [r7, #8]
 8006432:	69fb      	ldr	r3, [r7, #28]
 8006434:	4413      	add	r3, r2
 8006436:	781b      	ldrb	r3, [r3, #0]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d006      	beq.n	800644a <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800643c:	69fb      	ldr	r3, [r7, #28]
 800643e:	3301      	adds	r3, #1
 8006440:	61fb      	str	r3, [r7, #28]
 8006442:	69fb      	ldr	r3, [r7, #28]
 8006444:	2b0f      	cmp	r3, #15
 8006446:	d9e9      	bls.n	800641c <prvInitialiseNewTask+0x54>
 8006448:	e000      	b.n	800644c <prvInitialiseNewTask+0x84>
			{
				break;
 800644a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800644c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800644e:	2200      	movs	r2, #0
 8006450:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006454:	e003      	b.n	800645e <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006458:	2200      	movs	r2, #0
 800645a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800645e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006460:	2b06      	cmp	r3, #6
 8006462:	d901      	bls.n	8006468 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006464:	2306      	movs	r3, #6
 8006466:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800646a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800646c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800646e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006470:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006472:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006474:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006476:	2200      	movs	r2, #0
 8006478:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800647a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800647c:	3304      	adds	r3, #4
 800647e:	4618      	mov	r0, r3
 8006480:	f7fe fea1 	bl	80051c6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006484:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006486:	3318      	adds	r3, #24
 8006488:	4618      	mov	r0, r3
 800648a:	f7fe fe9c 	bl	80051c6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800648e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006490:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006492:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006496:	f1c3 0207 	rsb	r2, r3, #7
 800649a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800649c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800649e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80064a2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80064a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064a6:	2200      	movs	r2, #0
 80064a8:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80064ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064ae:	2200      	movs	r2, #0
 80064b0:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80064b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064b6:	334c      	adds	r3, #76	; 0x4c
 80064b8:	2260      	movs	r2, #96	; 0x60
 80064ba:	2100      	movs	r1, #0
 80064bc:	4618      	mov	r0, r3
 80064be:	f011 fee4 	bl	801828a <memset>
 80064c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064c4:	4a0c      	ldr	r2, [pc, #48]	; (80064f8 <prvInitialiseNewTask+0x130>)
 80064c6:	651a      	str	r2, [r3, #80]	; 0x50
 80064c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064ca:	4a0c      	ldr	r2, [pc, #48]	; (80064fc <prvInitialiseNewTask+0x134>)
 80064cc:	655a      	str	r2, [r3, #84]	; 0x54
 80064ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064d0:	4a0b      	ldr	r2, [pc, #44]	; (8006500 <prvInitialiseNewTask+0x138>)
 80064d2:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80064d4:	683a      	ldr	r2, [r7, #0]
 80064d6:	68f9      	ldr	r1, [r7, #12]
 80064d8:	69b8      	ldr	r0, [r7, #24]
 80064da:	f000 ff07 	bl	80072ec <pxPortInitialiseStack>
 80064de:	4602      	mov	r2, r0
 80064e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064e2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80064e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d002      	beq.n	80064f0 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80064ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80064ee:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80064f0:	bf00      	nop
 80064f2:	3720      	adds	r7, #32
 80064f4:	46bd      	mov	sp, r7
 80064f6:	bd80      	pop	{r7, pc}
 80064f8:	080270a0 	.word	0x080270a0
 80064fc:	080270c0 	.word	0x080270c0
 8006500:	08027080 	.word	0x08027080

08006504 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006504:	b580      	push	{r7, lr}
 8006506:	b082      	sub	sp, #8
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800650c:	f001 f81a 	bl	8007544 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006510:	4b2a      	ldr	r3, [pc, #168]	; (80065bc <prvAddNewTaskToReadyList+0xb8>)
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	3301      	adds	r3, #1
 8006516:	4a29      	ldr	r2, [pc, #164]	; (80065bc <prvAddNewTaskToReadyList+0xb8>)
 8006518:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800651a:	4b29      	ldr	r3, [pc, #164]	; (80065c0 <prvAddNewTaskToReadyList+0xbc>)
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d109      	bne.n	8006536 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006522:	4a27      	ldr	r2, [pc, #156]	; (80065c0 <prvAddNewTaskToReadyList+0xbc>)
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006528:	4b24      	ldr	r3, [pc, #144]	; (80065bc <prvAddNewTaskToReadyList+0xb8>)
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	2b01      	cmp	r3, #1
 800652e:	d110      	bne.n	8006552 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006530:	f000 fbf8 	bl	8006d24 <prvInitialiseTaskLists>
 8006534:	e00d      	b.n	8006552 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006536:	4b23      	ldr	r3, [pc, #140]	; (80065c4 <prvAddNewTaskToReadyList+0xc0>)
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	2b00      	cmp	r3, #0
 800653c:	d109      	bne.n	8006552 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800653e:	4b20      	ldr	r3, [pc, #128]	; (80065c0 <prvAddNewTaskToReadyList+0xbc>)
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006548:	429a      	cmp	r2, r3
 800654a:	d802      	bhi.n	8006552 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800654c:	4a1c      	ldr	r2, [pc, #112]	; (80065c0 <prvAddNewTaskToReadyList+0xbc>)
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006552:	4b1d      	ldr	r3, [pc, #116]	; (80065c8 <prvAddNewTaskToReadyList+0xc4>)
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	3301      	adds	r3, #1
 8006558:	4a1b      	ldr	r2, [pc, #108]	; (80065c8 <prvAddNewTaskToReadyList+0xc4>)
 800655a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006560:	2201      	movs	r2, #1
 8006562:	409a      	lsls	r2, r3
 8006564:	4b19      	ldr	r3, [pc, #100]	; (80065cc <prvAddNewTaskToReadyList+0xc8>)
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	4313      	orrs	r3, r2
 800656a:	4a18      	ldr	r2, [pc, #96]	; (80065cc <prvAddNewTaskToReadyList+0xc8>)
 800656c:	6013      	str	r3, [r2, #0]
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006572:	4613      	mov	r3, r2
 8006574:	009b      	lsls	r3, r3, #2
 8006576:	4413      	add	r3, r2
 8006578:	009b      	lsls	r3, r3, #2
 800657a:	4a15      	ldr	r2, [pc, #84]	; (80065d0 <prvAddNewTaskToReadyList+0xcc>)
 800657c:	441a      	add	r2, r3
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	3304      	adds	r3, #4
 8006582:	4619      	mov	r1, r3
 8006584:	4610      	mov	r0, r2
 8006586:	f7fe fe2b 	bl	80051e0 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800658a:	f001 f80b 	bl	80075a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800658e:	4b0d      	ldr	r3, [pc, #52]	; (80065c4 <prvAddNewTaskToReadyList+0xc0>)
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d00e      	beq.n	80065b4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006596:	4b0a      	ldr	r3, [pc, #40]	; (80065c0 <prvAddNewTaskToReadyList+0xbc>)
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065a0:	429a      	cmp	r2, r3
 80065a2:	d207      	bcs.n	80065b4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80065a4:	4b0b      	ldr	r3, [pc, #44]	; (80065d4 <prvAddNewTaskToReadyList+0xd0>)
 80065a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80065aa:	601a      	str	r2, [r3, #0]
 80065ac:	f3bf 8f4f 	dsb	sy
 80065b0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80065b4:	bf00      	nop
 80065b6:	3708      	adds	r7, #8
 80065b8:	46bd      	mov	sp, r7
 80065ba:	bd80      	pop	{r7, pc}
 80065bc:	20005160 	.word	0x20005160
 80065c0:	20005060 	.word	0x20005060
 80065c4:	2000516c 	.word	0x2000516c
 80065c8:	2000517c 	.word	0x2000517c
 80065cc:	20005168 	.word	0x20005168
 80065d0:	20005064 	.word	0x20005064
 80065d4:	e000ed04 	.word	0xe000ed04

080065d8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80065d8:	b580      	push	{r7, lr}
 80065da:	b084      	sub	sp, #16
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80065e0:	2300      	movs	r3, #0
 80065e2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d017      	beq.n	800661a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80065ea:	4b13      	ldr	r3, [pc, #76]	; (8006638 <vTaskDelay+0x60>)
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d00a      	beq.n	8006608 <vTaskDelay+0x30>
	__asm volatile
 80065f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065f6:	f383 8811 	msr	BASEPRI, r3
 80065fa:	f3bf 8f6f 	isb	sy
 80065fe:	f3bf 8f4f 	dsb	sy
 8006602:	60bb      	str	r3, [r7, #8]
}
 8006604:	bf00      	nop
 8006606:	e7fe      	b.n	8006606 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006608:	f000 f884 	bl	8006714 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800660c:	2100      	movs	r1, #0
 800660e:	6878      	ldr	r0, [r7, #4]
 8006610:	f000 fe06 	bl	8007220 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006614:	f000 f88c 	bl	8006730 <xTaskResumeAll>
 8006618:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d107      	bne.n	8006630 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006620:	4b06      	ldr	r3, [pc, #24]	; (800663c <vTaskDelay+0x64>)
 8006622:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006626:	601a      	str	r2, [r3, #0]
 8006628:	f3bf 8f4f 	dsb	sy
 800662c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006630:	bf00      	nop
 8006632:	3710      	adds	r7, #16
 8006634:	46bd      	mov	sp, r7
 8006636:	bd80      	pop	{r7, pc}
 8006638:	20005188 	.word	0x20005188
 800663c:	e000ed04 	.word	0xe000ed04

08006640 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006640:	b580      	push	{r7, lr}
 8006642:	b08a      	sub	sp, #40	; 0x28
 8006644:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006646:	2300      	movs	r3, #0
 8006648:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800664a:	2300      	movs	r3, #0
 800664c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800664e:	463a      	mov	r2, r7
 8006650:	1d39      	adds	r1, r7, #4
 8006652:	f107 0308 	add.w	r3, r7, #8
 8006656:	4618      	mov	r0, r3
 8006658:	f7f9 ffb4 	bl	80005c4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800665c:	6839      	ldr	r1, [r7, #0]
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	68ba      	ldr	r2, [r7, #8]
 8006662:	9202      	str	r2, [sp, #8]
 8006664:	9301      	str	r3, [sp, #4]
 8006666:	2300      	movs	r3, #0
 8006668:	9300      	str	r3, [sp, #0]
 800666a:	2300      	movs	r3, #0
 800666c:	460a      	mov	r2, r1
 800666e:	4921      	ldr	r1, [pc, #132]	; (80066f4 <vTaskStartScheduler+0xb4>)
 8006670:	4821      	ldr	r0, [pc, #132]	; (80066f8 <vTaskStartScheduler+0xb8>)
 8006672:	f7ff fe07 	bl	8006284 <xTaskCreateStatic>
 8006676:	4603      	mov	r3, r0
 8006678:	4a20      	ldr	r2, [pc, #128]	; (80066fc <vTaskStartScheduler+0xbc>)
 800667a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800667c:	4b1f      	ldr	r3, [pc, #124]	; (80066fc <vTaskStartScheduler+0xbc>)
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d002      	beq.n	800668a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006684:	2301      	movs	r3, #1
 8006686:	617b      	str	r3, [r7, #20]
 8006688:	e001      	b.n	800668e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800668a:	2300      	movs	r3, #0
 800668c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800668e:	697b      	ldr	r3, [r7, #20]
 8006690:	2b01      	cmp	r3, #1
 8006692:	d11b      	bne.n	80066cc <vTaskStartScheduler+0x8c>
	__asm volatile
 8006694:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006698:	f383 8811 	msr	BASEPRI, r3
 800669c:	f3bf 8f6f 	isb	sy
 80066a0:	f3bf 8f4f 	dsb	sy
 80066a4:	613b      	str	r3, [r7, #16]
}
 80066a6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80066a8:	4b15      	ldr	r3, [pc, #84]	; (8006700 <vTaskStartScheduler+0xc0>)
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	334c      	adds	r3, #76	; 0x4c
 80066ae:	4a15      	ldr	r2, [pc, #84]	; (8006704 <vTaskStartScheduler+0xc4>)
 80066b0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80066b2:	4b15      	ldr	r3, [pc, #84]	; (8006708 <vTaskStartScheduler+0xc8>)
 80066b4:	f04f 32ff 	mov.w	r2, #4294967295
 80066b8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80066ba:	4b14      	ldr	r3, [pc, #80]	; (800670c <vTaskStartScheduler+0xcc>)
 80066bc:	2201      	movs	r2, #1
 80066be:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80066c0:	4b13      	ldr	r3, [pc, #76]	; (8006710 <vTaskStartScheduler+0xd0>)
 80066c2:	2200      	movs	r2, #0
 80066c4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80066c6:	f000 fe9b 	bl	8007400 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80066ca:	e00e      	b.n	80066ea <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80066cc:	697b      	ldr	r3, [r7, #20]
 80066ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066d2:	d10a      	bne.n	80066ea <vTaskStartScheduler+0xaa>
	__asm volatile
 80066d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066d8:	f383 8811 	msr	BASEPRI, r3
 80066dc:	f3bf 8f6f 	isb	sy
 80066e0:	f3bf 8f4f 	dsb	sy
 80066e4:	60fb      	str	r3, [r7, #12]
}
 80066e6:	bf00      	nop
 80066e8:	e7fe      	b.n	80066e8 <vTaskStartScheduler+0xa8>
}
 80066ea:	bf00      	nop
 80066ec:	3718      	adds	r7, #24
 80066ee:	46bd      	mov	sp, r7
 80066f0:	bd80      	pop	{r7, pc}
 80066f2:	bf00      	nop
 80066f4:	08019348 	.word	0x08019348
 80066f8:	08006cf5 	.word	0x08006cf5
 80066fc:	20005184 	.word	0x20005184
 8006700:	20005060 	.word	0x20005060
 8006704:	20000034 	.word	0x20000034
 8006708:	20005180 	.word	0x20005180
 800670c:	2000516c 	.word	0x2000516c
 8006710:	20005164 	.word	0x20005164

08006714 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006714:	b480      	push	{r7}
 8006716:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006718:	4b04      	ldr	r3, [pc, #16]	; (800672c <vTaskSuspendAll+0x18>)
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	3301      	adds	r3, #1
 800671e:	4a03      	ldr	r2, [pc, #12]	; (800672c <vTaskSuspendAll+0x18>)
 8006720:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006722:	bf00      	nop
 8006724:	46bd      	mov	sp, r7
 8006726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672a:	4770      	bx	lr
 800672c:	20005188 	.word	0x20005188

08006730 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006730:	b580      	push	{r7, lr}
 8006732:	b084      	sub	sp, #16
 8006734:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006736:	2300      	movs	r3, #0
 8006738:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800673a:	2300      	movs	r3, #0
 800673c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800673e:	4b41      	ldr	r3, [pc, #260]	; (8006844 <xTaskResumeAll+0x114>)
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	2b00      	cmp	r3, #0
 8006744:	d10a      	bne.n	800675c <xTaskResumeAll+0x2c>
	__asm volatile
 8006746:	f04f 0350 	mov.w	r3, #80	; 0x50
 800674a:	f383 8811 	msr	BASEPRI, r3
 800674e:	f3bf 8f6f 	isb	sy
 8006752:	f3bf 8f4f 	dsb	sy
 8006756:	603b      	str	r3, [r7, #0]
}
 8006758:	bf00      	nop
 800675a:	e7fe      	b.n	800675a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800675c:	f000 fef2 	bl	8007544 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006760:	4b38      	ldr	r3, [pc, #224]	; (8006844 <xTaskResumeAll+0x114>)
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	3b01      	subs	r3, #1
 8006766:	4a37      	ldr	r2, [pc, #220]	; (8006844 <xTaskResumeAll+0x114>)
 8006768:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800676a:	4b36      	ldr	r3, [pc, #216]	; (8006844 <xTaskResumeAll+0x114>)
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	2b00      	cmp	r3, #0
 8006770:	d161      	bne.n	8006836 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006772:	4b35      	ldr	r3, [pc, #212]	; (8006848 <xTaskResumeAll+0x118>)
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	2b00      	cmp	r3, #0
 8006778:	d05d      	beq.n	8006836 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800677a:	e02e      	b.n	80067da <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800677c:	4b33      	ldr	r3, [pc, #204]	; (800684c <xTaskResumeAll+0x11c>)
 800677e:	68db      	ldr	r3, [r3, #12]
 8006780:	68db      	ldr	r3, [r3, #12]
 8006782:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	3318      	adds	r3, #24
 8006788:	4618      	mov	r0, r3
 800678a:	f7fe fd86 	bl	800529a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	3304      	adds	r3, #4
 8006792:	4618      	mov	r0, r3
 8006794:	f7fe fd81 	bl	800529a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800679c:	2201      	movs	r2, #1
 800679e:	409a      	lsls	r2, r3
 80067a0:	4b2b      	ldr	r3, [pc, #172]	; (8006850 <xTaskResumeAll+0x120>)
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	4313      	orrs	r3, r2
 80067a6:	4a2a      	ldr	r2, [pc, #168]	; (8006850 <xTaskResumeAll+0x120>)
 80067a8:	6013      	str	r3, [r2, #0]
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067ae:	4613      	mov	r3, r2
 80067b0:	009b      	lsls	r3, r3, #2
 80067b2:	4413      	add	r3, r2
 80067b4:	009b      	lsls	r3, r3, #2
 80067b6:	4a27      	ldr	r2, [pc, #156]	; (8006854 <xTaskResumeAll+0x124>)
 80067b8:	441a      	add	r2, r3
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	3304      	adds	r3, #4
 80067be:	4619      	mov	r1, r3
 80067c0:	4610      	mov	r0, r2
 80067c2:	f7fe fd0d 	bl	80051e0 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067ca:	4b23      	ldr	r3, [pc, #140]	; (8006858 <xTaskResumeAll+0x128>)
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067d0:	429a      	cmp	r2, r3
 80067d2:	d302      	bcc.n	80067da <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80067d4:	4b21      	ldr	r3, [pc, #132]	; (800685c <xTaskResumeAll+0x12c>)
 80067d6:	2201      	movs	r2, #1
 80067d8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80067da:	4b1c      	ldr	r3, [pc, #112]	; (800684c <xTaskResumeAll+0x11c>)
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d1cc      	bne.n	800677c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d001      	beq.n	80067ec <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80067e8:	f000 fb3e 	bl	8006e68 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80067ec:	4b1c      	ldr	r3, [pc, #112]	; (8006860 <xTaskResumeAll+0x130>)
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d010      	beq.n	800681a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80067f8:	f000 f858 	bl	80068ac <xTaskIncrementTick>
 80067fc:	4603      	mov	r3, r0
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d002      	beq.n	8006808 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8006802:	4b16      	ldr	r3, [pc, #88]	; (800685c <xTaskResumeAll+0x12c>)
 8006804:	2201      	movs	r2, #1
 8006806:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	3b01      	subs	r3, #1
 800680c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d1f1      	bne.n	80067f8 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8006814:	4b12      	ldr	r3, [pc, #72]	; (8006860 <xTaskResumeAll+0x130>)
 8006816:	2200      	movs	r2, #0
 8006818:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800681a:	4b10      	ldr	r3, [pc, #64]	; (800685c <xTaskResumeAll+0x12c>)
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d009      	beq.n	8006836 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006822:	2301      	movs	r3, #1
 8006824:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006826:	4b0f      	ldr	r3, [pc, #60]	; (8006864 <xTaskResumeAll+0x134>)
 8006828:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800682c:	601a      	str	r2, [r3, #0]
 800682e:	f3bf 8f4f 	dsb	sy
 8006832:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006836:	f000 feb5 	bl	80075a4 <vPortExitCritical>

	return xAlreadyYielded;
 800683a:	68bb      	ldr	r3, [r7, #8]
}
 800683c:	4618      	mov	r0, r3
 800683e:	3710      	adds	r7, #16
 8006840:	46bd      	mov	sp, r7
 8006842:	bd80      	pop	{r7, pc}
 8006844:	20005188 	.word	0x20005188
 8006848:	20005160 	.word	0x20005160
 800684c:	20005120 	.word	0x20005120
 8006850:	20005168 	.word	0x20005168
 8006854:	20005064 	.word	0x20005064
 8006858:	20005060 	.word	0x20005060
 800685c:	20005174 	.word	0x20005174
 8006860:	20005170 	.word	0x20005170
 8006864:	e000ed04 	.word	0xe000ed04

08006868 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006868:	b480      	push	{r7}
 800686a:	b083      	sub	sp, #12
 800686c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800686e:	4b05      	ldr	r3, [pc, #20]	; (8006884 <xTaskGetTickCount+0x1c>)
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006874:	687b      	ldr	r3, [r7, #4]
}
 8006876:	4618      	mov	r0, r3
 8006878:	370c      	adds	r7, #12
 800687a:	46bd      	mov	sp, r7
 800687c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006880:	4770      	bx	lr
 8006882:	bf00      	nop
 8006884:	20005164 	.word	0x20005164

08006888 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8006888:	b580      	push	{r7, lr}
 800688a:	b082      	sub	sp, #8
 800688c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800688e:	f000 ff3b 	bl	8007708 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8006892:	2300      	movs	r3, #0
 8006894:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8006896:	4b04      	ldr	r3, [pc, #16]	; (80068a8 <xTaskGetTickCountFromISR+0x20>)
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800689c:	683b      	ldr	r3, [r7, #0]
}
 800689e:	4618      	mov	r0, r3
 80068a0:	3708      	adds	r7, #8
 80068a2:	46bd      	mov	sp, r7
 80068a4:	bd80      	pop	{r7, pc}
 80068a6:	bf00      	nop
 80068a8:	20005164 	.word	0x20005164

080068ac <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80068ac:	b580      	push	{r7, lr}
 80068ae:	b086      	sub	sp, #24
 80068b0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80068b2:	2300      	movs	r3, #0
 80068b4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80068b6:	4b4e      	ldr	r3, [pc, #312]	; (80069f0 <xTaskIncrementTick+0x144>)
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	f040 808e 	bne.w	80069dc <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80068c0:	4b4c      	ldr	r3, [pc, #304]	; (80069f4 <xTaskIncrementTick+0x148>)
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	3301      	adds	r3, #1
 80068c6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80068c8:	4a4a      	ldr	r2, [pc, #296]	; (80069f4 <xTaskIncrementTick+0x148>)
 80068ca:	693b      	ldr	r3, [r7, #16]
 80068cc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80068ce:	693b      	ldr	r3, [r7, #16]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d120      	bne.n	8006916 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80068d4:	4b48      	ldr	r3, [pc, #288]	; (80069f8 <xTaskIncrementTick+0x14c>)
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d00a      	beq.n	80068f4 <xTaskIncrementTick+0x48>
	__asm volatile
 80068de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068e2:	f383 8811 	msr	BASEPRI, r3
 80068e6:	f3bf 8f6f 	isb	sy
 80068ea:	f3bf 8f4f 	dsb	sy
 80068ee:	603b      	str	r3, [r7, #0]
}
 80068f0:	bf00      	nop
 80068f2:	e7fe      	b.n	80068f2 <xTaskIncrementTick+0x46>
 80068f4:	4b40      	ldr	r3, [pc, #256]	; (80069f8 <xTaskIncrementTick+0x14c>)
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	60fb      	str	r3, [r7, #12]
 80068fa:	4b40      	ldr	r3, [pc, #256]	; (80069fc <xTaskIncrementTick+0x150>)
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	4a3e      	ldr	r2, [pc, #248]	; (80069f8 <xTaskIncrementTick+0x14c>)
 8006900:	6013      	str	r3, [r2, #0]
 8006902:	4a3e      	ldr	r2, [pc, #248]	; (80069fc <xTaskIncrementTick+0x150>)
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	6013      	str	r3, [r2, #0]
 8006908:	4b3d      	ldr	r3, [pc, #244]	; (8006a00 <xTaskIncrementTick+0x154>)
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	3301      	adds	r3, #1
 800690e:	4a3c      	ldr	r2, [pc, #240]	; (8006a00 <xTaskIncrementTick+0x154>)
 8006910:	6013      	str	r3, [r2, #0]
 8006912:	f000 faa9 	bl	8006e68 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006916:	4b3b      	ldr	r3, [pc, #236]	; (8006a04 <xTaskIncrementTick+0x158>)
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	693a      	ldr	r2, [r7, #16]
 800691c:	429a      	cmp	r2, r3
 800691e:	d348      	bcc.n	80069b2 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006920:	4b35      	ldr	r3, [pc, #212]	; (80069f8 <xTaskIncrementTick+0x14c>)
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	2b00      	cmp	r3, #0
 8006928:	d104      	bne.n	8006934 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800692a:	4b36      	ldr	r3, [pc, #216]	; (8006a04 <xTaskIncrementTick+0x158>)
 800692c:	f04f 32ff 	mov.w	r2, #4294967295
 8006930:	601a      	str	r2, [r3, #0]
					break;
 8006932:	e03e      	b.n	80069b2 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006934:	4b30      	ldr	r3, [pc, #192]	; (80069f8 <xTaskIncrementTick+0x14c>)
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	68db      	ldr	r3, [r3, #12]
 800693a:	68db      	ldr	r3, [r3, #12]
 800693c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800693e:	68bb      	ldr	r3, [r7, #8]
 8006940:	685b      	ldr	r3, [r3, #4]
 8006942:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006944:	693a      	ldr	r2, [r7, #16]
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	429a      	cmp	r2, r3
 800694a:	d203      	bcs.n	8006954 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800694c:	4a2d      	ldr	r2, [pc, #180]	; (8006a04 <xTaskIncrementTick+0x158>)
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006952:	e02e      	b.n	80069b2 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006954:	68bb      	ldr	r3, [r7, #8]
 8006956:	3304      	adds	r3, #4
 8006958:	4618      	mov	r0, r3
 800695a:	f7fe fc9e 	bl	800529a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800695e:	68bb      	ldr	r3, [r7, #8]
 8006960:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006962:	2b00      	cmp	r3, #0
 8006964:	d004      	beq.n	8006970 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006966:	68bb      	ldr	r3, [r7, #8]
 8006968:	3318      	adds	r3, #24
 800696a:	4618      	mov	r0, r3
 800696c:	f7fe fc95 	bl	800529a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006970:	68bb      	ldr	r3, [r7, #8]
 8006972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006974:	2201      	movs	r2, #1
 8006976:	409a      	lsls	r2, r3
 8006978:	4b23      	ldr	r3, [pc, #140]	; (8006a08 <xTaskIncrementTick+0x15c>)
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	4313      	orrs	r3, r2
 800697e:	4a22      	ldr	r2, [pc, #136]	; (8006a08 <xTaskIncrementTick+0x15c>)
 8006980:	6013      	str	r3, [r2, #0]
 8006982:	68bb      	ldr	r3, [r7, #8]
 8006984:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006986:	4613      	mov	r3, r2
 8006988:	009b      	lsls	r3, r3, #2
 800698a:	4413      	add	r3, r2
 800698c:	009b      	lsls	r3, r3, #2
 800698e:	4a1f      	ldr	r2, [pc, #124]	; (8006a0c <xTaskIncrementTick+0x160>)
 8006990:	441a      	add	r2, r3
 8006992:	68bb      	ldr	r3, [r7, #8]
 8006994:	3304      	adds	r3, #4
 8006996:	4619      	mov	r1, r3
 8006998:	4610      	mov	r0, r2
 800699a:	f7fe fc21 	bl	80051e0 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800699e:	68bb      	ldr	r3, [r7, #8]
 80069a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069a2:	4b1b      	ldr	r3, [pc, #108]	; (8006a10 <xTaskIncrementTick+0x164>)
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069a8:	429a      	cmp	r2, r3
 80069aa:	d3b9      	bcc.n	8006920 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80069ac:	2301      	movs	r3, #1
 80069ae:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80069b0:	e7b6      	b.n	8006920 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80069b2:	4b17      	ldr	r3, [pc, #92]	; (8006a10 <xTaskIncrementTick+0x164>)
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069b8:	4914      	ldr	r1, [pc, #80]	; (8006a0c <xTaskIncrementTick+0x160>)
 80069ba:	4613      	mov	r3, r2
 80069bc:	009b      	lsls	r3, r3, #2
 80069be:	4413      	add	r3, r2
 80069c0:	009b      	lsls	r3, r3, #2
 80069c2:	440b      	add	r3, r1
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	2b01      	cmp	r3, #1
 80069c8:	d901      	bls.n	80069ce <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80069ca:	2301      	movs	r3, #1
 80069cc:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80069ce:	4b11      	ldr	r3, [pc, #68]	; (8006a14 <xTaskIncrementTick+0x168>)
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d007      	beq.n	80069e6 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80069d6:	2301      	movs	r3, #1
 80069d8:	617b      	str	r3, [r7, #20]
 80069da:	e004      	b.n	80069e6 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80069dc:	4b0e      	ldr	r3, [pc, #56]	; (8006a18 <xTaskIncrementTick+0x16c>)
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	3301      	adds	r3, #1
 80069e2:	4a0d      	ldr	r2, [pc, #52]	; (8006a18 <xTaskIncrementTick+0x16c>)
 80069e4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80069e6:	697b      	ldr	r3, [r7, #20]
}
 80069e8:	4618      	mov	r0, r3
 80069ea:	3718      	adds	r7, #24
 80069ec:	46bd      	mov	sp, r7
 80069ee:	bd80      	pop	{r7, pc}
 80069f0:	20005188 	.word	0x20005188
 80069f4:	20005164 	.word	0x20005164
 80069f8:	20005118 	.word	0x20005118
 80069fc:	2000511c 	.word	0x2000511c
 8006a00:	20005178 	.word	0x20005178
 8006a04:	20005180 	.word	0x20005180
 8006a08:	20005168 	.word	0x20005168
 8006a0c:	20005064 	.word	0x20005064
 8006a10:	20005060 	.word	0x20005060
 8006a14:	20005174 	.word	0x20005174
 8006a18:	20005170 	.word	0x20005170

08006a1c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006a1c:	b480      	push	{r7}
 8006a1e:	b087      	sub	sp, #28
 8006a20:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006a22:	4b29      	ldr	r3, [pc, #164]	; (8006ac8 <vTaskSwitchContext+0xac>)
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d003      	beq.n	8006a32 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006a2a:	4b28      	ldr	r3, [pc, #160]	; (8006acc <vTaskSwitchContext+0xb0>)
 8006a2c:	2201      	movs	r2, #1
 8006a2e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006a30:	e044      	b.n	8006abc <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8006a32:	4b26      	ldr	r3, [pc, #152]	; (8006acc <vTaskSwitchContext+0xb0>)
 8006a34:	2200      	movs	r2, #0
 8006a36:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a38:	4b25      	ldr	r3, [pc, #148]	; (8006ad0 <vTaskSwitchContext+0xb4>)
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	fab3 f383 	clz	r3, r3
 8006a44:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006a46:	7afb      	ldrb	r3, [r7, #11]
 8006a48:	f1c3 031f 	rsb	r3, r3, #31
 8006a4c:	617b      	str	r3, [r7, #20]
 8006a4e:	4921      	ldr	r1, [pc, #132]	; (8006ad4 <vTaskSwitchContext+0xb8>)
 8006a50:	697a      	ldr	r2, [r7, #20]
 8006a52:	4613      	mov	r3, r2
 8006a54:	009b      	lsls	r3, r3, #2
 8006a56:	4413      	add	r3, r2
 8006a58:	009b      	lsls	r3, r3, #2
 8006a5a:	440b      	add	r3, r1
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d10a      	bne.n	8006a78 <vTaskSwitchContext+0x5c>
	__asm volatile
 8006a62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a66:	f383 8811 	msr	BASEPRI, r3
 8006a6a:	f3bf 8f6f 	isb	sy
 8006a6e:	f3bf 8f4f 	dsb	sy
 8006a72:	607b      	str	r3, [r7, #4]
}
 8006a74:	bf00      	nop
 8006a76:	e7fe      	b.n	8006a76 <vTaskSwitchContext+0x5a>
 8006a78:	697a      	ldr	r2, [r7, #20]
 8006a7a:	4613      	mov	r3, r2
 8006a7c:	009b      	lsls	r3, r3, #2
 8006a7e:	4413      	add	r3, r2
 8006a80:	009b      	lsls	r3, r3, #2
 8006a82:	4a14      	ldr	r2, [pc, #80]	; (8006ad4 <vTaskSwitchContext+0xb8>)
 8006a84:	4413      	add	r3, r2
 8006a86:	613b      	str	r3, [r7, #16]
 8006a88:	693b      	ldr	r3, [r7, #16]
 8006a8a:	685b      	ldr	r3, [r3, #4]
 8006a8c:	685a      	ldr	r2, [r3, #4]
 8006a8e:	693b      	ldr	r3, [r7, #16]
 8006a90:	605a      	str	r2, [r3, #4]
 8006a92:	693b      	ldr	r3, [r7, #16]
 8006a94:	685a      	ldr	r2, [r3, #4]
 8006a96:	693b      	ldr	r3, [r7, #16]
 8006a98:	3308      	adds	r3, #8
 8006a9a:	429a      	cmp	r2, r3
 8006a9c:	d104      	bne.n	8006aa8 <vTaskSwitchContext+0x8c>
 8006a9e:	693b      	ldr	r3, [r7, #16]
 8006aa0:	685b      	ldr	r3, [r3, #4]
 8006aa2:	685a      	ldr	r2, [r3, #4]
 8006aa4:	693b      	ldr	r3, [r7, #16]
 8006aa6:	605a      	str	r2, [r3, #4]
 8006aa8:	693b      	ldr	r3, [r7, #16]
 8006aaa:	685b      	ldr	r3, [r3, #4]
 8006aac:	68db      	ldr	r3, [r3, #12]
 8006aae:	4a0a      	ldr	r2, [pc, #40]	; (8006ad8 <vTaskSwitchContext+0xbc>)
 8006ab0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006ab2:	4b09      	ldr	r3, [pc, #36]	; (8006ad8 <vTaskSwitchContext+0xbc>)
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	334c      	adds	r3, #76	; 0x4c
 8006ab8:	4a08      	ldr	r2, [pc, #32]	; (8006adc <vTaskSwitchContext+0xc0>)
 8006aba:	6013      	str	r3, [r2, #0]
}
 8006abc:	bf00      	nop
 8006abe:	371c      	adds	r7, #28
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac6:	4770      	bx	lr
 8006ac8:	20005188 	.word	0x20005188
 8006acc:	20005174 	.word	0x20005174
 8006ad0:	20005168 	.word	0x20005168
 8006ad4:	20005064 	.word	0x20005064
 8006ad8:	20005060 	.word	0x20005060
 8006adc:	20000034 	.word	0x20000034

08006ae0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	b084      	sub	sp, #16
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
 8006ae8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d10a      	bne.n	8006b06 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006af0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006af4:	f383 8811 	msr	BASEPRI, r3
 8006af8:	f3bf 8f6f 	isb	sy
 8006afc:	f3bf 8f4f 	dsb	sy
 8006b00:	60fb      	str	r3, [r7, #12]
}
 8006b02:	bf00      	nop
 8006b04:	e7fe      	b.n	8006b04 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006b06:	4b07      	ldr	r3, [pc, #28]	; (8006b24 <vTaskPlaceOnEventList+0x44>)
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	3318      	adds	r3, #24
 8006b0c:	4619      	mov	r1, r3
 8006b0e:	6878      	ldr	r0, [r7, #4]
 8006b10:	f7fe fb8a 	bl	8005228 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006b14:	2101      	movs	r1, #1
 8006b16:	6838      	ldr	r0, [r7, #0]
 8006b18:	f000 fb82 	bl	8007220 <prvAddCurrentTaskToDelayedList>
}
 8006b1c:	bf00      	nop
 8006b1e:	3710      	adds	r7, #16
 8006b20:	46bd      	mov	sp, r7
 8006b22:	bd80      	pop	{r7, pc}
 8006b24:	20005060 	.word	0x20005060

08006b28 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b086      	sub	sp, #24
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	68db      	ldr	r3, [r3, #12]
 8006b34:	68db      	ldr	r3, [r3, #12]
 8006b36:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006b38:	693b      	ldr	r3, [r7, #16]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d10a      	bne.n	8006b54 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006b3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b42:	f383 8811 	msr	BASEPRI, r3
 8006b46:	f3bf 8f6f 	isb	sy
 8006b4a:	f3bf 8f4f 	dsb	sy
 8006b4e:	60fb      	str	r3, [r7, #12]
}
 8006b50:	bf00      	nop
 8006b52:	e7fe      	b.n	8006b52 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006b54:	693b      	ldr	r3, [r7, #16]
 8006b56:	3318      	adds	r3, #24
 8006b58:	4618      	mov	r0, r3
 8006b5a:	f7fe fb9e 	bl	800529a <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006b5e:	4b1d      	ldr	r3, [pc, #116]	; (8006bd4 <xTaskRemoveFromEventList+0xac>)
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d11c      	bne.n	8006ba0 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006b66:	693b      	ldr	r3, [r7, #16]
 8006b68:	3304      	adds	r3, #4
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	f7fe fb95 	bl	800529a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006b70:	693b      	ldr	r3, [r7, #16]
 8006b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b74:	2201      	movs	r2, #1
 8006b76:	409a      	lsls	r2, r3
 8006b78:	4b17      	ldr	r3, [pc, #92]	; (8006bd8 <xTaskRemoveFromEventList+0xb0>)
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	4313      	orrs	r3, r2
 8006b7e:	4a16      	ldr	r2, [pc, #88]	; (8006bd8 <xTaskRemoveFromEventList+0xb0>)
 8006b80:	6013      	str	r3, [r2, #0]
 8006b82:	693b      	ldr	r3, [r7, #16]
 8006b84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b86:	4613      	mov	r3, r2
 8006b88:	009b      	lsls	r3, r3, #2
 8006b8a:	4413      	add	r3, r2
 8006b8c:	009b      	lsls	r3, r3, #2
 8006b8e:	4a13      	ldr	r2, [pc, #76]	; (8006bdc <xTaskRemoveFromEventList+0xb4>)
 8006b90:	441a      	add	r2, r3
 8006b92:	693b      	ldr	r3, [r7, #16]
 8006b94:	3304      	adds	r3, #4
 8006b96:	4619      	mov	r1, r3
 8006b98:	4610      	mov	r0, r2
 8006b9a:	f7fe fb21 	bl	80051e0 <vListInsertEnd>
 8006b9e:	e005      	b.n	8006bac <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006ba0:	693b      	ldr	r3, [r7, #16]
 8006ba2:	3318      	adds	r3, #24
 8006ba4:	4619      	mov	r1, r3
 8006ba6:	480e      	ldr	r0, [pc, #56]	; (8006be0 <xTaskRemoveFromEventList+0xb8>)
 8006ba8:	f7fe fb1a 	bl	80051e0 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006bac:	693b      	ldr	r3, [r7, #16]
 8006bae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bb0:	4b0c      	ldr	r3, [pc, #48]	; (8006be4 <xTaskRemoveFromEventList+0xbc>)
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bb6:	429a      	cmp	r2, r3
 8006bb8:	d905      	bls.n	8006bc6 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006bba:	2301      	movs	r3, #1
 8006bbc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006bbe:	4b0a      	ldr	r3, [pc, #40]	; (8006be8 <xTaskRemoveFromEventList+0xc0>)
 8006bc0:	2201      	movs	r2, #1
 8006bc2:	601a      	str	r2, [r3, #0]
 8006bc4:	e001      	b.n	8006bca <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8006bc6:	2300      	movs	r3, #0
 8006bc8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006bca:	697b      	ldr	r3, [r7, #20]
}
 8006bcc:	4618      	mov	r0, r3
 8006bce:	3718      	adds	r7, #24
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	bd80      	pop	{r7, pc}
 8006bd4:	20005188 	.word	0x20005188
 8006bd8:	20005168 	.word	0x20005168
 8006bdc:	20005064 	.word	0x20005064
 8006be0:	20005120 	.word	0x20005120
 8006be4:	20005060 	.word	0x20005060
 8006be8:	20005174 	.word	0x20005174

08006bec <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006bec:	b480      	push	{r7}
 8006bee:	b083      	sub	sp, #12
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006bf4:	4b06      	ldr	r3, [pc, #24]	; (8006c10 <vTaskInternalSetTimeOutState+0x24>)
 8006bf6:	681a      	ldr	r2, [r3, #0]
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006bfc:	4b05      	ldr	r3, [pc, #20]	; (8006c14 <vTaskInternalSetTimeOutState+0x28>)
 8006bfe:	681a      	ldr	r2, [r3, #0]
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	605a      	str	r2, [r3, #4]
}
 8006c04:	bf00      	nop
 8006c06:	370c      	adds	r7, #12
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0e:	4770      	bx	lr
 8006c10:	20005178 	.word	0x20005178
 8006c14:	20005164 	.word	0x20005164

08006c18 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006c18:	b580      	push	{r7, lr}
 8006c1a:	b088      	sub	sp, #32
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
 8006c20:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d10a      	bne.n	8006c3e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006c28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c2c:	f383 8811 	msr	BASEPRI, r3
 8006c30:	f3bf 8f6f 	isb	sy
 8006c34:	f3bf 8f4f 	dsb	sy
 8006c38:	613b      	str	r3, [r7, #16]
}
 8006c3a:	bf00      	nop
 8006c3c:	e7fe      	b.n	8006c3c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006c3e:	683b      	ldr	r3, [r7, #0]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d10a      	bne.n	8006c5a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006c44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c48:	f383 8811 	msr	BASEPRI, r3
 8006c4c:	f3bf 8f6f 	isb	sy
 8006c50:	f3bf 8f4f 	dsb	sy
 8006c54:	60fb      	str	r3, [r7, #12]
}
 8006c56:	bf00      	nop
 8006c58:	e7fe      	b.n	8006c58 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006c5a:	f000 fc73 	bl	8007544 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006c5e:	4b1d      	ldr	r3, [pc, #116]	; (8006cd4 <xTaskCheckForTimeOut+0xbc>)
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	685b      	ldr	r3, [r3, #4]
 8006c68:	69ba      	ldr	r2, [r7, #24]
 8006c6a:	1ad3      	subs	r3, r2, r3
 8006c6c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006c6e:	683b      	ldr	r3, [r7, #0]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c76:	d102      	bne.n	8006c7e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006c78:	2300      	movs	r3, #0
 8006c7a:	61fb      	str	r3, [r7, #28]
 8006c7c:	e023      	b.n	8006cc6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681a      	ldr	r2, [r3, #0]
 8006c82:	4b15      	ldr	r3, [pc, #84]	; (8006cd8 <xTaskCheckForTimeOut+0xc0>)
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	429a      	cmp	r2, r3
 8006c88:	d007      	beq.n	8006c9a <xTaskCheckForTimeOut+0x82>
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	685b      	ldr	r3, [r3, #4]
 8006c8e:	69ba      	ldr	r2, [r7, #24]
 8006c90:	429a      	cmp	r2, r3
 8006c92:	d302      	bcc.n	8006c9a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006c94:	2301      	movs	r3, #1
 8006c96:	61fb      	str	r3, [r7, #28]
 8006c98:	e015      	b.n	8006cc6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006c9a:	683b      	ldr	r3, [r7, #0]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	697a      	ldr	r2, [r7, #20]
 8006ca0:	429a      	cmp	r2, r3
 8006ca2:	d20b      	bcs.n	8006cbc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006ca4:	683b      	ldr	r3, [r7, #0]
 8006ca6:	681a      	ldr	r2, [r3, #0]
 8006ca8:	697b      	ldr	r3, [r7, #20]
 8006caa:	1ad2      	subs	r2, r2, r3
 8006cac:	683b      	ldr	r3, [r7, #0]
 8006cae:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006cb0:	6878      	ldr	r0, [r7, #4]
 8006cb2:	f7ff ff9b 	bl	8006bec <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	61fb      	str	r3, [r7, #28]
 8006cba:	e004      	b.n	8006cc6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006cbc:	683b      	ldr	r3, [r7, #0]
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006cc2:	2301      	movs	r3, #1
 8006cc4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006cc6:	f000 fc6d 	bl	80075a4 <vPortExitCritical>

	return xReturn;
 8006cca:	69fb      	ldr	r3, [r7, #28]
}
 8006ccc:	4618      	mov	r0, r3
 8006cce:	3720      	adds	r7, #32
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	bd80      	pop	{r7, pc}
 8006cd4:	20005164 	.word	0x20005164
 8006cd8:	20005178 	.word	0x20005178

08006cdc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006cdc:	b480      	push	{r7}
 8006cde:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006ce0:	4b03      	ldr	r3, [pc, #12]	; (8006cf0 <vTaskMissedYield+0x14>)
 8006ce2:	2201      	movs	r2, #1
 8006ce4:	601a      	str	r2, [r3, #0]
}
 8006ce6:	bf00      	nop
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cee:	4770      	bx	lr
 8006cf0:	20005174 	.word	0x20005174

08006cf4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b082      	sub	sp, #8
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006cfc:	f000 f852 	bl	8006da4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006d00:	4b06      	ldr	r3, [pc, #24]	; (8006d1c <prvIdleTask+0x28>)
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	2b01      	cmp	r3, #1
 8006d06:	d9f9      	bls.n	8006cfc <prvIdleTask+0x8>
			{
				taskYIELD();
 8006d08:	4b05      	ldr	r3, [pc, #20]	; (8006d20 <prvIdleTask+0x2c>)
 8006d0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d0e:	601a      	str	r2, [r3, #0]
 8006d10:	f3bf 8f4f 	dsb	sy
 8006d14:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006d18:	e7f0      	b.n	8006cfc <prvIdleTask+0x8>
 8006d1a:	bf00      	nop
 8006d1c:	20005064 	.word	0x20005064
 8006d20:	e000ed04 	.word	0xe000ed04

08006d24 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006d24:	b580      	push	{r7, lr}
 8006d26:	b082      	sub	sp, #8
 8006d28:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	607b      	str	r3, [r7, #4]
 8006d2e:	e00c      	b.n	8006d4a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006d30:	687a      	ldr	r2, [r7, #4]
 8006d32:	4613      	mov	r3, r2
 8006d34:	009b      	lsls	r3, r3, #2
 8006d36:	4413      	add	r3, r2
 8006d38:	009b      	lsls	r3, r3, #2
 8006d3a:	4a12      	ldr	r2, [pc, #72]	; (8006d84 <prvInitialiseTaskLists+0x60>)
 8006d3c:	4413      	add	r3, r2
 8006d3e:	4618      	mov	r0, r3
 8006d40:	f7fe fa21 	bl	8005186 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	3301      	adds	r3, #1
 8006d48:	607b      	str	r3, [r7, #4]
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	2b06      	cmp	r3, #6
 8006d4e:	d9ef      	bls.n	8006d30 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006d50:	480d      	ldr	r0, [pc, #52]	; (8006d88 <prvInitialiseTaskLists+0x64>)
 8006d52:	f7fe fa18 	bl	8005186 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006d56:	480d      	ldr	r0, [pc, #52]	; (8006d8c <prvInitialiseTaskLists+0x68>)
 8006d58:	f7fe fa15 	bl	8005186 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006d5c:	480c      	ldr	r0, [pc, #48]	; (8006d90 <prvInitialiseTaskLists+0x6c>)
 8006d5e:	f7fe fa12 	bl	8005186 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006d62:	480c      	ldr	r0, [pc, #48]	; (8006d94 <prvInitialiseTaskLists+0x70>)
 8006d64:	f7fe fa0f 	bl	8005186 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006d68:	480b      	ldr	r0, [pc, #44]	; (8006d98 <prvInitialiseTaskLists+0x74>)
 8006d6a:	f7fe fa0c 	bl	8005186 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006d6e:	4b0b      	ldr	r3, [pc, #44]	; (8006d9c <prvInitialiseTaskLists+0x78>)
 8006d70:	4a05      	ldr	r2, [pc, #20]	; (8006d88 <prvInitialiseTaskLists+0x64>)
 8006d72:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006d74:	4b0a      	ldr	r3, [pc, #40]	; (8006da0 <prvInitialiseTaskLists+0x7c>)
 8006d76:	4a05      	ldr	r2, [pc, #20]	; (8006d8c <prvInitialiseTaskLists+0x68>)
 8006d78:	601a      	str	r2, [r3, #0]
}
 8006d7a:	bf00      	nop
 8006d7c:	3708      	adds	r7, #8
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	bd80      	pop	{r7, pc}
 8006d82:	bf00      	nop
 8006d84:	20005064 	.word	0x20005064
 8006d88:	200050f0 	.word	0x200050f0
 8006d8c:	20005104 	.word	0x20005104
 8006d90:	20005120 	.word	0x20005120
 8006d94:	20005134 	.word	0x20005134
 8006d98:	2000514c 	.word	0x2000514c
 8006d9c:	20005118 	.word	0x20005118
 8006da0:	2000511c 	.word	0x2000511c

08006da4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006da4:	b580      	push	{r7, lr}
 8006da6:	b082      	sub	sp, #8
 8006da8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006daa:	e019      	b.n	8006de0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006dac:	f000 fbca 	bl	8007544 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006db0:	4b10      	ldr	r3, [pc, #64]	; (8006df4 <prvCheckTasksWaitingTermination+0x50>)
 8006db2:	68db      	ldr	r3, [r3, #12]
 8006db4:	68db      	ldr	r3, [r3, #12]
 8006db6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	3304      	adds	r3, #4
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	f7fe fa6c 	bl	800529a <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006dc2:	4b0d      	ldr	r3, [pc, #52]	; (8006df8 <prvCheckTasksWaitingTermination+0x54>)
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	3b01      	subs	r3, #1
 8006dc8:	4a0b      	ldr	r2, [pc, #44]	; (8006df8 <prvCheckTasksWaitingTermination+0x54>)
 8006dca:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006dcc:	4b0b      	ldr	r3, [pc, #44]	; (8006dfc <prvCheckTasksWaitingTermination+0x58>)
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	3b01      	subs	r3, #1
 8006dd2:	4a0a      	ldr	r2, [pc, #40]	; (8006dfc <prvCheckTasksWaitingTermination+0x58>)
 8006dd4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006dd6:	f000 fbe5 	bl	80075a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006dda:	6878      	ldr	r0, [r7, #4]
 8006ddc:	f000 f810 	bl	8006e00 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006de0:	4b06      	ldr	r3, [pc, #24]	; (8006dfc <prvCheckTasksWaitingTermination+0x58>)
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d1e1      	bne.n	8006dac <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006de8:	bf00      	nop
 8006dea:	bf00      	nop
 8006dec:	3708      	adds	r7, #8
 8006dee:	46bd      	mov	sp, r7
 8006df0:	bd80      	pop	{r7, pc}
 8006df2:	bf00      	nop
 8006df4:	20005134 	.word	0x20005134
 8006df8:	20005160 	.word	0x20005160
 8006dfc:	20005148 	.word	0x20005148

08006e00 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b084      	sub	sp, #16
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	334c      	adds	r3, #76	; 0x4c
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	f011 fb3d 	bl	801848c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d108      	bne.n	8006e2e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e20:	4618      	mov	r0, r3
 8006e22:	f000 fd7d 	bl	8007920 <vPortFree>
				vPortFree( pxTCB );
 8006e26:	6878      	ldr	r0, [r7, #4]
 8006e28:	f000 fd7a 	bl	8007920 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006e2c:	e018      	b.n	8006e60 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8006e34:	2b01      	cmp	r3, #1
 8006e36:	d103      	bne.n	8006e40 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006e38:	6878      	ldr	r0, [r7, #4]
 8006e3a:	f000 fd71 	bl	8007920 <vPortFree>
	}
 8006e3e:	e00f      	b.n	8006e60 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8006e46:	2b02      	cmp	r3, #2
 8006e48:	d00a      	beq.n	8006e60 <prvDeleteTCB+0x60>
	__asm volatile
 8006e4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e4e:	f383 8811 	msr	BASEPRI, r3
 8006e52:	f3bf 8f6f 	isb	sy
 8006e56:	f3bf 8f4f 	dsb	sy
 8006e5a:	60fb      	str	r3, [r7, #12]
}
 8006e5c:	bf00      	nop
 8006e5e:	e7fe      	b.n	8006e5e <prvDeleteTCB+0x5e>
	}
 8006e60:	bf00      	nop
 8006e62:	3710      	adds	r7, #16
 8006e64:	46bd      	mov	sp, r7
 8006e66:	bd80      	pop	{r7, pc}

08006e68 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006e68:	b480      	push	{r7}
 8006e6a:	b083      	sub	sp, #12
 8006e6c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006e6e:	4b0c      	ldr	r3, [pc, #48]	; (8006ea0 <prvResetNextTaskUnblockTime+0x38>)
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d104      	bne.n	8006e82 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006e78:	4b0a      	ldr	r3, [pc, #40]	; (8006ea4 <prvResetNextTaskUnblockTime+0x3c>)
 8006e7a:	f04f 32ff 	mov.w	r2, #4294967295
 8006e7e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006e80:	e008      	b.n	8006e94 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e82:	4b07      	ldr	r3, [pc, #28]	; (8006ea0 <prvResetNextTaskUnblockTime+0x38>)
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	68db      	ldr	r3, [r3, #12]
 8006e88:	68db      	ldr	r3, [r3, #12]
 8006e8a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	685b      	ldr	r3, [r3, #4]
 8006e90:	4a04      	ldr	r2, [pc, #16]	; (8006ea4 <prvResetNextTaskUnblockTime+0x3c>)
 8006e92:	6013      	str	r3, [r2, #0]
}
 8006e94:	bf00      	nop
 8006e96:	370c      	adds	r7, #12
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9e:	4770      	bx	lr
 8006ea0:	20005118 	.word	0x20005118
 8006ea4:	20005180 	.word	0x20005180

08006ea8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006ea8:	b480      	push	{r7}
 8006eaa:	b083      	sub	sp, #12
 8006eac:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006eae:	4b0b      	ldr	r3, [pc, #44]	; (8006edc <xTaskGetSchedulerState+0x34>)
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d102      	bne.n	8006ebc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006eb6:	2301      	movs	r3, #1
 8006eb8:	607b      	str	r3, [r7, #4]
 8006eba:	e008      	b.n	8006ece <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006ebc:	4b08      	ldr	r3, [pc, #32]	; (8006ee0 <xTaskGetSchedulerState+0x38>)
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d102      	bne.n	8006eca <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006ec4:	2302      	movs	r3, #2
 8006ec6:	607b      	str	r3, [r7, #4]
 8006ec8:	e001      	b.n	8006ece <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006eca:	2300      	movs	r3, #0
 8006ecc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006ece:	687b      	ldr	r3, [r7, #4]
	}
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	370c      	adds	r7, #12
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eda:	4770      	bx	lr
 8006edc:	2000516c 	.word	0x2000516c
 8006ee0:	20005188 	.word	0x20005188

08006ee4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b084      	sub	sp, #16
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d05e      	beq.n	8006fb8 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8006efa:	68bb      	ldr	r3, [r7, #8]
 8006efc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006efe:	4b31      	ldr	r3, [pc, #196]	; (8006fc4 <xTaskPriorityInherit+0xe0>)
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f04:	429a      	cmp	r2, r3
 8006f06:	d24e      	bcs.n	8006fa6 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006f08:	68bb      	ldr	r3, [r7, #8]
 8006f0a:	699b      	ldr	r3, [r3, #24]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	db06      	blt.n	8006f1e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006f10:	4b2c      	ldr	r3, [pc, #176]	; (8006fc4 <xTaskPriorityInherit+0xe0>)
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f16:	f1c3 0207 	rsb	r2, r3, #7
 8006f1a:	68bb      	ldr	r3, [r7, #8]
 8006f1c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8006f1e:	68bb      	ldr	r3, [r7, #8]
 8006f20:	6959      	ldr	r1, [r3, #20]
 8006f22:	68bb      	ldr	r3, [r7, #8]
 8006f24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f26:	4613      	mov	r3, r2
 8006f28:	009b      	lsls	r3, r3, #2
 8006f2a:	4413      	add	r3, r2
 8006f2c:	009b      	lsls	r3, r3, #2
 8006f2e:	4a26      	ldr	r2, [pc, #152]	; (8006fc8 <xTaskPriorityInherit+0xe4>)
 8006f30:	4413      	add	r3, r2
 8006f32:	4299      	cmp	r1, r3
 8006f34:	d12f      	bne.n	8006f96 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006f36:	68bb      	ldr	r3, [r7, #8]
 8006f38:	3304      	adds	r3, #4
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	f7fe f9ad 	bl	800529a <uxListRemove>
 8006f40:	4603      	mov	r3, r0
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d10a      	bne.n	8006f5c <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8006f46:	68bb      	ldr	r3, [r7, #8]
 8006f48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f4a:	2201      	movs	r2, #1
 8006f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8006f50:	43da      	mvns	r2, r3
 8006f52:	4b1e      	ldr	r3, [pc, #120]	; (8006fcc <xTaskPriorityInherit+0xe8>)
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	4013      	ands	r3, r2
 8006f58:	4a1c      	ldr	r2, [pc, #112]	; (8006fcc <xTaskPriorityInherit+0xe8>)
 8006f5a:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006f5c:	4b19      	ldr	r3, [pc, #100]	; (8006fc4 <xTaskPriorityInherit+0xe0>)
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f62:	68bb      	ldr	r3, [r7, #8]
 8006f64:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8006f66:	68bb      	ldr	r3, [r7, #8]
 8006f68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f6a:	2201      	movs	r2, #1
 8006f6c:	409a      	lsls	r2, r3
 8006f6e:	4b17      	ldr	r3, [pc, #92]	; (8006fcc <xTaskPriorityInherit+0xe8>)
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	4313      	orrs	r3, r2
 8006f74:	4a15      	ldr	r2, [pc, #84]	; (8006fcc <xTaskPriorityInherit+0xe8>)
 8006f76:	6013      	str	r3, [r2, #0]
 8006f78:	68bb      	ldr	r3, [r7, #8]
 8006f7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f7c:	4613      	mov	r3, r2
 8006f7e:	009b      	lsls	r3, r3, #2
 8006f80:	4413      	add	r3, r2
 8006f82:	009b      	lsls	r3, r3, #2
 8006f84:	4a10      	ldr	r2, [pc, #64]	; (8006fc8 <xTaskPriorityInherit+0xe4>)
 8006f86:	441a      	add	r2, r3
 8006f88:	68bb      	ldr	r3, [r7, #8]
 8006f8a:	3304      	adds	r3, #4
 8006f8c:	4619      	mov	r1, r3
 8006f8e:	4610      	mov	r0, r2
 8006f90:	f7fe f926 	bl	80051e0 <vListInsertEnd>
 8006f94:	e004      	b.n	8006fa0 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006f96:	4b0b      	ldr	r3, [pc, #44]	; (8006fc4 <xTaskPriorityInherit+0xe0>)
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f9c:	68bb      	ldr	r3, [r7, #8]
 8006f9e:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8006fa0:	2301      	movs	r3, #1
 8006fa2:	60fb      	str	r3, [r7, #12]
 8006fa4:	e008      	b.n	8006fb8 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8006fa6:	68bb      	ldr	r3, [r7, #8]
 8006fa8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006faa:	4b06      	ldr	r3, [pc, #24]	; (8006fc4 <xTaskPriorityInherit+0xe0>)
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fb0:	429a      	cmp	r2, r3
 8006fb2:	d201      	bcs.n	8006fb8 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8006fb4:	2301      	movs	r3, #1
 8006fb6:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006fb8:	68fb      	ldr	r3, [r7, #12]
	}
 8006fba:	4618      	mov	r0, r3
 8006fbc:	3710      	adds	r7, #16
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	bd80      	pop	{r7, pc}
 8006fc2:	bf00      	nop
 8006fc4:	20005060 	.word	0x20005060
 8006fc8:	20005064 	.word	0x20005064
 8006fcc:	20005168 	.word	0x20005168

08006fd0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	b086      	sub	sp, #24
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006fdc:	2300      	movs	r3, #0
 8006fde:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d06e      	beq.n	80070c4 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006fe6:	4b3a      	ldr	r3, [pc, #232]	; (80070d0 <xTaskPriorityDisinherit+0x100>)
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	693a      	ldr	r2, [r7, #16]
 8006fec:	429a      	cmp	r2, r3
 8006fee:	d00a      	beq.n	8007006 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006ff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ff4:	f383 8811 	msr	BASEPRI, r3
 8006ff8:	f3bf 8f6f 	isb	sy
 8006ffc:	f3bf 8f4f 	dsb	sy
 8007000:	60fb      	str	r3, [r7, #12]
}
 8007002:	bf00      	nop
 8007004:	e7fe      	b.n	8007004 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007006:	693b      	ldr	r3, [r7, #16]
 8007008:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800700a:	2b00      	cmp	r3, #0
 800700c:	d10a      	bne.n	8007024 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800700e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007012:	f383 8811 	msr	BASEPRI, r3
 8007016:	f3bf 8f6f 	isb	sy
 800701a:	f3bf 8f4f 	dsb	sy
 800701e:	60bb      	str	r3, [r7, #8]
}
 8007020:	bf00      	nop
 8007022:	e7fe      	b.n	8007022 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007024:	693b      	ldr	r3, [r7, #16]
 8007026:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007028:	1e5a      	subs	r2, r3, #1
 800702a:	693b      	ldr	r3, [r7, #16]
 800702c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800702e:	693b      	ldr	r3, [r7, #16]
 8007030:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007032:	693b      	ldr	r3, [r7, #16]
 8007034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007036:	429a      	cmp	r2, r3
 8007038:	d044      	beq.n	80070c4 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800703a:	693b      	ldr	r3, [r7, #16]
 800703c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800703e:	2b00      	cmp	r3, #0
 8007040:	d140      	bne.n	80070c4 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007042:	693b      	ldr	r3, [r7, #16]
 8007044:	3304      	adds	r3, #4
 8007046:	4618      	mov	r0, r3
 8007048:	f7fe f927 	bl	800529a <uxListRemove>
 800704c:	4603      	mov	r3, r0
 800704e:	2b00      	cmp	r3, #0
 8007050:	d115      	bne.n	800707e <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8007052:	693b      	ldr	r3, [r7, #16]
 8007054:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007056:	491f      	ldr	r1, [pc, #124]	; (80070d4 <xTaskPriorityDisinherit+0x104>)
 8007058:	4613      	mov	r3, r2
 800705a:	009b      	lsls	r3, r3, #2
 800705c:	4413      	add	r3, r2
 800705e:	009b      	lsls	r3, r3, #2
 8007060:	440b      	add	r3, r1
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d10a      	bne.n	800707e <xTaskPriorityDisinherit+0xae>
 8007068:	693b      	ldr	r3, [r7, #16]
 800706a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800706c:	2201      	movs	r2, #1
 800706e:	fa02 f303 	lsl.w	r3, r2, r3
 8007072:	43da      	mvns	r2, r3
 8007074:	4b18      	ldr	r3, [pc, #96]	; (80070d8 <xTaskPriorityDisinherit+0x108>)
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	4013      	ands	r3, r2
 800707a:	4a17      	ldr	r2, [pc, #92]	; (80070d8 <xTaskPriorityDisinherit+0x108>)
 800707c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800707e:	693b      	ldr	r3, [r7, #16]
 8007080:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007082:	693b      	ldr	r3, [r7, #16]
 8007084:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007086:	693b      	ldr	r3, [r7, #16]
 8007088:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800708a:	f1c3 0207 	rsb	r2, r3, #7
 800708e:	693b      	ldr	r3, [r7, #16]
 8007090:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007092:	693b      	ldr	r3, [r7, #16]
 8007094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007096:	2201      	movs	r2, #1
 8007098:	409a      	lsls	r2, r3
 800709a:	4b0f      	ldr	r3, [pc, #60]	; (80070d8 <xTaskPriorityDisinherit+0x108>)
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	4313      	orrs	r3, r2
 80070a0:	4a0d      	ldr	r2, [pc, #52]	; (80070d8 <xTaskPriorityDisinherit+0x108>)
 80070a2:	6013      	str	r3, [r2, #0]
 80070a4:	693b      	ldr	r3, [r7, #16]
 80070a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070a8:	4613      	mov	r3, r2
 80070aa:	009b      	lsls	r3, r3, #2
 80070ac:	4413      	add	r3, r2
 80070ae:	009b      	lsls	r3, r3, #2
 80070b0:	4a08      	ldr	r2, [pc, #32]	; (80070d4 <xTaskPriorityDisinherit+0x104>)
 80070b2:	441a      	add	r2, r3
 80070b4:	693b      	ldr	r3, [r7, #16]
 80070b6:	3304      	adds	r3, #4
 80070b8:	4619      	mov	r1, r3
 80070ba:	4610      	mov	r0, r2
 80070bc:	f7fe f890 	bl	80051e0 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80070c0:	2301      	movs	r3, #1
 80070c2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80070c4:	697b      	ldr	r3, [r7, #20]
	}
 80070c6:	4618      	mov	r0, r3
 80070c8:	3718      	adds	r7, #24
 80070ca:	46bd      	mov	sp, r7
 80070cc:	bd80      	pop	{r7, pc}
 80070ce:	bf00      	nop
 80070d0:	20005060 	.word	0x20005060
 80070d4:	20005064 	.word	0x20005064
 80070d8:	20005168 	.word	0x20005168

080070dc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80070dc:	b580      	push	{r7, lr}
 80070de:	b088      	sub	sp, #32
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	6078      	str	r0, [r7, #4]
 80070e4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80070ea:	2301      	movs	r3, #1
 80070ec:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d077      	beq.n	80071e4 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80070f4:	69bb      	ldr	r3, [r7, #24]
 80070f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d10a      	bne.n	8007112 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 80070fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007100:	f383 8811 	msr	BASEPRI, r3
 8007104:	f3bf 8f6f 	isb	sy
 8007108:	f3bf 8f4f 	dsb	sy
 800710c:	60fb      	str	r3, [r7, #12]
}
 800710e:	bf00      	nop
 8007110:	e7fe      	b.n	8007110 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007112:	69bb      	ldr	r3, [r7, #24]
 8007114:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007116:	683a      	ldr	r2, [r7, #0]
 8007118:	429a      	cmp	r2, r3
 800711a:	d902      	bls.n	8007122 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800711c:	683b      	ldr	r3, [r7, #0]
 800711e:	61fb      	str	r3, [r7, #28]
 8007120:	e002      	b.n	8007128 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8007122:	69bb      	ldr	r3, [r7, #24]
 8007124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007126:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007128:	69bb      	ldr	r3, [r7, #24]
 800712a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800712c:	69fa      	ldr	r2, [r7, #28]
 800712e:	429a      	cmp	r2, r3
 8007130:	d058      	beq.n	80071e4 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007132:	69bb      	ldr	r3, [r7, #24]
 8007134:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007136:	697a      	ldr	r2, [r7, #20]
 8007138:	429a      	cmp	r2, r3
 800713a:	d153      	bne.n	80071e4 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800713c:	4b2b      	ldr	r3, [pc, #172]	; (80071ec <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	69ba      	ldr	r2, [r7, #24]
 8007142:	429a      	cmp	r2, r3
 8007144:	d10a      	bne.n	800715c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8007146:	f04f 0350 	mov.w	r3, #80	; 0x50
 800714a:	f383 8811 	msr	BASEPRI, r3
 800714e:	f3bf 8f6f 	isb	sy
 8007152:	f3bf 8f4f 	dsb	sy
 8007156:	60bb      	str	r3, [r7, #8]
}
 8007158:	bf00      	nop
 800715a:	e7fe      	b.n	800715a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800715c:	69bb      	ldr	r3, [r7, #24]
 800715e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007160:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8007162:	69bb      	ldr	r3, [r7, #24]
 8007164:	69fa      	ldr	r2, [r7, #28]
 8007166:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007168:	69bb      	ldr	r3, [r7, #24]
 800716a:	699b      	ldr	r3, [r3, #24]
 800716c:	2b00      	cmp	r3, #0
 800716e:	db04      	blt.n	800717a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007170:	69fb      	ldr	r3, [r7, #28]
 8007172:	f1c3 0207 	rsb	r2, r3, #7
 8007176:	69bb      	ldr	r3, [r7, #24]
 8007178:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800717a:	69bb      	ldr	r3, [r7, #24]
 800717c:	6959      	ldr	r1, [r3, #20]
 800717e:	693a      	ldr	r2, [r7, #16]
 8007180:	4613      	mov	r3, r2
 8007182:	009b      	lsls	r3, r3, #2
 8007184:	4413      	add	r3, r2
 8007186:	009b      	lsls	r3, r3, #2
 8007188:	4a19      	ldr	r2, [pc, #100]	; (80071f0 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800718a:	4413      	add	r3, r2
 800718c:	4299      	cmp	r1, r3
 800718e:	d129      	bne.n	80071e4 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007190:	69bb      	ldr	r3, [r7, #24]
 8007192:	3304      	adds	r3, #4
 8007194:	4618      	mov	r0, r3
 8007196:	f7fe f880 	bl	800529a <uxListRemove>
 800719a:	4603      	mov	r3, r0
 800719c:	2b00      	cmp	r3, #0
 800719e:	d10a      	bne.n	80071b6 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80071a0:	69bb      	ldr	r3, [r7, #24]
 80071a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071a4:	2201      	movs	r2, #1
 80071a6:	fa02 f303 	lsl.w	r3, r2, r3
 80071aa:	43da      	mvns	r2, r3
 80071ac:	4b11      	ldr	r3, [pc, #68]	; (80071f4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	4013      	ands	r3, r2
 80071b2:	4a10      	ldr	r2, [pc, #64]	; (80071f4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80071b4:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80071b6:	69bb      	ldr	r3, [r7, #24]
 80071b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071ba:	2201      	movs	r2, #1
 80071bc:	409a      	lsls	r2, r3
 80071be:	4b0d      	ldr	r3, [pc, #52]	; (80071f4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	4313      	orrs	r3, r2
 80071c4:	4a0b      	ldr	r2, [pc, #44]	; (80071f4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80071c6:	6013      	str	r3, [r2, #0]
 80071c8:	69bb      	ldr	r3, [r7, #24]
 80071ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071cc:	4613      	mov	r3, r2
 80071ce:	009b      	lsls	r3, r3, #2
 80071d0:	4413      	add	r3, r2
 80071d2:	009b      	lsls	r3, r3, #2
 80071d4:	4a06      	ldr	r2, [pc, #24]	; (80071f0 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 80071d6:	441a      	add	r2, r3
 80071d8:	69bb      	ldr	r3, [r7, #24]
 80071da:	3304      	adds	r3, #4
 80071dc:	4619      	mov	r1, r3
 80071de:	4610      	mov	r0, r2
 80071e0:	f7fd fffe 	bl	80051e0 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80071e4:	bf00      	nop
 80071e6:	3720      	adds	r7, #32
 80071e8:	46bd      	mov	sp, r7
 80071ea:	bd80      	pop	{r7, pc}
 80071ec:	20005060 	.word	0x20005060
 80071f0:	20005064 	.word	0x20005064
 80071f4:	20005168 	.word	0x20005168

080071f8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80071f8:	b480      	push	{r7}
 80071fa:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80071fc:	4b07      	ldr	r3, [pc, #28]	; (800721c <pvTaskIncrementMutexHeldCount+0x24>)
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	2b00      	cmp	r3, #0
 8007202:	d004      	beq.n	800720e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007204:	4b05      	ldr	r3, [pc, #20]	; (800721c <pvTaskIncrementMutexHeldCount+0x24>)
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800720a:	3201      	adds	r2, #1
 800720c:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800720e:	4b03      	ldr	r3, [pc, #12]	; (800721c <pvTaskIncrementMutexHeldCount+0x24>)
 8007210:	681b      	ldr	r3, [r3, #0]
	}
 8007212:	4618      	mov	r0, r3
 8007214:	46bd      	mov	sp, r7
 8007216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721a:	4770      	bx	lr
 800721c:	20005060 	.word	0x20005060

08007220 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007220:	b580      	push	{r7, lr}
 8007222:	b084      	sub	sp, #16
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]
 8007228:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800722a:	4b29      	ldr	r3, [pc, #164]	; (80072d0 <prvAddCurrentTaskToDelayedList+0xb0>)
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007230:	4b28      	ldr	r3, [pc, #160]	; (80072d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	3304      	adds	r3, #4
 8007236:	4618      	mov	r0, r3
 8007238:	f7fe f82f 	bl	800529a <uxListRemove>
 800723c:	4603      	mov	r3, r0
 800723e:	2b00      	cmp	r3, #0
 8007240:	d10b      	bne.n	800725a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8007242:	4b24      	ldr	r3, [pc, #144]	; (80072d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007248:	2201      	movs	r2, #1
 800724a:	fa02 f303 	lsl.w	r3, r2, r3
 800724e:	43da      	mvns	r2, r3
 8007250:	4b21      	ldr	r3, [pc, #132]	; (80072d8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	4013      	ands	r3, r2
 8007256:	4a20      	ldr	r2, [pc, #128]	; (80072d8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007258:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007260:	d10a      	bne.n	8007278 <prvAddCurrentTaskToDelayedList+0x58>
 8007262:	683b      	ldr	r3, [r7, #0]
 8007264:	2b00      	cmp	r3, #0
 8007266:	d007      	beq.n	8007278 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007268:	4b1a      	ldr	r3, [pc, #104]	; (80072d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	3304      	adds	r3, #4
 800726e:	4619      	mov	r1, r3
 8007270:	481a      	ldr	r0, [pc, #104]	; (80072dc <prvAddCurrentTaskToDelayedList+0xbc>)
 8007272:	f7fd ffb5 	bl	80051e0 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007276:	e026      	b.n	80072c6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007278:	68fa      	ldr	r2, [r7, #12]
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	4413      	add	r3, r2
 800727e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007280:	4b14      	ldr	r3, [pc, #80]	; (80072d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	68ba      	ldr	r2, [r7, #8]
 8007286:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007288:	68ba      	ldr	r2, [r7, #8]
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	429a      	cmp	r2, r3
 800728e:	d209      	bcs.n	80072a4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007290:	4b13      	ldr	r3, [pc, #76]	; (80072e0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8007292:	681a      	ldr	r2, [r3, #0]
 8007294:	4b0f      	ldr	r3, [pc, #60]	; (80072d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	3304      	adds	r3, #4
 800729a:	4619      	mov	r1, r3
 800729c:	4610      	mov	r0, r2
 800729e:	f7fd ffc3 	bl	8005228 <vListInsert>
}
 80072a2:	e010      	b.n	80072c6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80072a4:	4b0f      	ldr	r3, [pc, #60]	; (80072e4 <prvAddCurrentTaskToDelayedList+0xc4>)
 80072a6:	681a      	ldr	r2, [r3, #0]
 80072a8:	4b0a      	ldr	r3, [pc, #40]	; (80072d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	3304      	adds	r3, #4
 80072ae:	4619      	mov	r1, r3
 80072b0:	4610      	mov	r0, r2
 80072b2:	f7fd ffb9 	bl	8005228 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80072b6:	4b0c      	ldr	r3, [pc, #48]	; (80072e8 <prvAddCurrentTaskToDelayedList+0xc8>)
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	68ba      	ldr	r2, [r7, #8]
 80072bc:	429a      	cmp	r2, r3
 80072be:	d202      	bcs.n	80072c6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80072c0:	4a09      	ldr	r2, [pc, #36]	; (80072e8 <prvAddCurrentTaskToDelayedList+0xc8>)
 80072c2:	68bb      	ldr	r3, [r7, #8]
 80072c4:	6013      	str	r3, [r2, #0]
}
 80072c6:	bf00      	nop
 80072c8:	3710      	adds	r7, #16
 80072ca:	46bd      	mov	sp, r7
 80072cc:	bd80      	pop	{r7, pc}
 80072ce:	bf00      	nop
 80072d0:	20005164 	.word	0x20005164
 80072d4:	20005060 	.word	0x20005060
 80072d8:	20005168 	.word	0x20005168
 80072dc:	2000514c 	.word	0x2000514c
 80072e0:	2000511c 	.word	0x2000511c
 80072e4:	20005118 	.word	0x20005118
 80072e8:	20005180 	.word	0x20005180

080072ec <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80072ec:	b480      	push	{r7}
 80072ee:	b085      	sub	sp, #20
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	60f8      	str	r0, [r7, #12]
 80072f4:	60b9      	str	r1, [r7, #8]
 80072f6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	3b04      	subs	r3, #4
 80072fc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007304:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	3b04      	subs	r3, #4
 800730a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800730c:	68bb      	ldr	r3, [r7, #8]
 800730e:	f023 0201 	bic.w	r2, r3, #1
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	3b04      	subs	r3, #4
 800731a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800731c:	4a0c      	ldr	r2, [pc, #48]	; (8007350 <pxPortInitialiseStack+0x64>)
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	3b14      	subs	r3, #20
 8007326:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007328:	687a      	ldr	r2, [r7, #4]
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	3b04      	subs	r3, #4
 8007332:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	f06f 0202 	mvn.w	r2, #2
 800733a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	3b20      	subs	r3, #32
 8007340:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007342:	68fb      	ldr	r3, [r7, #12]
}
 8007344:	4618      	mov	r0, r3
 8007346:	3714      	adds	r7, #20
 8007348:	46bd      	mov	sp, r7
 800734a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734e:	4770      	bx	lr
 8007350:	08007355 	.word	0x08007355

08007354 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007354:	b480      	push	{r7}
 8007356:	b085      	sub	sp, #20
 8007358:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800735a:	2300      	movs	r3, #0
 800735c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800735e:	4b12      	ldr	r3, [pc, #72]	; (80073a8 <prvTaskExitError+0x54>)
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007366:	d00a      	beq.n	800737e <prvTaskExitError+0x2a>
	__asm volatile
 8007368:	f04f 0350 	mov.w	r3, #80	; 0x50
 800736c:	f383 8811 	msr	BASEPRI, r3
 8007370:	f3bf 8f6f 	isb	sy
 8007374:	f3bf 8f4f 	dsb	sy
 8007378:	60fb      	str	r3, [r7, #12]
}
 800737a:	bf00      	nop
 800737c:	e7fe      	b.n	800737c <prvTaskExitError+0x28>
	__asm volatile
 800737e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007382:	f383 8811 	msr	BASEPRI, r3
 8007386:	f3bf 8f6f 	isb	sy
 800738a:	f3bf 8f4f 	dsb	sy
 800738e:	60bb      	str	r3, [r7, #8]
}
 8007390:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007392:	bf00      	nop
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d0fc      	beq.n	8007394 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800739a:	bf00      	nop
 800739c:	bf00      	nop
 800739e:	3714      	adds	r7, #20
 80073a0:	46bd      	mov	sp, r7
 80073a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a6:	4770      	bx	lr
 80073a8:	20000020 	.word	0x20000020
 80073ac:	00000000 	.word	0x00000000

080073b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80073b0:	4b07      	ldr	r3, [pc, #28]	; (80073d0 <pxCurrentTCBConst2>)
 80073b2:	6819      	ldr	r1, [r3, #0]
 80073b4:	6808      	ldr	r0, [r1, #0]
 80073b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073ba:	f380 8809 	msr	PSP, r0
 80073be:	f3bf 8f6f 	isb	sy
 80073c2:	f04f 0000 	mov.w	r0, #0
 80073c6:	f380 8811 	msr	BASEPRI, r0
 80073ca:	4770      	bx	lr
 80073cc:	f3af 8000 	nop.w

080073d0 <pxCurrentTCBConst2>:
 80073d0:	20005060 	.word	0x20005060
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80073d4:	bf00      	nop
 80073d6:	bf00      	nop

080073d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80073d8:	4808      	ldr	r0, [pc, #32]	; (80073fc <prvPortStartFirstTask+0x24>)
 80073da:	6800      	ldr	r0, [r0, #0]
 80073dc:	6800      	ldr	r0, [r0, #0]
 80073de:	f380 8808 	msr	MSP, r0
 80073e2:	f04f 0000 	mov.w	r0, #0
 80073e6:	f380 8814 	msr	CONTROL, r0
 80073ea:	b662      	cpsie	i
 80073ec:	b661      	cpsie	f
 80073ee:	f3bf 8f4f 	dsb	sy
 80073f2:	f3bf 8f6f 	isb	sy
 80073f6:	df00      	svc	0
 80073f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80073fa:	bf00      	nop
 80073fc:	e000ed08 	.word	0xe000ed08

08007400 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007400:	b580      	push	{r7, lr}
 8007402:	b086      	sub	sp, #24
 8007404:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007406:	4b46      	ldr	r3, [pc, #280]	; (8007520 <xPortStartScheduler+0x120>)
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	4a46      	ldr	r2, [pc, #280]	; (8007524 <xPortStartScheduler+0x124>)
 800740c:	4293      	cmp	r3, r2
 800740e:	d10a      	bne.n	8007426 <xPortStartScheduler+0x26>
	__asm volatile
 8007410:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007414:	f383 8811 	msr	BASEPRI, r3
 8007418:	f3bf 8f6f 	isb	sy
 800741c:	f3bf 8f4f 	dsb	sy
 8007420:	613b      	str	r3, [r7, #16]
}
 8007422:	bf00      	nop
 8007424:	e7fe      	b.n	8007424 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007426:	4b3e      	ldr	r3, [pc, #248]	; (8007520 <xPortStartScheduler+0x120>)
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	4a3f      	ldr	r2, [pc, #252]	; (8007528 <xPortStartScheduler+0x128>)
 800742c:	4293      	cmp	r3, r2
 800742e:	d10a      	bne.n	8007446 <xPortStartScheduler+0x46>
	__asm volatile
 8007430:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007434:	f383 8811 	msr	BASEPRI, r3
 8007438:	f3bf 8f6f 	isb	sy
 800743c:	f3bf 8f4f 	dsb	sy
 8007440:	60fb      	str	r3, [r7, #12]
}
 8007442:	bf00      	nop
 8007444:	e7fe      	b.n	8007444 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007446:	4b39      	ldr	r3, [pc, #228]	; (800752c <xPortStartScheduler+0x12c>)
 8007448:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800744a:	697b      	ldr	r3, [r7, #20]
 800744c:	781b      	ldrb	r3, [r3, #0]
 800744e:	b2db      	uxtb	r3, r3
 8007450:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007452:	697b      	ldr	r3, [r7, #20]
 8007454:	22ff      	movs	r2, #255	; 0xff
 8007456:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007458:	697b      	ldr	r3, [r7, #20]
 800745a:	781b      	ldrb	r3, [r3, #0]
 800745c:	b2db      	uxtb	r3, r3
 800745e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007460:	78fb      	ldrb	r3, [r7, #3]
 8007462:	b2db      	uxtb	r3, r3
 8007464:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007468:	b2da      	uxtb	r2, r3
 800746a:	4b31      	ldr	r3, [pc, #196]	; (8007530 <xPortStartScheduler+0x130>)
 800746c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800746e:	4b31      	ldr	r3, [pc, #196]	; (8007534 <xPortStartScheduler+0x134>)
 8007470:	2207      	movs	r2, #7
 8007472:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007474:	e009      	b.n	800748a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007476:	4b2f      	ldr	r3, [pc, #188]	; (8007534 <xPortStartScheduler+0x134>)
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	3b01      	subs	r3, #1
 800747c:	4a2d      	ldr	r2, [pc, #180]	; (8007534 <xPortStartScheduler+0x134>)
 800747e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007480:	78fb      	ldrb	r3, [r7, #3]
 8007482:	b2db      	uxtb	r3, r3
 8007484:	005b      	lsls	r3, r3, #1
 8007486:	b2db      	uxtb	r3, r3
 8007488:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800748a:	78fb      	ldrb	r3, [r7, #3]
 800748c:	b2db      	uxtb	r3, r3
 800748e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007492:	2b80      	cmp	r3, #128	; 0x80
 8007494:	d0ef      	beq.n	8007476 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007496:	4b27      	ldr	r3, [pc, #156]	; (8007534 <xPortStartScheduler+0x134>)
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	f1c3 0307 	rsb	r3, r3, #7
 800749e:	2b04      	cmp	r3, #4
 80074a0:	d00a      	beq.n	80074b8 <xPortStartScheduler+0xb8>
	__asm volatile
 80074a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074a6:	f383 8811 	msr	BASEPRI, r3
 80074aa:	f3bf 8f6f 	isb	sy
 80074ae:	f3bf 8f4f 	dsb	sy
 80074b2:	60bb      	str	r3, [r7, #8]
}
 80074b4:	bf00      	nop
 80074b6:	e7fe      	b.n	80074b6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80074b8:	4b1e      	ldr	r3, [pc, #120]	; (8007534 <xPortStartScheduler+0x134>)
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	021b      	lsls	r3, r3, #8
 80074be:	4a1d      	ldr	r2, [pc, #116]	; (8007534 <xPortStartScheduler+0x134>)
 80074c0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80074c2:	4b1c      	ldr	r3, [pc, #112]	; (8007534 <xPortStartScheduler+0x134>)
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80074ca:	4a1a      	ldr	r2, [pc, #104]	; (8007534 <xPortStartScheduler+0x134>)
 80074cc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	b2da      	uxtb	r2, r3
 80074d2:	697b      	ldr	r3, [r7, #20]
 80074d4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80074d6:	4b18      	ldr	r3, [pc, #96]	; (8007538 <xPortStartScheduler+0x138>)
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	4a17      	ldr	r2, [pc, #92]	; (8007538 <xPortStartScheduler+0x138>)
 80074dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80074e0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80074e2:	4b15      	ldr	r3, [pc, #84]	; (8007538 <xPortStartScheduler+0x138>)
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	4a14      	ldr	r2, [pc, #80]	; (8007538 <xPortStartScheduler+0x138>)
 80074e8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80074ec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80074ee:	f000 f8dd 	bl	80076ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80074f2:	4b12      	ldr	r3, [pc, #72]	; (800753c <xPortStartScheduler+0x13c>)
 80074f4:	2200      	movs	r2, #0
 80074f6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80074f8:	f000 f8fc 	bl	80076f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80074fc:	4b10      	ldr	r3, [pc, #64]	; (8007540 <xPortStartScheduler+0x140>)
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	4a0f      	ldr	r2, [pc, #60]	; (8007540 <xPortStartScheduler+0x140>)
 8007502:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007506:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007508:	f7ff ff66 	bl	80073d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800750c:	f7ff fa86 	bl	8006a1c <vTaskSwitchContext>
	prvTaskExitError();
 8007510:	f7ff ff20 	bl	8007354 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007514:	2300      	movs	r3, #0
}
 8007516:	4618      	mov	r0, r3
 8007518:	3718      	adds	r7, #24
 800751a:	46bd      	mov	sp, r7
 800751c:	bd80      	pop	{r7, pc}
 800751e:	bf00      	nop
 8007520:	e000ed00 	.word	0xe000ed00
 8007524:	410fc271 	.word	0x410fc271
 8007528:	410fc270 	.word	0x410fc270
 800752c:	e000e400 	.word	0xe000e400
 8007530:	2000518c 	.word	0x2000518c
 8007534:	20005190 	.word	0x20005190
 8007538:	e000ed20 	.word	0xe000ed20
 800753c:	20000020 	.word	0x20000020
 8007540:	e000ef34 	.word	0xe000ef34

08007544 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007544:	b480      	push	{r7}
 8007546:	b083      	sub	sp, #12
 8007548:	af00      	add	r7, sp, #0
	__asm volatile
 800754a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800754e:	f383 8811 	msr	BASEPRI, r3
 8007552:	f3bf 8f6f 	isb	sy
 8007556:	f3bf 8f4f 	dsb	sy
 800755a:	607b      	str	r3, [r7, #4]
}
 800755c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800755e:	4b0f      	ldr	r3, [pc, #60]	; (800759c <vPortEnterCritical+0x58>)
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	3301      	adds	r3, #1
 8007564:	4a0d      	ldr	r2, [pc, #52]	; (800759c <vPortEnterCritical+0x58>)
 8007566:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007568:	4b0c      	ldr	r3, [pc, #48]	; (800759c <vPortEnterCritical+0x58>)
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	2b01      	cmp	r3, #1
 800756e:	d10f      	bne.n	8007590 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007570:	4b0b      	ldr	r3, [pc, #44]	; (80075a0 <vPortEnterCritical+0x5c>)
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	b2db      	uxtb	r3, r3
 8007576:	2b00      	cmp	r3, #0
 8007578:	d00a      	beq.n	8007590 <vPortEnterCritical+0x4c>
	__asm volatile
 800757a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800757e:	f383 8811 	msr	BASEPRI, r3
 8007582:	f3bf 8f6f 	isb	sy
 8007586:	f3bf 8f4f 	dsb	sy
 800758a:	603b      	str	r3, [r7, #0]
}
 800758c:	bf00      	nop
 800758e:	e7fe      	b.n	800758e <vPortEnterCritical+0x4a>
	}
}
 8007590:	bf00      	nop
 8007592:	370c      	adds	r7, #12
 8007594:	46bd      	mov	sp, r7
 8007596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759a:	4770      	bx	lr
 800759c:	20000020 	.word	0x20000020
 80075a0:	e000ed04 	.word	0xe000ed04

080075a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80075a4:	b480      	push	{r7}
 80075a6:	b083      	sub	sp, #12
 80075a8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80075aa:	4b12      	ldr	r3, [pc, #72]	; (80075f4 <vPortExitCritical+0x50>)
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d10a      	bne.n	80075c8 <vPortExitCritical+0x24>
	__asm volatile
 80075b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075b6:	f383 8811 	msr	BASEPRI, r3
 80075ba:	f3bf 8f6f 	isb	sy
 80075be:	f3bf 8f4f 	dsb	sy
 80075c2:	607b      	str	r3, [r7, #4]
}
 80075c4:	bf00      	nop
 80075c6:	e7fe      	b.n	80075c6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80075c8:	4b0a      	ldr	r3, [pc, #40]	; (80075f4 <vPortExitCritical+0x50>)
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	3b01      	subs	r3, #1
 80075ce:	4a09      	ldr	r2, [pc, #36]	; (80075f4 <vPortExitCritical+0x50>)
 80075d0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80075d2:	4b08      	ldr	r3, [pc, #32]	; (80075f4 <vPortExitCritical+0x50>)
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d105      	bne.n	80075e6 <vPortExitCritical+0x42>
 80075da:	2300      	movs	r3, #0
 80075dc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80075de:	683b      	ldr	r3, [r7, #0]
 80075e0:	f383 8811 	msr	BASEPRI, r3
}
 80075e4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80075e6:	bf00      	nop
 80075e8:	370c      	adds	r7, #12
 80075ea:	46bd      	mov	sp, r7
 80075ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f0:	4770      	bx	lr
 80075f2:	bf00      	nop
 80075f4:	20000020 	.word	0x20000020
	...

08007600 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007600:	f3ef 8009 	mrs	r0, PSP
 8007604:	f3bf 8f6f 	isb	sy
 8007608:	4b15      	ldr	r3, [pc, #84]	; (8007660 <pxCurrentTCBConst>)
 800760a:	681a      	ldr	r2, [r3, #0]
 800760c:	f01e 0f10 	tst.w	lr, #16
 8007610:	bf08      	it	eq
 8007612:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007616:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800761a:	6010      	str	r0, [r2, #0]
 800761c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007620:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007624:	f380 8811 	msr	BASEPRI, r0
 8007628:	f3bf 8f4f 	dsb	sy
 800762c:	f3bf 8f6f 	isb	sy
 8007630:	f7ff f9f4 	bl	8006a1c <vTaskSwitchContext>
 8007634:	f04f 0000 	mov.w	r0, #0
 8007638:	f380 8811 	msr	BASEPRI, r0
 800763c:	bc09      	pop	{r0, r3}
 800763e:	6819      	ldr	r1, [r3, #0]
 8007640:	6808      	ldr	r0, [r1, #0]
 8007642:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007646:	f01e 0f10 	tst.w	lr, #16
 800764a:	bf08      	it	eq
 800764c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007650:	f380 8809 	msr	PSP, r0
 8007654:	f3bf 8f6f 	isb	sy
 8007658:	4770      	bx	lr
 800765a:	bf00      	nop
 800765c:	f3af 8000 	nop.w

08007660 <pxCurrentTCBConst>:
 8007660:	20005060 	.word	0x20005060
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007664:	bf00      	nop
 8007666:	bf00      	nop

08007668 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007668:	b580      	push	{r7, lr}
 800766a:	b082      	sub	sp, #8
 800766c:	af00      	add	r7, sp, #0
	__asm volatile
 800766e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007672:	f383 8811 	msr	BASEPRI, r3
 8007676:	f3bf 8f6f 	isb	sy
 800767a:	f3bf 8f4f 	dsb	sy
 800767e:	607b      	str	r3, [r7, #4]
}
 8007680:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007682:	f7ff f913 	bl	80068ac <xTaskIncrementTick>
 8007686:	4603      	mov	r3, r0
 8007688:	2b00      	cmp	r3, #0
 800768a:	d003      	beq.n	8007694 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800768c:	4b06      	ldr	r3, [pc, #24]	; (80076a8 <SysTick_Handler+0x40>)
 800768e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007692:	601a      	str	r2, [r3, #0]
 8007694:	2300      	movs	r3, #0
 8007696:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007698:	683b      	ldr	r3, [r7, #0]
 800769a:	f383 8811 	msr	BASEPRI, r3
}
 800769e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80076a0:	bf00      	nop
 80076a2:	3708      	adds	r7, #8
 80076a4:	46bd      	mov	sp, r7
 80076a6:	bd80      	pop	{r7, pc}
 80076a8:	e000ed04 	.word	0xe000ed04

080076ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80076ac:	b480      	push	{r7}
 80076ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80076b0:	4b0b      	ldr	r3, [pc, #44]	; (80076e0 <vPortSetupTimerInterrupt+0x34>)
 80076b2:	2200      	movs	r2, #0
 80076b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80076b6:	4b0b      	ldr	r3, [pc, #44]	; (80076e4 <vPortSetupTimerInterrupt+0x38>)
 80076b8:	2200      	movs	r2, #0
 80076ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80076bc:	4b0a      	ldr	r3, [pc, #40]	; (80076e8 <vPortSetupTimerInterrupt+0x3c>)
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	4a0a      	ldr	r2, [pc, #40]	; (80076ec <vPortSetupTimerInterrupt+0x40>)
 80076c2:	fba2 2303 	umull	r2, r3, r2, r3
 80076c6:	099b      	lsrs	r3, r3, #6
 80076c8:	4a09      	ldr	r2, [pc, #36]	; (80076f0 <vPortSetupTimerInterrupt+0x44>)
 80076ca:	3b01      	subs	r3, #1
 80076cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80076ce:	4b04      	ldr	r3, [pc, #16]	; (80076e0 <vPortSetupTimerInterrupt+0x34>)
 80076d0:	2207      	movs	r2, #7
 80076d2:	601a      	str	r2, [r3, #0]
}
 80076d4:	bf00      	nop
 80076d6:	46bd      	mov	sp, r7
 80076d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076dc:	4770      	bx	lr
 80076de:	bf00      	nop
 80076e0:	e000e010 	.word	0xe000e010
 80076e4:	e000e018 	.word	0xe000e018
 80076e8:	20000000 	.word	0x20000000
 80076ec:	10624dd3 	.word	0x10624dd3
 80076f0:	e000e014 	.word	0xe000e014

080076f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80076f4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007704 <vPortEnableVFP+0x10>
 80076f8:	6801      	ldr	r1, [r0, #0]
 80076fa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80076fe:	6001      	str	r1, [r0, #0]
 8007700:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007702:	bf00      	nop
 8007704:	e000ed88 	.word	0xe000ed88

08007708 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007708:	b480      	push	{r7}
 800770a:	b085      	sub	sp, #20
 800770c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800770e:	f3ef 8305 	mrs	r3, IPSR
 8007712:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	2b0f      	cmp	r3, #15
 8007718:	d914      	bls.n	8007744 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800771a:	4a17      	ldr	r2, [pc, #92]	; (8007778 <vPortValidateInterruptPriority+0x70>)
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	4413      	add	r3, r2
 8007720:	781b      	ldrb	r3, [r3, #0]
 8007722:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007724:	4b15      	ldr	r3, [pc, #84]	; (800777c <vPortValidateInterruptPriority+0x74>)
 8007726:	781b      	ldrb	r3, [r3, #0]
 8007728:	7afa      	ldrb	r2, [r7, #11]
 800772a:	429a      	cmp	r2, r3
 800772c:	d20a      	bcs.n	8007744 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800772e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007732:	f383 8811 	msr	BASEPRI, r3
 8007736:	f3bf 8f6f 	isb	sy
 800773a:	f3bf 8f4f 	dsb	sy
 800773e:	607b      	str	r3, [r7, #4]
}
 8007740:	bf00      	nop
 8007742:	e7fe      	b.n	8007742 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007744:	4b0e      	ldr	r3, [pc, #56]	; (8007780 <vPortValidateInterruptPriority+0x78>)
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800774c:	4b0d      	ldr	r3, [pc, #52]	; (8007784 <vPortValidateInterruptPriority+0x7c>)
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	429a      	cmp	r2, r3
 8007752:	d90a      	bls.n	800776a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007754:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007758:	f383 8811 	msr	BASEPRI, r3
 800775c:	f3bf 8f6f 	isb	sy
 8007760:	f3bf 8f4f 	dsb	sy
 8007764:	603b      	str	r3, [r7, #0]
}
 8007766:	bf00      	nop
 8007768:	e7fe      	b.n	8007768 <vPortValidateInterruptPriority+0x60>
	}
 800776a:	bf00      	nop
 800776c:	3714      	adds	r7, #20
 800776e:	46bd      	mov	sp, r7
 8007770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007774:	4770      	bx	lr
 8007776:	bf00      	nop
 8007778:	e000e3f0 	.word	0xe000e3f0
 800777c:	2000518c 	.word	0x2000518c
 8007780:	e000ed0c 	.word	0xe000ed0c
 8007784:	20005190 	.word	0x20005190

08007788 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007788:	b580      	push	{r7, lr}
 800778a:	b08a      	sub	sp, #40	; 0x28
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007790:	2300      	movs	r3, #0
 8007792:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007794:	f7fe ffbe 	bl	8006714 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007798:	4b5b      	ldr	r3, [pc, #364]	; (8007908 <pvPortMalloc+0x180>)
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	2b00      	cmp	r3, #0
 800779e:	d101      	bne.n	80077a4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80077a0:	f000 f920 	bl	80079e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80077a4:	4b59      	ldr	r3, [pc, #356]	; (800790c <pvPortMalloc+0x184>)
 80077a6:	681a      	ldr	r2, [r3, #0]
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	4013      	ands	r3, r2
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	f040 8093 	bne.w	80078d8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d01d      	beq.n	80077f4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80077b8:	2208      	movs	r2, #8
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	4413      	add	r3, r2
 80077be:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	f003 0307 	and.w	r3, r3, #7
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d014      	beq.n	80077f4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	f023 0307 	bic.w	r3, r3, #7
 80077d0:	3308      	adds	r3, #8
 80077d2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	f003 0307 	and.w	r3, r3, #7
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d00a      	beq.n	80077f4 <pvPortMalloc+0x6c>
	__asm volatile
 80077de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077e2:	f383 8811 	msr	BASEPRI, r3
 80077e6:	f3bf 8f6f 	isb	sy
 80077ea:	f3bf 8f4f 	dsb	sy
 80077ee:	617b      	str	r3, [r7, #20]
}
 80077f0:	bf00      	nop
 80077f2:	e7fe      	b.n	80077f2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d06e      	beq.n	80078d8 <pvPortMalloc+0x150>
 80077fa:	4b45      	ldr	r3, [pc, #276]	; (8007910 <pvPortMalloc+0x188>)
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	687a      	ldr	r2, [r7, #4]
 8007800:	429a      	cmp	r2, r3
 8007802:	d869      	bhi.n	80078d8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007804:	4b43      	ldr	r3, [pc, #268]	; (8007914 <pvPortMalloc+0x18c>)
 8007806:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007808:	4b42      	ldr	r3, [pc, #264]	; (8007914 <pvPortMalloc+0x18c>)
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800780e:	e004      	b.n	800781a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007812:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800781a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800781c:	685b      	ldr	r3, [r3, #4]
 800781e:	687a      	ldr	r2, [r7, #4]
 8007820:	429a      	cmp	r2, r3
 8007822:	d903      	bls.n	800782c <pvPortMalloc+0xa4>
 8007824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	2b00      	cmp	r3, #0
 800782a:	d1f1      	bne.n	8007810 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800782c:	4b36      	ldr	r3, [pc, #216]	; (8007908 <pvPortMalloc+0x180>)
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007832:	429a      	cmp	r2, r3
 8007834:	d050      	beq.n	80078d8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007836:	6a3b      	ldr	r3, [r7, #32]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	2208      	movs	r2, #8
 800783c:	4413      	add	r3, r2
 800783e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007842:	681a      	ldr	r2, [r3, #0]
 8007844:	6a3b      	ldr	r3, [r7, #32]
 8007846:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800784a:	685a      	ldr	r2, [r3, #4]
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	1ad2      	subs	r2, r2, r3
 8007850:	2308      	movs	r3, #8
 8007852:	005b      	lsls	r3, r3, #1
 8007854:	429a      	cmp	r2, r3
 8007856:	d91f      	bls.n	8007898 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007858:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	4413      	add	r3, r2
 800785e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007860:	69bb      	ldr	r3, [r7, #24]
 8007862:	f003 0307 	and.w	r3, r3, #7
 8007866:	2b00      	cmp	r3, #0
 8007868:	d00a      	beq.n	8007880 <pvPortMalloc+0xf8>
	__asm volatile
 800786a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800786e:	f383 8811 	msr	BASEPRI, r3
 8007872:	f3bf 8f6f 	isb	sy
 8007876:	f3bf 8f4f 	dsb	sy
 800787a:	613b      	str	r3, [r7, #16]
}
 800787c:	bf00      	nop
 800787e:	e7fe      	b.n	800787e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007882:	685a      	ldr	r2, [r3, #4]
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	1ad2      	subs	r2, r2, r3
 8007888:	69bb      	ldr	r3, [r7, #24]
 800788a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800788c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800788e:	687a      	ldr	r2, [r7, #4]
 8007890:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007892:	69b8      	ldr	r0, [r7, #24]
 8007894:	f000 f908 	bl	8007aa8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007898:	4b1d      	ldr	r3, [pc, #116]	; (8007910 <pvPortMalloc+0x188>)
 800789a:	681a      	ldr	r2, [r3, #0]
 800789c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800789e:	685b      	ldr	r3, [r3, #4]
 80078a0:	1ad3      	subs	r3, r2, r3
 80078a2:	4a1b      	ldr	r2, [pc, #108]	; (8007910 <pvPortMalloc+0x188>)
 80078a4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80078a6:	4b1a      	ldr	r3, [pc, #104]	; (8007910 <pvPortMalloc+0x188>)
 80078a8:	681a      	ldr	r2, [r3, #0]
 80078aa:	4b1b      	ldr	r3, [pc, #108]	; (8007918 <pvPortMalloc+0x190>)
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	429a      	cmp	r2, r3
 80078b0:	d203      	bcs.n	80078ba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80078b2:	4b17      	ldr	r3, [pc, #92]	; (8007910 <pvPortMalloc+0x188>)
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	4a18      	ldr	r2, [pc, #96]	; (8007918 <pvPortMalloc+0x190>)
 80078b8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80078ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078bc:	685a      	ldr	r2, [r3, #4]
 80078be:	4b13      	ldr	r3, [pc, #76]	; (800790c <pvPortMalloc+0x184>)
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	431a      	orrs	r2, r3
 80078c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078c6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80078c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078ca:	2200      	movs	r2, #0
 80078cc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80078ce:	4b13      	ldr	r3, [pc, #76]	; (800791c <pvPortMalloc+0x194>)
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	3301      	adds	r3, #1
 80078d4:	4a11      	ldr	r2, [pc, #68]	; (800791c <pvPortMalloc+0x194>)
 80078d6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80078d8:	f7fe ff2a 	bl	8006730 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80078dc:	69fb      	ldr	r3, [r7, #28]
 80078de:	f003 0307 	and.w	r3, r3, #7
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d00a      	beq.n	80078fc <pvPortMalloc+0x174>
	__asm volatile
 80078e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078ea:	f383 8811 	msr	BASEPRI, r3
 80078ee:	f3bf 8f6f 	isb	sy
 80078f2:	f3bf 8f4f 	dsb	sy
 80078f6:	60fb      	str	r3, [r7, #12]
}
 80078f8:	bf00      	nop
 80078fa:	e7fe      	b.n	80078fa <pvPortMalloc+0x172>
	return pvReturn;
 80078fc:	69fb      	ldr	r3, [r7, #28]
}
 80078fe:	4618      	mov	r0, r3
 8007900:	3728      	adds	r7, #40	; 0x28
 8007902:	46bd      	mov	sp, r7
 8007904:	bd80      	pop	{r7, pc}
 8007906:	bf00      	nop
 8007908:	2000d19c 	.word	0x2000d19c
 800790c:	2000d1b0 	.word	0x2000d1b0
 8007910:	2000d1a0 	.word	0x2000d1a0
 8007914:	2000d194 	.word	0x2000d194
 8007918:	2000d1a4 	.word	0x2000d1a4
 800791c:	2000d1a8 	.word	0x2000d1a8

08007920 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007920:	b580      	push	{r7, lr}
 8007922:	b086      	sub	sp, #24
 8007924:	af00      	add	r7, sp, #0
 8007926:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	2b00      	cmp	r3, #0
 8007930:	d04d      	beq.n	80079ce <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007932:	2308      	movs	r3, #8
 8007934:	425b      	negs	r3, r3
 8007936:	697a      	ldr	r2, [r7, #20]
 8007938:	4413      	add	r3, r2
 800793a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800793c:	697b      	ldr	r3, [r7, #20]
 800793e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007940:	693b      	ldr	r3, [r7, #16]
 8007942:	685a      	ldr	r2, [r3, #4]
 8007944:	4b24      	ldr	r3, [pc, #144]	; (80079d8 <vPortFree+0xb8>)
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	4013      	ands	r3, r2
 800794a:	2b00      	cmp	r3, #0
 800794c:	d10a      	bne.n	8007964 <vPortFree+0x44>
	__asm volatile
 800794e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007952:	f383 8811 	msr	BASEPRI, r3
 8007956:	f3bf 8f6f 	isb	sy
 800795a:	f3bf 8f4f 	dsb	sy
 800795e:	60fb      	str	r3, [r7, #12]
}
 8007960:	bf00      	nop
 8007962:	e7fe      	b.n	8007962 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007964:	693b      	ldr	r3, [r7, #16]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	2b00      	cmp	r3, #0
 800796a:	d00a      	beq.n	8007982 <vPortFree+0x62>
	__asm volatile
 800796c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007970:	f383 8811 	msr	BASEPRI, r3
 8007974:	f3bf 8f6f 	isb	sy
 8007978:	f3bf 8f4f 	dsb	sy
 800797c:	60bb      	str	r3, [r7, #8]
}
 800797e:	bf00      	nop
 8007980:	e7fe      	b.n	8007980 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007982:	693b      	ldr	r3, [r7, #16]
 8007984:	685a      	ldr	r2, [r3, #4]
 8007986:	4b14      	ldr	r3, [pc, #80]	; (80079d8 <vPortFree+0xb8>)
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	4013      	ands	r3, r2
 800798c:	2b00      	cmp	r3, #0
 800798e:	d01e      	beq.n	80079ce <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007990:	693b      	ldr	r3, [r7, #16]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	2b00      	cmp	r3, #0
 8007996:	d11a      	bne.n	80079ce <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007998:	693b      	ldr	r3, [r7, #16]
 800799a:	685a      	ldr	r2, [r3, #4]
 800799c:	4b0e      	ldr	r3, [pc, #56]	; (80079d8 <vPortFree+0xb8>)
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	43db      	mvns	r3, r3
 80079a2:	401a      	ands	r2, r3
 80079a4:	693b      	ldr	r3, [r7, #16]
 80079a6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80079a8:	f7fe feb4 	bl	8006714 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80079ac:	693b      	ldr	r3, [r7, #16]
 80079ae:	685a      	ldr	r2, [r3, #4]
 80079b0:	4b0a      	ldr	r3, [pc, #40]	; (80079dc <vPortFree+0xbc>)
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	4413      	add	r3, r2
 80079b6:	4a09      	ldr	r2, [pc, #36]	; (80079dc <vPortFree+0xbc>)
 80079b8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80079ba:	6938      	ldr	r0, [r7, #16]
 80079bc:	f000 f874 	bl	8007aa8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80079c0:	4b07      	ldr	r3, [pc, #28]	; (80079e0 <vPortFree+0xc0>)
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	3301      	adds	r3, #1
 80079c6:	4a06      	ldr	r2, [pc, #24]	; (80079e0 <vPortFree+0xc0>)
 80079c8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80079ca:	f7fe feb1 	bl	8006730 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80079ce:	bf00      	nop
 80079d0:	3718      	adds	r7, #24
 80079d2:	46bd      	mov	sp, r7
 80079d4:	bd80      	pop	{r7, pc}
 80079d6:	bf00      	nop
 80079d8:	2000d1b0 	.word	0x2000d1b0
 80079dc:	2000d1a0 	.word	0x2000d1a0
 80079e0:	2000d1ac 	.word	0x2000d1ac

080079e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80079e4:	b480      	push	{r7}
 80079e6:	b085      	sub	sp, #20
 80079e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80079ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80079ee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80079f0:	4b27      	ldr	r3, [pc, #156]	; (8007a90 <prvHeapInit+0xac>)
 80079f2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	f003 0307 	and.w	r3, r3, #7
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d00c      	beq.n	8007a18 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	3307      	adds	r3, #7
 8007a02:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	f023 0307 	bic.w	r3, r3, #7
 8007a0a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007a0c:	68ba      	ldr	r2, [r7, #8]
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	1ad3      	subs	r3, r2, r3
 8007a12:	4a1f      	ldr	r2, [pc, #124]	; (8007a90 <prvHeapInit+0xac>)
 8007a14:	4413      	add	r3, r2
 8007a16:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007a1c:	4a1d      	ldr	r2, [pc, #116]	; (8007a94 <prvHeapInit+0xb0>)
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007a22:	4b1c      	ldr	r3, [pc, #112]	; (8007a94 <prvHeapInit+0xb0>)
 8007a24:	2200      	movs	r2, #0
 8007a26:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	68ba      	ldr	r2, [r7, #8]
 8007a2c:	4413      	add	r3, r2
 8007a2e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007a30:	2208      	movs	r2, #8
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	1a9b      	subs	r3, r3, r2
 8007a36:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	f023 0307 	bic.w	r3, r3, #7
 8007a3e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	4a15      	ldr	r2, [pc, #84]	; (8007a98 <prvHeapInit+0xb4>)
 8007a44:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007a46:	4b14      	ldr	r3, [pc, #80]	; (8007a98 <prvHeapInit+0xb4>)
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007a4e:	4b12      	ldr	r3, [pc, #72]	; (8007a98 <prvHeapInit+0xb4>)
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	2200      	movs	r2, #0
 8007a54:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007a5a:	683b      	ldr	r3, [r7, #0]
 8007a5c:	68fa      	ldr	r2, [r7, #12]
 8007a5e:	1ad2      	subs	r2, r2, r3
 8007a60:	683b      	ldr	r3, [r7, #0]
 8007a62:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007a64:	4b0c      	ldr	r3, [pc, #48]	; (8007a98 <prvHeapInit+0xb4>)
 8007a66:	681a      	ldr	r2, [r3, #0]
 8007a68:	683b      	ldr	r3, [r7, #0]
 8007a6a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007a6c:	683b      	ldr	r3, [r7, #0]
 8007a6e:	685b      	ldr	r3, [r3, #4]
 8007a70:	4a0a      	ldr	r2, [pc, #40]	; (8007a9c <prvHeapInit+0xb8>)
 8007a72:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007a74:	683b      	ldr	r3, [r7, #0]
 8007a76:	685b      	ldr	r3, [r3, #4]
 8007a78:	4a09      	ldr	r2, [pc, #36]	; (8007aa0 <prvHeapInit+0xbc>)
 8007a7a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007a7c:	4b09      	ldr	r3, [pc, #36]	; (8007aa4 <prvHeapInit+0xc0>)
 8007a7e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007a82:	601a      	str	r2, [r3, #0]
}
 8007a84:	bf00      	nop
 8007a86:	3714      	adds	r7, #20
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8e:	4770      	bx	lr
 8007a90:	20005194 	.word	0x20005194
 8007a94:	2000d194 	.word	0x2000d194
 8007a98:	2000d19c 	.word	0x2000d19c
 8007a9c:	2000d1a4 	.word	0x2000d1a4
 8007aa0:	2000d1a0 	.word	0x2000d1a0
 8007aa4:	2000d1b0 	.word	0x2000d1b0

08007aa8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007aa8:	b480      	push	{r7}
 8007aaa:	b085      	sub	sp, #20
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007ab0:	4b28      	ldr	r3, [pc, #160]	; (8007b54 <prvInsertBlockIntoFreeList+0xac>)
 8007ab2:	60fb      	str	r3, [r7, #12]
 8007ab4:	e002      	b.n	8007abc <prvInsertBlockIntoFreeList+0x14>
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	60fb      	str	r3, [r7, #12]
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	687a      	ldr	r2, [r7, #4]
 8007ac2:	429a      	cmp	r2, r3
 8007ac4:	d8f7      	bhi.n	8007ab6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	685b      	ldr	r3, [r3, #4]
 8007ace:	68ba      	ldr	r2, [r7, #8]
 8007ad0:	4413      	add	r3, r2
 8007ad2:	687a      	ldr	r2, [r7, #4]
 8007ad4:	429a      	cmp	r2, r3
 8007ad6:	d108      	bne.n	8007aea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	685a      	ldr	r2, [r3, #4]
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	685b      	ldr	r3, [r3, #4]
 8007ae0:	441a      	add	r2, r3
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	685b      	ldr	r3, [r3, #4]
 8007af2:	68ba      	ldr	r2, [r7, #8]
 8007af4:	441a      	add	r2, r3
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	429a      	cmp	r2, r3
 8007afc:	d118      	bne.n	8007b30 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	681a      	ldr	r2, [r3, #0]
 8007b02:	4b15      	ldr	r3, [pc, #84]	; (8007b58 <prvInsertBlockIntoFreeList+0xb0>)
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	429a      	cmp	r2, r3
 8007b08:	d00d      	beq.n	8007b26 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	685a      	ldr	r2, [r3, #4]
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	685b      	ldr	r3, [r3, #4]
 8007b14:	441a      	add	r2, r3
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	681a      	ldr	r2, [r3, #0]
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	601a      	str	r2, [r3, #0]
 8007b24:	e008      	b.n	8007b38 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007b26:	4b0c      	ldr	r3, [pc, #48]	; (8007b58 <prvInsertBlockIntoFreeList+0xb0>)
 8007b28:	681a      	ldr	r2, [r3, #0]
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	601a      	str	r2, [r3, #0]
 8007b2e:	e003      	b.n	8007b38 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	681a      	ldr	r2, [r3, #0]
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007b38:	68fa      	ldr	r2, [r7, #12]
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	429a      	cmp	r2, r3
 8007b3e:	d002      	beq.n	8007b46 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	687a      	ldr	r2, [r7, #4]
 8007b44:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007b46:	bf00      	nop
 8007b48:	3714      	adds	r7, #20
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b50:	4770      	bx	lr
 8007b52:	bf00      	nop
 8007b54:	2000d194 	.word	0x2000d194
 8007b58:	2000d19c 	.word	0x2000d19c

08007b5c <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 8007b5c:	b580      	push	{r7, lr}
 8007b5e:	b084      	sub	sp, #16
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	6078      	str	r0, [r7, #4]
 8007b64:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8007b66:	683b      	ldr	r3, [r7, #0]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	330c      	adds	r3, #12
 8007b6c:	461a      	mov	r2, r3
 8007b6e:	6839      	ldr	r1, [r7, #0]
 8007b70:	6878      	ldr	r0, [r7, #4]
 8007b72:	f002 faa3 	bl	800a0bc <tcpip_send_msg_wait_sem>
 8007b76:	4603      	mov	r3, r0
 8007b78:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 8007b7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d103      	bne.n	8007b8a <netconn_apimsg+0x2e>
    return apimsg->err;
 8007b82:	683b      	ldr	r3, [r7, #0]
 8007b84:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8007b88:	e001      	b.n	8007b8e <netconn_apimsg+0x32>
  }
  return err;
 8007b8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007b8e:	4618      	mov	r0, r3
 8007b90:	3710      	adds	r7, #16
 8007b92:	46bd      	mov	sp, r7
 8007b94:	bd80      	pop	{r7, pc}
	...

08007b98 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 8007b98:	b580      	push	{r7, lr}
 8007b9a:	b08c      	sub	sp, #48	; 0x30
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	4603      	mov	r3, r0
 8007ba0:	603a      	str	r2, [r7, #0]
 8007ba2:	71fb      	strb	r3, [r7, #7]
 8007ba4:	460b      	mov	r3, r1
 8007ba6:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 8007ba8:	79fb      	ldrb	r3, [r7, #7]
 8007baa:	6839      	ldr	r1, [r7, #0]
 8007bac:	4618      	mov	r0, r3
 8007bae:	f001 f923 	bl	8008df8 <netconn_alloc>
 8007bb2:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (conn != NULL) {
 8007bb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d054      	beq.n	8007c64 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 8007bba:	79bb      	ldrb	r3, [r7, #6]
 8007bbc:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 8007bbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bc0:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 8007bc2:	f107 0308 	add.w	r3, r7, #8
 8007bc6:	4619      	mov	r1, r3
 8007bc8:	4829      	ldr	r0, [pc, #164]	; (8007c70 <netconn_new_with_proto_and_callback+0xd8>)
 8007bca:	f7ff ffc7 	bl	8007b5c <netconn_apimsg>
 8007bce:	4603      	mov	r3, r0
 8007bd0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (err != ERR_OK) {
 8007bd4:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d043      	beq.n	8007c64 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 8007bdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bde:	685b      	ldr	r3, [r3, #4]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d005      	beq.n	8007bf0 <netconn_new_with_proto_and_callback+0x58>
 8007be4:	4b23      	ldr	r3, [pc, #140]	; (8007c74 <netconn_new_with_proto_and_callback+0xdc>)
 8007be6:	22a3      	movs	r2, #163	; 0xa3
 8007be8:	4923      	ldr	r1, [pc, #140]	; (8007c78 <netconn_new_with_proto_and_callback+0xe0>)
 8007bea:	4824      	ldr	r0, [pc, #144]	; (8007c7c <netconn_new_with_proto_and_callback+0xe4>)
 8007bec:	f010 fbea 	bl	80183c4 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 8007bf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bf2:	3310      	adds	r3, #16
 8007bf4:	4618      	mov	r0, r3
 8007bf6:	f010 f8d4 	bl	8017da2 <sys_mbox_valid>
 8007bfa:	4603      	mov	r3, r0
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d105      	bne.n	8007c0c <netconn_new_with_proto_and_callback+0x74>
 8007c00:	4b1c      	ldr	r3, [pc, #112]	; (8007c74 <netconn_new_with_proto_and_callback+0xdc>)
 8007c02:	22a4      	movs	r2, #164	; 0xa4
 8007c04:	491e      	ldr	r1, [pc, #120]	; (8007c80 <netconn_new_with_proto_and_callback+0xe8>)
 8007c06:	481d      	ldr	r0, [pc, #116]	; (8007c7c <netconn_new_with_proto_and_callback+0xe4>)
 8007c08:	f010 fbdc 	bl	80183c4 <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 8007c0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c0e:	3314      	adds	r3, #20
 8007c10:	4618      	mov	r0, r3
 8007c12:	f010 f8c6 	bl	8017da2 <sys_mbox_valid>
 8007c16:	4603      	mov	r3, r0
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d005      	beq.n	8007c28 <netconn_new_with_proto_and_callback+0x90>
 8007c1c:	4b15      	ldr	r3, [pc, #84]	; (8007c74 <netconn_new_with_proto_and_callback+0xdc>)
 8007c1e:	22a6      	movs	r2, #166	; 0xa6
 8007c20:	4918      	ldr	r1, [pc, #96]	; (8007c84 <netconn_new_with_proto_and_callback+0xec>)
 8007c22:	4816      	ldr	r0, [pc, #88]	; (8007c7c <netconn_new_with_proto_and_callback+0xe4>)
 8007c24:	f010 fbce 	bl	80183c4 <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 8007c28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c2a:	330c      	adds	r3, #12
 8007c2c:	4618      	mov	r0, r3
 8007c2e:	f010 f949 	bl	8017ec4 <sys_sem_valid>
 8007c32:	4603      	mov	r3, r0
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d105      	bne.n	8007c44 <netconn_new_with_proto_and_callback+0xac>
 8007c38:	4b0e      	ldr	r3, [pc, #56]	; (8007c74 <netconn_new_with_proto_and_callback+0xdc>)
 8007c3a:	22a9      	movs	r2, #169	; 0xa9
 8007c3c:	4912      	ldr	r1, [pc, #72]	; (8007c88 <netconn_new_with_proto_and_callback+0xf0>)
 8007c3e:	480f      	ldr	r0, [pc, #60]	; (8007c7c <netconn_new_with_proto_and_callback+0xe4>)
 8007c40:	f010 fbc0 	bl	80183c4 <iprintf>
      sys_sem_free(&conn->op_completed);
 8007c44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c46:	330c      	adds	r3, #12
 8007c48:	4618      	mov	r0, r3
 8007c4a:	f010 f92e 	bl	8017eaa <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 8007c4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c50:	3310      	adds	r3, #16
 8007c52:	4618      	mov	r0, r3
 8007c54:	f010 f81e 	bl	8017c94 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 8007c58:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007c5a:	2007      	movs	r0, #7
 8007c5c:	f003 fe2c 	bl	800b8b8 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 8007c60:	2300      	movs	r3, #0
 8007c62:	e000      	b.n	8007c66 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 8007c64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8007c66:	4618      	mov	r0, r3
 8007c68:	3730      	adds	r7, #48	; 0x30
 8007c6a:	46bd      	mov	sp, r7
 8007c6c:	bd80      	pop	{r7, pc}
 8007c6e:	bf00      	nop
 8007c70:	08008dcd 	.word	0x08008dcd
 8007c74:	08019350 	.word	0x08019350
 8007c78:	08019384 	.word	0x08019384
 8007c7c:	080193a8 	.word	0x080193a8
 8007c80:	080193d0 	.word	0x080193d0
 8007c84:	080193e8 	.word	0x080193e8
 8007c88:	0801940c 	.word	0x0801940c

08007c8c <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 8007c8c:	b580      	push	{r7, lr}
 8007c8e:	b08c      	sub	sp, #48	; 0x30
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d101      	bne.n	8007c9e <netconn_prepare_delete+0x12>
    return ERR_OK;
 8007c9a:	2300      	movs	r3, #0
 8007c9c:	e014      	b.n	8007cc8 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8007ca2:	2329      	movs	r3, #41	; 0x29
 8007ca4:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 8007ca6:	f107 030c 	add.w	r3, r7, #12
 8007caa:	4619      	mov	r1, r3
 8007cac:	4808      	ldr	r0, [pc, #32]	; (8007cd0 <netconn_prepare_delete+0x44>)
 8007cae:	f7ff ff55 	bl	8007b5c <netconn_apimsg>
 8007cb2:	4603      	mov	r3, r0
 8007cb4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 8007cb8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d002      	beq.n	8007cc6 <netconn_prepare_delete+0x3a>
    return err;
 8007cc0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007cc4:	e000      	b.n	8007cc8 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 8007cc6:	2300      	movs	r3, #0
}
 8007cc8:	4618      	mov	r0, r3
 8007cca:	3730      	adds	r7, #48	; 0x30
 8007ccc:	46bd      	mov	sp, r7
 8007cce:	bd80      	pop	{r7, pc}
 8007cd0:	08009339 	.word	0x08009339

08007cd4 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 8007cd4:	b580      	push	{r7, lr}
 8007cd6:	b084      	sub	sp, #16
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d101      	bne.n	8007ce6 <netconn_delete+0x12>
    return ERR_OK;
 8007ce2:	2300      	movs	r3, #0
 8007ce4:	e00d      	b.n	8007d02 <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 8007ce6:	6878      	ldr	r0, [r7, #4]
 8007ce8:	f7ff ffd0 	bl	8007c8c <netconn_prepare_delete>
 8007cec:	4603      	mov	r3, r0
 8007cee:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 8007cf0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d102      	bne.n	8007cfe <netconn_delete+0x2a>
    netconn_free(conn);
 8007cf8:	6878      	ldr	r0, [r7, #4]
 8007cfa:	f001 f8eb 	bl	8008ed4 <netconn_free>
  }
  return err;
 8007cfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007d02:	4618      	mov	r0, r3
 8007d04:	3710      	adds	r7, #16
 8007d06:	46bd      	mov	sp, r7
 8007d08:	bd80      	pop	{r7, pc}
	...

08007d0c <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 8007d0c:	b580      	push	{r7, lr}
 8007d0e:	b08e      	sub	sp, #56	; 0x38
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	60f8      	str	r0, [r7, #12]
 8007d14:	60b9      	str	r1, [r7, #8]
 8007d16:	4613      	mov	r3, r2
 8007d18:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d109      	bne.n	8007d34 <netconn_bind+0x28>
 8007d20:	4b11      	ldr	r3, [pc, #68]	; (8007d68 <netconn_bind+0x5c>)
 8007d22:	f44f 729c 	mov.w	r2, #312	; 0x138
 8007d26:	4911      	ldr	r1, [pc, #68]	; (8007d6c <netconn_bind+0x60>)
 8007d28:	4811      	ldr	r0, [pc, #68]	; (8007d70 <netconn_bind+0x64>)
 8007d2a:	f010 fb4b 	bl	80183c4 <iprintf>
 8007d2e:	f06f 030f 	mvn.w	r3, #15
 8007d32:	e015      	b.n	8007d60 <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 8007d34:	68bb      	ldr	r3, [r7, #8]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d101      	bne.n	8007d3e <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 8007d3a:	4b0e      	ldr	r3, [pc, #56]	; (8007d74 <netconn_bind+0x68>)
 8007d3c:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 8007d42:	68bb      	ldr	r3, [r7, #8]
 8007d44:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 8007d46:	88fb      	ldrh	r3, [r7, #6]
 8007d48:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 8007d4a:	f107 0314 	add.w	r3, r7, #20
 8007d4e:	4619      	mov	r1, r3
 8007d50:	4809      	ldr	r0, [pc, #36]	; (8007d78 <netconn_bind+0x6c>)
 8007d52:	f7ff ff03 	bl	8007b5c <netconn_apimsg>
 8007d56:	4603      	mov	r3, r0
 8007d58:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 8007d5c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8007d60:	4618      	mov	r0, r3
 8007d62:	3738      	adds	r7, #56	; 0x38
 8007d64:	46bd      	mov	sp, r7
 8007d66:	bd80      	pop	{r7, pc}
 8007d68:	08019350 	.word	0x08019350
 8007d6c:	08019488 	.word	0x08019488
 8007d70:	080193a8 	.word	0x080193a8
 8007d74:	08027060 	.word	0x08027060
 8007d78:	08009501 	.word	0x08009501

08007d7c <netconn_listen_with_backlog>:
 * @return ERR_OK if the netconn was set to listen (UDP and RAW netconns
 *         don't return any error (yet?))
 */
err_t
netconn_listen_with_backlog(struct netconn *conn, u8_t backlog)
{
 8007d7c:	b580      	push	{r7, lr}
 8007d7e:	b08c      	sub	sp, #48	; 0x30
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	6078      	str	r0, [r7, #4]
 8007d84:	460b      	mov	r3, r1
 8007d86:	70fb      	strb	r3, [r7, #3]
  err_t err;

  /* This does no harm. If TCP_LISTEN_BACKLOG is off, backlog is unused. */
  LWIP_UNUSED_ARG(backlog);

  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d109      	bne.n	8007da2 <netconn_listen_with_backlog+0x26>
 8007d8e:	4b0d      	ldr	r3, [pc, #52]	; (8007dc4 <netconn_listen_with_backlog+0x48>)
 8007d90:	f240 12bb 	movw	r2, #443	; 0x1bb
 8007d94:	490c      	ldr	r1, [pc, #48]	; (8007dc8 <netconn_listen_with_backlog+0x4c>)
 8007d96:	480d      	ldr	r0, [pc, #52]	; (8007dcc <netconn_listen_with_backlog+0x50>)
 8007d98:	f010 fb14 	bl	80183c4 <iprintf>
 8007d9c:	f06f 030f 	mvn.w	r3, #15
 8007da0:	e00c      	b.n	8007dbc <netconn_listen_with_backlog+0x40>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	60fb      	str	r3, [r7, #12]
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_REF(msg).msg.lb.backlog = backlog;
#endif /* TCP_LISTEN_BACKLOG */
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
 8007da6:	f107 030c 	add.w	r3, r7, #12
 8007daa:	4619      	mov	r1, r3
 8007dac:	4808      	ldr	r0, [pc, #32]	; (8007dd0 <netconn_listen_with_backlog+0x54>)
 8007dae:	f7ff fed5 	bl	8007b5c <netconn_apimsg>
 8007db2:	4603      	mov	r3, r0
 8007db4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8007db8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(backlog);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	3730      	adds	r7, #48	; 0x30
 8007dc0:	46bd      	mov	sp, r7
 8007dc2:	bd80      	pop	{r7, pc}
 8007dc4:	08019350 	.word	0x08019350
 8007dc8:	08019508 	.word	0x08019508
 8007dcc:	080193a8 	.word	0x080193a8
 8007dd0:	08009575 	.word	0x08009575

08007dd4 <netconn_accept>:
 * @return ERR_OK if a new connection has been received or an error
 *                code otherwise
 */
err_t
netconn_accept(struct netconn *conn, struct netconn **new_conn)
{
 8007dd4:	b580      	push	{r7, lr}
 8007dd6:	b086      	sub	sp, #24
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	6078      	str	r0, [r7, #4]
 8007ddc:	6039      	str	r1, [r7, #0]
  struct netconn *newconn;
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_DECLARE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 8007dde:	683b      	ldr	r3, [r7, #0]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d109      	bne.n	8007df8 <netconn_accept+0x24>
 8007de4:	4b3d      	ldr	r3, [pc, #244]	; (8007edc <netconn_accept+0x108>)
 8007de6:	f240 12e1 	movw	r2, #481	; 0x1e1
 8007dea:	493d      	ldr	r1, [pc, #244]	; (8007ee0 <netconn_accept+0x10c>)
 8007dec:	483d      	ldr	r0, [pc, #244]	; (8007ee4 <netconn_accept+0x110>)
 8007dee:	f010 fae9 	bl	80183c4 <iprintf>
 8007df2:	f06f 030f 	mvn.w	r3, #15
 8007df6:	e06c      	b.n	8007ed2 <netconn_accept+0xfe>
  *new_conn = NULL;
 8007df8:	683b      	ldr	r3, [r7, #0]
 8007dfa:	2200      	movs	r2, #0
 8007dfc:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d109      	bne.n	8007e18 <netconn_accept+0x44>
 8007e04:	4b35      	ldr	r3, [pc, #212]	; (8007edc <netconn_accept+0x108>)
 8007e06:	f240 12e3 	movw	r2, #483	; 0x1e3
 8007e0a:	4937      	ldr	r1, [pc, #220]	; (8007ee8 <netconn_accept+0x114>)
 8007e0c:	4835      	ldr	r0, [pc, #212]	; (8007ee4 <netconn_accept+0x110>)
 8007e0e:	f010 fad9 	bl	80183c4 <iprintf>
 8007e12:	f06f 030f 	mvn.w	r3, #15
 8007e16:	e05c      	b.n	8007ed2 <netconn_accept+0xfe>

  /* NOTE: Although the opengroup spec says a pending error shall be returned to
           send/recv/getsockopt(SO_ERROR) only, we return it for listening
           connections also, to handle embedded-system errors */
  err = netconn_err(conn);
 8007e18:	6878      	ldr	r0, [r7, #4]
 8007e1a:	f000 fb6c 	bl	80084f6 <netconn_err>
 8007e1e:	4603      	mov	r3, r0
 8007e20:	74fb      	strb	r3, [r7, #19]
  if (err != ERR_OK) {
 8007e22:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d002      	beq.n	8007e30 <netconn_accept+0x5c>
    /* return pending error */
    return err;
 8007e2a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007e2e:	e050      	b.n	8007ed2 <netconn_accept+0xfe>
  }
  if (!NETCONN_ACCEPTMBOX_WAITABLE(conn)) {
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	3314      	adds	r3, #20
 8007e34:	4618      	mov	r0, r3
 8007e36:	f00f ffb4 	bl	8017da2 <sys_mbox_valid>
 8007e3a:	4603      	mov	r3, r0
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d005      	beq.n	8007e4c <netconn_accept+0x78>
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	7f1b      	ldrb	r3, [r3, #28]
 8007e44:	f003 0301 	and.w	r3, r3, #1
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d002      	beq.n	8007e52 <netconn_accept+0x7e>
    /* don't accept if closed: this might block the application task
       waiting on acceptmbox forever! */
    return ERR_CLSD;
 8007e4c:	f06f 030e 	mvn.w	r3, #14
 8007e50:	e03f      	b.n	8007ed2 <netconn_accept+0xfe>
  }

  API_MSG_VAR_ALLOC_ACCEPT(msg);

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn)) {
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	7f1b      	ldrb	r3, [r3, #28]
 8007e56:	f003 0302 	and.w	r3, r3, #2
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d00e      	beq.n	8007e7c <netconn_accept+0xa8>
    if (sys_arch_mbox_tryfetch(&conn->acceptmbox, &accept_ptr) == SYS_ARCH_TIMEOUT) {
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	3314      	adds	r3, #20
 8007e62:	f107 020c 	add.w	r2, r7, #12
 8007e66:	4611      	mov	r1, r2
 8007e68:	4618      	mov	r0, r3
 8007e6a:	f00f ff7e 	bl	8017d6a <sys_arch_mbox_tryfetch>
 8007e6e:	4603      	mov	r3, r0
 8007e70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e74:	d10a      	bne.n	8007e8c <netconn_accept+0xb8>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_WOULDBLOCK;
 8007e76:	f06f 0306 	mvn.w	r3, #6
 8007e7a:	e02a      	b.n	8007ed2 <netconn_accept+0xfe>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, 0);
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	3314      	adds	r3, #20
 8007e80:	f107 010c 	add.w	r1, r7, #12
 8007e84:	2200      	movs	r2, #0
 8007e86:	4618      	mov	r0, r3
 8007e88:	f00f ff30 	bl	8017cec <sys_arch_mbox_fetch>
    }
  }
#endif

  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d005      	beq.n	8007ea0 <netconn_accept+0xcc>
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e98:	2200      	movs	r2, #0
 8007e9a:	2101      	movs	r1, #1
 8007e9c:	6878      	ldr	r0, [r7, #4]
 8007e9e:	4798      	blx	r3

  if (lwip_netconn_is_err_msg(accept_ptr, &err)) {
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	f107 0213 	add.w	r2, r7, #19
 8007ea6:	4611      	mov	r1, r2
 8007ea8:	4618      	mov	r0, r3
 8007eaa:	f000 fb75 	bl	8008598 <lwip_netconn_is_err_msg>
 8007eae:	4603      	mov	r3, r0
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d002      	beq.n	8007eba <netconn_accept+0xe6>
    /* a connection has been aborted: e.g. out of pcbs or out of netconns during accept */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return err;
 8007eb4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007eb8:	e00b      	b.n	8007ed2 <netconn_accept+0xfe>
  }
  if (accept_ptr == NULL) {
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d102      	bne.n	8007ec6 <netconn_accept+0xf2>
    /* connection has been aborted */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return ERR_CLSD;
 8007ec0:	f06f 030e 	mvn.w	r3, #14
 8007ec4:	e005      	b.n	8007ed2 <netconn_accept+0xfe>
  }
  newconn = (struct netconn *)accept_ptr;
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	617b      	str	r3, [r7, #20]
  /* don't care for the return value of lwip_netconn_do_recv */
  netconn_apimsg(lwip_netconn_do_accepted, &API_MSG_VAR_REF(msg));
  API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  *new_conn = newconn;
 8007eca:	683b      	ldr	r3, [r7, #0]
 8007ecc:	697a      	ldr	r2, [r7, #20]
 8007ece:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 8007ed0:	2300      	movs	r3, #0
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(new_conn);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 8007ed2:	4618      	mov	r0, r3
 8007ed4:	3718      	adds	r7, #24
 8007ed6:	46bd      	mov	sp, r7
 8007ed8:	bd80      	pop	{r7, pc}
 8007eda:	bf00      	nop
 8007edc:	08019350 	.word	0x08019350
 8007ee0:	08019528 	.word	0x08019528
 8007ee4:	080193a8 	.word	0x080193a8
 8007ee8:	08019548 	.word	0x08019548

08007eec <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 8007eec:	b580      	push	{r7, lr}
 8007eee:	b088      	sub	sp, #32
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	60f8      	str	r0, [r7, #12]
 8007ef4:	60b9      	str	r1, [r7, #8]
 8007ef6:	4613      	mov	r3, r2
 8007ef8:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 8007efa:	2300      	movs	r3, #0
 8007efc:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8007efe:	68bb      	ldr	r3, [r7, #8]
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d109      	bne.n	8007f18 <netconn_recv_data+0x2c>
 8007f04:	4b58      	ldr	r3, [pc, #352]	; (8008068 <netconn_recv_data+0x17c>)
 8007f06:	f44f 7212 	mov.w	r2, #584	; 0x248
 8007f0a:	4958      	ldr	r1, [pc, #352]	; (800806c <netconn_recv_data+0x180>)
 8007f0c:	4858      	ldr	r0, [pc, #352]	; (8008070 <netconn_recv_data+0x184>)
 8007f0e:	f010 fa59 	bl	80183c4 <iprintf>
 8007f12:	f06f 030f 	mvn.w	r3, #15
 8007f16:	e0a2      	b.n	800805e <netconn_recv_data+0x172>
  *new_buf = NULL;
 8007f18:	68bb      	ldr	r3, [r7, #8]
 8007f1a:	2200      	movs	r2, #0
 8007f1c:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d109      	bne.n	8007f38 <netconn_recv_data+0x4c>
 8007f24:	4b50      	ldr	r3, [pc, #320]	; (8008068 <netconn_recv_data+0x17c>)
 8007f26:	f240 224a 	movw	r2, #586	; 0x24a
 8007f2a:	4952      	ldr	r1, [pc, #328]	; (8008074 <netconn_recv_data+0x188>)
 8007f2c:	4850      	ldr	r0, [pc, #320]	; (8008070 <netconn_recv_data+0x184>)
 8007f2e:	f010 fa49 	bl	80183c4 <iprintf>
 8007f32:	f06f 030f 	mvn.w	r3, #15
 8007f36:	e092      	b.n	800805e <netconn_recv_data+0x172>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	3310      	adds	r3, #16
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	f00f ff30 	bl	8017da2 <sys_mbox_valid>
 8007f42:	4603      	mov	r3, r0
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d10e      	bne.n	8007f66 <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 8007f48:	68f8      	ldr	r0, [r7, #12]
 8007f4a:	f000 fad4 	bl	80084f6 <netconn_err>
 8007f4e:	4603      	mov	r3, r0
 8007f50:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
 8007f52:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d002      	beq.n	8007f60 <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 8007f5a:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8007f5e:	e07e      	b.n	800805e <netconn_recv_data+0x172>
    }
    return ERR_CONN;
 8007f60:	f06f 030a 	mvn.w	r3, #10
 8007f64:	e07b      	b.n	800805e <netconn_recv_data+0x172>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	7f1b      	ldrb	r3, [r3, #28]
 8007f6a:	f003 0302 	and.w	r3, r3, #2
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d10f      	bne.n	8007f92 <netconn_recv_data+0xa6>
 8007f72:	79fb      	ldrb	r3, [r7, #7]
 8007f74:	f003 0304 	and.w	r3, r3, #4
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d10a      	bne.n	8007f92 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	7f1b      	ldrb	r3, [r3, #28]
 8007f80:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d104      	bne.n	8007f92 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d023      	beq.n	8007fda <netconn_recv_data+0xee>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	3310      	adds	r3, #16
 8007f96:	f107 0218 	add.w	r2, r7, #24
 8007f9a:	4611      	mov	r1, r2
 8007f9c:	4618      	mov	r0, r3
 8007f9e:	f00f fee4 	bl	8017d6a <sys_arch_mbox_tryfetch>
 8007fa2:	4603      	mov	r3, r0
 8007fa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fa8:	d11f      	bne.n	8007fea <netconn_recv_data+0xfe>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 8007faa:	68f8      	ldr	r0, [r7, #12]
 8007fac:	f000 faa3 	bl	80084f6 <netconn_err>
 8007fb0:	4603      	mov	r3, r0
 8007fb2:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
 8007fb4:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d002      	beq.n	8007fc2 <netconn_recv_data+0xd6>
        /* return pending error */
        return err;
 8007fbc:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8007fc0:	e04d      	b.n	800805e <netconn_recv_data+0x172>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	7f1b      	ldrb	r3, [r3, #28]
 8007fc6:	f003 0301 	and.w	r3, r3, #1
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d002      	beq.n	8007fd4 <netconn_recv_data+0xe8>
        return ERR_CONN;
 8007fce:	f06f 030a 	mvn.w	r3, #10
 8007fd2:	e044      	b.n	800805e <netconn_recv_data+0x172>
      }
      return ERR_WOULDBLOCK;
 8007fd4:	f06f 0306 	mvn.w	r3, #6
 8007fd8:	e041      	b.n	800805e <netconn_recv_data+0x172>
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	3310      	adds	r3, #16
 8007fde:	f107 0118 	add.w	r1, r7, #24
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	4618      	mov	r0, r3
 8007fe6:	f00f fe81 	bl	8017cec <sys_arch_mbox_fetch>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	781b      	ldrb	r3, [r3, #0]
 8007fee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007ff2:	2b10      	cmp	r3, #16
 8007ff4:	d117      	bne.n	8008026 <netconn_recv_data+0x13a>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 8007ff6:	69bb      	ldr	r3, [r7, #24]
 8007ff8:	f107 0217 	add.w	r2, r7, #23
 8007ffc:	4611      	mov	r1, r2
 8007ffe:	4618      	mov	r0, r3
 8008000:	f000 faca 	bl	8008598 <lwip_netconn_is_err_msg>
 8008004:	4603      	mov	r3, r0
 8008006:	2b00      	cmp	r3, #0
 8008008:	d009      	beq.n	800801e <netconn_recv_data+0x132>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 800800a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800800e:	f113 0f0f 	cmn.w	r3, #15
 8008012:	d101      	bne.n	8008018 <netconn_recv_data+0x12c>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 8008014:	2300      	movs	r3, #0
 8008016:	e022      	b.n	800805e <netconn_recv_data+0x172>
      }
      return err;
 8008018:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800801c:	e01f      	b.n	800805e <netconn_recv_data+0x172>
    }
    len = ((struct pbuf *)buf)->tot_len;
 800801e:	69bb      	ldr	r3, [r7, #24]
 8008020:	891b      	ldrh	r3, [r3, #8]
 8008022:	83fb      	strh	r3, [r7, #30]
 8008024:	e00d      	b.n	8008042 <netconn_recv_data+0x156>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 8008026:	69bb      	ldr	r3, [r7, #24]
 8008028:	2b00      	cmp	r3, #0
 800802a:	d106      	bne.n	800803a <netconn_recv_data+0x14e>
 800802c:	4b0e      	ldr	r3, [pc, #56]	; (8008068 <netconn_recv_data+0x17c>)
 800802e:	f240 2291 	movw	r2, #657	; 0x291
 8008032:	4911      	ldr	r1, [pc, #68]	; (8008078 <netconn_recv_data+0x18c>)
 8008034:	480e      	ldr	r0, [pc, #56]	; (8008070 <netconn_recv_data+0x184>)
 8008036:	f010 f9c5 	bl	80183c4 <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 800803a:	69bb      	ldr	r3, [r7, #24]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	891b      	ldrh	r3, [r3, #8]
 8008040:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008046:	2b00      	cmp	r3, #0
 8008048:	d005      	beq.n	8008056 <netconn_recv_data+0x16a>
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800804e:	8bfa      	ldrh	r2, [r7, #30]
 8008050:	2101      	movs	r1, #1
 8008052:	68f8      	ldr	r0, [r7, #12]
 8008054:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 8008056:	69ba      	ldr	r2, [r7, #24]
 8008058:	68bb      	ldr	r3, [r7, #8]
 800805a:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 800805c:	2300      	movs	r3, #0
}
 800805e:	4618      	mov	r0, r3
 8008060:	3720      	adds	r7, #32
 8008062:	46bd      	mov	sp, r7
 8008064:	bd80      	pop	{r7, pc}
 8008066:	bf00      	nop
 8008068:	08019350 	.word	0x08019350
 800806c:	08019568 	.word	0x08019568
 8008070:	080193a8 	.word	0x080193a8
 8008074:	08019588 	.word	0x08019588
 8008078:	080195a4 	.word	0x080195a4

0800807c <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 800807c:	b580      	push	{r7, lr}
 800807e:	b084      	sub	sp, #16
 8008080:	af00      	add	r7, sp, #0
 8008082:	60f8      	str	r0, [r7, #12]
 8008084:	60b9      	str	r1, [r7, #8]
 8008086:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	2b00      	cmp	r3, #0
 800808c:	d005      	beq.n	800809a <netconn_tcp_recvd_msg+0x1e>
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	781b      	ldrb	r3, [r3, #0]
 8008092:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008096:	2b10      	cmp	r3, #16
 8008098:	d009      	beq.n	80080ae <netconn_tcp_recvd_msg+0x32>
 800809a:	4b0c      	ldr	r3, [pc, #48]	; (80080cc <netconn_tcp_recvd_msg+0x50>)
 800809c:	f240 22a7 	movw	r2, #679	; 0x2a7
 80080a0:	490b      	ldr	r1, [pc, #44]	; (80080d0 <netconn_tcp_recvd_msg+0x54>)
 80080a2:	480c      	ldr	r0, [pc, #48]	; (80080d4 <netconn_tcp_recvd_msg+0x58>)
 80080a4:	f010 f98e 	bl	80183c4 <iprintf>
 80080a8:	f06f 030f 	mvn.w	r3, #15
 80080ac:	e00a      	b.n	80080c4 <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	68fa      	ldr	r2, [r7, #12]
 80080b2:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	68ba      	ldr	r2, [r7, #8]
 80080b8:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 80080ba:	6879      	ldr	r1, [r7, #4]
 80080bc:	4806      	ldr	r0, [pc, #24]	; (80080d8 <netconn_tcp_recvd_msg+0x5c>)
 80080be:	f7ff fd4d 	bl	8007b5c <netconn_apimsg>
 80080c2:	4603      	mov	r3, r0
}
 80080c4:	4618      	mov	r0, r3
 80080c6:	3710      	adds	r7, #16
 80080c8:	46bd      	mov	sp, r7
 80080ca:	bd80      	pop	{r7, pc}
 80080cc:	08019350 	.word	0x08019350
 80080d0:	080195b0 	.word	0x080195b0
 80080d4:	080193a8 	.word	0x080193a8
 80080d8:	080096a5 	.word	0x080096a5

080080dc <netconn_recv_data_tcp>:
  return err;
}

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 80080dc:	b580      	push	{r7, lr}
 80080de:	b090      	sub	sp, #64	; 0x40
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	60f8      	str	r0, [r7, #12]
 80080e4:	60b9      	str	r1, [r7, #8]
 80080e6:	4613      	mov	r3, r2
 80080e8:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	3310      	adds	r3, #16
 80080ee:	4618      	mov	r0, r3
 80080f0:	f00f fe57 	bl	8017da2 <sys_mbox_valid>
 80080f4:	4603      	mov	r3, r0
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d102      	bne.n	8008100 <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 80080fa:	f06f 030a 	mvn.w	r3, #10
 80080fe:	e06d      	b.n	80081dc <netconn_recv_data_tcp+0x100>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	7f1b      	ldrb	r3, [r3, #28]
 8008104:	b25b      	sxtb	r3, r3
 8008106:	2b00      	cmp	r3, #0
 8008108:	da07      	bge.n	800811a <netconn_recv_data_tcp+0x3e>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	7f1b      	ldrb	r3, [r3, #28]
 800810e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008112:	b2da      	uxtb	r2, r3
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	771a      	strb	r2, [r3, #28]
    goto handle_fin;
 8008118:	e039      	b.n	800818e <netconn_recv_data_tcp+0xb2>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 800811a:	79fb      	ldrb	r3, [r7, #7]
 800811c:	461a      	mov	r2, r3
 800811e:	68b9      	ldr	r1, [r7, #8]
 8008120:	68f8      	ldr	r0, [r7, #12]
 8008122:	f7ff fee3 	bl	8007eec <netconn_recv_data>
 8008126:	4603      	mov	r3, r0
 8008128:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (err != ERR_OK) {
 800812c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008130:	2b00      	cmp	r3, #0
 8008132:	d002      	beq.n	800813a <netconn_recv_data_tcp+0x5e>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 8008134:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008138:	e050      	b.n	80081dc <netconn_recv_data_tcp+0x100>
  }
  buf = *new_buf;
 800813a:	68bb      	ldr	r3, [r7, #8]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 8008140:	79fb      	ldrb	r3, [r7, #7]
 8008142:	f003 0308 	and.w	r3, r3, #8
 8008146:	2b00      	cmp	r3, #0
 8008148:	d10e      	bne.n	8008168 <netconn_recv_data_tcp+0x8c>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 800814a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800814c:	2b00      	cmp	r3, #0
 800814e:	d002      	beq.n	8008156 <netconn_recv_data_tcp+0x7a>
 8008150:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008152:	891b      	ldrh	r3, [r3, #8]
 8008154:	e000      	b.n	8008158 <netconn_recv_data_tcp+0x7c>
 8008156:	2301      	movs	r3, #1
 8008158:	86fb      	strh	r3, [r7, #54]	; 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 800815a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800815c:	f107 0214 	add.w	r2, r7, #20
 8008160:	4619      	mov	r1, r3
 8008162:	68f8      	ldr	r0, [r7, #12]
 8008164:	f7ff ff8a 	bl	800807c <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 8008168:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800816a:	2b00      	cmp	r3, #0
 800816c:	d134      	bne.n	80081d8 <netconn_recv_data_tcp+0xfc>
    if (apiflags & NETCONN_NOFIN) {
 800816e:	79fb      	ldrb	r3, [r7, #7]
 8008170:	f003 0310 	and.w	r3, r3, #16
 8008174:	2b00      	cmp	r3, #0
 8008176:	d009      	beq.n	800818c <netconn_recv_data_tcp+0xb0>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	7f1b      	ldrb	r3, [r3, #28]
 800817c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008180:	b2da      	uxtb	r2, r3
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	771a      	strb	r2, [r3, #28]
      return ERR_WOULDBLOCK;
 8008186:	f06f 0306 	mvn.w	r3, #6
 800818a:	e027      	b.n	80081dc <netconn_recv_data_tcp+0x100>
    } else {
handle_fin:
 800818c:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008192:	2b00      	cmp	r3, #0
 8008194:	d005      	beq.n	80081a2 <netconn_recv_data_tcp+0xc6>
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800819a:	2200      	movs	r2, #0
 800819c:	2101      	movs	r1, #1
 800819e:	68f8      	ldr	r0, [r7, #12]
 80081a0:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	685b      	ldr	r3, [r3, #4]
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d10f      	bne.n	80081ca <netconn_recv_data_tcp+0xee>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 80081aa:	68f8      	ldr	r0, [r7, #12]
 80081ac:	f000 f9a3 	bl	80084f6 <netconn_err>
 80081b0:	4603      	mov	r3, r0
 80081b2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        if (err != ERR_OK) {
 80081b6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d002      	beq.n	80081c4 <netconn_recv_data_tcp+0xe8>
          return err;
 80081be:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80081c2:	e00b      	b.n	80081dc <netconn_recv_data_tcp+0x100>
        }
        return ERR_RST;
 80081c4:	f06f 030d 	mvn.w	r3, #13
 80081c8:	e008      	b.n	80081dc <netconn_recv_data_tcp+0x100>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 80081ca:	2101      	movs	r1, #1
 80081cc:	68f8      	ldr	r0, [r7, #12]
 80081ce:	f000 f955 	bl	800847c <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 80081d2:	f06f 030e 	mvn.w	r3, #14
 80081d6:	e001      	b.n	80081dc <netconn_recv_data_tcp+0x100>
    }
  }
  return err;
 80081d8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 80081dc:	4618      	mov	r0, r3
 80081de:	3740      	adds	r7, #64	; 0x40
 80081e0:	46bd      	mov	sp, r7
 80081e2:	bd80      	pop	{r7, pc}

080081e4 <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 80081e4:	b580      	push	{r7, lr}
 80081e6:	b086      	sub	sp, #24
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	6078      	str	r0, [r7, #4]
 80081ec:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct netbuf *buf = NULL;
 80081ee:	2300      	movs	r3, #0
 80081f0:	617b      	str	r3, [r7, #20]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 80081f2:	683b      	ldr	r3, [r7, #0]
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d109      	bne.n	800820c <netconn_recv+0x28>
 80081f8:	4b32      	ldr	r3, [pc, #200]	; (80082c4 <netconn_recv+0xe0>)
 80081fa:	f240 3263 	movw	r2, #867	; 0x363
 80081fe:	4932      	ldr	r1, [pc, #200]	; (80082c8 <netconn_recv+0xe4>)
 8008200:	4832      	ldr	r0, [pc, #200]	; (80082cc <netconn_recv+0xe8>)
 8008202:	f010 f8df 	bl	80183c4 <iprintf>
 8008206:	f06f 030f 	mvn.w	r3, #15
 800820a:	e056      	b.n	80082ba <netconn_recv+0xd6>
  *new_buf = NULL;
 800820c:	683b      	ldr	r3, [r7, #0]
 800820e:	2200      	movs	r2, #0
 8008210:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	2b00      	cmp	r3, #0
 8008216:	d109      	bne.n	800822c <netconn_recv+0x48>
 8008218:	4b2a      	ldr	r3, [pc, #168]	; (80082c4 <netconn_recv+0xe0>)
 800821a:	f240 3265 	movw	r2, #869	; 0x365
 800821e:	492c      	ldr	r1, [pc, #176]	; (80082d0 <netconn_recv+0xec>)
 8008220:	482a      	ldr	r0, [pc, #168]	; (80082cc <netconn_recv+0xe8>)
 8008222:	f010 f8cf 	bl	80183c4 <iprintf>
 8008226:	f06f 030f 	mvn.w	r3, #15
 800822a:	e046      	b.n	80082ba <netconn_recv+0xd6>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	781b      	ldrb	r3, [r3, #0]
 8008230:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008234:	2b10      	cmp	r3, #16
 8008236:	d13a      	bne.n	80082ae <netconn_recv+0xca>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
 8008238:	2300      	movs	r3, #0
 800823a:	60fb      	str	r3, [r7, #12]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800823c:	2006      	movs	r0, #6
 800823e:	f003 fac5 	bl	800b7cc <memp_malloc>
 8008242:	6178      	str	r0, [r7, #20]
    if (buf == NULL) {
 8008244:	697b      	ldr	r3, [r7, #20]
 8008246:	2b00      	cmp	r3, #0
 8008248:	d102      	bne.n	8008250 <netconn_recv+0x6c>
      return ERR_MEM;
 800824a:	f04f 33ff 	mov.w	r3, #4294967295
 800824e:	e034      	b.n	80082ba <netconn_recv+0xd6>
    }

    err = netconn_recv_data_tcp(conn, &p, 0);
 8008250:	f107 030c 	add.w	r3, r7, #12
 8008254:	2200      	movs	r2, #0
 8008256:	4619      	mov	r1, r3
 8008258:	6878      	ldr	r0, [r7, #4]
 800825a:	f7ff ff3f 	bl	80080dc <netconn_recv_data_tcp>
 800825e:	4603      	mov	r3, r0
 8008260:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8008262:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008266:	2b00      	cmp	r3, #0
 8008268:	d006      	beq.n	8008278 <netconn_recv+0x94>
      memp_free(MEMP_NETBUF, buf);
 800826a:	6979      	ldr	r1, [r7, #20]
 800826c:	2006      	movs	r0, #6
 800826e:	f003 fb23 	bl	800b8b8 <memp_free>
      return err;
 8008272:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008276:	e020      	b.n	80082ba <netconn_recv+0xd6>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	2b00      	cmp	r3, #0
 800827c:	d106      	bne.n	800828c <netconn_recv+0xa8>
 800827e:	4b11      	ldr	r3, [pc, #68]	; (80082c4 <netconn_recv+0xe0>)
 8008280:	f240 3279 	movw	r2, #889	; 0x379
 8008284:	4913      	ldr	r1, [pc, #76]	; (80082d4 <netconn_recv+0xf0>)
 8008286:	4811      	ldr	r0, [pc, #68]	; (80082cc <netconn_recv+0xe8>)
 8008288:	f010 f89c 	bl	80183c4 <iprintf>

    buf->p = p;
 800828c:	68fa      	ldr	r2, [r7, #12]
 800828e:	697b      	ldr	r3, [r7, #20]
 8008290:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 8008292:	68fa      	ldr	r2, [r7, #12]
 8008294:	697b      	ldr	r3, [r7, #20]
 8008296:	605a      	str	r2, [r3, #4]
    buf->port = 0;
 8008298:	697b      	ldr	r3, [r7, #20]
 800829a:	2200      	movs	r2, #0
 800829c:	819a      	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
 800829e:	697b      	ldr	r3, [r7, #20]
 80082a0:	2200      	movs	r2, #0
 80082a2:	609a      	str	r2, [r3, #8]
    *new_buf = buf;
 80082a4:	683b      	ldr	r3, [r7, #0]
 80082a6:	697a      	ldr	r2, [r7, #20]
 80082a8:	601a      	str	r2, [r3, #0]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
 80082aa:	2300      	movs	r3, #0
 80082ac:	e005      	b.n	80082ba <netconn_recv+0xd6>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf, 0);
 80082ae:	2200      	movs	r2, #0
 80082b0:	6839      	ldr	r1, [r7, #0]
 80082b2:	6878      	ldr	r0, [r7, #4]
 80082b4:	f7ff fe1a 	bl	8007eec <netconn_recv_data>
 80082b8:	4603      	mov	r3, r0
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 80082ba:	4618      	mov	r0, r3
 80082bc:	3718      	adds	r7, #24
 80082be:	46bd      	mov	sp, r7
 80082c0:	bd80      	pop	{r7, pc}
 80082c2:	bf00      	nop
 80082c4:	08019350 	.word	0x08019350
 80082c8:	08019568 	.word	0x08019568
 80082cc:	080193a8 	.word	0x080193a8
 80082d0:	08019588 	.word	0x08019588
 80082d4:	08019600 	.word	0x08019600

080082d8 <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 80082d8:	b580      	push	{r7, lr}
 80082da:	b088      	sub	sp, #32
 80082dc:	af02      	add	r7, sp, #8
 80082de:	60f8      	str	r0, [r7, #12]
 80082e0:	60b9      	str	r1, [r7, #8]
 80082e2:	607a      	str	r2, [r7, #4]
 80082e4:	70fb      	strb	r3, [r7, #3]
  struct netvector vector;
  vector.ptr = dataptr;
 80082e6:	68bb      	ldr	r3, [r7, #8]
 80082e8:	613b      	str	r3, [r7, #16]
  vector.len = size;
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	617b      	str	r3, [r7, #20]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 80082ee:	78fa      	ldrb	r2, [r7, #3]
 80082f0:	f107 0110 	add.w	r1, r7, #16
 80082f4:	6a3b      	ldr	r3, [r7, #32]
 80082f6:	9300      	str	r3, [sp, #0]
 80082f8:	4613      	mov	r3, r2
 80082fa:	2201      	movs	r2, #1
 80082fc:	68f8      	ldr	r0, [r7, #12]
 80082fe:	f000 f805 	bl	800830c <netconn_write_vectors_partly>
 8008302:	4603      	mov	r3, r0
}
 8008304:	4618      	mov	r0, r3
 8008306:	3718      	adds	r7, #24
 8008308:	46bd      	mov	sp, r7
 800830a:	bd80      	pop	{r7, pc}

0800830c <netconn_write_vectors_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_vectors_partly(struct netconn *conn, struct netvector *vectors, u16_t vectorcnt,
                             u8_t apiflags, size_t *bytes_written)
{
 800830c:	b580      	push	{r7, lr}
 800830e:	b092      	sub	sp, #72	; 0x48
 8008310:	af00      	add	r7, sp, #0
 8008312:	60f8      	str	r0, [r7, #12]
 8008314:	60b9      	str	r1, [r7, #8]
 8008316:	4611      	mov	r1, r2
 8008318:	461a      	mov	r2, r3
 800831a:	460b      	mov	r3, r1
 800831c:	80fb      	strh	r3, [r7, #6]
 800831e:	4613      	mov	r3, r2
 8008320:	717b      	strb	r3, [r7, #5]
  err_t err;
  u8_t dontblock;
  size_t size;
  int i;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	2b00      	cmp	r3, #0
 8008326:	d109      	bne.n	800833c <netconn_write_vectors_partly+0x30>
 8008328:	4b4e      	ldr	r3, [pc, #312]	; (8008464 <netconn_write_vectors_partly+0x158>)
 800832a:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800832e:	494e      	ldr	r1, [pc, #312]	; (8008468 <netconn_write_vectors_partly+0x15c>)
 8008330:	484e      	ldr	r0, [pc, #312]	; (800846c <netconn_write_vectors_partly+0x160>)
 8008332:	f010 f847 	bl	80183c4 <iprintf>
 8008336:	f06f 030f 	mvn.w	r3, #15
 800833a:	e08e      	b.n	800845a <netconn_write_vectors_partly+0x14e>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	781b      	ldrb	r3, [r3, #0]
 8008340:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008344:	2b10      	cmp	r3, #16
 8008346:	d009      	beq.n	800835c <netconn_write_vectors_partly+0x50>
 8008348:	4b46      	ldr	r3, [pc, #280]	; (8008464 <netconn_write_vectors_partly+0x158>)
 800834a:	f240 32ef 	movw	r2, #1007	; 0x3ef
 800834e:	4948      	ldr	r1, [pc, #288]	; (8008470 <netconn_write_vectors_partly+0x164>)
 8008350:	4846      	ldr	r0, [pc, #280]	; (800846c <netconn_write_vectors_partly+0x160>)
 8008352:	f010 f837 	bl	80183c4 <iprintf>
 8008356:	f06f 0305 	mvn.w	r3, #5
 800835a:	e07e      	b.n	800845a <netconn_write_vectors_partly+0x14e>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	7f1b      	ldrb	r3, [r3, #28]
 8008360:	f003 0302 	and.w	r3, r3, #2
 8008364:	2b00      	cmp	r3, #0
 8008366:	d104      	bne.n	8008372 <netconn_write_vectors_partly+0x66>
 8008368:	797b      	ldrb	r3, [r7, #5]
 800836a:	f003 0304 	and.w	r3, r3, #4
 800836e:	2b00      	cmp	r3, #0
 8008370:	d001      	beq.n	8008376 <netconn_write_vectors_partly+0x6a>
 8008372:	2301      	movs	r3, #1
 8008374:	e000      	b.n	8008378 <netconn_write_vectors_partly+0x6c>
 8008376:	2300      	movs	r3, #0
 8008378:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 800837c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008380:	2b00      	cmp	r3, #0
 8008382:	d005      	beq.n	8008390 <netconn_write_vectors_partly+0x84>
 8008384:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008386:	2b00      	cmp	r3, #0
 8008388:	d102      	bne.n	8008390 <netconn_write_vectors_partly+0x84>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 800838a:	f06f 0305 	mvn.w	r3, #5
 800838e:	e064      	b.n	800845a <netconn_write_vectors_partly+0x14e>
  }

  /* sum up the total size */
  size = 0;
 8008390:	2300      	movs	r3, #0
 8008392:	647b      	str	r3, [r7, #68]	; 0x44
  for (i = 0; i < vectorcnt; i++) {
 8008394:	2300      	movs	r3, #0
 8008396:	643b      	str	r3, [r7, #64]	; 0x40
 8008398:	e015      	b.n	80083c6 <netconn_write_vectors_partly+0xba>
    size += vectors[i].len;
 800839a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800839c:	00db      	lsls	r3, r3, #3
 800839e:	68ba      	ldr	r2, [r7, #8]
 80083a0:	4413      	add	r3, r2
 80083a2:	685b      	ldr	r3, [r3, #4]
 80083a4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80083a6:	4413      	add	r3, r2
 80083a8:	647b      	str	r3, [r7, #68]	; 0x44
    if (size < vectors[i].len) {
 80083aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80083ac:	00db      	lsls	r3, r3, #3
 80083ae:	68ba      	ldr	r2, [r7, #8]
 80083b0:	4413      	add	r3, r2
 80083b2:	685b      	ldr	r3, [r3, #4]
 80083b4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80083b6:	429a      	cmp	r2, r3
 80083b8:	d202      	bcs.n	80083c0 <netconn_write_vectors_partly+0xb4>
      /* overflow */
      return ERR_VAL;
 80083ba:	f06f 0305 	mvn.w	r3, #5
 80083be:	e04c      	b.n	800845a <netconn_write_vectors_partly+0x14e>
  for (i = 0; i < vectorcnt; i++) {
 80083c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80083c2:	3301      	adds	r3, #1
 80083c4:	643b      	str	r3, [r7, #64]	; 0x40
 80083c6:	88fb      	ldrh	r3, [r7, #6]
 80083c8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80083ca:	429a      	cmp	r2, r3
 80083cc:	dbe5      	blt.n	800839a <netconn_write_vectors_partly+0x8e>
    }
  }
  if (size == 0) {
 80083ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d101      	bne.n	80083d8 <netconn_write_vectors_partly+0xcc>
    return ERR_OK;
 80083d4:	2300      	movs	r3, #0
 80083d6:	e040      	b.n	800845a <netconn_write_vectors_partly+0x14e>
  } else if (size > SSIZE_MAX) {
 80083d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80083da:	2b00      	cmp	r3, #0
 80083dc:	da0a      	bge.n	80083f4 <netconn_write_vectors_partly+0xe8>
    ssize_t limited;
    /* this is required by the socket layer (cannot send full size_t range) */
    if (!bytes_written) {
 80083de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d102      	bne.n	80083ea <netconn_write_vectors_partly+0xde>
      return ERR_VAL;
 80083e4:	f06f 0305 	mvn.w	r3, #5
 80083e8:	e037      	b.n	800845a <netconn_write_vectors_partly+0x14e>
    }
    /* limit the amount of data to send */
    limited = SSIZE_MAX;
 80083ea:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80083ee:	63bb      	str	r3, [r7, #56]	; 0x38
    size = (size_t)limited;
 80083f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083f2:	647b      	str	r3, [r7, #68]	; 0x44
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 80083f8:	68bb      	ldr	r3, [r7, #8]
 80083fa:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 80083fc:	88fb      	ldrh	r3, [r7, #6]
 80083fe:	843b      	strh	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 8008400:	2300      	movs	r3, #0
 8008402:	627b      	str	r3, [r7, #36]	; 0x24
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 8008404:	797b      	ldrb	r3, [r7, #5]
 8008406:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  API_MSG_VAR_REF(msg).msg.w.len = size;
 800840a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800840c:	62bb      	str	r3, [r7, #40]	; 0x28
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 800840e:	2300      	movs	r3, #0
 8008410:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 8008412:	f107 0314 	add.w	r3, r7, #20
 8008416:	4619      	mov	r1, r3
 8008418:	4816      	ldr	r0, [pc, #88]	; (8008474 <netconn_write_vectors_partly+0x168>)
 800841a:	f7ff fb9f 	bl	8007b5c <netconn_apimsg>
 800841e:	4603      	mov	r3, r0
 8008420:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (err == ERR_OK) {
 8008424:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8008428:	2b00      	cmp	r3, #0
 800842a:	d114      	bne.n	8008456 <netconn_write_vectors_partly+0x14a>
    if (bytes_written != NULL) {
 800842c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800842e:	2b00      	cmp	r3, #0
 8008430:	d002      	beq.n	8008438 <netconn_write_vectors_partly+0x12c>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 8008432:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008434:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008436:	601a      	str	r2, [r3, #0]
    }
    /* for blocking, check all requested bytes were written, NOTE: send_timeout is
       treated as dontblock (see dontblock assignment above) */
    if (!dontblock) {
 8008438:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800843c:	2b00      	cmp	r3, #0
 800843e:	d10a      	bne.n	8008456 <netconn_write_vectors_partly+0x14a>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 8008440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008442:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008444:	429a      	cmp	r2, r3
 8008446:	d006      	beq.n	8008456 <netconn_write_vectors_partly+0x14a>
 8008448:	4b06      	ldr	r3, [pc, #24]	; (8008464 <netconn_write_vectors_partly+0x158>)
 800844a:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800844e:	490a      	ldr	r1, [pc, #40]	; (8008478 <netconn_write_vectors_partly+0x16c>)
 8008450:	4806      	ldr	r0, [pc, #24]	; (800846c <netconn_write_vectors_partly+0x160>)
 8008452:	f00f ffb7 	bl	80183c4 <iprintf>
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 8008456:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800845a:	4618      	mov	r0, r3
 800845c:	3748      	adds	r7, #72	; 0x48
 800845e:	46bd      	mov	sp, r7
 8008460:	bd80      	pop	{r7, pc}
 8008462:	bf00      	nop
 8008464:	08019350 	.word	0x08019350
 8008468:	08019628 	.word	0x08019628
 800846c:	080193a8 	.word	0x080193a8
 8008470:	08019644 	.word	0x08019644
 8008474:	08009aa9 	.word	0x08009aa9
 8008478:	08019668 	.word	0x08019668

0800847c <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 800847c:	b580      	push	{r7, lr}
 800847e:	b08c      	sub	sp, #48	; 0x30
 8008480:	af00      	add	r7, sp, #0
 8008482:	6078      	str	r0, [r7, #4]
 8008484:	460b      	mov	r3, r1
 8008486:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	2b00      	cmp	r3, #0
 800848c:	d109      	bne.n	80084a2 <netconn_close_shutdown+0x26>
 800848e:	4b0f      	ldr	r3, [pc, #60]	; (80084cc <netconn_close_shutdown+0x50>)
 8008490:	f240 4247 	movw	r2, #1095	; 0x447
 8008494:	490e      	ldr	r1, [pc, #56]	; (80084d0 <netconn_close_shutdown+0x54>)
 8008496:	480f      	ldr	r0, [pc, #60]	; (80084d4 <netconn_close_shutdown+0x58>)
 8008498:	f00f ff94 	bl	80183c4 <iprintf>
 800849c:	f06f 030f 	mvn.w	r3, #15
 80084a0:	e010      	b.n	80084c4 <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 80084a6:	78fb      	ldrb	r3, [r7, #3]
 80084a8:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 80084aa:	2329      	movs	r3, #41	; 0x29
 80084ac:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 80084ae:	f107 030c 	add.w	r3, r7, #12
 80084b2:	4619      	mov	r1, r3
 80084b4:	4808      	ldr	r0, [pc, #32]	; (80084d8 <netconn_close_shutdown+0x5c>)
 80084b6:	f7ff fb51 	bl	8007b5c <netconn_apimsg>
 80084ba:	4603      	mov	r3, r0
 80084bc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 80084c0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 80084c4:	4618      	mov	r0, r3
 80084c6:	3730      	adds	r7, #48	; 0x30
 80084c8:	46bd      	mov	sp, r7
 80084ca:	bd80      	pop	{r7, pc}
 80084cc:	08019350 	.word	0x08019350
 80084d0:	0801968c 	.word	0x0801968c
 80084d4:	080193a8 	.word	0x080193a8
 80084d8:	08009bc1 	.word	0x08009bc1

080084dc <netconn_close>:
 * @param conn the TCP netconn to close
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
err_t
netconn_close(struct netconn *conn)
{
 80084dc:	b580      	push	{r7, lr}
 80084de:	b082      	sub	sp, #8
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	6078      	str	r0, [r7, #4]
  /* shutting down both ends is the same as closing */
  return netconn_close_shutdown(conn, NETCONN_SHUT_RDWR);
 80084e4:	2103      	movs	r1, #3
 80084e6:	6878      	ldr	r0, [r7, #4]
 80084e8:	f7ff ffc8 	bl	800847c <netconn_close_shutdown>
 80084ec:	4603      	mov	r3, r0
}
 80084ee:	4618      	mov	r0, r3
 80084f0:	3708      	adds	r7, #8
 80084f2:	46bd      	mov	sp, r7
 80084f4:	bd80      	pop	{r7, pc}

080084f6 <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 80084f6:	b580      	push	{r7, lr}
 80084f8:	b084      	sub	sp, #16
 80084fa:	af00      	add	r7, sp, #0
 80084fc:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	2b00      	cmp	r3, #0
 8008502:	d101      	bne.n	8008508 <netconn_err+0x12>
    return ERR_OK;
 8008504:	2300      	movs	r3, #0
 8008506:	e00d      	b.n	8008524 <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 8008508:	f00f fd66 	bl	8017fd8 <sys_arch_protect>
 800850c:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	7a1b      	ldrb	r3, [r3, #8]
 8008512:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	2200      	movs	r2, #0
 8008518:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 800851a:	68f8      	ldr	r0, [r7, #12]
 800851c:	f00f fd6a 	bl	8017ff4 <sys_arch_unprotect>
  return err;
 8008520:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8008524:	4618      	mov	r0, r3
 8008526:	3710      	adds	r7, #16
 8008528:	46bd      	mov	sp, r7
 800852a:	bd80      	pop	{r7, pc}

0800852c <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 800852c:	b580      	push	{r7, lr}
 800852e:	b082      	sub	sp, #8
 8008530:	af00      	add	r7, sp, #0
 8008532:	4603      	mov	r3, r0
 8008534:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 8008536:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800853a:	f113 0f0d 	cmn.w	r3, #13
 800853e:	d009      	beq.n	8008554 <lwip_netconn_err_to_msg+0x28>
 8008540:	f113 0f0d 	cmn.w	r3, #13
 8008544:	dc0c      	bgt.n	8008560 <lwip_netconn_err_to_msg+0x34>
 8008546:	f113 0f0f 	cmn.w	r3, #15
 800854a:	d007      	beq.n	800855c <lwip_netconn_err_to_msg+0x30>
 800854c:	f113 0f0e 	cmn.w	r3, #14
 8008550:	d002      	beq.n	8008558 <lwip_netconn_err_to_msg+0x2c>
 8008552:	e005      	b.n	8008560 <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 8008554:	4b0a      	ldr	r3, [pc, #40]	; (8008580 <lwip_netconn_err_to_msg+0x54>)
 8008556:	e00e      	b.n	8008576 <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 8008558:	4b0a      	ldr	r3, [pc, #40]	; (8008584 <lwip_netconn_err_to_msg+0x58>)
 800855a:	e00c      	b.n	8008576 <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 800855c:	4b0a      	ldr	r3, [pc, #40]	; (8008588 <lwip_netconn_err_to_msg+0x5c>)
 800855e:	e00a      	b.n	8008576 <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 8008560:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008564:	2b00      	cmp	r3, #0
 8008566:	d005      	beq.n	8008574 <lwip_netconn_err_to_msg+0x48>
 8008568:	4b08      	ldr	r3, [pc, #32]	; (800858c <lwip_netconn_err_to_msg+0x60>)
 800856a:	227d      	movs	r2, #125	; 0x7d
 800856c:	4908      	ldr	r1, [pc, #32]	; (8008590 <lwip_netconn_err_to_msg+0x64>)
 800856e:	4809      	ldr	r0, [pc, #36]	; (8008594 <lwip_netconn_err_to_msg+0x68>)
 8008570:	f00f ff28 	bl	80183c4 <iprintf>
      return NULL;
 8008574:	2300      	movs	r3, #0
  }
}
 8008576:	4618      	mov	r0, r3
 8008578:	3708      	adds	r7, #8
 800857a:	46bd      	mov	sp, r7
 800857c:	bd80      	pop	{r7, pc}
 800857e:	bf00      	nop
 8008580:	0801ce04 	.word	0x0801ce04
 8008584:	0801ce05 	.word	0x0801ce05
 8008588:	0801ce06 	.word	0x0801ce06
 800858c:	080196a8 	.word	0x080196a8
 8008590:	080196dc 	.word	0x080196dc
 8008594:	080196ec 	.word	0x080196ec

08008598 <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 8008598:	b580      	push	{r7, lr}
 800859a:	b082      	sub	sp, #8
 800859c:	af00      	add	r7, sp, #0
 800859e:	6078      	str	r0, [r7, #4]
 80085a0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 80085a2:	683b      	ldr	r3, [r7, #0]
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d105      	bne.n	80085b4 <lwip_netconn_is_err_msg+0x1c>
 80085a8:	4b12      	ldr	r3, [pc, #72]	; (80085f4 <lwip_netconn_is_err_msg+0x5c>)
 80085aa:	2285      	movs	r2, #133	; 0x85
 80085ac:	4912      	ldr	r1, [pc, #72]	; (80085f8 <lwip_netconn_is_err_msg+0x60>)
 80085ae:	4813      	ldr	r0, [pc, #76]	; (80085fc <lwip_netconn_is_err_msg+0x64>)
 80085b0:	f00f ff08 	bl	80183c4 <iprintf>

  if (msg == &netconn_aborted) {
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	4a12      	ldr	r2, [pc, #72]	; (8008600 <lwip_netconn_is_err_msg+0x68>)
 80085b8:	4293      	cmp	r3, r2
 80085ba:	d104      	bne.n	80085c6 <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 80085bc:	683b      	ldr	r3, [r7, #0]
 80085be:	22f3      	movs	r2, #243	; 0xf3
 80085c0:	701a      	strb	r2, [r3, #0]
    return 1;
 80085c2:	2301      	movs	r3, #1
 80085c4:	e012      	b.n	80085ec <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	4a0e      	ldr	r2, [pc, #56]	; (8008604 <lwip_netconn_is_err_msg+0x6c>)
 80085ca:	4293      	cmp	r3, r2
 80085cc:	d104      	bne.n	80085d8 <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 80085ce:	683b      	ldr	r3, [r7, #0]
 80085d0:	22f2      	movs	r2, #242	; 0xf2
 80085d2:	701a      	strb	r2, [r3, #0]
    return 1;
 80085d4:	2301      	movs	r3, #1
 80085d6:	e009      	b.n	80085ec <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	4a0b      	ldr	r2, [pc, #44]	; (8008608 <lwip_netconn_is_err_msg+0x70>)
 80085dc:	4293      	cmp	r3, r2
 80085de:	d104      	bne.n	80085ea <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 80085e0:	683b      	ldr	r3, [r7, #0]
 80085e2:	22f1      	movs	r2, #241	; 0xf1
 80085e4:	701a      	strb	r2, [r3, #0]
    return 1;
 80085e6:	2301      	movs	r3, #1
 80085e8:	e000      	b.n	80085ec <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 80085ea:	2300      	movs	r3, #0
}
 80085ec:	4618      	mov	r0, r3
 80085ee:	3708      	adds	r7, #8
 80085f0:	46bd      	mov	sp, r7
 80085f2:	bd80      	pop	{r7, pc}
 80085f4:	080196a8 	.word	0x080196a8
 80085f8:	08019714 	.word	0x08019714
 80085fc:	080196ec 	.word	0x080196ec
 8008600:	0801ce04 	.word	0x0801ce04
 8008604:	0801ce05 	.word	0x0801ce05
 8008608:	0801ce06 	.word	0x0801ce06

0800860c <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 800860c:	b580      	push	{r7, lr}
 800860e:	b088      	sub	sp, #32
 8008610:	af00      	add	r7, sp, #0
 8008612:	60f8      	str	r0, [r7, #12]
 8008614:	60b9      	str	r1, [r7, #8]
 8008616:	607a      	str	r2, [r7, #4]
 8008618:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 800861a:	68bb      	ldr	r3, [r7, #8]
 800861c:	2b00      	cmp	r3, #0
 800861e:	d105      	bne.n	800862c <recv_udp+0x20>
 8008620:	4b34      	ldr	r3, [pc, #208]	; (80086f4 <recv_udp+0xe8>)
 8008622:	22e5      	movs	r2, #229	; 0xe5
 8008624:	4934      	ldr	r1, [pc, #208]	; (80086f8 <recv_udp+0xec>)
 8008626:	4835      	ldr	r0, [pc, #212]	; (80086fc <recv_udp+0xf0>)
 8008628:	f00f fecc 	bl	80183c4 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	2b00      	cmp	r3, #0
 8008630:	d105      	bne.n	800863e <recv_udp+0x32>
 8008632:	4b30      	ldr	r3, [pc, #192]	; (80086f4 <recv_udp+0xe8>)
 8008634:	22e6      	movs	r2, #230	; 0xe6
 8008636:	4932      	ldr	r1, [pc, #200]	; (8008700 <recv_udp+0xf4>)
 8008638:	4830      	ldr	r0, [pc, #192]	; (80086fc <recv_udp+0xf0>)
 800863a:	f00f fec3 	bl	80183c4 <iprintf>
  conn = (struct netconn *)arg;
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 8008642:	69fb      	ldr	r3, [r7, #28]
 8008644:	2b00      	cmp	r3, #0
 8008646:	d103      	bne.n	8008650 <recv_udp+0x44>
    pbuf_free(p);
 8008648:	6878      	ldr	r0, [r7, #4]
 800864a:	f003 ffe5 	bl	800c618 <pbuf_free>
    return;
 800864e:	e04d      	b.n	80086ec <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 8008650:	69fb      	ldr	r3, [r7, #28]
 8008652:	685b      	ldr	r3, [r3, #4]
 8008654:	68ba      	ldr	r2, [r7, #8]
 8008656:	429a      	cmp	r2, r3
 8008658:	d005      	beq.n	8008666 <recv_udp+0x5a>
 800865a:	4b26      	ldr	r3, [pc, #152]	; (80086f4 <recv_udp+0xe8>)
 800865c:	22ee      	movs	r2, #238	; 0xee
 800865e:	4929      	ldr	r1, [pc, #164]	; (8008704 <recv_udp+0xf8>)
 8008660:	4826      	ldr	r0, [pc, #152]	; (80086fc <recv_udp+0xf0>)
 8008662:	f00f feaf 	bl	80183c4 <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8008666:	69fb      	ldr	r3, [r7, #28]
 8008668:	3310      	adds	r3, #16
 800866a:	4618      	mov	r0, r3
 800866c:	f00f fb99 	bl	8017da2 <sys_mbox_valid>
 8008670:	4603      	mov	r3, r0
 8008672:	2b00      	cmp	r3, #0
 8008674:	d103      	bne.n	800867e <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 8008676:	6878      	ldr	r0, [r7, #4]
 8008678:	f003 ffce 	bl	800c618 <pbuf_free>
    return;
 800867c:	e036      	b.n	80086ec <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800867e:	2006      	movs	r0, #6
 8008680:	f003 f8a4 	bl	800b7cc <memp_malloc>
 8008684:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 8008686:	69bb      	ldr	r3, [r7, #24]
 8008688:	2b00      	cmp	r3, #0
 800868a:	d103      	bne.n	8008694 <recv_udp+0x88>
    pbuf_free(p);
 800868c:	6878      	ldr	r0, [r7, #4]
 800868e:	f003 ffc3 	bl	800c618 <pbuf_free>
    return;
 8008692:	e02b      	b.n	80086ec <recv_udp+0xe0>
  } else {
    buf->p = p;
 8008694:	69bb      	ldr	r3, [r7, #24]
 8008696:	687a      	ldr	r2, [r7, #4]
 8008698:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800869a:	69bb      	ldr	r3, [r7, #24]
 800869c:	687a      	ldr	r2, [r7, #4]
 800869e:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 80086a0:	683b      	ldr	r3, [r7, #0]
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d002      	beq.n	80086ac <recv_udp+0xa0>
 80086a6:	683b      	ldr	r3, [r7, #0]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	e000      	b.n	80086ae <recv_udp+0xa2>
 80086ac:	2300      	movs	r3, #0
 80086ae:	69ba      	ldr	r2, [r7, #24]
 80086b0:	6093      	str	r3, [r2, #8]
    buf->port = port;
 80086b2:	69bb      	ldr	r3, [r7, #24]
 80086b4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80086b6:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	891b      	ldrh	r3, [r3, #8]
 80086bc:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 80086be:	69fb      	ldr	r3, [r7, #28]
 80086c0:	3310      	adds	r3, #16
 80086c2:	69b9      	ldr	r1, [r7, #24]
 80086c4:	4618      	mov	r0, r3
 80086c6:	f00f faf7 	bl	8017cb8 <sys_mbox_trypost>
 80086ca:	4603      	mov	r3, r0
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d003      	beq.n	80086d8 <recv_udp+0xcc>
    netbuf_delete(buf);
 80086d0:	69b8      	ldr	r0, [r7, #24]
 80086d2:	f001 fb01 	bl	8009cd8 <netbuf_delete>
    return;
 80086d6:	e009      	b.n	80086ec <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 80086d8:	69fb      	ldr	r3, [r7, #28]
 80086da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d005      	beq.n	80086ec <recv_udp+0xe0>
 80086e0:	69fb      	ldr	r3, [r7, #28]
 80086e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086e4:	8afa      	ldrh	r2, [r7, #22]
 80086e6:	2100      	movs	r1, #0
 80086e8:	69f8      	ldr	r0, [r7, #28]
 80086ea:	4798      	blx	r3
  }
}
 80086ec:	3720      	adds	r7, #32
 80086ee:	46bd      	mov	sp, r7
 80086f0:	bd80      	pop	{r7, pc}
 80086f2:	bf00      	nop
 80086f4:	080196a8 	.word	0x080196a8
 80086f8:	08019720 	.word	0x08019720
 80086fc:	080196ec 	.word	0x080196ec
 8008700:	08019744 	.word	0x08019744
 8008704:	08019764 	.word	0x08019764

08008708 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8008708:	b580      	push	{r7, lr}
 800870a:	b088      	sub	sp, #32
 800870c:	af00      	add	r7, sp, #0
 800870e:	60f8      	str	r0, [r7, #12]
 8008710:	60b9      	str	r1, [r7, #8]
 8008712:	607a      	str	r2, [r7, #4]
 8008714:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 8008716:	68bb      	ldr	r3, [r7, #8]
 8008718:	2b00      	cmp	r3, #0
 800871a:	d106      	bne.n	800872a <recv_tcp+0x22>
 800871c:	4b36      	ldr	r3, [pc, #216]	; (80087f8 <recv_tcp+0xf0>)
 800871e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8008722:	4936      	ldr	r1, [pc, #216]	; (80087fc <recv_tcp+0xf4>)
 8008724:	4836      	ldr	r0, [pc, #216]	; (8008800 <recv_tcp+0xf8>)
 8008726:	f00f fe4d 	bl	80183c4 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	2b00      	cmp	r3, #0
 800872e:	d106      	bne.n	800873e <recv_tcp+0x36>
 8008730:	4b31      	ldr	r3, [pc, #196]	; (80087f8 <recv_tcp+0xf0>)
 8008732:	f240 122d 	movw	r2, #301	; 0x12d
 8008736:	4933      	ldr	r1, [pc, #204]	; (8008804 <recv_tcp+0xfc>)
 8008738:	4831      	ldr	r0, [pc, #196]	; (8008800 <recv_tcp+0xf8>)
 800873a:	f00f fe43 	bl	80183c4 <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 800873e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008742:	2b00      	cmp	r3, #0
 8008744:	d006      	beq.n	8008754 <recv_tcp+0x4c>
 8008746:	4b2c      	ldr	r3, [pc, #176]	; (80087f8 <recv_tcp+0xf0>)
 8008748:	f44f 7297 	mov.w	r2, #302	; 0x12e
 800874c:	492e      	ldr	r1, [pc, #184]	; (8008808 <recv_tcp+0x100>)
 800874e:	482c      	ldr	r0, [pc, #176]	; (8008800 <recv_tcp+0xf8>)
 8008750:	f00f fe38 	bl	80183c4 <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 8008758:	697b      	ldr	r3, [r7, #20]
 800875a:	2b00      	cmp	r3, #0
 800875c:	d102      	bne.n	8008764 <recv_tcp+0x5c>
    return ERR_VAL;
 800875e:	f06f 0305 	mvn.w	r3, #5
 8008762:	e045      	b.n	80087f0 <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 8008764:	697b      	ldr	r3, [r7, #20]
 8008766:	685b      	ldr	r3, [r3, #4]
 8008768:	68ba      	ldr	r2, [r7, #8]
 800876a:	429a      	cmp	r2, r3
 800876c:	d006      	beq.n	800877c <recv_tcp+0x74>
 800876e:	4b22      	ldr	r3, [pc, #136]	; (80087f8 <recv_tcp+0xf0>)
 8008770:	f240 1235 	movw	r2, #309	; 0x135
 8008774:	4925      	ldr	r1, [pc, #148]	; (800880c <recv_tcp+0x104>)
 8008776:	4822      	ldr	r0, [pc, #136]	; (8008800 <recv_tcp+0xf8>)
 8008778:	f00f fe24 	bl	80183c4 <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800877c:	697b      	ldr	r3, [r7, #20]
 800877e:	3310      	adds	r3, #16
 8008780:	4618      	mov	r0, r3
 8008782:	f00f fb0e 	bl	8017da2 <sys_mbox_valid>
 8008786:	4603      	mov	r3, r0
 8008788:	2b00      	cmp	r3, #0
 800878a:	d10d      	bne.n	80087a8 <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	2b00      	cmp	r3, #0
 8008790:	d008      	beq.n	80087a4 <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	891b      	ldrh	r3, [r3, #8]
 8008796:	4619      	mov	r1, r3
 8008798:	68b8      	ldr	r0, [r7, #8]
 800879a:	f004 ff17 	bl	800d5cc <tcp_recved>
      pbuf_free(p);
 800879e:	6878      	ldr	r0, [r7, #4]
 80087a0:	f003 ff3a 	bl	800c618 <pbuf_free>
    }
    return ERR_OK;
 80087a4:	2300      	movs	r3, #0
 80087a6:	e023      	b.n	80087f0 <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d005      	beq.n	80087ba <recv_tcp+0xb2>
    msg = p;
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	891b      	ldrh	r3, [r3, #8]
 80087b6:	83fb      	strh	r3, [r7, #30]
 80087b8:	e003      	b.n	80087c2 <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 80087ba:	4b15      	ldr	r3, [pc, #84]	; (8008810 <recv_tcp+0x108>)
 80087bc:	61bb      	str	r3, [r7, #24]
    len = 0;
 80087be:	2300      	movs	r3, #0
 80087c0:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 80087c2:	697b      	ldr	r3, [r7, #20]
 80087c4:	3310      	adds	r3, #16
 80087c6:	69b9      	ldr	r1, [r7, #24]
 80087c8:	4618      	mov	r0, r3
 80087ca:	f00f fa75 	bl	8017cb8 <sys_mbox_trypost>
 80087ce:	4603      	mov	r3, r0
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d002      	beq.n	80087da <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 80087d4:	f04f 33ff 	mov.w	r3, #4294967295
 80087d8:	e00a      	b.n	80087f0 <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 80087da:	697b      	ldr	r3, [r7, #20]
 80087dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d005      	beq.n	80087ee <recv_tcp+0xe6>
 80087e2:	697b      	ldr	r3, [r7, #20]
 80087e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087e6:	8bfa      	ldrh	r2, [r7, #30]
 80087e8:	2100      	movs	r1, #0
 80087ea:	6978      	ldr	r0, [r7, #20]
 80087ec:	4798      	blx	r3
  }

  return ERR_OK;
 80087ee:	2300      	movs	r3, #0
}
 80087f0:	4618      	mov	r0, r3
 80087f2:	3720      	adds	r7, #32
 80087f4:	46bd      	mov	sp, r7
 80087f6:	bd80      	pop	{r7, pc}
 80087f8:	080196a8 	.word	0x080196a8
 80087fc:	08019784 	.word	0x08019784
 8008800:	080196ec 	.word	0x080196ec
 8008804:	080197a8 	.word	0x080197a8
 8008808:	080197c8 	.word	0x080197c8
 800880c:	080197e0 	.word	0x080197e0
 8008810:	0801ce06 	.word	0x0801ce06

08008814 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 8008814:	b580      	push	{r7, lr}
 8008816:	b084      	sub	sp, #16
 8008818:	af00      	add	r7, sp, #0
 800881a:	6078      	str	r0, [r7, #4]
 800881c:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	2b00      	cmp	r3, #0
 8008826:	d106      	bne.n	8008836 <poll_tcp+0x22>
 8008828:	4b29      	ldr	r3, [pc, #164]	; (80088d0 <poll_tcp+0xbc>)
 800882a:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 800882e:	4929      	ldr	r1, [pc, #164]	; (80088d4 <poll_tcp+0xc0>)
 8008830:	4829      	ldr	r0, [pc, #164]	; (80088d8 <poll_tcp+0xc4>)
 8008832:	f00f fdc7 	bl	80183c4 <iprintf>

  if (conn->state == NETCONN_WRITE) {
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	785b      	ldrb	r3, [r3, #1]
 800883a:	2b01      	cmp	r3, #1
 800883c:	d104      	bne.n	8008848 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800883e:	2101      	movs	r1, #1
 8008840:	68f8      	ldr	r0, [r7, #12]
 8008842:	f000 ff65 	bl	8009710 <lwip_netconn_do_writemore>
 8008846:	e016      	b.n	8008876 <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	785b      	ldrb	r3, [r3, #1]
 800884c:	2b04      	cmp	r3, #4
 800884e:	d112      	bne.n	8008876 <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	6a1b      	ldr	r3, [r3, #32]
 8008854:	2b00      	cmp	r3, #0
 8008856:	d00a      	beq.n	800886e <poll_tcp+0x5a>
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	6a1b      	ldr	r3, [r3, #32]
 800885c:	7a5b      	ldrb	r3, [r3, #9]
 800885e:	2b00      	cmp	r3, #0
 8008860:	d005      	beq.n	800886e <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	6a1b      	ldr	r3, [r3, #32]
 8008866:	7a5a      	ldrb	r2, [r3, #9]
 8008868:	3a01      	subs	r2, #1
 800886a:	b2d2      	uxtb	r2, r2
 800886c:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800886e:	2101      	movs	r1, #1
 8008870:	68f8      	ldr	r0, [r7, #12]
 8008872:	f000 fbf7 	bl	8009064 <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	7f1b      	ldrb	r3, [r3, #28]
 800887a:	f003 0310 	and.w	r3, r3, #16
 800887e:	2b00      	cmp	r3, #0
 8008880:	d021      	beq.n	80088c6 <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	685b      	ldr	r3, [r3, #4]
 8008886:	2b00      	cmp	r3, #0
 8008888:	d01d      	beq.n	80088c6 <poll_tcp+0xb2>
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	685b      	ldr	r3, [r3, #4]
 800888e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8008892:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 8008896:	d316      	bcc.n	80088c6 <poll_tcp+0xb2>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	685b      	ldr	r3, [r3, #4]
 800889c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 80088a0:	2b04      	cmp	r3, #4
 80088a2:	d810      	bhi.n	80088c6 <poll_tcp+0xb2>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	7f1b      	ldrb	r3, [r3, #28]
 80088a8:	f023 0310 	bic.w	r3, r3, #16
 80088ac:	b2da      	uxtb	r2, r3
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d005      	beq.n	80088c6 <poll_tcp+0xb2>
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088be:	2200      	movs	r2, #0
 80088c0:	2102      	movs	r1, #2
 80088c2:	68f8      	ldr	r0, [r7, #12]
 80088c4:	4798      	blx	r3
    }
  }

  return ERR_OK;
 80088c6:	2300      	movs	r3, #0
}
 80088c8:	4618      	mov	r0, r3
 80088ca:	3710      	adds	r7, #16
 80088cc:	46bd      	mov	sp, r7
 80088ce:	bd80      	pop	{r7, pc}
 80088d0:	080196a8 	.word	0x080196a8
 80088d4:	08019800 	.word	0x08019800
 80088d8:	080196ec 	.word	0x080196ec

080088dc <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 80088dc:	b580      	push	{r7, lr}
 80088de:	b086      	sub	sp, #24
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	60f8      	str	r0, [r7, #12]
 80088e4:	60b9      	str	r1, [r7, #8]
 80088e6:	4613      	mov	r3, r2
 80088e8:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 80088ee:	697b      	ldr	r3, [r7, #20]
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d106      	bne.n	8008902 <sent_tcp+0x26>
 80088f4:	4b20      	ldr	r3, [pc, #128]	; (8008978 <sent_tcp+0x9c>)
 80088f6:	f240 1293 	movw	r2, #403	; 0x193
 80088fa:	4920      	ldr	r1, [pc, #128]	; (800897c <sent_tcp+0xa0>)
 80088fc:	4820      	ldr	r0, [pc, #128]	; (8008980 <sent_tcp+0xa4>)
 80088fe:	f00f fd61 	bl	80183c4 <iprintf>

  if (conn) {
 8008902:	697b      	ldr	r3, [r7, #20]
 8008904:	2b00      	cmp	r3, #0
 8008906:	d032      	beq.n	800896e <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 8008908:	697b      	ldr	r3, [r7, #20]
 800890a:	785b      	ldrb	r3, [r3, #1]
 800890c:	2b01      	cmp	r3, #1
 800890e:	d104      	bne.n	800891a <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8008910:	2101      	movs	r1, #1
 8008912:	6978      	ldr	r0, [r7, #20]
 8008914:	f000 fefc 	bl	8009710 <lwip_netconn_do_writemore>
 8008918:	e007      	b.n	800892a <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 800891a:	697b      	ldr	r3, [r7, #20]
 800891c:	785b      	ldrb	r3, [r3, #1]
 800891e:	2b04      	cmp	r3, #4
 8008920:	d103      	bne.n	800892a <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8008922:	2101      	movs	r1, #1
 8008924:	6978      	ldr	r0, [r7, #20]
 8008926:	f000 fb9d 	bl	8009064 <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800892a:	697b      	ldr	r3, [r7, #20]
 800892c:	685b      	ldr	r3, [r3, #4]
 800892e:	2b00      	cmp	r3, #0
 8008930:	d01d      	beq.n	800896e <sent_tcp+0x92>
 8008932:	697b      	ldr	r3, [r7, #20]
 8008934:	685b      	ldr	r3, [r3, #4]
 8008936:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800893a:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800893e:	d316      	bcc.n	800896e <sent_tcp+0x92>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8008940:	697b      	ldr	r3, [r7, #20]
 8008942:	685b      	ldr	r3, [r3, #4]
 8008944:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8008948:	2b04      	cmp	r3, #4
 800894a:	d810      	bhi.n	800896e <sent_tcp+0x92>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800894c:	697b      	ldr	r3, [r7, #20]
 800894e:	7f1b      	ldrb	r3, [r3, #28]
 8008950:	f023 0310 	bic.w	r3, r3, #16
 8008954:	b2da      	uxtb	r2, r3
 8008956:	697b      	ldr	r3, [r7, #20]
 8008958:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 800895a:	697b      	ldr	r3, [r7, #20]
 800895c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800895e:	2b00      	cmp	r3, #0
 8008960:	d005      	beq.n	800896e <sent_tcp+0x92>
 8008962:	697b      	ldr	r3, [r7, #20]
 8008964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008966:	88fa      	ldrh	r2, [r7, #6]
 8008968:	2102      	movs	r1, #2
 800896a:	6978      	ldr	r0, [r7, #20]
 800896c:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800896e:	2300      	movs	r3, #0
}
 8008970:	4618      	mov	r0, r3
 8008972:	3718      	adds	r7, #24
 8008974:	46bd      	mov	sp, r7
 8008976:	bd80      	pop	{r7, pc}
 8008978:	080196a8 	.word	0x080196a8
 800897c:	08019800 	.word	0x08019800
 8008980:	080196ec 	.word	0x080196ec

08008984 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 8008984:	b580      	push	{r7, lr}
 8008986:	b088      	sub	sp, #32
 8008988:	af00      	add	r7, sp, #0
 800898a:	6078      	str	r0, [r7, #4]
 800898c:	460b      	mov	r3, r1
 800898e:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8008994:	69fb      	ldr	r3, [r7, #28]
 8008996:	2b00      	cmp	r3, #0
 8008998:	d106      	bne.n	80089a8 <err_tcp+0x24>
 800899a:	4b5f      	ldr	r3, [pc, #380]	; (8008b18 <err_tcp+0x194>)
 800899c:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 80089a0:	495e      	ldr	r1, [pc, #376]	; (8008b1c <err_tcp+0x198>)
 80089a2:	485f      	ldr	r0, [pc, #380]	; (8008b20 <err_tcp+0x19c>)
 80089a4:	f00f fd0e 	bl	80183c4 <iprintf>

  SYS_ARCH_PROTECT(lev);
 80089a8:	f00f fb16 	bl	8017fd8 <sys_arch_protect>
 80089ac:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 80089ae:	69fb      	ldr	r3, [r7, #28]
 80089b0:	2200      	movs	r2, #0
 80089b2:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 80089b4:	69fb      	ldr	r3, [r7, #28]
 80089b6:	78fa      	ldrb	r2, [r7, #3]
 80089b8:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 80089ba:	69fb      	ldr	r3, [r7, #28]
 80089bc:	7f1b      	ldrb	r3, [r3, #28]
 80089be:	f043 0301 	orr.w	r3, r3, #1
 80089c2:	b2da      	uxtb	r2, r3
 80089c4:	69fb      	ldr	r3, [r7, #28]
 80089c6:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 80089c8:	69fb      	ldr	r3, [r7, #28]
 80089ca:	785b      	ldrb	r3, [r3, #1]
 80089cc:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 80089ce:	69fb      	ldr	r3, [r7, #28]
 80089d0:	2200      	movs	r2, #0
 80089d2:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 80089d4:	69b8      	ldr	r0, [r7, #24]
 80089d6:	f00f fb0d 	bl	8017ff4 <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 80089da:	69fb      	ldr	r3, [r7, #28]
 80089dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d005      	beq.n	80089ee <err_tcp+0x6a>
 80089e2:	69fb      	ldr	r3, [r7, #28]
 80089e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089e6:	2200      	movs	r2, #0
 80089e8:	2104      	movs	r1, #4
 80089ea:	69f8      	ldr	r0, [r7, #28]
 80089ec:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 80089ee:	69fb      	ldr	r3, [r7, #28]
 80089f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d005      	beq.n	8008a02 <err_tcp+0x7e>
 80089f6:	69fb      	ldr	r3, [r7, #28]
 80089f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089fa:	2200      	movs	r2, #0
 80089fc:	2100      	movs	r1, #0
 80089fe:	69f8      	ldr	r0, [r7, #28]
 8008a00:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8008a02:	69fb      	ldr	r3, [r7, #28]
 8008a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d005      	beq.n	8008a16 <err_tcp+0x92>
 8008a0a:	69fb      	ldr	r3, [r7, #28]
 8008a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a0e:	2200      	movs	r2, #0
 8008a10:	2102      	movs	r1, #2
 8008a12:	69f8      	ldr	r0, [r7, #28]
 8008a14:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 8008a16:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008a1a:	4618      	mov	r0, r3
 8008a1c:	f7ff fd86 	bl	800852c <lwip_netconn_err_to_msg>
 8008a20:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8008a22:	69fb      	ldr	r3, [r7, #28]
 8008a24:	3310      	adds	r3, #16
 8008a26:	4618      	mov	r0, r3
 8008a28:	f00f f9bb 	bl	8017da2 <sys_mbox_valid>
 8008a2c:	4603      	mov	r3, r0
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d005      	beq.n	8008a3e <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 8008a32:	69fb      	ldr	r3, [r7, #28]
 8008a34:	3310      	adds	r3, #16
 8008a36:	6939      	ldr	r1, [r7, #16]
 8008a38:	4618      	mov	r0, r3
 8008a3a:	f00f f93d 	bl	8017cb8 <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 8008a3e:	69fb      	ldr	r3, [r7, #28]
 8008a40:	3314      	adds	r3, #20
 8008a42:	4618      	mov	r0, r3
 8008a44:	f00f f9ad 	bl	8017da2 <sys_mbox_valid>
 8008a48:	4603      	mov	r3, r0
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d005      	beq.n	8008a5a <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 8008a4e:	69fb      	ldr	r3, [r7, #28]
 8008a50:	3314      	adds	r3, #20
 8008a52:	6939      	ldr	r1, [r7, #16]
 8008a54:	4618      	mov	r0, r3
 8008a56:	f00f f92f 	bl	8017cb8 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 8008a5a:	7dfb      	ldrb	r3, [r7, #23]
 8008a5c:	2b01      	cmp	r3, #1
 8008a5e:	d005      	beq.n	8008a6c <err_tcp+0xe8>
 8008a60:	7dfb      	ldrb	r3, [r7, #23]
 8008a62:	2b04      	cmp	r3, #4
 8008a64:	d002      	beq.n	8008a6c <err_tcp+0xe8>
 8008a66:	7dfb      	ldrb	r3, [r7, #23]
 8008a68:	2b03      	cmp	r3, #3
 8008a6a:	d143      	bne.n	8008af4 <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 8008a6c:	69fb      	ldr	r3, [r7, #28]
 8008a6e:	7f1b      	ldrb	r3, [r3, #28]
 8008a70:	f003 0304 	and.w	r3, r3, #4
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	bf14      	ite	ne
 8008a78:	2301      	movne	r3, #1
 8008a7a:	2300      	moveq	r3, #0
 8008a7c:	b2db      	uxtb	r3, r3
 8008a7e:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 8008a80:	69fb      	ldr	r3, [r7, #28]
 8008a82:	7f1b      	ldrb	r3, [r3, #28]
 8008a84:	f023 0304 	bic.w	r3, r3, #4
 8008a88:	b2da      	uxtb	r2, r3
 8008a8a:	69fb      	ldr	r3, [r7, #28]
 8008a8c:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d13b      	bne.n	8008b0c <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8008a94:	69fb      	ldr	r3, [r7, #28]
 8008a96:	6a1b      	ldr	r3, [r3, #32]
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d106      	bne.n	8008aaa <err_tcp+0x126>
 8008a9c:	4b1e      	ldr	r3, [pc, #120]	; (8008b18 <err_tcp+0x194>)
 8008a9e:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8008aa2:	4920      	ldr	r1, [pc, #128]	; (8008b24 <err_tcp+0x1a0>)
 8008aa4:	481e      	ldr	r0, [pc, #120]	; (8008b20 <err_tcp+0x19c>)
 8008aa6:	f00f fc8d 	bl	80183c4 <iprintf>
      if (old_state == NETCONN_CLOSE) {
 8008aaa:	7dfb      	ldrb	r3, [r7, #23]
 8008aac:	2b04      	cmp	r3, #4
 8008aae:	d104      	bne.n	8008aba <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 8008ab0:	69fb      	ldr	r3, [r7, #28]
 8008ab2:	6a1b      	ldr	r3, [r3, #32]
 8008ab4:	2200      	movs	r2, #0
 8008ab6:	711a      	strb	r2, [r3, #4]
 8008ab8:	e003      	b.n	8008ac2 <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 8008aba:	69fb      	ldr	r3, [r7, #28]
 8008abc:	6a1b      	ldr	r3, [r3, #32]
 8008abe:	78fa      	ldrb	r2, [r7, #3]
 8008ac0:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8008ac2:	69fb      	ldr	r3, [r7, #28]
 8008ac4:	6a1b      	ldr	r3, [r3, #32]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	330c      	adds	r3, #12
 8008aca:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 8008acc:	68b8      	ldr	r0, [r7, #8]
 8008ace:	f00f f9f9 	bl	8017ec4 <sys_sem_valid>
 8008ad2:	4603      	mov	r3, r0
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d106      	bne.n	8008ae6 <err_tcp+0x162>
 8008ad8:	4b0f      	ldr	r3, [pc, #60]	; (8008b18 <err_tcp+0x194>)
 8008ada:	f240 12ef 	movw	r2, #495	; 0x1ef
 8008ade:	4912      	ldr	r1, [pc, #72]	; (8008b28 <err_tcp+0x1a4>)
 8008ae0:	480f      	ldr	r0, [pc, #60]	; (8008b20 <err_tcp+0x19c>)
 8008ae2:	f00f fc6f 	bl	80183c4 <iprintf>
      conn->current_msg = NULL;
 8008ae6:	69fb      	ldr	r3, [r7, #28]
 8008ae8:	2200      	movs	r2, #0
 8008aea:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 8008aec:	68b8      	ldr	r0, [r7, #8]
 8008aee:	f00f f9cf 	bl	8017e90 <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 8008af2:	e00b      	b.n	8008b0c <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 8008af4:	69fb      	ldr	r3, [r7, #28]
 8008af6:	6a1b      	ldr	r3, [r3, #32]
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d008      	beq.n	8008b0e <err_tcp+0x18a>
 8008afc:	4b06      	ldr	r3, [pc, #24]	; (8008b18 <err_tcp+0x194>)
 8008afe:	f240 12f7 	movw	r2, #503	; 0x1f7
 8008b02:	490a      	ldr	r1, [pc, #40]	; (8008b2c <err_tcp+0x1a8>)
 8008b04:	4806      	ldr	r0, [pc, #24]	; (8008b20 <err_tcp+0x19c>)
 8008b06:	f00f fc5d 	bl	80183c4 <iprintf>
  }
}
 8008b0a:	e000      	b.n	8008b0e <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 8008b0c:	bf00      	nop
}
 8008b0e:	bf00      	nop
 8008b10:	3720      	adds	r7, #32
 8008b12:	46bd      	mov	sp, r7
 8008b14:	bd80      	pop	{r7, pc}
 8008b16:	bf00      	nop
 8008b18:	080196a8 	.word	0x080196a8
 8008b1c:	08019800 	.word	0x08019800
 8008b20:	080196ec 	.word	0x080196ec
 8008b24:	08019810 	.word	0x08019810
 8008b28:	0801982c 	.word	0x0801982c
 8008b2c:	08019848 	.word	0x08019848

08008b30 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 8008b30:	b580      	push	{r7, lr}
 8008b32:	b084      	sub	sp, #16
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	685b      	ldr	r3, [r3, #4]
 8008b3c:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 8008b3e:	6879      	ldr	r1, [r7, #4]
 8008b40:	68f8      	ldr	r0, [r7, #12]
 8008b42:	f005 fc27 	bl	800e394 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 8008b46:	490a      	ldr	r1, [pc, #40]	; (8008b70 <setup_tcp+0x40>)
 8008b48:	68f8      	ldr	r0, [r7, #12]
 8008b4a:	f005 fc35 	bl	800e3b8 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 8008b4e:	4909      	ldr	r1, [pc, #36]	; (8008b74 <setup_tcp+0x44>)
 8008b50:	68f8      	ldr	r0, [r7, #12]
 8008b52:	f005 fc53 	bl	800e3fc <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 8008b56:	2202      	movs	r2, #2
 8008b58:	4907      	ldr	r1, [pc, #28]	; (8008b78 <setup_tcp+0x48>)
 8008b5a:	68f8      	ldr	r0, [r7, #12]
 8008b5c:	f005 fcaa 	bl	800e4b4 <tcp_poll>
  tcp_err(pcb, err_tcp);
 8008b60:	4906      	ldr	r1, [pc, #24]	; (8008b7c <setup_tcp+0x4c>)
 8008b62:	68f8      	ldr	r0, [r7, #12]
 8008b64:	f005 fc6c 	bl	800e440 <tcp_err>
}
 8008b68:	bf00      	nop
 8008b6a:	3710      	adds	r7, #16
 8008b6c:	46bd      	mov	sp, r7
 8008b6e:	bd80      	pop	{r7, pc}
 8008b70:	08008709 	.word	0x08008709
 8008b74:	080088dd 	.word	0x080088dd
 8008b78:	08008815 	.word	0x08008815
 8008b7c:	08008985 	.word	0x08008985

08008b80 <accept_function>:
 *
 * @see tcp.h (struct tcp_pcb_listen.accept) for parameters and return value
 */
static err_t
accept_function(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 8008b80:	b590      	push	{r4, r7, lr}
 8008b82:	b089      	sub	sp, #36	; 0x24
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	60f8      	str	r0, [r7, #12]
 8008b88:	60b9      	str	r1, [r7, #8]
 8008b8a:	4613      	mov	r3, r2
 8008b8c:	71fb      	strb	r3, [r7, #7]
  struct netconn *newconn;
  struct netconn *conn = (struct netconn *)arg;
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 8008b92:	69fb      	ldr	r3, [r7, #28]
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d102      	bne.n	8008b9e <accept_function+0x1e>
    return ERR_VAL;
 8008b98:	f06f 0305 	mvn.w	r3, #5
 8008b9c:	e0a1      	b.n	8008ce2 <accept_function+0x162>
  }
  if (!NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 8008b9e:	69fb      	ldr	r3, [r7, #28]
 8008ba0:	3314      	adds	r3, #20
 8008ba2:	4618      	mov	r0, r3
 8008ba4:	f00f f8fd 	bl	8017da2 <sys_mbox_valid>
 8008ba8:	4603      	mov	r3, r0
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d102      	bne.n	8008bb4 <accept_function+0x34>
    LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: acceptmbox already deleted\n"));
    return ERR_VAL;
 8008bae:	f06f 0305 	mvn.w	r3, #5
 8008bb2:	e096      	b.n	8008ce2 <accept_function+0x162>
  }

  if (newpcb == NULL) {
 8008bb4:	68bb      	ldr	r3, [r7, #8]
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d11b      	bne.n	8008bf2 <accept_function+0x72>
    /* out-of-pcbs during connect: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 8008bba:	69fb      	ldr	r3, [r7, #28]
 8008bbc:	f103 0414 	add.w	r4, r3, #20
 8008bc0:	f06f 000c 	mvn.w	r0, #12
 8008bc4:	f7ff fcb2 	bl	800852c <lwip_netconn_err_to_msg>
 8008bc8:	4603      	mov	r3, r0
 8008bca:	4619      	mov	r1, r3
 8008bcc:	4620      	mov	r0, r4
 8008bce:	f00f f873 	bl	8017cb8 <sys_mbox_trypost>
 8008bd2:	4603      	mov	r3, r0
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d109      	bne.n	8008bec <accept_function+0x6c>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8008bd8:	69fb      	ldr	r3, [r7, #28]
 8008bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d005      	beq.n	8008bec <accept_function+0x6c>
 8008be0:	69fb      	ldr	r3, [r7, #28]
 8008be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008be4:	2200      	movs	r2, #0
 8008be6:	2100      	movs	r1, #0
 8008be8:	69f8      	ldr	r0, [r7, #28]
 8008bea:	4798      	blx	r3
    }
    return ERR_VAL;
 8008bec:	f06f 0305 	mvn.w	r3, #5
 8008bf0:	e077      	b.n	8008ce2 <accept_function+0x162>
  }
  LWIP_ASSERT("expect newpcb == NULL or err == ERR_OK", err == ERR_OK);
 8008bf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d006      	beq.n	8008c08 <accept_function+0x88>
 8008bfa:	4b3c      	ldr	r3, [pc, #240]	; (8008cec <accept_function+0x16c>)
 8008bfc:	f240 222a 	movw	r2, #554	; 0x22a
 8008c00:	493b      	ldr	r1, [pc, #236]	; (8008cf0 <accept_function+0x170>)
 8008c02:	483c      	ldr	r0, [pc, #240]	; (8008cf4 <accept_function+0x174>)
 8008c04:	f00f fbde 	bl	80183c4 <iprintf>

  LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: newpcb->state: %s\n", tcp_debug_state_str(newpcb->state)));

  /* We have to set the callback here even though
   * the new socket is unknown. newconn->socket is marked as -1. */
  newconn = netconn_alloc(conn->type, conn->callback);
 8008c08:	69fb      	ldr	r3, [r7, #28]
 8008c0a:	781a      	ldrb	r2, [r3, #0]
 8008c0c:	69fb      	ldr	r3, [r7, #28]
 8008c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c10:	4619      	mov	r1, r3
 8008c12:	4610      	mov	r0, r2
 8008c14:	f000 f8f0 	bl	8008df8 <netconn_alloc>
 8008c18:	61b8      	str	r0, [r7, #24]
  if (newconn == NULL) {
 8008c1a:	69bb      	ldr	r3, [r7, #24]
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d11b      	bne.n	8008c58 <accept_function+0xd8>
    /* outof netconns: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 8008c20:	69fb      	ldr	r3, [r7, #28]
 8008c22:	f103 0414 	add.w	r4, r3, #20
 8008c26:	f06f 000c 	mvn.w	r0, #12
 8008c2a:	f7ff fc7f 	bl	800852c <lwip_netconn_err_to_msg>
 8008c2e:	4603      	mov	r3, r0
 8008c30:	4619      	mov	r1, r3
 8008c32:	4620      	mov	r0, r4
 8008c34:	f00f f840 	bl	8017cb8 <sys_mbox_trypost>
 8008c38:	4603      	mov	r3, r0
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d109      	bne.n	8008c52 <accept_function+0xd2>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8008c3e:	69fb      	ldr	r3, [r7, #28]
 8008c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d005      	beq.n	8008c52 <accept_function+0xd2>
 8008c46:	69fb      	ldr	r3, [r7, #28]
 8008c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c4a:	2200      	movs	r2, #0
 8008c4c:	2100      	movs	r1, #0
 8008c4e:	69f8      	ldr	r0, [r7, #28]
 8008c50:	4798      	blx	r3
    }
    return ERR_MEM;
 8008c52:	f04f 33ff 	mov.w	r3, #4294967295
 8008c56:	e044      	b.n	8008ce2 <accept_function+0x162>
  }
  newconn->pcb.tcp = newpcb;
 8008c58:	69bb      	ldr	r3, [r7, #24]
 8008c5a:	68ba      	ldr	r2, [r7, #8]
 8008c5c:	605a      	str	r2, [r3, #4]
  setup_tcp(newconn);
 8008c5e:	69b8      	ldr	r0, [r7, #24]
 8008c60:	f7ff ff66 	bl	8008b30 <setup_tcp>

  /* handle backlog counter */
  tcp_backlog_delayed(newpcb);

  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 8008c64:	69fb      	ldr	r3, [r7, #28]
 8008c66:	3314      	adds	r3, #20
 8008c68:	69b9      	ldr	r1, [r7, #24]
 8008c6a:	4618      	mov	r0, r3
 8008c6c:	f00f f824 	bl	8017cb8 <sys_mbox_trypost>
 8008c70:	4603      	mov	r3, r0
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d02a      	beq.n	8008ccc <accept_function+0x14c>
    /* When returning != ERR_OK, the pcb is aborted in tcp_process(),
       so do nothing here! */
    /* remove all references to this netconn from the pcb */
    struct tcp_pcb *pcb = newconn->pcb.tcp;
 8008c76:	69bb      	ldr	r3, [r7, #24]
 8008c78:	685b      	ldr	r3, [r3, #4]
 8008c7a:	617b      	str	r3, [r7, #20]
    tcp_arg(pcb, NULL);
 8008c7c:	2100      	movs	r1, #0
 8008c7e:	6978      	ldr	r0, [r7, #20]
 8008c80:	f005 fb88 	bl	800e394 <tcp_arg>
    tcp_recv(pcb, NULL);
 8008c84:	2100      	movs	r1, #0
 8008c86:	6978      	ldr	r0, [r7, #20]
 8008c88:	f005 fb96 	bl	800e3b8 <tcp_recv>
    tcp_sent(pcb, NULL);
 8008c8c:	2100      	movs	r1, #0
 8008c8e:	6978      	ldr	r0, [r7, #20]
 8008c90:	f005 fbb4 	bl	800e3fc <tcp_sent>
    tcp_poll(pcb, NULL, 0);
 8008c94:	2200      	movs	r2, #0
 8008c96:	2100      	movs	r1, #0
 8008c98:	6978      	ldr	r0, [r7, #20]
 8008c9a:	f005 fc0b 	bl	800e4b4 <tcp_poll>
    tcp_err(pcb, NULL);
 8008c9e:	2100      	movs	r1, #0
 8008ca0:	6978      	ldr	r0, [r7, #20]
 8008ca2:	f005 fbcd 	bl	800e440 <tcp_err>
    /* remove reference from to the pcb from this netconn */
    newconn->pcb.tcp = NULL;
 8008ca6:	69bb      	ldr	r3, [r7, #24]
 8008ca8:	2200      	movs	r2, #0
 8008caa:	605a      	str	r2, [r3, #4]
    /* no need to drain since we know the recvmbox is empty. */
    sys_mbox_free(&newconn->recvmbox);
 8008cac:	69bb      	ldr	r3, [r7, #24]
 8008cae:	3310      	adds	r3, #16
 8008cb0:	4618      	mov	r0, r3
 8008cb2:	f00e ffef 	bl	8017c94 <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
 8008cb6:	69bb      	ldr	r3, [r7, #24]
 8008cb8:	3310      	adds	r3, #16
 8008cba:	4618      	mov	r0, r3
 8008cbc:	f00f f882 	bl	8017dc4 <sys_mbox_set_invalid>
    netconn_free(newconn);
 8008cc0:	69b8      	ldr	r0, [r7, #24]
 8008cc2:	f000 f907 	bl	8008ed4 <netconn_free>
    return ERR_MEM;
 8008cc6:	f04f 33ff 	mov.w	r3, #4294967295
 8008cca:	e00a      	b.n	8008ce2 <accept_function+0x162>
  } else {
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8008ccc:	69fb      	ldr	r3, [r7, #28]
 8008cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d005      	beq.n	8008ce0 <accept_function+0x160>
 8008cd4:	69fb      	ldr	r3, [r7, #28]
 8008cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cd8:	2200      	movs	r2, #0
 8008cda:	2100      	movs	r1, #0
 8008cdc:	69f8      	ldr	r0, [r7, #28]
 8008cde:	4798      	blx	r3
  }

  return ERR_OK;
 8008ce0:	2300      	movs	r3, #0
}
 8008ce2:	4618      	mov	r0, r3
 8008ce4:	3724      	adds	r7, #36	; 0x24
 8008ce6:	46bd      	mov	sp, r7
 8008ce8:	bd90      	pop	{r4, r7, pc}
 8008cea:	bf00      	nop
 8008cec:	080196a8 	.word	0x080196a8
 8008cf0:	08019864 	.word	0x08019864
 8008cf4:	080196ec 	.word	0x080196ec

08008cf8 <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 8008cf8:	b590      	push	{r4, r7, lr}
 8008cfa:	b085      	sub	sp, #20
 8008cfc:	af00      	add	r7, sp, #0
 8008cfe:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 8008d00:	2300      	movs	r3, #0
 8008d02:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	685b      	ldr	r3, [r3, #4]
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d006      	beq.n	8008d1c <pcb_new+0x24>
 8008d0e:	4b2b      	ldr	r3, [pc, #172]	; (8008dbc <pcb_new+0xc4>)
 8008d10:	f240 2265 	movw	r2, #613	; 0x265
 8008d14:	492a      	ldr	r1, [pc, #168]	; (8008dc0 <pcb_new+0xc8>)
 8008d16:	482b      	ldr	r0, [pc, #172]	; (8008dc4 <pcb_new+0xcc>)
 8008d18:	f00f fb54 	bl	80183c4 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	781b      	ldrb	r3, [r3, #0]
 8008d22:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008d26:	2b10      	cmp	r3, #16
 8008d28:	d022      	beq.n	8008d70 <pcb_new+0x78>
 8008d2a:	2b20      	cmp	r3, #32
 8008d2c:	d133      	bne.n	8008d96 <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	681c      	ldr	r4, [r3, #0]
 8008d32:	7bfb      	ldrb	r3, [r7, #15]
 8008d34:	4618      	mov	r0, r3
 8008d36:	f00a fdd4 	bl	80138e2 <udp_new_ip_type>
 8008d3a:	4603      	mov	r3, r0
 8008d3c:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	685b      	ldr	r3, [r3, #4]
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d02a      	beq.n	8008d9e <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	781b      	ldrb	r3, [r3, #0]
 8008d4e:	2b22      	cmp	r3, #34	; 0x22
 8008d50:	d104      	bne.n	8008d5c <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	685b      	ldr	r3, [r3, #4]
 8008d58:	2201      	movs	r2, #1
 8008d5a:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	6858      	ldr	r0, [r3, #4]
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	461a      	mov	r2, r3
 8008d68:	4917      	ldr	r1, [pc, #92]	; (8008dc8 <pcb_new+0xd0>)
 8008d6a:	f00a fd41 	bl	80137f0 <udp_recv>
      }
      break;
 8008d6e:	e016      	b.n	8008d9e <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681c      	ldr	r4, [r3, #0]
 8008d74:	7bfb      	ldrb	r3, [r7, #15]
 8008d76:	4618      	mov	r0, r3
 8008d78:	f005 fafe 	bl	800e378 <tcp_new_ip_type>
 8008d7c:	4603      	mov	r3, r0
 8008d7e:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	685b      	ldr	r3, [r3, #4]
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d00b      	beq.n	8008da2 <pcb_new+0xaa>
        setup_tcp(msg->conn);
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	4618      	mov	r0, r3
 8008d90:	f7ff fece 	bl	8008b30 <setup_tcp>
      }
      break;
 8008d94:	e005      	b.n	8008da2 <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	22fa      	movs	r2, #250	; 0xfa
 8008d9a:	711a      	strb	r2, [r3, #4]
      return;
 8008d9c:	e00a      	b.n	8008db4 <pcb_new+0xbc>
      break;
 8008d9e:	bf00      	nop
 8008da0:	e000      	b.n	8008da4 <pcb_new+0xac>
      break;
 8008da2:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	685b      	ldr	r3, [r3, #4]
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d102      	bne.n	8008db4 <pcb_new+0xbc>
    msg->err = ERR_MEM;
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	22ff      	movs	r2, #255	; 0xff
 8008db2:	711a      	strb	r2, [r3, #4]
  }
}
 8008db4:	3714      	adds	r7, #20
 8008db6:	46bd      	mov	sp, r7
 8008db8:	bd90      	pop	{r4, r7, pc}
 8008dba:	bf00      	nop
 8008dbc:	080196a8 	.word	0x080196a8
 8008dc0:	0801988c 	.word	0x0801988c
 8008dc4:	080196ec 	.word	0x080196ec
 8008dc8:	0800860d 	.word	0x0800860d

08008dcc <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 8008dcc:	b580      	push	{r7, lr}
 8008dce:	b084      	sub	sp, #16
 8008dd0:	af00      	add	r7, sp, #0
 8008dd2:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	2200      	movs	r2, #0
 8008ddc:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	685b      	ldr	r3, [r3, #4]
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d102      	bne.n	8008dee <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 8008de8:	68f8      	ldr	r0, [r7, #12]
 8008dea:	f7ff ff85 	bl	8008cf8 <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 8008dee:	bf00      	nop
 8008df0:	3710      	adds	r7, #16
 8008df2:	46bd      	mov	sp, r7
 8008df4:	bd80      	pop	{r7, pc}
	...

08008df8 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 8008df8:	b580      	push	{r7, lr}
 8008dfa:	b086      	sub	sp, #24
 8008dfc:	af00      	add	r7, sp, #0
 8008dfe:	4603      	mov	r3, r0
 8008e00:	6039      	str	r1, [r7, #0]
 8008e02:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 8008e04:	2300      	movs	r3, #0
 8008e06:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 8008e08:	2007      	movs	r0, #7
 8008e0a:	f002 fcdf 	bl	800b7cc <memp_malloc>
 8008e0e:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d101      	bne.n	8008e1a <netconn_alloc+0x22>
    return NULL;
 8008e16:	2300      	movs	r3, #0
 8008e18:	e052      	b.n	8008ec0 <netconn_alloc+0xc8>
  }

  conn->pending_err = ERR_OK;
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	2200      	movs	r2, #0
 8008e1e:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	79fa      	ldrb	r2, [r7, #7]
 8008e24:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	2200      	movs	r2, #0
 8008e2a:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 8008e2c:	79fb      	ldrb	r3, [r7, #7]
 8008e2e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008e32:	2b10      	cmp	r3, #16
 8008e34:	d004      	beq.n	8008e40 <netconn_alloc+0x48>
 8008e36:	2b20      	cmp	r3, #32
 8008e38:	d105      	bne.n	8008e46 <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 8008e3a:	2306      	movs	r3, #6
 8008e3c:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 8008e3e:	e00a      	b.n	8008e56 <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 8008e40:	2306      	movs	r3, #6
 8008e42:	617b      	str	r3, [r7, #20]
      break;
 8008e44:	e007      	b.n	8008e56 <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 8008e46:	4b20      	ldr	r3, [pc, #128]	; (8008ec8 <netconn_alloc+0xd0>)
 8008e48:	f240 22e5 	movw	r2, #741	; 0x2e5
 8008e4c:	491f      	ldr	r1, [pc, #124]	; (8008ecc <netconn_alloc+0xd4>)
 8008e4e:	4820      	ldr	r0, [pc, #128]	; (8008ed0 <netconn_alloc+0xd8>)
 8008e50:	f00f fab8 	bl	80183c4 <iprintf>
      goto free_and_return;
 8008e54:	e02f      	b.n	8008eb6 <netconn_alloc+0xbe>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	3310      	adds	r3, #16
 8008e5a:	6979      	ldr	r1, [r7, #20]
 8008e5c:	4618      	mov	r0, r3
 8008e5e:	f00e fef7 	bl	8017c50 <sys_mbox_new>
 8008e62:	4603      	mov	r3, r0
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d125      	bne.n	8008eb4 <netconn_alloc+0xbc>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	330c      	adds	r3, #12
 8008e6c:	2100      	movs	r1, #0
 8008e6e:	4618      	mov	r0, r3
 8008e70:	f00e ffb5 	bl	8017dde <sys_sem_new>
 8008e74:	4603      	mov	r3, r0
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d005      	beq.n	8008e86 <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	3310      	adds	r3, #16
 8008e7e:	4618      	mov	r0, r3
 8008e80:	f00e ff08 	bl	8017c94 <sys_mbox_free>
    goto free_and_return;
 8008e84:	e017      	b.n	8008eb6 <netconn_alloc+0xbe>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	3314      	adds	r3, #20
 8008e8a:	4618      	mov	r0, r3
 8008e8c:	f00e ff9a 	bl	8017dc4 <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	2200      	movs	r2, #0
 8008e94:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	f04f 32ff 	mov.w	r2, #4294967295
 8008e9c:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	683a      	ldr	r2, [r7, #0]
 8008ea2:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	2200      	movs	r2, #0
 8008ea8:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	7cfa      	ldrb	r2, [r7, #19]
 8008eae:	771a      	strb	r2, [r3, #28]
  return conn;
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	e005      	b.n	8008ec0 <netconn_alloc+0xc8>
    goto free_and_return;
 8008eb4:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 8008eb6:	68f9      	ldr	r1, [r7, #12]
 8008eb8:	2007      	movs	r0, #7
 8008eba:	f002 fcfd 	bl	800b8b8 <memp_free>
  return NULL;
 8008ebe:	2300      	movs	r3, #0
}
 8008ec0:	4618      	mov	r0, r3
 8008ec2:	3718      	adds	r7, #24
 8008ec4:	46bd      	mov	sp, r7
 8008ec6:	bd80      	pop	{r7, pc}
 8008ec8:	080196a8 	.word	0x080196a8
 8008ecc:	080198ac 	.word	0x080198ac
 8008ed0:	080196ec 	.word	0x080196ec

08008ed4 <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 8008ed4:	b580      	push	{r7, lr}
 8008ed6:	b082      	sub	sp, #8
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	685b      	ldr	r3, [r3, #4]
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d006      	beq.n	8008ef2 <netconn_free+0x1e>
 8008ee4:	4b1b      	ldr	r3, [pc, #108]	; (8008f54 <netconn_free+0x80>)
 8008ee6:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8008eea:	491b      	ldr	r1, [pc, #108]	; (8008f58 <netconn_free+0x84>)
 8008eec:	481b      	ldr	r0, [pc, #108]	; (8008f5c <netconn_free+0x88>)
 8008eee:	f00f fa69 	bl	80183c4 <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	3310      	adds	r3, #16
 8008ef6:	4618      	mov	r0, r3
 8008ef8:	f00e ff53 	bl	8017da2 <sys_mbox_valid>
 8008efc:	4603      	mov	r3, r0
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d006      	beq.n	8008f10 <netconn_free+0x3c>
 8008f02:	4b14      	ldr	r3, [pc, #80]	; (8008f54 <netconn_free+0x80>)
 8008f04:	f240 3223 	movw	r2, #803	; 0x323
 8008f08:	4915      	ldr	r1, [pc, #84]	; (8008f60 <netconn_free+0x8c>)
 8008f0a:	4814      	ldr	r0, [pc, #80]	; (8008f5c <netconn_free+0x88>)
 8008f0c:	f00f fa5a 	bl	80183c4 <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	3314      	adds	r3, #20
 8008f14:	4618      	mov	r0, r3
 8008f16:	f00e ff44 	bl	8017da2 <sys_mbox_valid>
 8008f1a:	4603      	mov	r3, r0
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d006      	beq.n	8008f2e <netconn_free+0x5a>
 8008f20:	4b0c      	ldr	r3, [pc, #48]	; (8008f54 <netconn_free+0x80>)
 8008f22:	f240 3226 	movw	r2, #806	; 0x326
 8008f26:	490f      	ldr	r1, [pc, #60]	; (8008f64 <netconn_free+0x90>)
 8008f28:	480c      	ldr	r0, [pc, #48]	; (8008f5c <netconn_free+0x88>)
 8008f2a:	f00f fa4b 	bl	80183c4 <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	330c      	adds	r3, #12
 8008f32:	4618      	mov	r0, r3
 8008f34:	f00e ffb9 	bl	8017eaa <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	330c      	adds	r3, #12
 8008f3c:	4618      	mov	r0, r3
 8008f3e:	f00e ffd2 	bl	8017ee6 <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 8008f42:	6879      	ldr	r1, [r7, #4]
 8008f44:	2007      	movs	r0, #7
 8008f46:	f002 fcb7 	bl	800b8b8 <memp_free>
}
 8008f4a:	bf00      	nop
 8008f4c:	3708      	adds	r7, #8
 8008f4e:	46bd      	mov	sp, r7
 8008f50:	bd80      	pop	{r7, pc}
 8008f52:	bf00      	nop
 8008f54:	080196a8 	.word	0x080196a8
 8008f58:	080198d4 	.word	0x080198d4
 8008f5c:	080196ec 	.word	0x080196ec
 8008f60:	08019904 	.word	0x08019904
 8008f64:	08019940 	.word	0x08019940

08008f68 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 8008f68:	b580      	push	{r7, lr}
 8008f6a:	b086      	sub	sp, #24
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	3310      	adds	r3, #16
 8008f74:	4618      	mov	r0, r3
 8008f76:	f00e ff14 	bl	8017da2 <sys_mbox_valid>
 8008f7a:	4603      	mov	r3, r0
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d02f      	beq.n	8008fe0 <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8008f80:	e018      	b.n	8008fb4 <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	781b      	ldrb	r3, [r3, #0]
 8008f86:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008f8a:	2b10      	cmp	r3, #16
 8008f8c:	d10e      	bne.n	8008fac <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 8008f8e:	693b      	ldr	r3, [r7, #16]
 8008f90:	f107 020f 	add.w	r2, r7, #15
 8008f94:	4611      	mov	r1, r2
 8008f96:	4618      	mov	r0, r3
 8008f98:	f7ff fafe 	bl	8008598 <lwip_netconn_is_err_msg>
 8008f9c:	4603      	mov	r3, r0
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d108      	bne.n	8008fb4 <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 8008fa2:	693b      	ldr	r3, [r7, #16]
 8008fa4:	4618      	mov	r0, r3
 8008fa6:	f003 fb37 	bl	800c618 <pbuf_free>
 8008faa:	e003      	b.n	8008fb4 <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 8008fac:	693b      	ldr	r3, [r7, #16]
 8008fae:	4618      	mov	r0, r3
 8008fb0:	f000 fe92 	bl	8009cd8 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	3310      	adds	r3, #16
 8008fb8:	f107 0210 	add.w	r2, r7, #16
 8008fbc:	4611      	mov	r1, r2
 8008fbe:	4618      	mov	r0, r3
 8008fc0:	f00e fed3 	bl	8017d6a <sys_arch_mbox_tryfetch>
 8008fc4:	4603      	mov	r3, r0
 8008fc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fca:	d1da      	bne.n	8008f82 <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	3310      	adds	r3, #16
 8008fd0:	4618      	mov	r0, r3
 8008fd2:	f00e fe5f 	bl	8017c94 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	3310      	adds	r3, #16
 8008fda:	4618      	mov	r0, r3
 8008fdc:	f00e fef2 	bl	8017dc4 <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	3314      	adds	r3, #20
 8008fe4:	4618      	mov	r0, r3
 8008fe6:	f00e fedc 	bl	8017da2 <sys_mbox_valid>
 8008fea:	4603      	mov	r3, r0
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d034      	beq.n	800905a <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 8008ff0:	e01d      	b.n	800902e <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 8008ff2:	693b      	ldr	r3, [r7, #16]
 8008ff4:	f107 020e 	add.w	r2, r7, #14
 8008ff8:	4611      	mov	r1, r2
 8008ffa:	4618      	mov	r0, r3
 8008ffc:	f7ff facc 	bl	8008598 <lwip_netconn_is_err_msg>
 8009000:	4603      	mov	r3, r0
 8009002:	2b00      	cmp	r3, #0
 8009004:	d113      	bne.n	800902e <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 8009006:	693b      	ldr	r3, [r7, #16]
 8009008:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 800900a:	6978      	ldr	r0, [r7, #20]
 800900c:	f7ff ffac 	bl	8008f68 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 8009010:	697b      	ldr	r3, [r7, #20]
 8009012:	685b      	ldr	r3, [r3, #4]
 8009014:	2b00      	cmp	r3, #0
 8009016:	d007      	beq.n	8009028 <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 8009018:	697b      	ldr	r3, [r7, #20]
 800901a:	685b      	ldr	r3, [r3, #4]
 800901c:	4618      	mov	r0, r3
 800901e:	f004 f8fb 	bl	800d218 <tcp_abort>
            newconn->pcb.tcp = NULL;
 8009022:	697b      	ldr	r3, [r7, #20]
 8009024:	2200      	movs	r2, #0
 8009026:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 8009028:	6978      	ldr	r0, [r7, #20]
 800902a:	f7ff ff53 	bl	8008ed4 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	3314      	adds	r3, #20
 8009032:	f107 0210 	add.w	r2, r7, #16
 8009036:	4611      	mov	r1, r2
 8009038:	4618      	mov	r0, r3
 800903a:	f00e fe96 	bl	8017d6a <sys_arch_mbox_tryfetch>
 800903e:	4603      	mov	r3, r0
 8009040:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009044:	d1d5      	bne.n	8008ff2 <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	3314      	adds	r3, #20
 800904a:	4618      	mov	r0, r3
 800904c:	f00e fe22 	bl	8017c94 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	3314      	adds	r3, #20
 8009054:	4618      	mov	r0, r3
 8009056:	f00e feb5 	bl	8017dc4 <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 800905a:	bf00      	nop
 800905c:	3718      	adds	r7, #24
 800905e:	46bd      	mov	sp, r7
 8009060:	bd80      	pop	{r7, pc}
	...

08009064 <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8009064:	b580      	push	{r7, lr}
 8009066:	b086      	sub	sp, #24
 8009068:	af00      	add	r7, sp, #0
 800906a:	6078      	str	r0, [r7, #4]
 800906c:	460b      	mov	r3, r1
 800906e:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 8009070:	2300      	movs	r3, #0
 8009072:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	2b00      	cmp	r3, #0
 8009078:	d106      	bne.n	8009088 <lwip_netconn_do_close_internal+0x24>
 800907a:	4b87      	ldr	r3, [pc, #540]	; (8009298 <lwip_netconn_do_close_internal+0x234>)
 800907c:	f240 32a2 	movw	r2, #930	; 0x3a2
 8009080:	4986      	ldr	r1, [pc, #536]	; (800929c <lwip_netconn_do_close_internal+0x238>)
 8009082:	4887      	ldr	r0, [pc, #540]	; (80092a0 <lwip_netconn_do_close_internal+0x23c>)
 8009084:	f00f f99e 	bl	80183c4 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	781b      	ldrb	r3, [r3, #0]
 800908c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009090:	2b10      	cmp	r3, #16
 8009092:	d006      	beq.n	80090a2 <lwip_netconn_do_close_internal+0x3e>
 8009094:	4b80      	ldr	r3, [pc, #512]	; (8009298 <lwip_netconn_do_close_internal+0x234>)
 8009096:	f240 32a3 	movw	r2, #931	; 0x3a3
 800909a:	4982      	ldr	r1, [pc, #520]	; (80092a4 <lwip_netconn_do_close_internal+0x240>)
 800909c:	4880      	ldr	r0, [pc, #512]	; (80092a0 <lwip_netconn_do_close_internal+0x23c>)
 800909e:	f00f f991 	bl	80183c4 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	785b      	ldrb	r3, [r3, #1]
 80090a6:	2b04      	cmp	r3, #4
 80090a8:	d006      	beq.n	80090b8 <lwip_netconn_do_close_internal+0x54>
 80090aa:	4b7b      	ldr	r3, [pc, #492]	; (8009298 <lwip_netconn_do_close_internal+0x234>)
 80090ac:	f44f 7269 	mov.w	r2, #932	; 0x3a4
 80090b0:	497d      	ldr	r1, [pc, #500]	; (80092a8 <lwip_netconn_do_close_internal+0x244>)
 80090b2:	487b      	ldr	r0, [pc, #492]	; (80092a0 <lwip_netconn_do_close_internal+0x23c>)
 80090b4:	f00f f986 	bl	80183c4 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	685b      	ldr	r3, [r3, #4]
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d106      	bne.n	80090ce <lwip_netconn_do_close_internal+0x6a>
 80090c0:	4b75      	ldr	r3, [pc, #468]	; (8009298 <lwip_netconn_do_close_internal+0x234>)
 80090c2:	f240 32a5 	movw	r2, #933	; 0x3a5
 80090c6:	4979      	ldr	r1, [pc, #484]	; (80092ac <lwip_netconn_do_close_internal+0x248>)
 80090c8:	4875      	ldr	r0, [pc, #468]	; (80092a0 <lwip_netconn_do_close_internal+0x23c>)
 80090ca:	f00f f97b 	bl	80183c4 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	6a1b      	ldr	r3, [r3, #32]
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d106      	bne.n	80090e4 <lwip_netconn_do_close_internal+0x80>
 80090d6:	4b70      	ldr	r3, [pc, #448]	; (8009298 <lwip_netconn_do_close_internal+0x234>)
 80090d8:	f240 32a6 	movw	r2, #934	; 0x3a6
 80090dc:	4974      	ldr	r1, [pc, #464]	; (80092b0 <lwip_netconn_do_close_internal+0x24c>)
 80090de:	4870      	ldr	r0, [pc, #448]	; (80092a0 <lwip_netconn_do_close_internal+0x23c>)
 80090e0:	f00f f970 	bl	80183c4 <iprintf>

  tpcb = conn->pcb.tcp;
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	685b      	ldr	r3, [r3, #4]
 80090e8:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	6a1b      	ldr	r3, [r3, #32]
 80090ee:	7a1b      	ldrb	r3, [r3, #8]
 80090f0:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 80090f2:	7bfb      	ldrb	r3, [r7, #15]
 80090f4:	f003 0301 	and.w	r3, r3, #1
 80090f8:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 80090fa:	7bfb      	ldrb	r3, [r7, #15]
 80090fc:	f003 0302 	and.w	r3, r3, #2
 8009100:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 8009102:	7bfb      	ldrb	r3, [r7, #15]
 8009104:	2b03      	cmp	r3, #3
 8009106:	d102      	bne.n	800910e <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 8009108:	2301      	movs	r3, #1
 800910a:	75bb      	strb	r3, [r7, #22]
 800910c:	e01f      	b.n	800914e <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 800910e:	7bbb      	ldrb	r3, [r7, #14]
 8009110:	2b00      	cmp	r3, #0
 8009112:	d00e      	beq.n	8009132 <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 8009114:	693b      	ldr	r3, [r7, #16]
 8009116:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 8009118:	2b05      	cmp	r3, #5
 800911a:	d007      	beq.n	800912c <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 800911c:	693b      	ldr	r3, [r7, #16]
 800911e:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 8009120:	2b06      	cmp	r3, #6
 8009122:	d003      	beq.n	800912c <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 8009124:	693b      	ldr	r3, [r7, #16]
 8009126:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 8009128:	2b08      	cmp	r3, #8
 800912a:	d102      	bne.n	8009132 <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 800912c:	2301      	movs	r3, #1
 800912e:	75bb      	strb	r3, [r7, #22]
 8009130:	e00d      	b.n	800914e <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 8009132:	7b7b      	ldrb	r3, [r7, #13]
 8009134:	2b00      	cmp	r3, #0
 8009136:	d008      	beq.n	800914a <lwip_netconn_do_close_internal+0xe6>
 8009138:	693b      	ldr	r3, [r7, #16]
 800913a:	8b5b      	ldrh	r3, [r3, #26]
 800913c:	f003 0310 	and.w	r3, r3, #16
 8009140:	2b00      	cmp	r3, #0
 8009142:	d002      	beq.n	800914a <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 8009144:	2301      	movs	r3, #1
 8009146:	75bb      	strb	r3, [r7, #22]
 8009148:	e001      	b.n	800914e <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 800914a:	2300      	movs	r3, #0
 800914c:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 800914e:	7dbb      	ldrb	r3, [r7, #22]
 8009150:	2b00      	cmp	r3, #0
 8009152:	d003      	beq.n	800915c <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 8009154:	2100      	movs	r1, #0
 8009156:	6938      	ldr	r0, [r7, #16]
 8009158:	f005 f91c 	bl	800e394 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 800915c:	693b      	ldr	r3, [r7, #16]
 800915e:	7d1b      	ldrb	r3, [r3, #20]
 8009160:	2b01      	cmp	r3, #1
 8009162:	d104      	bne.n	800916e <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 8009164:	2100      	movs	r1, #0
 8009166:	6938      	ldr	r0, [r7, #16]
 8009168:	f005 f98c 	bl	800e484 <tcp_accept>
 800916c:	e01d      	b.n	80091aa <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 800916e:	7bbb      	ldrb	r3, [r7, #14]
 8009170:	2b00      	cmp	r3, #0
 8009172:	d007      	beq.n	8009184 <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 8009174:	2100      	movs	r1, #0
 8009176:	6938      	ldr	r0, [r7, #16]
 8009178:	f005 f91e 	bl	800e3b8 <tcp_recv>
      tcp_accept(tpcb, NULL);
 800917c:	2100      	movs	r1, #0
 800917e:	6938      	ldr	r0, [r7, #16]
 8009180:	f005 f980 	bl	800e484 <tcp_accept>
    }
    if (shut_tx) {
 8009184:	7b7b      	ldrb	r3, [r7, #13]
 8009186:	2b00      	cmp	r3, #0
 8009188:	d003      	beq.n	8009192 <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 800918a:	2100      	movs	r1, #0
 800918c:	6938      	ldr	r0, [r7, #16]
 800918e:	f005 f935 	bl	800e3fc <tcp_sent>
    }
    if (shut_close) {
 8009192:	7dbb      	ldrb	r3, [r7, #22]
 8009194:	2b00      	cmp	r3, #0
 8009196:	d008      	beq.n	80091aa <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 8009198:	2200      	movs	r2, #0
 800919a:	2100      	movs	r1, #0
 800919c:	6938      	ldr	r0, [r7, #16]
 800919e:	f005 f989 	bl	800e4b4 <tcp_poll>
      tcp_err(tpcb, NULL);
 80091a2:	2100      	movs	r1, #0
 80091a4:	6938      	ldr	r0, [r7, #16]
 80091a6:	f005 f94b 	bl	800e440 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 80091aa:	7dbb      	ldrb	r3, [r7, #22]
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d005      	beq.n	80091bc <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 80091b0:	6938      	ldr	r0, [r7, #16]
 80091b2:	f003 feeb 	bl	800cf8c <tcp_close>
 80091b6:	4603      	mov	r3, r0
 80091b8:	75fb      	strb	r3, [r7, #23]
 80091ba:	e007      	b.n	80091cc <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 80091bc:	7bbb      	ldrb	r3, [r7, #14]
 80091be:	7b7a      	ldrb	r2, [r7, #13]
 80091c0:	4619      	mov	r1, r3
 80091c2:	6938      	ldr	r0, [r7, #16]
 80091c4:	f003 ff0e 	bl	800cfe4 <tcp_shutdown>
 80091c8:	4603      	mov	r3, r0
 80091ca:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 80091cc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d102      	bne.n	80091da <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 80091d4:	2301      	movs	r3, #1
 80091d6:	757b      	strb	r3, [r7, #21]
 80091d8:	e016      	b.n	8009208 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 80091da:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80091de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091e2:	d10f      	bne.n	8009204 <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	6a1b      	ldr	r3, [r3, #32]
 80091e8:	7a5b      	ldrb	r3, [r3, #9]
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d10c      	bne.n	8009208 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 80091ee:	2301      	movs	r3, #1
 80091f0:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 80091f2:	7dbb      	ldrb	r3, [r7, #22]
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d007      	beq.n	8009208 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 80091f8:	6938      	ldr	r0, [r7, #16]
 80091fa:	f004 f80d 	bl	800d218 <tcp_abort>
          err = ERR_OK;
 80091fe:	2300      	movs	r3, #0
 8009200:	75fb      	strb	r3, [r7, #23]
 8009202:	e001      	b.n	8009208 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 8009204:	2301      	movs	r3, #1
 8009206:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 8009208:	7d7b      	ldrb	r3, [r7, #21]
 800920a:	2b00      	cmp	r3, #0
 800920c:	d052      	beq.n	80092b4 <lwip_netconn_do_close_internal+0x250>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	6a1b      	ldr	r3, [r3, #32]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	330c      	adds	r3, #12
 8009216:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	6a1b      	ldr	r3, [r3, #32]
 800921c:	7dfa      	ldrb	r2, [r7, #23]
 800921e:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	2200      	movs	r2, #0
 8009224:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	2200      	movs	r2, #0
 800922a:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 800922c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009230:	2b00      	cmp	r3, #0
 8009232:	d129      	bne.n	8009288 <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 8009234:	7dbb      	ldrb	r3, [r7, #22]
 8009236:	2b00      	cmp	r3, #0
 8009238:	d00c      	beq.n	8009254 <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	2200      	movs	r2, #0
 800923e:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009244:	2b00      	cmp	r3, #0
 8009246:	d005      	beq.n	8009254 <lwip_netconn_do_close_internal+0x1f0>
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800924c:	2200      	movs	r2, #0
 800924e:	2104      	movs	r1, #4
 8009250:	6878      	ldr	r0, [r7, #4]
 8009252:	4798      	blx	r3
      }
      if (shut_rx) {
 8009254:	7bbb      	ldrb	r3, [r7, #14]
 8009256:	2b00      	cmp	r3, #0
 8009258:	d009      	beq.n	800926e <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800925e:	2b00      	cmp	r3, #0
 8009260:	d005      	beq.n	800926e <lwip_netconn_do_close_internal+0x20a>
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009266:	2200      	movs	r2, #0
 8009268:	2100      	movs	r1, #0
 800926a:	6878      	ldr	r0, [r7, #4]
 800926c:	4798      	blx	r3
      }
      if (shut_tx) {
 800926e:	7b7b      	ldrb	r3, [r7, #13]
 8009270:	2b00      	cmp	r3, #0
 8009272:	d009      	beq.n	8009288 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009278:	2b00      	cmp	r3, #0
 800927a:	d005      	beq.n	8009288 <lwip_netconn_do_close_internal+0x224>
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009280:	2200      	movs	r2, #0
 8009282:	2102      	movs	r1, #2
 8009284:	6878      	ldr	r0, [r7, #4]
 8009286:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 8009288:	78fb      	ldrb	r3, [r7, #3]
 800928a:	2b00      	cmp	r3, #0
 800928c:	d002      	beq.n	8009294 <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 800928e:	68b8      	ldr	r0, [r7, #8]
 8009290:	f00e fdfe 	bl	8017e90 <sys_sem_signal>
    }
    return ERR_OK;
 8009294:	2300      	movs	r3, #0
 8009296:	e03c      	b.n	8009312 <lwip_netconn_do_close_internal+0x2ae>
 8009298:	080196a8 	.word	0x080196a8
 800929c:	0801997c 	.word	0x0801997c
 80092a0:	080196ec 	.word	0x080196ec
 80092a4:	0801998c 	.word	0x0801998c
 80092a8:	080199ac 	.word	0x080199ac
 80092ac:	080199d0 	.word	0x080199d0
 80092b0:	08019810 	.word	0x08019810
  }
  if (!close_finished) {
 80092b4:	7d7b      	ldrb	r3, [r7, #21]
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d11e      	bne.n	80092f8 <lwip_netconn_do_close_internal+0x294>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 80092ba:	693b      	ldr	r3, [r7, #16]
 80092bc:	7d1b      	ldrb	r3, [r3, #20]
 80092be:	2b01      	cmp	r3, #1
 80092c0:	d106      	bne.n	80092d0 <lwip_netconn_do_close_internal+0x26c>
 80092c2:	4b16      	ldr	r3, [pc, #88]	; (800931c <lwip_netconn_do_close_internal+0x2b8>)
 80092c4:	f240 4241 	movw	r2, #1089	; 0x441
 80092c8:	4915      	ldr	r1, [pc, #84]	; (8009320 <lwip_netconn_do_close_internal+0x2bc>)
 80092ca:	4816      	ldr	r0, [pc, #88]	; (8009324 <lwip_netconn_do_close_internal+0x2c0>)
 80092cc:	f00f f87a 	bl	80183c4 <iprintf>
    if (shut_tx) {
 80092d0:	7b7b      	ldrb	r3, [r7, #13]
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d003      	beq.n	80092de <lwip_netconn_do_close_internal+0x27a>
      tcp_sent(tpcb, sent_tcp);
 80092d6:	4914      	ldr	r1, [pc, #80]	; (8009328 <lwip_netconn_do_close_internal+0x2c4>)
 80092d8:	6938      	ldr	r0, [r7, #16]
 80092da:	f005 f88f 	bl	800e3fc <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 80092de:	2201      	movs	r2, #1
 80092e0:	4912      	ldr	r1, [pc, #72]	; (800932c <lwip_netconn_do_close_internal+0x2c8>)
 80092e2:	6938      	ldr	r0, [r7, #16]
 80092e4:	f005 f8e6 	bl	800e4b4 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 80092e8:	4911      	ldr	r1, [pc, #68]	; (8009330 <lwip_netconn_do_close_internal+0x2cc>)
 80092ea:	6938      	ldr	r0, [r7, #16]
 80092ec:	f005 f8a8 	bl	800e440 <tcp_err>
    tcp_arg(tpcb, conn);
 80092f0:	6879      	ldr	r1, [r7, #4]
 80092f2:	6938      	ldr	r0, [r7, #16]
 80092f4:	f005 f84e 	bl	800e394 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 80092f8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d106      	bne.n	800930e <lwip_netconn_do_close_internal+0x2aa>
 8009300:	4b06      	ldr	r3, [pc, #24]	; (800931c <lwip_netconn_do_close_internal+0x2b8>)
 8009302:	f240 424d 	movw	r2, #1101	; 0x44d
 8009306:	490b      	ldr	r1, [pc, #44]	; (8009334 <lwip_netconn_do_close_internal+0x2d0>)
 8009308:	4806      	ldr	r0, [pc, #24]	; (8009324 <lwip_netconn_do_close_internal+0x2c0>)
 800930a:	f00f f85b 	bl	80183c4 <iprintf>
  return err;
 800930e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009312:	4618      	mov	r0, r3
 8009314:	3718      	adds	r7, #24
 8009316:	46bd      	mov	sp, r7
 8009318:	bd80      	pop	{r7, pc}
 800931a:	bf00      	nop
 800931c:	080196a8 	.word	0x080196a8
 8009320:	080199e4 	.word	0x080199e4
 8009324:	080196ec 	.word	0x080196ec
 8009328:	080088dd 	.word	0x080088dd
 800932c:	08008815 	.word	0x08008815
 8009330:	08008985 	.word	0x08008985
 8009334:	08019a08 	.word	0x08019a08

08009338 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 8009338:	b580      	push	{r7, lr}
 800933a:	b084      	sub	sp, #16
 800933c:	af00      	add	r7, sp, #0
 800933e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	785b      	ldrb	r3, [r3, #1]
 800934a:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 800934c:	7afb      	ldrb	r3, [r7, #11]
 800934e:	2b00      	cmp	r3, #0
 8009350:	d00d      	beq.n	800936e <lwip_netconn_do_delconn+0x36>
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	781b      	ldrb	r3, [r3, #0]
 8009358:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800935c:	2b10      	cmp	r3, #16
 800935e:	d006      	beq.n	800936e <lwip_netconn_do_delconn+0x36>
 8009360:	4b60      	ldr	r3, [pc, #384]	; (80094e4 <lwip_netconn_do_delconn+0x1ac>)
 8009362:	f240 425e 	movw	r2, #1118	; 0x45e
 8009366:	4960      	ldr	r1, [pc, #384]	; (80094e8 <lwip_netconn_do_delconn+0x1b0>)
 8009368:	4860      	ldr	r0, [pc, #384]	; (80094ec <lwip_netconn_do_delconn+0x1b4>)
 800936a:	f00f f82b 	bl	80183c4 <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 800936e:	7afb      	ldrb	r3, [r7, #11]
 8009370:	2b00      	cmp	r3, #0
 8009372:	d005      	beq.n	8009380 <lwip_netconn_do_delconn+0x48>
 8009374:	7afb      	ldrb	r3, [r7, #11]
 8009376:	2b02      	cmp	r3, #2
 8009378:	d002      	beq.n	8009380 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 800937a:	7afb      	ldrb	r3, [r7, #11]
 800937c:	2b03      	cmp	r3, #3
 800937e:	d109      	bne.n	8009394 <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 8009380:	7afb      	ldrb	r3, [r7, #11]
 8009382:	2b03      	cmp	r3, #3
 8009384:	d10a      	bne.n	800939c <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	7f1b      	ldrb	r3, [r3, #28]
 800938c:	f003 0304 	and.w	r3, r3, #4
 8009390:	2b00      	cmp	r3, #0
 8009392:	d103      	bne.n	800939c <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	22fb      	movs	r2, #251	; 0xfb
 8009398:	711a      	strb	r2, [r3, #4]
 800939a:	e097      	b.n	80094cc <lwip_netconn_do_delconn+0x194>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 800939c:	7afb      	ldrb	r3, [r7, #11]
 800939e:	2b03      	cmp	r3, #3
 80093a0:	d10d      	bne.n	80093be <lwip_netconn_do_delconn+0x86>
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	7f1b      	ldrb	r3, [r3, #28]
 80093a8:	f003 0304 	and.w	r3, r3, #4
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d106      	bne.n	80093be <lwip_netconn_do_delconn+0x86>
 80093b0:	4b4c      	ldr	r3, [pc, #304]	; (80094e4 <lwip_netconn_do_delconn+0x1ac>)
 80093b2:	f240 427a 	movw	r2, #1146	; 0x47a
 80093b6:	494e      	ldr	r1, [pc, #312]	; (80094f0 <lwip_netconn_do_delconn+0x1b8>)
 80093b8:	484c      	ldr	r0, [pc, #304]	; (80094ec <lwip_netconn_do_delconn+0x1b4>)
 80093ba:	f00f f803 	bl	80183c4 <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	2200      	movs	r2, #0
 80093c2:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	4618      	mov	r0, r3
 80093ca:	f7ff fdcd 	bl	8008f68 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	685b      	ldr	r3, [r3, #4]
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d05f      	beq.n	8009498 <lwip_netconn_do_delconn+0x160>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	781b      	ldrb	r3, [r3, #0]
 80093de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80093e2:	2b10      	cmp	r3, #16
 80093e4:	d00d      	beq.n	8009402 <lwip_netconn_do_delconn+0xca>
 80093e6:	2b20      	cmp	r3, #32
 80093e8:	d151      	bne.n	800948e <lwip_netconn_do_delconn+0x156>
          raw_remove(msg->conn->pcb.raw);
          break;
#endif /* LWIP_RAW */
#if LWIP_UDP
        case NETCONN_UDP:
          msg->conn->pcb.udp->recv_arg = NULL;
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	685b      	ldr	r3, [r3, #4]
 80093f0:	2200      	movs	r2, #0
 80093f2:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	685b      	ldr	r3, [r3, #4]
 80093fa:	4618      	mov	r0, r3
 80093fc:	f00a fa18 	bl	8013830 <udp_remove>
          break;
 8009400:	e046      	b.n	8009490 <lwip_netconn_do_delconn+0x158>
#endif /* LWIP_UDP */
#if LWIP_TCP
        case NETCONN_TCP:
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	6a1b      	ldr	r3, [r3, #32]
 8009408:	2b00      	cmp	r3, #0
 800940a:	d006      	beq.n	800941a <lwip_netconn_do_delconn+0xe2>
 800940c:	4b35      	ldr	r3, [pc, #212]	; (80094e4 <lwip_netconn_do_delconn+0x1ac>)
 800940e:	f240 4294 	movw	r2, #1172	; 0x494
 8009412:	4938      	ldr	r1, [pc, #224]	; (80094f4 <lwip_netconn_do_delconn+0x1bc>)
 8009414:	4835      	ldr	r0, [pc, #212]	; (80094ec <lwip_netconn_do_delconn+0x1b4>)
 8009416:	f00e ffd5 	bl	80183c4 <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	2204      	movs	r2, #4
 8009420:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	2203      	movs	r2, #3
 8009426:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	68fa      	ldr	r2, [r7, #12]
 800942e:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	2100      	movs	r1, #0
 8009436:	4618      	mov	r0, r3
 8009438:	f7ff fe14 	bl	8009064 <lwip_netconn_do_close_internal>
 800943c:	4603      	mov	r3, r0
 800943e:	2b00      	cmp	r3, #0
 8009440:	d04b      	beq.n	80094da <lwip_netconn_do_delconn+0x1a2>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	785b      	ldrb	r3, [r3, #1]
 8009448:	2b04      	cmp	r3, #4
 800944a:	d006      	beq.n	800945a <lwip_netconn_do_delconn+0x122>
 800944c:	4b25      	ldr	r3, [pc, #148]	; (80094e4 <lwip_netconn_do_delconn+0x1ac>)
 800944e:	f240 429a 	movw	r2, #1178	; 0x49a
 8009452:	4929      	ldr	r1, [pc, #164]	; (80094f8 <lwip_netconn_do_delconn+0x1c0>)
 8009454:	4825      	ldr	r0, [pc, #148]	; (80094ec <lwip_netconn_do_delconn+0x1b4>)
 8009456:	f00e ffb5 	bl	80183c4 <iprintf>
            UNLOCK_TCPIP_CORE();
 800945a:	4828      	ldr	r0, [pc, #160]	; (80094fc <lwip_netconn_do_delconn+0x1c4>)
 800945c:	f00e fd89 	bl	8017f72 <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	330c      	adds	r3, #12
 8009466:	2100      	movs	r1, #0
 8009468:	4618      	mov	r0, r3
 800946a:	f00e fce0 	bl	8017e2e <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 800946e:	4823      	ldr	r0, [pc, #140]	; (80094fc <lwip_netconn_do_delconn+0x1c4>)
 8009470:	f00e fd70 	bl	8017f54 <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	785b      	ldrb	r3, [r3, #1]
 800947a:	2b00      	cmp	r3, #0
 800947c:	d02d      	beq.n	80094da <lwip_netconn_do_delconn+0x1a2>
 800947e:	4b19      	ldr	r3, [pc, #100]	; (80094e4 <lwip_netconn_do_delconn+0x1ac>)
 8009480:	f240 429e 	movw	r2, #1182	; 0x49e
 8009484:	491c      	ldr	r1, [pc, #112]	; (80094f8 <lwip_netconn_do_delconn+0x1c0>)
 8009486:	4819      	ldr	r0, [pc, #100]	; (80094ec <lwip_netconn_do_delconn+0x1b4>)
 8009488:	f00e ff9c 	bl	80183c4 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
          lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
 800948c:	e025      	b.n	80094da <lwip_netconn_do_delconn+0x1a2>
#endif /* LWIP_TCP */
        default:
          break;
 800948e:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	2200      	movs	r2, #0
 8009496:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d007      	beq.n	80094b2 <lwip_netconn_do_delconn+0x17a>
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094a8:	68fa      	ldr	r2, [r7, #12]
 80094aa:	6810      	ldr	r0, [r2, #0]
 80094ac:	2200      	movs	r2, #0
 80094ae:	2100      	movs	r1, #0
 80094b0:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d007      	beq.n	80094cc <lwip_netconn_do_delconn+0x194>
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094c2:	68fa      	ldr	r2, [r7, #12]
 80094c4:	6810      	ldr	r0, [r2, #0]
 80094c6:	2200      	movs	r2, #0
 80094c8:	2102      	movs	r1, #2
 80094ca:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	330c      	adds	r3, #12
 80094d2:	4618      	mov	r0, r3
 80094d4:	f00e fcf6 	bl	8017ec4 <sys_sem_valid>
 80094d8:	e000      	b.n	80094dc <lwip_netconn_do_delconn+0x1a4>
          return;
 80094da:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 80094dc:	3710      	adds	r7, #16
 80094de:	46bd      	mov	sp, r7
 80094e0:	bd80      	pop	{r7, pc}
 80094e2:	bf00      	nop
 80094e4:	080196a8 	.word	0x080196a8
 80094e8:	08019a18 	.word	0x08019a18
 80094ec:	080196ec 	.word	0x080196ec
 80094f0:	08019a2c 	.word	0x08019a2c
 80094f4:	08019a4c 	.word	0x08019a4c
 80094f8:	08019a68 	.word	0x08019a68
 80094fc:	2000d1c0 	.word	0x2000d1c0

08009500 <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 8009500:	b580      	push	{r7, lr}
 8009502:	b084      	sub	sp, #16
 8009504:	af00      	add	r7, sp, #0
 8009506:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 800950c:	68bb      	ldr	r3, [r7, #8]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	685b      	ldr	r3, [r3, #4]
 8009512:	2b00      	cmp	r3, #0
 8009514:	d025      	beq.n	8009562 <lwip_netconn_do_bind+0x62>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8009516:	68bb      	ldr	r3, [r7, #8]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	781b      	ldrb	r3, [r3, #0]
 800951c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009520:	2b10      	cmp	r3, #16
 8009522:	d00e      	beq.n	8009542 <lwip_netconn_do_bind+0x42>
 8009524:	2b20      	cmp	r3, #32
 8009526:	d119      	bne.n	800955c <lwip_netconn_do_bind+0x5c>
        err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8009528:	68bb      	ldr	r3, [r7, #8]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	6858      	ldr	r0, [r3, #4]
 800952e:	68bb      	ldr	r3, [r7, #8]
 8009530:	6899      	ldr	r1, [r3, #8]
 8009532:	68bb      	ldr	r3, [r7, #8]
 8009534:	899b      	ldrh	r3, [r3, #12]
 8009536:	461a      	mov	r2, r3
 8009538:	f00a f864 	bl	8013604 <udp_bind>
 800953c:	4603      	mov	r3, r0
 800953e:	73fb      	strb	r3, [r7, #15]
        break;
 8009540:	e011      	b.n	8009566 <lwip_netconn_do_bind+0x66>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8009542:	68bb      	ldr	r3, [r7, #8]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	6858      	ldr	r0, [r3, #4]
 8009548:	68bb      	ldr	r3, [r7, #8]
 800954a:	6899      	ldr	r1, [r3, #8]
 800954c:	68bb      	ldr	r3, [r7, #8]
 800954e:	899b      	ldrh	r3, [r3, #12]
 8009550:	461a      	mov	r2, r3
 8009552:	f003 fe6d 	bl	800d230 <tcp_bind>
 8009556:	4603      	mov	r3, r0
 8009558:	73fb      	strb	r3, [r7, #15]
        break;
 800955a:	e004      	b.n	8009566 <lwip_netconn_do_bind+0x66>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 800955c:	23fa      	movs	r3, #250	; 0xfa
 800955e:	73fb      	strb	r3, [r7, #15]
        break;
 8009560:	e001      	b.n	8009566 <lwip_netconn_do_bind+0x66>
    }
  } else {
    err = ERR_VAL;
 8009562:	23fa      	movs	r3, #250	; 0xfa
 8009564:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 8009566:	68bb      	ldr	r3, [r7, #8]
 8009568:	7bfa      	ldrb	r2, [r7, #15]
 800956a:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800956c:	bf00      	nop
 800956e:	3710      	adds	r7, #16
 8009570:	46bd      	mov	sp, r7
 8009572:	bd80      	pop	{r7, pc}

08009574 <lwip_netconn_do_listen>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_listen(void *m)
{
 8009574:	b580      	push	{r7, lr}
 8009576:	b086      	sub	sp, #24
 8009578:	af00      	add	r7, sp, #0
 800957a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	617b      	str	r3, [r7, #20]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 8009580:	697b      	ldr	r3, [r7, #20]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	685b      	ldr	r3, [r3, #4]
 8009586:	2b00      	cmp	r3, #0
 8009588:	d07f      	beq.n	800968a <lwip_netconn_do_listen+0x116>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800958a:	697b      	ldr	r3, [r7, #20]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	781b      	ldrb	r3, [r3, #0]
 8009590:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009594:	2b10      	cmp	r3, #16
 8009596:	d175      	bne.n	8009684 <lwip_netconn_do_listen+0x110>
      if (msg->conn->state == NETCONN_NONE) {
 8009598:	697b      	ldr	r3, [r7, #20]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	785b      	ldrb	r3, [r3, #1]
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d165      	bne.n	800966e <lwip_netconn_do_listen+0xfa>
        struct tcp_pcb *lpcb;
        if (msg->conn->pcb.tcp->state != CLOSED) {
 80095a2:	697b      	ldr	r3, [r7, #20]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	685b      	ldr	r3, [r3, #4]
 80095a8:	7d1b      	ldrb	r3, [r3, #20]
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d002      	beq.n	80095b4 <lwip_netconn_do_listen+0x40>
          /* connection is not closed, cannot listen */
          err = ERR_VAL;
 80095ae:	23fa      	movs	r3, #250	; 0xfa
 80095b0:	72fb      	strb	r3, [r7, #11]
 80095b2:	e06c      	b.n	800968e <lwip_netconn_do_listen+0x11a>
        } else {
          u8_t backlog;
#if TCP_LISTEN_BACKLOG
          backlog = msg->msg.lb.backlog;
#else  /* TCP_LISTEN_BACKLOG */
          backlog = TCP_DEFAULT_LISTEN_BACKLOG;
 80095b4:	23ff      	movs	r3, #255	; 0xff
 80095b6:	74fb      	strb	r3, [r7, #19]
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->local_ip,  IPADDR_TYPE_ANY);
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->remote_ip, IPADDR_TYPE_ANY);
          }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

          lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
 80095b8:	697b      	ldr	r3, [r7, #20]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	685b      	ldr	r3, [r3, #4]
 80095be:	f107 020b 	add.w	r2, r7, #11
 80095c2:	7cf9      	ldrb	r1, [r7, #19]
 80095c4:	4618      	mov	r0, r3
 80095c6:	f003 fefd 	bl	800d3c4 <tcp_listen_with_backlog_and_err>
 80095ca:	60f8      	str	r0, [r7, #12]

          if (lpcb == NULL) {
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d05d      	beq.n	800968e <lwip_netconn_do_listen+0x11a>
            /* in this case, the old pcb is still allocated */
          } else {
            /* delete the recvmbox and allocate the acceptmbox */
            if (sys_mbox_valid(&msg->conn->recvmbox)) {
 80095d2:	697b      	ldr	r3, [r7, #20]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	3310      	adds	r3, #16
 80095d8:	4618      	mov	r0, r3
 80095da:	f00e fbe2 	bl	8017da2 <sys_mbox_valid>
 80095de:	4603      	mov	r3, r0
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d00b      	beq.n	80095fc <lwip_netconn_do_listen+0x88>
              /** @todo: should we drain the recvmbox here? */
              sys_mbox_free(&msg->conn->recvmbox);
 80095e4:	697b      	ldr	r3, [r7, #20]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	3310      	adds	r3, #16
 80095ea:	4618      	mov	r0, r3
 80095ec:	f00e fb52 	bl	8017c94 <sys_mbox_free>
              sys_mbox_set_invalid(&msg->conn->recvmbox);
 80095f0:	697b      	ldr	r3, [r7, #20]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	3310      	adds	r3, #16
 80095f6:	4618      	mov	r0, r3
 80095f8:	f00e fbe4 	bl	8017dc4 <sys_mbox_set_invalid>
            }
            err = ERR_OK;
 80095fc:	2300      	movs	r3, #0
 80095fe:	72fb      	strb	r3, [r7, #11]
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 8009600:	697b      	ldr	r3, [r7, #20]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	3314      	adds	r3, #20
 8009606:	4618      	mov	r0, r3
 8009608:	f00e fbcb 	bl	8017da2 <sys_mbox_valid>
 800960c:	4603      	mov	r3, r0
 800960e:	2b00      	cmp	r3, #0
 8009610:	d108      	bne.n	8009624 <lwip_netconn_do_listen+0xb0>
              err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 8009612:	697b      	ldr	r3, [r7, #20]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	3314      	adds	r3, #20
 8009618:	2106      	movs	r1, #6
 800961a:	4618      	mov	r0, r3
 800961c:	f00e fb18 	bl	8017c50 <sys_mbox_new>
 8009620:	4603      	mov	r3, r0
 8009622:	72fb      	strb	r3, [r7, #11]
            }
            if (err == ERR_OK) {
 8009624:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8009628:	2b00      	cmp	r3, #0
 800962a:	d118      	bne.n	800965e <lwip_netconn_do_listen+0xea>
              msg->conn->state = NETCONN_LISTEN;
 800962c:	697b      	ldr	r3, [r7, #20]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	2202      	movs	r2, #2
 8009632:	705a      	strb	r2, [r3, #1]
              msg->conn->pcb.tcp = lpcb;
 8009634:	697b      	ldr	r3, [r7, #20]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	68fa      	ldr	r2, [r7, #12]
 800963a:	605a      	str	r2, [r3, #4]
              tcp_arg(msg->conn->pcb.tcp, msg->conn);
 800963c:	697b      	ldr	r3, [r7, #20]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	685a      	ldr	r2, [r3, #4]
 8009642:	697b      	ldr	r3, [r7, #20]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	4619      	mov	r1, r3
 8009648:	4610      	mov	r0, r2
 800964a:	f004 fea3 	bl	800e394 <tcp_arg>
              tcp_accept(msg->conn->pcb.tcp, accept_function);
 800964e:	697b      	ldr	r3, [r7, #20]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	685b      	ldr	r3, [r3, #4]
 8009654:	4912      	ldr	r1, [pc, #72]	; (80096a0 <lwip_netconn_do_listen+0x12c>)
 8009656:	4618      	mov	r0, r3
 8009658:	f004 ff14 	bl	800e484 <tcp_accept>
 800965c:	e017      	b.n	800968e <lwip_netconn_do_listen+0x11a>
            } else {
              /* since the old pcb is already deallocated, free lpcb now */
              tcp_close(lpcb);
 800965e:	68f8      	ldr	r0, [r7, #12]
 8009660:	f003 fc94 	bl	800cf8c <tcp_close>
              msg->conn->pcb.tcp = NULL;
 8009664:	697b      	ldr	r3, [r7, #20]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	2200      	movs	r2, #0
 800966a:	605a      	str	r2, [r3, #4]
 800966c:	e00f      	b.n	800968e <lwip_netconn_do_listen+0x11a>
            }
          }
        }
      } else if (msg->conn->state == NETCONN_LISTEN) {
 800966e:	697b      	ldr	r3, [r7, #20]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	785b      	ldrb	r3, [r3, #1]
 8009674:	2b02      	cmp	r3, #2
 8009676:	d102      	bne.n	800967e <lwip_netconn_do_listen+0x10a>
        /* already listening, allow updating of the backlog */
        err = ERR_OK;
 8009678:	2300      	movs	r3, #0
 800967a:	72fb      	strb	r3, [r7, #11]
 800967c:	e007      	b.n	800968e <lwip_netconn_do_listen+0x11a>
        tcp_backlog_set(msg->conn->pcb.tcp, msg->msg.lb.backlog);
      } else {
        err = ERR_CONN;
 800967e:	23f5      	movs	r3, #245	; 0xf5
 8009680:	72fb      	strb	r3, [r7, #11]
 8009682:	e004      	b.n	800968e <lwip_netconn_do_listen+0x11a>
      }
    } else {
      err = ERR_ARG;
 8009684:	23f0      	movs	r3, #240	; 0xf0
 8009686:	72fb      	strb	r3, [r7, #11]
 8009688:	e001      	b.n	800968e <lwip_netconn_do_listen+0x11a>
    }
  } else {
    err = ERR_CONN;
 800968a:	23f5      	movs	r3, #245	; 0xf5
 800968c:	72fb      	strb	r3, [r7, #11]
  }
  msg->err = err;
 800968e:	f997 200b 	ldrsb.w	r2, [r7, #11]
 8009692:	697b      	ldr	r3, [r7, #20]
 8009694:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 8009696:	bf00      	nop
 8009698:	3718      	adds	r7, #24
 800969a:	46bd      	mov	sp, r7
 800969c:	bd80      	pop	{r7, pc}
 800969e:	bf00      	nop
 80096a0:	08008b81 	.word	0x08008b81

080096a4 <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 80096a4:	b580      	push	{r7, lr}
 80096a6:	b086      	sub	sp, #24
 80096a8:	af00      	add	r7, sp, #0
 80096aa:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 80096b0:	693b      	ldr	r3, [r7, #16]
 80096b2:	2200      	movs	r2, #0
 80096b4:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 80096b6:	693b      	ldr	r3, [r7, #16]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	685b      	ldr	r3, [r3, #4]
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d022      	beq.n	8009706 <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 80096c0:	693b      	ldr	r3, [r7, #16]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	781b      	ldrb	r3, [r3, #0]
 80096c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80096ca:	2b10      	cmp	r3, #16
 80096cc:	d11b      	bne.n	8009706 <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 80096ce:	693b      	ldr	r3, [r7, #16]
 80096d0:	689b      	ldr	r3, [r3, #8]
 80096d2:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 80096d4:	697b      	ldr	r3, [r7, #20]
 80096d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80096da:	d202      	bcs.n	80096e2 <lwip_netconn_do_recv+0x3e>
 80096dc:	697b      	ldr	r3, [r7, #20]
 80096de:	b29b      	uxth	r3, r3
 80096e0:	e001      	b.n	80096e6 <lwip_netconn_do_recv+0x42>
 80096e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80096e6:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 80096e8:	693b      	ldr	r3, [r7, #16]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	685b      	ldr	r3, [r3, #4]
 80096ee:	89fa      	ldrh	r2, [r7, #14]
 80096f0:	4611      	mov	r1, r2
 80096f2:	4618      	mov	r0, r3
 80096f4:	f003 ff6a 	bl	800d5cc <tcp_recved>
        remaining -= recved;
 80096f8:	89fb      	ldrh	r3, [r7, #14]
 80096fa:	697a      	ldr	r2, [r7, #20]
 80096fc:	1ad3      	subs	r3, r2, r3
 80096fe:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 8009700:	697b      	ldr	r3, [r7, #20]
 8009702:	2b00      	cmp	r3, #0
 8009704:	d1e6      	bne.n	80096d4 <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 8009706:	bf00      	nop
 8009708:	3718      	adds	r7, #24
 800970a:	46bd      	mov	sp, r7
 800970c:	bd80      	pop	{r7, pc}
	...

08009710 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8009710:	b580      	push	{r7, lr}
 8009712:	b088      	sub	sp, #32
 8009714:	af00      	add	r7, sp, #0
 8009716:	6078      	str	r0, [r7, #4]
 8009718:	460b      	mov	r3, r1
 800971a:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 800971c:	2300      	movs	r3, #0
 800971e:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	2b00      	cmp	r3, #0
 8009724:	d106      	bne.n	8009734 <lwip_netconn_do_writemore+0x24>
 8009726:	4b96      	ldr	r3, [pc, #600]	; (8009980 <lwip_netconn_do_writemore+0x270>)
 8009728:	f240 6273 	movw	r2, #1651	; 0x673
 800972c:	4995      	ldr	r1, [pc, #596]	; (8009984 <lwip_netconn_do_writemore+0x274>)
 800972e:	4896      	ldr	r0, [pc, #600]	; (8009988 <lwip_netconn_do_writemore+0x278>)
 8009730:	f00e fe48 	bl	80183c4 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	785b      	ldrb	r3, [r3, #1]
 8009738:	2b01      	cmp	r3, #1
 800973a:	d006      	beq.n	800974a <lwip_netconn_do_writemore+0x3a>
 800973c:	4b90      	ldr	r3, [pc, #576]	; (8009980 <lwip_netconn_do_writemore+0x270>)
 800973e:	f240 6274 	movw	r2, #1652	; 0x674
 8009742:	4992      	ldr	r1, [pc, #584]	; (800998c <lwip_netconn_do_writemore+0x27c>)
 8009744:	4890      	ldr	r0, [pc, #576]	; (8009988 <lwip_netconn_do_writemore+0x278>)
 8009746:	f00e fe3d 	bl	80183c4 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	6a1b      	ldr	r3, [r3, #32]
 800974e:	2b00      	cmp	r3, #0
 8009750:	d106      	bne.n	8009760 <lwip_netconn_do_writemore+0x50>
 8009752:	4b8b      	ldr	r3, [pc, #556]	; (8009980 <lwip_netconn_do_writemore+0x270>)
 8009754:	f240 6275 	movw	r2, #1653	; 0x675
 8009758:	498d      	ldr	r1, [pc, #564]	; (8009990 <lwip_netconn_do_writemore+0x280>)
 800975a:	488b      	ldr	r0, [pc, #556]	; (8009988 <lwip_netconn_do_writemore+0x278>)
 800975c:	f00e fe32 	bl	80183c4 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	685b      	ldr	r3, [r3, #4]
 8009764:	2b00      	cmp	r3, #0
 8009766:	d106      	bne.n	8009776 <lwip_netconn_do_writemore+0x66>
 8009768:	4b85      	ldr	r3, [pc, #532]	; (8009980 <lwip_netconn_do_writemore+0x270>)
 800976a:	f240 6276 	movw	r2, #1654	; 0x676
 800976e:	4989      	ldr	r1, [pc, #548]	; (8009994 <lwip_netconn_do_writemore+0x284>)
 8009770:	4885      	ldr	r0, [pc, #532]	; (8009988 <lwip_netconn_do_writemore+0x278>)
 8009772:	f00e fe27 	bl	80183c4 <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	6a1b      	ldr	r3, [r3, #32]
 800977a:	699a      	ldr	r2, [r3, #24]
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	6a1b      	ldr	r3, [r3, #32]
 8009780:	695b      	ldr	r3, [r3, #20]
 8009782:	429a      	cmp	r2, r3
 8009784:	d306      	bcc.n	8009794 <lwip_netconn_do_writemore+0x84>
 8009786:	4b7e      	ldr	r3, [pc, #504]	; (8009980 <lwip_netconn_do_writemore+0x270>)
 8009788:	f240 6277 	movw	r2, #1655	; 0x677
 800978c:	4982      	ldr	r1, [pc, #520]	; (8009998 <lwip_netconn_do_writemore+0x288>)
 800978e:	487e      	ldr	r0, [pc, #504]	; (8009988 <lwip_netconn_do_writemore+0x278>)
 8009790:	f00e fe18 	bl	80183c4 <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	6a1b      	ldr	r3, [r3, #32]
 8009798:	899b      	ldrh	r3, [r3, #12]
 800979a:	2b00      	cmp	r3, #0
 800979c:	d106      	bne.n	80097ac <lwip_netconn_do_writemore+0x9c>
 800979e:	4b78      	ldr	r3, [pc, #480]	; (8009980 <lwip_netconn_do_writemore+0x270>)
 80097a0:	f240 6279 	movw	r2, #1657	; 0x679
 80097a4:	497d      	ldr	r1, [pc, #500]	; (800999c <lwip_netconn_do_writemore+0x28c>)
 80097a6:	4878      	ldr	r0, [pc, #480]	; (8009988 <lwip_netconn_do_writemore+0x278>)
 80097a8:	f00e fe0c 	bl	80183c4 <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	6a1b      	ldr	r3, [r3, #32]
 80097b0:	7f1b      	ldrb	r3, [r3, #28]
 80097b2:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	7f1b      	ldrb	r3, [r3, #28]
 80097b8:	f003 0302 	and.w	r3, r3, #2
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d104      	bne.n	80097ca <lwip_netconn_do_writemore+0xba>
 80097c0:	7ebb      	ldrb	r3, [r7, #26]
 80097c2:	f003 0304 	and.w	r3, r3, #4
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d001      	beq.n	80097ce <lwip_netconn_do_writemore+0xbe>
 80097ca:	2301      	movs	r3, #1
 80097cc:	e000      	b.n	80097d0 <lwip_netconn_do_writemore+0xc0>
 80097ce:	2300      	movs	r3, #0
 80097d0:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	6a1b      	ldr	r3, [r3, #32]
 80097d6:	689b      	ldr	r3, [r3, #8]
 80097d8:	681a      	ldr	r2, [r3, #0]
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	6a1b      	ldr	r3, [r3, #32]
 80097de:	691b      	ldr	r3, [r3, #16]
 80097e0:	4413      	add	r3, r2
 80097e2:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	6a1b      	ldr	r3, [r3, #32]
 80097e8:	689b      	ldr	r3, [r3, #8]
 80097ea:	685a      	ldr	r2, [r3, #4]
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	6a1b      	ldr	r3, [r3, #32]
 80097f0:	691b      	ldr	r3, [r3, #16]
 80097f2:	1ad3      	subs	r3, r2, r3
 80097f4:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 80097f6:	693b      	ldr	r3, [r7, #16]
 80097f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80097fc:	d307      	bcc.n	800980e <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 80097fe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009802:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 8009804:	7ebb      	ldrb	r3, [r7, #26]
 8009806:	f043 0302 	orr.w	r3, r3, #2
 800980a:	76bb      	strb	r3, [r7, #26]
 800980c:	e001      	b.n	8009812 <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 800980e:	693b      	ldr	r3, [r7, #16]
 8009810:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	685b      	ldr	r3, [r3, #4]
 8009816:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800981a:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 800981c:	89fa      	ldrh	r2, [r7, #14]
 800981e:	8bbb      	ldrh	r3, [r7, #28]
 8009820:	429a      	cmp	r2, r3
 8009822:	d216      	bcs.n	8009852 <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 8009824:	89fb      	ldrh	r3, [r7, #14]
 8009826:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 8009828:	7e3b      	ldrb	r3, [r7, #24]
 800982a:	2b00      	cmp	r3, #0
 800982c:	d00d      	beq.n	800984a <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 800982e:	8bbb      	ldrh	r3, [r7, #28]
 8009830:	2b00      	cmp	r3, #0
 8009832:	d10e      	bne.n	8009852 <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	6a1b      	ldr	r3, [r3, #32]
 8009838:	699b      	ldr	r3, [r3, #24]
 800983a:	2b00      	cmp	r3, #0
 800983c:	d102      	bne.n	8009844 <lwip_netconn_do_writemore+0x134>
 800983e:	f06f 0306 	mvn.w	r3, #6
 8009842:	e000      	b.n	8009846 <lwip_netconn_do_writemore+0x136>
 8009844:	2300      	movs	r3, #0
 8009846:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 8009848:	e07d      	b.n	8009946 <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 800984a:	7ebb      	ldrb	r3, [r7, #26]
 800984c:	f043 0302 	orr.w	r3, r3, #2
 8009850:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	6a1b      	ldr	r3, [r3, #32]
 8009856:	691a      	ldr	r2, [r3, #16]
 8009858:	8bbb      	ldrh	r3, [r7, #28]
 800985a:	441a      	add	r2, r3
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	6a1b      	ldr	r3, [r3, #32]
 8009860:	689b      	ldr	r3, [r3, #8]
 8009862:	685b      	ldr	r3, [r3, #4]
 8009864:	429a      	cmp	r2, r3
 8009866:	d906      	bls.n	8009876 <lwip_netconn_do_writemore+0x166>
 8009868:	4b45      	ldr	r3, [pc, #276]	; (8009980 <lwip_netconn_do_writemore+0x270>)
 800986a:	f240 62a3 	movw	r2, #1699	; 0x6a3
 800986e:	494c      	ldr	r1, [pc, #304]	; (80099a0 <lwip_netconn_do_writemore+0x290>)
 8009870:	4845      	ldr	r0, [pc, #276]	; (8009988 <lwip_netconn_do_writemore+0x278>)
 8009872:	f00e fda7 	bl	80183c4 <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 8009876:	8bbb      	ldrh	r3, [r7, #28]
 8009878:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800987c:	4293      	cmp	r3, r2
 800987e:	d103      	bne.n	8009888 <lwip_netconn_do_writemore+0x178>
 8009880:	693b      	ldr	r3, [r7, #16]
 8009882:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009886:	d209      	bcs.n	800989c <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 8009888:	693b      	ldr	r3, [r7, #16]
 800988a:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 800988c:	8bba      	ldrh	r2, [r7, #28]
 800988e:	429a      	cmp	r2, r3
 8009890:	d10b      	bne.n	80098aa <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	6a1b      	ldr	r3, [r3, #32]
 8009896:	899b      	ldrh	r3, [r3, #12]
 8009898:	2b01      	cmp	r3, #1
 800989a:	d906      	bls.n	80098aa <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 800989c:	2301      	movs	r3, #1
 800989e:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 80098a0:	7ebb      	ldrb	r3, [r7, #26]
 80098a2:	f043 0302 	orr.w	r3, r3, #2
 80098a6:	76bb      	strb	r3, [r7, #26]
 80098a8:	e001      	b.n	80098ae <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 80098aa:	2300      	movs	r3, #0
 80098ac:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	6858      	ldr	r0, [r3, #4]
 80098b2:	7ebb      	ldrb	r3, [r7, #26]
 80098b4:	8bba      	ldrh	r2, [r7, #28]
 80098b6:	6979      	ldr	r1, [r7, #20]
 80098b8:	f007 fcae 	bl	8011218 <tcp_write>
 80098bc:	4603      	mov	r3, r0
 80098be:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 80098c0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d12c      	bne.n	8009922 <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	6a1b      	ldr	r3, [r3, #32]
 80098cc:	6999      	ldr	r1, [r3, #24]
 80098ce:	8bba      	ldrh	r2, [r7, #28]
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	6a1b      	ldr	r3, [r3, #32]
 80098d4:	440a      	add	r2, r1
 80098d6:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	6a1b      	ldr	r3, [r3, #32]
 80098dc:	6919      	ldr	r1, [r3, #16]
 80098de:	8bba      	ldrh	r2, [r7, #28]
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	6a1b      	ldr	r3, [r3, #32]
 80098e4:	440a      	add	r2, r1
 80098e6:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	6a1b      	ldr	r3, [r3, #32]
 80098ec:	691a      	ldr	r2, [r3, #16]
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	6a1b      	ldr	r3, [r3, #32]
 80098f2:	689b      	ldr	r3, [r3, #8]
 80098f4:	685b      	ldr	r3, [r3, #4]
 80098f6:	429a      	cmp	r2, r3
 80098f8:	d113      	bne.n	8009922 <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	6a1b      	ldr	r3, [r3, #32]
 80098fe:	899a      	ldrh	r2, [r3, #12]
 8009900:	3a01      	subs	r2, #1
 8009902:	b292      	uxth	r2, r2
 8009904:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	6a1b      	ldr	r3, [r3, #32]
 800990a:	899b      	ldrh	r3, [r3, #12]
 800990c:	2b00      	cmp	r3, #0
 800990e:	d008      	beq.n	8009922 <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	6a1b      	ldr	r3, [r3, #32]
 8009914:	689a      	ldr	r2, [r3, #8]
 8009916:	3208      	adds	r2, #8
 8009918:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	6a1b      	ldr	r3, [r3, #32]
 800991e:	2200      	movs	r2, #0
 8009920:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 8009922:	7e7b      	ldrb	r3, [r7, #25]
 8009924:	2b00      	cmp	r3, #0
 8009926:	d004      	beq.n	8009932 <lwip_netconn_do_writemore+0x222>
 8009928:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800992c:	2b00      	cmp	r3, #0
 800992e:	f43f af50 	beq.w	80097d2 <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 8009932:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009936:	2b00      	cmp	r3, #0
 8009938:	d004      	beq.n	8009944 <lwip_netconn_do_writemore+0x234>
 800993a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800993e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009942:	d146      	bne.n	80099d2 <lwip_netconn_do_writemore+0x2c2>
err_mem:
 8009944:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 8009946:	7e3b      	ldrb	r3, [r7, #24]
 8009948:	2b00      	cmp	r3, #0
 800994a:	d02b      	beq.n	80099a4 <lwip_netconn_do_writemore+0x294>
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	6a1b      	ldr	r3, [r3, #32]
 8009950:	699a      	ldr	r2, [r3, #24]
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	6a1b      	ldr	r3, [r3, #32]
 8009956:	695b      	ldr	r3, [r3, #20]
 8009958:	429a      	cmp	r2, r3
 800995a:	d223      	bcs.n	80099a4 <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009960:	2b00      	cmp	r3, #0
 8009962:	d005      	beq.n	8009970 <lwip_netconn_do_writemore+0x260>
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009968:	2200      	movs	r2, #0
 800996a:	2103      	movs	r1, #3
 800996c:	6878      	ldr	r0, [r7, #4]
 800996e:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	7f1b      	ldrb	r3, [r3, #28]
 8009974:	f043 0310 	orr.w	r3, r3, #16
 8009978:	b2da      	uxtb	r2, r3
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	771a      	strb	r2, [r3, #28]
 800997e:	e028      	b.n	80099d2 <lwip_netconn_do_writemore+0x2c2>
 8009980:	080196a8 	.word	0x080196a8
 8009984:	08019800 	.word	0x08019800
 8009988:	080196ec 	.word	0x080196ec
 800998c:	08019b08 	.word	0x08019b08
 8009990:	08019810 	.word	0x08019810
 8009994:	08019b28 	.word	0x08019b28
 8009998:	08019b40 	.word	0x08019b40
 800999c:	08019b80 	.word	0x08019b80
 80099a0:	08019ba8 	.word	0x08019ba8
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	685b      	ldr	r3, [r3, #4]
 80099a8:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80099ac:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 80099b0:	d305      	bcc.n	80099be <lwip_netconn_do_writemore+0x2ae>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	685b      	ldr	r3, [r3, #4]
 80099b6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 80099ba:	2b04      	cmp	r3, #4
 80099bc:	d909      	bls.n	80099d2 <lwip_netconn_do_writemore+0x2c2>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d005      	beq.n	80099d2 <lwip_netconn_do_writemore+0x2c2>
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099ca:	2200      	movs	r2, #0
 80099cc:	2103      	movs	r1, #3
 80099ce:	6878      	ldr	r0, [r7, #4]
 80099d0:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 80099d2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d11d      	bne.n	8009a16 <lwip_netconn_do_writemore+0x306>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	6a1b      	ldr	r3, [r3, #32]
 80099de:	699a      	ldr	r2, [r3, #24]
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	6a1b      	ldr	r3, [r3, #32]
 80099e4:	695b      	ldr	r3, [r3, #20]
 80099e6:	429a      	cmp	r2, r3
 80099e8:	d002      	beq.n	80099f0 <lwip_netconn_do_writemore+0x2e0>
 80099ea:	7e3b      	ldrb	r3, [r7, #24]
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d001      	beq.n	80099f4 <lwip_netconn_do_writemore+0x2e4>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 80099f0:	2301      	movs	r3, #1
 80099f2:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	685b      	ldr	r3, [r3, #4]
 80099f8:	4618      	mov	r0, r3
 80099fa:	f008 f9f7 	bl	8011dec <tcp_output>
 80099fe:	4603      	mov	r3, r0
 8009a00:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 8009a02:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8009a06:	f113 0f04 	cmn.w	r3, #4
 8009a0a:	d12c      	bne.n	8009a66 <lwip_netconn_do_writemore+0x356>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 8009a0c:	7b3b      	ldrb	r3, [r7, #12]
 8009a0e:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8009a10:	2301      	movs	r3, #1
 8009a12:	76fb      	strb	r3, [r7, #27]
 8009a14:	e027      	b.n	8009a66 <lwip_netconn_do_writemore+0x356>
      }
    } else if (err == ERR_MEM) {
 8009a16:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009a1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a1e:	d120      	bne.n	8009a62 <lwip_netconn_do_writemore+0x352>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	685b      	ldr	r3, [r3, #4]
 8009a24:	4618      	mov	r0, r3
 8009a26:	f008 f9e1 	bl	8011dec <tcp_output>
 8009a2a:	4603      	mov	r3, r0
 8009a2c:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 8009a2e:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8009a32:	f113 0f04 	cmn.w	r3, #4
 8009a36:	d104      	bne.n	8009a42 <lwip_netconn_do_writemore+0x332>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 8009a38:	7b7b      	ldrb	r3, [r7, #13]
 8009a3a:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8009a3c:	2301      	movs	r3, #1
 8009a3e:	76fb      	strb	r3, [r7, #27]
 8009a40:	e011      	b.n	8009a66 <lwip_netconn_do_writemore+0x356>
      } else if (dontblock) {
 8009a42:	7e3b      	ldrb	r3, [r7, #24]
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d00e      	beq.n	8009a66 <lwip_netconn_do_writemore+0x356>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	6a1b      	ldr	r3, [r3, #32]
 8009a4c:	699b      	ldr	r3, [r3, #24]
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d102      	bne.n	8009a58 <lwip_netconn_do_writemore+0x348>
 8009a52:	f06f 0306 	mvn.w	r3, #6
 8009a56:	e000      	b.n	8009a5a <lwip_netconn_do_writemore+0x34a>
 8009a58:	2300      	movs	r3, #0
 8009a5a:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8009a5c:	2301      	movs	r3, #1
 8009a5e:	76fb      	strb	r3, [r7, #27]
 8009a60:	e001      	b.n	8009a66 <lwip_netconn_do_writemore+0x356>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 8009a62:	2301      	movs	r3, #1
 8009a64:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 8009a66:	7efb      	ldrb	r3, [r7, #27]
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d015      	beq.n	8009a98 <lwip_netconn_do_writemore+0x388>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	6a1b      	ldr	r3, [r3, #32]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	330c      	adds	r3, #12
 8009a74:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	6a1b      	ldr	r3, [r3, #32]
 8009a7a:	7ffa      	ldrb	r2, [r7, #31]
 8009a7c:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	2200      	movs	r2, #0
 8009a82:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	2200      	movs	r2, #0
 8009a88:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 8009a8a:	78fb      	ldrb	r3, [r7, #3]
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d006      	beq.n	8009a9e <lwip_netconn_do_writemore+0x38e>
#endif
    {
      sys_sem_signal(op_completed_sem);
 8009a90:	68b8      	ldr	r0, [r7, #8]
 8009a92:	f00e f9fd 	bl	8017e90 <sys_sem_signal>
 8009a96:	e002      	b.n	8009a9e <lwip_netconn_do_writemore+0x38e>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 8009a98:	f04f 33ff 	mov.w	r3, #4294967295
 8009a9c:	e000      	b.n	8009aa0 <lwip_netconn_do_writemore+0x390>
  }
#endif
  return ERR_OK;
 8009a9e:	2300      	movs	r3, #0
}
 8009aa0:	4618      	mov	r0, r3
 8009aa2:	3720      	adds	r7, #32
 8009aa4:	46bd      	mov	sp, r7
 8009aa6:	bd80      	pop	{r7, pc}

08009aa8 <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 8009aa8:	b580      	push	{r7, lr}
 8009aaa:	b084      	sub	sp, #16
 8009aac:	af00      	add	r7, sp, #0
 8009aae:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 8009ab4:	68bb      	ldr	r3, [r7, #8]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	4618      	mov	r0, r3
 8009aba:	f7fe fd1c 	bl	80084f6 <netconn_err>
 8009abe:	4603      	mov	r3, r0
 8009ac0:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 8009ac2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d166      	bne.n	8009b98 <lwip_netconn_do_write+0xf0>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8009aca:	68bb      	ldr	r3, [r7, #8]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	781b      	ldrb	r3, [r3, #0]
 8009ad0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009ad4:	2b10      	cmp	r3, #16
 8009ad6:	d15d      	bne.n	8009b94 <lwip_netconn_do_write+0xec>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 8009ad8:	68bb      	ldr	r3, [r7, #8]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	785b      	ldrb	r3, [r3, #1]
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d002      	beq.n	8009ae8 <lwip_netconn_do_write+0x40>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
 8009ae2:	23fb      	movs	r3, #251	; 0xfb
 8009ae4:	73fb      	strb	r3, [r7, #15]
 8009ae6:	e057      	b.n	8009b98 <lwip_netconn_do_write+0xf0>
      } else if (msg->conn->pcb.tcp != NULL) {
 8009ae8:	68bb      	ldr	r3, [r7, #8]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	685b      	ldr	r3, [r3, #4]
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d04d      	beq.n	8009b8e <lwip_netconn_do_write+0xe6>
        msg->conn->state = NETCONN_WRITE;
 8009af2:	68bb      	ldr	r3, [r7, #8]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	2201      	movs	r2, #1
 8009af8:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8009afa:	68bb      	ldr	r3, [r7, #8]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	6a1b      	ldr	r3, [r3, #32]
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d006      	beq.n	8009b12 <lwip_netconn_do_write+0x6a>
 8009b04:	4b28      	ldr	r3, [pc, #160]	; (8009ba8 <lwip_netconn_do_write+0x100>)
 8009b06:	f240 7223 	movw	r2, #1827	; 0x723
 8009b0a:	4928      	ldr	r1, [pc, #160]	; (8009bac <lwip_netconn_do_write+0x104>)
 8009b0c:	4828      	ldr	r0, [pc, #160]	; (8009bb0 <lwip_netconn_do_write+0x108>)
 8009b0e:	f00e fc59 	bl	80183c4 <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 8009b12:	68bb      	ldr	r3, [r7, #8]
 8009b14:	695b      	ldr	r3, [r3, #20]
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d106      	bne.n	8009b28 <lwip_netconn_do_write+0x80>
 8009b1a:	4b23      	ldr	r3, [pc, #140]	; (8009ba8 <lwip_netconn_do_write+0x100>)
 8009b1c:	f240 7224 	movw	r2, #1828	; 0x724
 8009b20:	4924      	ldr	r1, [pc, #144]	; (8009bb4 <lwip_netconn_do_write+0x10c>)
 8009b22:	4823      	ldr	r0, [pc, #140]	; (8009bb0 <lwip_netconn_do_write+0x108>)
 8009b24:	f00e fc4e 	bl	80183c4 <iprintf>
        msg->conn->current_msg = msg;
 8009b28:	68bb      	ldr	r3, [r7, #8]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	68ba      	ldr	r2, [r7, #8]
 8009b2e:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 8009b30:	68bb      	ldr	r3, [r7, #8]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	2100      	movs	r1, #0
 8009b36:	4618      	mov	r0, r3
 8009b38:	f7ff fdea 	bl	8009710 <lwip_netconn_do_writemore>
 8009b3c:	4603      	mov	r3, r0
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d02e      	beq.n	8009ba0 <lwip_netconn_do_write+0xf8>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 8009b42:	68bb      	ldr	r3, [r7, #8]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	785b      	ldrb	r3, [r3, #1]
 8009b48:	2b01      	cmp	r3, #1
 8009b4a:	d006      	beq.n	8009b5a <lwip_netconn_do_write+0xb2>
 8009b4c:	4b16      	ldr	r3, [pc, #88]	; (8009ba8 <lwip_netconn_do_write+0x100>)
 8009b4e:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 8009b52:	4919      	ldr	r1, [pc, #100]	; (8009bb8 <lwip_netconn_do_write+0x110>)
 8009b54:	4816      	ldr	r0, [pc, #88]	; (8009bb0 <lwip_netconn_do_write+0x108>)
 8009b56:	f00e fc35 	bl	80183c4 <iprintf>
          UNLOCK_TCPIP_CORE();
 8009b5a:	4818      	ldr	r0, [pc, #96]	; (8009bbc <lwip_netconn_do_write+0x114>)
 8009b5c:	f00e fa09 	bl	8017f72 <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8009b60:	68bb      	ldr	r3, [r7, #8]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	330c      	adds	r3, #12
 8009b66:	2100      	movs	r1, #0
 8009b68:	4618      	mov	r0, r3
 8009b6a:	f00e f960 	bl	8017e2e <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 8009b6e:	4813      	ldr	r0, [pc, #76]	; (8009bbc <lwip_netconn_do_write+0x114>)
 8009b70:	f00e f9f0 	bl	8017f54 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 8009b74:	68bb      	ldr	r3, [r7, #8]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	785b      	ldrb	r3, [r3, #1]
 8009b7a:	2b01      	cmp	r3, #1
 8009b7c:	d110      	bne.n	8009ba0 <lwip_netconn_do_write+0xf8>
 8009b7e:	4b0a      	ldr	r3, [pc, #40]	; (8009ba8 <lwip_netconn_do_write+0x100>)
 8009b80:	f240 722c 	movw	r2, #1836	; 0x72c
 8009b84:	490c      	ldr	r1, [pc, #48]	; (8009bb8 <lwip_netconn_do_write+0x110>)
 8009b86:	480a      	ldr	r0, [pc, #40]	; (8009bb0 <lwip_netconn_do_write+0x108>)
 8009b88:	f00e fc1c 	bl	80183c4 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 8009b8c:	e008      	b.n	8009ba0 <lwip_netconn_do_write+0xf8>
      } else {
        err = ERR_CONN;
 8009b8e:	23f5      	movs	r3, #245	; 0xf5
 8009b90:	73fb      	strb	r3, [r7, #15]
 8009b92:	e001      	b.n	8009b98 <lwip_netconn_do_write+0xf0>
#else /* LWIP_TCP */
      err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      err = ERR_VAL;
 8009b94:	23fa      	movs	r3, #250	; 0xfa
 8009b96:	73fb      	strb	r3, [r7, #15]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
 8009b98:	68bb      	ldr	r3, [r7, #8]
 8009b9a:	7bfa      	ldrb	r2, [r7, #15]
 8009b9c:	711a      	strb	r2, [r3, #4]
 8009b9e:	e000      	b.n	8009ba2 <lwip_netconn_do_write+0xfa>
        return;
 8009ba0:	bf00      	nop
  TCPIP_APIMSG_ACK(msg);
}
 8009ba2:	3710      	adds	r7, #16
 8009ba4:	46bd      	mov	sp, r7
 8009ba6:	bd80      	pop	{r7, pc}
 8009ba8:	080196a8 	.word	0x080196a8
 8009bac:	08019a4c 	.word	0x08019a4c
 8009bb0:	080196ec 	.word	0x080196ec
 8009bb4:	08019bd4 	.word	0x08019bd4
 8009bb8:	08019a68 	.word	0x08019a68
 8009bbc:	2000d1c0 	.word	0x2000d1c0

08009bc0 <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 8009bc0:	b580      	push	{r7, lr}
 8009bc2:	b084      	sub	sp, #16
 8009bc4:	af00      	add	r7, sp, #0
 8009bc6:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	785b      	ldrb	r3, [r3, #1]
 8009bd2:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	685b      	ldr	r3, [r3, #4]
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d069      	beq.n	8009cb2 <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	781b      	ldrb	r3, [r3, #0]
 8009be4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 8009be8:	2b10      	cmp	r3, #16
 8009bea:	d162      	bne.n	8009cb2 <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 8009bf0:	2b03      	cmp	r3, #3
 8009bf2:	d002      	beq.n	8009bfa <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 8009bf4:	7afb      	ldrb	r3, [r7, #11]
 8009bf6:	2b02      	cmp	r3, #2
 8009bf8:	d05b      	beq.n	8009cb2 <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 8009bfa:	7afb      	ldrb	r3, [r7, #11]
 8009bfc:	2b03      	cmp	r3, #3
 8009bfe:	d103      	bne.n	8009c08 <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	22f5      	movs	r2, #245	; 0xf5
 8009c04:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 8009c06:	e059      	b.n	8009cbc <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 8009c08:	7afb      	ldrb	r3, [r7, #11]
 8009c0a:	2b01      	cmp	r3, #1
 8009c0c:	d103      	bne.n	8009c16 <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	22fb      	movs	r2, #251	; 0xfb
 8009c12:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 8009c14:	e052      	b.n	8009cbc <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	7a1b      	ldrb	r3, [r3, #8]
 8009c1a:	f003 0301 	and.w	r3, r3, #1
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d004      	beq.n	8009c2c <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	4618      	mov	r0, r3
 8009c28:	f7ff f99e 	bl	8008f68 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	6a1b      	ldr	r3, [r3, #32]
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d006      	beq.n	8009c44 <lwip_netconn_do_close+0x84>
 8009c36:	4b23      	ldr	r3, [pc, #140]	; (8009cc4 <lwip_netconn_do_close+0x104>)
 8009c38:	f240 72bd 	movw	r2, #1981	; 0x7bd
 8009c3c:	4922      	ldr	r1, [pc, #136]	; (8009cc8 <lwip_netconn_do_close+0x108>)
 8009c3e:	4823      	ldr	r0, [pc, #140]	; (8009ccc <lwip_netconn_do_close+0x10c>)
 8009c40:	f00e fbc0 	bl	80183c4 <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	2204      	movs	r2, #4
 8009c4a:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	68fa      	ldr	r2, [r7, #12]
 8009c52:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	2100      	movs	r1, #0
 8009c5a:	4618      	mov	r0, r3
 8009c5c:	f7ff fa02 	bl	8009064 <lwip_netconn_do_close_internal>
 8009c60:	4603      	mov	r3, r0
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d029      	beq.n	8009cba <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	785b      	ldrb	r3, [r3, #1]
 8009c6c:	2b04      	cmp	r3, #4
 8009c6e:	d006      	beq.n	8009c7e <lwip_netconn_do_close+0xbe>
 8009c70:	4b14      	ldr	r3, [pc, #80]	; (8009cc4 <lwip_netconn_do_close+0x104>)
 8009c72:	f240 72c2 	movw	r2, #1986	; 0x7c2
 8009c76:	4916      	ldr	r1, [pc, #88]	; (8009cd0 <lwip_netconn_do_close+0x110>)
 8009c78:	4814      	ldr	r0, [pc, #80]	; (8009ccc <lwip_netconn_do_close+0x10c>)
 8009c7a:	f00e fba3 	bl	80183c4 <iprintf>
        UNLOCK_TCPIP_CORE();
 8009c7e:	4815      	ldr	r0, [pc, #84]	; (8009cd4 <lwip_netconn_do_close+0x114>)
 8009c80:	f00e f977 	bl	8017f72 <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	330c      	adds	r3, #12
 8009c8a:	2100      	movs	r1, #0
 8009c8c:	4618      	mov	r0, r3
 8009c8e:	f00e f8ce 	bl	8017e2e <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 8009c92:	4810      	ldr	r0, [pc, #64]	; (8009cd4 <lwip_netconn_do_close+0x114>)
 8009c94:	f00e f95e 	bl	8017f54 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	785b      	ldrb	r3, [r3, #1]
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d00b      	beq.n	8009cba <lwip_netconn_do_close+0xfa>
 8009ca2:	4b08      	ldr	r3, [pc, #32]	; (8009cc4 <lwip_netconn_do_close+0x104>)
 8009ca4:	f240 72c6 	movw	r2, #1990	; 0x7c6
 8009ca8:	4909      	ldr	r1, [pc, #36]	; (8009cd0 <lwip_netconn_do_close+0x110>)
 8009caa:	4808      	ldr	r0, [pc, #32]	; (8009ccc <lwip_netconn_do_close+0x10c>)
 8009cac:	f00e fb8a 	bl	80183c4 <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 8009cb0:	e003      	b.n	8009cba <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	22f5      	movs	r2, #245	; 0xf5
 8009cb6:	711a      	strb	r2, [r3, #4]
 8009cb8:	e000      	b.n	8009cbc <lwip_netconn_do_close+0xfc>
      return;
 8009cba:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 8009cbc:	3710      	adds	r7, #16
 8009cbe:	46bd      	mov	sp, r7
 8009cc0:	bd80      	pop	{r7, pc}
 8009cc2:	bf00      	nop
 8009cc4:	080196a8 	.word	0x080196a8
 8009cc8:	08019a4c 	.word	0x08019a4c
 8009ccc:	080196ec 	.word	0x080196ec
 8009cd0:	08019a68 	.word	0x08019a68
 8009cd4:	2000d1c0 	.word	0x2000d1c0

08009cd8 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 8009cd8:	b580      	push	{r7, lr}
 8009cda:	b082      	sub	sp, #8
 8009cdc:	af00      	add	r7, sp, #0
 8009cde:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d013      	beq.n	8009d0e <netbuf_delete+0x36>
    if (buf->p != NULL) {
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d00b      	beq.n	8009d06 <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	4618      	mov	r0, r3
 8009cf4:	f002 fc90 	bl	800c618 <pbuf_free>
      buf->p = buf->ptr = NULL;
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	2200      	movs	r2, #0
 8009cfc:	605a      	str	r2, [r3, #4]
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	685a      	ldr	r2, [r3, #4]
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 8009d06:	6879      	ldr	r1, [r7, #4]
 8009d08:	2006      	movs	r0, #6
 8009d0a:	f001 fdd5 	bl	800b8b8 <memp_free>
  }
}
 8009d0e:	bf00      	nop
 8009d10:	3708      	adds	r7, #8
 8009d12:	46bd      	mov	sp, r7
 8009d14:	bd80      	pop	{r7, pc}
	...

08009d18 <netbuf_data>:
 * @return ERR_OK if the information was retrieved,
 *         ERR_BUF on error.
 */
err_t
netbuf_data(struct netbuf *buf, void **dataptr, u16_t *len)
{
 8009d18:	b580      	push	{r7, lr}
 8009d1a:	b084      	sub	sp, #16
 8009d1c:	af00      	add	r7, sp, #0
 8009d1e:	60f8      	str	r0, [r7, #12]
 8009d20:	60b9      	str	r1, [r7, #8]
 8009d22:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netbuf_data: invalid buf", (buf != NULL), return ERR_ARG;);
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d108      	bne.n	8009d3c <netbuf_data+0x24>
 8009d2a:	4b1b      	ldr	r3, [pc, #108]	; (8009d98 <netbuf_data+0x80>)
 8009d2c:	22c6      	movs	r2, #198	; 0xc6
 8009d2e:	491b      	ldr	r1, [pc, #108]	; (8009d9c <netbuf_data+0x84>)
 8009d30:	481b      	ldr	r0, [pc, #108]	; (8009da0 <netbuf_data+0x88>)
 8009d32:	f00e fb47 	bl	80183c4 <iprintf>
 8009d36:	f06f 030f 	mvn.w	r3, #15
 8009d3a:	e029      	b.n	8009d90 <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 8009d3c:	68bb      	ldr	r3, [r7, #8]
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d108      	bne.n	8009d54 <netbuf_data+0x3c>
 8009d42:	4b15      	ldr	r3, [pc, #84]	; (8009d98 <netbuf_data+0x80>)
 8009d44:	22c7      	movs	r2, #199	; 0xc7
 8009d46:	4917      	ldr	r1, [pc, #92]	; (8009da4 <netbuf_data+0x8c>)
 8009d48:	4815      	ldr	r0, [pc, #84]	; (8009da0 <netbuf_data+0x88>)
 8009d4a:	f00e fb3b 	bl	80183c4 <iprintf>
 8009d4e:	f06f 030f 	mvn.w	r3, #15
 8009d52:	e01d      	b.n	8009d90 <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid len", (len != NULL), return ERR_ARG;);
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d108      	bne.n	8009d6c <netbuf_data+0x54>
 8009d5a:	4b0f      	ldr	r3, [pc, #60]	; (8009d98 <netbuf_data+0x80>)
 8009d5c:	22c8      	movs	r2, #200	; 0xc8
 8009d5e:	4912      	ldr	r1, [pc, #72]	; (8009da8 <netbuf_data+0x90>)
 8009d60:	480f      	ldr	r0, [pc, #60]	; (8009da0 <netbuf_data+0x88>)
 8009d62:	f00e fb2f 	bl	80183c4 <iprintf>
 8009d66:	f06f 030f 	mvn.w	r3, #15
 8009d6a:	e011      	b.n	8009d90 <netbuf_data+0x78>

  if (buf->ptr == NULL) {
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	685b      	ldr	r3, [r3, #4]
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d102      	bne.n	8009d7a <netbuf_data+0x62>
    return ERR_BUF;
 8009d74:	f06f 0301 	mvn.w	r3, #1
 8009d78:	e00a      	b.n	8009d90 <netbuf_data+0x78>
  }
  *dataptr = buf->ptr->payload;
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	685b      	ldr	r3, [r3, #4]
 8009d7e:	685a      	ldr	r2, [r3, #4]
 8009d80:	68bb      	ldr	r3, [r7, #8]
 8009d82:	601a      	str	r2, [r3, #0]
  *len = buf->ptr->len;
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	685b      	ldr	r3, [r3, #4]
 8009d88:	895a      	ldrh	r2, [r3, #10]
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	801a      	strh	r2, [r3, #0]
  return ERR_OK;
 8009d8e:	2300      	movs	r3, #0
}
 8009d90:	4618      	mov	r0, r3
 8009d92:	3710      	adds	r7, #16
 8009d94:	46bd      	mov	sp, r7
 8009d96:	bd80      	pop	{r7, pc}
 8009d98:	08019c00 	.word	0x08019c00
 8009d9c:	08019d08 	.word	0x08019d08
 8009da0:	08019c50 	.word	0x08019c50
 8009da4:	08019d24 	.word	0x08019d24
 8009da8:	08019d44 	.word	0x08019d44

08009dac <netbuf_next>:
 *         1  if moved to the next part but now there is no next part
 *         0  if moved to the next part and there are still more parts
 */
s8_t
netbuf_next(struct netbuf *buf)
{
 8009dac:	b580      	push	{r7, lr}
 8009dae:	b082      	sub	sp, #8
 8009db0:	af00      	add	r7, sp, #0
 8009db2:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("netbuf_next: invalid buf", (buf != NULL), return -1;);
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d108      	bne.n	8009dcc <netbuf_next+0x20>
 8009dba:	4b11      	ldr	r3, [pc, #68]	; (8009e00 <netbuf_next+0x54>)
 8009dbc:	22e0      	movs	r2, #224	; 0xe0
 8009dbe:	4911      	ldr	r1, [pc, #68]	; (8009e04 <netbuf_next+0x58>)
 8009dc0:	4811      	ldr	r0, [pc, #68]	; (8009e08 <netbuf_next+0x5c>)
 8009dc2:	f00e faff 	bl	80183c4 <iprintf>
 8009dc6:	f04f 33ff 	mov.w	r3, #4294967295
 8009dca:	e014      	b.n	8009df6 <netbuf_next+0x4a>
  if (buf->ptr->next == NULL) {
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	685b      	ldr	r3, [r3, #4]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d102      	bne.n	8009ddc <netbuf_next+0x30>
    return -1;
 8009dd6:	f04f 33ff 	mov.w	r3, #4294967295
 8009dda:	e00c      	b.n	8009df6 <netbuf_next+0x4a>
  }
  buf->ptr = buf->ptr->next;
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	685b      	ldr	r3, [r3, #4]
 8009de0:	681a      	ldr	r2, [r3, #0]
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	605a      	str	r2, [r3, #4]
  if (buf->ptr->next == NULL) {
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	685b      	ldr	r3, [r3, #4]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d101      	bne.n	8009df4 <netbuf_next+0x48>
    return 1;
 8009df0:	2301      	movs	r3, #1
 8009df2:	e000      	b.n	8009df6 <netbuf_next+0x4a>
  }
  return 0;
 8009df4:	2300      	movs	r3, #0
}
 8009df6:	4618      	mov	r0, r3
 8009df8:	3708      	adds	r7, #8
 8009dfa:	46bd      	mov	sp, r7
 8009dfc:	bd80      	pop	{r7, pc}
 8009dfe:	bf00      	nop
 8009e00:	08019c00 	.word	0x08019c00
 8009e04:	08019d60 	.word	0x08019d60
 8009e08:	08019c50 	.word	0x08019c50

08009e0c <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 8009e0c:	b580      	push	{r7, lr}
 8009e0e:	b084      	sub	sp, #16
 8009e10:	af00      	add	r7, sp, #0
 8009e12:	6078      	str	r0, [r7, #4]
 8009e14:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 8009e16:	f009 f8a1 	bl	8012f5c <sys_timeouts_sleeptime>
 8009e1a:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e22:	d10b      	bne.n	8009e3c <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 8009e24:	4813      	ldr	r0, [pc, #76]	; (8009e74 <tcpip_timeouts_mbox_fetch+0x68>)
 8009e26:	f00e f8a4 	bl	8017f72 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 8009e2a:	2200      	movs	r2, #0
 8009e2c:	6839      	ldr	r1, [r7, #0]
 8009e2e:	6878      	ldr	r0, [r7, #4]
 8009e30:	f00d ff5c 	bl	8017cec <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 8009e34:	480f      	ldr	r0, [pc, #60]	; (8009e74 <tcpip_timeouts_mbox_fetch+0x68>)
 8009e36:	f00e f88d 	bl	8017f54 <sys_mutex_lock>
    return;
 8009e3a:	e018      	b.n	8009e6e <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d102      	bne.n	8009e48 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 8009e42:	f009 f851 	bl	8012ee8 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8009e46:	e7e6      	b.n	8009e16 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 8009e48:	480a      	ldr	r0, [pc, #40]	; (8009e74 <tcpip_timeouts_mbox_fetch+0x68>)
 8009e4a:	f00e f892 	bl	8017f72 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 8009e4e:	68fa      	ldr	r2, [r7, #12]
 8009e50:	6839      	ldr	r1, [r7, #0]
 8009e52:	6878      	ldr	r0, [r7, #4]
 8009e54:	f00d ff4a 	bl	8017cec <sys_arch_mbox_fetch>
 8009e58:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 8009e5a:	4806      	ldr	r0, [pc, #24]	; (8009e74 <tcpip_timeouts_mbox_fetch+0x68>)
 8009e5c:	f00e f87a 	bl	8017f54 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 8009e60:	68bb      	ldr	r3, [r7, #8]
 8009e62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e66:	d102      	bne.n	8009e6e <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 8009e68:	f009 f83e 	bl	8012ee8 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8009e6c:	e7d3      	b.n	8009e16 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 8009e6e:	3710      	adds	r7, #16
 8009e70:	46bd      	mov	sp, r7
 8009e72:	bd80      	pop	{r7, pc}
 8009e74:	2000d1c0 	.word	0x2000d1c0

08009e78 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 8009e78:	b580      	push	{r7, lr}
 8009e7a:	b084      	sub	sp, #16
 8009e7c:	af00      	add	r7, sp, #0
 8009e7e:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 8009e80:	4810      	ldr	r0, [pc, #64]	; (8009ec4 <tcpip_thread+0x4c>)
 8009e82:	f00e f867 	bl	8017f54 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 8009e86:	4b10      	ldr	r3, [pc, #64]	; (8009ec8 <tcpip_thread+0x50>)
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d005      	beq.n	8009e9a <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 8009e8e:	4b0e      	ldr	r3, [pc, #56]	; (8009ec8 <tcpip_thread+0x50>)
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	4a0e      	ldr	r2, [pc, #56]	; (8009ecc <tcpip_thread+0x54>)
 8009e94:	6812      	ldr	r2, [r2, #0]
 8009e96:	4610      	mov	r0, r2
 8009e98:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8009e9a:	f107 030c 	add.w	r3, r7, #12
 8009e9e:	4619      	mov	r1, r3
 8009ea0:	480b      	ldr	r0, [pc, #44]	; (8009ed0 <tcpip_thread+0x58>)
 8009ea2:	f7ff ffb3 	bl	8009e0c <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d106      	bne.n	8009eba <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8009eac:	4b09      	ldr	r3, [pc, #36]	; (8009ed4 <tcpip_thread+0x5c>)
 8009eae:	2291      	movs	r2, #145	; 0x91
 8009eb0:	4909      	ldr	r1, [pc, #36]	; (8009ed8 <tcpip_thread+0x60>)
 8009eb2:	480a      	ldr	r0, [pc, #40]	; (8009edc <tcpip_thread+0x64>)
 8009eb4:	f00e fa86 	bl	80183c4 <iprintf>
      continue;
 8009eb8:	e003      	b.n	8009ec2 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	4618      	mov	r0, r3
 8009ebe:	f000 f80f 	bl	8009ee0 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8009ec2:	e7ea      	b.n	8009e9a <tcpip_thread+0x22>
 8009ec4:	2000d1c0 	.word	0x2000d1c0
 8009ec8:	2000d1b4 	.word	0x2000d1b4
 8009ecc:	2000d1b8 	.word	0x2000d1b8
 8009ed0:	2000d1bc 	.word	0x2000d1bc
 8009ed4:	08019d98 	.word	0x08019d98
 8009ed8:	08019dc8 	.word	0x08019dc8
 8009edc:	08019de8 	.word	0x08019de8

08009ee0 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 8009ee0:	b580      	push	{r7, lr}
 8009ee2:	b082      	sub	sp, #8
 8009ee4:	af00      	add	r7, sp, #0
 8009ee6:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	781b      	ldrb	r3, [r3, #0]
 8009eec:	2b02      	cmp	r3, #2
 8009eee:	d026      	beq.n	8009f3e <tcpip_thread_handle_msg+0x5e>
 8009ef0:	2b02      	cmp	r3, #2
 8009ef2:	dc2b      	bgt.n	8009f4c <tcpip_thread_handle_msg+0x6c>
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d002      	beq.n	8009efe <tcpip_thread_handle_msg+0x1e>
 8009ef8:	2b01      	cmp	r3, #1
 8009efa:	d015      	beq.n	8009f28 <tcpip_thread_handle_msg+0x48>
 8009efc:	e026      	b.n	8009f4c <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	68db      	ldr	r3, [r3, #12]
 8009f02:	687a      	ldr	r2, [r7, #4]
 8009f04:	6850      	ldr	r0, [r2, #4]
 8009f06:	687a      	ldr	r2, [r7, #4]
 8009f08:	6892      	ldr	r2, [r2, #8]
 8009f0a:	4611      	mov	r1, r2
 8009f0c:	4798      	blx	r3
 8009f0e:	4603      	mov	r3, r0
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d004      	beq.n	8009f1e <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	685b      	ldr	r3, [r3, #4]
 8009f18:	4618      	mov	r0, r3
 8009f1a:	f002 fb7d 	bl	800c618 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8009f1e:	6879      	ldr	r1, [r7, #4]
 8009f20:	2009      	movs	r0, #9
 8009f22:	f001 fcc9 	bl	800b8b8 <memp_free>
      break;
 8009f26:	e018      	b.n	8009f5a <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	685b      	ldr	r3, [r3, #4]
 8009f2c:	687a      	ldr	r2, [r7, #4]
 8009f2e:	6892      	ldr	r2, [r2, #8]
 8009f30:	4610      	mov	r0, r2
 8009f32:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8009f34:	6879      	ldr	r1, [r7, #4]
 8009f36:	2008      	movs	r0, #8
 8009f38:	f001 fcbe 	bl	800b8b8 <memp_free>
      break;
 8009f3c:	e00d      	b.n	8009f5a <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	685b      	ldr	r3, [r3, #4]
 8009f42:	687a      	ldr	r2, [r7, #4]
 8009f44:	6892      	ldr	r2, [r2, #8]
 8009f46:	4610      	mov	r0, r2
 8009f48:	4798      	blx	r3
      break;
 8009f4a:	e006      	b.n	8009f5a <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8009f4c:	4b05      	ldr	r3, [pc, #20]	; (8009f64 <tcpip_thread_handle_msg+0x84>)
 8009f4e:	22cf      	movs	r2, #207	; 0xcf
 8009f50:	4905      	ldr	r1, [pc, #20]	; (8009f68 <tcpip_thread_handle_msg+0x88>)
 8009f52:	4806      	ldr	r0, [pc, #24]	; (8009f6c <tcpip_thread_handle_msg+0x8c>)
 8009f54:	f00e fa36 	bl	80183c4 <iprintf>
      break;
 8009f58:	bf00      	nop
  }
}
 8009f5a:	bf00      	nop
 8009f5c:	3708      	adds	r7, #8
 8009f5e:	46bd      	mov	sp, r7
 8009f60:	bd80      	pop	{r7, pc}
 8009f62:	bf00      	nop
 8009f64:	08019d98 	.word	0x08019d98
 8009f68:	08019dc8 	.word	0x08019dc8
 8009f6c:	08019de8 	.word	0x08019de8

08009f70 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8009f70:	b580      	push	{r7, lr}
 8009f72:	b086      	sub	sp, #24
 8009f74:	af00      	add	r7, sp, #0
 8009f76:	60f8      	str	r0, [r7, #12]
 8009f78:	60b9      	str	r1, [r7, #8]
 8009f7a:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8009f7c:	481a      	ldr	r0, [pc, #104]	; (8009fe8 <tcpip_inpkt+0x78>)
 8009f7e:	f00d ff10 	bl	8017da2 <sys_mbox_valid>
 8009f82:	4603      	mov	r3, r0
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d105      	bne.n	8009f94 <tcpip_inpkt+0x24>
 8009f88:	4b18      	ldr	r3, [pc, #96]	; (8009fec <tcpip_inpkt+0x7c>)
 8009f8a:	22fc      	movs	r2, #252	; 0xfc
 8009f8c:	4918      	ldr	r1, [pc, #96]	; (8009ff0 <tcpip_inpkt+0x80>)
 8009f8e:	4819      	ldr	r0, [pc, #100]	; (8009ff4 <tcpip_inpkt+0x84>)
 8009f90:	f00e fa18 	bl	80183c4 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8009f94:	2009      	movs	r0, #9
 8009f96:	f001 fc19 	bl	800b7cc <memp_malloc>
 8009f9a:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 8009f9c:	697b      	ldr	r3, [r7, #20]
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d102      	bne.n	8009fa8 <tcpip_inpkt+0x38>
    return ERR_MEM;
 8009fa2:	f04f 33ff 	mov.w	r3, #4294967295
 8009fa6:	e01a      	b.n	8009fde <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 8009fa8:	697b      	ldr	r3, [r7, #20]
 8009faa:	2200      	movs	r2, #0
 8009fac:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 8009fae:	697b      	ldr	r3, [r7, #20]
 8009fb0:	68fa      	ldr	r2, [r7, #12]
 8009fb2:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 8009fb4:	697b      	ldr	r3, [r7, #20]
 8009fb6:	68ba      	ldr	r2, [r7, #8]
 8009fb8:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 8009fba:	697b      	ldr	r3, [r7, #20]
 8009fbc:	687a      	ldr	r2, [r7, #4]
 8009fbe:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8009fc0:	6979      	ldr	r1, [r7, #20]
 8009fc2:	4809      	ldr	r0, [pc, #36]	; (8009fe8 <tcpip_inpkt+0x78>)
 8009fc4:	f00d fe78 	bl	8017cb8 <sys_mbox_trypost>
 8009fc8:	4603      	mov	r3, r0
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d006      	beq.n	8009fdc <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8009fce:	6979      	ldr	r1, [r7, #20]
 8009fd0:	2009      	movs	r0, #9
 8009fd2:	f001 fc71 	bl	800b8b8 <memp_free>
    return ERR_MEM;
 8009fd6:	f04f 33ff 	mov.w	r3, #4294967295
 8009fda:	e000      	b.n	8009fde <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 8009fdc:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 8009fde:	4618      	mov	r0, r3
 8009fe0:	3718      	adds	r7, #24
 8009fe2:	46bd      	mov	sp, r7
 8009fe4:	bd80      	pop	{r7, pc}
 8009fe6:	bf00      	nop
 8009fe8:	2000d1bc 	.word	0x2000d1bc
 8009fec:	08019d98 	.word	0x08019d98
 8009ff0:	08019e10 	.word	0x08019e10
 8009ff4:	08019de8 	.word	0x08019de8

08009ff8 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 8009ff8:	b580      	push	{r7, lr}
 8009ffa:	b082      	sub	sp, #8
 8009ffc:	af00      	add	r7, sp, #0
 8009ffe:	6078      	str	r0, [r7, #4]
 800a000:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800a002:	683b      	ldr	r3, [r7, #0]
 800a004:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800a008:	f003 0318 	and.w	r3, r3, #24
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d006      	beq.n	800a01e <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800a010:	4a08      	ldr	r2, [pc, #32]	; (800a034 <tcpip_input+0x3c>)
 800a012:	6839      	ldr	r1, [r7, #0]
 800a014:	6878      	ldr	r0, [r7, #4]
 800a016:	f7ff ffab 	bl	8009f70 <tcpip_inpkt>
 800a01a:	4603      	mov	r3, r0
 800a01c:	e005      	b.n	800a02a <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800a01e:	4a06      	ldr	r2, [pc, #24]	; (800a038 <tcpip_input+0x40>)
 800a020:	6839      	ldr	r1, [r7, #0]
 800a022:	6878      	ldr	r0, [r7, #4]
 800a024:	f7ff ffa4 	bl	8009f70 <tcpip_inpkt>
 800a028:	4603      	mov	r3, r0
}
 800a02a:	4618      	mov	r0, r3
 800a02c:	3708      	adds	r7, #8
 800a02e:	46bd      	mov	sp, r7
 800a030:	bd80      	pop	{r7, pc}
 800a032:	bf00      	nop
 800a034:	08017aa5 	.word	0x08017aa5
 800a038:	08016971 	.word	0x08016971

0800a03c <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800a03c:	b580      	push	{r7, lr}
 800a03e:	b084      	sub	sp, #16
 800a040:	af00      	add	r7, sp, #0
 800a042:	6078      	str	r0, [r7, #4]
 800a044:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800a046:	4819      	ldr	r0, [pc, #100]	; (800a0ac <tcpip_try_callback+0x70>)
 800a048:	f00d feab 	bl	8017da2 <sys_mbox_valid>
 800a04c:	4603      	mov	r3, r0
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d106      	bne.n	800a060 <tcpip_try_callback+0x24>
 800a052:	4b17      	ldr	r3, [pc, #92]	; (800a0b0 <tcpip_try_callback+0x74>)
 800a054:	f240 125d 	movw	r2, #349	; 0x15d
 800a058:	4916      	ldr	r1, [pc, #88]	; (800a0b4 <tcpip_try_callback+0x78>)
 800a05a:	4817      	ldr	r0, [pc, #92]	; (800a0b8 <tcpip_try_callback+0x7c>)
 800a05c:	f00e f9b2 	bl	80183c4 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800a060:	2008      	movs	r0, #8
 800a062:	f001 fbb3 	bl	800b7cc <memp_malloc>
 800a066:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d102      	bne.n	800a074 <tcpip_try_callback+0x38>
    return ERR_MEM;
 800a06e:	f04f 33ff 	mov.w	r3, #4294967295
 800a072:	e017      	b.n	800a0a4 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	2201      	movs	r2, #1
 800a078:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	687a      	ldr	r2, [r7, #4]
 800a07e:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	683a      	ldr	r2, [r7, #0]
 800a084:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800a086:	68f9      	ldr	r1, [r7, #12]
 800a088:	4808      	ldr	r0, [pc, #32]	; (800a0ac <tcpip_try_callback+0x70>)
 800a08a:	f00d fe15 	bl	8017cb8 <sys_mbox_trypost>
 800a08e:	4603      	mov	r3, r0
 800a090:	2b00      	cmp	r3, #0
 800a092:	d006      	beq.n	800a0a2 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800a094:	68f9      	ldr	r1, [r7, #12]
 800a096:	2008      	movs	r0, #8
 800a098:	f001 fc0e 	bl	800b8b8 <memp_free>
    return ERR_MEM;
 800a09c:	f04f 33ff 	mov.w	r3, #4294967295
 800a0a0:	e000      	b.n	800a0a4 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800a0a2:	2300      	movs	r3, #0
}
 800a0a4:	4618      	mov	r0, r3
 800a0a6:	3710      	adds	r7, #16
 800a0a8:	46bd      	mov	sp, r7
 800a0aa:	bd80      	pop	{r7, pc}
 800a0ac:	2000d1bc 	.word	0x2000d1bc
 800a0b0:	08019d98 	.word	0x08019d98
 800a0b4:	08019e10 	.word	0x08019e10
 800a0b8:	08019de8 	.word	0x08019de8

0800a0bc <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 800a0bc:	b580      	push	{r7, lr}
 800a0be:	b084      	sub	sp, #16
 800a0c0:	af00      	add	r7, sp, #0
 800a0c2:	60f8      	str	r0, [r7, #12]
 800a0c4:	60b9      	str	r1, [r7, #8]
 800a0c6:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 800a0c8:	4806      	ldr	r0, [pc, #24]	; (800a0e4 <tcpip_send_msg_wait_sem+0x28>)
 800a0ca:	f00d ff43 	bl	8017f54 <sys_mutex_lock>
  fn(apimsg);
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	68b8      	ldr	r0, [r7, #8]
 800a0d2:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 800a0d4:	4803      	ldr	r0, [pc, #12]	; (800a0e4 <tcpip_send_msg_wait_sem+0x28>)
 800a0d6:	f00d ff4c 	bl	8017f72 <sys_mutex_unlock>
  return ERR_OK;
 800a0da:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 800a0dc:	4618      	mov	r0, r3
 800a0de:	3710      	adds	r7, #16
 800a0e0:	46bd      	mov	sp, r7
 800a0e2:	bd80      	pop	{r7, pc}
 800a0e4:	2000d1c0 	.word	0x2000d1c0

0800a0e8 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800a0e8:	b580      	push	{r7, lr}
 800a0ea:	b084      	sub	sp, #16
 800a0ec:	af02      	add	r7, sp, #8
 800a0ee:	6078      	str	r0, [r7, #4]
 800a0f0:	6039      	str	r1, [r7, #0]
  lwip_init();
 800a0f2:	f000 fec1 	bl	800ae78 <lwip_init>

  tcpip_init_done = initfunc;
 800a0f6:	4a17      	ldr	r2, [pc, #92]	; (800a154 <tcpip_init+0x6c>)
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800a0fc:	4a16      	ldr	r2, [pc, #88]	; (800a158 <tcpip_init+0x70>)
 800a0fe:	683b      	ldr	r3, [r7, #0]
 800a100:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800a102:	2106      	movs	r1, #6
 800a104:	4815      	ldr	r0, [pc, #84]	; (800a15c <tcpip_init+0x74>)
 800a106:	f00d fda3 	bl	8017c50 <sys_mbox_new>
 800a10a:	4603      	mov	r3, r0
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d006      	beq.n	800a11e <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800a110:	4b13      	ldr	r3, [pc, #76]	; (800a160 <tcpip_init+0x78>)
 800a112:	f240 2261 	movw	r2, #609	; 0x261
 800a116:	4913      	ldr	r1, [pc, #76]	; (800a164 <tcpip_init+0x7c>)
 800a118:	4813      	ldr	r0, [pc, #76]	; (800a168 <tcpip_init+0x80>)
 800a11a:	f00e f953 	bl	80183c4 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800a11e:	4813      	ldr	r0, [pc, #76]	; (800a16c <tcpip_init+0x84>)
 800a120:	f00d fefc 	bl	8017f1c <sys_mutex_new>
 800a124:	4603      	mov	r3, r0
 800a126:	2b00      	cmp	r3, #0
 800a128:	d006      	beq.n	800a138 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800a12a:	4b0d      	ldr	r3, [pc, #52]	; (800a160 <tcpip_init+0x78>)
 800a12c:	f240 2265 	movw	r2, #613	; 0x265
 800a130:	490f      	ldr	r1, [pc, #60]	; (800a170 <tcpip_init+0x88>)
 800a132:	480d      	ldr	r0, [pc, #52]	; (800a168 <tcpip_init+0x80>)
 800a134:	f00e f946 	bl	80183c4 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800a138:	2300      	movs	r3, #0
 800a13a:	9300      	str	r3, [sp, #0]
 800a13c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a140:	2200      	movs	r2, #0
 800a142:	490c      	ldr	r1, [pc, #48]	; (800a174 <tcpip_init+0x8c>)
 800a144:	480c      	ldr	r0, [pc, #48]	; (800a178 <tcpip_init+0x90>)
 800a146:	f00d ff21 	bl	8017f8c <sys_thread_new>
}
 800a14a:	bf00      	nop
 800a14c:	3708      	adds	r7, #8
 800a14e:	46bd      	mov	sp, r7
 800a150:	bd80      	pop	{r7, pc}
 800a152:	bf00      	nop
 800a154:	2000d1b4 	.word	0x2000d1b4
 800a158:	2000d1b8 	.word	0x2000d1b8
 800a15c:	2000d1bc 	.word	0x2000d1bc
 800a160:	08019d98 	.word	0x08019d98
 800a164:	08019e20 	.word	0x08019e20
 800a168:	08019de8 	.word	0x08019de8
 800a16c:	2000d1c0 	.word	0x2000d1c0
 800a170:	08019e44 	.word	0x08019e44
 800a174:	08009e79 	.word	0x08009e79
 800a178:	08019e68 	.word	0x08019e68

0800a17c <fs_open>:
#endif /* LWIP_HTTPD_CUSTOM_FILES */

/*-----------------------------------------------------------------------------------*/
err_t
fs_open(struct fs_file *file, const char *name)
{
 800a17c:	b580      	push	{r7, lr}
 800a17e:	b084      	sub	sp, #16
 800a180:	af00      	add	r7, sp, #0
 800a182:	6078      	str	r0, [r7, #4]
 800a184:	6039      	str	r1, [r7, #0]
  const struct fsdata_file *f;

  if ((file == NULL) || (name == NULL)) {
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d002      	beq.n	800a192 <fs_open+0x16>
 800a18c:	683b      	ldr	r3, [r7, #0]
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d102      	bne.n	800a198 <fs_open+0x1c>
    return ERR_ARG;
 800a192:	f06f 030f 	mvn.w	r3, #15
 800a196:	e028      	b.n	800a1ea <fs_open+0x6e>
    return ERR_OK;
  }
  file->is_custom_file = 0;
#endif /* LWIP_HTTPD_CUSTOM_FILES */

  for (f = FS_ROOT; f != NULL; f = f->next) {
 800a198:	4b16      	ldr	r3, [pc, #88]	; (800a1f4 <fs_open+0x78>)
 800a19a:	60fb      	str	r3, [r7, #12]
 800a19c:	e020      	b.n	800a1e0 <fs_open+0x64>
    if (!strcmp(name, (const char *)f->name)) {
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	685b      	ldr	r3, [r3, #4]
 800a1a2:	4619      	mov	r1, r3
 800a1a4:	6838      	ldr	r0, [r7, #0]
 800a1a6:	f7f6 f823 	bl	80001f0 <strcmp>
 800a1aa:	4603      	mov	r3, r0
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d114      	bne.n	800a1da <fs_open+0x5e>
      file->data = (const char *)f->data;
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	689a      	ldr	r2, [r3, #8]
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	601a      	str	r2, [r3, #0]
      file->len = f->len;
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	68da      	ldr	r2, [r3, #12]
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	605a      	str	r2, [r3, #4]
      file->index = f->len;
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	68da      	ldr	r2, [r3, #12]
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	609a      	str	r2, [r3, #8]
      file->pextension = NULL;
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	2200      	movs	r2, #0
 800a1cc:	60da      	str	r2, [r3, #12]
      file->flags = f->flags;
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	7c1a      	ldrb	r2, [r3, #16]
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	741a      	strb	r2, [r3, #16]
      file->chksum = f->chksum;
#endif /* HTTPD_PRECALCULATED_CHECKSUM */
#if LWIP_HTTPD_FILE_STATE
      file->state = fs_state_init(file, name);
#endif /* #if LWIP_HTTPD_FILE_STATE */
      return ERR_OK;
 800a1d6:	2300      	movs	r3, #0
 800a1d8:	e007      	b.n	800a1ea <fs_open+0x6e>
  for (f = FS_ROOT; f != NULL; f = f->next) {
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	60fb      	str	r3, [r7, #12]
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d1db      	bne.n	800a19e <fs_open+0x22>
    }
  }
  /* file not found */
  return ERR_VAL;
 800a1e6:	f06f 0305 	mvn.w	r3, #5
}
 800a1ea:	4618      	mov	r0, r3
 800a1ec:	3710      	adds	r7, #16
 800a1ee:	46bd      	mov	sp, r7
 800a1f0:	bd80      	pop	{r7, pc}
 800a1f2:	bf00      	nop
 800a1f4:	08026f04 	.word	0x08026f04

0800a1f8 <fs_close>:

/*-----------------------------------------------------------------------------------*/
void
fs_close(struct fs_file *file)
{
 800a1f8:	b480      	push	{r7}
 800a1fa:	b083      	sub	sp, #12
 800a1fc:	af00      	add	r7, sp, #0
 800a1fe:	6078      	str	r0, [r7, #4]
#endif /* LWIP_HTTPD_CUSTOM_FILES */
#if LWIP_HTTPD_FILE_STATE
  fs_state_free(file, file->state);
#endif /* #if LWIP_HTTPD_FILE_STATE */
  LWIP_UNUSED_ARG(file);
}
 800a200:	bf00      	nop
 800a202:	370c      	adds	r7, #12
 800a204:	46bd      	mov	sp, r7
 800a206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a20a:	4770      	bx	lr

0800a20c <fs_bytes_left>:
}
#endif /* LWIP_HTTPD_FS_ASYNC_READ */
/*-----------------------------------------------------------------------------------*/
int
fs_bytes_left(struct fs_file *file)
{
 800a20c:	b480      	push	{r7}
 800a20e:	b083      	sub	sp, #12
 800a210:	af00      	add	r7, sp, #0
 800a212:	6078      	str	r0, [r7, #4]
  return file->len - file->index;
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	685a      	ldr	r2, [r3, #4]
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	689b      	ldr	r3, [r3, #8]
 800a21c:	1ad3      	subs	r3, r2, r3
}
 800a21e:	4618      	mov	r0, r3
 800a220:	370c      	adds	r7, #12
 800a222:	46bd      	mov	sp, r7
 800a224:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a228:	4770      	bx	lr

0800a22a <http_state_init>:

/** Initialize a struct http_state.
 */
static void
http_state_init(struct http_state *hs)
{
 800a22a:	b580      	push	{r7, lr}
 800a22c:	b082      	sub	sp, #8
 800a22e:	af00      	add	r7, sp, #0
 800a230:	6078      	str	r0, [r7, #4]
  /* Initialize the structure. */
  memset(hs, 0, sizeof(struct http_state));
 800a232:	222c      	movs	r2, #44	; 0x2c
 800a234:	2100      	movs	r1, #0
 800a236:	6878      	ldr	r0, [r7, #4]
 800a238:	f00e f827 	bl	801828a <memset>
#if LWIP_HTTPD_DYNAMIC_HEADERS
  /* Indicate that the headers are not yet valid */
  hs->hdr_index = NUM_FILE_HDR_STRINGS;
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */
}
 800a23c:	bf00      	nop
 800a23e:	3708      	adds	r7, #8
 800a240:	46bd      	mov	sp, r7
 800a242:	bd80      	pop	{r7, pc}

0800a244 <http_state_alloc>:

/** Allocate a struct http_state. */
static struct http_state *
http_state_alloc(void)
{
 800a244:	b580      	push	{r7, lr}
 800a246:	b082      	sub	sp, #8
 800a248:	af00      	add	r7, sp, #0
  struct http_state *ret = HTTP_ALLOC_HTTP_STATE();
 800a24a:	202c      	movs	r0, #44	; 0x2c
 800a24c:	f001 f91a 	bl	800b484 <mem_malloc>
 800a250:	6078      	str	r0, [r7, #4]
  if (ret == NULL) {
    http_kill_oldest_connection(0);
    ret = HTTP_ALLOC_HTTP_STATE();
  }
#endif /* LWIP_HTTPD_KILL_OLD_ON_CONNECTIONS_EXCEEDED */
  if (ret != NULL) {
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	2b00      	cmp	r3, #0
 800a256:	d002      	beq.n	800a25e <http_state_alloc+0x1a>
    http_state_init(ret);
 800a258:	6878      	ldr	r0, [r7, #4]
 800a25a:	f7ff ffe6 	bl	800a22a <http_state_init>
    http_add_connection(ret);
  }
  return ret;
 800a25e:	687b      	ldr	r3, [r7, #4]
}
 800a260:	4618      	mov	r0, r3
 800a262:	3708      	adds	r7, #8
 800a264:	46bd      	mov	sp, r7
 800a266:	bd80      	pop	{r7, pc}

0800a268 <http_state_eof>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_eof(struct http_state *hs)
{
 800a268:	b580      	push	{r7, lr}
 800a26a:	b082      	sub	sp, #8
 800a26c:	af00      	add	r7, sp, #0
 800a26e:	6078      	str	r0, [r7, #4]
  if (hs->handle) {
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	695b      	ldr	r3, [r3, #20]
 800a274:	2b00      	cmp	r3, #0
 800a276:	d007      	beq.n	800a288 <http_state_eof+0x20>
    u32_t ms_needed = sys_now() - hs->time_started;
    u32_t needed = LWIP_MAX(1, (ms_needed / 100));
    LWIP_DEBUGF(HTTPD_DEBUG_TIMING, ("httpd: needed %"U32_F" ms to send file of %d bytes -> %"U32_F" bytes/sec\n",
                                     ms_needed, hs->handle->len, ((((u32_t)hs->handle->len) * 10) / needed)));
#endif /* LWIP_HTTPD_TIMING */
    fs_close(hs->handle);
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	695b      	ldr	r3, [r3, #20]
 800a27c:	4618      	mov	r0, r3
 800a27e:	f7ff ffbb 	bl	800a1f8 <fs_close>
    hs->handle = NULL;
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	2200      	movs	r2, #0
 800a286:	615a      	str	r2, [r3, #20]
    http_ssi_state_free(hs->ssi);
    hs->ssi = NULL;
  }
#endif /* LWIP_HTTPD_SSI */
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  if (hs->req) {
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	6a1b      	ldr	r3, [r3, #32]
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d007      	beq.n	800a2a0 <http_state_eof+0x38>
    pbuf_free(hs->req);
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	6a1b      	ldr	r3, [r3, #32]
 800a294:	4618      	mov	r0, r3
 800a296:	f002 f9bf 	bl	800c618 <pbuf_free>
    hs->req = NULL;
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	2200      	movs	r2, #0
 800a29e:	621a      	str	r2, [r3, #32]
  }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
}
 800a2a0:	bf00      	nop
 800a2a2:	3708      	adds	r7, #8
 800a2a4:	46bd      	mov	sp, r7
 800a2a6:	bd80      	pop	{r7, pc}

0800a2a8 <http_state_free>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_free(struct http_state *hs)
{
 800a2a8:	b580      	push	{r7, lr}
 800a2aa:	b082      	sub	sp, #8
 800a2ac:	af00      	add	r7, sp, #0
 800a2ae:	6078      	str	r0, [r7, #4]
  if (hs != NULL) {
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d005      	beq.n	800a2c2 <http_state_free+0x1a>
    http_state_eof(hs);
 800a2b6:	6878      	ldr	r0, [r7, #4]
 800a2b8:	f7ff ffd6 	bl	800a268 <http_state_eof>
    http_remove_connection(hs);
    HTTP_FREE_HTTP_STATE(hs);
 800a2bc:	6878      	ldr	r0, [r7, #4]
 800a2be:	f000 ff47 	bl	800b150 <mem_free>
  }
}
 800a2c2:	bf00      	nop
 800a2c4:	3708      	adds	r7, #8
 800a2c6:	46bd      	mov	sp, r7
 800a2c8:	bd80      	pop	{r7, pc}
	...

0800a2cc <http_write>:
 * @param apiflags directly passed to tcp_write
 * @return the return value of tcp_write
 */
static err_t
http_write(struct altcp_pcb *pcb, const void *ptr, u16_t *length, u8_t apiflags)
{
 800a2cc:	b580      	push	{r7, lr}
 800a2ce:	b086      	sub	sp, #24
 800a2d0:	af00      	add	r7, sp, #0
 800a2d2:	60f8      	str	r0, [r7, #12]
 800a2d4:	60b9      	str	r1, [r7, #8]
 800a2d6:	607a      	str	r2, [r7, #4]
 800a2d8:	70fb      	strb	r3, [r7, #3]
  u16_t len, max_len;
  err_t err;
  LWIP_ASSERT("length != NULL", length != NULL);
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d106      	bne.n	800a2ee <http_write+0x22>
 800a2e0:	4b2c      	ldr	r3, [pc, #176]	; (800a394 <http_write+0xc8>)
 800a2e2:	f240 2219 	movw	r2, #537	; 0x219
 800a2e6:	492c      	ldr	r1, [pc, #176]	; (800a398 <http_write+0xcc>)
 800a2e8:	482c      	ldr	r0, [pc, #176]	; (800a39c <http_write+0xd0>)
 800a2ea:	f00e f86b 	bl	80183c4 <iprintf>
  len = *length;
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	881b      	ldrh	r3, [r3, #0]
 800a2f2:	82fb      	strh	r3, [r7, #22]
  if (len == 0) {
 800a2f4:	8afb      	ldrh	r3, [r7, #22]
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d101      	bne.n	800a2fe <http_write+0x32>
    return ERR_OK;
 800a2fa:	2300      	movs	r3, #0
 800a2fc:	e045      	b.n	800a38a <http_write+0xbe>
  }
  /* We cannot send more data than space available in the send buffer. */
  max_len = altcp_sndbuf(pcb);
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800a304:	82bb      	strh	r3, [r7, #20]
  if (max_len < len) {
 800a306:	8aba      	ldrh	r2, [r7, #20]
 800a308:	8afb      	ldrh	r3, [r7, #22]
 800a30a:	429a      	cmp	r2, r3
 800a30c:	d201      	bcs.n	800a312 <http_write+0x46>
    len = max_len;
 800a30e:	8abb      	ldrh	r3, [r7, #20]
 800a310:	82fb      	strh	r3, [r7, #22]
  }
#ifdef HTTPD_MAX_WRITE_LEN
  /* Additional limitation: e.g. don't enqueue more than 2*mss at once */
  max_len = HTTPD_MAX_WRITE_LEN(pcb);
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a316:	005b      	lsls	r3, r3, #1
 800a318:	82bb      	strh	r3, [r7, #20]
  if (len > max_len) {
 800a31a:	8afa      	ldrh	r2, [r7, #22]
 800a31c:	8abb      	ldrh	r3, [r7, #20]
 800a31e:	429a      	cmp	r2, r3
 800a320:	d901      	bls.n	800a326 <http_write+0x5a>
    len = max_len;
 800a322:	8abb      	ldrh	r3, [r7, #20]
 800a324:	82fb      	strh	r3, [r7, #22]
  }
#endif /* HTTPD_MAX_WRITE_LEN */
  do {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Trying to send %d bytes\n", len));
    err = altcp_write(pcb, ptr, len, apiflags);
 800a326:	78fb      	ldrb	r3, [r7, #3]
 800a328:	8afa      	ldrh	r2, [r7, #22]
 800a32a:	68b9      	ldr	r1, [r7, #8]
 800a32c:	68f8      	ldr	r0, [r7, #12]
 800a32e:	f006 ff73 	bl	8011218 <tcp_write>
 800a332:	4603      	mov	r3, r0
 800a334:	74fb      	strb	r3, [r7, #19]
    if (err == ERR_MEM) {
 800a336:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a33a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a33e:	d10f      	bne.n	800a360 <http_write+0x94>
      if ((altcp_sndbuf(pcb) == 0) ||
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800a346:	2b00      	cmp	r3, #0
 800a348:	d004      	beq.n	800a354 <http_write+0x88>
          (altcp_sndqueuelen(pcb) >= TCP_SND_QUEUELEN)) {
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      if ((altcp_sndbuf(pcb) == 0) ||
 800a350:	2b08      	cmp	r3, #8
 800a352:	d902      	bls.n	800a35a <http_write+0x8e>
        /* no need to try smaller sizes */
        len = 1;
 800a354:	2301      	movs	r3, #1
 800a356:	82fb      	strh	r3, [r7, #22]
 800a358:	e002      	b.n	800a360 <http_write+0x94>
      } else {
        len /= 2;
 800a35a:	8afb      	ldrh	r3, [r7, #22]
 800a35c:	085b      	lsrs	r3, r3, #1
 800a35e:	82fb      	strh	r3, [r7, #22]
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE,
                  ("Send failed, trying less (%d bytes)\n", len));
    }
  } while ((err == ERR_MEM) && (len > 1));
 800a360:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a364:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a368:	d102      	bne.n	800a370 <http_write+0xa4>
 800a36a:	8afb      	ldrh	r3, [r7, #22]
 800a36c:	2b01      	cmp	r3, #1
 800a36e:	d8da      	bhi.n	800a326 <http_write+0x5a>

  if (err == ERR_OK) {
 800a370:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a374:	2b00      	cmp	r3, #0
 800a376:	d103      	bne.n	800a380 <http_write+0xb4>
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Sent %d bytes\n", len));
    *length = len;
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	8afa      	ldrh	r2, [r7, #22]
 800a37c:	801a      	strh	r2, [r3, #0]
 800a37e:	e002      	b.n	800a386 <http_write+0xba>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Send failed with err %d (\"%s\")\n", err, lwip_strerr(err)));
    *length = 0;
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	2200      	movs	r2, #0
 800a384:	801a      	strh	r2, [r3, #0]
     when all data has been enqueued but the connection stays open for the next
     request */
  altcp_nagle_enable(pcb);
#endif

  return err;
 800a386:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800a38a:	4618      	mov	r0, r3
 800a38c:	3718      	adds	r7, #24
 800a38e:	46bd      	mov	sp, r7
 800a390:	bd80      	pop	{r7, pc}
 800a392:	bf00      	nop
 800a394:	08019eb8 	.word	0x08019eb8
 800a398:	08019ef0 	.word	0x08019ef0
 800a39c:	08019f00 	.word	0x08019f00

0800a3a0 <http_close_or_abort_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_or_abort_conn(struct altcp_pcb *pcb, struct http_state *hs, u8_t abort_conn)
{
 800a3a0:	b580      	push	{r7, lr}
 800a3a2:	b086      	sub	sp, #24
 800a3a4:	af00      	add	r7, sp, #0
 800a3a6:	60f8      	str	r0, [r7, #12]
 800a3a8:	60b9      	str	r1, [r7, #8]
 800a3aa:	4613      	mov	r3, r2
 800a3ac:	71fb      	strb	r3, [r7, #7]
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_POST*/


  altcp_arg(pcb, NULL);
 800a3ae:	2100      	movs	r1, #0
 800a3b0:	68f8      	ldr	r0, [r7, #12]
 800a3b2:	f003 ffef 	bl	800e394 <tcp_arg>
  altcp_recv(pcb, NULL);
 800a3b6:	2100      	movs	r1, #0
 800a3b8:	68f8      	ldr	r0, [r7, #12]
 800a3ba:	f003 fffd 	bl	800e3b8 <tcp_recv>
  altcp_err(pcb, NULL);
 800a3be:	2100      	movs	r1, #0
 800a3c0:	68f8      	ldr	r0, [r7, #12]
 800a3c2:	f004 f83d 	bl	800e440 <tcp_err>
  altcp_poll(pcb, NULL, 0);
 800a3c6:	2200      	movs	r2, #0
 800a3c8:	2100      	movs	r1, #0
 800a3ca:	68f8      	ldr	r0, [r7, #12]
 800a3cc:	f004 f872 	bl	800e4b4 <tcp_poll>
  altcp_sent(pcb, NULL);
 800a3d0:	2100      	movs	r1, #0
 800a3d2:	68f8      	ldr	r0, [r7, #12]
 800a3d4:	f004 f812 	bl	800e3fc <tcp_sent>
  if (hs != NULL) {
 800a3d8:	68bb      	ldr	r3, [r7, #8]
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d002      	beq.n	800a3e4 <http_close_or_abort_conn+0x44>
    http_state_free(hs);
 800a3de:	68b8      	ldr	r0, [r7, #8]
 800a3e0:	f7ff ff62 	bl	800a2a8 <http_state_free>
  }

  if (abort_conn) {
 800a3e4:	79fb      	ldrb	r3, [r7, #7]
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d004      	beq.n	800a3f4 <http_close_or_abort_conn+0x54>
    altcp_abort(pcb);
 800a3ea:	68f8      	ldr	r0, [r7, #12]
 800a3ec:	f002 ff14 	bl	800d218 <tcp_abort>
    return ERR_OK;
 800a3f0:	2300      	movs	r3, #0
 800a3f2:	e00f      	b.n	800a414 <http_close_or_abort_conn+0x74>
  }
  err = altcp_close(pcb);
 800a3f4:	68f8      	ldr	r0, [r7, #12]
 800a3f6:	f002 fdc9 	bl	800cf8c <tcp_close>
 800a3fa:	4603      	mov	r3, r0
 800a3fc:	75fb      	strb	r3, [r7, #23]
  if (err != ERR_OK) {
 800a3fe:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a402:	2b00      	cmp	r3, #0
 800a404:	d004      	beq.n	800a410 <http_close_or_abort_conn+0x70>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Error %d closing %p\n", err, (void *)pcb));
    /* error closing, try again later in poll */
    altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 800a406:	2204      	movs	r2, #4
 800a408:	4904      	ldr	r1, [pc, #16]	; (800a41c <http_close_or_abort_conn+0x7c>)
 800a40a:	68f8      	ldr	r0, [r7, #12]
 800a40c:	f004 f852 	bl	800e4b4 <tcp_poll>
  }
  return err;
 800a410:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a414:	4618      	mov	r0, r3
 800a416:	3718      	adds	r7, #24
 800a418:	46bd      	mov	sp, r7
 800a41a:	bd80      	pop	{r7, pc}
 800a41c:	0800aae3 	.word	0x0800aae3

0800a420 <http_close_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_conn(struct altcp_pcb *pcb, struct http_state *hs)
{
 800a420:	b580      	push	{r7, lr}
 800a422:	b082      	sub	sp, #8
 800a424:	af00      	add	r7, sp, #0
 800a426:	6078      	str	r0, [r7, #4]
 800a428:	6039      	str	r1, [r7, #0]
  return http_close_or_abort_conn(pcb, hs, 0);
 800a42a:	2200      	movs	r2, #0
 800a42c:	6839      	ldr	r1, [r7, #0]
 800a42e:	6878      	ldr	r0, [r7, #4]
 800a430:	f7ff ffb6 	bl	800a3a0 <http_close_or_abort_conn>
 800a434:	4603      	mov	r3, r0
}
 800a436:	4618      	mov	r0, r3
 800a438:	3708      	adds	r7, #8
 800a43a:	46bd      	mov	sp, r7
 800a43c:	bd80      	pop	{r7, pc}

0800a43e <http_eof>:
/** End of file: either close the connection (Connection: close) or
 * close the file (Connection: keep-alive)
 */
static void
http_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 800a43e:	b580      	push	{r7, lr}
 800a440:	b082      	sub	sp, #8
 800a442:	af00      	add	r7, sp, #0
 800a444:	6078      	str	r0, [r7, #4]
 800a446:	6039      	str	r1, [r7, #0]
    /* ensure nagle doesn't interfere with sending all data as fast as possible: */
    altcp_nagle_disable(pcb);
  } else
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  {
    http_close_conn(pcb, hs);
 800a448:	6839      	ldr	r1, [r7, #0]
 800a44a:	6878      	ldr	r0, [r7, #4]
 800a44c:	f7ff ffe8 	bl	800a420 <http_close_conn>
  }
}
 800a450:	bf00      	nop
 800a452:	3708      	adds	r7, #8
 800a454:	46bd      	mov	sp, r7
 800a456:	bd80      	pop	{r7, pc}

0800a458 <http_check_eof>:
 * @returns: 0 if the file is finished or no data has been read
 *           1 if the file is not finished and data has been read
 */
static u8_t
http_check_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 800a458:	b580      	push	{r7, lr}
 800a45a:	b084      	sub	sp, #16
 800a45c:	af00      	add	r7, sp, #0
 800a45e:	6078      	str	r0, [r7, #4]
 800a460:	6039      	str	r1, [r7, #0]
  int max_write_len;
#endif /* HTTPD_MAX_WRITE_LEN */
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ */

  /* Do we have a valid file handle? */
  if (hs->handle == NULL) {
 800a462:	683b      	ldr	r3, [r7, #0]
 800a464:	695b      	ldr	r3, [r3, #20]
 800a466:	2b00      	cmp	r3, #0
 800a468:	d105      	bne.n	800a476 <http_check_eof+0x1e>
    /* No - close the connection. */
    http_eof(pcb, hs);
 800a46a:	6839      	ldr	r1, [r7, #0]
 800a46c:	6878      	ldr	r0, [r7, #4]
 800a46e:	f7ff ffe6 	bl	800a43e <http_eof>
    return 0;
 800a472:	2300      	movs	r3, #0
 800a474:	e016      	b.n	800a4a4 <http_check_eof+0x4c>
  }
  bytes_left = fs_bytes_left(hs->handle);
 800a476:	683b      	ldr	r3, [r7, #0]
 800a478:	695b      	ldr	r3, [r3, #20]
 800a47a:	4618      	mov	r0, r3
 800a47c:	f7ff fec6 	bl	800a20c <fs_bytes_left>
 800a480:	60f8      	str	r0, [r7, #12]
  if (bytes_left <= 0) {
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	2b00      	cmp	r3, #0
 800a486:	dc05      	bgt.n	800a494 <http_check_eof+0x3c>
    /* We reached the end of the file so this request is done. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 800a488:	6839      	ldr	r1, [r7, #0]
 800a48a:	6878      	ldr	r0, [r7, #4]
 800a48c:	f7ff ffd7 	bl	800a43e <http_eof>
    return 0;
 800a490:	2300      	movs	r3, #0
 800a492:	e007      	b.n	800a4a4 <http_check_eof+0x4c>
    hs->ssi->parse_left = count;
    hs->ssi->parsed = hs->buf;
  }
#endif /* LWIP_HTTPD_SSI */
#else /* LWIP_HTTPD_DYNAMIC_FILE_READ */
  LWIP_ASSERT("SSI and DYNAMIC_HEADERS turned off but eof not reached", 0);
 800a494:	4b05      	ldr	r3, [pc, #20]	; (800a4ac <http_check_eof+0x54>)
 800a496:	f240 429d 	movw	r2, #1181	; 0x49d
 800a49a:	4905      	ldr	r1, [pc, #20]	; (800a4b0 <http_check_eof+0x58>)
 800a49c:	4805      	ldr	r0, [pc, #20]	; (800a4b4 <http_check_eof+0x5c>)
 800a49e:	f00d ff91 	bl	80183c4 <iprintf>
#endif /* LWIP_HTTPD_SSI || LWIP_HTTPD_DYNAMIC_HEADERS */
  return 1;
 800a4a2:	2301      	movs	r3, #1
}
 800a4a4:	4618      	mov	r0, r3
 800a4a6:	3710      	adds	r7, #16
 800a4a8:	46bd      	mov	sp, r7
 800a4aa:	bd80      	pop	{r7, pc}
 800a4ac:	08019eb8 	.word	0x08019eb8
 800a4b0:	08019f28 	.word	0x08019f28
 800a4b4:	08019f00 	.word	0x08019f00

0800a4b8 <http_send_data_nonssi>:
 * @returns: - 1: data has been written (so call tcp_ouput)
 *           - 0: no data has been written (no need to call tcp_output)
 */
static u8_t
http_send_data_nonssi(struct altcp_pcb *pcb, struct http_state *hs)
{
 800a4b8:	b580      	push	{r7, lr}
 800a4ba:	b084      	sub	sp, #16
 800a4bc:	af00      	add	r7, sp, #0
 800a4be:	6078      	str	r0, [r7, #4]
 800a4c0:	6039      	str	r1, [r7, #0]
  err_t err;
  u16_t len;
  u8_t data_to_send = 0;
 800a4c2:	2300      	movs	r3, #0
 800a4c4:	73fb      	strb	r3, [r7, #15]

  /* We are not processing an SHTML file so no tag checking is necessary.
   * Just send the data as we received it from the file. */
  len = (u16_t)LWIP_MIN(hs->left, 0xffff);
 800a4c6:	683b      	ldr	r3, [r7, #0]
 800a4c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4ca:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800a4ce:	4293      	cmp	r3, r2
 800a4d0:	d803      	bhi.n	800a4da <http_send_data_nonssi+0x22>
 800a4d2:	683b      	ldr	r3, [r7, #0]
 800a4d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4d6:	b29b      	uxth	r3, r3
 800a4d8:	e001      	b.n	800a4de <http_send_data_nonssi+0x26>
 800a4da:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a4de:	81bb      	strh	r3, [r7, #12]

  err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 800a4e0:	683b      	ldr	r3, [r7, #0]
 800a4e2:	6999      	ldr	r1, [r3, #24]
 800a4e4:	f107 020c 	add.w	r2, r7, #12
 800a4e8:	2300      	movs	r3, #0
 800a4ea:	6878      	ldr	r0, [r7, #4]
 800a4ec:	f7ff feee 	bl	800a2cc <http_write>
 800a4f0:	4603      	mov	r3, r0
 800a4f2:	73bb      	strb	r3, [r7, #14]
  if (err == ERR_OK) {
 800a4f4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d10d      	bne.n	800a518 <http_send_data_nonssi+0x60>
    data_to_send = 1;
 800a4fc:	2301      	movs	r3, #1
 800a4fe:	73fb      	strb	r3, [r7, #15]
    hs->file += len;
 800a500:	683b      	ldr	r3, [r7, #0]
 800a502:	699b      	ldr	r3, [r3, #24]
 800a504:	89ba      	ldrh	r2, [r7, #12]
 800a506:	441a      	add	r2, r3
 800a508:	683b      	ldr	r3, [r7, #0]
 800a50a:	619a      	str	r2, [r3, #24]
    hs->left -= len;
 800a50c:	683b      	ldr	r3, [r7, #0]
 800a50e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a510:	89ba      	ldrh	r2, [r7, #12]
 800a512:	1a9a      	subs	r2, r3, r2
 800a514:	683b      	ldr	r3, [r7, #0]
 800a516:	625a      	str	r2, [r3, #36]	; 0x24
  }

  return data_to_send;
 800a518:	7bfb      	ldrb	r3, [r7, #15]
}
 800a51a:	4618      	mov	r0, r3
 800a51c:	3710      	adds	r7, #16
 800a51e:	46bd      	mov	sp, r7
 800a520:	bd80      	pop	{r7, pc}

0800a522 <http_send>:
 * @param pcb the pcb to send data
 * @param hs connection state
 */
static u8_t
http_send(struct altcp_pcb *pcb, struct http_state *hs)
{
 800a522:	b580      	push	{r7, lr}
 800a524:	b084      	sub	sp, #16
 800a526:	af00      	add	r7, sp, #0
 800a528:	6078      	str	r0, [r7, #4]
 800a52a:	6039      	str	r1, [r7, #0]
  u8_t data_to_send = HTTP_NO_DATA_TO_SEND;
 800a52c:	2300      	movs	r3, #0
 800a52e:	73fb      	strb	r3, [r7, #15]
    return 0;
  }
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */

  /* If we were passed a NULL state structure pointer, ignore the call. */
  if (hs == NULL) {
 800a530:	683b      	ldr	r3, [r7, #0]
 800a532:	2b00      	cmp	r3, #0
 800a534:	d101      	bne.n	800a53a <http_send+0x18>
    return 0;
 800a536:	2300      	movs	r3, #0
 800a538:	e025      	b.n	800a586 <http_send+0x64>
  }
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */

  /* Have we run out of file data to send? If so, we need to read the next
   * block from the file. */
  if (hs->left == 0) {
 800a53a:	683b      	ldr	r3, [r7, #0]
 800a53c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d108      	bne.n	800a554 <http_send+0x32>
    if (!http_check_eof(pcb, hs)) {
 800a542:	6839      	ldr	r1, [r7, #0]
 800a544:	6878      	ldr	r0, [r7, #4]
 800a546:	f7ff ff87 	bl	800a458 <http_check_eof>
 800a54a:	4603      	mov	r3, r0
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d101      	bne.n	800a554 <http_send+0x32>
      return 0;
 800a550:	2300      	movs	r3, #0
 800a552:	e018      	b.n	800a586 <http_send+0x64>
  if (hs->ssi) {
    data_to_send = http_send_data_ssi(pcb, hs);
  } else
#endif /* LWIP_HTTPD_SSI */
  {
    data_to_send = http_send_data_nonssi(pcb, hs);
 800a554:	6839      	ldr	r1, [r7, #0]
 800a556:	6878      	ldr	r0, [r7, #4]
 800a558:	f7ff ffae 	bl	800a4b8 <http_send_data_nonssi>
 800a55c:	4603      	mov	r3, r0
 800a55e:	73fb      	strb	r3, [r7, #15]
  }

  if ((hs->left == 0) && (fs_bytes_left(hs->handle) <= 0)) {
 800a560:	683b      	ldr	r3, [r7, #0]
 800a562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a564:	2b00      	cmp	r3, #0
 800a566:	d10d      	bne.n	800a584 <http_send+0x62>
 800a568:	683b      	ldr	r3, [r7, #0]
 800a56a:	695b      	ldr	r3, [r3, #20]
 800a56c:	4618      	mov	r0, r3
 800a56e:	f7ff fe4d 	bl	800a20c <fs_bytes_left>
 800a572:	4603      	mov	r3, r0
 800a574:	2b00      	cmp	r3, #0
 800a576:	dc05      	bgt.n	800a584 <http_send+0x62>
    /* We reached the end of the file so this request is done.
     * This adds the FIN flag right into the last data segment. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 800a578:	6839      	ldr	r1, [r7, #0]
 800a57a:	6878      	ldr	r0, [r7, #4]
 800a57c:	f7ff ff5f 	bl	800a43e <http_eof>
    return 0;
 800a580:	2300      	movs	r3, #0
 800a582:	e000      	b.n	800a586 <http_send+0x64>
  }
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("send_data end.\n"));
  return data_to_send;
 800a584:	7bfb      	ldrb	r3, [r7, #15]
}
 800a586:	4618      	mov	r0, r3
 800a588:	3710      	adds	r7, #16
 800a58a:	46bd      	mov	sp, r7
 800a58c:	bd80      	pop	{r7, pc}
	...

0800a590 <http_get_404_file>:
 * @param uri pointer that receives the actual file name URI
 * @return file struct for the error page or NULL no matching file was found
 */
static struct fs_file *
http_get_404_file(struct http_state *hs, const char **uri)
{
 800a590:	b580      	push	{r7, lr}
 800a592:	b084      	sub	sp, #16
 800a594:	af00      	add	r7, sp, #0
 800a596:	6078      	str	r0, [r7, #4]
 800a598:	6039      	str	r1, [r7, #0]
  err_t err;

  *uri = "/404.html";
 800a59a:	683b      	ldr	r3, [r7, #0]
 800a59c:	4a1c      	ldr	r2, [pc, #112]	; (800a610 <http_get_404_file+0x80>)
 800a59e:	601a      	str	r2, [r3, #0]
  err = fs_open(&hs->file_handle, *uri);
 800a5a0:	687a      	ldr	r2, [r7, #4]
 800a5a2:	683b      	ldr	r3, [r7, #0]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	4619      	mov	r1, r3
 800a5a8:	4610      	mov	r0, r2
 800a5aa:	f7ff fde7 	bl	800a17c <fs_open>
 800a5ae:	4603      	mov	r3, r0
 800a5b0:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800a5b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d024      	beq.n	800a604 <http_get_404_file+0x74>
    /* 404.html doesn't exist. Try 404.htm instead. */
    *uri = "/404.htm";
 800a5ba:	683b      	ldr	r3, [r7, #0]
 800a5bc:	4a15      	ldr	r2, [pc, #84]	; (800a614 <http_get_404_file+0x84>)
 800a5be:	601a      	str	r2, [r3, #0]
    err = fs_open(&hs->file_handle, *uri);
 800a5c0:	687a      	ldr	r2, [r7, #4]
 800a5c2:	683b      	ldr	r3, [r7, #0]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	4619      	mov	r1, r3
 800a5c8:	4610      	mov	r0, r2
 800a5ca:	f7ff fdd7 	bl	800a17c <fs_open>
 800a5ce:	4603      	mov	r3, r0
 800a5d0:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800a5d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d014      	beq.n	800a604 <http_get_404_file+0x74>
      /* 404.htm doesn't exist either. Try 404.shtml instead. */
      *uri = "/404.shtml";
 800a5da:	683b      	ldr	r3, [r7, #0]
 800a5dc:	4a0e      	ldr	r2, [pc, #56]	; (800a618 <http_get_404_file+0x88>)
 800a5de:	601a      	str	r2, [r3, #0]
      err = fs_open(&hs->file_handle, *uri);
 800a5e0:	687a      	ldr	r2, [r7, #4]
 800a5e2:	683b      	ldr	r3, [r7, #0]
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	4619      	mov	r1, r3
 800a5e8:	4610      	mov	r0, r2
 800a5ea:	f7ff fdc7 	bl	800a17c <fs_open>
 800a5ee:	4603      	mov	r3, r0
 800a5f0:	73fb      	strb	r3, [r7, #15]
      if (err != ERR_OK) {
 800a5f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d004      	beq.n	800a604 <http_get_404_file+0x74>
        /* 404.htm doesn't exist either. Indicate to the caller that it should
         * send back a default 404 page.
         */
        *uri = NULL;
 800a5fa:	683b      	ldr	r3, [r7, #0]
 800a5fc:	2200      	movs	r2, #0
 800a5fe:	601a      	str	r2, [r3, #0]
        return NULL;
 800a600:	2300      	movs	r3, #0
 800a602:	e000      	b.n	800a606 <http_get_404_file+0x76>
      }
    }
  }

  return &hs->file_handle;
 800a604:	687b      	ldr	r3, [r7, #4]
}
 800a606:	4618      	mov	r0, r3
 800a608:	3710      	adds	r7, #16
 800a60a:	46bd      	mov	sp, r7
 800a60c:	bd80      	pop	{r7, pc}
 800a60e:	bf00      	nop
 800a610:	08019f60 	.word	0x08019f60
 800a614:	08019f6c 	.word	0x08019f6c
 800a618:	08019f78 	.word	0x08019f78

0800a61c <http_parse_request>:
 *         ERR_INPROGRESS if request was OK so far but not fully received
 *         another err_t otherwise
 */
static err_t
http_parse_request(struct pbuf *inp, struct http_state *hs, struct altcp_pcb *pcb)
{
 800a61c:	b580      	push	{r7, lr}
 800a61e:	b08e      	sub	sp, #56	; 0x38
 800a620:	af00      	add	r7, sp, #0
 800a622:	60f8      	str	r0, [r7, #12]
 800a624:	60b9      	str	r1, [r7, #8]
 800a626:	607a      	str	r2, [r7, #4]
  char *data;
  char *crlf;
  u16_t data_len;
  struct pbuf *p = inp;
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	627b      	str	r3, [r7, #36]	; 0x24
#if LWIP_HTTPD_SUPPORT_POST
  err_t err;
#endif /* LWIP_HTTPD_SUPPORT_POST */

  LWIP_UNUSED_ARG(pcb); /* only used for post */
  LWIP_ASSERT("p != NULL", p != NULL);
 800a62c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d106      	bne.n	800a640 <http_parse_request+0x24>
 800a632:	4b65      	ldr	r3, [pc, #404]	; (800a7c8 <http_parse_request+0x1ac>)
 800a634:	f240 72ae 	movw	r2, #1966	; 0x7ae
 800a638:	4964      	ldr	r1, [pc, #400]	; (800a7cc <http_parse_request+0x1b0>)
 800a63a:	4865      	ldr	r0, [pc, #404]	; (800a7d0 <http_parse_request+0x1b4>)
 800a63c:	f00d fec2 	bl	80183c4 <iprintf>
  LWIP_ASSERT("hs != NULL", hs != NULL);
 800a640:	68bb      	ldr	r3, [r7, #8]
 800a642:	2b00      	cmp	r3, #0
 800a644:	d106      	bne.n	800a654 <http_parse_request+0x38>
 800a646:	4b60      	ldr	r3, [pc, #384]	; (800a7c8 <http_parse_request+0x1ac>)
 800a648:	f240 72af 	movw	r2, #1967	; 0x7af
 800a64c:	4961      	ldr	r1, [pc, #388]	; (800a7d4 <http_parse_request+0x1b8>)
 800a64e:	4860      	ldr	r0, [pc, #384]	; (800a7d0 <http_parse_request+0x1b4>)
 800a650:	f00d feb8 	bl	80183c4 <iprintf>

  if ((hs->handle != NULL) || (hs->file != NULL)) {
 800a654:	68bb      	ldr	r3, [r7, #8]
 800a656:	695b      	ldr	r3, [r3, #20]
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d103      	bne.n	800a664 <http_parse_request+0x48>
 800a65c:	68bb      	ldr	r3, [r7, #8]
 800a65e:	699b      	ldr	r3, [r3, #24]
 800a660:	2b00      	cmp	r3, #0
 800a662:	d002      	beq.n	800a66a <http_parse_request+0x4e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Received data while sending a file\n"));
    /* already sending a file */
    /* @todo: abort? */
    return ERR_USE;
 800a664:	f06f 0307 	mvn.w	r3, #7
 800a668:	e0a9      	b.n	800a7be <http_parse_request+0x1a2>
  LWIP_DEBUGF(HTTPD_DEBUG, ("Received %"U16_F" bytes\n", p->tot_len));

  /* first check allowed characters in this pbuf? */

  /* enqueue the pbuf */
  if (hs->req == NULL) {
 800a66a:	68bb      	ldr	r3, [r7, #8]
 800a66c:	6a1b      	ldr	r3, [r3, #32]
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d103      	bne.n	800a67a <http_parse_request+0x5e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("First pbuf\n"));
    hs->req = p;
 800a672:	68bb      	ldr	r3, [r7, #8]
 800a674:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a676:	621a      	str	r2, [r3, #32]
 800a678:	e005      	b.n	800a686 <http_parse_request+0x6a>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG, ("pbuf enqueued\n"));
    pbuf_cat(hs->req, p);
 800a67a:	68bb      	ldr	r3, [r7, #8]
 800a67c:	6a1b      	ldr	r3, [r3, #32]
 800a67e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a680:	4618      	mov	r0, r3
 800a682:	f002 f897 	bl	800c7b4 <pbuf_cat>
  }
  /* increase pbuf ref counter as it is freed when we return but we want to
     keep it on the req list */
  pbuf_ref(p);
 800a686:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a688:	f002 f86c 	bl	800c764 <pbuf_ref>

  if (hs->req->next != NULL) {
 800a68c:	68bb      	ldr	r3, [r7, #8]
 800a68e:	6a1b      	ldr	r3, [r3, #32]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	2b00      	cmp	r3, #0
 800a694:	d012      	beq.n	800a6bc <http_parse_request+0xa0>
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 800a696:	68bb      	ldr	r3, [r7, #8]
 800a698:	6a1b      	ldr	r3, [r3, #32]
 800a69a:	891b      	ldrh	r3, [r3, #8]
 800a69c:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800a6a0:	4293      	cmp	r3, r2
 800a6a2:	bf28      	it	cs
 800a6a4:	4613      	movcs	r3, r2
 800a6a6:	867b      	strh	r3, [r7, #50]	; 0x32
    pbuf_copy_partial(hs->req, httpd_req_buf, data_len, 0);
 800a6a8:	68bb      	ldr	r3, [r7, #8]
 800a6aa:	6a18      	ldr	r0, [r3, #32]
 800a6ac:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800a6ae:	2300      	movs	r3, #0
 800a6b0:	4949      	ldr	r1, [pc, #292]	; (800a7d8 <http_parse_request+0x1bc>)
 800a6b2:	f002 f9b7 	bl	800ca24 <pbuf_copy_partial>
    data = httpd_req_buf;
 800a6b6:	4b48      	ldr	r3, [pc, #288]	; (800a7d8 <http_parse_request+0x1bc>)
 800a6b8:	637b      	str	r3, [r7, #52]	; 0x34
 800a6ba:	e005      	b.n	800a6c8 <http_parse_request+0xac>
  } else
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
  {
    data = (char *)p->payload;
 800a6bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6be:	685b      	ldr	r3, [r3, #4]
 800a6c0:	637b      	str	r3, [r7, #52]	; 0x34
    data_len = p->len;
 800a6c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6c4:	895b      	ldrh	r3, [r3, #10]
 800a6c6:	867b      	strh	r3, [r7, #50]	; 0x32
      LWIP_DEBUGF(HTTPD_DEBUG, ("Warning: incomplete header due to chained pbufs\n"));
    }
  }

  /* received enough data for minimal request? */
  if (data_len >= MIN_REQ_LEN) {
 800a6c8:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800a6ca:	2b06      	cmp	r3, #6
 800a6cc:	d962      	bls.n	800a794 <http_parse_request+0x178>
    /* wait for CRLF before parsing anything */
    crlf = lwip_strnstr(data, CRLF, data_len);
 800a6ce:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800a6d0:	461a      	mov	r2, r3
 800a6d2:	4942      	ldr	r1, [pc, #264]	; (800a7dc <http_parse_request+0x1c0>)
 800a6d4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800a6d6:	f000 fb99 	bl	800ae0c <lwip_strnstr>
 800a6da:	6238      	str	r0, [r7, #32]
    if (crlf != NULL) {
 800a6dc:	6a3b      	ldr	r3, [r7, #32]
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d058      	beq.n	800a794 <http_parse_request+0x178>
#if LWIP_HTTPD_SUPPORT_POST
      int is_post = 0;
#endif /* LWIP_HTTPD_SUPPORT_POST */
      int is_09 = 0;
 800a6e2:	2300      	movs	r3, #0
 800a6e4:	62fb      	str	r3, [r7, #44]	; 0x2c
      char *sp1, *sp2;
      u16_t left_len, uri_len;
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("CRLF received, parsing request\n"));
      /* parse method */
      if (!strncmp(data, "GET ", 4)) {
 800a6e6:	2204      	movs	r2, #4
 800a6e8:	493d      	ldr	r1, [pc, #244]	; (800a7e0 <http_parse_request+0x1c4>)
 800a6ea:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800a6ec:	f00d ff8a 	bl	8018604 <strncmp>
 800a6f0:	4603      	mov	r3, r0
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d116      	bne.n	800a724 <http_parse_request+0x108>
        sp1 = data + 3;
 800a6f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a6f8:	3303      	adds	r3, #3
 800a6fa:	61fb      	str	r3, [r7, #28]
        LWIP_DEBUGF(HTTPD_DEBUG, ("Unsupported request method (not implemented): \"%s\"\n",
                                  data));
        return http_find_error_file(hs, 501);
      }
      /* if we come here, method is OK, parse URI */
      left_len = (u16_t)(data_len - ((sp1 + 1) - data));
 800a6fc:	69fb      	ldr	r3, [r7, #28]
 800a6fe:	1c5a      	adds	r2, r3, #1
 800a700:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a702:	1ad3      	subs	r3, r2, r3
 800a704:	b29b      	uxth	r3, r3
 800a706:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800a708:	1ad3      	subs	r3, r2, r3
 800a70a:	837b      	strh	r3, [r7, #26]
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 800a70c:	69fb      	ldr	r3, [r7, #28]
 800a70e:	3301      	adds	r3, #1
 800a710:	8b7a      	ldrh	r2, [r7, #26]
 800a712:	4934      	ldr	r1, [pc, #208]	; (800a7e4 <http_parse_request+0x1c8>)
 800a714:	4618      	mov	r0, r3
 800a716:	f000 fb79 	bl	800ae0c <lwip_strnstr>
 800a71a:	62b8      	str	r0, [r7, #40]	; 0x28
#if LWIP_HTTPD_SUPPORT_V09
      if (sp2 == NULL) {
 800a71c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d111      	bne.n	800a746 <http_parse_request+0x12a>
 800a722:	e006      	b.n	800a732 <http_parse_request+0x116>
        data[4] = 0;
 800a724:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a726:	3304      	adds	r3, #4
 800a728:	2200      	movs	r2, #0
 800a72a:	701a      	strb	r2, [r3, #0]
        return http_find_error_file(hs, 501);
 800a72c:	f06f 030f 	mvn.w	r3, #15
 800a730:	e045      	b.n	800a7be <http_parse_request+0x1a2>
        /* HTTP 0.9: respond with correct protocol version */
        sp2 = lwip_strnstr(sp1 + 1, CRLF, left_len);
 800a732:	69fb      	ldr	r3, [r7, #28]
 800a734:	3301      	adds	r3, #1
 800a736:	8b7a      	ldrh	r2, [r7, #26]
 800a738:	4928      	ldr	r1, [pc, #160]	; (800a7dc <http_parse_request+0x1c0>)
 800a73a:	4618      	mov	r0, r3
 800a73c:	f000 fb66 	bl	800ae0c <lwip_strnstr>
 800a740:	62b8      	str	r0, [r7, #40]	; 0x28
        is_09 = 1;
 800a742:	2301      	movs	r3, #1
 800a744:	62fb      	str	r3, [r7, #44]	; 0x2c
          goto badrequest;
        }
#endif /* LWIP_HTTPD_SUPPORT_POST */
      }
#endif /* LWIP_HTTPD_SUPPORT_V09 */
      uri_len = (u16_t)(sp2 - (sp1 + 1));
 800a746:	69fb      	ldr	r3, [r7, #28]
 800a748:	3301      	adds	r3, #1
 800a74a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a74c:	1ad3      	subs	r3, r2, r3
 800a74e:	833b      	strh	r3, [r7, #24]
      if ((sp2 != 0) && (sp2 > sp1)) {
 800a750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a752:	2b00      	cmp	r3, #0
 800a754:	d01e      	beq.n	800a794 <http_parse_request+0x178>
 800a756:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a758:	69fb      	ldr	r3, [r7, #28]
 800a75a:	429a      	cmp	r2, r3
 800a75c:	d91a      	bls.n	800a794 <http_parse_request+0x178>
        /* wait for CRLFCRLF (indicating end of HTTP headers) before parsing anything */
        if (lwip_strnstr(data, CRLF CRLF, data_len) != NULL) {
 800a75e:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800a760:	461a      	mov	r2, r3
 800a762:	4921      	ldr	r1, [pc, #132]	; (800a7e8 <http_parse_request+0x1cc>)
 800a764:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800a766:	f000 fb51 	bl	800ae0c <lwip_strnstr>
 800a76a:	4603      	mov	r3, r0
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d011      	beq.n	800a794 <http_parse_request+0x178>
          char *uri = sp1 + 1;
 800a770:	69fb      	ldr	r3, [r7, #28]
 800a772:	3301      	adds	r3, #1
 800a774:	617b      	str	r3, [r7, #20]
          } else {
            hs->keepalive = 0;
          }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
          /* null-terminate the METHOD (pbuf is freed anyway wen returning) */
          *sp1 = 0;
 800a776:	69fb      	ldr	r3, [r7, #28]
 800a778:	2200      	movs	r2, #0
 800a77a:	701a      	strb	r2, [r3, #0]
          uri[uri_len] = 0;
 800a77c:	8b3b      	ldrh	r3, [r7, #24]
 800a77e:	697a      	ldr	r2, [r7, #20]
 800a780:	4413      	add	r3, r2
 800a782:	2200      	movs	r2, #0
 800a784:	701a      	strb	r2, [r3, #0]
            }
            return err;
          } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
          {
            return http_find_file(hs, uri, is_09);
 800a786:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a788:	6979      	ldr	r1, [r7, #20]
 800a78a:	68b8      	ldr	r0, [r7, #8]
 800a78c:	f000 f82e 	bl	800a7ec <http_find_file>
 800a790:	4603      	mov	r3, r0
 800a792:	e014      	b.n	800a7be <http_parse_request+0x1a2>
      }
    }
  }

#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  clen = pbuf_clen(hs->req);
 800a794:	68bb      	ldr	r3, [r7, #8]
 800a796:	6a1b      	ldr	r3, [r3, #32]
 800a798:	4618      	mov	r0, r3
 800a79a:	f001 ffcb 	bl	800c734 <pbuf_clen>
 800a79e:	4603      	mov	r3, r0
 800a7a0:	827b      	strh	r3, [r7, #18]
  if ((hs->req->tot_len <= LWIP_HTTPD_REQ_BUFSIZE) &&
 800a7a2:	68bb      	ldr	r3, [r7, #8]
 800a7a4:	6a1b      	ldr	r3, [r3, #32]
 800a7a6:	891b      	ldrh	r3, [r3, #8]
 800a7a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a7ac:	d205      	bcs.n	800a7ba <http_parse_request+0x19e>
 800a7ae:	8a7b      	ldrh	r3, [r7, #18]
 800a7b0:	2b05      	cmp	r3, #5
 800a7b2:	d802      	bhi.n	800a7ba <http_parse_request+0x19e>
      (clen <= LWIP_HTTPD_REQ_QUEUELEN)) {
    /* request not fully received (too short or CRLF is missing) */
    return ERR_INPROGRESS;
 800a7b4:	f06f 0304 	mvn.w	r3, #4
 800a7b8:	e001      	b.n	800a7be <http_parse_request+0x1a2>
#if LWIP_HTTPD_SUPPORT_POST
badrequest:
#endif /* LWIP_HTTPD_SUPPORT_POST */
    LWIP_DEBUGF(HTTPD_DEBUG, ("bad request\n"));
    /* could not parse request */
    return http_find_error_file(hs, 400);
 800a7ba:	f06f 030f 	mvn.w	r3, #15
  }
}
 800a7be:	4618      	mov	r0, r3
 800a7c0:	3738      	adds	r7, #56	; 0x38
 800a7c2:	46bd      	mov	sp, r7
 800a7c4:	bd80      	pop	{r7, pc}
 800a7c6:	bf00      	nop
 800a7c8:	08019eb8 	.word	0x08019eb8
 800a7cc:	08019f84 	.word	0x08019f84
 800a7d0:	08019f00 	.word	0x08019f00
 800a7d4:	08019f90 	.word	0x08019f90
 800a7d8:	2000d1c4 	.word	0x2000d1c4
 800a7dc:	08019f9c 	.word	0x08019f9c
 800a7e0:	08019fa0 	.word	0x08019fa0
 800a7e4:	08019fa8 	.word	0x08019fa8
 800a7e8:	08019fac 	.word	0x08019fac

0800a7ec <http_find_file>:
 * @return ERR_OK if file was found and hs has been initialized correctly
 *         another err_t otherwise
 */
static err_t
http_find_file(struct http_state *hs, const char *uri, int is_09)
{
 800a7ec:	b580      	push	{r7, lr}
 800a7ee:	b092      	sub	sp, #72	; 0x48
 800a7f0:	af02      	add	r7, sp, #8
 800a7f2:	60f8      	str	r0, [r7, #12]
 800a7f4:	60b9      	str	r1, [r7, #8]
 800a7f6:	607a      	str	r2, [r7, #4]
  size_t loop;
  struct fs_file *file = NULL;
 800a7f8:	2300      	movs	r3, #0
 800a7fa:	63bb      	str	r3, [r7, #56]	; 0x38
  char *params = NULL;
 800a7fc:	2300      	movs	r3, #0
 800a7fe:	637b      	str	r3, [r7, #52]	; 0x34
#endif /* LWIP_HTTPD_CGI */
#if !LWIP_HTTPD_SSI
  const
#endif /* !LWIP_HTTPD_SSI */
  /* By default, assume we will not be processing server-side-includes tags */
  u8_t tag_check = 0;
 800a800:	2300      	movs	r3, #0
 800a802:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Have we been asked for the default file (in root or a directory) ? */
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
  size_t uri_len = strlen(uri);
 800a806:	68bb      	ldr	r3, [r7, #8]
 800a808:	4618      	mov	r0, r3
 800a80a:	f7f5 fcfb 	bl	8000204 <strlen>
 800a80e:	62b8      	str	r0, [r7, #40]	; 0x28
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 800a810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a812:	2b00      	cmp	r3, #0
 800a814:	d06b      	beq.n	800a8ee <http_find_file+0x102>
 800a816:	68ba      	ldr	r2, [r7, #8]
 800a818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a81a:	3b01      	subs	r3, #1
 800a81c:	4413      	add	r3, r2
 800a81e:	781b      	ldrb	r3, [r3, #0]
 800a820:	2b2f      	cmp	r3, #47	; 0x2f
 800a822:	d164      	bne.n	800a8ee <http_find_file+0x102>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 800a824:	68bb      	ldr	r3, [r7, #8]
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 800a826:	4a53      	ldr	r2, [pc, #332]	; (800a974 <http_find_file+0x188>)
 800a828:	4293      	cmp	r3, r2
 800a82a:	d102      	bne.n	800a832 <http_find_file+0x46>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 800a82c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a82e:	2b01      	cmp	r3, #1
 800a830:	d15d      	bne.n	800a8ee <http_find_file+0x102>
    size_t copy_len = LWIP_MIN(sizeof(http_uri_buf) - 1, uri_len - 1);
 800a832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a834:	3b01      	subs	r3, #1
 800a836:	2b3f      	cmp	r3, #63	; 0x3f
 800a838:	bf28      	it	cs
 800a83a:	233f      	movcs	r3, #63	; 0x3f
 800a83c:	627b      	str	r3, [r7, #36]	; 0x24
    if (copy_len > 0) {
 800a83e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a840:	2b00      	cmp	r3, #0
 800a842:	d00a      	beq.n	800a85a <http_find_file+0x6e>
      MEMCPY(http_uri_buf, uri, copy_len);
 800a844:	68bb      	ldr	r3, [r7, #8]
 800a846:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a848:	4619      	mov	r1, r3
 800a84a:	484a      	ldr	r0, [pc, #296]	; (800a974 <http_find_file+0x188>)
 800a84c:	f00d fd0f 	bl	801826e <memcpy>
      http_uri_buf[copy_len] = 0;
 800a850:	4a48      	ldr	r2, [pc, #288]	; (800a974 <http_find_file+0x188>)
 800a852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a854:	4413      	add	r3, r2
 800a856:	2200      	movs	r2, #0
 800a858:	701a      	strb	r2, [r3, #0]
#else /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
  if ((uri[0] == '/') &&  (uri[1] == 0)) {
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
    /* Try each of the configured default filenames until we find one
       that exists. */
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 800a85a:	2300      	movs	r3, #0
 800a85c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a85e:	e043      	b.n	800a8e8 <http_find_file+0xfc>
      const char *file_name;
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
      if (copy_len > 0) {
 800a860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a862:	2b00      	cmp	r3, #0
 800a864:	d028      	beq.n	800a8b8 <http_find_file+0xcc>
        size_t len_left = sizeof(http_uri_buf) - copy_len - 1;
 800a866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a868:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 800a86c:	623b      	str	r3, [r7, #32]
        if (len_left > 0) {
 800a86e:	6a3b      	ldr	r3, [r7, #32]
 800a870:	2b00      	cmp	r3, #0
 800a872:	d01e      	beq.n	800a8b2 <http_find_file+0xc6>
          size_t name_len = strlen(httpd_default_filenames[loop].name);
 800a874:	4a40      	ldr	r2, [pc, #256]	; (800a978 <http_find_file+0x18c>)
 800a876:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a878:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a87c:	4618      	mov	r0, r3
 800a87e:	f7f5 fcc1 	bl	8000204 <strlen>
 800a882:	61f8      	str	r0, [r7, #28]
          size_t name_copy_len = LWIP_MIN(len_left, name_len);
 800a884:	69fa      	ldr	r2, [r7, #28]
 800a886:	6a3b      	ldr	r3, [r7, #32]
 800a888:	4293      	cmp	r3, r2
 800a88a:	bf28      	it	cs
 800a88c:	4613      	movcs	r3, r2
 800a88e:	61bb      	str	r3, [r7, #24]
          MEMCPY(&http_uri_buf[copy_len], httpd_default_filenames[loop].name, name_copy_len);
 800a890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a892:	4a38      	ldr	r2, [pc, #224]	; (800a974 <http_find_file+0x188>)
 800a894:	1898      	adds	r0, r3, r2
 800a896:	4a38      	ldr	r2, [pc, #224]	; (800a978 <http_find_file+0x18c>)
 800a898:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a89a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a89e:	69ba      	ldr	r2, [r7, #24]
 800a8a0:	4619      	mov	r1, r3
 800a8a2:	f00d fce4 	bl	801826e <memcpy>
          http_uri_buf[copy_len + name_copy_len] = 0;
 800a8a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a8a8:	69bb      	ldr	r3, [r7, #24]
 800a8aa:	4413      	add	r3, r2
 800a8ac:	4a31      	ldr	r2, [pc, #196]	; (800a974 <http_find_file+0x188>)
 800a8ae:	2100      	movs	r1, #0
 800a8b0:	54d1      	strb	r1, [r2, r3]
        }
        file_name = http_uri_buf;
 800a8b2:	4b30      	ldr	r3, [pc, #192]	; (800a974 <http_find_file+0x188>)
 800a8b4:	633b      	str	r3, [r7, #48]	; 0x30
 800a8b6:	e004      	b.n	800a8c2 <http_find_file+0xd6>
      } else
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
      {
        file_name = httpd_default_filenames[loop].name;
 800a8b8:	4a2f      	ldr	r2, [pc, #188]	; (800a978 <http_find_file+0x18c>)
 800a8ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a8bc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a8c0:	633b      	str	r3, [r7, #48]	; 0x30
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Looking for %s...\n", file_name));
      err = fs_open(&hs->file_handle, file_name);
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a8c6:	4618      	mov	r0, r3
 800a8c8:	f7ff fc58 	bl	800a17c <fs_open>
 800a8cc:	4603      	mov	r3, r0
 800a8ce:	75fb      	strb	r3, [r7, #23]
      if (err == ERR_OK) {
 800a8d0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d104      	bne.n	800a8e2 <http_find_file+0xf6>
        uri = file_name;
 800a8d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8da:	60bb      	str	r3, [r7, #8]
        file = &hs->file_handle;
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	63bb      	str	r3, [r7, #56]	; 0x38
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opened.\n"));
#if LWIP_HTTPD_SSI
        tag_check = httpd_default_filenames[loop].shtml;
#endif /* LWIP_HTTPD_SSI */
        break;
 800a8e0:	e005      	b.n	800a8ee <http_find_file+0x102>
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 800a8e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a8e4:	3301      	adds	r3, #1
 800a8e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a8e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a8ea:	2b04      	cmp	r3, #4
 800a8ec:	d9b8      	bls.n	800a860 <http_find_file+0x74>
      }
    }
  }
  if (file == NULL) {
 800a8ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d124      	bne.n	800a93e <http_find_file+0x152>
    /* No - we've been asked for a specific file. */
    /* First, isolate the base URI (without any parameters) */
    params = (char *)strchr(uri, '?');
 800a8f4:	68bb      	ldr	r3, [r7, #8]
 800a8f6:	213f      	movs	r1, #63	; 0x3f
 800a8f8:	4618      	mov	r0, r3
 800a8fa:	f00d fe76 	bl	80185ea <strchr>
 800a8fe:	6378      	str	r0, [r7, #52]	; 0x34
    if (params != NULL) {
 800a900:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a902:	2b00      	cmp	r3, #0
 800a904:	d005      	beq.n	800a912 <http_find_file+0x126>
      /* URI contains parameters. NULL-terminate the base URI */
      *params = '\0';
 800a906:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a908:	2200      	movs	r2, #0
 800a90a:	701a      	strb	r2, [r3, #0]
      params++;
 800a90c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a90e:	3301      	adds	r3, #1
 800a910:	637b      	str	r3, [r7, #52]	; 0x34
    }
#endif /* LWIP_HTTPD_CGI */

    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opening %s\n", uri));

    err = fs_open(&hs->file_handle, uri);
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	68ba      	ldr	r2, [r7, #8]
 800a916:	4611      	mov	r1, r2
 800a918:	4618      	mov	r0, r3
 800a91a:	f7ff fc2f 	bl	800a17c <fs_open>
 800a91e:	4603      	mov	r3, r0
 800a920:	75fb      	strb	r3, [r7, #23]
    if (err == ERR_OK) {
 800a922:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a926:	2b00      	cmp	r3, #0
 800a928:	d102      	bne.n	800a930 <http_find_file+0x144>
      file = &hs->file_handle;
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	63bb      	str	r3, [r7, #56]	; 0x38
 800a92e:	e006      	b.n	800a93e <http_find_file+0x152>
    } else {
      file = http_get_404_file(hs, &uri);
 800a930:	f107 0308 	add.w	r3, r7, #8
 800a934:	4619      	mov	r1, r3
 800a936:	68f8      	ldr	r0, [r7, #12]
 800a938:	f7ff fe2a 	bl	800a590 <http_get_404_file>
 800a93c:	63b8      	str	r0, [r7, #56]	; 0x38
#endif /* LWIP_HTTPD_SSI_BY_FILE_EXTENSION */
      }
    }
#endif /* LWIP_HTTPD_SSI */
  }
  if (file == NULL) {
 800a93e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a940:	2b00      	cmp	r3, #0
 800a942:	d106      	bne.n	800a952 <http_find_file+0x166>
    /* None of the default filenames exist so send back a 404 page */
    file = http_get_404_file(hs, &uri);
 800a944:	f107 0308 	add.w	r3, r7, #8
 800a948:	4619      	mov	r1, r3
 800a94a:	68f8      	ldr	r0, [r7, #12]
 800a94c:	f7ff fe20 	bl	800a590 <http_get_404_file>
 800a950:	63b8      	str	r0, [r7, #56]	; 0x38
  }
  return http_init_file(hs, file, is_09, uri, tag_check, params);
 800a952:	68ba      	ldr	r2, [r7, #8]
 800a954:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a956:	9301      	str	r3, [sp, #4]
 800a958:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a95c:	9300      	str	r3, [sp, #0]
 800a95e:	4613      	mov	r3, r2
 800a960:	687a      	ldr	r2, [r7, #4]
 800a962:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a964:	68f8      	ldr	r0, [r7, #12]
 800a966:	f000 f809 	bl	800a97c <http_init_file>
 800a96a:	4603      	mov	r3, r0
}
 800a96c:	4618      	mov	r0, r3
 800a96e:	3740      	adds	r7, #64	; 0x40
 800a970:	46bd      	mov	sp, r7
 800a972:	bd80      	pop	{r7, pc}
 800a974:	2000d5c4 	.word	0x2000d5c4
 800a978:	08026f18 	.word	0x08026f18

0800a97c <http_init_file>:
 *         another err_t otherwise
 */
static err_t
http_init_file(struct http_state *hs, struct fs_file *file, int is_09, const char *uri,
               u8_t tag_check, char *params)
{
 800a97c:	b580      	push	{r7, lr}
 800a97e:	b086      	sub	sp, #24
 800a980:	af00      	add	r7, sp, #0
 800a982:	60f8      	str	r0, [r7, #12]
 800a984:	60b9      	str	r1, [r7, #8]
 800a986:	607a      	str	r2, [r7, #4]
 800a988:	603b      	str	r3, [r7, #0]
#if !LWIP_HTTPD_SUPPORT_V09
  LWIP_UNUSED_ARG(is_09);
#endif
  if (file != NULL) {
 800a98a:	68bb      	ldr	r3, [r7, #8]
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d05c      	beq.n	800aa4a <http_init_file+0xce>
    /* file opened, initialise struct http_state */
#if !LWIP_HTTPD_DYNAMIC_FILE_READ
    /* If dynamic read is disabled, file data must be in one piece and available now */
    LWIP_ASSERT("file->data != NULL", file->data != NULL);
 800a990:	68bb      	ldr	r3, [r7, #8]
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	2b00      	cmp	r3, #0
 800a996:	d106      	bne.n	800a9a6 <http_init_file+0x2a>
 800a998:	4b35      	ldr	r3, [pc, #212]	; (800aa70 <http_init_file+0xf4>)
 800a99a:	f640 120b 	movw	r2, #2315	; 0x90b
 800a99e:	4935      	ldr	r1, [pc, #212]	; (800aa74 <http_init_file+0xf8>)
 800a9a0:	4835      	ldr	r0, [pc, #212]	; (800aa78 <http_init_file+0xfc>)
 800a9a2:	f00d fd0f 	bl	80183c4 <iprintf>
      }
    }
#else /* LWIP_HTTPD_SSI */
    LWIP_UNUSED_ARG(tag_check);
#endif /* LWIP_HTTPD_SSI */
    hs->handle = file;
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	68ba      	ldr	r2, [r7, #8]
 800a9aa:	615a      	str	r2, [r3, #20]
                       );
    }
#else /* LWIP_HTTPD_CGI_SSI */
    LWIP_UNUSED_ARG(params);
#endif /* LWIP_HTTPD_CGI_SSI */
    hs->file = file->data;
 800a9ac:	68bb      	ldr	r3, [r7, #8]
 800a9ae:	681a      	ldr	r2, [r3, #0]
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	619a      	str	r2, [r3, #24]
    LWIP_ASSERT("File length must be positive!", (file->len >= 0));
 800a9b4:	68bb      	ldr	r3, [r7, #8]
 800a9b6:	685b      	ldr	r3, [r3, #4]
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	da06      	bge.n	800a9ca <http_init_file+0x4e>
 800a9bc:	4b2c      	ldr	r3, [pc, #176]	; (800aa70 <http_init_file+0xf4>)
 800a9be:	f640 1234 	movw	r2, #2356	; 0x934
 800a9c2:	492e      	ldr	r1, [pc, #184]	; (800aa7c <http_init_file+0x100>)
 800a9c4:	482c      	ldr	r0, [pc, #176]	; (800aa78 <http_init_file+0xfc>)
 800a9c6:	f00d fcfd 	bl	80183c4 <iprintf>
      /* custom file, need to read data first (via fs_read_custom) */
      hs->left = 0;
    } else
#endif /* LWIP_HTTPD_CUSTOM_FILES */
    {
      hs->left = (u32_t)file->len;
 800a9ca:	68bb      	ldr	r3, [r7, #8]
 800a9cc:	685b      	ldr	r3, [r3, #4]
 800a9ce:	461a      	mov	r2, r3
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	625a      	str	r2, [r3, #36]	; 0x24
    }
    hs->retries = 0;
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	2200      	movs	r2, #0
 800a9d8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
#if LWIP_HTTPD_TIMING
    hs->time_started = sys_now();
#endif /* LWIP_HTTPD_TIMING */
#if !LWIP_HTTPD_DYNAMIC_HEADERS
    LWIP_ASSERT("HTTP headers not included in file system",
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	695b      	ldr	r3, [r3, #20]
 800a9e0:	7c1b      	ldrb	r3, [r3, #16]
 800a9e2:	f003 0301 	and.w	r3, r3, #1
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d106      	bne.n	800a9f8 <http_init_file+0x7c>
 800a9ea:	4b21      	ldr	r3, [pc, #132]	; (800aa70 <http_init_file+0xf4>)
 800a9ec:	f640 1243 	movw	r2, #2371	; 0x943
 800a9f0:	4923      	ldr	r1, [pc, #140]	; (800aa80 <http_init_file+0x104>)
 800a9f2:	4821      	ldr	r0, [pc, #132]	; (800aa78 <http_init_file+0xfc>)
 800a9f4:	f00d fce6 	bl	80183c4 <iprintf>
                (hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0);
#endif /* !LWIP_HTTPD_DYNAMIC_HEADERS */
#if LWIP_HTTPD_SUPPORT_V09
    if (is_09 && ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0)) {
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d032      	beq.n	800aa64 <http_init_file+0xe8>
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	695b      	ldr	r3, [r3, #20]
 800aa02:	7c1b      	ldrb	r3, [r3, #16]
 800aa04:	f003 0301 	and.w	r3, r3, #1
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d02b      	beq.n	800aa64 <http_init_file+0xe8>
      /* HTTP/0.9 responses are sent without HTTP header,
         search for the end of the header. */
      char *file_start = lwip_strnstr(hs->file, CRLF CRLF, hs->left);
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	6998      	ldr	r0, [r3, #24]
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa14:	461a      	mov	r2, r3
 800aa16:	491b      	ldr	r1, [pc, #108]	; (800aa84 <http_init_file+0x108>)
 800aa18:	f000 f9f8 	bl	800ae0c <lwip_strnstr>
 800aa1c:	6178      	str	r0, [r7, #20]
      if (file_start != NULL) {
 800aa1e:	697b      	ldr	r3, [r7, #20]
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d01f      	beq.n	800aa64 <http_init_file+0xe8>
        int diff = file_start + 4 - hs->file;
 800aa24:	697b      	ldr	r3, [r7, #20]
 800aa26:	1d1a      	adds	r2, r3, #4
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	699b      	ldr	r3, [r3, #24]
 800aa2c:	1ad3      	subs	r3, r2, r3
 800aa2e:	613b      	str	r3, [r7, #16]
        hs->file += diff;
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	699a      	ldr	r2, [r3, #24]
 800aa34:	693b      	ldr	r3, [r7, #16]
 800aa36:	441a      	add	r2, r3
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	619a      	str	r2, [r3, #24]
        hs->left -= (u32_t)diff;
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800aa40:	693b      	ldr	r3, [r7, #16]
 800aa42:	1ad2      	subs	r2, r2, r3
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	625a      	str	r2, [r3, #36]	; 0x24
 800aa48:	e00c      	b.n	800aa64 <http_init_file+0xe8>
      }
    }
#endif /* LWIP_HTTPD_SUPPORT_V09*/
  } else {
    hs->handle = NULL;
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	2200      	movs	r2, #0
 800aa4e:	615a      	str	r2, [r3, #20]
    hs->file = NULL;
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	2200      	movs	r2, #0
 800aa54:	619a      	str	r2, [r3, #24]
    hs->left = 0;
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	2200      	movs	r2, #0
 800aa5a:	625a      	str	r2, [r3, #36]	; 0x24
    hs->retries = 0;
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	2200      	movs	r2, #0
 800aa60:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        hs->keepalive = 0;
      }
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  return ERR_OK;
 800aa64:	2300      	movs	r3, #0
}
 800aa66:	4618      	mov	r0, r3
 800aa68:	3718      	adds	r7, #24
 800aa6a:	46bd      	mov	sp, r7
 800aa6c:	bd80      	pop	{r7, pc}
 800aa6e:	bf00      	nop
 800aa70:	08019eb8 	.word	0x08019eb8
 800aa74:	08019fb4 	.word	0x08019fb4
 800aa78:	08019f00 	.word	0x08019f00
 800aa7c:	08019fc8 	.word	0x08019fc8
 800aa80:	08019fe8 	.word	0x08019fe8
 800aa84:	08019fac 	.word	0x08019fac

0800aa88 <http_err>:
 * The pcb had an error and is already deallocated.
 * The argument might still be valid (if != NULL).
 */
static void
http_err(void *arg, err_t err)
{
 800aa88:	b580      	push	{r7, lr}
 800aa8a:	b084      	sub	sp, #16
 800aa8c:	af00      	add	r7, sp, #0
 800aa8e:	6078      	str	r0, [r7, #4]
 800aa90:	460b      	mov	r3, r1
 800aa92:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	60fb      	str	r3, [r7, #12]
  LWIP_UNUSED_ARG(err);

  LWIP_DEBUGF(HTTPD_DEBUG, ("http_err: %s", lwip_strerr(err)));

  if (hs != NULL) {
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d002      	beq.n	800aaa4 <http_err+0x1c>
    http_state_free(hs);
 800aa9e:	68f8      	ldr	r0, [r7, #12]
 800aaa0:	f7ff fc02 	bl	800a2a8 <http_state_free>
  }
}
 800aaa4:	bf00      	nop
 800aaa6:	3710      	adds	r7, #16
 800aaa8:	46bd      	mov	sp, r7
 800aaaa:	bd80      	pop	{r7, pc}

0800aaac <http_sent>:
 * Data has been sent and acknowledged by the remote host.
 * This means that more data can be sent.
 */
static err_t
http_sent(void *arg, struct altcp_pcb *pcb, u16_t len)
{
 800aaac:	b580      	push	{r7, lr}
 800aaae:	b086      	sub	sp, #24
 800aab0:	af00      	add	r7, sp, #0
 800aab2:	60f8      	str	r0, [r7, #12]
 800aab4:	60b9      	str	r1, [r7, #8]
 800aab6:	4613      	mov	r3, r2
 800aab8:	80fb      	strh	r3, [r7, #6]
  struct http_state *hs = (struct http_state *)arg;
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	617b      	str	r3, [r7, #20]

  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_sent %p\n", (void *)pcb));

  LWIP_UNUSED_ARG(len);

  if (hs == NULL) {
 800aabe:	697b      	ldr	r3, [r7, #20]
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d101      	bne.n	800aac8 <http_sent+0x1c>
    return ERR_OK;
 800aac4:	2300      	movs	r3, #0
 800aac6:	e008      	b.n	800aada <http_sent+0x2e>
  }

  hs->retries = 0;
 800aac8:	697b      	ldr	r3, [r7, #20]
 800aaca:	2200      	movs	r2, #0
 800aacc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  http_send(pcb, hs);
 800aad0:	6979      	ldr	r1, [r7, #20]
 800aad2:	68b8      	ldr	r0, [r7, #8]
 800aad4:	f7ff fd25 	bl	800a522 <http_send>

  return ERR_OK;
 800aad8:	2300      	movs	r3, #0
}
 800aada:	4618      	mov	r0, r3
 800aadc:	3718      	adds	r7, #24
 800aade:	46bd      	mov	sp, r7
 800aae0:	bd80      	pop	{r7, pc}

0800aae2 <http_poll>:
 *
 * This could be increased, but we don't want to waste resources for bad connections.
 */
static err_t
http_poll(void *arg, struct altcp_pcb *pcb)
{
 800aae2:	b580      	push	{r7, lr}
 800aae4:	b084      	sub	sp, #16
 800aae6:	af00      	add	r7, sp, #0
 800aae8:	6078      	str	r0, [r7, #4]
 800aaea:	6039      	str	r1, [r7, #0]
  struct http_state *hs = (struct http_state *)arg;
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: pcb=%p hs=%p pcb_state=%s\n",
              (void *)pcb, (void *)hs, tcp_debug_state_str(altcp_dbg_get_tcp_state(pcb))));

  if (hs == NULL) {
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d107      	bne.n	800ab06 <http_poll+0x24>
    err_t closed;
    /* arg is null, close. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: arg is NULL, close\n"));
    closed = http_close_conn(pcb, NULL);
 800aaf6:	2100      	movs	r1, #0
 800aaf8:	6838      	ldr	r0, [r7, #0]
 800aafa:	f7ff fc91 	bl	800a420 <http_close_conn>
 800aafe:	4603      	mov	r3, r0
 800ab00:	72fb      	strb	r3, [r7, #11]
    if (closed == ERR_MEM) {
      altcp_abort(pcb);
      return ERR_ABRT;
    }
#endif /* LWIP_HTTPD_ABORT_ON_CLOSE_MEM_ERROR */
    return ERR_OK;
 800ab02:	2300      	movs	r3, #0
 800ab04:	e021      	b.n	800ab4a <http_poll+0x68>
  } else {
    hs->retries++;
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ab0c:	3301      	adds	r3, #1
 800ab0e:	b2da      	uxtb	r2, r3
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    if (hs->retries == HTTPD_MAX_RETRIES) {
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ab1c:	2b04      	cmp	r3, #4
 800ab1e:	d105      	bne.n	800ab2c <http_poll+0x4a>
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: too many retries, close\n"));
      http_close_conn(pcb, hs);
 800ab20:	68f9      	ldr	r1, [r7, #12]
 800ab22:	6838      	ldr	r0, [r7, #0]
 800ab24:	f7ff fc7c 	bl	800a420 <http_close_conn>
      return ERR_OK;
 800ab28:	2300      	movs	r3, #0
 800ab2a:	e00e      	b.n	800ab4a <http_poll+0x68>
    }

    /* If this connection has a file open, try to send some more data. If
     * it has not yet received a GET request, don't do this since it will
     * cause the connection to close immediately. */
    if (hs->handle) {
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	695b      	ldr	r3, [r3, #20]
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d009      	beq.n	800ab48 <http_poll+0x66>
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: try to send more data\n"));
      if (http_send(pcb, hs)) {
 800ab34:	68f9      	ldr	r1, [r7, #12]
 800ab36:	6838      	ldr	r0, [r7, #0]
 800ab38:	f7ff fcf3 	bl	800a522 <http_send>
 800ab3c:	4603      	mov	r3, r0
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d002      	beq.n	800ab48 <http_poll+0x66>
        /* If we wrote anything to be sent, go ahead and send it now. */
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("tcp_output\n"));
        altcp_output(pcb);
 800ab42:	6838      	ldr	r0, [r7, #0]
 800ab44:	f007 f952 	bl	8011dec <tcp_output>
      }
    }
  }

  return ERR_OK;
 800ab48:	2300      	movs	r3, #0
}
 800ab4a:	4618      	mov	r0, r3
 800ab4c:	3710      	adds	r7, #16
 800ab4e:	46bd      	mov	sp, r7
 800ab50:	bd80      	pop	{r7, pc}
	...

0800ab54 <http_recv>:
 * Data has been received on this pcb.
 * For HTTP 1.0, this should normally only happen once (if the request fits in one packet).
 */
static err_t
http_recv(void *arg, struct altcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800ab54:	b580      	push	{r7, lr}
 800ab56:	b086      	sub	sp, #24
 800ab58:	af00      	add	r7, sp, #0
 800ab5a:	60f8      	str	r0, [r7, #12]
 800ab5c:	60b9      	str	r1, [r7, #8]
 800ab5e:	607a      	str	r2, [r7, #4]
 800ab60:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: pcb=%p pbuf=%p err=%s\n", (void *)pcb,
              (void *)p, lwip_strerr(err)));

  if ((err != ERR_OK) || (p == NULL) || (hs == NULL)) {
 800ab66:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d105      	bne.n	800ab7a <http_recv+0x26>
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d002      	beq.n	800ab7a <http_recv+0x26>
 800ab74:	697b      	ldr	r3, [r7, #20]
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d111      	bne.n	800ab9e <http_recv+0x4a>
    /* error or closed by other side? */
    if (p != NULL) {
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d008      	beq.n	800ab92 <http_recv+0x3e>
      /* Inform TCP that we have taken the data. */
      altcp_recved(pcb, p->tot_len);
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	891b      	ldrh	r3, [r3, #8]
 800ab84:	4619      	mov	r1, r3
 800ab86:	68b8      	ldr	r0, [r7, #8]
 800ab88:	f002 fd20 	bl	800d5cc <tcp_recved>
      pbuf_free(p);
 800ab8c:	6878      	ldr	r0, [r7, #4]
 800ab8e:	f001 fd43 	bl	800c618 <pbuf_free>
    }
    if (hs == NULL) {
      /* this should not happen, only to be robust */
      LWIP_DEBUGF(HTTPD_DEBUG, ("Error, http_recv: hs is NULL, close\n"));
    }
    http_close_conn(pcb, hs);
 800ab92:	6979      	ldr	r1, [r7, #20]
 800ab94:	68b8      	ldr	r0, [r7, #8]
 800ab96:	f7ff fc43 	bl	800a420 <http_close_conn>
    return ERR_OK;
 800ab9a:	2300      	movs	r3, #0
 800ab9c:	e055      	b.n	800ac4a <http_recv+0xf6>
    hs->unrecved_bytes += p->tot_len;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */
  {
    /* Inform TCP that we have taken the data. */
    altcp_recved(pcb, p->tot_len);
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	891b      	ldrh	r3, [r3, #8]
 800aba2:	4619      	mov	r1, r3
 800aba4:	68b8      	ldr	r0, [r7, #8]
 800aba6:	f002 fd11 	bl	800d5cc <tcp_recved>
    }
    return ERR_OK;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
  {
    if (hs->handle == NULL) {
 800abaa:	697b      	ldr	r3, [r7, #20]
 800abac:	695b      	ldr	r3, [r3, #20]
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d147      	bne.n	800ac42 <http_recv+0xee>
      err_t parsed = http_parse_request(p, hs, pcb);
 800abb2:	68ba      	ldr	r2, [r7, #8]
 800abb4:	6979      	ldr	r1, [r7, #20]
 800abb6:	6878      	ldr	r0, [r7, #4]
 800abb8:	f7ff fd30 	bl	800a61c <http_parse_request>
 800abbc:	4603      	mov	r3, r0
 800abbe:	74fb      	strb	r3, [r7, #19]
      LWIP_ASSERT("http_parse_request: unexpected return value", parsed == ERR_OK
 800abc0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d015      	beq.n	800abf4 <http_recv+0xa0>
 800abc8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800abcc:	f113 0f05 	cmn.w	r3, #5
 800abd0:	d010      	beq.n	800abf4 <http_recv+0xa0>
 800abd2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800abd6:	f113 0f10 	cmn.w	r3, #16
 800abda:	d00b      	beq.n	800abf4 <http_recv+0xa0>
 800abdc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800abe0:	f113 0f08 	cmn.w	r3, #8
 800abe4:	d006      	beq.n	800abf4 <http_recv+0xa0>
 800abe6:	4b1b      	ldr	r3, [pc, #108]	; (800ac54 <http_recv+0x100>)
 800abe8:	f640 2204 	movw	r2, #2564	; 0xa04
 800abec:	491a      	ldr	r1, [pc, #104]	; (800ac58 <http_recv+0x104>)
 800abee:	481b      	ldr	r0, [pc, #108]	; (800ac5c <http_recv+0x108>)
 800abf0:	f00d fbe8 	bl	80183c4 <iprintf>
                  || parsed == ERR_INPROGRESS || parsed == ERR_ARG || parsed == ERR_USE);
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
      if (parsed != ERR_INPROGRESS) {
 800abf4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800abf8:	f113 0f05 	cmn.w	r3, #5
 800abfc:	d00b      	beq.n	800ac16 <http_recv+0xc2>
        /* request fully parsed or error */
        if (hs->req != NULL) {
 800abfe:	697b      	ldr	r3, [r7, #20]
 800ac00:	6a1b      	ldr	r3, [r3, #32]
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d007      	beq.n	800ac16 <http_recv+0xc2>
          pbuf_free(hs->req);
 800ac06:	697b      	ldr	r3, [r7, #20]
 800ac08:	6a1b      	ldr	r3, [r3, #32]
 800ac0a:	4618      	mov	r0, r3
 800ac0c:	f001 fd04 	bl	800c618 <pbuf_free>
          hs->req = NULL;
 800ac10:	697b      	ldr	r3, [r7, #20]
 800ac12:	2200      	movs	r2, #0
 800ac14:	621a      	str	r2, [r3, #32]
        }
      }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
      pbuf_free(p);
 800ac16:	6878      	ldr	r0, [r7, #4]
 800ac18:	f001 fcfe 	bl	800c618 <pbuf_free>
      if (parsed == ERR_OK) {
 800ac1c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d104      	bne.n	800ac2e <http_recv+0xda>
#if LWIP_HTTPD_SUPPORT_POST
        if (hs->post_content_len_left == 0)
#endif /* LWIP_HTTPD_SUPPORT_POST */
        {
          LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: data %p len %"S32_F"\n", (const void *)hs->file, hs->left));
          http_send(pcb, hs);
 800ac24:	6979      	ldr	r1, [r7, #20]
 800ac26:	68b8      	ldr	r0, [r7, #8]
 800ac28:	f7ff fc7b 	bl	800a522 <http_send>
 800ac2c:	e00c      	b.n	800ac48 <http_recv+0xf4>
        }
      } else if (parsed == ERR_ARG) {
 800ac2e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ac32:	f113 0f10 	cmn.w	r3, #16
 800ac36:	d107      	bne.n	800ac48 <http_recv+0xf4>
        /* @todo: close on ERR_USE? */
        http_close_conn(pcb, hs);
 800ac38:	6979      	ldr	r1, [r7, #20]
 800ac3a:	68b8      	ldr	r0, [r7, #8]
 800ac3c:	f7ff fbf0 	bl	800a420 <http_close_conn>
 800ac40:	e002      	b.n	800ac48 <http_recv+0xf4>
      }
    } else {
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_recv: already sending data\n"));
      /* already sending but still receiving data, we might want to RST here? */
      pbuf_free(p);
 800ac42:	6878      	ldr	r0, [r7, #4]
 800ac44:	f001 fce8 	bl	800c618 <pbuf_free>
    }
  }
  return ERR_OK;
 800ac48:	2300      	movs	r3, #0
}
 800ac4a:	4618      	mov	r0, r3
 800ac4c:	3718      	adds	r7, #24
 800ac4e:	46bd      	mov	sp, r7
 800ac50:	bd80      	pop	{r7, pc}
 800ac52:	bf00      	nop
 800ac54:	08019eb8 	.word	0x08019eb8
 800ac58:	0801a014 	.word	0x0801a014
 800ac5c:	08019f00 	.word	0x08019f00

0800ac60 <http_accept>:
/**
 * A new incoming connection has been accepted.
 */
static err_t
http_accept(void *arg, struct altcp_pcb *pcb, err_t err)
{
 800ac60:	b580      	push	{r7, lr}
 800ac62:	b086      	sub	sp, #24
 800ac64:	af00      	add	r7, sp, #0
 800ac66:	60f8      	str	r0, [r7, #12]
 800ac68:	60b9      	str	r1, [r7, #8]
 800ac6a:	4613      	mov	r3, r2
 800ac6c:	71fb      	strb	r3, [r7, #7]
  struct http_state *hs;
  LWIP_UNUSED_ARG(err);
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept %p / %p\n", (void *)pcb, arg));

  if ((err != ERR_OK) || (pcb == NULL)) {
 800ac6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d102      	bne.n	800ac7c <http_accept+0x1c>
 800ac76:	68bb      	ldr	r3, [r7, #8]
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d102      	bne.n	800ac82 <http_accept+0x22>
    return ERR_VAL;
 800ac7c:	f06f 0305 	mvn.w	r3, #5
 800ac80:	e025      	b.n	800acce <http_accept+0x6e>
  }

  /* Set priority */
  altcp_setprio(pcb, HTTPD_TCP_PRIO);
 800ac82:	2101      	movs	r1, #1
 800ac84:	68b8      	ldr	r0, [r7, #8]
 800ac86:	f003 f985 	bl	800df94 <tcp_setprio>

  /* Allocate memory for the structure that holds the state of the
     connection - initialized by that function. */
  hs = http_state_alloc();
 800ac8a:	f7ff fadb 	bl	800a244 <http_state_alloc>
 800ac8e:	6178      	str	r0, [r7, #20]
  if (hs == NULL) {
 800ac90:	697b      	ldr	r3, [r7, #20]
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d102      	bne.n	800ac9c <http_accept+0x3c>
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept: Out of memory, RST\n"));
    return ERR_MEM;
 800ac96:	f04f 33ff 	mov.w	r3, #4294967295
 800ac9a:	e018      	b.n	800acce <http_accept+0x6e>
  }
  hs->pcb = pcb;
 800ac9c:	697b      	ldr	r3, [r7, #20]
 800ac9e:	68ba      	ldr	r2, [r7, #8]
 800aca0:	61da      	str	r2, [r3, #28]

  /* Tell TCP that this is the structure we wish to be passed for our
     callbacks. */
  altcp_arg(pcb, hs);
 800aca2:	6979      	ldr	r1, [r7, #20]
 800aca4:	68b8      	ldr	r0, [r7, #8]
 800aca6:	f003 fb75 	bl	800e394 <tcp_arg>

  /* Set up the various callback functions */
  altcp_recv(pcb, http_recv);
 800acaa:	490b      	ldr	r1, [pc, #44]	; (800acd8 <http_accept+0x78>)
 800acac:	68b8      	ldr	r0, [r7, #8]
 800acae:	f003 fb83 	bl	800e3b8 <tcp_recv>
  altcp_err(pcb, http_err);
 800acb2:	490a      	ldr	r1, [pc, #40]	; (800acdc <http_accept+0x7c>)
 800acb4:	68b8      	ldr	r0, [r7, #8]
 800acb6:	f003 fbc3 	bl	800e440 <tcp_err>
  altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 800acba:	2204      	movs	r2, #4
 800acbc:	4908      	ldr	r1, [pc, #32]	; (800ace0 <http_accept+0x80>)
 800acbe:	68b8      	ldr	r0, [r7, #8]
 800acc0:	f003 fbf8 	bl	800e4b4 <tcp_poll>
  altcp_sent(pcb, http_sent);
 800acc4:	4907      	ldr	r1, [pc, #28]	; (800ace4 <http_accept+0x84>)
 800acc6:	68b8      	ldr	r0, [r7, #8]
 800acc8:	f003 fb98 	bl	800e3fc <tcp_sent>

  return ERR_OK;
 800accc:	2300      	movs	r3, #0
}
 800acce:	4618      	mov	r0, r3
 800acd0:	3718      	adds	r7, #24
 800acd2:	46bd      	mov	sp, r7
 800acd4:	bd80      	pop	{r7, pc}
 800acd6:	bf00      	nop
 800acd8:	0800ab55 	.word	0x0800ab55
 800acdc:	0800aa89 	.word	0x0800aa89
 800ace0:	0800aae3 	.word	0x0800aae3
 800ace4:	0800aaad 	.word	0x0800aaad

0800ace8 <httpd_init_pcb>:

static void
httpd_init_pcb(struct altcp_pcb *pcb, u16_t port)
{
 800ace8:	b580      	push	{r7, lr}
 800acea:	b084      	sub	sp, #16
 800acec:	af00      	add	r7, sp, #0
 800acee:	6078      	str	r0, [r7, #4]
 800acf0:	460b      	mov	r3, r1
 800acf2:	807b      	strh	r3, [r7, #2]
  err_t err;

  if (pcb) {
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d029      	beq.n	800ad4e <httpd_init_pcb+0x66>
    altcp_setprio(pcb, HTTPD_TCP_PRIO);
 800acfa:	2101      	movs	r1, #1
 800acfc:	6878      	ldr	r0, [r7, #4]
 800acfe:	f003 f949 	bl	800df94 <tcp_setprio>
    /* set SOF_REUSEADDR here to explicitly bind httpd to multiple interfaces */
    err = altcp_bind(pcb, IP_ANY_TYPE, port);
 800ad02:	887b      	ldrh	r3, [r7, #2]
 800ad04:	461a      	mov	r2, r3
 800ad06:	4914      	ldr	r1, [pc, #80]	; (800ad58 <httpd_init_pcb+0x70>)
 800ad08:	6878      	ldr	r0, [r7, #4]
 800ad0a:	f002 fa91 	bl	800d230 <tcp_bind>
 800ad0e:	4603      	mov	r3, r0
 800ad10:	73fb      	strb	r3, [r7, #15]
    LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
    LWIP_ASSERT("httpd_init: tcp_bind failed", err == ERR_OK);
 800ad12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d006      	beq.n	800ad28 <httpd_init_pcb+0x40>
 800ad1a:	4b10      	ldr	r3, [pc, #64]	; (800ad5c <httpd_init_pcb+0x74>)
 800ad1c:	f640 2257 	movw	r2, #2647	; 0xa57
 800ad20:	490f      	ldr	r1, [pc, #60]	; (800ad60 <httpd_init_pcb+0x78>)
 800ad22:	4810      	ldr	r0, [pc, #64]	; (800ad64 <httpd_init_pcb+0x7c>)
 800ad24:	f00d fb4e 	bl	80183c4 <iprintf>
    pcb = altcp_listen(pcb);
 800ad28:	21ff      	movs	r1, #255	; 0xff
 800ad2a:	6878      	ldr	r0, [r7, #4]
 800ad2c:	f002 fb38 	bl	800d3a0 <tcp_listen_with_backlog>
 800ad30:	6078      	str	r0, [r7, #4]
    LWIP_ASSERT("httpd_init: tcp_listen failed", pcb != NULL);
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d106      	bne.n	800ad46 <httpd_init_pcb+0x5e>
 800ad38:	4b08      	ldr	r3, [pc, #32]	; (800ad5c <httpd_init_pcb+0x74>)
 800ad3a:	f640 2259 	movw	r2, #2649	; 0xa59
 800ad3e:	490a      	ldr	r1, [pc, #40]	; (800ad68 <httpd_init_pcb+0x80>)
 800ad40:	4808      	ldr	r0, [pc, #32]	; (800ad64 <httpd_init_pcb+0x7c>)
 800ad42:	f00d fb3f 	bl	80183c4 <iprintf>
    altcp_accept(pcb, http_accept);
 800ad46:	4909      	ldr	r1, [pc, #36]	; (800ad6c <httpd_init_pcb+0x84>)
 800ad48:	6878      	ldr	r0, [r7, #4]
 800ad4a:	f003 fb9b 	bl	800e484 <tcp_accept>
  }
}
 800ad4e:	bf00      	nop
 800ad50:	3710      	adds	r7, #16
 800ad52:	46bd      	mov	sp, r7
 800ad54:	bd80      	pop	{r7, pc}
 800ad56:	bf00      	nop
 800ad58:	08027060 	.word	0x08027060
 800ad5c:	08019eb8 	.word	0x08019eb8
 800ad60:	0801a040 	.word	0x0801a040
 800ad64:	08019f00 	.word	0x08019f00
 800ad68:	0801a05c 	.word	0x0801a05c
 800ad6c:	0800ac61 	.word	0x0800ac61

0800ad70 <httpd_init>:
 * @ingroup httpd
 * Initialize the httpd: set up a listening PCB and bind it to the defined port
 */
void
httpd_init(void)
{
 800ad70:	b580      	push	{r7, lr}
 800ad72:	b082      	sub	sp, #8
 800ad74:	af00      	add	r7, sp, #0
#endif
  LWIP_DEBUGF(HTTPD_DEBUG, ("httpd_init\n"));

  /* LWIP_ASSERT_CORE_LOCKED(); is checked by tcp_new() */

  pcb = altcp_tcp_new_ip_type(IPADDR_TYPE_ANY);
 800ad76:	202e      	movs	r0, #46	; 0x2e
 800ad78:	f003 fafe 	bl	800e378 <tcp_new_ip_type>
 800ad7c:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("httpd_init: tcp_new failed", pcb != NULL);
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d106      	bne.n	800ad92 <httpd_init+0x22>
 800ad84:	4b07      	ldr	r3, [pc, #28]	; (800ada4 <httpd_init+0x34>)
 800ad86:	f640 2272 	movw	r2, #2674	; 0xa72
 800ad8a:	4907      	ldr	r1, [pc, #28]	; (800ada8 <httpd_init+0x38>)
 800ad8c:	4807      	ldr	r0, [pc, #28]	; (800adac <httpd_init+0x3c>)
 800ad8e:	f00d fb19 	bl	80183c4 <iprintf>
  httpd_init_pcb(pcb, HTTPD_SERVER_PORT);
 800ad92:	2150      	movs	r1, #80	; 0x50
 800ad94:	6878      	ldr	r0, [r7, #4]
 800ad96:	f7ff ffa7 	bl	800ace8 <httpd_init_pcb>
}
 800ad9a:	bf00      	nop
 800ad9c:	3708      	adds	r7, #8
 800ad9e:	46bd      	mov	sp, r7
 800ada0:	bd80      	pop	{r7, pc}
 800ada2:	bf00      	nop
 800ada4:	08019eb8 	.word	0x08019eb8
 800ada8:	0801a07c 	.word	0x0801a07c
 800adac:	08019f00 	.word	0x08019f00

0800adb0 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800adb0:	b480      	push	{r7}
 800adb2:	b083      	sub	sp, #12
 800adb4:	af00      	add	r7, sp, #0
 800adb6:	4603      	mov	r3, r0
 800adb8:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800adba:	88fb      	ldrh	r3, [r7, #6]
 800adbc:	021b      	lsls	r3, r3, #8
 800adbe:	b21a      	sxth	r2, r3
 800adc0:	88fb      	ldrh	r3, [r7, #6]
 800adc2:	0a1b      	lsrs	r3, r3, #8
 800adc4:	b29b      	uxth	r3, r3
 800adc6:	b21b      	sxth	r3, r3
 800adc8:	4313      	orrs	r3, r2
 800adca:	b21b      	sxth	r3, r3
 800adcc:	b29b      	uxth	r3, r3
}
 800adce:	4618      	mov	r0, r3
 800add0:	370c      	adds	r7, #12
 800add2:	46bd      	mov	sp, r7
 800add4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800add8:	4770      	bx	lr

0800adda <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800adda:	b480      	push	{r7}
 800addc:	b083      	sub	sp, #12
 800adde:	af00      	add	r7, sp, #0
 800ade0:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	061a      	lsls	r2, r3, #24
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	021b      	lsls	r3, r3, #8
 800adea:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800adee:	431a      	orrs	r2, r3
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	0a1b      	lsrs	r3, r3, #8
 800adf4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800adf8:	431a      	orrs	r2, r3
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	0e1b      	lsrs	r3, r3, #24
 800adfe:	4313      	orrs	r3, r2
}
 800ae00:	4618      	mov	r0, r3
 800ae02:	370c      	adds	r7, #12
 800ae04:	46bd      	mov	sp, r7
 800ae06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae0a:	4770      	bx	lr

0800ae0c <lwip_strnstr>:
 * lwIP default implementation for strnstr() non-standard function.
 * This can be \#defined to strnstr() depending on your platform port.
 */
char *
lwip_strnstr(const char *buffer, const char *token, size_t n)
{
 800ae0c:	b580      	push	{r7, lr}
 800ae0e:	b086      	sub	sp, #24
 800ae10:	af00      	add	r7, sp, #0
 800ae12:	60f8      	str	r0, [r7, #12]
 800ae14:	60b9      	str	r1, [r7, #8]
 800ae16:	607a      	str	r2, [r7, #4]
  const char *p;
  size_t tokenlen = strlen(token);
 800ae18:	68b8      	ldr	r0, [r7, #8]
 800ae1a:	f7f5 f9f3 	bl	8000204 <strlen>
 800ae1e:	6138      	str	r0, [r7, #16]
  if (tokenlen == 0) {
 800ae20:	693b      	ldr	r3, [r7, #16]
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d101      	bne.n	800ae2a <lwip_strnstr+0x1e>
    return LWIP_CONST_CAST(char *, buffer);
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	e022      	b.n	800ae70 <lwip_strnstr+0x64>
  }
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	617b      	str	r3, [r7, #20]
 800ae2e:	e012      	b.n	800ae56 <lwip_strnstr+0x4a>
    if ((*p == *token) && (strncmp(p, token, tokenlen) == 0)) {
 800ae30:	697b      	ldr	r3, [r7, #20]
 800ae32:	781a      	ldrb	r2, [r3, #0]
 800ae34:	68bb      	ldr	r3, [r7, #8]
 800ae36:	781b      	ldrb	r3, [r3, #0]
 800ae38:	429a      	cmp	r2, r3
 800ae3a:	d109      	bne.n	800ae50 <lwip_strnstr+0x44>
 800ae3c:	693a      	ldr	r2, [r7, #16]
 800ae3e:	68b9      	ldr	r1, [r7, #8]
 800ae40:	6978      	ldr	r0, [r7, #20]
 800ae42:	f00d fbdf 	bl	8018604 <strncmp>
 800ae46:	4603      	mov	r3, r0
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d101      	bne.n	800ae50 <lwip_strnstr+0x44>
      return LWIP_CONST_CAST(char *, p);
 800ae4c:	697b      	ldr	r3, [r7, #20]
 800ae4e:	e00f      	b.n	800ae70 <lwip_strnstr+0x64>
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 800ae50:	697b      	ldr	r3, [r7, #20]
 800ae52:	3301      	adds	r3, #1
 800ae54:	617b      	str	r3, [r7, #20]
 800ae56:	697b      	ldr	r3, [r7, #20]
 800ae58:	781b      	ldrb	r3, [r3, #0]
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d007      	beq.n	800ae6e <lwip_strnstr+0x62>
 800ae5e:	697a      	ldr	r2, [r7, #20]
 800ae60:	693b      	ldr	r3, [r7, #16]
 800ae62:	441a      	add	r2, r3
 800ae64:	68f9      	ldr	r1, [r7, #12]
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	440b      	add	r3, r1
 800ae6a:	429a      	cmp	r2, r3
 800ae6c:	d9e0      	bls.n	800ae30 <lwip_strnstr+0x24>
    }
  }
  return NULL;
 800ae6e:	2300      	movs	r3, #0
}
 800ae70:	4618      	mov	r0, r3
 800ae72:	3718      	adds	r7, #24
 800ae74:	46bd      	mov	sp, r7
 800ae76:	bd80      	pop	{r7, pc}

0800ae78 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800ae78:	b580      	push	{r7, lr}
 800ae7a:	b082      	sub	sp, #8
 800ae7c:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800ae7e:	2300      	movs	r3, #0
 800ae80:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800ae82:	f00d f83d 	bl	8017f00 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800ae86:	f000 f8d5 	bl	800b034 <mem_init>
  memp_init();
 800ae8a:	f000 fc31 	bl	800b6f0 <memp_init>
  pbuf_init();
  netif_init();
 800ae8e:	f000 fd3d 	bl	800b90c <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800ae92:	f008 f89b 	bl	8012fcc <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800ae96:	f001 fe69 	bl	800cb6c <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800ae9a:	f007 ffdd 	bl	8012e58 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800ae9e:	bf00      	nop
 800aea0:	3708      	adds	r7, #8
 800aea2:	46bd      	mov	sp, r7
 800aea4:	bd80      	pop	{r7, pc}
	...

0800aea8 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800aea8:	b480      	push	{r7}
 800aeaa:	b083      	sub	sp, #12
 800aeac:	af00      	add	r7, sp, #0
 800aeae:	4603      	mov	r3, r0
 800aeb0:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800aeb2:	4b05      	ldr	r3, [pc, #20]	; (800aec8 <ptr_to_mem+0x20>)
 800aeb4:	681a      	ldr	r2, [r3, #0]
 800aeb6:	88fb      	ldrh	r3, [r7, #6]
 800aeb8:	4413      	add	r3, r2
}
 800aeba:	4618      	mov	r0, r3
 800aebc:	370c      	adds	r7, #12
 800aebe:	46bd      	mov	sp, r7
 800aec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aec4:	4770      	bx	lr
 800aec6:	bf00      	nop
 800aec8:	2000dc70 	.word	0x2000dc70

0800aecc <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800aecc:	b480      	push	{r7}
 800aece:	b083      	sub	sp, #12
 800aed0:	af00      	add	r7, sp, #0
 800aed2:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800aed4:	4b05      	ldr	r3, [pc, #20]	; (800aeec <mem_to_ptr+0x20>)
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	687a      	ldr	r2, [r7, #4]
 800aeda:	1ad3      	subs	r3, r2, r3
 800aedc:	b29b      	uxth	r3, r3
}
 800aede:	4618      	mov	r0, r3
 800aee0:	370c      	adds	r7, #12
 800aee2:	46bd      	mov	sp, r7
 800aee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aee8:	4770      	bx	lr
 800aeea:	bf00      	nop
 800aeec:	2000dc70 	.word	0x2000dc70

0800aef0 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800aef0:	b590      	push	{r4, r7, lr}
 800aef2:	b085      	sub	sp, #20
 800aef4:	af00      	add	r7, sp, #0
 800aef6:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800aef8:	4b45      	ldr	r3, [pc, #276]	; (800b010 <plug_holes+0x120>)
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	687a      	ldr	r2, [r7, #4]
 800aefe:	429a      	cmp	r2, r3
 800af00:	d206      	bcs.n	800af10 <plug_holes+0x20>
 800af02:	4b44      	ldr	r3, [pc, #272]	; (800b014 <plug_holes+0x124>)
 800af04:	f240 12df 	movw	r2, #479	; 0x1df
 800af08:	4943      	ldr	r1, [pc, #268]	; (800b018 <plug_holes+0x128>)
 800af0a:	4844      	ldr	r0, [pc, #272]	; (800b01c <plug_holes+0x12c>)
 800af0c:	f00d fa5a 	bl	80183c4 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800af10:	4b43      	ldr	r3, [pc, #268]	; (800b020 <plug_holes+0x130>)
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	687a      	ldr	r2, [r7, #4]
 800af16:	429a      	cmp	r2, r3
 800af18:	d306      	bcc.n	800af28 <plug_holes+0x38>
 800af1a:	4b3e      	ldr	r3, [pc, #248]	; (800b014 <plug_holes+0x124>)
 800af1c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800af20:	4940      	ldr	r1, [pc, #256]	; (800b024 <plug_holes+0x134>)
 800af22:	483e      	ldr	r0, [pc, #248]	; (800b01c <plug_holes+0x12c>)
 800af24:	f00d fa4e 	bl	80183c4 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	791b      	ldrb	r3, [r3, #4]
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d006      	beq.n	800af3e <plug_holes+0x4e>
 800af30:	4b38      	ldr	r3, [pc, #224]	; (800b014 <plug_holes+0x124>)
 800af32:	f240 12e1 	movw	r2, #481	; 0x1e1
 800af36:	493c      	ldr	r1, [pc, #240]	; (800b028 <plug_holes+0x138>)
 800af38:	4838      	ldr	r0, [pc, #224]	; (800b01c <plug_holes+0x12c>)
 800af3a:	f00d fa43 	bl	80183c4 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	881b      	ldrh	r3, [r3, #0]
 800af42:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800af46:	d906      	bls.n	800af56 <plug_holes+0x66>
 800af48:	4b32      	ldr	r3, [pc, #200]	; (800b014 <plug_holes+0x124>)
 800af4a:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800af4e:	4937      	ldr	r1, [pc, #220]	; (800b02c <plug_holes+0x13c>)
 800af50:	4832      	ldr	r0, [pc, #200]	; (800b01c <plug_holes+0x12c>)
 800af52:	f00d fa37 	bl	80183c4 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	881b      	ldrh	r3, [r3, #0]
 800af5a:	4618      	mov	r0, r3
 800af5c:	f7ff ffa4 	bl	800aea8 <ptr_to_mem>
 800af60:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800af62:	687a      	ldr	r2, [r7, #4]
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	429a      	cmp	r2, r3
 800af68:	d024      	beq.n	800afb4 <plug_holes+0xc4>
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	791b      	ldrb	r3, [r3, #4]
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d120      	bne.n	800afb4 <plug_holes+0xc4>
 800af72:	4b2b      	ldr	r3, [pc, #172]	; (800b020 <plug_holes+0x130>)
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	68fa      	ldr	r2, [r7, #12]
 800af78:	429a      	cmp	r2, r3
 800af7a:	d01b      	beq.n	800afb4 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800af7c:	4b2c      	ldr	r3, [pc, #176]	; (800b030 <plug_holes+0x140>)
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	68fa      	ldr	r2, [r7, #12]
 800af82:	429a      	cmp	r2, r3
 800af84:	d102      	bne.n	800af8c <plug_holes+0x9c>
      lfree = mem;
 800af86:	4a2a      	ldr	r2, [pc, #168]	; (800b030 <plug_holes+0x140>)
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	881a      	ldrh	r2, [r3, #0]
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	881b      	ldrh	r3, [r3, #0]
 800af98:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800af9c:	d00a      	beq.n	800afb4 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	881b      	ldrh	r3, [r3, #0]
 800afa2:	4618      	mov	r0, r3
 800afa4:	f7ff ff80 	bl	800aea8 <ptr_to_mem>
 800afa8:	4604      	mov	r4, r0
 800afaa:	6878      	ldr	r0, [r7, #4]
 800afac:	f7ff ff8e 	bl	800aecc <mem_to_ptr>
 800afb0:	4603      	mov	r3, r0
 800afb2:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	885b      	ldrh	r3, [r3, #2]
 800afb8:	4618      	mov	r0, r3
 800afba:	f7ff ff75 	bl	800aea8 <ptr_to_mem>
 800afbe:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800afc0:	68ba      	ldr	r2, [r7, #8]
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	429a      	cmp	r2, r3
 800afc6:	d01f      	beq.n	800b008 <plug_holes+0x118>
 800afc8:	68bb      	ldr	r3, [r7, #8]
 800afca:	791b      	ldrb	r3, [r3, #4]
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d11b      	bne.n	800b008 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800afd0:	4b17      	ldr	r3, [pc, #92]	; (800b030 <plug_holes+0x140>)
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	687a      	ldr	r2, [r7, #4]
 800afd6:	429a      	cmp	r2, r3
 800afd8:	d102      	bne.n	800afe0 <plug_holes+0xf0>
      lfree = pmem;
 800afda:	4a15      	ldr	r2, [pc, #84]	; (800b030 <plug_holes+0x140>)
 800afdc:	68bb      	ldr	r3, [r7, #8]
 800afde:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	881a      	ldrh	r2, [r3, #0]
 800afe4:	68bb      	ldr	r3, [r7, #8]
 800afe6:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	881b      	ldrh	r3, [r3, #0]
 800afec:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800aff0:	d00a      	beq.n	800b008 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	881b      	ldrh	r3, [r3, #0]
 800aff6:	4618      	mov	r0, r3
 800aff8:	f7ff ff56 	bl	800aea8 <ptr_to_mem>
 800affc:	4604      	mov	r4, r0
 800affe:	68b8      	ldr	r0, [r7, #8]
 800b000:	f7ff ff64 	bl	800aecc <mem_to_ptr>
 800b004:	4603      	mov	r3, r0
 800b006:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800b008:	bf00      	nop
 800b00a:	3714      	adds	r7, #20
 800b00c:	46bd      	mov	sp, r7
 800b00e:	bd90      	pop	{r4, r7, pc}
 800b010:	2000dc70 	.word	0x2000dc70
 800b014:	0801a098 	.word	0x0801a098
 800b018:	0801a0c8 	.word	0x0801a0c8
 800b01c:	0801a0e0 	.word	0x0801a0e0
 800b020:	2000dc74 	.word	0x2000dc74
 800b024:	0801a108 	.word	0x0801a108
 800b028:	0801a124 	.word	0x0801a124
 800b02c:	0801a140 	.word	0x0801a140
 800b030:	2000dc7c 	.word	0x2000dc7c

0800b034 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800b034:	b580      	push	{r7, lr}
 800b036:	b082      	sub	sp, #8
 800b038:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800b03a:	4b1f      	ldr	r3, [pc, #124]	; (800b0b8 <mem_init+0x84>)
 800b03c:	3303      	adds	r3, #3
 800b03e:	f023 0303 	bic.w	r3, r3, #3
 800b042:	461a      	mov	r2, r3
 800b044:	4b1d      	ldr	r3, [pc, #116]	; (800b0bc <mem_init+0x88>)
 800b046:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800b048:	4b1c      	ldr	r3, [pc, #112]	; (800b0bc <mem_init+0x88>)
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800b054:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	2200      	movs	r2, #0
 800b05a:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	2200      	movs	r2, #0
 800b060:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800b062:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800b066:	f7ff ff1f 	bl	800aea8 <ptr_to_mem>
 800b06a:	4603      	mov	r3, r0
 800b06c:	4a14      	ldr	r2, [pc, #80]	; (800b0c0 <mem_init+0x8c>)
 800b06e:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800b070:	4b13      	ldr	r3, [pc, #76]	; (800b0c0 <mem_init+0x8c>)
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	2201      	movs	r2, #1
 800b076:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800b078:	4b11      	ldr	r3, [pc, #68]	; (800b0c0 <mem_init+0x8c>)
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800b080:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800b082:	4b0f      	ldr	r3, [pc, #60]	; (800b0c0 <mem_init+0x8c>)
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800b08a:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800b08c:	4b0b      	ldr	r3, [pc, #44]	; (800b0bc <mem_init+0x88>)
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	4a0c      	ldr	r2, [pc, #48]	; (800b0c4 <mem_init+0x90>)
 800b092:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800b094:	480c      	ldr	r0, [pc, #48]	; (800b0c8 <mem_init+0x94>)
 800b096:	f00c ff41 	bl	8017f1c <sys_mutex_new>
 800b09a:	4603      	mov	r3, r0
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d006      	beq.n	800b0ae <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800b0a0:	4b0a      	ldr	r3, [pc, #40]	; (800b0cc <mem_init+0x98>)
 800b0a2:	f240 221f 	movw	r2, #543	; 0x21f
 800b0a6:	490a      	ldr	r1, [pc, #40]	; (800b0d0 <mem_init+0x9c>)
 800b0a8:	480a      	ldr	r0, [pc, #40]	; (800b0d4 <mem_init+0xa0>)
 800b0aa:	f00d f98b 	bl	80183c4 <iprintf>
  }
}
 800b0ae:	bf00      	nop
 800b0b0:	3708      	adds	r7, #8
 800b0b2:	46bd      	mov	sp, r7
 800b0b4:	bd80      	pop	{r7, pc}
 800b0b6:	bf00      	nop
 800b0b8:	2000d61c 	.word	0x2000d61c
 800b0bc:	2000dc70 	.word	0x2000dc70
 800b0c0:	2000dc74 	.word	0x2000dc74
 800b0c4:	2000dc7c 	.word	0x2000dc7c
 800b0c8:	2000dc78 	.word	0x2000dc78
 800b0cc:	0801a098 	.word	0x0801a098
 800b0d0:	0801a16c 	.word	0x0801a16c
 800b0d4:	0801a0e0 	.word	0x0801a0e0

0800b0d8 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800b0d8:	b580      	push	{r7, lr}
 800b0da:	b086      	sub	sp, #24
 800b0dc:	af00      	add	r7, sp, #0
 800b0de:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800b0e0:	6878      	ldr	r0, [r7, #4]
 800b0e2:	f7ff fef3 	bl	800aecc <mem_to_ptr>
 800b0e6:	4603      	mov	r3, r0
 800b0e8:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	881b      	ldrh	r3, [r3, #0]
 800b0ee:	4618      	mov	r0, r3
 800b0f0:	f7ff feda 	bl	800aea8 <ptr_to_mem>
 800b0f4:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	885b      	ldrh	r3, [r3, #2]
 800b0fa:	4618      	mov	r0, r3
 800b0fc:	f7ff fed4 	bl	800aea8 <ptr_to_mem>
 800b100:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	881b      	ldrh	r3, [r3, #0]
 800b106:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b10a:	d818      	bhi.n	800b13e <mem_link_valid+0x66>
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	885b      	ldrh	r3, [r3, #2]
 800b110:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b114:	d813      	bhi.n	800b13e <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800b11a:	8afa      	ldrh	r2, [r7, #22]
 800b11c:	429a      	cmp	r2, r3
 800b11e:	d004      	beq.n	800b12a <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800b120:	68fb      	ldr	r3, [r7, #12]
 800b122:	881b      	ldrh	r3, [r3, #0]
 800b124:	8afa      	ldrh	r2, [r7, #22]
 800b126:	429a      	cmp	r2, r3
 800b128:	d109      	bne.n	800b13e <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800b12a:	4b08      	ldr	r3, [pc, #32]	; (800b14c <mem_link_valid+0x74>)
 800b12c:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800b12e:	693a      	ldr	r2, [r7, #16]
 800b130:	429a      	cmp	r2, r3
 800b132:	d006      	beq.n	800b142 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800b134:	693b      	ldr	r3, [r7, #16]
 800b136:	885b      	ldrh	r3, [r3, #2]
 800b138:	8afa      	ldrh	r2, [r7, #22]
 800b13a:	429a      	cmp	r2, r3
 800b13c:	d001      	beq.n	800b142 <mem_link_valid+0x6a>
    return 0;
 800b13e:	2300      	movs	r3, #0
 800b140:	e000      	b.n	800b144 <mem_link_valid+0x6c>
  }
  return 1;
 800b142:	2301      	movs	r3, #1
}
 800b144:	4618      	mov	r0, r3
 800b146:	3718      	adds	r7, #24
 800b148:	46bd      	mov	sp, r7
 800b14a:	bd80      	pop	{r7, pc}
 800b14c:	2000dc74 	.word	0x2000dc74

0800b150 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800b150:	b580      	push	{r7, lr}
 800b152:	b088      	sub	sp, #32
 800b154:	af00      	add	r7, sp, #0
 800b156:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d070      	beq.n	800b240 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	f003 0303 	and.w	r3, r3, #3
 800b164:	2b00      	cmp	r3, #0
 800b166:	d00d      	beq.n	800b184 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800b168:	4b37      	ldr	r3, [pc, #220]	; (800b248 <mem_free+0xf8>)
 800b16a:	f240 2273 	movw	r2, #627	; 0x273
 800b16e:	4937      	ldr	r1, [pc, #220]	; (800b24c <mem_free+0xfc>)
 800b170:	4837      	ldr	r0, [pc, #220]	; (800b250 <mem_free+0x100>)
 800b172:	f00d f927 	bl	80183c4 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800b176:	f00c ff2f 	bl	8017fd8 <sys_arch_protect>
 800b17a:	60f8      	str	r0, [r7, #12]
 800b17c:	68f8      	ldr	r0, [r7, #12]
 800b17e:	f00c ff39 	bl	8017ff4 <sys_arch_unprotect>
    return;
 800b182:	e05e      	b.n	800b242 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	3b08      	subs	r3, #8
 800b188:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800b18a:	4b32      	ldr	r3, [pc, #200]	; (800b254 <mem_free+0x104>)
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	69fa      	ldr	r2, [r7, #28]
 800b190:	429a      	cmp	r2, r3
 800b192:	d306      	bcc.n	800b1a2 <mem_free+0x52>
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	f103 020c 	add.w	r2, r3, #12
 800b19a:	4b2f      	ldr	r3, [pc, #188]	; (800b258 <mem_free+0x108>)
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	429a      	cmp	r2, r3
 800b1a0:	d90d      	bls.n	800b1be <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800b1a2:	4b29      	ldr	r3, [pc, #164]	; (800b248 <mem_free+0xf8>)
 800b1a4:	f240 227f 	movw	r2, #639	; 0x27f
 800b1a8:	492c      	ldr	r1, [pc, #176]	; (800b25c <mem_free+0x10c>)
 800b1aa:	4829      	ldr	r0, [pc, #164]	; (800b250 <mem_free+0x100>)
 800b1ac:	f00d f90a 	bl	80183c4 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800b1b0:	f00c ff12 	bl	8017fd8 <sys_arch_protect>
 800b1b4:	6138      	str	r0, [r7, #16]
 800b1b6:	6938      	ldr	r0, [r7, #16]
 800b1b8:	f00c ff1c 	bl	8017ff4 <sys_arch_unprotect>
    return;
 800b1bc:	e041      	b.n	800b242 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800b1be:	4828      	ldr	r0, [pc, #160]	; (800b260 <mem_free+0x110>)
 800b1c0:	f00c fec8 	bl	8017f54 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800b1c4:	69fb      	ldr	r3, [r7, #28]
 800b1c6:	791b      	ldrb	r3, [r3, #4]
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d110      	bne.n	800b1ee <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800b1cc:	4b1e      	ldr	r3, [pc, #120]	; (800b248 <mem_free+0xf8>)
 800b1ce:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800b1d2:	4924      	ldr	r1, [pc, #144]	; (800b264 <mem_free+0x114>)
 800b1d4:	481e      	ldr	r0, [pc, #120]	; (800b250 <mem_free+0x100>)
 800b1d6:	f00d f8f5 	bl	80183c4 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800b1da:	4821      	ldr	r0, [pc, #132]	; (800b260 <mem_free+0x110>)
 800b1dc:	f00c fec9 	bl	8017f72 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800b1e0:	f00c fefa 	bl	8017fd8 <sys_arch_protect>
 800b1e4:	6178      	str	r0, [r7, #20]
 800b1e6:	6978      	ldr	r0, [r7, #20]
 800b1e8:	f00c ff04 	bl	8017ff4 <sys_arch_unprotect>
    return;
 800b1ec:	e029      	b.n	800b242 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800b1ee:	69f8      	ldr	r0, [r7, #28]
 800b1f0:	f7ff ff72 	bl	800b0d8 <mem_link_valid>
 800b1f4:	4603      	mov	r3, r0
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d110      	bne.n	800b21c <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800b1fa:	4b13      	ldr	r3, [pc, #76]	; (800b248 <mem_free+0xf8>)
 800b1fc:	f240 2295 	movw	r2, #661	; 0x295
 800b200:	4919      	ldr	r1, [pc, #100]	; (800b268 <mem_free+0x118>)
 800b202:	4813      	ldr	r0, [pc, #76]	; (800b250 <mem_free+0x100>)
 800b204:	f00d f8de 	bl	80183c4 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800b208:	4815      	ldr	r0, [pc, #84]	; (800b260 <mem_free+0x110>)
 800b20a:	f00c feb2 	bl	8017f72 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800b20e:	f00c fee3 	bl	8017fd8 <sys_arch_protect>
 800b212:	61b8      	str	r0, [r7, #24]
 800b214:	69b8      	ldr	r0, [r7, #24]
 800b216:	f00c feed 	bl	8017ff4 <sys_arch_unprotect>
    return;
 800b21a:	e012      	b.n	800b242 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800b21c:	69fb      	ldr	r3, [r7, #28]
 800b21e:	2200      	movs	r2, #0
 800b220:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800b222:	4b12      	ldr	r3, [pc, #72]	; (800b26c <mem_free+0x11c>)
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	69fa      	ldr	r2, [r7, #28]
 800b228:	429a      	cmp	r2, r3
 800b22a:	d202      	bcs.n	800b232 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800b22c:	4a0f      	ldr	r2, [pc, #60]	; (800b26c <mem_free+0x11c>)
 800b22e:	69fb      	ldr	r3, [r7, #28]
 800b230:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800b232:	69f8      	ldr	r0, [r7, #28]
 800b234:	f7ff fe5c 	bl	800aef0 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800b238:	4809      	ldr	r0, [pc, #36]	; (800b260 <mem_free+0x110>)
 800b23a:	f00c fe9a 	bl	8017f72 <sys_mutex_unlock>
 800b23e:	e000      	b.n	800b242 <mem_free+0xf2>
    return;
 800b240:	bf00      	nop
}
 800b242:	3720      	adds	r7, #32
 800b244:	46bd      	mov	sp, r7
 800b246:	bd80      	pop	{r7, pc}
 800b248:	0801a098 	.word	0x0801a098
 800b24c:	0801a188 	.word	0x0801a188
 800b250:	0801a0e0 	.word	0x0801a0e0
 800b254:	2000dc70 	.word	0x2000dc70
 800b258:	2000dc74 	.word	0x2000dc74
 800b25c:	0801a1ac 	.word	0x0801a1ac
 800b260:	2000dc78 	.word	0x2000dc78
 800b264:	0801a1c8 	.word	0x0801a1c8
 800b268:	0801a1f0 	.word	0x0801a1f0
 800b26c:	2000dc7c 	.word	0x2000dc7c

0800b270 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800b270:	b580      	push	{r7, lr}
 800b272:	b088      	sub	sp, #32
 800b274:	af00      	add	r7, sp, #0
 800b276:	6078      	str	r0, [r7, #4]
 800b278:	460b      	mov	r3, r1
 800b27a:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800b27c:	887b      	ldrh	r3, [r7, #2]
 800b27e:	3303      	adds	r3, #3
 800b280:	b29b      	uxth	r3, r3
 800b282:	f023 0303 	bic.w	r3, r3, #3
 800b286:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800b288:	8bfb      	ldrh	r3, [r7, #30]
 800b28a:	2b0b      	cmp	r3, #11
 800b28c:	d801      	bhi.n	800b292 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800b28e:	230c      	movs	r3, #12
 800b290:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800b292:	8bfb      	ldrh	r3, [r7, #30]
 800b294:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b298:	d803      	bhi.n	800b2a2 <mem_trim+0x32>
 800b29a:	8bfa      	ldrh	r2, [r7, #30]
 800b29c:	887b      	ldrh	r3, [r7, #2]
 800b29e:	429a      	cmp	r2, r3
 800b2a0:	d201      	bcs.n	800b2a6 <mem_trim+0x36>
    return NULL;
 800b2a2:	2300      	movs	r3, #0
 800b2a4:	e0d8      	b.n	800b458 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800b2a6:	4b6e      	ldr	r3, [pc, #440]	; (800b460 <mem_trim+0x1f0>)
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	687a      	ldr	r2, [r7, #4]
 800b2ac:	429a      	cmp	r2, r3
 800b2ae:	d304      	bcc.n	800b2ba <mem_trim+0x4a>
 800b2b0:	4b6c      	ldr	r3, [pc, #432]	; (800b464 <mem_trim+0x1f4>)
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	687a      	ldr	r2, [r7, #4]
 800b2b6:	429a      	cmp	r2, r3
 800b2b8:	d306      	bcc.n	800b2c8 <mem_trim+0x58>
 800b2ba:	4b6b      	ldr	r3, [pc, #428]	; (800b468 <mem_trim+0x1f8>)
 800b2bc:	f240 22d1 	movw	r2, #721	; 0x2d1
 800b2c0:	496a      	ldr	r1, [pc, #424]	; (800b46c <mem_trim+0x1fc>)
 800b2c2:	486b      	ldr	r0, [pc, #428]	; (800b470 <mem_trim+0x200>)
 800b2c4:	f00d f87e 	bl	80183c4 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800b2c8:	4b65      	ldr	r3, [pc, #404]	; (800b460 <mem_trim+0x1f0>)
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	687a      	ldr	r2, [r7, #4]
 800b2ce:	429a      	cmp	r2, r3
 800b2d0:	d304      	bcc.n	800b2dc <mem_trim+0x6c>
 800b2d2:	4b64      	ldr	r3, [pc, #400]	; (800b464 <mem_trim+0x1f4>)
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	687a      	ldr	r2, [r7, #4]
 800b2d8:	429a      	cmp	r2, r3
 800b2da:	d307      	bcc.n	800b2ec <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800b2dc:	f00c fe7c 	bl	8017fd8 <sys_arch_protect>
 800b2e0:	60b8      	str	r0, [r7, #8]
 800b2e2:	68b8      	ldr	r0, [r7, #8]
 800b2e4:	f00c fe86 	bl	8017ff4 <sys_arch_unprotect>
    return rmem;
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	e0b5      	b.n	800b458 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	3b08      	subs	r3, #8
 800b2f0:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800b2f2:	69b8      	ldr	r0, [r7, #24]
 800b2f4:	f7ff fdea 	bl	800aecc <mem_to_ptr>
 800b2f8:	4603      	mov	r3, r0
 800b2fa:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800b2fc:	69bb      	ldr	r3, [r7, #24]
 800b2fe:	881a      	ldrh	r2, [r3, #0]
 800b300:	8afb      	ldrh	r3, [r7, #22]
 800b302:	1ad3      	subs	r3, r2, r3
 800b304:	b29b      	uxth	r3, r3
 800b306:	3b08      	subs	r3, #8
 800b308:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800b30a:	8bfa      	ldrh	r2, [r7, #30]
 800b30c:	8abb      	ldrh	r3, [r7, #20]
 800b30e:	429a      	cmp	r2, r3
 800b310:	d906      	bls.n	800b320 <mem_trim+0xb0>
 800b312:	4b55      	ldr	r3, [pc, #340]	; (800b468 <mem_trim+0x1f8>)
 800b314:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800b318:	4956      	ldr	r1, [pc, #344]	; (800b474 <mem_trim+0x204>)
 800b31a:	4855      	ldr	r0, [pc, #340]	; (800b470 <mem_trim+0x200>)
 800b31c:	f00d f852 	bl	80183c4 <iprintf>
  if (newsize > size) {
 800b320:	8bfa      	ldrh	r2, [r7, #30]
 800b322:	8abb      	ldrh	r3, [r7, #20]
 800b324:	429a      	cmp	r2, r3
 800b326:	d901      	bls.n	800b32c <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800b328:	2300      	movs	r3, #0
 800b32a:	e095      	b.n	800b458 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800b32c:	8bfa      	ldrh	r2, [r7, #30]
 800b32e:	8abb      	ldrh	r3, [r7, #20]
 800b330:	429a      	cmp	r2, r3
 800b332:	d101      	bne.n	800b338 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	e08f      	b.n	800b458 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800b338:	484f      	ldr	r0, [pc, #316]	; (800b478 <mem_trim+0x208>)
 800b33a:	f00c fe0b 	bl	8017f54 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800b33e:	69bb      	ldr	r3, [r7, #24]
 800b340:	881b      	ldrh	r3, [r3, #0]
 800b342:	4618      	mov	r0, r3
 800b344:	f7ff fdb0 	bl	800aea8 <ptr_to_mem>
 800b348:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800b34a:	693b      	ldr	r3, [r7, #16]
 800b34c:	791b      	ldrb	r3, [r3, #4]
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d13f      	bne.n	800b3d2 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800b352:	69bb      	ldr	r3, [r7, #24]
 800b354:	881b      	ldrh	r3, [r3, #0]
 800b356:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b35a:	d106      	bne.n	800b36a <mem_trim+0xfa>
 800b35c:	4b42      	ldr	r3, [pc, #264]	; (800b468 <mem_trim+0x1f8>)
 800b35e:	f240 22f5 	movw	r2, #757	; 0x2f5
 800b362:	4946      	ldr	r1, [pc, #280]	; (800b47c <mem_trim+0x20c>)
 800b364:	4842      	ldr	r0, [pc, #264]	; (800b470 <mem_trim+0x200>)
 800b366:	f00d f82d 	bl	80183c4 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800b36a:	693b      	ldr	r3, [r7, #16]
 800b36c:	881b      	ldrh	r3, [r3, #0]
 800b36e:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800b370:	8afa      	ldrh	r2, [r7, #22]
 800b372:	8bfb      	ldrh	r3, [r7, #30]
 800b374:	4413      	add	r3, r2
 800b376:	b29b      	uxth	r3, r3
 800b378:	3308      	adds	r3, #8
 800b37a:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800b37c:	4b40      	ldr	r3, [pc, #256]	; (800b480 <mem_trim+0x210>)
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	693a      	ldr	r2, [r7, #16]
 800b382:	429a      	cmp	r2, r3
 800b384:	d106      	bne.n	800b394 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800b386:	89fb      	ldrh	r3, [r7, #14]
 800b388:	4618      	mov	r0, r3
 800b38a:	f7ff fd8d 	bl	800aea8 <ptr_to_mem>
 800b38e:	4603      	mov	r3, r0
 800b390:	4a3b      	ldr	r2, [pc, #236]	; (800b480 <mem_trim+0x210>)
 800b392:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800b394:	89fb      	ldrh	r3, [r7, #14]
 800b396:	4618      	mov	r0, r3
 800b398:	f7ff fd86 	bl	800aea8 <ptr_to_mem>
 800b39c:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800b39e:	693b      	ldr	r3, [r7, #16]
 800b3a0:	2200      	movs	r2, #0
 800b3a2:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800b3a4:	693b      	ldr	r3, [r7, #16]
 800b3a6:	89ba      	ldrh	r2, [r7, #12]
 800b3a8:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800b3aa:	693b      	ldr	r3, [r7, #16]
 800b3ac:	8afa      	ldrh	r2, [r7, #22]
 800b3ae:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800b3b0:	69bb      	ldr	r3, [r7, #24]
 800b3b2:	89fa      	ldrh	r2, [r7, #14]
 800b3b4:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800b3b6:	693b      	ldr	r3, [r7, #16]
 800b3b8:	881b      	ldrh	r3, [r3, #0]
 800b3ba:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b3be:	d047      	beq.n	800b450 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800b3c0:	693b      	ldr	r3, [r7, #16]
 800b3c2:	881b      	ldrh	r3, [r3, #0]
 800b3c4:	4618      	mov	r0, r3
 800b3c6:	f7ff fd6f 	bl	800aea8 <ptr_to_mem>
 800b3ca:	4602      	mov	r2, r0
 800b3cc:	89fb      	ldrh	r3, [r7, #14]
 800b3ce:	8053      	strh	r3, [r2, #2]
 800b3d0:	e03e      	b.n	800b450 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800b3d2:	8bfb      	ldrh	r3, [r7, #30]
 800b3d4:	f103 0214 	add.w	r2, r3, #20
 800b3d8:	8abb      	ldrh	r3, [r7, #20]
 800b3da:	429a      	cmp	r2, r3
 800b3dc:	d838      	bhi.n	800b450 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800b3de:	8afa      	ldrh	r2, [r7, #22]
 800b3e0:	8bfb      	ldrh	r3, [r7, #30]
 800b3e2:	4413      	add	r3, r2
 800b3e4:	b29b      	uxth	r3, r3
 800b3e6:	3308      	adds	r3, #8
 800b3e8:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800b3ea:	69bb      	ldr	r3, [r7, #24]
 800b3ec:	881b      	ldrh	r3, [r3, #0]
 800b3ee:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b3f2:	d106      	bne.n	800b402 <mem_trim+0x192>
 800b3f4:	4b1c      	ldr	r3, [pc, #112]	; (800b468 <mem_trim+0x1f8>)
 800b3f6:	f240 3216 	movw	r2, #790	; 0x316
 800b3fa:	4920      	ldr	r1, [pc, #128]	; (800b47c <mem_trim+0x20c>)
 800b3fc:	481c      	ldr	r0, [pc, #112]	; (800b470 <mem_trim+0x200>)
 800b3fe:	f00c ffe1 	bl	80183c4 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800b402:	89fb      	ldrh	r3, [r7, #14]
 800b404:	4618      	mov	r0, r3
 800b406:	f7ff fd4f 	bl	800aea8 <ptr_to_mem>
 800b40a:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800b40c:	4b1c      	ldr	r3, [pc, #112]	; (800b480 <mem_trim+0x210>)
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	693a      	ldr	r2, [r7, #16]
 800b412:	429a      	cmp	r2, r3
 800b414:	d202      	bcs.n	800b41c <mem_trim+0x1ac>
      lfree = mem2;
 800b416:	4a1a      	ldr	r2, [pc, #104]	; (800b480 <mem_trim+0x210>)
 800b418:	693b      	ldr	r3, [r7, #16]
 800b41a:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800b41c:	693b      	ldr	r3, [r7, #16]
 800b41e:	2200      	movs	r2, #0
 800b420:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800b422:	69bb      	ldr	r3, [r7, #24]
 800b424:	881a      	ldrh	r2, [r3, #0]
 800b426:	693b      	ldr	r3, [r7, #16]
 800b428:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800b42a:	693b      	ldr	r3, [r7, #16]
 800b42c:	8afa      	ldrh	r2, [r7, #22]
 800b42e:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800b430:	69bb      	ldr	r3, [r7, #24]
 800b432:	89fa      	ldrh	r2, [r7, #14]
 800b434:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800b436:	693b      	ldr	r3, [r7, #16]
 800b438:	881b      	ldrh	r3, [r3, #0]
 800b43a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b43e:	d007      	beq.n	800b450 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800b440:	693b      	ldr	r3, [r7, #16]
 800b442:	881b      	ldrh	r3, [r3, #0]
 800b444:	4618      	mov	r0, r3
 800b446:	f7ff fd2f 	bl	800aea8 <ptr_to_mem>
 800b44a:	4602      	mov	r2, r0
 800b44c:	89fb      	ldrh	r3, [r7, #14]
 800b44e:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800b450:	4809      	ldr	r0, [pc, #36]	; (800b478 <mem_trim+0x208>)
 800b452:	f00c fd8e 	bl	8017f72 <sys_mutex_unlock>
  return rmem;
 800b456:	687b      	ldr	r3, [r7, #4]
}
 800b458:	4618      	mov	r0, r3
 800b45a:	3720      	adds	r7, #32
 800b45c:	46bd      	mov	sp, r7
 800b45e:	bd80      	pop	{r7, pc}
 800b460:	2000dc70 	.word	0x2000dc70
 800b464:	2000dc74 	.word	0x2000dc74
 800b468:	0801a098 	.word	0x0801a098
 800b46c:	0801a224 	.word	0x0801a224
 800b470:	0801a0e0 	.word	0x0801a0e0
 800b474:	0801a23c 	.word	0x0801a23c
 800b478:	2000dc78 	.word	0x2000dc78
 800b47c:	0801a25c 	.word	0x0801a25c
 800b480:	2000dc7c 	.word	0x2000dc7c

0800b484 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800b484:	b580      	push	{r7, lr}
 800b486:	b088      	sub	sp, #32
 800b488:	af00      	add	r7, sp, #0
 800b48a:	4603      	mov	r3, r0
 800b48c:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800b48e:	88fb      	ldrh	r3, [r7, #6]
 800b490:	2b00      	cmp	r3, #0
 800b492:	d101      	bne.n	800b498 <mem_malloc+0x14>
    return NULL;
 800b494:	2300      	movs	r3, #0
 800b496:	e0e2      	b.n	800b65e <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800b498:	88fb      	ldrh	r3, [r7, #6]
 800b49a:	3303      	adds	r3, #3
 800b49c:	b29b      	uxth	r3, r3
 800b49e:	f023 0303 	bic.w	r3, r3, #3
 800b4a2:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800b4a4:	8bbb      	ldrh	r3, [r7, #28]
 800b4a6:	2b0b      	cmp	r3, #11
 800b4a8:	d801      	bhi.n	800b4ae <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800b4aa:	230c      	movs	r3, #12
 800b4ac:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800b4ae:	8bbb      	ldrh	r3, [r7, #28]
 800b4b0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b4b4:	d803      	bhi.n	800b4be <mem_malloc+0x3a>
 800b4b6:	8bba      	ldrh	r2, [r7, #28]
 800b4b8:	88fb      	ldrh	r3, [r7, #6]
 800b4ba:	429a      	cmp	r2, r3
 800b4bc:	d201      	bcs.n	800b4c2 <mem_malloc+0x3e>
    return NULL;
 800b4be:	2300      	movs	r3, #0
 800b4c0:	e0cd      	b.n	800b65e <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800b4c2:	4869      	ldr	r0, [pc, #420]	; (800b668 <mem_malloc+0x1e4>)
 800b4c4:	f00c fd46 	bl	8017f54 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800b4c8:	4b68      	ldr	r3, [pc, #416]	; (800b66c <mem_malloc+0x1e8>)
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	4618      	mov	r0, r3
 800b4ce:	f7ff fcfd 	bl	800aecc <mem_to_ptr>
 800b4d2:	4603      	mov	r3, r0
 800b4d4:	83fb      	strh	r3, [r7, #30]
 800b4d6:	e0b7      	b.n	800b648 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800b4d8:	8bfb      	ldrh	r3, [r7, #30]
 800b4da:	4618      	mov	r0, r3
 800b4dc:	f7ff fce4 	bl	800aea8 <ptr_to_mem>
 800b4e0:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800b4e2:	697b      	ldr	r3, [r7, #20]
 800b4e4:	791b      	ldrb	r3, [r3, #4]
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	f040 80a7 	bne.w	800b63a <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800b4ec:	697b      	ldr	r3, [r7, #20]
 800b4ee:	881b      	ldrh	r3, [r3, #0]
 800b4f0:	461a      	mov	r2, r3
 800b4f2:	8bfb      	ldrh	r3, [r7, #30]
 800b4f4:	1ad3      	subs	r3, r2, r3
 800b4f6:	f1a3 0208 	sub.w	r2, r3, #8
 800b4fa:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800b4fc:	429a      	cmp	r2, r3
 800b4fe:	f0c0 809c 	bcc.w	800b63a <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800b502:	697b      	ldr	r3, [r7, #20]
 800b504:	881b      	ldrh	r3, [r3, #0]
 800b506:	461a      	mov	r2, r3
 800b508:	8bfb      	ldrh	r3, [r7, #30]
 800b50a:	1ad3      	subs	r3, r2, r3
 800b50c:	f1a3 0208 	sub.w	r2, r3, #8
 800b510:	8bbb      	ldrh	r3, [r7, #28]
 800b512:	3314      	adds	r3, #20
 800b514:	429a      	cmp	r2, r3
 800b516:	d333      	bcc.n	800b580 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800b518:	8bfa      	ldrh	r2, [r7, #30]
 800b51a:	8bbb      	ldrh	r3, [r7, #28]
 800b51c:	4413      	add	r3, r2
 800b51e:	b29b      	uxth	r3, r3
 800b520:	3308      	adds	r3, #8
 800b522:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800b524:	8a7b      	ldrh	r3, [r7, #18]
 800b526:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b52a:	d106      	bne.n	800b53a <mem_malloc+0xb6>
 800b52c:	4b50      	ldr	r3, [pc, #320]	; (800b670 <mem_malloc+0x1ec>)
 800b52e:	f240 3287 	movw	r2, #903	; 0x387
 800b532:	4950      	ldr	r1, [pc, #320]	; (800b674 <mem_malloc+0x1f0>)
 800b534:	4850      	ldr	r0, [pc, #320]	; (800b678 <mem_malloc+0x1f4>)
 800b536:	f00c ff45 	bl	80183c4 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800b53a:	8a7b      	ldrh	r3, [r7, #18]
 800b53c:	4618      	mov	r0, r3
 800b53e:	f7ff fcb3 	bl	800aea8 <ptr_to_mem>
 800b542:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800b544:	68fb      	ldr	r3, [r7, #12]
 800b546:	2200      	movs	r2, #0
 800b548:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800b54a:	697b      	ldr	r3, [r7, #20]
 800b54c:	881a      	ldrh	r2, [r3, #0]
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	8bfa      	ldrh	r2, [r7, #30]
 800b556:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800b558:	697b      	ldr	r3, [r7, #20]
 800b55a:	8a7a      	ldrh	r2, [r7, #18]
 800b55c:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800b55e:	697b      	ldr	r3, [r7, #20]
 800b560:	2201      	movs	r2, #1
 800b562:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	881b      	ldrh	r3, [r3, #0]
 800b568:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b56c:	d00b      	beq.n	800b586 <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	881b      	ldrh	r3, [r3, #0]
 800b572:	4618      	mov	r0, r3
 800b574:	f7ff fc98 	bl	800aea8 <ptr_to_mem>
 800b578:	4602      	mov	r2, r0
 800b57a:	8a7b      	ldrh	r3, [r7, #18]
 800b57c:	8053      	strh	r3, [r2, #2]
 800b57e:	e002      	b.n	800b586 <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800b580:	697b      	ldr	r3, [r7, #20]
 800b582:	2201      	movs	r2, #1
 800b584:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800b586:	4b39      	ldr	r3, [pc, #228]	; (800b66c <mem_malloc+0x1e8>)
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	697a      	ldr	r2, [r7, #20]
 800b58c:	429a      	cmp	r2, r3
 800b58e:	d127      	bne.n	800b5e0 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800b590:	4b36      	ldr	r3, [pc, #216]	; (800b66c <mem_malloc+0x1e8>)
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800b596:	e005      	b.n	800b5a4 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800b598:	69bb      	ldr	r3, [r7, #24]
 800b59a:	881b      	ldrh	r3, [r3, #0]
 800b59c:	4618      	mov	r0, r3
 800b59e:	f7ff fc83 	bl	800aea8 <ptr_to_mem>
 800b5a2:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800b5a4:	69bb      	ldr	r3, [r7, #24]
 800b5a6:	791b      	ldrb	r3, [r3, #4]
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d004      	beq.n	800b5b6 <mem_malloc+0x132>
 800b5ac:	4b33      	ldr	r3, [pc, #204]	; (800b67c <mem_malloc+0x1f8>)
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	69ba      	ldr	r2, [r7, #24]
 800b5b2:	429a      	cmp	r2, r3
 800b5b4:	d1f0      	bne.n	800b598 <mem_malloc+0x114>
          }
          lfree = cur;
 800b5b6:	4a2d      	ldr	r2, [pc, #180]	; (800b66c <mem_malloc+0x1e8>)
 800b5b8:	69bb      	ldr	r3, [r7, #24]
 800b5ba:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800b5bc:	4b2b      	ldr	r3, [pc, #172]	; (800b66c <mem_malloc+0x1e8>)
 800b5be:	681a      	ldr	r2, [r3, #0]
 800b5c0:	4b2e      	ldr	r3, [pc, #184]	; (800b67c <mem_malloc+0x1f8>)
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	429a      	cmp	r2, r3
 800b5c6:	d00b      	beq.n	800b5e0 <mem_malloc+0x15c>
 800b5c8:	4b28      	ldr	r3, [pc, #160]	; (800b66c <mem_malloc+0x1e8>)
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	791b      	ldrb	r3, [r3, #4]
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d006      	beq.n	800b5e0 <mem_malloc+0x15c>
 800b5d2:	4b27      	ldr	r3, [pc, #156]	; (800b670 <mem_malloc+0x1ec>)
 800b5d4:	f240 32b5 	movw	r2, #949	; 0x3b5
 800b5d8:	4929      	ldr	r1, [pc, #164]	; (800b680 <mem_malloc+0x1fc>)
 800b5da:	4827      	ldr	r0, [pc, #156]	; (800b678 <mem_malloc+0x1f4>)
 800b5dc:	f00c fef2 	bl	80183c4 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800b5e0:	4821      	ldr	r0, [pc, #132]	; (800b668 <mem_malloc+0x1e4>)
 800b5e2:	f00c fcc6 	bl	8017f72 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800b5e6:	8bba      	ldrh	r2, [r7, #28]
 800b5e8:	697b      	ldr	r3, [r7, #20]
 800b5ea:	4413      	add	r3, r2
 800b5ec:	3308      	adds	r3, #8
 800b5ee:	4a23      	ldr	r2, [pc, #140]	; (800b67c <mem_malloc+0x1f8>)
 800b5f0:	6812      	ldr	r2, [r2, #0]
 800b5f2:	4293      	cmp	r3, r2
 800b5f4:	d906      	bls.n	800b604 <mem_malloc+0x180>
 800b5f6:	4b1e      	ldr	r3, [pc, #120]	; (800b670 <mem_malloc+0x1ec>)
 800b5f8:	f240 32b9 	movw	r2, #953	; 0x3b9
 800b5fc:	4921      	ldr	r1, [pc, #132]	; (800b684 <mem_malloc+0x200>)
 800b5fe:	481e      	ldr	r0, [pc, #120]	; (800b678 <mem_malloc+0x1f4>)
 800b600:	f00c fee0 	bl	80183c4 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800b604:	697b      	ldr	r3, [r7, #20]
 800b606:	f003 0303 	and.w	r3, r3, #3
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d006      	beq.n	800b61c <mem_malloc+0x198>
 800b60e:	4b18      	ldr	r3, [pc, #96]	; (800b670 <mem_malloc+0x1ec>)
 800b610:	f240 32bb 	movw	r2, #955	; 0x3bb
 800b614:	491c      	ldr	r1, [pc, #112]	; (800b688 <mem_malloc+0x204>)
 800b616:	4818      	ldr	r0, [pc, #96]	; (800b678 <mem_malloc+0x1f4>)
 800b618:	f00c fed4 	bl	80183c4 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800b61c:	697b      	ldr	r3, [r7, #20]
 800b61e:	f003 0303 	and.w	r3, r3, #3
 800b622:	2b00      	cmp	r3, #0
 800b624:	d006      	beq.n	800b634 <mem_malloc+0x1b0>
 800b626:	4b12      	ldr	r3, [pc, #72]	; (800b670 <mem_malloc+0x1ec>)
 800b628:	f240 32bd 	movw	r2, #957	; 0x3bd
 800b62c:	4917      	ldr	r1, [pc, #92]	; (800b68c <mem_malloc+0x208>)
 800b62e:	4812      	ldr	r0, [pc, #72]	; (800b678 <mem_malloc+0x1f4>)
 800b630:	f00c fec8 	bl	80183c4 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800b634:	697b      	ldr	r3, [r7, #20]
 800b636:	3308      	adds	r3, #8
 800b638:	e011      	b.n	800b65e <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800b63a:	8bfb      	ldrh	r3, [r7, #30]
 800b63c:	4618      	mov	r0, r3
 800b63e:	f7ff fc33 	bl	800aea8 <ptr_to_mem>
 800b642:	4603      	mov	r3, r0
 800b644:	881b      	ldrh	r3, [r3, #0]
 800b646:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800b648:	8bfa      	ldrh	r2, [r7, #30]
 800b64a:	8bbb      	ldrh	r3, [r7, #28]
 800b64c:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800b650:	429a      	cmp	r2, r3
 800b652:	f4ff af41 	bcc.w	800b4d8 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800b656:	4804      	ldr	r0, [pc, #16]	; (800b668 <mem_malloc+0x1e4>)
 800b658:	f00c fc8b 	bl	8017f72 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800b65c:	2300      	movs	r3, #0
}
 800b65e:	4618      	mov	r0, r3
 800b660:	3720      	adds	r7, #32
 800b662:	46bd      	mov	sp, r7
 800b664:	bd80      	pop	{r7, pc}
 800b666:	bf00      	nop
 800b668:	2000dc78 	.word	0x2000dc78
 800b66c:	2000dc7c 	.word	0x2000dc7c
 800b670:	0801a098 	.word	0x0801a098
 800b674:	0801a25c 	.word	0x0801a25c
 800b678:	0801a0e0 	.word	0x0801a0e0
 800b67c:	2000dc74 	.word	0x2000dc74
 800b680:	0801a270 	.word	0x0801a270
 800b684:	0801a28c 	.word	0x0801a28c
 800b688:	0801a2bc 	.word	0x0801a2bc
 800b68c:	0801a2ec 	.word	0x0801a2ec

0800b690 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800b690:	b480      	push	{r7}
 800b692:	b085      	sub	sp, #20
 800b694:	af00      	add	r7, sp, #0
 800b696:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	689b      	ldr	r3, [r3, #8]
 800b69c:	2200      	movs	r2, #0
 800b69e:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	685b      	ldr	r3, [r3, #4]
 800b6a4:	3303      	adds	r3, #3
 800b6a6:	f023 0303 	bic.w	r3, r3, #3
 800b6aa:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800b6ac:	2300      	movs	r3, #0
 800b6ae:	60fb      	str	r3, [r7, #12]
 800b6b0:	e011      	b.n	800b6d6 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	689b      	ldr	r3, [r3, #8]
 800b6b6:	681a      	ldr	r2, [r3, #0]
 800b6b8:	68bb      	ldr	r3, [r7, #8]
 800b6ba:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	689b      	ldr	r3, [r3, #8]
 800b6c0:	68ba      	ldr	r2, [r7, #8]
 800b6c2:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	881b      	ldrh	r3, [r3, #0]
 800b6c8:	461a      	mov	r2, r3
 800b6ca:	68bb      	ldr	r3, [r7, #8]
 800b6cc:	4413      	add	r3, r2
 800b6ce:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800b6d0:	68fb      	ldr	r3, [r7, #12]
 800b6d2:	3301      	adds	r3, #1
 800b6d4:	60fb      	str	r3, [r7, #12]
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	885b      	ldrh	r3, [r3, #2]
 800b6da:	461a      	mov	r2, r3
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	4293      	cmp	r3, r2
 800b6e0:	dbe7      	blt.n	800b6b2 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800b6e2:	bf00      	nop
 800b6e4:	bf00      	nop
 800b6e6:	3714      	adds	r7, #20
 800b6e8:	46bd      	mov	sp, r7
 800b6ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ee:	4770      	bx	lr

0800b6f0 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800b6f0:	b580      	push	{r7, lr}
 800b6f2:	b082      	sub	sp, #8
 800b6f4:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800b6f6:	2300      	movs	r3, #0
 800b6f8:	80fb      	strh	r3, [r7, #6]
 800b6fa:	e009      	b.n	800b710 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800b6fc:	88fb      	ldrh	r3, [r7, #6]
 800b6fe:	4a08      	ldr	r2, [pc, #32]	; (800b720 <memp_init+0x30>)
 800b700:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b704:	4618      	mov	r0, r3
 800b706:	f7ff ffc3 	bl	800b690 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800b70a:	88fb      	ldrh	r3, [r7, #6]
 800b70c:	3301      	adds	r3, #1
 800b70e:	80fb      	strh	r3, [r7, #6]
 800b710:	88fb      	ldrh	r3, [r7, #6]
 800b712:	2b0c      	cmp	r3, #12
 800b714:	d9f2      	bls.n	800b6fc <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800b716:	bf00      	nop
 800b718:	bf00      	nop
 800b71a:	3708      	adds	r7, #8
 800b71c:	46bd      	mov	sp, r7
 800b71e:	bd80      	pop	{r7, pc}
 800b720:	08026fdc 	.word	0x08026fdc

0800b724 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800b724:	b580      	push	{r7, lr}
 800b726:	b084      	sub	sp, #16
 800b728:	af00      	add	r7, sp, #0
 800b72a:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800b72c:	f00c fc54 	bl	8017fd8 <sys_arch_protect>
 800b730:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	689b      	ldr	r3, [r3, #8]
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800b73a:	68bb      	ldr	r3, [r7, #8]
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	d015      	beq.n	800b76c <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	689b      	ldr	r3, [r3, #8]
 800b744:	68ba      	ldr	r2, [r7, #8]
 800b746:	6812      	ldr	r2, [r2, #0]
 800b748:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800b74a:	68bb      	ldr	r3, [r7, #8]
 800b74c:	f003 0303 	and.w	r3, r3, #3
 800b750:	2b00      	cmp	r3, #0
 800b752:	d006      	beq.n	800b762 <do_memp_malloc_pool+0x3e>
 800b754:	4b09      	ldr	r3, [pc, #36]	; (800b77c <do_memp_malloc_pool+0x58>)
 800b756:	f44f 728c 	mov.w	r2, #280	; 0x118
 800b75a:	4909      	ldr	r1, [pc, #36]	; (800b780 <do_memp_malloc_pool+0x5c>)
 800b75c:	4809      	ldr	r0, [pc, #36]	; (800b784 <do_memp_malloc_pool+0x60>)
 800b75e:	f00c fe31 	bl	80183c4 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800b762:	68f8      	ldr	r0, [r7, #12]
 800b764:	f00c fc46 	bl	8017ff4 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800b768:	68bb      	ldr	r3, [r7, #8]
 800b76a:	e003      	b.n	800b774 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800b76c:	68f8      	ldr	r0, [r7, #12]
 800b76e:	f00c fc41 	bl	8017ff4 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800b772:	2300      	movs	r3, #0
}
 800b774:	4618      	mov	r0, r3
 800b776:	3710      	adds	r7, #16
 800b778:	46bd      	mov	sp, r7
 800b77a:	bd80      	pop	{r7, pc}
 800b77c:	0801a310 	.word	0x0801a310
 800b780:	0801a340 	.word	0x0801a340
 800b784:	0801a364 	.word	0x0801a364

0800b788 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800b788:	b580      	push	{r7, lr}
 800b78a:	b082      	sub	sp, #8
 800b78c:	af00      	add	r7, sp, #0
 800b78e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	2b00      	cmp	r3, #0
 800b794:	d106      	bne.n	800b7a4 <memp_malloc_pool+0x1c>
 800b796:	4b0a      	ldr	r3, [pc, #40]	; (800b7c0 <memp_malloc_pool+0x38>)
 800b798:	f44f 729e 	mov.w	r2, #316	; 0x13c
 800b79c:	4909      	ldr	r1, [pc, #36]	; (800b7c4 <memp_malloc_pool+0x3c>)
 800b79e:	480a      	ldr	r0, [pc, #40]	; (800b7c8 <memp_malloc_pool+0x40>)
 800b7a0:	f00c fe10 	bl	80183c4 <iprintf>
  if (desc == NULL) {
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d101      	bne.n	800b7ae <memp_malloc_pool+0x26>
    return NULL;
 800b7aa:	2300      	movs	r3, #0
 800b7ac:	e003      	b.n	800b7b6 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800b7ae:	6878      	ldr	r0, [r7, #4]
 800b7b0:	f7ff ffb8 	bl	800b724 <do_memp_malloc_pool>
 800b7b4:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800b7b6:	4618      	mov	r0, r3
 800b7b8:	3708      	adds	r7, #8
 800b7ba:	46bd      	mov	sp, r7
 800b7bc:	bd80      	pop	{r7, pc}
 800b7be:	bf00      	nop
 800b7c0:	0801a310 	.word	0x0801a310
 800b7c4:	0801a38c 	.word	0x0801a38c
 800b7c8:	0801a364 	.word	0x0801a364

0800b7cc <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800b7cc:	b580      	push	{r7, lr}
 800b7ce:	b084      	sub	sp, #16
 800b7d0:	af00      	add	r7, sp, #0
 800b7d2:	4603      	mov	r3, r0
 800b7d4:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800b7d6:	79fb      	ldrb	r3, [r7, #7]
 800b7d8:	2b0c      	cmp	r3, #12
 800b7da:	d908      	bls.n	800b7ee <memp_malloc+0x22>
 800b7dc:	4b0a      	ldr	r3, [pc, #40]	; (800b808 <memp_malloc+0x3c>)
 800b7de:	f240 1257 	movw	r2, #343	; 0x157
 800b7e2:	490a      	ldr	r1, [pc, #40]	; (800b80c <memp_malloc+0x40>)
 800b7e4:	480a      	ldr	r0, [pc, #40]	; (800b810 <memp_malloc+0x44>)
 800b7e6:	f00c fded 	bl	80183c4 <iprintf>
 800b7ea:	2300      	movs	r3, #0
 800b7ec:	e008      	b.n	800b800 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800b7ee:	79fb      	ldrb	r3, [r7, #7]
 800b7f0:	4a08      	ldr	r2, [pc, #32]	; (800b814 <memp_malloc+0x48>)
 800b7f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b7f6:	4618      	mov	r0, r3
 800b7f8:	f7ff ff94 	bl	800b724 <do_memp_malloc_pool>
 800b7fc:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800b7fe:	68fb      	ldr	r3, [r7, #12]
}
 800b800:	4618      	mov	r0, r3
 800b802:	3710      	adds	r7, #16
 800b804:	46bd      	mov	sp, r7
 800b806:	bd80      	pop	{r7, pc}
 800b808:	0801a310 	.word	0x0801a310
 800b80c:	0801a3a0 	.word	0x0801a3a0
 800b810:	0801a364 	.word	0x0801a364
 800b814:	08026fdc 	.word	0x08026fdc

0800b818 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800b818:	b580      	push	{r7, lr}
 800b81a:	b084      	sub	sp, #16
 800b81c:	af00      	add	r7, sp, #0
 800b81e:	6078      	str	r0, [r7, #4]
 800b820:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800b822:	683b      	ldr	r3, [r7, #0]
 800b824:	f003 0303 	and.w	r3, r3, #3
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d006      	beq.n	800b83a <do_memp_free_pool+0x22>
 800b82c:	4b0d      	ldr	r3, [pc, #52]	; (800b864 <do_memp_free_pool+0x4c>)
 800b82e:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800b832:	490d      	ldr	r1, [pc, #52]	; (800b868 <do_memp_free_pool+0x50>)
 800b834:	480d      	ldr	r0, [pc, #52]	; (800b86c <do_memp_free_pool+0x54>)
 800b836:	f00c fdc5 	bl	80183c4 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800b83a:	683b      	ldr	r3, [r7, #0]
 800b83c:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800b83e:	f00c fbcb 	bl	8017fd8 <sys_arch_protect>
 800b842:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	689b      	ldr	r3, [r3, #8]
 800b848:	681a      	ldr	r2, [r3, #0]
 800b84a:	68fb      	ldr	r3, [r7, #12]
 800b84c:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	689b      	ldr	r3, [r3, #8]
 800b852:	68fa      	ldr	r2, [r7, #12]
 800b854:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800b856:	68b8      	ldr	r0, [r7, #8]
 800b858:	f00c fbcc 	bl	8017ff4 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800b85c:	bf00      	nop
 800b85e:	3710      	adds	r7, #16
 800b860:	46bd      	mov	sp, r7
 800b862:	bd80      	pop	{r7, pc}
 800b864:	0801a310 	.word	0x0801a310
 800b868:	0801a3c0 	.word	0x0801a3c0
 800b86c:	0801a364 	.word	0x0801a364

0800b870 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800b870:	b580      	push	{r7, lr}
 800b872:	b082      	sub	sp, #8
 800b874:	af00      	add	r7, sp, #0
 800b876:	6078      	str	r0, [r7, #4]
 800b878:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d106      	bne.n	800b88e <memp_free_pool+0x1e>
 800b880:	4b0a      	ldr	r3, [pc, #40]	; (800b8ac <memp_free_pool+0x3c>)
 800b882:	f240 1295 	movw	r2, #405	; 0x195
 800b886:	490a      	ldr	r1, [pc, #40]	; (800b8b0 <memp_free_pool+0x40>)
 800b888:	480a      	ldr	r0, [pc, #40]	; (800b8b4 <memp_free_pool+0x44>)
 800b88a:	f00c fd9b 	bl	80183c4 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	2b00      	cmp	r3, #0
 800b892:	d007      	beq.n	800b8a4 <memp_free_pool+0x34>
 800b894:	683b      	ldr	r3, [r7, #0]
 800b896:	2b00      	cmp	r3, #0
 800b898:	d004      	beq.n	800b8a4 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800b89a:	6839      	ldr	r1, [r7, #0]
 800b89c:	6878      	ldr	r0, [r7, #4]
 800b89e:	f7ff ffbb 	bl	800b818 <do_memp_free_pool>
 800b8a2:	e000      	b.n	800b8a6 <memp_free_pool+0x36>
    return;
 800b8a4:	bf00      	nop
}
 800b8a6:	3708      	adds	r7, #8
 800b8a8:	46bd      	mov	sp, r7
 800b8aa:	bd80      	pop	{r7, pc}
 800b8ac:	0801a310 	.word	0x0801a310
 800b8b0:	0801a38c 	.word	0x0801a38c
 800b8b4:	0801a364 	.word	0x0801a364

0800b8b8 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800b8b8:	b580      	push	{r7, lr}
 800b8ba:	b082      	sub	sp, #8
 800b8bc:	af00      	add	r7, sp, #0
 800b8be:	4603      	mov	r3, r0
 800b8c0:	6039      	str	r1, [r7, #0]
 800b8c2:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800b8c4:	79fb      	ldrb	r3, [r7, #7]
 800b8c6:	2b0c      	cmp	r3, #12
 800b8c8:	d907      	bls.n	800b8da <memp_free+0x22>
 800b8ca:	4b0c      	ldr	r3, [pc, #48]	; (800b8fc <memp_free+0x44>)
 800b8cc:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800b8d0:	490b      	ldr	r1, [pc, #44]	; (800b900 <memp_free+0x48>)
 800b8d2:	480c      	ldr	r0, [pc, #48]	; (800b904 <memp_free+0x4c>)
 800b8d4:	f00c fd76 	bl	80183c4 <iprintf>
 800b8d8:	e00c      	b.n	800b8f4 <memp_free+0x3c>

  if (mem == NULL) {
 800b8da:	683b      	ldr	r3, [r7, #0]
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	d008      	beq.n	800b8f2 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800b8e0:	79fb      	ldrb	r3, [r7, #7]
 800b8e2:	4a09      	ldr	r2, [pc, #36]	; (800b908 <memp_free+0x50>)
 800b8e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b8e8:	6839      	ldr	r1, [r7, #0]
 800b8ea:	4618      	mov	r0, r3
 800b8ec:	f7ff ff94 	bl	800b818 <do_memp_free_pool>
 800b8f0:	e000      	b.n	800b8f4 <memp_free+0x3c>
    return;
 800b8f2:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800b8f4:	3708      	adds	r7, #8
 800b8f6:	46bd      	mov	sp, r7
 800b8f8:	bd80      	pop	{r7, pc}
 800b8fa:	bf00      	nop
 800b8fc:	0801a310 	.word	0x0801a310
 800b900:	0801a3e0 	.word	0x0801a3e0
 800b904:	0801a364 	.word	0x0801a364
 800b908:	08026fdc 	.word	0x08026fdc

0800b90c <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800b90c:	b480      	push	{r7}
 800b90e:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800b910:	bf00      	nop
 800b912:	46bd      	mov	sp, r7
 800b914:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b918:	4770      	bx	lr
	...

0800b91c <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800b91c:	b580      	push	{r7, lr}
 800b91e:	b086      	sub	sp, #24
 800b920:	af00      	add	r7, sp, #0
 800b922:	60f8      	str	r0, [r7, #12]
 800b924:	60b9      	str	r1, [r7, #8]
 800b926:	607a      	str	r2, [r7, #4]
 800b928:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d108      	bne.n	800b942 <netif_add+0x26>
 800b930:	4b5b      	ldr	r3, [pc, #364]	; (800baa0 <netif_add+0x184>)
 800b932:	f240 1227 	movw	r2, #295	; 0x127
 800b936:	495b      	ldr	r1, [pc, #364]	; (800baa4 <netif_add+0x188>)
 800b938:	485b      	ldr	r0, [pc, #364]	; (800baa8 <netif_add+0x18c>)
 800b93a:	f00c fd43 	bl	80183c4 <iprintf>
 800b93e:	2300      	movs	r3, #0
 800b940:	e0a9      	b.n	800ba96 <netif_add+0x17a>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800b942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b944:	2b00      	cmp	r3, #0
 800b946:	d108      	bne.n	800b95a <netif_add+0x3e>
 800b948:	4b55      	ldr	r3, [pc, #340]	; (800baa0 <netif_add+0x184>)
 800b94a:	f44f 7294 	mov.w	r2, #296	; 0x128
 800b94e:	4957      	ldr	r1, [pc, #348]	; (800baac <netif_add+0x190>)
 800b950:	4855      	ldr	r0, [pc, #340]	; (800baa8 <netif_add+0x18c>)
 800b952:	f00c fd37 	bl	80183c4 <iprintf>
 800b956:	2300      	movs	r3, #0
 800b958:	e09d      	b.n	800ba96 <netif_add+0x17a>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800b95a:	68bb      	ldr	r3, [r7, #8]
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	d101      	bne.n	800b964 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800b960:	4b53      	ldr	r3, [pc, #332]	; (800bab0 <netif_add+0x194>)
 800b962:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	2b00      	cmp	r3, #0
 800b968:	d101      	bne.n	800b96e <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800b96a:	4b51      	ldr	r3, [pc, #324]	; (800bab0 <netif_add+0x194>)
 800b96c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800b96e:	683b      	ldr	r3, [r7, #0]
 800b970:	2b00      	cmp	r3, #0
 800b972:	d101      	bne.n	800b978 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800b974:	4b4e      	ldr	r3, [pc, #312]	; (800bab0 <netif_add+0x194>)
 800b976:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800b978:	68fb      	ldr	r3, [r7, #12]
 800b97a:	2200      	movs	r2, #0
 800b97c:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800b97e:	68fb      	ldr	r3, [r7, #12]
 800b980:	2200      	movs	r2, #0
 800b982:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800b984:	68fb      	ldr	r3, [r7, #12]
 800b986:	2200      	movs	r2, #0
 800b988:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800b98a:	68fb      	ldr	r3, [r7, #12]
 800b98c:	4a49      	ldr	r2, [pc, #292]	; (800bab4 <netif_add+0x198>)
 800b98e:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800b990:	68fb      	ldr	r3, [r7, #12]
 800b992:	2200      	movs	r2, #0
 800b994:	851a      	strh	r2, [r3, #40]	; 0x28
  netif->flags = 0;
 800b996:	68fb      	ldr	r3, [r7, #12]
 800b998:	2200      	movs	r2, #0
 800b99a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 800b99e:	68fb      	ldr	r3, [r7, #12]
 800b9a0:	3324      	adds	r3, #36	; 0x24
 800b9a2:	2204      	movs	r2, #4
 800b9a4:	2100      	movs	r1, #0
 800b9a6:	4618      	mov	r0, r3
 800b9a8:	f00c fc6f 	bl	801828a <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	2200      	movs	r2, #0
 800b9b0:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800b9b2:	68fb      	ldr	r3, [r7, #12]
 800b9b4:	6a3a      	ldr	r2, [r7, #32]
 800b9b6:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800b9b8:	4b3f      	ldr	r3, [pc, #252]	; (800bab8 <netif_add+0x19c>)
 800b9ba:	781a      	ldrb	r2, [r3, #0]
 800b9bc:	68fb      	ldr	r3, [r7, #12]
 800b9be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  netif->input = input;
 800b9c2:	68fb      	ldr	r3, [r7, #12]
 800b9c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b9c6:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800b9c8:	683b      	ldr	r3, [r7, #0]
 800b9ca:	687a      	ldr	r2, [r7, #4]
 800b9cc:	68b9      	ldr	r1, [r7, #8]
 800b9ce:	68f8      	ldr	r0, [r7, #12]
 800b9d0:	f000 f914 	bl	800bbfc <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800b9d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9d6:	68f8      	ldr	r0, [r7, #12]
 800b9d8:	4798      	blx	r3
 800b9da:	4603      	mov	r3, r0
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d001      	beq.n	800b9e4 <netif_add+0xc8>
    return NULL;
 800b9e0:	2300      	movs	r3, #0
 800b9e2:	e058      	b.n	800ba96 <netif_add+0x17a>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b9ea:	2bff      	cmp	r3, #255	; 0xff
 800b9ec:	d103      	bne.n	800b9f6 <netif_add+0xda>
        netif->num = 0;
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	2200      	movs	r2, #0
 800b9f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }
      num_netifs = 0;
 800b9f6:	2300      	movs	r3, #0
 800b9f8:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800b9fa:	4b30      	ldr	r3, [pc, #192]	; (800babc <netif_add+0x1a0>)
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	617b      	str	r3, [r7, #20]
 800ba00:	e02b      	b.n	800ba5a <netif_add+0x13e>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800ba02:	697a      	ldr	r2, [r7, #20]
 800ba04:	68fb      	ldr	r3, [r7, #12]
 800ba06:	429a      	cmp	r2, r3
 800ba08:	d106      	bne.n	800ba18 <netif_add+0xfc>
 800ba0a:	4b25      	ldr	r3, [pc, #148]	; (800baa0 <netif_add+0x184>)
 800ba0c:	f240 128b 	movw	r2, #395	; 0x18b
 800ba10:	492b      	ldr	r1, [pc, #172]	; (800bac0 <netif_add+0x1a4>)
 800ba12:	4825      	ldr	r0, [pc, #148]	; (800baa8 <netif_add+0x18c>)
 800ba14:	f00c fcd6 	bl	80183c4 <iprintf>
        num_netifs++;
 800ba18:	693b      	ldr	r3, [r7, #16]
 800ba1a:	3301      	adds	r3, #1
 800ba1c:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800ba1e:	693b      	ldr	r3, [r7, #16]
 800ba20:	2bff      	cmp	r3, #255	; 0xff
 800ba22:	dd06      	ble.n	800ba32 <netif_add+0x116>
 800ba24:	4b1e      	ldr	r3, [pc, #120]	; (800baa0 <netif_add+0x184>)
 800ba26:	f240 128d 	movw	r2, #397	; 0x18d
 800ba2a:	4926      	ldr	r1, [pc, #152]	; (800bac4 <netif_add+0x1a8>)
 800ba2c:	481e      	ldr	r0, [pc, #120]	; (800baa8 <netif_add+0x18c>)
 800ba2e:	f00c fcc9 	bl	80183c4 <iprintf>
        if (netif2->num == netif->num) {
 800ba32:	697b      	ldr	r3, [r7, #20]
 800ba34:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ba3e:	429a      	cmp	r2, r3
 800ba40:	d108      	bne.n	800ba54 <netif_add+0x138>
          netif->num++;
 800ba42:	68fb      	ldr	r3, [r7, #12]
 800ba44:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ba48:	3301      	adds	r3, #1
 800ba4a:	b2da      	uxtb	r2, r3
 800ba4c:	68fb      	ldr	r3, [r7, #12]
 800ba4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          break;
 800ba52:	e005      	b.n	800ba60 <netif_add+0x144>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800ba54:	697b      	ldr	r3, [r7, #20]
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	617b      	str	r3, [r7, #20]
 800ba5a:	697b      	ldr	r3, [r7, #20]
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d1d0      	bne.n	800ba02 <netif_add+0xe6>
        }
      }
    } while (netif2 != NULL);
 800ba60:	697b      	ldr	r3, [r7, #20]
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d1be      	bne.n	800b9e4 <netif_add+0xc8>
  }
  if (netif->num == 254) {
 800ba66:	68fb      	ldr	r3, [r7, #12]
 800ba68:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ba6c:	2bfe      	cmp	r3, #254	; 0xfe
 800ba6e:	d103      	bne.n	800ba78 <netif_add+0x15c>
    netif_num = 0;
 800ba70:	4b11      	ldr	r3, [pc, #68]	; (800bab8 <netif_add+0x19c>)
 800ba72:	2200      	movs	r2, #0
 800ba74:	701a      	strb	r2, [r3, #0]
 800ba76:	e006      	b.n	800ba86 <netif_add+0x16a>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ba7e:	3301      	adds	r3, #1
 800ba80:	b2da      	uxtb	r2, r3
 800ba82:	4b0d      	ldr	r3, [pc, #52]	; (800bab8 <netif_add+0x19c>)
 800ba84:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800ba86:	4b0d      	ldr	r3, [pc, #52]	; (800babc <netif_add+0x1a0>)
 800ba88:	681a      	ldr	r2, [r3, #0]
 800ba8a:	68fb      	ldr	r3, [r7, #12]
 800ba8c:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800ba8e:	4a0b      	ldr	r2, [pc, #44]	; (800babc <netif_add+0x1a0>)
 800ba90:	68fb      	ldr	r3, [r7, #12]
 800ba92:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800ba94:	68fb      	ldr	r3, [r7, #12]
}
 800ba96:	4618      	mov	r0, r3
 800ba98:	3718      	adds	r7, #24
 800ba9a:	46bd      	mov	sp, r7
 800ba9c:	bd80      	pop	{r7, pc}
 800ba9e:	bf00      	nop
 800baa0:	0801a3fc 	.word	0x0801a3fc
 800baa4:	0801a490 	.word	0x0801a490
 800baa8:	0801a44c 	.word	0x0801a44c
 800baac:	0801a4ac 	.word	0x0801a4ac
 800bab0:	08027060 	.word	0x08027060
 800bab4:	0800bedf 	.word	0x0800bedf
 800bab8:	20010d74 	.word	0x20010d74
 800babc:	20010d6c 	.word	0x20010d6c
 800bac0:	0801a4d0 	.word	0x0801a4d0
 800bac4:	0801a4e4 	.word	0x0801a4e4

0800bac8 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800bac8:	b580      	push	{r7, lr}
 800baca:	b082      	sub	sp, #8
 800bacc:	af00      	add	r7, sp, #0
 800bace:	6078      	str	r0, [r7, #4]
 800bad0:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800bad2:	6839      	ldr	r1, [r7, #0]
 800bad4:	6878      	ldr	r0, [r7, #4]
 800bad6:	f002 fe93 	bl	800e800 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800bada:	6839      	ldr	r1, [r7, #0]
 800badc:	6878      	ldr	r0, [r7, #4]
 800bade:	f007 ff0d 	bl	80138fc <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800bae2:	bf00      	nop
 800bae4:	3708      	adds	r7, #8
 800bae6:	46bd      	mov	sp, r7
 800bae8:	bd80      	pop	{r7, pc}
	...

0800baec <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800baec:	b580      	push	{r7, lr}
 800baee:	b086      	sub	sp, #24
 800baf0:	af00      	add	r7, sp, #0
 800baf2:	60f8      	str	r0, [r7, #12]
 800baf4:	60b9      	str	r1, [r7, #8]
 800baf6:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800baf8:	68bb      	ldr	r3, [r7, #8]
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d106      	bne.n	800bb0c <netif_do_set_ipaddr+0x20>
 800bafe:	4b1d      	ldr	r3, [pc, #116]	; (800bb74 <netif_do_set_ipaddr+0x88>)
 800bb00:	f240 12cb 	movw	r2, #459	; 0x1cb
 800bb04:	491c      	ldr	r1, [pc, #112]	; (800bb78 <netif_do_set_ipaddr+0x8c>)
 800bb06:	481d      	ldr	r0, [pc, #116]	; (800bb7c <netif_do_set_ipaddr+0x90>)
 800bb08:	f00c fc5c 	bl	80183c4 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d106      	bne.n	800bb20 <netif_do_set_ipaddr+0x34>
 800bb12:	4b18      	ldr	r3, [pc, #96]	; (800bb74 <netif_do_set_ipaddr+0x88>)
 800bb14:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800bb18:	4917      	ldr	r1, [pc, #92]	; (800bb78 <netif_do_set_ipaddr+0x8c>)
 800bb1a:	4818      	ldr	r0, [pc, #96]	; (800bb7c <netif_do_set_ipaddr+0x90>)
 800bb1c:	f00c fc52 	bl	80183c4 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800bb20:	68bb      	ldr	r3, [r7, #8]
 800bb22:	681a      	ldr	r2, [r3, #0]
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	3304      	adds	r3, #4
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	429a      	cmp	r2, r3
 800bb2c:	d01c      	beq.n	800bb68 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800bb2e:	68bb      	ldr	r3, [r7, #8]
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800bb34:	68fb      	ldr	r3, [r7, #12]
 800bb36:	3304      	adds	r3, #4
 800bb38:	681a      	ldr	r2, [r3, #0]
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800bb3e:	f107 0314 	add.w	r3, r7, #20
 800bb42:	4619      	mov	r1, r3
 800bb44:	6878      	ldr	r0, [r7, #4]
 800bb46:	f7ff ffbf 	bl	800bac8 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800bb4a:	68bb      	ldr	r3, [r7, #8]
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d002      	beq.n	800bb56 <netif_do_set_ipaddr+0x6a>
 800bb50:	68bb      	ldr	r3, [r7, #8]
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	e000      	b.n	800bb58 <netif_do_set_ipaddr+0x6c>
 800bb56:	2300      	movs	r3, #0
 800bb58:	68fa      	ldr	r2, [r7, #12]
 800bb5a:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800bb5c:	2101      	movs	r1, #1
 800bb5e:	68f8      	ldr	r0, [r7, #12]
 800bb60:	f000 f8d2 	bl	800bd08 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800bb64:	2301      	movs	r3, #1
 800bb66:	e000      	b.n	800bb6a <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800bb68:	2300      	movs	r3, #0
}
 800bb6a:	4618      	mov	r0, r3
 800bb6c:	3718      	adds	r7, #24
 800bb6e:	46bd      	mov	sp, r7
 800bb70:	bd80      	pop	{r7, pc}
 800bb72:	bf00      	nop
 800bb74:	0801a3fc 	.word	0x0801a3fc
 800bb78:	0801a514 	.word	0x0801a514
 800bb7c:	0801a44c 	.word	0x0801a44c

0800bb80 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800bb80:	b480      	push	{r7}
 800bb82:	b085      	sub	sp, #20
 800bb84:	af00      	add	r7, sp, #0
 800bb86:	60f8      	str	r0, [r7, #12]
 800bb88:	60b9      	str	r1, [r7, #8]
 800bb8a:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800bb8c:	68bb      	ldr	r3, [r7, #8]
 800bb8e:	681a      	ldr	r2, [r3, #0]
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	3308      	adds	r3, #8
 800bb94:	681b      	ldr	r3, [r3, #0]
 800bb96:	429a      	cmp	r2, r3
 800bb98:	d00a      	beq.n	800bbb0 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800bb9a:	68bb      	ldr	r3, [r7, #8]
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d002      	beq.n	800bba6 <netif_do_set_netmask+0x26>
 800bba0:	68bb      	ldr	r3, [r7, #8]
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	e000      	b.n	800bba8 <netif_do_set_netmask+0x28>
 800bba6:	2300      	movs	r3, #0
 800bba8:	68fa      	ldr	r2, [r7, #12]
 800bbaa:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800bbac:	2301      	movs	r3, #1
 800bbae:	e000      	b.n	800bbb2 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800bbb0:	2300      	movs	r3, #0
}
 800bbb2:	4618      	mov	r0, r3
 800bbb4:	3714      	adds	r7, #20
 800bbb6:	46bd      	mov	sp, r7
 800bbb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbbc:	4770      	bx	lr

0800bbbe <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800bbbe:	b480      	push	{r7}
 800bbc0:	b085      	sub	sp, #20
 800bbc2:	af00      	add	r7, sp, #0
 800bbc4:	60f8      	str	r0, [r7, #12]
 800bbc6:	60b9      	str	r1, [r7, #8]
 800bbc8:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800bbca:	68bb      	ldr	r3, [r7, #8]
 800bbcc:	681a      	ldr	r2, [r3, #0]
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	330c      	adds	r3, #12
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	429a      	cmp	r2, r3
 800bbd6:	d00a      	beq.n	800bbee <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800bbd8:	68bb      	ldr	r3, [r7, #8]
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d002      	beq.n	800bbe4 <netif_do_set_gw+0x26>
 800bbde:	68bb      	ldr	r3, [r7, #8]
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	e000      	b.n	800bbe6 <netif_do_set_gw+0x28>
 800bbe4:	2300      	movs	r3, #0
 800bbe6:	68fa      	ldr	r2, [r7, #12]
 800bbe8:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800bbea:	2301      	movs	r3, #1
 800bbec:	e000      	b.n	800bbf0 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800bbee:	2300      	movs	r3, #0
}
 800bbf0:	4618      	mov	r0, r3
 800bbf2:	3714      	adds	r7, #20
 800bbf4:	46bd      	mov	sp, r7
 800bbf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbfa:	4770      	bx	lr

0800bbfc <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800bbfc:	b580      	push	{r7, lr}
 800bbfe:	b088      	sub	sp, #32
 800bc00:	af00      	add	r7, sp, #0
 800bc02:	60f8      	str	r0, [r7, #12]
 800bc04:	60b9      	str	r1, [r7, #8]
 800bc06:	607a      	str	r2, [r7, #4]
 800bc08:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800bc0a:	2300      	movs	r3, #0
 800bc0c:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800bc0e:	2300      	movs	r3, #0
 800bc10:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800bc12:	68bb      	ldr	r3, [r7, #8]
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	d101      	bne.n	800bc1c <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800bc18:	4b1c      	ldr	r3, [pc, #112]	; (800bc8c <netif_set_addr+0x90>)
 800bc1a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d101      	bne.n	800bc26 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800bc22:	4b1a      	ldr	r3, [pc, #104]	; (800bc8c <netif_set_addr+0x90>)
 800bc24:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800bc26:	683b      	ldr	r3, [r7, #0]
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	d101      	bne.n	800bc30 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800bc2c:	4b17      	ldr	r3, [pc, #92]	; (800bc8c <netif_set_addr+0x90>)
 800bc2e:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800bc30:	68bb      	ldr	r3, [r7, #8]
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d003      	beq.n	800bc3e <netif_set_addr+0x42>
 800bc36:	68bb      	ldr	r3, [r7, #8]
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	d101      	bne.n	800bc42 <netif_set_addr+0x46>
 800bc3e:	2301      	movs	r3, #1
 800bc40:	e000      	b.n	800bc44 <netif_set_addr+0x48>
 800bc42:	2300      	movs	r3, #0
 800bc44:	617b      	str	r3, [r7, #20]
  if (remove) {
 800bc46:	697b      	ldr	r3, [r7, #20]
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d006      	beq.n	800bc5a <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800bc4c:	f107 0310 	add.w	r3, r7, #16
 800bc50:	461a      	mov	r2, r3
 800bc52:	68b9      	ldr	r1, [r7, #8]
 800bc54:	68f8      	ldr	r0, [r7, #12]
 800bc56:	f7ff ff49 	bl	800baec <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800bc5a:	69fa      	ldr	r2, [r7, #28]
 800bc5c:	6879      	ldr	r1, [r7, #4]
 800bc5e:	68f8      	ldr	r0, [r7, #12]
 800bc60:	f7ff ff8e 	bl	800bb80 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800bc64:	69ba      	ldr	r2, [r7, #24]
 800bc66:	6839      	ldr	r1, [r7, #0]
 800bc68:	68f8      	ldr	r0, [r7, #12]
 800bc6a:	f7ff ffa8 	bl	800bbbe <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800bc6e:	697b      	ldr	r3, [r7, #20]
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	d106      	bne.n	800bc82 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800bc74:	f107 0310 	add.w	r3, r7, #16
 800bc78:	461a      	mov	r2, r3
 800bc7a:	68b9      	ldr	r1, [r7, #8]
 800bc7c:	68f8      	ldr	r0, [r7, #12]
 800bc7e:	f7ff ff35 	bl	800baec <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800bc82:	bf00      	nop
 800bc84:	3720      	adds	r7, #32
 800bc86:	46bd      	mov	sp, r7
 800bc88:	bd80      	pop	{r7, pc}
 800bc8a:	bf00      	nop
 800bc8c:	08027060 	.word	0x08027060

0800bc90 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800bc90:	b480      	push	{r7}
 800bc92:	b083      	sub	sp, #12
 800bc94:	af00      	add	r7, sp, #0
 800bc96:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800bc98:	4a04      	ldr	r2, [pc, #16]	; (800bcac <netif_set_default+0x1c>)
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800bc9e:	bf00      	nop
 800bca0:	370c      	adds	r7, #12
 800bca2:	46bd      	mov	sp, r7
 800bca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bca8:	4770      	bx	lr
 800bcaa:	bf00      	nop
 800bcac:	20010d70 	.word	0x20010d70

0800bcb0 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800bcb0:	b580      	push	{r7, lr}
 800bcb2:	b082      	sub	sp, #8
 800bcb4:	af00      	add	r7, sp, #0
 800bcb6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	d107      	bne.n	800bcce <netif_set_up+0x1e>
 800bcbe:	4b0f      	ldr	r3, [pc, #60]	; (800bcfc <netif_set_up+0x4c>)
 800bcc0:	f44f 7254 	mov.w	r2, #848	; 0x350
 800bcc4:	490e      	ldr	r1, [pc, #56]	; (800bd00 <netif_set_up+0x50>)
 800bcc6:	480f      	ldr	r0, [pc, #60]	; (800bd04 <netif_set_up+0x54>)
 800bcc8:	f00c fb7c 	bl	80183c4 <iprintf>
 800bccc:	e013      	b.n	800bcf6 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800bcd4:	f003 0301 	and.w	r3, r3, #1
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d10c      	bne.n	800bcf6 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800bce2:	f043 0301 	orr.w	r3, r3, #1
 800bce6:	b2da      	uxtb	r2, r3
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800bcee:	2103      	movs	r1, #3
 800bcf0:	6878      	ldr	r0, [r7, #4]
 800bcf2:	f000 f809 	bl	800bd08 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800bcf6:	3708      	adds	r7, #8
 800bcf8:	46bd      	mov	sp, r7
 800bcfa:	bd80      	pop	{r7, pc}
 800bcfc:	0801a3fc 	.word	0x0801a3fc
 800bd00:	0801a584 	.word	0x0801a584
 800bd04:	0801a44c 	.word	0x0801a44c

0800bd08 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800bd08:	b580      	push	{r7, lr}
 800bd0a:	b082      	sub	sp, #8
 800bd0c:	af00      	add	r7, sp, #0
 800bd0e:	6078      	str	r0, [r7, #4]
 800bd10:	460b      	mov	r3, r1
 800bd12:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	d106      	bne.n	800bd28 <netif_issue_reports+0x20>
 800bd1a:	4b18      	ldr	r3, [pc, #96]	; (800bd7c <netif_issue_reports+0x74>)
 800bd1c:	f240 326d 	movw	r2, #877	; 0x36d
 800bd20:	4917      	ldr	r1, [pc, #92]	; (800bd80 <netif_issue_reports+0x78>)
 800bd22:	4818      	ldr	r0, [pc, #96]	; (800bd84 <netif_issue_reports+0x7c>)
 800bd24:	f00c fb4e 	bl	80183c4 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800bd2e:	f003 0304 	and.w	r3, r3, #4
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d01e      	beq.n	800bd74 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800bd3c:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d017      	beq.n	800bd74 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800bd44:	78fb      	ldrb	r3, [r7, #3]
 800bd46:	f003 0301 	and.w	r3, r3, #1
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d013      	beq.n	800bd76 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	3304      	adds	r3, #4
 800bd52:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	d00e      	beq.n	800bd76 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800bd5e:	f003 0308 	and.w	r3, r3, #8
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	d007      	beq.n	800bd76 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	3304      	adds	r3, #4
 800bd6a:	4619      	mov	r1, r3
 800bd6c:	6878      	ldr	r0, [r7, #4]
 800bd6e:	f00a fbc5 	bl	80164fc <etharp_request>
 800bd72:	e000      	b.n	800bd76 <netif_issue_reports+0x6e>
    return;
 800bd74:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800bd76:	3708      	adds	r7, #8
 800bd78:	46bd      	mov	sp, r7
 800bd7a:	bd80      	pop	{r7, pc}
 800bd7c:	0801a3fc 	.word	0x0801a3fc
 800bd80:	0801a5a0 	.word	0x0801a5a0
 800bd84:	0801a44c 	.word	0x0801a44c

0800bd88 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800bd88:	b580      	push	{r7, lr}
 800bd8a:	b082      	sub	sp, #8
 800bd8c:	af00      	add	r7, sp, #0
 800bd8e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	d107      	bne.n	800bda6 <netif_set_down+0x1e>
 800bd96:	4b12      	ldr	r3, [pc, #72]	; (800bde0 <netif_set_down+0x58>)
 800bd98:	f240 329b 	movw	r2, #923	; 0x39b
 800bd9c:	4911      	ldr	r1, [pc, #68]	; (800bde4 <netif_set_down+0x5c>)
 800bd9e:	4812      	ldr	r0, [pc, #72]	; (800bde8 <netif_set_down+0x60>)
 800bda0:	f00c fb10 	bl	80183c4 <iprintf>
 800bda4:	e019      	b.n	800bdda <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800bdac:	f003 0301 	and.w	r3, r3, #1
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	d012      	beq.n	800bdda <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800bdba:	f023 0301 	bic.w	r3, r3, #1
 800bdbe:	b2da      	uxtb	r2, r3
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800bdcc:	f003 0308 	and.w	r3, r3, #8
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	d002      	beq.n	800bdda <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800bdd4:	6878      	ldr	r0, [r7, #4]
 800bdd6:	f009 ff4b 	bl	8015c70 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800bdda:	3708      	adds	r7, #8
 800bddc:	46bd      	mov	sp, r7
 800bdde:	bd80      	pop	{r7, pc}
 800bde0:	0801a3fc 	.word	0x0801a3fc
 800bde4:	0801a5c4 	.word	0x0801a5c4
 800bde8:	0801a44c 	.word	0x0801a44c

0800bdec <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800bdec:	b580      	push	{r7, lr}
 800bdee:	b082      	sub	sp, #8
 800bdf0:	af00      	add	r7, sp, #0
 800bdf2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	d107      	bne.n	800be0a <netif_set_link_up+0x1e>
 800bdfa:	4b15      	ldr	r3, [pc, #84]	; (800be50 <netif_set_link_up+0x64>)
 800bdfc:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800be00:	4914      	ldr	r1, [pc, #80]	; (800be54 <netif_set_link_up+0x68>)
 800be02:	4815      	ldr	r0, [pc, #84]	; (800be58 <netif_set_link_up+0x6c>)
 800be04:	f00c fade 	bl	80183c4 <iprintf>
 800be08:	e01e      	b.n	800be48 <netif_set_link_up+0x5c>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800be10:	f003 0304 	and.w	r3, r3, #4
 800be14:	2b00      	cmp	r3, #0
 800be16:	d117      	bne.n	800be48 <netif_set_link_up+0x5c>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800be1e:	f043 0304 	orr.w	r3, r3, #4
 800be22:	b2da      	uxtb	r2, r3
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

#if LWIP_DHCP
    dhcp_network_changed(netif);
 800be2a:	6878      	ldr	r0, [r7, #4]
 800be2c:	f008 f990 	bl	8014150 <dhcp_network_changed>

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800be30:	2103      	movs	r1, #3
 800be32:	6878      	ldr	r0, [r7, #4]
 800be34:	f7ff ff68 	bl	800bd08 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	69db      	ldr	r3, [r3, #28]
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	d003      	beq.n	800be48 <netif_set_link_up+0x5c>
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	69db      	ldr	r3, [r3, #28]
 800be44:	6878      	ldr	r0, [r7, #4]
 800be46:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800be48:	3708      	adds	r7, #8
 800be4a:	46bd      	mov	sp, r7
 800be4c:	bd80      	pop	{r7, pc}
 800be4e:	bf00      	nop
 800be50:	0801a3fc 	.word	0x0801a3fc
 800be54:	0801a5e4 	.word	0x0801a5e4
 800be58:	0801a44c 	.word	0x0801a44c

0800be5c <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800be5c:	b580      	push	{r7, lr}
 800be5e:	b082      	sub	sp, #8
 800be60:	af00      	add	r7, sp, #0
 800be62:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	2b00      	cmp	r3, #0
 800be68:	d107      	bne.n	800be7a <netif_set_link_down+0x1e>
 800be6a:	4b11      	ldr	r3, [pc, #68]	; (800beb0 <netif_set_link_down+0x54>)
 800be6c:	f240 4206 	movw	r2, #1030	; 0x406
 800be70:	4910      	ldr	r1, [pc, #64]	; (800beb4 <netif_set_link_down+0x58>)
 800be72:	4811      	ldr	r0, [pc, #68]	; (800beb8 <netif_set_link_down+0x5c>)
 800be74:	f00c faa6 	bl	80183c4 <iprintf>
 800be78:	e017      	b.n	800beaa <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800be80:	f003 0304 	and.w	r3, r3, #4
 800be84:	2b00      	cmp	r3, #0
 800be86:	d010      	beq.n	800beaa <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800be8e:	f023 0304 	bic.w	r3, r3, #4
 800be92:	b2da      	uxtb	r2, r3
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    NETIF_LINK_CALLBACK(netif);
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	69db      	ldr	r3, [r3, #28]
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	d003      	beq.n	800beaa <netif_set_link_down+0x4e>
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	69db      	ldr	r3, [r3, #28]
 800bea6:	6878      	ldr	r0, [r7, #4]
 800bea8:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800beaa:	3708      	adds	r7, #8
 800beac:	46bd      	mov	sp, r7
 800beae:	bd80      	pop	{r7, pc}
 800beb0:	0801a3fc 	.word	0x0801a3fc
 800beb4:	0801a608 	.word	0x0801a608
 800beb8:	0801a44c 	.word	0x0801a44c

0800bebc <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800bebc:	b480      	push	{r7}
 800bebe:	b083      	sub	sp, #12
 800bec0:	af00      	add	r7, sp, #0
 800bec2:	6078      	str	r0, [r7, #4]
 800bec4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	2b00      	cmp	r3, #0
 800beca:	d002      	beq.n	800bed2 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	683a      	ldr	r2, [r7, #0]
 800bed0:	61da      	str	r2, [r3, #28]
  }
}
 800bed2:	bf00      	nop
 800bed4:	370c      	adds	r7, #12
 800bed6:	46bd      	mov	sp, r7
 800bed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bedc:	4770      	bx	lr

0800bede <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800bede:	b480      	push	{r7}
 800bee0:	b085      	sub	sp, #20
 800bee2:	af00      	add	r7, sp, #0
 800bee4:	60f8      	str	r0, [r7, #12]
 800bee6:	60b9      	str	r1, [r7, #8]
 800bee8:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800beea:	f06f 030b 	mvn.w	r3, #11
}
 800beee:	4618      	mov	r0, r3
 800bef0:	3714      	adds	r7, #20
 800bef2:	46bd      	mov	sp, r7
 800bef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bef8:	4770      	bx	lr
	...

0800befc <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800befc:	b480      	push	{r7}
 800befe:	b085      	sub	sp, #20
 800bf00:	af00      	add	r7, sp, #0
 800bf02:	4603      	mov	r3, r0
 800bf04:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800bf06:	79fb      	ldrb	r3, [r7, #7]
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d013      	beq.n	800bf34 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800bf0c:	4b0d      	ldr	r3, [pc, #52]	; (800bf44 <netif_get_by_index+0x48>)
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	60fb      	str	r3, [r7, #12]
 800bf12:	e00c      	b.n	800bf2e <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800bf1a:	3301      	adds	r3, #1
 800bf1c:	b2db      	uxtb	r3, r3
 800bf1e:	79fa      	ldrb	r2, [r7, #7]
 800bf20:	429a      	cmp	r2, r3
 800bf22:	d101      	bne.n	800bf28 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800bf24:	68fb      	ldr	r3, [r7, #12]
 800bf26:	e006      	b.n	800bf36 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800bf28:	68fb      	ldr	r3, [r7, #12]
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	60fb      	str	r3, [r7, #12]
 800bf2e:	68fb      	ldr	r3, [r7, #12]
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	d1ef      	bne.n	800bf14 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800bf34:	2300      	movs	r3, #0
}
 800bf36:	4618      	mov	r0, r3
 800bf38:	3714      	adds	r7, #20
 800bf3a:	46bd      	mov	sp, r7
 800bf3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf40:	4770      	bx	lr
 800bf42:	bf00      	nop
 800bf44:	20010d6c 	.word	0x20010d6c

0800bf48 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800bf48:	b580      	push	{r7, lr}
 800bf4a:	b082      	sub	sp, #8
 800bf4c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800bf4e:	f00c f843 	bl	8017fd8 <sys_arch_protect>
 800bf52:	6038      	str	r0, [r7, #0]
 800bf54:	4b0d      	ldr	r3, [pc, #52]	; (800bf8c <pbuf_free_ooseq+0x44>)
 800bf56:	2200      	movs	r2, #0
 800bf58:	701a      	strb	r2, [r3, #0]
 800bf5a:	6838      	ldr	r0, [r7, #0]
 800bf5c:	f00c f84a 	bl	8017ff4 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800bf60:	4b0b      	ldr	r3, [pc, #44]	; (800bf90 <pbuf_free_ooseq+0x48>)
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	607b      	str	r3, [r7, #4]
 800bf66:	e00a      	b.n	800bf7e <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d003      	beq.n	800bf78 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800bf70:	6878      	ldr	r0, [r7, #4]
 800bf72:	f002 fc83 	bl	800e87c <tcp_free_ooseq>
      return;
 800bf76:	e005      	b.n	800bf84 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	68db      	ldr	r3, [r3, #12]
 800bf7c:	607b      	str	r3, [r7, #4]
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	d1f1      	bne.n	800bf68 <pbuf_free_ooseq+0x20>
    }
  }
}
 800bf84:	3708      	adds	r7, #8
 800bf86:	46bd      	mov	sp, r7
 800bf88:	bd80      	pop	{r7, pc}
 800bf8a:	bf00      	nop
 800bf8c:	20010d75 	.word	0x20010d75
 800bf90:	20010d84 	.word	0x20010d84

0800bf94 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800bf94:	b580      	push	{r7, lr}
 800bf96:	b082      	sub	sp, #8
 800bf98:	af00      	add	r7, sp, #0
 800bf9a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800bf9c:	f7ff ffd4 	bl	800bf48 <pbuf_free_ooseq>
}
 800bfa0:	bf00      	nop
 800bfa2:	3708      	adds	r7, #8
 800bfa4:	46bd      	mov	sp, r7
 800bfa6:	bd80      	pop	{r7, pc}

0800bfa8 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800bfa8:	b580      	push	{r7, lr}
 800bfaa:	b082      	sub	sp, #8
 800bfac:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800bfae:	f00c f813 	bl	8017fd8 <sys_arch_protect>
 800bfb2:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800bfb4:	4b0f      	ldr	r3, [pc, #60]	; (800bff4 <pbuf_pool_is_empty+0x4c>)
 800bfb6:	781b      	ldrb	r3, [r3, #0]
 800bfb8:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800bfba:	4b0e      	ldr	r3, [pc, #56]	; (800bff4 <pbuf_pool_is_empty+0x4c>)
 800bfbc:	2201      	movs	r2, #1
 800bfbe:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800bfc0:	6878      	ldr	r0, [r7, #4]
 800bfc2:	f00c f817 	bl	8017ff4 <sys_arch_unprotect>

  if (!queued) {
 800bfc6:	78fb      	ldrb	r3, [r7, #3]
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	d10f      	bne.n	800bfec <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800bfcc:	2100      	movs	r1, #0
 800bfce:	480a      	ldr	r0, [pc, #40]	; (800bff8 <pbuf_pool_is_empty+0x50>)
 800bfd0:	f7fe f834 	bl	800a03c <tcpip_try_callback>
 800bfd4:	4603      	mov	r3, r0
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	d008      	beq.n	800bfec <pbuf_pool_is_empty+0x44>
 800bfda:	f00b fffd 	bl	8017fd8 <sys_arch_protect>
 800bfde:	6078      	str	r0, [r7, #4]
 800bfe0:	4b04      	ldr	r3, [pc, #16]	; (800bff4 <pbuf_pool_is_empty+0x4c>)
 800bfe2:	2200      	movs	r2, #0
 800bfe4:	701a      	strb	r2, [r3, #0]
 800bfe6:	6878      	ldr	r0, [r7, #4]
 800bfe8:	f00c f804 	bl	8017ff4 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800bfec:	bf00      	nop
 800bfee:	3708      	adds	r7, #8
 800bff0:	46bd      	mov	sp, r7
 800bff2:	bd80      	pop	{r7, pc}
 800bff4:	20010d75 	.word	0x20010d75
 800bff8:	0800bf95 	.word	0x0800bf95

0800bffc <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800bffc:	b480      	push	{r7}
 800bffe:	b085      	sub	sp, #20
 800c000:	af00      	add	r7, sp, #0
 800c002:	60f8      	str	r0, [r7, #12]
 800c004:	60b9      	str	r1, [r7, #8]
 800c006:	4611      	mov	r1, r2
 800c008:	461a      	mov	r2, r3
 800c00a:	460b      	mov	r3, r1
 800c00c:	80fb      	strh	r3, [r7, #6]
 800c00e:	4613      	mov	r3, r2
 800c010:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800c012:	68fb      	ldr	r3, [r7, #12]
 800c014:	2200      	movs	r2, #0
 800c016:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800c018:	68fb      	ldr	r3, [r7, #12]
 800c01a:	68ba      	ldr	r2, [r7, #8]
 800c01c:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800c01e:	68fb      	ldr	r3, [r7, #12]
 800c020:	88fa      	ldrh	r2, [r7, #6]
 800c022:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800c024:	68fb      	ldr	r3, [r7, #12]
 800c026:	88ba      	ldrh	r2, [r7, #4]
 800c028:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800c02a:	8b3b      	ldrh	r3, [r7, #24]
 800c02c:	b2da      	uxtb	r2, r3
 800c02e:	68fb      	ldr	r3, [r7, #12]
 800c030:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800c032:	68fb      	ldr	r3, [r7, #12]
 800c034:	7f3a      	ldrb	r2, [r7, #28]
 800c036:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800c038:	68fb      	ldr	r3, [r7, #12]
 800c03a:	2201      	movs	r2, #1
 800c03c:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800c03e:	68fb      	ldr	r3, [r7, #12]
 800c040:	2200      	movs	r2, #0
 800c042:	73da      	strb	r2, [r3, #15]
}
 800c044:	bf00      	nop
 800c046:	3714      	adds	r7, #20
 800c048:	46bd      	mov	sp, r7
 800c04a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c04e:	4770      	bx	lr

0800c050 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800c050:	b580      	push	{r7, lr}
 800c052:	b08c      	sub	sp, #48	; 0x30
 800c054:	af02      	add	r7, sp, #8
 800c056:	4603      	mov	r3, r0
 800c058:	71fb      	strb	r3, [r7, #7]
 800c05a:	460b      	mov	r3, r1
 800c05c:	80bb      	strh	r3, [r7, #4]
 800c05e:	4613      	mov	r3, r2
 800c060:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800c062:	79fb      	ldrb	r3, [r7, #7]
 800c064:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800c066:	887b      	ldrh	r3, [r7, #2]
 800c068:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800c06c:	d07f      	beq.n	800c16e <pbuf_alloc+0x11e>
 800c06e:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800c072:	f300 80c8 	bgt.w	800c206 <pbuf_alloc+0x1b6>
 800c076:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800c07a:	d010      	beq.n	800c09e <pbuf_alloc+0x4e>
 800c07c:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800c080:	f300 80c1 	bgt.w	800c206 <pbuf_alloc+0x1b6>
 800c084:	2b01      	cmp	r3, #1
 800c086:	d002      	beq.n	800c08e <pbuf_alloc+0x3e>
 800c088:	2b41      	cmp	r3, #65	; 0x41
 800c08a:	f040 80bc 	bne.w	800c206 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800c08e:	887a      	ldrh	r2, [r7, #2]
 800c090:	88bb      	ldrh	r3, [r7, #4]
 800c092:	4619      	mov	r1, r3
 800c094:	2000      	movs	r0, #0
 800c096:	f000 f8d1 	bl	800c23c <pbuf_alloc_reference>
 800c09a:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800c09c:	e0bd      	b.n	800c21a <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800c09e:	2300      	movs	r3, #0
 800c0a0:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800c0a2:	2300      	movs	r3, #0
 800c0a4:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800c0a6:	88bb      	ldrh	r3, [r7, #4]
 800c0a8:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800c0aa:	200c      	movs	r0, #12
 800c0ac:	f7ff fb8e 	bl	800b7cc <memp_malloc>
 800c0b0:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800c0b2:	693b      	ldr	r3, [r7, #16]
 800c0b4:	2b00      	cmp	r3, #0
 800c0b6:	d109      	bne.n	800c0cc <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800c0b8:	f7ff ff76 	bl	800bfa8 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800c0bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d002      	beq.n	800c0c8 <pbuf_alloc+0x78>
            pbuf_free(p);
 800c0c2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c0c4:	f000 faa8 	bl	800c618 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800c0c8:	2300      	movs	r3, #0
 800c0ca:	e0a7      	b.n	800c21c <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800c0cc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c0ce:	3303      	adds	r3, #3
 800c0d0:	b29b      	uxth	r3, r3
 800c0d2:	f023 0303 	bic.w	r3, r3, #3
 800c0d6:	b29b      	uxth	r3, r3
 800c0d8:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800c0dc:	b29b      	uxth	r3, r3
 800c0de:	8b7a      	ldrh	r2, [r7, #26]
 800c0e0:	4293      	cmp	r3, r2
 800c0e2:	bf28      	it	cs
 800c0e4:	4613      	movcs	r3, r2
 800c0e6:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800c0e8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c0ea:	3310      	adds	r3, #16
 800c0ec:	693a      	ldr	r2, [r7, #16]
 800c0ee:	4413      	add	r3, r2
 800c0f0:	3303      	adds	r3, #3
 800c0f2:	f023 0303 	bic.w	r3, r3, #3
 800c0f6:	4618      	mov	r0, r3
 800c0f8:	89f9      	ldrh	r1, [r7, #14]
 800c0fa:	8b7a      	ldrh	r2, [r7, #26]
 800c0fc:	2300      	movs	r3, #0
 800c0fe:	9301      	str	r3, [sp, #4]
 800c100:	887b      	ldrh	r3, [r7, #2]
 800c102:	9300      	str	r3, [sp, #0]
 800c104:	460b      	mov	r3, r1
 800c106:	4601      	mov	r1, r0
 800c108:	6938      	ldr	r0, [r7, #16]
 800c10a:	f7ff ff77 	bl	800bffc <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800c10e:	693b      	ldr	r3, [r7, #16]
 800c110:	685b      	ldr	r3, [r3, #4]
 800c112:	f003 0303 	and.w	r3, r3, #3
 800c116:	2b00      	cmp	r3, #0
 800c118:	d006      	beq.n	800c128 <pbuf_alloc+0xd8>
 800c11a:	4b42      	ldr	r3, [pc, #264]	; (800c224 <pbuf_alloc+0x1d4>)
 800c11c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c120:	4941      	ldr	r1, [pc, #260]	; (800c228 <pbuf_alloc+0x1d8>)
 800c122:	4842      	ldr	r0, [pc, #264]	; (800c22c <pbuf_alloc+0x1dc>)
 800c124:	f00c f94e 	bl	80183c4 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800c128:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c12a:	3303      	adds	r3, #3
 800c12c:	f023 0303 	bic.w	r3, r3, #3
 800c130:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800c134:	d106      	bne.n	800c144 <pbuf_alloc+0xf4>
 800c136:	4b3b      	ldr	r3, [pc, #236]	; (800c224 <pbuf_alloc+0x1d4>)
 800c138:	f44f 7281 	mov.w	r2, #258	; 0x102
 800c13c:	493c      	ldr	r1, [pc, #240]	; (800c230 <pbuf_alloc+0x1e0>)
 800c13e:	483b      	ldr	r0, [pc, #236]	; (800c22c <pbuf_alloc+0x1dc>)
 800c140:	f00c f940 	bl	80183c4 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800c144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c146:	2b00      	cmp	r3, #0
 800c148:	d102      	bne.n	800c150 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800c14a:	693b      	ldr	r3, [r7, #16]
 800c14c:	627b      	str	r3, [r7, #36]	; 0x24
 800c14e:	e002      	b.n	800c156 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800c150:	69fb      	ldr	r3, [r7, #28]
 800c152:	693a      	ldr	r2, [r7, #16]
 800c154:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800c156:	693b      	ldr	r3, [r7, #16]
 800c158:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800c15a:	8b7a      	ldrh	r2, [r7, #26]
 800c15c:	89fb      	ldrh	r3, [r7, #14]
 800c15e:	1ad3      	subs	r3, r2, r3
 800c160:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800c162:	2300      	movs	r3, #0
 800c164:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800c166:	8b7b      	ldrh	r3, [r7, #26]
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d19e      	bne.n	800c0aa <pbuf_alloc+0x5a>
      break;
 800c16c:	e055      	b.n	800c21a <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800c16e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c170:	3303      	adds	r3, #3
 800c172:	b29b      	uxth	r3, r3
 800c174:	f023 0303 	bic.w	r3, r3, #3
 800c178:	b29a      	uxth	r2, r3
 800c17a:	88bb      	ldrh	r3, [r7, #4]
 800c17c:	3303      	adds	r3, #3
 800c17e:	b29b      	uxth	r3, r3
 800c180:	f023 0303 	bic.w	r3, r3, #3
 800c184:	b29b      	uxth	r3, r3
 800c186:	4413      	add	r3, r2
 800c188:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800c18a:	8b3b      	ldrh	r3, [r7, #24]
 800c18c:	3310      	adds	r3, #16
 800c18e:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800c190:	8b3a      	ldrh	r2, [r7, #24]
 800c192:	88bb      	ldrh	r3, [r7, #4]
 800c194:	3303      	adds	r3, #3
 800c196:	f023 0303 	bic.w	r3, r3, #3
 800c19a:	429a      	cmp	r2, r3
 800c19c:	d306      	bcc.n	800c1ac <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800c19e:	8afa      	ldrh	r2, [r7, #22]
 800c1a0:	88bb      	ldrh	r3, [r7, #4]
 800c1a2:	3303      	adds	r3, #3
 800c1a4:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800c1a8:	429a      	cmp	r2, r3
 800c1aa:	d201      	bcs.n	800c1b0 <pbuf_alloc+0x160>
        return NULL;
 800c1ac:	2300      	movs	r3, #0
 800c1ae:	e035      	b.n	800c21c <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800c1b0:	8afb      	ldrh	r3, [r7, #22]
 800c1b2:	4618      	mov	r0, r3
 800c1b4:	f7ff f966 	bl	800b484 <mem_malloc>
 800c1b8:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800c1ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d101      	bne.n	800c1c4 <pbuf_alloc+0x174>
        return NULL;
 800c1c0:	2300      	movs	r3, #0
 800c1c2:	e02b      	b.n	800c21c <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800c1c4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c1c6:	3310      	adds	r3, #16
 800c1c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c1ca:	4413      	add	r3, r2
 800c1cc:	3303      	adds	r3, #3
 800c1ce:	f023 0303 	bic.w	r3, r3, #3
 800c1d2:	4618      	mov	r0, r3
 800c1d4:	88b9      	ldrh	r1, [r7, #4]
 800c1d6:	88ba      	ldrh	r2, [r7, #4]
 800c1d8:	2300      	movs	r3, #0
 800c1da:	9301      	str	r3, [sp, #4]
 800c1dc:	887b      	ldrh	r3, [r7, #2]
 800c1de:	9300      	str	r3, [sp, #0]
 800c1e0:	460b      	mov	r3, r1
 800c1e2:	4601      	mov	r1, r0
 800c1e4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c1e6:	f7ff ff09 	bl	800bffc <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800c1ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1ec:	685b      	ldr	r3, [r3, #4]
 800c1ee:	f003 0303 	and.w	r3, r3, #3
 800c1f2:	2b00      	cmp	r3, #0
 800c1f4:	d010      	beq.n	800c218 <pbuf_alloc+0x1c8>
 800c1f6:	4b0b      	ldr	r3, [pc, #44]	; (800c224 <pbuf_alloc+0x1d4>)
 800c1f8:	f44f 7291 	mov.w	r2, #290	; 0x122
 800c1fc:	490d      	ldr	r1, [pc, #52]	; (800c234 <pbuf_alloc+0x1e4>)
 800c1fe:	480b      	ldr	r0, [pc, #44]	; (800c22c <pbuf_alloc+0x1dc>)
 800c200:	f00c f8e0 	bl	80183c4 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800c204:	e008      	b.n	800c218 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800c206:	4b07      	ldr	r3, [pc, #28]	; (800c224 <pbuf_alloc+0x1d4>)
 800c208:	f240 1227 	movw	r2, #295	; 0x127
 800c20c:	490a      	ldr	r1, [pc, #40]	; (800c238 <pbuf_alloc+0x1e8>)
 800c20e:	4807      	ldr	r0, [pc, #28]	; (800c22c <pbuf_alloc+0x1dc>)
 800c210:	f00c f8d8 	bl	80183c4 <iprintf>
      return NULL;
 800c214:	2300      	movs	r3, #0
 800c216:	e001      	b.n	800c21c <pbuf_alloc+0x1cc>
      break;
 800c218:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800c21a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c21c:	4618      	mov	r0, r3
 800c21e:	3728      	adds	r7, #40	; 0x28
 800c220:	46bd      	mov	sp, r7
 800c222:	bd80      	pop	{r7, pc}
 800c224:	0801a62c 	.word	0x0801a62c
 800c228:	0801a65c 	.word	0x0801a65c
 800c22c:	0801a68c 	.word	0x0801a68c
 800c230:	0801a6b4 	.word	0x0801a6b4
 800c234:	0801a6e8 	.word	0x0801a6e8
 800c238:	0801a714 	.word	0x0801a714

0800c23c <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800c23c:	b580      	push	{r7, lr}
 800c23e:	b086      	sub	sp, #24
 800c240:	af02      	add	r7, sp, #8
 800c242:	6078      	str	r0, [r7, #4]
 800c244:	460b      	mov	r3, r1
 800c246:	807b      	strh	r3, [r7, #2]
 800c248:	4613      	mov	r3, r2
 800c24a:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800c24c:	883b      	ldrh	r3, [r7, #0]
 800c24e:	2b41      	cmp	r3, #65	; 0x41
 800c250:	d009      	beq.n	800c266 <pbuf_alloc_reference+0x2a>
 800c252:	883b      	ldrh	r3, [r7, #0]
 800c254:	2b01      	cmp	r3, #1
 800c256:	d006      	beq.n	800c266 <pbuf_alloc_reference+0x2a>
 800c258:	4b0f      	ldr	r3, [pc, #60]	; (800c298 <pbuf_alloc_reference+0x5c>)
 800c25a:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800c25e:	490f      	ldr	r1, [pc, #60]	; (800c29c <pbuf_alloc_reference+0x60>)
 800c260:	480f      	ldr	r0, [pc, #60]	; (800c2a0 <pbuf_alloc_reference+0x64>)
 800c262:	f00c f8af 	bl	80183c4 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800c266:	200b      	movs	r0, #11
 800c268:	f7ff fab0 	bl	800b7cc <memp_malloc>
 800c26c:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800c26e:	68fb      	ldr	r3, [r7, #12]
 800c270:	2b00      	cmp	r3, #0
 800c272:	d101      	bne.n	800c278 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800c274:	2300      	movs	r3, #0
 800c276:	e00b      	b.n	800c290 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800c278:	8879      	ldrh	r1, [r7, #2]
 800c27a:	887a      	ldrh	r2, [r7, #2]
 800c27c:	2300      	movs	r3, #0
 800c27e:	9301      	str	r3, [sp, #4]
 800c280:	883b      	ldrh	r3, [r7, #0]
 800c282:	9300      	str	r3, [sp, #0]
 800c284:	460b      	mov	r3, r1
 800c286:	6879      	ldr	r1, [r7, #4]
 800c288:	68f8      	ldr	r0, [r7, #12]
 800c28a:	f7ff feb7 	bl	800bffc <pbuf_init_alloced_pbuf>
  return p;
 800c28e:	68fb      	ldr	r3, [r7, #12]
}
 800c290:	4618      	mov	r0, r3
 800c292:	3710      	adds	r7, #16
 800c294:	46bd      	mov	sp, r7
 800c296:	bd80      	pop	{r7, pc}
 800c298:	0801a62c 	.word	0x0801a62c
 800c29c:	0801a730 	.word	0x0801a730
 800c2a0:	0801a68c 	.word	0x0801a68c

0800c2a4 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800c2a4:	b580      	push	{r7, lr}
 800c2a6:	b088      	sub	sp, #32
 800c2a8:	af02      	add	r7, sp, #8
 800c2aa:	607b      	str	r3, [r7, #4]
 800c2ac:	4603      	mov	r3, r0
 800c2ae:	73fb      	strb	r3, [r7, #15]
 800c2b0:	460b      	mov	r3, r1
 800c2b2:	81bb      	strh	r3, [r7, #12]
 800c2b4:	4613      	mov	r3, r2
 800c2b6:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800c2b8:	7bfb      	ldrb	r3, [r7, #15]
 800c2ba:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800c2bc:	8a7b      	ldrh	r3, [r7, #18]
 800c2be:	3303      	adds	r3, #3
 800c2c0:	f023 0203 	bic.w	r2, r3, #3
 800c2c4:	89bb      	ldrh	r3, [r7, #12]
 800c2c6:	441a      	add	r2, r3
 800c2c8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c2ca:	429a      	cmp	r2, r3
 800c2cc:	d901      	bls.n	800c2d2 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800c2ce:	2300      	movs	r3, #0
 800c2d0:	e018      	b.n	800c304 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800c2d2:	6a3b      	ldr	r3, [r7, #32]
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	d007      	beq.n	800c2e8 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800c2d8:	8a7b      	ldrh	r3, [r7, #18]
 800c2da:	3303      	adds	r3, #3
 800c2dc:	f023 0303 	bic.w	r3, r3, #3
 800c2e0:	6a3a      	ldr	r2, [r7, #32]
 800c2e2:	4413      	add	r3, r2
 800c2e4:	617b      	str	r3, [r7, #20]
 800c2e6:	e001      	b.n	800c2ec <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800c2e8:	2300      	movs	r3, #0
 800c2ea:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800c2ec:	6878      	ldr	r0, [r7, #4]
 800c2ee:	89b9      	ldrh	r1, [r7, #12]
 800c2f0:	89ba      	ldrh	r2, [r7, #12]
 800c2f2:	2302      	movs	r3, #2
 800c2f4:	9301      	str	r3, [sp, #4]
 800c2f6:	897b      	ldrh	r3, [r7, #10]
 800c2f8:	9300      	str	r3, [sp, #0]
 800c2fa:	460b      	mov	r3, r1
 800c2fc:	6979      	ldr	r1, [r7, #20]
 800c2fe:	f7ff fe7d 	bl	800bffc <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800c302:	687b      	ldr	r3, [r7, #4]
}
 800c304:	4618      	mov	r0, r3
 800c306:	3718      	adds	r7, #24
 800c308:	46bd      	mov	sp, r7
 800c30a:	bd80      	pop	{r7, pc}

0800c30c <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800c30c:	b580      	push	{r7, lr}
 800c30e:	b084      	sub	sp, #16
 800c310:	af00      	add	r7, sp, #0
 800c312:	6078      	str	r0, [r7, #4]
 800c314:	460b      	mov	r3, r1
 800c316:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	d106      	bne.n	800c32c <pbuf_realloc+0x20>
 800c31e:	4b3a      	ldr	r3, [pc, #232]	; (800c408 <pbuf_realloc+0xfc>)
 800c320:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800c324:	4939      	ldr	r1, [pc, #228]	; (800c40c <pbuf_realloc+0x100>)
 800c326:	483a      	ldr	r0, [pc, #232]	; (800c410 <pbuf_realloc+0x104>)
 800c328:	f00c f84c 	bl	80183c4 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	891b      	ldrh	r3, [r3, #8]
 800c330:	887a      	ldrh	r2, [r7, #2]
 800c332:	429a      	cmp	r2, r3
 800c334:	d263      	bcs.n	800c3fe <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	891a      	ldrh	r2, [r3, #8]
 800c33a:	887b      	ldrh	r3, [r7, #2]
 800c33c:	1ad3      	subs	r3, r2, r3
 800c33e:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800c340:	887b      	ldrh	r3, [r7, #2]
 800c342:	817b      	strh	r3, [r7, #10]
  q = p;
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800c348:	e018      	b.n	800c37c <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800c34a:	68fb      	ldr	r3, [r7, #12]
 800c34c:	895b      	ldrh	r3, [r3, #10]
 800c34e:	897a      	ldrh	r2, [r7, #10]
 800c350:	1ad3      	subs	r3, r2, r3
 800c352:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800c354:	68fb      	ldr	r3, [r7, #12]
 800c356:	891a      	ldrh	r2, [r3, #8]
 800c358:	893b      	ldrh	r3, [r7, #8]
 800c35a:	1ad3      	subs	r3, r2, r3
 800c35c:	b29a      	uxth	r2, r3
 800c35e:	68fb      	ldr	r3, [r7, #12]
 800c360:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800c362:	68fb      	ldr	r3, [r7, #12]
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800c368:	68fb      	ldr	r3, [r7, #12]
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	d106      	bne.n	800c37c <pbuf_realloc+0x70>
 800c36e:	4b26      	ldr	r3, [pc, #152]	; (800c408 <pbuf_realloc+0xfc>)
 800c370:	f240 12af 	movw	r2, #431	; 0x1af
 800c374:	4927      	ldr	r1, [pc, #156]	; (800c414 <pbuf_realloc+0x108>)
 800c376:	4826      	ldr	r0, [pc, #152]	; (800c410 <pbuf_realloc+0x104>)
 800c378:	f00c f824 	bl	80183c4 <iprintf>
  while (rem_len > q->len) {
 800c37c:	68fb      	ldr	r3, [r7, #12]
 800c37e:	895b      	ldrh	r3, [r3, #10]
 800c380:	897a      	ldrh	r2, [r7, #10]
 800c382:	429a      	cmp	r2, r3
 800c384:	d8e1      	bhi.n	800c34a <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800c386:	68fb      	ldr	r3, [r7, #12]
 800c388:	7b1b      	ldrb	r3, [r3, #12]
 800c38a:	f003 030f 	and.w	r3, r3, #15
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d121      	bne.n	800c3d6 <pbuf_realloc+0xca>
 800c392:	68fb      	ldr	r3, [r7, #12]
 800c394:	895b      	ldrh	r3, [r3, #10]
 800c396:	897a      	ldrh	r2, [r7, #10]
 800c398:	429a      	cmp	r2, r3
 800c39a:	d01c      	beq.n	800c3d6 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800c39c:	68fb      	ldr	r3, [r7, #12]
 800c39e:	7b5b      	ldrb	r3, [r3, #13]
 800c3a0:	f003 0302 	and.w	r3, r3, #2
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	d116      	bne.n	800c3d6 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800c3a8:	68fb      	ldr	r3, [r7, #12]
 800c3aa:	685a      	ldr	r2, [r3, #4]
 800c3ac:	68fb      	ldr	r3, [r7, #12]
 800c3ae:	1ad3      	subs	r3, r2, r3
 800c3b0:	b29a      	uxth	r2, r3
 800c3b2:	897b      	ldrh	r3, [r7, #10]
 800c3b4:	4413      	add	r3, r2
 800c3b6:	b29b      	uxth	r3, r3
 800c3b8:	4619      	mov	r1, r3
 800c3ba:	68f8      	ldr	r0, [r7, #12]
 800c3bc:	f7fe ff58 	bl	800b270 <mem_trim>
 800c3c0:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800c3c2:	68fb      	ldr	r3, [r7, #12]
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	d106      	bne.n	800c3d6 <pbuf_realloc+0xca>
 800c3c8:	4b0f      	ldr	r3, [pc, #60]	; (800c408 <pbuf_realloc+0xfc>)
 800c3ca:	f240 12bd 	movw	r2, #445	; 0x1bd
 800c3ce:	4912      	ldr	r1, [pc, #72]	; (800c418 <pbuf_realloc+0x10c>)
 800c3d0:	480f      	ldr	r0, [pc, #60]	; (800c410 <pbuf_realloc+0x104>)
 800c3d2:	f00b fff7 	bl	80183c4 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800c3d6:	68fb      	ldr	r3, [r7, #12]
 800c3d8:	897a      	ldrh	r2, [r7, #10]
 800c3da:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800c3dc:	68fb      	ldr	r3, [r7, #12]
 800c3de:	895a      	ldrh	r2, [r3, #10]
 800c3e0:	68fb      	ldr	r3, [r7, #12]
 800c3e2:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800c3e4:	68fb      	ldr	r3, [r7, #12]
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	d004      	beq.n	800c3f6 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800c3ec:	68fb      	ldr	r3, [r7, #12]
 800c3ee:	681b      	ldr	r3, [r3, #0]
 800c3f0:	4618      	mov	r0, r3
 800c3f2:	f000 f911 	bl	800c618 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800c3f6:	68fb      	ldr	r3, [r7, #12]
 800c3f8:	2200      	movs	r2, #0
 800c3fa:	601a      	str	r2, [r3, #0]
 800c3fc:	e000      	b.n	800c400 <pbuf_realloc+0xf4>
    return;
 800c3fe:	bf00      	nop

}
 800c400:	3710      	adds	r7, #16
 800c402:	46bd      	mov	sp, r7
 800c404:	bd80      	pop	{r7, pc}
 800c406:	bf00      	nop
 800c408:	0801a62c 	.word	0x0801a62c
 800c40c:	0801a744 	.word	0x0801a744
 800c410:	0801a68c 	.word	0x0801a68c
 800c414:	0801a75c 	.word	0x0801a75c
 800c418:	0801a774 	.word	0x0801a774

0800c41c <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800c41c:	b580      	push	{r7, lr}
 800c41e:	b086      	sub	sp, #24
 800c420:	af00      	add	r7, sp, #0
 800c422:	60f8      	str	r0, [r7, #12]
 800c424:	60b9      	str	r1, [r7, #8]
 800c426:	4613      	mov	r3, r2
 800c428:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800c42a:	68fb      	ldr	r3, [r7, #12]
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	d106      	bne.n	800c43e <pbuf_add_header_impl+0x22>
 800c430:	4b2b      	ldr	r3, [pc, #172]	; (800c4e0 <pbuf_add_header_impl+0xc4>)
 800c432:	f240 12df 	movw	r2, #479	; 0x1df
 800c436:	492b      	ldr	r1, [pc, #172]	; (800c4e4 <pbuf_add_header_impl+0xc8>)
 800c438:	482b      	ldr	r0, [pc, #172]	; (800c4e8 <pbuf_add_header_impl+0xcc>)
 800c43a:	f00b ffc3 	bl	80183c4 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800c43e:	68fb      	ldr	r3, [r7, #12]
 800c440:	2b00      	cmp	r3, #0
 800c442:	d003      	beq.n	800c44c <pbuf_add_header_impl+0x30>
 800c444:	68bb      	ldr	r3, [r7, #8]
 800c446:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c44a:	d301      	bcc.n	800c450 <pbuf_add_header_impl+0x34>
    return 1;
 800c44c:	2301      	movs	r3, #1
 800c44e:	e043      	b.n	800c4d8 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800c450:	68bb      	ldr	r3, [r7, #8]
 800c452:	2b00      	cmp	r3, #0
 800c454:	d101      	bne.n	800c45a <pbuf_add_header_impl+0x3e>
    return 0;
 800c456:	2300      	movs	r3, #0
 800c458:	e03e      	b.n	800c4d8 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800c45a:	68bb      	ldr	r3, [r7, #8]
 800c45c:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800c45e:	68fb      	ldr	r3, [r7, #12]
 800c460:	891a      	ldrh	r2, [r3, #8]
 800c462:	8a7b      	ldrh	r3, [r7, #18]
 800c464:	4413      	add	r3, r2
 800c466:	b29b      	uxth	r3, r3
 800c468:	8a7a      	ldrh	r2, [r7, #18]
 800c46a:	429a      	cmp	r2, r3
 800c46c:	d901      	bls.n	800c472 <pbuf_add_header_impl+0x56>
    return 1;
 800c46e:	2301      	movs	r3, #1
 800c470:	e032      	b.n	800c4d8 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800c472:	68fb      	ldr	r3, [r7, #12]
 800c474:	7b1b      	ldrb	r3, [r3, #12]
 800c476:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800c478:	8a3b      	ldrh	r3, [r7, #16]
 800c47a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d00c      	beq.n	800c49c <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800c482:	68fb      	ldr	r3, [r7, #12]
 800c484:	685a      	ldr	r2, [r3, #4]
 800c486:	68bb      	ldr	r3, [r7, #8]
 800c488:	425b      	negs	r3, r3
 800c48a:	4413      	add	r3, r2
 800c48c:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800c48e:	68fb      	ldr	r3, [r7, #12]
 800c490:	3310      	adds	r3, #16
 800c492:	697a      	ldr	r2, [r7, #20]
 800c494:	429a      	cmp	r2, r3
 800c496:	d20d      	bcs.n	800c4b4 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800c498:	2301      	movs	r3, #1
 800c49a:	e01d      	b.n	800c4d8 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800c49c:	79fb      	ldrb	r3, [r7, #7]
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	d006      	beq.n	800c4b0 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800c4a2:	68fb      	ldr	r3, [r7, #12]
 800c4a4:	685a      	ldr	r2, [r3, #4]
 800c4a6:	68bb      	ldr	r3, [r7, #8]
 800c4a8:	425b      	negs	r3, r3
 800c4aa:	4413      	add	r3, r2
 800c4ac:	617b      	str	r3, [r7, #20]
 800c4ae:	e001      	b.n	800c4b4 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800c4b0:	2301      	movs	r3, #1
 800c4b2:	e011      	b.n	800c4d8 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800c4b4:	68fb      	ldr	r3, [r7, #12]
 800c4b6:	697a      	ldr	r2, [r7, #20]
 800c4b8:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800c4ba:	68fb      	ldr	r3, [r7, #12]
 800c4bc:	895a      	ldrh	r2, [r3, #10]
 800c4be:	8a7b      	ldrh	r3, [r7, #18]
 800c4c0:	4413      	add	r3, r2
 800c4c2:	b29a      	uxth	r2, r3
 800c4c4:	68fb      	ldr	r3, [r7, #12]
 800c4c6:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800c4c8:	68fb      	ldr	r3, [r7, #12]
 800c4ca:	891a      	ldrh	r2, [r3, #8]
 800c4cc:	8a7b      	ldrh	r3, [r7, #18]
 800c4ce:	4413      	add	r3, r2
 800c4d0:	b29a      	uxth	r2, r3
 800c4d2:	68fb      	ldr	r3, [r7, #12]
 800c4d4:	811a      	strh	r2, [r3, #8]


  return 0;
 800c4d6:	2300      	movs	r3, #0
}
 800c4d8:	4618      	mov	r0, r3
 800c4da:	3718      	adds	r7, #24
 800c4dc:	46bd      	mov	sp, r7
 800c4de:	bd80      	pop	{r7, pc}
 800c4e0:	0801a62c 	.word	0x0801a62c
 800c4e4:	0801a790 	.word	0x0801a790
 800c4e8:	0801a68c 	.word	0x0801a68c

0800c4ec <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800c4ec:	b580      	push	{r7, lr}
 800c4ee:	b082      	sub	sp, #8
 800c4f0:	af00      	add	r7, sp, #0
 800c4f2:	6078      	str	r0, [r7, #4]
 800c4f4:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800c4f6:	2200      	movs	r2, #0
 800c4f8:	6839      	ldr	r1, [r7, #0]
 800c4fa:	6878      	ldr	r0, [r7, #4]
 800c4fc:	f7ff ff8e 	bl	800c41c <pbuf_add_header_impl>
 800c500:	4603      	mov	r3, r0
}
 800c502:	4618      	mov	r0, r3
 800c504:	3708      	adds	r7, #8
 800c506:	46bd      	mov	sp, r7
 800c508:	bd80      	pop	{r7, pc}
	...

0800c50c <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800c50c:	b580      	push	{r7, lr}
 800c50e:	b084      	sub	sp, #16
 800c510:	af00      	add	r7, sp, #0
 800c512:	6078      	str	r0, [r7, #4]
 800c514:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	2b00      	cmp	r3, #0
 800c51a:	d106      	bne.n	800c52a <pbuf_remove_header+0x1e>
 800c51c:	4b20      	ldr	r3, [pc, #128]	; (800c5a0 <pbuf_remove_header+0x94>)
 800c51e:	f240 224b 	movw	r2, #587	; 0x24b
 800c522:	4920      	ldr	r1, [pc, #128]	; (800c5a4 <pbuf_remove_header+0x98>)
 800c524:	4820      	ldr	r0, [pc, #128]	; (800c5a8 <pbuf_remove_header+0x9c>)
 800c526:	f00b ff4d 	bl	80183c4 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	d003      	beq.n	800c538 <pbuf_remove_header+0x2c>
 800c530:	683b      	ldr	r3, [r7, #0]
 800c532:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c536:	d301      	bcc.n	800c53c <pbuf_remove_header+0x30>
    return 1;
 800c538:	2301      	movs	r3, #1
 800c53a:	e02c      	b.n	800c596 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800c53c:	683b      	ldr	r3, [r7, #0]
 800c53e:	2b00      	cmp	r3, #0
 800c540:	d101      	bne.n	800c546 <pbuf_remove_header+0x3a>
    return 0;
 800c542:	2300      	movs	r3, #0
 800c544:	e027      	b.n	800c596 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800c546:	683b      	ldr	r3, [r7, #0]
 800c548:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	895b      	ldrh	r3, [r3, #10]
 800c54e:	89fa      	ldrh	r2, [r7, #14]
 800c550:	429a      	cmp	r2, r3
 800c552:	d908      	bls.n	800c566 <pbuf_remove_header+0x5a>
 800c554:	4b12      	ldr	r3, [pc, #72]	; (800c5a0 <pbuf_remove_header+0x94>)
 800c556:	f240 2255 	movw	r2, #597	; 0x255
 800c55a:	4914      	ldr	r1, [pc, #80]	; (800c5ac <pbuf_remove_header+0xa0>)
 800c55c:	4812      	ldr	r0, [pc, #72]	; (800c5a8 <pbuf_remove_header+0x9c>)
 800c55e:	f00b ff31 	bl	80183c4 <iprintf>
 800c562:	2301      	movs	r3, #1
 800c564:	e017      	b.n	800c596 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	685b      	ldr	r3, [r3, #4]
 800c56a:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	685a      	ldr	r2, [r3, #4]
 800c570:	683b      	ldr	r3, [r7, #0]
 800c572:	441a      	add	r2, r3
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	895a      	ldrh	r2, [r3, #10]
 800c57c:	89fb      	ldrh	r3, [r7, #14]
 800c57e:	1ad3      	subs	r3, r2, r3
 800c580:	b29a      	uxth	r2, r3
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	891a      	ldrh	r2, [r3, #8]
 800c58a:	89fb      	ldrh	r3, [r7, #14]
 800c58c:	1ad3      	subs	r3, r2, r3
 800c58e:	b29a      	uxth	r2, r3
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800c594:	2300      	movs	r3, #0
}
 800c596:	4618      	mov	r0, r3
 800c598:	3710      	adds	r7, #16
 800c59a:	46bd      	mov	sp, r7
 800c59c:	bd80      	pop	{r7, pc}
 800c59e:	bf00      	nop
 800c5a0:	0801a62c 	.word	0x0801a62c
 800c5a4:	0801a790 	.word	0x0801a790
 800c5a8:	0801a68c 	.word	0x0801a68c
 800c5ac:	0801a79c 	.word	0x0801a79c

0800c5b0 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800c5b0:	b580      	push	{r7, lr}
 800c5b2:	b082      	sub	sp, #8
 800c5b4:	af00      	add	r7, sp, #0
 800c5b6:	6078      	str	r0, [r7, #4]
 800c5b8:	460b      	mov	r3, r1
 800c5ba:	807b      	strh	r3, [r7, #2]
 800c5bc:	4613      	mov	r3, r2
 800c5be:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800c5c0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	da08      	bge.n	800c5da <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800c5c8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c5cc:	425b      	negs	r3, r3
 800c5ce:	4619      	mov	r1, r3
 800c5d0:	6878      	ldr	r0, [r7, #4]
 800c5d2:	f7ff ff9b 	bl	800c50c <pbuf_remove_header>
 800c5d6:	4603      	mov	r3, r0
 800c5d8:	e007      	b.n	800c5ea <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800c5da:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c5de:	787a      	ldrb	r2, [r7, #1]
 800c5e0:	4619      	mov	r1, r3
 800c5e2:	6878      	ldr	r0, [r7, #4]
 800c5e4:	f7ff ff1a 	bl	800c41c <pbuf_add_header_impl>
 800c5e8:	4603      	mov	r3, r0
  }
}
 800c5ea:	4618      	mov	r0, r3
 800c5ec:	3708      	adds	r7, #8
 800c5ee:	46bd      	mov	sp, r7
 800c5f0:	bd80      	pop	{r7, pc}

0800c5f2 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800c5f2:	b580      	push	{r7, lr}
 800c5f4:	b082      	sub	sp, #8
 800c5f6:	af00      	add	r7, sp, #0
 800c5f8:	6078      	str	r0, [r7, #4]
 800c5fa:	460b      	mov	r3, r1
 800c5fc:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800c5fe:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c602:	2201      	movs	r2, #1
 800c604:	4619      	mov	r1, r3
 800c606:	6878      	ldr	r0, [r7, #4]
 800c608:	f7ff ffd2 	bl	800c5b0 <pbuf_header_impl>
 800c60c:	4603      	mov	r3, r0
}
 800c60e:	4618      	mov	r0, r3
 800c610:	3708      	adds	r7, #8
 800c612:	46bd      	mov	sp, r7
 800c614:	bd80      	pop	{r7, pc}
	...

0800c618 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800c618:	b580      	push	{r7, lr}
 800c61a:	b088      	sub	sp, #32
 800c61c:	af00      	add	r7, sp, #0
 800c61e:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	2b00      	cmp	r3, #0
 800c624:	d10b      	bne.n	800c63e <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	2b00      	cmp	r3, #0
 800c62a:	d106      	bne.n	800c63a <pbuf_free+0x22>
 800c62c:	4b3b      	ldr	r3, [pc, #236]	; (800c71c <pbuf_free+0x104>)
 800c62e:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800c632:	493b      	ldr	r1, [pc, #236]	; (800c720 <pbuf_free+0x108>)
 800c634:	483b      	ldr	r0, [pc, #236]	; (800c724 <pbuf_free+0x10c>)
 800c636:	f00b fec5 	bl	80183c4 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800c63a:	2300      	movs	r3, #0
 800c63c:	e069      	b.n	800c712 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800c63e:	2300      	movs	r3, #0
 800c640:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800c642:	e062      	b.n	800c70a <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800c644:	f00b fcc8 	bl	8017fd8 <sys_arch_protect>
 800c648:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	7b9b      	ldrb	r3, [r3, #14]
 800c64e:	2b00      	cmp	r3, #0
 800c650:	d106      	bne.n	800c660 <pbuf_free+0x48>
 800c652:	4b32      	ldr	r3, [pc, #200]	; (800c71c <pbuf_free+0x104>)
 800c654:	f240 22f1 	movw	r2, #753	; 0x2f1
 800c658:	4933      	ldr	r1, [pc, #204]	; (800c728 <pbuf_free+0x110>)
 800c65a:	4832      	ldr	r0, [pc, #200]	; (800c724 <pbuf_free+0x10c>)
 800c65c:	f00b feb2 	bl	80183c4 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	7b9b      	ldrb	r3, [r3, #14]
 800c664:	3b01      	subs	r3, #1
 800c666:	b2da      	uxtb	r2, r3
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	739a      	strb	r2, [r3, #14]
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	7b9b      	ldrb	r3, [r3, #14]
 800c670:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800c672:	69b8      	ldr	r0, [r7, #24]
 800c674:	f00b fcbe 	bl	8017ff4 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800c678:	7dfb      	ldrb	r3, [r7, #23]
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	d143      	bne.n	800c706 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	681b      	ldr	r3, [r3, #0]
 800c682:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	7b1b      	ldrb	r3, [r3, #12]
 800c688:	f003 030f 	and.w	r3, r3, #15
 800c68c:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	7b5b      	ldrb	r3, [r3, #13]
 800c692:	f003 0302 	and.w	r3, r3, #2
 800c696:	2b00      	cmp	r3, #0
 800c698:	d011      	beq.n	800c6be <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800c69e:	68bb      	ldr	r3, [r7, #8]
 800c6a0:	691b      	ldr	r3, [r3, #16]
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	d106      	bne.n	800c6b4 <pbuf_free+0x9c>
 800c6a6:	4b1d      	ldr	r3, [pc, #116]	; (800c71c <pbuf_free+0x104>)
 800c6a8:	f240 22ff 	movw	r2, #767	; 0x2ff
 800c6ac:	491f      	ldr	r1, [pc, #124]	; (800c72c <pbuf_free+0x114>)
 800c6ae:	481d      	ldr	r0, [pc, #116]	; (800c724 <pbuf_free+0x10c>)
 800c6b0:	f00b fe88 	bl	80183c4 <iprintf>
        pc->custom_free_function(p);
 800c6b4:	68bb      	ldr	r3, [r7, #8]
 800c6b6:	691b      	ldr	r3, [r3, #16]
 800c6b8:	6878      	ldr	r0, [r7, #4]
 800c6ba:	4798      	blx	r3
 800c6bc:	e01d      	b.n	800c6fa <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800c6be:	7bfb      	ldrb	r3, [r7, #15]
 800c6c0:	2b02      	cmp	r3, #2
 800c6c2:	d104      	bne.n	800c6ce <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800c6c4:	6879      	ldr	r1, [r7, #4]
 800c6c6:	200c      	movs	r0, #12
 800c6c8:	f7ff f8f6 	bl	800b8b8 <memp_free>
 800c6cc:	e015      	b.n	800c6fa <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800c6ce:	7bfb      	ldrb	r3, [r7, #15]
 800c6d0:	2b01      	cmp	r3, #1
 800c6d2:	d104      	bne.n	800c6de <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800c6d4:	6879      	ldr	r1, [r7, #4]
 800c6d6:	200b      	movs	r0, #11
 800c6d8:	f7ff f8ee 	bl	800b8b8 <memp_free>
 800c6dc:	e00d      	b.n	800c6fa <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800c6de:	7bfb      	ldrb	r3, [r7, #15]
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	d103      	bne.n	800c6ec <pbuf_free+0xd4>
          mem_free(p);
 800c6e4:	6878      	ldr	r0, [r7, #4]
 800c6e6:	f7fe fd33 	bl	800b150 <mem_free>
 800c6ea:	e006      	b.n	800c6fa <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800c6ec:	4b0b      	ldr	r3, [pc, #44]	; (800c71c <pbuf_free+0x104>)
 800c6ee:	f240 320f 	movw	r2, #783	; 0x30f
 800c6f2:	490f      	ldr	r1, [pc, #60]	; (800c730 <pbuf_free+0x118>)
 800c6f4:	480b      	ldr	r0, [pc, #44]	; (800c724 <pbuf_free+0x10c>)
 800c6f6:	f00b fe65 	bl	80183c4 <iprintf>
        }
      }
      count++;
 800c6fa:	7ffb      	ldrb	r3, [r7, #31]
 800c6fc:	3301      	adds	r3, #1
 800c6fe:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800c700:	693b      	ldr	r3, [r7, #16]
 800c702:	607b      	str	r3, [r7, #4]
 800c704:	e001      	b.n	800c70a <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800c706:	2300      	movs	r3, #0
 800c708:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	d199      	bne.n	800c644 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800c710:	7ffb      	ldrb	r3, [r7, #31]
}
 800c712:	4618      	mov	r0, r3
 800c714:	3720      	adds	r7, #32
 800c716:	46bd      	mov	sp, r7
 800c718:	bd80      	pop	{r7, pc}
 800c71a:	bf00      	nop
 800c71c:	0801a62c 	.word	0x0801a62c
 800c720:	0801a790 	.word	0x0801a790
 800c724:	0801a68c 	.word	0x0801a68c
 800c728:	0801a7bc 	.word	0x0801a7bc
 800c72c:	0801a7d4 	.word	0x0801a7d4
 800c730:	0801a7f8 	.word	0x0801a7f8

0800c734 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800c734:	b480      	push	{r7}
 800c736:	b085      	sub	sp, #20
 800c738:	af00      	add	r7, sp, #0
 800c73a:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800c73c:	2300      	movs	r3, #0
 800c73e:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800c740:	e005      	b.n	800c74e <pbuf_clen+0x1a>
    ++len;
 800c742:	89fb      	ldrh	r3, [r7, #14]
 800c744:	3301      	adds	r3, #1
 800c746:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	681b      	ldr	r3, [r3, #0]
 800c74c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	2b00      	cmp	r3, #0
 800c752:	d1f6      	bne.n	800c742 <pbuf_clen+0xe>
  }
  return len;
 800c754:	89fb      	ldrh	r3, [r7, #14]
}
 800c756:	4618      	mov	r0, r3
 800c758:	3714      	adds	r7, #20
 800c75a:	46bd      	mov	sp, r7
 800c75c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c760:	4770      	bx	lr
	...

0800c764 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800c764:	b580      	push	{r7, lr}
 800c766:	b084      	sub	sp, #16
 800c768:	af00      	add	r7, sp, #0
 800c76a:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	2b00      	cmp	r3, #0
 800c770:	d016      	beq.n	800c7a0 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800c772:	f00b fc31 	bl	8017fd8 <sys_arch_protect>
 800c776:	60f8      	str	r0, [r7, #12]
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	7b9b      	ldrb	r3, [r3, #14]
 800c77c:	3301      	adds	r3, #1
 800c77e:	b2da      	uxtb	r2, r3
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	739a      	strb	r2, [r3, #14]
 800c784:	68f8      	ldr	r0, [r7, #12]
 800c786:	f00b fc35 	bl	8017ff4 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	7b9b      	ldrb	r3, [r3, #14]
 800c78e:	2b00      	cmp	r3, #0
 800c790:	d106      	bne.n	800c7a0 <pbuf_ref+0x3c>
 800c792:	4b05      	ldr	r3, [pc, #20]	; (800c7a8 <pbuf_ref+0x44>)
 800c794:	f240 3242 	movw	r2, #834	; 0x342
 800c798:	4904      	ldr	r1, [pc, #16]	; (800c7ac <pbuf_ref+0x48>)
 800c79a:	4805      	ldr	r0, [pc, #20]	; (800c7b0 <pbuf_ref+0x4c>)
 800c79c:	f00b fe12 	bl	80183c4 <iprintf>
  }
}
 800c7a0:	bf00      	nop
 800c7a2:	3710      	adds	r7, #16
 800c7a4:	46bd      	mov	sp, r7
 800c7a6:	bd80      	pop	{r7, pc}
 800c7a8:	0801a62c 	.word	0x0801a62c
 800c7ac:	0801a80c 	.word	0x0801a80c
 800c7b0:	0801a68c 	.word	0x0801a68c

0800c7b4 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800c7b4:	b580      	push	{r7, lr}
 800c7b6:	b084      	sub	sp, #16
 800c7b8:	af00      	add	r7, sp, #0
 800c7ba:	6078      	str	r0, [r7, #4]
 800c7bc:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	d002      	beq.n	800c7ca <pbuf_cat+0x16>
 800c7c4:	683b      	ldr	r3, [r7, #0]
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	d107      	bne.n	800c7da <pbuf_cat+0x26>
 800c7ca:	4b20      	ldr	r3, [pc, #128]	; (800c84c <pbuf_cat+0x98>)
 800c7cc:	f240 3259 	movw	r2, #857	; 0x359
 800c7d0:	491f      	ldr	r1, [pc, #124]	; (800c850 <pbuf_cat+0x9c>)
 800c7d2:	4820      	ldr	r0, [pc, #128]	; (800c854 <pbuf_cat+0xa0>)
 800c7d4:	f00b fdf6 	bl	80183c4 <iprintf>
 800c7d8:	e034      	b.n	800c844 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	60fb      	str	r3, [r7, #12]
 800c7de:	e00a      	b.n	800c7f6 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800c7e0:	68fb      	ldr	r3, [r7, #12]
 800c7e2:	891a      	ldrh	r2, [r3, #8]
 800c7e4:	683b      	ldr	r3, [r7, #0]
 800c7e6:	891b      	ldrh	r3, [r3, #8]
 800c7e8:	4413      	add	r3, r2
 800c7ea:	b29a      	uxth	r2, r3
 800c7ec:	68fb      	ldr	r3, [r7, #12]
 800c7ee:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800c7f0:	68fb      	ldr	r3, [r7, #12]
 800c7f2:	681b      	ldr	r3, [r3, #0]
 800c7f4:	60fb      	str	r3, [r7, #12]
 800c7f6:	68fb      	ldr	r3, [r7, #12]
 800c7f8:	681b      	ldr	r3, [r3, #0]
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	d1f0      	bne.n	800c7e0 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800c7fe:	68fb      	ldr	r3, [r7, #12]
 800c800:	891a      	ldrh	r2, [r3, #8]
 800c802:	68fb      	ldr	r3, [r7, #12]
 800c804:	895b      	ldrh	r3, [r3, #10]
 800c806:	429a      	cmp	r2, r3
 800c808:	d006      	beq.n	800c818 <pbuf_cat+0x64>
 800c80a:	4b10      	ldr	r3, [pc, #64]	; (800c84c <pbuf_cat+0x98>)
 800c80c:	f240 3262 	movw	r2, #866	; 0x362
 800c810:	4911      	ldr	r1, [pc, #68]	; (800c858 <pbuf_cat+0xa4>)
 800c812:	4810      	ldr	r0, [pc, #64]	; (800c854 <pbuf_cat+0xa0>)
 800c814:	f00b fdd6 	bl	80183c4 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800c818:	68fb      	ldr	r3, [r7, #12]
 800c81a:	681b      	ldr	r3, [r3, #0]
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	d006      	beq.n	800c82e <pbuf_cat+0x7a>
 800c820:	4b0a      	ldr	r3, [pc, #40]	; (800c84c <pbuf_cat+0x98>)
 800c822:	f240 3263 	movw	r2, #867	; 0x363
 800c826:	490d      	ldr	r1, [pc, #52]	; (800c85c <pbuf_cat+0xa8>)
 800c828:	480a      	ldr	r0, [pc, #40]	; (800c854 <pbuf_cat+0xa0>)
 800c82a:	f00b fdcb 	bl	80183c4 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800c82e:	68fb      	ldr	r3, [r7, #12]
 800c830:	891a      	ldrh	r2, [r3, #8]
 800c832:	683b      	ldr	r3, [r7, #0]
 800c834:	891b      	ldrh	r3, [r3, #8]
 800c836:	4413      	add	r3, r2
 800c838:	b29a      	uxth	r2, r3
 800c83a:	68fb      	ldr	r3, [r7, #12]
 800c83c:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800c83e:	68fb      	ldr	r3, [r7, #12]
 800c840:	683a      	ldr	r2, [r7, #0]
 800c842:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800c844:	3710      	adds	r7, #16
 800c846:	46bd      	mov	sp, r7
 800c848:	bd80      	pop	{r7, pc}
 800c84a:	bf00      	nop
 800c84c:	0801a62c 	.word	0x0801a62c
 800c850:	0801a820 	.word	0x0801a820
 800c854:	0801a68c 	.word	0x0801a68c
 800c858:	0801a858 	.word	0x0801a858
 800c85c:	0801a888 	.word	0x0801a888

0800c860 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800c860:	b580      	push	{r7, lr}
 800c862:	b082      	sub	sp, #8
 800c864:	af00      	add	r7, sp, #0
 800c866:	6078      	str	r0, [r7, #4]
 800c868:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800c86a:	6839      	ldr	r1, [r7, #0]
 800c86c:	6878      	ldr	r0, [r7, #4]
 800c86e:	f7ff ffa1 	bl	800c7b4 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800c872:	6838      	ldr	r0, [r7, #0]
 800c874:	f7ff ff76 	bl	800c764 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800c878:	bf00      	nop
 800c87a:	3708      	adds	r7, #8
 800c87c:	46bd      	mov	sp, r7
 800c87e:	bd80      	pop	{r7, pc}

0800c880 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800c880:	b580      	push	{r7, lr}
 800c882:	b086      	sub	sp, #24
 800c884:	af00      	add	r7, sp, #0
 800c886:	6078      	str	r0, [r7, #4]
 800c888:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800c88a:	2300      	movs	r3, #0
 800c88c:	617b      	str	r3, [r7, #20]
 800c88e:	2300      	movs	r3, #0
 800c890:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	2b00      	cmp	r3, #0
 800c896:	d008      	beq.n	800c8aa <pbuf_copy+0x2a>
 800c898:	683b      	ldr	r3, [r7, #0]
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	d005      	beq.n	800c8aa <pbuf_copy+0x2a>
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	891a      	ldrh	r2, [r3, #8]
 800c8a2:	683b      	ldr	r3, [r7, #0]
 800c8a4:	891b      	ldrh	r3, [r3, #8]
 800c8a6:	429a      	cmp	r2, r3
 800c8a8:	d209      	bcs.n	800c8be <pbuf_copy+0x3e>
 800c8aa:	4b57      	ldr	r3, [pc, #348]	; (800ca08 <pbuf_copy+0x188>)
 800c8ac:	f240 32c9 	movw	r2, #969	; 0x3c9
 800c8b0:	4956      	ldr	r1, [pc, #344]	; (800ca0c <pbuf_copy+0x18c>)
 800c8b2:	4857      	ldr	r0, [pc, #348]	; (800ca10 <pbuf_copy+0x190>)
 800c8b4:	f00b fd86 	bl	80183c4 <iprintf>
 800c8b8:	f06f 030f 	mvn.w	r3, #15
 800c8bc:	e09f      	b.n	800c9fe <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	895b      	ldrh	r3, [r3, #10]
 800c8c2:	461a      	mov	r2, r3
 800c8c4:	697b      	ldr	r3, [r7, #20]
 800c8c6:	1ad2      	subs	r2, r2, r3
 800c8c8:	683b      	ldr	r3, [r7, #0]
 800c8ca:	895b      	ldrh	r3, [r3, #10]
 800c8cc:	4619      	mov	r1, r3
 800c8ce:	693b      	ldr	r3, [r7, #16]
 800c8d0:	1acb      	subs	r3, r1, r3
 800c8d2:	429a      	cmp	r2, r3
 800c8d4:	d306      	bcc.n	800c8e4 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800c8d6:	683b      	ldr	r3, [r7, #0]
 800c8d8:	895b      	ldrh	r3, [r3, #10]
 800c8da:	461a      	mov	r2, r3
 800c8dc:	693b      	ldr	r3, [r7, #16]
 800c8de:	1ad3      	subs	r3, r2, r3
 800c8e0:	60fb      	str	r3, [r7, #12]
 800c8e2:	e005      	b.n	800c8f0 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	895b      	ldrh	r3, [r3, #10]
 800c8e8:	461a      	mov	r2, r3
 800c8ea:	697b      	ldr	r3, [r7, #20]
 800c8ec:	1ad3      	subs	r3, r2, r3
 800c8ee:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	685a      	ldr	r2, [r3, #4]
 800c8f4:	697b      	ldr	r3, [r7, #20]
 800c8f6:	18d0      	adds	r0, r2, r3
 800c8f8:	683b      	ldr	r3, [r7, #0]
 800c8fa:	685a      	ldr	r2, [r3, #4]
 800c8fc:	693b      	ldr	r3, [r7, #16]
 800c8fe:	4413      	add	r3, r2
 800c900:	68fa      	ldr	r2, [r7, #12]
 800c902:	4619      	mov	r1, r3
 800c904:	f00b fcb3 	bl	801826e <memcpy>
    offset_to += len;
 800c908:	697a      	ldr	r2, [r7, #20]
 800c90a:	68fb      	ldr	r3, [r7, #12]
 800c90c:	4413      	add	r3, r2
 800c90e:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800c910:	693a      	ldr	r2, [r7, #16]
 800c912:	68fb      	ldr	r3, [r7, #12]
 800c914:	4413      	add	r3, r2
 800c916:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	895b      	ldrh	r3, [r3, #10]
 800c91c:	461a      	mov	r2, r3
 800c91e:	697b      	ldr	r3, [r7, #20]
 800c920:	4293      	cmp	r3, r2
 800c922:	d906      	bls.n	800c932 <pbuf_copy+0xb2>
 800c924:	4b38      	ldr	r3, [pc, #224]	; (800ca08 <pbuf_copy+0x188>)
 800c926:	f240 32d9 	movw	r2, #985	; 0x3d9
 800c92a:	493a      	ldr	r1, [pc, #232]	; (800ca14 <pbuf_copy+0x194>)
 800c92c:	4838      	ldr	r0, [pc, #224]	; (800ca10 <pbuf_copy+0x190>)
 800c92e:	f00b fd49 	bl	80183c4 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800c932:	683b      	ldr	r3, [r7, #0]
 800c934:	895b      	ldrh	r3, [r3, #10]
 800c936:	461a      	mov	r2, r3
 800c938:	693b      	ldr	r3, [r7, #16]
 800c93a:	4293      	cmp	r3, r2
 800c93c:	d906      	bls.n	800c94c <pbuf_copy+0xcc>
 800c93e:	4b32      	ldr	r3, [pc, #200]	; (800ca08 <pbuf_copy+0x188>)
 800c940:	f240 32da 	movw	r2, #986	; 0x3da
 800c944:	4934      	ldr	r1, [pc, #208]	; (800ca18 <pbuf_copy+0x198>)
 800c946:	4832      	ldr	r0, [pc, #200]	; (800ca10 <pbuf_copy+0x190>)
 800c948:	f00b fd3c 	bl	80183c4 <iprintf>
    if (offset_from >= p_from->len) {
 800c94c:	683b      	ldr	r3, [r7, #0]
 800c94e:	895b      	ldrh	r3, [r3, #10]
 800c950:	461a      	mov	r2, r3
 800c952:	693b      	ldr	r3, [r7, #16]
 800c954:	4293      	cmp	r3, r2
 800c956:	d304      	bcc.n	800c962 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800c958:	2300      	movs	r3, #0
 800c95a:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800c95c:	683b      	ldr	r3, [r7, #0]
 800c95e:	681b      	ldr	r3, [r3, #0]
 800c960:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	895b      	ldrh	r3, [r3, #10]
 800c966:	461a      	mov	r2, r3
 800c968:	697b      	ldr	r3, [r7, #20]
 800c96a:	4293      	cmp	r3, r2
 800c96c:	d114      	bne.n	800c998 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800c96e:	2300      	movs	r3, #0
 800c970:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	681b      	ldr	r3, [r3, #0]
 800c976:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	2b00      	cmp	r3, #0
 800c97c:	d10c      	bne.n	800c998 <pbuf_copy+0x118>
 800c97e:	683b      	ldr	r3, [r7, #0]
 800c980:	2b00      	cmp	r3, #0
 800c982:	d009      	beq.n	800c998 <pbuf_copy+0x118>
 800c984:	4b20      	ldr	r3, [pc, #128]	; (800ca08 <pbuf_copy+0x188>)
 800c986:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800c98a:	4924      	ldr	r1, [pc, #144]	; (800ca1c <pbuf_copy+0x19c>)
 800c98c:	4820      	ldr	r0, [pc, #128]	; (800ca10 <pbuf_copy+0x190>)
 800c98e:	f00b fd19 	bl	80183c4 <iprintf>
 800c992:	f06f 030f 	mvn.w	r3, #15
 800c996:	e032      	b.n	800c9fe <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800c998:	683b      	ldr	r3, [r7, #0]
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	d013      	beq.n	800c9c6 <pbuf_copy+0x146>
 800c99e:	683b      	ldr	r3, [r7, #0]
 800c9a0:	895a      	ldrh	r2, [r3, #10]
 800c9a2:	683b      	ldr	r3, [r7, #0]
 800c9a4:	891b      	ldrh	r3, [r3, #8]
 800c9a6:	429a      	cmp	r2, r3
 800c9a8:	d10d      	bne.n	800c9c6 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800c9aa:	683b      	ldr	r3, [r7, #0]
 800c9ac:	681b      	ldr	r3, [r3, #0]
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	d009      	beq.n	800c9c6 <pbuf_copy+0x146>
 800c9b2:	4b15      	ldr	r3, [pc, #84]	; (800ca08 <pbuf_copy+0x188>)
 800c9b4:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800c9b8:	4919      	ldr	r1, [pc, #100]	; (800ca20 <pbuf_copy+0x1a0>)
 800c9ba:	4815      	ldr	r0, [pc, #84]	; (800ca10 <pbuf_copy+0x190>)
 800c9bc:	f00b fd02 	bl	80183c4 <iprintf>
 800c9c0:	f06f 0305 	mvn.w	r3, #5
 800c9c4:	e01b      	b.n	800c9fe <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	d013      	beq.n	800c9f4 <pbuf_copy+0x174>
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	895a      	ldrh	r2, [r3, #10]
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	891b      	ldrh	r3, [r3, #8]
 800c9d4:	429a      	cmp	r2, r3
 800c9d6:	d10d      	bne.n	800c9f4 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	681b      	ldr	r3, [r3, #0]
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	d009      	beq.n	800c9f4 <pbuf_copy+0x174>
 800c9e0:	4b09      	ldr	r3, [pc, #36]	; (800ca08 <pbuf_copy+0x188>)
 800c9e2:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800c9e6:	490e      	ldr	r1, [pc, #56]	; (800ca20 <pbuf_copy+0x1a0>)
 800c9e8:	4809      	ldr	r0, [pc, #36]	; (800ca10 <pbuf_copy+0x190>)
 800c9ea:	f00b fceb 	bl	80183c4 <iprintf>
 800c9ee:	f06f 0305 	mvn.w	r3, #5
 800c9f2:	e004      	b.n	800c9fe <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800c9f4:	683b      	ldr	r3, [r7, #0]
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	f47f af61 	bne.w	800c8be <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800c9fc:	2300      	movs	r3, #0
}
 800c9fe:	4618      	mov	r0, r3
 800ca00:	3718      	adds	r7, #24
 800ca02:	46bd      	mov	sp, r7
 800ca04:	bd80      	pop	{r7, pc}
 800ca06:	bf00      	nop
 800ca08:	0801a62c 	.word	0x0801a62c
 800ca0c:	0801a8d4 	.word	0x0801a8d4
 800ca10:	0801a68c 	.word	0x0801a68c
 800ca14:	0801a904 	.word	0x0801a904
 800ca18:	0801a91c 	.word	0x0801a91c
 800ca1c:	0801a938 	.word	0x0801a938
 800ca20:	0801a948 	.word	0x0801a948

0800ca24 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800ca24:	b580      	push	{r7, lr}
 800ca26:	b088      	sub	sp, #32
 800ca28:	af00      	add	r7, sp, #0
 800ca2a:	60f8      	str	r0, [r7, #12]
 800ca2c:	60b9      	str	r1, [r7, #8]
 800ca2e:	4611      	mov	r1, r2
 800ca30:	461a      	mov	r2, r3
 800ca32:	460b      	mov	r3, r1
 800ca34:	80fb      	strh	r3, [r7, #6]
 800ca36:	4613      	mov	r3, r2
 800ca38:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800ca3a:	2300      	movs	r3, #0
 800ca3c:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800ca3e:	2300      	movs	r3, #0
 800ca40:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800ca42:	68fb      	ldr	r3, [r7, #12]
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	d108      	bne.n	800ca5a <pbuf_copy_partial+0x36>
 800ca48:	4b2b      	ldr	r3, [pc, #172]	; (800caf8 <pbuf_copy_partial+0xd4>)
 800ca4a:	f240 420a 	movw	r2, #1034	; 0x40a
 800ca4e:	492b      	ldr	r1, [pc, #172]	; (800cafc <pbuf_copy_partial+0xd8>)
 800ca50:	482b      	ldr	r0, [pc, #172]	; (800cb00 <pbuf_copy_partial+0xdc>)
 800ca52:	f00b fcb7 	bl	80183c4 <iprintf>
 800ca56:	2300      	movs	r3, #0
 800ca58:	e04a      	b.n	800caf0 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800ca5a:	68bb      	ldr	r3, [r7, #8]
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	d108      	bne.n	800ca72 <pbuf_copy_partial+0x4e>
 800ca60:	4b25      	ldr	r3, [pc, #148]	; (800caf8 <pbuf_copy_partial+0xd4>)
 800ca62:	f240 420b 	movw	r2, #1035	; 0x40b
 800ca66:	4927      	ldr	r1, [pc, #156]	; (800cb04 <pbuf_copy_partial+0xe0>)
 800ca68:	4825      	ldr	r0, [pc, #148]	; (800cb00 <pbuf_copy_partial+0xdc>)
 800ca6a:	f00b fcab 	bl	80183c4 <iprintf>
 800ca6e:	2300      	movs	r3, #0
 800ca70:	e03e      	b.n	800caf0 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800ca72:	68fb      	ldr	r3, [r7, #12]
 800ca74:	61fb      	str	r3, [r7, #28]
 800ca76:	e034      	b.n	800cae2 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800ca78:	88bb      	ldrh	r3, [r7, #4]
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	d00a      	beq.n	800ca94 <pbuf_copy_partial+0x70>
 800ca7e:	69fb      	ldr	r3, [r7, #28]
 800ca80:	895b      	ldrh	r3, [r3, #10]
 800ca82:	88ba      	ldrh	r2, [r7, #4]
 800ca84:	429a      	cmp	r2, r3
 800ca86:	d305      	bcc.n	800ca94 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800ca88:	69fb      	ldr	r3, [r7, #28]
 800ca8a:	895b      	ldrh	r3, [r3, #10]
 800ca8c:	88ba      	ldrh	r2, [r7, #4]
 800ca8e:	1ad3      	subs	r3, r2, r3
 800ca90:	80bb      	strh	r3, [r7, #4]
 800ca92:	e023      	b.n	800cadc <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800ca94:	69fb      	ldr	r3, [r7, #28]
 800ca96:	895a      	ldrh	r2, [r3, #10]
 800ca98:	88bb      	ldrh	r3, [r7, #4]
 800ca9a:	1ad3      	subs	r3, r2, r3
 800ca9c:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800ca9e:	8b3a      	ldrh	r2, [r7, #24]
 800caa0:	88fb      	ldrh	r3, [r7, #6]
 800caa2:	429a      	cmp	r2, r3
 800caa4:	d901      	bls.n	800caaa <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800caa6:	88fb      	ldrh	r3, [r7, #6]
 800caa8:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800caaa:	8b7b      	ldrh	r3, [r7, #26]
 800caac:	68ba      	ldr	r2, [r7, #8]
 800caae:	18d0      	adds	r0, r2, r3
 800cab0:	69fb      	ldr	r3, [r7, #28]
 800cab2:	685a      	ldr	r2, [r3, #4]
 800cab4:	88bb      	ldrh	r3, [r7, #4]
 800cab6:	4413      	add	r3, r2
 800cab8:	8b3a      	ldrh	r2, [r7, #24]
 800caba:	4619      	mov	r1, r3
 800cabc:	f00b fbd7 	bl	801826e <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800cac0:	8afa      	ldrh	r2, [r7, #22]
 800cac2:	8b3b      	ldrh	r3, [r7, #24]
 800cac4:	4413      	add	r3, r2
 800cac6:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800cac8:	8b7a      	ldrh	r2, [r7, #26]
 800caca:	8b3b      	ldrh	r3, [r7, #24]
 800cacc:	4413      	add	r3, r2
 800cace:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800cad0:	88fa      	ldrh	r2, [r7, #6]
 800cad2:	8b3b      	ldrh	r3, [r7, #24]
 800cad4:	1ad3      	subs	r3, r2, r3
 800cad6:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800cad8:	2300      	movs	r3, #0
 800cada:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800cadc:	69fb      	ldr	r3, [r7, #28]
 800cade:	681b      	ldr	r3, [r3, #0]
 800cae0:	61fb      	str	r3, [r7, #28]
 800cae2:	88fb      	ldrh	r3, [r7, #6]
 800cae4:	2b00      	cmp	r3, #0
 800cae6:	d002      	beq.n	800caee <pbuf_copy_partial+0xca>
 800cae8:	69fb      	ldr	r3, [r7, #28]
 800caea:	2b00      	cmp	r3, #0
 800caec:	d1c4      	bne.n	800ca78 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800caee:	8afb      	ldrh	r3, [r7, #22]
}
 800caf0:	4618      	mov	r0, r3
 800caf2:	3720      	adds	r7, #32
 800caf4:	46bd      	mov	sp, r7
 800caf6:	bd80      	pop	{r7, pc}
 800caf8:	0801a62c 	.word	0x0801a62c
 800cafc:	0801a974 	.word	0x0801a974
 800cb00:	0801a68c 	.word	0x0801a68c
 800cb04:	0801a994 	.word	0x0801a994

0800cb08 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800cb08:	b580      	push	{r7, lr}
 800cb0a:	b084      	sub	sp, #16
 800cb0c:	af00      	add	r7, sp, #0
 800cb0e:	4603      	mov	r3, r0
 800cb10:	603a      	str	r2, [r7, #0]
 800cb12:	71fb      	strb	r3, [r7, #7]
 800cb14:	460b      	mov	r3, r1
 800cb16:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800cb18:	683b      	ldr	r3, [r7, #0]
 800cb1a:	8919      	ldrh	r1, [r3, #8]
 800cb1c:	88ba      	ldrh	r2, [r7, #4]
 800cb1e:	79fb      	ldrb	r3, [r7, #7]
 800cb20:	4618      	mov	r0, r3
 800cb22:	f7ff fa95 	bl	800c050 <pbuf_alloc>
 800cb26:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800cb28:	68fb      	ldr	r3, [r7, #12]
 800cb2a:	2b00      	cmp	r3, #0
 800cb2c:	d101      	bne.n	800cb32 <pbuf_clone+0x2a>
    return NULL;
 800cb2e:	2300      	movs	r3, #0
 800cb30:	e011      	b.n	800cb56 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800cb32:	6839      	ldr	r1, [r7, #0]
 800cb34:	68f8      	ldr	r0, [r7, #12]
 800cb36:	f7ff fea3 	bl	800c880 <pbuf_copy>
 800cb3a:	4603      	mov	r3, r0
 800cb3c:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800cb3e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800cb42:	2b00      	cmp	r3, #0
 800cb44:	d006      	beq.n	800cb54 <pbuf_clone+0x4c>
 800cb46:	4b06      	ldr	r3, [pc, #24]	; (800cb60 <pbuf_clone+0x58>)
 800cb48:	f240 5224 	movw	r2, #1316	; 0x524
 800cb4c:	4905      	ldr	r1, [pc, #20]	; (800cb64 <pbuf_clone+0x5c>)
 800cb4e:	4806      	ldr	r0, [pc, #24]	; (800cb68 <pbuf_clone+0x60>)
 800cb50:	f00b fc38 	bl	80183c4 <iprintf>
  return q;
 800cb54:	68fb      	ldr	r3, [r7, #12]
}
 800cb56:	4618      	mov	r0, r3
 800cb58:	3710      	adds	r7, #16
 800cb5a:	46bd      	mov	sp, r7
 800cb5c:	bd80      	pop	{r7, pc}
 800cb5e:	bf00      	nop
 800cb60:	0801a62c 	.word	0x0801a62c
 800cb64:	0801aaa0 	.word	0x0801aaa0
 800cb68:	0801a68c 	.word	0x0801a68c

0800cb6c <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800cb6c:	b580      	push	{r7, lr}
 800cb6e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800cb70:	f00b fc40 	bl	80183f4 <rand>
 800cb74:	4603      	mov	r3, r0
 800cb76:	b29b      	uxth	r3, r3
 800cb78:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800cb7c:	b29b      	uxth	r3, r3
 800cb7e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800cb82:	b29a      	uxth	r2, r3
 800cb84:	4b01      	ldr	r3, [pc, #4]	; (800cb8c <tcp_init+0x20>)
 800cb86:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800cb88:	bf00      	nop
 800cb8a:	bd80      	pop	{r7, pc}
 800cb8c:	20000024 	.word	0x20000024

0800cb90 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800cb90:	b580      	push	{r7, lr}
 800cb92:	b082      	sub	sp, #8
 800cb94:	af00      	add	r7, sp, #0
 800cb96:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	7d1b      	ldrb	r3, [r3, #20]
 800cb9c:	2b01      	cmp	r3, #1
 800cb9e:	d105      	bne.n	800cbac <tcp_free+0x1c>
 800cba0:	4b06      	ldr	r3, [pc, #24]	; (800cbbc <tcp_free+0x2c>)
 800cba2:	22d4      	movs	r2, #212	; 0xd4
 800cba4:	4906      	ldr	r1, [pc, #24]	; (800cbc0 <tcp_free+0x30>)
 800cba6:	4807      	ldr	r0, [pc, #28]	; (800cbc4 <tcp_free+0x34>)
 800cba8:	f00b fc0c 	bl	80183c4 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800cbac:	6879      	ldr	r1, [r7, #4]
 800cbae:	2001      	movs	r0, #1
 800cbb0:	f7fe fe82 	bl	800b8b8 <memp_free>
}
 800cbb4:	bf00      	nop
 800cbb6:	3708      	adds	r7, #8
 800cbb8:	46bd      	mov	sp, r7
 800cbba:	bd80      	pop	{r7, pc}
 800cbbc:	0801ab2c 	.word	0x0801ab2c
 800cbc0:	0801ab5c 	.word	0x0801ab5c
 800cbc4:	0801ab70 	.word	0x0801ab70

0800cbc8 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800cbc8:	b580      	push	{r7, lr}
 800cbca:	b082      	sub	sp, #8
 800cbcc:	af00      	add	r7, sp, #0
 800cbce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	7d1b      	ldrb	r3, [r3, #20]
 800cbd4:	2b01      	cmp	r3, #1
 800cbd6:	d105      	bne.n	800cbe4 <tcp_free_listen+0x1c>
 800cbd8:	4b06      	ldr	r3, [pc, #24]	; (800cbf4 <tcp_free_listen+0x2c>)
 800cbda:	22df      	movs	r2, #223	; 0xdf
 800cbdc:	4906      	ldr	r1, [pc, #24]	; (800cbf8 <tcp_free_listen+0x30>)
 800cbde:	4807      	ldr	r0, [pc, #28]	; (800cbfc <tcp_free_listen+0x34>)
 800cbe0:	f00b fbf0 	bl	80183c4 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800cbe4:	6879      	ldr	r1, [r7, #4]
 800cbe6:	2002      	movs	r0, #2
 800cbe8:	f7fe fe66 	bl	800b8b8 <memp_free>
}
 800cbec:	bf00      	nop
 800cbee:	3708      	adds	r7, #8
 800cbf0:	46bd      	mov	sp, r7
 800cbf2:	bd80      	pop	{r7, pc}
 800cbf4:	0801ab2c 	.word	0x0801ab2c
 800cbf8:	0801ab98 	.word	0x0801ab98
 800cbfc:	0801ab70 	.word	0x0801ab70

0800cc00 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800cc00:	b580      	push	{r7, lr}
 800cc02:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800cc04:	f001 f8b8 	bl	800dd78 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800cc08:	4b07      	ldr	r3, [pc, #28]	; (800cc28 <tcp_tmr+0x28>)
 800cc0a:	781b      	ldrb	r3, [r3, #0]
 800cc0c:	3301      	adds	r3, #1
 800cc0e:	b2da      	uxtb	r2, r3
 800cc10:	4b05      	ldr	r3, [pc, #20]	; (800cc28 <tcp_tmr+0x28>)
 800cc12:	701a      	strb	r2, [r3, #0]
 800cc14:	4b04      	ldr	r3, [pc, #16]	; (800cc28 <tcp_tmr+0x28>)
 800cc16:	781b      	ldrb	r3, [r3, #0]
 800cc18:	f003 0301 	and.w	r3, r3, #1
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	d001      	beq.n	800cc24 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800cc20:	f000 fd6a 	bl	800d6f8 <tcp_slowtmr>
  }
}
 800cc24:	bf00      	nop
 800cc26:	bd80      	pop	{r7, pc}
 800cc28:	20010d8d 	.word	0x20010d8d

0800cc2c <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800cc2c:	b580      	push	{r7, lr}
 800cc2e:	b084      	sub	sp, #16
 800cc30:	af00      	add	r7, sp, #0
 800cc32:	6078      	str	r0, [r7, #4]
 800cc34:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800cc36:	683b      	ldr	r3, [r7, #0]
 800cc38:	2b00      	cmp	r3, #0
 800cc3a:	d105      	bne.n	800cc48 <tcp_remove_listener+0x1c>
 800cc3c:	4b0d      	ldr	r3, [pc, #52]	; (800cc74 <tcp_remove_listener+0x48>)
 800cc3e:	22ff      	movs	r2, #255	; 0xff
 800cc40:	490d      	ldr	r1, [pc, #52]	; (800cc78 <tcp_remove_listener+0x4c>)
 800cc42:	480e      	ldr	r0, [pc, #56]	; (800cc7c <tcp_remove_listener+0x50>)
 800cc44:	f00b fbbe 	bl	80183c4 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	60fb      	str	r3, [r7, #12]
 800cc4c:	e00a      	b.n	800cc64 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800cc4e:	68fb      	ldr	r3, [r7, #12]
 800cc50:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cc52:	683a      	ldr	r2, [r7, #0]
 800cc54:	429a      	cmp	r2, r3
 800cc56:	d102      	bne.n	800cc5e <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800cc58:	68fb      	ldr	r3, [r7, #12]
 800cc5a:	2200      	movs	r2, #0
 800cc5c:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800cc5e:	68fb      	ldr	r3, [r7, #12]
 800cc60:	68db      	ldr	r3, [r3, #12]
 800cc62:	60fb      	str	r3, [r7, #12]
 800cc64:	68fb      	ldr	r3, [r7, #12]
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	d1f1      	bne.n	800cc4e <tcp_remove_listener+0x22>
    }
  }
}
 800cc6a:	bf00      	nop
 800cc6c:	bf00      	nop
 800cc6e:	3710      	adds	r7, #16
 800cc70:	46bd      	mov	sp, r7
 800cc72:	bd80      	pop	{r7, pc}
 800cc74:	0801ab2c 	.word	0x0801ab2c
 800cc78:	0801abb4 	.word	0x0801abb4
 800cc7c:	0801ab70 	.word	0x0801ab70

0800cc80 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800cc80:	b580      	push	{r7, lr}
 800cc82:	b084      	sub	sp, #16
 800cc84:	af00      	add	r7, sp, #0
 800cc86:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	2b00      	cmp	r3, #0
 800cc8c:	d106      	bne.n	800cc9c <tcp_listen_closed+0x1c>
 800cc8e:	4b14      	ldr	r3, [pc, #80]	; (800cce0 <tcp_listen_closed+0x60>)
 800cc90:	f240 1211 	movw	r2, #273	; 0x111
 800cc94:	4913      	ldr	r1, [pc, #76]	; (800cce4 <tcp_listen_closed+0x64>)
 800cc96:	4814      	ldr	r0, [pc, #80]	; (800cce8 <tcp_listen_closed+0x68>)
 800cc98:	f00b fb94 	bl	80183c4 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	7d1b      	ldrb	r3, [r3, #20]
 800cca0:	2b01      	cmp	r3, #1
 800cca2:	d006      	beq.n	800ccb2 <tcp_listen_closed+0x32>
 800cca4:	4b0e      	ldr	r3, [pc, #56]	; (800cce0 <tcp_listen_closed+0x60>)
 800cca6:	f44f 7289 	mov.w	r2, #274	; 0x112
 800ccaa:	4910      	ldr	r1, [pc, #64]	; (800ccec <tcp_listen_closed+0x6c>)
 800ccac:	480e      	ldr	r0, [pc, #56]	; (800cce8 <tcp_listen_closed+0x68>)
 800ccae:	f00b fb89 	bl	80183c4 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800ccb2:	2301      	movs	r3, #1
 800ccb4:	60fb      	str	r3, [r7, #12]
 800ccb6:	e00b      	b.n	800ccd0 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800ccb8:	4a0d      	ldr	r2, [pc, #52]	; (800ccf0 <tcp_listen_closed+0x70>)
 800ccba:	68fb      	ldr	r3, [r7, #12]
 800ccbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ccc0:	681b      	ldr	r3, [r3, #0]
 800ccc2:	6879      	ldr	r1, [r7, #4]
 800ccc4:	4618      	mov	r0, r3
 800ccc6:	f7ff ffb1 	bl	800cc2c <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800ccca:	68fb      	ldr	r3, [r7, #12]
 800cccc:	3301      	adds	r3, #1
 800ccce:	60fb      	str	r3, [r7, #12]
 800ccd0:	68fb      	ldr	r3, [r7, #12]
 800ccd2:	2b03      	cmp	r3, #3
 800ccd4:	d9f0      	bls.n	800ccb8 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800ccd6:	bf00      	nop
 800ccd8:	bf00      	nop
 800ccda:	3710      	adds	r7, #16
 800ccdc:	46bd      	mov	sp, r7
 800ccde:	bd80      	pop	{r7, pc}
 800cce0:	0801ab2c 	.word	0x0801ab2c
 800cce4:	0801abdc 	.word	0x0801abdc
 800cce8:	0801ab70 	.word	0x0801ab70
 800ccec:	0801abe8 	.word	0x0801abe8
 800ccf0:	08027028 	.word	0x08027028

0800ccf4 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800ccf4:	b5b0      	push	{r4, r5, r7, lr}
 800ccf6:	b088      	sub	sp, #32
 800ccf8:	af04      	add	r7, sp, #16
 800ccfa:	6078      	str	r0, [r7, #4]
 800ccfc:	460b      	mov	r3, r1
 800ccfe:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	2b00      	cmp	r3, #0
 800cd04:	d106      	bne.n	800cd14 <tcp_close_shutdown+0x20>
 800cd06:	4b63      	ldr	r3, [pc, #396]	; (800ce94 <tcp_close_shutdown+0x1a0>)
 800cd08:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800cd0c:	4962      	ldr	r1, [pc, #392]	; (800ce98 <tcp_close_shutdown+0x1a4>)
 800cd0e:	4863      	ldr	r0, [pc, #396]	; (800ce9c <tcp_close_shutdown+0x1a8>)
 800cd10:	f00b fb58 	bl	80183c4 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800cd14:	78fb      	ldrb	r3, [r7, #3]
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	d066      	beq.n	800cde8 <tcp_close_shutdown+0xf4>
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	7d1b      	ldrb	r3, [r3, #20]
 800cd1e:	2b04      	cmp	r3, #4
 800cd20:	d003      	beq.n	800cd2a <tcp_close_shutdown+0x36>
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	7d1b      	ldrb	r3, [r3, #20]
 800cd26:	2b07      	cmp	r3, #7
 800cd28:	d15e      	bne.n	800cde8 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	d104      	bne.n	800cd3c <tcp_close_shutdown+0x48>
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cd36:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800cd3a:	d055      	beq.n	800cde8 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	8b5b      	ldrh	r3, [r3, #26]
 800cd40:	f003 0310 	and.w	r3, r3, #16
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	d106      	bne.n	800cd56 <tcp_close_shutdown+0x62>
 800cd48:	4b52      	ldr	r3, [pc, #328]	; (800ce94 <tcp_close_shutdown+0x1a0>)
 800cd4a:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800cd4e:	4954      	ldr	r1, [pc, #336]	; (800cea0 <tcp_close_shutdown+0x1ac>)
 800cd50:	4852      	ldr	r0, [pc, #328]	; (800ce9c <tcp_close_shutdown+0x1a8>)
 800cd52:	f00b fb37 	bl	80183c4 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800cd5e:	687d      	ldr	r5, [r7, #4]
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	3304      	adds	r3, #4
 800cd64:	687a      	ldr	r2, [r7, #4]
 800cd66:	8ad2      	ldrh	r2, [r2, #22]
 800cd68:	6879      	ldr	r1, [r7, #4]
 800cd6a:	8b09      	ldrh	r1, [r1, #24]
 800cd6c:	9102      	str	r1, [sp, #8]
 800cd6e:	9201      	str	r2, [sp, #4]
 800cd70:	9300      	str	r3, [sp, #0]
 800cd72:	462b      	mov	r3, r5
 800cd74:	4622      	mov	r2, r4
 800cd76:	4601      	mov	r1, r0
 800cd78:	6878      	ldr	r0, [r7, #4]
 800cd7a:	f005 fdeb 	bl	8012954 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800cd7e:	6878      	ldr	r0, [r7, #4]
 800cd80:	f001 fbc8 	bl	800e514 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800cd84:	4b47      	ldr	r3, [pc, #284]	; (800cea4 <tcp_close_shutdown+0x1b0>)
 800cd86:	681b      	ldr	r3, [r3, #0]
 800cd88:	687a      	ldr	r2, [r7, #4]
 800cd8a:	429a      	cmp	r2, r3
 800cd8c:	d105      	bne.n	800cd9a <tcp_close_shutdown+0xa6>
 800cd8e:	4b45      	ldr	r3, [pc, #276]	; (800cea4 <tcp_close_shutdown+0x1b0>)
 800cd90:	681b      	ldr	r3, [r3, #0]
 800cd92:	68db      	ldr	r3, [r3, #12]
 800cd94:	4a43      	ldr	r2, [pc, #268]	; (800cea4 <tcp_close_shutdown+0x1b0>)
 800cd96:	6013      	str	r3, [r2, #0]
 800cd98:	e013      	b.n	800cdc2 <tcp_close_shutdown+0xce>
 800cd9a:	4b42      	ldr	r3, [pc, #264]	; (800cea4 <tcp_close_shutdown+0x1b0>)
 800cd9c:	681b      	ldr	r3, [r3, #0]
 800cd9e:	60fb      	str	r3, [r7, #12]
 800cda0:	e00c      	b.n	800cdbc <tcp_close_shutdown+0xc8>
 800cda2:	68fb      	ldr	r3, [r7, #12]
 800cda4:	68db      	ldr	r3, [r3, #12]
 800cda6:	687a      	ldr	r2, [r7, #4]
 800cda8:	429a      	cmp	r2, r3
 800cdaa:	d104      	bne.n	800cdb6 <tcp_close_shutdown+0xc2>
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	68da      	ldr	r2, [r3, #12]
 800cdb0:	68fb      	ldr	r3, [r7, #12]
 800cdb2:	60da      	str	r2, [r3, #12]
 800cdb4:	e005      	b.n	800cdc2 <tcp_close_shutdown+0xce>
 800cdb6:	68fb      	ldr	r3, [r7, #12]
 800cdb8:	68db      	ldr	r3, [r3, #12]
 800cdba:	60fb      	str	r3, [r7, #12]
 800cdbc:	68fb      	ldr	r3, [r7, #12]
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d1ef      	bne.n	800cda2 <tcp_close_shutdown+0xae>
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	2200      	movs	r2, #0
 800cdc6:	60da      	str	r2, [r3, #12]
 800cdc8:	4b37      	ldr	r3, [pc, #220]	; (800cea8 <tcp_close_shutdown+0x1b4>)
 800cdca:	2201      	movs	r2, #1
 800cdcc:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800cdce:	4b37      	ldr	r3, [pc, #220]	; (800ceac <tcp_close_shutdown+0x1b8>)
 800cdd0:	681b      	ldr	r3, [r3, #0]
 800cdd2:	687a      	ldr	r2, [r7, #4]
 800cdd4:	429a      	cmp	r2, r3
 800cdd6:	d102      	bne.n	800cdde <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800cdd8:	f004 f860 	bl	8010e9c <tcp_trigger_input_pcb_close>
 800cddc:	e002      	b.n	800cde4 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800cdde:	6878      	ldr	r0, [r7, #4]
 800cde0:	f7ff fed6 	bl	800cb90 <tcp_free>
      }
      return ERR_OK;
 800cde4:	2300      	movs	r3, #0
 800cde6:	e050      	b.n	800ce8a <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	7d1b      	ldrb	r3, [r3, #20]
 800cdec:	2b02      	cmp	r3, #2
 800cdee:	d03b      	beq.n	800ce68 <tcp_close_shutdown+0x174>
 800cdf0:	2b02      	cmp	r3, #2
 800cdf2:	dc44      	bgt.n	800ce7e <tcp_close_shutdown+0x18a>
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	d002      	beq.n	800cdfe <tcp_close_shutdown+0x10a>
 800cdf8:	2b01      	cmp	r3, #1
 800cdfa:	d02a      	beq.n	800ce52 <tcp_close_shutdown+0x15e>
 800cdfc:	e03f      	b.n	800ce7e <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	8adb      	ldrh	r3, [r3, #22]
 800ce02:	2b00      	cmp	r3, #0
 800ce04:	d021      	beq.n	800ce4a <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800ce06:	4b2a      	ldr	r3, [pc, #168]	; (800ceb0 <tcp_close_shutdown+0x1bc>)
 800ce08:	681b      	ldr	r3, [r3, #0]
 800ce0a:	687a      	ldr	r2, [r7, #4]
 800ce0c:	429a      	cmp	r2, r3
 800ce0e:	d105      	bne.n	800ce1c <tcp_close_shutdown+0x128>
 800ce10:	4b27      	ldr	r3, [pc, #156]	; (800ceb0 <tcp_close_shutdown+0x1bc>)
 800ce12:	681b      	ldr	r3, [r3, #0]
 800ce14:	68db      	ldr	r3, [r3, #12]
 800ce16:	4a26      	ldr	r2, [pc, #152]	; (800ceb0 <tcp_close_shutdown+0x1bc>)
 800ce18:	6013      	str	r3, [r2, #0]
 800ce1a:	e013      	b.n	800ce44 <tcp_close_shutdown+0x150>
 800ce1c:	4b24      	ldr	r3, [pc, #144]	; (800ceb0 <tcp_close_shutdown+0x1bc>)
 800ce1e:	681b      	ldr	r3, [r3, #0]
 800ce20:	60bb      	str	r3, [r7, #8]
 800ce22:	e00c      	b.n	800ce3e <tcp_close_shutdown+0x14a>
 800ce24:	68bb      	ldr	r3, [r7, #8]
 800ce26:	68db      	ldr	r3, [r3, #12]
 800ce28:	687a      	ldr	r2, [r7, #4]
 800ce2a:	429a      	cmp	r2, r3
 800ce2c:	d104      	bne.n	800ce38 <tcp_close_shutdown+0x144>
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	68da      	ldr	r2, [r3, #12]
 800ce32:	68bb      	ldr	r3, [r7, #8]
 800ce34:	60da      	str	r2, [r3, #12]
 800ce36:	e005      	b.n	800ce44 <tcp_close_shutdown+0x150>
 800ce38:	68bb      	ldr	r3, [r7, #8]
 800ce3a:	68db      	ldr	r3, [r3, #12]
 800ce3c:	60bb      	str	r3, [r7, #8]
 800ce3e:	68bb      	ldr	r3, [r7, #8]
 800ce40:	2b00      	cmp	r3, #0
 800ce42:	d1ef      	bne.n	800ce24 <tcp_close_shutdown+0x130>
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	2200      	movs	r2, #0
 800ce48:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800ce4a:	6878      	ldr	r0, [r7, #4]
 800ce4c:	f7ff fea0 	bl	800cb90 <tcp_free>
      break;
 800ce50:	e01a      	b.n	800ce88 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800ce52:	6878      	ldr	r0, [r7, #4]
 800ce54:	f7ff ff14 	bl	800cc80 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800ce58:	6879      	ldr	r1, [r7, #4]
 800ce5a:	4816      	ldr	r0, [pc, #88]	; (800ceb4 <tcp_close_shutdown+0x1c0>)
 800ce5c:	f001 fbaa 	bl	800e5b4 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800ce60:	6878      	ldr	r0, [r7, #4]
 800ce62:	f7ff feb1 	bl	800cbc8 <tcp_free_listen>
      break;
 800ce66:	e00f      	b.n	800ce88 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800ce68:	6879      	ldr	r1, [r7, #4]
 800ce6a:	480e      	ldr	r0, [pc, #56]	; (800cea4 <tcp_close_shutdown+0x1b0>)
 800ce6c:	f001 fba2 	bl	800e5b4 <tcp_pcb_remove>
 800ce70:	4b0d      	ldr	r3, [pc, #52]	; (800cea8 <tcp_close_shutdown+0x1b4>)
 800ce72:	2201      	movs	r2, #1
 800ce74:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800ce76:	6878      	ldr	r0, [r7, #4]
 800ce78:	f7ff fe8a 	bl	800cb90 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800ce7c:	e004      	b.n	800ce88 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800ce7e:	6878      	ldr	r0, [r7, #4]
 800ce80:	f000 f81a 	bl	800ceb8 <tcp_close_shutdown_fin>
 800ce84:	4603      	mov	r3, r0
 800ce86:	e000      	b.n	800ce8a <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800ce88:	2300      	movs	r3, #0
}
 800ce8a:	4618      	mov	r0, r3
 800ce8c:	3710      	adds	r7, #16
 800ce8e:	46bd      	mov	sp, r7
 800ce90:	bdb0      	pop	{r4, r5, r7, pc}
 800ce92:	bf00      	nop
 800ce94:	0801ab2c 	.word	0x0801ab2c
 800ce98:	0801ac00 	.word	0x0801ac00
 800ce9c:	0801ab70 	.word	0x0801ab70
 800cea0:	0801ac20 	.word	0x0801ac20
 800cea4:	20010d84 	.word	0x20010d84
 800cea8:	20010d8c 	.word	0x20010d8c
 800ceac:	20010dc4 	.word	0x20010dc4
 800ceb0:	20010d7c 	.word	0x20010d7c
 800ceb4:	20010d80 	.word	0x20010d80

0800ceb8 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800ceb8:	b580      	push	{r7, lr}
 800ceba:	b084      	sub	sp, #16
 800cebc:	af00      	add	r7, sp, #0
 800cebe:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	d106      	bne.n	800ced4 <tcp_close_shutdown_fin+0x1c>
 800cec6:	4b2e      	ldr	r3, [pc, #184]	; (800cf80 <tcp_close_shutdown_fin+0xc8>)
 800cec8:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800cecc:	492d      	ldr	r1, [pc, #180]	; (800cf84 <tcp_close_shutdown_fin+0xcc>)
 800cece:	482e      	ldr	r0, [pc, #184]	; (800cf88 <tcp_close_shutdown_fin+0xd0>)
 800ced0:	f00b fa78 	bl	80183c4 <iprintf>

  switch (pcb->state) {
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	7d1b      	ldrb	r3, [r3, #20]
 800ced8:	2b07      	cmp	r3, #7
 800ceda:	d020      	beq.n	800cf1e <tcp_close_shutdown_fin+0x66>
 800cedc:	2b07      	cmp	r3, #7
 800cede:	dc2b      	bgt.n	800cf38 <tcp_close_shutdown_fin+0x80>
 800cee0:	2b03      	cmp	r3, #3
 800cee2:	d002      	beq.n	800ceea <tcp_close_shutdown_fin+0x32>
 800cee4:	2b04      	cmp	r3, #4
 800cee6:	d00d      	beq.n	800cf04 <tcp_close_shutdown_fin+0x4c>
 800cee8:	e026      	b.n	800cf38 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800ceea:	6878      	ldr	r0, [r7, #4]
 800ceec:	f004 fe40 	bl	8011b70 <tcp_send_fin>
 800cef0:	4603      	mov	r3, r0
 800cef2:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800cef4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	d11f      	bne.n	800cf3c <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	2205      	movs	r2, #5
 800cf00:	751a      	strb	r2, [r3, #20]
      }
      break;
 800cf02:	e01b      	b.n	800cf3c <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800cf04:	6878      	ldr	r0, [r7, #4]
 800cf06:	f004 fe33 	bl	8011b70 <tcp_send_fin>
 800cf0a:	4603      	mov	r3, r0
 800cf0c:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800cf0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cf12:	2b00      	cmp	r3, #0
 800cf14:	d114      	bne.n	800cf40 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	2205      	movs	r2, #5
 800cf1a:	751a      	strb	r2, [r3, #20]
      }
      break;
 800cf1c:	e010      	b.n	800cf40 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800cf1e:	6878      	ldr	r0, [r7, #4]
 800cf20:	f004 fe26 	bl	8011b70 <tcp_send_fin>
 800cf24:	4603      	mov	r3, r0
 800cf26:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800cf28:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	d109      	bne.n	800cf44 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	2209      	movs	r2, #9
 800cf34:	751a      	strb	r2, [r3, #20]
      }
      break;
 800cf36:	e005      	b.n	800cf44 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800cf38:	2300      	movs	r3, #0
 800cf3a:	e01c      	b.n	800cf76 <tcp_close_shutdown_fin+0xbe>
      break;
 800cf3c:	bf00      	nop
 800cf3e:	e002      	b.n	800cf46 <tcp_close_shutdown_fin+0x8e>
      break;
 800cf40:	bf00      	nop
 800cf42:	e000      	b.n	800cf46 <tcp_close_shutdown_fin+0x8e>
      break;
 800cf44:	bf00      	nop
  }

  if (err == ERR_OK) {
 800cf46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cf4a:	2b00      	cmp	r3, #0
 800cf4c:	d103      	bne.n	800cf56 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800cf4e:	6878      	ldr	r0, [r7, #4]
 800cf50:	f004 ff4c 	bl	8011dec <tcp_output>
 800cf54:	e00d      	b.n	800cf72 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800cf56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cf5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf5e:	d108      	bne.n	800cf72 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	8b5b      	ldrh	r3, [r3, #26]
 800cf64:	f043 0308 	orr.w	r3, r3, #8
 800cf68:	b29a      	uxth	r2, r3
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800cf6e:	2300      	movs	r3, #0
 800cf70:	e001      	b.n	800cf76 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800cf72:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800cf76:	4618      	mov	r0, r3
 800cf78:	3710      	adds	r7, #16
 800cf7a:	46bd      	mov	sp, r7
 800cf7c:	bd80      	pop	{r7, pc}
 800cf7e:	bf00      	nop
 800cf80:	0801ab2c 	.word	0x0801ab2c
 800cf84:	0801abdc 	.word	0x0801abdc
 800cf88:	0801ab70 	.word	0x0801ab70

0800cf8c <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800cf8c:	b580      	push	{r7, lr}
 800cf8e:	b082      	sub	sp, #8
 800cf90:	af00      	add	r7, sp, #0
 800cf92:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	2b00      	cmp	r3, #0
 800cf98:	d109      	bne.n	800cfae <tcp_close+0x22>
 800cf9a:	4b0f      	ldr	r3, [pc, #60]	; (800cfd8 <tcp_close+0x4c>)
 800cf9c:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800cfa0:	490e      	ldr	r1, [pc, #56]	; (800cfdc <tcp_close+0x50>)
 800cfa2:	480f      	ldr	r0, [pc, #60]	; (800cfe0 <tcp_close+0x54>)
 800cfa4:	f00b fa0e 	bl	80183c4 <iprintf>
 800cfa8:	f06f 030f 	mvn.w	r3, #15
 800cfac:	e00f      	b.n	800cfce <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	7d1b      	ldrb	r3, [r3, #20]
 800cfb2:	2b01      	cmp	r3, #1
 800cfb4:	d006      	beq.n	800cfc4 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	8b5b      	ldrh	r3, [r3, #26]
 800cfba:	f043 0310 	orr.w	r3, r3, #16
 800cfbe:	b29a      	uxth	r2, r3
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800cfc4:	2101      	movs	r1, #1
 800cfc6:	6878      	ldr	r0, [r7, #4]
 800cfc8:	f7ff fe94 	bl	800ccf4 <tcp_close_shutdown>
 800cfcc:	4603      	mov	r3, r0
}
 800cfce:	4618      	mov	r0, r3
 800cfd0:	3708      	adds	r7, #8
 800cfd2:	46bd      	mov	sp, r7
 800cfd4:	bd80      	pop	{r7, pc}
 800cfd6:	bf00      	nop
 800cfd8:	0801ab2c 	.word	0x0801ab2c
 800cfdc:	0801ac3c 	.word	0x0801ac3c
 800cfe0:	0801ab70 	.word	0x0801ab70

0800cfe4 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 800cfe4:	b580      	push	{r7, lr}
 800cfe6:	b084      	sub	sp, #16
 800cfe8:	af00      	add	r7, sp, #0
 800cfea:	60f8      	str	r0, [r7, #12]
 800cfec:	60b9      	str	r1, [r7, #8]
 800cfee:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 800cff0:	68fb      	ldr	r3, [r7, #12]
 800cff2:	2b00      	cmp	r3, #0
 800cff4:	d109      	bne.n	800d00a <tcp_shutdown+0x26>
 800cff6:	4b26      	ldr	r3, [pc, #152]	; (800d090 <tcp_shutdown+0xac>)
 800cff8:	f240 2207 	movw	r2, #519	; 0x207
 800cffc:	4925      	ldr	r1, [pc, #148]	; (800d094 <tcp_shutdown+0xb0>)
 800cffe:	4826      	ldr	r0, [pc, #152]	; (800d098 <tcp_shutdown+0xb4>)
 800d000:	f00b f9e0 	bl	80183c4 <iprintf>
 800d004:	f06f 030f 	mvn.w	r3, #15
 800d008:	e03d      	b.n	800d086 <tcp_shutdown+0xa2>

  if (pcb->state == LISTEN) {
 800d00a:	68fb      	ldr	r3, [r7, #12]
 800d00c:	7d1b      	ldrb	r3, [r3, #20]
 800d00e:	2b01      	cmp	r3, #1
 800d010:	d102      	bne.n	800d018 <tcp_shutdown+0x34>
    return ERR_CONN;
 800d012:	f06f 030a 	mvn.w	r3, #10
 800d016:	e036      	b.n	800d086 <tcp_shutdown+0xa2>
  }
  if (shut_rx) {
 800d018:	68bb      	ldr	r3, [r7, #8]
 800d01a:	2b00      	cmp	r3, #0
 800d01c:	d01b      	beq.n	800d056 <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800d01e:	68fb      	ldr	r3, [r7, #12]
 800d020:	8b5b      	ldrh	r3, [r3, #26]
 800d022:	f043 0310 	orr.w	r3, r3, #16
 800d026:	b29a      	uxth	r2, r3
 800d028:	68fb      	ldr	r3, [r7, #12]
 800d02a:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	2b00      	cmp	r3, #0
 800d030:	d005      	beq.n	800d03e <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 800d032:	2101      	movs	r1, #1
 800d034:	68f8      	ldr	r0, [r7, #12]
 800d036:	f7ff fe5d 	bl	800ccf4 <tcp_close_shutdown>
 800d03a:	4603      	mov	r3, r0
 800d03c:	e023      	b.n	800d086 <tcp_shutdown+0xa2>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 800d03e:	68fb      	ldr	r3, [r7, #12]
 800d040:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d042:	2b00      	cmp	r3, #0
 800d044:	d007      	beq.n	800d056 <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 800d046:	68fb      	ldr	r3, [r7, #12]
 800d048:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d04a:	4618      	mov	r0, r3
 800d04c:	f7ff fae4 	bl	800c618 <pbuf_free>
      pcb->refused_data = NULL;
 800d050:	68fb      	ldr	r3, [r7, #12]
 800d052:	2200      	movs	r2, #0
 800d054:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }
  if (shut_tx) {
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	2b00      	cmp	r3, #0
 800d05a:	d013      	beq.n	800d084 <tcp_shutdown+0xa0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 800d05c:	68fb      	ldr	r3, [r7, #12]
 800d05e:	7d1b      	ldrb	r3, [r3, #20]
 800d060:	2b04      	cmp	r3, #4
 800d062:	dc02      	bgt.n	800d06a <tcp_shutdown+0x86>
 800d064:	2b03      	cmp	r3, #3
 800d066:	da02      	bge.n	800d06e <tcp_shutdown+0x8a>
 800d068:	e009      	b.n	800d07e <tcp_shutdown+0x9a>
 800d06a:	2b07      	cmp	r3, #7
 800d06c:	d107      	bne.n	800d07e <tcp_shutdown+0x9a>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 800d06e:	68bb      	ldr	r3, [r7, #8]
 800d070:	b2db      	uxtb	r3, r3
 800d072:	4619      	mov	r1, r3
 800d074:	68f8      	ldr	r0, [r7, #12]
 800d076:	f7ff fe3d 	bl	800ccf4 <tcp_close_shutdown>
 800d07a:	4603      	mov	r3, r0
 800d07c:	e003      	b.n	800d086 <tcp_shutdown+0xa2>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 800d07e:	f06f 030a 	mvn.w	r3, #10
 800d082:	e000      	b.n	800d086 <tcp_shutdown+0xa2>
    }
  }
  return ERR_OK;
 800d084:	2300      	movs	r3, #0
}
 800d086:	4618      	mov	r0, r3
 800d088:	3710      	adds	r7, #16
 800d08a:	46bd      	mov	sp, r7
 800d08c:	bd80      	pop	{r7, pc}
 800d08e:	bf00      	nop
 800d090:	0801ab2c 	.word	0x0801ab2c
 800d094:	0801ac54 	.word	0x0801ac54
 800d098:	0801ab70 	.word	0x0801ab70

0800d09c <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800d09c:	b580      	push	{r7, lr}
 800d09e:	b08e      	sub	sp, #56	; 0x38
 800d0a0:	af04      	add	r7, sp, #16
 800d0a2:	6078      	str	r0, [r7, #4]
 800d0a4:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	2b00      	cmp	r3, #0
 800d0aa:	d107      	bne.n	800d0bc <tcp_abandon+0x20>
 800d0ac:	4b52      	ldr	r3, [pc, #328]	; (800d1f8 <tcp_abandon+0x15c>)
 800d0ae:	f240 223d 	movw	r2, #573	; 0x23d
 800d0b2:	4952      	ldr	r1, [pc, #328]	; (800d1fc <tcp_abandon+0x160>)
 800d0b4:	4852      	ldr	r0, [pc, #328]	; (800d200 <tcp_abandon+0x164>)
 800d0b6:	f00b f985 	bl	80183c4 <iprintf>
 800d0ba:	e099      	b.n	800d1f0 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	7d1b      	ldrb	r3, [r3, #20]
 800d0c0:	2b01      	cmp	r3, #1
 800d0c2:	d106      	bne.n	800d0d2 <tcp_abandon+0x36>
 800d0c4:	4b4c      	ldr	r3, [pc, #304]	; (800d1f8 <tcp_abandon+0x15c>)
 800d0c6:	f44f 7210 	mov.w	r2, #576	; 0x240
 800d0ca:	494e      	ldr	r1, [pc, #312]	; (800d204 <tcp_abandon+0x168>)
 800d0cc:	484c      	ldr	r0, [pc, #304]	; (800d200 <tcp_abandon+0x164>)
 800d0ce:	f00b f979 	bl	80183c4 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	7d1b      	ldrb	r3, [r3, #20]
 800d0d6:	2b0a      	cmp	r3, #10
 800d0d8:	d107      	bne.n	800d0ea <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800d0da:	6879      	ldr	r1, [r7, #4]
 800d0dc:	484a      	ldr	r0, [pc, #296]	; (800d208 <tcp_abandon+0x16c>)
 800d0de:	f001 fa69 	bl	800e5b4 <tcp_pcb_remove>
    tcp_free(pcb);
 800d0e2:	6878      	ldr	r0, [r7, #4]
 800d0e4:	f7ff fd54 	bl	800cb90 <tcp_free>
 800d0e8:	e082      	b.n	800d1f0 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800d0ea:	2300      	movs	r3, #0
 800d0ec:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800d0ee:	2300      	movs	r3, #0
 800d0f0:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d0f6:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0fc:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d104:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	691b      	ldr	r3, [r3, #16]
 800d10a:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	7d1b      	ldrb	r3, [r3, #20]
 800d110:	2b00      	cmp	r3, #0
 800d112:	d126      	bne.n	800d162 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	8adb      	ldrh	r3, [r3, #22]
 800d118:	2b00      	cmp	r3, #0
 800d11a:	d02e      	beq.n	800d17a <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800d11c:	4b3b      	ldr	r3, [pc, #236]	; (800d20c <tcp_abandon+0x170>)
 800d11e:	681b      	ldr	r3, [r3, #0]
 800d120:	687a      	ldr	r2, [r7, #4]
 800d122:	429a      	cmp	r2, r3
 800d124:	d105      	bne.n	800d132 <tcp_abandon+0x96>
 800d126:	4b39      	ldr	r3, [pc, #228]	; (800d20c <tcp_abandon+0x170>)
 800d128:	681b      	ldr	r3, [r3, #0]
 800d12a:	68db      	ldr	r3, [r3, #12]
 800d12c:	4a37      	ldr	r2, [pc, #220]	; (800d20c <tcp_abandon+0x170>)
 800d12e:	6013      	str	r3, [r2, #0]
 800d130:	e013      	b.n	800d15a <tcp_abandon+0xbe>
 800d132:	4b36      	ldr	r3, [pc, #216]	; (800d20c <tcp_abandon+0x170>)
 800d134:	681b      	ldr	r3, [r3, #0]
 800d136:	61fb      	str	r3, [r7, #28]
 800d138:	e00c      	b.n	800d154 <tcp_abandon+0xb8>
 800d13a:	69fb      	ldr	r3, [r7, #28]
 800d13c:	68db      	ldr	r3, [r3, #12]
 800d13e:	687a      	ldr	r2, [r7, #4]
 800d140:	429a      	cmp	r2, r3
 800d142:	d104      	bne.n	800d14e <tcp_abandon+0xb2>
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	68da      	ldr	r2, [r3, #12]
 800d148:	69fb      	ldr	r3, [r7, #28]
 800d14a:	60da      	str	r2, [r3, #12]
 800d14c:	e005      	b.n	800d15a <tcp_abandon+0xbe>
 800d14e:	69fb      	ldr	r3, [r7, #28]
 800d150:	68db      	ldr	r3, [r3, #12]
 800d152:	61fb      	str	r3, [r7, #28]
 800d154:	69fb      	ldr	r3, [r7, #28]
 800d156:	2b00      	cmp	r3, #0
 800d158:	d1ef      	bne.n	800d13a <tcp_abandon+0x9e>
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	2200      	movs	r2, #0
 800d15e:	60da      	str	r2, [r3, #12]
 800d160:	e00b      	b.n	800d17a <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800d162:	683b      	ldr	r3, [r7, #0]
 800d164:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	8adb      	ldrh	r3, [r3, #22]
 800d16a:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800d16c:	6879      	ldr	r1, [r7, #4]
 800d16e:	4828      	ldr	r0, [pc, #160]	; (800d210 <tcp_abandon+0x174>)
 800d170:	f001 fa20 	bl	800e5b4 <tcp_pcb_remove>
 800d174:	4b27      	ldr	r3, [pc, #156]	; (800d214 <tcp_abandon+0x178>)
 800d176:	2201      	movs	r2, #1
 800d178:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d17e:	2b00      	cmp	r3, #0
 800d180:	d004      	beq.n	800d18c <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d186:	4618      	mov	r0, r3
 800d188:	f000 fed6 	bl	800df38 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d190:	2b00      	cmp	r3, #0
 800d192:	d004      	beq.n	800d19e <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d198:	4618      	mov	r0, r3
 800d19a:	f000 fecd 	bl	800df38 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d1a2:	2b00      	cmp	r3, #0
 800d1a4:	d004      	beq.n	800d1b0 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d1aa:	4618      	mov	r0, r3
 800d1ac:	f000 fec4 	bl	800df38 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800d1b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1b2:	2b00      	cmp	r3, #0
 800d1b4:	d00e      	beq.n	800d1d4 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800d1b6:	6879      	ldr	r1, [r7, #4]
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	3304      	adds	r3, #4
 800d1bc:	687a      	ldr	r2, [r7, #4]
 800d1be:	8b12      	ldrh	r2, [r2, #24]
 800d1c0:	9202      	str	r2, [sp, #8]
 800d1c2:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800d1c4:	9201      	str	r2, [sp, #4]
 800d1c6:	9300      	str	r3, [sp, #0]
 800d1c8:	460b      	mov	r3, r1
 800d1ca:	697a      	ldr	r2, [r7, #20]
 800d1cc:	69b9      	ldr	r1, [r7, #24]
 800d1ce:	6878      	ldr	r0, [r7, #4]
 800d1d0:	f005 fbc0 	bl	8012954 <tcp_rst>
    }
    last_state = pcb->state;
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	7d1b      	ldrb	r3, [r3, #20]
 800d1d8:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800d1da:	6878      	ldr	r0, [r7, #4]
 800d1dc:	f7ff fcd8 	bl	800cb90 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800d1e0:	693b      	ldr	r3, [r7, #16]
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	d004      	beq.n	800d1f0 <tcp_abandon+0x154>
 800d1e6:	693b      	ldr	r3, [r7, #16]
 800d1e8:	f06f 010c 	mvn.w	r1, #12
 800d1ec:	68f8      	ldr	r0, [r7, #12]
 800d1ee:	4798      	blx	r3
  }
}
 800d1f0:	3728      	adds	r7, #40	; 0x28
 800d1f2:	46bd      	mov	sp, r7
 800d1f4:	bd80      	pop	{r7, pc}
 800d1f6:	bf00      	nop
 800d1f8:	0801ab2c 	.word	0x0801ab2c
 800d1fc:	0801ac70 	.word	0x0801ac70
 800d200:	0801ab70 	.word	0x0801ab70
 800d204:	0801ac8c 	.word	0x0801ac8c
 800d208:	20010d88 	.word	0x20010d88
 800d20c:	20010d7c 	.word	0x20010d7c
 800d210:	20010d84 	.word	0x20010d84
 800d214:	20010d8c 	.word	0x20010d8c

0800d218 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800d218:	b580      	push	{r7, lr}
 800d21a:	b082      	sub	sp, #8
 800d21c:	af00      	add	r7, sp, #0
 800d21e:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800d220:	2101      	movs	r1, #1
 800d222:	6878      	ldr	r0, [r7, #4]
 800d224:	f7ff ff3a 	bl	800d09c <tcp_abandon>
}
 800d228:	bf00      	nop
 800d22a:	3708      	adds	r7, #8
 800d22c:	46bd      	mov	sp, r7
 800d22e:	bd80      	pop	{r7, pc}

0800d230 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800d230:	b580      	push	{r7, lr}
 800d232:	b088      	sub	sp, #32
 800d234:	af00      	add	r7, sp, #0
 800d236:	60f8      	str	r0, [r7, #12]
 800d238:	60b9      	str	r1, [r7, #8]
 800d23a:	4613      	mov	r3, r2
 800d23c:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 800d23e:	2304      	movs	r3, #4
 800d240:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800d242:	68bb      	ldr	r3, [r7, #8]
 800d244:	2b00      	cmp	r3, #0
 800d246:	d101      	bne.n	800d24c <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 800d248:	4b3e      	ldr	r3, [pc, #248]	; (800d344 <tcp_bind+0x114>)
 800d24a:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800d24c:	68fb      	ldr	r3, [r7, #12]
 800d24e:	2b00      	cmp	r3, #0
 800d250:	d109      	bne.n	800d266 <tcp_bind+0x36>
 800d252:	4b3d      	ldr	r3, [pc, #244]	; (800d348 <tcp_bind+0x118>)
 800d254:	f240 22a9 	movw	r2, #681	; 0x2a9
 800d258:	493c      	ldr	r1, [pc, #240]	; (800d34c <tcp_bind+0x11c>)
 800d25a:	483d      	ldr	r0, [pc, #244]	; (800d350 <tcp_bind+0x120>)
 800d25c:	f00b f8b2 	bl	80183c4 <iprintf>
 800d260:	f06f 030f 	mvn.w	r3, #15
 800d264:	e06a      	b.n	800d33c <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800d266:	68fb      	ldr	r3, [r7, #12]
 800d268:	7d1b      	ldrb	r3, [r3, #20]
 800d26a:	2b00      	cmp	r3, #0
 800d26c:	d009      	beq.n	800d282 <tcp_bind+0x52>
 800d26e:	4b36      	ldr	r3, [pc, #216]	; (800d348 <tcp_bind+0x118>)
 800d270:	f240 22ab 	movw	r2, #683	; 0x2ab
 800d274:	4937      	ldr	r1, [pc, #220]	; (800d354 <tcp_bind+0x124>)
 800d276:	4836      	ldr	r0, [pc, #216]	; (800d350 <tcp_bind+0x120>)
 800d278:	f00b f8a4 	bl	80183c4 <iprintf>
 800d27c:	f06f 0305 	mvn.w	r3, #5
 800d280:	e05c      	b.n	800d33c <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 800d282:	88fb      	ldrh	r3, [r7, #6]
 800d284:	2b00      	cmp	r3, #0
 800d286:	d109      	bne.n	800d29c <tcp_bind+0x6c>
    port = tcp_new_port();
 800d288:	f000 f9f0 	bl	800d66c <tcp_new_port>
 800d28c:	4603      	mov	r3, r0
 800d28e:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800d290:	88fb      	ldrh	r3, [r7, #6]
 800d292:	2b00      	cmp	r3, #0
 800d294:	d135      	bne.n	800d302 <tcp_bind+0xd2>
      return ERR_BUF;
 800d296:	f06f 0301 	mvn.w	r3, #1
 800d29a:	e04f      	b.n	800d33c <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 800d29c:	2300      	movs	r3, #0
 800d29e:	61fb      	str	r3, [r7, #28]
 800d2a0:	e02b      	b.n	800d2fa <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800d2a2:	4a2d      	ldr	r2, [pc, #180]	; (800d358 <tcp_bind+0x128>)
 800d2a4:	69fb      	ldr	r3, [r7, #28]
 800d2a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d2aa:	681b      	ldr	r3, [r3, #0]
 800d2ac:	61bb      	str	r3, [r7, #24]
 800d2ae:	e01e      	b.n	800d2ee <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 800d2b0:	69bb      	ldr	r3, [r7, #24]
 800d2b2:	8adb      	ldrh	r3, [r3, #22]
 800d2b4:	88fa      	ldrh	r2, [r7, #6]
 800d2b6:	429a      	cmp	r2, r3
 800d2b8:	d116      	bne.n	800d2e8 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 800d2ba:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800d2bc:	2b00      	cmp	r3, #0
 800d2be:	d010      	beq.n	800d2e2 <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 800d2c0:	69bb      	ldr	r3, [r7, #24]
 800d2c2:	681b      	ldr	r3, [r3, #0]
 800d2c4:	2b00      	cmp	r3, #0
 800d2c6:	d00c      	beq.n	800d2e2 <tcp_bind+0xb2>
 800d2c8:	68bb      	ldr	r3, [r7, #8]
 800d2ca:	2b00      	cmp	r3, #0
 800d2cc:	d009      	beq.n	800d2e2 <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 800d2ce:	68bb      	ldr	r3, [r7, #8]
 800d2d0:	681b      	ldr	r3, [r3, #0]
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	d005      	beq.n	800d2e2 <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 800d2d6:	69bb      	ldr	r3, [r7, #24]
 800d2d8:	681a      	ldr	r2, [r3, #0]
 800d2da:	68bb      	ldr	r3, [r7, #8]
 800d2dc:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800d2de:	429a      	cmp	r2, r3
 800d2e0:	d102      	bne.n	800d2e8 <tcp_bind+0xb8>
              return ERR_USE;
 800d2e2:	f06f 0307 	mvn.w	r3, #7
 800d2e6:	e029      	b.n	800d33c <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800d2e8:	69bb      	ldr	r3, [r7, #24]
 800d2ea:	68db      	ldr	r3, [r3, #12]
 800d2ec:	61bb      	str	r3, [r7, #24]
 800d2ee:	69bb      	ldr	r3, [r7, #24]
 800d2f0:	2b00      	cmp	r3, #0
 800d2f2:	d1dd      	bne.n	800d2b0 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 800d2f4:	69fb      	ldr	r3, [r7, #28]
 800d2f6:	3301      	adds	r3, #1
 800d2f8:	61fb      	str	r3, [r7, #28]
 800d2fa:	69fa      	ldr	r2, [r7, #28]
 800d2fc:	697b      	ldr	r3, [r7, #20]
 800d2fe:	429a      	cmp	r2, r3
 800d300:	dbcf      	blt.n	800d2a2 <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 800d302:	68bb      	ldr	r3, [r7, #8]
 800d304:	2b00      	cmp	r3, #0
 800d306:	d00c      	beq.n	800d322 <tcp_bind+0xf2>
 800d308:	68bb      	ldr	r3, [r7, #8]
 800d30a:	681b      	ldr	r3, [r3, #0]
 800d30c:	2b00      	cmp	r3, #0
 800d30e:	d008      	beq.n	800d322 <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 800d310:	68bb      	ldr	r3, [r7, #8]
 800d312:	2b00      	cmp	r3, #0
 800d314:	d002      	beq.n	800d31c <tcp_bind+0xec>
 800d316:	68bb      	ldr	r3, [r7, #8]
 800d318:	681b      	ldr	r3, [r3, #0]
 800d31a:	e000      	b.n	800d31e <tcp_bind+0xee>
 800d31c:	2300      	movs	r3, #0
 800d31e:	68fa      	ldr	r2, [r7, #12]
 800d320:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 800d322:	68fb      	ldr	r3, [r7, #12]
 800d324:	88fa      	ldrh	r2, [r7, #6]
 800d326:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800d328:	4b0c      	ldr	r3, [pc, #48]	; (800d35c <tcp_bind+0x12c>)
 800d32a:	681a      	ldr	r2, [r3, #0]
 800d32c:	68fb      	ldr	r3, [r7, #12]
 800d32e:	60da      	str	r2, [r3, #12]
 800d330:	4a0a      	ldr	r2, [pc, #40]	; (800d35c <tcp_bind+0x12c>)
 800d332:	68fb      	ldr	r3, [r7, #12]
 800d334:	6013      	str	r3, [r2, #0]
 800d336:	f005 fccf 	bl	8012cd8 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 800d33a:	2300      	movs	r3, #0
}
 800d33c:	4618      	mov	r0, r3
 800d33e:	3720      	adds	r7, #32
 800d340:	46bd      	mov	sp, r7
 800d342:	bd80      	pop	{r7, pc}
 800d344:	08027060 	.word	0x08027060
 800d348:	0801ab2c 	.word	0x0801ab2c
 800d34c:	0801acc0 	.word	0x0801acc0
 800d350:	0801ab70 	.word	0x0801ab70
 800d354:	0801acd8 	.word	0x0801acd8
 800d358:	08027028 	.word	0x08027028
 800d35c:	20010d7c 	.word	0x20010d7c

0800d360 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 800d360:	b580      	push	{r7, lr}
 800d362:	b084      	sub	sp, #16
 800d364:	af00      	add	r7, sp, #0
 800d366:	60f8      	str	r0, [r7, #12]
 800d368:	60b9      	str	r1, [r7, #8]
 800d36a:	4613      	mov	r3, r2
 800d36c:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 800d36e:	68bb      	ldr	r3, [r7, #8]
 800d370:	2b00      	cmp	r3, #0
 800d372:	d106      	bne.n	800d382 <tcp_accept_null+0x22>
 800d374:	4b07      	ldr	r3, [pc, #28]	; (800d394 <tcp_accept_null+0x34>)
 800d376:	f240 320f 	movw	r2, #783	; 0x30f
 800d37a:	4907      	ldr	r1, [pc, #28]	; (800d398 <tcp_accept_null+0x38>)
 800d37c:	4807      	ldr	r0, [pc, #28]	; (800d39c <tcp_accept_null+0x3c>)
 800d37e:	f00b f821 	bl	80183c4 <iprintf>

  tcp_abort(pcb);
 800d382:	68b8      	ldr	r0, [r7, #8]
 800d384:	f7ff ff48 	bl	800d218 <tcp_abort>

  return ERR_ABRT;
 800d388:	f06f 030c 	mvn.w	r3, #12
}
 800d38c:	4618      	mov	r0, r3
 800d38e:	3710      	adds	r7, #16
 800d390:	46bd      	mov	sp, r7
 800d392:	bd80      	pop	{r7, pc}
 800d394:	0801ab2c 	.word	0x0801ab2c
 800d398:	0801ad00 	.word	0x0801ad00
 800d39c:	0801ab70 	.word	0x0801ab70

0800d3a0 <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 800d3a0:	b580      	push	{r7, lr}
 800d3a2:	b082      	sub	sp, #8
 800d3a4:	af00      	add	r7, sp, #0
 800d3a6:	6078      	str	r0, [r7, #4]
 800d3a8:	460b      	mov	r3, r1
 800d3aa:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 800d3ac:	78fb      	ldrb	r3, [r7, #3]
 800d3ae:	2200      	movs	r2, #0
 800d3b0:	4619      	mov	r1, r3
 800d3b2:	6878      	ldr	r0, [r7, #4]
 800d3b4:	f000 f806 	bl	800d3c4 <tcp_listen_with_backlog_and_err>
 800d3b8:	4603      	mov	r3, r0
}
 800d3ba:	4618      	mov	r0, r3
 800d3bc:	3708      	adds	r7, #8
 800d3be:	46bd      	mov	sp, r7
 800d3c0:	bd80      	pop	{r7, pc}
	...

0800d3c4 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 800d3c4:	b580      	push	{r7, lr}
 800d3c6:	b088      	sub	sp, #32
 800d3c8:	af00      	add	r7, sp, #0
 800d3ca:	60f8      	str	r0, [r7, #12]
 800d3cc:	460b      	mov	r3, r1
 800d3ce:	607a      	str	r2, [r7, #4]
 800d3d0:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 800d3d2:	2300      	movs	r3, #0
 800d3d4:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 800d3d6:	68fb      	ldr	r3, [r7, #12]
 800d3d8:	2b00      	cmp	r3, #0
 800d3da:	d109      	bne.n	800d3f0 <tcp_listen_with_backlog_and_err+0x2c>
 800d3dc:	4b47      	ldr	r3, [pc, #284]	; (800d4fc <tcp_listen_with_backlog_and_err+0x138>)
 800d3de:	f240 3259 	movw	r2, #857	; 0x359
 800d3e2:	4947      	ldr	r1, [pc, #284]	; (800d500 <tcp_listen_with_backlog_and_err+0x13c>)
 800d3e4:	4847      	ldr	r0, [pc, #284]	; (800d504 <tcp_listen_with_backlog_and_err+0x140>)
 800d3e6:	f00a ffed 	bl	80183c4 <iprintf>
 800d3ea:	23f0      	movs	r3, #240	; 0xf0
 800d3ec:	76fb      	strb	r3, [r7, #27]
 800d3ee:	e079      	b.n	800d4e4 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800d3f0:	68fb      	ldr	r3, [r7, #12]
 800d3f2:	7d1b      	ldrb	r3, [r3, #20]
 800d3f4:	2b00      	cmp	r3, #0
 800d3f6:	d009      	beq.n	800d40c <tcp_listen_with_backlog_and_err+0x48>
 800d3f8:	4b40      	ldr	r3, [pc, #256]	; (800d4fc <tcp_listen_with_backlog_and_err+0x138>)
 800d3fa:	f240 325a 	movw	r2, #858	; 0x35a
 800d3fe:	4942      	ldr	r1, [pc, #264]	; (800d508 <tcp_listen_with_backlog_and_err+0x144>)
 800d400:	4840      	ldr	r0, [pc, #256]	; (800d504 <tcp_listen_with_backlog_and_err+0x140>)
 800d402:	f00a ffdf 	bl	80183c4 <iprintf>
 800d406:	23f1      	movs	r3, #241	; 0xf1
 800d408:	76fb      	strb	r3, [r7, #27]
 800d40a:	e06b      	b.n	800d4e4 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 800d40c:	68fb      	ldr	r3, [r7, #12]
 800d40e:	7d1b      	ldrb	r3, [r3, #20]
 800d410:	2b01      	cmp	r3, #1
 800d412:	d104      	bne.n	800d41e <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 800d414:	68fb      	ldr	r3, [r7, #12]
 800d416:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 800d418:	23f7      	movs	r3, #247	; 0xf7
 800d41a:	76fb      	strb	r3, [r7, #27]
    goto done;
 800d41c:	e062      	b.n	800d4e4 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 800d41e:	2002      	movs	r0, #2
 800d420:	f7fe f9d4 	bl	800b7cc <memp_malloc>
 800d424:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 800d426:	69fb      	ldr	r3, [r7, #28]
 800d428:	2b00      	cmp	r3, #0
 800d42a:	d102      	bne.n	800d432 <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 800d42c:	23ff      	movs	r3, #255	; 0xff
 800d42e:	76fb      	strb	r3, [r7, #27]
    goto done;
 800d430:	e058      	b.n	800d4e4 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 800d432:	68fb      	ldr	r3, [r7, #12]
 800d434:	691a      	ldr	r2, [r3, #16]
 800d436:	69fb      	ldr	r3, [r7, #28]
 800d438:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 800d43a:	68fb      	ldr	r3, [r7, #12]
 800d43c:	8ada      	ldrh	r2, [r3, #22]
 800d43e:	69fb      	ldr	r3, [r7, #28]
 800d440:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 800d442:	69fb      	ldr	r3, [r7, #28]
 800d444:	2201      	movs	r2, #1
 800d446:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 800d448:	68fb      	ldr	r3, [r7, #12]
 800d44a:	7d5a      	ldrb	r2, [r3, #21]
 800d44c:	69fb      	ldr	r3, [r7, #28]
 800d44e:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 800d450:	68fb      	ldr	r3, [r7, #12]
 800d452:	7a5a      	ldrb	r2, [r3, #9]
 800d454:	69fb      	ldr	r3, [r7, #28]
 800d456:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 800d458:	69fb      	ldr	r3, [r7, #28]
 800d45a:	2200      	movs	r2, #0
 800d45c:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 800d45e:	68fb      	ldr	r3, [r7, #12]
 800d460:	7ada      	ldrb	r2, [r3, #11]
 800d462:	69fb      	ldr	r3, [r7, #28]
 800d464:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 800d466:	68fb      	ldr	r3, [r7, #12]
 800d468:	7a9a      	ldrb	r2, [r3, #10]
 800d46a:	69fb      	ldr	r3, [r7, #28]
 800d46c:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 800d46e:	68fb      	ldr	r3, [r7, #12]
 800d470:	681a      	ldr	r2, [r3, #0]
 800d472:	69fb      	ldr	r3, [r7, #28]
 800d474:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 800d476:	68fb      	ldr	r3, [r7, #12]
 800d478:	8adb      	ldrh	r3, [r3, #22]
 800d47a:	2b00      	cmp	r3, #0
 800d47c:	d021      	beq.n	800d4c2 <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800d47e:	4b23      	ldr	r3, [pc, #140]	; (800d50c <tcp_listen_with_backlog_and_err+0x148>)
 800d480:	681b      	ldr	r3, [r3, #0]
 800d482:	68fa      	ldr	r2, [r7, #12]
 800d484:	429a      	cmp	r2, r3
 800d486:	d105      	bne.n	800d494 <tcp_listen_with_backlog_and_err+0xd0>
 800d488:	4b20      	ldr	r3, [pc, #128]	; (800d50c <tcp_listen_with_backlog_and_err+0x148>)
 800d48a:	681b      	ldr	r3, [r3, #0]
 800d48c:	68db      	ldr	r3, [r3, #12]
 800d48e:	4a1f      	ldr	r2, [pc, #124]	; (800d50c <tcp_listen_with_backlog_and_err+0x148>)
 800d490:	6013      	str	r3, [r2, #0]
 800d492:	e013      	b.n	800d4bc <tcp_listen_with_backlog_and_err+0xf8>
 800d494:	4b1d      	ldr	r3, [pc, #116]	; (800d50c <tcp_listen_with_backlog_and_err+0x148>)
 800d496:	681b      	ldr	r3, [r3, #0]
 800d498:	617b      	str	r3, [r7, #20]
 800d49a:	e00c      	b.n	800d4b6 <tcp_listen_with_backlog_and_err+0xf2>
 800d49c:	697b      	ldr	r3, [r7, #20]
 800d49e:	68db      	ldr	r3, [r3, #12]
 800d4a0:	68fa      	ldr	r2, [r7, #12]
 800d4a2:	429a      	cmp	r2, r3
 800d4a4:	d104      	bne.n	800d4b0 <tcp_listen_with_backlog_and_err+0xec>
 800d4a6:	68fb      	ldr	r3, [r7, #12]
 800d4a8:	68da      	ldr	r2, [r3, #12]
 800d4aa:	697b      	ldr	r3, [r7, #20]
 800d4ac:	60da      	str	r2, [r3, #12]
 800d4ae:	e005      	b.n	800d4bc <tcp_listen_with_backlog_and_err+0xf8>
 800d4b0:	697b      	ldr	r3, [r7, #20]
 800d4b2:	68db      	ldr	r3, [r3, #12]
 800d4b4:	617b      	str	r3, [r7, #20]
 800d4b6:	697b      	ldr	r3, [r7, #20]
 800d4b8:	2b00      	cmp	r3, #0
 800d4ba:	d1ef      	bne.n	800d49c <tcp_listen_with_backlog_and_err+0xd8>
 800d4bc:	68fb      	ldr	r3, [r7, #12]
 800d4be:	2200      	movs	r2, #0
 800d4c0:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 800d4c2:	68f8      	ldr	r0, [r7, #12]
 800d4c4:	f7ff fb64 	bl	800cb90 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 800d4c8:	69fb      	ldr	r3, [r7, #28]
 800d4ca:	4a11      	ldr	r2, [pc, #68]	; (800d510 <tcp_listen_with_backlog_and_err+0x14c>)
 800d4cc:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 800d4ce:	4b11      	ldr	r3, [pc, #68]	; (800d514 <tcp_listen_with_backlog_and_err+0x150>)
 800d4d0:	681a      	ldr	r2, [r3, #0]
 800d4d2:	69fb      	ldr	r3, [r7, #28]
 800d4d4:	60da      	str	r2, [r3, #12]
 800d4d6:	4a0f      	ldr	r2, [pc, #60]	; (800d514 <tcp_listen_with_backlog_and_err+0x150>)
 800d4d8:	69fb      	ldr	r3, [r7, #28]
 800d4da:	6013      	str	r3, [r2, #0]
 800d4dc:	f005 fbfc 	bl	8012cd8 <tcp_timer_needed>
  res = ERR_OK;
 800d4e0:	2300      	movs	r3, #0
 800d4e2:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	2b00      	cmp	r3, #0
 800d4e8:	d002      	beq.n	800d4f0 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	7efa      	ldrb	r2, [r7, #27]
 800d4ee:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 800d4f0:	69fb      	ldr	r3, [r7, #28]
}
 800d4f2:	4618      	mov	r0, r3
 800d4f4:	3720      	adds	r7, #32
 800d4f6:	46bd      	mov	sp, r7
 800d4f8:	bd80      	pop	{r7, pc}
 800d4fa:	bf00      	nop
 800d4fc:	0801ab2c 	.word	0x0801ab2c
 800d500:	0801ad20 	.word	0x0801ad20
 800d504:	0801ab70 	.word	0x0801ab70
 800d508:	0801ad50 	.word	0x0801ad50
 800d50c:	20010d7c 	.word	0x20010d7c
 800d510:	0800d361 	.word	0x0800d361
 800d514:	20010d80 	.word	0x20010d80

0800d518 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800d518:	b580      	push	{r7, lr}
 800d51a:	b084      	sub	sp, #16
 800d51c:	af00      	add	r7, sp, #0
 800d51e:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	2b00      	cmp	r3, #0
 800d524:	d106      	bne.n	800d534 <tcp_update_rcv_ann_wnd+0x1c>
 800d526:	4b25      	ldr	r3, [pc, #148]	; (800d5bc <tcp_update_rcv_ann_wnd+0xa4>)
 800d528:	f240 32a6 	movw	r2, #934	; 0x3a6
 800d52c:	4924      	ldr	r1, [pc, #144]	; (800d5c0 <tcp_update_rcv_ann_wnd+0xa8>)
 800d52e:	4825      	ldr	r0, [pc, #148]	; (800d5c4 <tcp_update_rcv_ann_wnd+0xac>)
 800d530:	f00a ff48 	bl	80183c4 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d538:	687a      	ldr	r2, [r7, #4]
 800d53a:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800d53c:	4413      	add	r3, r2
 800d53e:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d544:	687a      	ldr	r2, [r7, #4]
 800d546:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800d548:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800d54c:	bf28      	it	cs
 800d54e:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800d552:	b292      	uxth	r2, r2
 800d554:	4413      	add	r3, r2
 800d556:	68fa      	ldr	r2, [r7, #12]
 800d558:	1ad3      	subs	r3, r2, r3
 800d55a:	2b00      	cmp	r3, #0
 800d55c:	db08      	blt.n	800d570 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d56a:	68fa      	ldr	r2, [r7, #12]
 800d56c:	1ad3      	subs	r3, r2, r3
 800d56e:	e020      	b.n	800d5b2 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d578:	1ad3      	subs	r3, r2, r3
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	dd03      	ble.n	800d586 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	2200      	movs	r2, #0
 800d582:	855a      	strh	r2, [r3, #42]	; 0x2a
 800d584:	e014      	b.n	800d5b0 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d58e:	1ad3      	subs	r3, r2, r3
 800d590:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800d592:	68bb      	ldr	r3, [r7, #8]
 800d594:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d598:	d306      	bcc.n	800d5a8 <tcp_update_rcv_ann_wnd+0x90>
 800d59a:	4b08      	ldr	r3, [pc, #32]	; (800d5bc <tcp_update_rcv_ann_wnd+0xa4>)
 800d59c:	f240 32b6 	movw	r2, #950	; 0x3b6
 800d5a0:	4909      	ldr	r1, [pc, #36]	; (800d5c8 <tcp_update_rcv_ann_wnd+0xb0>)
 800d5a2:	4808      	ldr	r0, [pc, #32]	; (800d5c4 <tcp_update_rcv_ann_wnd+0xac>)
 800d5a4:	f00a ff0e 	bl	80183c4 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800d5a8:	68bb      	ldr	r3, [r7, #8]
 800d5aa:	b29a      	uxth	r2, r3
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800d5b0:	2300      	movs	r3, #0
  }
}
 800d5b2:	4618      	mov	r0, r3
 800d5b4:	3710      	adds	r7, #16
 800d5b6:	46bd      	mov	sp, r7
 800d5b8:	bd80      	pop	{r7, pc}
 800d5ba:	bf00      	nop
 800d5bc:	0801ab2c 	.word	0x0801ab2c
 800d5c0:	0801ad88 	.word	0x0801ad88
 800d5c4:	0801ab70 	.word	0x0801ab70
 800d5c8:	0801adac 	.word	0x0801adac

0800d5cc <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800d5cc:	b580      	push	{r7, lr}
 800d5ce:	b084      	sub	sp, #16
 800d5d0:	af00      	add	r7, sp, #0
 800d5d2:	6078      	str	r0, [r7, #4]
 800d5d4:	460b      	mov	r3, r1
 800d5d6:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	2b00      	cmp	r3, #0
 800d5dc:	d107      	bne.n	800d5ee <tcp_recved+0x22>
 800d5de:	4b1f      	ldr	r3, [pc, #124]	; (800d65c <tcp_recved+0x90>)
 800d5e0:	f240 32cf 	movw	r2, #975	; 0x3cf
 800d5e4:	491e      	ldr	r1, [pc, #120]	; (800d660 <tcp_recved+0x94>)
 800d5e6:	481f      	ldr	r0, [pc, #124]	; (800d664 <tcp_recved+0x98>)
 800d5e8:	f00a feec 	bl	80183c4 <iprintf>
 800d5ec:	e032      	b.n	800d654 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	7d1b      	ldrb	r3, [r3, #20]
 800d5f2:	2b01      	cmp	r3, #1
 800d5f4:	d106      	bne.n	800d604 <tcp_recved+0x38>
 800d5f6:	4b19      	ldr	r3, [pc, #100]	; (800d65c <tcp_recved+0x90>)
 800d5f8:	f240 32d2 	movw	r2, #978	; 0x3d2
 800d5fc:	491a      	ldr	r1, [pc, #104]	; (800d668 <tcp_recved+0x9c>)
 800d5fe:	4819      	ldr	r0, [pc, #100]	; (800d664 <tcp_recved+0x98>)
 800d600:	f00a fee0 	bl	80183c4 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800d608:	887b      	ldrh	r3, [r7, #2]
 800d60a:	4413      	add	r3, r2
 800d60c:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800d60e:	89fb      	ldrh	r3, [r7, #14]
 800d610:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800d614:	d804      	bhi.n	800d620 <tcp_recved+0x54>
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d61a:	89fa      	ldrh	r2, [r7, #14]
 800d61c:	429a      	cmp	r2, r3
 800d61e:	d204      	bcs.n	800d62a <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800d626:	851a      	strh	r2, [r3, #40]	; 0x28
 800d628:	e002      	b.n	800d630 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	89fa      	ldrh	r2, [r7, #14]
 800d62e:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800d630:	6878      	ldr	r0, [r7, #4]
 800d632:	f7ff ff71 	bl	800d518 <tcp_update_rcv_ann_wnd>
 800d636:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800d638:	68bb      	ldr	r3, [r7, #8]
 800d63a:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800d63e:	d309      	bcc.n	800d654 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	8b5b      	ldrh	r3, [r3, #26]
 800d644:	f043 0302 	orr.w	r3, r3, #2
 800d648:	b29a      	uxth	r2, r3
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800d64e:	6878      	ldr	r0, [r7, #4]
 800d650:	f004 fbcc 	bl	8011dec <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800d654:	3710      	adds	r7, #16
 800d656:	46bd      	mov	sp, r7
 800d658:	bd80      	pop	{r7, pc}
 800d65a:	bf00      	nop
 800d65c:	0801ab2c 	.word	0x0801ab2c
 800d660:	0801adc8 	.word	0x0801adc8
 800d664:	0801ab70 	.word	0x0801ab70
 800d668:	0801ade0 	.word	0x0801ade0

0800d66c <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800d66c:	b480      	push	{r7}
 800d66e:	b083      	sub	sp, #12
 800d670:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800d672:	2300      	movs	r3, #0
 800d674:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800d676:	4b1e      	ldr	r3, [pc, #120]	; (800d6f0 <tcp_new_port+0x84>)
 800d678:	881b      	ldrh	r3, [r3, #0]
 800d67a:	3301      	adds	r3, #1
 800d67c:	b29a      	uxth	r2, r3
 800d67e:	4b1c      	ldr	r3, [pc, #112]	; (800d6f0 <tcp_new_port+0x84>)
 800d680:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800d682:	4b1b      	ldr	r3, [pc, #108]	; (800d6f0 <tcp_new_port+0x84>)
 800d684:	881b      	ldrh	r3, [r3, #0]
 800d686:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d68a:	4293      	cmp	r3, r2
 800d68c:	d103      	bne.n	800d696 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800d68e:	4b18      	ldr	r3, [pc, #96]	; (800d6f0 <tcp_new_port+0x84>)
 800d690:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800d694:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800d696:	2300      	movs	r3, #0
 800d698:	71fb      	strb	r3, [r7, #7]
 800d69a:	e01e      	b.n	800d6da <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800d69c:	79fb      	ldrb	r3, [r7, #7]
 800d69e:	4a15      	ldr	r2, [pc, #84]	; (800d6f4 <tcp_new_port+0x88>)
 800d6a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d6a4:	681b      	ldr	r3, [r3, #0]
 800d6a6:	603b      	str	r3, [r7, #0]
 800d6a8:	e011      	b.n	800d6ce <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800d6aa:	683b      	ldr	r3, [r7, #0]
 800d6ac:	8ada      	ldrh	r2, [r3, #22]
 800d6ae:	4b10      	ldr	r3, [pc, #64]	; (800d6f0 <tcp_new_port+0x84>)
 800d6b0:	881b      	ldrh	r3, [r3, #0]
 800d6b2:	429a      	cmp	r2, r3
 800d6b4:	d108      	bne.n	800d6c8 <tcp_new_port+0x5c>
        n++;
 800d6b6:	88bb      	ldrh	r3, [r7, #4]
 800d6b8:	3301      	adds	r3, #1
 800d6ba:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800d6bc:	88bb      	ldrh	r3, [r7, #4]
 800d6be:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d6c2:	d3d8      	bcc.n	800d676 <tcp_new_port+0xa>
          return 0;
 800d6c4:	2300      	movs	r3, #0
 800d6c6:	e00d      	b.n	800d6e4 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800d6c8:	683b      	ldr	r3, [r7, #0]
 800d6ca:	68db      	ldr	r3, [r3, #12]
 800d6cc:	603b      	str	r3, [r7, #0]
 800d6ce:	683b      	ldr	r3, [r7, #0]
 800d6d0:	2b00      	cmp	r3, #0
 800d6d2:	d1ea      	bne.n	800d6aa <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800d6d4:	79fb      	ldrb	r3, [r7, #7]
 800d6d6:	3301      	adds	r3, #1
 800d6d8:	71fb      	strb	r3, [r7, #7]
 800d6da:	79fb      	ldrb	r3, [r7, #7]
 800d6dc:	2b03      	cmp	r3, #3
 800d6de:	d9dd      	bls.n	800d69c <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800d6e0:	4b03      	ldr	r3, [pc, #12]	; (800d6f0 <tcp_new_port+0x84>)
 800d6e2:	881b      	ldrh	r3, [r3, #0]
}
 800d6e4:	4618      	mov	r0, r3
 800d6e6:	370c      	adds	r7, #12
 800d6e8:	46bd      	mov	sp, r7
 800d6ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6ee:	4770      	bx	lr
 800d6f0:	20000024 	.word	0x20000024
 800d6f4:	08027028 	.word	0x08027028

0800d6f8 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800d6f8:	b5b0      	push	{r4, r5, r7, lr}
 800d6fa:	b090      	sub	sp, #64	; 0x40
 800d6fc:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800d6fe:	2300      	movs	r3, #0
 800d700:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800d704:	4b94      	ldr	r3, [pc, #592]	; (800d958 <tcp_slowtmr+0x260>)
 800d706:	681b      	ldr	r3, [r3, #0]
 800d708:	3301      	adds	r3, #1
 800d70a:	4a93      	ldr	r2, [pc, #588]	; (800d958 <tcp_slowtmr+0x260>)
 800d70c:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800d70e:	4b93      	ldr	r3, [pc, #588]	; (800d95c <tcp_slowtmr+0x264>)
 800d710:	781b      	ldrb	r3, [r3, #0]
 800d712:	3301      	adds	r3, #1
 800d714:	b2da      	uxtb	r2, r3
 800d716:	4b91      	ldr	r3, [pc, #580]	; (800d95c <tcp_slowtmr+0x264>)
 800d718:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800d71a:	2300      	movs	r3, #0
 800d71c:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800d71e:	4b90      	ldr	r3, [pc, #576]	; (800d960 <tcp_slowtmr+0x268>)
 800d720:	681b      	ldr	r3, [r3, #0]
 800d722:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800d724:	e29f      	b.n	800dc66 <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800d726:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d728:	7d1b      	ldrb	r3, [r3, #20]
 800d72a:	2b00      	cmp	r3, #0
 800d72c:	d106      	bne.n	800d73c <tcp_slowtmr+0x44>
 800d72e:	4b8d      	ldr	r3, [pc, #564]	; (800d964 <tcp_slowtmr+0x26c>)
 800d730:	f240 42be 	movw	r2, #1214	; 0x4be
 800d734:	498c      	ldr	r1, [pc, #560]	; (800d968 <tcp_slowtmr+0x270>)
 800d736:	488d      	ldr	r0, [pc, #564]	; (800d96c <tcp_slowtmr+0x274>)
 800d738:	f00a fe44 	bl	80183c4 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800d73c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d73e:	7d1b      	ldrb	r3, [r3, #20]
 800d740:	2b01      	cmp	r3, #1
 800d742:	d106      	bne.n	800d752 <tcp_slowtmr+0x5a>
 800d744:	4b87      	ldr	r3, [pc, #540]	; (800d964 <tcp_slowtmr+0x26c>)
 800d746:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800d74a:	4989      	ldr	r1, [pc, #548]	; (800d970 <tcp_slowtmr+0x278>)
 800d74c:	4887      	ldr	r0, [pc, #540]	; (800d96c <tcp_slowtmr+0x274>)
 800d74e:	f00a fe39 	bl	80183c4 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800d752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d754:	7d1b      	ldrb	r3, [r3, #20]
 800d756:	2b0a      	cmp	r3, #10
 800d758:	d106      	bne.n	800d768 <tcp_slowtmr+0x70>
 800d75a:	4b82      	ldr	r3, [pc, #520]	; (800d964 <tcp_slowtmr+0x26c>)
 800d75c:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800d760:	4984      	ldr	r1, [pc, #528]	; (800d974 <tcp_slowtmr+0x27c>)
 800d762:	4882      	ldr	r0, [pc, #520]	; (800d96c <tcp_slowtmr+0x274>)
 800d764:	f00a fe2e 	bl	80183c4 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800d768:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d76a:	7f9a      	ldrb	r2, [r3, #30]
 800d76c:	4b7b      	ldr	r3, [pc, #492]	; (800d95c <tcp_slowtmr+0x264>)
 800d76e:	781b      	ldrb	r3, [r3, #0]
 800d770:	429a      	cmp	r2, r3
 800d772:	d105      	bne.n	800d780 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800d774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d776:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800d778:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d77a:	68db      	ldr	r3, [r3, #12]
 800d77c:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800d77e:	e272      	b.n	800dc66 <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 800d780:	4b76      	ldr	r3, [pc, #472]	; (800d95c <tcp_slowtmr+0x264>)
 800d782:	781a      	ldrb	r2, [r3, #0]
 800d784:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d786:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800d788:	2300      	movs	r3, #0
 800d78a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800d78e:	2300      	movs	r3, #0
 800d790:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800d794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d796:	7d1b      	ldrb	r3, [r3, #20]
 800d798:	2b02      	cmp	r3, #2
 800d79a:	d10a      	bne.n	800d7b2 <tcp_slowtmr+0xba>
 800d79c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d79e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d7a2:	2b05      	cmp	r3, #5
 800d7a4:	d905      	bls.n	800d7b2 <tcp_slowtmr+0xba>
      ++pcb_remove;
 800d7a6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d7aa:	3301      	adds	r3, #1
 800d7ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d7b0:	e11e      	b.n	800d9f0 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800d7b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7b4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d7b8:	2b0b      	cmp	r3, #11
 800d7ba:	d905      	bls.n	800d7c8 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800d7bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d7c0:	3301      	adds	r3, #1
 800d7c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d7c6:	e113      	b.n	800d9f0 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800d7c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7ca:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800d7ce:	2b00      	cmp	r3, #0
 800d7d0:	d075      	beq.n	800d8be <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800d7d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d7d6:	2b00      	cmp	r3, #0
 800d7d8:	d006      	beq.n	800d7e8 <tcp_slowtmr+0xf0>
 800d7da:	4b62      	ldr	r3, [pc, #392]	; (800d964 <tcp_slowtmr+0x26c>)
 800d7dc:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800d7e0:	4965      	ldr	r1, [pc, #404]	; (800d978 <tcp_slowtmr+0x280>)
 800d7e2:	4862      	ldr	r0, [pc, #392]	; (800d96c <tcp_slowtmr+0x274>)
 800d7e4:	f00a fdee 	bl	80183c4 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800d7e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d7ec:	2b00      	cmp	r3, #0
 800d7ee:	d106      	bne.n	800d7fe <tcp_slowtmr+0x106>
 800d7f0:	4b5c      	ldr	r3, [pc, #368]	; (800d964 <tcp_slowtmr+0x26c>)
 800d7f2:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800d7f6:	4961      	ldr	r1, [pc, #388]	; (800d97c <tcp_slowtmr+0x284>)
 800d7f8:	485c      	ldr	r0, [pc, #368]	; (800d96c <tcp_slowtmr+0x274>)
 800d7fa:	f00a fde3 	bl	80183c4 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800d7fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d800:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800d804:	2b0b      	cmp	r3, #11
 800d806:	d905      	bls.n	800d814 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800d808:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d80c:	3301      	adds	r3, #1
 800d80e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d812:	e0ed      	b.n	800d9f0 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800d814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d816:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800d81a:	3b01      	subs	r3, #1
 800d81c:	4a58      	ldr	r2, [pc, #352]	; (800d980 <tcp_slowtmr+0x288>)
 800d81e:	5cd3      	ldrb	r3, [r2, r3]
 800d820:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800d822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d824:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800d828:	7c7a      	ldrb	r2, [r7, #17]
 800d82a:	429a      	cmp	r2, r3
 800d82c:	d907      	bls.n	800d83e <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800d82e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d830:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800d834:	3301      	adds	r3, #1
 800d836:	b2da      	uxtb	r2, r3
 800d838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d83a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800d83e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d840:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800d844:	7c7a      	ldrb	r2, [r7, #17]
 800d846:	429a      	cmp	r2, r3
 800d848:	f200 80d2 	bhi.w	800d9f0 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800d84c:	2301      	movs	r3, #1
 800d84e:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800d850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d852:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d856:	2b00      	cmp	r3, #0
 800d858:	d108      	bne.n	800d86c <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800d85a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d85c:	f005 f96e 	bl	8012b3c <tcp_zero_window_probe>
 800d860:	4603      	mov	r3, r0
 800d862:	2b00      	cmp	r3, #0
 800d864:	d014      	beq.n	800d890 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800d866:	2300      	movs	r3, #0
 800d868:	623b      	str	r3, [r7, #32]
 800d86a:	e011      	b.n	800d890 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800d86c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d86e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d872:	4619      	mov	r1, r3
 800d874:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d876:	f004 f833 	bl	80118e0 <tcp_split_unsent_seg>
 800d87a:	4603      	mov	r3, r0
 800d87c:	2b00      	cmp	r3, #0
 800d87e:	d107      	bne.n	800d890 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800d880:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d882:	f004 fab3 	bl	8011dec <tcp_output>
 800d886:	4603      	mov	r3, r0
 800d888:	2b00      	cmp	r3, #0
 800d88a:	d101      	bne.n	800d890 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800d88c:	2300      	movs	r3, #0
 800d88e:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800d890:	6a3b      	ldr	r3, [r7, #32]
 800d892:	2b00      	cmp	r3, #0
 800d894:	f000 80ac 	beq.w	800d9f0 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800d898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d89a:	2200      	movs	r2, #0
 800d89c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800d8a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8a2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800d8a6:	2b06      	cmp	r3, #6
 800d8a8:	f200 80a2 	bhi.w	800d9f0 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800d8ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8ae:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800d8b2:	3301      	adds	r3, #1
 800d8b4:	b2da      	uxtb	r2, r3
 800d8b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8b8:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800d8bc:	e098      	b.n	800d9f0 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800d8be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8c0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800d8c4:	2b00      	cmp	r3, #0
 800d8c6:	db0f      	blt.n	800d8e8 <tcp_slowtmr+0x1f0>
 800d8c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8ca:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800d8ce:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800d8d2:	4293      	cmp	r3, r2
 800d8d4:	d008      	beq.n	800d8e8 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800d8d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8d8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800d8dc:	b29b      	uxth	r3, r3
 800d8de:	3301      	adds	r3, #1
 800d8e0:	b29b      	uxth	r3, r3
 800d8e2:	b21a      	sxth	r2, r3
 800d8e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8e6:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800d8e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8ea:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800d8ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8f0:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800d8f4:	429a      	cmp	r2, r3
 800d8f6:	db7b      	blt.n	800d9f0 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800d8f8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d8fa:	f004 fd69 	bl	80123d0 <tcp_rexmit_rto_prepare>
 800d8fe:	4603      	mov	r3, r0
 800d900:	2b00      	cmp	r3, #0
 800d902:	d007      	beq.n	800d914 <tcp_slowtmr+0x21c>
 800d904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d906:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d908:	2b00      	cmp	r3, #0
 800d90a:	d171      	bne.n	800d9f0 <tcp_slowtmr+0x2f8>
 800d90c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d90e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d910:	2b00      	cmp	r3, #0
 800d912:	d06d      	beq.n	800d9f0 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800d914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d916:	7d1b      	ldrb	r3, [r3, #20]
 800d918:	2b02      	cmp	r3, #2
 800d91a:	d03a      	beq.n	800d992 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800d91c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d91e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d922:	2b0c      	cmp	r3, #12
 800d924:	bf28      	it	cs
 800d926:	230c      	movcs	r3, #12
 800d928:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800d92a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d92c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800d930:	10db      	asrs	r3, r3, #3
 800d932:	b21b      	sxth	r3, r3
 800d934:	461a      	mov	r2, r3
 800d936:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d938:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800d93c:	4413      	add	r3, r2
 800d93e:	7efa      	ldrb	r2, [r7, #27]
 800d940:	4910      	ldr	r1, [pc, #64]	; (800d984 <tcp_slowtmr+0x28c>)
 800d942:	5c8a      	ldrb	r2, [r1, r2]
 800d944:	4093      	lsls	r3, r2
 800d946:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800d948:	697b      	ldr	r3, [r7, #20]
 800d94a:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800d94e:	4293      	cmp	r3, r2
 800d950:	dc1a      	bgt.n	800d988 <tcp_slowtmr+0x290>
 800d952:	697b      	ldr	r3, [r7, #20]
 800d954:	b21a      	sxth	r2, r3
 800d956:	e019      	b.n	800d98c <tcp_slowtmr+0x294>
 800d958:	20010d78 	.word	0x20010d78
 800d95c:	20010d8e 	.word	0x20010d8e
 800d960:	20010d84 	.word	0x20010d84
 800d964:	0801ab2c 	.word	0x0801ab2c
 800d968:	0801ae70 	.word	0x0801ae70
 800d96c:	0801ab70 	.word	0x0801ab70
 800d970:	0801ae9c 	.word	0x0801ae9c
 800d974:	0801aec8 	.word	0x0801aec8
 800d978:	0801aef8 	.word	0x0801aef8
 800d97c:	0801af2c 	.word	0x0801af2c
 800d980:	08027020 	.word	0x08027020
 800d984:	08027010 	.word	0x08027010
 800d988:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800d98c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d98e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800d992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d994:	2200      	movs	r2, #0
 800d996:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800d998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d99a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800d99e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9a0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800d9a4:	4293      	cmp	r3, r2
 800d9a6:	bf28      	it	cs
 800d9a8:	4613      	movcs	r3, r2
 800d9aa:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800d9ac:	8a7b      	ldrh	r3, [r7, #18]
 800d9ae:	085b      	lsrs	r3, r3, #1
 800d9b0:	b29a      	uxth	r2, r3
 800d9b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9b4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800d9b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9ba:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800d9be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9c0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d9c2:	005b      	lsls	r3, r3, #1
 800d9c4:	b29b      	uxth	r3, r3
 800d9c6:	429a      	cmp	r2, r3
 800d9c8:	d206      	bcs.n	800d9d8 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800d9ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9cc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d9ce:	005b      	lsls	r3, r3, #1
 800d9d0:	b29a      	uxth	r2, r3
 800d9d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9d4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800d9d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9da:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800d9dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9de:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800d9e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9e4:	2200      	movs	r2, #0
 800d9e6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800d9ea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d9ec:	f004 fd60 	bl	80124b0 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800d9f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9f2:	7d1b      	ldrb	r3, [r3, #20]
 800d9f4:	2b06      	cmp	r3, #6
 800d9f6:	d111      	bne.n	800da1c <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800d9f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9fa:	8b5b      	ldrh	r3, [r3, #26]
 800d9fc:	f003 0310 	and.w	r3, r3, #16
 800da00:	2b00      	cmp	r3, #0
 800da02:	d00b      	beq.n	800da1c <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800da04:	4b9d      	ldr	r3, [pc, #628]	; (800dc7c <tcp_slowtmr+0x584>)
 800da06:	681a      	ldr	r2, [r3, #0]
 800da08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da0a:	6a1b      	ldr	r3, [r3, #32]
 800da0c:	1ad3      	subs	r3, r2, r3
 800da0e:	2b28      	cmp	r3, #40	; 0x28
 800da10:	d904      	bls.n	800da1c <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800da12:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800da16:	3301      	adds	r3, #1
 800da18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800da1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da1e:	7a5b      	ldrb	r3, [r3, #9]
 800da20:	f003 0308 	and.w	r3, r3, #8
 800da24:	2b00      	cmp	r3, #0
 800da26:	d04c      	beq.n	800dac2 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 800da28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da2a:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800da2c:	2b04      	cmp	r3, #4
 800da2e:	d003      	beq.n	800da38 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800da30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da32:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800da34:	2b07      	cmp	r3, #7
 800da36:	d144      	bne.n	800dac2 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800da38:	4b90      	ldr	r3, [pc, #576]	; (800dc7c <tcp_slowtmr+0x584>)
 800da3a:	681a      	ldr	r2, [r3, #0]
 800da3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da3e:	6a1b      	ldr	r3, [r3, #32]
 800da40:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800da42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da44:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800da48:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 800da4c:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 800da50:	498b      	ldr	r1, [pc, #556]	; (800dc80 <tcp_slowtmr+0x588>)
 800da52:	fba1 1303 	umull	r1, r3, r1, r3
 800da56:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800da58:	429a      	cmp	r2, r3
 800da5a:	d90a      	bls.n	800da72 <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800da5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800da60:	3301      	adds	r3, #1
 800da62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800da66:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800da6a:	3301      	adds	r3, #1
 800da6c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800da70:	e027      	b.n	800dac2 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800da72:	4b82      	ldr	r3, [pc, #520]	; (800dc7c <tcp_slowtmr+0x584>)
 800da74:	681a      	ldr	r2, [r3, #0]
 800da76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da78:	6a1b      	ldr	r3, [r3, #32]
 800da7a:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800da7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da7e:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800da82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da84:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800da88:	4618      	mov	r0, r3
 800da8a:	4b7e      	ldr	r3, [pc, #504]	; (800dc84 <tcp_slowtmr+0x58c>)
 800da8c:	fb00 f303 	mul.w	r3, r0, r3
 800da90:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800da92:	497b      	ldr	r1, [pc, #492]	; (800dc80 <tcp_slowtmr+0x588>)
 800da94:	fba1 1303 	umull	r1, r3, r1, r3
 800da98:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800da9a:	429a      	cmp	r2, r3
 800da9c:	d911      	bls.n	800dac2 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 800da9e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800daa0:	f005 f80c 	bl	8012abc <tcp_keepalive>
 800daa4:	4603      	mov	r3, r0
 800daa6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800daaa:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800daae:	2b00      	cmp	r3, #0
 800dab0:	d107      	bne.n	800dac2 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 800dab2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dab4:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800dab8:	3301      	adds	r3, #1
 800daba:	b2da      	uxtb	r2, r3
 800dabc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dabe:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800dac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dac4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dac6:	2b00      	cmp	r3, #0
 800dac8:	d011      	beq.n	800daee <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800daca:	4b6c      	ldr	r3, [pc, #432]	; (800dc7c <tcp_slowtmr+0x584>)
 800dacc:	681a      	ldr	r2, [r3, #0]
 800dace:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dad0:	6a1b      	ldr	r3, [r3, #32]
 800dad2:	1ad2      	subs	r2, r2, r3
 800dad4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dad6:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800dada:	4619      	mov	r1, r3
 800dadc:	460b      	mov	r3, r1
 800dade:	005b      	lsls	r3, r3, #1
 800dae0:	440b      	add	r3, r1
 800dae2:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800dae4:	429a      	cmp	r2, r3
 800dae6:	d302      	bcc.n	800daee <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800dae8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800daea:	f000 fec7 	bl	800e87c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800daee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800daf0:	7d1b      	ldrb	r3, [r3, #20]
 800daf2:	2b03      	cmp	r3, #3
 800daf4:	d10b      	bne.n	800db0e <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800daf6:	4b61      	ldr	r3, [pc, #388]	; (800dc7c <tcp_slowtmr+0x584>)
 800daf8:	681a      	ldr	r2, [r3, #0]
 800dafa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dafc:	6a1b      	ldr	r3, [r3, #32]
 800dafe:	1ad3      	subs	r3, r2, r3
 800db00:	2b28      	cmp	r3, #40	; 0x28
 800db02:	d904      	bls.n	800db0e <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800db04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800db08:	3301      	adds	r3, #1
 800db0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800db0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db10:	7d1b      	ldrb	r3, [r3, #20]
 800db12:	2b09      	cmp	r3, #9
 800db14:	d10b      	bne.n	800db2e <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800db16:	4b59      	ldr	r3, [pc, #356]	; (800dc7c <tcp_slowtmr+0x584>)
 800db18:	681a      	ldr	r2, [r3, #0]
 800db1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db1c:	6a1b      	ldr	r3, [r3, #32]
 800db1e:	1ad3      	subs	r3, r2, r3
 800db20:	2bf0      	cmp	r3, #240	; 0xf0
 800db22:	d904      	bls.n	800db2e <tcp_slowtmr+0x436>
        ++pcb_remove;
 800db24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800db28:	3301      	adds	r3, #1
 800db2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800db2e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800db32:	2b00      	cmp	r3, #0
 800db34:	d060      	beq.n	800dbf8 <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800db36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800db3c:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800db3e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800db40:	f000 fce8 	bl	800e514 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800db44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db46:	2b00      	cmp	r3, #0
 800db48:	d010      	beq.n	800db6c <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800db4a:	4b4f      	ldr	r3, [pc, #316]	; (800dc88 <tcp_slowtmr+0x590>)
 800db4c:	681b      	ldr	r3, [r3, #0]
 800db4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800db50:	429a      	cmp	r2, r3
 800db52:	d106      	bne.n	800db62 <tcp_slowtmr+0x46a>
 800db54:	4b4d      	ldr	r3, [pc, #308]	; (800dc8c <tcp_slowtmr+0x594>)
 800db56:	f240 526d 	movw	r2, #1389	; 0x56d
 800db5a:	494d      	ldr	r1, [pc, #308]	; (800dc90 <tcp_slowtmr+0x598>)
 800db5c:	484d      	ldr	r0, [pc, #308]	; (800dc94 <tcp_slowtmr+0x59c>)
 800db5e:	f00a fc31 	bl	80183c4 <iprintf>
        prev->next = pcb->next;
 800db62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db64:	68da      	ldr	r2, [r3, #12]
 800db66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db68:	60da      	str	r2, [r3, #12]
 800db6a:	e00f      	b.n	800db8c <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800db6c:	4b46      	ldr	r3, [pc, #280]	; (800dc88 <tcp_slowtmr+0x590>)
 800db6e:	681b      	ldr	r3, [r3, #0]
 800db70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800db72:	429a      	cmp	r2, r3
 800db74:	d006      	beq.n	800db84 <tcp_slowtmr+0x48c>
 800db76:	4b45      	ldr	r3, [pc, #276]	; (800dc8c <tcp_slowtmr+0x594>)
 800db78:	f240 5271 	movw	r2, #1393	; 0x571
 800db7c:	4946      	ldr	r1, [pc, #280]	; (800dc98 <tcp_slowtmr+0x5a0>)
 800db7e:	4845      	ldr	r0, [pc, #276]	; (800dc94 <tcp_slowtmr+0x59c>)
 800db80:	f00a fc20 	bl	80183c4 <iprintf>
        tcp_active_pcbs = pcb->next;
 800db84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db86:	68db      	ldr	r3, [r3, #12]
 800db88:	4a3f      	ldr	r2, [pc, #252]	; (800dc88 <tcp_slowtmr+0x590>)
 800db8a:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800db8c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800db90:	2b00      	cmp	r3, #0
 800db92:	d013      	beq.n	800dbbc <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800db94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db96:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800db98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db9a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800db9c:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800db9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dba0:	3304      	adds	r3, #4
 800dba2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dba4:	8ad2      	ldrh	r2, [r2, #22]
 800dba6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800dba8:	8b09      	ldrh	r1, [r1, #24]
 800dbaa:	9102      	str	r1, [sp, #8]
 800dbac:	9201      	str	r2, [sp, #4]
 800dbae:	9300      	str	r3, [sp, #0]
 800dbb0:	462b      	mov	r3, r5
 800dbb2:	4622      	mov	r2, r4
 800dbb4:	4601      	mov	r1, r0
 800dbb6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800dbb8:	f004 fecc 	bl	8012954 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800dbbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbbe:	691b      	ldr	r3, [r3, #16]
 800dbc0:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800dbc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbc4:	7d1b      	ldrb	r3, [r3, #20]
 800dbc6:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800dbc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbca:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800dbcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbce:	68db      	ldr	r3, [r3, #12]
 800dbd0:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800dbd2:	6838      	ldr	r0, [r7, #0]
 800dbd4:	f7fe ffdc 	bl	800cb90 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800dbd8:	4b30      	ldr	r3, [pc, #192]	; (800dc9c <tcp_slowtmr+0x5a4>)
 800dbda:	2200      	movs	r2, #0
 800dbdc:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800dbde:	68fb      	ldr	r3, [r7, #12]
 800dbe0:	2b00      	cmp	r3, #0
 800dbe2:	d004      	beq.n	800dbee <tcp_slowtmr+0x4f6>
 800dbe4:	68fb      	ldr	r3, [r7, #12]
 800dbe6:	f06f 010c 	mvn.w	r1, #12
 800dbea:	68b8      	ldr	r0, [r7, #8]
 800dbec:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800dbee:	4b2b      	ldr	r3, [pc, #172]	; (800dc9c <tcp_slowtmr+0x5a4>)
 800dbf0:	781b      	ldrb	r3, [r3, #0]
 800dbf2:	2b00      	cmp	r3, #0
 800dbf4:	d037      	beq.n	800dc66 <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 800dbf6:	e590      	b.n	800d71a <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800dbf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbfa:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800dbfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbfe:	68db      	ldr	r3, [r3, #12]
 800dc00:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800dc02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc04:	7f1b      	ldrb	r3, [r3, #28]
 800dc06:	3301      	adds	r3, #1
 800dc08:	b2da      	uxtb	r2, r3
 800dc0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc0c:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800dc0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc10:	7f1a      	ldrb	r2, [r3, #28]
 800dc12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc14:	7f5b      	ldrb	r3, [r3, #29]
 800dc16:	429a      	cmp	r2, r3
 800dc18:	d325      	bcc.n	800dc66 <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 800dc1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc1c:	2200      	movs	r2, #0
 800dc1e:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800dc20:	4b1e      	ldr	r3, [pc, #120]	; (800dc9c <tcp_slowtmr+0x5a4>)
 800dc22:	2200      	movs	r2, #0
 800dc24:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800dc26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc28:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dc2c:	2b00      	cmp	r3, #0
 800dc2e:	d00b      	beq.n	800dc48 <tcp_slowtmr+0x550>
 800dc30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc32:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dc36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dc38:	6912      	ldr	r2, [r2, #16]
 800dc3a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800dc3c:	4610      	mov	r0, r2
 800dc3e:	4798      	blx	r3
 800dc40:	4603      	mov	r3, r0
 800dc42:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800dc46:	e002      	b.n	800dc4e <tcp_slowtmr+0x556>
 800dc48:	2300      	movs	r3, #0
 800dc4a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800dc4e:	4b13      	ldr	r3, [pc, #76]	; (800dc9c <tcp_slowtmr+0x5a4>)
 800dc50:	781b      	ldrb	r3, [r3, #0]
 800dc52:	2b00      	cmp	r3, #0
 800dc54:	d000      	beq.n	800dc58 <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 800dc56:	e560      	b.n	800d71a <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800dc58:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800dc5c:	2b00      	cmp	r3, #0
 800dc5e:	d102      	bne.n	800dc66 <tcp_slowtmr+0x56e>
          tcp_output(prev);
 800dc60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dc62:	f004 f8c3 	bl	8011dec <tcp_output>
  while (pcb != NULL) {
 800dc66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc68:	2b00      	cmp	r3, #0
 800dc6a:	f47f ad5c 	bne.w	800d726 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800dc6e:	2300      	movs	r3, #0
 800dc70:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800dc72:	4b0b      	ldr	r3, [pc, #44]	; (800dca0 <tcp_slowtmr+0x5a8>)
 800dc74:	681b      	ldr	r3, [r3, #0]
 800dc76:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800dc78:	e067      	b.n	800dd4a <tcp_slowtmr+0x652>
 800dc7a:	bf00      	nop
 800dc7c:	20010d78 	.word	0x20010d78
 800dc80:	10624dd3 	.word	0x10624dd3
 800dc84:	000124f8 	.word	0x000124f8
 800dc88:	20010d84 	.word	0x20010d84
 800dc8c:	0801ab2c 	.word	0x0801ab2c
 800dc90:	0801af64 	.word	0x0801af64
 800dc94:	0801ab70 	.word	0x0801ab70
 800dc98:	0801af90 	.word	0x0801af90
 800dc9c:	20010d8c 	.word	0x20010d8c
 800dca0:	20010d88 	.word	0x20010d88
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800dca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dca6:	7d1b      	ldrb	r3, [r3, #20]
 800dca8:	2b0a      	cmp	r3, #10
 800dcaa:	d006      	beq.n	800dcba <tcp_slowtmr+0x5c2>
 800dcac:	4b2b      	ldr	r3, [pc, #172]	; (800dd5c <tcp_slowtmr+0x664>)
 800dcae:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800dcb2:	492b      	ldr	r1, [pc, #172]	; (800dd60 <tcp_slowtmr+0x668>)
 800dcb4:	482b      	ldr	r0, [pc, #172]	; (800dd64 <tcp_slowtmr+0x66c>)
 800dcb6:	f00a fb85 	bl	80183c4 <iprintf>
    pcb_remove = 0;
 800dcba:	2300      	movs	r3, #0
 800dcbc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800dcc0:	4b29      	ldr	r3, [pc, #164]	; (800dd68 <tcp_slowtmr+0x670>)
 800dcc2:	681a      	ldr	r2, [r3, #0]
 800dcc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcc6:	6a1b      	ldr	r3, [r3, #32]
 800dcc8:	1ad3      	subs	r3, r2, r3
 800dcca:	2bf0      	cmp	r3, #240	; 0xf0
 800dccc:	d904      	bls.n	800dcd8 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800dcce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dcd2:	3301      	adds	r3, #1
 800dcd4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800dcd8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dcdc:	2b00      	cmp	r3, #0
 800dcde:	d02f      	beq.n	800dd40 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800dce0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800dce2:	f000 fc17 	bl	800e514 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800dce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dce8:	2b00      	cmp	r3, #0
 800dcea:	d010      	beq.n	800dd0e <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800dcec:	4b1f      	ldr	r3, [pc, #124]	; (800dd6c <tcp_slowtmr+0x674>)
 800dcee:	681b      	ldr	r3, [r3, #0]
 800dcf0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dcf2:	429a      	cmp	r2, r3
 800dcf4:	d106      	bne.n	800dd04 <tcp_slowtmr+0x60c>
 800dcf6:	4b19      	ldr	r3, [pc, #100]	; (800dd5c <tcp_slowtmr+0x664>)
 800dcf8:	f240 52af 	movw	r2, #1455	; 0x5af
 800dcfc:	491c      	ldr	r1, [pc, #112]	; (800dd70 <tcp_slowtmr+0x678>)
 800dcfe:	4819      	ldr	r0, [pc, #100]	; (800dd64 <tcp_slowtmr+0x66c>)
 800dd00:	f00a fb60 	bl	80183c4 <iprintf>
        prev->next = pcb->next;
 800dd04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd06:	68da      	ldr	r2, [r3, #12]
 800dd08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd0a:	60da      	str	r2, [r3, #12]
 800dd0c:	e00f      	b.n	800dd2e <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800dd0e:	4b17      	ldr	r3, [pc, #92]	; (800dd6c <tcp_slowtmr+0x674>)
 800dd10:	681b      	ldr	r3, [r3, #0]
 800dd12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dd14:	429a      	cmp	r2, r3
 800dd16:	d006      	beq.n	800dd26 <tcp_slowtmr+0x62e>
 800dd18:	4b10      	ldr	r3, [pc, #64]	; (800dd5c <tcp_slowtmr+0x664>)
 800dd1a:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800dd1e:	4915      	ldr	r1, [pc, #84]	; (800dd74 <tcp_slowtmr+0x67c>)
 800dd20:	4810      	ldr	r0, [pc, #64]	; (800dd64 <tcp_slowtmr+0x66c>)
 800dd22:	f00a fb4f 	bl	80183c4 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800dd26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd28:	68db      	ldr	r3, [r3, #12]
 800dd2a:	4a10      	ldr	r2, [pc, #64]	; (800dd6c <tcp_slowtmr+0x674>)
 800dd2c:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800dd2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd30:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800dd32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd34:	68db      	ldr	r3, [r3, #12]
 800dd36:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800dd38:	69f8      	ldr	r0, [r7, #28]
 800dd3a:	f7fe ff29 	bl	800cb90 <tcp_free>
 800dd3e:	e004      	b.n	800dd4a <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800dd40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd42:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800dd44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd46:	68db      	ldr	r3, [r3, #12]
 800dd48:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800dd4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd4c:	2b00      	cmp	r3, #0
 800dd4e:	d1a9      	bne.n	800dca4 <tcp_slowtmr+0x5ac>
    }
  }
}
 800dd50:	bf00      	nop
 800dd52:	bf00      	nop
 800dd54:	3730      	adds	r7, #48	; 0x30
 800dd56:	46bd      	mov	sp, r7
 800dd58:	bdb0      	pop	{r4, r5, r7, pc}
 800dd5a:	bf00      	nop
 800dd5c:	0801ab2c 	.word	0x0801ab2c
 800dd60:	0801afbc 	.word	0x0801afbc
 800dd64:	0801ab70 	.word	0x0801ab70
 800dd68:	20010d78 	.word	0x20010d78
 800dd6c:	20010d88 	.word	0x20010d88
 800dd70:	0801afec 	.word	0x0801afec
 800dd74:	0801b014 	.word	0x0801b014

0800dd78 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800dd78:	b580      	push	{r7, lr}
 800dd7a:	b082      	sub	sp, #8
 800dd7c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800dd7e:	4b2d      	ldr	r3, [pc, #180]	; (800de34 <tcp_fasttmr+0xbc>)
 800dd80:	781b      	ldrb	r3, [r3, #0]
 800dd82:	3301      	adds	r3, #1
 800dd84:	b2da      	uxtb	r2, r3
 800dd86:	4b2b      	ldr	r3, [pc, #172]	; (800de34 <tcp_fasttmr+0xbc>)
 800dd88:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800dd8a:	4b2b      	ldr	r3, [pc, #172]	; (800de38 <tcp_fasttmr+0xc0>)
 800dd8c:	681b      	ldr	r3, [r3, #0]
 800dd8e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800dd90:	e048      	b.n	800de24 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	7f9a      	ldrb	r2, [r3, #30]
 800dd96:	4b27      	ldr	r3, [pc, #156]	; (800de34 <tcp_fasttmr+0xbc>)
 800dd98:	781b      	ldrb	r3, [r3, #0]
 800dd9a:	429a      	cmp	r2, r3
 800dd9c:	d03f      	beq.n	800de1e <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800dd9e:	4b25      	ldr	r3, [pc, #148]	; (800de34 <tcp_fasttmr+0xbc>)
 800dda0:	781a      	ldrb	r2, [r3, #0]
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	8b5b      	ldrh	r3, [r3, #26]
 800ddaa:	f003 0301 	and.w	r3, r3, #1
 800ddae:	2b00      	cmp	r3, #0
 800ddb0:	d010      	beq.n	800ddd4 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	8b5b      	ldrh	r3, [r3, #26]
 800ddb6:	f043 0302 	orr.w	r3, r3, #2
 800ddba:	b29a      	uxth	r2, r3
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800ddc0:	6878      	ldr	r0, [r7, #4]
 800ddc2:	f004 f813 	bl	8011dec <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	8b5b      	ldrh	r3, [r3, #26]
 800ddca:	f023 0303 	bic.w	r3, r3, #3
 800ddce:	b29a      	uxth	r2, r3
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	8b5b      	ldrh	r3, [r3, #26]
 800ddd8:	f003 0308 	and.w	r3, r3, #8
 800dddc:	2b00      	cmp	r3, #0
 800ddde:	d009      	beq.n	800ddf4 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	8b5b      	ldrh	r3, [r3, #26]
 800dde4:	f023 0308 	bic.w	r3, r3, #8
 800dde8:	b29a      	uxth	r2, r3
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800ddee:	6878      	ldr	r0, [r7, #4]
 800ddf0:	f7ff f862 	bl	800ceb8 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	68db      	ldr	r3, [r3, #12]
 800ddf8:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ddfe:	2b00      	cmp	r3, #0
 800de00:	d00a      	beq.n	800de18 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800de02:	4b0e      	ldr	r3, [pc, #56]	; (800de3c <tcp_fasttmr+0xc4>)
 800de04:	2200      	movs	r2, #0
 800de06:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800de08:	6878      	ldr	r0, [r7, #4]
 800de0a:	f000 f819 	bl	800de40 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800de0e:	4b0b      	ldr	r3, [pc, #44]	; (800de3c <tcp_fasttmr+0xc4>)
 800de10:	781b      	ldrb	r3, [r3, #0]
 800de12:	2b00      	cmp	r3, #0
 800de14:	d000      	beq.n	800de18 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800de16:	e7b8      	b.n	800dd8a <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800de18:	683b      	ldr	r3, [r7, #0]
 800de1a:	607b      	str	r3, [r7, #4]
 800de1c:	e002      	b.n	800de24 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	68db      	ldr	r3, [r3, #12]
 800de22:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	2b00      	cmp	r3, #0
 800de28:	d1b3      	bne.n	800dd92 <tcp_fasttmr+0x1a>
    }
  }
}
 800de2a:	bf00      	nop
 800de2c:	bf00      	nop
 800de2e:	3708      	adds	r7, #8
 800de30:	46bd      	mov	sp, r7
 800de32:	bd80      	pop	{r7, pc}
 800de34:	20010d8e 	.word	0x20010d8e
 800de38:	20010d84 	.word	0x20010d84
 800de3c:	20010d8c 	.word	0x20010d8c

0800de40 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800de40:	b590      	push	{r4, r7, lr}
 800de42:	b085      	sub	sp, #20
 800de44:	af00      	add	r7, sp, #0
 800de46:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	2b00      	cmp	r3, #0
 800de4c:	d109      	bne.n	800de62 <tcp_process_refused_data+0x22>
 800de4e:	4b37      	ldr	r3, [pc, #220]	; (800df2c <tcp_process_refused_data+0xec>)
 800de50:	f240 6209 	movw	r2, #1545	; 0x609
 800de54:	4936      	ldr	r1, [pc, #216]	; (800df30 <tcp_process_refused_data+0xf0>)
 800de56:	4837      	ldr	r0, [pc, #220]	; (800df34 <tcp_process_refused_data+0xf4>)
 800de58:	f00a fab4 	bl	80183c4 <iprintf>
 800de5c:	f06f 030f 	mvn.w	r3, #15
 800de60:	e060      	b.n	800df24 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800de66:	7b5b      	ldrb	r3, [r3, #13]
 800de68:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800de6e:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	2200      	movs	r2, #0
 800de74:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800de7c:	2b00      	cmp	r3, #0
 800de7e:	d00b      	beq.n	800de98 <tcp_process_refused_data+0x58>
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	6918      	ldr	r0, [r3, #16]
 800de8a:	2300      	movs	r3, #0
 800de8c:	68ba      	ldr	r2, [r7, #8]
 800de8e:	6879      	ldr	r1, [r7, #4]
 800de90:	47a0      	blx	r4
 800de92:	4603      	mov	r3, r0
 800de94:	73fb      	strb	r3, [r7, #15]
 800de96:	e007      	b.n	800dea8 <tcp_process_refused_data+0x68>
 800de98:	2300      	movs	r3, #0
 800de9a:	68ba      	ldr	r2, [r7, #8]
 800de9c:	6879      	ldr	r1, [r7, #4]
 800de9e:	2000      	movs	r0, #0
 800dea0:	f000 f8c2 	bl	800e028 <tcp_recv_null>
 800dea4:	4603      	mov	r3, r0
 800dea6:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800dea8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800deac:	2b00      	cmp	r3, #0
 800deae:	d12a      	bne.n	800df06 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800deb0:	7bbb      	ldrb	r3, [r7, #14]
 800deb2:	f003 0320 	and.w	r3, r3, #32
 800deb6:	2b00      	cmp	r3, #0
 800deb8:	d033      	beq.n	800df22 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800debe:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800dec2:	d005      	beq.n	800ded0 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dec8:	3301      	adds	r3, #1
 800deca:	b29a      	uxth	r2, r3
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ded6:	2b00      	cmp	r3, #0
 800ded8:	d00b      	beq.n	800def2 <tcp_process_refused_data+0xb2>
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	6918      	ldr	r0, [r3, #16]
 800dee4:	2300      	movs	r3, #0
 800dee6:	2200      	movs	r2, #0
 800dee8:	6879      	ldr	r1, [r7, #4]
 800deea:	47a0      	blx	r4
 800deec:	4603      	mov	r3, r0
 800deee:	73fb      	strb	r3, [r7, #15]
 800def0:	e001      	b.n	800def6 <tcp_process_refused_data+0xb6>
 800def2:	2300      	movs	r3, #0
 800def4:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800def6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800defa:	f113 0f0d 	cmn.w	r3, #13
 800defe:	d110      	bne.n	800df22 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800df00:	f06f 030c 	mvn.w	r3, #12
 800df04:	e00e      	b.n	800df24 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800df06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800df0a:	f113 0f0d 	cmn.w	r3, #13
 800df0e:	d102      	bne.n	800df16 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800df10:	f06f 030c 	mvn.w	r3, #12
 800df14:	e006      	b.n	800df24 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	68ba      	ldr	r2, [r7, #8]
 800df1a:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800df1c:	f06f 0304 	mvn.w	r3, #4
 800df20:	e000      	b.n	800df24 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800df22:	2300      	movs	r3, #0
}
 800df24:	4618      	mov	r0, r3
 800df26:	3714      	adds	r7, #20
 800df28:	46bd      	mov	sp, r7
 800df2a:	bd90      	pop	{r4, r7, pc}
 800df2c:	0801ab2c 	.word	0x0801ab2c
 800df30:	0801b03c 	.word	0x0801b03c
 800df34:	0801ab70 	.word	0x0801ab70

0800df38 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800df38:	b580      	push	{r7, lr}
 800df3a:	b084      	sub	sp, #16
 800df3c:	af00      	add	r7, sp, #0
 800df3e:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800df40:	e007      	b.n	800df52 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	681b      	ldr	r3, [r3, #0]
 800df46:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800df48:	6878      	ldr	r0, [r7, #4]
 800df4a:	f000 f80a 	bl	800df62 <tcp_seg_free>
    seg = next;
 800df4e:	68fb      	ldr	r3, [r7, #12]
 800df50:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	2b00      	cmp	r3, #0
 800df56:	d1f4      	bne.n	800df42 <tcp_segs_free+0xa>
  }
}
 800df58:	bf00      	nop
 800df5a:	bf00      	nop
 800df5c:	3710      	adds	r7, #16
 800df5e:	46bd      	mov	sp, r7
 800df60:	bd80      	pop	{r7, pc}

0800df62 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800df62:	b580      	push	{r7, lr}
 800df64:	b082      	sub	sp, #8
 800df66:	af00      	add	r7, sp, #0
 800df68:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	2b00      	cmp	r3, #0
 800df6e:	d00c      	beq.n	800df8a <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	685b      	ldr	r3, [r3, #4]
 800df74:	2b00      	cmp	r3, #0
 800df76:	d004      	beq.n	800df82 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	685b      	ldr	r3, [r3, #4]
 800df7c:	4618      	mov	r0, r3
 800df7e:	f7fe fb4b 	bl	800c618 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800df82:	6879      	ldr	r1, [r7, #4]
 800df84:	2003      	movs	r0, #3
 800df86:	f7fd fc97 	bl	800b8b8 <memp_free>
  }
}
 800df8a:	bf00      	nop
 800df8c:	3708      	adds	r7, #8
 800df8e:	46bd      	mov	sp, r7
 800df90:	bd80      	pop	{r7, pc}
	...

0800df94 <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
 800df94:	b580      	push	{r7, lr}
 800df96:	b082      	sub	sp, #8
 800df98:	af00      	add	r7, sp, #0
 800df9a:	6078      	str	r0, [r7, #4]
 800df9c:	460b      	mov	r3, r1
 800df9e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	2b00      	cmp	r3, #0
 800dfa4:	d107      	bne.n	800dfb6 <tcp_setprio+0x22>
 800dfa6:	4b07      	ldr	r3, [pc, #28]	; (800dfc4 <tcp_setprio+0x30>)
 800dfa8:	f44f 62ce 	mov.w	r2, #1648	; 0x670
 800dfac:	4906      	ldr	r1, [pc, #24]	; (800dfc8 <tcp_setprio+0x34>)
 800dfae:	4807      	ldr	r0, [pc, #28]	; (800dfcc <tcp_setprio+0x38>)
 800dfb0:	f00a fa08 	bl	80183c4 <iprintf>
 800dfb4:	e002      	b.n	800dfbc <tcp_setprio+0x28>

  pcb->prio = prio;
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	78fa      	ldrb	r2, [r7, #3]
 800dfba:	755a      	strb	r2, [r3, #21]
}
 800dfbc:	3708      	adds	r7, #8
 800dfbe:	46bd      	mov	sp, r7
 800dfc0:	bd80      	pop	{r7, pc}
 800dfc2:	bf00      	nop
 800dfc4:	0801ab2c 	.word	0x0801ab2c
 800dfc8:	0801b064 	.word	0x0801b064
 800dfcc:	0801ab70 	.word	0x0801ab70

0800dfd0 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800dfd0:	b580      	push	{r7, lr}
 800dfd2:	b084      	sub	sp, #16
 800dfd4:	af00      	add	r7, sp, #0
 800dfd6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	2b00      	cmp	r3, #0
 800dfdc:	d106      	bne.n	800dfec <tcp_seg_copy+0x1c>
 800dfde:	4b0f      	ldr	r3, [pc, #60]	; (800e01c <tcp_seg_copy+0x4c>)
 800dfe0:	f240 6282 	movw	r2, #1666	; 0x682
 800dfe4:	490e      	ldr	r1, [pc, #56]	; (800e020 <tcp_seg_copy+0x50>)
 800dfe6:	480f      	ldr	r0, [pc, #60]	; (800e024 <tcp_seg_copy+0x54>)
 800dfe8:	f00a f9ec 	bl	80183c4 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800dfec:	2003      	movs	r0, #3
 800dfee:	f7fd fbed 	bl	800b7cc <memp_malloc>
 800dff2:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800dff4:	68fb      	ldr	r3, [r7, #12]
 800dff6:	2b00      	cmp	r3, #0
 800dff8:	d101      	bne.n	800dffe <tcp_seg_copy+0x2e>
    return NULL;
 800dffa:	2300      	movs	r3, #0
 800dffc:	e00a      	b.n	800e014 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800dffe:	2210      	movs	r2, #16
 800e000:	6879      	ldr	r1, [r7, #4]
 800e002:	68f8      	ldr	r0, [r7, #12]
 800e004:	f00a f933 	bl	801826e <memcpy>
  pbuf_ref(cseg->p);
 800e008:	68fb      	ldr	r3, [r7, #12]
 800e00a:	685b      	ldr	r3, [r3, #4]
 800e00c:	4618      	mov	r0, r3
 800e00e:	f7fe fba9 	bl	800c764 <pbuf_ref>
  return cseg;
 800e012:	68fb      	ldr	r3, [r7, #12]
}
 800e014:	4618      	mov	r0, r3
 800e016:	3710      	adds	r7, #16
 800e018:	46bd      	mov	sp, r7
 800e01a:	bd80      	pop	{r7, pc}
 800e01c:	0801ab2c 	.word	0x0801ab2c
 800e020:	0801b080 	.word	0x0801b080
 800e024:	0801ab70 	.word	0x0801ab70

0800e028 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800e028:	b580      	push	{r7, lr}
 800e02a:	b084      	sub	sp, #16
 800e02c:	af00      	add	r7, sp, #0
 800e02e:	60f8      	str	r0, [r7, #12]
 800e030:	60b9      	str	r1, [r7, #8]
 800e032:	607a      	str	r2, [r7, #4]
 800e034:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800e036:	68bb      	ldr	r3, [r7, #8]
 800e038:	2b00      	cmp	r3, #0
 800e03a:	d109      	bne.n	800e050 <tcp_recv_null+0x28>
 800e03c:	4b12      	ldr	r3, [pc, #72]	; (800e088 <tcp_recv_null+0x60>)
 800e03e:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800e042:	4912      	ldr	r1, [pc, #72]	; (800e08c <tcp_recv_null+0x64>)
 800e044:	4812      	ldr	r0, [pc, #72]	; (800e090 <tcp_recv_null+0x68>)
 800e046:	f00a f9bd 	bl	80183c4 <iprintf>
 800e04a:	f06f 030f 	mvn.w	r3, #15
 800e04e:	e016      	b.n	800e07e <tcp_recv_null+0x56>

  if (p != NULL) {
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	2b00      	cmp	r3, #0
 800e054:	d009      	beq.n	800e06a <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	891b      	ldrh	r3, [r3, #8]
 800e05a:	4619      	mov	r1, r3
 800e05c:	68b8      	ldr	r0, [r7, #8]
 800e05e:	f7ff fab5 	bl	800d5cc <tcp_recved>
    pbuf_free(p);
 800e062:	6878      	ldr	r0, [r7, #4]
 800e064:	f7fe fad8 	bl	800c618 <pbuf_free>
 800e068:	e008      	b.n	800e07c <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800e06a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e06e:	2b00      	cmp	r3, #0
 800e070:	d104      	bne.n	800e07c <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800e072:	68b8      	ldr	r0, [r7, #8]
 800e074:	f7fe ff8a 	bl	800cf8c <tcp_close>
 800e078:	4603      	mov	r3, r0
 800e07a:	e000      	b.n	800e07e <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800e07c:	2300      	movs	r3, #0
}
 800e07e:	4618      	mov	r0, r3
 800e080:	3710      	adds	r7, #16
 800e082:	46bd      	mov	sp, r7
 800e084:	bd80      	pop	{r7, pc}
 800e086:	bf00      	nop
 800e088:	0801ab2c 	.word	0x0801ab2c
 800e08c:	0801b09c 	.word	0x0801b09c
 800e090:	0801ab70 	.word	0x0801ab70

0800e094 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800e094:	b580      	push	{r7, lr}
 800e096:	b086      	sub	sp, #24
 800e098:	af00      	add	r7, sp, #0
 800e09a:	4603      	mov	r3, r0
 800e09c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800e09e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e0a2:	2b00      	cmp	r3, #0
 800e0a4:	db01      	blt.n	800e0aa <tcp_kill_prio+0x16>
 800e0a6:	79fb      	ldrb	r3, [r7, #7]
 800e0a8:	e000      	b.n	800e0ac <tcp_kill_prio+0x18>
 800e0aa:	237f      	movs	r3, #127	; 0x7f
 800e0ac:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800e0ae:	7afb      	ldrb	r3, [r7, #11]
 800e0b0:	2b00      	cmp	r3, #0
 800e0b2:	d034      	beq.n	800e11e <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800e0b4:	7afb      	ldrb	r3, [r7, #11]
 800e0b6:	3b01      	subs	r3, #1
 800e0b8:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800e0ba:	2300      	movs	r3, #0
 800e0bc:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800e0be:	2300      	movs	r3, #0
 800e0c0:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e0c2:	4b19      	ldr	r3, [pc, #100]	; (800e128 <tcp_kill_prio+0x94>)
 800e0c4:	681b      	ldr	r3, [r3, #0]
 800e0c6:	617b      	str	r3, [r7, #20]
 800e0c8:	e01f      	b.n	800e10a <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800e0ca:	697b      	ldr	r3, [r7, #20]
 800e0cc:	7d5b      	ldrb	r3, [r3, #21]
 800e0ce:	7afa      	ldrb	r2, [r7, #11]
 800e0d0:	429a      	cmp	r2, r3
 800e0d2:	d80c      	bhi.n	800e0ee <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800e0d4:	697b      	ldr	r3, [r7, #20]
 800e0d6:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800e0d8:	7afa      	ldrb	r2, [r7, #11]
 800e0da:	429a      	cmp	r2, r3
 800e0dc:	d112      	bne.n	800e104 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800e0de:	4b13      	ldr	r3, [pc, #76]	; (800e12c <tcp_kill_prio+0x98>)
 800e0e0:	681a      	ldr	r2, [r3, #0]
 800e0e2:	697b      	ldr	r3, [r7, #20]
 800e0e4:	6a1b      	ldr	r3, [r3, #32]
 800e0e6:	1ad3      	subs	r3, r2, r3
 800e0e8:	68fa      	ldr	r2, [r7, #12]
 800e0ea:	429a      	cmp	r2, r3
 800e0ec:	d80a      	bhi.n	800e104 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800e0ee:	4b0f      	ldr	r3, [pc, #60]	; (800e12c <tcp_kill_prio+0x98>)
 800e0f0:	681a      	ldr	r2, [r3, #0]
 800e0f2:	697b      	ldr	r3, [r7, #20]
 800e0f4:	6a1b      	ldr	r3, [r3, #32]
 800e0f6:	1ad3      	subs	r3, r2, r3
 800e0f8:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800e0fa:	697b      	ldr	r3, [r7, #20]
 800e0fc:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800e0fe:	697b      	ldr	r3, [r7, #20]
 800e100:	7d5b      	ldrb	r3, [r3, #21]
 800e102:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e104:	697b      	ldr	r3, [r7, #20]
 800e106:	68db      	ldr	r3, [r3, #12]
 800e108:	617b      	str	r3, [r7, #20]
 800e10a:	697b      	ldr	r3, [r7, #20]
 800e10c:	2b00      	cmp	r3, #0
 800e10e:	d1dc      	bne.n	800e0ca <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800e110:	693b      	ldr	r3, [r7, #16]
 800e112:	2b00      	cmp	r3, #0
 800e114:	d004      	beq.n	800e120 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800e116:	6938      	ldr	r0, [r7, #16]
 800e118:	f7ff f87e 	bl	800d218 <tcp_abort>
 800e11c:	e000      	b.n	800e120 <tcp_kill_prio+0x8c>
    return;
 800e11e:	bf00      	nop
  }
}
 800e120:	3718      	adds	r7, #24
 800e122:	46bd      	mov	sp, r7
 800e124:	bd80      	pop	{r7, pc}
 800e126:	bf00      	nop
 800e128:	20010d84 	.word	0x20010d84
 800e12c:	20010d78 	.word	0x20010d78

0800e130 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800e130:	b580      	push	{r7, lr}
 800e132:	b086      	sub	sp, #24
 800e134:	af00      	add	r7, sp, #0
 800e136:	4603      	mov	r3, r0
 800e138:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800e13a:	79fb      	ldrb	r3, [r7, #7]
 800e13c:	2b08      	cmp	r3, #8
 800e13e:	d009      	beq.n	800e154 <tcp_kill_state+0x24>
 800e140:	79fb      	ldrb	r3, [r7, #7]
 800e142:	2b09      	cmp	r3, #9
 800e144:	d006      	beq.n	800e154 <tcp_kill_state+0x24>
 800e146:	4b1a      	ldr	r3, [pc, #104]	; (800e1b0 <tcp_kill_state+0x80>)
 800e148:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800e14c:	4919      	ldr	r1, [pc, #100]	; (800e1b4 <tcp_kill_state+0x84>)
 800e14e:	481a      	ldr	r0, [pc, #104]	; (800e1b8 <tcp_kill_state+0x88>)
 800e150:	f00a f938 	bl	80183c4 <iprintf>

  inactivity = 0;
 800e154:	2300      	movs	r3, #0
 800e156:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800e158:	2300      	movs	r3, #0
 800e15a:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e15c:	4b17      	ldr	r3, [pc, #92]	; (800e1bc <tcp_kill_state+0x8c>)
 800e15e:	681b      	ldr	r3, [r3, #0]
 800e160:	617b      	str	r3, [r7, #20]
 800e162:	e017      	b.n	800e194 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800e164:	697b      	ldr	r3, [r7, #20]
 800e166:	7d1b      	ldrb	r3, [r3, #20]
 800e168:	79fa      	ldrb	r2, [r7, #7]
 800e16a:	429a      	cmp	r2, r3
 800e16c:	d10f      	bne.n	800e18e <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800e16e:	4b14      	ldr	r3, [pc, #80]	; (800e1c0 <tcp_kill_state+0x90>)
 800e170:	681a      	ldr	r2, [r3, #0]
 800e172:	697b      	ldr	r3, [r7, #20]
 800e174:	6a1b      	ldr	r3, [r3, #32]
 800e176:	1ad3      	subs	r3, r2, r3
 800e178:	68fa      	ldr	r2, [r7, #12]
 800e17a:	429a      	cmp	r2, r3
 800e17c:	d807      	bhi.n	800e18e <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800e17e:	4b10      	ldr	r3, [pc, #64]	; (800e1c0 <tcp_kill_state+0x90>)
 800e180:	681a      	ldr	r2, [r3, #0]
 800e182:	697b      	ldr	r3, [r7, #20]
 800e184:	6a1b      	ldr	r3, [r3, #32]
 800e186:	1ad3      	subs	r3, r2, r3
 800e188:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800e18a:	697b      	ldr	r3, [r7, #20]
 800e18c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e18e:	697b      	ldr	r3, [r7, #20]
 800e190:	68db      	ldr	r3, [r3, #12]
 800e192:	617b      	str	r3, [r7, #20]
 800e194:	697b      	ldr	r3, [r7, #20]
 800e196:	2b00      	cmp	r3, #0
 800e198:	d1e4      	bne.n	800e164 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800e19a:	693b      	ldr	r3, [r7, #16]
 800e19c:	2b00      	cmp	r3, #0
 800e19e:	d003      	beq.n	800e1a8 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800e1a0:	2100      	movs	r1, #0
 800e1a2:	6938      	ldr	r0, [r7, #16]
 800e1a4:	f7fe ff7a 	bl	800d09c <tcp_abandon>
  }
}
 800e1a8:	bf00      	nop
 800e1aa:	3718      	adds	r7, #24
 800e1ac:	46bd      	mov	sp, r7
 800e1ae:	bd80      	pop	{r7, pc}
 800e1b0:	0801ab2c 	.word	0x0801ab2c
 800e1b4:	0801b0b8 	.word	0x0801b0b8
 800e1b8:	0801ab70 	.word	0x0801ab70
 800e1bc:	20010d84 	.word	0x20010d84
 800e1c0:	20010d78 	.word	0x20010d78

0800e1c4 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800e1c4:	b580      	push	{r7, lr}
 800e1c6:	b084      	sub	sp, #16
 800e1c8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800e1ca:	2300      	movs	r3, #0
 800e1cc:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800e1ce:	2300      	movs	r3, #0
 800e1d0:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e1d2:	4b12      	ldr	r3, [pc, #72]	; (800e21c <tcp_kill_timewait+0x58>)
 800e1d4:	681b      	ldr	r3, [r3, #0]
 800e1d6:	60fb      	str	r3, [r7, #12]
 800e1d8:	e012      	b.n	800e200 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800e1da:	4b11      	ldr	r3, [pc, #68]	; (800e220 <tcp_kill_timewait+0x5c>)
 800e1dc:	681a      	ldr	r2, [r3, #0]
 800e1de:	68fb      	ldr	r3, [r7, #12]
 800e1e0:	6a1b      	ldr	r3, [r3, #32]
 800e1e2:	1ad3      	subs	r3, r2, r3
 800e1e4:	687a      	ldr	r2, [r7, #4]
 800e1e6:	429a      	cmp	r2, r3
 800e1e8:	d807      	bhi.n	800e1fa <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800e1ea:	4b0d      	ldr	r3, [pc, #52]	; (800e220 <tcp_kill_timewait+0x5c>)
 800e1ec:	681a      	ldr	r2, [r3, #0]
 800e1ee:	68fb      	ldr	r3, [r7, #12]
 800e1f0:	6a1b      	ldr	r3, [r3, #32]
 800e1f2:	1ad3      	subs	r3, r2, r3
 800e1f4:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800e1f6:	68fb      	ldr	r3, [r7, #12]
 800e1f8:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e1fa:	68fb      	ldr	r3, [r7, #12]
 800e1fc:	68db      	ldr	r3, [r3, #12]
 800e1fe:	60fb      	str	r3, [r7, #12]
 800e200:	68fb      	ldr	r3, [r7, #12]
 800e202:	2b00      	cmp	r3, #0
 800e204:	d1e9      	bne.n	800e1da <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800e206:	68bb      	ldr	r3, [r7, #8]
 800e208:	2b00      	cmp	r3, #0
 800e20a:	d002      	beq.n	800e212 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800e20c:	68b8      	ldr	r0, [r7, #8]
 800e20e:	f7ff f803 	bl	800d218 <tcp_abort>
  }
}
 800e212:	bf00      	nop
 800e214:	3710      	adds	r7, #16
 800e216:	46bd      	mov	sp, r7
 800e218:	bd80      	pop	{r7, pc}
 800e21a:	bf00      	nop
 800e21c:	20010d88 	.word	0x20010d88
 800e220:	20010d78 	.word	0x20010d78

0800e224 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800e224:	b580      	push	{r7, lr}
 800e226:	b082      	sub	sp, #8
 800e228:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800e22a:	4b10      	ldr	r3, [pc, #64]	; (800e26c <tcp_handle_closepend+0x48>)
 800e22c:	681b      	ldr	r3, [r3, #0]
 800e22e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800e230:	e014      	b.n	800e25c <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800e232:	687b      	ldr	r3, [r7, #4]
 800e234:	68db      	ldr	r3, [r3, #12]
 800e236:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	8b5b      	ldrh	r3, [r3, #26]
 800e23c:	f003 0308 	and.w	r3, r3, #8
 800e240:	2b00      	cmp	r3, #0
 800e242:	d009      	beq.n	800e258 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	8b5b      	ldrh	r3, [r3, #26]
 800e248:	f023 0308 	bic.w	r3, r3, #8
 800e24c:	b29a      	uxth	r2, r3
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800e252:	6878      	ldr	r0, [r7, #4]
 800e254:	f7fe fe30 	bl	800ceb8 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800e258:	683b      	ldr	r3, [r7, #0]
 800e25a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	2b00      	cmp	r3, #0
 800e260:	d1e7      	bne.n	800e232 <tcp_handle_closepend+0xe>
  }
}
 800e262:	bf00      	nop
 800e264:	bf00      	nop
 800e266:	3708      	adds	r7, #8
 800e268:	46bd      	mov	sp, r7
 800e26a:	bd80      	pop	{r7, pc}
 800e26c:	20010d84 	.word	0x20010d84

0800e270 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800e270:	b580      	push	{r7, lr}
 800e272:	b084      	sub	sp, #16
 800e274:	af00      	add	r7, sp, #0
 800e276:	4603      	mov	r3, r0
 800e278:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800e27a:	2001      	movs	r0, #1
 800e27c:	f7fd faa6 	bl	800b7cc <memp_malloc>
 800e280:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800e282:	68fb      	ldr	r3, [r7, #12]
 800e284:	2b00      	cmp	r3, #0
 800e286:	d126      	bne.n	800e2d6 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800e288:	f7ff ffcc 	bl	800e224 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800e28c:	f7ff ff9a 	bl	800e1c4 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800e290:	2001      	movs	r0, #1
 800e292:	f7fd fa9b 	bl	800b7cc <memp_malloc>
 800e296:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800e298:	68fb      	ldr	r3, [r7, #12]
 800e29a:	2b00      	cmp	r3, #0
 800e29c:	d11b      	bne.n	800e2d6 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800e29e:	2009      	movs	r0, #9
 800e2a0:	f7ff ff46 	bl	800e130 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800e2a4:	2001      	movs	r0, #1
 800e2a6:	f7fd fa91 	bl	800b7cc <memp_malloc>
 800e2aa:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800e2ac:	68fb      	ldr	r3, [r7, #12]
 800e2ae:	2b00      	cmp	r3, #0
 800e2b0:	d111      	bne.n	800e2d6 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800e2b2:	2008      	movs	r0, #8
 800e2b4:	f7ff ff3c 	bl	800e130 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800e2b8:	2001      	movs	r0, #1
 800e2ba:	f7fd fa87 	bl	800b7cc <memp_malloc>
 800e2be:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800e2c0:	68fb      	ldr	r3, [r7, #12]
 800e2c2:	2b00      	cmp	r3, #0
 800e2c4:	d107      	bne.n	800e2d6 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800e2c6:	79fb      	ldrb	r3, [r7, #7]
 800e2c8:	4618      	mov	r0, r3
 800e2ca:	f7ff fee3 	bl	800e094 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800e2ce:	2001      	movs	r0, #1
 800e2d0:	f7fd fa7c 	bl	800b7cc <memp_malloc>
 800e2d4:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800e2d6:	68fb      	ldr	r3, [r7, #12]
 800e2d8:	2b00      	cmp	r3, #0
 800e2da:	d03f      	beq.n	800e35c <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800e2dc:	229c      	movs	r2, #156	; 0x9c
 800e2de:	2100      	movs	r1, #0
 800e2e0:	68f8      	ldr	r0, [r7, #12]
 800e2e2:	f009 ffd2 	bl	801828a <memset>
    pcb->prio = prio;
 800e2e6:	68fb      	ldr	r3, [r7, #12]
 800e2e8:	79fa      	ldrb	r2, [r7, #7]
 800e2ea:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800e2ec:	68fb      	ldr	r3, [r7, #12]
 800e2ee:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800e2f2:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800e2f6:	68fb      	ldr	r3, [r7, #12]
 800e2f8:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800e2fc:	855a      	strh	r2, [r3, #42]	; 0x2a
 800e2fe:	68fb      	ldr	r3, [r7, #12]
 800e300:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800e302:	68fb      	ldr	r3, [r7, #12]
 800e304:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800e306:	68fb      	ldr	r3, [r7, #12]
 800e308:	22ff      	movs	r2, #255	; 0xff
 800e30a:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800e30c:	68fb      	ldr	r3, [r7, #12]
 800e30e:	f44f 7206 	mov.w	r2, #536	; 0x218
 800e312:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800e314:	68fb      	ldr	r3, [r7, #12]
 800e316:	2206      	movs	r2, #6
 800e318:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800e31c:	68fb      	ldr	r3, [r7, #12]
 800e31e:	2206      	movs	r2, #6
 800e320:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800e322:	68fb      	ldr	r3, [r7, #12]
 800e324:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e328:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800e32a:	68fb      	ldr	r3, [r7, #12]
 800e32c:	2201      	movs	r2, #1
 800e32e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800e332:	4b0d      	ldr	r3, [pc, #52]	; (800e368 <tcp_alloc+0xf8>)
 800e334:	681a      	ldr	r2, [r3, #0]
 800e336:	68fb      	ldr	r3, [r7, #12]
 800e338:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800e33a:	4b0c      	ldr	r3, [pc, #48]	; (800e36c <tcp_alloc+0xfc>)
 800e33c:	781a      	ldrb	r2, [r3, #0]
 800e33e:	68fb      	ldr	r3, [r7, #12]
 800e340:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800e342:	68fb      	ldr	r3, [r7, #12]
 800e344:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800e348:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800e34c:	68fb      	ldr	r3, [r7, #12]
 800e34e:	4a08      	ldr	r2, [pc, #32]	; (800e370 <tcp_alloc+0x100>)
 800e350:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800e354:	68fb      	ldr	r3, [r7, #12]
 800e356:	4a07      	ldr	r2, [pc, #28]	; (800e374 <tcp_alloc+0x104>)
 800e358:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800e35c:	68fb      	ldr	r3, [r7, #12]
}
 800e35e:	4618      	mov	r0, r3
 800e360:	3710      	adds	r7, #16
 800e362:	46bd      	mov	sp, r7
 800e364:	bd80      	pop	{r7, pc}
 800e366:	bf00      	nop
 800e368:	20010d78 	.word	0x20010d78
 800e36c:	20010d8e 	.word	0x20010d8e
 800e370:	0800e029 	.word	0x0800e029
 800e374:	006ddd00 	.word	0x006ddd00

0800e378 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 800e378:	b580      	push	{r7, lr}
 800e37a:	b084      	sub	sp, #16
 800e37c:	af00      	add	r7, sp, #0
 800e37e:	4603      	mov	r3, r0
 800e380:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 800e382:	2040      	movs	r0, #64	; 0x40
 800e384:	f7ff ff74 	bl	800e270 <tcp_alloc>
 800e388:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 800e38a:	68fb      	ldr	r3, [r7, #12]
}
 800e38c:	4618      	mov	r0, r3
 800e38e:	3710      	adds	r7, #16
 800e390:	46bd      	mov	sp, r7
 800e392:	bd80      	pop	{r7, pc}

0800e394 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 800e394:	b480      	push	{r7}
 800e396:	b083      	sub	sp, #12
 800e398:	af00      	add	r7, sp, #0
 800e39a:	6078      	str	r0, [r7, #4]
 800e39c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	2b00      	cmp	r3, #0
 800e3a2:	d002      	beq.n	800e3aa <tcp_arg+0x16>
    pcb->callback_arg = arg;
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	683a      	ldr	r2, [r7, #0]
 800e3a8:	611a      	str	r2, [r3, #16]
  }
}
 800e3aa:	bf00      	nop
 800e3ac:	370c      	adds	r7, #12
 800e3ae:	46bd      	mov	sp, r7
 800e3b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3b4:	4770      	bx	lr
	...

0800e3b8 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800e3b8:	b580      	push	{r7, lr}
 800e3ba:	b082      	sub	sp, #8
 800e3bc:	af00      	add	r7, sp, #0
 800e3be:	6078      	str	r0, [r7, #4]
 800e3c0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	2b00      	cmp	r3, #0
 800e3c6:	d00e      	beq.n	800e3e6 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	7d1b      	ldrb	r3, [r3, #20]
 800e3cc:	2b01      	cmp	r3, #1
 800e3ce:	d106      	bne.n	800e3de <tcp_recv+0x26>
 800e3d0:	4b07      	ldr	r3, [pc, #28]	; (800e3f0 <tcp_recv+0x38>)
 800e3d2:	f240 72df 	movw	r2, #2015	; 0x7df
 800e3d6:	4907      	ldr	r1, [pc, #28]	; (800e3f4 <tcp_recv+0x3c>)
 800e3d8:	4807      	ldr	r0, [pc, #28]	; (800e3f8 <tcp_recv+0x40>)
 800e3da:	f009 fff3 	bl	80183c4 <iprintf>
    pcb->recv = recv;
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	683a      	ldr	r2, [r7, #0]
 800e3e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 800e3e6:	bf00      	nop
 800e3e8:	3708      	adds	r7, #8
 800e3ea:	46bd      	mov	sp, r7
 800e3ec:	bd80      	pop	{r7, pc}
 800e3ee:	bf00      	nop
 800e3f0:	0801ab2c 	.word	0x0801ab2c
 800e3f4:	0801b0c8 	.word	0x0801b0c8
 800e3f8:	0801ab70 	.word	0x0801ab70

0800e3fc <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800e3fc:	b580      	push	{r7, lr}
 800e3fe:	b082      	sub	sp, #8
 800e400:	af00      	add	r7, sp, #0
 800e402:	6078      	str	r0, [r7, #4]
 800e404:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	2b00      	cmp	r3, #0
 800e40a:	d00e      	beq.n	800e42a <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	7d1b      	ldrb	r3, [r3, #20]
 800e410:	2b01      	cmp	r3, #1
 800e412:	d106      	bne.n	800e422 <tcp_sent+0x26>
 800e414:	4b07      	ldr	r3, [pc, #28]	; (800e434 <tcp_sent+0x38>)
 800e416:	f240 72f3 	movw	r2, #2035	; 0x7f3
 800e41a:	4907      	ldr	r1, [pc, #28]	; (800e438 <tcp_sent+0x3c>)
 800e41c:	4807      	ldr	r0, [pc, #28]	; (800e43c <tcp_sent+0x40>)
 800e41e:	f009 ffd1 	bl	80183c4 <iprintf>
    pcb->sent = sent;
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	683a      	ldr	r2, [r7, #0]
 800e426:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 800e42a:	bf00      	nop
 800e42c:	3708      	adds	r7, #8
 800e42e:	46bd      	mov	sp, r7
 800e430:	bd80      	pop	{r7, pc}
 800e432:	bf00      	nop
 800e434:	0801ab2c 	.word	0x0801ab2c
 800e438:	0801b0f0 	.word	0x0801b0f0
 800e43c:	0801ab70 	.word	0x0801ab70

0800e440 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800e440:	b580      	push	{r7, lr}
 800e442:	b082      	sub	sp, #8
 800e444:	af00      	add	r7, sp, #0
 800e446:	6078      	str	r0, [r7, #4]
 800e448:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	2b00      	cmp	r3, #0
 800e44e:	d00e      	beq.n	800e46e <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	7d1b      	ldrb	r3, [r3, #20]
 800e454:	2b01      	cmp	r3, #1
 800e456:	d106      	bne.n	800e466 <tcp_err+0x26>
 800e458:	4b07      	ldr	r3, [pc, #28]	; (800e478 <tcp_err+0x38>)
 800e45a:	f640 020d 	movw	r2, #2061	; 0x80d
 800e45e:	4907      	ldr	r1, [pc, #28]	; (800e47c <tcp_err+0x3c>)
 800e460:	4807      	ldr	r0, [pc, #28]	; (800e480 <tcp_err+0x40>)
 800e462:	f009 ffaf 	bl	80183c4 <iprintf>
    pcb->errf = err;
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	683a      	ldr	r2, [r7, #0]
 800e46a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 800e46e:	bf00      	nop
 800e470:	3708      	adds	r7, #8
 800e472:	46bd      	mov	sp, r7
 800e474:	bd80      	pop	{r7, pc}
 800e476:	bf00      	nop
 800e478:	0801ab2c 	.word	0x0801ab2c
 800e47c:	0801b118 	.word	0x0801b118
 800e480:	0801ab70 	.word	0x0801ab70

0800e484 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 800e484:	b480      	push	{r7}
 800e486:	b085      	sub	sp, #20
 800e488:	af00      	add	r7, sp, #0
 800e48a:	6078      	str	r0, [r7, #4]
 800e48c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	2b00      	cmp	r3, #0
 800e492:	d008      	beq.n	800e4a6 <tcp_accept+0x22>
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	7d1b      	ldrb	r3, [r3, #20]
 800e498:	2b01      	cmp	r3, #1
 800e49a:	d104      	bne.n	800e4a6 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 800e4a0:	68fb      	ldr	r3, [r7, #12]
 800e4a2:	683a      	ldr	r2, [r7, #0]
 800e4a4:	619a      	str	r2, [r3, #24]
  }
}
 800e4a6:	bf00      	nop
 800e4a8:	3714      	adds	r7, #20
 800e4aa:	46bd      	mov	sp, r7
 800e4ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4b0:	4770      	bx	lr
	...

0800e4b4 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800e4b4:	b580      	push	{r7, lr}
 800e4b6:	b084      	sub	sp, #16
 800e4b8:	af00      	add	r7, sp, #0
 800e4ba:	60f8      	str	r0, [r7, #12]
 800e4bc:	60b9      	str	r1, [r7, #8]
 800e4be:	4613      	mov	r3, r2
 800e4c0:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800e4c2:	68fb      	ldr	r3, [r7, #12]
 800e4c4:	2b00      	cmp	r3, #0
 800e4c6:	d107      	bne.n	800e4d8 <tcp_poll+0x24>
 800e4c8:	4b0e      	ldr	r3, [pc, #56]	; (800e504 <tcp_poll+0x50>)
 800e4ca:	f640 023d 	movw	r2, #2109	; 0x83d
 800e4ce:	490e      	ldr	r1, [pc, #56]	; (800e508 <tcp_poll+0x54>)
 800e4d0:	480e      	ldr	r0, [pc, #56]	; (800e50c <tcp_poll+0x58>)
 800e4d2:	f009 ff77 	bl	80183c4 <iprintf>
 800e4d6:	e011      	b.n	800e4fc <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800e4d8:	68fb      	ldr	r3, [r7, #12]
 800e4da:	7d1b      	ldrb	r3, [r3, #20]
 800e4dc:	2b01      	cmp	r3, #1
 800e4de:	d106      	bne.n	800e4ee <tcp_poll+0x3a>
 800e4e0:	4b08      	ldr	r3, [pc, #32]	; (800e504 <tcp_poll+0x50>)
 800e4e2:	f640 023e 	movw	r2, #2110	; 0x83e
 800e4e6:	490a      	ldr	r1, [pc, #40]	; (800e510 <tcp_poll+0x5c>)
 800e4e8:	4808      	ldr	r0, [pc, #32]	; (800e50c <tcp_poll+0x58>)
 800e4ea:	f009 ff6b 	bl	80183c4 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800e4ee:	68fb      	ldr	r3, [r7, #12]
 800e4f0:	68ba      	ldr	r2, [r7, #8]
 800e4f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800e4f6:	68fb      	ldr	r3, [r7, #12]
 800e4f8:	79fa      	ldrb	r2, [r7, #7]
 800e4fa:	775a      	strb	r2, [r3, #29]
}
 800e4fc:	3710      	adds	r7, #16
 800e4fe:	46bd      	mov	sp, r7
 800e500:	bd80      	pop	{r7, pc}
 800e502:	bf00      	nop
 800e504:	0801ab2c 	.word	0x0801ab2c
 800e508:	0801b140 	.word	0x0801b140
 800e50c:	0801ab70 	.word	0x0801ab70
 800e510:	0801b158 	.word	0x0801b158

0800e514 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800e514:	b580      	push	{r7, lr}
 800e516:	b082      	sub	sp, #8
 800e518:	af00      	add	r7, sp, #0
 800e51a:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	2b00      	cmp	r3, #0
 800e520:	d107      	bne.n	800e532 <tcp_pcb_purge+0x1e>
 800e522:	4b21      	ldr	r3, [pc, #132]	; (800e5a8 <tcp_pcb_purge+0x94>)
 800e524:	f640 0251 	movw	r2, #2129	; 0x851
 800e528:	4920      	ldr	r1, [pc, #128]	; (800e5ac <tcp_pcb_purge+0x98>)
 800e52a:	4821      	ldr	r0, [pc, #132]	; (800e5b0 <tcp_pcb_purge+0x9c>)
 800e52c:	f009 ff4a 	bl	80183c4 <iprintf>
 800e530:	e037      	b.n	800e5a2 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	7d1b      	ldrb	r3, [r3, #20]
 800e536:	2b00      	cmp	r3, #0
 800e538:	d033      	beq.n	800e5a2 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800e53e:	2b0a      	cmp	r3, #10
 800e540:	d02f      	beq.n	800e5a2 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800e546:	2b01      	cmp	r3, #1
 800e548:	d02b      	beq.n	800e5a2 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e54e:	2b00      	cmp	r3, #0
 800e550:	d007      	beq.n	800e562 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e556:	4618      	mov	r0, r3
 800e558:	f7fe f85e 	bl	800c618 <pbuf_free>
      pcb->refused_data = NULL;
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	2200      	movs	r2, #0
 800e560:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e566:	2b00      	cmp	r3, #0
 800e568:	d002      	beq.n	800e570 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800e56a:	6878      	ldr	r0, [r7, #4]
 800e56c:	f000 f986 	bl	800e87c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e576:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e57c:	4618      	mov	r0, r3
 800e57e:	f7ff fcdb 	bl	800df38 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e586:	4618      	mov	r0, r3
 800e588:	f7ff fcd6 	bl	800df38 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	2200      	movs	r2, #0
 800e590:	66da      	str	r2, [r3, #108]	; 0x6c
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	2200      	movs	r2, #0
 800e59e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800e5a2:	3708      	adds	r7, #8
 800e5a4:	46bd      	mov	sp, r7
 800e5a6:	bd80      	pop	{r7, pc}
 800e5a8:	0801ab2c 	.word	0x0801ab2c
 800e5ac:	0801b178 	.word	0x0801b178
 800e5b0:	0801ab70 	.word	0x0801ab70

0800e5b4 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800e5b4:	b580      	push	{r7, lr}
 800e5b6:	b084      	sub	sp, #16
 800e5b8:	af00      	add	r7, sp, #0
 800e5ba:	6078      	str	r0, [r7, #4]
 800e5bc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800e5be:	683b      	ldr	r3, [r7, #0]
 800e5c0:	2b00      	cmp	r3, #0
 800e5c2:	d106      	bne.n	800e5d2 <tcp_pcb_remove+0x1e>
 800e5c4:	4b3e      	ldr	r3, [pc, #248]	; (800e6c0 <tcp_pcb_remove+0x10c>)
 800e5c6:	f640 0283 	movw	r2, #2179	; 0x883
 800e5ca:	493e      	ldr	r1, [pc, #248]	; (800e6c4 <tcp_pcb_remove+0x110>)
 800e5cc:	483e      	ldr	r0, [pc, #248]	; (800e6c8 <tcp_pcb_remove+0x114>)
 800e5ce:	f009 fef9 	bl	80183c4 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	2b00      	cmp	r3, #0
 800e5d6:	d106      	bne.n	800e5e6 <tcp_pcb_remove+0x32>
 800e5d8:	4b39      	ldr	r3, [pc, #228]	; (800e6c0 <tcp_pcb_remove+0x10c>)
 800e5da:	f640 0284 	movw	r2, #2180	; 0x884
 800e5de:	493b      	ldr	r1, [pc, #236]	; (800e6cc <tcp_pcb_remove+0x118>)
 800e5e0:	4839      	ldr	r0, [pc, #228]	; (800e6c8 <tcp_pcb_remove+0x114>)
 800e5e2:	f009 feef 	bl	80183c4 <iprintf>

  TCP_RMV(pcblist, pcb);
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	681b      	ldr	r3, [r3, #0]
 800e5ea:	683a      	ldr	r2, [r7, #0]
 800e5ec:	429a      	cmp	r2, r3
 800e5ee:	d105      	bne.n	800e5fc <tcp_pcb_remove+0x48>
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	681b      	ldr	r3, [r3, #0]
 800e5f4:	68da      	ldr	r2, [r3, #12]
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	601a      	str	r2, [r3, #0]
 800e5fa:	e013      	b.n	800e624 <tcp_pcb_remove+0x70>
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	681b      	ldr	r3, [r3, #0]
 800e600:	60fb      	str	r3, [r7, #12]
 800e602:	e00c      	b.n	800e61e <tcp_pcb_remove+0x6a>
 800e604:	68fb      	ldr	r3, [r7, #12]
 800e606:	68db      	ldr	r3, [r3, #12]
 800e608:	683a      	ldr	r2, [r7, #0]
 800e60a:	429a      	cmp	r2, r3
 800e60c:	d104      	bne.n	800e618 <tcp_pcb_remove+0x64>
 800e60e:	683b      	ldr	r3, [r7, #0]
 800e610:	68da      	ldr	r2, [r3, #12]
 800e612:	68fb      	ldr	r3, [r7, #12]
 800e614:	60da      	str	r2, [r3, #12]
 800e616:	e005      	b.n	800e624 <tcp_pcb_remove+0x70>
 800e618:	68fb      	ldr	r3, [r7, #12]
 800e61a:	68db      	ldr	r3, [r3, #12]
 800e61c:	60fb      	str	r3, [r7, #12]
 800e61e:	68fb      	ldr	r3, [r7, #12]
 800e620:	2b00      	cmp	r3, #0
 800e622:	d1ef      	bne.n	800e604 <tcp_pcb_remove+0x50>
 800e624:	683b      	ldr	r3, [r7, #0]
 800e626:	2200      	movs	r2, #0
 800e628:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800e62a:	6838      	ldr	r0, [r7, #0]
 800e62c:	f7ff ff72 	bl	800e514 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800e630:	683b      	ldr	r3, [r7, #0]
 800e632:	7d1b      	ldrb	r3, [r3, #20]
 800e634:	2b0a      	cmp	r3, #10
 800e636:	d013      	beq.n	800e660 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800e638:	683b      	ldr	r3, [r7, #0]
 800e63a:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800e63c:	2b01      	cmp	r3, #1
 800e63e:	d00f      	beq.n	800e660 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800e640:	683b      	ldr	r3, [r7, #0]
 800e642:	8b5b      	ldrh	r3, [r3, #26]
 800e644:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800e648:	2b00      	cmp	r3, #0
 800e64a:	d009      	beq.n	800e660 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800e64c:	683b      	ldr	r3, [r7, #0]
 800e64e:	8b5b      	ldrh	r3, [r3, #26]
 800e650:	f043 0302 	orr.w	r3, r3, #2
 800e654:	b29a      	uxth	r2, r3
 800e656:	683b      	ldr	r3, [r7, #0]
 800e658:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800e65a:	6838      	ldr	r0, [r7, #0]
 800e65c:	f003 fbc6 	bl	8011dec <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800e660:	683b      	ldr	r3, [r7, #0]
 800e662:	7d1b      	ldrb	r3, [r3, #20]
 800e664:	2b01      	cmp	r3, #1
 800e666:	d020      	beq.n	800e6aa <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800e668:	683b      	ldr	r3, [r7, #0]
 800e66a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e66c:	2b00      	cmp	r3, #0
 800e66e:	d006      	beq.n	800e67e <tcp_pcb_remove+0xca>
 800e670:	4b13      	ldr	r3, [pc, #76]	; (800e6c0 <tcp_pcb_remove+0x10c>)
 800e672:	f640 0293 	movw	r2, #2195	; 0x893
 800e676:	4916      	ldr	r1, [pc, #88]	; (800e6d0 <tcp_pcb_remove+0x11c>)
 800e678:	4813      	ldr	r0, [pc, #76]	; (800e6c8 <tcp_pcb_remove+0x114>)
 800e67a:	f009 fea3 	bl	80183c4 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800e67e:	683b      	ldr	r3, [r7, #0]
 800e680:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e682:	2b00      	cmp	r3, #0
 800e684:	d006      	beq.n	800e694 <tcp_pcb_remove+0xe0>
 800e686:	4b0e      	ldr	r3, [pc, #56]	; (800e6c0 <tcp_pcb_remove+0x10c>)
 800e688:	f640 0294 	movw	r2, #2196	; 0x894
 800e68c:	4911      	ldr	r1, [pc, #68]	; (800e6d4 <tcp_pcb_remove+0x120>)
 800e68e:	480e      	ldr	r0, [pc, #56]	; (800e6c8 <tcp_pcb_remove+0x114>)
 800e690:	f009 fe98 	bl	80183c4 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800e694:	683b      	ldr	r3, [r7, #0]
 800e696:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e698:	2b00      	cmp	r3, #0
 800e69a:	d006      	beq.n	800e6aa <tcp_pcb_remove+0xf6>
 800e69c:	4b08      	ldr	r3, [pc, #32]	; (800e6c0 <tcp_pcb_remove+0x10c>)
 800e69e:	f640 0296 	movw	r2, #2198	; 0x896
 800e6a2:	490d      	ldr	r1, [pc, #52]	; (800e6d8 <tcp_pcb_remove+0x124>)
 800e6a4:	4808      	ldr	r0, [pc, #32]	; (800e6c8 <tcp_pcb_remove+0x114>)
 800e6a6:	f009 fe8d 	bl	80183c4 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800e6aa:	683b      	ldr	r3, [r7, #0]
 800e6ac:	2200      	movs	r2, #0
 800e6ae:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800e6b0:	683b      	ldr	r3, [r7, #0]
 800e6b2:	2200      	movs	r2, #0
 800e6b4:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800e6b6:	bf00      	nop
 800e6b8:	3710      	adds	r7, #16
 800e6ba:	46bd      	mov	sp, r7
 800e6bc:	bd80      	pop	{r7, pc}
 800e6be:	bf00      	nop
 800e6c0:	0801ab2c 	.word	0x0801ab2c
 800e6c4:	0801b194 	.word	0x0801b194
 800e6c8:	0801ab70 	.word	0x0801ab70
 800e6cc:	0801b1b0 	.word	0x0801b1b0
 800e6d0:	0801b1d0 	.word	0x0801b1d0
 800e6d4:	0801b1e8 	.word	0x0801b1e8
 800e6d8:	0801b204 	.word	0x0801b204

0800e6dc <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800e6dc:	b580      	push	{r7, lr}
 800e6de:	b082      	sub	sp, #8
 800e6e0:	af00      	add	r7, sp, #0
 800e6e2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	2b00      	cmp	r3, #0
 800e6e8:	d106      	bne.n	800e6f8 <tcp_next_iss+0x1c>
 800e6ea:	4b0a      	ldr	r3, [pc, #40]	; (800e714 <tcp_next_iss+0x38>)
 800e6ec:	f640 02af 	movw	r2, #2223	; 0x8af
 800e6f0:	4909      	ldr	r1, [pc, #36]	; (800e718 <tcp_next_iss+0x3c>)
 800e6f2:	480a      	ldr	r0, [pc, #40]	; (800e71c <tcp_next_iss+0x40>)
 800e6f4:	f009 fe66 	bl	80183c4 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800e6f8:	4b09      	ldr	r3, [pc, #36]	; (800e720 <tcp_next_iss+0x44>)
 800e6fa:	681a      	ldr	r2, [r3, #0]
 800e6fc:	4b09      	ldr	r3, [pc, #36]	; (800e724 <tcp_next_iss+0x48>)
 800e6fe:	681b      	ldr	r3, [r3, #0]
 800e700:	4413      	add	r3, r2
 800e702:	4a07      	ldr	r2, [pc, #28]	; (800e720 <tcp_next_iss+0x44>)
 800e704:	6013      	str	r3, [r2, #0]
  return iss;
 800e706:	4b06      	ldr	r3, [pc, #24]	; (800e720 <tcp_next_iss+0x44>)
 800e708:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800e70a:	4618      	mov	r0, r3
 800e70c:	3708      	adds	r7, #8
 800e70e:	46bd      	mov	sp, r7
 800e710:	bd80      	pop	{r7, pc}
 800e712:	bf00      	nop
 800e714:	0801ab2c 	.word	0x0801ab2c
 800e718:	0801b21c 	.word	0x0801b21c
 800e71c:	0801ab70 	.word	0x0801ab70
 800e720:	20000028 	.word	0x20000028
 800e724:	20010d78 	.word	0x20010d78

0800e728 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800e728:	b580      	push	{r7, lr}
 800e72a:	b086      	sub	sp, #24
 800e72c:	af00      	add	r7, sp, #0
 800e72e:	4603      	mov	r3, r0
 800e730:	60b9      	str	r1, [r7, #8]
 800e732:	607a      	str	r2, [r7, #4]
 800e734:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	2b00      	cmp	r3, #0
 800e73a:	d106      	bne.n	800e74a <tcp_eff_send_mss_netif+0x22>
 800e73c:	4b14      	ldr	r3, [pc, #80]	; (800e790 <tcp_eff_send_mss_netif+0x68>)
 800e73e:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800e742:	4914      	ldr	r1, [pc, #80]	; (800e794 <tcp_eff_send_mss_netif+0x6c>)
 800e744:	4814      	ldr	r0, [pc, #80]	; (800e798 <tcp_eff_send_mss_netif+0x70>)
 800e746:	f009 fe3d 	bl	80183c4 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800e74a:	68bb      	ldr	r3, [r7, #8]
 800e74c:	2b00      	cmp	r3, #0
 800e74e:	d101      	bne.n	800e754 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800e750:	89fb      	ldrh	r3, [r7, #14]
 800e752:	e019      	b.n	800e788 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800e754:	68bb      	ldr	r3, [r7, #8]
 800e756:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e758:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800e75a:	8afb      	ldrh	r3, [r7, #22]
 800e75c:	2b00      	cmp	r3, #0
 800e75e:	d012      	beq.n	800e786 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800e760:	2328      	movs	r3, #40	; 0x28
 800e762:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800e764:	8afa      	ldrh	r2, [r7, #22]
 800e766:	8abb      	ldrh	r3, [r7, #20]
 800e768:	429a      	cmp	r2, r3
 800e76a:	d904      	bls.n	800e776 <tcp_eff_send_mss_netif+0x4e>
 800e76c:	8afa      	ldrh	r2, [r7, #22]
 800e76e:	8abb      	ldrh	r3, [r7, #20]
 800e770:	1ad3      	subs	r3, r2, r3
 800e772:	b29b      	uxth	r3, r3
 800e774:	e000      	b.n	800e778 <tcp_eff_send_mss_netif+0x50>
 800e776:	2300      	movs	r3, #0
 800e778:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800e77a:	8a7a      	ldrh	r2, [r7, #18]
 800e77c:	89fb      	ldrh	r3, [r7, #14]
 800e77e:	4293      	cmp	r3, r2
 800e780:	bf28      	it	cs
 800e782:	4613      	movcs	r3, r2
 800e784:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800e786:	89fb      	ldrh	r3, [r7, #14]
}
 800e788:	4618      	mov	r0, r3
 800e78a:	3718      	adds	r7, #24
 800e78c:	46bd      	mov	sp, r7
 800e78e:	bd80      	pop	{r7, pc}
 800e790:	0801ab2c 	.word	0x0801ab2c
 800e794:	0801b238 	.word	0x0801b238
 800e798:	0801ab70 	.word	0x0801ab70

0800e79c <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800e79c:	b580      	push	{r7, lr}
 800e79e:	b084      	sub	sp, #16
 800e7a0:	af00      	add	r7, sp, #0
 800e7a2:	6078      	str	r0, [r7, #4]
 800e7a4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800e7a6:	683b      	ldr	r3, [r7, #0]
 800e7a8:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	2b00      	cmp	r3, #0
 800e7ae:	d119      	bne.n	800e7e4 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800e7b0:	4b10      	ldr	r3, [pc, #64]	; (800e7f4 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800e7b2:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800e7b6:	4910      	ldr	r1, [pc, #64]	; (800e7f8 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800e7b8:	4810      	ldr	r0, [pc, #64]	; (800e7fc <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800e7ba:	f009 fe03 	bl	80183c4 <iprintf>

  while (pcb != NULL) {
 800e7be:	e011      	b.n	800e7e4 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800e7c0:	68fb      	ldr	r3, [r7, #12]
 800e7c2:	681a      	ldr	r2, [r3, #0]
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	681b      	ldr	r3, [r3, #0]
 800e7c8:	429a      	cmp	r2, r3
 800e7ca:	d108      	bne.n	800e7de <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800e7cc:	68fb      	ldr	r3, [r7, #12]
 800e7ce:	68db      	ldr	r3, [r3, #12]
 800e7d0:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800e7d2:	68f8      	ldr	r0, [r7, #12]
 800e7d4:	f7fe fd20 	bl	800d218 <tcp_abort>
      pcb = next;
 800e7d8:	68bb      	ldr	r3, [r7, #8]
 800e7da:	60fb      	str	r3, [r7, #12]
 800e7dc:	e002      	b.n	800e7e4 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800e7de:	68fb      	ldr	r3, [r7, #12]
 800e7e0:	68db      	ldr	r3, [r3, #12]
 800e7e2:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800e7e4:	68fb      	ldr	r3, [r7, #12]
 800e7e6:	2b00      	cmp	r3, #0
 800e7e8:	d1ea      	bne.n	800e7c0 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800e7ea:	bf00      	nop
 800e7ec:	bf00      	nop
 800e7ee:	3710      	adds	r7, #16
 800e7f0:	46bd      	mov	sp, r7
 800e7f2:	bd80      	pop	{r7, pc}
 800e7f4:	0801ab2c 	.word	0x0801ab2c
 800e7f8:	0801b260 	.word	0x0801b260
 800e7fc:	0801ab70 	.word	0x0801ab70

0800e800 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800e800:	b580      	push	{r7, lr}
 800e802:	b084      	sub	sp, #16
 800e804:	af00      	add	r7, sp, #0
 800e806:	6078      	str	r0, [r7, #4]
 800e808:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	2b00      	cmp	r3, #0
 800e80e:	d02a      	beq.n	800e866 <tcp_netif_ip_addr_changed+0x66>
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	681b      	ldr	r3, [r3, #0]
 800e814:	2b00      	cmp	r3, #0
 800e816:	d026      	beq.n	800e866 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800e818:	4b15      	ldr	r3, [pc, #84]	; (800e870 <tcp_netif_ip_addr_changed+0x70>)
 800e81a:	681b      	ldr	r3, [r3, #0]
 800e81c:	4619      	mov	r1, r3
 800e81e:	6878      	ldr	r0, [r7, #4]
 800e820:	f7ff ffbc 	bl	800e79c <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800e824:	4b13      	ldr	r3, [pc, #76]	; (800e874 <tcp_netif_ip_addr_changed+0x74>)
 800e826:	681b      	ldr	r3, [r3, #0]
 800e828:	4619      	mov	r1, r3
 800e82a:	6878      	ldr	r0, [r7, #4]
 800e82c:	f7ff ffb6 	bl	800e79c <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800e830:	683b      	ldr	r3, [r7, #0]
 800e832:	2b00      	cmp	r3, #0
 800e834:	d017      	beq.n	800e866 <tcp_netif_ip_addr_changed+0x66>
 800e836:	683b      	ldr	r3, [r7, #0]
 800e838:	681b      	ldr	r3, [r3, #0]
 800e83a:	2b00      	cmp	r3, #0
 800e83c:	d013      	beq.n	800e866 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800e83e:	4b0e      	ldr	r3, [pc, #56]	; (800e878 <tcp_netif_ip_addr_changed+0x78>)
 800e840:	681b      	ldr	r3, [r3, #0]
 800e842:	60fb      	str	r3, [r7, #12]
 800e844:	e00c      	b.n	800e860 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800e846:	68fb      	ldr	r3, [r7, #12]
 800e848:	681a      	ldr	r2, [r3, #0]
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	681b      	ldr	r3, [r3, #0]
 800e84e:	429a      	cmp	r2, r3
 800e850:	d103      	bne.n	800e85a <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800e852:	683b      	ldr	r3, [r7, #0]
 800e854:	681a      	ldr	r2, [r3, #0]
 800e856:	68fb      	ldr	r3, [r7, #12]
 800e858:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800e85a:	68fb      	ldr	r3, [r7, #12]
 800e85c:	68db      	ldr	r3, [r3, #12]
 800e85e:	60fb      	str	r3, [r7, #12]
 800e860:	68fb      	ldr	r3, [r7, #12]
 800e862:	2b00      	cmp	r3, #0
 800e864:	d1ef      	bne.n	800e846 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800e866:	bf00      	nop
 800e868:	3710      	adds	r7, #16
 800e86a:	46bd      	mov	sp, r7
 800e86c:	bd80      	pop	{r7, pc}
 800e86e:	bf00      	nop
 800e870:	20010d84 	.word	0x20010d84
 800e874:	20010d7c 	.word	0x20010d7c
 800e878:	20010d80 	.word	0x20010d80

0800e87c <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800e87c:	b580      	push	{r7, lr}
 800e87e:	b082      	sub	sp, #8
 800e880:	af00      	add	r7, sp, #0
 800e882:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e888:	2b00      	cmp	r3, #0
 800e88a:	d007      	beq.n	800e89c <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e890:	4618      	mov	r0, r3
 800e892:	f7ff fb51 	bl	800df38 <tcp_segs_free>
    pcb->ooseq = NULL;
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	2200      	movs	r2, #0
 800e89a:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800e89c:	bf00      	nop
 800e89e:	3708      	adds	r7, #8
 800e8a0:	46bd      	mov	sp, r7
 800e8a2:	bd80      	pop	{r7, pc}

0800e8a4 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800e8a4:	b590      	push	{r4, r7, lr}
 800e8a6:	b08d      	sub	sp, #52	; 0x34
 800e8a8:	af04      	add	r7, sp, #16
 800e8aa:	6078      	str	r0, [r7, #4]
 800e8ac:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	2b00      	cmp	r3, #0
 800e8b2:	d105      	bne.n	800e8c0 <tcp_input+0x1c>
 800e8b4:	4b9b      	ldr	r3, [pc, #620]	; (800eb24 <tcp_input+0x280>)
 800e8b6:	2283      	movs	r2, #131	; 0x83
 800e8b8:	499b      	ldr	r1, [pc, #620]	; (800eb28 <tcp_input+0x284>)
 800e8ba:	489c      	ldr	r0, [pc, #624]	; (800eb2c <tcp_input+0x288>)
 800e8bc:	f009 fd82 	bl	80183c4 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	685b      	ldr	r3, [r3, #4]
 800e8c4:	4a9a      	ldr	r2, [pc, #616]	; (800eb30 <tcp_input+0x28c>)
 800e8c6:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	895b      	ldrh	r3, [r3, #10]
 800e8cc:	2b13      	cmp	r3, #19
 800e8ce:	f240 83d1 	bls.w	800f074 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800e8d2:	4b98      	ldr	r3, [pc, #608]	; (800eb34 <tcp_input+0x290>)
 800e8d4:	695b      	ldr	r3, [r3, #20]
 800e8d6:	4a97      	ldr	r2, [pc, #604]	; (800eb34 <tcp_input+0x290>)
 800e8d8:	6812      	ldr	r2, [r2, #0]
 800e8da:	4611      	mov	r1, r2
 800e8dc:	4618      	mov	r0, r3
 800e8de:	f008 fa61 	bl	8016da4 <ip4_addr_isbroadcast_u32>
 800e8e2:	4603      	mov	r3, r0
 800e8e4:	2b00      	cmp	r3, #0
 800e8e6:	f040 83c7 	bne.w	800f078 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800e8ea:	4b92      	ldr	r3, [pc, #584]	; (800eb34 <tcp_input+0x290>)
 800e8ec:	695b      	ldr	r3, [r3, #20]
 800e8ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800e8f2:	2be0      	cmp	r3, #224	; 0xe0
 800e8f4:	f000 83c0 	beq.w	800f078 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800e8f8:	4b8d      	ldr	r3, [pc, #564]	; (800eb30 <tcp_input+0x28c>)
 800e8fa:	681b      	ldr	r3, [r3, #0]
 800e8fc:	899b      	ldrh	r3, [r3, #12]
 800e8fe:	b29b      	uxth	r3, r3
 800e900:	4618      	mov	r0, r3
 800e902:	f7fc fa55 	bl	800adb0 <lwip_htons>
 800e906:	4603      	mov	r3, r0
 800e908:	0b1b      	lsrs	r3, r3, #12
 800e90a:	b29b      	uxth	r3, r3
 800e90c:	b2db      	uxtb	r3, r3
 800e90e:	009b      	lsls	r3, r3, #2
 800e910:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800e912:	7cbb      	ldrb	r3, [r7, #18]
 800e914:	2b13      	cmp	r3, #19
 800e916:	f240 83b1 	bls.w	800f07c <tcp_input+0x7d8>
 800e91a:	7cbb      	ldrb	r3, [r7, #18]
 800e91c:	b29a      	uxth	r2, r3
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	891b      	ldrh	r3, [r3, #8]
 800e922:	429a      	cmp	r2, r3
 800e924:	f200 83aa 	bhi.w	800f07c <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800e928:	7cbb      	ldrb	r3, [r7, #18]
 800e92a:	b29b      	uxth	r3, r3
 800e92c:	3b14      	subs	r3, #20
 800e92e:	b29a      	uxth	r2, r3
 800e930:	4b81      	ldr	r3, [pc, #516]	; (800eb38 <tcp_input+0x294>)
 800e932:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800e934:	4b81      	ldr	r3, [pc, #516]	; (800eb3c <tcp_input+0x298>)
 800e936:	2200      	movs	r2, #0
 800e938:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	895a      	ldrh	r2, [r3, #10]
 800e93e:	7cbb      	ldrb	r3, [r7, #18]
 800e940:	b29b      	uxth	r3, r3
 800e942:	429a      	cmp	r2, r3
 800e944:	d309      	bcc.n	800e95a <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800e946:	4b7c      	ldr	r3, [pc, #496]	; (800eb38 <tcp_input+0x294>)
 800e948:	881a      	ldrh	r2, [r3, #0]
 800e94a:	4b7d      	ldr	r3, [pc, #500]	; (800eb40 <tcp_input+0x29c>)
 800e94c:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800e94e:	7cbb      	ldrb	r3, [r7, #18]
 800e950:	4619      	mov	r1, r3
 800e952:	6878      	ldr	r0, [r7, #4]
 800e954:	f7fd fdda 	bl	800c50c <pbuf_remove_header>
 800e958:	e04e      	b.n	800e9f8 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	681b      	ldr	r3, [r3, #0]
 800e95e:	2b00      	cmp	r3, #0
 800e960:	d105      	bne.n	800e96e <tcp_input+0xca>
 800e962:	4b70      	ldr	r3, [pc, #448]	; (800eb24 <tcp_input+0x280>)
 800e964:	22c2      	movs	r2, #194	; 0xc2
 800e966:	4977      	ldr	r1, [pc, #476]	; (800eb44 <tcp_input+0x2a0>)
 800e968:	4870      	ldr	r0, [pc, #448]	; (800eb2c <tcp_input+0x288>)
 800e96a:	f009 fd2b 	bl	80183c4 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800e96e:	2114      	movs	r1, #20
 800e970:	6878      	ldr	r0, [r7, #4]
 800e972:	f7fd fdcb 	bl	800c50c <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	895a      	ldrh	r2, [r3, #10]
 800e97a:	4b71      	ldr	r3, [pc, #452]	; (800eb40 <tcp_input+0x29c>)
 800e97c:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800e97e:	4b6e      	ldr	r3, [pc, #440]	; (800eb38 <tcp_input+0x294>)
 800e980:	881a      	ldrh	r2, [r3, #0]
 800e982:	4b6f      	ldr	r3, [pc, #444]	; (800eb40 <tcp_input+0x29c>)
 800e984:	881b      	ldrh	r3, [r3, #0]
 800e986:	1ad3      	subs	r3, r2, r3
 800e988:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800e98a:	4b6d      	ldr	r3, [pc, #436]	; (800eb40 <tcp_input+0x29c>)
 800e98c:	881b      	ldrh	r3, [r3, #0]
 800e98e:	4619      	mov	r1, r3
 800e990:	6878      	ldr	r0, [r7, #4]
 800e992:	f7fd fdbb 	bl	800c50c <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	681b      	ldr	r3, [r3, #0]
 800e99a:	895b      	ldrh	r3, [r3, #10]
 800e99c:	8a3a      	ldrh	r2, [r7, #16]
 800e99e:	429a      	cmp	r2, r3
 800e9a0:	f200 836e 	bhi.w	800f080 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	681b      	ldr	r3, [r3, #0]
 800e9a8:	685b      	ldr	r3, [r3, #4]
 800e9aa:	4a64      	ldr	r2, [pc, #400]	; (800eb3c <tcp_input+0x298>)
 800e9ac:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	681b      	ldr	r3, [r3, #0]
 800e9b2:	8a3a      	ldrh	r2, [r7, #16]
 800e9b4:	4611      	mov	r1, r2
 800e9b6:	4618      	mov	r0, r3
 800e9b8:	f7fd fda8 	bl	800c50c <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	891a      	ldrh	r2, [r3, #8]
 800e9c0:	8a3b      	ldrh	r3, [r7, #16]
 800e9c2:	1ad3      	subs	r3, r2, r3
 800e9c4:	b29a      	uxth	r2, r3
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	895b      	ldrh	r3, [r3, #10]
 800e9ce:	2b00      	cmp	r3, #0
 800e9d0:	d005      	beq.n	800e9de <tcp_input+0x13a>
 800e9d2:	4b54      	ldr	r3, [pc, #336]	; (800eb24 <tcp_input+0x280>)
 800e9d4:	22df      	movs	r2, #223	; 0xdf
 800e9d6:	495c      	ldr	r1, [pc, #368]	; (800eb48 <tcp_input+0x2a4>)
 800e9d8:	4854      	ldr	r0, [pc, #336]	; (800eb2c <tcp_input+0x288>)
 800e9da:	f009 fcf3 	bl	80183c4 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800e9de:	687b      	ldr	r3, [r7, #4]
 800e9e0:	891a      	ldrh	r2, [r3, #8]
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	681b      	ldr	r3, [r3, #0]
 800e9e6:	891b      	ldrh	r3, [r3, #8]
 800e9e8:	429a      	cmp	r2, r3
 800e9ea:	d005      	beq.n	800e9f8 <tcp_input+0x154>
 800e9ec:	4b4d      	ldr	r3, [pc, #308]	; (800eb24 <tcp_input+0x280>)
 800e9ee:	22e0      	movs	r2, #224	; 0xe0
 800e9f0:	4956      	ldr	r1, [pc, #344]	; (800eb4c <tcp_input+0x2a8>)
 800e9f2:	484e      	ldr	r0, [pc, #312]	; (800eb2c <tcp_input+0x288>)
 800e9f4:	f009 fce6 	bl	80183c4 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800e9f8:	4b4d      	ldr	r3, [pc, #308]	; (800eb30 <tcp_input+0x28c>)
 800e9fa:	681b      	ldr	r3, [r3, #0]
 800e9fc:	881b      	ldrh	r3, [r3, #0]
 800e9fe:	b29b      	uxth	r3, r3
 800ea00:	4a4b      	ldr	r2, [pc, #300]	; (800eb30 <tcp_input+0x28c>)
 800ea02:	6814      	ldr	r4, [r2, #0]
 800ea04:	4618      	mov	r0, r3
 800ea06:	f7fc f9d3 	bl	800adb0 <lwip_htons>
 800ea0a:	4603      	mov	r3, r0
 800ea0c:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800ea0e:	4b48      	ldr	r3, [pc, #288]	; (800eb30 <tcp_input+0x28c>)
 800ea10:	681b      	ldr	r3, [r3, #0]
 800ea12:	885b      	ldrh	r3, [r3, #2]
 800ea14:	b29b      	uxth	r3, r3
 800ea16:	4a46      	ldr	r2, [pc, #280]	; (800eb30 <tcp_input+0x28c>)
 800ea18:	6814      	ldr	r4, [r2, #0]
 800ea1a:	4618      	mov	r0, r3
 800ea1c:	f7fc f9c8 	bl	800adb0 <lwip_htons>
 800ea20:	4603      	mov	r3, r0
 800ea22:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800ea24:	4b42      	ldr	r3, [pc, #264]	; (800eb30 <tcp_input+0x28c>)
 800ea26:	681b      	ldr	r3, [r3, #0]
 800ea28:	685b      	ldr	r3, [r3, #4]
 800ea2a:	4a41      	ldr	r2, [pc, #260]	; (800eb30 <tcp_input+0x28c>)
 800ea2c:	6814      	ldr	r4, [r2, #0]
 800ea2e:	4618      	mov	r0, r3
 800ea30:	f7fc f9d3 	bl	800adda <lwip_htonl>
 800ea34:	4603      	mov	r3, r0
 800ea36:	6063      	str	r3, [r4, #4]
 800ea38:	6863      	ldr	r3, [r4, #4]
 800ea3a:	4a45      	ldr	r2, [pc, #276]	; (800eb50 <tcp_input+0x2ac>)
 800ea3c:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800ea3e:	4b3c      	ldr	r3, [pc, #240]	; (800eb30 <tcp_input+0x28c>)
 800ea40:	681b      	ldr	r3, [r3, #0]
 800ea42:	689b      	ldr	r3, [r3, #8]
 800ea44:	4a3a      	ldr	r2, [pc, #232]	; (800eb30 <tcp_input+0x28c>)
 800ea46:	6814      	ldr	r4, [r2, #0]
 800ea48:	4618      	mov	r0, r3
 800ea4a:	f7fc f9c6 	bl	800adda <lwip_htonl>
 800ea4e:	4603      	mov	r3, r0
 800ea50:	60a3      	str	r3, [r4, #8]
 800ea52:	68a3      	ldr	r3, [r4, #8]
 800ea54:	4a3f      	ldr	r2, [pc, #252]	; (800eb54 <tcp_input+0x2b0>)
 800ea56:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800ea58:	4b35      	ldr	r3, [pc, #212]	; (800eb30 <tcp_input+0x28c>)
 800ea5a:	681b      	ldr	r3, [r3, #0]
 800ea5c:	89db      	ldrh	r3, [r3, #14]
 800ea5e:	b29b      	uxth	r3, r3
 800ea60:	4a33      	ldr	r2, [pc, #204]	; (800eb30 <tcp_input+0x28c>)
 800ea62:	6814      	ldr	r4, [r2, #0]
 800ea64:	4618      	mov	r0, r3
 800ea66:	f7fc f9a3 	bl	800adb0 <lwip_htons>
 800ea6a:	4603      	mov	r3, r0
 800ea6c:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800ea6e:	4b30      	ldr	r3, [pc, #192]	; (800eb30 <tcp_input+0x28c>)
 800ea70:	681b      	ldr	r3, [r3, #0]
 800ea72:	899b      	ldrh	r3, [r3, #12]
 800ea74:	b29b      	uxth	r3, r3
 800ea76:	4618      	mov	r0, r3
 800ea78:	f7fc f99a 	bl	800adb0 <lwip_htons>
 800ea7c:	4603      	mov	r3, r0
 800ea7e:	b2db      	uxtb	r3, r3
 800ea80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ea84:	b2da      	uxtb	r2, r3
 800ea86:	4b34      	ldr	r3, [pc, #208]	; (800eb58 <tcp_input+0x2b4>)
 800ea88:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	891a      	ldrh	r2, [r3, #8]
 800ea8e:	4b33      	ldr	r3, [pc, #204]	; (800eb5c <tcp_input+0x2b8>)
 800ea90:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800ea92:	4b31      	ldr	r3, [pc, #196]	; (800eb58 <tcp_input+0x2b4>)
 800ea94:	781b      	ldrb	r3, [r3, #0]
 800ea96:	f003 0303 	and.w	r3, r3, #3
 800ea9a:	2b00      	cmp	r3, #0
 800ea9c:	d00c      	beq.n	800eab8 <tcp_input+0x214>
    tcplen++;
 800ea9e:	4b2f      	ldr	r3, [pc, #188]	; (800eb5c <tcp_input+0x2b8>)
 800eaa0:	881b      	ldrh	r3, [r3, #0]
 800eaa2:	3301      	adds	r3, #1
 800eaa4:	b29a      	uxth	r2, r3
 800eaa6:	4b2d      	ldr	r3, [pc, #180]	; (800eb5c <tcp_input+0x2b8>)
 800eaa8:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	891a      	ldrh	r2, [r3, #8]
 800eaae:	4b2b      	ldr	r3, [pc, #172]	; (800eb5c <tcp_input+0x2b8>)
 800eab0:	881b      	ldrh	r3, [r3, #0]
 800eab2:	429a      	cmp	r2, r3
 800eab4:	f200 82e6 	bhi.w	800f084 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800eab8:	2300      	movs	r3, #0
 800eaba:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800eabc:	4b28      	ldr	r3, [pc, #160]	; (800eb60 <tcp_input+0x2bc>)
 800eabe:	681b      	ldr	r3, [r3, #0]
 800eac0:	61fb      	str	r3, [r7, #28]
 800eac2:	e09d      	b.n	800ec00 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800eac4:	69fb      	ldr	r3, [r7, #28]
 800eac6:	7d1b      	ldrb	r3, [r3, #20]
 800eac8:	2b00      	cmp	r3, #0
 800eaca:	d105      	bne.n	800ead8 <tcp_input+0x234>
 800eacc:	4b15      	ldr	r3, [pc, #84]	; (800eb24 <tcp_input+0x280>)
 800eace:	22fb      	movs	r2, #251	; 0xfb
 800ead0:	4924      	ldr	r1, [pc, #144]	; (800eb64 <tcp_input+0x2c0>)
 800ead2:	4816      	ldr	r0, [pc, #88]	; (800eb2c <tcp_input+0x288>)
 800ead4:	f009 fc76 	bl	80183c4 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800ead8:	69fb      	ldr	r3, [r7, #28]
 800eada:	7d1b      	ldrb	r3, [r3, #20]
 800eadc:	2b0a      	cmp	r3, #10
 800eade:	d105      	bne.n	800eaec <tcp_input+0x248>
 800eae0:	4b10      	ldr	r3, [pc, #64]	; (800eb24 <tcp_input+0x280>)
 800eae2:	22fc      	movs	r2, #252	; 0xfc
 800eae4:	4920      	ldr	r1, [pc, #128]	; (800eb68 <tcp_input+0x2c4>)
 800eae6:	4811      	ldr	r0, [pc, #68]	; (800eb2c <tcp_input+0x288>)
 800eae8:	f009 fc6c 	bl	80183c4 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800eaec:	69fb      	ldr	r3, [r7, #28]
 800eaee:	7d1b      	ldrb	r3, [r3, #20]
 800eaf0:	2b01      	cmp	r3, #1
 800eaf2:	d105      	bne.n	800eb00 <tcp_input+0x25c>
 800eaf4:	4b0b      	ldr	r3, [pc, #44]	; (800eb24 <tcp_input+0x280>)
 800eaf6:	22fd      	movs	r2, #253	; 0xfd
 800eaf8:	491c      	ldr	r1, [pc, #112]	; (800eb6c <tcp_input+0x2c8>)
 800eafa:	480c      	ldr	r0, [pc, #48]	; (800eb2c <tcp_input+0x288>)
 800eafc:	f009 fc62 	bl	80183c4 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800eb00:	69fb      	ldr	r3, [r7, #28]
 800eb02:	7a1b      	ldrb	r3, [r3, #8]
 800eb04:	2b00      	cmp	r3, #0
 800eb06:	d033      	beq.n	800eb70 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800eb08:	69fb      	ldr	r3, [r7, #28]
 800eb0a:	7a1a      	ldrb	r2, [r3, #8]
 800eb0c:	4b09      	ldr	r3, [pc, #36]	; (800eb34 <tcp_input+0x290>)
 800eb0e:	685b      	ldr	r3, [r3, #4]
 800eb10:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800eb14:	3301      	adds	r3, #1
 800eb16:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800eb18:	429a      	cmp	r2, r3
 800eb1a:	d029      	beq.n	800eb70 <tcp_input+0x2cc>
      prev = pcb;
 800eb1c:	69fb      	ldr	r3, [r7, #28]
 800eb1e:	61bb      	str	r3, [r7, #24]
      continue;
 800eb20:	e06b      	b.n	800ebfa <tcp_input+0x356>
 800eb22:	bf00      	nop
 800eb24:	0801b294 	.word	0x0801b294
 800eb28:	0801b2c8 	.word	0x0801b2c8
 800eb2c:	0801b2e0 	.word	0x0801b2e0
 800eb30:	20010da0 	.word	0x20010da0
 800eb34:	2000d604 	.word	0x2000d604
 800eb38:	20010da4 	.word	0x20010da4
 800eb3c:	20010da8 	.word	0x20010da8
 800eb40:	20010da6 	.word	0x20010da6
 800eb44:	0801b308 	.word	0x0801b308
 800eb48:	0801b318 	.word	0x0801b318
 800eb4c:	0801b324 	.word	0x0801b324
 800eb50:	20010db0 	.word	0x20010db0
 800eb54:	20010db4 	.word	0x20010db4
 800eb58:	20010dbc 	.word	0x20010dbc
 800eb5c:	20010dba 	.word	0x20010dba
 800eb60:	20010d84 	.word	0x20010d84
 800eb64:	0801b344 	.word	0x0801b344
 800eb68:	0801b36c 	.word	0x0801b36c
 800eb6c:	0801b398 	.word	0x0801b398
    }

    if (pcb->remote_port == tcphdr->src &&
 800eb70:	69fb      	ldr	r3, [r7, #28]
 800eb72:	8b1a      	ldrh	r2, [r3, #24]
 800eb74:	4b72      	ldr	r3, [pc, #456]	; (800ed40 <tcp_input+0x49c>)
 800eb76:	681b      	ldr	r3, [r3, #0]
 800eb78:	881b      	ldrh	r3, [r3, #0]
 800eb7a:	b29b      	uxth	r3, r3
 800eb7c:	429a      	cmp	r2, r3
 800eb7e:	d13a      	bne.n	800ebf6 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800eb80:	69fb      	ldr	r3, [r7, #28]
 800eb82:	8ada      	ldrh	r2, [r3, #22]
 800eb84:	4b6e      	ldr	r3, [pc, #440]	; (800ed40 <tcp_input+0x49c>)
 800eb86:	681b      	ldr	r3, [r3, #0]
 800eb88:	885b      	ldrh	r3, [r3, #2]
 800eb8a:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800eb8c:	429a      	cmp	r2, r3
 800eb8e:	d132      	bne.n	800ebf6 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800eb90:	69fb      	ldr	r3, [r7, #28]
 800eb92:	685a      	ldr	r2, [r3, #4]
 800eb94:	4b6b      	ldr	r3, [pc, #428]	; (800ed44 <tcp_input+0x4a0>)
 800eb96:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800eb98:	429a      	cmp	r2, r3
 800eb9a:	d12c      	bne.n	800ebf6 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800eb9c:	69fb      	ldr	r3, [r7, #28]
 800eb9e:	681a      	ldr	r2, [r3, #0]
 800eba0:	4b68      	ldr	r3, [pc, #416]	; (800ed44 <tcp_input+0x4a0>)
 800eba2:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800eba4:	429a      	cmp	r2, r3
 800eba6:	d126      	bne.n	800ebf6 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800eba8:	69fb      	ldr	r3, [r7, #28]
 800ebaa:	68db      	ldr	r3, [r3, #12]
 800ebac:	69fa      	ldr	r2, [r7, #28]
 800ebae:	429a      	cmp	r2, r3
 800ebb0:	d106      	bne.n	800ebc0 <tcp_input+0x31c>
 800ebb2:	4b65      	ldr	r3, [pc, #404]	; (800ed48 <tcp_input+0x4a4>)
 800ebb4:	f240 120d 	movw	r2, #269	; 0x10d
 800ebb8:	4964      	ldr	r1, [pc, #400]	; (800ed4c <tcp_input+0x4a8>)
 800ebba:	4865      	ldr	r0, [pc, #404]	; (800ed50 <tcp_input+0x4ac>)
 800ebbc:	f009 fc02 	bl	80183c4 <iprintf>
      if (prev != NULL) {
 800ebc0:	69bb      	ldr	r3, [r7, #24]
 800ebc2:	2b00      	cmp	r3, #0
 800ebc4:	d00a      	beq.n	800ebdc <tcp_input+0x338>
        prev->next = pcb->next;
 800ebc6:	69fb      	ldr	r3, [r7, #28]
 800ebc8:	68da      	ldr	r2, [r3, #12]
 800ebca:	69bb      	ldr	r3, [r7, #24]
 800ebcc:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800ebce:	4b61      	ldr	r3, [pc, #388]	; (800ed54 <tcp_input+0x4b0>)
 800ebd0:	681a      	ldr	r2, [r3, #0]
 800ebd2:	69fb      	ldr	r3, [r7, #28]
 800ebd4:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800ebd6:	4a5f      	ldr	r2, [pc, #380]	; (800ed54 <tcp_input+0x4b0>)
 800ebd8:	69fb      	ldr	r3, [r7, #28]
 800ebda:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800ebdc:	69fb      	ldr	r3, [r7, #28]
 800ebde:	68db      	ldr	r3, [r3, #12]
 800ebe0:	69fa      	ldr	r2, [r7, #28]
 800ebe2:	429a      	cmp	r2, r3
 800ebe4:	d111      	bne.n	800ec0a <tcp_input+0x366>
 800ebe6:	4b58      	ldr	r3, [pc, #352]	; (800ed48 <tcp_input+0x4a4>)
 800ebe8:	f240 1215 	movw	r2, #277	; 0x115
 800ebec:	495a      	ldr	r1, [pc, #360]	; (800ed58 <tcp_input+0x4b4>)
 800ebee:	4858      	ldr	r0, [pc, #352]	; (800ed50 <tcp_input+0x4ac>)
 800ebf0:	f009 fbe8 	bl	80183c4 <iprintf>
      break;
 800ebf4:	e009      	b.n	800ec0a <tcp_input+0x366>
    }
    prev = pcb;
 800ebf6:	69fb      	ldr	r3, [r7, #28]
 800ebf8:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ebfa:	69fb      	ldr	r3, [r7, #28]
 800ebfc:	68db      	ldr	r3, [r3, #12]
 800ebfe:	61fb      	str	r3, [r7, #28]
 800ec00:	69fb      	ldr	r3, [r7, #28]
 800ec02:	2b00      	cmp	r3, #0
 800ec04:	f47f af5e 	bne.w	800eac4 <tcp_input+0x220>
 800ec08:	e000      	b.n	800ec0c <tcp_input+0x368>
      break;
 800ec0a:	bf00      	nop
  }

  if (pcb == NULL) {
 800ec0c:	69fb      	ldr	r3, [r7, #28]
 800ec0e:	2b00      	cmp	r3, #0
 800ec10:	f040 80aa 	bne.w	800ed68 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800ec14:	4b51      	ldr	r3, [pc, #324]	; (800ed5c <tcp_input+0x4b8>)
 800ec16:	681b      	ldr	r3, [r3, #0]
 800ec18:	61fb      	str	r3, [r7, #28]
 800ec1a:	e03f      	b.n	800ec9c <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800ec1c:	69fb      	ldr	r3, [r7, #28]
 800ec1e:	7d1b      	ldrb	r3, [r3, #20]
 800ec20:	2b0a      	cmp	r3, #10
 800ec22:	d006      	beq.n	800ec32 <tcp_input+0x38e>
 800ec24:	4b48      	ldr	r3, [pc, #288]	; (800ed48 <tcp_input+0x4a4>)
 800ec26:	f240 121f 	movw	r2, #287	; 0x11f
 800ec2a:	494d      	ldr	r1, [pc, #308]	; (800ed60 <tcp_input+0x4bc>)
 800ec2c:	4848      	ldr	r0, [pc, #288]	; (800ed50 <tcp_input+0x4ac>)
 800ec2e:	f009 fbc9 	bl	80183c4 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ec32:	69fb      	ldr	r3, [r7, #28]
 800ec34:	7a1b      	ldrb	r3, [r3, #8]
 800ec36:	2b00      	cmp	r3, #0
 800ec38:	d009      	beq.n	800ec4e <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800ec3a:	69fb      	ldr	r3, [r7, #28]
 800ec3c:	7a1a      	ldrb	r2, [r3, #8]
 800ec3e:	4b41      	ldr	r3, [pc, #260]	; (800ed44 <tcp_input+0x4a0>)
 800ec40:	685b      	ldr	r3, [r3, #4]
 800ec42:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ec46:	3301      	adds	r3, #1
 800ec48:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ec4a:	429a      	cmp	r2, r3
 800ec4c:	d122      	bne.n	800ec94 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800ec4e:	69fb      	ldr	r3, [r7, #28]
 800ec50:	8b1a      	ldrh	r2, [r3, #24]
 800ec52:	4b3b      	ldr	r3, [pc, #236]	; (800ed40 <tcp_input+0x49c>)
 800ec54:	681b      	ldr	r3, [r3, #0]
 800ec56:	881b      	ldrh	r3, [r3, #0]
 800ec58:	b29b      	uxth	r3, r3
 800ec5a:	429a      	cmp	r2, r3
 800ec5c:	d11b      	bne.n	800ec96 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800ec5e:	69fb      	ldr	r3, [r7, #28]
 800ec60:	8ada      	ldrh	r2, [r3, #22]
 800ec62:	4b37      	ldr	r3, [pc, #220]	; (800ed40 <tcp_input+0x49c>)
 800ec64:	681b      	ldr	r3, [r3, #0]
 800ec66:	885b      	ldrh	r3, [r3, #2]
 800ec68:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800ec6a:	429a      	cmp	r2, r3
 800ec6c:	d113      	bne.n	800ec96 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800ec6e:	69fb      	ldr	r3, [r7, #28]
 800ec70:	685a      	ldr	r2, [r3, #4]
 800ec72:	4b34      	ldr	r3, [pc, #208]	; (800ed44 <tcp_input+0x4a0>)
 800ec74:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800ec76:	429a      	cmp	r2, r3
 800ec78:	d10d      	bne.n	800ec96 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800ec7a:	69fb      	ldr	r3, [r7, #28]
 800ec7c:	681a      	ldr	r2, [r3, #0]
 800ec7e:	4b31      	ldr	r3, [pc, #196]	; (800ed44 <tcp_input+0x4a0>)
 800ec80:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800ec82:	429a      	cmp	r2, r3
 800ec84:	d107      	bne.n	800ec96 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800ec86:	69f8      	ldr	r0, [r7, #28]
 800ec88:	f000 fb56 	bl	800f338 <tcp_timewait_input>
        }
        pbuf_free(p);
 800ec8c:	6878      	ldr	r0, [r7, #4]
 800ec8e:	f7fd fcc3 	bl	800c618 <pbuf_free>
        return;
 800ec92:	e1fd      	b.n	800f090 <tcp_input+0x7ec>
        continue;
 800ec94:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800ec96:	69fb      	ldr	r3, [r7, #28]
 800ec98:	68db      	ldr	r3, [r3, #12]
 800ec9a:	61fb      	str	r3, [r7, #28]
 800ec9c:	69fb      	ldr	r3, [r7, #28]
 800ec9e:	2b00      	cmp	r3, #0
 800eca0:	d1bc      	bne.n	800ec1c <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800eca2:	2300      	movs	r3, #0
 800eca4:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800eca6:	4b2f      	ldr	r3, [pc, #188]	; (800ed64 <tcp_input+0x4c0>)
 800eca8:	681b      	ldr	r3, [r3, #0]
 800ecaa:	617b      	str	r3, [r7, #20]
 800ecac:	e02a      	b.n	800ed04 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800ecae:	697b      	ldr	r3, [r7, #20]
 800ecb0:	7a1b      	ldrb	r3, [r3, #8]
 800ecb2:	2b00      	cmp	r3, #0
 800ecb4:	d00c      	beq.n	800ecd0 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800ecb6:	697b      	ldr	r3, [r7, #20]
 800ecb8:	7a1a      	ldrb	r2, [r3, #8]
 800ecba:	4b22      	ldr	r3, [pc, #136]	; (800ed44 <tcp_input+0x4a0>)
 800ecbc:	685b      	ldr	r3, [r3, #4]
 800ecbe:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ecc2:	3301      	adds	r3, #1
 800ecc4:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800ecc6:	429a      	cmp	r2, r3
 800ecc8:	d002      	beq.n	800ecd0 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800ecca:	697b      	ldr	r3, [r7, #20]
 800eccc:	61bb      	str	r3, [r7, #24]
        continue;
 800ecce:	e016      	b.n	800ecfe <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800ecd0:	697b      	ldr	r3, [r7, #20]
 800ecd2:	8ada      	ldrh	r2, [r3, #22]
 800ecd4:	4b1a      	ldr	r3, [pc, #104]	; (800ed40 <tcp_input+0x49c>)
 800ecd6:	681b      	ldr	r3, [r3, #0]
 800ecd8:	885b      	ldrh	r3, [r3, #2]
 800ecda:	b29b      	uxth	r3, r3
 800ecdc:	429a      	cmp	r2, r3
 800ecde:	d10c      	bne.n	800ecfa <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800ece0:	697b      	ldr	r3, [r7, #20]
 800ece2:	681a      	ldr	r2, [r3, #0]
 800ece4:	4b17      	ldr	r3, [pc, #92]	; (800ed44 <tcp_input+0x4a0>)
 800ece6:	695b      	ldr	r3, [r3, #20]
 800ece8:	429a      	cmp	r2, r3
 800ecea:	d00f      	beq.n	800ed0c <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800ecec:	697b      	ldr	r3, [r7, #20]
 800ecee:	2b00      	cmp	r3, #0
 800ecf0:	d00d      	beq.n	800ed0e <tcp_input+0x46a>
 800ecf2:	697b      	ldr	r3, [r7, #20]
 800ecf4:	681b      	ldr	r3, [r3, #0]
 800ecf6:	2b00      	cmp	r3, #0
 800ecf8:	d009      	beq.n	800ed0e <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800ecfa:	697b      	ldr	r3, [r7, #20]
 800ecfc:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800ecfe:	697b      	ldr	r3, [r7, #20]
 800ed00:	68db      	ldr	r3, [r3, #12]
 800ed02:	617b      	str	r3, [r7, #20]
 800ed04:	697b      	ldr	r3, [r7, #20]
 800ed06:	2b00      	cmp	r3, #0
 800ed08:	d1d1      	bne.n	800ecae <tcp_input+0x40a>
 800ed0a:	e000      	b.n	800ed0e <tcp_input+0x46a>
            break;
 800ed0c:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800ed0e:	697b      	ldr	r3, [r7, #20]
 800ed10:	2b00      	cmp	r3, #0
 800ed12:	d029      	beq.n	800ed68 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800ed14:	69bb      	ldr	r3, [r7, #24]
 800ed16:	2b00      	cmp	r3, #0
 800ed18:	d00a      	beq.n	800ed30 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800ed1a:	697b      	ldr	r3, [r7, #20]
 800ed1c:	68da      	ldr	r2, [r3, #12]
 800ed1e:	69bb      	ldr	r3, [r7, #24]
 800ed20:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800ed22:	4b10      	ldr	r3, [pc, #64]	; (800ed64 <tcp_input+0x4c0>)
 800ed24:	681a      	ldr	r2, [r3, #0]
 800ed26:	697b      	ldr	r3, [r7, #20]
 800ed28:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800ed2a:	4a0e      	ldr	r2, [pc, #56]	; (800ed64 <tcp_input+0x4c0>)
 800ed2c:	697b      	ldr	r3, [r7, #20]
 800ed2e:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800ed30:	6978      	ldr	r0, [r7, #20]
 800ed32:	f000 fa03 	bl	800f13c <tcp_listen_input>
      }
      pbuf_free(p);
 800ed36:	6878      	ldr	r0, [r7, #4]
 800ed38:	f7fd fc6e 	bl	800c618 <pbuf_free>
      return;
 800ed3c:	e1a8      	b.n	800f090 <tcp_input+0x7ec>
 800ed3e:	bf00      	nop
 800ed40:	20010da0 	.word	0x20010da0
 800ed44:	2000d604 	.word	0x2000d604
 800ed48:	0801b294 	.word	0x0801b294
 800ed4c:	0801b3c0 	.word	0x0801b3c0
 800ed50:	0801b2e0 	.word	0x0801b2e0
 800ed54:	20010d84 	.word	0x20010d84
 800ed58:	0801b3ec 	.word	0x0801b3ec
 800ed5c:	20010d88 	.word	0x20010d88
 800ed60:	0801b418 	.word	0x0801b418
 800ed64:	20010d80 	.word	0x20010d80
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800ed68:	69fb      	ldr	r3, [r7, #28]
 800ed6a:	2b00      	cmp	r3, #0
 800ed6c:	f000 8158 	beq.w	800f020 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800ed70:	4b95      	ldr	r3, [pc, #596]	; (800efc8 <tcp_input+0x724>)
 800ed72:	2200      	movs	r2, #0
 800ed74:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	891a      	ldrh	r2, [r3, #8]
 800ed7a:	4b93      	ldr	r3, [pc, #588]	; (800efc8 <tcp_input+0x724>)
 800ed7c:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800ed7e:	4a92      	ldr	r2, [pc, #584]	; (800efc8 <tcp_input+0x724>)
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800ed84:	4b91      	ldr	r3, [pc, #580]	; (800efcc <tcp_input+0x728>)
 800ed86:	681b      	ldr	r3, [r3, #0]
 800ed88:	4a8f      	ldr	r2, [pc, #572]	; (800efc8 <tcp_input+0x724>)
 800ed8a:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800ed8c:	4b90      	ldr	r3, [pc, #576]	; (800efd0 <tcp_input+0x72c>)
 800ed8e:	2200      	movs	r2, #0
 800ed90:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800ed92:	4b90      	ldr	r3, [pc, #576]	; (800efd4 <tcp_input+0x730>)
 800ed94:	2200      	movs	r2, #0
 800ed96:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800ed98:	4b8f      	ldr	r3, [pc, #572]	; (800efd8 <tcp_input+0x734>)
 800ed9a:	2200      	movs	r2, #0
 800ed9c:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800ed9e:	4b8f      	ldr	r3, [pc, #572]	; (800efdc <tcp_input+0x738>)
 800eda0:	781b      	ldrb	r3, [r3, #0]
 800eda2:	f003 0308 	and.w	r3, r3, #8
 800eda6:	2b00      	cmp	r3, #0
 800eda8:	d006      	beq.n	800edb8 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	7b5b      	ldrb	r3, [r3, #13]
 800edae:	f043 0301 	orr.w	r3, r3, #1
 800edb2:	b2da      	uxtb	r2, r3
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800edb8:	69fb      	ldr	r3, [r7, #28]
 800edba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800edbc:	2b00      	cmp	r3, #0
 800edbe:	d017      	beq.n	800edf0 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800edc0:	69f8      	ldr	r0, [r7, #28]
 800edc2:	f7ff f83d 	bl	800de40 <tcp_process_refused_data>
 800edc6:	4603      	mov	r3, r0
 800edc8:	f113 0f0d 	cmn.w	r3, #13
 800edcc:	d007      	beq.n	800edde <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800edce:	69fb      	ldr	r3, [r7, #28]
 800edd0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800edd2:	2b00      	cmp	r3, #0
 800edd4:	d00c      	beq.n	800edf0 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800edd6:	4b82      	ldr	r3, [pc, #520]	; (800efe0 <tcp_input+0x73c>)
 800edd8:	881b      	ldrh	r3, [r3, #0]
 800edda:	2b00      	cmp	r3, #0
 800eddc:	d008      	beq.n	800edf0 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800edde:	69fb      	ldr	r3, [r7, #28]
 800ede0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ede2:	2b00      	cmp	r3, #0
 800ede4:	f040 80e3 	bne.w	800efae <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800ede8:	69f8      	ldr	r0, [r7, #28]
 800edea:	f003 fe05 	bl	80129f8 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800edee:	e0de      	b.n	800efae <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 800edf0:	4a7c      	ldr	r2, [pc, #496]	; (800efe4 <tcp_input+0x740>)
 800edf2:	69fb      	ldr	r3, [r7, #28]
 800edf4:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800edf6:	69f8      	ldr	r0, [r7, #28]
 800edf8:	f000 fb18 	bl	800f42c <tcp_process>
 800edfc:	4603      	mov	r3, r0
 800edfe:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800ee00:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ee04:	f113 0f0d 	cmn.w	r3, #13
 800ee08:	f000 80d3 	beq.w	800efb2 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800ee0c:	4b71      	ldr	r3, [pc, #452]	; (800efd4 <tcp_input+0x730>)
 800ee0e:	781b      	ldrb	r3, [r3, #0]
 800ee10:	f003 0308 	and.w	r3, r3, #8
 800ee14:	2b00      	cmp	r3, #0
 800ee16:	d015      	beq.n	800ee44 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800ee18:	69fb      	ldr	r3, [r7, #28]
 800ee1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ee1e:	2b00      	cmp	r3, #0
 800ee20:	d008      	beq.n	800ee34 <tcp_input+0x590>
 800ee22:	69fb      	ldr	r3, [r7, #28]
 800ee24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ee28:	69fa      	ldr	r2, [r7, #28]
 800ee2a:	6912      	ldr	r2, [r2, #16]
 800ee2c:	f06f 010d 	mvn.w	r1, #13
 800ee30:	4610      	mov	r0, r2
 800ee32:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800ee34:	69f9      	ldr	r1, [r7, #28]
 800ee36:	486c      	ldr	r0, [pc, #432]	; (800efe8 <tcp_input+0x744>)
 800ee38:	f7ff fbbc 	bl	800e5b4 <tcp_pcb_remove>
        tcp_free(pcb);
 800ee3c:	69f8      	ldr	r0, [r7, #28]
 800ee3e:	f7fd fea7 	bl	800cb90 <tcp_free>
 800ee42:	e0da      	b.n	800effa <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800ee44:	2300      	movs	r3, #0
 800ee46:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800ee48:	4b63      	ldr	r3, [pc, #396]	; (800efd8 <tcp_input+0x734>)
 800ee4a:	881b      	ldrh	r3, [r3, #0]
 800ee4c:	2b00      	cmp	r3, #0
 800ee4e:	d01d      	beq.n	800ee8c <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800ee50:	4b61      	ldr	r3, [pc, #388]	; (800efd8 <tcp_input+0x734>)
 800ee52:	881b      	ldrh	r3, [r3, #0]
 800ee54:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800ee56:	69fb      	ldr	r3, [r7, #28]
 800ee58:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ee5c:	2b00      	cmp	r3, #0
 800ee5e:	d00a      	beq.n	800ee76 <tcp_input+0x5d2>
 800ee60:	69fb      	ldr	r3, [r7, #28]
 800ee62:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ee66:	69fa      	ldr	r2, [r7, #28]
 800ee68:	6910      	ldr	r0, [r2, #16]
 800ee6a:	89fa      	ldrh	r2, [r7, #14]
 800ee6c:	69f9      	ldr	r1, [r7, #28]
 800ee6e:	4798      	blx	r3
 800ee70:	4603      	mov	r3, r0
 800ee72:	74fb      	strb	r3, [r7, #19]
 800ee74:	e001      	b.n	800ee7a <tcp_input+0x5d6>
 800ee76:	2300      	movs	r3, #0
 800ee78:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800ee7a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ee7e:	f113 0f0d 	cmn.w	r3, #13
 800ee82:	f000 8098 	beq.w	800efb6 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800ee86:	4b54      	ldr	r3, [pc, #336]	; (800efd8 <tcp_input+0x734>)
 800ee88:	2200      	movs	r2, #0
 800ee8a:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800ee8c:	69f8      	ldr	r0, [r7, #28]
 800ee8e:	f000 f915 	bl	800f0bc <tcp_input_delayed_close>
 800ee92:	4603      	mov	r3, r0
 800ee94:	2b00      	cmp	r3, #0
 800ee96:	f040 8090 	bne.w	800efba <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800ee9a:	4b4d      	ldr	r3, [pc, #308]	; (800efd0 <tcp_input+0x72c>)
 800ee9c:	681b      	ldr	r3, [r3, #0]
 800ee9e:	2b00      	cmp	r3, #0
 800eea0:	d041      	beq.n	800ef26 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800eea2:	69fb      	ldr	r3, [r7, #28]
 800eea4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800eea6:	2b00      	cmp	r3, #0
 800eea8:	d006      	beq.n	800eeb8 <tcp_input+0x614>
 800eeaa:	4b50      	ldr	r3, [pc, #320]	; (800efec <tcp_input+0x748>)
 800eeac:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800eeb0:	494f      	ldr	r1, [pc, #316]	; (800eff0 <tcp_input+0x74c>)
 800eeb2:	4850      	ldr	r0, [pc, #320]	; (800eff4 <tcp_input+0x750>)
 800eeb4:	f009 fa86 	bl	80183c4 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800eeb8:	69fb      	ldr	r3, [r7, #28]
 800eeba:	8b5b      	ldrh	r3, [r3, #26]
 800eebc:	f003 0310 	and.w	r3, r3, #16
 800eec0:	2b00      	cmp	r3, #0
 800eec2:	d008      	beq.n	800eed6 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800eec4:	4b42      	ldr	r3, [pc, #264]	; (800efd0 <tcp_input+0x72c>)
 800eec6:	681b      	ldr	r3, [r3, #0]
 800eec8:	4618      	mov	r0, r3
 800eeca:	f7fd fba5 	bl	800c618 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800eece:	69f8      	ldr	r0, [r7, #28]
 800eed0:	f7fe f9a2 	bl	800d218 <tcp_abort>
            goto aborted;
 800eed4:	e091      	b.n	800effa <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800eed6:	69fb      	ldr	r3, [r7, #28]
 800eed8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800eedc:	2b00      	cmp	r3, #0
 800eede:	d00c      	beq.n	800eefa <tcp_input+0x656>
 800eee0:	69fb      	ldr	r3, [r7, #28]
 800eee2:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800eee6:	69fb      	ldr	r3, [r7, #28]
 800eee8:	6918      	ldr	r0, [r3, #16]
 800eeea:	4b39      	ldr	r3, [pc, #228]	; (800efd0 <tcp_input+0x72c>)
 800eeec:	681a      	ldr	r2, [r3, #0]
 800eeee:	2300      	movs	r3, #0
 800eef0:	69f9      	ldr	r1, [r7, #28]
 800eef2:	47a0      	blx	r4
 800eef4:	4603      	mov	r3, r0
 800eef6:	74fb      	strb	r3, [r7, #19]
 800eef8:	e008      	b.n	800ef0c <tcp_input+0x668>
 800eefa:	4b35      	ldr	r3, [pc, #212]	; (800efd0 <tcp_input+0x72c>)
 800eefc:	681a      	ldr	r2, [r3, #0]
 800eefe:	2300      	movs	r3, #0
 800ef00:	69f9      	ldr	r1, [r7, #28]
 800ef02:	2000      	movs	r0, #0
 800ef04:	f7ff f890 	bl	800e028 <tcp_recv_null>
 800ef08:	4603      	mov	r3, r0
 800ef0a:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800ef0c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ef10:	f113 0f0d 	cmn.w	r3, #13
 800ef14:	d053      	beq.n	800efbe <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800ef16:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ef1a:	2b00      	cmp	r3, #0
 800ef1c:	d003      	beq.n	800ef26 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800ef1e:	4b2c      	ldr	r3, [pc, #176]	; (800efd0 <tcp_input+0x72c>)
 800ef20:	681a      	ldr	r2, [r3, #0]
 800ef22:	69fb      	ldr	r3, [r7, #28]
 800ef24:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800ef26:	4b2b      	ldr	r3, [pc, #172]	; (800efd4 <tcp_input+0x730>)
 800ef28:	781b      	ldrb	r3, [r3, #0]
 800ef2a:	f003 0320 	and.w	r3, r3, #32
 800ef2e:	2b00      	cmp	r3, #0
 800ef30:	d030      	beq.n	800ef94 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800ef32:	69fb      	ldr	r3, [r7, #28]
 800ef34:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ef36:	2b00      	cmp	r3, #0
 800ef38:	d009      	beq.n	800ef4e <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800ef3a:	69fb      	ldr	r3, [r7, #28]
 800ef3c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ef3e:	7b5a      	ldrb	r2, [r3, #13]
 800ef40:	69fb      	ldr	r3, [r7, #28]
 800ef42:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ef44:	f042 0220 	orr.w	r2, r2, #32
 800ef48:	b2d2      	uxtb	r2, r2
 800ef4a:	735a      	strb	r2, [r3, #13]
 800ef4c:	e022      	b.n	800ef94 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800ef4e:	69fb      	ldr	r3, [r7, #28]
 800ef50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ef52:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800ef56:	d005      	beq.n	800ef64 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 800ef58:	69fb      	ldr	r3, [r7, #28]
 800ef5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ef5c:	3301      	adds	r3, #1
 800ef5e:	b29a      	uxth	r2, r3
 800ef60:	69fb      	ldr	r3, [r7, #28]
 800ef62:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800ef64:	69fb      	ldr	r3, [r7, #28]
 800ef66:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ef6a:	2b00      	cmp	r3, #0
 800ef6c:	d00b      	beq.n	800ef86 <tcp_input+0x6e2>
 800ef6e:	69fb      	ldr	r3, [r7, #28]
 800ef70:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800ef74:	69fb      	ldr	r3, [r7, #28]
 800ef76:	6918      	ldr	r0, [r3, #16]
 800ef78:	2300      	movs	r3, #0
 800ef7a:	2200      	movs	r2, #0
 800ef7c:	69f9      	ldr	r1, [r7, #28]
 800ef7e:	47a0      	blx	r4
 800ef80:	4603      	mov	r3, r0
 800ef82:	74fb      	strb	r3, [r7, #19]
 800ef84:	e001      	b.n	800ef8a <tcp_input+0x6e6>
 800ef86:	2300      	movs	r3, #0
 800ef88:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800ef8a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ef8e:	f113 0f0d 	cmn.w	r3, #13
 800ef92:	d016      	beq.n	800efc2 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800ef94:	4b13      	ldr	r3, [pc, #76]	; (800efe4 <tcp_input+0x740>)
 800ef96:	2200      	movs	r2, #0
 800ef98:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800ef9a:	69f8      	ldr	r0, [r7, #28]
 800ef9c:	f000 f88e 	bl	800f0bc <tcp_input_delayed_close>
 800efa0:	4603      	mov	r3, r0
 800efa2:	2b00      	cmp	r3, #0
 800efa4:	d128      	bne.n	800eff8 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800efa6:	69f8      	ldr	r0, [r7, #28]
 800efa8:	f002 ff20 	bl	8011dec <tcp_output>
 800efac:	e025      	b.n	800effa <tcp_input+0x756>
        goto aborted;
 800efae:	bf00      	nop
 800efb0:	e023      	b.n	800effa <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800efb2:	bf00      	nop
 800efb4:	e021      	b.n	800effa <tcp_input+0x756>
              goto aborted;
 800efb6:	bf00      	nop
 800efb8:	e01f      	b.n	800effa <tcp_input+0x756>
          goto aborted;
 800efba:	bf00      	nop
 800efbc:	e01d      	b.n	800effa <tcp_input+0x756>
            goto aborted;
 800efbe:	bf00      	nop
 800efc0:	e01b      	b.n	800effa <tcp_input+0x756>
              goto aborted;
 800efc2:	bf00      	nop
 800efc4:	e019      	b.n	800effa <tcp_input+0x756>
 800efc6:	bf00      	nop
 800efc8:	20010d90 	.word	0x20010d90
 800efcc:	20010da0 	.word	0x20010da0
 800efd0:	20010dc0 	.word	0x20010dc0
 800efd4:	20010dbd 	.word	0x20010dbd
 800efd8:	20010db8 	.word	0x20010db8
 800efdc:	20010dbc 	.word	0x20010dbc
 800efe0:	20010dba 	.word	0x20010dba
 800efe4:	20010dc4 	.word	0x20010dc4
 800efe8:	20010d84 	.word	0x20010d84
 800efec:	0801b294 	.word	0x0801b294
 800eff0:	0801b448 	.word	0x0801b448
 800eff4:	0801b2e0 	.word	0x0801b2e0
          goto aborted;
 800eff8:	bf00      	nop
    tcp_input_pcb = NULL;
 800effa:	4b27      	ldr	r3, [pc, #156]	; (800f098 <tcp_input+0x7f4>)
 800effc:	2200      	movs	r2, #0
 800effe:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800f000:	4b26      	ldr	r3, [pc, #152]	; (800f09c <tcp_input+0x7f8>)
 800f002:	2200      	movs	r2, #0
 800f004:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800f006:	4b26      	ldr	r3, [pc, #152]	; (800f0a0 <tcp_input+0x7fc>)
 800f008:	685b      	ldr	r3, [r3, #4]
 800f00a:	2b00      	cmp	r3, #0
 800f00c:	d03f      	beq.n	800f08e <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800f00e:	4b24      	ldr	r3, [pc, #144]	; (800f0a0 <tcp_input+0x7fc>)
 800f010:	685b      	ldr	r3, [r3, #4]
 800f012:	4618      	mov	r0, r3
 800f014:	f7fd fb00 	bl	800c618 <pbuf_free>
      inseg.p = NULL;
 800f018:	4b21      	ldr	r3, [pc, #132]	; (800f0a0 <tcp_input+0x7fc>)
 800f01a:	2200      	movs	r2, #0
 800f01c:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800f01e:	e036      	b.n	800f08e <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800f020:	4b20      	ldr	r3, [pc, #128]	; (800f0a4 <tcp_input+0x800>)
 800f022:	681b      	ldr	r3, [r3, #0]
 800f024:	899b      	ldrh	r3, [r3, #12]
 800f026:	b29b      	uxth	r3, r3
 800f028:	4618      	mov	r0, r3
 800f02a:	f7fb fec1 	bl	800adb0 <lwip_htons>
 800f02e:	4603      	mov	r3, r0
 800f030:	b2db      	uxtb	r3, r3
 800f032:	f003 0304 	and.w	r3, r3, #4
 800f036:	2b00      	cmp	r3, #0
 800f038:	d118      	bne.n	800f06c <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f03a:	4b1b      	ldr	r3, [pc, #108]	; (800f0a8 <tcp_input+0x804>)
 800f03c:	6819      	ldr	r1, [r3, #0]
 800f03e:	4b1b      	ldr	r3, [pc, #108]	; (800f0ac <tcp_input+0x808>)
 800f040:	881b      	ldrh	r3, [r3, #0]
 800f042:	461a      	mov	r2, r3
 800f044:	4b1a      	ldr	r3, [pc, #104]	; (800f0b0 <tcp_input+0x80c>)
 800f046:	681b      	ldr	r3, [r3, #0]
 800f048:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f04a:	4b16      	ldr	r3, [pc, #88]	; (800f0a4 <tcp_input+0x800>)
 800f04c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f04e:	885b      	ldrh	r3, [r3, #2]
 800f050:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f052:	4a14      	ldr	r2, [pc, #80]	; (800f0a4 <tcp_input+0x800>)
 800f054:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f056:	8812      	ldrh	r2, [r2, #0]
 800f058:	b292      	uxth	r2, r2
 800f05a:	9202      	str	r2, [sp, #8]
 800f05c:	9301      	str	r3, [sp, #4]
 800f05e:	4b15      	ldr	r3, [pc, #84]	; (800f0b4 <tcp_input+0x810>)
 800f060:	9300      	str	r3, [sp, #0]
 800f062:	4b15      	ldr	r3, [pc, #84]	; (800f0b8 <tcp_input+0x814>)
 800f064:	4602      	mov	r2, r0
 800f066:	2000      	movs	r0, #0
 800f068:	f003 fc74 	bl	8012954 <tcp_rst>
    pbuf_free(p);
 800f06c:	6878      	ldr	r0, [r7, #4]
 800f06e:	f7fd fad3 	bl	800c618 <pbuf_free>
  return;
 800f072:	e00c      	b.n	800f08e <tcp_input+0x7ea>
    goto dropped;
 800f074:	bf00      	nop
 800f076:	e006      	b.n	800f086 <tcp_input+0x7e2>
    goto dropped;
 800f078:	bf00      	nop
 800f07a:	e004      	b.n	800f086 <tcp_input+0x7e2>
    goto dropped;
 800f07c:	bf00      	nop
 800f07e:	e002      	b.n	800f086 <tcp_input+0x7e2>
      goto dropped;
 800f080:	bf00      	nop
 800f082:	e000      	b.n	800f086 <tcp_input+0x7e2>
      goto dropped;
 800f084:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800f086:	6878      	ldr	r0, [r7, #4]
 800f088:	f7fd fac6 	bl	800c618 <pbuf_free>
 800f08c:	e000      	b.n	800f090 <tcp_input+0x7ec>
  return;
 800f08e:	bf00      	nop
}
 800f090:	3724      	adds	r7, #36	; 0x24
 800f092:	46bd      	mov	sp, r7
 800f094:	bd90      	pop	{r4, r7, pc}
 800f096:	bf00      	nop
 800f098:	20010dc4 	.word	0x20010dc4
 800f09c:	20010dc0 	.word	0x20010dc0
 800f0a0:	20010d90 	.word	0x20010d90
 800f0a4:	20010da0 	.word	0x20010da0
 800f0a8:	20010db4 	.word	0x20010db4
 800f0ac:	20010dba 	.word	0x20010dba
 800f0b0:	20010db0 	.word	0x20010db0
 800f0b4:	2000d614 	.word	0x2000d614
 800f0b8:	2000d618 	.word	0x2000d618

0800f0bc <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800f0bc:	b580      	push	{r7, lr}
 800f0be:	b082      	sub	sp, #8
 800f0c0:	af00      	add	r7, sp, #0
 800f0c2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800f0c4:	687b      	ldr	r3, [r7, #4]
 800f0c6:	2b00      	cmp	r3, #0
 800f0c8:	d106      	bne.n	800f0d8 <tcp_input_delayed_close+0x1c>
 800f0ca:	4b17      	ldr	r3, [pc, #92]	; (800f128 <tcp_input_delayed_close+0x6c>)
 800f0cc:	f240 225a 	movw	r2, #602	; 0x25a
 800f0d0:	4916      	ldr	r1, [pc, #88]	; (800f12c <tcp_input_delayed_close+0x70>)
 800f0d2:	4817      	ldr	r0, [pc, #92]	; (800f130 <tcp_input_delayed_close+0x74>)
 800f0d4:	f009 f976 	bl	80183c4 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800f0d8:	4b16      	ldr	r3, [pc, #88]	; (800f134 <tcp_input_delayed_close+0x78>)
 800f0da:	781b      	ldrb	r3, [r3, #0]
 800f0dc:	f003 0310 	and.w	r3, r3, #16
 800f0e0:	2b00      	cmp	r3, #0
 800f0e2:	d01c      	beq.n	800f11e <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	8b5b      	ldrh	r3, [r3, #26]
 800f0e8:	f003 0310 	and.w	r3, r3, #16
 800f0ec:	2b00      	cmp	r3, #0
 800f0ee:	d10d      	bne.n	800f10c <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f0f6:	2b00      	cmp	r3, #0
 800f0f8:	d008      	beq.n	800f10c <tcp_input_delayed_close+0x50>
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f100:	687a      	ldr	r2, [r7, #4]
 800f102:	6912      	ldr	r2, [r2, #16]
 800f104:	f06f 010e 	mvn.w	r1, #14
 800f108:	4610      	mov	r0, r2
 800f10a:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800f10c:	6879      	ldr	r1, [r7, #4]
 800f10e:	480a      	ldr	r0, [pc, #40]	; (800f138 <tcp_input_delayed_close+0x7c>)
 800f110:	f7ff fa50 	bl	800e5b4 <tcp_pcb_remove>
    tcp_free(pcb);
 800f114:	6878      	ldr	r0, [r7, #4]
 800f116:	f7fd fd3b 	bl	800cb90 <tcp_free>
    return 1;
 800f11a:	2301      	movs	r3, #1
 800f11c:	e000      	b.n	800f120 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800f11e:	2300      	movs	r3, #0
}
 800f120:	4618      	mov	r0, r3
 800f122:	3708      	adds	r7, #8
 800f124:	46bd      	mov	sp, r7
 800f126:	bd80      	pop	{r7, pc}
 800f128:	0801b294 	.word	0x0801b294
 800f12c:	0801b464 	.word	0x0801b464
 800f130:	0801b2e0 	.word	0x0801b2e0
 800f134:	20010dbd 	.word	0x20010dbd
 800f138:	20010d84 	.word	0x20010d84

0800f13c <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800f13c:	b590      	push	{r4, r7, lr}
 800f13e:	b08b      	sub	sp, #44	; 0x2c
 800f140:	af04      	add	r7, sp, #16
 800f142:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800f144:	4b6f      	ldr	r3, [pc, #444]	; (800f304 <tcp_listen_input+0x1c8>)
 800f146:	781b      	ldrb	r3, [r3, #0]
 800f148:	f003 0304 	and.w	r3, r3, #4
 800f14c:	2b00      	cmp	r3, #0
 800f14e:	f040 80d2 	bne.w	800f2f6 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800f152:	687b      	ldr	r3, [r7, #4]
 800f154:	2b00      	cmp	r3, #0
 800f156:	d106      	bne.n	800f166 <tcp_listen_input+0x2a>
 800f158:	4b6b      	ldr	r3, [pc, #428]	; (800f308 <tcp_listen_input+0x1cc>)
 800f15a:	f240 2281 	movw	r2, #641	; 0x281
 800f15e:	496b      	ldr	r1, [pc, #428]	; (800f30c <tcp_listen_input+0x1d0>)
 800f160:	486b      	ldr	r0, [pc, #428]	; (800f310 <tcp_listen_input+0x1d4>)
 800f162:	f009 f92f 	bl	80183c4 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800f166:	4b67      	ldr	r3, [pc, #412]	; (800f304 <tcp_listen_input+0x1c8>)
 800f168:	781b      	ldrb	r3, [r3, #0]
 800f16a:	f003 0310 	and.w	r3, r3, #16
 800f16e:	2b00      	cmp	r3, #0
 800f170:	d019      	beq.n	800f1a6 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f172:	4b68      	ldr	r3, [pc, #416]	; (800f314 <tcp_listen_input+0x1d8>)
 800f174:	6819      	ldr	r1, [r3, #0]
 800f176:	4b68      	ldr	r3, [pc, #416]	; (800f318 <tcp_listen_input+0x1dc>)
 800f178:	881b      	ldrh	r3, [r3, #0]
 800f17a:	461a      	mov	r2, r3
 800f17c:	4b67      	ldr	r3, [pc, #412]	; (800f31c <tcp_listen_input+0x1e0>)
 800f17e:	681b      	ldr	r3, [r3, #0]
 800f180:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f182:	4b67      	ldr	r3, [pc, #412]	; (800f320 <tcp_listen_input+0x1e4>)
 800f184:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f186:	885b      	ldrh	r3, [r3, #2]
 800f188:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f18a:	4a65      	ldr	r2, [pc, #404]	; (800f320 <tcp_listen_input+0x1e4>)
 800f18c:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f18e:	8812      	ldrh	r2, [r2, #0]
 800f190:	b292      	uxth	r2, r2
 800f192:	9202      	str	r2, [sp, #8]
 800f194:	9301      	str	r3, [sp, #4]
 800f196:	4b63      	ldr	r3, [pc, #396]	; (800f324 <tcp_listen_input+0x1e8>)
 800f198:	9300      	str	r3, [sp, #0]
 800f19a:	4b63      	ldr	r3, [pc, #396]	; (800f328 <tcp_listen_input+0x1ec>)
 800f19c:	4602      	mov	r2, r0
 800f19e:	6878      	ldr	r0, [r7, #4]
 800f1a0:	f003 fbd8 	bl	8012954 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800f1a4:	e0a9      	b.n	800f2fa <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800f1a6:	4b57      	ldr	r3, [pc, #348]	; (800f304 <tcp_listen_input+0x1c8>)
 800f1a8:	781b      	ldrb	r3, [r3, #0]
 800f1aa:	f003 0302 	and.w	r3, r3, #2
 800f1ae:	2b00      	cmp	r3, #0
 800f1b0:	f000 80a3 	beq.w	800f2fa <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800f1b4:	687b      	ldr	r3, [r7, #4]
 800f1b6:	7d5b      	ldrb	r3, [r3, #21]
 800f1b8:	4618      	mov	r0, r3
 800f1ba:	f7ff f859 	bl	800e270 <tcp_alloc>
 800f1be:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800f1c0:	697b      	ldr	r3, [r7, #20]
 800f1c2:	2b00      	cmp	r3, #0
 800f1c4:	d111      	bne.n	800f1ea <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	699b      	ldr	r3, [r3, #24]
 800f1ca:	2b00      	cmp	r3, #0
 800f1cc:	d00a      	beq.n	800f1e4 <tcp_listen_input+0xa8>
 800f1ce:	687b      	ldr	r3, [r7, #4]
 800f1d0:	699b      	ldr	r3, [r3, #24]
 800f1d2:	687a      	ldr	r2, [r7, #4]
 800f1d4:	6910      	ldr	r0, [r2, #16]
 800f1d6:	f04f 32ff 	mov.w	r2, #4294967295
 800f1da:	2100      	movs	r1, #0
 800f1dc:	4798      	blx	r3
 800f1de:	4603      	mov	r3, r0
 800f1e0:	73bb      	strb	r3, [r7, #14]
      return;
 800f1e2:	e08b      	b.n	800f2fc <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800f1e4:	23f0      	movs	r3, #240	; 0xf0
 800f1e6:	73bb      	strb	r3, [r7, #14]
      return;
 800f1e8:	e088      	b.n	800f2fc <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800f1ea:	4b50      	ldr	r3, [pc, #320]	; (800f32c <tcp_listen_input+0x1f0>)
 800f1ec:	695a      	ldr	r2, [r3, #20]
 800f1ee:	697b      	ldr	r3, [r7, #20]
 800f1f0:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800f1f2:	4b4e      	ldr	r3, [pc, #312]	; (800f32c <tcp_listen_input+0x1f0>)
 800f1f4:	691a      	ldr	r2, [r3, #16]
 800f1f6:	697b      	ldr	r3, [r7, #20]
 800f1f8:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800f1fa:	687b      	ldr	r3, [r7, #4]
 800f1fc:	8ada      	ldrh	r2, [r3, #22]
 800f1fe:	697b      	ldr	r3, [r7, #20]
 800f200:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800f202:	4b47      	ldr	r3, [pc, #284]	; (800f320 <tcp_listen_input+0x1e4>)
 800f204:	681b      	ldr	r3, [r3, #0]
 800f206:	881b      	ldrh	r3, [r3, #0]
 800f208:	b29a      	uxth	r2, r3
 800f20a:	697b      	ldr	r3, [r7, #20]
 800f20c:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800f20e:	697b      	ldr	r3, [r7, #20]
 800f210:	2203      	movs	r2, #3
 800f212:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800f214:	4b41      	ldr	r3, [pc, #260]	; (800f31c <tcp_listen_input+0x1e0>)
 800f216:	681b      	ldr	r3, [r3, #0]
 800f218:	1c5a      	adds	r2, r3, #1
 800f21a:	697b      	ldr	r3, [r7, #20]
 800f21c:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800f21e:	697b      	ldr	r3, [r7, #20]
 800f220:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f222:	697b      	ldr	r3, [r7, #20]
 800f224:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800f226:	6978      	ldr	r0, [r7, #20]
 800f228:	f7ff fa58 	bl	800e6dc <tcp_next_iss>
 800f22c:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800f22e:	697b      	ldr	r3, [r7, #20]
 800f230:	693a      	ldr	r2, [r7, #16]
 800f232:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800f234:	697b      	ldr	r3, [r7, #20]
 800f236:	693a      	ldr	r2, [r7, #16]
 800f238:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800f23a:	697b      	ldr	r3, [r7, #20]
 800f23c:	693a      	ldr	r2, [r7, #16]
 800f23e:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800f240:	697b      	ldr	r3, [r7, #20]
 800f242:	693a      	ldr	r2, [r7, #16]
 800f244:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800f246:	4b35      	ldr	r3, [pc, #212]	; (800f31c <tcp_listen_input+0x1e0>)
 800f248:	681b      	ldr	r3, [r3, #0]
 800f24a:	1e5a      	subs	r2, r3, #1
 800f24c:	697b      	ldr	r3, [r7, #20]
 800f24e:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800f250:	687b      	ldr	r3, [r7, #4]
 800f252:	691a      	ldr	r2, [r3, #16]
 800f254:	697b      	ldr	r3, [r7, #20]
 800f256:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800f258:	697b      	ldr	r3, [r7, #20]
 800f25a:	687a      	ldr	r2, [r7, #4]
 800f25c:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	7a5b      	ldrb	r3, [r3, #9]
 800f262:	f003 030c 	and.w	r3, r3, #12
 800f266:	b2da      	uxtb	r2, r3
 800f268:	697b      	ldr	r3, [r7, #20]
 800f26a:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	7a1a      	ldrb	r2, [r3, #8]
 800f270:	697b      	ldr	r3, [r7, #20]
 800f272:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800f274:	4b2e      	ldr	r3, [pc, #184]	; (800f330 <tcp_listen_input+0x1f4>)
 800f276:	681a      	ldr	r2, [r3, #0]
 800f278:	697b      	ldr	r3, [r7, #20]
 800f27a:	60da      	str	r2, [r3, #12]
 800f27c:	4a2c      	ldr	r2, [pc, #176]	; (800f330 <tcp_listen_input+0x1f4>)
 800f27e:	697b      	ldr	r3, [r7, #20]
 800f280:	6013      	str	r3, [r2, #0]
 800f282:	f003 fd29 	bl	8012cd8 <tcp_timer_needed>
 800f286:	4b2b      	ldr	r3, [pc, #172]	; (800f334 <tcp_listen_input+0x1f8>)
 800f288:	2201      	movs	r2, #1
 800f28a:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800f28c:	6978      	ldr	r0, [r7, #20]
 800f28e:	f001 fd8f 	bl	8010db0 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800f292:	4b23      	ldr	r3, [pc, #140]	; (800f320 <tcp_listen_input+0x1e4>)
 800f294:	681b      	ldr	r3, [r3, #0]
 800f296:	89db      	ldrh	r3, [r3, #14]
 800f298:	b29a      	uxth	r2, r3
 800f29a:	697b      	ldr	r3, [r7, #20]
 800f29c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800f2a0:	697b      	ldr	r3, [r7, #20]
 800f2a2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800f2a6:	697b      	ldr	r3, [r7, #20]
 800f2a8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800f2ac:	697b      	ldr	r3, [r7, #20]
 800f2ae:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800f2b0:	697b      	ldr	r3, [r7, #20]
 800f2b2:	3304      	adds	r3, #4
 800f2b4:	4618      	mov	r0, r3
 800f2b6:	f007 fac1 	bl	801683c <ip4_route>
 800f2ba:	4601      	mov	r1, r0
 800f2bc:	697b      	ldr	r3, [r7, #20]
 800f2be:	3304      	adds	r3, #4
 800f2c0:	461a      	mov	r2, r3
 800f2c2:	4620      	mov	r0, r4
 800f2c4:	f7ff fa30 	bl	800e728 <tcp_eff_send_mss_netif>
 800f2c8:	4603      	mov	r3, r0
 800f2ca:	461a      	mov	r2, r3
 800f2cc:	697b      	ldr	r3, [r7, #20]
 800f2ce:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800f2d0:	2112      	movs	r1, #18
 800f2d2:	6978      	ldr	r0, [r7, #20]
 800f2d4:	f002 fc9c 	bl	8011c10 <tcp_enqueue_flags>
 800f2d8:	4603      	mov	r3, r0
 800f2da:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800f2dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f2e0:	2b00      	cmp	r3, #0
 800f2e2:	d004      	beq.n	800f2ee <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800f2e4:	2100      	movs	r1, #0
 800f2e6:	6978      	ldr	r0, [r7, #20]
 800f2e8:	f7fd fed8 	bl	800d09c <tcp_abandon>
      return;
 800f2ec:	e006      	b.n	800f2fc <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800f2ee:	6978      	ldr	r0, [r7, #20]
 800f2f0:	f002 fd7c 	bl	8011dec <tcp_output>
  return;
 800f2f4:	e001      	b.n	800f2fa <tcp_listen_input+0x1be>
    return;
 800f2f6:	bf00      	nop
 800f2f8:	e000      	b.n	800f2fc <tcp_listen_input+0x1c0>
  return;
 800f2fa:	bf00      	nop
}
 800f2fc:	371c      	adds	r7, #28
 800f2fe:	46bd      	mov	sp, r7
 800f300:	bd90      	pop	{r4, r7, pc}
 800f302:	bf00      	nop
 800f304:	20010dbc 	.word	0x20010dbc
 800f308:	0801b294 	.word	0x0801b294
 800f30c:	0801b48c 	.word	0x0801b48c
 800f310:	0801b2e0 	.word	0x0801b2e0
 800f314:	20010db4 	.word	0x20010db4
 800f318:	20010dba 	.word	0x20010dba
 800f31c:	20010db0 	.word	0x20010db0
 800f320:	20010da0 	.word	0x20010da0
 800f324:	2000d614 	.word	0x2000d614
 800f328:	2000d618 	.word	0x2000d618
 800f32c:	2000d604 	.word	0x2000d604
 800f330:	20010d84 	.word	0x20010d84
 800f334:	20010d8c 	.word	0x20010d8c

0800f338 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800f338:	b580      	push	{r7, lr}
 800f33a:	b086      	sub	sp, #24
 800f33c:	af04      	add	r7, sp, #16
 800f33e:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800f340:	4b2f      	ldr	r3, [pc, #188]	; (800f400 <tcp_timewait_input+0xc8>)
 800f342:	781b      	ldrb	r3, [r3, #0]
 800f344:	f003 0304 	and.w	r3, r3, #4
 800f348:	2b00      	cmp	r3, #0
 800f34a:	d153      	bne.n	800f3f4 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800f34c:	687b      	ldr	r3, [r7, #4]
 800f34e:	2b00      	cmp	r3, #0
 800f350:	d106      	bne.n	800f360 <tcp_timewait_input+0x28>
 800f352:	4b2c      	ldr	r3, [pc, #176]	; (800f404 <tcp_timewait_input+0xcc>)
 800f354:	f240 22ee 	movw	r2, #750	; 0x2ee
 800f358:	492b      	ldr	r1, [pc, #172]	; (800f408 <tcp_timewait_input+0xd0>)
 800f35a:	482c      	ldr	r0, [pc, #176]	; (800f40c <tcp_timewait_input+0xd4>)
 800f35c:	f009 f832 	bl	80183c4 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800f360:	4b27      	ldr	r3, [pc, #156]	; (800f400 <tcp_timewait_input+0xc8>)
 800f362:	781b      	ldrb	r3, [r3, #0]
 800f364:	f003 0302 	and.w	r3, r3, #2
 800f368:	2b00      	cmp	r3, #0
 800f36a:	d02a      	beq.n	800f3c2 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800f36c:	4b28      	ldr	r3, [pc, #160]	; (800f410 <tcp_timewait_input+0xd8>)
 800f36e:	681a      	ldr	r2, [r3, #0]
 800f370:	687b      	ldr	r3, [r7, #4]
 800f372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f374:	1ad3      	subs	r3, r2, r3
 800f376:	2b00      	cmp	r3, #0
 800f378:	db2d      	blt.n	800f3d6 <tcp_timewait_input+0x9e>
 800f37a:	4b25      	ldr	r3, [pc, #148]	; (800f410 <tcp_timewait_input+0xd8>)
 800f37c:	681a      	ldr	r2, [r3, #0]
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f382:	6879      	ldr	r1, [r7, #4]
 800f384:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f386:	440b      	add	r3, r1
 800f388:	1ad3      	subs	r3, r2, r3
 800f38a:	2b00      	cmp	r3, #0
 800f38c:	dc23      	bgt.n	800f3d6 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f38e:	4b21      	ldr	r3, [pc, #132]	; (800f414 <tcp_timewait_input+0xdc>)
 800f390:	6819      	ldr	r1, [r3, #0]
 800f392:	4b21      	ldr	r3, [pc, #132]	; (800f418 <tcp_timewait_input+0xe0>)
 800f394:	881b      	ldrh	r3, [r3, #0]
 800f396:	461a      	mov	r2, r3
 800f398:	4b1d      	ldr	r3, [pc, #116]	; (800f410 <tcp_timewait_input+0xd8>)
 800f39a:	681b      	ldr	r3, [r3, #0]
 800f39c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f39e:	4b1f      	ldr	r3, [pc, #124]	; (800f41c <tcp_timewait_input+0xe4>)
 800f3a0:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f3a2:	885b      	ldrh	r3, [r3, #2]
 800f3a4:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f3a6:	4a1d      	ldr	r2, [pc, #116]	; (800f41c <tcp_timewait_input+0xe4>)
 800f3a8:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f3aa:	8812      	ldrh	r2, [r2, #0]
 800f3ac:	b292      	uxth	r2, r2
 800f3ae:	9202      	str	r2, [sp, #8]
 800f3b0:	9301      	str	r3, [sp, #4]
 800f3b2:	4b1b      	ldr	r3, [pc, #108]	; (800f420 <tcp_timewait_input+0xe8>)
 800f3b4:	9300      	str	r3, [sp, #0]
 800f3b6:	4b1b      	ldr	r3, [pc, #108]	; (800f424 <tcp_timewait_input+0xec>)
 800f3b8:	4602      	mov	r2, r0
 800f3ba:	6878      	ldr	r0, [r7, #4]
 800f3bc:	f003 faca 	bl	8012954 <tcp_rst>
      return;
 800f3c0:	e01b      	b.n	800f3fa <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800f3c2:	4b0f      	ldr	r3, [pc, #60]	; (800f400 <tcp_timewait_input+0xc8>)
 800f3c4:	781b      	ldrb	r3, [r3, #0]
 800f3c6:	f003 0301 	and.w	r3, r3, #1
 800f3ca:	2b00      	cmp	r3, #0
 800f3cc:	d003      	beq.n	800f3d6 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800f3ce:	4b16      	ldr	r3, [pc, #88]	; (800f428 <tcp_timewait_input+0xf0>)
 800f3d0:	681a      	ldr	r2, [r3, #0]
 800f3d2:	687b      	ldr	r3, [r7, #4]
 800f3d4:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800f3d6:	4b10      	ldr	r3, [pc, #64]	; (800f418 <tcp_timewait_input+0xe0>)
 800f3d8:	881b      	ldrh	r3, [r3, #0]
 800f3da:	2b00      	cmp	r3, #0
 800f3dc:	d00c      	beq.n	800f3f8 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800f3de:	687b      	ldr	r3, [r7, #4]
 800f3e0:	8b5b      	ldrh	r3, [r3, #26]
 800f3e2:	f043 0302 	orr.w	r3, r3, #2
 800f3e6:	b29a      	uxth	r2, r3
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800f3ec:	6878      	ldr	r0, [r7, #4]
 800f3ee:	f002 fcfd 	bl	8011dec <tcp_output>
  }
  return;
 800f3f2:	e001      	b.n	800f3f8 <tcp_timewait_input+0xc0>
    return;
 800f3f4:	bf00      	nop
 800f3f6:	e000      	b.n	800f3fa <tcp_timewait_input+0xc2>
  return;
 800f3f8:	bf00      	nop
}
 800f3fa:	3708      	adds	r7, #8
 800f3fc:	46bd      	mov	sp, r7
 800f3fe:	bd80      	pop	{r7, pc}
 800f400:	20010dbc 	.word	0x20010dbc
 800f404:	0801b294 	.word	0x0801b294
 800f408:	0801b4ac 	.word	0x0801b4ac
 800f40c:	0801b2e0 	.word	0x0801b2e0
 800f410:	20010db0 	.word	0x20010db0
 800f414:	20010db4 	.word	0x20010db4
 800f418:	20010dba 	.word	0x20010dba
 800f41c:	20010da0 	.word	0x20010da0
 800f420:	2000d614 	.word	0x2000d614
 800f424:	2000d618 	.word	0x2000d618
 800f428:	20010d78 	.word	0x20010d78

0800f42c <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800f42c:	b590      	push	{r4, r7, lr}
 800f42e:	b08d      	sub	sp, #52	; 0x34
 800f430:	af04      	add	r7, sp, #16
 800f432:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800f434:	2300      	movs	r3, #0
 800f436:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800f438:	2300      	movs	r3, #0
 800f43a:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800f43c:	687b      	ldr	r3, [r7, #4]
 800f43e:	2b00      	cmp	r3, #0
 800f440:	d106      	bne.n	800f450 <tcp_process+0x24>
 800f442:	4b9d      	ldr	r3, [pc, #628]	; (800f6b8 <tcp_process+0x28c>)
 800f444:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800f448:	499c      	ldr	r1, [pc, #624]	; (800f6bc <tcp_process+0x290>)
 800f44a:	489d      	ldr	r0, [pc, #628]	; (800f6c0 <tcp_process+0x294>)
 800f44c:	f008 ffba 	bl	80183c4 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800f450:	4b9c      	ldr	r3, [pc, #624]	; (800f6c4 <tcp_process+0x298>)
 800f452:	781b      	ldrb	r3, [r3, #0]
 800f454:	f003 0304 	and.w	r3, r3, #4
 800f458:	2b00      	cmp	r3, #0
 800f45a:	d04e      	beq.n	800f4fa <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800f45c:	687b      	ldr	r3, [r7, #4]
 800f45e:	7d1b      	ldrb	r3, [r3, #20]
 800f460:	2b02      	cmp	r3, #2
 800f462:	d108      	bne.n	800f476 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800f464:	687b      	ldr	r3, [r7, #4]
 800f466:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f468:	4b97      	ldr	r3, [pc, #604]	; (800f6c8 <tcp_process+0x29c>)
 800f46a:	681b      	ldr	r3, [r3, #0]
 800f46c:	429a      	cmp	r2, r3
 800f46e:	d123      	bne.n	800f4b8 <tcp_process+0x8c>
        acceptable = 1;
 800f470:	2301      	movs	r3, #1
 800f472:	76fb      	strb	r3, [r7, #27]
 800f474:	e020      	b.n	800f4b8 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800f476:	687b      	ldr	r3, [r7, #4]
 800f478:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f47a:	4b94      	ldr	r3, [pc, #592]	; (800f6cc <tcp_process+0x2a0>)
 800f47c:	681b      	ldr	r3, [r3, #0]
 800f47e:	429a      	cmp	r2, r3
 800f480:	d102      	bne.n	800f488 <tcp_process+0x5c>
        acceptable = 1;
 800f482:	2301      	movs	r3, #1
 800f484:	76fb      	strb	r3, [r7, #27]
 800f486:	e017      	b.n	800f4b8 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800f488:	4b90      	ldr	r3, [pc, #576]	; (800f6cc <tcp_process+0x2a0>)
 800f48a:	681a      	ldr	r2, [r3, #0]
 800f48c:	687b      	ldr	r3, [r7, #4]
 800f48e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f490:	1ad3      	subs	r3, r2, r3
 800f492:	2b00      	cmp	r3, #0
 800f494:	db10      	blt.n	800f4b8 <tcp_process+0x8c>
 800f496:	4b8d      	ldr	r3, [pc, #564]	; (800f6cc <tcp_process+0x2a0>)
 800f498:	681a      	ldr	r2, [r3, #0]
 800f49a:	687b      	ldr	r3, [r7, #4]
 800f49c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f49e:	6879      	ldr	r1, [r7, #4]
 800f4a0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f4a2:	440b      	add	r3, r1
 800f4a4:	1ad3      	subs	r3, r2, r3
 800f4a6:	2b00      	cmp	r3, #0
 800f4a8:	dc06      	bgt.n	800f4b8 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800f4aa:	687b      	ldr	r3, [r7, #4]
 800f4ac:	8b5b      	ldrh	r3, [r3, #26]
 800f4ae:	f043 0302 	orr.w	r3, r3, #2
 800f4b2:	b29a      	uxth	r2, r3
 800f4b4:	687b      	ldr	r3, [r7, #4]
 800f4b6:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800f4b8:	7efb      	ldrb	r3, [r7, #27]
 800f4ba:	2b00      	cmp	r3, #0
 800f4bc:	d01b      	beq.n	800f4f6 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800f4be:	687b      	ldr	r3, [r7, #4]
 800f4c0:	7d1b      	ldrb	r3, [r3, #20]
 800f4c2:	2b00      	cmp	r3, #0
 800f4c4:	d106      	bne.n	800f4d4 <tcp_process+0xa8>
 800f4c6:	4b7c      	ldr	r3, [pc, #496]	; (800f6b8 <tcp_process+0x28c>)
 800f4c8:	f44f 724e 	mov.w	r2, #824	; 0x338
 800f4cc:	4980      	ldr	r1, [pc, #512]	; (800f6d0 <tcp_process+0x2a4>)
 800f4ce:	487c      	ldr	r0, [pc, #496]	; (800f6c0 <tcp_process+0x294>)
 800f4d0:	f008 ff78 	bl	80183c4 <iprintf>
      recv_flags |= TF_RESET;
 800f4d4:	4b7f      	ldr	r3, [pc, #508]	; (800f6d4 <tcp_process+0x2a8>)
 800f4d6:	781b      	ldrb	r3, [r3, #0]
 800f4d8:	f043 0308 	orr.w	r3, r3, #8
 800f4dc:	b2da      	uxtb	r2, r3
 800f4de:	4b7d      	ldr	r3, [pc, #500]	; (800f6d4 <tcp_process+0x2a8>)
 800f4e0:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800f4e2:	687b      	ldr	r3, [r7, #4]
 800f4e4:	8b5b      	ldrh	r3, [r3, #26]
 800f4e6:	f023 0301 	bic.w	r3, r3, #1
 800f4ea:	b29a      	uxth	r2, r3
 800f4ec:	687b      	ldr	r3, [r7, #4]
 800f4ee:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800f4f0:	f06f 030d 	mvn.w	r3, #13
 800f4f4:	e37a      	b.n	800fbec <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800f4f6:	2300      	movs	r3, #0
 800f4f8:	e378      	b.n	800fbec <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800f4fa:	4b72      	ldr	r3, [pc, #456]	; (800f6c4 <tcp_process+0x298>)
 800f4fc:	781b      	ldrb	r3, [r3, #0]
 800f4fe:	f003 0302 	and.w	r3, r3, #2
 800f502:	2b00      	cmp	r3, #0
 800f504:	d010      	beq.n	800f528 <tcp_process+0xfc>
 800f506:	687b      	ldr	r3, [r7, #4]
 800f508:	7d1b      	ldrb	r3, [r3, #20]
 800f50a:	2b02      	cmp	r3, #2
 800f50c:	d00c      	beq.n	800f528 <tcp_process+0xfc>
 800f50e:	687b      	ldr	r3, [r7, #4]
 800f510:	7d1b      	ldrb	r3, [r3, #20]
 800f512:	2b03      	cmp	r3, #3
 800f514:	d008      	beq.n	800f528 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800f516:	687b      	ldr	r3, [r7, #4]
 800f518:	8b5b      	ldrh	r3, [r3, #26]
 800f51a:	f043 0302 	orr.w	r3, r3, #2
 800f51e:	b29a      	uxth	r2, r3
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800f524:	2300      	movs	r3, #0
 800f526:	e361      	b.n	800fbec <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800f528:	687b      	ldr	r3, [r7, #4]
 800f52a:	8b5b      	ldrh	r3, [r3, #26]
 800f52c:	f003 0310 	and.w	r3, r3, #16
 800f530:	2b00      	cmp	r3, #0
 800f532:	d103      	bne.n	800f53c <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800f534:	4b68      	ldr	r3, [pc, #416]	; (800f6d8 <tcp_process+0x2ac>)
 800f536:	681a      	ldr	r2, [r3, #0]
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800f53c:	687b      	ldr	r3, [r7, #4]
 800f53e:	2200      	movs	r2, #0
 800f540:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800f544:	687b      	ldr	r3, [r7, #4]
 800f546:	2200      	movs	r2, #0
 800f548:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800f54c:	6878      	ldr	r0, [r7, #4]
 800f54e:	f001 fc2f 	bl	8010db0 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800f552:	687b      	ldr	r3, [r7, #4]
 800f554:	7d1b      	ldrb	r3, [r3, #20]
 800f556:	3b02      	subs	r3, #2
 800f558:	2b07      	cmp	r3, #7
 800f55a:	f200 8337 	bhi.w	800fbcc <tcp_process+0x7a0>
 800f55e:	a201      	add	r2, pc, #4	; (adr r2, 800f564 <tcp_process+0x138>)
 800f560:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f564:	0800f585 	.word	0x0800f585
 800f568:	0800f7b5 	.word	0x0800f7b5
 800f56c:	0800f92d 	.word	0x0800f92d
 800f570:	0800f957 	.word	0x0800f957
 800f574:	0800fa7b 	.word	0x0800fa7b
 800f578:	0800f92d 	.word	0x0800f92d
 800f57c:	0800fb07 	.word	0x0800fb07
 800f580:	0800fb97 	.word	0x0800fb97
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800f584:	4b4f      	ldr	r3, [pc, #316]	; (800f6c4 <tcp_process+0x298>)
 800f586:	781b      	ldrb	r3, [r3, #0]
 800f588:	f003 0310 	and.w	r3, r3, #16
 800f58c:	2b00      	cmp	r3, #0
 800f58e:	f000 80e4 	beq.w	800f75a <tcp_process+0x32e>
 800f592:	4b4c      	ldr	r3, [pc, #304]	; (800f6c4 <tcp_process+0x298>)
 800f594:	781b      	ldrb	r3, [r3, #0]
 800f596:	f003 0302 	and.w	r3, r3, #2
 800f59a:	2b00      	cmp	r3, #0
 800f59c:	f000 80dd 	beq.w	800f75a <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f5a4:	1c5a      	adds	r2, r3, #1
 800f5a6:	4b48      	ldr	r3, [pc, #288]	; (800f6c8 <tcp_process+0x29c>)
 800f5a8:	681b      	ldr	r3, [r3, #0]
 800f5aa:	429a      	cmp	r2, r3
 800f5ac:	f040 80d5 	bne.w	800f75a <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800f5b0:	4b46      	ldr	r3, [pc, #280]	; (800f6cc <tcp_process+0x2a0>)
 800f5b2:	681b      	ldr	r3, [r3, #0]
 800f5b4:	1c5a      	adds	r2, r3, #1
 800f5b6:	687b      	ldr	r3, [r7, #4]
 800f5b8:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800f5ba:	687b      	ldr	r3, [r7, #4]
 800f5bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f5be:	687b      	ldr	r3, [r7, #4]
 800f5c0:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800f5c2:	4b41      	ldr	r3, [pc, #260]	; (800f6c8 <tcp_process+0x29c>)
 800f5c4:	681a      	ldr	r2, [r3, #0]
 800f5c6:	687b      	ldr	r3, [r7, #4]
 800f5c8:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800f5ca:	4b44      	ldr	r3, [pc, #272]	; (800f6dc <tcp_process+0x2b0>)
 800f5cc:	681b      	ldr	r3, [r3, #0]
 800f5ce:	89db      	ldrh	r3, [r3, #14]
 800f5d0:	b29a      	uxth	r2, r3
 800f5d2:	687b      	ldr	r3, [r7, #4]
 800f5d4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800f5de:	687b      	ldr	r3, [r7, #4]
 800f5e0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800f5e4:	4b39      	ldr	r3, [pc, #228]	; (800f6cc <tcp_process+0x2a0>)
 800f5e6:	681b      	ldr	r3, [r3, #0]
 800f5e8:	1e5a      	subs	r2, r3, #1
 800f5ea:	687b      	ldr	r3, [r7, #4]
 800f5ec:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800f5ee:	687b      	ldr	r3, [r7, #4]
 800f5f0:	2204      	movs	r2, #4
 800f5f2:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800f5f4:	687b      	ldr	r3, [r7, #4]
 800f5f6:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800f5f8:	687b      	ldr	r3, [r7, #4]
 800f5fa:	3304      	adds	r3, #4
 800f5fc:	4618      	mov	r0, r3
 800f5fe:	f007 f91d 	bl	801683c <ip4_route>
 800f602:	4601      	mov	r1, r0
 800f604:	687b      	ldr	r3, [r7, #4]
 800f606:	3304      	adds	r3, #4
 800f608:	461a      	mov	r2, r3
 800f60a:	4620      	mov	r0, r4
 800f60c:	f7ff f88c 	bl	800e728 <tcp_eff_send_mss_netif>
 800f610:	4603      	mov	r3, r0
 800f612:	461a      	mov	r2, r3
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800f618:	687b      	ldr	r3, [r7, #4]
 800f61a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f61c:	009a      	lsls	r2, r3, #2
 800f61e:	687b      	ldr	r3, [r7, #4]
 800f620:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f622:	005b      	lsls	r3, r3, #1
 800f624:	f241 111c 	movw	r1, #4380	; 0x111c
 800f628:	428b      	cmp	r3, r1
 800f62a:	bf38      	it	cc
 800f62c:	460b      	movcc	r3, r1
 800f62e:	429a      	cmp	r2, r3
 800f630:	d204      	bcs.n	800f63c <tcp_process+0x210>
 800f632:	687b      	ldr	r3, [r7, #4]
 800f634:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f636:	009b      	lsls	r3, r3, #2
 800f638:	b29b      	uxth	r3, r3
 800f63a:	e00d      	b.n	800f658 <tcp_process+0x22c>
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f640:	005b      	lsls	r3, r3, #1
 800f642:	f241 121c 	movw	r2, #4380	; 0x111c
 800f646:	4293      	cmp	r3, r2
 800f648:	d904      	bls.n	800f654 <tcp_process+0x228>
 800f64a:	687b      	ldr	r3, [r7, #4]
 800f64c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f64e:	005b      	lsls	r3, r3, #1
 800f650:	b29b      	uxth	r3, r3
 800f652:	e001      	b.n	800f658 <tcp_process+0x22c>
 800f654:	f241 131c 	movw	r3, #4380	; 0x111c
 800f658:	687a      	ldr	r2, [r7, #4]
 800f65a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800f65e:	687b      	ldr	r3, [r7, #4]
 800f660:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f664:	2b00      	cmp	r3, #0
 800f666:	d106      	bne.n	800f676 <tcp_process+0x24a>
 800f668:	4b13      	ldr	r3, [pc, #76]	; (800f6b8 <tcp_process+0x28c>)
 800f66a:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800f66e:	491c      	ldr	r1, [pc, #112]	; (800f6e0 <tcp_process+0x2b4>)
 800f670:	4813      	ldr	r0, [pc, #76]	; (800f6c0 <tcp_process+0x294>)
 800f672:	f008 fea7 	bl	80183c4 <iprintf>
        --pcb->snd_queuelen;
 800f676:	687b      	ldr	r3, [r7, #4]
 800f678:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f67c:	3b01      	subs	r3, #1
 800f67e:	b29a      	uxth	r2, r3
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800f686:	687b      	ldr	r3, [r7, #4]
 800f688:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f68a:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800f68c:	69fb      	ldr	r3, [r7, #28]
 800f68e:	2b00      	cmp	r3, #0
 800f690:	d12a      	bne.n	800f6e8 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800f692:	687b      	ldr	r3, [r7, #4]
 800f694:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f696:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800f698:	69fb      	ldr	r3, [r7, #28]
 800f69a:	2b00      	cmp	r3, #0
 800f69c:	d106      	bne.n	800f6ac <tcp_process+0x280>
 800f69e:	4b06      	ldr	r3, [pc, #24]	; (800f6b8 <tcp_process+0x28c>)
 800f6a0:	f44f 725d 	mov.w	r2, #884	; 0x374
 800f6a4:	490f      	ldr	r1, [pc, #60]	; (800f6e4 <tcp_process+0x2b8>)
 800f6a6:	4806      	ldr	r0, [pc, #24]	; (800f6c0 <tcp_process+0x294>)
 800f6a8:	f008 fe8c 	bl	80183c4 <iprintf>
          pcb->unsent = rseg->next;
 800f6ac:	69fb      	ldr	r3, [r7, #28]
 800f6ae:	681a      	ldr	r2, [r3, #0]
 800f6b0:	687b      	ldr	r3, [r7, #4]
 800f6b2:	66da      	str	r2, [r3, #108]	; 0x6c
 800f6b4:	e01c      	b.n	800f6f0 <tcp_process+0x2c4>
 800f6b6:	bf00      	nop
 800f6b8:	0801b294 	.word	0x0801b294
 800f6bc:	0801b4cc 	.word	0x0801b4cc
 800f6c0:	0801b2e0 	.word	0x0801b2e0
 800f6c4:	20010dbc 	.word	0x20010dbc
 800f6c8:	20010db4 	.word	0x20010db4
 800f6cc:	20010db0 	.word	0x20010db0
 800f6d0:	0801b4e8 	.word	0x0801b4e8
 800f6d4:	20010dbd 	.word	0x20010dbd
 800f6d8:	20010d78 	.word	0x20010d78
 800f6dc:	20010da0 	.word	0x20010da0
 800f6e0:	0801b508 	.word	0x0801b508
 800f6e4:	0801b520 	.word	0x0801b520
        } else {
          pcb->unacked = rseg->next;
 800f6e8:	69fb      	ldr	r3, [r7, #28]
 800f6ea:	681a      	ldr	r2, [r3, #0]
 800f6ec:	687b      	ldr	r3, [r7, #4]
 800f6ee:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800f6f0:	69f8      	ldr	r0, [r7, #28]
 800f6f2:	f7fe fc36 	bl	800df62 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f6fa:	2b00      	cmp	r3, #0
 800f6fc:	d104      	bne.n	800f708 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800f6fe:	687b      	ldr	r3, [r7, #4]
 800f700:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f704:	861a      	strh	r2, [r3, #48]	; 0x30
 800f706:	e006      	b.n	800f716 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 800f708:	687b      	ldr	r3, [r7, #4]
 800f70a:	2200      	movs	r2, #0
 800f70c:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800f70e:	687b      	ldr	r3, [r7, #4]
 800f710:	2200      	movs	r2, #0
 800f712:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800f716:	687b      	ldr	r3, [r7, #4]
 800f718:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f71c:	2b00      	cmp	r3, #0
 800f71e:	d00a      	beq.n	800f736 <tcp_process+0x30a>
 800f720:	687b      	ldr	r3, [r7, #4]
 800f722:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f726:	687a      	ldr	r2, [r7, #4]
 800f728:	6910      	ldr	r0, [r2, #16]
 800f72a:	2200      	movs	r2, #0
 800f72c:	6879      	ldr	r1, [r7, #4]
 800f72e:	4798      	blx	r3
 800f730:	4603      	mov	r3, r0
 800f732:	76bb      	strb	r3, [r7, #26]
 800f734:	e001      	b.n	800f73a <tcp_process+0x30e>
 800f736:	2300      	movs	r3, #0
 800f738:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800f73a:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800f73e:	f113 0f0d 	cmn.w	r3, #13
 800f742:	d102      	bne.n	800f74a <tcp_process+0x31e>
          return ERR_ABRT;
 800f744:	f06f 030c 	mvn.w	r3, #12
 800f748:	e250      	b.n	800fbec <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	8b5b      	ldrh	r3, [r3, #26]
 800f74e:	f043 0302 	orr.w	r3, r3, #2
 800f752:	b29a      	uxth	r2, r3
 800f754:	687b      	ldr	r3, [r7, #4]
 800f756:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800f758:	e23a      	b.n	800fbd0 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800f75a:	4b98      	ldr	r3, [pc, #608]	; (800f9bc <tcp_process+0x590>)
 800f75c:	781b      	ldrb	r3, [r3, #0]
 800f75e:	f003 0310 	and.w	r3, r3, #16
 800f762:	2b00      	cmp	r3, #0
 800f764:	f000 8234 	beq.w	800fbd0 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f768:	4b95      	ldr	r3, [pc, #596]	; (800f9c0 <tcp_process+0x594>)
 800f76a:	6819      	ldr	r1, [r3, #0]
 800f76c:	4b95      	ldr	r3, [pc, #596]	; (800f9c4 <tcp_process+0x598>)
 800f76e:	881b      	ldrh	r3, [r3, #0]
 800f770:	461a      	mov	r2, r3
 800f772:	4b95      	ldr	r3, [pc, #596]	; (800f9c8 <tcp_process+0x59c>)
 800f774:	681b      	ldr	r3, [r3, #0]
 800f776:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f778:	4b94      	ldr	r3, [pc, #592]	; (800f9cc <tcp_process+0x5a0>)
 800f77a:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f77c:	885b      	ldrh	r3, [r3, #2]
 800f77e:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f780:	4a92      	ldr	r2, [pc, #584]	; (800f9cc <tcp_process+0x5a0>)
 800f782:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f784:	8812      	ldrh	r2, [r2, #0]
 800f786:	b292      	uxth	r2, r2
 800f788:	9202      	str	r2, [sp, #8]
 800f78a:	9301      	str	r3, [sp, #4]
 800f78c:	4b90      	ldr	r3, [pc, #576]	; (800f9d0 <tcp_process+0x5a4>)
 800f78e:	9300      	str	r3, [sp, #0]
 800f790:	4b90      	ldr	r3, [pc, #576]	; (800f9d4 <tcp_process+0x5a8>)
 800f792:	4602      	mov	r2, r0
 800f794:	6878      	ldr	r0, [r7, #4]
 800f796:	f003 f8dd 	bl	8012954 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800f79a:	687b      	ldr	r3, [r7, #4]
 800f79c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f7a0:	2b05      	cmp	r3, #5
 800f7a2:	f200 8215 	bhi.w	800fbd0 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800f7a6:	687b      	ldr	r3, [r7, #4]
 800f7a8:	2200      	movs	r2, #0
 800f7aa:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800f7ac:	6878      	ldr	r0, [r7, #4]
 800f7ae:	f002 fea7 	bl	8012500 <tcp_rexmit_rto>
      break;
 800f7b2:	e20d      	b.n	800fbd0 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800f7b4:	4b81      	ldr	r3, [pc, #516]	; (800f9bc <tcp_process+0x590>)
 800f7b6:	781b      	ldrb	r3, [r3, #0]
 800f7b8:	f003 0310 	and.w	r3, r3, #16
 800f7bc:	2b00      	cmp	r3, #0
 800f7be:	f000 80a1 	beq.w	800f904 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f7c2:	4b7f      	ldr	r3, [pc, #508]	; (800f9c0 <tcp_process+0x594>)
 800f7c4:	681a      	ldr	r2, [r3, #0]
 800f7c6:	687b      	ldr	r3, [r7, #4]
 800f7c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f7ca:	1ad3      	subs	r3, r2, r3
 800f7cc:	3b01      	subs	r3, #1
 800f7ce:	2b00      	cmp	r3, #0
 800f7d0:	db7e      	blt.n	800f8d0 <tcp_process+0x4a4>
 800f7d2:	4b7b      	ldr	r3, [pc, #492]	; (800f9c0 <tcp_process+0x594>)
 800f7d4:	681a      	ldr	r2, [r3, #0]
 800f7d6:	687b      	ldr	r3, [r7, #4]
 800f7d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f7da:	1ad3      	subs	r3, r2, r3
 800f7dc:	2b00      	cmp	r3, #0
 800f7de:	dc77      	bgt.n	800f8d0 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800f7e0:	687b      	ldr	r3, [r7, #4]
 800f7e2:	2204      	movs	r2, #4
 800f7e4:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800f7e6:	687b      	ldr	r3, [r7, #4]
 800f7e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f7ea:	2b00      	cmp	r3, #0
 800f7ec:	d102      	bne.n	800f7f4 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800f7ee:	23fa      	movs	r3, #250	; 0xfa
 800f7f0:	76bb      	strb	r3, [r7, #26]
 800f7f2:	e01d      	b.n	800f830 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800f7f4:	687b      	ldr	r3, [r7, #4]
 800f7f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f7f8:	699b      	ldr	r3, [r3, #24]
 800f7fa:	2b00      	cmp	r3, #0
 800f7fc:	d106      	bne.n	800f80c <tcp_process+0x3e0>
 800f7fe:	4b76      	ldr	r3, [pc, #472]	; (800f9d8 <tcp_process+0x5ac>)
 800f800:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800f804:	4975      	ldr	r1, [pc, #468]	; (800f9dc <tcp_process+0x5b0>)
 800f806:	4876      	ldr	r0, [pc, #472]	; (800f9e0 <tcp_process+0x5b4>)
 800f808:	f008 fddc 	bl	80183c4 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800f80c:	687b      	ldr	r3, [r7, #4]
 800f80e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f810:	699b      	ldr	r3, [r3, #24]
 800f812:	2b00      	cmp	r3, #0
 800f814:	d00a      	beq.n	800f82c <tcp_process+0x400>
 800f816:	687b      	ldr	r3, [r7, #4]
 800f818:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f81a:	699b      	ldr	r3, [r3, #24]
 800f81c:	687a      	ldr	r2, [r7, #4]
 800f81e:	6910      	ldr	r0, [r2, #16]
 800f820:	2200      	movs	r2, #0
 800f822:	6879      	ldr	r1, [r7, #4]
 800f824:	4798      	blx	r3
 800f826:	4603      	mov	r3, r0
 800f828:	76bb      	strb	r3, [r7, #26]
 800f82a:	e001      	b.n	800f830 <tcp_process+0x404>
 800f82c:	23f0      	movs	r3, #240	; 0xf0
 800f82e:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800f830:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800f834:	2b00      	cmp	r3, #0
 800f836:	d00a      	beq.n	800f84e <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800f838:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800f83c:	f113 0f0d 	cmn.w	r3, #13
 800f840:	d002      	beq.n	800f848 <tcp_process+0x41c>
              tcp_abort(pcb);
 800f842:	6878      	ldr	r0, [r7, #4]
 800f844:	f7fd fce8 	bl	800d218 <tcp_abort>
            }
            return ERR_ABRT;
 800f848:	f06f 030c 	mvn.w	r3, #12
 800f84c:	e1ce      	b.n	800fbec <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800f84e:	6878      	ldr	r0, [r7, #4]
 800f850:	f000 fae0 	bl	800fe14 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800f854:	4b63      	ldr	r3, [pc, #396]	; (800f9e4 <tcp_process+0x5b8>)
 800f856:	881b      	ldrh	r3, [r3, #0]
 800f858:	2b00      	cmp	r3, #0
 800f85a:	d005      	beq.n	800f868 <tcp_process+0x43c>
            recv_acked--;
 800f85c:	4b61      	ldr	r3, [pc, #388]	; (800f9e4 <tcp_process+0x5b8>)
 800f85e:	881b      	ldrh	r3, [r3, #0]
 800f860:	3b01      	subs	r3, #1
 800f862:	b29a      	uxth	r2, r3
 800f864:	4b5f      	ldr	r3, [pc, #380]	; (800f9e4 <tcp_process+0x5b8>)
 800f866:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800f868:	687b      	ldr	r3, [r7, #4]
 800f86a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f86c:	009a      	lsls	r2, r3, #2
 800f86e:	687b      	ldr	r3, [r7, #4]
 800f870:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f872:	005b      	lsls	r3, r3, #1
 800f874:	f241 111c 	movw	r1, #4380	; 0x111c
 800f878:	428b      	cmp	r3, r1
 800f87a:	bf38      	it	cc
 800f87c:	460b      	movcc	r3, r1
 800f87e:	429a      	cmp	r2, r3
 800f880:	d204      	bcs.n	800f88c <tcp_process+0x460>
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f886:	009b      	lsls	r3, r3, #2
 800f888:	b29b      	uxth	r3, r3
 800f88a:	e00d      	b.n	800f8a8 <tcp_process+0x47c>
 800f88c:	687b      	ldr	r3, [r7, #4]
 800f88e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f890:	005b      	lsls	r3, r3, #1
 800f892:	f241 121c 	movw	r2, #4380	; 0x111c
 800f896:	4293      	cmp	r3, r2
 800f898:	d904      	bls.n	800f8a4 <tcp_process+0x478>
 800f89a:	687b      	ldr	r3, [r7, #4]
 800f89c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f89e:	005b      	lsls	r3, r3, #1
 800f8a0:	b29b      	uxth	r3, r3
 800f8a2:	e001      	b.n	800f8a8 <tcp_process+0x47c>
 800f8a4:	f241 131c 	movw	r3, #4380	; 0x111c
 800f8a8:	687a      	ldr	r2, [r7, #4]
 800f8aa:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800f8ae:	4b4e      	ldr	r3, [pc, #312]	; (800f9e8 <tcp_process+0x5bc>)
 800f8b0:	781b      	ldrb	r3, [r3, #0]
 800f8b2:	f003 0320 	and.w	r3, r3, #32
 800f8b6:	2b00      	cmp	r3, #0
 800f8b8:	d037      	beq.n	800f92a <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800f8ba:	687b      	ldr	r3, [r7, #4]
 800f8bc:	8b5b      	ldrh	r3, [r3, #26]
 800f8be:	f043 0302 	orr.w	r3, r3, #2
 800f8c2:	b29a      	uxth	r2, r3
 800f8c4:	687b      	ldr	r3, [r7, #4]
 800f8c6:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800f8c8:	687b      	ldr	r3, [r7, #4]
 800f8ca:	2207      	movs	r2, #7
 800f8cc:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800f8ce:	e02c      	b.n	800f92a <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f8d0:	4b3b      	ldr	r3, [pc, #236]	; (800f9c0 <tcp_process+0x594>)
 800f8d2:	6819      	ldr	r1, [r3, #0]
 800f8d4:	4b3b      	ldr	r3, [pc, #236]	; (800f9c4 <tcp_process+0x598>)
 800f8d6:	881b      	ldrh	r3, [r3, #0]
 800f8d8:	461a      	mov	r2, r3
 800f8da:	4b3b      	ldr	r3, [pc, #236]	; (800f9c8 <tcp_process+0x59c>)
 800f8dc:	681b      	ldr	r3, [r3, #0]
 800f8de:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f8e0:	4b3a      	ldr	r3, [pc, #232]	; (800f9cc <tcp_process+0x5a0>)
 800f8e2:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f8e4:	885b      	ldrh	r3, [r3, #2]
 800f8e6:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f8e8:	4a38      	ldr	r2, [pc, #224]	; (800f9cc <tcp_process+0x5a0>)
 800f8ea:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f8ec:	8812      	ldrh	r2, [r2, #0]
 800f8ee:	b292      	uxth	r2, r2
 800f8f0:	9202      	str	r2, [sp, #8]
 800f8f2:	9301      	str	r3, [sp, #4]
 800f8f4:	4b36      	ldr	r3, [pc, #216]	; (800f9d0 <tcp_process+0x5a4>)
 800f8f6:	9300      	str	r3, [sp, #0]
 800f8f8:	4b36      	ldr	r3, [pc, #216]	; (800f9d4 <tcp_process+0x5a8>)
 800f8fa:	4602      	mov	r2, r0
 800f8fc:	6878      	ldr	r0, [r7, #4]
 800f8fe:	f003 f829 	bl	8012954 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800f902:	e167      	b.n	800fbd4 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800f904:	4b2d      	ldr	r3, [pc, #180]	; (800f9bc <tcp_process+0x590>)
 800f906:	781b      	ldrb	r3, [r3, #0]
 800f908:	f003 0302 	and.w	r3, r3, #2
 800f90c:	2b00      	cmp	r3, #0
 800f90e:	f000 8161 	beq.w	800fbd4 <tcp_process+0x7a8>
 800f912:	687b      	ldr	r3, [r7, #4]
 800f914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f916:	1e5a      	subs	r2, r3, #1
 800f918:	4b2b      	ldr	r3, [pc, #172]	; (800f9c8 <tcp_process+0x59c>)
 800f91a:	681b      	ldr	r3, [r3, #0]
 800f91c:	429a      	cmp	r2, r3
 800f91e:	f040 8159 	bne.w	800fbd4 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800f922:	6878      	ldr	r0, [r7, #4]
 800f924:	f002 fe0e 	bl	8012544 <tcp_rexmit>
      break;
 800f928:	e154      	b.n	800fbd4 <tcp_process+0x7a8>
 800f92a:	e153      	b.n	800fbd4 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800f92c:	6878      	ldr	r0, [r7, #4]
 800f92e:	f000 fa71 	bl	800fe14 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800f932:	4b2d      	ldr	r3, [pc, #180]	; (800f9e8 <tcp_process+0x5bc>)
 800f934:	781b      	ldrb	r3, [r3, #0]
 800f936:	f003 0320 	and.w	r3, r3, #32
 800f93a:	2b00      	cmp	r3, #0
 800f93c:	f000 814c 	beq.w	800fbd8 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800f940:	687b      	ldr	r3, [r7, #4]
 800f942:	8b5b      	ldrh	r3, [r3, #26]
 800f944:	f043 0302 	orr.w	r3, r3, #2
 800f948:	b29a      	uxth	r2, r3
 800f94a:	687b      	ldr	r3, [r7, #4]
 800f94c:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800f94e:	687b      	ldr	r3, [r7, #4]
 800f950:	2207      	movs	r2, #7
 800f952:	751a      	strb	r2, [r3, #20]
      }
      break;
 800f954:	e140      	b.n	800fbd8 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800f956:	6878      	ldr	r0, [r7, #4]
 800f958:	f000 fa5c 	bl	800fe14 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800f95c:	4b22      	ldr	r3, [pc, #136]	; (800f9e8 <tcp_process+0x5bc>)
 800f95e:	781b      	ldrb	r3, [r3, #0]
 800f960:	f003 0320 	and.w	r3, r3, #32
 800f964:	2b00      	cmp	r3, #0
 800f966:	d071      	beq.n	800fa4c <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800f968:	4b14      	ldr	r3, [pc, #80]	; (800f9bc <tcp_process+0x590>)
 800f96a:	781b      	ldrb	r3, [r3, #0]
 800f96c:	f003 0310 	and.w	r3, r3, #16
 800f970:	2b00      	cmp	r3, #0
 800f972:	d060      	beq.n	800fa36 <tcp_process+0x60a>
 800f974:	687b      	ldr	r3, [r7, #4]
 800f976:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f978:	4b11      	ldr	r3, [pc, #68]	; (800f9c0 <tcp_process+0x594>)
 800f97a:	681b      	ldr	r3, [r3, #0]
 800f97c:	429a      	cmp	r2, r3
 800f97e:	d15a      	bne.n	800fa36 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800f984:	2b00      	cmp	r3, #0
 800f986:	d156      	bne.n	800fa36 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800f988:	687b      	ldr	r3, [r7, #4]
 800f98a:	8b5b      	ldrh	r3, [r3, #26]
 800f98c:	f043 0302 	orr.w	r3, r3, #2
 800f990:	b29a      	uxth	r2, r3
 800f992:	687b      	ldr	r3, [r7, #4]
 800f994:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800f996:	6878      	ldr	r0, [r7, #4]
 800f998:	f7fe fdbc 	bl	800e514 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800f99c:	4b13      	ldr	r3, [pc, #76]	; (800f9ec <tcp_process+0x5c0>)
 800f99e:	681b      	ldr	r3, [r3, #0]
 800f9a0:	687a      	ldr	r2, [r7, #4]
 800f9a2:	429a      	cmp	r2, r3
 800f9a4:	d105      	bne.n	800f9b2 <tcp_process+0x586>
 800f9a6:	4b11      	ldr	r3, [pc, #68]	; (800f9ec <tcp_process+0x5c0>)
 800f9a8:	681b      	ldr	r3, [r3, #0]
 800f9aa:	68db      	ldr	r3, [r3, #12]
 800f9ac:	4a0f      	ldr	r2, [pc, #60]	; (800f9ec <tcp_process+0x5c0>)
 800f9ae:	6013      	str	r3, [r2, #0]
 800f9b0:	e02e      	b.n	800fa10 <tcp_process+0x5e4>
 800f9b2:	4b0e      	ldr	r3, [pc, #56]	; (800f9ec <tcp_process+0x5c0>)
 800f9b4:	681b      	ldr	r3, [r3, #0]
 800f9b6:	617b      	str	r3, [r7, #20]
 800f9b8:	e027      	b.n	800fa0a <tcp_process+0x5de>
 800f9ba:	bf00      	nop
 800f9bc:	20010dbc 	.word	0x20010dbc
 800f9c0:	20010db4 	.word	0x20010db4
 800f9c4:	20010dba 	.word	0x20010dba
 800f9c8:	20010db0 	.word	0x20010db0
 800f9cc:	20010da0 	.word	0x20010da0
 800f9d0:	2000d614 	.word	0x2000d614
 800f9d4:	2000d618 	.word	0x2000d618
 800f9d8:	0801b294 	.word	0x0801b294
 800f9dc:	0801b534 	.word	0x0801b534
 800f9e0:	0801b2e0 	.word	0x0801b2e0
 800f9e4:	20010db8 	.word	0x20010db8
 800f9e8:	20010dbd 	.word	0x20010dbd
 800f9ec:	20010d84 	.word	0x20010d84
 800f9f0:	697b      	ldr	r3, [r7, #20]
 800f9f2:	68db      	ldr	r3, [r3, #12]
 800f9f4:	687a      	ldr	r2, [r7, #4]
 800f9f6:	429a      	cmp	r2, r3
 800f9f8:	d104      	bne.n	800fa04 <tcp_process+0x5d8>
 800f9fa:	687b      	ldr	r3, [r7, #4]
 800f9fc:	68da      	ldr	r2, [r3, #12]
 800f9fe:	697b      	ldr	r3, [r7, #20]
 800fa00:	60da      	str	r2, [r3, #12]
 800fa02:	e005      	b.n	800fa10 <tcp_process+0x5e4>
 800fa04:	697b      	ldr	r3, [r7, #20]
 800fa06:	68db      	ldr	r3, [r3, #12]
 800fa08:	617b      	str	r3, [r7, #20]
 800fa0a:	697b      	ldr	r3, [r7, #20]
 800fa0c:	2b00      	cmp	r3, #0
 800fa0e:	d1ef      	bne.n	800f9f0 <tcp_process+0x5c4>
 800fa10:	687b      	ldr	r3, [r7, #4]
 800fa12:	2200      	movs	r2, #0
 800fa14:	60da      	str	r2, [r3, #12]
 800fa16:	4b77      	ldr	r3, [pc, #476]	; (800fbf4 <tcp_process+0x7c8>)
 800fa18:	2201      	movs	r2, #1
 800fa1a:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800fa1c:	687b      	ldr	r3, [r7, #4]
 800fa1e:	220a      	movs	r2, #10
 800fa20:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800fa22:	4b75      	ldr	r3, [pc, #468]	; (800fbf8 <tcp_process+0x7cc>)
 800fa24:	681a      	ldr	r2, [r3, #0]
 800fa26:	687b      	ldr	r3, [r7, #4]
 800fa28:	60da      	str	r2, [r3, #12]
 800fa2a:	4a73      	ldr	r2, [pc, #460]	; (800fbf8 <tcp_process+0x7cc>)
 800fa2c:	687b      	ldr	r3, [r7, #4]
 800fa2e:	6013      	str	r3, [r2, #0]
 800fa30:	f003 f952 	bl	8012cd8 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800fa34:	e0d2      	b.n	800fbdc <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800fa36:	687b      	ldr	r3, [r7, #4]
 800fa38:	8b5b      	ldrh	r3, [r3, #26]
 800fa3a:	f043 0302 	orr.w	r3, r3, #2
 800fa3e:	b29a      	uxth	r2, r3
 800fa40:	687b      	ldr	r3, [r7, #4]
 800fa42:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800fa44:	687b      	ldr	r3, [r7, #4]
 800fa46:	2208      	movs	r2, #8
 800fa48:	751a      	strb	r2, [r3, #20]
      break;
 800fa4a:	e0c7      	b.n	800fbdc <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800fa4c:	4b6b      	ldr	r3, [pc, #428]	; (800fbfc <tcp_process+0x7d0>)
 800fa4e:	781b      	ldrb	r3, [r3, #0]
 800fa50:	f003 0310 	and.w	r3, r3, #16
 800fa54:	2b00      	cmp	r3, #0
 800fa56:	f000 80c1 	beq.w	800fbdc <tcp_process+0x7b0>
 800fa5a:	687b      	ldr	r3, [r7, #4]
 800fa5c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800fa5e:	4b68      	ldr	r3, [pc, #416]	; (800fc00 <tcp_process+0x7d4>)
 800fa60:	681b      	ldr	r3, [r3, #0]
 800fa62:	429a      	cmp	r2, r3
 800fa64:	f040 80ba 	bne.w	800fbdc <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800fa68:	687b      	ldr	r3, [r7, #4]
 800fa6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800fa6c:	2b00      	cmp	r3, #0
 800fa6e:	f040 80b5 	bne.w	800fbdc <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800fa72:	687b      	ldr	r3, [r7, #4]
 800fa74:	2206      	movs	r2, #6
 800fa76:	751a      	strb	r2, [r3, #20]
      break;
 800fa78:	e0b0      	b.n	800fbdc <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800fa7a:	6878      	ldr	r0, [r7, #4]
 800fa7c:	f000 f9ca 	bl	800fe14 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800fa80:	4b60      	ldr	r3, [pc, #384]	; (800fc04 <tcp_process+0x7d8>)
 800fa82:	781b      	ldrb	r3, [r3, #0]
 800fa84:	f003 0320 	and.w	r3, r3, #32
 800fa88:	2b00      	cmp	r3, #0
 800fa8a:	f000 80a9 	beq.w	800fbe0 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800fa8e:	687b      	ldr	r3, [r7, #4]
 800fa90:	8b5b      	ldrh	r3, [r3, #26]
 800fa92:	f043 0302 	orr.w	r3, r3, #2
 800fa96:	b29a      	uxth	r2, r3
 800fa98:	687b      	ldr	r3, [r7, #4]
 800fa9a:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800fa9c:	6878      	ldr	r0, [r7, #4]
 800fa9e:	f7fe fd39 	bl	800e514 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800faa2:	4b59      	ldr	r3, [pc, #356]	; (800fc08 <tcp_process+0x7dc>)
 800faa4:	681b      	ldr	r3, [r3, #0]
 800faa6:	687a      	ldr	r2, [r7, #4]
 800faa8:	429a      	cmp	r2, r3
 800faaa:	d105      	bne.n	800fab8 <tcp_process+0x68c>
 800faac:	4b56      	ldr	r3, [pc, #344]	; (800fc08 <tcp_process+0x7dc>)
 800faae:	681b      	ldr	r3, [r3, #0]
 800fab0:	68db      	ldr	r3, [r3, #12]
 800fab2:	4a55      	ldr	r2, [pc, #340]	; (800fc08 <tcp_process+0x7dc>)
 800fab4:	6013      	str	r3, [r2, #0]
 800fab6:	e013      	b.n	800fae0 <tcp_process+0x6b4>
 800fab8:	4b53      	ldr	r3, [pc, #332]	; (800fc08 <tcp_process+0x7dc>)
 800faba:	681b      	ldr	r3, [r3, #0]
 800fabc:	613b      	str	r3, [r7, #16]
 800fabe:	e00c      	b.n	800fada <tcp_process+0x6ae>
 800fac0:	693b      	ldr	r3, [r7, #16]
 800fac2:	68db      	ldr	r3, [r3, #12]
 800fac4:	687a      	ldr	r2, [r7, #4]
 800fac6:	429a      	cmp	r2, r3
 800fac8:	d104      	bne.n	800fad4 <tcp_process+0x6a8>
 800faca:	687b      	ldr	r3, [r7, #4]
 800facc:	68da      	ldr	r2, [r3, #12]
 800face:	693b      	ldr	r3, [r7, #16]
 800fad0:	60da      	str	r2, [r3, #12]
 800fad2:	e005      	b.n	800fae0 <tcp_process+0x6b4>
 800fad4:	693b      	ldr	r3, [r7, #16]
 800fad6:	68db      	ldr	r3, [r3, #12]
 800fad8:	613b      	str	r3, [r7, #16]
 800fada:	693b      	ldr	r3, [r7, #16]
 800fadc:	2b00      	cmp	r3, #0
 800fade:	d1ef      	bne.n	800fac0 <tcp_process+0x694>
 800fae0:	687b      	ldr	r3, [r7, #4]
 800fae2:	2200      	movs	r2, #0
 800fae4:	60da      	str	r2, [r3, #12]
 800fae6:	4b43      	ldr	r3, [pc, #268]	; (800fbf4 <tcp_process+0x7c8>)
 800fae8:	2201      	movs	r2, #1
 800faea:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800faec:	687b      	ldr	r3, [r7, #4]
 800faee:	220a      	movs	r2, #10
 800faf0:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800faf2:	4b41      	ldr	r3, [pc, #260]	; (800fbf8 <tcp_process+0x7cc>)
 800faf4:	681a      	ldr	r2, [r3, #0]
 800faf6:	687b      	ldr	r3, [r7, #4]
 800faf8:	60da      	str	r2, [r3, #12]
 800fafa:	4a3f      	ldr	r2, [pc, #252]	; (800fbf8 <tcp_process+0x7cc>)
 800fafc:	687b      	ldr	r3, [r7, #4]
 800fafe:	6013      	str	r3, [r2, #0]
 800fb00:	f003 f8ea 	bl	8012cd8 <tcp_timer_needed>
      }
      break;
 800fb04:	e06c      	b.n	800fbe0 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800fb06:	6878      	ldr	r0, [r7, #4]
 800fb08:	f000 f984 	bl	800fe14 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800fb0c:	4b3b      	ldr	r3, [pc, #236]	; (800fbfc <tcp_process+0x7d0>)
 800fb0e:	781b      	ldrb	r3, [r3, #0]
 800fb10:	f003 0310 	and.w	r3, r3, #16
 800fb14:	2b00      	cmp	r3, #0
 800fb16:	d065      	beq.n	800fbe4 <tcp_process+0x7b8>
 800fb18:	687b      	ldr	r3, [r7, #4]
 800fb1a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800fb1c:	4b38      	ldr	r3, [pc, #224]	; (800fc00 <tcp_process+0x7d4>)
 800fb1e:	681b      	ldr	r3, [r3, #0]
 800fb20:	429a      	cmp	r2, r3
 800fb22:	d15f      	bne.n	800fbe4 <tcp_process+0x7b8>
 800fb24:	687b      	ldr	r3, [r7, #4]
 800fb26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fb28:	2b00      	cmp	r3, #0
 800fb2a:	d15b      	bne.n	800fbe4 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800fb2c:	6878      	ldr	r0, [r7, #4]
 800fb2e:	f7fe fcf1 	bl	800e514 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800fb32:	4b35      	ldr	r3, [pc, #212]	; (800fc08 <tcp_process+0x7dc>)
 800fb34:	681b      	ldr	r3, [r3, #0]
 800fb36:	687a      	ldr	r2, [r7, #4]
 800fb38:	429a      	cmp	r2, r3
 800fb3a:	d105      	bne.n	800fb48 <tcp_process+0x71c>
 800fb3c:	4b32      	ldr	r3, [pc, #200]	; (800fc08 <tcp_process+0x7dc>)
 800fb3e:	681b      	ldr	r3, [r3, #0]
 800fb40:	68db      	ldr	r3, [r3, #12]
 800fb42:	4a31      	ldr	r2, [pc, #196]	; (800fc08 <tcp_process+0x7dc>)
 800fb44:	6013      	str	r3, [r2, #0]
 800fb46:	e013      	b.n	800fb70 <tcp_process+0x744>
 800fb48:	4b2f      	ldr	r3, [pc, #188]	; (800fc08 <tcp_process+0x7dc>)
 800fb4a:	681b      	ldr	r3, [r3, #0]
 800fb4c:	60fb      	str	r3, [r7, #12]
 800fb4e:	e00c      	b.n	800fb6a <tcp_process+0x73e>
 800fb50:	68fb      	ldr	r3, [r7, #12]
 800fb52:	68db      	ldr	r3, [r3, #12]
 800fb54:	687a      	ldr	r2, [r7, #4]
 800fb56:	429a      	cmp	r2, r3
 800fb58:	d104      	bne.n	800fb64 <tcp_process+0x738>
 800fb5a:	687b      	ldr	r3, [r7, #4]
 800fb5c:	68da      	ldr	r2, [r3, #12]
 800fb5e:	68fb      	ldr	r3, [r7, #12]
 800fb60:	60da      	str	r2, [r3, #12]
 800fb62:	e005      	b.n	800fb70 <tcp_process+0x744>
 800fb64:	68fb      	ldr	r3, [r7, #12]
 800fb66:	68db      	ldr	r3, [r3, #12]
 800fb68:	60fb      	str	r3, [r7, #12]
 800fb6a:	68fb      	ldr	r3, [r7, #12]
 800fb6c:	2b00      	cmp	r3, #0
 800fb6e:	d1ef      	bne.n	800fb50 <tcp_process+0x724>
 800fb70:	687b      	ldr	r3, [r7, #4]
 800fb72:	2200      	movs	r2, #0
 800fb74:	60da      	str	r2, [r3, #12]
 800fb76:	4b1f      	ldr	r3, [pc, #124]	; (800fbf4 <tcp_process+0x7c8>)
 800fb78:	2201      	movs	r2, #1
 800fb7a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800fb7c:	687b      	ldr	r3, [r7, #4]
 800fb7e:	220a      	movs	r2, #10
 800fb80:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800fb82:	4b1d      	ldr	r3, [pc, #116]	; (800fbf8 <tcp_process+0x7cc>)
 800fb84:	681a      	ldr	r2, [r3, #0]
 800fb86:	687b      	ldr	r3, [r7, #4]
 800fb88:	60da      	str	r2, [r3, #12]
 800fb8a:	4a1b      	ldr	r2, [pc, #108]	; (800fbf8 <tcp_process+0x7cc>)
 800fb8c:	687b      	ldr	r3, [r7, #4]
 800fb8e:	6013      	str	r3, [r2, #0]
 800fb90:	f003 f8a2 	bl	8012cd8 <tcp_timer_needed>
      }
      break;
 800fb94:	e026      	b.n	800fbe4 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800fb96:	6878      	ldr	r0, [r7, #4]
 800fb98:	f000 f93c 	bl	800fe14 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800fb9c:	4b17      	ldr	r3, [pc, #92]	; (800fbfc <tcp_process+0x7d0>)
 800fb9e:	781b      	ldrb	r3, [r3, #0]
 800fba0:	f003 0310 	and.w	r3, r3, #16
 800fba4:	2b00      	cmp	r3, #0
 800fba6:	d01f      	beq.n	800fbe8 <tcp_process+0x7bc>
 800fba8:	687b      	ldr	r3, [r7, #4]
 800fbaa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800fbac:	4b14      	ldr	r3, [pc, #80]	; (800fc00 <tcp_process+0x7d4>)
 800fbae:	681b      	ldr	r3, [r3, #0]
 800fbb0:	429a      	cmp	r2, r3
 800fbb2:	d119      	bne.n	800fbe8 <tcp_process+0x7bc>
 800fbb4:	687b      	ldr	r3, [r7, #4]
 800fbb6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fbb8:	2b00      	cmp	r3, #0
 800fbba:	d115      	bne.n	800fbe8 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800fbbc:	4b11      	ldr	r3, [pc, #68]	; (800fc04 <tcp_process+0x7d8>)
 800fbbe:	781b      	ldrb	r3, [r3, #0]
 800fbc0:	f043 0310 	orr.w	r3, r3, #16
 800fbc4:	b2da      	uxtb	r2, r3
 800fbc6:	4b0f      	ldr	r3, [pc, #60]	; (800fc04 <tcp_process+0x7d8>)
 800fbc8:	701a      	strb	r2, [r3, #0]
      }
      break;
 800fbca:	e00d      	b.n	800fbe8 <tcp_process+0x7bc>
    default:
      break;
 800fbcc:	bf00      	nop
 800fbce:	e00c      	b.n	800fbea <tcp_process+0x7be>
      break;
 800fbd0:	bf00      	nop
 800fbd2:	e00a      	b.n	800fbea <tcp_process+0x7be>
      break;
 800fbd4:	bf00      	nop
 800fbd6:	e008      	b.n	800fbea <tcp_process+0x7be>
      break;
 800fbd8:	bf00      	nop
 800fbda:	e006      	b.n	800fbea <tcp_process+0x7be>
      break;
 800fbdc:	bf00      	nop
 800fbde:	e004      	b.n	800fbea <tcp_process+0x7be>
      break;
 800fbe0:	bf00      	nop
 800fbe2:	e002      	b.n	800fbea <tcp_process+0x7be>
      break;
 800fbe4:	bf00      	nop
 800fbe6:	e000      	b.n	800fbea <tcp_process+0x7be>
      break;
 800fbe8:	bf00      	nop
  }
  return ERR_OK;
 800fbea:	2300      	movs	r3, #0
}
 800fbec:	4618      	mov	r0, r3
 800fbee:	3724      	adds	r7, #36	; 0x24
 800fbf0:	46bd      	mov	sp, r7
 800fbf2:	bd90      	pop	{r4, r7, pc}
 800fbf4:	20010d8c 	.word	0x20010d8c
 800fbf8:	20010d88 	.word	0x20010d88
 800fbfc:	20010dbc 	.word	0x20010dbc
 800fc00:	20010db4 	.word	0x20010db4
 800fc04:	20010dbd 	.word	0x20010dbd
 800fc08:	20010d84 	.word	0x20010d84

0800fc0c <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800fc0c:	b590      	push	{r4, r7, lr}
 800fc0e:	b085      	sub	sp, #20
 800fc10:	af00      	add	r7, sp, #0
 800fc12:	6078      	str	r0, [r7, #4]
 800fc14:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800fc16:	687b      	ldr	r3, [r7, #4]
 800fc18:	2b00      	cmp	r3, #0
 800fc1a:	d106      	bne.n	800fc2a <tcp_oos_insert_segment+0x1e>
 800fc1c:	4b3b      	ldr	r3, [pc, #236]	; (800fd0c <tcp_oos_insert_segment+0x100>)
 800fc1e:	f240 421f 	movw	r2, #1055	; 0x41f
 800fc22:	493b      	ldr	r1, [pc, #236]	; (800fd10 <tcp_oos_insert_segment+0x104>)
 800fc24:	483b      	ldr	r0, [pc, #236]	; (800fd14 <tcp_oos_insert_segment+0x108>)
 800fc26:	f008 fbcd 	bl	80183c4 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800fc2a:	687b      	ldr	r3, [r7, #4]
 800fc2c:	68db      	ldr	r3, [r3, #12]
 800fc2e:	899b      	ldrh	r3, [r3, #12]
 800fc30:	b29b      	uxth	r3, r3
 800fc32:	4618      	mov	r0, r3
 800fc34:	f7fb f8bc 	bl	800adb0 <lwip_htons>
 800fc38:	4603      	mov	r3, r0
 800fc3a:	b2db      	uxtb	r3, r3
 800fc3c:	f003 0301 	and.w	r3, r3, #1
 800fc40:	2b00      	cmp	r3, #0
 800fc42:	d028      	beq.n	800fc96 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800fc44:	6838      	ldr	r0, [r7, #0]
 800fc46:	f7fe f977 	bl	800df38 <tcp_segs_free>
    next = NULL;
 800fc4a:	2300      	movs	r3, #0
 800fc4c:	603b      	str	r3, [r7, #0]
 800fc4e:	e056      	b.n	800fcfe <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800fc50:	683b      	ldr	r3, [r7, #0]
 800fc52:	68db      	ldr	r3, [r3, #12]
 800fc54:	899b      	ldrh	r3, [r3, #12]
 800fc56:	b29b      	uxth	r3, r3
 800fc58:	4618      	mov	r0, r3
 800fc5a:	f7fb f8a9 	bl	800adb0 <lwip_htons>
 800fc5e:	4603      	mov	r3, r0
 800fc60:	b2db      	uxtb	r3, r3
 800fc62:	f003 0301 	and.w	r3, r3, #1
 800fc66:	2b00      	cmp	r3, #0
 800fc68:	d00d      	beq.n	800fc86 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800fc6a:	687b      	ldr	r3, [r7, #4]
 800fc6c:	68db      	ldr	r3, [r3, #12]
 800fc6e:	899b      	ldrh	r3, [r3, #12]
 800fc70:	b29c      	uxth	r4, r3
 800fc72:	2001      	movs	r0, #1
 800fc74:	f7fb f89c 	bl	800adb0 <lwip_htons>
 800fc78:	4603      	mov	r3, r0
 800fc7a:	461a      	mov	r2, r3
 800fc7c:	687b      	ldr	r3, [r7, #4]
 800fc7e:	68db      	ldr	r3, [r3, #12]
 800fc80:	4322      	orrs	r2, r4
 800fc82:	b292      	uxth	r2, r2
 800fc84:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800fc86:	683b      	ldr	r3, [r7, #0]
 800fc88:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800fc8a:	683b      	ldr	r3, [r7, #0]
 800fc8c:	681b      	ldr	r3, [r3, #0]
 800fc8e:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800fc90:	68f8      	ldr	r0, [r7, #12]
 800fc92:	f7fe f966 	bl	800df62 <tcp_seg_free>
    while (next &&
 800fc96:	683b      	ldr	r3, [r7, #0]
 800fc98:	2b00      	cmp	r3, #0
 800fc9a:	d00e      	beq.n	800fcba <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800fc9c:	687b      	ldr	r3, [r7, #4]
 800fc9e:	891b      	ldrh	r3, [r3, #8]
 800fca0:	461a      	mov	r2, r3
 800fca2:	4b1d      	ldr	r3, [pc, #116]	; (800fd18 <tcp_oos_insert_segment+0x10c>)
 800fca4:	681b      	ldr	r3, [r3, #0]
 800fca6:	441a      	add	r2, r3
 800fca8:	683b      	ldr	r3, [r7, #0]
 800fcaa:	68db      	ldr	r3, [r3, #12]
 800fcac:	685b      	ldr	r3, [r3, #4]
 800fcae:	6839      	ldr	r1, [r7, #0]
 800fcb0:	8909      	ldrh	r1, [r1, #8]
 800fcb2:	440b      	add	r3, r1
 800fcb4:	1ad3      	subs	r3, r2, r3
    while (next &&
 800fcb6:	2b00      	cmp	r3, #0
 800fcb8:	daca      	bge.n	800fc50 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800fcba:	683b      	ldr	r3, [r7, #0]
 800fcbc:	2b00      	cmp	r3, #0
 800fcbe:	d01e      	beq.n	800fcfe <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800fcc0:	687b      	ldr	r3, [r7, #4]
 800fcc2:	891b      	ldrh	r3, [r3, #8]
 800fcc4:	461a      	mov	r2, r3
 800fcc6:	4b14      	ldr	r3, [pc, #80]	; (800fd18 <tcp_oos_insert_segment+0x10c>)
 800fcc8:	681b      	ldr	r3, [r3, #0]
 800fcca:	441a      	add	r2, r3
 800fccc:	683b      	ldr	r3, [r7, #0]
 800fcce:	68db      	ldr	r3, [r3, #12]
 800fcd0:	685b      	ldr	r3, [r3, #4]
 800fcd2:	1ad3      	subs	r3, r2, r3
    if (next &&
 800fcd4:	2b00      	cmp	r3, #0
 800fcd6:	dd12      	ble.n	800fcfe <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800fcd8:	683b      	ldr	r3, [r7, #0]
 800fcda:	68db      	ldr	r3, [r3, #12]
 800fcdc:	685b      	ldr	r3, [r3, #4]
 800fcde:	b29a      	uxth	r2, r3
 800fce0:	4b0d      	ldr	r3, [pc, #52]	; (800fd18 <tcp_oos_insert_segment+0x10c>)
 800fce2:	681b      	ldr	r3, [r3, #0]
 800fce4:	b29b      	uxth	r3, r3
 800fce6:	1ad3      	subs	r3, r2, r3
 800fce8:	b29a      	uxth	r2, r3
 800fcea:	687b      	ldr	r3, [r7, #4]
 800fcec:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800fcee:	687b      	ldr	r3, [r7, #4]
 800fcf0:	685a      	ldr	r2, [r3, #4]
 800fcf2:	687b      	ldr	r3, [r7, #4]
 800fcf4:	891b      	ldrh	r3, [r3, #8]
 800fcf6:	4619      	mov	r1, r3
 800fcf8:	4610      	mov	r0, r2
 800fcfa:	f7fc fb07 	bl	800c30c <pbuf_realloc>
    }
  }
  cseg->next = next;
 800fcfe:	687b      	ldr	r3, [r7, #4]
 800fd00:	683a      	ldr	r2, [r7, #0]
 800fd02:	601a      	str	r2, [r3, #0]
}
 800fd04:	bf00      	nop
 800fd06:	3714      	adds	r7, #20
 800fd08:	46bd      	mov	sp, r7
 800fd0a:	bd90      	pop	{r4, r7, pc}
 800fd0c:	0801b294 	.word	0x0801b294
 800fd10:	0801b554 	.word	0x0801b554
 800fd14:	0801b2e0 	.word	0x0801b2e0
 800fd18:	20010db0 	.word	0x20010db0

0800fd1c <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800fd1c:	b5b0      	push	{r4, r5, r7, lr}
 800fd1e:	b086      	sub	sp, #24
 800fd20:	af00      	add	r7, sp, #0
 800fd22:	60f8      	str	r0, [r7, #12]
 800fd24:	60b9      	str	r1, [r7, #8]
 800fd26:	607a      	str	r2, [r7, #4]
 800fd28:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800fd2a:	e03e      	b.n	800fdaa <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800fd2c:	68bb      	ldr	r3, [r7, #8]
 800fd2e:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800fd30:	68bb      	ldr	r3, [r7, #8]
 800fd32:	681b      	ldr	r3, [r3, #0]
 800fd34:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800fd36:	697b      	ldr	r3, [r7, #20]
 800fd38:	685b      	ldr	r3, [r3, #4]
 800fd3a:	4618      	mov	r0, r3
 800fd3c:	f7fc fcfa 	bl	800c734 <pbuf_clen>
 800fd40:	4603      	mov	r3, r0
 800fd42:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800fd44:	68fb      	ldr	r3, [r7, #12]
 800fd46:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800fd4a:	8a7a      	ldrh	r2, [r7, #18]
 800fd4c:	429a      	cmp	r2, r3
 800fd4e:	d906      	bls.n	800fd5e <tcp_free_acked_segments+0x42>
 800fd50:	4b2a      	ldr	r3, [pc, #168]	; (800fdfc <tcp_free_acked_segments+0xe0>)
 800fd52:	f240 4257 	movw	r2, #1111	; 0x457
 800fd56:	492a      	ldr	r1, [pc, #168]	; (800fe00 <tcp_free_acked_segments+0xe4>)
 800fd58:	482a      	ldr	r0, [pc, #168]	; (800fe04 <tcp_free_acked_segments+0xe8>)
 800fd5a:	f008 fb33 	bl	80183c4 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800fd5e:	68fb      	ldr	r3, [r7, #12]
 800fd60:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800fd64:	8a7b      	ldrh	r3, [r7, #18]
 800fd66:	1ad3      	subs	r3, r2, r3
 800fd68:	b29a      	uxth	r2, r3
 800fd6a:	68fb      	ldr	r3, [r7, #12]
 800fd6c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800fd70:	697b      	ldr	r3, [r7, #20]
 800fd72:	891a      	ldrh	r2, [r3, #8]
 800fd74:	4b24      	ldr	r3, [pc, #144]	; (800fe08 <tcp_free_acked_segments+0xec>)
 800fd76:	881b      	ldrh	r3, [r3, #0]
 800fd78:	4413      	add	r3, r2
 800fd7a:	b29a      	uxth	r2, r3
 800fd7c:	4b22      	ldr	r3, [pc, #136]	; (800fe08 <tcp_free_acked_segments+0xec>)
 800fd7e:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800fd80:	6978      	ldr	r0, [r7, #20]
 800fd82:	f7fe f8ee 	bl	800df62 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800fd86:	68fb      	ldr	r3, [r7, #12]
 800fd88:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800fd8c:	2b00      	cmp	r3, #0
 800fd8e:	d00c      	beq.n	800fdaa <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800fd90:	68bb      	ldr	r3, [r7, #8]
 800fd92:	2b00      	cmp	r3, #0
 800fd94:	d109      	bne.n	800fdaa <tcp_free_acked_segments+0x8e>
 800fd96:	683b      	ldr	r3, [r7, #0]
 800fd98:	2b00      	cmp	r3, #0
 800fd9a:	d106      	bne.n	800fdaa <tcp_free_acked_segments+0x8e>
 800fd9c:	4b17      	ldr	r3, [pc, #92]	; (800fdfc <tcp_free_acked_segments+0xe0>)
 800fd9e:	f240 4261 	movw	r2, #1121	; 0x461
 800fda2:	491a      	ldr	r1, [pc, #104]	; (800fe0c <tcp_free_acked_segments+0xf0>)
 800fda4:	4817      	ldr	r0, [pc, #92]	; (800fe04 <tcp_free_acked_segments+0xe8>)
 800fda6:	f008 fb0d 	bl	80183c4 <iprintf>
  while (seg_list != NULL &&
 800fdaa:	68bb      	ldr	r3, [r7, #8]
 800fdac:	2b00      	cmp	r3, #0
 800fdae:	d020      	beq.n	800fdf2 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800fdb0:	68bb      	ldr	r3, [r7, #8]
 800fdb2:	68db      	ldr	r3, [r3, #12]
 800fdb4:	685b      	ldr	r3, [r3, #4]
 800fdb6:	4618      	mov	r0, r3
 800fdb8:	f7fb f80f 	bl	800adda <lwip_htonl>
 800fdbc:	4604      	mov	r4, r0
 800fdbe:	68bb      	ldr	r3, [r7, #8]
 800fdc0:	891b      	ldrh	r3, [r3, #8]
 800fdc2:	461d      	mov	r5, r3
 800fdc4:	68bb      	ldr	r3, [r7, #8]
 800fdc6:	68db      	ldr	r3, [r3, #12]
 800fdc8:	899b      	ldrh	r3, [r3, #12]
 800fdca:	b29b      	uxth	r3, r3
 800fdcc:	4618      	mov	r0, r3
 800fdce:	f7fa ffef 	bl	800adb0 <lwip_htons>
 800fdd2:	4603      	mov	r3, r0
 800fdd4:	b2db      	uxtb	r3, r3
 800fdd6:	f003 0303 	and.w	r3, r3, #3
 800fdda:	2b00      	cmp	r3, #0
 800fddc:	d001      	beq.n	800fde2 <tcp_free_acked_segments+0xc6>
 800fdde:	2301      	movs	r3, #1
 800fde0:	e000      	b.n	800fde4 <tcp_free_acked_segments+0xc8>
 800fde2:	2300      	movs	r3, #0
 800fde4:	442b      	add	r3, r5
 800fde6:	18e2      	adds	r2, r4, r3
 800fde8:	4b09      	ldr	r3, [pc, #36]	; (800fe10 <tcp_free_acked_segments+0xf4>)
 800fdea:	681b      	ldr	r3, [r3, #0]
 800fdec:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800fdee:	2b00      	cmp	r3, #0
 800fdf0:	dd9c      	ble.n	800fd2c <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800fdf2:	68bb      	ldr	r3, [r7, #8]
}
 800fdf4:	4618      	mov	r0, r3
 800fdf6:	3718      	adds	r7, #24
 800fdf8:	46bd      	mov	sp, r7
 800fdfa:	bdb0      	pop	{r4, r5, r7, pc}
 800fdfc:	0801b294 	.word	0x0801b294
 800fe00:	0801b57c 	.word	0x0801b57c
 800fe04:	0801b2e0 	.word	0x0801b2e0
 800fe08:	20010db8 	.word	0x20010db8
 800fe0c:	0801b5a4 	.word	0x0801b5a4
 800fe10:	20010db4 	.word	0x20010db4

0800fe14 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800fe14:	b5b0      	push	{r4, r5, r7, lr}
 800fe16:	b094      	sub	sp, #80	; 0x50
 800fe18:	af00      	add	r7, sp, #0
 800fe1a:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800fe1c:	2300      	movs	r3, #0
 800fe1e:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800fe20:	687b      	ldr	r3, [r7, #4]
 800fe22:	2b00      	cmp	r3, #0
 800fe24:	d106      	bne.n	800fe34 <tcp_receive+0x20>
 800fe26:	4b91      	ldr	r3, [pc, #580]	; (801006c <tcp_receive+0x258>)
 800fe28:	f240 427b 	movw	r2, #1147	; 0x47b
 800fe2c:	4990      	ldr	r1, [pc, #576]	; (8010070 <tcp_receive+0x25c>)
 800fe2e:	4891      	ldr	r0, [pc, #580]	; (8010074 <tcp_receive+0x260>)
 800fe30:	f008 fac8 	bl	80183c4 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800fe34:	687b      	ldr	r3, [r7, #4]
 800fe36:	7d1b      	ldrb	r3, [r3, #20]
 800fe38:	2b03      	cmp	r3, #3
 800fe3a:	d806      	bhi.n	800fe4a <tcp_receive+0x36>
 800fe3c:	4b8b      	ldr	r3, [pc, #556]	; (801006c <tcp_receive+0x258>)
 800fe3e:	f240 427c 	movw	r2, #1148	; 0x47c
 800fe42:	498d      	ldr	r1, [pc, #564]	; (8010078 <tcp_receive+0x264>)
 800fe44:	488b      	ldr	r0, [pc, #556]	; (8010074 <tcp_receive+0x260>)
 800fe46:	f008 fabd 	bl	80183c4 <iprintf>

  if (flags & TCP_ACK) {
 800fe4a:	4b8c      	ldr	r3, [pc, #560]	; (801007c <tcp_receive+0x268>)
 800fe4c:	781b      	ldrb	r3, [r3, #0]
 800fe4e:	f003 0310 	and.w	r3, r3, #16
 800fe52:	2b00      	cmp	r3, #0
 800fe54:	f000 8264 	beq.w	8010320 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800fe58:	687b      	ldr	r3, [r7, #4]
 800fe5a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800fe5e:	461a      	mov	r2, r3
 800fe60:	687b      	ldr	r3, [r7, #4]
 800fe62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fe64:	4413      	add	r3, r2
 800fe66:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800fe68:	687b      	ldr	r3, [r7, #4]
 800fe6a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800fe6c:	4b84      	ldr	r3, [pc, #528]	; (8010080 <tcp_receive+0x26c>)
 800fe6e:	681b      	ldr	r3, [r3, #0]
 800fe70:	1ad3      	subs	r3, r2, r3
 800fe72:	2b00      	cmp	r3, #0
 800fe74:	db1b      	blt.n	800feae <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800fe76:	687b      	ldr	r3, [r7, #4]
 800fe78:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800fe7a:	4b81      	ldr	r3, [pc, #516]	; (8010080 <tcp_receive+0x26c>)
 800fe7c:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800fe7e:	429a      	cmp	r2, r3
 800fe80:	d106      	bne.n	800fe90 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800fe82:	687b      	ldr	r3, [r7, #4]
 800fe84:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800fe86:	4b7f      	ldr	r3, [pc, #508]	; (8010084 <tcp_receive+0x270>)
 800fe88:	681b      	ldr	r3, [r3, #0]
 800fe8a:	1ad3      	subs	r3, r2, r3
 800fe8c:	2b00      	cmp	r3, #0
 800fe8e:	db0e      	blt.n	800feae <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800fe90:	687b      	ldr	r3, [r7, #4]
 800fe92:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800fe94:	4b7b      	ldr	r3, [pc, #492]	; (8010084 <tcp_receive+0x270>)
 800fe96:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800fe98:	429a      	cmp	r2, r3
 800fe9a:	d125      	bne.n	800fee8 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800fe9c:	4b7a      	ldr	r3, [pc, #488]	; (8010088 <tcp_receive+0x274>)
 800fe9e:	681b      	ldr	r3, [r3, #0]
 800fea0:	89db      	ldrh	r3, [r3, #14]
 800fea2:	b29a      	uxth	r2, r3
 800fea4:	687b      	ldr	r3, [r7, #4]
 800fea6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800feaa:	429a      	cmp	r2, r3
 800feac:	d91c      	bls.n	800fee8 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800feae:	4b76      	ldr	r3, [pc, #472]	; (8010088 <tcp_receive+0x274>)
 800feb0:	681b      	ldr	r3, [r3, #0]
 800feb2:	89db      	ldrh	r3, [r3, #14]
 800feb4:	b29a      	uxth	r2, r3
 800feb6:	687b      	ldr	r3, [r7, #4]
 800feb8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800febc:	687b      	ldr	r3, [r7, #4]
 800febe:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800fec2:	687b      	ldr	r3, [r7, #4]
 800fec4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800fec8:	429a      	cmp	r2, r3
 800feca:	d205      	bcs.n	800fed8 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800fecc:	687b      	ldr	r3, [r7, #4]
 800fece:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800fed2:	687b      	ldr	r3, [r7, #4]
 800fed4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800fed8:	4b69      	ldr	r3, [pc, #420]	; (8010080 <tcp_receive+0x26c>)
 800feda:	681a      	ldr	r2, [r3, #0]
 800fedc:	687b      	ldr	r3, [r7, #4]
 800fede:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800fee0:	4b68      	ldr	r3, [pc, #416]	; (8010084 <tcp_receive+0x270>)
 800fee2:	681a      	ldr	r2, [r3, #0]
 800fee4:	687b      	ldr	r3, [r7, #4]
 800fee6:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800fee8:	4b66      	ldr	r3, [pc, #408]	; (8010084 <tcp_receive+0x270>)
 800feea:	681a      	ldr	r2, [r3, #0]
 800feec:	687b      	ldr	r3, [r7, #4]
 800feee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fef0:	1ad3      	subs	r3, r2, r3
 800fef2:	2b00      	cmp	r3, #0
 800fef4:	dc58      	bgt.n	800ffa8 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800fef6:	4b65      	ldr	r3, [pc, #404]	; (801008c <tcp_receive+0x278>)
 800fef8:	881b      	ldrh	r3, [r3, #0]
 800fefa:	2b00      	cmp	r3, #0
 800fefc:	d14b      	bne.n	800ff96 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800fefe:	687b      	ldr	r3, [r7, #4]
 800ff00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ff02:	687a      	ldr	r2, [r7, #4]
 800ff04:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800ff08:	4413      	add	r3, r2
 800ff0a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ff0c:	429a      	cmp	r2, r3
 800ff0e:	d142      	bne.n	800ff96 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800ff10:	687b      	ldr	r3, [r7, #4]
 800ff12:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800ff16:	2b00      	cmp	r3, #0
 800ff18:	db3d      	blt.n	800ff96 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800ff1a:	687b      	ldr	r3, [r7, #4]
 800ff1c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ff1e:	4b59      	ldr	r3, [pc, #356]	; (8010084 <tcp_receive+0x270>)
 800ff20:	681b      	ldr	r3, [r3, #0]
 800ff22:	429a      	cmp	r2, r3
 800ff24:	d137      	bne.n	800ff96 <tcp_receive+0x182>
              found_dupack = 1;
 800ff26:	2301      	movs	r3, #1
 800ff28:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800ff2a:	687b      	ldr	r3, [r7, #4]
 800ff2c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800ff30:	2bff      	cmp	r3, #255	; 0xff
 800ff32:	d007      	beq.n	800ff44 <tcp_receive+0x130>
                ++pcb->dupacks;
 800ff34:	687b      	ldr	r3, [r7, #4]
 800ff36:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800ff3a:	3301      	adds	r3, #1
 800ff3c:	b2da      	uxtb	r2, r3
 800ff3e:	687b      	ldr	r3, [r7, #4]
 800ff40:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800ff44:	687b      	ldr	r3, [r7, #4]
 800ff46:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800ff4a:	2b03      	cmp	r3, #3
 800ff4c:	d91b      	bls.n	800ff86 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800ff4e:	687b      	ldr	r3, [r7, #4]
 800ff50:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800ff54:	687b      	ldr	r3, [r7, #4]
 800ff56:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ff58:	4413      	add	r3, r2
 800ff5a:	b29a      	uxth	r2, r3
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800ff62:	429a      	cmp	r2, r3
 800ff64:	d30a      	bcc.n	800ff7c <tcp_receive+0x168>
 800ff66:	687b      	ldr	r3, [r7, #4]
 800ff68:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800ff6c:	687b      	ldr	r3, [r7, #4]
 800ff6e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ff70:	4413      	add	r3, r2
 800ff72:	b29a      	uxth	r2, r3
 800ff74:	687b      	ldr	r3, [r7, #4]
 800ff76:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800ff7a:	e004      	b.n	800ff86 <tcp_receive+0x172>
 800ff7c:	687b      	ldr	r3, [r7, #4]
 800ff7e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ff82:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800ff86:	687b      	ldr	r3, [r7, #4]
 800ff88:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800ff8c:	2b02      	cmp	r3, #2
 800ff8e:	d902      	bls.n	800ff96 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800ff90:	6878      	ldr	r0, [r7, #4]
 800ff92:	f002 fb43 	bl	801261c <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800ff96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ff98:	2b00      	cmp	r3, #0
 800ff9a:	f040 8161 	bne.w	8010260 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 800ff9e:	687b      	ldr	r3, [r7, #4]
 800ffa0:	2200      	movs	r2, #0
 800ffa2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ffa6:	e15b      	b.n	8010260 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800ffa8:	4b36      	ldr	r3, [pc, #216]	; (8010084 <tcp_receive+0x270>)
 800ffaa:	681a      	ldr	r2, [r3, #0]
 800ffac:	687b      	ldr	r3, [r7, #4]
 800ffae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ffb0:	1ad3      	subs	r3, r2, r3
 800ffb2:	3b01      	subs	r3, #1
 800ffb4:	2b00      	cmp	r3, #0
 800ffb6:	f2c0 814e 	blt.w	8010256 <tcp_receive+0x442>
 800ffba:	4b32      	ldr	r3, [pc, #200]	; (8010084 <tcp_receive+0x270>)
 800ffbc:	681a      	ldr	r2, [r3, #0]
 800ffbe:	687b      	ldr	r3, [r7, #4]
 800ffc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ffc2:	1ad3      	subs	r3, r2, r3
 800ffc4:	2b00      	cmp	r3, #0
 800ffc6:	f300 8146 	bgt.w	8010256 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800ffca:	687b      	ldr	r3, [r7, #4]
 800ffcc:	8b5b      	ldrh	r3, [r3, #26]
 800ffce:	f003 0304 	and.w	r3, r3, #4
 800ffd2:	2b00      	cmp	r3, #0
 800ffd4:	d010      	beq.n	800fff8 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800ffd6:	687b      	ldr	r3, [r7, #4]
 800ffd8:	8b5b      	ldrh	r3, [r3, #26]
 800ffda:	f023 0304 	bic.w	r3, r3, #4
 800ffde:	b29a      	uxth	r2, r3
 800ffe0:	687b      	ldr	r3, [r7, #4]
 800ffe2:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800ffe4:	687b      	ldr	r3, [r7, #4]
 800ffe6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800ffea:	687b      	ldr	r3, [r7, #4]
 800ffec:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800fff0:	687b      	ldr	r3, [r7, #4]
 800fff2:	2200      	movs	r2, #0
 800fff4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800fff8:	687b      	ldr	r3, [r7, #4]
 800fffa:	2200      	movs	r2, #0
 800fffc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8010000:	687b      	ldr	r3, [r7, #4]
 8010002:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010006:	10db      	asrs	r3, r3, #3
 8010008:	b21b      	sxth	r3, r3
 801000a:	b29a      	uxth	r2, r3
 801000c:	687b      	ldr	r3, [r7, #4]
 801000e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8010012:	b29b      	uxth	r3, r3
 8010014:	4413      	add	r3, r2
 8010016:	b29b      	uxth	r3, r3
 8010018:	b21a      	sxth	r2, r3
 801001a:	687b      	ldr	r3, [r7, #4]
 801001c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8010020:	4b18      	ldr	r3, [pc, #96]	; (8010084 <tcp_receive+0x270>)
 8010022:	681b      	ldr	r3, [r3, #0]
 8010024:	b29a      	uxth	r2, r3
 8010026:	687b      	ldr	r3, [r7, #4]
 8010028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801002a:	b29b      	uxth	r3, r3
 801002c:	1ad3      	subs	r3, r2, r3
 801002e:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8010030:	687b      	ldr	r3, [r7, #4]
 8010032:	2200      	movs	r2, #0
 8010034:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8010038:	4b12      	ldr	r3, [pc, #72]	; (8010084 <tcp_receive+0x270>)
 801003a:	681a      	ldr	r2, [r3, #0]
 801003c:	687b      	ldr	r3, [r7, #4]
 801003e:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8010040:	687b      	ldr	r3, [r7, #4]
 8010042:	7d1b      	ldrb	r3, [r3, #20]
 8010044:	2b03      	cmp	r3, #3
 8010046:	f240 8097 	bls.w	8010178 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 801004a:	687b      	ldr	r3, [r7, #4]
 801004c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010050:	687b      	ldr	r3, [r7, #4]
 8010052:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8010056:	429a      	cmp	r2, r3
 8010058:	d245      	bcs.n	80100e6 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 801005a:	687b      	ldr	r3, [r7, #4]
 801005c:	8b5b      	ldrh	r3, [r3, #26]
 801005e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010062:	2b00      	cmp	r3, #0
 8010064:	d014      	beq.n	8010090 <tcp_receive+0x27c>
 8010066:	2301      	movs	r3, #1
 8010068:	e013      	b.n	8010092 <tcp_receive+0x27e>
 801006a:	bf00      	nop
 801006c:	0801b294 	.word	0x0801b294
 8010070:	0801b5c4 	.word	0x0801b5c4
 8010074:	0801b2e0 	.word	0x0801b2e0
 8010078:	0801b5e0 	.word	0x0801b5e0
 801007c:	20010dbc 	.word	0x20010dbc
 8010080:	20010db0 	.word	0x20010db0
 8010084:	20010db4 	.word	0x20010db4
 8010088:	20010da0 	.word	0x20010da0
 801008c:	20010dba 	.word	0x20010dba
 8010090:	2302      	movs	r3, #2
 8010092:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8010096:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 801009a:	b29a      	uxth	r2, r3
 801009c:	687b      	ldr	r3, [r7, #4]
 801009e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80100a0:	fb12 f303 	smulbb	r3, r2, r3
 80100a4:	b29b      	uxth	r3, r3
 80100a6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80100a8:	4293      	cmp	r3, r2
 80100aa:	bf28      	it	cs
 80100ac:	4613      	movcs	r3, r2
 80100ae:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 80100b0:	687b      	ldr	r3, [r7, #4]
 80100b2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80100b6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80100b8:	4413      	add	r3, r2
 80100ba:	b29a      	uxth	r2, r3
 80100bc:	687b      	ldr	r3, [r7, #4]
 80100be:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80100c2:	429a      	cmp	r2, r3
 80100c4:	d309      	bcc.n	80100da <tcp_receive+0x2c6>
 80100c6:	687b      	ldr	r3, [r7, #4]
 80100c8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80100cc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80100ce:	4413      	add	r3, r2
 80100d0:	b29a      	uxth	r2, r3
 80100d2:	687b      	ldr	r3, [r7, #4]
 80100d4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80100d8:	e04e      	b.n	8010178 <tcp_receive+0x364>
 80100da:	687b      	ldr	r3, [r7, #4]
 80100dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80100e0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80100e4:	e048      	b.n	8010178 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 80100e6:	687b      	ldr	r3, [r7, #4]
 80100e8:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80100ec:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80100ee:	4413      	add	r3, r2
 80100f0:	b29a      	uxth	r2, r3
 80100f2:	687b      	ldr	r3, [r7, #4]
 80100f4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80100f8:	429a      	cmp	r2, r3
 80100fa:	d309      	bcc.n	8010110 <tcp_receive+0x2fc>
 80100fc:	687b      	ldr	r3, [r7, #4]
 80100fe:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8010102:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010104:	4413      	add	r3, r2
 8010106:	b29a      	uxth	r2, r3
 8010108:	687b      	ldr	r3, [r7, #4]
 801010a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 801010e:	e004      	b.n	801011a <tcp_receive+0x306>
 8010110:	687b      	ldr	r3, [r7, #4]
 8010112:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010116:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 801011a:	687b      	ldr	r3, [r7, #4]
 801011c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8010120:	687b      	ldr	r3, [r7, #4]
 8010122:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010126:	429a      	cmp	r2, r3
 8010128:	d326      	bcc.n	8010178 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 801012a:	687b      	ldr	r3, [r7, #4]
 801012c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8010130:	687b      	ldr	r3, [r7, #4]
 8010132:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010136:	1ad3      	subs	r3, r2, r3
 8010138:	b29a      	uxth	r2, r3
 801013a:	687b      	ldr	r3, [r7, #4]
 801013c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8010140:	687b      	ldr	r3, [r7, #4]
 8010142:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010146:	687b      	ldr	r3, [r7, #4]
 8010148:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801014a:	4413      	add	r3, r2
 801014c:	b29a      	uxth	r2, r3
 801014e:	687b      	ldr	r3, [r7, #4]
 8010150:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010154:	429a      	cmp	r2, r3
 8010156:	d30a      	bcc.n	801016e <tcp_receive+0x35a>
 8010158:	687b      	ldr	r3, [r7, #4]
 801015a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801015e:	687b      	ldr	r3, [r7, #4]
 8010160:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010162:	4413      	add	r3, r2
 8010164:	b29a      	uxth	r2, r3
 8010166:	687b      	ldr	r3, [r7, #4]
 8010168:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801016c:	e004      	b.n	8010178 <tcp_receive+0x364>
 801016e:	687b      	ldr	r3, [r7, #4]
 8010170:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010174:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8010178:	687b      	ldr	r3, [r7, #4]
 801017a:	6f19      	ldr	r1, [r3, #112]	; 0x70
 801017c:	687b      	ldr	r3, [r7, #4]
 801017e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010180:	4a98      	ldr	r2, [pc, #608]	; (80103e4 <tcp_receive+0x5d0>)
 8010182:	6878      	ldr	r0, [r7, #4]
 8010184:	f7ff fdca 	bl	800fd1c <tcp_free_acked_segments>
 8010188:	4602      	mov	r2, r0
 801018a:	687b      	ldr	r3, [r7, #4]
 801018c:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 801018e:	687b      	ldr	r3, [r7, #4]
 8010190:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8010192:	687b      	ldr	r3, [r7, #4]
 8010194:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010196:	4a94      	ldr	r2, [pc, #592]	; (80103e8 <tcp_receive+0x5d4>)
 8010198:	6878      	ldr	r0, [r7, #4]
 801019a:	f7ff fdbf 	bl	800fd1c <tcp_free_acked_segments>
 801019e:	4602      	mov	r2, r0
 80101a0:	687b      	ldr	r3, [r7, #4]
 80101a2:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 80101a4:	687b      	ldr	r3, [r7, #4]
 80101a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80101a8:	2b00      	cmp	r3, #0
 80101aa:	d104      	bne.n	80101b6 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 80101ac:	687b      	ldr	r3, [r7, #4]
 80101ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80101b2:	861a      	strh	r2, [r3, #48]	; 0x30
 80101b4:	e002      	b.n	80101bc <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 80101b6:	687b      	ldr	r3, [r7, #4]
 80101b8:	2200      	movs	r2, #0
 80101ba:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 80101bc:	687b      	ldr	r3, [r7, #4]
 80101be:	2200      	movs	r2, #0
 80101c0:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 80101c2:	687b      	ldr	r3, [r7, #4]
 80101c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80101c6:	2b00      	cmp	r3, #0
 80101c8:	d103      	bne.n	80101d2 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 80101ca:	687b      	ldr	r3, [r7, #4]
 80101cc:	2200      	movs	r2, #0
 80101ce:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 80101d2:	687b      	ldr	r3, [r7, #4]
 80101d4:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 80101d8:	4b84      	ldr	r3, [pc, #528]	; (80103ec <tcp_receive+0x5d8>)
 80101da:	881b      	ldrh	r3, [r3, #0]
 80101dc:	4413      	add	r3, r2
 80101de:	b29a      	uxth	r2, r3
 80101e0:	687b      	ldr	r3, [r7, #4]
 80101e2:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 80101e6:	687b      	ldr	r3, [r7, #4]
 80101e8:	8b5b      	ldrh	r3, [r3, #26]
 80101ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80101ee:	2b00      	cmp	r3, #0
 80101f0:	d035      	beq.n	801025e <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 80101f2:	687b      	ldr	r3, [r7, #4]
 80101f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80101f6:	2b00      	cmp	r3, #0
 80101f8:	d118      	bne.n	801022c <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 80101fa:	687b      	ldr	r3, [r7, #4]
 80101fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80101fe:	2b00      	cmp	r3, #0
 8010200:	d00c      	beq.n	801021c <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8010202:	687b      	ldr	r3, [r7, #4]
 8010204:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8010206:	687b      	ldr	r3, [r7, #4]
 8010208:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801020a:	68db      	ldr	r3, [r3, #12]
 801020c:	685b      	ldr	r3, [r3, #4]
 801020e:	4618      	mov	r0, r3
 8010210:	f7fa fde3 	bl	800adda <lwip_htonl>
 8010214:	4603      	mov	r3, r0
 8010216:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8010218:	2b00      	cmp	r3, #0
 801021a:	dc20      	bgt.n	801025e <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 801021c:	687b      	ldr	r3, [r7, #4]
 801021e:	8b5b      	ldrh	r3, [r3, #26]
 8010220:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8010224:	b29a      	uxth	r2, r3
 8010226:	687b      	ldr	r3, [r7, #4]
 8010228:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801022a:	e018      	b.n	801025e <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 801022c:	687b      	ldr	r3, [r7, #4]
 801022e:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8010230:	687b      	ldr	r3, [r7, #4]
 8010232:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010234:	68db      	ldr	r3, [r3, #12]
 8010236:	685b      	ldr	r3, [r3, #4]
 8010238:	4618      	mov	r0, r3
 801023a:	f7fa fdce 	bl	800adda <lwip_htonl>
 801023e:	4603      	mov	r3, r0
 8010240:	1ae3      	subs	r3, r4, r3
 8010242:	2b00      	cmp	r3, #0
 8010244:	dc0b      	bgt.n	801025e <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 8010246:	687b      	ldr	r3, [r7, #4]
 8010248:	8b5b      	ldrh	r3, [r3, #26]
 801024a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801024e:	b29a      	uxth	r2, r3
 8010250:	687b      	ldr	r3, [r7, #4]
 8010252:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010254:	e003      	b.n	801025e <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8010256:	6878      	ldr	r0, [r7, #4]
 8010258:	f002 fbce 	bl	80129f8 <tcp_send_empty_ack>
 801025c:	e000      	b.n	8010260 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801025e:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8010260:	687b      	ldr	r3, [r7, #4]
 8010262:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010264:	2b00      	cmp	r3, #0
 8010266:	d05b      	beq.n	8010320 <tcp_receive+0x50c>
 8010268:	687b      	ldr	r3, [r7, #4]
 801026a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801026c:	4b60      	ldr	r3, [pc, #384]	; (80103f0 <tcp_receive+0x5dc>)
 801026e:	681b      	ldr	r3, [r3, #0]
 8010270:	1ad3      	subs	r3, r2, r3
 8010272:	2b00      	cmp	r3, #0
 8010274:	da54      	bge.n	8010320 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8010276:	4b5f      	ldr	r3, [pc, #380]	; (80103f4 <tcp_receive+0x5e0>)
 8010278:	681b      	ldr	r3, [r3, #0]
 801027a:	b29a      	uxth	r2, r3
 801027c:	687b      	ldr	r3, [r7, #4]
 801027e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010280:	b29b      	uxth	r3, r3
 8010282:	1ad3      	subs	r3, r2, r3
 8010284:	b29b      	uxth	r3, r3
 8010286:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 801028a:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 801028e:	687b      	ldr	r3, [r7, #4]
 8010290:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010294:	10db      	asrs	r3, r3, #3
 8010296:	b21b      	sxth	r3, r3
 8010298:	b29b      	uxth	r3, r3
 801029a:	1ad3      	subs	r3, r2, r3
 801029c:	b29b      	uxth	r3, r3
 801029e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 80102a2:	687b      	ldr	r3, [r7, #4]
 80102a4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80102a8:	b29a      	uxth	r2, r3
 80102aa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80102ae:	4413      	add	r3, r2
 80102b0:	b29b      	uxth	r3, r3
 80102b2:	b21a      	sxth	r2, r3
 80102b4:	687b      	ldr	r3, [r7, #4]
 80102b6:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 80102b8:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 80102bc:	2b00      	cmp	r3, #0
 80102be:	da05      	bge.n	80102cc <tcp_receive+0x4b8>
        m = (s16_t) - m;
 80102c0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80102c4:	425b      	negs	r3, r3
 80102c6:	b29b      	uxth	r3, r3
 80102c8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 80102cc:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80102d0:	687b      	ldr	r3, [r7, #4]
 80102d2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80102d6:	109b      	asrs	r3, r3, #2
 80102d8:	b21b      	sxth	r3, r3
 80102da:	b29b      	uxth	r3, r3
 80102dc:	1ad3      	subs	r3, r2, r3
 80102de:	b29b      	uxth	r3, r3
 80102e0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 80102e4:	687b      	ldr	r3, [r7, #4]
 80102e6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80102ea:	b29a      	uxth	r2, r3
 80102ec:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80102f0:	4413      	add	r3, r2
 80102f2:	b29b      	uxth	r3, r3
 80102f4:	b21a      	sxth	r2, r3
 80102f6:	687b      	ldr	r3, [r7, #4]
 80102f8:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80102fa:	687b      	ldr	r3, [r7, #4]
 80102fc:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010300:	10db      	asrs	r3, r3, #3
 8010302:	b21b      	sxth	r3, r3
 8010304:	b29a      	uxth	r2, r3
 8010306:	687b      	ldr	r3, [r7, #4]
 8010308:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801030c:	b29b      	uxth	r3, r3
 801030e:	4413      	add	r3, r2
 8010310:	b29b      	uxth	r3, r3
 8010312:	b21a      	sxth	r2, r3
 8010314:	687b      	ldr	r3, [r7, #4]
 8010316:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 801031a:	687b      	ldr	r3, [r7, #4]
 801031c:	2200      	movs	r2, #0
 801031e:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8010320:	4b35      	ldr	r3, [pc, #212]	; (80103f8 <tcp_receive+0x5e4>)
 8010322:	881b      	ldrh	r3, [r3, #0]
 8010324:	2b00      	cmp	r3, #0
 8010326:	f000 84e2 	beq.w	8010cee <tcp_receive+0xeda>
 801032a:	687b      	ldr	r3, [r7, #4]
 801032c:	7d1b      	ldrb	r3, [r3, #20]
 801032e:	2b06      	cmp	r3, #6
 8010330:	f200 84dd 	bhi.w	8010cee <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8010334:	687b      	ldr	r3, [r7, #4]
 8010336:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010338:	4b30      	ldr	r3, [pc, #192]	; (80103fc <tcp_receive+0x5e8>)
 801033a:	681b      	ldr	r3, [r3, #0]
 801033c:	1ad3      	subs	r3, r2, r3
 801033e:	3b01      	subs	r3, #1
 8010340:	2b00      	cmp	r3, #0
 8010342:	f2c0 808f 	blt.w	8010464 <tcp_receive+0x650>
 8010346:	687b      	ldr	r3, [r7, #4]
 8010348:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801034a:	4b2b      	ldr	r3, [pc, #172]	; (80103f8 <tcp_receive+0x5e4>)
 801034c:	881b      	ldrh	r3, [r3, #0]
 801034e:	4619      	mov	r1, r3
 8010350:	4b2a      	ldr	r3, [pc, #168]	; (80103fc <tcp_receive+0x5e8>)
 8010352:	681b      	ldr	r3, [r3, #0]
 8010354:	440b      	add	r3, r1
 8010356:	1ad3      	subs	r3, r2, r3
 8010358:	3301      	adds	r3, #1
 801035a:	2b00      	cmp	r3, #0
 801035c:	f300 8082 	bgt.w	8010464 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8010360:	4b27      	ldr	r3, [pc, #156]	; (8010400 <tcp_receive+0x5ec>)
 8010362:	685b      	ldr	r3, [r3, #4]
 8010364:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8010366:	687b      	ldr	r3, [r7, #4]
 8010368:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801036a:	4b24      	ldr	r3, [pc, #144]	; (80103fc <tcp_receive+0x5e8>)
 801036c:	681b      	ldr	r3, [r3, #0]
 801036e:	1ad3      	subs	r3, r2, r3
 8010370:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8010372:	4b23      	ldr	r3, [pc, #140]	; (8010400 <tcp_receive+0x5ec>)
 8010374:	685b      	ldr	r3, [r3, #4]
 8010376:	2b00      	cmp	r3, #0
 8010378:	d106      	bne.n	8010388 <tcp_receive+0x574>
 801037a:	4b22      	ldr	r3, [pc, #136]	; (8010404 <tcp_receive+0x5f0>)
 801037c:	f240 5294 	movw	r2, #1428	; 0x594
 8010380:	4921      	ldr	r1, [pc, #132]	; (8010408 <tcp_receive+0x5f4>)
 8010382:	4822      	ldr	r0, [pc, #136]	; (801040c <tcp_receive+0x5f8>)
 8010384:	f008 f81e 	bl	80183c4 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8010388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801038a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801038e:	4293      	cmp	r3, r2
 8010390:	d906      	bls.n	80103a0 <tcp_receive+0x58c>
 8010392:	4b1c      	ldr	r3, [pc, #112]	; (8010404 <tcp_receive+0x5f0>)
 8010394:	f240 5295 	movw	r2, #1429	; 0x595
 8010398:	491d      	ldr	r1, [pc, #116]	; (8010410 <tcp_receive+0x5fc>)
 801039a:	481c      	ldr	r0, [pc, #112]	; (801040c <tcp_receive+0x5f8>)
 801039c:	f008 f812 	bl	80183c4 <iprintf>
      off = (u16_t)off32;
 80103a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103a2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 80103a6:	4b16      	ldr	r3, [pc, #88]	; (8010400 <tcp_receive+0x5ec>)
 80103a8:	685b      	ldr	r3, [r3, #4]
 80103aa:	891b      	ldrh	r3, [r3, #8]
 80103ac:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80103b0:	429a      	cmp	r2, r3
 80103b2:	d906      	bls.n	80103c2 <tcp_receive+0x5ae>
 80103b4:	4b13      	ldr	r3, [pc, #76]	; (8010404 <tcp_receive+0x5f0>)
 80103b6:	f240 5297 	movw	r2, #1431	; 0x597
 80103ba:	4916      	ldr	r1, [pc, #88]	; (8010414 <tcp_receive+0x600>)
 80103bc:	4813      	ldr	r0, [pc, #76]	; (801040c <tcp_receive+0x5f8>)
 80103be:	f008 f801 	bl	80183c4 <iprintf>
      inseg.len -= off;
 80103c2:	4b0f      	ldr	r3, [pc, #60]	; (8010400 <tcp_receive+0x5ec>)
 80103c4:	891a      	ldrh	r2, [r3, #8]
 80103c6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80103ca:	1ad3      	subs	r3, r2, r3
 80103cc:	b29a      	uxth	r2, r3
 80103ce:	4b0c      	ldr	r3, [pc, #48]	; (8010400 <tcp_receive+0x5ec>)
 80103d0:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 80103d2:	4b0b      	ldr	r3, [pc, #44]	; (8010400 <tcp_receive+0x5ec>)
 80103d4:	685b      	ldr	r3, [r3, #4]
 80103d6:	891a      	ldrh	r2, [r3, #8]
 80103d8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80103dc:	1ad3      	subs	r3, r2, r3
 80103de:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 80103e0:	e02a      	b.n	8010438 <tcp_receive+0x624>
 80103e2:	bf00      	nop
 80103e4:	0801b5fc 	.word	0x0801b5fc
 80103e8:	0801b604 	.word	0x0801b604
 80103ec:	20010db8 	.word	0x20010db8
 80103f0:	20010db4 	.word	0x20010db4
 80103f4:	20010d78 	.word	0x20010d78
 80103f8:	20010dba 	.word	0x20010dba
 80103fc:	20010db0 	.word	0x20010db0
 8010400:	20010d90 	.word	0x20010d90
 8010404:	0801b294 	.word	0x0801b294
 8010408:	0801b60c 	.word	0x0801b60c
 801040c:	0801b2e0 	.word	0x0801b2e0
 8010410:	0801b61c 	.word	0x0801b61c
 8010414:	0801b62c 	.word	0x0801b62c
        off -= p->len;
 8010418:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801041a:	895b      	ldrh	r3, [r3, #10]
 801041c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010420:	1ad3      	subs	r3, r2, r3
 8010422:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8010426:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010428:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801042a:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 801042c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801042e:	2200      	movs	r2, #0
 8010430:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8010432:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010434:	681b      	ldr	r3, [r3, #0]
 8010436:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8010438:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801043a:	895b      	ldrh	r3, [r3, #10]
 801043c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010440:	429a      	cmp	r2, r3
 8010442:	d8e9      	bhi.n	8010418 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8010444:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010448:	4619      	mov	r1, r3
 801044a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801044c:	f7fc f85e 	bl	800c50c <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8010450:	687b      	ldr	r3, [r7, #4]
 8010452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010454:	4a91      	ldr	r2, [pc, #580]	; (801069c <tcp_receive+0x888>)
 8010456:	6013      	str	r3, [r2, #0]
 8010458:	4b91      	ldr	r3, [pc, #580]	; (80106a0 <tcp_receive+0x88c>)
 801045a:	68db      	ldr	r3, [r3, #12]
 801045c:	4a8f      	ldr	r2, [pc, #572]	; (801069c <tcp_receive+0x888>)
 801045e:	6812      	ldr	r2, [r2, #0]
 8010460:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8010462:	e00d      	b.n	8010480 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8010464:	4b8d      	ldr	r3, [pc, #564]	; (801069c <tcp_receive+0x888>)
 8010466:	681a      	ldr	r2, [r3, #0]
 8010468:	687b      	ldr	r3, [r7, #4]
 801046a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801046c:	1ad3      	subs	r3, r2, r3
 801046e:	2b00      	cmp	r3, #0
 8010470:	da06      	bge.n	8010480 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8010472:	687b      	ldr	r3, [r7, #4]
 8010474:	8b5b      	ldrh	r3, [r3, #26]
 8010476:	f043 0302 	orr.w	r3, r3, #2
 801047a:	b29a      	uxth	r2, r3
 801047c:	687b      	ldr	r3, [r7, #4]
 801047e:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8010480:	4b86      	ldr	r3, [pc, #536]	; (801069c <tcp_receive+0x888>)
 8010482:	681a      	ldr	r2, [r3, #0]
 8010484:	687b      	ldr	r3, [r7, #4]
 8010486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010488:	1ad3      	subs	r3, r2, r3
 801048a:	2b00      	cmp	r3, #0
 801048c:	f2c0 842a 	blt.w	8010ce4 <tcp_receive+0xed0>
 8010490:	4b82      	ldr	r3, [pc, #520]	; (801069c <tcp_receive+0x888>)
 8010492:	681a      	ldr	r2, [r3, #0]
 8010494:	687b      	ldr	r3, [r7, #4]
 8010496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010498:	6879      	ldr	r1, [r7, #4]
 801049a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801049c:	440b      	add	r3, r1
 801049e:	1ad3      	subs	r3, r2, r3
 80104a0:	3301      	adds	r3, #1
 80104a2:	2b00      	cmp	r3, #0
 80104a4:	f300 841e 	bgt.w	8010ce4 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 80104a8:	687b      	ldr	r3, [r7, #4]
 80104aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80104ac:	4b7b      	ldr	r3, [pc, #492]	; (801069c <tcp_receive+0x888>)
 80104ae:	681b      	ldr	r3, [r3, #0]
 80104b0:	429a      	cmp	r2, r3
 80104b2:	f040 829a 	bne.w	80109ea <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 80104b6:	4b7a      	ldr	r3, [pc, #488]	; (80106a0 <tcp_receive+0x88c>)
 80104b8:	891c      	ldrh	r4, [r3, #8]
 80104ba:	4b79      	ldr	r3, [pc, #484]	; (80106a0 <tcp_receive+0x88c>)
 80104bc:	68db      	ldr	r3, [r3, #12]
 80104be:	899b      	ldrh	r3, [r3, #12]
 80104c0:	b29b      	uxth	r3, r3
 80104c2:	4618      	mov	r0, r3
 80104c4:	f7fa fc74 	bl	800adb0 <lwip_htons>
 80104c8:	4603      	mov	r3, r0
 80104ca:	b2db      	uxtb	r3, r3
 80104cc:	f003 0303 	and.w	r3, r3, #3
 80104d0:	2b00      	cmp	r3, #0
 80104d2:	d001      	beq.n	80104d8 <tcp_receive+0x6c4>
 80104d4:	2301      	movs	r3, #1
 80104d6:	e000      	b.n	80104da <tcp_receive+0x6c6>
 80104d8:	2300      	movs	r3, #0
 80104da:	4423      	add	r3, r4
 80104dc:	b29a      	uxth	r2, r3
 80104de:	4b71      	ldr	r3, [pc, #452]	; (80106a4 <tcp_receive+0x890>)
 80104e0:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 80104e2:	687b      	ldr	r3, [r7, #4]
 80104e4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80104e6:	4b6f      	ldr	r3, [pc, #444]	; (80106a4 <tcp_receive+0x890>)
 80104e8:	881b      	ldrh	r3, [r3, #0]
 80104ea:	429a      	cmp	r2, r3
 80104ec:	d275      	bcs.n	80105da <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80104ee:	4b6c      	ldr	r3, [pc, #432]	; (80106a0 <tcp_receive+0x88c>)
 80104f0:	68db      	ldr	r3, [r3, #12]
 80104f2:	899b      	ldrh	r3, [r3, #12]
 80104f4:	b29b      	uxth	r3, r3
 80104f6:	4618      	mov	r0, r3
 80104f8:	f7fa fc5a 	bl	800adb0 <lwip_htons>
 80104fc:	4603      	mov	r3, r0
 80104fe:	b2db      	uxtb	r3, r3
 8010500:	f003 0301 	and.w	r3, r3, #1
 8010504:	2b00      	cmp	r3, #0
 8010506:	d01f      	beq.n	8010548 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8010508:	4b65      	ldr	r3, [pc, #404]	; (80106a0 <tcp_receive+0x88c>)
 801050a:	68db      	ldr	r3, [r3, #12]
 801050c:	899b      	ldrh	r3, [r3, #12]
 801050e:	b29b      	uxth	r3, r3
 8010510:	b21b      	sxth	r3, r3
 8010512:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8010516:	b21c      	sxth	r4, r3
 8010518:	4b61      	ldr	r3, [pc, #388]	; (80106a0 <tcp_receive+0x88c>)
 801051a:	68db      	ldr	r3, [r3, #12]
 801051c:	899b      	ldrh	r3, [r3, #12]
 801051e:	b29b      	uxth	r3, r3
 8010520:	4618      	mov	r0, r3
 8010522:	f7fa fc45 	bl	800adb0 <lwip_htons>
 8010526:	4603      	mov	r3, r0
 8010528:	b2db      	uxtb	r3, r3
 801052a:	b29b      	uxth	r3, r3
 801052c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8010530:	b29b      	uxth	r3, r3
 8010532:	4618      	mov	r0, r3
 8010534:	f7fa fc3c 	bl	800adb0 <lwip_htons>
 8010538:	4603      	mov	r3, r0
 801053a:	b21b      	sxth	r3, r3
 801053c:	4323      	orrs	r3, r4
 801053e:	b21a      	sxth	r2, r3
 8010540:	4b57      	ldr	r3, [pc, #348]	; (80106a0 <tcp_receive+0x88c>)
 8010542:	68db      	ldr	r3, [r3, #12]
 8010544:	b292      	uxth	r2, r2
 8010546:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8010548:	687b      	ldr	r3, [r7, #4]
 801054a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801054c:	4b54      	ldr	r3, [pc, #336]	; (80106a0 <tcp_receive+0x88c>)
 801054e:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8010550:	4b53      	ldr	r3, [pc, #332]	; (80106a0 <tcp_receive+0x88c>)
 8010552:	68db      	ldr	r3, [r3, #12]
 8010554:	899b      	ldrh	r3, [r3, #12]
 8010556:	b29b      	uxth	r3, r3
 8010558:	4618      	mov	r0, r3
 801055a:	f7fa fc29 	bl	800adb0 <lwip_htons>
 801055e:	4603      	mov	r3, r0
 8010560:	b2db      	uxtb	r3, r3
 8010562:	f003 0302 	and.w	r3, r3, #2
 8010566:	2b00      	cmp	r3, #0
 8010568:	d005      	beq.n	8010576 <tcp_receive+0x762>
            inseg.len -= 1;
 801056a:	4b4d      	ldr	r3, [pc, #308]	; (80106a0 <tcp_receive+0x88c>)
 801056c:	891b      	ldrh	r3, [r3, #8]
 801056e:	3b01      	subs	r3, #1
 8010570:	b29a      	uxth	r2, r3
 8010572:	4b4b      	ldr	r3, [pc, #300]	; (80106a0 <tcp_receive+0x88c>)
 8010574:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8010576:	4b4a      	ldr	r3, [pc, #296]	; (80106a0 <tcp_receive+0x88c>)
 8010578:	685b      	ldr	r3, [r3, #4]
 801057a:	4a49      	ldr	r2, [pc, #292]	; (80106a0 <tcp_receive+0x88c>)
 801057c:	8912      	ldrh	r2, [r2, #8]
 801057e:	4611      	mov	r1, r2
 8010580:	4618      	mov	r0, r3
 8010582:	f7fb fec3 	bl	800c30c <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8010586:	4b46      	ldr	r3, [pc, #280]	; (80106a0 <tcp_receive+0x88c>)
 8010588:	891c      	ldrh	r4, [r3, #8]
 801058a:	4b45      	ldr	r3, [pc, #276]	; (80106a0 <tcp_receive+0x88c>)
 801058c:	68db      	ldr	r3, [r3, #12]
 801058e:	899b      	ldrh	r3, [r3, #12]
 8010590:	b29b      	uxth	r3, r3
 8010592:	4618      	mov	r0, r3
 8010594:	f7fa fc0c 	bl	800adb0 <lwip_htons>
 8010598:	4603      	mov	r3, r0
 801059a:	b2db      	uxtb	r3, r3
 801059c:	f003 0303 	and.w	r3, r3, #3
 80105a0:	2b00      	cmp	r3, #0
 80105a2:	d001      	beq.n	80105a8 <tcp_receive+0x794>
 80105a4:	2301      	movs	r3, #1
 80105a6:	e000      	b.n	80105aa <tcp_receive+0x796>
 80105a8:	2300      	movs	r3, #0
 80105aa:	4423      	add	r3, r4
 80105ac:	b29a      	uxth	r2, r3
 80105ae:	4b3d      	ldr	r3, [pc, #244]	; (80106a4 <tcp_receive+0x890>)
 80105b0:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80105b2:	4b3c      	ldr	r3, [pc, #240]	; (80106a4 <tcp_receive+0x890>)
 80105b4:	881b      	ldrh	r3, [r3, #0]
 80105b6:	461a      	mov	r2, r3
 80105b8:	4b38      	ldr	r3, [pc, #224]	; (801069c <tcp_receive+0x888>)
 80105ba:	681b      	ldr	r3, [r3, #0]
 80105bc:	441a      	add	r2, r3
 80105be:	687b      	ldr	r3, [r7, #4]
 80105c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80105c2:	6879      	ldr	r1, [r7, #4]
 80105c4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80105c6:	440b      	add	r3, r1
 80105c8:	429a      	cmp	r2, r3
 80105ca:	d006      	beq.n	80105da <tcp_receive+0x7c6>
 80105cc:	4b36      	ldr	r3, [pc, #216]	; (80106a8 <tcp_receive+0x894>)
 80105ce:	f240 52cb 	movw	r2, #1483	; 0x5cb
 80105d2:	4936      	ldr	r1, [pc, #216]	; (80106ac <tcp_receive+0x898>)
 80105d4:	4836      	ldr	r0, [pc, #216]	; (80106b0 <tcp_receive+0x89c>)
 80105d6:	f007 fef5 	bl	80183c4 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 80105da:	687b      	ldr	r3, [r7, #4]
 80105dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80105de:	2b00      	cmp	r3, #0
 80105e0:	f000 80e7 	beq.w	80107b2 <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80105e4:	4b2e      	ldr	r3, [pc, #184]	; (80106a0 <tcp_receive+0x88c>)
 80105e6:	68db      	ldr	r3, [r3, #12]
 80105e8:	899b      	ldrh	r3, [r3, #12]
 80105ea:	b29b      	uxth	r3, r3
 80105ec:	4618      	mov	r0, r3
 80105ee:	f7fa fbdf 	bl	800adb0 <lwip_htons>
 80105f2:	4603      	mov	r3, r0
 80105f4:	b2db      	uxtb	r3, r3
 80105f6:	f003 0301 	and.w	r3, r3, #1
 80105fa:	2b00      	cmp	r3, #0
 80105fc:	d010      	beq.n	8010620 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 80105fe:	e00a      	b.n	8010616 <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8010600:	687b      	ldr	r3, [r7, #4]
 8010602:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010604:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8010606:	687b      	ldr	r3, [r7, #4]
 8010608:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801060a:	681a      	ldr	r2, [r3, #0]
 801060c:	687b      	ldr	r3, [r7, #4]
 801060e:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8010610:	68f8      	ldr	r0, [r7, #12]
 8010612:	f7fd fca6 	bl	800df62 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8010616:	687b      	ldr	r3, [r7, #4]
 8010618:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801061a:	2b00      	cmp	r3, #0
 801061c:	d1f0      	bne.n	8010600 <tcp_receive+0x7ec>
 801061e:	e0c8      	b.n	80107b2 <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8010620:	687b      	ldr	r3, [r7, #4]
 8010622:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010624:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8010626:	e052      	b.n	80106ce <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8010628:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801062a:	68db      	ldr	r3, [r3, #12]
 801062c:	899b      	ldrh	r3, [r3, #12]
 801062e:	b29b      	uxth	r3, r3
 8010630:	4618      	mov	r0, r3
 8010632:	f7fa fbbd 	bl	800adb0 <lwip_htons>
 8010636:	4603      	mov	r3, r0
 8010638:	b2db      	uxtb	r3, r3
 801063a:	f003 0301 	and.w	r3, r3, #1
 801063e:	2b00      	cmp	r3, #0
 8010640:	d03d      	beq.n	80106be <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8010642:	4b17      	ldr	r3, [pc, #92]	; (80106a0 <tcp_receive+0x88c>)
 8010644:	68db      	ldr	r3, [r3, #12]
 8010646:	899b      	ldrh	r3, [r3, #12]
 8010648:	b29b      	uxth	r3, r3
 801064a:	4618      	mov	r0, r3
 801064c:	f7fa fbb0 	bl	800adb0 <lwip_htons>
 8010650:	4603      	mov	r3, r0
 8010652:	b2db      	uxtb	r3, r3
 8010654:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8010658:	2b00      	cmp	r3, #0
 801065a:	d130      	bne.n	80106be <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 801065c:	4b10      	ldr	r3, [pc, #64]	; (80106a0 <tcp_receive+0x88c>)
 801065e:	68db      	ldr	r3, [r3, #12]
 8010660:	899b      	ldrh	r3, [r3, #12]
 8010662:	b29c      	uxth	r4, r3
 8010664:	2001      	movs	r0, #1
 8010666:	f7fa fba3 	bl	800adb0 <lwip_htons>
 801066a:	4603      	mov	r3, r0
 801066c:	461a      	mov	r2, r3
 801066e:	4b0c      	ldr	r3, [pc, #48]	; (80106a0 <tcp_receive+0x88c>)
 8010670:	68db      	ldr	r3, [r3, #12]
 8010672:	4322      	orrs	r2, r4
 8010674:	b292      	uxth	r2, r2
 8010676:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8010678:	4b09      	ldr	r3, [pc, #36]	; (80106a0 <tcp_receive+0x88c>)
 801067a:	891c      	ldrh	r4, [r3, #8]
 801067c:	4b08      	ldr	r3, [pc, #32]	; (80106a0 <tcp_receive+0x88c>)
 801067e:	68db      	ldr	r3, [r3, #12]
 8010680:	899b      	ldrh	r3, [r3, #12]
 8010682:	b29b      	uxth	r3, r3
 8010684:	4618      	mov	r0, r3
 8010686:	f7fa fb93 	bl	800adb0 <lwip_htons>
 801068a:	4603      	mov	r3, r0
 801068c:	b2db      	uxtb	r3, r3
 801068e:	f003 0303 	and.w	r3, r3, #3
 8010692:	2b00      	cmp	r3, #0
 8010694:	d00e      	beq.n	80106b4 <tcp_receive+0x8a0>
 8010696:	2301      	movs	r3, #1
 8010698:	e00d      	b.n	80106b6 <tcp_receive+0x8a2>
 801069a:	bf00      	nop
 801069c:	20010db0 	.word	0x20010db0
 80106a0:	20010d90 	.word	0x20010d90
 80106a4:	20010dba 	.word	0x20010dba
 80106a8:	0801b294 	.word	0x0801b294
 80106ac:	0801b63c 	.word	0x0801b63c
 80106b0:	0801b2e0 	.word	0x0801b2e0
 80106b4:	2300      	movs	r3, #0
 80106b6:	4423      	add	r3, r4
 80106b8:	b29a      	uxth	r2, r3
 80106ba:	4b98      	ldr	r3, [pc, #608]	; (801091c <tcp_receive+0xb08>)
 80106bc:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 80106be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80106c0:	613b      	str	r3, [r7, #16]
              next = next->next;
 80106c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80106c4:	681b      	ldr	r3, [r3, #0]
 80106c6:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 80106c8:	6938      	ldr	r0, [r7, #16]
 80106ca:	f7fd fc4a 	bl	800df62 <tcp_seg_free>
            while (next &&
 80106ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80106d0:	2b00      	cmp	r3, #0
 80106d2:	d00e      	beq.n	80106f2 <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 80106d4:	4b91      	ldr	r3, [pc, #580]	; (801091c <tcp_receive+0xb08>)
 80106d6:	881b      	ldrh	r3, [r3, #0]
 80106d8:	461a      	mov	r2, r3
 80106da:	4b91      	ldr	r3, [pc, #580]	; (8010920 <tcp_receive+0xb0c>)
 80106dc:	681b      	ldr	r3, [r3, #0]
 80106de:	441a      	add	r2, r3
 80106e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80106e2:	68db      	ldr	r3, [r3, #12]
 80106e4:	685b      	ldr	r3, [r3, #4]
 80106e6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80106e8:	8909      	ldrh	r1, [r1, #8]
 80106ea:	440b      	add	r3, r1
 80106ec:	1ad3      	subs	r3, r2, r3
            while (next &&
 80106ee:	2b00      	cmp	r3, #0
 80106f0:	da9a      	bge.n	8010628 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 80106f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80106f4:	2b00      	cmp	r3, #0
 80106f6:	d059      	beq.n	80107ac <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 80106f8:	4b88      	ldr	r3, [pc, #544]	; (801091c <tcp_receive+0xb08>)
 80106fa:	881b      	ldrh	r3, [r3, #0]
 80106fc:	461a      	mov	r2, r3
 80106fe:	4b88      	ldr	r3, [pc, #544]	; (8010920 <tcp_receive+0xb0c>)
 8010700:	681b      	ldr	r3, [r3, #0]
 8010702:	441a      	add	r2, r3
 8010704:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010706:	68db      	ldr	r3, [r3, #12]
 8010708:	685b      	ldr	r3, [r3, #4]
 801070a:	1ad3      	subs	r3, r2, r3
            if (next &&
 801070c:	2b00      	cmp	r3, #0
 801070e:	dd4d      	ble.n	80107ac <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8010710:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010712:	68db      	ldr	r3, [r3, #12]
 8010714:	685b      	ldr	r3, [r3, #4]
 8010716:	b29a      	uxth	r2, r3
 8010718:	4b81      	ldr	r3, [pc, #516]	; (8010920 <tcp_receive+0xb0c>)
 801071a:	681b      	ldr	r3, [r3, #0]
 801071c:	b29b      	uxth	r3, r3
 801071e:	1ad3      	subs	r3, r2, r3
 8010720:	b29a      	uxth	r2, r3
 8010722:	4b80      	ldr	r3, [pc, #512]	; (8010924 <tcp_receive+0xb10>)
 8010724:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8010726:	4b7f      	ldr	r3, [pc, #508]	; (8010924 <tcp_receive+0xb10>)
 8010728:	68db      	ldr	r3, [r3, #12]
 801072a:	899b      	ldrh	r3, [r3, #12]
 801072c:	b29b      	uxth	r3, r3
 801072e:	4618      	mov	r0, r3
 8010730:	f7fa fb3e 	bl	800adb0 <lwip_htons>
 8010734:	4603      	mov	r3, r0
 8010736:	b2db      	uxtb	r3, r3
 8010738:	f003 0302 	and.w	r3, r3, #2
 801073c:	2b00      	cmp	r3, #0
 801073e:	d005      	beq.n	801074c <tcp_receive+0x938>
                inseg.len -= 1;
 8010740:	4b78      	ldr	r3, [pc, #480]	; (8010924 <tcp_receive+0xb10>)
 8010742:	891b      	ldrh	r3, [r3, #8]
 8010744:	3b01      	subs	r3, #1
 8010746:	b29a      	uxth	r2, r3
 8010748:	4b76      	ldr	r3, [pc, #472]	; (8010924 <tcp_receive+0xb10>)
 801074a:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 801074c:	4b75      	ldr	r3, [pc, #468]	; (8010924 <tcp_receive+0xb10>)
 801074e:	685b      	ldr	r3, [r3, #4]
 8010750:	4a74      	ldr	r2, [pc, #464]	; (8010924 <tcp_receive+0xb10>)
 8010752:	8912      	ldrh	r2, [r2, #8]
 8010754:	4611      	mov	r1, r2
 8010756:	4618      	mov	r0, r3
 8010758:	f7fb fdd8 	bl	800c30c <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 801075c:	4b71      	ldr	r3, [pc, #452]	; (8010924 <tcp_receive+0xb10>)
 801075e:	891c      	ldrh	r4, [r3, #8]
 8010760:	4b70      	ldr	r3, [pc, #448]	; (8010924 <tcp_receive+0xb10>)
 8010762:	68db      	ldr	r3, [r3, #12]
 8010764:	899b      	ldrh	r3, [r3, #12]
 8010766:	b29b      	uxth	r3, r3
 8010768:	4618      	mov	r0, r3
 801076a:	f7fa fb21 	bl	800adb0 <lwip_htons>
 801076e:	4603      	mov	r3, r0
 8010770:	b2db      	uxtb	r3, r3
 8010772:	f003 0303 	and.w	r3, r3, #3
 8010776:	2b00      	cmp	r3, #0
 8010778:	d001      	beq.n	801077e <tcp_receive+0x96a>
 801077a:	2301      	movs	r3, #1
 801077c:	e000      	b.n	8010780 <tcp_receive+0x96c>
 801077e:	2300      	movs	r3, #0
 8010780:	4423      	add	r3, r4
 8010782:	b29a      	uxth	r2, r3
 8010784:	4b65      	ldr	r3, [pc, #404]	; (801091c <tcp_receive+0xb08>)
 8010786:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8010788:	4b64      	ldr	r3, [pc, #400]	; (801091c <tcp_receive+0xb08>)
 801078a:	881b      	ldrh	r3, [r3, #0]
 801078c:	461a      	mov	r2, r3
 801078e:	4b64      	ldr	r3, [pc, #400]	; (8010920 <tcp_receive+0xb0c>)
 8010790:	681b      	ldr	r3, [r3, #0]
 8010792:	441a      	add	r2, r3
 8010794:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010796:	68db      	ldr	r3, [r3, #12]
 8010798:	685b      	ldr	r3, [r3, #4]
 801079a:	429a      	cmp	r2, r3
 801079c:	d006      	beq.n	80107ac <tcp_receive+0x998>
 801079e:	4b62      	ldr	r3, [pc, #392]	; (8010928 <tcp_receive+0xb14>)
 80107a0:	f240 52fc 	movw	r2, #1532	; 0x5fc
 80107a4:	4961      	ldr	r1, [pc, #388]	; (801092c <tcp_receive+0xb18>)
 80107a6:	4862      	ldr	r0, [pc, #392]	; (8010930 <tcp_receive+0xb1c>)
 80107a8:	f007 fe0c 	bl	80183c4 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 80107ac:	687b      	ldr	r3, [r7, #4]
 80107ae:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80107b0:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 80107b2:	4b5a      	ldr	r3, [pc, #360]	; (801091c <tcp_receive+0xb08>)
 80107b4:	881b      	ldrh	r3, [r3, #0]
 80107b6:	461a      	mov	r2, r3
 80107b8:	4b59      	ldr	r3, [pc, #356]	; (8010920 <tcp_receive+0xb0c>)
 80107ba:	681b      	ldr	r3, [r3, #0]
 80107bc:	441a      	add	r2, r3
 80107be:	687b      	ldr	r3, [r7, #4]
 80107c0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 80107c2:	687b      	ldr	r3, [r7, #4]
 80107c4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80107c6:	4b55      	ldr	r3, [pc, #340]	; (801091c <tcp_receive+0xb08>)
 80107c8:	881b      	ldrh	r3, [r3, #0]
 80107ca:	429a      	cmp	r2, r3
 80107cc:	d206      	bcs.n	80107dc <tcp_receive+0x9c8>
 80107ce:	4b56      	ldr	r3, [pc, #344]	; (8010928 <tcp_receive+0xb14>)
 80107d0:	f240 6207 	movw	r2, #1543	; 0x607
 80107d4:	4957      	ldr	r1, [pc, #348]	; (8010934 <tcp_receive+0xb20>)
 80107d6:	4856      	ldr	r0, [pc, #344]	; (8010930 <tcp_receive+0xb1c>)
 80107d8:	f007 fdf4 	bl	80183c4 <iprintf>
        pcb->rcv_wnd -= tcplen;
 80107dc:	687b      	ldr	r3, [r7, #4]
 80107de:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80107e0:	4b4e      	ldr	r3, [pc, #312]	; (801091c <tcp_receive+0xb08>)
 80107e2:	881b      	ldrh	r3, [r3, #0]
 80107e4:	1ad3      	subs	r3, r2, r3
 80107e6:	b29a      	uxth	r2, r3
 80107e8:	687b      	ldr	r3, [r7, #4]
 80107ea:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 80107ec:	6878      	ldr	r0, [r7, #4]
 80107ee:	f7fc fe93 	bl	800d518 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 80107f2:	4b4c      	ldr	r3, [pc, #304]	; (8010924 <tcp_receive+0xb10>)
 80107f4:	685b      	ldr	r3, [r3, #4]
 80107f6:	891b      	ldrh	r3, [r3, #8]
 80107f8:	2b00      	cmp	r3, #0
 80107fa:	d006      	beq.n	801080a <tcp_receive+0x9f6>
          recv_data = inseg.p;
 80107fc:	4b49      	ldr	r3, [pc, #292]	; (8010924 <tcp_receive+0xb10>)
 80107fe:	685b      	ldr	r3, [r3, #4]
 8010800:	4a4d      	ldr	r2, [pc, #308]	; (8010938 <tcp_receive+0xb24>)
 8010802:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8010804:	4b47      	ldr	r3, [pc, #284]	; (8010924 <tcp_receive+0xb10>)
 8010806:	2200      	movs	r2, #0
 8010808:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801080a:	4b46      	ldr	r3, [pc, #280]	; (8010924 <tcp_receive+0xb10>)
 801080c:	68db      	ldr	r3, [r3, #12]
 801080e:	899b      	ldrh	r3, [r3, #12]
 8010810:	b29b      	uxth	r3, r3
 8010812:	4618      	mov	r0, r3
 8010814:	f7fa facc 	bl	800adb0 <lwip_htons>
 8010818:	4603      	mov	r3, r0
 801081a:	b2db      	uxtb	r3, r3
 801081c:	f003 0301 	and.w	r3, r3, #1
 8010820:	2b00      	cmp	r3, #0
 8010822:	f000 80b8 	beq.w	8010996 <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8010826:	4b45      	ldr	r3, [pc, #276]	; (801093c <tcp_receive+0xb28>)
 8010828:	781b      	ldrb	r3, [r3, #0]
 801082a:	f043 0320 	orr.w	r3, r3, #32
 801082e:	b2da      	uxtb	r2, r3
 8010830:	4b42      	ldr	r3, [pc, #264]	; (801093c <tcp_receive+0xb28>)
 8010832:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8010834:	e0af      	b.n	8010996 <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8010836:	687b      	ldr	r3, [r7, #4]
 8010838:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801083a:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 801083c:	687b      	ldr	r3, [r7, #4]
 801083e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010840:	68db      	ldr	r3, [r3, #12]
 8010842:	685b      	ldr	r3, [r3, #4]
 8010844:	4a36      	ldr	r2, [pc, #216]	; (8010920 <tcp_receive+0xb0c>)
 8010846:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8010848:	68bb      	ldr	r3, [r7, #8]
 801084a:	891b      	ldrh	r3, [r3, #8]
 801084c:	461c      	mov	r4, r3
 801084e:	68bb      	ldr	r3, [r7, #8]
 8010850:	68db      	ldr	r3, [r3, #12]
 8010852:	899b      	ldrh	r3, [r3, #12]
 8010854:	b29b      	uxth	r3, r3
 8010856:	4618      	mov	r0, r3
 8010858:	f7fa faaa 	bl	800adb0 <lwip_htons>
 801085c:	4603      	mov	r3, r0
 801085e:	b2db      	uxtb	r3, r3
 8010860:	f003 0303 	and.w	r3, r3, #3
 8010864:	2b00      	cmp	r3, #0
 8010866:	d001      	beq.n	801086c <tcp_receive+0xa58>
 8010868:	2301      	movs	r3, #1
 801086a:	e000      	b.n	801086e <tcp_receive+0xa5a>
 801086c:	2300      	movs	r3, #0
 801086e:	191a      	adds	r2, r3, r4
 8010870:	687b      	ldr	r3, [r7, #4]
 8010872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010874:	441a      	add	r2, r3
 8010876:	687b      	ldr	r3, [r7, #4]
 8010878:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801087a:	687b      	ldr	r3, [r7, #4]
 801087c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801087e:	461c      	mov	r4, r3
 8010880:	68bb      	ldr	r3, [r7, #8]
 8010882:	891b      	ldrh	r3, [r3, #8]
 8010884:	461d      	mov	r5, r3
 8010886:	68bb      	ldr	r3, [r7, #8]
 8010888:	68db      	ldr	r3, [r3, #12]
 801088a:	899b      	ldrh	r3, [r3, #12]
 801088c:	b29b      	uxth	r3, r3
 801088e:	4618      	mov	r0, r3
 8010890:	f7fa fa8e 	bl	800adb0 <lwip_htons>
 8010894:	4603      	mov	r3, r0
 8010896:	b2db      	uxtb	r3, r3
 8010898:	f003 0303 	and.w	r3, r3, #3
 801089c:	2b00      	cmp	r3, #0
 801089e:	d001      	beq.n	80108a4 <tcp_receive+0xa90>
 80108a0:	2301      	movs	r3, #1
 80108a2:	e000      	b.n	80108a6 <tcp_receive+0xa92>
 80108a4:	2300      	movs	r3, #0
 80108a6:	442b      	add	r3, r5
 80108a8:	429c      	cmp	r4, r3
 80108aa:	d206      	bcs.n	80108ba <tcp_receive+0xaa6>
 80108ac:	4b1e      	ldr	r3, [pc, #120]	; (8010928 <tcp_receive+0xb14>)
 80108ae:	f240 622b 	movw	r2, #1579	; 0x62b
 80108b2:	4923      	ldr	r1, [pc, #140]	; (8010940 <tcp_receive+0xb2c>)
 80108b4:	481e      	ldr	r0, [pc, #120]	; (8010930 <tcp_receive+0xb1c>)
 80108b6:	f007 fd85 	bl	80183c4 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 80108ba:	68bb      	ldr	r3, [r7, #8]
 80108bc:	891b      	ldrh	r3, [r3, #8]
 80108be:	461c      	mov	r4, r3
 80108c0:	68bb      	ldr	r3, [r7, #8]
 80108c2:	68db      	ldr	r3, [r3, #12]
 80108c4:	899b      	ldrh	r3, [r3, #12]
 80108c6:	b29b      	uxth	r3, r3
 80108c8:	4618      	mov	r0, r3
 80108ca:	f7fa fa71 	bl	800adb0 <lwip_htons>
 80108ce:	4603      	mov	r3, r0
 80108d0:	b2db      	uxtb	r3, r3
 80108d2:	f003 0303 	and.w	r3, r3, #3
 80108d6:	2b00      	cmp	r3, #0
 80108d8:	d001      	beq.n	80108de <tcp_receive+0xaca>
 80108da:	2301      	movs	r3, #1
 80108dc:	e000      	b.n	80108e0 <tcp_receive+0xacc>
 80108de:	2300      	movs	r3, #0
 80108e0:	1919      	adds	r1, r3, r4
 80108e2:	687b      	ldr	r3, [r7, #4]
 80108e4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80108e6:	b28b      	uxth	r3, r1
 80108e8:	1ad3      	subs	r3, r2, r3
 80108ea:	b29a      	uxth	r2, r3
 80108ec:	687b      	ldr	r3, [r7, #4]
 80108ee:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 80108f0:	6878      	ldr	r0, [r7, #4]
 80108f2:	f7fc fe11 	bl	800d518 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 80108f6:	68bb      	ldr	r3, [r7, #8]
 80108f8:	685b      	ldr	r3, [r3, #4]
 80108fa:	891b      	ldrh	r3, [r3, #8]
 80108fc:	2b00      	cmp	r3, #0
 80108fe:	d028      	beq.n	8010952 <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8010900:	4b0d      	ldr	r3, [pc, #52]	; (8010938 <tcp_receive+0xb24>)
 8010902:	681b      	ldr	r3, [r3, #0]
 8010904:	2b00      	cmp	r3, #0
 8010906:	d01d      	beq.n	8010944 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 8010908:	4b0b      	ldr	r3, [pc, #44]	; (8010938 <tcp_receive+0xb24>)
 801090a:	681a      	ldr	r2, [r3, #0]
 801090c:	68bb      	ldr	r3, [r7, #8]
 801090e:	685b      	ldr	r3, [r3, #4]
 8010910:	4619      	mov	r1, r3
 8010912:	4610      	mov	r0, r2
 8010914:	f7fb ff4e 	bl	800c7b4 <pbuf_cat>
 8010918:	e018      	b.n	801094c <tcp_receive+0xb38>
 801091a:	bf00      	nop
 801091c:	20010dba 	.word	0x20010dba
 8010920:	20010db0 	.word	0x20010db0
 8010924:	20010d90 	.word	0x20010d90
 8010928:	0801b294 	.word	0x0801b294
 801092c:	0801b674 	.word	0x0801b674
 8010930:	0801b2e0 	.word	0x0801b2e0
 8010934:	0801b6b0 	.word	0x0801b6b0
 8010938:	20010dc0 	.word	0x20010dc0
 801093c:	20010dbd 	.word	0x20010dbd
 8010940:	0801b6d0 	.word	0x0801b6d0
            } else {
              recv_data = cseg->p;
 8010944:	68bb      	ldr	r3, [r7, #8]
 8010946:	685b      	ldr	r3, [r3, #4]
 8010948:	4a70      	ldr	r2, [pc, #448]	; (8010b0c <tcp_receive+0xcf8>)
 801094a:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 801094c:	68bb      	ldr	r3, [r7, #8]
 801094e:	2200      	movs	r2, #0
 8010950:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8010952:	68bb      	ldr	r3, [r7, #8]
 8010954:	68db      	ldr	r3, [r3, #12]
 8010956:	899b      	ldrh	r3, [r3, #12]
 8010958:	b29b      	uxth	r3, r3
 801095a:	4618      	mov	r0, r3
 801095c:	f7fa fa28 	bl	800adb0 <lwip_htons>
 8010960:	4603      	mov	r3, r0
 8010962:	b2db      	uxtb	r3, r3
 8010964:	f003 0301 	and.w	r3, r3, #1
 8010968:	2b00      	cmp	r3, #0
 801096a:	d00d      	beq.n	8010988 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 801096c:	4b68      	ldr	r3, [pc, #416]	; (8010b10 <tcp_receive+0xcfc>)
 801096e:	781b      	ldrb	r3, [r3, #0]
 8010970:	f043 0320 	orr.w	r3, r3, #32
 8010974:	b2da      	uxtb	r2, r3
 8010976:	4b66      	ldr	r3, [pc, #408]	; (8010b10 <tcp_receive+0xcfc>)
 8010978:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 801097a:	687b      	ldr	r3, [r7, #4]
 801097c:	7d1b      	ldrb	r3, [r3, #20]
 801097e:	2b04      	cmp	r3, #4
 8010980:	d102      	bne.n	8010988 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 8010982:	687b      	ldr	r3, [r7, #4]
 8010984:	2207      	movs	r2, #7
 8010986:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8010988:	68bb      	ldr	r3, [r7, #8]
 801098a:	681a      	ldr	r2, [r3, #0]
 801098c:	687b      	ldr	r3, [r7, #4]
 801098e:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8010990:	68b8      	ldr	r0, [r7, #8]
 8010992:	f7fd fae6 	bl	800df62 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8010996:	687b      	ldr	r3, [r7, #4]
 8010998:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801099a:	2b00      	cmp	r3, #0
 801099c:	d008      	beq.n	80109b0 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 801099e:	687b      	ldr	r3, [r7, #4]
 80109a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80109a2:	68db      	ldr	r3, [r3, #12]
 80109a4:	685a      	ldr	r2, [r3, #4]
 80109a6:	687b      	ldr	r3, [r7, #4]
 80109a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 80109aa:	429a      	cmp	r2, r3
 80109ac:	f43f af43 	beq.w	8010836 <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 80109b0:	687b      	ldr	r3, [r7, #4]
 80109b2:	8b5b      	ldrh	r3, [r3, #26]
 80109b4:	f003 0301 	and.w	r3, r3, #1
 80109b8:	2b00      	cmp	r3, #0
 80109ba:	d00e      	beq.n	80109da <tcp_receive+0xbc6>
 80109bc:	687b      	ldr	r3, [r7, #4]
 80109be:	8b5b      	ldrh	r3, [r3, #26]
 80109c0:	f023 0301 	bic.w	r3, r3, #1
 80109c4:	b29a      	uxth	r2, r3
 80109c6:	687b      	ldr	r3, [r7, #4]
 80109c8:	835a      	strh	r2, [r3, #26]
 80109ca:	687b      	ldr	r3, [r7, #4]
 80109cc:	8b5b      	ldrh	r3, [r3, #26]
 80109ce:	f043 0302 	orr.w	r3, r3, #2
 80109d2:	b29a      	uxth	r2, r3
 80109d4:	687b      	ldr	r3, [r7, #4]
 80109d6:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80109d8:	e188      	b.n	8010cec <tcp_receive+0xed8>
        tcp_ack(pcb);
 80109da:	687b      	ldr	r3, [r7, #4]
 80109dc:	8b5b      	ldrh	r3, [r3, #26]
 80109de:	f043 0301 	orr.w	r3, r3, #1
 80109e2:	b29a      	uxth	r2, r3
 80109e4:	687b      	ldr	r3, [r7, #4]
 80109e6:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80109e8:	e180      	b.n	8010cec <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 80109ea:	687b      	ldr	r3, [r7, #4]
 80109ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80109ee:	2b00      	cmp	r3, #0
 80109f0:	d106      	bne.n	8010a00 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 80109f2:	4848      	ldr	r0, [pc, #288]	; (8010b14 <tcp_receive+0xd00>)
 80109f4:	f7fd faec 	bl	800dfd0 <tcp_seg_copy>
 80109f8:	4602      	mov	r2, r0
 80109fa:	687b      	ldr	r3, [r7, #4]
 80109fc:	675a      	str	r2, [r3, #116]	; 0x74
 80109fe:	e16d      	b.n	8010cdc <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8010a00:	2300      	movs	r3, #0
 8010a02:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8010a04:	687b      	ldr	r3, [r7, #4]
 8010a06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010a08:	63bb      	str	r3, [r7, #56]	; 0x38
 8010a0a:	e157      	b.n	8010cbc <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 8010a0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a0e:	68db      	ldr	r3, [r3, #12]
 8010a10:	685a      	ldr	r2, [r3, #4]
 8010a12:	4b41      	ldr	r3, [pc, #260]	; (8010b18 <tcp_receive+0xd04>)
 8010a14:	681b      	ldr	r3, [r3, #0]
 8010a16:	429a      	cmp	r2, r3
 8010a18:	d11d      	bne.n	8010a56 <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8010a1a:	4b3e      	ldr	r3, [pc, #248]	; (8010b14 <tcp_receive+0xd00>)
 8010a1c:	891a      	ldrh	r2, [r3, #8]
 8010a1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a20:	891b      	ldrh	r3, [r3, #8]
 8010a22:	429a      	cmp	r2, r3
 8010a24:	f240 814f 	bls.w	8010cc6 <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8010a28:	483a      	ldr	r0, [pc, #232]	; (8010b14 <tcp_receive+0xd00>)
 8010a2a:	f7fd fad1 	bl	800dfd0 <tcp_seg_copy>
 8010a2e:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8010a30:	697b      	ldr	r3, [r7, #20]
 8010a32:	2b00      	cmp	r3, #0
 8010a34:	f000 8149 	beq.w	8010cca <tcp_receive+0xeb6>
                  if (prev != NULL) {
 8010a38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010a3a:	2b00      	cmp	r3, #0
 8010a3c:	d003      	beq.n	8010a46 <tcp_receive+0xc32>
                    prev->next = cseg;
 8010a3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010a40:	697a      	ldr	r2, [r7, #20]
 8010a42:	601a      	str	r2, [r3, #0]
 8010a44:	e002      	b.n	8010a4c <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 8010a46:	687b      	ldr	r3, [r7, #4]
 8010a48:	697a      	ldr	r2, [r7, #20]
 8010a4a:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8010a4c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010a4e:	6978      	ldr	r0, [r7, #20]
 8010a50:	f7ff f8dc 	bl	800fc0c <tcp_oos_insert_segment>
                }
                break;
 8010a54:	e139      	b.n	8010cca <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8010a56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010a58:	2b00      	cmp	r3, #0
 8010a5a:	d117      	bne.n	8010a8c <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8010a5c:	4b2e      	ldr	r3, [pc, #184]	; (8010b18 <tcp_receive+0xd04>)
 8010a5e:	681a      	ldr	r2, [r3, #0]
 8010a60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a62:	68db      	ldr	r3, [r3, #12]
 8010a64:	685b      	ldr	r3, [r3, #4]
 8010a66:	1ad3      	subs	r3, r2, r3
 8010a68:	2b00      	cmp	r3, #0
 8010a6a:	da57      	bge.n	8010b1c <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8010a6c:	4829      	ldr	r0, [pc, #164]	; (8010b14 <tcp_receive+0xd00>)
 8010a6e:	f7fd faaf 	bl	800dfd0 <tcp_seg_copy>
 8010a72:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8010a74:	69bb      	ldr	r3, [r7, #24]
 8010a76:	2b00      	cmp	r3, #0
 8010a78:	f000 8129 	beq.w	8010cce <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 8010a7c:	687b      	ldr	r3, [r7, #4]
 8010a7e:	69ba      	ldr	r2, [r7, #24]
 8010a80:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 8010a82:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010a84:	69b8      	ldr	r0, [r7, #24]
 8010a86:	f7ff f8c1 	bl	800fc0c <tcp_oos_insert_segment>
                  }
                  break;
 8010a8a:	e120      	b.n	8010cce <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8010a8c:	4b22      	ldr	r3, [pc, #136]	; (8010b18 <tcp_receive+0xd04>)
 8010a8e:	681a      	ldr	r2, [r3, #0]
 8010a90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010a92:	68db      	ldr	r3, [r3, #12]
 8010a94:	685b      	ldr	r3, [r3, #4]
 8010a96:	1ad3      	subs	r3, r2, r3
 8010a98:	3b01      	subs	r3, #1
 8010a9a:	2b00      	cmp	r3, #0
 8010a9c:	db3e      	blt.n	8010b1c <tcp_receive+0xd08>
 8010a9e:	4b1e      	ldr	r3, [pc, #120]	; (8010b18 <tcp_receive+0xd04>)
 8010aa0:	681a      	ldr	r2, [r3, #0]
 8010aa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010aa4:	68db      	ldr	r3, [r3, #12]
 8010aa6:	685b      	ldr	r3, [r3, #4]
 8010aa8:	1ad3      	subs	r3, r2, r3
 8010aaa:	3301      	adds	r3, #1
 8010aac:	2b00      	cmp	r3, #0
 8010aae:	dc35      	bgt.n	8010b1c <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8010ab0:	4818      	ldr	r0, [pc, #96]	; (8010b14 <tcp_receive+0xd00>)
 8010ab2:	f7fd fa8d 	bl	800dfd0 <tcp_seg_copy>
 8010ab6:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8010ab8:	69fb      	ldr	r3, [r7, #28]
 8010aba:	2b00      	cmp	r3, #0
 8010abc:	f000 8109 	beq.w	8010cd2 <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8010ac0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010ac2:	68db      	ldr	r3, [r3, #12]
 8010ac4:	685b      	ldr	r3, [r3, #4]
 8010ac6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010ac8:	8912      	ldrh	r2, [r2, #8]
 8010aca:	441a      	add	r2, r3
 8010acc:	4b12      	ldr	r3, [pc, #72]	; (8010b18 <tcp_receive+0xd04>)
 8010ace:	681b      	ldr	r3, [r3, #0]
 8010ad0:	1ad3      	subs	r3, r2, r3
 8010ad2:	2b00      	cmp	r3, #0
 8010ad4:	dd12      	ble.n	8010afc <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8010ad6:	4b10      	ldr	r3, [pc, #64]	; (8010b18 <tcp_receive+0xd04>)
 8010ad8:	681b      	ldr	r3, [r3, #0]
 8010ada:	b29a      	uxth	r2, r3
 8010adc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010ade:	68db      	ldr	r3, [r3, #12]
 8010ae0:	685b      	ldr	r3, [r3, #4]
 8010ae2:	b29b      	uxth	r3, r3
 8010ae4:	1ad3      	subs	r3, r2, r3
 8010ae6:	b29a      	uxth	r2, r3
 8010ae8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010aea:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8010aec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010aee:	685a      	ldr	r2, [r3, #4]
 8010af0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010af2:	891b      	ldrh	r3, [r3, #8]
 8010af4:	4619      	mov	r1, r3
 8010af6:	4610      	mov	r0, r2
 8010af8:	f7fb fc08 	bl	800c30c <pbuf_realloc>
                    }
                    prev->next = cseg;
 8010afc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010afe:	69fa      	ldr	r2, [r7, #28]
 8010b00:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8010b02:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010b04:	69f8      	ldr	r0, [r7, #28]
 8010b06:	f7ff f881 	bl	800fc0c <tcp_oos_insert_segment>
                  }
                  break;
 8010b0a:	e0e2      	b.n	8010cd2 <tcp_receive+0xebe>
 8010b0c:	20010dc0 	.word	0x20010dc0
 8010b10:	20010dbd 	.word	0x20010dbd
 8010b14:	20010d90 	.word	0x20010d90
 8010b18:	20010db0 	.word	0x20010db0
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8010b1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b1e:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8010b20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b22:	681b      	ldr	r3, [r3, #0]
 8010b24:	2b00      	cmp	r3, #0
 8010b26:	f040 80c6 	bne.w	8010cb6 <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8010b2a:	4b80      	ldr	r3, [pc, #512]	; (8010d2c <tcp_receive+0xf18>)
 8010b2c:	681a      	ldr	r2, [r3, #0]
 8010b2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b30:	68db      	ldr	r3, [r3, #12]
 8010b32:	685b      	ldr	r3, [r3, #4]
 8010b34:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8010b36:	2b00      	cmp	r3, #0
 8010b38:	f340 80bd 	ble.w	8010cb6 <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8010b3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b3e:	68db      	ldr	r3, [r3, #12]
 8010b40:	899b      	ldrh	r3, [r3, #12]
 8010b42:	b29b      	uxth	r3, r3
 8010b44:	4618      	mov	r0, r3
 8010b46:	f7fa f933 	bl	800adb0 <lwip_htons>
 8010b4a:	4603      	mov	r3, r0
 8010b4c:	b2db      	uxtb	r3, r3
 8010b4e:	f003 0301 	and.w	r3, r3, #1
 8010b52:	2b00      	cmp	r3, #0
 8010b54:	f040 80bf 	bne.w	8010cd6 <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8010b58:	4875      	ldr	r0, [pc, #468]	; (8010d30 <tcp_receive+0xf1c>)
 8010b5a:	f7fd fa39 	bl	800dfd0 <tcp_seg_copy>
 8010b5e:	4602      	mov	r2, r0
 8010b60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b62:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8010b64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b66:	681b      	ldr	r3, [r3, #0]
 8010b68:	2b00      	cmp	r3, #0
 8010b6a:	f000 80b6 	beq.w	8010cda <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8010b6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b70:	68db      	ldr	r3, [r3, #12]
 8010b72:	685b      	ldr	r3, [r3, #4]
 8010b74:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010b76:	8912      	ldrh	r2, [r2, #8]
 8010b78:	441a      	add	r2, r3
 8010b7a:	4b6c      	ldr	r3, [pc, #432]	; (8010d2c <tcp_receive+0xf18>)
 8010b7c:	681b      	ldr	r3, [r3, #0]
 8010b7e:	1ad3      	subs	r3, r2, r3
 8010b80:	2b00      	cmp	r3, #0
 8010b82:	dd12      	ble.n	8010baa <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8010b84:	4b69      	ldr	r3, [pc, #420]	; (8010d2c <tcp_receive+0xf18>)
 8010b86:	681b      	ldr	r3, [r3, #0]
 8010b88:	b29a      	uxth	r2, r3
 8010b8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b8c:	68db      	ldr	r3, [r3, #12]
 8010b8e:	685b      	ldr	r3, [r3, #4]
 8010b90:	b29b      	uxth	r3, r3
 8010b92:	1ad3      	subs	r3, r2, r3
 8010b94:	b29a      	uxth	r2, r3
 8010b96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b98:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8010b9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b9c:	685a      	ldr	r2, [r3, #4]
 8010b9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ba0:	891b      	ldrh	r3, [r3, #8]
 8010ba2:	4619      	mov	r1, r3
 8010ba4:	4610      	mov	r0, r2
 8010ba6:	f7fb fbb1 	bl	800c30c <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8010baa:	4b62      	ldr	r3, [pc, #392]	; (8010d34 <tcp_receive+0xf20>)
 8010bac:	881b      	ldrh	r3, [r3, #0]
 8010bae:	461a      	mov	r2, r3
 8010bb0:	4b5e      	ldr	r3, [pc, #376]	; (8010d2c <tcp_receive+0xf18>)
 8010bb2:	681b      	ldr	r3, [r3, #0]
 8010bb4:	441a      	add	r2, r3
 8010bb6:	687b      	ldr	r3, [r7, #4]
 8010bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010bba:	6879      	ldr	r1, [r7, #4]
 8010bbc:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010bbe:	440b      	add	r3, r1
 8010bc0:	1ad3      	subs	r3, r2, r3
 8010bc2:	2b00      	cmp	r3, #0
 8010bc4:	f340 8089 	ble.w	8010cda <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8010bc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010bca:	681b      	ldr	r3, [r3, #0]
 8010bcc:	68db      	ldr	r3, [r3, #12]
 8010bce:	899b      	ldrh	r3, [r3, #12]
 8010bd0:	b29b      	uxth	r3, r3
 8010bd2:	4618      	mov	r0, r3
 8010bd4:	f7fa f8ec 	bl	800adb0 <lwip_htons>
 8010bd8:	4603      	mov	r3, r0
 8010bda:	b2db      	uxtb	r3, r3
 8010bdc:	f003 0301 	and.w	r3, r3, #1
 8010be0:	2b00      	cmp	r3, #0
 8010be2:	d022      	beq.n	8010c2a <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8010be4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010be6:	681b      	ldr	r3, [r3, #0]
 8010be8:	68db      	ldr	r3, [r3, #12]
 8010bea:	899b      	ldrh	r3, [r3, #12]
 8010bec:	b29b      	uxth	r3, r3
 8010bee:	b21b      	sxth	r3, r3
 8010bf0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8010bf4:	b21c      	sxth	r4, r3
 8010bf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010bf8:	681b      	ldr	r3, [r3, #0]
 8010bfa:	68db      	ldr	r3, [r3, #12]
 8010bfc:	899b      	ldrh	r3, [r3, #12]
 8010bfe:	b29b      	uxth	r3, r3
 8010c00:	4618      	mov	r0, r3
 8010c02:	f7fa f8d5 	bl	800adb0 <lwip_htons>
 8010c06:	4603      	mov	r3, r0
 8010c08:	b2db      	uxtb	r3, r3
 8010c0a:	b29b      	uxth	r3, r3
 8010c0c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8010c10:	b29b      	uxth	r3, r3
 8010c12:	4618      	mov	r0, r3
 8010c14:	f7fa f8cc 	bl	800adb0 <lwip_htons>
 8010c18:	4603      	mov	r3, r0
 8010c1a:	b21b      	sxth	r3, r3
 8010c1c:	4323      	orrs	r3, r4
 8010c1e:	b21a      	sxth	r2, r3
 8010c20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c22:	681b      	ldr	r3, [r3, #0]
 8010c24:	68db      	ldr	r3, [r3, #12]
 8010c26:	b292      	uxth	r2, r2
 8010c28:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8010c2a:	687b      	ldr	r3, [r7, #4]
 8010c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010c2e:	b29a      	uxth	r2, r3
 8010c30:	687b      	ldr	r3, [r7, #4]
 8010c32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010c34:	4413      	add	r3, r2
 8010c36:	b299      	uxth	r1, r3
 8010c38:	4b3c      	ldr	r3, [pc, #240]	; (8010d2c <tcp_receive+0xf18>)
 8010c3a:	681b      	ldr	r3, [r3, #0]
 8010c3c:	b29a      	uxth	r2, r3
 8010c3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c40:	681b      	ldr	r3, [r3, #0]
 8010c42:	1a8a      	subs	r2, r1, r2
 8010c44:	b292      	uxth	r2, r2
 8010c46:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8010c48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c4a:	681b      	ldr	r3, [r3, #0]
 8010c4c:	685a      	ldr	r2, [r3, #4]
 8010c4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c50:	681b      	ldr	r3, [r3, #0]
 8010c52:	891b      	ldrh	r3, [r3, #8]
 8010c54:	4619      	mov	r1, r3
 8010c56:	4610      	mov	r0, r2
 8010c58:	f7fb fb58 	bl	800c30c <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8010c5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c5e:	681b      	ldr	r3, [r3, #0]
 8010c60:	891c      	ldrh	r4, [r3, #8]
 8010c62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c64:	681b      	ldr	r3, [r3, #0]
 8010c66:	68db      	ldr	r3, [r3, #12]
 8010c68:	899b      	ldrh	r3, [r3, #12]
 8010c6a:	b29b      	uxth	r3, r3
 8010c6c:	4618      	mov	r0, r3
 8010c6e:	f7fa f89f 	bl	800adb0 <lwip_htons>
 8010c72:	4603      	mov	r3, r0
 8010c74:	b2db      	uxtb	r3, r3
 8010c76:	f003 0303 	and.w	r3, r3, #3
 8010c7a:	2b00      	cmp	r3, #0
 8010c7c:	d001      	beq.n	8010c82 <tcp_receive+0xe6e>
 8010c7e:	2301      	movs	r3, #1
 8010c80:	e000      	b.n	8010c84 <tcp_receive+0xe70>
 8010c82:	2300      	movs	r3, #0
 8010c84:	4423      	add	r3, r4
 8010c86:	b29a      	uxth	r2, r3
 8010c88:	4b2a      	ldr	r3, [pc, #168]	; (8010d34 <tcp_receive+0xf20>)
 8010c8a:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8010c8c:	4b29      	ldr	r3, [pc, #164]	; (8010d34 <tcp_receive+0xf20>)
 8010c8e:	881b      	ldrh	r3, [r3, #0]
 8010c90:	461a      	mov	r2, r3
 8010c92:	4b26      	ldr	r3, [pc, #152]	; (8010d2c <tcp_receive+0xf18>)
 8010c94:	681b      	ldr	r3, [r3, #0]
 8010c96:	441a      	add	r2, r3
 8010c98:	687b      	ldr	r3, [r7, #4]
 8010c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010c9c:	6879      	ldr	r1, [r7, #4]
 8010c9e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010ca0:	440b      	add	r3, r1
 8010ca2:	429a      	cmp	r2, r3
 8010ca4:	d019      	beq.n	8010cda <tcp_receive+0xec6>
 8010ca6:	4b24      	ldr	r3, [pc, #144]	; (8010d38 <tcp_receive+0xf24>)
 8010ca8:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 8010cac:	4923      	ldr	r1, [pc, #140]	; (8010d3c <tcp_receive+0xf28>)
 8010cae:	4824      	ldr	r0, [pc, #144]	; (8010d40 <tcp_receive+0xf2c>)
 8010cb0:	f007 fb88 	bl	80183c4 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8010cb4:	e011      	b.n	8010cda <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8010cb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010cb8:	681b      	ldr	r3, [r3, #0]
 8010cba:	63bb      	str	r3, [r7, #56]	; 0x38
 8010cbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010cbe:	2b00      	cmp	r3, #0
 8010cc0:	f47f aea4 	bne.w	8010a0c <tcp_receive+0xbf8>
 8010cc4:	e00a      	b.n	8010cdc <tcp_receive+0xec8>
                break;
 8010cc6:	bf00      	nop
 8010cc8:	e008      	b.n	8010cdc <tcp_receive+0xec8>
                break;
 8010cca:	bf00      	nop
 8010ccc:	e006      	b.n	8010cdc <tcp_receive+0xec8>
                  break;
 8010cce:	bf00      	nop
 8010cd0:	e004      	b.n	8010cdc <tcp_receive+0xec8>
                  break;
 8010cd2:	bf00      	nop
 8010cd4:	e002      	b.n	8010cdc <tcp_receive+0xec8>
                  break;
 8010cd6:	bf00      	nop
 8010cd8:	e000      	b.n	8010cdc <tcp_receive+0xec8>
                break;
 8010cda:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8010cdc:	6878      	ldr	r0, [r7, #4]
 8010cde:	f001 fe8b 	bl	80129f8 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8010ce2:	e003      	b.n	8010cec <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8010ce4:	6878      	ldr	r0, [r7, #4]
 8010ce6:	f001 fe87 	bl	80129f8 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8010cea:	e01a      	b.n	8010d22 <tcp_receive+0xf0e>
 8010cec:	e019      	b.n	8010d22 <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8010cee:	4b0f      	ldr	r3, [pc, #60]	; (8010d2c <tcp_receive+0xf18>)
 8010cf0:	681a      	ldr	r2, [r3, #0]
 8010cf2:	687b      	ldr	r3, [r7, #4]
 8010cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010cf6:	1ad3      	subs	r3, r2, r3
 8010cf8:	2b00      	cmp	r3, #0
 8010cfa:	db0a      	blt.n	8010d12 <tcp_receive+0xefe>
 8010cfc:	4b0b      	ldr	r3, [pc, #44]	; (8010d2c <tcp_receive+0xf18>)
 8010cfe:	681a      	ldr	r2, [r3, #0]
 8010d00:	687b      	ldr	r3, [r7, #4]
 8010d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010d04:	6879      	ldr	r1, [r7, #4]
 8010d06:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010d08:	440b      	add	r3, r1
 8010d0a:	1ad3      	subs	r3, r2, r3
 8010d0c:	3301      	adds	r3, #1
 8010d0e:	2b00      	cmp	r3, #0
 8010d10:	dd07      	ble.n	8010d22 <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 8010d12:	687b      	ldr	r3, [r7, #4]
 8010d14:	8b5b      	ldrh	r3, [r3, #26]
 8010d16:	f043 0302 	orr.w	r3, r3, #2
 8010d1a:	b29a      	uxth	r2, r3
 8010d1c:	687b      	ldr	r3, [r7, #4]
 8010d1e:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8010d20:	e7ff      	b.n	8010d22 <tcp_receive+0xf0e>
 8010d22:	bf00      	nop
 8010d24:	3750      	adds	r7, #80	; 0x50
 8010d26:	46bd      	mov	sp, r7
 8010d28:	bdb0      	pop	{r4, r5, r7, pc}
 8010d2a:	bf00      	nop
 8010d2c:	20010db0 	.word	0x20010db0
 8010d30:	20010d90 	.word	0x20010d90
 8010d34:	20010dba 	.word	0x20010dba
 8010d38:	0801b294 	.word	0x0801b294
 8010d3c:	0801b63c 	.word	0x0801b63c
 8010d40:	0801b2e0 	.word	0x0801b2e0

08010d44 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8010d44:	b480      	push	{r7}
 8010d46:	b083      	sub	sp, #12
 8010d48:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8010d4a:	4b15      	ldr	r3, [pc, #84]	; (8010da0 <tcp_get_next_optbyte+0x5c>)
 8010d4c:	881b      	ldrh	r3, [r3, #0]
 8010d4e:	1c5a      	adds	r2, r3, #1
 8010d50:	b291      	uxth	r1, r2
 8010d52:	4a13      	ldr	r2, [pc, #76]	; (8010da0 <tcp_get_next_optbyte+0x5c>)
 8010d54:	8011      	strh	r1, [r2, #0]
 8010d56:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8010d58:	4b12      	ldr	r3, [pc, #72]	; (8010da4 <tcp_get_next_optbyte+0x60>)
 8010d5a:	681b      	ldr	r3, [r3, #0]
 8010d5c:	2b00      	cmp	r3, #0
 8010d5e:	d004      	beq.n	8010d6a <tcp_get_next_optbyte+0x26>
 8010d60:	4b11      	ldr	r3, [pc, #68]	; (8010da8 <tcp_get_next_optbyte+0x64>)
 8010d62:	881b      	ldrh	r3, [r3, #0]
 8010d64:	88fa      	ldrh	r2, [r7, #6]
 8010d66:	429a      	cmp	r2, r3
 8010d68:	d208      	bcs.n	8010d7c <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8010d6a:	4b10      	ldr	r3, [pc, #64]	; (8010dac <tcp_get_next_optbyte+0x68>)
 8010d6c:	681b      	ldr	r3, [r3, #0]
 8010d6e:	3314      	adds	r3, #20
 8010d70:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8010d72:	88fb      	ldrh	r3, [r7, #6]
 8010d74:	683a      	ldr	r2, [r7, #0]
 8010d76:	4413      	add	r3, r2
 8010d78:	781b      	ldrb	r3, [r3, #0]
 8010d7a:	e00b      	b.n	8010d94 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8010d7c:	88fb      	ldrh	r3, [r7, #6]
 8010d7e:	b2da      	uxtb	r2, r3
 8010d80:	4b09      	ldr	r3, [pc, #36]	; (8010da8 <tcp_get_next_optbyte+0x64>)
 8010d82:	881b      	ldrh	r3, [r3, #0]
 8010d84:	b2db      	uxtb	r3, r3
 8010d86:	1ad3      	subs	r3, r2, r3
 8010d88:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8010d8a:	4b06      	ldr	r3, [pc, #24]	; (8010da4 <tcp_get_next_optbyte+0x60>)
 8010d8c:	681a      	ldr	r2, [r3, #0]
 8010d8e:	797b      	ldrb	r3, [r7, #5]
 8010d90:	4413      	add	r3, r2
 8010d92:	781b      	ldrb	r3, [r3, #0]
  }
}
 8010d94:	4618      	mov	r0, r3
 8010d96:	370c      	adds	r7, #12
 8010d98:	46bd      	mov	sp, r7
 8010d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d9e:	4770      	bx	lr
 8010da0:	20010dac 	.word	0x20010dac
 8010da4:	20010da8 	.word	0x20010da8
 8010da8:	20010da6 	.word	0x20010da6
 8010dac:	20010da0 	.word	0x20010da0

08010db0 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8010db0:	b580      	push	{r7, lr}
 8010db2:	b084      	sub	sp, #16
 8010db4:	af00      	add	r7, sp, #0
 8010db6:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8010db8:	687b      	ldr	r3, [r7, #4]
 8010dba:	2b00      	cmp	r3, #0
 8010dbc:	d106      	bne.n	8010dcc <tcp_parseopt+0x1c>
 8010dbe:	4b32      	ldr	r3, [pc, #200]	; (8010e88 <tcp_parseopt+0xd8>)
 8010dc0:	f240 727d 	movw	r2, #1917	; 0x77d
 8010dc4:	4931      	ldr	r1, [pc, #196]	; (8010e8c <tcp_parseopt+0xdc>)
 8010dc6:	4832      	ldr	r0, [pc, #200]	; (8010e90 <tcp_parseopt+0xe0>)
 8010dc8:	f007 fafc 	bl	80183c4 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8010dcc:	4b31      	ldr	r3, [pc, #196]	; (8010e94 <tcp_parseopt+0xe4>)
 8010dce:	881b      	ldrh	r3, [r3, #0]
 8010dd0:	2b00      	cmp	r3, #0
 8010dd2:	d055      	beq.n	8010e80 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8010dd4:	4b30      	ldr	r3, [pc, #192]	; (8010e98 <tcp_parseopt+0xe8>)
 8010dd6:	2200      	movs	r2, #0
 8010dd8:	801a      	strh	r2, [r3, #0]
 8010dda:	e045      	b.n	8010e68 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 8010ddc:	f7ff ffb2 	bl	8010d44 <tcp_get_next_optbyte>
 8010de0:	4603      	mov	r3, r0
 8010de2:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8010de4:	7bfb      	ldrb	r3, [r7, #15]
 8010de6:	2b02      	cmp	r3, #2
 8010de8:	d006      	beq.n	8010df8 <tcp_parseopt+0x48>
 8010dea:	2b02      	cmp	r3, #2
 8010dec:	dc2b      	bgt.n	8010e46 <tcp_parseopt+0x96>
 8010dee:	2b00      	cmp	r3, #0
 8010df0:	d041      	beq.n	8010e76 <tcp_parseopt+0xc6>
 8010df2:	2b01      	cmp	r3, #1
 8010df4:	d127      	bne.n	8010e46 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 8010df6:	e037      	b.n	8010e68 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8010df8:	f7ff ffa4 	bl	8010d44 <tcp_get_next_optbyte>
 8010dfc:	4603      	mov	r3, r0
 8010dfe:	2b04      	cmp	r3, #4
 8010e00:	d13b      	bne.n	8010e7a <tcp_parseopt+0xca>
 8010e02:	4b25      	ldr	r3, [pc, #148]	; (8010e98 <tcp_parseopt+0xe8>)
 8010e04:	881b      	ldrh	r3, [r3, #0]
 8010e06:	3301      	adds	r3, #1
 8010e08:	4a22      	ldr	r2, [pc, #136]	; (8010e94 <tcp_parseopt+0xe4>)
 8010e0a:	8812      	ldrh	r2, [r2, #0]
 8010e0c:	4293      	cmp	r3, r2
 8010e0e:	da34      	bge.n	8010e7a <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8010e10:	f7ff ff98 	bl	8010d44 <tcp_get_next_optbyte>
 8010e14:	4603      	mov	r3, r0
 8010e16:	b29b      	uxth	r3, r3
 8010e18:	021b      	lsls	r3, r3, #8
 8010e1a:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8010e1c:	f7ff ff92 	bl	8010d44 <tcp_get_next_optbyte>
 8010e20:	4603      	mov	r3, r0
 8010e22:	b29a      	uxth	r2, r3
 8010e24:	89bb      	ldrh	r3, [r7, #12]
 8010e26:	4313      	orrs	r3, r2
 8010e28:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8010e2a:	89bb      	ldrh	r3, [r7, #12]
 8010e2c:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8010e30:	d804      	bhi.n	8010e3c <tcp_parseopt+0x8c>
 8010e32:	89bb      	ldrh	r3, [r7, #12]
 8010e34:	2b00      	cmp	r3, #0
 8010e36:	d001      	beq.n	8010e3c <tcp_parseopt+0x8c>
 8010e38:	89ba      	ldrh	r2, [r7, #12]
 8010e3a:	e001      	b.n	8010e40 <tcp_parseopt+0x90>
 8010e3c:	f44f 7206 	mov.w	r2, #536	; 0x218
 8010e40:	687b      	ldr	r3, [r7, #4]
 8010e42:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8010e44:	e010      	b.n	8010e68 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8010e46:	f7ff ff7d 	bl	8010d44 <tcp_get_next_optbyte>
 8010e4a:	4603      	mov	r3, r0
 8010e4c:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8010e4e:	7afb      	ldrb	r3, [r7, #11]
 8010e50:	2b01      	cmp	r3, #1
 8010e52:	d914      	bls.n	8010e7e <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8010e54:	7afb      	ldrb	r3, [r7, #11]
 8010e56:	b29a      	uxth	r2, r3
 8010e58:	4b0f      	ldr	r3, [pc, #60]	; (8010e98 <tcp_parseopt+0xe8>)
 8010e5a:	881b      	ldrh	r3, [r3, #0]
 8010e5c:	4413      	add	r3, r2
 8010e5e:	b29b      	uxth	r3, r3
 8010e60:	3b02      	subs	r3, #2
 8010e62:	b29a      	uxth	r2, r3
 8010e64:	4b0c      	ldr	r3, [pc, #48]	; (8010e98 <tcp_parseopt+0xe8>)
 8010e66:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8010e68:	4b0b      	ldr	r3, [pc, #44]	; (8010e98 <tcp_parseopt+0xe8>)
 8010e6a:	881a      	ldrh	r2, [r3, #0]
 8010e6c:	4b09      	ldr	r3, [pc, #36]	; (8010e94 <tcp_parseopt+0xe4>)
 8010e6e:	881b      	ldrh	r3, [r3, #0]
 8010e70:	429a      	cmp	r2, r3
 8010e72:	d3b3      	bcc.n	8010ddc <tcp_parseopt+0x2c>
 8010e74:	e004      	b.n	8010e80 <tcp_parseopt+0xd0>
          return;
 8010e76:	bf00      	nop
 8010e78:	e002      	b.n	8010e80 <tcp_parseopt+0xd0>
            return;
 8010e7a:	bf00      	nop
 8010e7c:	e000      	b.n	8010e80 <tcp_parseopt+0xd0>
            return;
 8010e7e:	bf00      	nop
      }
    }
  }
}
 8010e80:	3710      	adds	r7, #16
 8010e82:	46bd      	mov	sp, r7
 8010e84:	bd80      	pop	{r7, pc}
 8010e86:	bf00      	nop
 8010e88:	0801b294 	.word	0x0801b294
 8010e8c:	0801b6f8 	.word	0x0801b6f8
 8010e90:	0801b2e0 	.word	0x0801b2e0
 8010e94:	20010da4 	.word	0x20010da4
 8010e98:	20010dac 	.word	0x20010dac

08010e9c <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8010e9c:	b480      	push	{r7}
 8010e9e:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8010ea0:	4b05      	ldr	r3, [pc, #20]	; (8010eb8 <tcp_trigger_input_pcb_close+0x1c>)
 8010ea2:	781b      	ldrb	r3, [r3, #0]
 8010ea4:	f043 0310 	orr.w	r3, r3, #16
 8010ea8:	b2da      	uxtb	r2, r3
 8010eaa:	4b03      	ldr	r3, [pc, #12]	; (8010eb8 <tcp_trigger_input_pcb_close+0x1c>)
 8010eac:	701a      	strb	r2, [r3, #0]
}
 8010eae:	bf00      	nop
 8010eb0:	46bd      	mov	sp, r7
 8010eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010eb6:	4770      	bx	lr
 8010eb8:	20010dbd 	.word	0x20010dbd

08010ebc <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8010ebc:	b580      	push	{r7, lr}
 8010ebe:	b084      	sub	sp, #16
 8010ec0:	af00      	add	r7, sp, #0
 8010ec2:	60f8      	str	r0, [r7, #12]
 8010ec4:	60b9      	str	r1, [r7, #8]
 8010ec6:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8010ec8:	68fb      	ldr	r3, [r7, #12]
 8010eca:	2b00      	cmp	r3, #0
 8010ecc:	d00a      	beq.n	8010ee4 <tcp_route+0x28>
 8010ece:	68fb      	ldr	r3, [r7, #12]
 8010ed0:	7a1b      	ldrb	r3, [r3, #8]
 8010ed2:	2b00      	cmp	r3, #0
 8010ed4:	d006      	beq.n	8010ee4 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8010ed6:	68fb      	ldr	r3, [r7, #12]
 8010ed8:	7a1b      	ldrb	r3, [r3, #8]
 8010eda:	4618      	mov	r0, r3
 8010edc:	f7fb f80e 	bl	800befc <netif_get_by_index>
 8010ee0:	4603      	mov	r3, r0
 8010ee2:	e003      	b.n	8010eec <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8010ee4:	6878      	ldr	r0, [r7, #4]
 8010ee6:	f005 fca9 	bl	801683c <ip4_route>
 8010eea:	4603      	mov	r3, r0
  }
}
 8010eec:	4618      	mov	r0, r3
 8010eee:	3710      	adds	r7, #16
 8010ef0:	46bd      	mov	sp, r7
 8010ef2:	bd80      	pop	{r7, pc}

08010ef4 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8010ef4:	b590      	push	{r4, r7, lr}
 8010ef6:	b087      	sub	sp, #28
 8010ef8:	af00      	add	r7, sp, #0
 8010efa:	60f8      	str	r0, [r7, #12]
 8010efc:	60b9      	str	r1, [r7, #8]
 8010efe:	603b      	str	r3, [r7, #0]
 8010f00:	4613      	mov	r3, r2
 8010f02:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8010f04:	68fb      	ldr	r3, [r7, #12]
 8010f06:	2b00      	cmp	r3, #0
 8010f08:	d105      	bne.n	8010f16 <tcp_create_segment+0x22>
 8010f0a:	4b44      	ldr	r3, [pc, #272]	; (801101c <tcp_create_segment+0x128>)
 8010f0c:	22a3      	movs	r2, #163	; 0xa3
 8010f0e:	4944      	ldr	r1, [pc, #272]	; (8011020 <tcp_create_segment+0x12c>)
 8010f10:	4844      	ldr	r0, [pc, #272]	; (8011024 <tcp_create_segment+0x130>)
 8010f12:	f007 fa57 	bl	80183c4 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8010f16:	68bb      	ldr	r3, [r7, #8]
 8010f18:	2b00      	cmp	r3, #0
 8010f1a:	d105      	bne.n	8010f28 <tcp_create_segment+0x34>
 8010f1c:	4b3f      	ldr	r3, [pc, #252]	; (801101c <tcp_create_segment+0x128>)
 8010f1e:	22a4      	movs	r2, #164	; 0xa4
 8010f20:	4941      	ldr	r1, [pc, #260]	; (8011028 <tcp_create_segment+0x134>)
 8010f22:	4840      	ldr	r0, [pc, #256]	; (8011024 <tcp_create_segment+0x130>)
 8010f24:	f007 fa4e 	bl	80183c4 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8010f28:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8010f2c:	009b      	lsls	r3, r3, #2
 8010f2e:	b2db      	uxtb	r3, r3
 8010f30:	f003 0304 	and.w	r3, r3, #4
 8010f34:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8010f36:	2003      	movs	r0, #3
 8010f38:	f7fa fc48 	bl	800b7cc <memp_malloc>
 8010f3c:	6138      	str	r0, [r7, #16]
 8010f3e:	693b      	ldr	r3, [r7, #16]
 8010f40:	2b00      	cmp	r3, #0
 8010f42:	d104      	bne.n	8010f4e <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8010f44:	68b8      	ldr	r0, [r7, #8]
 8010f46:	f7fb fb67 	bl	800c618 <pbuf_free>
    return NULL;
 8010f4a:	2300      	movs	r3, #0
 8010f4c:	e061      	b.n	8011012 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 8010f4e:	693b      	ldr	r3, [r7, #16]
 8010f50:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8010f54:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8010f56:	693b      	ldr	r3, [r7, #16]
 8010f58:	2200      	movs	r2, #0
 8010f5a:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8010f5c:	693b      	ldr	r3, [r7, #16]
 8010f5e:	68ba      	ldr	r2, [r7, #8]
 8010f60:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8010f62:	68bb      	ldr	r3, [r7, #8]
 8010f64:	891a      	ldrh	r2, [r3, #8]
 8010f66:	7dfb      	ldrb	r3, [r7, #23]
 8010f68:	b29b      	uxth	r3, r3
 8010f6a:	429a      	cmp	r2, r3
 8010f6c:	d205      	bcs.n	8010f7a <tcp_create_segment+0x86>
 8010f6e:	4b2b      	ldr	r3, [pc, #172]	; (801101c <tcp_create_segment+0x128>)
 8010f70:	22b0      	movs	r2, #176	; 0xb0
 8010f72:	492e      	ldr	r1, [pc, #184]	; (801102c <tcp_create_segment+0x138>)
 8010f74:	482b      	ldr	r0, [pc, #172]	; (8011024 <tcp_create_segment+0x130>)
 8010f76:	f007 fa25 	bl	80183c4 <iprintf>
  seg->len = p->tot_len - optlen;
 8010f7a:	68bb      	ldr	r3, [r7, #8]
 8010f7c:	891a      	ldrh	r2, [r3, #8]
 8010f7e:	7dfb      	ldrb	r3, [r7, #23]
 8010f80:	b29b      	uxth	r3, r3
 8010f82:	1ad3      	subs	r3, r2, r3
 8010f84:	b29a      	uxth	r2, r3
 8010f86:	693b      	ldr	r3, [r7, #16]
 8010f88:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8010f8a:	2114      	movs	r1, #20
 8010f8c:	68b8      	ldr	r0, [r7, #8]
 8010f8e:	f7fb faad 	bl	800c4ec <pbuf_add_header>
 8010f92:	4603      	mov	r3, r0
 8010f94:	2b00      	cmp	r3, #0
 8010f96:	d004      	beq.n	8010fa2 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8010f98:	6938      	ldr	r0, [r7, #16]
 8010f9a:	f7fc ffe2 	bl	800df62 <tcp_seg_free>
    return NULL;
 8010f9e:	2300      	movs	r3, #0
 8010fa0:	e037      	b.n	8011012 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8010fa2:	693b      	ldr	r3, [r7, #16]
 8010fa4:	685b      	ldr	r3, [r3, #4]
 8010fa6:	685a      	ldr	r2, [r3, #4]
 8010fa8:	693b      	ldr	r3, [r7, #16]
 8010faa:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8010fac:	68fb      	ldr	r3, [r7, #12]
 8010fae:	8ada      	ldrh	r2, [r3, #22]
 8010fb0:	693b      	ldr	r3, [r7, #16]
 8010fb2:	68dc      	ldr	r4, [r3, #12]
 8010fb4:	4610      	mov	r0, r2
 8010fb6:	f7f9 fefb 	bl	800adb0 <lwip_htons>
 8010fba:	4603      	mov	r3, r0
 8010fbc:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8010fbe:	68fb      	ldr	r3, [r7, #12]
 8010fc0:	8b1a      	ldrh	r2, [r3, #24]
 8010fc2:	693b      	ldr	r3, [r7, #16]
 8010fc4:	68dc      	ldr	r4, [r3, #12]
 8010fc6:	4610      	mov	r0, r2
 8010fc8:	f7f9 fef2 	bl	800adb0 <lwip_htons>
 8010fcc:	4603      	mov	r3, r0
 8010fce:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8010fd0:	693b      	ldr	r3, [r7, #16]
 8010fd2:	68dc      	ldr	r4, [r3, #12]
 8010fd4:	6838      	ldr	r0, [r7, #0]
 8010fd6:	f7f9 ff00 	bl	800adda <lwip_htonl>
 8010fda:	4603      	mov	r3, r0
 8010fdc:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8010fde:	7dfb      	ldrb	r3, [r7, #23]
 8010fe0:	089b      	lsrs	r3, r3, #2
 8010fe2:	b2db      	uxtb	r3, r3
 8010fe4:	b29b      	uxth	r3, r3
 8010fe6:	3305      	adds	r3, #5
 8010fe8:	b29b      	uxth	r3, r3
 8010fea:	031b      	lsls	r3, r3, #12
 8010fec:	b29a      	uxth	r2, r3
 8010fee:	79fb      	ldrb	r3, [r7, #7]
 8010ff0:	b29b      	uxth	r3, r3
 8010ff2:	4313      	orrs	r3, r2
 8010ff4:	b29a      	uxth	r2, r3
 8010ff6:	693b      	ldr	r3, [r7, #16]
 8010ff8:	68dc      	ldr	r4, [r3, #12]
 8010ffa:	4610      	mov	r0, r2
 8010ffc:	f7f9 fed8 	bl	800adb0 <lwip_htons>
 8011000:	4603      	mov	r3, r0
 8011002:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8011004:	693b      	ldr	r3, [r7, #16]
 8011006:	68db      	ldr	r3, [r3, #12]
 8011008:	2200      	movs	r2, #0
 801100a:	749a      	strb	r2, [r3, #18]
 801100c:	2200      	movs	r2, #0
 801100e:	74da      	strb	r2, [r3, #19]
  return seg;
 8011010:	693b      	ldr	r3, [r7, #16]
}
 8011012:	4618      	mov	r0, r3
 8011014:	371c      	adds	r7, #28
 8011016:	46bd      	mov	sp, r7
 8011018:	bd90      	pop	{r4, r7, pc}
 801101a:	bf00      	nop
 801101c:	0801b714 	.word	0x0801b714
 8011020:	0801b748 	.word	0x0801b748
 8011024:	0801b768 	.word	0x0801b768
 8011028:	0801b790 	.word	0x0801b790
 801102c:	0801b7b4 	.word	0x0801b7b4

08011030 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8011030:	b580      	push	{r7, lr}
 8011032:	b086      	sub	sp, #24
 8011034:	af00      	add	r7, sp, #0
 8011036:	607b      	str	r3, [r7, #4]
 8011038:	4603      	mov	r3, r0
 801103a:	73fb      	strb	r3, [r7, #15]
 801103c:	460b      	mov	r3, r1
 801103e:	81bb      	strh	r3, [r7, #12]
 8011040:	4613      	mov	r3, r2
 8011042:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8011044:	89bb      	ldrh	r3, [r7, #12]
 8011046:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8011048:	687b      	ldr	r3, [r7, #4]
 801104a:	2b00      	cmp	r3, #0
 801104c:	d105      	bne.n	801105a <tcp_pbuf_prealloc+0x2a>
 801104e:	4b30      	ldr	r3, [pc, #192]	; (8011110 <tcp_pbuf_prealloc+0xe0>)
 8011050:	22e8      	movs	r2, #232	; 0xe8
 8011052:	4930      	ldr	r1, [pc, #192]	; (8011114 <tcp_pbuf_prealloc+0xe4>)
 8011054:	4830      	ldr	r0, [pc, #192]	; (8011118 <tcp_pbuf_prealloc+0xe8>)
 8011056:	f007 f9b5 	bl	80183c4 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 801105a:	6a3b      	ldr	r3, [r7, #32]
 801105c:	2b00      	cmp	r3, #0
 801105e:	d105      	bne.n	801106c <tcp_pbuf_prealloc+0x3c>
 8011060:	4b2b      	ldr	r3, [pc, #172]	; (8011110 <tcp_pbuf_prealloc+0xe0>)
 8011062:	22e9      	movs	r2, #233	; 0xe9
 8011064:	492d      	ldr	r1, [pc, #180]	; (801111c <tcp_pbuf_prealloc+0xec>)
 8011066:	482c      	ldr	r0, [pc, #176]	; (8011118 <tcp_pbuf_prealloc+0xe8>)
 8011068:	f007 f9ac 	bl	80183c4 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 801106c:	89ba      	ldrh	r2, [r7, #12]
 801106e:	897b      	ldrh	r3, [r7, #10]
 8011070:	429a      	cmp	r2, r3
 8011072:	d221      	bcs.n	80110b8 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8011074:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8011078:	f003 0302 	and.w	r3, r3, #2
 801107c:	2b00      	cmp	r3, #0
 801107e:	d111      	bne.n	80110a4 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8011080:	6a3b      	ldr	r3, [r7, #32]
 8011082:	8b5b      	ldrh	r3, [r3, #26]
 8011084:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8011088:	2b00      	cmp	r3, #0
 801108a:	d115      	bne.n	80110b8 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 801108c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8011090:	2b00      	cmp	r3, #0
 8011092:	d007      	beq.n	80110a4 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 8011094:	6a3b      	ldr	r3, [r7, #32]
 8011096:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 8011098:	2b00      	cmp	r3, #0
 801109a:	d103      	bne.n	80110a4 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 801109c:	6a3b      	ldr	r3, [r7, #32]
 801109e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 80110a0:	2b00      	cmp	r3, #0
 80110a2:	d009      	beq.n	80110b8 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 80110a4:	89bb      	ldrh	r3, [r7, #12]
 80110a6:	f203 231b 	addw	r3, r3, #539	; 0x21b
 80110aa:	f023 0203 	bic.w	r2, r3, #3
 80110ae:	897b      	ldrh	r3, [r7, #10]
 80110b0:	4293      	cmp	r3, r2
 80110b2:	bf28      	it	cs
 80110b4:	4613      	movcs	r3, r2
 80110b6:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 80110b8:	8af9      	ldrh	r1, [r7, #22]
 80110ba:	7bfb      	ldrb	r3, [r7, #15]
 80110bc:	f44f 7220 	mov.w	r2, #640	; 0x280
 80110c0:	4618      	mov	r0, r3
 80110c2:	f7fa ffc5 	bl	800c050 <pbuf_alloc>
 80110c6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80110c8:	693b      	ldr	r3, [r7, #16]
 80110ca:	2b00      	cmp	r3, #0
 80110cc:	d101      	bne.n	80110d2 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 80110ce:	2300      	movs	r3, #0
 80110d0:	e019      	b.n	8011106 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 80110d2:	693b      	ldr	r3, [r7, #16]
 80110d4:	681b      	ldr	r3, [r3, #0]
 80110d6:	2b00      	cmp	r3, #0
 80110d8:	d006      	beq.n	80110e8 <tcp_pbuf_prealloc+0xb8>
 80110da:	4b0d      	ldr	r3, [pc, #52]	; (8011110 <tcp_pbuf_prealloc+0xe0>)
 80110dc:	f240 120b 	movw	r2, #267	; 0x10b
 80110e0:	490f      	ldr	r1, [pc, #60]	; (8011120 <tcp_pbuf_prealloc+0xf0>)
 80110e2:	480d      	ldr	r0, [pc, #52]	; (8011118 <tcp_pbuf_prealloc+0xe8>)
 80110e4:	f007 f96e 	bl	80183c4 <iprintf>
  *oversize = p->len - length;
 80110e8:	693b      	ldr	r3, [r7, #16]
 80110ea:	895a      	ldrh	r2, [r3, #10]
 80110ec:	89bb      	ldrh	r3, [r7, #12]
 80110ee:	1ad3      	subs	r3, r2, r3
 80110f0:	b29a      	uxth	r2, r3
 80110f2:	687b      	ldr	r3, [r7, #4]
 80110f4:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 80110f6:	693b      	ldr	r3, [r7, #16]
 80110f8:	89ba      	ldrh	r2, [r7, #12]
 80110fa:	811a      	strh	r2, [r3, #8]
 80110fc:	693b      	ldr	r3, [r7, #16]
 80110fe:	891a      	ldrh	r2, [r3, #8]
 8011100:	693b      	ldr	r3, [r7, #16]
 8011102:	815a      	strh	r2, [r3, #10]
  return p;
 8011104:	693b      	ldr	r3, [r7, #16]
}
 8011106:	4618      	mov	r0, r3
 8011108:	3718      	adds	r7, #24
 801110a:	46bd      	mov	sp, r7
 801110c:	bd80      	pop	{r7, pc}
 801110e:	bf00      	nop
 8011110:	0801b714 	.word	0x0801b714
 8011114:	0801b7cc 	.word	0x0801b7cc
 8011118:	0801b768 	.word	0x0801b768
 801111c:	0801b7f0 	.word	0x0801b7f0
 8011120:	0801b810 	.word	0x0801b810

08011124 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8011124:	b580      	push	{r7, lr}
 8011126:	b082      	sub	sp, #8
 8011128:	af00      	add	r7, sp, #0
 801112a:	6078      	str	r0, [r7, #4]
 801112c:	460b      	mov	r3, r1
 801112e:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8011130:	687b      	ldr	r3, [r7, #4]
 8011132:	2b00      	cmp	r3, #0
 8011134:	d106      	bne.n	8011144 <tcp_write_checks+0x20>
 8011136:	4b33      	ldr	r3, [pc, #204]	; (8011204 <tcp_write_checks+0xe0>)
 8011138:	f240 1233 	movw	r2, #307	; 0x133
 801113c:	4932      	ldr	r1, [pc, #200]	; (8011208 <tcp_write_checks+0xe4>)
 801113e:	4833      	ldr	r0, [pc, #204]	; (801120c <tcp_write_checks+0xe8>)
 8011140:	f007 f940 	bl	80183c4 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8011144:	687b      	ldr	r3, [r7, #4]
 8011146:	7d1b      	ldrb	r3, [r3, #20]
 8011148:	2b04      	cmp	r3, #4
 801114a:	d00e      	beq.n	801116a <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 801114c:	687b      	ldr	r3, [r7, #4]
 801114e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8011150:	2b07      	cmp	r3, #7
 8011152:	d00a      	beq.n	801116a <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 8011154:	687b      	ldr	r3, [r7, #4]
 8011156:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8011158:	2b02      	cmp	r3, #2
 801115a:	d006      	beq.n	801116a <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 801115c:	687b      	ldr	r3, [r7, #4]
 801115e:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8011160:	2b03      	cmp	r3, #3
 8011162:	d002      	beq.n	801116a <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8011164:	f06f 030a 	mvn.w	r3, #10
 8011168:	e048      	b.n	80111fc <tcp_write_checks+0xd8>
  } else if (len == 0) {
 801116a:	887b      	ldrh	r3, [r7, #2]
 801116c:	2b00      	cmp	r3, #0
 801116e:	d101      	bne.n	8011174 <tcp_write_checks+0x50>
    return ERR_OK;
 8011170:	2300      	movs	r3, #0
 8011172:	e043      	b.n	80111fc <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8011174:	687b      	ldr	r3, [r7, #4]
 8011176:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801117a:	887a      	ldrh	r2, [r7, #2]
 801117c:	429a      	cmp	r2, r3
 801117e:	d909      	bls.n	8011194 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011180:	687b      	ldr	r3, [r7, #4]
 8011182:	8b5b      	ldrh	r3, [r3, #26]
 8011184:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011188:	b29a      	uxth	r2, r3
 801118a:	687b      	ldr	r3, [r7, #4]
 801118c:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 801118e:	f04f 33ff 	mov.w	r3, #4294967295
 8011192:	e033      	b.n	80111fc <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8011194:	687b      	ldr	r3, [r7, #4]
 8011196:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801119a:	2b08      	cmp	r3, #8
 801119c:	d909      	bls.n	80111b2 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801119e:	687b      	ldr	r3, [r7, #4]
 80111a0:	8b5b      	ldrh	r3, [r3, #26]
 80111a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80111a6:	b29a      	uxth	r2, r3
 80111a8:	687b      	ldr	r3, [r7, #4]
 80111aa:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 80111ac:	f04f 33ff 	mov.w	r3, #4294967295
 80111b0:	e024      	b.n	80111fc <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 80111b2:	687b      	ldr	r3, [r7, #4]
 80111b4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80111b8:	2b00      	cmp	r3, #0
 80111ba:	d00f      	beq.n	80111dc <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 80111bc:	687b      	ldr	r3, [r7, #4]
 80111be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80111c0:	2b00      	cmp	r3, #0
 80111c2:	d11a      	bne.n	80111fa <tcp_write_checks+0xd6>
 80111c4:	687b      	ldr	r3, [r7, #4]
 80111c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80111c8:	2b00      	cmp	r3, #0
 80111ca:	d116      	bne.n	80111fa <tcp_write_checks+0xd6>
 80111cc:	4b0d      	ldr	r3, [pc, #52]	; (8011204 <tcp_write_checks+0xe0>)
 80111ce:	f240 1255 	movw	r2, #341	; 0x155
 80111d2:	490f      	ldr	r1, [pc, #60]	; (8011210 <tcp_write_checks+0xec>)
 80111d4:	480d      	ldr	r0, [pc, #52]	; (801120c <tcp_write_checks+0xe8>)
 80111d6:	f007 f8f5 	bl	80183c4 <iprintf>
 80111da:	e00e      	b.n	80111fa <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 80111dc:	687b      	ldr	r3, [r7, #4]
 80111de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80111e0:	2b00      	cmp	r3, #0
 80111e2:	d103      	bne.n	80111ec <tcp_write_checks+0xc8>
 80111e4:	687b      	ldr	r3, [r7, #4]
 80111e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80111e8:	2b00      	cmp	r3, #0
 80111ea:	d006      	beq.n	80111fa <tcp_write_checks+0xd6>
 80111ec:	4b05      	ldr	r3, [pc, #20]	; (8011204 <tcp_write_checks+0xe0>)
 80111ee:	f44f 72ac 	mov.w	r2, #344	; 0x158
 80111f2:	4908      	ldr	r1, [pc, #32]	; (8011214 <tcp_write_checks+0xf0>)
 80111f4:	4805      	ldr	r0, [pc, #20]	; (801120c <tcp_write_checks+0xe8>)
 80111f6:	f007 f8e5 	bl	80183c4 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 80111fa:	2300      	movs	r3, #0
}
 80111fc:	4618      	mov	r0, r3
 80111fe:	3708      	adds	r7, #8
 8011200:	46bd      	mov	sp, r7
 8011202:	bd80      	pop	{r7, pc}
 8011204:	0801b714 	.word	0x0801b714
 8011208:	0801b824 	.word	0x0801b824
 801120c:	0801b768 	.word	0x0801b768
 8011210:	0801b844 	.word	0x0801b844
 8011214:	0801b880 	.word	0x0801b880

08011218 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8011218:	b590      	push	{r4, r7, lr}
 801121a:	b09b      	sub	sp, #108	; 0x6c
 801121c:	af04      	add	r7, sp, #16
 801121e:	60f8      	str	r0, [r7, #12]
 8011220:	60b9      	str	r1, [r7, #8]
 8011222:	4611      	mov	r1, r2
 8011224:	461a      	mov	r2, r3
 8011226:	460b      	mov	r3, r1
 8011228:	80fb      	strh	r3, [r7, #6]
 801122a:	4613      	mov	r3, r2
 801122c:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 801122e:	2300      	movs	r3, #0
 8011230:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8011232:	2300      	movs	r3, #0
 8011234:	653b      	str	r3, [r7, #80]	; 0x50
 8011236:	2300      	movs	r3, #0
 8011238:	64fb      	str	r3, [r7, #76]	; 0x4c
 801123a:	2300      	movs	r3, #0
 801123c:	64bb      	str	r3, [r7, #72]	; 0x48
 801123e:	2300      	movs	r3, #0
 8011240:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 8011242:	2300      	movs	r3, #0
 8011244:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8011248:	2300      	movs	r3, #0
 801124a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 801124e:	2300      	movs	r3, #0
 8011250:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 8011252:	2300      	movs	r3, #0
 8011254:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 8011256:	2300      	movs	r3, #0
 8011258:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 801125a:	68fb      	ldr	r3, [r7, #12]
 801125c:	2b00      	cmp	r3, #0
 801125e:	d109      	bne.n	8011274 <tcp_write+0x5c>
 8011260:	4ba4      	ldr	r3, [pc, #656]	; (80114f4 <tcp_write+0x2dc>)
 8011262:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 8011266:	49a4      	ldr	r1, [pc, #656]	; (80114f8 <tcp_write+0x2e0>)
 8011268:	48a4      	ldr	r0, [pc, #656]	; (80114fc <tcp_write+0x2e4>)
 801126a:	f007 f8ab 	bl	80183c4 <iprintf>
 801126e:	f06f 030f 	mvn.w	r3, #15
 8011272:	e32a      	b.n	80118ca <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8011274:	68fb      	ldr	r3, [r7, #12]
 8011276:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801127a:	085b      	lsrs	r3, r3, #1
 801127c:	b29a      	uxth	r2, r3
 801127e:	68fb      	ldr	r3, [r7, #12]
 8011280:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011282:	4293      	cmp	r3, r2
 8011284:	bf28      	it	cs
 8011286:	4613      	movcs	r3, r2
 8011288:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 801128a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801128c:	2b00      	cmp	r3, #0
 801128e:	d102      	bne.n	8011296 <tcp_write+0x7e>
 8011290:	68fb      	ldr	r3, [r7, #12]
 8011292:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011294:	e000      	b.n	8011298 <tcp_write+0x80>
 8011296:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011298:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 801129a:	68bb      	ldr	r3, [r7, #8]
 801129c:	2b00      	cmp	r3, #0
 801129e:	d109      	bne.n	80112b4 <tcp_write+0x9c>
 80112a0:	4b94      	ldr	r3, [pc, #592]	; (80114f4 <tcp_write+0x2dc>)
 80112a2:	f240 12ad 	movw	r2, #429	; 0x1ad
 80112a6:	4996      	ldr	r1, [pc, #600]	; (8011500 <tcp_write+0x2e8>)
 80112a8:	4894      	ldr	r0, [pc, #592]	; (80114fc <tcp_write+0x2e4>)
 80112aa:	f007 f88b 	bl	80183c4 <iprintf>
 80112ae:	f06f 030f 	mvn.w	r3, #15
 80112b2:	e30a      	b.n	80118ca <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 80112b4:	88fb      	ldrh	r3, [r7, #6]
 80112b6:	4619      	mov	r1, r3
 80112b8:	68f8      	ldr	r0, [r7, #12]
 80112ba:	f7ff ff33 	bl	8011124 <tcp_write_checks>
 80112be:	4603      	mov	r3, r0
 80112c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 80112c4:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80112c8:	2b00      	cmp	r3, #0
 80112ca:	d002      	beq.n	80112d2 <tcp_write+0xba>
    return err;
 80112cc:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80112d0:	e2fb      	b.n	80118ca <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 80112d2:	68fb      	ldr	r3, [r7, #12]
 80112d4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80112d8:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80112dc:	2300      	movs	r3, #0
 80112de:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 80112e2:	68fb      	ldr	r3, [r7, #12]
 80112e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80112e6:	2b00      	cmp	r3, #0
 80112e8:	f000 80f6 	beq.w	80114d8 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80112ec:	68fb      	ldr	r3, [r7, #12]
 80112ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80112f0:	653b      	str	r3, [r7, #80]	; 0x50
 80112f2:	e002      	b.n	80112fa <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 80112f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80112f6:	681b      	ldr	r3, [r3, #0]
 80112f8:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80112fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80112fc:	681b      	ldr	r3, [r3, #0]
 80112fe:	2b00      	cmp	r3, #0
 8011300:	d1f8      	bne.n	80112f4 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 8011302:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011304:	7a9b      	ldrb	r3, [r3, #10]
 8011306:	009b      	lsls	r3, r3, #2
 8011308:	b29b      	uxth	r3, r3
 801130a:	f003 0304 	and.w	r3, r3, #4
 801130e:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8011310:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8011312:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011314:	891b      	ldrh	r3, [r3, #8]
 8011316:	4619      	mov	r1, r3
 8011318:	8c3b      	ldrh	r3, [r7, #32]
 801131a:	440b      	add	r3, r1
 801131c:	429a      	cmp	r2, r3
 801131e:	da06      	bge.n	801132e <tcp_write+0x116>
 8011320:	4b74      	ldr	r3, [pc, #464]	; (80114f4 <tcp_write+0x2dc>)
 8011322:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8011326:	4977      	ldr	r1, [pc, #476]	; (8011504 <tcp_write+0x2ec>)
 8011328:	4874      	ldr	r0, [pc, #464]	; (80114fc <tcp_write+0x2e4>)
 801132a:	f007 f84b 	bl	80183c4 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 801132e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011330:	891a      	ldrh	r2, [r3, #8]
 8011332:	8c3b      	ldrh	r3, [r7, #32]
 8011334:	4413      	add	r3, r2
 8011336:	b29b      	uxth	r3, r3
 8011338:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801133a:	1ad3      	subs	r3, r2, r3
 801133c:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 801133e:	68fb      	ldr	r3, [r7, #12]
 8011340:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8011344:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 8011346:	8a7b      	ldrh	r3, [r7, #18]
 8011348:	2b00      	cmp	r3, #0
 801134a:	d026      	beq.n	801139a <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 801134c:	8a7b      	ldrh	r3, [r7, #18]
 801134e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8011350:	429a      	cmp	r2, r3
 8011352:	d206      	bcs.n	8011362 <tcp_write+0x14a>
 8011354:	4b67      	ldr	r3, [pc, #412]	; (80114f4 <tcp_write+0x2dc>)
 8011356:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 801135a:	496b      	ldr	r1, [pc, #428]	; (8011508 <tcp_write+0x2f0>)
 801135c:	4867      	ldr	r0, [pc, #412]	; (80114fc <tcp_write+0x2e4>)
 801135e:	f007 f831 	bl	80183c4 <iprintf>
      seg = last_unsent;
 8011362:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011364:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8011366:	8a7b      	ldrh	r3, [r7, #18]
 8011368:	88fa      	ldrh	r2, [r7, #6]
 801136a:	4293      	cmp	r3, r2
 801136c:	bf28      	it	cs
 801136e:	4613      	movcs	r3, r2
 8011370:	b29b      	uxth	r3, r3
 8011372:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8011374:	4293      	cmp	r3, r2
 8011376:	bf28      	it	cs
 8011378:	4613      	movcs	r3, r2
 801137a:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 801137c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011380:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011382:	4413      	add	r3, r2
 8011384:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 8011388:	8a7a      	ldrh	r2, [r7, #18]
 801138a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801138c:	1ad3      	subs	r3, r2, r3
 801138e:	b29b      	uxth	r3, r3
 8011390:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 8011392:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8011394:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011396:	1ad3      	subs	r3, r2, r3
 8011398:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 801139a:	8a7b      	ldrh	r3, [r7, #18]
 801139c:	2b00      	cmp	r3, #0
 801139e:	d00b      	beq.n	80113b8 <tcp_write+0x1a0>
 80113a0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80113a4:	88fb      	ldrh	r3, [r7, #6]
 80113a6:	429a      	cmp	r2, r3
 80113a8:	d006      	beq.n	80113b8 <tcp_write+0x1a0>
 80113aa:	4b52      	ldr	r3, [pc, #328]	; (80114f4 <tcp_write+0x2dc>)
 80113ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80113b0:	4956      	ldr	r1, [pc, #344]	; (801150c <tcp_write+0x2f4>)
 80113b2:	4852      	ldr	r0, [pc, #328]	; (80114fc <tcp_write+0x2e4>)
 80113b4:	f007 f806 	bl	80183c4 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 80113b8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80113bc:	88fb      	ldrh	r3, [r7, #6]
 80113be:	429a      	cmp	r2, r3
 80113c0:	f080 8167 	bcs.w	8011692 <tcp_write+0x47a>
 80113c4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80113c6:	2b00      	cmp	r3, #0
 80113c8:	f000 8163 	beq.w	8011692 <tcp_write+0x47a>
 80113cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80113ce:	891b      	ldrh	r3, [r3, #8]
 80113d0:	2b00      	cmp	r3, #0
 80113d2:	f000 815e 	beq.w	8011692 <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 80113d6:	88fa      	ldrh	r2, [r7, #6]
 80113d8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80113dc:	1ad2      	subs	r2, r2, r3
 80113de:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80113e0:	4293      	cmp	r3, r2
 80113e2:	bfa8      	it	ge
 80113e4:	4613      	movge	r3, r2
 80113e6:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 80113e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80113ea:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 80113ec:	797b      	ldrb	r3, [r7, #5]
 80113ee:	f003 0301 	and.w	r3, r3, #1
 80113f2:	2b00      	cmp	r3, #0
 80113f4:	d027      	beq.n	8011446 <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 80113f6:	f107 0012 	add.w	r0, r7, #18
 80113fa:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80113fc:	8bf9      	ldrh	r1, [r7, #30]
 80113fe:	2301      	movs	r3, #1
 8011400:	9302      	str	r3, [sp, #8]
 8011402:	797b      	ldrb	r3, [r7, #5]
 8011404:	9301      	str	r3, [sp, #4]
 8011406:	68fb      	ldr	r3, [r7, #12]
 8011408:	9300      	str	r3, [sp, #0]
 801140a:	4603      	mov	r3, r0
 801140c:	2000      	movs	r0, #0
 801140e:	f7ff fe0f 	bl	8011030 <tcp_pbuf_prealloc>
 8011412:	6578      	str	r0, [r7, #84]	; 0x54
 8011414:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011416:	2b00      	cmp	r3, #0
 8011418:	f000 8225 	beq.w	8011866 <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 801141c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801141e:	6858      	ldr	r0, [r3, #4]
 8011420:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011424:	68ba      	ldr	r2, [r7, #8]
 8011426:	4413      	add	r3, r2
 8011428:	8bfa      	ldrh	r2, [r7, #30]
 801142a:	4619      	mov	r1, r3
 801142c:	f006 ff1f 	bl	801826e <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8011430:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8011432:	f7fb f97f 	bl	800c734 <pbuf_clen>
 8011436:	4603      	mov	r3, r0
 8011438:	461a      	mov	r2, r3
 801143a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801143e:	4413      	add	r3, r2
 8011440:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8011444:	e041      	b.n	80114ca <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8011446:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011448:	685b      	ldr	r3, [r3, #4]
 801144a:	637b      	str	r3, [r7, #52]	; 0x34
 801144c:	e002      	b.n	8011454 <tcp_write+0x23c>
 801144e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011450:	681b      	ldr	r3, [r3, #0]
 8011452:	637b      	str	r3, [r7, #52]	; 0x34
 8011454:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011456:	681b      	ldr	r3, [r3, #0]
 8011458:	2b00      	cmp	r3, #0
 801145a:	d1f8      	bne.n	801144e <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801145c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801145e:	7b1b      	ldrb	r3, [r3, #12]
 8011460:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8011464:	2b00      	cmp	r3, #0
 8011466:	d115      	bne.n	8011494 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8011468:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801146a:	685b      	ldr	r3, [r3, #4]
 801146c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801146e:	8952      	ldrh	r2, [r2, #10]
 8011470:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8011472:	68ba      	ldr	r2, [r7, #8]
 8011474:	429a      	cmp	r2, r3
 8011476:	d10d      	bne.n	8011494 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8011478:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801147c:	2b00      	cmp	r3, #0
 801147e:	d006      	beq.n	801148e <tcp_write+0x276>
 8011480:	4b1c      	ldr	r3, [pc, #112]	; (80114f4 <tcp_write+0x2dc>)
 8011482:	f240 2231 	movw	r2, #561	; 0x231
 8011486:	4922      	ldr	r1, [pc, #136]	; (8011510 <tcp_write+0x2f8>)
 8011488:	481c      	ldr	r0, [pc, #112]	; (80114fc <tcp_write+0x2e4>)
 801148a:	f006 ff9b 	bl	80183c4 <iprintf>
          extendlen = seglen;
 801148e:	8bfb      	ldrh	r3, [r7, #30]
 8011490:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8011492:	e01a      	b.n	80114ca <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8011494:	8bfb      	ldrh	r3, [r7, #30]
 8011496:	2201      	movs	r2, #1
 8011498:	4619      	mov	r1, r3
 801149a:	2000      	movs	r0, #0
 801149c:	f7fa fdd8 	bl	800c050 <pbuf_alloc>
 80114a0:	6578      	str	r0, [r7, #84]	; 0x54
 80114a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80114a4:	2b00      	cmp	r3, #0
 80114a6:	f000 81e0 	beq.w	801186a <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 80114aa:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80114ae:	68ba      	ldr	r2, [r7, #8]
 80114b0:	441a      	add	r2, r3
 80114b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80114b4:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 80114b6:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80114b8:	f7fb f93c 	bl	800c734 <pbuf_clen>
 80114bc:	4603      	mov	r3, r0
 80114be:	461a      	mov	r2, r3
 80114c0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80114c4:	4413      	add	r3, r2
 80114c6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 80114ca:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80114ce:	8bfb      	ldrh	r3, [r7, #30]
 80114d0:	4413      	add	r3, r2
 80114d2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80114d6:	e0dc      	b.n	8011692 <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 80114d8:	68fb      	ldr	r3, [r7, #12]
 80114da:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80114de:	2b00      	cmp	r3, #0
 80114e0:	f000 80d7 	beq.w	8011692 <tcp_write+0x47a>
 80114e4:	4b03      	ldr	r3, [pc, #12]	; (80114f4 <tcp_write+0x2dc>)
 80114e6:	f240 224a 	movw	r2, #586	; 0x24a
 80114ea:	490a      	ldr	r1, [pc, #40]	; (8011514 <tcp_write+0x2fc>)
 80114ec:	4803      	ldr	r0, [pc, #12]	; (80114fc <tcp_write+0x2e4>)
 80114ee:	f006 ff69 	bl	80183c4 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 80114f2:	e0ce      	b.n	8011692 <tcp_write+0x47a>
 80114f4:	0801b714 	.word	0x0801b714
 80114f8:	0801b8b4 	.word	0x0801b8b4
 80114fc:	0801b768 	.word	0x0801b768
 8011500:	0801b8cc 	.word	0x0801b8cc
 8011504:	0801b900 	.word	0x0801b900
 8011508:	0801b918 	.word	0x0801b918
 801150c:	0801b938 	.word	0x0801b938
 8011510:	0801b958 	.word	0x0801b958
 8011514:	0801b984 	.word	0x0801b984
    struct pbuf *p;
    u16_t left = len - pos;
 8011518:	88fa      	ldrh	r2, [r7, #6]
 801151a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801151e:	1ad3      	subs	r3, r2, r3
 8011520:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 8011522:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8011526:	b29b      	uxth	r3, r3
 8011528:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801152a:	1ad3      	subs	r3, r2, r3
 801152c:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 801152e:	8b7a      	ldrh	r2, [r7, #26]
 8011530:	8bbb      	ldrh	r3, [r7, #28]
 8011532:	4293      	cmp	r3, r2
 8011534:	bf28      	it	cs
 8011536:	4613      	movcs	r3, r2
 8011538:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 801153a:	797b      	ldrb	r3, [r7, #5]
 801153c:	f003 0301 	and.w	r3, r3, #1
 8011540:	2b00      	cmp	r3, #0
 8011542:	d036      	beq.n	80115b2 <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8011544:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8011548:	b29a      	uxth	r2, r3
 801154a:	8b3b      	ldrh	r3, [r7, #24]
 801154c:	4413      	add	r3, r2
 801154e:	b299      	uxth	r1, r3
 8011550:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011552:	2b00      	cmp	r3, #0
 8011554:	bf0c      	ite	eq
 8011556:	2301      	moveq	r3, #1
 8011558:	2300      	movne	r3, #0
 801155a:	b2db      	uxtb	r3, r3
 801155c:	f107 0012 	add.w	r0, r7, #18
 8011560:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8011562:	9302      	str	r3, [sp, #8]
 8011564:	797b      	ldrb	r3, [r7, #5]
 8011566:	9301      	str	r3, [sp, #4]
 8011568:	68fb      	ldr	r3, [r7, #12]
 801156a:	9300      	str	r3, [sp, #0]
 801156c:	4603      	mov	r3, r0
 801156e:	2036      	movs	r0, #54	; 0x36
 8011570:	f7ff fd5e 	bl	8011030 <tcp_pbuf_prealloc>
 8011574:	6338      	str	r0, [r7, #48]	; 0x30
 8011576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011578:	2b00      	cmp	r3, #0
 801157a:	f000 8178 	beq.w	801186e <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 801157e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011580:	895b      	ldrh	r3, [r3, #10]
 8011582:	8b3a      	ldrh	r2, [r7, #24]
 8011584:	429a      	cmp	r2, r3
 8011586:	d906      	bls.n	8011596 <tcp_write+0x37e>
 8011588:	4b8c      	ldr	r3, [pc, #560]	; (80117bc <tcp_write+0x5a4>)
 801158a:	f240 2266 	movw	r2, #614	; 0x266
 801158e:	498c      	ldr	r1, [pc, #560]	; (80117c0 <tcp_write+0x5a8>)
 8011590:	488c      	ldr	r0, [pc, #560]	; (80117c4 <tcp_write+0x5ac>)
 8011592:	f006 ff17 	bl	80183c4 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 8011596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011598:	685a      	ldr	r2, [r3, #4]
 801159a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801159e:	18d0      	adds	r0, r2, r3
 80115a0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80115a4:	68ba      	ldr	r2, [r7, #8]
 80115a6:	4413      	add	r3, r2
 80115a8:	8b3a      	ldrh	r2, [r7, #24]
 80115aa:	4619      	mov	r1, r3
 80115ac:	f006 fe5f 	bl	801826e <memcpy>
 80115b0:	e02f      	b.n	8011612 <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 80115b2:	8a7b      	ldrh	r3, [r7, #18]
 80115b4:	2b00      	cmp	r3, #0
 80115b6:	d006      	beq.n	80115c6 <tcp_write+0x3ae>
 80115b8:	4b80      	ldr	r3, [pc, #512]	; (80117bc <tcp_write+0x5a4>)
 80115ba:	f240 2271 	movw	r2, #625	; 0x271
 80115be:	4982      	ldr	r1, [pc, #520]	; (80117c8 <tcp_write+0x5b0>)
 80115c0:	4880      	ldr	r0, [pc, #512]	; (80117c4 <tcp_write+0x5ac>)
 80115c2:	f006 feff 	bl	80183c4 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 80115c6:	8b3b      	ldrh	r3, [r7, #24]
 80115c8:	2201      	movs	r2, #1
 80115ca:	4619      	mov	r1, r3
 80115cc:	2036      	movs	r0, #54	; 0x36
 80115ce:	f7fa fd3f 	bl	800c050 <pbuf_alloc>
 80115d2:	6178      	str	r0, [r7, #20]
 80115d4:	697b      	ldr	r3, [r7, #20]
 80115d6:	2b00      	cmp	r3, #0
 80115d8:	f000 814b 	beq.w	8011872 <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 80115dc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80115e0:	68ba      	ldr	r2, [r7, #8]
 80115e2:	441a      	add	r2, r3
 80115e4:	697b      	ldr	r3, [r7, #20]
 80115e6:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80115e8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80115ec:	b29b      	uxth	r3, r3
 80115ee:	f44f 7220 	mov.w	r2, #640	; 0x280
 80115f2:	4619      	mov	r1, r3
 80115f4:	2036      	movs	r0, #54	; 0x36
 80115f6:	f7fa fd2b 	bl	800c050 <pbuf_alloc>
 80115fa:	6338      	str	r0, [r7, #48]	; 0x30
 80115fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80115fe:	2b00      	cmp	r3, #0
 8011600:	d103      	bne.n	801160a <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 8011602:	6978      	ldr	r0, [r7, #20]
 8011604:	f7fb f808 	bl	800c618 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8011608:	e136      	b.n	8011878 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 801160a:	6979      	ldr	r1, [r7, #20]
 801160c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801160e:	f7fb f8d1 	bl	800c7b4 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 8011612:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011614:	f7fb f88e 	bl	800c734 <pbuf_clen>
 8011618:	4603      	mov	r3, r0
 801161a:	461a      	mov	r2, r3
 801161c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8011620:	4413      	add	r3, r2
 8011622:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 8011626:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801162a:	2b09      	cmp	r3, #9
 801162c:	d903      	bls.n	8011636 <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 801162e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011630:	f7fa fff2 	bl	800c618 <pbuf_free>
      goto memerr;
 8011634:	e120      	b.n	8011878 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8011636:	68fb      	ldr	r3, [r7, #12]
 8011638:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801163a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801163e:	441a      	add	r2, r3
 8011640:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011644:	9300      	str	r3, [sp, #0]
 8011646:	4613      	mov	r3, r2
 8011648:	2200      	movs	r2, #0
 801164a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801164c:	68f8      	ldr	r0, [r7, #12]
 801164e:	f7ff fc51 	bl	8010ef4 <tcp_create_segment>
 8011652:	64f8      	str	r0, [r7, #76]	; 0x4c
 8011654:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011656:	2b00      	cmp	r3, #0
 8011658:	f000 810d 	beq.w	8011876 <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 801165c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801165e:	2b00      	cmp	r3, #0
 8011660:	d102      	bne.n	8011668 <tcp_write+0x450>
      queue = seg;
 8011662:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011664:	647b      	str	r3, [r7, #68]	; 0x44
 8011666:	e00c      	b.n	8011682 <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8011668:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801166a:	2b00      	cmp	r3, #0
 801166c:	d106      	bne.n	801167c <tcp_write+0x464>
 801166e:	4b53      	ldr	r3, [pc, #332]	; (80117bc <tcp_write+0x5a4>)
 8011670:	f240 22ab 	movw	r2, #683	; 0x2ab
 8011674:	4955      	ldr	r1, [pc, #340]	; (80117cc <tcp_write+0x5b4>)
 8011676:	4853      	ldr	r0, [pc, #332]	; (80117c4 <tcp_write+0x5ac>)
 8011678:	f006 fea4 	bl	80183c4 <iprintf>
      prev_seg->next = seg;
 801167c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801167e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8011680:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 8011682:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011684:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 8011686:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801168a:	8b3b      	ldrh	r3, [r7, #24]
 801168c:	4413      	add	r3, r2
 801168e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 8011692:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011696:	88fb      	ldrh	r3, [r7, #6]
 8011698:	429a      	cmp	r2, r3
 801169a:	f4ff af3d 	bcc.w	8011518 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 801169e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80116a0:	2b00      	cmp	r3, #0
 80116a2:	d02c      	beq.n	80116fe <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 80116a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80116a6:	685b      	ldr	r3, [r3, #4]
 80116a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80116aa:	e01e      	b.n	80116ea <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 80116ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80116ae:	891a      	ldrh	r2, [r3, #8]
 80116b0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80116b2:	4413      	add	r3, r2
 80116b4:	b29a      	uxth	r2, r3
 80116b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80116b8:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 80116ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80116bc:	681b      	ldr	r3, [r3, #0]
 80116be:	2b00      	cmp	r3, #0
 80116c0:	d110      	bne.n	80116e4 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 80116c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80116c4:	685b      	ldr	r3, [r3, #4]
 80116c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80116c8:	8952      	ldrh	r2, [r2, #10]
 80116ca:	4413      	add	r3, r2
 80116cc:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80116ce:	68b9      	ldr	r1, [r7, #8]
 80116d0:	4618      	mov	r0, r3
 80116d2:	f006 fdcc 	bl	801826e <memcpy>
        p->len += oversize_used;
 80116d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80116d8:	895a      	ldrh	r2, [r3, #10]
 80116da:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80116dc:	4413      	add	r3, r2
 80116de:	b29a      	uxth	r2, r3
 80116e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80116e2:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 80116e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80116e6:	681b      	ldr	r3, [r3, #0]
 80116e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80116ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80116ec:	2b00      	cmp	r3, #0
 80116ee:	d1dd      	bne.n	80116ac <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 80116f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80116f2:	891a      	ldrh	r2, [r3, #8]
 80116f4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80116f6:	4413      	add	r3, r2
 80116f8:	b29a      	uxth	r2, r3
 80116fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80116fc:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 80116fe:	8a7a      	ldrh	r2, [r7, #18]
 8011700:	68fb      	ldr	r3, [r7, #12]
 8011702:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 8011706:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011708:	2b00      	cmp	r3, #0
 801170a:	d018      	beq.n	801173e <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 801170c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801170e:	2b00      	cmp	r3, #0
 8011710:	d106      	bne.n	8011720 <tcp_write+0x508>
 8011712:	4b2a      	ldr	r3, [pc, #168]	; (80117bc <tcp_write+0x5a4>)
 8011714:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 8011718:	492d      	ldr	r1, [pc, #180]	; (80117d0 <tcp_write+0x5b8>)
 801171a:	482a      	ldr	r0, [pc, #168]	; (80117c4 <tcp_write+0x5ac>)
 801171c:	f006 fe52 	bl	80183c4 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8011720:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011722:	685b      	ldr	r3, [r3, #4]
 8011724:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8011726:	4618      	mov	r0, r3
 8011728:	f7fb f844 	bl	800c7b4 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 801172c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801172e:	891a      	ldrh	r2, [r3, #8]
 8011730:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011732:	891b      	ldrh	r3, [r3, #8]
 8011734:	4413      	add	r3, r2
 8011736:	b29a      	uxth	r2, r3
 8011738:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801173a:	811a      	strh	r2, [r3, #8]
 801173c:	e037      	b.n	80117ae <tcp_write+0x596>
  } else if (extendlen > 0) {
 801173e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8011740:	2b00      	cmp	r3, #0
 8011742:	d034      	beq.n	80117ae <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8011744:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011746:	2b00      	cmp	r3, #0
 8011748:	d003      	beq.n	8011752 <tcp_write+0x53a>
 801174a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801174c:	685b      	ldr	r3, [r3, #4]
 801174e:	2b00      	cmp	r3, #0
 8011750:	d106      	bne.n	8011760 <tcp_write+0x548>
 8011752:	4b1a      	ldr	r3, [pc, #104]	; (80117bc <tcp_write+0x5a4>)
 8011754:	f240 22e6 	movw	r2, #742	; 0x2e6
 8011758:	491e      	ldr	r1, [pc, #120]	; (80117d4 <tcp_write+0x5bc>)
 801175a:	481a      	ldr	r0, [pc, #104]	; (80117c4 <tcp_write+0x5ac>)
 801175c:	f006 fe32 	bl	80183c4 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8011760:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011762:	685b      	ldr	r3, [r3, #4]
 8011764:	62bb      	str	r3, [r7, #40]	; 0x28
 8011766:	e009      	b.n	801177c <tcp_write+0x564>
      p->tot_len += extendlen;
 8011768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801176a:	891a      	ldrh	r2, [r3, #8]
 801176c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801176e:	4413      	add	r3, r2
 8011770:	b29a      	uxth	r2, r3
 8011772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011774:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8011776:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011778:	681b      	ldr	r3, [r3, #0]
 801177a:	62bb      	str	r3, [r7, #40]	; 0x28
 801177c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801177e:	681b      	ldr	r3, [r3, #0]
 8011780:	2b00      	cmp	r3, #0
 8011782:	d1f1      	bne.n	8011768 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 8011784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011786:	891a      	ldrh	r2, [r3, #8]
 8011788:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801178a:	4413      	add	r3, r2
 801178c:	b29a      	uxth	r2, r3
 801178e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011790:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 8011792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011794:	895a      	ldrh	r2, [r3, #10]
 8011796:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8011798:	4413      	add	r3, r2
 801179a:	b29a      	uxth	r2, r3
 801179c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801179e:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 80117a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80117a2:	891a      	ldrh	r2, [r3, #8]
 80117a4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80117a6:	4413      	add	r3, r2
 80117a8:	b29a      	uxth	r2, r3
 80117aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80117ac:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 80117ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80117b0:	2b00      	cmp	r3, #0
 80117b2:	d111      	bne.n	80117d8 <tcp_write+0x5c0>
    pcb->unsent = queue;
 80117b4:	68fb      	ldr	r3, [r7, #12]
 80117b6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80117b8:	66da      	str	r2, [r3, #108]	; 0x6c
 80117ba:	e010      	b.n	80117de <tcp_write+0x5c6>
 80117bc:	0801b714 	.word	0x0801b714
 80117c0:	0801b9b4 	.word	0x0801b9b4
 80117c4:	0801b768 	.word	0x0801b768
 80117c8:	0801b9f4 	.word	0x0801b9f4
 80117cc:	0801ba04 	.word	0x0801ba04
 80117d0:	0801ba18 	.word	0x0801ba18
 80117d4:	0801ba50 	.word	0x0801ba50
  } else {
    last_unsent->next = queue;
 80117d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80117da:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80117dc:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 80117de:	68fb      	ldr	r3, [r7, #12]
 80117e0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80117e2:	88fb      	ldrh	r3, [r7, #6]
 80117e4:	441a      	add	r2, r3
 80117e6:	68fb      	ldr	r3, [r7, #12]
 80117e8:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 80117ea:	68fb      	ldr	r3, [r7, #12]
 80117ec:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 80117f0:	88fb      	ldrh	r3, [r7, #6]
 80117f2:	1ad3      	subs	r3, r2, r3
 80117f4:	b29a      	uxth	r2, r3
 80117f6:	68fb      	ldr	r3, [r7, #12]
 80117f8:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 80117fc:	68fb      	ldr	r3, [r7, #12]
 80117fe:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8011802:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8011806:	68fb      	ldr	r3, [r7, #12]
 8011808:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801180c:	2b00      	cmp	r3, #0
 801180e:	d00e      	beq.n	801182e <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 8011810:	68fb      	ldr	r3, [r7, #12]
 8011812:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011814:	2b00      	cmp	r3, #0
 8011816:	d10a      	bne.n	801182e <tcp_write+0x616>
 8011818:	68fb      	ldr	r3, [r7, #12]
 801181a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801181c:	2b00      	cmp	r3, #0
 801181e:	d106      	bne.n	801182e <tcp_write+0x616>
 8011820:	4b2c      	ldr	r3, [pc, #176]	; (80118d4 <tcp_write+0x6bc>)
 8011822:	f240 3212 	movw	r2, #786	; 0x312
 8011826:	492c      	ldr	r1, [pc, #176]	; (80118d8 <tcp_write+0x6c0>)
 8011828:	482c      	ldr	r0, [pc, #176]	; (80118dc <tcp_write+0x6c4>)
 801182a:	f006 fdcb 	bl	80183c4 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 801182e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011830:	2b00      	cmp	r3, #0
 8011832:	d016      	beq.n	8011862 <tcp_write+0x64a>
 8011834:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011836:	68db      	ldr	r3, [r3, #12]
 8011838:	2b00      	cmp	r3, #0
 801183a:	d012      	beq.n	8011862 <tcp_write+0x64a>
 801183c:	797b      	ldrb	r3, [r7, #5]
 801183e:	f003 0302 	and.w	r3, r3, #2
 8011842:	2b00      	cmp	r3, #0
 8011844:	d10d      	bne.n	8011862 <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8011846:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011848:	68db      	ldr	r3, [r3, #12]
 801184a:	899b      	ldrh	r3, [r3, #12]
 801184c:	b29c      	uxth	r4, r3
 801184e:	2008      	movs	r0, #8
 8011850:	f7f9 faae 	bl	800adb0 <lwip_htons>
 8011854:	4603      	mov	r3, r0
 8011856:	461a      	mov	r2, r3
 8011858:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801185a:	68db      	ldr	r3, [r3, #12]
 801185c:	4322      	orrs	r2, r4
 801185e:	b292      	uxth	r2, r2
 8011860:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 8011862:	2300      	movs	r3, #0
 8011864:	e031      	b.n	80118ca <tcp_write+0x6b2>
          goto memerr;
 8011866:	bf00      	nop
 8011868:	e006      	b.n	8011878 <tcp_write+0x660>
            goto memerr;
 801186a:	bf00      	nop
 801186c:	e004      	b.n	8011878 <tcp_write+0x660>
        goto memerr;
 801186e:	bf00      	nop
 8011870:	e002      	b.n	8011878 <tcp_write+0x660>
        goto memerr;
 8011872:	bf00      	nop
 8011874:	e000      	b.n	8011878 <tcp_write+0x660>
      goto memerr;
 8011876:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011878:	68fb      	ldr	r3, [r7, #12]
 801187a:	8b5b      	ldrh	r3, [r3, #26]
 801187c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011880:	b29a      	uxth	r2, r3
 8011882:	68fb      	ldr	r3, [r7, #12]
 8011884:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 8011886:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011888:	2b00      	cmp	r3, #0
 801188a:	d002      	beq.n	8011892 <tcp_write+0x67a>
    pbuf_free(concat_p);
 801188c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801188e:	f7fa fec3 	bl	800c618 <pbuf_free>
  }
  if (queue != NULL) {
 8011892:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011894:	2b00      	cmp	r3, #0
 8011896:	d002      	beq.n	801189e <tcp_write+0x686>
    tcp_segs_free(queue);
 8011898:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801189a:	f7fc fb4d 	bl	800df38 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 801189e:	68fb      	ldr	r3, [r7, #12]
 80118a0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80118a4:	2b00      	cmp	r3, #0
 80118a6:	d00e      	beq.n	80118c6 <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 80118a8:	68fb      	ldr	r3, [r7, #12]
 80118aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80118ac:	2b00      	cmp	r3, #0
 80118ae:	d10a      	bne.n	80118c6 <tcp_write+0x6ae>
 80118b0:	68fb      	ldr	r3, [r7, #12]
 80118b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80118b4:	2b00      	cmp	r3, #0
 80118b6:	d106      	bne.n	80118c6 <tcp_write+0x6ae>
 80118b8:	4b06      	ldr	r3, [pc, #24]	; (80118d4 <tcp_write+0x6bc>)
 80118ba:	f240 3227 	movw	r2, #807	; 0x327
 80118be:	4906      	ldr	r1, [pc, #24]	; (80118d8 <tcp_write+0x6c0>)
 80118c0:	4806      	ldr	r0, [pc, #24]	; (80118dc <tcp_write+0x6c4>)
 80118c2:	f006 fd7f 	bl	80183c4 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 80118c6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80118ca:	4618      	mov	r0, r3
 80118cc:	375c      	adds	r7, #92	; 0x5c
 80118ce:	46bd      	mov	sp, r7
 80118d0:	bd90      	pop	{r4, r7, pc}
 80118d2:	bf00      	nop
 80118d4:	0801b714 	.word	0x0801b714
 80118d8:	0801ba88 	.word	0x0801ba88
 80118dc:	0801b768 	.word	0x0801b768

080118e0 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 80118e0:	b590      	push	{r4, r7, lr}
 80118e2:	b08b      	sub	sp, #44	; 0x2c
 80118e4:	af02      	add	r7, sp, #8
 80118e6:	6078      	str	r0, [r7, #4]
 80118e8:	460b      	mov	r3, r1
 80118ea:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 80118ec:	2300      	movs	r3, #0
 80118ee:	61fb      	str	r3, [r7, #28]
 80118f0:	2300      	movs	r3, #0
 80118f2:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 80118f4:	2300      	movs	r3, #0
 80118f6:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 80118f8:	687b      	ldr	r3, [r7, #4]
 80118fa:	2b00      	cmp	r3, #0
 80118fc:	d106      	bne.n	801190c <tcp_split_unsent_seg+0x2c>
 80118fe:	4b95      	ldr	r3, [pc, #596]	; (8011b54 <tcp_split_unsent_seg+0x274>)
 8011900:	f240 324b 	movw	r2, #843	; 0x34b
 8011904:	4994      	ldr	r1, [pc, #592]	; (8011b58 <tcp_split_unsent_seg+0x278>)
 8011906:	4895      	ldr	r0, [pc, #596]	; (8011b5c <tcp_split_unsent_seg+0x27c>)
 8011908:	f006 fd5c 	bl	80183c4 <iprintf>

  useg = pcb->unsent;
 801190c:	687b      	ldr	r3, [r7, #4]
 801190e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011910:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8011912:	697b      	ldr	r3, [r7, #20]
 8011914:	2b00      	cmp	r3, #0
 8011916:	d102      	bne.n	801191e <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8011918:	f04f 33ff 	mov.w	r3, #4294967295
 801191c:	e116      	b.n	8011b4c <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 801191e:	887b      	ldrh	r3, [r7, #2]
 8011920:	2b00      	cmp	r3, #0
 8011922:	d109      	bne.n	8011938 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8011924:	4b8b      	ldr	r3, [pc, #556]	; (8011b54 <tcp_split_unsent_seg+0x274>)
 8011926:	f240 3253 	movw	r2, #851	; 0x353
 801192a:	498d      	ldr	r1, [pc, #564]	; (8011b60 <tcp_split_unsent_seg+0x280>)
 801192c:	488b      	ldr	r0, [pc, #556]	; (8011b5c <tcp_split_unsent_seg+0x27c>)
 801192e:	f006 fd49 	bl	80183c4 <iprintf>
    return ERR_VAL;
 8011932:	f06f 0305 	mvn.w	r3, #5
 8011936:	e109      	b.n	8011b4c <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8011938:	697b      	ldr	r3, [r7, #20]
 801193a:	891b      	ldrh	r3, [r3, #8]
 801193c:	887a      	ldrh	r2, [r7, #2]
 801193e:	429a      	cmp	r2, r3
 8011940:	d301      	bcc.n	8011946 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8011942:	2300      	movs	r3, #0
 8011944:	e102      	b.n	8011b4c <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8011946:	687b      	ldr	r3, [r7, #4]
 8011948:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801194a:	887a      	ldrh	r2, [r7, #2]
 801194c:	429a      	cmp	r2, r3
 801194e:	d906      	bls.n	801195e <tcp_split_unsent_seg+0x7e>
 8011950:	4b80      	ldr	r3, [pc, #512]	; (8011b54 <tcp_split_unsent_seg+0x274>)
 8011952:	f240 325b 	movw	r2, #859	; 0x35b
 8011956:	4983      	ldr	r1, [pc, #524]	; (8011b64 <tcp_split_unsent_seg+0x284>)
 8011958:	4880      	ldr	r0, [pc, #512]	; (8011b5c <tcp_split_unsent_seg+0x27c>)
 801195a:	f006 fd33 	bl	80183c4 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 801195e:	697b      	ldr	r3, [r7, #20]
 8011960:	891b      	ldrh	r3, [r3, #8]
 8011962:	2b00      	cmp	r3, #0
 8011964:	d106      	bne.n	8011974 <tcp_split_unsent_seg+0x94>
 8011966:	4b7b      	ldr	r3, [pc, #492]	; (8011b54 <tcp_split_unsent_seg+0x274>)
 8011968:	f44f 7257 	mov.w	r2, #860	; 0x35c
 801196c:	497e      	ldr	r1, [pc, #504]	; (8011b68 <tcp_split_unsent_seg+0x288>)
 801196e:	487b      	ldr	r0, [pc, #492]	; (8011b5c <tcp_split_unsent_seg+0x27c>)
 8011970:	f006 fd28 	bl	80183c4 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8011974:	697b      	ldr	r3, [r7, #20]
 8011976:	7a9b      	ldrb	r3, [r3, #10]
 8011978:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801197a:	7bfb      	ldrb	r3, [r7, #15]
 801197c:	009b      	lsls	r3, r3, #2
 801197e:	b2db      	uxtb	r3, r3
 8011980:	f003 0304 	and.w	r3, r3, #4
 8011984:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8011986:	697b      	ldr	r3, [r7, #20]
 8011988:	891a      	ldrh	r2, [r3, #8]
 801198a:	887b      	ldrh	r3, [r7, #2]
 801198c:	1ad3      	subs	r3, r2, r3
 801198e:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8011990:	7bbb      	ldrb	r3, [r7, #14]
 8011992:	b29a      	uxth	r2, r3
 8011994:	89bb      	ldrh	r3, [r7, #12]
 8011996:	4413      	add	r3, r2
 8011998:	b29b      	uxth	r3, r3
 801199a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801199e:	4619      	mov	r1, r3
 80119a0:	2036      	movs	r0, #54	; 0x36
 80119a2:	f7fa fb55 	bl	800c050 <pbuf_alloc>
 80119a6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80119a8:	693b      	ldr	r3, [r7, #16]
 80119aa:	2b00      	cmp	r3, #0
 80119ac:	f000 80b7 	beq.w	8011b1e <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 80119b0:	697b      	ldr	r3, [r7, #20]
 80119b2:	685b      	ldr	r3, [r3, #4]
 80119b4:	891a      	ldrh	r2, [r3, #8]
 80119b6:	697b      	ldr	r3, [r7, #20]
 80119b8:	891b      	ldrh	r3, [r3, #8]
 80119ba:	1ad3      	subs	r3, r2, r3
 80119bc:	b29a      	uxth	r2, r3
 80119be:	887b      	ldrh	r3, [r7, #2]
 80119c0:	4413      	add	r3, r2
 80119c2:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 80119c4:	697b      	ldr	r3, [r7, #20]
 80119c6:	6858      	ldr	r0, [r3, #4]
 80119c8:	693b      	ldr	r3, [r7, #16]
 80119ca:	685a      	ldr	r2, [r3, #4]
 80119cc:	7bbb      	ldrb	r3, [r7, #14]
 80119ce:	18d1      	adds	r1, r2, r3
 80119d0:	897b      	ldrh	r3, [r7, #10]
 80119d2:	89ba      	ldrh	r2, [r7, #12]
 80119d4:	f7fb f826 	bl	800ca24 <pbuf_copy_partial>
 80119d8:	4603      	mov	r3, r0
 80119da:	461a      	mov	r2, r3
 80119dc:	89bb      	ldrh	r3, [r7, #12]
 80119de:	4293      	cmp	r3, r2
 80119e0:	f040 809f 	bne.w	8011b22 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 80119e4:	697b      	ldr	r3, [r7, #20]
 80119e6:	68db      	ldr	r3, [r3, #12]
 80119e8:	899b      	ldrh	r3, [r3, #12]
 80119ea:	b29b      	uxth	r3, r3
 80119ec:	4618      	mov	r0, r3
 80119ee:	f7f9 f9df 	bl	800adb0 <lwip_htons>
 80119f2:	4603      	mov	r3, r0
 80119f4:	b2db      	uxtb	r3, r3
 80119f6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80119fa:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 80119fc:	2300      	movs	r3, #0
 80119fe:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8011a00:	7efb      	ldrb	r3, [r7, #27]
 8011a02:	f003 0308 	and.w	r3, r3, #8
 8011a06:	2b00      	cmp	r3, #0
 8011a08:	d007      	beq.n	8011a1a <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8011a0a:	7efb      	ldrb	r3, [r7, #27]
 8011a0c:	f023 0308 	bic.w	r3, r3, #8
 8011a10:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8011a12:	7ebb      	ldrb	r3, [r7, #26]
 8011a14:	f043 0308 	orr.w	r3, r3, #8
 8011a18:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8011a1a:	7efb      	ldrb	r3, [r7, #27]
 8011a1c:	f003 0301 	and.w	r3, r3, #1
 8011a20:	2b00      	cmp	r3, #0
 8011a22:	d007      	beq.n	8011a34 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8011a24:	7efb      	ldrb	r3, [r7, #27]
 8011a26:	f023 0301 	bic.w	r3, r3, #1
 8011a2a:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8011a2c:	7ebb      	ldrb	r3, [r7, #26]
 8011a2e:	f043 0301 	orr.w	r3, r3, #1
 8011a32:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8011a34:	697b      	ldr	r3, [r7, #20]
 8011a36:	68db      	ldr	r3, [r3, #12]
 8011a38:	685b      	ldr	r3, [r3, #4]
 8011a3a:	4618      	mov	r0, r3
 8011a3c:	f7f9 f9cd 	bl	800adda <lwip_htonl>
 8011a40:	4602      	mov	r2, r0
 8011a42:	887b      	ldrh	r3, [r7, #2]
 8011a44:	18d1      	adds	r1, r2, r3
 8011a46:	7eba      	ldrb	r2, [r7, #26]
 8011a48:	7bfb      	ldrb	r3, [r7, #15]
 8011a4a:	9300      	str	r3, [sp, #0]
 8011a4c:	460b      	mov	r3, r1
 8011a4e:	6939      	ldr	r1, [r7, #16]
 8011a50:	6878      	ldr	r0, [r7, #4]
 8011a52:	f7ff fa4f 	bl	8010ef4 <tcp_create_segment>
 8011a56:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8011a58:	69fb      	ldr	r3, [r7, #28]
 8011a5a:	2b00      	cmp	r3, #0
 8011a5c:	d063      	beq.n	8011b26 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8011a5e:	697b      	ldr	r3, [r7, #20]
 8011a60:	685b      	ldr	r3, [r3, #4]
 8011a62:	4618      	mov	r0, r3
 8011a64:	f7fa fe66 	bl	800c734 <pbuf_clen>
 8011a68:	4603      	mov	r3, r0
 8011a6a:	461a      	mov	r2, r3
 8011a6c:	687b      	ldr	r3, [r7, #4]
 8011a6e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011a72:	1a9b      	subs	r3, r3, r2
 8011a74:	b29a      	uxth	r2, r3
 8011a76:	687b      	ldr	r3, [r7, #4]
 8011a78:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8011a7c:	697b      	ldr	r3, [r7, #20]
 8011a7e:	6858      	ldr	r0, [r3, #4]
 8011a80:	697b      	ldr	r3, [r7, #20]
 8011a82:	685b      	ldr	r3, [r3, #4]
 8011a84:	891a      	ldrh	r2, [r3, #8]
 8011a86:	89bb      	ldrh	r3, [r7, #12]
 8011a88:	1ad3      	subs	r3, r2, r3
 8011a8a:	b29b      	uxth	r3, r3
 8011a8c:	4619      	mov	r1, r3
 8011a8e:	f7fa fc3d 	bl	800c30c <pbuf_realloc>
  useg->len -= remainder;
 8011a92:	697b      	ldr	r3, [r7, #20]
 8011a94:	891a      	ldrh	r2, [r3, #8]
 8011a96:	89bb      	ldrh	r3, [r7, #12]
 8011a98:	1ad3      	subs	r3, r2, r3
 8011a9a:	b29a      	uxth	r2, r3
 8011a9c:	697b      	ldr	r3, [r7, #20]
 8011a9e:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8011aa0:	697b      	ldr	r3, [r7, #20]
 8011aa2:	68db      	ldr	r3, [r3, #12]
 8011aa4:	899b      	ldrh	r3, [r3, #12]
 8011aa6:	b29c      	uxth	r4, r3
 8011aa8:	7efb      	ldrb	r3, [r7, #27]
 8011aaa:	b29b      	uxth	r3, r3
 8011aac:	4618      	mov	r0, r3
 8011aae:	f7f9 f97f 	bl	800adb0 <lwip_htons>
 8011ab2:	4603      	mov	r3, r0
 8011ab4:	461a      	mov	r2, r3
 8011ab6:	697b      	ldr	r3, [r7, #20]
 8011ab8:	68db      	ldr	r3, [r3, #12]
 8011aba:	4322      	orrs	r2, r4
 8011abc:	b292      	uxth	r2, r2
 8011abe:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8011ac0:	697b      	ldr	r3, [r7, #20]
 8011ac2:	685b      	ldr	r3, [r3, #4]
 8011ac4:	4618      	mov	r0, r3
 8011ac6:	f7fa fe35 	bl	800c734 <pbuf_clen>
 8011aca:	4603      	mov	r3, r0
 8011acc:	461a      	mov	r2, r3
 8011ace:	687b      	ldr	r3, [r7, #4]
 8011ad0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011ad4:	4413      	add	r3, r2
 8011ad6:	b29a      	uxth	r2, r3
 8011ad8:	687b      	ldr	r3, [r7, #4]
 8011ada:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8011ade:	69fb      	ldr	r3, [r7, #28]
 8011ae0:	685b      	ldr	r3, [r3, #4]
 8011ae2:	4618      	mov	r0, r3
 8011ae4:	f7fa fe26 	bl	800c734 <pbuf_clen>
 8011ae8:	4603      	mov	r3, r0
 8011aea:	461a      	mov	r2, r3
 8011aec:	687b      	ldr	r3, [r7, #4]
 8011aee:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011af2:	4413      	add	r3, r2
 8011af4:	b29a      	uxth	r2, r3
 8011af6:	687b      	ldr	r3, [r7, #4]
 8011af8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8011afc:	697b      	ldr	r3, [r7, #20]
 8011afe:	681a      	ldr	r2, [r3, #0]
 8011b00:	69fb      	ldr	r3, [r7, #28]
 8011b02:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8011b04:	697b      	ldr	r3, [r7, #20]
 8011b06:	69fa      	ldr	r2, [r7, #28]
 8011b08:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8011b0a:	69fb      	ldr	r3, [r7, #28]
 8011b0c:	681b      	ldr	r3, [r3, #0]
 8011b0e:	2b00      	cmp	r3, #0
 8011b10:	d103      	bne.n	8011b1a <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8011b12:	687b      	ldr	r3, [r7, #4]
 8011b14:	2200      	movs	r2, #0
 8011b16:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8011b1a:	2300      	movs	r3, #0
 8011b1c:	e016      	b.n	8011b4c <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8011b1e:	bf00      	nop
 8011b20:	e002      	b.n	8011b28 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8011b22:	bf00      	nop
 8011b24:	e000      	b.n	8011b28 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8011b26:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8011b28:	69fb      	ldr	r3, [r7, #28]
 8011b2a:	2b00      	cmp	r3, #0
 8011b2c:	d006      	beq.n	8011b3c <tcp_split_unsent_seg+0x25c>
 8011b2e:	4b09      	ldr	r3, [pc, #36]	; (8011b54 <tcp_split_unsent_seg+0x274>)
 8011b30:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8011b34:	490d      	ldr	r1, [pc, #52]	; (8011b6c <tcp_split_unsent_seg+0x28c>)
 8011b36:	4809      	ldr	r0, [pc, #36]	; (8011b5c <tcp_split_unsent_seg+0x27c>)
 8011b38:	f006 fc44 	bl	80183c4 <iprintf>
  if (p != NULL) {
 8011b3c:	693b      	ldr	r3, [r7, #16]
 8011b3e:	2b00      	cmp	r3, #0
 8011b40:	d002      	beq.n	8011b48 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8011b42:	6938      	ldr	r0, [r7, #16]
 8011b44:	f7fa fd68 	bl	800c618 <pbuf_free>
  }

  return ERR_MEM;
 8011b48:	f04f 33ff 	mov.w	r3, #4294967295
}
 8011b4c:	4618      	mov	r0, r3
 8011b4e:	3724      	adds	r7, #36	; 0x24
 8011b50:	46bd      	mov	sp, r7
 8011b52:	bd90      	pop	{r4, r7, pc}
 8011b54:	0801b714 	.word	0x0801b714
 8011b58:	0801baa8 	.word	0x0801baa8
 8011b5c:	0801b768 	.word	0x0801b768
 8011b60:	0801bacc 	.word	0x0801bacc
 8011b64:	0801baf0 	.word	0x0801baf0
 8011b68:	0801bb00 	.word	0x0801bb00
 8011b6c:	0801bb10 	.word	0x0801bb10

08011b70 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8011b70:	b590      	push	{r4, r7, lr}
 8011b72:	b085      	sub	sp, #20
 8011b74:	af00      	add	r7, sp, #0
 8011b76:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8011b78:	687b      	ldr	r3, [r7, #4]
 8011b7a:	2b00      	cmp	r3, #0
 8011b7c:	d106      	bne.n	8011b8c <tcp_send_fin+0x1c>
 8011b7e:	4b21      	ldr	r3, [pc, #132]	; (8011c04 <tcp_send_fin+0x94>)
 8011b80:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8011b84:	4920      	ldr	r1, [pc, #128]	; (8011c08 <tcp_send_fin+0x98>)
 8011b86:	4821      	ldr	r0, [pc, #132]	; (8011c0c <tcp_send_fin+0x9c>)
 8011b88:	f006 fc1c 	bl	80183c4 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8011b8c:	687b      	ldr	r3, [r7, #4]
 8011b8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011b90:	2b00      	cmp	r3, #0
 8011b92:	d02e      	beq.n	8011bf2 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8011b94:	687b      	ldr	r3, [r7, #4]
 8011b96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011b98:	60fb      	str	r3, [r7, #12]
 8011b9a:	e002      	b.n	8011ba2 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8011b9c:	68fb      	ldr	r3, [r7, #12]
 8011b9e:	681b      	ldr	r3, [r3, #0]
 8011ba0:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8011ba2:	68fb      	ldr	r3, [r7, #12]
 8011ba4:	681b      	ldr	r3, [r3, #0]
 8011ba6:	2b00      	cmp	r3, #0
 8011ba8:	d1f8      	bne.n	8011b9c <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8011baa:	68fb      	ldr	r3, [r7, #12]
 8011bac:	68db      	ldr	r3, [r3, #12]
 8011bae:	899b      	ldrh	r3, [r3, #12]
 8011bb0:	b29b      	uxth	r3, r3
 8011bb2:	4618      	mov	r0, r3
 8011bb4:	f7f9 f8fc 	bl	800adb0 <lwip_htons>
 8011bb8:	4603      	mov	r3, r0
 8011bba:	b2db      	uxtb	r3, r3
 8011bbc:	f003 0307 	and.w	r3, r3, #7
 8011bc0:	2b00      	cmp	r3, #0
 8011bc2:	d116      	bne.n	8011bf2 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8011bc4:	68fb      	ldr	r3, [r7, #12]
 8011bc6:	68db      	ldr	r3, [r3, #12]
 8011bc8:	899b      	ldrh	r3, [r3, #12]
 8011bca:	b29c      	uxth	r4, r3
 8011bcc:	2001      	movs	r0, #1
 8011bce:	f7f9 f8ef 	bl	800adb0 <lwip_htons>
 8011bd2:	4603      	mov	r3, r0
 8011bd4:	461a      	mov	r2, r3
 8011bd6:	68fb      	ldr	r3, [r7, #12]
 8011bd8:	68db      	ldr	r3, [r3, #12]
 8011bda:	4322      	orrs	r2, r4
 8011bdc:	b292      	uxth	r2, r2
 8011bde:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8011be0:	687b      	ldr	r3, [r7, #4]
 8011be2:	8b5b      	ldrh	r3, [r3, #26]
 8011be4:	f043 0320 	orr.w	r3, r3, #32
 8011be8:	b29a      	uxth	r2, r3
 8011bea:	687b      	ldr	r3, [r7, #4]
 8011bec:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8011bee:	2300      	movs	r3, #0
 8011bf0:	e004      	b.n	8011bfc <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8011bf2:	2101      	movs	r1, #1
 8011bf4:	6878      	ldr	r0, [r7, #4]
 8011bf6:	f000 f80b 	bl	8011c10 <tcp_enqueue_flags>
 8011bfa:	4603      	mov	r3, r0
}
 8011bfc:	4618      	mov	r0, r3
 8011bfe:	3714      	adds	r7, #20
 8011c00:	46bd      	mov	sp, r7
 8011c02:	bd90      	pop	{r4, r7, pc}
 8011c04:	0801b714 	.word	0x0801b714
 8011c08:	0801bb1c 	.word	0x0801bb1c
 8011c0c:	0801b768 	.word	0x0801b768

08011c10 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8011c10:	b580      	push	{r7, lr}
 8011c12:	b08a      	sub	sp, #40	; 0x28
 8011c14:	af02      	add	r7, sp, #8
 8011c16:	6078      	str	r0, [r7, #4]
 8011c18:	460b      	mov	r3, r1
 8011c1a:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8011c1c:	2300      	movs	r3, #0
 8011c1e:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8011c20:	2300      	movs	r3, #0
 8011c22:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8011c24:	78fb      	ldrb	r3, [r7, #3]
 8011c26:	f003 0303 	and.w	r3, r3, #3
 8011c2a:	2b00      	cmp	r3, #0
 8011c2c:	d106      	bne.n	8011c3c <tcp_enqueue_flags+0x2c>
 8011c2e:	4b67      	ldr	r3, [pc, #412]	; (8011dcc <tcp_enqueue_flags+0x1bc>)
 8011c30:	f240 4211 	movw	r2, #1041	; 0x411
 8011c34:	4966      	ldr	r1, [pc, #408]	; (8011dd0 <tcp_enqueue_flags+0x1c0>)
 8011c36:	4867      	ldr	r0, [pc, #412]	; (8011dd4 <tcp_enqueue_flags+0x1c4>)
 8011c38:	f006 fbc4 	bl	80183c4 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8011c3c:	687b      	ldr	r3, [r7, #4]
 8011c3e:	2b00      	cmp	r3, #0
 8011c40:	d106      	bne.n	8011c50 <tcp_enqueue_flags+0x40>
 8011c42:	4b62      	ldr	r3, [pc, #392]	; (8011dcc <tcp_enqueue_flags+0x1bc>)
 8011c44:	f240 4213 	movw	r2, #1043	; 0x413
 8011c48:	4963      	ldr	r1, [pc, #396]	; (8011dd8 <tcp_enqueue_flags+0x1c8>)
 8011c4a:	4862      	ldr	r0, [pc, #392]	; (8011dd4 <tcp_enqueue_flags+0x1c4>)
 8011c4c:	f006 fbba 	bl	80183c4 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8011c50:	78fb      	ldrb	r3, [r7, #3]
 8011c52:	f003 0302 	and.w	r3, r3, #2
 8011c56:	2b00      	cmp	r3, #0
 8011c58:	d001      	beq.n	8011c5e <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8011c5a:	2301      	movs	r3, #1
 8011c5c:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8011c5e:	7ffb      	ldrb	r3, [r7, #31]
 8011c60:	009b      	lsls	r3, r3, #2
 8011c62:	b2db      	uxtb	r3, r3
 8011c64:	f003 0304 	and.w	r3, r3, #4
 8011c68:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8011c6a:	7dfb      	ldrb	r3, [r7, #23]
 8011c6c:	b29b      	uxth	r3, r3
 8011c6e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011c72:	4619      	mov	r1, r3
 8011c74:	2036      	movs	r0, #54	; 0x36
 8011c76:	f7fa f9eb 	bl	800c050 <pbuf_alloc>
 8011c7a:	6138      	str	r0, [r7, #16]
 8011c7c:	693b      	ldr	r3, [r7, #16]
 8011c7e:	2b00      	cmp	r3, #0
 8011c80:	d109      	bne.n	8011c96 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011c82:	687b      	ldr	r3, [r7, #4]
 8011c84:	8b5b      	ldrh	r3, [r3, #26]
 8011c86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011c8a:	b29a      	uxth	r2, r3
 8011c8c:	687b      	ldr	r3, [r7, #4]
 8011c8e:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8011c90:	f04f 33ff 	mov.w	r3, #4294967295
 8011c94:	e095      	b.n	8011dc2 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8011c96:	693b      	ldr	r3, [r7, #16]
 8011c98:	895a      	ldrh	r2, [r3, #10]
 8011c9a:	7dfb      	ldrb	r3, [r7, #23]
 8011c9c:	b29b      	uxth	r3, r3
 8011c9e:	429a      	cmp	r2, r3
 8011ca0:	d206      	bcs.n	8011cb0 <tcp_enqueue_flags+0xa0>
 8011ca2:	4b4a      	ldr	r3, [pc, #296]	; (8011dcc <tcp_enqueue_flags+0x1bc>)
 8011ca4:	f240 4239 	movw	r2, #1081	; 0x439
 8011ca8:	494c      	ldr	r1, [pc, #304]	; (8011ddc <tcp_enqueue_flags+0x1cc>)
 8011caa:	484a      	ldr	r0, [pc, #296]	; (8011dd4 <tcp_enqueue_flags+0x1c4>)
 8011cac:	f006 fb8a 	bl	80183c4 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8011cb0:	687b      	ldr	r3, [r7, #4]
 8011cb2:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8011cb4:	78fa      	ldrb	r2, [r7, #3]
 8011cb6:	7ffb      	ldrb	r3, [r7, #31]
 8011cb8:	9300      	str	r3, [sp, #0]
 8011cba:	460b      	mov	r3, r1
 8011cbc:	6939      	ldr	r1, [r7, #16]
 8011cbe:	6878      	ldr	r0, [r7, #4]
 8011cc0:	f7ff f918 	bl	8010ef4 <tcp_create_segment>
 8011cc4:	60f8      	str	r0, [r7, #12]
 8011cc6:	68fb      	ldr	r3, [r7, #12]
 8011cc8:	2b00      	cmp	r3, #0
 8011cca:	d109      	bne.n	8011ce0 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011ccc:	687b      	ldr	r3, [r7, #4]
 8011cce:	8b5b      	ldrh	r3, [r3, #26]
 8011cd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011cd4:	b29a      	uxth	r2, r3
 8011cd6:	687b      	ldr	r3, [r7, #4]
 8011cd8:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8011cda:	f04f 33ff 	mov.w	r3, #4294967295
 8011cde:	e070      	b.n	8011dc2 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8011ce0:	68fb      	ldr	r3, [r7, #12]
 8011ce2:	68db      	ldr	r3, [r3, #12]
 8011ce4:	f003 0303 	and.w	r3, r3, #3
 8011ce8:	2b00      	cmp	r3, #0
 8011cea:	d006      	beq.n	8011cfa <tcp_enqueue_flags+0xea>
 8011cec:	4b37      	ldr	r3, [pc, #220]	; (8011dcc <tcp_enqueue_flags+0x1bc>)
 8011cee:	f240 4242 	movw	r2, #1090	; 0x442
 8011cf2:	493b      	ldr	r1, [pc, #236]	; (8011de0 <tcp_enqueue_flags+0x1d0>)
 8011cf4:	4837      	ldr	r0, [pc, #220]	; (8011dd4 <tcp_enqueue_flags+0x1c4>)
 8011cf6:	f006 fb65 	bl	80183c4 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8011cfa:	68fb      	ldr	r3, [r7, #12]
 8011cfc:	891b      	ldrh	r3, [r3, #8]
 8011cfe:	2b00      	cmp	r3, #0
 8011d00:	d006      	beq.n	8011d10 <tcp_enqueue_flags+0x100>
 8011d02:	4b32      	ldr	r3, [pc, #200]	; (8011dcc <tcp_enqueue_flags+0x1bc>)
 8011d04:	f240 4243 	movw	r2, #1091	; 0x443
 8011d08:	4936      	ldr	r1, [pc, #216]	; (8011de4 <tcp_enqueue_flags+0x1d4>)
 8011d0a:	4832      	ldr	r0, [pc, #200]	; (8011dd4 <tcp_enqueue_flags+0x1c4>)
 8011d0c:	f006 fb5a 	bl	80183c4 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8011d10:	687b      	ldr	r3, [r7, #4]
 8011d12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011d14:	2b00      	cmp	r3, #0
 8011d16:	d103      	bne.n	8011d20 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8011d18:	687b      	ldr	r3, [r7, #4]
 8011d1a:	68fa      	ldr	r2, [r7, #12]
 8011d1c:	66da      	str	r2, [r3, #108]	; 0x6c
 8011d1e:	e00d      	b.n	8011d3c <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8011d20:	687b      	ldr	r3, [r7, #4]
 8011d22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011d24:	61bb      	str	r3, [r7, #24]
 8011d26:	e002      	b.n	8011d2e <tcp_enqueue_flags+0x11e>
 8011d28:	69bb      	ldr	r3, [r7, #24]
 8011d2a:	681b      	ldr	r3, [r3, #0]
 8011d2c:	61bb      	str	r3, [r7, #24]
 8011d2e:	69bb      	ldr	r3, [r7, #24]
 8011d30:	681b      	ldr	r3, [r3, #0]
 8011d32:	2b00      	cmp	r3, #0
 8011d34:	d1f8      	bne.n	8011d28 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8011d36:	69bb      	ldr	r3, [r7, #24]
 8011d38:	68fa      	ldr	r2, [r7, #12]
 8011d3a:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8011d3c:	687b      	ldr	r3, [r7, #4]
 8011d3e:	2200      	movs	r2, #0
 8011d40:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8011d44:	78fb      	ldrb	r3, [r7, #3]
 8011d46:	f003 0302 	and.w	r3, r3, #2
 8011d4a:	2b00      	cmp	r3, #0
 8011d4c:	d104      	bne.n	8011d58 <tcp_enqueue_flags+0x148>
 8011d4e:	78fb      	ldrb	r3, [r7, #3]
 8011d50:	f003 0301 	and.w	r3, r3, #1
 8011d54:	2b00      	cmp	r3, #0
 8011d56:	d004      	beq.n	8011d62 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8011d58:	687b      	ldr	r3, [r7, #4]
 8011d5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011d5c:	1c5a      	adds	r2, r3, #1
 8011d5e:	687b      	ldr	r3, [r7, #4]
 8011d60:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8011d62:	78fb      	ldrb	r3, [r7, #3]
 8011d64:	f003 0301 	and.w	r3, r3, #1
 8011d68:	2b00      	cmp	r3, #0
 8011d6a:	d006      	beq.n	8011d7a <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8011d6c:	687b      	ldr	r3, [r7, #4]
 8011d6e:	8b5b      	ldrh	r3, [r3, #26]
 8011d70:	f043 0320 	orr.w	r3, r3, #32
 8011d74:	b29a      	uxth	r2, r3
 8011d76:	687b      	ldr	r3, [r7, #4]
 8011d78:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8011d7a:	68fb      	ldr	r3, [r7, #12]
 8011d7c:	685b      	ldr	r3, [r3, #4]
 8011d7e:	4618      	mov	r0, r3
 8011d80:	f7fa fcd8 	bl	800c734 <pbuf_clen>
 8011d84:	4603      	mov	r3, r0
 8011d86:	461a      	mov	r2, r3
 8011d88:	687b      	ldr	r3, [r7, #4]
 8011d8a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011d8e:	4413      	add	r3, r2
 8011d90:	b29a      	uxth	r2, r3
 8011d92:	687b      	ldr	r3, [r7, #4]
 8011d94:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8011d98:	687b      	ldr	r3, [r7, #4]
 8011d9a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011d9e:	2b00      	cmp	r3, #0
 8011da0:	d00e      	beq.n	8011dc0 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8011da2:	687b      	ldr	r3, [r7, #4]
 8011da4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011da6:	2b00      	cmp	r3, #0
 8011da8:	d10a      	bne.n	8011dc0 <tcp_enqueue_flags+0x1b0>
 8011daa:	687b      	ldr	r3, [r7, #4]
 8011dac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011dae:	2b00      	cmp	r3, #0
 8011db0:	d106      	bne.n	8011dc0 <tcp_enqueue_flags+0x1b0>
 8011db2:	4b06      	ldr	r3, [pc, #24]	; (8011dcc <tcp_enqueue_flags+0x1bc>)
 8011db4:	f240 4265 	movw	r2, #1125	; 0x465
 8011db8:	490b      	ldr	r1, [pc, #44]	; (8011de8 <tcp_enqueue_flags+0x1d8>)
 8011dba:	4806      	ldr	r0, [pc, #24]	; (8011dd4 <tcp_enqueue_flags+0x1c4>)
 8011dbc:	f006 fb02 	bl	80183c4 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8011dc0:	2300      	movs	r3, #0
}
 8011dc2:	4618      	mov	r0, r3
 8011dc4:	3720      	adds	r7, #32
 8011dc6:	46bd      	mov	sp, r7
 8011dc8:	bd80      	pop	{r7, pc}
 8011dca:	bf00      	nop
 8011dcc:	0801b714 	.word	0x0801b714
 8011dd0:	0801bb38 	.word	0x0801bb38
 8011dd4:	0801b768 	.word	0x0801b768
 8011dd8:	0801bb90 	.word	0x0801bb90
 8011ddc:	0801bbb0 	.word	0x0801bbb0
 8011de0:	0801bbec 	.word	0x0801bbec
 8011de4:	0801bc04 	.word	0x0801bc04
 8011de8:	0801bc30 	.word	0x0801bc30

08011dec <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8011dec:	b5b0      	push	{r4, r5, r7, lr}
 8011dee:	b08a      	sub	sp, #40	; 0x28
 8011df0:	af00      	add	r7, sp, #0
 8011df2:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8011df4:	687b      	ldr	r3, [r7, #4]
 8011df6:	2b00      	cmp	r3, #0
 8011df8:	d106      	bne.n	8011e08 <tcp_output+0x1c>
 8011dfa:	4b8a      	ldr	r3, [pc, #552]	; (8012024 <tcp_output+0x238>)
 8011dfc:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8011e00:	4989      	ldr	r1, [pc, #548]	; (8012028 <tcp_output+0x23c>)
 8011e02:	488a      	ldr	r0, [pc, #552]	; (801202c <tcp_output+0x240>)
 8011e04:	f006 fade 	bl	80183c4 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8011e08:	687b      	ldr	r3, [r7, #4]
 8011e0a:	7d1b      	ldrb	r3, [r3, #20]
 8011e0c:	2b01      	cmp	r3, #1
 8011e0e:	d106      	bne.n	8011e1e <tcp_output+0x32>
 8011e10:	4b84      	ldr	r3, [pc, #528]	; (8012024 <tcp_output+0x238>)
 8011e12:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8011e16:	4986      	ldr	r1, [pc, #536]	; (8012030 <tcp_output+0x244>)
 8011e18:	4884      	ldr	r0, [pc, #528]	; (801202c <tcp_output+0x240>)
 8011e1a:	f006 fad3 	bl	80183c4 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8011e1e:	4b85      	ldr	r3, [pc, #532]	; (8012034 <tcp_output+0x248>)
 8011e20:	681b      	ldr	r3, [r3, #0]
 8011e22:	687a      	ldr	r2, [r7, #4]
 8011e24:	429a      	cmp	r2, r3
 8011e26:	d101      	bne.n	8011e2c <tcp_output+0x40>
    return ERR_OK;
 8011e28:	2300      	movs	r3, #0
 8011e2a:	e1ce      	b.n	80121ca <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8011e2c:	687b      	ldr	r3, [r7, #4]
 8011e2e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011e32:	687b      	ldr	r3, [r7, #4]
 8011e34:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011e38:	4293      	cmp	r3, r2
 8011e3a:	bf28      	it	cs
 8011e3c:	4613      	movcs	r3, r2
 8011e3e:	b29b      	uxth	r3, r3
 8011e40:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8011e42:	687b      	ldr	r3, [r7, #4]
 8011e44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011e46:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8011e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e4a:	2b00      	cmp	r3, #0
 8011e4c:	d10b      	bne.n	8011e66 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8011e4e:	687b      	ldr	r3, [r7, #4]
 8011e50:	8b5b      	ldrh	r3, [r3, #26]
 8011e52:	f003 0302 	and.w	r3, r3, #2
 8011e56:	2b00      	cmp	r3, #0
 8011e58:	f000 81aa 	beq.w	80121b0 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8011e5c:	6878      	ldr	r0, [r7, #4]
 8011e5e:	f000 fdcb 	bl	80129f8 <tcp_send_empty_ack>
 8011e62:	4603      	mov	r3, r0
 8011e64:	e1b1      	b.n	80121ca <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8011e66:	6879      	ldr	r1, [r7, #4]
 8011e68:	687b      	ldr	r3, [r7, #4]
 8011e6a:	3304      	adds	r3, #4
 8011e6c:	461a      	mov	r2, r3
 8011e6e:	6878      	ldr	r0, [r7, #4]
 8011e70:	f7ff f824 	bl	8010ebc <tcp_route>
 8011e74:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8011e76:	697b      	ldr	r3, [r7, #20]
 8011e78:	2b00      	cmp	r3, #0
 8011e7a:	d102      	bne.n	8011e82 <tcp_output+0x96>
    return ERR_RTE;
 8011e7c:	f06f 0303 	mvn.w	r3, #3
 8011e80:	e1a3      	b.n	80121ca <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8011e82:	687b      	ldr	r3, [r7, #4]
 8011e84:	2b00      	cmp	r3, #0
 8011e86:	d003      	beq.n	8011e90 <tcp_output+0xa4>
 8011e88:	687b      	ldr	r3, [r7, #4]
 8011e8a:	681b      	ldr	r3, [r3, #0]
 8011e8c:	2b00      	cmp	r3, #0
 8011e8e:	d111      	bne.n	8011eb4 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8011e90:	697b      	ldr	r3, [r7, #20]
 8011e92:	2b00      	cmp	r3, #0
 8011e94:	d002      	beq.n	8011e9c <tcp_output+0xb0>
 8011e96:	697b      	ldr	r3, [r7, #20]
 8011e98:	3304      	adds	r3, #4
 8011e9a:	e000      	b.n	8011e9e <tcp_output+0xb2>
 8011e9c:	2300      	movs	r3, #0
 8011e9e:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8011ea0:	693b      	ldr	r3, [r7, #16]
 8011ea2:	2b00      	cmp	r3, #0
 8011ea4:	d102      	bne.n	8011eac <tcp_output+0xc0>
      return ERR_RTE;
 8011ea6:	f06f 0303 	mvn.w	r3, #3
 8011eaa:	e18e      	b.n	80121ca <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8011eac:	693b      	ldr	r3, [r7, #16]
 8011eae:	681a      	ldr	r2, [r3, #0]
 8011eb0:	687b      	ldr	r3, [r7, #4]
 8011eb2:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8011eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011eb6:	68db      	ldr	r3, [r3, #12]
 8011eb8:	685b      	ldr	r3, [r3, #4]
 8011eba:	4618      	mov	r0, r3
 8011ebc:	f7f8 ff8d 	bl	800adda <lwip_htonl>
 8011ec0:	4602      	mov	r2, r0
 8011ec2:	687b      	ldr	r3, [r7, #4]
 8011ec4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011ec6:	1ad3      	subs	r3, r2, r3
 8011ec8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011eca:	8912      	ldrh	r2, [r2, #8]
 8011ecc:	4413      	add	r3, r2
 8011ece:	69ba      	ldr	r2, [r7, #24]
 8011ed0:	429a      	cmp	r2, r3
 8011ed2:	d227      	bcs.n	8011f24 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8011ed4:	687b      	ldr	r3, [r7, #4]
 8011ed6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011eda:	461a      	mov	r2, r3
 8011edc:	69bb      	ldr	r3, [r7, #24]
 8011ede:	4293      	cmp	r3, r2
 8011ee0:	d114      	bne.n	8011f0c <tcp_output+0x120>
 8011ee2:	687b      	ldr	r3, [r7, #4]
 8011ee4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011ee6:	2b00      	cmp	r3, #0
 8011ee8:	d110      	bne.n	8011f0c <tcp_output+0x120>
 8011eea:	687b      	ldr	r3, [r7, #4]
 8011eec:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8011ef0:	2b00      	cmp	r3, #0
 8011ef2:	d10b      	bne.n	8011f0c <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8011ef4:	687b      	ldr	r3, [r7, #4]
 8011ef6:	2200      	movs	r2, #0
 8011ef8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8011efc:	687b      	ldr	r3, [r7, #4]
 8011efe:	2201      	movs	r2, #1
 8011f00:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8011f04:	687b      	ldr	r3, [r7, #4]
 8011f06:	2200      	movs	r2, #0
 8011f08:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8011f0c:	687b      	ldr	r3, [r7, #4]
 8011f0e:	8b5b      	ldrh	r3, [r3, #26]
 8011f10:	f003 0302 	and.w	r3, r3, #2
 8011f14:	2b00      	cmp	r3, #0
 8011f16:	f000 814d 	beq.w	80121b4 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8011f1a:	6878      	ldr	r0, [r7, #4]
 8011f1c:	f000 fd6c 	bl	80129f8 <tcp_send_empty_ack>
 8011f20:	4603      	mov	r3, r0
 8011f22:	e152      	b.n	80121ca <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8011f24:	687b      	ldr	r3, [r7, #4]
 8011f26:	2200      	movs	r2, #0
 8011f28:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8011f2c:	687b      	ldr	r3, [r7, #4]
 8011f2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011f30:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8011f32:	6a3b      	ldr	r3, [r7, #32]
 8011f34:	2b00      	cmp	r3, #0
 8011f36:	f000 811c 	beq.w	8012172 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8011f3a:	e002      	b.n	8011f42 <tcp_output+0x156>
 8011f3c:	6a3b      	ldr	r3, [r7, #32]
 8011f3e:	681b      	ldr	r3, [r3, #0]
 8011f40:	623b      	str	r3, [r7, #32]
 8011f42:	6a3b      	ldr	r3, [r7, #32]
 8011f44:	681b      	ldr	r3, [r3, #0]
 8011f46:	2b00      	cmp	r3, #0
 8011f48:	d1f8      	bne.n	8011f3c <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8011f4a:	e112      	b.n	8012172 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8011f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f4e:	68db      	ldr	r3, [r3, #12]
 8011f50:	899b      	ldrh	r3, [r3, #12]
 8011f52:	b29b      	uxth	r3, r3
 8011f54:	4618      	mov	r0, r3
 8011f56:	f7f8 ff2b 	bl	800adb0 <lwip_htons>
 8011f5a:	4603      	mov	r3, r0
 8011f5c:	b2db      	uxtb	r3, r3
 8011f5e:	f003 0304 	and.w	r3, r3, #4
 8011f62:	2b00      	cmp	r3, #0
 8011f64:	d006      	beq.n	8011f74 <tcp_output+0x188>
 8011f66:	4b2f      	ldr	r3, [pc, #188]	; (8012024 <tcp_output+0x238>)
 8011f68:	f240 5236 	movw	r2, #1334	; 0x536
 8011f6c:	4932      	ldr	r1, [pc, #200]	; (8012038 <tcp_output+0x24c>)
 8011f6e:	482f      	ldr	r0, [pc, #188]	; (801202c <tcp_output+0x240>)
 8011f70:	f006 fa28 	bl	80183c4 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8011f74:	687b      	ldr	r3, [r7, #4]
 8011f76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011f78:	2b00      	cmp	r3, #0
 8011f7a:	d01f      	beq.n	8011fbc <tcp_output+0x1d0>
 8011f7c:	687b      	ldr	r3, [r7, #4]
 8011f7e:	8b5b      	ldrh	r3, [r3, #26]
 8011f80:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8011f84:	2b00      	cmp	r3, #0
 8011f86:	d119      	bne.n	8011fbc <tcp_output+0x1d0>
 8011f88:	687b      	ldr	r3, [r7, #4]
 8011f8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011f8c:	2b00      	cmp	r3, #0
 8011f8e:	d00b      	beq.n	8011fa8 <tcp_output+0x1bc>
 8011f90:	687b      	ldr	r3, [r7, #4]
 8011f92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011f94:	681b      	ldr	r3, [r3, #0]
 8011f96:	2b00      	cmp	r3, #0
 8011f98:	d110      	bne.n	8011fbc <tcp_output+0x1d0>
 8011f9a:	687b      	ldr	r3, [r7, #4]
 8011f9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011f9e:	891a      	ldrh	r2, [r3, #8]
 8011fa0:	687b      	ldr	r3, [r7, #4]
 8011fa2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011fa4:	429a      	cmp	r2, r3
 8011fa6:	d209      	bcs.n	8011fbc <tcp_output+0x1d0>
 8011fa8:	687b      	ldr	r3, [r7, #4]
 8011faa:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8011fae:	2b00      	cmp	r3, #0
 8011fb0:	d004      	beq.n	8011fbc <tcp_output+0x1d0>
 8011fb2:	687b      	ldr	r3, [r7, #4]
 8011fb4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011fb8:	2b08      	cmp	r3, #8
 8011fba:	d901      	bls.n	8011fc0 <tcp_output+0x1d4>
 8011fbc:	2301      	movs	r3, #1
 8011fbe:	e000      	b.n	8011fc2 <tcp_output+0x1d6>
 8011fc0:	2300      	movs	r3, #0
 8011fc2:	2b00      	cmp	r3, #0
 8011fc4:	d106      	bne.n	8011fd4 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8011fc6:	687b      	ldr	r3, [r7, #4]
 8011fc8:	8b5b      	ldrh	r3, [r3, #26]
 8011fca:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8011fce:	2b00      	cmp	r3, #0
 8011fd0:	f000 80e4 	beq.w	801219c <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8011fd4:	687b      	ldr	r3, [r7, #4]
 8011fd6:	7d1b      	ldrb	r3, [r3, #20]
 8011fd8:	2b02      	cmp	r3, #2
 8011fda:	d00d      	beq.n	8011ff8 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8011fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011fde:	68db      	ldr	r3, [r3, #12]
 8011fe0:	899b      	ldrh	r3, [r3, #12]
 8011fe2:	b29c      	uxth	r4, r3
 8011fe4:	2010      	movs	r0, #16
 8011fe6:	f7f8 fee3 	bl	800adb0 <lwip_htons>
 8011fea:	4603      	mov	r3, r0
 8011fec:	461a      	mov	r2, r3
 8011fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ff0:	68db      	ldr	r3, [r3, #12]
 8011ff2:	4322      	orrs	r2, r4
 8011ff4:	b292      	uxth	r2, r2
 8011ff6:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8011ff8:	697a      	ldr	r2, [r7, #20]
 8011ffa:	6879      	ldr	r1, [r7, #4]
 8011ffc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011ffe:	f000 f909 	bl	8012214 <tcp_output_segment>
 8012002:	4603      	mov	r3, r0
 8012004:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8012006:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801200a:	2b00      	cmp	r3, #0
 801200c:	d016      	beq.n	801203c <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801200e:	687b      	ldr	r3, [r7, #4]
 8012010:	8b5b      	ldrh	r3, [r3, #26]
 8012012:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012016:	b29a      	uxth	r2, r3
 8012018:	687b      	ldr	r3, [r7, #4]
 801201a:	835a      	strh	r2, [r3, #26]
      return err;
 801201c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012020:	e0d3      	b.n	80121ca <tcp_output+0x3de>
 8012022:	bf00      	nop
 8012024:	0801b714 	.word	0x0801b714
 8012028:	0801bc58 	.word	0x0801bc58
 801202c:	0801b768 	.word	0x0801b768
 8012030:	0801bc70 	.word	0x0801bc70
 8012034:	20010dc4 	.word	0x20010dc4
 8012038:	0801bc98 	.word	0x0801bc98
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 801203c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801203e:	681a      	ldr	r2, [r3, #0]
 8012040:	687b      	ldr	r3, [r7, #4]
 8012042:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8012044:	687b      	ldr	r3, [r7, #4]
 8012046:	7d1b      	ldrb	r3, [r3, #20]
 8012048:	2b02      	cmp	r3, #2
 801204a:	d006      	beq.n	801205a <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801204c:	687b      	ldr	r3, [r7, #4]
 801204e:	8b5b      	ldrh	r3, [r3, #26]
 8012050:	f023 0303 	bic.w	r3, r3, #3
 8012054:	b29a      	uxth	r2, r3
 8012056:	687b      	ldr	r3, [r7, #4]
 8012058:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801205a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801205c:	68db      	ldr	r3, [r3, #12]
 801205e:	685b      	ldr	r3, [r3, #4]
 8012060:	4618      	mov	r0, r3
 8012062:	f7f8 feba 	bl	800adda <lwip_htonl>
 8012066:	4604      	mov	r4, r0
 8012068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801206a:	891b      	ldrh	r3, [r3, #8]
 801206c:	461d      	mov	r5, r3
 801206e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012070:	68db      	ldr	r3, [r3, #12]
 8012072:	899b      	ldrh	r3, [r3, #12]
 8012074:	b29b      	uxth	r3, r3
 8012076:	4618      	mov	r0, r3
 8012078:	f7f8 fe9a 	bl	800adb0 <lwip_htons>
 801207c:	4603      	mov	r3, r0
 801207e:	b2db      	uxtb	r3, r3
 8012080:	f003 0303 	and.w	r3, r3, #3
 8012084:	2b00      	cmp	r3, #0
 8012086:	d001      	beq.n	801208c <tcp_output+0x2a0>
 8012088:	2301      	movs	r3, #1
 801208a:	e000      	b.n	801208e <tcp_output+0x2a2>
 801208c:	2300      	movs	r3, #0
 801208e:	442b      	add	r3, r5
 8012090:	4423      	add	r3, r4
 8012092:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8012094:	687b      	ldr	r3, [r7, #4]
 8012096:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012098:	68bb      	ldr	r3, [r7, #8]
 801209a:	1ad3      	subs	r3, r2, r3
 801209c:	2b00      	cmp	r3, #0
 801209e:	da02      	bge.n	80120a6 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 80120a0:	687b      	ldr	r3, [r7, #4]
 80120a2:	68ba      	ldr	r2, [r7, #8]
 80120a4:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 80120a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120a8:	891b      	ldrh	r3, [r3, #8]
 80120aa:	461c      	mov	r4, r3
 80120ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120ae:	68db      	ldr	r3, [r3, #12]
 80120b0:	899b      	ldrh	r3, [r3, #12]
 80120b2:	b29b      	uxth	r3, r3
 80120b4:	4618      	mov	r0, r3
 80120b6:	f7f8 fe7b 	bl	800adb0 <lwip_htons>
 80120ba:	4603      	mov	r3, r0
 80120bc:	b2db      	uxtb	r3, r3
 80120be:	f003 0303 	and.w	r3, r3, #3
 80120c2:	2b00      	cmp	r3, #0
 80120c4:	d001      	beq.n	80120ca <tcp_output+0x2de>
 80120c6:	2301      	movs	r3, #1
 80120c8:	e000      	b.n	80120cc <tcp_output+0x2e0>
 80120ca:	2300      	movs	r3, #0
 80120cc:	4423      	add	r3, r4
 80120ce:	2b00      	cmp	r3, #0
 80120d0:	d049      	beq.n	8012166 <tcp_output+0x37a>
      seg->next = NULL;
 80120d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120d4:	2200      	movs	r2, #0
 80120d6:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 80120d8:	687b      	ldr	r3, [r7, #4]
 80120da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80120dc:	2b00      	cmp	r3, #0
 80120de:	d105      	bne.n	80120ec <tcp_output+0x300>
        pcb->unacked = seg;
 80120e0:	687b      	ldr	r3, [r7, #4]
 80120e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80120e4:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 80120e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120e8:	623b      	str	r3, [r7, #32]
 80120ea:	e03f      	b.n	801216c <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 80120ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120ee:	68db      	ldr	r3, [r3, #12]
 80120f0:	685b      	ldr	r3, [r3, #4]
 80120f2:	4618      	mov	r0, r3
 80120f4:	f7f8 fe71 	bl	800adda <lwip_htonl>
 80120f8:	4604      	mov	r4, r0
 80120fa:	6a3b      	ldr	r3, [r7, #32]
 80120fc:	68db      	ldr	r3, [r3, #12]
 80120fe:	685b      	ldr	r3, [r3, #4]
 8012100:	4618      	mov	r0, r3
 8012102:	f7f8 fe6a 	bl	800adda <lwip_htonl>
 8012106:	4603      	mov	r3, r0
 8012108:	1ae3      	subs	r3, r4, r3
 801210a:	2b00      	cmp	r3, #0
 801210c:	da24      	bge.n	8012158 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 801210e:	687b      	ldr	r3, [r7, #4]
 8012110:	3370      	adds	r3, #112	; 0x70
 8012112:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8012114:	e002      	b.n	801211c <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8012116:	69fb      	ldr	r3, [r7, #28]
 8012118:	681b      	ldr	r3, [r3, #0]
 801211a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801211c:	69fb      	ldr	r3, [r7, #28]
 801211e:	681b      	ldr	r3, [r3, #0]
 8012120:	2b00      	cmp	r3, #0
 8012122:	d011      	beq.n	8012148 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8012124:	69fb      	ldr	r3, [r7, #28]
 8012126:	681b      	ldr	r3, [r3, #0]
 8012128:	68db      	ldr	r3, [r3, #12]
 801212a:	685b      	ldr	r3, [r3, #4]
 801212c:	4618      	mov	r0, r3
 801212e:	f7f8 fe54 	bl	800adda <lwip_htonl>
 8012132:	4604      	mov	r4, r0
 8012134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012136:	68db      	ldr	r3, [r3, #12]
 8012138:	685b      	ldr	r3, [r3, #4]
 801213a:	4618      	mov	r0, r3
 801213c:	f7f8 fe4d 	bl	800adda <lwip_htonl>
 8012140:	4603      	mov	r3, r0
 8012142:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8012144:	2b00      	cmp	r3, #0
 8012146:	dbe6      	blt.n	8012116 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8012148:	69fb      	ldr	r3, [r7, #28]
 801214a:	681a      	ldr	r2, [r3, #0]
 801214c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801214e:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8012150:	69fb      	ldr	r3, [r7, #28]
 8012152:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012154:	601a      	str	r2, [r3, #0]
 8012156:	e009      	b.n	801216c <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8012158:	6a3b      	ldr	r3, [r7, #32]
 801215a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801215c:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 801215e:	6a3b      	ldr	r3, [r7, #32]
 8012160:	681b      	ldr	r3, [r3, #0]
 8012162:	623b      	str	r3, [r7, #32]
 8012164:	e002      	b.n	801216c <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8012166:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012168:	f7fb fefb 	bl	800df62 <tcp_seg_free>
    }
    seg = pcb->unsent;
 801216c:	687b      	ldr	r3, [r7, #4]
 801216e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012170:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8012172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012174:	2b00      	cmp	r3, #0
 8012176:	d012      	beq.n	801219e <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8012178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801217a:	68db      	ldr	r3, [r3, #12]
 801217c:	685b      	ldr	r3, [r3, #4]
 801217e:	4618      	mov	r0, r3
 8012180:	f7f8 fe2b 	bl	800adda <lwip_htonl>
 8012184:	4602      	mov	r2, r0
 8012186:	687b      	ldr	r3, [r7, #4]
 8012188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801218a:	1ad3      	subs	r3, r2, r3
 801218c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801218e:	8912      	ldrh	r2, [r2, #8]
 8012190:	4413      	add	r3, r2
  while (seg != NULL &&
 8012192:	69ba      	ldr	r2, [r7, #24]
 8012194:	429a      	cmp	r2, r3
 8012196:	f4bf aed9 	bcs.w	8011f4c <tcp_output+0x160>
 801219a:	e000      	b.n	801219e <tcp_output+0x3b2>
      break;
 801219c:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 801219e:	687b      	ldr	r3, [r7, #4]
 80121a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80121a2:	2b00      	cmp	r3, #0
 80121a4:	d108      	bne.n	80121b8 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80121a6:	687b      	ldr	r3, [r7, #4]
 80121a8:	2200      	movs	r2, #0
 80121aa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 80121ae:	e004      	b.n	80121ba <tcp_output+0x3ce>
    goto output_done;
 80121b0:	bf00      	nop
 80121b2:	e002      	b.n	80121ba <tcp_output+0x3ce>
    goto output_done;
 80121b4:	bf00      	nop
 80121b6:	e000      	b.n	80121ba <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 80121b8:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 80121ba:	687b      	ldr	r3, [r7, #4]
 80121bc:	8b5b      	ldrh	r3, [r3, #26]
 80121be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80121c2:	b29a      	uxth	r2, r3
 80121c4:	687b      	ldr	r3, [r7, #4]
 80121c6:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 80121c8:	2300      	movs	r3, #0
}
 80121ca:	4618      	mov	r0, r3
 80121cc:	3728      	adds	r7, #40	; 0x28
 80121ce:	46bd      	mov	sp, r7
 80121d0:	bdb0      	pop	{r4, r5, r7, pc}
 80121d2:	bf00      	nop

080121d4 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 80121d4:	b580      	push	{r7, lr}
 80121d6:	b082      	sub	sp, #8
 80121d8:	af00      	add	r7, sp, #0
 80121da:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 80121dc:	687b      	ldr	r3, [r7, #4]
 80121de:	2b00      	cmp	r3, #0
 80121e0:	d106      	bne.n	80121f0 <tcp_output_segment_busy+0x1c>
 80121e2:	4b09      	ldr	r3, [pc, #36]	; (8012208 <tcp_output_segment_busy+0x34>)
 80121e4:	f240 529a 	movw	r2, #1434	; 0x59a
 80121e8:	4908      	ldr	r1, [pc, #32]	; (801220c <tcp_output_segment_busy+0x38>)
 80121ea:	4809      	ldr	r0, [pc, #36]	; (8012210 <tcp_output_segment_busy+0x3c>)
 80121ec:	f006 f8ea 	bl	80183c4 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 80121f0:	687b      	ldr	r3, [r7, #4]
 80121f2:	685b      	ldr	r3, [r3, #4]
 80121f4:	7b9b      	ldrb	r3, [r3, #14]
 80121f6:	2b01      	cmp	r3, #1
 80121f8:	d001      	beq.n	80121fe <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 80121fa:	2301      	movs	r3, #1
 80121fc:	e000      	b.n	8012200 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 80121fe:	2300      	movs	r3, #0
}
 8012200:	4618      	mov	r0, r3
 8012202:	3708      	adds	r7, #8
 8012204:	46bd      	mov	sp, r7
 8012206:	bd80      	pop	{r7, pc}
 8012208:	0801b714 	.word	0x0801b714
 801220c:	0801bcb0 	.word	0x0801bcb0
 8012210:	0801b768 	.word	0x0801b768

08012214 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8012214:	b5b0      	push	{r4, r5, r7, lr}
 8012216:	b08c      	sub	sp, #48	; 0x30
 8012218:	af04      	add	r7, sp, #16
 801221a:	60f8      	str	r0, [r7, #12]
 801221c:	60b9      	str	r1, [r7, #8]
 801221e:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8012220:	68fb      	ldr	r3, [r7, #12]
 8012222:	2b00      	cmp	r3, #0
 8012224:	d106      	bne.n	8012234 <tcp_output_segment+0x20>
 8012226:	4b63      	ldr	r3, [pc, #396]	; (80123b4 <tcp_output_segment+0x1a0>)
 8012228:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 801222c:	4962      	ldr	r1, [pc, #392]	; (80123b8 <tcp_output_segment+0x1a4>)
 801222e:	4863      	ldr	r0, [pc, #396]	; (80123bc <tcp_output_segment+0x1a8>)
 8012230:	f006 f8c8 	bl	80183c4 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8012234:	68bb      	ldr	r3, [r7, #8]
 8012236:	2b00      	cmp	r3, #0
 8012238:	d106      	bne.n	8012248 <tcp_output_segment+0x34>
 801223a:	4b5e      	ldr	r3, [pc, #376]	; (80123b4 <tcp_output_segment+0x1a0>)
 801223c:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8012240:	495f      	ldr	r1, [pc, #380]	; (80123c0 <tcp_output_segment+0x1ac>)
 8012242:	485e      	ldr	r0, [pc, #376]	; (80123bc <tcp_output_segment+0x1a8>)
 8012244:	f006 f8be 	bl	80183c4 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8012248:	687b      	ldr	r3, [r7, #4]
 801224a:	2b00      	cmp	r3, #0
 801224c:	d106      	bne.n	801225c <tcp_output_segment+0x48>
 801224e:	4b59      	ldr	r3, [pc, #356]	; (80123b4 <tcp_output_segment+0x1a0>)
 8012250:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8012254:	495b      	ldr	r1, [pc, #364]	; (80123c4 <tcp_output_segment+0x1b0>)
 8012256:	4859      	ldr	r0, [pc, #356]	; (80123bc <tcp_output_segment+0x1a8>)
 8012258:	f006 f8b4 	bl	80183c4 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 801225c:	68f8      	ldr	r0, [r7, #12]
 801225e:	f7ff ffb9 	bl	80121d4 <tcp_output_segment_busy>
 8012262:	4603      	mov	r3, r0
 8012264:	2b00      	cmp	r3, #0
 8012266:	d001      	beq.n	801226c <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8012268:	2300      	movs	r3, #0
 801226a:	e09f      	b.n	80123ac <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 801226c:	68bb      	ldr	r3, [r7, #8]
 801226e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012270:	68fb      	ldr	r3, [r7, #12]
 8012272:	68dc      	ldr	r4, [r3, #12]
 8012274:	4610      	mov	r0, r2
 8012276:	f7f8 fdb0 	bl	800adda <lwip_htonl>
 801227a:	4603      	mov	r3, r0
 801227c:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801227e:	68bb      	ldr	r3, [r7, #8]
 8012280:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8012282:	68fb      	ldr	r3, [r7, #12]
 8012284:	68dc      	ldr	r4, [r3, #12]
 8012286:	4610      	mov	r0, r2
 8012288:	f7f8 fd92 	bl	800adb0 <lwip_htons>
 801228c:	4603      	mov	r3, r0
 801228e:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8012290:	68bb      	ldr	r3, [r7, #8]
 8012292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012294:	68ba      	ldr	r2, [r7, #8]
 8012296:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8012298:	441a      	add	r2, r3
 801229a:	68bb      	ldr	r3, [r7, #8]
 801229c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801229e:	68fb      	ldr	r3, [r7, #12]
 80122a0:	68db      	ldr	r3, [r3, #12]
 80122a2:	3314      	adds	r3, #20
 80122a4:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 80122a6:	68fb      	ldr	r3, [r7, #12]
 80122a8:	7a9b      	ldrb	r3, [r3, #10]
 80122aa:	f003 0301 	and.w	r3, r3, #1
 80122ae:	2b00      	cmp	r3, #0
 80122b0:	d015      	beq.n	80122de <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 80122b2:	68bb      	ldr	r3, [r7, #8]
 80122b4:	3304      	adds	r3, #4
 80122b6:	461a      	mov	r2, r3
 80122b8:	6879      	ldr	r1, [r7, #4]
 80122ba:	f44f 7006 	mov.w	r0, #536	; 0x218
 80122be:	f7fc fa33 	bl	800e728 <tcp_eff_send_mss_netif>
 80122c2:	4603      	mov	r3, r0
 80122c4:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 80122c6:	8b7b      	ldrh	r3, [r7, #26]
 80122c8:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 80122cc:	4618      	mov	r0, r3
 80122ce:	f7f8 fd84 	bl	800adda <lwip_htonl>
 80122d2:	4602      	mov	r2, r0
 80122d4:	69fb      	ldr	r3, [r7, #28]
 80122d6:	601a      	str	r2, [r3, #0]
    opts += 1;
 80122d8:	69fb      	ldr	r3, [r7, #28]
 80122da:	3304      	adds	r3, #4
 80122dc:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 80122de:	68bb      	ldr	r3, [r7, #8]
 80122e0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80122e4:	2b00      	cmp	r3, #0
 80122e6:	da02      	bge.n	80122ee <tcp_output_segment+0xda>
    pcb->rtime = 0;
 80122e8:	68bb      	ldr	r3, [r7, #8]
 80122ea:	2200      	movs	r2, #0
 80122ec:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 80122ee:	68bb      	ldr	r3, [r7, #8]
 80122f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80122f2:	2b00      	cmp	r3, #0
 80122f4:	d10c      	bne.n	8012310 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 80122f6:	4b34      	ldr	r3, [pc, #208]	; (80123c8 <tcp_output_segment+0x1b4>)
 80122f8:	681a      	ldr	r2, [r3, #0]
 80122fa:	68bb      	ldr	r3, [r7, #8]
 80122fc:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 80122fe:	68fb      	ldr	r3, [r7, #12]
 8012300:	68db      	ldr	r3, [r3, #12]
 8012302:	685b      	ldr	r3, [r3, #4]
 8012304:	4618      	mov	r0, r3
 8012306:	f7f8 fd68 	bl	800adda <lwip_htonl>
 801230a:	4602      	mov	r2, r0
 801230c:	68bb      	ldr	r3, [r7, #8]
 801230e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8012310:	68fb      	ldr	r3, [r7, #12]
 8012312:	68da      	ldr	r2, [r3, #12]
 8012314:	68fb      	ldr	r3, [r7, #12]
 8012316:	685b      	ldr	r3, [r3, #4]
 8012318:	685b      	ldr	r3, [r3, #4]
 801231a:	1ad3      	subs	r3, r2, r3
 801231c:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 801231e:	68fb      	ldr	r3, [r7, #12]
 8012320:	685b      	ldr	r3, [r3, #4]
 8012322:	8959      	ldrh	r1, [r3, #10]
 8012324:	68fb      	ldr	r3, [r7, #12]
 8012326:	685b      	ldr	r3, [r3, #4]
 8012328:	8b3a      	ldrh	r2, [r7, #24]
 801232a:	1a8a      	subs	r2, r1, r2
 801232c:	b292      	uxth	r2, r2
 801232e:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8012330:	68fb      	ldr	r3, [r7, #12]
 8012332:	685b      	ldr	r3, [r3, #4]
 8012334:	8919      	ldrh	r1, [r3, #8]
 8012336:	68fb      	ldr	r3, [r7, #12]
 8012338:	685b      	ldr	r3, [r3, #4]
 801233a:	8b3a      	ldrh	r2, [r7, #24]
 801233c:	1a8a      	subs	r2, r1, r2
 801233e:	b292      	uxth	r2, r2
 8012340:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8012342:	68fb      	ldr	r3, [r7, #12]
 8012344:	685b      	ldr	r3, [r3, #4]
 8012346:	68fa      	ldr	r2, [r7, #12]
 8012348:	68d2      	ldr	r2, [r2, #12]
 801234a:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 801234c:	68fb      	ldr	r3, [r7, #12]
 801234e:	68db      	ldr	r3, [r3, #12]
 8012350:	2200      	movs	r2, #0
 8012352:	741a      	strb	r2, [r3, #16]
 8012354:	2200      	movs	r2, #0
 8012356:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8012358:	68fb      	ldr	r3, [r7, #12]
 801235a:	68db      	ldr	r3, [r3, #12]
 801235c:	f103 0214 	add.w	r2, r3, #20
 8012360:	68fb      	ldr	r3, [r7, #12]
 8012362:	7a9b      	ldrb	r3, [r3, #10]
 8012364:	009b      	lsls	r3, r3, #2
 8012366:	f003 0304 	and.w	r3, r3, #4
 801236a:	4413      	add	r3, r2
 801236c:	69fa      	ldr	r2, [r7, #28]
 801236e:	429a      	cmp	r2, r3
 8012370:	d006      	beq.n	8012380 <tcp_output_segment+0x16c>
 8012372:	4b10      	ldr	r3, [pc, #64]	; (80123b4 <tcp_output_segment+0x1a0>)
 8012374:	f240 621c 	movw	r2, #1564	; 0x61c
 8012378:	4914      	ldr	r1, [pc, #80]	; (80123cc <tcp_output_segment+0x1b8>)
 801237a:	4810      	ldr	r0, [pc, #64]	; (80123bc <tcp_output_segment+0x1a8>)
 801237c:	f006 f822 	bl	80183c4 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8012380:	68fb      	ldr	r3, [r7, #12]
 8012382:	6858      	ldr	r0, [r3, #4]
 8012384:	68b9      	ldr	r1, [r7, #8]
 8012386:	68bb      	ldr	r3, [r7, #8]
 8012388:	1d1c      	adds	r4, r3, #4
 801238a:	68bb      	ldr	r3, [r7, #8]
 801238c:	7add      	ldrb	r5, [r3, #11]
 801238e:	68bb      	ldr	r3, [r7, #8]
 8012390:	7a9b      	ldrb	r3, [r3, #10]
 8012392:	687a      	ldr	r2, [r7, #4]
 8012394:	9202      	str	r2, [sp, #8]
 8012396:	2206      	movs	r2, #6
 8012398:	9201      	str	r2, [sp, #4]
 801239a:	9300      	str	r3, [sp, #0]
 801239c:	462b      	mov	r3, r5
 801239e:	4622      	mov	r2, r4
 80123a0:	f004 fc28 	bl	8016bf4 <ip4_output_if>
 80123a4:	4603      	mov	r3, r0
 80123a6:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 80123a8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80123ac:	4618      	mov	r0, r3
 80123ae:	3720      	adds	r7, #32
 80123b0:	46bd      	mov	sp, r7
 80123b2:	bdb0      	pop	{r4, r5, r7, pc}
 80123b4:	0801b714 	.word	0x0801b714
 80123b8:	0801bcd8 	.word	0x0801bcd8
 80123bc:	0801b768 	.word	0x0801b768
 80123c0:	0801bcf8 	.word	0x0801bcf8
 80123c4:	0801bd18 	.word	0x0801bd18
 80123c8:	20010d78 	.word	0x20010d78
 80123cc:	0801bd3c 	.word	0x0801bd3c

080123d0 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 80123d0:	b5b0      	push	{r4, r5, r7, lr}
 80123d2:	b084      	sub	sp, #16
 80123d4:	af00      	add	r7, sp, #0
 80123d6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 80123d8:	687b      	ldr	r3, [r7, #4]
 80123da:	2b00      	cmp	r3, #0
 80123dc:	d106      	bne.n	80123ec <tcp_rexmit_rto_prepare+0x1c>
 80123de:	4b31      	ldr	r3, [pc, #196]	; (80124a4 <tcp_rexmit_rto_prepare+0xd4>)
 80123e0:	f240 6263 	movw	r2, #1635	; 0x663
 80123e4:	4930      	ldr	r1, [pc, #192]	; (80124a8 <tcp_rexmit_rto_prepare+0xd8>)
 80123e6:	4831      	ldr	r0, [pc, #196]	; (80124ac <tcp_rexmit_rto_prepare+0xdc>)
 80123e8:	f005 ffec 	bl	80183c4 <iprintf>

  if (pcb->unacked == NULL) {
 80123ec:	687b      	ldr	r3, [r7, #4]
 80123ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80123f0:	2b00      	cmp	r3, #0
 80123f2:	d102      	bne.n	80123fa <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 80123f4:	f06f 0305 	mvn.w	r3, #5
 80123f8:	e050      	b.n	801249c <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80123fa:	687b      	ldr	r3, [r7, #4]
 80123fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80123fe:	60fb      	str	r3, [r7, #12]
 8012400:	e00b      	b.n	801241a <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8012402:	68f8      	ldr	r0, [r7, #12]
 8012404:	f7ff fee6 	bl	80121d4 <tcp_output_segment_busy>
 8012408:	4603      	mov	r3, r0
 801240a:	2b00      	cmp	r3, #0
 801240c:	d002      	beq.n	8012414 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 801240e:	f06f 0305 	mvn.w	r3, #5
 8012412:	e043      	b.n	801249c <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8012414:	68fb      	ldr	r3, [r7, #12]
 8012416:	681b      	ldr	r3, [r3, #0]
 8012418:	60fb      	str	r3, [r7, #12]
 801241a:	68fb      	ldr	r3, [r7, #12]
 801241c:	681b      	ldr	r3, [r3, #0]
 801241e:	2b00      	cmp	r3, #0
 8012420:	d1ef      	bne.n	8012402 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8012422:	68f8      	ldr	r0, [r7, #12]
 8012424:	f7ff fed6 	bl	80121d4 <tcp_output_segment_busy>
 8012428:	4603      	mov	r3, r0
 801242a:	2b00      	cmp	r3, #0
 801242c:	d002      	beq.n	8012434 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 801242e:	f06f 0305 	mvn.w	r3, #5
 8012432:	e033      	b.n	801249c <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8012434:	687b      	ldr	r3, [r7, #4]
 8012436:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8012438:	68fb      	ldr	r3, [r7, #12]
 801243a:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 801243c:	687b      	ldr	r3, [r7, #4]
 801243e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8012440:	687b      	ldr	r3, [r7, #4]
 8012442:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8012444:	687b      	ldr	r3, [r7, #4]
 8012446:	2200      	movs	r2, #0
 8012448:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 801244a:	687b      	ldr	r3, [r7, #4]
 801244c:	8b5b      	ldrh	r3, [r3, #26]
 801244e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8012452:	b29a      	uxth	r2, r3
 8012454:	687b      	ldr	r3, [r7, #4]
 8012456:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8012458:	68fb      	ldr	r3, [r7, #12]
 801245a:	68db      	ldr	r3, [r3, #12]
 801245c:	685b      	ldr	r3, [r3, #4]
 801245e:	4618      	mov	r0, r3
 8012460:	f7f8 fcbb 	bl	800adda <lwip_htonl>
 8012464:	4604      	mov	r4, r0
 8012466:	68fb      	ldr	r3, [r7, #12]
 8012468:	891b      	ldrh	r3, [r3, #8]
 801246a:	461d      	mov	r5, r3
 801246c:	68fb      	ldr	r3, [r7, #12]
 801246e:	68db      	ldr	r3, [r3, #12]
 8012470:	899b      	ldrh	r3, [r3, #12]
 8012472:	b29b      	uxth	r3, r3
 8012474:	4618      	mov	r0, r3
 8012476:	f7f8 fc9b 	bl	800adb0 <lwip_htons>
 801247a:	4603      	mov	r3, r0
 801247c:	b2db      	uxtb	r3, r3
 801247e:	f003 0303 	and.w	r3, r3, #3
 8012482:	2b00      	cmp	r3, #0
 8012484:	d001      	beq.n	801248a <tcp_rexmit_rto_prepare+0xba>
 8012486:	2301      	movs	r3, #1
 8012488:	e000      	b.n	801248c <tcp_rexmit_rto_prepare+0xbc>
 801248a:	2300      	movs	r3, #0
 801248c:	442b      	add	r3, r5
 801248e:	18e2      	adds	r2, r4, r3
 8012490:	687b      	ldr	r3, [r7, #4]
 8012492:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8012494:	687b      	ldr	r3, [r7, #4]
 8012496:	2200      	movs	r2, #0
 8012498:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 801249a:	2300      	movs	r3, #0
}
 801249c:	4618      	mov	r0, r3
 801249e:	3710      	adds	r7, #16
 80124a0:	46bd      	mov	sp, r7
 80124a2:	bdb0      	pop	{r4, r5, r7, pc}
 80124a4:	0801b714 	.word	0x0801b714
 80124a8:	0801bd50 	.word	0x0801bd50
 80124ac:	0801b768 	.word	0x0801b768

080124b0 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 80124b0:	b580      	push	{r7, lr}
 80124b2:	b082      	sub	sp, #8
 80124b4:	af00      	add	r7, sp, #0
 80124b6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 80124b8:	687b      	ldr	r3, [r7, #4]
 80124ba:	2b00      	cmp	r3, #0
 80124bc:	d106      	bne.n	80124cc <tcp_rexmit_rto_commit+0x1c>
 80124be:	4b0d      	ldr	r3, [pc, #52]	; (80124f4 <tcp_rexmit_rto_commit+0x44>)
 80124c0:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 80124c4:	490c      	ldr	r1, [pc, #48]	; (80124f8 <tcp_rexmit_rto_commit+0x48>)
 80124c6:	480d      	ldr	r0, [pc, #52]	; (80124fc <tcp_rexmit_rto_commit+0x4c>)
 80124c8:	f005 ff7c 	bl	80183c4 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 80124cc:	687b      	ldr	r3, [r7, #4]
 80124ce:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80124d2:	2bff      	cmp	r3, #255	; 0xff
 80124d4:	d007      	beq.n	80124e6 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 80124d6:	687b      	ldr	r3, [r7, #4]
 80124d8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80124dc:	3301      	adds	r3, #1
 80124de:	b2da      	uxtb	r2, r3
 80124e0:	687b      	ldr	r3, [r7, #4]
 80124e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 80124e6:	6878      	ldr	r0, [r7, #4]
 80124e8:	f7ff fc80 	bl	8011dec <tcp_output>
}
 80124ec:	bf00      	nop
 80124ee:	3708      	adds	r7, #8
 80124f0:	46bd      	mov	sp, r7
 80124f2:	bd80      	pop	{r7, pc}
 80124f4:	0801b714 	.word	0x0801b714
 80124f8:	0801bd74 	.word	0x0801bd74
 80124fc:	0801b768 	.word	0x0801b768

08012500 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8012500:	b580      	push	{r7, lr}
 8012502:	b082      	sub	sp, #8
 8012504:	af00      	add	r7, sp, #0
 8012506:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8012508:	687b      	ldr	r3, [r7, #4]
 801250a:	2b00      	cmp	r3, #0
 801250c:	d106      	bne.n	801251c <tcp_rexmit_rto+0x1c>
 801250e:	4b0a      	ldr	r3, [pc, #40]	; (8012538 <tcp_rexmit_rto+0x38>)
 8012510:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8012514:	4909      	ldr	r1, [pc, #36]	; (801253c <tcp_rexmit_rto+0x3c>)
 8012516:	480a      	ldr	r0, [pc, #40]	; (8012540 <tcp_rexmit_rto+0x40>)
 8012518:	f005 ff54 	bl	80183c4 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 801251c:	6878      	ldr	r0, [r7, #4]
 801251e:	f7ff ff57 	bl	80123d0 <tcp_rexmit_rto_prepare>
 8012522:	4603      	mov	r3, r0
 8012524:	2b00      	cmp	r3, #0
 8012526:	d102      	bne.n	801252e <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8012528:	6878      	ldr	r0, [r7, #4]
 801252a:	f7ff ffc1 	bl	80124b0 <tcp_rexmit_rto_commit>
  }
}
 801252e:	bf00      	nop
 8012530:	3708      	adds	r7, #8
 8012532:	46bd      	mov	sp, r7
 8012534:	bd80      	pop	{r7, pc}
 8012536:	bf00      	nop
 8012538:	0801b714 	.word	0x0801b714
 801253c:	0801bd98 	.word	0x0801bd98
 8012540:	0801b768 	.word	0x0801b768

08012544 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8012544:	b590      	push	{r4, r7, lr}
 8012546:	b085      	sub	sp, #20
 8012548:	af00      	add	r7, sp, #0
 801254a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 801254c:	687b      	ldr	r3, [r7, #4]
 801254e:	2b00      	cmp	r3, #0
 8012550:	d106      	bne.n	8012560 <tcp_rexmit+0x1c>
 8012552:	4b2f      	ldr	r3, [pc, #188]	; (8012610 <tcp_rexmit+0xcc>)
 8012554:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8012558:	492e      	ldr	r1, [pc, #184]	; (8012614 <tcp_rexmit+0xd0>)
 801255a:	482f      	ldr	r0, [pc, #188]	; (8012618 <tcp_rexmit+0xd4>)
 801255c:	f005 ff32 	bl	80183c4 <iprintf>

  if (pcb->unacked == NULL) {
 8012560:	687b      	ldr	r3, [r7, #4]
 8012562:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012564:	2b00      	cmp	r3, #0
 8012566:	d102      	bne.n	801256e <tcp_rexmit+0x2a>
    return ERR_VAL;
 8012568:	f06f 0305 	mvn.w	r3, #5
 801256c:	e04c      	b.n	8012608 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 801256e:	687b      	ldr	r3, [r7, #4]
 8012570:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012572:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8012574:	68b8      	ldr	r0, [r7, #8]
 8012576:	f7ff fe2d 	bl	80121d4 <tcp_output_segment_busy>
 801257a:	4603      	mov	r3, r0
 801257c:	2b00      	cmp	r3, #0
 801257e:	d002      	beq.n	8012586 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8012580:	f06f 0305 	mvn.w	r3, #5
 8012584:	e040      	b.n	8012608 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8012586:	68bb      	ldr	r3, [r7, #8]
 8012588:	681a      	ldr	r2, [r3, #0]
 801258a:	687b      	ldr	r3, [r7, #4]
 801258c:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 801258e:	687b      	ldr	r3, [r7, #4]
 8012590:	336c      	adds	r3, #108	; 0x6c
 8012592:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8012594:	e002      	b.n	801259c <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8012596:	68fb      	ldr	r3, [r7, #12]
 8012598:	681b      	ldr	r3, [r3, #0]
 801259a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801259c:	68fb      	ldr	r3, [r7, #12]
 801259e:	681b      	ldr	r3, [r3, #0]
 80125a0:	2b00      	cmp	r3, #0
 80125a2:	d011      	beq.n	80125c8 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80125a4:	68fb      	ldr	r3, [r7, #12]
 80125a6:	681b      	ldr	r3, [r3, #0]
 80125a8:	68db      	ldr	r3, [r3, #12]
 80125aa:	685b      	ldr	r3, [r3, #4]
 80125ac:	4618      	mov	r0, r3
 80125ae:	f7f8 fc14 	bl	800adda <lwip_htonl>
 80125b2:	4604      	mov	r4, r0
 80125b4:	68bb      	ldr	r3, [r7, #8]
 80125b6:	68db      	ldr	r3, [r3, #12]
 80125b8:	685b      	ldr	r3, [r3, #4]
 80125ba:	4618      	mov	r0, r3
 80125bc:	f7f8 fc0d 	bl	800adda <lwip_htonl>
 80125c0:	4603      	mov	r3, r0
 80125c2:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 80125c4:	2b00      	cmp	r3, #0
 80125c6:	dbe6      	blt.n	8012596 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 80125c8:	68fb      	ldr	r3, [r7, #12]
 80125ca:	681a      	ldr	r2, [r3, #0]
 80125cc:	68bb      	ldr	r3, [r7, #8]
 80125ce:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 80125d0:	68fb      	ldr	r3, [r7, #12]
 80125d2:	68ba      	ldr	r2, [r7, #8]
 80125d4:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 80125d6:	68bb      	ldr	r3, [r7, #8]
 80125d8:	681b      	ldr	r3, [r3, #0]
 80125da:	2b00      	cmp	r3, #0
 80125dc:	d103      	bne.n	80125e6 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80125de:	687b      	ldr	r3, [r7, #4]
 80125e0:	2200      	movs	r2, #0
 80125e2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 80125e6:	687b      	ldr	r3, [r7, #4]
 80125e8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80125ec:	2bff      	cmp	r3, #255	; 0xff
 80125ee:	d007      	beq.n	8012600 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 80125f0:	687b      	ldr	r3, [r7, #4]
 80125f2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80125f6:	3301      	adds	r3, #1
 80125f8:	b2da      	uxtb	r2, r3
 80125fa:	687b      	ldr	r3, [r7, #4]
 80125fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8012600:	687b      	ldr	r3, [r7, #4]
 8012602:	2200      	movs	r2, #0
 8012604:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8012606:	2300      	movs	r3, #0
}
 8012608:	4618      	mov	r0, r3
 801260a:	3714      	adds	r7, #20
 801260c:	46bd      	mov	sp, r7
 801260e:	bd90      	pop	{r4, r7, pc}
 8012610:	0801b714 	.word	0x0801b714
 8012614:	0801bdb4 	.word	0x0801bdb4
 8012618:	0801b768 	.word	0x0801b768

0801261c <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 801261c:	b580      	push	{r7, lr}
 801261e:	b082      	sub	sp, #8
 8012620:	af00      	add	r7, sp, #0
 8012622:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8012624:	687b      	ldr	r3, [r7, #4]
 8012626:	2b00      	cmp	r3, #0
 8012628:	d106      	bne.n	8012638 <tcp_rexmit_fast+0x1c>
 801262a:	4b2a      	ldr	r3, [pc, #168]	; (80126d4 <tcp_rexmit_fast+0xb8>)
 801262c:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8012630:	4929      	ldr	r1, [pc, #164]	; (80126d8 <tcp_rexmit_fast+0xbc>)
 8012632:	482a      	ldr	r0, [pc, #168]	; (80126dc <tcp_rexmit_fast+0xc0>)
 8012634:	f005 fec6 	bl	80183c4 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8012638:	687b      	ldr	r3, [r7, #4]
 801263a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801263c:	2b00      	cmp	r3, #0
 801263e:	d044      	beq.n	80126ca <tcp_rexmit_fast+0xae>
 8012640:	687b      	ldr	r3, [r7, #4]
 8012642:	8b5b      	ldrh	r3, [r3, #26]
 8012644:	f003 0304 	and.w	r3, r3, #4
 8012648:	2b00      	cmp	r3, #0
 801264a:	d13e      	bne.n	80126ca <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 801264c:	6878      	ldr	r0, [r7, #4]
 801264e:	f7ff ff79 	bl	8012544 <tcp_rexmit>
 8012652:	4603      	mov	r3, r0
 8012654:	2b00      	cmp	r3, #0
 8012656:	d138      	bne.n	80126ca <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8012658:	687b      	ldr	r3, [r7, #4]
 801265a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801265e:	687b      	ldr	r3, [r7, #4]
 8012660:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012664:	4293      	cmp	r3, r2
 8012666:	bf28      	it	cs
 8012668:	4613      	movcs	r3, r2
 801266a:	b29b      	uxth	r3, r3
 801266c:	0fda      	lsrs	r2, r3, #31
 801266e:	4413      	add	r3, r2
 8012670:	105b      	asrs	r3, r3, #1
 8012672:	b29a      	uxth	r2, r3
 8012674:	687b      	ldr	r3, [r7, #4]
 8012676:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 801267a:	687b      	ldr	r3, [r7, #4]
 801267c:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8012680:	461a      	mov	r2, r3
 8012682:	687b      	ldr	r3, [r7, #4]
 8012684:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012686:	005b      	lsls	r3, r3, #1
 8012688:	429a      	cmp	r2, r3
 801268a:	d206      	bcs.n	801269a <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 801268c:	687b      	ldr	r3, [r7, #4]
 801268e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012690:	005b      	lsls	r3, r3, #1
 8012692:	b29a      	uxth	r2, r3
 8012694:	687b      	ldr	r3, [r7, #4]
 8012696:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 801269a:	687b      	ldr	r3, [r7, #4]
 801269c:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80126a0:	687b      	ldr	r3, [r7, #4]
 80126a2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80126a4:	4619      	mov	r1, r3
 80126a6:	0049      	lsls	r1, r1, #1
 80126a8:	440b      	add	r3, r1
 80126aa:	b29b      	uxth	r3, r3
 80126ac:	4413      	add	r3, r2
 80126ae:	b29a      	uxth	r2, r3
 80126b0:	687b      	ldr	r3, [r7, #4]
 80126b2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 80126b6:	687b      	ldr	r3, [r7, #4]
 80126b8:	8b5b      	ldrh	r3, [r3, #26]
 80126ba:	f043 0304 	orr.w	r3, r3, #4
 80126be:	b29a      	uxth	r2, r3
 80126c0:	687b      	ldr	r3, [r7, #4]
 80126c2:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 80126c4:	687b      	ldr	r3, [r7, #4]
 80126c6:	2200      	movs	r2, #0
 80126c8:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 80126ca:	bf00      	nop
 80126cc:	3708      	adds	r7, #8
 80126ce:	46bd      	mov	sp, r7
 80126d0:	bd80      	pop	{r7, pc}
 80126d2:	bf00      	nop
 80126d4:	0801b714 	.word	0x0801b714
 80126d8:	0801bdcc 	.word	0x0801bdcc
 80126dc:	0801b768 	.word	0x0801b768

080126e0 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 80126e0:	b580      	push	{r7, lr}
 80126e2:	b086      	sub	sp, #24
 80126e4:	af00      	add	r7, sp, #0
 80126e6:	60f8      	str	r0, [r7, #12]
 80126e8:	607b      	str	r3, [r7, #4]
 80126ea:	460b      	mov	r3, r1
 80126ec:	817b      	strh	r3, [r7, #10]
 80126ee:	4613      	mov	r3, r2
 80126f0:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 80126f2:	897a      	ldrh	r2, [r7, #10]
 80126f4:	893b      	ldrh	r3, [r7, #8]
 80126f6:	4413      	add	r3, r2
 80126f8:	b29b      	uxth	r3, r3
 80126fa:	3314      	adds	r3, #20
 80126fc:	b29b      	uxth	r3, r3
 80126fe:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012702:	4619      	mov	r1, r3
 8012704:	2022      	movs	r0, #34	; 0x22
 8012706:	f7f9 fca3 	bl	800c050 <pbuf_alloc>
 801270a:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 801270c:	697b      	ldr	r3, [r7, #20]
 801270e:	2b00      	cmp	r3, #0
 8012710:	d04d      	beq.n	80127ae <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8012712:	897b      	ldrh	r3, [r7, #10]
 8012714:	3313      	adds	r3, #19
 8012716:	697a      	ldr	r2, [r7, #20]
 8012718:	8952      	ldrh	r2, [r2, #10]
 801271a:	4293      	cmp	r3, r2
 801271c:	db06      	blt.n	801272c <tcp_output_alloc_header_common+0x4c>
 801271e:	4b26      	ldr	r3, [pc, #152]	; (80127b8 <tcp_output_alloc_header_common+0xd8>)
 8012720:	f240 7223 	movw	r2, #1827	; 0x723
 8012724:	4925      	ldr	r1, [pc, #148]	; (80127bc <tcp_output_alloc_header_common+0xdc>)
 8012726:	4826      	ldr	r0, [pc, #152]	; (80127c0 <tcp_output_alloc_header_common+0xe0>)
 8012728:	f005 fe4c 	bl	80183c4 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 801272c:	697b      	ldr	r3, [r7, #20]
 801272e:	685b      	ldr	r3, [r3, #4]
 8012730:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8012732:	8c3b      	ldrh	r3, [r7, #32]
 8012734:	4618      	mov	r0, r3
 8012736:	f7f8 fb3b 	bl	800adb0 <lwip_htons>
 801273a:	4603      	mov	r3, r0
 801273c:	461a      	mov	r2, r3
 801273e:	693b      	ldr	r3, [r7, #16]
 8012740:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8012742:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012744:	4618      	mov	r0, r3
 8012746:	f7f8 fb33 	bl	800adb0 <lwip_htons>
 801274a:	4603      	mov	r3, r0
 801274c:	461a      	mov	r2, r3
 801274e:	693b      	ldr	r3, [r7, #16]
 8012750:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8012752:	693b      	ldr	r3, [r7, #16]
 8012754:	687a      	ldr	r2, [r7, #4]
 8012756:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8012758:	68f8      	ldr	r0, [r7, #12]
 801275a:	f7f8 fb3e 	bl	800adda <lwip_htonl>
 801275e:	4602      	mov	r2, r0
 8012760:	693b      	ldr	r3, [r7, #16]
 8012762:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8012764:	897b      	ldrh	r3, [r7, #10]
 8012766:	089b      	lsrs	r3, r3, #2
 8012768:	b29b      	uxth	r3, r3
 801276a:	3305      	adds	r3, #5
 801276c:	b29b      	uxth	r3, r3
 801276e:	031b      	lsls	r3, r3, #12
 8012770:	b29a      	uxth	r2, r3
 8012772:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8012776:	b29b      	uxth	r3, r3
 8012778:	4313      	orrs	r3, r2
 801277a:	b29b      	uxth	r3, r3
 801277c:	4618      	mov	r0, r3
 801277e:	f7f8 fb17 	bl	800adb0 <lwip_htons>
 8012782:	4603      	mov	r3, r0
 8012784:	461a      	mov	r2, r3
 8012786:	693b      	ldr	r3, [r7, #16]
 8012788:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 801278a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801278c:	4618      	mov	r0, r3
 801278e:	f7f8 fb0f 	bl	800adb0 <lwip_htons>
 8012792:	4603      	mov	r3, r0
 8012794:	461a      	mov	r2, r3
 8012796:	693b      	ldr	r3, [r7, #16]
 8012798:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 801279a:	693b      	ldr	r3, [r7, #16]
 801279c:	2200      	movs	r2, #0
 801279e:	741a      	strb	r2, [r3, #16]
 80127a0:	2200      	movs	r2, #0
 80127a2:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 80127a4:	693b      	ldr	r3, [r7, #16]
 80127a6:	2200      	movs	r2, #0
 80127a8:	749a      	strb	r2, [r3, #18]
 80127aa:	2200      	movs	r2, #0
 80127ac:	74da      	strb	r2, [r3, #19]
  }
  return p;
 80127ae:	697b      	ldr	r3, [r7, #20]
}
 80127b0:	4618      	mov	r0, r3
 80127b2:	3718      	adds	r7, #24
 80127b4:	46bd      	mov	sp, r7
 80127b6:	bd80      	pop	{r7, pc}
 80127b8:	0801b714 	.word	0x0801b714
 80127bc:	0801bdec 	.word	0x0801bdec
 80127c0:	0801b768 	.word	0x0801b768

080127c4 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 80127c4:	b5b0      	push	{r4, r5, r7, lr}
 80127c6:	b08a      	sub	sp, #40	; 0x28
 80127c8:	af04      	add	r7, sp, #16
 80127ca:	60f8      	str	r0, [r7, #12]
 80127cc:	607b      	str	r3, [r7, #4]
 80127ce:	460b      	mov	r3, r1
 80127d0:	817b      	strh	r3, [r7, #10]
 80127d2:	4613      	mov	r3, r2
 80127d4:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 80127d6:	68fb      	ldr	r3, [r7, #12]
 80127d8:	2b00      	cmp	r3, #0
 80127da:	d106      	bne.n	80127ea <tcp_output_alloc_header+0x26>
 80127dc:	4b15      	ldr	r3, [pc, #84]	; (8012834 <tcp_output_alloc_header+0x70>)
 80127de:	f240 7242 	movw	r2, #1858	; 0x742
 80127e2:	4915      	ldr	r1, [pc, #84]	; (8012838 <tcp_output_alloc_header+0x74>)
 80127e4:	4815      	ldr	r0, [pc, #84]	; (801283c <tcp_output_alloc_header+0x78>)
 80127e6:	f005 fded 	bl	80183c4 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 80127ea:	68fb      	ldr	r3, [r7, #12]
 80127ec:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80127ee:	68fb      	ldr	r3, [r7, #12]
 80127f0:	8adb      	ldrh	r3, [r3, #22]
 80127f2:	68fa      	ldr	r2, [r7, #12]
 80127f4:	8b12      	ldrh	r2, [r2, #24]
 80127f6:	68f9      	ldr	r1, [r7, #12]
 80127f8:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 80127fa:	893d      	ldrh	r5, [r7, #8]
 80127fc:	897c      	ldrh	r4, [r7, #10]
 80127fe:	9103      	str	r1, [sp, #12]
 8012800:	2110      	movs	r1, #16
 8012802:	9102      	str	r1, [sp, #8]
 8012804:	9201      	str	r2, [sp, #4]
 8012806:	9300      	str	r3, [sp, #0]
 8012808:	687b      	ldr	r3, [r7, #4]
 801280a:	462a      	mov	r2, r5
 801280c:	4621      	mov	r1, r4
 801280e:	f7ff ff67 	bl	80126e0 <tcp_output_alloc_header_common>
 8012812:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8012814:	697b      	ldr	r3, [r7, #20]
 8012816:	2b00      	cmp	r3, #0
 8012818:	d006      	beq.n	8012828 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801281a:	68fb      	ldr	r3, [r7, #12]
 801281c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801281e:	68fa      	ldr	r2, [r7, #12]
 8012820:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8012822:	441a      	add	r2, r3
 8012824:	68fb      	ldr	r3, [r7, #12]
 8012826:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8012828:	697b      	ldr	r3, [r7, #20]
}
 801282a:	4618      	mov	r0, r3
 801282c:	3718      	adds	r7, #24
 801282e:	46bd      	mov	sp, r7
 8012830:	bdb0      	pop	{r4, r5, r7, pc}
 8012832:	bf00      	nop
 8012834:	0801b714 	.word	0x0801b714
 8012838:	0801be1c 	.word	0x0801be1c
 801283c:	0801b768 	.word	0x0801b768

08012840 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8012840:	b580      	push	{r7, lr}
 8012842:	b088      	sub	sp, #32
 8012844:	af00      	add	r7, sp, #0
 8012846:	60f8      	str	r0, [r7, #12]
 8012848:	60b9      	str	r1, [r7, #8]
 801284a:	4611      	mov	r1, r2
 801284c:	461a      	mov	r2, r3
 801284e:	460b      	mov	r3, r1
 8012850:	71fb      	strb	r3, [r7, #7]
 8012852:	4613      	mov	r3, r2
 8012854:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8012856:	2300      	movs	r3, #0
 8012858:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 801285a:	68bb      	ldr	r3, [r7, #8]
 801285c:	2b00      	cmp	r3, #0
 801285e:	d106      	bne.n	801286e <tcp_output_fill_options+0x2e>
 8012860:	4b13      	ldr	r3, [pc, #76]	; (80128b0 <tcp_output_fill_options+0x70>)
 8012862:	f240 7256 	movw	r2, #1878	; 0x756
 8012866:	4913      	ldr	r1, [pc, #76]	; (80128b4 <tcp_output_fill_options+0x74>)
 8012868:	4813      	ldr	r0, [pc, #76]	; (80128b8 <tcp_output_fill_options+0x78>)
 801286a:	f005 fdab 	bl	80183c4 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 801286e:	68bb      	ldr	r3, [r7, #8]
 8012870:	685b      	ldr	r3, [r3, #4]
 8012872:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8012874:	69bb      	ldr	r3, [r7, #24]
 8012876:	3314      	adds	r3, #20
 8012878:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 801287a:	69bb      	ldr	r3, [r7, #24]
 801287c:	f103 0214 	add.w	r2, r3, #20
 8012880:	8bfb      	ldrh	r3, [r7, #30]
 8012882:	009b      	lsls	r3, r3, #2
 8012884:	4619      	mov	r1, r3
 8012886:	79fb      	ldrb	r3, [r7, #7]
 8012888:	009b      	lsls	r3, r3, #2
 801288a:	f003 0304 	and.w	r3, r3, #4
 801288e:	440b      	add	r3, r1
 8012890:	4413      	add	r3, r2
 8012892:	697a      	ldr	r2, [r7, #20]
 8012894:	429a      	cmp	r2, r3
 8012896:	d006      	beq.n	80128a6 <tcp_output_fill_options+0x66>
 8012898:	4b05      	ldr	r3, [pc, #20]	; (80128b0 <tcp_output_fill_options+0x70>)
 801289a:	f240 7275 	movw	r2, #1909	; 0x775
 801289e:	4907      	ldr	r1, [pc, #28]	; (80128bc <tcp_output_fill_options+0x7c>)
 80128a0:	4805      	ldr	r0, [pc, #20]	; (80128b8 <tcp_output_fill_options+0x78>)
 80128a2:	f005 fd8f 	bl	80183c4 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 80128a6:	bf00      	nop
 80128a8:	3720      	adds	r7, #32
 80128aa:	46bd      	mov	sp, r7
 80128ac:	bd80      	pop	{r7, pc}
 80128ae:	bf00      	nop
 80128b0:	0801b714 	.word	0x0801b714
 80128b4:	0801be44 	.word	0x0801be44
 80128b8:	0801b768 	.word	0x0801b768
 80128bc:	0801bd3c 	.word	0x0801bd3c

080128c0 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 80128c0:	b580      	push	{r7, lr}
 80128c2:	b08a      	sub	sp, #40	; 0x28
 80128c4:	af04      	add	r7, sp, #16
 80128c6:	60f8      	str	r0, [r7, #12]
 80128c8:	60b9      	str	r1, [r7, #8]
 80128ca:	607a      	str	r2, [r7, #4]
 80128cc:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 80128ce:	68bb      	ldr	r3, [r7, #8]
 80128d0:	2b00      	cmp	r3, #0
 80128d2:	d106      	bne.n	80128e2 <tcp_output_control_segment+0x22>
 80128d4:	4b1c      	ldr	r3, [pc, #112]	; (8012948 <tcp_output_control_segment+0x88>)
 80128d6:	f240 7287 	movw	r2, #1927	; 0x787
 80128da:	491c      	ldr	r1, [pc, #112]	; (801294c <tcp_output_control_segment+0x8c>)
 80128dc:	481c      	ldr	r0, [pc, #112]	; (8012950 <tcp_output_control_segment+0x90>)
 80128de:	f005 fd71 	bl	80183c4 <iprintf>

  netif = tcp_route(pcb, src, dst);
 80128e2:	683a      	ldr	r2, [r7, #0]
 80128e4:	6879      	ldr	r1, [r7, #4]
 80128e6:	68f8      	ldr	r0, [r7, #12]
 80128e8:	f7fe fae8 	bl	8010ebc <tcp_route>
 80128ec:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 80128ee:	693b      	ldr	r3, [r7, #16]
 80128f0:	2b00      	cmp	r3, #0
 80128f2:	d102      	bne.n	80128fa <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 80128f4:	23fc      	movs	r3, #252	; 0xfc
 80128f6:	75fb      	strb	r3, [r7, #23]
 80128f8:	e01c      	b.n	8012934 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 80128fa:	68fb      	ldr	r3, [r7, #12]
 80128fc:	2b00      	cmp	r3, #0
 80128fe:	d006      	beq.n	801290e <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8012900:	68fb      	ldr	r3, [r7, #12]
 8012902:	7adb      	ldrb	r3, [r3, #11]
 8012904:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8012906:	68fb      	ldr	r3, [r7, #12]
 8012908:	7a9b      	ldrb	r3, [r3, #10]
 801290a:	757b      	strb	r3, [r7, #21]
 801290c:	e003      	b.n	8012916 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 801290e:	23ff      	movs	r3, #255	; 0xff
 8012910:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8012912:	2300      	movs	r3, #0
 8012914:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8012916:	7dba      	ldrb	r2, [r7, #22]
 8012918:	693b      	ldr	r3, [r7, #16]
 801291a:	9302      	str	r3, [sp, #8]
 801291c:	2306      	movs	r3, #6
 801291e:	9301      	str	r3, [sp, #4]
 8012920:	7d7b      	ldrb	r3, [r7, #21]
 8012922:	9300      	str	r3, [sp, #0]
 8012924:	4613      	mov	r3, r2
 8012926:	683a      	ldr	r2, [r7, #0]
 8012928:	6879      	ldr	r1, [r7, #4]
 801292a:	68b8      	ldr	r0, [r7, #8]
 801292c:	f004 f962 	bl	8016bf4 <ip4_output_if>
 8012930:	4603      	mov	r3, r0
 8012932:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8012934:	68b8      	ldr	r0, [r7, #8]
 8012936:	f7f9 fe6f 	bl	800c618 <pbuf_free>
  return err;
 801293a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801293e:	4618      	mov	r0, r3
 8012940:	3718      	adds	r7, #24
 8012942:	46bd      	mov	sp, r7
 8012944:	bd80      	pop	{r7, pc}
 8012946:	bf00      	nop
 8012948:	0801b714 	.word	0x0801b714
 801294c:	0801be6c 	.word	0x0801be6c
 8012950:	0801b768 	.word	0x0801b768

08012954 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8012954:	b590      	push	{r4, r7, lr}
 8012956:	b08b      	sub	sp, #44	; 0x2c
 8012958:	af04      	add	r7, sp, #16
 801295a:	60f8      	str	r0, [r7, #12]
 801295c:	60b9      	str	r1, [r7, #8]
 801295e:	607a      	str	r2, [r7, #4]
 8012960:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8012962:	683b      	ldr	r3, [r7, #0]
 8012964:	2b00      	cmp	r3, #0
 8012966:	d106      	bne.n	8012976 <tcp_rst+0x22>
 8012968:	4b1f      	ldr	r3, [pc, #124]	; (80129e8 <tcp_rst+0x94>)
 801296a:	f240 72c4 	movw	r2, #1988	; 0x7c4
 801296e:	491f      	ldr	r1, [pc, #124]	; (80129ec <tcp_rst+0x98>)
 8012970:	481f      	ldr	r0, [pc, #124]	; (80129f0 <tcp_rst+0x9c>)
 8012972:	f005 fd27 	bl	80183c4 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8012976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012978:	2b00      	cmp	r3, #0
 801297a:	d106      	bne.n	801298a <tcp_rst+0x36>
 801297c:	4b1a      	ldr	r3, [pc, #104]	; (80129e8 <tcp_rst+0x94>)
 801297e:	f240 72c5 	movw	r2, #1989	; 0x7c5
 8012982:	491c      	ldr	r1, [pc, #112]	; (80129f4 <tcp_rst+0xa0>)
 8012984:	481a      	ldr	r0, [pc, #104]	; (80129f0 <tcp_rst+0x9c>)
 8012986:	f005 fd1d 	bl	80183c4 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801298a:	2300      	movs	r3, #0
 801298c:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 801298e:	f246 0308 	movw	r3, #24584	; 0x6008
 8012992:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8012994:	7dfb      	ldrb	r3, [r7, #23]
 8012996:	b29c      	uxth	r4, r3
 8012998:	68b8      	ldr	r0, [r7, #8]
 801299a:	f7f8 fa1e 	bl	800adda <lwip_htonl>
 801299e:	4602      	mov	r2, r0
 80129a0:	8abb      	ldrh	r3, [r7, #20]
 80129a2:	9303      	str	r3, [sp, #12]
 80129a4:	2314      	movs	r3, #20
 80129a6:	9302      	str	r3, [sp, #8]
 80129a8:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80129aa:	9301      	str	r3, [sp, #4]
 80129ac:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80129ae:	9300      	str	r3, [sp, #0]
 80129b0:	4613      	mov	r3, r2
 80129b2:	2200      	movs	r2, #0
 80129b4:	4621      	mov	r1, r4
 80129b6:	6878      	ldr	r0, [r7, #4]
 80129b8:	f7ff fe92 	bl	80126e0 <tcp_output_alloc_header_common>
 80129bc:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 80129be:	693b      	ldr	r3, [r7, #16]
 80129c0:	2b00      	cmp	r3, #0
 80129c2:	d00c      	beq.n	80129de <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80129c4:	7dfb      	ldrb	r3, [r7, #23]
 80129c6:	2200      	movs	r2, #0
 80129c8:	6939      	ldr	r1, [r7, #16]
 80129ca:	68f8      	ldr	r0, [r7, #12]
 80129cc:	f7ff ff38 	bl	8012840 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 80129d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80129d2:	683a      	ldr	r2, [r7, #0]
 80129d4:	6939      	ldr	r1, [r7, #16]
 80129d6:	68f8      	ldr	r0, [r7, #12]
 80129d8:	f7ff ff72 	bl	80128c0 <tcp_output_control_segment>
 80129dc:	e000      	b.n	80129e0 <tcp_rst+0x8c>
    return;
 80129de:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 80129e0:	371c      	adds	r7, #28
 80129e2:	46bd      	mov	sp, r7
 80129e4:	bd90      	pop	{r4, r7, pc}
 80129e6:	bf00      	nop
 80129e8:	0801b714 	.word	0x0801b714
 80129ec:	0801be98 	.word	0x0801be98
 80129f0:	0801b768 	.word	0x0801b768
 80129f4:	0801beb4 	.word	0x0801beb4

080129f8 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 80129f8:	b590      	push	{r4, r7, lr}
 80129fa:	b087      	sub	sp, #28
 80129fc:	af00      	add	r7, sp, #0
 80129fe:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8012a00:	2300      	movs	r3, #0
 8012a02:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8012a04:	2300      	movs	r3, #0
 8012a06:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8012a08:	687b      	ldr	r3, [r7, #4]
 8012a0a:	2b00      	cmp	r3, #0
 8012a0c:	d106      	bne.n	8012a1c <tcp_send_empty_ack+0x24>
 8012a0e:	4b28      	ldr	r3, [pc, #160]	; (8012ab0 <tcp_send_empty_ack+0xb8>)
 8012a10:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8012a14:	4927      	ldr	r1, [pc, #156]	; (8012ab4 <tcp_send_empty_ack+0xbc>)
 8012a16:	4828      	ldr	r0, [pc, #160]	; (8012ab8 <tcp_send_empty_ack+0xc0>)
 8012a18:	f005 fcd4 	bl	80183c4 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8012a1c:	7dfb      	ldrb	r3, [r7, #23]
 8012a1e:	009b      	lsls	r3, r3, #2
 8012a20:	b2db      	uxtb	r3, r3
 8012a22:	f003 0304 	and.w	r3, r3, #4
 8012a26:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8012a28:	7d7b      	ldrb	r3, [r7, #21]
 8012a2a:	b29c      	uxth	r4, r3
 8012a2c:	687b      	ldr	r3, [r7, #4]
 8012a2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012a30:	4618      	mov	r0, r3
 8012a32:	f7f8 f9d2 	bl	800adda <lwip_htonl>
 8012a36:	4603      	mov	r3, r0
 8012a38:	2200      	movs	r2, #0
 8012a3a:	4621      	mov	r1, r4
 8012a3c:	6878      	ldr	r0, [r7, #4]
 8012a3e:	f7ff fec1 	bl	80127c4 <tcp_output_alloc_header>
 8012a42:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8012a44:	693b      	ldr	r3, [r7, #16]
 8012a46:	2b00      	cmp	r3, #0
 8012a48:	d109      	bne.n	8012a5e <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8012a4a:	687b      	ldr	r3, [r7, #4]
 8012a4c:	8b5b      	ldrh	r3, [r3, #26]
 8012a4e:	f043 0303 	orr.w	r3, r3, #3
 8012a52:	b29a      	uxth	r2, r3
 8012a54:	687b      	ldr	r3, [r7, #4]
 8012a56:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8012a58:	f06f 0301 	mvn.w	r3, #1
 8012a5c:	e023      	b.n	8012aa6 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8012a5e:	7dbb      	ldrb	r3, [r7, #22]
 8012a60:	7dfa      	ldrb	r2, [r7, #23]
 8012a62:	6939      	ldr	r1, [r7, #16]
 8012a64:	6878      	ldr	r0, [r7, #4]
 8012a66:	f7ff feeb 	bl	8012840 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8012a6a:	687a      	ldr	r2, [r7, #4]
 8012a6c:	687b      	ldr	r3, [r7, #4]
 8012a6e:	3304      	adds	r3, #4
 8012a70:	6939      	ldr	r1, [r7, #16]
 8012a72:	6878      	ldr	r0, [r7, #4]
 8012a74:	f7ff ff24 	bl	80128c0 <tcp_output_control_segment>
 8012a78:	4603      	mov	r3, r0
 8012a7a:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8012a7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012a80:	2b00      	cmp	r3, #0
 8012a82:	d007      	beq.n	8012a94 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8012a84:	687b      	ldr	r3, [r7, #4]
 8012a86:	8b5b      	ldrh	r3, [r3, #26]
 8012a88:	f043 0303 	orr.w	r3, r3, #3
 8012a8c:	b29a      	uxth	r2, r3
 8012a8e:	687b      	ldr	r3, [r7, #4]
 8012a90:	835a      	strh	r2, [r3, #26]
 8012a92:	e006      	b.n	8012aa2 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8012a94:	687b      	ldr	r3, [r7, #4]
 8012a96:	8b5b      	ldrh	r3, [r3, #26]
 8012a98:	f023 0303 	bic.w	r3, r3, #3
 8012a9c:	b29a      	uxth	r2, r3
 8012a9e:	687b      	ldr	r3, [r7, #4]
 8012aa0:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8012aa2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8012aa6:	4618      	mov	r0, r3
 8012aa8:	371c      	adds	r7, #28
 8012aaa:	46bd      	mov	sp, r7
 8012aac:	bd90      	pop	{r4, r7, pc}
 8012aae:	bf00      	nop
 8012ab0:	0801b714 	.word	0x0801b714
 8012ab4:	0801bed0 	.word	0x0801bed0
 8012ab8:	0801b768 	.word	0x0801b768

08012abc <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8012abc:	b590      	push	{r4, r7, lr}
 8012abe:	b087      	sub	sp, #28
 8012ac0:	af00      	add	r7, sp, #0
 8012ac2:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8012ac4:	2300      	movs	r3, #0
 8012ac6:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8012ac8:	687b      	ldr	r3, [r7, #4]
 8012aca:	2b00      	cmp	r3, #0
 8012acc:	d106      	bne.n	8012adc <tcp_keepalive+0x20>
 8012ace:	4b18      	ldr	r3, [pc, #96]	; (8012b30 <tcp_keepalive+0x74>)
 8012ad0:	f640 0224 	movw	r2, #2084	; 0x824
 8012ad4:	4917      	ldr	r1, [pc, #92]	; (8012b34 <tcp_keepalive+0x78>)
 8012ad6:	4818      	ldr	r0, [pc, #96]	; (8012b38 <tcp_keepalive+0x7c>)
 8012ad8:	f005 fc74 	bl	80183c4 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8012adc:	7dfb      	ldrb	r3, [r7, #23]
 8012ade:	b29c      	uxth	r4, r3
 8012ae0:	687b      	ldr	r3, [r7, #4]
 8012ae2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012ae4:	3b01      	subs	r3, #1
 8012ae6:	4618      	mov	r0, r3
 8012ae8:	f7f8 f977 	bl	800adda <lwip_htonl>
 8012aec:	4603      	mov	r3, r0
 8012aee:	2200      	movs	r2, #0
 8012af0:	4621      	mov	r1, r4
 8012af2:	6878      	ldr	r0, [r7, #4]
 8012af4:	f7ff fe66 	bl	80127c4 <tcp_output_alloc_header>
 8012af8:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8012afa:	693b      	ldr	r3, [r7, #16]
 8012afc:	2b00      	cmp	r3, #0
 8012afe:	d102      	bne.n	8012b06 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8012b00:	f04f 33ff 	mov.w	r3, #4294967295
 8012b04:	e010      	b.n	8012b28 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8012b06:	7dfb      	ldrb	r3, [r7, #23]
 8012b08:	2200      	movs	r2, #0
 8012b0a:	6939      	ldr	r1, [r7, #16]
 8012b0c:	6878      	ldr	r0, [r7, #4]
 8012b0e:	f7ff fe97 	bl	8012840 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8012b12:	687a      	ldr	r2, [r7, #4]
 8012b14:	687b      	ldr	r3, [r7, #4]
 8012b16:	3304      	adds	r3, #4
 8012b18:	6939      	ldr	r1, [r7, #16]
 8012b1a:	6878      	ldr	r0, [r7, #4]
 8012b1c:	f7ff fed0 	bl	80128c0 <tcp_output_control_segment>
 8012b20:	4603      	mov	r3, r0
 8012b22:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8012b24:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8012b28:	4618      	mov	r0, r3
 8012b2a:	371c      	adds	r7, #28
 8012b2c:	46bd      	mov	sp, r7
 8012b2e:	bd90      	pop	{r4, r7, pc}
 8012b30:	0801b714 	.word	0x0801b714
 8012b34:	0801bef0 	.word	0x0801bef0
 8012b38:	0801b768 	.word	0x0801b768

08012b3c <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8012b3c:	b590      	push	{r4, r7, lr}
 8012b3e:	b08b      	sub	sp, #44	; 0x2c
 8012b40:	af00      	add	r7, sp, #0
 8012b42:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8012b44:	2300      	movs	r3, #0
 8012b46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8012b4a:	687b      	ldr	r3, [r7, #4]
 8012b4c:	2b00      	cmp	r3, #0
 8012b4e:	d106      	bne.n	8012b5e <tcp_zero_window_probe+0x22>
 8012b50:	4b4c      	ldr	r3, [pc, #304]	; (8012c84 <tcp_zero_window_probe+0x148>)
 8012b52:	f640 024f 	movw	r2, #2127	; 0x84f
 8012b56:	494c      	ldr	r1, [pc, #304]	; (8012c88 <tcp_zero_window_probe+0x14c>)
 8012b58:	484c      	ldr	r0, [pc, #304]	; (8012c8c <tcp_zero_window_probe+0x150>)
 8012b5a:	f005 fc33 	bl	80183c4 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8012b5e:	687b      	ldr	r3, [r7, #4]
 8012b60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012b62:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8012b64:	6a3b      	ldr	r3, [r7, #32]
 8012b66:	2b00      	cmp	r3, #0
 8012b68:	d101      	bne.n	8012b6e <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8012b6a:	2300      	movs	r3, #0
 8012b6c:	e086      	b.n	8012c7c <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8012b6e:	687b      	ldr	r3, [r7, #4]
 8012b70:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8012b74:	2bff      	cmp	r3, #255	; 0xff
 8012b76:	d007      	beq.n	8012b88 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8012b78:	687b      	ldr	r3, [r7, #4]
 8012b7a:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8012b7e:	3301      	adds	r3, #1
 8012b80:	b2da      	uxtb	r2, r3
 8012b82:	687b      	ldr	r3, [r7, #4]
 8012b84:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8012b88:	6a3b      	ldr	r3, [r7, #32]
 8012b8a:	68db      	ldr	r3, [r3, #12]
 8012b8c:	899b      	ldrh	r3, [r3, #12]
 8012b8e:	b29b      	uxth	r3, r3
 8012b90:	4618      	mov	r0, r3
 8012b92:	f7f8 f90d 	bl	800adb0 <lwip_htons>
 8012b96:	4603      	mov	r3, r0
 8012b98:	b2db      	uxtb	r3, r3
 8012b9a:	f003 0301 	and.w	r3, r3, #1
 8012b9e:	2b00      	cmp	r3, #0
 8012ba0:	d005      	beq.n	8012bae <tcp_zero_window_probe+0x72>
 8012ba2:	6a3b      	ldr	r3, [r7, #32]
 8012ba4:	891b      	ldrh	r3, [r3, #8]
 8012ba6:	2b00      	cmp	r3, #0
 8012ba8:	d101      	bne.n	8012bae <tcp_zero_window_probe+0x72>
 8012baa:	2301      	movs	r3, #1
 8012bac:	e000      	b.n	8012bb0 <tcp_zero_window_probe+0x74>
 8012bae:	2300      	movs	r3, #0
 8012bb0:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8012bb2:	7ffb      	ldrb	r3, [r7, #31]
 8012bb4:	2b00      	cmp	r3, #0
 8012bb6:	bf0c      	ite	eq
 8012bb8:	2301      	moveq	r3, #1
 8012bba:	2300      	movne	r3, #0
 8012bbc:	b2db      	uxtb	r3, r3
 8012bbe:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8012bc0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012bc4:	b299      	uxth	r1, r3
 8012bc6:	6a3b      	ldr	r3, [r7, #32]
 8012bc8:	68db      	ldr	r3, [r3, #12]
 8012bca:	685b      	ldr	r3, [r3, #4]
 8012bcc:	8bba      	ldrh	r2, [r7, #28]
 8012bce:	6878      	ldr	r0, [r7, #4]
 8012bd0:	f7ff fdf8 	bl	80127c4 <tcp_output_alloc_header>
 8012bd4:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8012bd6:	69bb      	ldr	r3, [r7, #24]
 8012bd8:	2b00      	cmp	r3, #0
 8012bda:	d102      	bne.n	8012be2 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8012bdc:	f04f 33ff 	mov.w	r3, #4294967295
 8012be0:	e04c      	b.n	8012c7c <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8012be2:	69bb      	ldr	r3, [r7, #24]
 8012be4:	685b      	ldr	r3, [r3, #4]
 8012be6:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8012be8:	7ffb      	ldrb	r3, [r7, #31]
 8012bea:	2b00      	cmp	r3, #0
 8012bec:	d011      	beq.n	8012c12 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8012bee:	697b      	ldr	r3, [r7, #20]
 8012bf0:	899b      	ldrh	r3, [r3, #12]
 8012bf2:	b29b      	uxth	r3, r3
 8012bf4:	b21b      	sxth	r3, r3
 8012bf6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8012bfa:	b21c      	sxth	r4, r3
 8012bfc:	2011      	movs	r0, #17
 8012bfe:	f7f8 f8d7 	bl	800adb0 <lwip_htons>
 8012c02:	4603      	mov	r3, r0
 8012c04:	b21b      	sxth	r3, r3
 8012c06:	4323      	orrs	r3, r4
 8012c08:	b21b      	sxth	r3, r3
 8012c0a:	b29a      	uxth	r2, r3
 8012c0c:	697b      	ldr	r3, [r7, #20]
 8012c0e:	819a      	strh	r2, [r3, #12]
 8012c10:	e010      	b.n	8012c34 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8012c12:	69bb      	ldr	r3, [r7, #24]
 8012c14:	685b      	ldr	r3, [r3, #4]
 8012c16:	3314      	adds	r3, #20
 8012c18:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8012c1a:	6a3b      	ldr	r3, [r7, #32]
 8012c1c:	6858      	ldr	r0, [r3, #4]
 8012c1e:	6a3b      	ldr	r3, [r7, #32]
 8012c20:	685b      	ldr	r3, [r3, #4]
 8012c22:	891a      	ldrh	r2, [r3, #8]
 8012c24:	6a3b      	ldr	r3, [r7, #32]
 8012c26:	891b      	ldrh	r3, [r3, #8]
 8012c28:	1ad3      	subs	r3, r2, r3
 8012c2a:	b29b      	uxth	r3, r3
 8012c2c:	2201      	movs	r2, #1
 8012c2e:	6939      	ldr	r1, [r7, #16]
 8012c30:	f7f9 fef8 	bl	800ca24 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8012c34:	6a3b      	ldr	r3, [r7, #32]
 8012c36:	68db      	ldr	r3, [r3, #12]
 8012c38:	685b      	ldr	r3, [r3, #4]
 8012c3a:	4618      	mov	r0, r3
 8012c3c:	f7f8 f8cd 	bl	800adda <lwip_htonl>
 8012c40:	4603      	mov	r3, r0
 8012c42:	3301      	adds	r3, #1
 8012c44:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8012c46:	687b      	ldr	r3, [r7, #4]
 8012c48:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012c4a:	68fb      	ldr	r3, [r7, #12]
 8012c4c:	1ad3      	subs	r3, r2, r3
 8012c4e:	2b00      	cmp	r3, #0
 8012c50:	da02      	bge.n	8012c58 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8012c52:	687b      	ldr	r3, [r7, #4]
 8012c54:	68fa      	ldr	r2, [r7, #12]
 8012c56:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8012c58:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012c5c:	2200      	movs	r2, #0
 8012c5e:	69b9      	ldr	r1, [r7, #24]
 8012c60:	6878      	ldr	r0, [r7, #4]
 8012c62:	f7ff fded 	bl	8012840 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8012c66:	687a      	ldr	r2, [r7, #4]
 8012c68:	687b      	ldr	r3, [r7, #4]
 8012c6a:	3304      	adds	r3, #4
 8012c6c:	69b9      	ldr	r1, [r7, #24]
 8012c6e:	6878      	ldr	r0, [r7, #4]
 8012c70:	f7ff fe26 	bl	80128c0 <tcp_output_control_segment>
 8012c74:	4603      	mov	r3, r0
 8012c76:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8012c78:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8012c7c:	4618      	mov	r0, r3
 8012c7e:	372c      	adds	r7, #44	; 0x2c
 8012c80:	46bd      	mov	sp, r7
 8012c82:	bd90      	pop	{r4, r7, pc}
 8012c84:	0801b714 	.word	0x0801b714
 8012c88:	0801bf0c 	.word	0x0801bf0c
 8012c8c:	0801b768 	.word	0x0801b768

08012c90 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8012c90:	b580      	push	{r7, lr}
 8012c92:	b082      	sub	sp, #8
 8012c94:	af00      	add	r7, sp, #0
 8012c96:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8012c98:	f7f9 ffb2 	bl	800cc00 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8012c9c:	4b0a      	ldr	r3, [pc, #40]	; (8012cc8 <tcpip_tcp_timer+0x38>)
 8012c9e:	681b      	ldr	r3, [r3, #0]
 8012ca0:	2b00      	cmp	r3, #0
 8012ca2:	d103      	bne.n	8012cac <tcpip_tcp_timer+0x1c>
 8012ca4:	4b09      	ldr	r3, [pc, #36]	; (8012ccc <tcpip_tcp_timer+0x3c>)
 8012ca6:	681b      	ldr	r3, [r3, #0]
 8012ca8:	2b00      	cmp	r3, #0
 8012caa:	d005      	beq.n	8012cb8 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8012cac:	2200      	movs	r2, #0
 8012cae:	4908      	ldr	r1, [pc, #32]	; (8012cd0 <tcpip_tcp_timer+0x40>)
 8012cb0:	20fa      	movs	r0, #250	; 0xfa
 8012cb2:	f000 f8f3 	bl	8012e9c <sys_timeout>
 8012cb6:	e003      	b.n	8012cc0 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8012cb8:	4b06      	ldr	r3, [pc, #24]	; (8012cd4 <tcpip_tcp_timer+0x44>)
 8012cba:	2200      	movs	r2, #0
 8012cbc:	601a      	str	r2, [r3, #0]
  }
}
 8012cbe:	bf00      	nop
 8012cc0:	bf00      	nop
 8012cc2:	3708      	adds	r7, #8
 8012cc4:	46bd      	mov	sp, r7
 8012cc6:	bd80      	pop	{r7, pc}
 8012cc8:	20010d84 	.word	0x20010d84
 8012ccc:	20010d88 	.word	0x20010d88
 8012cd0:	08012c91 	.word	0x08012c91
 8012cd4:	20010dd0 	.word	0x20010dd0

08012cd8 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8012cd8:	b580      	push	{r7, lr}
 8012cda:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8012cdc:	4b0a      	ldr	r3, [pc, #40]	; (8012d08 <tcp_timer_needed+0x30>)
 8012cde:	681b      	ldr	r3, [r3, #0]
 8012ce0:	2b00      	cmp	r3, #0
 8012ce2:	d10f      	bne.n	8012d04 <tcp_timer_needed+0x2c>
 8012ce4:	4b09      	ldr	r3, [pc, #36]	; (8012d0c <tcp_timer_needed+0x34>)
 8012ce6:	681b      	ldr	r3, [r3, #0]
 8012ce8:	2b00      	cmp	r3, #0
 8012cea:	d103      	bne.n	8012cf4 <tcp_timer_needed+0x1c>
 8012cec:	4b08      	ldr	r3, [pc, #32]	; (8012d10 <tcp_timer_needed+0x38>)
 8012cee:	681b      	ldr	r3, [r3, #0]
 8012cf0:	2b00      	cmp	r3, #0
 8012cf2:	d007      	beq.n	8012d04 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8012cf4:	4b04      	ldr	r3, [pc, #16]	; (8012d08 <tcp_timer_needed+0x30>)
 8012cf6:	2201      	movs	r2, #1
 8012cf8:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8012cfa:	2200      	movs	r2, #0
 8012cfc:	4905      	ldr	r1, [pc, #20]	; (8012d14 <tcp_timer_needed+0x3c>)
 8012cfe:	20fa      	movs	r0, #250	; 0xfa
 8012d00:	f000 f8cc 	bl	8012e9c <sys_timeout>
  }
}
 8012d04:	bf00      	nop
 8012d06:	bd80      	pop	{r7, pc}
 8012d08:	20010dd0 	.word	0x20010dd0
 8012d0c:	20010d84 	.word	0x20010d84
 8012d10:	20010d88 	.word	0x20010d88
 8012d14:	08012c91 	.word	0x08012c91

08012d18 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8012d18:	b580      	push	{r7, lr}
 8012d1a:	b086      	sub	sp, #24
 8012d1c:	af00      	add	r7, sp, #0
 8012d1e:	60f8      	str	r0, [r7, #12]
 8012d20:	60b9      	str	r1, [r7, #8]
 8012d22:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8012d24:	200a      	movs	r0, #10
 8012d26:	f7f8 fd51 	bl	800b7cc <memp_malloc>
 8012d2a:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8012d2c:	693b      	ldr	r3, [r7, #16]
 8012d2e:	2b00      	cmp	r3, #0
 8012d30:	d109      	bne.n	8012d46 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8012d32:	693b      	ldr	r3, [r7, #16]
 8012d34:	2b00      	cmp	r3, #0
 8012d36:	d151      	bne.n	8012ddc <sys_timeout_abs+0xc4>
 8012d38:	4b2a      	ldr	r3, [pc, #168]	; (8012de4 <sys_timeout_abs+0xcc>)
 8012d3a:	22be      	movs	r2, #190	; 0xbe
 8012d3c:	492a      	ldr	r1, [pc, #168]	; (8012de8 <sys_timeout_abs+0xd0>)
 8012d3e:	482b      	ldr	r0, [pc, #172]	; (8012dec <sys_timeout_abs+0xd4>)
 8012d40:	f005 fb40 	bl	80183c4 <iprintf>
    return;
 8012d44:	e04a      	b.n	8012ddc <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8012d46:	693b      	ldr	r3, [r7, #16]
 8012d48:	2200      	movs	r2, #0
 8012d4a:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8012d4c:	693b      	ldr	r3, [r7, #16]
 8012d4e:	68ba      	ldr	r2, [r7, #8]
 8012d50:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8012d52:	693b      	ldr	r3, [r7, #16]
 8012d54:	687a      	ldr	r2, [r7, #4]
 8012d56:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8012d58:	693b      	ldr	r3, [r7, #16]
 8012d5a:	68fa      	ldr	r2, [r7, #12]
 8012d5c:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8012d5e:	4b24      	ldr	r3, [pc, #144]	; (8012df0 <sys_timeout_abs+0xd8>)
 8012d60:	681b      	ldr	r3, [r3, #0]
 8012d62:	2b00      	cmp	r3, #0
 8012d64:	d103      	bne.n	8012d6e <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8012d66:	4a22      	ldr	r2, [pc, #136]	; (8012df0 <sys_timeout_abs+0xd8>)
 8012d68:	693b      	ldr	r3, [r7, #16]
 8012d6a:	6013      	str	r3, [r2, #0]
    return;
 8012d6c:	e037      	b.n	8012dde <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8012d6e:	693b      	ldr	r3, [r7, #16]
 8012d70:	685a      	ldr	r2, [r3, #4]
 8012d72:	4b1f      	ldr	r3, [pc, #124]	; (8012df0 <sys_timeout_abs+0xd8>)
 8012d74:	681b      	ldr	r3, [r3, #0]
 8012d76:	685b      	ldr	r3, [r3, #4]
 8012d78:	1ad3      	subs	r3, r2, r3
 8012d7a:	0fdb      	lsrs	r3, r3, #31
 8012d7c:	f003 0301 	and.w	r3, r3, #1
 8012d80:	b2db      	uxtb	r3, r3
 8012d82:	2b00      	cmp	r3, #0
 8012d84:	d007      	beq.n	8012d96 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8012d86:	4b1a      	ldr	r3, [pc, #104]	; (8012df0 <sys_timeout_abs+0xd8>)
 8012d88:	681a      	ldr	r2, [r3, #0]
 8012d8a:	693b      	ldr	r3, [r7, #16]
 8012d8c:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8012d8e:	4a18      	ldr	r2, [pc, #96]	; (8012df0 <sys_timeout_abs+0xd8>)
 8012d90:	693b      	ldr	r3, [r7, #16]
 8012d92:	6013      	str	r3, [r2, #0]
 8012d94:	e023      	b.n	8012dde <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8012d96:	4b16      	ldr	r3, [pc, #88]	; (8012df0 <sys_timeout_abs+0xd8>)
 8012d98:	681b      	ldr	r3, [r3, #0]
 8012d9a:	617b      	str	r3, [r7, #20]
 8012d9c:	e01a      	b.n	8012dd4 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8012d9e:	697b      	ldr	r3, [r7, #20]
 8012da0:	681b      	ldr	r3, [r3, #0]
 8012da2:	2b00      	cmp	r3, #0
 8012da4:	d00b      	beq.n	8012dbe <sys_timeout_abs+0xa6>
 8012da6:	693b      	ldr	r3, [r7, #16]
 8012da8:	685a      	ldr	r2, [r3, #4]
 8012daa:	697b      	ldr	r3, [r7, #20]
 8012dac:	681b      	ldr	r3, [r3, #0]
 8012dae:	685b      	ldr	r3, [r3, #4]
 8012db0:	1ad3      	subs	r3, r2, r3
 8012db2:	0fdb      	lsrs	r3, r3, #31
 8012db4:	f003 0301 	and.w	r3, r3, #1
 8012db8:	b2db      	uxtb	r3, r3
 8012dba:	2b00      	cmp	r3, #0
 8012dbc:	d007      	beq.n	8012dce <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8012dbe:	697b      	ldr	r3, [r7, #20]
 8012dc0:	681a      	ldr	r2, [r3, #0]
 8012dc2:	693b      	ldr	r3, [r7, #16]
 8012dc4:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8012dc6:	697b      	ldr	r3, [r7, #20]
 8012dc8:	693a      	ldr	r2, [r7, #16]
 8012dca:	601a      	str	r2, [r3, #0]
        break;
 8012dcc:	e007      	b.n	8012dde <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8012dce:	697b      	ldr	r3, [r7, #20]
 8012dd0:	681b      	ldr	r3, [r3, #0]
 8012dd2:	617b      	str	r3, [r7, #20]
 8012dd4:	697b      	ldr	r3, [r7, #20]
 8012dd6:	2b00      	cmp	r3, #0
 8012dd8:	d1e1      	bne.n	8012d9e <sys_timeout_abs+0x86>
 8012dda:	e000      	b.n	8012dde <sys_timeout_abs+0xc6>
    return;
 8012ddc:	bf00      	nop
      }
    }
  }
}
 8012dde:	3718      	adds	r7, #24
 8012de0:	46bd      	mov	sp, r7
 8012de2:	bd80      	pop	{r7, pc}
 8012de4:	0801bf30 	.word	0x0801bf30
 8012de8:	0801bf64 	.word	0x0801bf64
 8012dec:	0801bfa4 	.word	0x0801bfa4
 8012df0:	20010dc8 	.word	0x20010dc8

08012df4 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8012df4:	b580      	push	{r7, lr}
 8012df6:	b086      	sub	sp, #24
 8012df8:	af00      	add	r7, sp, #0
 8012dfa:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8012dfc:	687b      	ldr	r3, [r7, #4]
 8012dfe:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8012e00:	697b      	ldr	r3, [r7, #20]
 8012e02:	685b      	ldr	r3, [r3, #4]
 8012e04:	4798      	blx	r3

  now = sys_now();
 8012e06:	f7f1 fc85 	bl	8004714 <sys_now>
 8012e0a:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8012e0c:	697b      	ldr	r3, [r7, #20]
 8012e0e:	681a      	ldr	r2, [r3, #0]
 8012e10:	4b0f      	ldr	r3, [pc, #60]	; (8012e50 <lwip_cyclic_timer+0x5c>)
 8012e12:	681b      	ldr	r3, [r3, #0]
 8012e14:	4413      	add	r3, r2
 8012e16:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8012e18:	68fa      	ldr	r2, [r7, #12]
 8012e1a:	693b      	ldr	r3, [r7, #16]
 8012e1c:	1ad3      	subs	r3, r2, r3
 8012e1e:	0fdb      	lsrs	r3, r3, #31
 8012e20:	f003 0301 	and.w	r3, r3, #1
 8012e24:	b2db      	uxtb	r3, r3
 8012e26:	2b00      	cmp	r3, #0
 8012e28:	d009      	beq.n	8012e3e <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8012e2a:	697b      	ldr	r3, [r7, #20]
 8012e2c:	681a      	ldr	r2, [r3, #0]
 8012e2e:	693b      	ldr	r3, [r7, #16]
 8012e30:	4413      	add	r3, r2
 8012e32:	687a      	ldr	r2, [r7, #4]
 8012e34:	4907      	ldr	r1, [pc, #28]	; (8012e54 <lwip_cyclic_timer+0x60>)
 8012e36:	4618      	mov	r0, r3
 8012e38:	f7ff ff6e 	bl	8012d18 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8012e3c:	e004      	b.n	8012e48 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8012e3e:	687a      	ldr	r2, [r7, #4]
 8012e40:	4904      	ldr	r1, [pc, #16]	; (8012e54 <lwip_cyclic_timer+0x60>)
 8012e42:	68f8      	ldr	r0, [r7, #12]
 8012e44:	f7ff ff68 	bl	8012d18 <sys_timeout_abs>
}
 8012e48:	bf00      	nop
 8012e4a:	3718      	adds	r7, #24
 8012e4c:	46bd      	mov	sp, r7
 8012e4e:	bd80      	pop	{r7, pc}
 8012e50:	20010dcc 	.word	0x20010dcc
 8012e54:	08012df5 	.word	0x08012df5

08012e58 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8012e58:	b580      	push	{r7, lr}
 8012e5a:	b082      	sub	sp, #8
 8012e5c:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8012e5e:	2301      	movs	r3, #1
 8012e60:	607b      	str	r3, [r7, #4]
 8012e62:	e00e      	b.n	8012e82 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8012e64:	4a0b      	ldr	r2, [pc, #44]	; (8012e94 <sys_timeouts_init+0x3c>)
 8012e66:	687b      	ldr	r3, [r7, #4]
 8012e68:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8012e6c:	687b      	ldr	r3, [r7, #4]
 8012e6e:	00db      	lsls	r3, r3, #3
 8012e70:	4a08      	ldr	r2, [pc, #32]	; (8012e94 <sys_timeouts_init+0x3c>)
 8012e72:	4413      	add	r3, r2
 8012e74:	461a      	mov	r2, r3
 8012e76:	4908      	ldr	r1, [pc, #32]	; (8012e98 <sys_timeouts_init+0x40>)
 8012e78:	f000 f810 	bl	8012e9c <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8012e7c:	687b      	ldr	r3, [r7, #4]
 8012e7e:	3301      	adds	r3, #1
 8012e80:	607b      	str	r3, [r7, #4]
 8012e82:	687b      	ldr	r3, [r7, #4]
 8012e84:	2b04      	cmp	r3, #4
 8012e86:	d9ed      	bls.n	8012e64 <sys_timeouts_init+0xc>
  }
}
 8012e88:	bf00      	nop
 8012e8a:	bf00      	nop
 8012e8c:	3708      	adds	r7, #8
 8012e8e:	46bd      	mov	sp, r7
 8012e90:	bd80      	pop	{r7, pc}
 8012e92:	bf00      	nop
 8012e94:	08027038 	.word	0x08027038
 8012e98:	08012df5 	.word	0x08012df5

08012e9c <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8012e9c:	b580      	push	{r7, lr}
 8012e9e:	b086      	sub	sp, #24
 8012ea0:	af00      	add	r7, sp, #0
 8012ea2:	60f8      	str	r0, [r7, #12]
 8012ea4:	60b9      	str	r1, [r7, #8]
 8012ea6:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8012ea8:	68fb      	ldr	r3, [r7, #12]
 8012eaa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012eae:	d306      	bcc.n	8012ebe <sys_timeout+0x22>
 8012eb0:	4b0a      	ldr	r3, [pc, #40]	; (8012edc <sys_timeout+0x40>)
 8012eb2:	f240 1229 	movw	r2, #297	; 0x129
 8012eb6:	490a      	ldr	r1, [pc, #40]	; (8012ee0 <sys_timeout+0x44>)
 8012eb8:	480a      	ldr	r0, [pc, #40]	; (8012ee4 <sys_timeout+0x48>)
 8012eba:	f005 fa83 	bl	80183c4 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8012ebe:	f7f1 fc29 	bl	8004714 <sys_now>
 8012ec2:	4602      	mov	r2, r0
 8012ec4:	68fb      	ldr	r3, [r7, #12]
 8012ec6:	4413      	add	r3, r2
 8012ec8:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8012eca:	687a      	ldr	r2, [r7, #4]
 8012ecc:	68b9      	ldr	r1, [r7, #8]
 8012ece:	6978      	ldr	r0, [r7, #20]
 8012ed0:	f7ff ff22 	bl	8012d18 <sys_timeout_abs>
#endif
}
 8012ed4:	bf00      	nop
 8012ed6:	3718      	adds	r7, #24
 8012ed8:	46bd      	mov	sp, r7
 8012eda:	bd80      	pop	{r7, pc}
 8012edc:	0801bf30 	.word	0x0801bf30
 8012ee0:	0801bfcc 	.word	0x0801bfcc
 8012ee4:	0801bfa4 	.word	0x0801bfa4

08012ee8 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8012ee8:	b580      	push	{r7, lr}
 8012eea:	b084      	sub	sp, #16
 8012eec:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8012eee:	f7f1 fc11 	bl	8004714 <sys_now>
 8012ef2:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8012ef4:	4b17      	ldr	r3, [pc, #92]	; (8012f54 <sys_check_timeouts+0x6c>)
 8012ef6:	681b      	ldr	r3, [r3, #0]
 8012ef8:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8012efa:	68bb      	ldr	r3, [r7, #8]
 8012efc:	2b00      	cmp	r3, #0
 8012efe:	d022      	beq.n	8012f46 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8012f00:	68bb      	ldr	r3, [r7, #8]
 8012f02:	685b      	ldr	r3, [r3, #4]
 8012f04:	68fa      	ldr	r2, [r7, #12]
 8012f06:	1ad3      	subs	r3, r2, r3
 8012f08:	0fdb      	lsrs	r3, r3, #31
 8012f0a:	f003 0301 	and.w	r3, r3, #1
 8012f0e:	b2db      	uxtb	r3, r3
 8012f10:	2b00      	cmp	r3, #0
 8012f12:	d11a      	bne.n	8012f4a <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8012f14:	68bb      	ldr	r3, [r7, #8]
 8012f16:	681b      	ldr	r3, [r3, #0]
 8012f18:	4a0e      	ldr	r2, [pc, #56]	; (8012f54 <sys_check_timeouts+0x6c>)
 8012f1a:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8012f1c:	68bb      	ldr	r3, [r7, #8]
 8012f1e:	689b      	ldr	r3, [r3, #8]
 8012f20:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8012f22:	68bb      	ldr	r3, [r7, #8]
 8012f24:	68db      	ldr	r3, [r3, #12]
 8012f26:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8012f28:	68bb      	ldr	r3, [r7, #8]
 8012f2a:	685b      	ldr	r3, [r3, #4]
 8012f2c:	4a0a      	ldr	r2, [pc, #40]	; (8012f58 <sys_check_timeouts+0x70>)
 8012f2e:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8012f30:	68b9      	ldr	r1, [r7, #8]
 8012f32:	200a      	movs	r0, #10
 8012f34:	f7f8 fcc0 	bl	800b8b8 <memp_free>
    if (handler != NULL) {
 8012f38:	687b      	ldr	r3, [r7, #4]
 8012f3a:	2b00      	cmp	r3, #0
 8012f3c:	d0da      	beq.n	8012ef4 <sys_check_timeouts+0xc>
      handler(arg);
 8012f3e:	687b      	ldr	r3, [r7, #4]
 8012f40:	6838      	ldr	r0, [r7, #0]
 8012f42:	4798      	blx	r3
  do {
 8012f44:	e7d6      	b.n	8012ef4 <sys_check_timeouts+0xc>
      return;
 8012f46:	bf00      	nop
 8012f48:	e000      	b.n	8012f4c <sys_check_timeouts+0x64>
      return;
 8012f4a:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8012f4c:	3710      	adds	r7, #16
 8012f4e:	46bd      	mov	sp, r7
 8012f50:	bd80      	pop	{r7, pc}
 8012f52:	bf00      	nop
 8012f54:	20010dc8 	.word	0x20010dc8
 8012f58:	20010dcc 	.word	0x20010dcc

08012f5c <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8012f5c:	b580      	push	{r7, lr}
 8012f5e:	b082      	sub	sp, #8
 8012f60:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8012f62:	4b16      	ldr	r3, [pc, #88]	; (8012fbc <sys_timeouts_sleeptime+0x60>)
 8012f64:	681b      	ldr	r3, [r3, #0]
 8012f66:	2b00      	cmp	r3, #0
 8012f68:	d102      	bne.n	8012f70 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8012f6a:	f04f 33ff 	mov.w	r3, #4294967295
 8012f6e:	e020      	b.n	8012fb2 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8012f70:	f7f1 fbd0 	bl	8004714 <sys_now>
 8012f74:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8012f76:	4b11      	ldr	r3, [pc, #68]	; (8012fbc <sys_timeouts_sleeptime+0x60>)
 8012f78:	681b      	ldr	r3, [r3, #0]
 8012f7a:	685a      	ldr	r2, [r3, #4]
 8012f7c:	687b      	ldr	r3, [r7, #4]
 8012f7e:	1ad3      	subs	r3, r2, r3
 8012f80:	0fdb      	lsrs	r3, r3, #31
 8012f82:	f003 0301 	and.w	r3, r3, #1
 8012f86:	b2db      	uxtb	r3, r3
 8012f88:	2b00      	cmp	r3, #0
 8012f8a:	d001      	beq.n	8012f90 <sys_timeouts_sleeptime+0x34>
    return 0;
 8012f8c:	2300      	movs	r3, #0
 8012f8e:	e010      	b.n	8012fb2 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8012f90:	4b0a      	ldr	r3, [pc, #40]	; (8012fbc <sys_timeouts_sleeptime+0x60>)
 8012f92:	681b      	ldr	r3, [r3, #0]
 8012f94:	685a      	ldr	r2, [r3, #4]
 8012f96:	687b      	ldr	r3, [r7, #4]
 8012f98:	1ad3      	subs	r3, r2, r3
 8012f9a:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8012f9c:	683b      	ldr	r3, [r7, #0]
 8012f9e:	2b00      	cmp	r3, #0
 8012fa0:	da06      	bge.n	8012fb0 <sys_timeouts_sleeptime+0x54>
 8012fa2:	4b07      	ldr	r3, [pc, #28]	; (8012fc0 <sys_timeouts_sleeptime+0x64>)
 8012fa4:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8012fa8:	4906      	ldr	r1, [pc, #24]	; (8012fc4 <sys_timeouts_sleeptime+0x68>)
 8012faa:	4807      	ldr	r0, [pc, #28]	; (8012fc8 <sys_timeouts_sleeptime+0x6c>)
 8012fac:	f005 fa0a 	bl	80183c4 <iprintf>
    return ret;
 8012fb0:	683b      	ldr	r3, [r7, #0]
  }
}
 8012fb2:	4618      	mov	r0, r3
 8012fb4:	3708      	adds	r7, #8
 8012fb6:	46bd      	mov	sp, r7
 8012fb8:	bd80      	pop	{r7, pc}
 8012fba:	bf00      	nop
 8012fbc:	20010dc8 	.word	0x20010dc8
 8012fc0:	0801bf30 	.word	0x0801bf30
 8012fc4:	0801c004 	.word	0x0801c004
 8012fc8:	0801bfa4 	.word	0x0801bfa4

08012fcc <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8012fcc:	b580      	push	{r7, lr}
 8012fce:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8012fd0:	f005 fa10 	bl	80183f4 <rand>
 8012fd4:	4603      	mov	r3, r0
 8012fd6:	b29b      	uxth	r3, r3
 8012fd8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8012fdc:	b29b      	uxth	r3, r3
 8012fde:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8012fe2:	b29a      	uxth	r2, r3
 8012fe4:	4b01      	ldr	r3, [pc, #4]	; (8012fec <udp_init+0x20>)
 8012fe6:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8012fe8:	bf00      	nop
 8012fea:	bd80      	pop	{r7, pc}
 8012fec:	2000002c 	.word	0x2000002c

08012ff0 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8012ff0:	b480      	push	{r7}
 8012ff2:	b083      	sub	sp, #12
 8012ff4:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8012ff6:	2300      	movs	r3, #0
 8012ff8:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8012ffa:	4b17      	ldr	r3, [pc, #92]	; (8013058 <udp_new_port+0x68>)
 8012ffc:	881b      	ldrh	r3, [r3, #0]
 8012ffe:	1c5a      	adds	r2, r3, #1
 8013000:	b291      	uxth	r1, r2
 8013002:	4a15      	ldr	r2, [pc, #84]	; (8013058 <udp_new_port+0x68>)
 8013004:	8011      	strh	r1, [r2, #0]
 8013006:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801300a:	4293      	cmp	r3, r2
 801300c:	d103      	bne.n	8013016 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 801300e:	4b12      	ldr	r3, [pc, #72]	; (8013058 <udp_new_port+0x68>)
 8013010:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8013014:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013016:	4b11      	ldr	r3, [pc, #68]	; (801305c <udp_new_port+0x6c>)
 8013018:	681b      	ldr	r3, [r3, #0]
 801301a:	603b      	str	r3, [r7, #0]
 801301c:	e011      	b.n	8013042 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 801301e:	683b      	ldr	r3, [r7, #0]
 8013020:	8a5a      	ldrh	r2, [r3, #18]
 8013022:	4b0d      	ldr	r3, [pc, #52]	; (8013058 <udp_new_port+0x68>)
 8013024:	881b      	ldrh	r3, [r3, #0]
 8013026:	429a      	cmp	r2, r3
 8013028:	d108      	bne.n	801303c <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 801302a:	88fb      	ldrh	r3, [r7, #6]
 801302c:	3301      	adds	r3, #1
 801302e:	80fb      	strh	r3, [r7, #6]
 8013030:	88fb      	ldrh	r3, [r7, #6]
 8013032:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8013036:	d3e0      	bcc.n	8012ffa <udp_new_port+0xa>
        return 0;
 8013038:	2300      	movs	r3, #0
 801303a:	e007      	b.n	801304c <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801303c:	683b      	ldr	r3, [r7, #0]
 801303e:	68db      	ldr	r3, [r3, #12]
 8013040:	603b      	str	r3, [r7, #0]
 8013042:	683b      	ldr	r3, [r7, #0]
 8013044:	2b00      	cmp	r3, #0
 8013046:	d1ea      	bne.n	801301e <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8013048:	4b03      	ldr	r3, [pc, #12]	; (8013058 <udp_new_port+0x68>)
 801304a:	881b      	ldrh	r3, [r3, #0]
}
 801304c:	4618      	mov	r0, r3
 801304e:	370c      	adds	r7, #12
 8013050:	46bd      	mov	sp, r7
 8013052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013056:	4770      	bx	lr
 8013058:	2000002c 	.word	0x2000002c
 801305c:	20010dd4 	.word	0x20010dd4

08013060 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8013060:	b580      	push	{r7, lr}
 8013062:	b084      	sub	sp, #16
 8013064:	af00      	add	r7, sp, #0
 8013066:	60f8      	str	r0, [r7, #12]
 8013068:	60b9      	str	r1, [r7, #8]
 801306a:	4613      	mov	r3, r2
 801306c:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 801306e:	68fb      	ldr	r3, [r7, #12]
 8013070:	2b00      	cmp	r3, #0
 8013072:	d105      	bne.n	8013080 <udp_input_local_match+0x20>
 8013074:	4b27      	ldr	r3, [pc, #156]	; (8013114 <udp_input_local_match+0xb4>)
 8013076:	2287      	movs	r2, #135	; 0x87
 8013078:	4927      	ldr	r1, [pc, #156]	; (8013118 <udp_input_local_match+0xb8>)
 801307a:	4828      	ldr	r0, [pc, #160]	; (801311c <udp_input_local_match+0xbc>)
 801307c:	f005 f9a2 	bl	80183c4 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8013080:	68bb      	ldr	r3, [r7, #8]
 8013082:	2b00      	cmp	r3, #0
 8013084:	d105      	bne.n	8013092 <udp_input_local_match+0x32>
 8013086:	4b23      	ldr	r3, [pc, #140]	; (8013114 <udp_input_local_match+0xb4>)
 8013088:	2288      	movs	r2, #136	; 0x88
 801308a:	4925      	ldr	r1, [pc, #148]	; (8013120 <udp_input_local_match+0xc0>)
 801308c:	4823      	ldr	r0, [pc, #140]	; (801311c <udp_input_local_match+0xbc>)
 801308e:	f005 f999 	bl	80183c4 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8013092:	68fb      	ldr	r3, [r7, #12]
 8013094:	7a1b      	ldrb	r3, [r3, #8]
 8013096:	2b00      	cmp	r3, #0
 8013098:	d00b      	beq.n	80130b2 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801309a:	68fb      	ldr	r3, [r7, #12]
 801309c:	7a1a      	ldrb	r2, [r3, #8]
 801309e:	4b21      	ldr	r3, [pc, #132]	; (8013124 <udp_input_local_match+0xc4>)
 80130a0:	685b      	ldr	r3, [r3, #4]
 80130a2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80130a6:	3301      	adds	r3, #1
 80130a8:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80130aa:	429a      	cmp	r2, r3
 80130ac:	d001      	beq.n	80130b2 <udp_input_local_match+0x52>
    return 0;
 80130ae:	2300      	movs	r3, #0
 80130b0:	e02b      	b.n	801310a <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 80130b2:	79fb      	ldrb	r3, [r7, #7]
 80130b4:	2b00      	cmp	r3, #0
 80130b6:	d018      	beq.n	80130ea <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80130b8:	68fb      	ldr	r3, [r7, #12]
 80130ba:	2b00      	cmp	r3, #0
 80130bc:	d013      	beq.n	80130e6 <udp_input_local_match+0x86>
 80130be:	68fb      	ldr	r3, [r7, #12]
 80130c0:	681b      	ldr	r3, [r3, #0]
 80130c2:	2b00      	cmp	r3, #0
 80130c4:	d00f      	beq.n	80130e6 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80130c6:	4b17      	ldr	r3, [pc, #92]	; (8013124 <udp_input_local_match+0xc4>)
 80130c8:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80130ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80130ce:	d00a      	beq.n	80130e6 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 80130d0:	68fb      	ldr	r3, [r7, #12]
 80130d2:	681a      	ldr	r2, [r3, #0]
 80130d4:	4b13      	ldr	r3, [pc, #76]	; (8013124 <udp_input_local_match+0xc4>)
 80130d6:	695b      	ldr	r3, [r3, #20]
 80130d8:	405a      	eors	r2, r3
 80130da:	68bb      	ldr	r3, [r7, #8]
 80130dc:	3308      	adds	r3, #8
 80130de:	681b      	ldr	r3, [r3, #0]
 80130e0:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80130e2:	2b00      	cmp	r3, #0
 80130e4:	d110      	bne.n	8013108 <udp_input_local_match+0xa8>
          return 1;
 80130e6:	2301      	movs	r3, #1
 80130e8:	e00f      	b.n	801310a <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80130ea:	68fb      	ldr	r3, [r7, #12]
 80130ec:	2b00      	cmp	r3, #0
 80130ee:	d009      	beq.n	8013104 <udp_input_local_match+0xa4>
 80130f0:	68fb      	ldr	r3, [r7, #12]
 80130f2:	681b      	ldr	r3, [r3, #0]
 80130f4:	2b00      	cmp	r3, #0
 80130f6:	d005      	beq.n	8013104 <udp_input_local_match+0xa4>
 80130f8:	68fb      	ldr	r3, [r7, #12]
 80130fa:	681a      	ldr	r2, [r3, #0]
 80130fc:	4b09      	ldr	r3, [pc, #36]	; (8013124 <udp_input_local_match+0xc4>)
 80130fe:	695b      	ldr	r3, [r3, #20]
 8013100:	429a      	cmp	r2, r3
 8013102:	d101      	bne.n	8013108 <udp_input_local_match+0xa8>
        return 1;
 8013104:	2301      	movs	r3, #1
 8013106:	e000      	b.n	801310a <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8013108:	2300      	movs	r3, #0
}
 801310a:	4618      	mov	r0, r3
 801310c:	3710      	adds	r7, #16
 801310e:	46bd      	mov	sp, r7
 8013110:	bd80      	pop	{r7, pc}
 8013112:	bf00      	nop
 8013114:	0801c018 	.word	0x0801c018
 8013118:	0801c048 	.word	0x0801c048
 801311c:	0801c06c 	.word	0x0801c06c
 8013120:	0801c094 	.word	0x0801c094
 8013124:	2000d604 	.word	0x2000d604

08013128 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8013128:	b590      	push	{r4, r7, lr}
 801312a:	b08d      	sub	sp, #52	; 0x34
 801312c:	af02      	add	r7, sp, #8
 801312e:	6078      	str	r0, [r7, #4]
 8013130:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8013132:	2300      	movs	r3, #0
 8013134:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8013136:	687b      	ldr	r3, [r7, #4]
 8013138:	2b00      	cmp	r3, #0
 801313a:	d105      	bne.n	8013148 <udp_input+0x20>
 801313c:	4b7c      	ldr	r3, [pc, #496]	; (8013330 <udp_input+0x208>)
 801313e:	22cf      	movs	r2, #207	; 0xcf
 8013140:	497c      	ldr	r1, [pc, #496]	; (8013334 <udp_input+0x20c>)
 8013142:	487d      	ldr	r0, [pc, #500]	; (8013338 <udp_input+0x210>)
 8013144:	f005 f93e 	bl	80183c4 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8013148:	683b      	ldr	r3, [r7, #0]
 801314a:	2b00      	cmp	r3, #0
 801314c:	d105      	bne.n	801315a <udp_input+0x32>
 801314e:	4b78      	ldr	r3, [pc, #480]	; (8013330 <udp_input+0x208>)
 8013150:	22d0      	movs	r2, #208	; 0xd0
 8013152:	497a      	ldr	r1, [pc, #488]	; (801333c <udp_input+0x214>)
 8013154:	4878      	ldr	r0, [pc, #480]	; (8013338 <udp_input+0x210>)
 8013156:	f005 f935 	bl	80183c4 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801315a:	687b      	ldr	r3, [r7, #4]
 801315c:	895b      	ldrh	r3, [r3, #10]
 801315e:	2b07      	cmp	r3, #7
 8013160:	d803      	bhi.n	801316a <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8013162:	6878      	ldr	r0, [r7, #4]
 8013164:	f7f9 fa58 	bl	800c618 <pbuf_free>
    goto end;
 8013168:	e0de      	b.n	8013328 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 801316a:	687b      	ldr	r3, [r7, #4]
 801316c:	685b      	ldr	r3, [r3, #4]
 801316e:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8013170:	4b73      	ldr	r3, [pc, #460]	; (8013340 <udp_input+0x218>)
 8013172:	695b      	ldr	r3, [r3, #20]
 8013174:	4a72      	ldr	r2, [pc, #456]	; (8013340 <udp_input+0x218>)
 8013176:	6812      	ldr	r2, [r2, #0]
 8013178:	4611      	mov	r1, r2
 801317a:	4618      	mov	r0, r3
 801317c:	f003 fe12 	bl	8016da4 <ip4_addr_isbroadcast_u32>
 8013180:	4603      	mov	r3, r0
 8013182:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8013184:	697b      	ldr	r3, [r7, #20]
 8013186:	881b      	ldrh	r3, [r3, #0]
 8013188:	b29b      	uxth	r3, r3
 801318a:	4618      	mov	r0, r3
 801318c:	f7f7 fe10 	bl	800adb0 <lwip_htons>
 8013190:	4603      	mov	r3, r0
 8013192:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8013194:	697b      	ldr	r3, [r7, #20]
 8013196:	885b      	ldrh	r3, [r3, #2]
 8013198:	b29b      	uxth	r3, r3
 801319a:	4618      	mov	r0, r3
 801319c:	f7f7 fe08 	bl	800adb0 <lwip_htons>
 80131a0:	4603      	mov	r3, r0
 80131a2:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 80131a4:	2300      	movs	r3, #0
 80131a6:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 80131a8:	2300      	movs	r3, #0
 80131aa:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 80131ac:	2300      	movs	r3, #0
 80131ae:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80131b0:	4b64      	ldr	r3, [pc, #400]	; (8013344 <udp_input+0x21c>)
 80131b2:	681b      	ldr	r3, [r3, #0]
 80131b4:	627b      	str	r3, [r7, #36]	; 0x24
 80131b6:	e054      	b.n	8013262 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 80131b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80131ba:	8a5b      	ldrh	r3, [r3, #18]
 80131bc:	89fa      	ldrh	r2, [r7, #14]
 80131be:	429a      	cmp	r2, r3
 80131c0:	d14a      	bne.n	8013258 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 80131c2:	7cfb      	ldrb	r3, [r7, #19]
 80131c4:	461a      	mov	r2, r3
 80131c6:	6839      	ldr	r1, [r7, #0]
 80131c8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80131ca:	f7ff ff49 	bl	8013060 <udp_input_local_match>
 80131ce:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 80131d0:	2b00      	cmp	r3, #0
 80131d2:	d041      	beq.n	8013258 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 80131d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80131d6:	7c1b      	ldrb	r3, [r3, #16]
 80131d8:	f003 0304 	and.w	r3, r3, #4
 80131dc:	2b00      	cmp	r3, #0
 80131de:	d11d      	bne.n	801321c <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 80131e0:	69fb      	ldr	r3, [r7, #28]
 80131e2:	2b00      	cmp	r3, #0
 80131e4:	d102      	bne.n	80131ec <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 80131e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80131e8:	61fb      	str	r3, [r7, #28]
 80131ea:	e017      	b.n	801321c <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 80131ec:	7cfb      	ldrb	r3, [r7, #19]
 80131ee:	2b00      	cmp	r3, #0
 80131f0:	d014      	beq.n	801321c <udp_input+0xf4>
 80131f2:	4b53      	ldr	r3, [pc, #332]	; (8013340 <udp_input+0x218>)
 80131f4:	695b      	ldr	r3, [r3, #20]
 80131f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80131fa:	d10f      	bne.n	801321c <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 80131fc:	69fb      	ldr	r3, [r7, #28]
 80131fe:	681a      	ldr	r2, [r3, #0]
 8013200:	683b      	ldr	r3, [r7, #0]
 8013202:	3304      	adds	r3, #4
 8013204:	681b      	ldr	r3, [r3, #0]
 8013206:	429a      	cmp	r2, r3
 8013208:	d008      	beq.n	801321c <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 801320a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801320c:	681a      	ldr	r2, [r3, #0]
 801320e:	683b      	ldr	r3, [r7, #0]
 8013210:	3304      	adds	r3, #4
 8013212:	681b      	ldr	r3, [r3, #0]
 8013214:	429a      	cmp	r2, r3
 8013216:	d101      	bne.n	801321c <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8013218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801321a:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 801321c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801321e:	8a9b      	ldrh	r3, [r3, #20]
 8013220:	8a3a      	ldrh	r2, [r7, #16]
 8013222:	429a      	cmp	r2, r3
 8013224:	d118      	bne.n	8013258 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8013226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013228:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 801322a:	2b00      	cmp	r3, #0
 801322c:	d005      	beq.n	801323a <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 801322e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013230:	685a      	ldr	r2, [r3, #4]
 8013232:	4b43      	ldr	r3, [pc, #268]	; (8013340 <udp_input+0x218>)
 8013234:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8013236:	429a      	cmp	r2, r3
 8013238:	d10e      	bne.n	8013258 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 801323a:	6a3b      	ldr	r3, [r7, #32]
 801323c:	2b00      	cmp	r3, #0
 801323e:	d014      	beq.n	801326a <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8013240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013242:	68da      	ldr	r2, [r3, #12]
 8013244:	6a3b      	ldr	r3, [r7, #32]
 8013246:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8013248:	4b3e      	ldr	r3, [pc, #248]	; (8013344 <udp_input+0x21c>)
 801324a:	681a      	ldr	r2, [r3, #0]
 801324c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801324e:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8013250:	4a3c      	ldr	r2, [pc, #240]	; (8013344 <udp_input+0x21c>)
 8013252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013254:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8013256:	e008      	b.n	801326a <udp_input+0x142>
      }
    }

    prev = pcb;
 8013258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801325a:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801325c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801325e:	68db      	ldr	r3, [r3, #12]
 8013260:	627b      	str	r3, [r7, #36]	; 0x24
 8013262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013264:	2b00      	cmp	r3, #0
 8013266:	d1a7      	bne.n	80131b8 <udp_input+0x90>
 8013268:	e000      	b.n	801326c <udp_input+0x144>
        break;
 801326a:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 801326c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801326e:	2b00      	cmp	r3, #0
 8013270:	d101      	bne.n	8013276 <udp_input+0x14e>
    pcb = uncon_pcb;
 8013272:	69fb      	ldr	r3, [r7, #28]
 8013274:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8013276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013278:	2b00      	cmp	r3, #0
 801327a:	d002      	beq.n	8013282 <udp_input+0x15a>
    for_us = 1;
 801327c:	2301      	movs	r3, #1
 801327e:	76fb      	strb	r3, [r7, #27]
 8013280:	e00a      	b.n	8013298 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8013282:	683b      	ldr	r3, [r7, #0]
 8013284:	3304      	adds	r3, #4
 8013286:	681a      	ldr	r2, [r3, #0]
 8013288:	4b2d      	ldr	r3, [pc, #180]	; (8013340 <udp_input+0x218>)
 801328a:	695b      	ldr	r3, [r3, #20]
 801328c:	429a      	cmp	r2, r3
 801328e:	bf0c      	ite	eq
 8013290:	2301      	moveq	r3, #1
 8013292:	2300      	movne	r3, #0
 8013294:	b2db      	uxtb	r3, r3
 8013296:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8013298:	7efb      	ldrb	r3, [r7, #27]
 801329a:	2b00      	cmp	r3, #0
 801329c:	d041      	beq.n	8013322 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801329e:	2108      	movs	r1, #8
 80132a0:	6878      	ldr	r0, [r7, #4]
 80132a2:	f7f9 f933 	bl	800c50c <pbuf_remove_header>
 80132a6:	4603      	mov	r3, r0
 80132a8:	2b00      	cmp	r3, #0
 80132aa:	d00a      	beq.n	80132c2 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 80132ac:	4b20      	ldr	r3, [pc, #128]	; (8013330 <udp_input+0x208>)
 80132ae:	f44f 72b8 	mov.w	r2, #368	; 0x170
 80132b2:	4925      	ldr	r1, [pc, #148]	; (8013348 <udp_input+0x220>)
 80132b4:	4820      	ldr	r0, [pc, #128]	; (8013338 <udp_input+0x210>)
 80132b6:	f005 f885 	bl	80183c4 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 80132ba:	6878      	ldr	r0, [r7, #4]
 80132bc:	f7f9 f9ac 	bl	800c618 <pbuf_free>
      goto end;
 80132c0:	e032      	b.n	8013328 <udp_input+0x200>
    }

    if (pcb != NULL) {
 80132c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80132c4:	2b00      	cmp	r3, #0
 80132c6:	d012      	beq.n	80132ee <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 80132c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80132ca:	699b      	ldr	r3, [r3, #24]
 80132cc:	2b00      	cmp	r3, #0
 80132ce:	d00a      	beq.n	80132e6 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 80132d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80132d2:	699c      	ldr	r4, [r3, #24]
 80132d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80132d6:	69d8      	ldr	r0, [r3, #28]
 80132d8:	8a3b      	ldrh	r3, [r7, #16]
 80132da:	9300      	str	r3, [sp, #0]
 80132dc:	4b1b      	ldr	r3, [pc, #108]	; (801334c <udp_input+0x224>)
 80132de:	687a      	ldr	r2, [r7, #4]
 80132e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80132e2:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 80132e4:	e021      	b.n	801332a <udp_input+0x202>
        pbuf_free(p);
 80132e6:	6878      	ldr	r0, [r7, #4]
 80132e8:	f7f9 f996 	bl	800c618 <pbuf_free>
        goto end;
 80132ec:	e01c      	b.n	8013328 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 80132ee:	7cfb      	ldrb	r3, [r7, #19]
 80132f0:	2b00      	cmp	r3, #0
 80132f2:	d112      	bne.n	801331a <udp_input+0x1f2>
 80132f4:	4b12      	ldr	r3, [pc, #72]	; (8013340 <udp_input+0x218>)
 80132f6:	695b      	ldr	r3, [r3, #20]
 80132f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80132fc:	2be0      	cmp	r3, #224	; 0xe0
 80132fe:	d00c      	beq.n	801331a <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8013300:	4b0f      	ldr	r3, [pc, #60]	; (8013340 <udp_input+0x218>)
 8013302:	899b      	ldrh	r3, [r3, #12]
 8013304:	3308      	adds	r3, #8
 8013306:	b29b      	uxth	r3, r3
 8013308:	b21b      	sxth	r3, r3
 801330a:	4619      	mov	r1, r3
 801330c:	6878      	ldr	r0, [r7, #4]
 801330e:	f7f9 f970 	bl	800c5f2 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8013312:	2103      	movs	r1, #3
 8013314:	6878      	ldr	r0, [r7, #4]
 8013316:	f003 fa07 	bl	8016728 <icmp_dest_unreach>
      pbuf_free(p);
 801331a:	6878      	ldr	r0, [r7, #4]
 801331c:	f7f9 f97c 	bl	800c618 <pbuf_free>
  return;
 8013320:	e003      	b.n	801332a <udp_input+0x202>
    pbuf_free(p);
 8013322:	6878      	ldr	r0, [r7, #4]
 8013324:	f7f9 f978 	bl	800c618 <pbuf_free>
  return;
 8013328:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801332a:	372c      	adds	r7, #44	; 0x2c
 801332c:	46bd      	mov	sp, r7
 801332e:	bd90      	pop	{r4, r7, pc}
 8013330:	0801c018 	.word	0x0801c018
 8013334:	0801c0bc 	.word	0x0801c0bc
 8013338:	0801c06c 	.word	0x0801c06c
 801333c:	0801c0d4 	.word	0x0801c0d4
 8013340:	2000d604 	.word	0x2000d604
 8013344:	20010dd4 	.word	0x20010dd4
 8013348:	0801c0f0 	.word	0x0801c0f0
 801334c:	2000d614 	.word	0x2000d614

08013350 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8013350:	b580      	push	{r7, lr}
 8013352:	b088      	sub	sp, #32
 8013354:	af02      	add	r7, sp, #8
 8013356:	60f8      	str	r0, [r7, #12]
 8013358:	60b9      	str	r1, [r7, #8]
 801335a:	607a      	str	r2, [r7, #4]
 801335c:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 801335e:	68fb      	ldr	r3, [r7, #12]
 8013360:	2b00      	cmp	r3, #0
 8013362:	d109      	bne.n	8013378 <udp_sendto_if+0x28>
 8013364:	4b2e      	ldr	r3, [pc, #184]	; (8013420 <udp_sendto_if+0xd0>)
 8013366:	f44f 7220 	mov.w	r2, #640	; 0x280
 801336a:	492e      	ldr	r1, [pc, #184]	; (8013424 <udp_sendto_if+0xd4>)
 801336c:	482e      	ldr	r0, [pc, #184]	; (8013428 <udp_sendto_if+0xd8>)
 801336e:	f005 f829 	bl	80183c4 <iprintf>
 8013372:	f06f 030f 	mvn.w	r3, #15
 8013376:	e04f      	b.n	8013418 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8013378:	68bb      	ldr	r3, [r7, #8]
 801337a:	2b00      	cmp	r3, #0
 801337c:	d109      	bne.n	8013392 <udp_sendto_if+0x42>
 801337e:	4b28      	ldr	r3, [pc, #160]	; (8013420 <udp_sendto_if+0xd0>)
 8013380:	f240 2281 	movw	r2, #641	; 0x281
 8013384:	4929      	ldr	r1, [pc, #164]	; (801342c <udp_sendto_if+0xdc>)
 8013386:	4828      	ldr	r0, [pc, #160]	; (8013428 <udp_sendto_if+0xd8>)
 8013388:	f005 f81c 	bl	80183c4 <iprintf>
 801338c:	f06f 030f 	mvn.w	r3, #15
 8013390:	e042      	b.n	8013418 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8013392:	687b      	ldr	r3, [r7, #4]
 8013394:	2b00      	cmp	r3, #0
 8013396:	d109      	bne.n	80133ac <udp_sendto_if+0x5c>
 8013398:	4b21      	ldr	r3, [pc, #132]	; (8013420 <udp_sendto_if+0xd0>)
 801339a:	f240 2282 	movw	r2, #642	; 0x282
 801339e:	4924      	ldr	r1, [pc, #144]	; (8013430 <udp_sendto_if+0xe0>)
 80133a0:	4821      	ldr	r0, [pc, #132]	; (8013428 <udp_sendto_if+0xd8>)
 80133a2:	f005 f80f 	bl	80183c4 <iprintf>
 80133a6:	f06f 030f 	mvn.w	r3, #15
 80133aa:	e035      	b.n	8013418 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 80133ac:	6a3b      	ldr	r3, [r7, #32]
 80133ae:	2b00      	cmp	r3, #0
 80133b0:	d109      	bne.n	80133c6 <udp_sendto_if+0x76>
 80133b2:	4b1b      	ldr	r3, [pc, #108]	; (8013420 <udp_sendto_if+0xd0>)
 80133b4:	f240 2283 	movw	r2, #643	; 0x283
 80133b8:	491e      	ldr	r1, [pc, #120]	; (8013434 <udp_sendto_if+0xe4>)
 80133ba:	481b      	ldr	r0, [pc, #108]	; (8013428 <udp_sendto_if+0xd8>)
 80133bc:	f005 f802 	bl	80183c4 <iprintf>
 80133c0:	f06f 030f 	mvn.w	r3, #15
 80133c4:	e028      	b.n	8013418 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80133c6:	68fb      	ldr	r3, [r7, #12]
 80133c8:	2b00      	cmp	r3, #0
 80133ca:	d009      	beq.n	80133e0 <udp_sendto_if+0x90>
 80133cc:	68fb      	ldr	r3, [r7, #12]
 80133ce:	681b      	ldr	r3, [r3, #0]
 80133d0:	2b00      	cmp	r3, #0
 80133d2:	d005      	beq.n	80133e0 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 80133d4:	68fb      	ldr	r3, [r7, #12]
 80133d6:	681b      	ldr	r3, [r3, #0]
 80133d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80133dc:	2be0      	cmp	r3, #224	; 0xe0
 80133de:	d103      	bne.n	80133e8 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 80133e0:	6a3b      	ldr	r3, [r7, #32]
 80133e2:	3304      	adds	r3, #4
 80133e4:	617b      	str	r3, [r7, #20]
 80133e6:	e00b      	b.n	8013400 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 80133e8:	68fb      	ldr	r3, [r7, #12]
 80133ea:	681a      	ldr	r2, [r3, #0]
 80133ec:	6a3b      	ldr	r3, [r7, #32]
 80133ee:	3304      	adds	r3, #4
 80133f0:	681b      	ldr	r3, [r3, #0]
 80133f2:	429a      	cmp	r2, r3
 80133f4:	d002      	beq.n	80133fc <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 80133f6:	f06f 0303 	mvn.w	r3, #3
 80133fa:	e00d      	b.n	8013418 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 80133fc:	68fb      	ldr	r3, [r7, #12]
 80133fe:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8013400:	887a      	ldrh	r2, [r7, #2]
 8013402:	697b      	ldr	r3, [r7, #20]
 8013404:	9301      	str	r3, [sp, #4]
 8013406:	6a3b      	ldr	r3, [r7, #32]
 8013408:	9300      	str	r3, [sp, #0]
 801340a:	4613      	mov	r3, r2
 801340c:	687a      	ldr	r2, [r7, #4]
 801340e:	68b9      	ldr	r1, [r7, #8]
 8013410:	68f8      	ldr	r0, [r7, #12]
 8013412:	f000 f811 	bl	8013438 <udp_sendto_if_src>
 8013416:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8013418:	4618      	mov	r0, r3
 801341a:	3718      	adds	r7, #24
 801341c:	46bd      	mov	sp, r7
 801341e:	bd80      	pop	{r7, pc}
 8013420:	0801c018 	.word	0x0801c018
 8013424:	0801c18c 	.word	0x0801c18c
 8013428:	0801c06c 	.word	0x0801c06c
 801342c:	0801c1a8 	.word	0x0801c1a8
 8013430:	0801c1c4 	.word	0x0801c1c4
 8013434:	0801c1e4 	.word	0x0801c1e4

08013438 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8013438:	b580      	push	{r7, lr}
 801343a:	b08c      	sub	sp, #48	; 0x30
 801343c:	af04      	add	r7, sp, #16
 801343e:	60f8      	str	r0, [r7, #12]
 8013440:	60b9      	str	r1, [r7, #8]
 8013442:	607a      	str	r2, [r7, #4]
 8013444:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 8013446:	68fb      	ldr	r3, [r7, #12]
 8013448:	2b00      	cmp	r3, #0
 801344a:	d109      	bne.n	8013460 <udp_sendto_if_src+0x28>
 801344c:	4b65      	ldr	r3, [pc, #404]	; (80135e4 <udp_sendto_if_src+0x1ac>)
 801344e:	f240 22d1 	movw	r2, #721	; 0x2d1
 8013452:	4965      	ldr	r1, [pc, #404]	; (80135e8 <udp_sendto_if_src+0x1b0>)
 8013454:	4865      	ldr	r0, [pc, #404]	; (80135ec <udp_sendto_if_src+0x1b4>)
 8013456:	f004 ffb5 	bl	80183c4 <iprintf>
 801345a:	f06f 030f 	mvn.w	r3, #15
 801345e:	e0bc      	b.n	80135da <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8013460:	68bb      	ldr	r3, [r7, #8]
 8013462:	2b00      	cmp	r3, #0
 8013464:	d109      	bne.n	801347a <udp_sendto_if_src+0x42>
 8013466:	4b5f      	ldr	r3, [pc, #380]	; (80135e4 <udp_sendto_if_src+0x1ac>)
 8013468:	f240 22d2 	movw	r2, #722	; 0x2d2
 801346c:	4960      	ldr	r1, [pc, #384]	; (80135f0 <udp_sendto_if_src+0x1b8>)
 801346e:	485f      	ldr	r0, [pc, #380]	; (80135ec <udp_sendto_if_src+0x1b4>)
 8013470:	f004 ffa8 	bl	80183c4 <iprintf>
 8013474:	f06f 030f 	mvn.w	r3, #15
 8013478:	e0af      	b.n	80135da <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801347a:	687b      	ldr	r3, [r7, #4]
 801347c:	2b00      	cmp	r3, #0
 801347e:	d109      	bne.n	8013494 <udp_sendto_if_src+0x5c>
 8013480:	4b58      	ldr	r3, [pc, #352]	; (80135e4 <udp_sendto_if_src+0x1ac>)
 8013482:	f240 22d3 	movw	r2, #723	; 0x2d3
 8013486:	495b      	ldr	r1, [pc, #364]	; (80135f4 <udp_sendto_if_src+0x1bc>)
 8013488:	4858      	ldr	r0, [pc, #352]	; (80135ec <udp_sendto_if_src+0x1b4>)
 801348a:	f004 ff9b 	bl	80183c4 <iprintf>
 801348e:	f06f 030f 	mvn.w	r3, #15
 8013492:	e0a2      	b.n	80135da <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8013494:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013496:	2b00      	cmp	r3, #0
 8013498:	d109      	bne.n	80134ae <udp_sendto_if_src+0x76>
 801349a:	4b52      	ldr	r3, [pc, #328]	; (80135e4 <udp_sendto_if_src+0x1ac>)
 801349c:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 80134a0:	4955      	ldr	r1, [pc, #340]	; (80135f8 <udp_sendto_if_src+0x1c0>)
 80134a2:	4852      	ldr	r0, [pc, #328]	; (80135ec <udp_sendto_if_src+0x1b4>)
 80134a4:	f004 ff8e 	bl	80183c4 <iprintf>
 80134a8:	f06f 030f 	mvn.w	r3, #15
 80134ac:	e095      	b.n	80135da <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 80134ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80134b0:	2b00      	cmp	r3, #0
 80134b2:	d109      	bne.n	80134c8 <udp_sendto_if_src+0x90>
 80134b4:	4b4b      	ldr	r3, [pc, #300]	; (80135e4 <udp_sendto_if_src+0x1ac>)
 80134b6:	f240 22d5 	movw	r2, #725	; 0x2d5
 80134ba:	4950      	ldr	r1, [pc, #320]	; (80135fc <udp_sendto_if_src+0x1c4>)
 80134bc:	484b      	ldr	r0, [pc, #300]	; (80135ec <udp_sendto_if_src+0x1b4>)
 80134be:	f004 ff81 	bl	80183c4 <iprintf>
 80134c2:	f06f 030f 	mvn.w	r3, #15
 80134c6:	e088      	b.n	80135da <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 80134c8:	68fb      	ldr	r3, [r7, #12]
 80134ca:	8a5b      	ldrh	r3, [r3, #18]
 80134cc:	2b00      	cmp	r3, #0
 80134ce:	d10f      	bne.n	80134f0 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 80134d0:	68f9      	ldr	r1, [r7, #12]
 80134d2:	68fb      	ldr	r3, [r7, #12]
 80134d4:	8a5b      	ldrh	r3, [r3, #18]
 80134d6:	461a      	mov	r2, r3
 80134d8:	68f8      	ldr	r0, [r7, #12]
 80134da:	f000 f893 	bl	8013604 <udp_bind>
 80134de:	4603      	mov	r3, r0
 80134e0:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 80134e2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80134e6:	2b00      	cmp	r3, #0
 80134e8:	d002      	beq.n	80134f0 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 80134ea:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80134ee:	e074      	b.n	80135da <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 80134f0:	68bb      	ldr	r3, [r7, #8]
 80134f2:	891b      	ldrh	r3, [r3, #8]
 80134f4:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 80134f8:	4293      	cmp	r3, r2
 80134fa:	d902      	bls.n	8013502 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 80134fc:	f04f 33ff 	mov.w	r3, #4294967295
 8013500:	e06b      	b.n	80135da <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 8013502:	2108      	movs	r1, #8
 8013504:	68b8      	ldr	r0, [r7, #8]
 8013506:	f7f8 fff1 	bl	800c4ec <pbuf_add_header>
 801350a:	4603      	mov	r3, r0
 801350c:	2b00      	cmp	r3, #0
 801350e:	d015      	beq.n	801353c <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8013510:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013514:	2108      	movs	r1, #8
 8013516:	2022      	movs	r0, #34	; 0x22
 8013518:	f7f8 fd9a 	bl	800c050 <pbuf_alloc>
 801351c:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 801351e:	69fb      	ldr	r3, [r7, #28]
 8013520:	2b00      	cmp	r3, #0
 8013522:	d102      	bne.n	801352a <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8013524:	f04f 33ff 	mov.w	r3, #4294967295
 8013528:	e057      	b.n	80135da <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 801352a:	68bb      	ldr	r3, [r7, #8]
 801352c:	891b      	ldrh	r3, [r3, #8]
 801352e:	2b00      	cmp	r3, #0
 8013530:	d006      	beq.n	8013540 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 8013532:	68b9      	ldr	r1, [r7, #8]
 8013534:	69f8      	ldr	r0, [r7, #28]
 8013536:	f7f9 f993 	bl	800c860 <pbuf_chain>
 801353a:	e001      	b.n	8013540 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 801353c:	68bb      	ldr	r3, [r7, #8]
 801353e:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8013540:	69fb      	ldr	r3, [r7, #28]
 8013542:	895b      	ldrh	r3, [r3, #10]
 8013544:	2b07      	cmp	r3, #7
 8013546:	d806      	bhi.n	8013556 <udp_sendto_if_src+0x11e>
 8013548:	4b26      	ldr	r3, [pc, #152]	; (80135e4 <udp_sendto_if_src+0x1ac>)
 801354a:	f240 320d 	movw	r2, #781	; 0x30d
 801354e:	492c      	ldr	r1, [pc, #176]	; (8013600 <udp_sendto_if_src+0x1c8>)
 8013550:	4826      	ldr	r0, [pc, #152]	; (80135ec <udp_sendto_if_src+0x1b4>)
 8013552:	f004 ff37 	bl	80183c4 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8013556:	69fb      	ldr	r3, [r7, #28]
 8013558:	685b      	ldr	r3, [r3, #4]
 801355a:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 801355c:	68fb      	ldr	r3, [r7, #12]
 801355e:	8a5b      	ldrh	r3, [r3, #18]
 8013560:	4618      	mov	r0, r3
 8013562:	f7f7 fc25 	bl	800adb0 <lwip_htons>
 8013566:	4603      	mov	r3, r0
 8013568:	461a      	mov	r2, r3
 801356a:	697b      	ldr	r3, [r7, #20]
 801356c:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 801356e:	887b      	ldrh	r3, [r7, #2]
 8013570:	4618      	mov	r0, r3
 8013572:	f7f7 fc1d 	bl	800adb0 <lwip_htons>
 8013576:	4603      	mov	r3, r0
 8013578:	461a      	mov	r2, r3
 801357a:	697b      	ldr	r3, [r7, #20]
 801357c:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 801357e:	697b      	ldr	r3, [r7, #20]
 8013580:	2200      	movs	r2, #0
 8013582:	719a      	strb	r2, [r3, #6]
 8013584:	2200      	movs	r2, #0
 8013586:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8013588:	69fb      	ldr	r3, [r7, #28]
 801358a:	891b      	ldrh	r3, [r3, #8]
 801358c:	4618      	mov	r0, r3
 801358e:	f7f7 fc0f 	bl	800adb0 <lwip_htons>
 8013592:	4603      	mov	r3, r0
 8013594:	461a      	mov	r2, r3
 8013596:	697b      	ldr	r3, [r7, #20]
 8013598:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 801359a:	2311      	movs	r3, #17
 801359c:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 801359e:	68fb      	ldr	r3, [r7, #12]
 80135a0:	7adb      	ldrb	r3, [r3, #11]
 80135a2:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 80135a4:	68fb      	ldr	r3, [r7, #12]
 80135a6:	7a9b      	ldrb	r3, [r3, #10]
 80135a8:	7cb9      	ldrb	r1, [r7, #18]
 80135aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80135ac:	9202      	str	r2, [sp, #8]
 80135ae:	7cfa      	ldrb	r2, [r7, #19]
 80135b0:	9201      	str	r2, [sp, #4]
 80135b2:	9300      	str	r3, [sp, #0]
 80135b4:	460b      	mov	r3, r1
 80135b6:	687a      	ldr	r2, [r7, #4]
 80135b8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80135ba:	69f8      	ldr	r0, [r7, #28]
 80135bc:	f003 fb44 	bl	8016c48 <ip4_output_if_src>
 80135c0:	4603      	mov	r3, r0
 80135c2:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 80135c4:	69fa      	ldr	r2, [r7, #28]
 80135c6:	68bb      	ldr	r3, [r7, #8]
 80135c8:	429a      	cmp	r2, r3
 80135ca:	d004      	beq.n	80135d6 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 80135cc:	69f8      	ldr	r0, [r7, #28]
 80135ce:	f7f9 f823 	bl	800c618 <pbuf_free>
    q = NULL;
 80135d2:	2300      	movs	r3, #0
 80135d4:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 80135d6:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 80135da:	4618      	mov	r0, r3
 80135dc:	3720      	adds	r7, #32
 80135de:	46bd      	mov	sp, r7
 80135e0:	bd80      	pop	{r7, pc}
 80135e2:	bf00      	nop
 80135e4:	0801c018 	.word	0x0801c018
 80135e8:	0801c204 	.word	0x0801c204
 80135ec:	0801c06c 	.word	0x0801c06c
 80135f0:	0801c224 	.word	0x0801c224
 80135f4:	0801c244 	.word	0x0801c244
 80135f8:	0801c268 	.word	0x0801c268
 80135fc:	0801c28c 	.word	0x0801c28c
 8013600:	0801c2b0 	.word	0x0801c2b0

08013604 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8013604:	b580      	push	{r7, lr}
 8013606:	b086      	sub	sp, #24
 8013608:	af00      	add	r7, sp, #0
 801360a:	60f8      	str	r0, [r7, #12]
 801360c:	60b9      	str	r1, [r7, #8]
 801360e:	4613      	mov	r3, r2
 8013610:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8013612:	68bb      	ldr	r3, [r7, #8]
 8013614:	2b00      	cmp	r3, #0
 8013616:	d101      	bne.n	801361c <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8013618:	4b39      	ldr	r3, [pc, #228]	; (8013700 <udp_bind+0xfc>)
 801361a:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 801361c:	68fb      	ldr	r3, [r7, #12]
 801361e:	2b00      	cmp	r3, #0
 8013620:	d109      	bne.n	8013636 <udp_bind+0x32>
 8013622:	4b38      	ldr	r3, [pc, #224]	; (8013704 <udp_bind+0x100>)
 8013624:	f240 32b7 	movw	r2, #951	; 0x3b7
 8013628:	4937      	ldr	r1, [pc, #220]	; (8013708 <udp_bind+0x104>)
 801362a:	4838      	ldr	r0, [pc, #224]	; (801370c <udp_bind+0x108>)
 801362c:	f004 feca 	bl	80183c4 <iprintf>
 8013630:	f06f 030f 	mvn.w	r3, #15
 8013634:	e060      	b.n	80136f8 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8013636:	2300      	movs	r3, #0
 8013638:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801363a:	4b35      	ldr	r3, [pc, #212]	; (8013710 <udp_bind+0x10c>)
 801363c:	681b      	ldr	r3, [r3, #0]
 801363e:	617b      	str	r3, [r7, #20]
 8013640:	e009      	b.n	8013656 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8013642:	68fa      	ldr	r2, [r7, #12]
 8013644:	697b      	ldr	r3, [r7, #20]
 8013646:	429a      	cmp	r2, r3
 8013648:	d102      	bne.n	8013650 <udp_bind+0x4c>
      rebind = 1;
 801364a:	2301      	movs	r3, #1
 801364c:	74fb      	strb	r3, [r7, #19]
      break;
 801364e:	e005      	b.n	801365c <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013650:	697b      	ldr	r3, [r7, #20]
 8013652:	68db      	ldr	r3, [r3, #12]
 8013654:	617b      	str	r3, [r7, #20]
 8013656:	697b      	ldr	r3, [r7, #20]
 8013658:	2b00      	cmp	r3, #0
 801365a:	d1f2      	bne.n	8013642 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 801365c:	88fb      	ldrh	r3, [r7, #6]
 801365e:	2b00      	cmp	r3, #0
 8013660:	d109      	bne.n	8013676 <udp_bind+0x72>
    port = udp_new_port();
 8013662:	f7ff fcc5 	bl	8012ff0 <udp_new_port>
 8013666:	4603      	mov	r3, r0
 8013668:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 801366a:	88fb      	ldrh	r3, [r7, #6]
 801366c:	2b00      	cmp	r3, #0
 801366e:	d12c      	bne.n	80136ca <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8013670:	f06f 0307 	mvn.w	r3, #7
 8013674:	e040      	b.n	80136f8 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013676:	4b26      	ldr	r3, [pc, #152]	; (8013710 <udp_bind+0x10c>)
 8013678:	681b      	ldr	r3, [r3, #0]
 801367a:	617b      	str	r3, [r7, #20]
 801367c:	e022      	b.n	80136c4 <udp_bind+0xc0>
      if (pcb != ipcb) {
 801367e:	68fa      	ldr	r2, [r7, #12]
 8013680:	697b      	ldr	r3, [r7, #20]
 8013682:	429a      	cmp	r2, r3
 8013684:	d01b      	beq.n	80136be <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8013686:	697b      	ldr	r3, [r7, #20]
 8013688:	8a5b      	ldrh	r3, [r3, #18]
 801368a:	88fa      	ldrh	r2, [r7, #6]
 801368c:	429a      	cmp	r2, r3
 801368e:	d116      	bne.n	80136be <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8013690:	697b      	ldr	r3, [r7, #20]
 8013692:	681a      	ldr	r2, [r3, #0]
 8013694:	68bb      	ldr	r3, [r7, #8]
 8013696:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8013698:	429a      	cmp	r2, r3
 801369a:	d00d      	beq.n	80136b8 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801369c:	68bb      	ldr	r3, [r7, #8]
 801369e:	2b00      	cmp	r3, #0
 80136a0:	d00a      	beq.n	80136b8 <udp_bind+0xb4>
 80136a2:	68bb      	ldr	r3, [r7, #8]
 80136a4:	681b      	ldr	r3, [r3, #0]
 80136a6:	2b00      	cmp	r3, #0
 80136a8:	d006      	beq.n	80136b8 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 80136aa:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80136ac:	2b00      	cmp	r3, #0
 80136ae:	d003      	beq.n	80136b8 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 80136b0:	697b      	ldr	r3, [r7, #20]
 80136b2:	681b      	ldr	r3, [r3, #0]
 80136b4:	2b00      	cmp	r3, #0
 80136b6:	d102      	bne.n	80136be <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 80136b8:	f06f 0307 	mvn.w	r3, #7
 80136bc:	e01c      	b.n	80136f8 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80136be:	697b      	ldr	r3, [r7, #20]
 80136c0:	68db      	ldr	r3, [r3, #12]
 80136c2:	617b      	str	r3, [r7, #20]
 80136c4:	697b      	ldr	r3, [r7, #20]
 80136c6:	2b00      	cmp	r3, #0
 80136c8:	d1d9      	bne.n	801367e <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 80136ca:	68bb      	ldr	r3, [r7, #8]
 80136cc:	2b00      	cmp	r3, #0
 80136ce:	d002      	beq.n	80136d6 <udp_bind+0xd2>
 80136d0:	68bb      	ldr	r3, [r7, #8]
 80136d2:	681b      	ldr	r3, [r3, #0]
 80136d4:	e000      	b.n	80136d8 <udp_bind+0xd4>
 80136d6:	2300      	movs	r3, #0
 80136d8:	68fa      	ldr	r2, [r7, #12]
 80136da:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 80136dc:	68fb      	ldr	r3, [r7, #12]
 80136de:	88fa      	ldrh	r2, [r7, #6]
 80136e0:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 80136e2:	7cfb      	ldrb	r3, [r7, #19]
 80136e4:	2b00      	cmp	r3, #0
 80136e6:	d106      	bne.n	80136f6 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 80136e8:	4b09      	ldr	r3, [pc, #36]	; (8013710 <udp_bind+0x10c>)
 80136ea:	681a      	ldr	r2, [r3, #0]
 80136ec:	68fb      	ldr	r3, [r7, #12]
 80136ee:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 80136f0:	4a07      	ldr	r2, [pc, #28]	; (8013710 <udp_bind+0x10c>)
 80136f2:	68fb      	ldr	r3, [r7, #12]
 80136f4:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 80136f6:	2300      	movs	r3, #0
}
 80136f8:	4618      	mov	r0, r3
 80136fa:	3718      	adds	r7, #24
 80136fc:	46bd      	mov	sp, r7
 80136fe:	bd80      	pop	{r7, pc}
 8013700:	08027060 	.word	0x08027060
 8013704:	0801c018 	.word	0x0801c018
 8013708:	0801c2e0 	.word	0x0801c2e0
 801370c:	0801c06c 	.word	0x0801c06c
 8013710:	20010dd4 	.word	0x20010dd4

08013714 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8013714:	b580      	push	{r7, lr}
 8013716:	b086      	sub	sp, #24
 8013718:	af00      	add	r7, sp, #0
 801371a:	60f8      	str	r0, [r7, #12]
 801371c:	60b9      	str	r1, [r7, #8]
 801371e:	4613      	mov	r3, r2
 8013720:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8013722:	68fb      	ldr	r3, [r7, #12]
 8013724:	2b00      	cmp	r3, #0
 8013726:	d109      	bne.n	801373c <udp_connect+0x28>
 8013728:	4b2c      	ldr	r3, [pc, #176]	; (80137dc <udp_connect+0xc8>)
 801372a:	f240 4235 	movw	r2, #1077	; 0x435
 801372e:	492c      	ldr	r1, [pc, #176]	; (80137e0 <udp_connect+0xcc>)
 8013730:	482c      	ldr	r0, [pc, #176]	; (80137e4 <udp_connect+0xd0>)
 8013732:	f004 fe47 	bl	80183c4 <iprintf>
 8013736:	f06f 030f 	mvn.w	r3, #15
 801373a:	e04b      	b.n	80137d4 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 801373c:	68bb      	ldr	r3, [r7, #8]
 801373e:	2b00      	cmp	r3, #0
 8013740:	d109      	bne.n	8013756 <udp_connect+0x42>
 8013742:	4b26      	ldr	r3, [pc, #152]	; (80137dc <udp_connect+0xc8>)
 8013744:	f240 4236 	movw	r2, #1078	; 0x436
 8013748:	4927      	ldr	r1, [pc, #156]	; (80137e8 <udp_connect+0xd4>)
 801374a:	4826      	ldr	r0, [pc, #152]	; (80137e4 <udp_connect+0xd0>)
 801374c:	f004 fe3a 	bl	80183c4 <iprintf>
 8013750:	f06f 030f 	mvn.w	r3, #15
 8013754:	e03e      	b.n	80137d4 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 8013756:	68fb      	ldr	r3, [r7, #12]
 8013758:	8a5b      	ldrh	r3, [r3, #18]
 801375a:	2b00      	cmp	r3, #0
 801375c:	d10f      	bne.n	801377e <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801375e:	68f9      	ldr	r1, [r7, #12]
 8013760:	68fb      	ldr	r3, [r7, #12]
 8013762:	8a5b      	ldrh	r3, [r3, #18]
 8013764:	461a      	mov	r2, r3
 8013766:	68f8      	ldr	r0, [r7, #12]
 8013768:	f7ff ff4c 	bl	8013604 <udp_bind>
 801376c:	4603      	mov	r3, r0
 801376e:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8013770:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013774:	2b00      	cmp	r3, #0
 8013776:	d002      	beq.n	801377e <udp_connect+0x6a>
      return err;
 8013778:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801377c:	e02a      	b.n	80137d4 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 801377e:	68bb      	ldr	r3, [r7, #8]
 8013780:	2b00      	cmp	r3, #0
 8013782:	d002      	beq.n	801378a <udp_connect+0x76>
 8013784:	68bb      	ldr	r3, [r7, #8]
 8013786:	681b      	ldr	r3, [r3, #0]
 8013788:	e000      	b.n	801378c <udp_connect+0x78>
 801378a:	2300      	movs	r3, #0
 801378c:	68fa      	ldr	r2, [r7, #12]
 801378e:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 8013790:	68fb      	ldr	r3, [r7, #12]
 8013792:	88fa      	ldrh	r2, [r7, #6]
 8013794:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 8013796:	68fb      	ldr	r3, [r7, #12]
 8013798:	7c1b      	ldrb	r3, [r3, #16]
 801379a:	f043 0304 	orr.w	r3, r3, #4
 801379e:	b2da      	uxtb	r2, r3
 80137a0:	68fb      	ldr	r3, [r7, #12]
 80137a2:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80137a4:	4b11      	ldr	r3, [pc, #68]	; (80137ec <udp_connect+0xd8>)
 80137a6:	681b      	ldr	r3, [r3, #0]
 80137a8:	617b      	str	r3, [r7, #20]
 80137aa:	e008      	b.n	80137be <udp_connect+0xaa>
    if (pcb == ipcb) {
 80137ac:	68fa      	ldr	r2, [r7, #12]
 80137ae:	697b      	ldr	r3, [r7, #20]
 80137b0:	429a      	cmp	r2, r3
 80137b2:	d101      	bne.n	80137b8 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 80137b4:	2300      	movs	r3, #0
 80137b6:	e00d      	b.n	80137d4 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80137b8:	697b      	ldr	r3, [r7, #20]
 80137ba:	68db      	ldr	r3, [r3, #12]
 80137bc:	617b      	str	r3, [r7, #20]
 80137be:	697b      	ldr	r3, [r7, #20]
 80137c0:	2b00      	cmp	r3, #0
 80137c2:	d1f3      	bne.n	80137ac <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 80137c4:	4b09      	ldr	r3, [pc, #36]	; (80137ec <udp_connect+0xd8>)
 80137c6:	681a      	ldr	r2, [r3, #0]
 80137c8:	68fb      	ldr	r3, [r7, #12]
 80137ca:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 80137cc:	4a07      	ldr	r2, [pc, #28]	; (80137ec <udp_connect+0xd8>)
 80137ce:	68fb      	ldr	r3, [r7, #12]
 80137d0:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 80137d2:	2300      	movs	r3, #0
}
 80137d4:	4618      	mov	r0, r3
 80137d6:	3718      	adds	r7, #24
 80137d8:	46bd      	mov	sp, r7
 80137da:	bd80      	pop	{r7, pc}
 80137dc:	0801c018 	.word	0x0801c018
 80137e0:	0801c2f8 	.word	0x0801c2f8
 80137e4:	0801c06c 	.word	0x0801c06c
 80137e8:	0801c314 	.word	0x0801c314
 80137ec:	20010dd4 	.word	0x20010dd4

080137f0 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 80137f0:	b580      	push	{r7, lr}
 80137f2:	b084      	sub	sp, #16
 80137f4:	af00      	add	r7, sp, #0
 80137f6:	60f8      	str	r0, [r7, #12]
 80137f8:	60b9      	str	r1, [r7, #8]
 80137fa:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 80137fc:	68fb      	ldr	r3, [r7, #12]
 80137fe:	2b00      	cmp	r3, #0
 8013800:	d107      	bne.n	8013812 <udp_recv+0x22>
 8013802:	4b08      	ldr	r3, [pc, #32]	; (8013824 <udp_recv+0x34>)
 8013804:	f240 428a 	movw	r2, #1162	; 0x48a
 8013808:	4907      	ldr	r1, [pc, #28]	; (8013828 <udp_recv+0x38>)
 801380a:	4808      	ldr	r0, [pc, #32]	; (801382c <udp_recv+0x3c>)
 801380c:	f004 fdda 	bl	80183c4 <iprintf>
 8013810:	e005      	b.n	801381e <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8013812:	68fb      	ldr	r3, [r7, #12]
 8013814:	68ba      	ldr	r2, [r7, #8]
 8013816:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8013818:	68fb      	ldr	r3, [r7, #12]
 801381a:	687a      	ldr	r2, [r7, #4]
 801381c:	61da      	str	r2, [r3, #28]
}
 801381e:	3710      	adds	r7, #16
 8013820:	46bd      	mov	sp, r7
 8013822:	bd80      	pop	{r7, pc}
 8013824:	0801c018 	.word	0x0801c018
 8013828:	0801c34c 	.word	0x0801c34c
 801382c:	0801c06c 	.word	0x0801c06c

08013830 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8013830:	b580      	push	{r7, lr}
 8013832:	b084      	sub	sp, #16
 8013834:	af00      	add	r7, sp, #0
 8013836:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8013838:	687b      	ldr	r3, [r7, #4]
 801383a:	2b00      	cmp	r3, #0
 801383c:	d107      	bne.n	801384e <udp_remove+0x1e>
 801383e:	4b19      	ldr	r3, [pc, #100]	; (80138a4 <udp_remove+0x74>)
 8013840:	f240 42a1 	movw	r2, #1185	; 0x4a1
 8013844:	4918      	ldr	r1, [pc, #96]	; (80138a8 <udp_remove+0x78>)
 8013846:	4819      	ldr	r0, [pc, #100]	; (80138ac <udp_remove+0x7c>)
 8013848:	f004 fdbc 	bl	80183c4 <iprintf>
 801384c:	e026      	b.n	801389c <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 801384e:	4b18      	ldr	r3, [pc, #96]	; (80138b0 <udp_remove+0x80>)
 8013850:	681b      	ldr	r3, [r3, #0]
 8013852:	687a      	ldr	r2, [r7, #4]
 8013854:	429a      	cmp	r2, r3
 8013856:	d105      	bne.n	8013864 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8013858:	4b15      	ldr	r3, [pc, #84]	; (80138b0 <udp_remove+0x80>)
 801385a:	681b      	ldr	r3, [r3, #0]
 801385c:	68db      	ldr	r3, [r3, #12]
 801385e:	4a14      	ldr	r2, [pc, #80]	; (80138b0 <udp_remove+0x80>)
 8013860:	6013      	str	r3, [r2, #0]
 8013862:	e017      	b.n	8013894 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8013864:	4b12      	ldr	r3, [pc, #72]	; (80138b0 <udp_remove+0x80>)
 8013866:	681b      	ldr	r3, [r3, #0]
 8013868:	60fb      	str	r3, [r7, #12]
 801386a:	e010      	b.n	801388e <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 801386c:	68fb      	ldr	r3, [r7, #12]
 801386e:	68db      	ldr	r3, [r3, #12]
 8013870:	2b00      	cmp	r3, #0
 8013872:	d009      	beq.n	8013888 <udp_remove+0x58>
 8013874:	68fb      	ldr	r3, [r7, #12]
 8013876:	68db      	ldr	r3, [r3, #12]
 8013878:	687a      	ldr	r2, [r7, #4]
 801387a:	429a      	cmp	r2, r3
 801387c:	d104      	bne.n	8013888 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 801387e:	687b      	ldr	r3, [r7, #4]
 8013880:	68da      	ldr	r2, [r3, #12]
 8013882:	68fb      	ldr	r3, [r7, #12]
 8013884:	60da      	str	r2, [r3, #12]
        break;
 8013886:	e005      	b.n	8013894 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8013888:	68fb      	ldr	r3, [r7, #12]
 801388a:	68db      	ldr	r3, [r3, #12]
 801388c:	60fb      	str	r3, [r7, #12]
 801388e:	68fb      	ldr	r3, [r7, #12]
 8013890:	2b00      	cmp	r3, #0
 8013892:	d1eb      	bne.n	801386c <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8013894:	6879      	ldr	r1, [r7, #4]
 8013896:	2000      	movs	r0, #0
 8013898:	f7f8 f80e 	bl	800b8b8 <memp_free>
}
 801389c:	3710      	adds	r7, #16
 801389e:	46bd      	mov	sp, r7
 80138a0:	bd80      	pop	{r7, pc}
 80138a2:	bf00      	nop
 80138a4:	0801c018 	.word	0x0801c018
 80138a8:	0801c364 	.word	0x0801c364
 80138ac:	0801c06c 	.word	0x0801c06c
 80138b0:	20010dd4 	.word	0x20010dd4

080138b4 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 80138b4:	b580      	push	{r7, lr}
 80138b6:	b082      	sub	sp, #8
 80138b8:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 80138ba:	2000      	movs	r0, #0
 80138bc:	f7f7 ff86 	bl	800b7cc <memp_malloc>
 80138c0:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 80138c2:	687b      	ldr	r3, [r7, #4]
 80138c4:	2b00      	cmp	r3, #0
 80138c6:	d007      	beq.n	80138d8 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 80138c8:	2220      	movs	r2, #32
 80138ca:	2100      	movs	r1, #0
 80138cc:	6878      	ldr	r0, [r7, #4]
 80138ce:	f004 fcdc 	bl	801828a <memset>
    pcb->ttl = UDP_TTL;
 80138d2:	687b      	ldr	r3, [r7, #4]
 80138d4:	22ff      	movs	r2, #255	; 0xff
 80138d6:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 80138d8:	687b      	ldr	r3, [r7, #4]
}
 80138da:	4618      	mov	r0, r3
 80138dc:	3708      	adds	r7, #8
 80138de:	46bd      	mov	sp, r7
 80138e0:	bd80      	pop	{r7, pc}

080138e2 <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 80138e2:	b580      	push	{r7, lr}
 80138e4:	b084      	sub	sp, #16
 80138e6:	af00      	add	r7, sp, #0
 80138e8:	4603      	mov	r3, r0
 80138ea:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 80138ec:	f7ff ffe2 	bl	80138b4 <udp_new>
 80138f0:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 80138f2:	68fb      	ldr	r3, [r7, #12]
}
 80138f4:	4618      	mov	r0, r3
 80138f6:	3710      	adds	r7, #16
 80138f8:	46bd      	mov	sp, r7
 80138fa:	bd80      	pop	{r7, pc}

080138fc <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80138fc:	b480      	push	{r7}
 80138fe:	b085      	sub	sp, #20
 8013900:	af00      	add	r7, sp, #0
 8013902:	6078      	str	r0, [r7, #4]
 8013904:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8013906:	687b      	ldr	r3, [r7, #4]
 8013908:	2b00      	cmp	r3, #0
 801390a:	d01e      	beq.n	801394a <udp_netif_ip_addr_changed+0x4e>
 801390c:	687b      	ldr	r3, [r7, #4]
 801390e:	681b      	ldr	r3, [r3, #0]
 8013910:	2b00      	cmp	r3, #0
 8013912:	d01a      	beq.n	801394a <udp_netif_ip_addr_changed+0x4e>
 8013914:	683b      	ldr	r3, [r7, #0]
 8013916:	2b00      	cmp	r3, #0
 8013918:	d017      	beq.n	801394a <udp_netif_ip_addr_changed+0x4e>
 801391a:	683b      	ldr	r3, [r7, #0]
 801391c:	681b      	ldr	r3, [r3, #0]
 801391e:	2b00      	cmp	r3, #0
 8013920:	d013      	beq.n	801394a <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8013922:	4b0d      	ldr	r3, [pc, #52]	; (8013958 <udp_netif_ip_addr_changed+0x5c>)
 8013924:	681b      	ldr	r3, [r3, #0]
 8013926:	60fb      	str	r3, [r7, #12]
 8013928:	e00c      	b.n	8013944 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 801392a:	68fb      	ldr	r3, [r7, #12]
 801392c:	681a      	ldr	r2, [r3, #0]
 801392e:	687b      	ldr	r3, [r7, #4]
 8013930:	681b      	ldr	r3, [r3, #0]
 8013932:	429a      	cmp	r2, r3
 8013934:	d103      	bne.n	801393e <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8013936:	683b      	ldr	r3, [r7, #0]
 8013938:	681a      	ldr	r2, [r3, #0]
 801393a:	68fb      	ldr	r3, [r7, #12]
 801393c:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801393e:	68fb      	ldr	r3, [r7, #12]
 8013940:	68db      	ldr	r3, [r3, #12]
 8013942:	60fb      	str	r3, [r7, #12]
 8013944:	68fb      	ldr	r3, [r7, #12]
 8013946:	2b00      	cmp	r3, #0
 8013948:	d1ef      	bne.n	801392a <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 801394a:	bf00      	nop
 801394c:	3714      	adds	r7, #20
 801394e:	46bd      	mov	sp, r7
 8013950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013954:	4770      	bx	lr
 8013956:	bf00      	nop
 8013958:	20010dd4 	.word	0x20010dd4

0801395c <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 801395c:	b580      	push	{r7, lr}
 801395e:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 8013960:	4b20      	ldr	r3, [pc, #128]	; (80139e4 <dhcp_inc_pcb_refcount+0x88>)
 8013962:	781b      	ldrb	r3, [r3, #0]
 8013964:	2b00      	cmp	r3, #0
 8013966:	d133      	bne.n	80139d0 <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 8013968:	4b1f      	ldr	r3, [pc, #124]	; (80139e8 <dhcp_inc_pcb_refcount+0x8c>)
 801396a:	681b      	ldr	r3, [r3, #0]
 801396c:	2b00      	cmp	r3, #0
 801396e:	d005      	beq.n	801397c <dhcp_inc_pcb_refcount+0x20>
 8013970:	4b1e      	ldr	r3, [pc, #120]	; (80139ec <dhcp_inc_pcb_refcount+0x90>)
 8013972:	22e5      	movs	r2, #229	; 0xe5
 8013974:	491e      	ldr	r1, [pc, #120]	; (80139f0 <dhcp_inc_pcb_refcount+0x94>)
 8013976:	481f      	ldr	r0, [pc, #124]	; (80139f4 <dhcp_inc_pcb_refcount+0x98>)
 8013978:	f004 fd24 	bl	80183c4 <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 801397c:	f7ff ff9a 	bl	80138b4 <udp_new>
 8013980:	4603      	mov	r3, r0
 8013982:	4a19      	ldr	r2, [pc, #100]	; (80139e8 <dhcp_inc_pcb_refcount+0x8c>)
 8013984:	6013      	str	r3, [r2, #0]

    if (dhcp_pcb == NULL) {
 8013986:	4b18      	ldr	r3, [pc, #96]	; (80139e8 <dhcp_inc_pcb_refcount+0x8c>)
 8013988:	681b      	ldr	r3, [r3, #0]
 801398a:	2b00      	cmp	r3, #0
 801398c:	d102      	bne.n	8013994 <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 801398e:	f04f 33ff 	mov.w	r3, #4294967295
 8013992:	e024      	b.n	80139de <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 8013994:	4b14      	ldr	r3, [pc, #80]	; (80139e8 <dhcp_inc_pcb_refcount+0x8c>)
 8013996:	681b      	ldr	r3, [r3, #0]
 8013998:	7a5a      	ldrb	r2, [r3, #9]
 801399a:	4b13      	ldr	r3, [pc, #76]	; (80139e8 <dhcp_inc_pcb_refcount+0x8c>)
 801399c:	681b      	ldr	r3, [r3, #0]
 801399e:	f042 0220 	orr.w	r2, r2, #32
 80139a2:	b2d2      	uxtb	r2, r2
 80139a4:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 80139a6:	4b10      	ldr	r3, [pc, #64]	; (80139e8 <dhcp_inc_pcb_refcount+0x8c>)
 80139a8:	681b      	ldr	r3, [r3, #0]
 80139aa:	2244      	movs	r2, #68	; 0x44
 80139ac:	4912      	ldr	r1, [pc, #72]	; (80139f8 <dhcp_inc_pcb_refcount+0x9c>)
 80139ae:	4618      	mov	r0, r3
 80139b0:	f7ff fe28 	bl	8013604 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 80139b4:	4b0c      	ldr	r3, [pc, #48]	; (80139e8 <dhcp_inc_pcb_refcount+0x8c>)
 80139b6:	681b      	ldr	r3, [r3, #0]
 80139b8:	2243      	movs	r2, #67	; 0x43
 80139ba:	490f      	ldr	r1, [pc, #60]	; (80139f8 <dhcp_inc_pcb_refcount+0x9c>)
 80139bc:	4618      	mov	r0, r3
 80139be:	f7ff fea9 	bl	8013714 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 80139c2:	4b09      	ldr	r3, [pc, #36]	; (80139e8 <dhcp_inc_pcb_refcount+0x8c>)
 80139c4:	681b      	ldr	r3, [r3, #0]
 80139c6:	2200      	movs	r2, #0
 80139c8:	490c      	ldr	r1, [pc, #48]	; (80139fc <dhcp_inc_pcb_refcount+0xa0>)
 80139ca:	4618      	mov	r0, r3
 80139cc:	f7ff ff10 	bl	80137f0 <udp_recv>
  }

  dhcp_pcb_refcount++;
 80139d0:	4b04      	ldr	r3, [pc, #16]	; (80139e4 <dhcp_inc_pcb_refcount+0x88>)
 80139d2:	781b      	ldrb	r3, [r3, #0]
 80139d4:	3301      	adds	r3, #1
 80139d6:	b2da      	uxtb	r2, r3
 80139d8:	4b02      	ldr	r3, [pc, #8]	; (80139e4 <dhcp_inc_pcb_refcount+0x88>)
 80139da:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 80139dc:	2300      	movs	r3, #0
}
 80139de:	4618      	mov	r0, r3
 80139e0:	bd80      	pop	{r7, pc}
 80139e2:	bf00      	nop
 80139e4:	20010e04 	.word	0x20010e04
 80139e8:	20010e00 	.word	0x20010e00
 80139ec:	0801c37c 	.word	0x0801c37c
 80139f0:	0801c3b4 	.word	0x0801c3b4
 80139f4:	0801c3dc 	.word	0x0801c3dc
 80139f8:	08027060 	.word	0x08027060
 80139fc:	08015291 	.word	0x08015291

08013a00 <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 8013a00:	b580      	push	{r7, lr}
 8013a02:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 8013a04:	4b0e      	ldr	r3, [pc, #56]	; (8013a40 <dhcp_dec_pcb_refcount+0x40>)
 8013a06:	781b      	ldrb	r3, [r3, #0]
 8013a08:	2b00      	cmp	r3, #0
 8013a0a:	d105      	bne.n	8013a18 <dhcp_dec_pcb_refcount+0x18>
 8013a0c:	4b0d      	ldr	r3, [pc, #52]	; (8013a44 <dhcp_dec_pcb_refcount+0x44>)
 8013a0e:	22ff      	movs	r2, #255	; 0xff
 8013a10:	490d      	ldr	r1, [pc, #52]	; (8013a48 <dhcp_dec_pcb_refcount+0x48>)
 8013a12:	480e      	ldr	r0, [pc, #56]	; (8013a4c <dhcp_dec_pcb_refcount+0x4c>)
 8013a14:	f004 fcd6 	bl	80183c4 <iprintf>
  dhcp_pcb_refcount--;
 8013a18:	4b09      	ldr	r3, [pc, #36]	; (8013a40 <dhcp_dec_pcb_refcount+0x40>)
 8013a1a:	781b      	ldrb	r3, [r3, #0]
 8013a1c:	3b01      	subs	r3, #1
 8013a1e:	b2da      	uxtb	r2, r3
 8013a20:	4b07      	ldr	r3, [pc, #28]	; (8013a40 <dhcp_dec_pcb_refcount+0x40>)
 8013a22:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 8013a24:	4b06      	ldr	r3, [pc, #24]	; (8013a40 <dhcp_dec_pcb_refcount+0x40>)
 8013a26:	781b      	ldrb	r3, [r3, #0]
 8013a28:	2b00      	cmp	r3, #0
 8013a2a:	d107      	bne.n	8013a3c <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 8013a2c:	4b08      	ldr	r3, [pc, #32]	; (8013a50 <dhcp_dec_pcb_refcount+0x50>)
 8013a2e:	681b      	ldr	r3, [r3, #0]
 8013a30:	4618      	mov	r0, r3
 8013a32:	f7ff fefd 	bl	8013830 <udp_remove>
    dhcp_pcb = NULL;
 8013a36:	4b06      	ldr	r3, [pc, #24]	; (8013a50 <dhcp_dec_pcb_refcount+0x50>)
 8013a38:	2200      	movs	r2, #0
 8013a3a:	601a      	str	r2, [r3, #0]
  }
}
 8013a3c:	bf00      	nop
 8013a3e:	bd80      	pop	{r7, pc}
 8013a40:	20010e04 	.word	0x20010e04
 8013a44:	0801c37c 	.word	0x0801c37c
 8013a48:	0801c404 	.word	0x0801c404
 8013a4c:	0801c3dc 	.word	0x0801c3dc
 8013a50:	20010e00 	.word	0x20010e00

08013a54 <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 8013a54:	b580      	push	{r7, lr}
 8013a56:	b084      	sub	sp, #16
 8013a58:	af00      	add	r7, sp, #0
 8013a5a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013a5c:	687b      	ldr	r3, [r7, #4]
 8013a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013a60:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8013a62:	210c      	movs	r1, #12
 8013a64:	68f8      	ldr	r0, [r7, #12]
 8013a66:	f001 f855 	bl	8014b14 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8013a6a:	4b06      	ldr	r3, [pc, #24]	; (8013a84 <dhcp_handle_nak+0x30>)
 8013a6c:	4a05      	ldr	r2, [pc, #20]	; (8013a84 <dhcp_handle_nak+0x30>)
 8013a6e:	4905      	ldr	r1, [pc, #20]	; (8013a84 <dhcp_handle_nak+0x30>)
 8013a70:	6878      	ldr	r0, [r7, #4]
 8013a72:	f7f8 f8c3 	bl	800bbfc <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 8013a76:	6878      	ldr	r0, [r7, #4]
 8013a78:	f000 fc48 	bl	801430c <dhcp_discover>
}
 8013a7c:	bf00      	nop
 8013a7e:	3710      	adds	r7, #16
 8013a80:	46bd      	mov	sp, r7
 8013a82:	bd80      	pop	{r7, pc}
 8013a84:	08027060 	.word	0x08027060

08013a88 <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 8013a88:	b580      	push	{r7, lr}
 8013a8a:	b084      	sub	sp, #16
 8013a8c:	af00      	add	r7, sp, #0
 8013a8e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013a90:	687b      	ldr	r3, [r7, #4]
 8013a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013a94:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 8013a96:	2108      	movs	r1, #8
 8013a98:	68f8      	ldr	r0, [r7, #12]
 8013a9a:	f001 f83b 	bl	8014b14 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 8013a9e:	68fb      	ldr	r3, [r7, #12]
 8013aa0:	331c      	adds	r3, #28
 8013aa2:	2200      	movs	r2, #0
 8013aa4:	4619      	mov	r1, r3
 8013aa6:	6878      	ldr	r0, [r7, #4]
 8013aa8:	f002 fb3c 	bl	8016124 <etharp_query>
 8013aac:	4603      	mov	r3, r0
 8013aae:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 8013ab0:	68fb      	ldr	r3, [r7, #12]
 8013ab2:	799b      	ldrb	r3, [r3, #6]
 8013ab4:	2bff      	cmp	r3, #255	; 0xff
 8013ab6:	d005      	beq.n	8013ac4 <dhcp_check+0x3c>
    dhcp->tries++;
 8013ab8:	68fb      	ldr	r3, [r7, #12]
 8013aba:	799b      	ldrb	r3, [r3, #6]
 8013abc:	3301      	adds	r3, #1
 8013abe:	b2da      	uxtb	r2, r3
 8013ac0:	68fb      	ldr	r3, [r7, #12]
 8013ac2:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 8013ac4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8013ac8:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8013aca:	893b      	ldrh	r3, [r7, #8]
 8013acc:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8013ad0:	4a06      	ldr	r2, [pc, #24]	; (8013aec <dhcp_check+0x64>)
 8013ad2:	fb82 1203 	smull	r1, r2, r2, r3
 8013ad6:	1152      	asrs	r2, r2, #5
 8013ad8:	17db      	asrs	r3, r3, #31
 8013ada:	1ad3      	subs	r3, r2, r3
 8013adc:	b29a      	uxth	r2, r3
 8013ade:	68fb      	ldr	r3, [r7, #12]
 8013ae0:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 8013ae2:	bf00      	nop
 8013ae4:	3710      	adds	r7, #16
 8013ae6:	46bd      	mov	sp, r7
 8013ae8:	bd80      	pop	{r7, pc}
 8013aea:	bf00      	nop
 8013aec:	10624dd3 	.word	0x10624dd3

08013af0 <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 8013af0:	b580      	push	{r7, lr}
 8013af2:	b084      	sub	sp, #16
 8013af4:	af00      	add	r7, sp, #0
 8013af6:	6078      	str	r0, [r7, #4]
 8013af8:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013afa:	687b      	ldr	r3, [r7, #4]
 8013afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013afe:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 8013b00:	4b0c      	ldr	r3, [pc, #48]	; (8013b34 <dhcp_handle_offer+0x44>)
 8013b02:	789b      	ldrb	r3, [r3, #2]
 8013b04:	2b00      	cmp	r3, #0
 8013b06:	d011      	beq.n	8013b2c <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 8013b08:	68fb      	ldr	r3, [r7, #12]
 8013b0a:	2200      	movs	r2, #0
 8013b0c:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 8013b0e:	4b0a      	ldr	r3, [pc, #40]	; (8013b38 <dhcp_handle_offer+0x48>)
 8013b10:	689b      	ldr	r3, [r3, #8]
 8013b12:	4618      	mov	r0, r3
 8013b14:	f7f7 f961 	bl	800adda <lwip_htonl>
 8013b18:	4602      	mov	r2, r0
 8013b1a:	68fb      	ldr	r3, [r7, #12]
 8013b1c:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8013b1e:	683b      	ldr	r3, [r7, #0]
 8013b20:	691a      	ldr	r2, [r3, #16]
 8013b22:	68fb      	ldr	r3, [r7, #12]
 8013b24:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 8013b26:	6878      	ldr	r0, [r7, #4]
 8013b28:	f000 f808 	bl	8013b3c <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 8013b2c:	bf00      	nop
 8013b2e:	3710      	adds	r7, #16
 8013b30:	46bd      	mov	sp, r7
 8013b32:	bd80      	pop	{r7, pc}
 8013b34:	20010df8 	.word	0x20010df8
 8013b38:	20010dd8 	.word	0x20010dd8

08013b3c <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 8013b3c:	b5b0      	push	{r4, r5, r7, lr}
 8013b3e:	b08a      	sub	sp, #40	; 0x28
 8013b40:	af02      	add	r7, sp, #8
 8013b42:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 8013b44:	687b      	ldr	r3, [r7, #4]
 8013b46:	2b00      	cmp	r3, #0
 8013b48:	d109      	bne.n	8013b5e <dhcp_select+0x22>
 8013b4a:	4b71      	ldr	r3, [pc, #452]	; (8013d10 <dhcp_select+0x1d4>)
 8013b4c:	f240 1277 	movw	r2, #375	; 0x177
 8013b50:	4970      	ldr	r1, [pc, #448]	; (8013d14 <dhcp_select+0x1d8>)
 8013b52:	4871      	ldr	r0, [pc, #452]	; (8013d18 <dhcp_select+0x1dc>)
 8013b54:	f004 fc36 	bl	80183c4 <iprintf>
 8013b58:	f06f 030f 	mvn.w	r3, #15
 8013b5c:	e0d3      	b.n	8013d06 <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 8013b5e:	687b      	ldr	r3, [r7, #4]
 8013b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013b62:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 8013b64:	69bb      	ldr	r3, [r7, #24]
 8013b66:	2b00      	cmp	r3, #0
 8013b68:	d109      	bne.n	8013b7e <dhcp_select+0x42>
 8013b6a:	4b69      	ldr	r3, [pc, #420]	; (8013d10 <dhcp_select+0x1d4>)
 8013b6c:	f240 1279 	movw	r2, #377	; 0x179
 8013b70:	496a      	ldr	r1, [pc, #424]	; (8013d1c <dhcp_select+0x1e0>)
 8013b72:	4869      	ldr	r0, [pc, #420]	; (8013d18 <dhcp_select+0x1dc>)
 8013b74:	f004 fc26 	bl	80183c4 <iprintf>
 8013b78:	f06f 0305 	mvn.w	r3, #5
 8013b7c:	e0c3      	b.n	8013d06 <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 8013b7e:	2101      	movs	r1, #1
 8013b80:	69b8      	ldr	r0, [r7, #24]
 8013b82:	f000 ffc7 	bl	8014b14 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8013b86:	f107 030c 	add.w	r3, r7, #12
 8013b8a:	2203      	movs	r2, #3
 8013b8c:	69b9      	ldr	r1, [r7, #24]
 8013b8e:	6878      	ldr	r0, [r7, #4]
 8013b90:	f001 fc4c 	bl	801542c <dhcp_create_msg>
 8013b94:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8013b96:	697b      	ldr	r3, [r7, #20]
 8013b98:	2b00      	cmp	r3, #0
 8013b9a:	f000 8085 	beq.w	8013ca8 <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8013b9e:	697b      	ldr	r3, [r7, #20]
 8013ba0:	685b      	ldr	r3, [r3, #4]
 8013ba2:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8013ba4:	89b8      	ldrh	r0, [r7, #12]
 8013ba6:	693b      	ldr	r3, [r7, #16]
 8013ba8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013bac:	2302      	movs	r3, #2
 8013bae:	2239      	movs	r2, #57	; 0x39
 8013bb0:	f000 ffca 	bl	8014b48 <dhcp_option>
 8013bb4:	4603      	mov	r3, r0
 8013bb6:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8013bb8:	89b8      	ldrh	r0, [r7, #12]
 8013bba:	693b      	ldr	r3, [r7, #16]
 8013bbc:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013bc0:	687b      	ldr	r3, [r7, #4]
 8013bc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013bc4:	461a      	mov	r2, r3
 8013bc6:	f001 f819 	bl	8014bfc <dhcp_option_short>
 8013bca:	4603      	mov	r3, r0
 8013bcc:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8013bce:	89b8      	ldrh	r0, [r7, #12]
 8013bd0:	693b      	ldr	r3, [r7, #16]
 8013bd2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013bd6:	2304      	movs	r3, #4
 8013bd8:	2232      	movs	r2, #50	; 0x32
 8013bda:	f000 ffb5 	bl	8014b48 <dhcp_option>
 8013bde:	4603      	mov	r3, r0
 8013be0:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8013be2:	89bc      	ldrh	r4, [r7, #12]
 8013be4:	693b      	ldr	r3, [r7, #16]
 8013be6:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8013bea:	69bb      	ldr	r3, [r7, #24]
 8013bec:	69db      	ldr	r3, [r3, #28]
 8013bee:	4618      	mov	r0, r3
 8013bf0:	f7f7 f8f3 	bl	800adda <lwip_htonl>
 8013bf4:	4603      	mov	r3, r0
 8013bf6:	461a      	mov	r2, r3
 8013bf8:	4629      	mov	r1, r5
 8013bfa:	4620      	mov	r0, r4
 8013bfc:	f001 f830 	bl	8014c60 <dhcp_option_long>
 8013c00:	4603      	mov	r3, r0
 8013c02:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8013c04:	89b8      	ldrh	r0, [r7, #12]
 8013c06:	693b      	ldr	r3, [r7, #16]
 8013c08:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013c0c:	2304      	movs	r3, #4
 8013c0e:	2236      	movs	r2, #54	; 0x36
 8013c10:	f000 ff9a 	bl	8014b48 <dhcp_option>
 8013c14:	4603      	mov	r3, r0
 8013c16:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 8013c18:	89bc      	ldrh	r4, [r7, #12]
 8013c1a:	693b      	ldr	r3, [r7, #16]
 8013c1c:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8013c20:	69bb      	ldr	r3, [r7, #24]
 8013c22:	699b      	ldr	r3, [r3, #24]
 8013c24:	4618      	mov	r0, r3
 8013c26:	f7f7 f8d8 	bl	800adda <lwip_htonl>
 8013c2a:	4603      	mov	r3, r0
 8013c2c:	461a      	mov	r2, r3
 8013c2e:	4629      	mov	r1, r5
 8013c30:	4620      	mov	r0, r4
 8013c32:	f001 f815 	bl	8014c60 <dhcp_option_long>
 8013c36:	4603      	mov	r3, r0
 8013c38:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8013c3a:	89b8      	ldrh	r0, [r7, #12]
 8013c3c:	693b      	ldr	r3, [r7, #16]
 8013c3e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013c42:	2303      	movs	r3, #3
 8013c44:	2237      	movs	r2, #55	; 0x37
 8013c46:	f000 ff7f 	bl	8014b48 <dhcp_option>
 8013c4a:	4603      	mov	r3, r0
 8013c4c:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8013c4e:	2300      	movs	r3, #0
 8013c50:	77bb      	strb	r3, [r7, #30]
 8013c52:	e00e      	b.n	8013c72 <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8013c54:	89b8      	ldrh	r0, [r7, #12]
 8013c56:	693b      	ldr	r3, [r7, #16]
 8013c58:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013c5c:	7fbb      	ldrb	r3, [r7, #30]
 8013c5e:	4a30      	ldr	r2, [pc, #192]	; (8013d20 <dhcp_select+0x1e4>)
 8013c60:	5cd3      	ldrb	r3, [r2, r3]
 8013c62:	461a      	mov	r2, r3
 8013c64:	f000 ffa4 	bl	8014bb0 <dhcp_option_byte>
 8013c68:	4603      	mov	r3, r0
 8013c6a:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8013c6c:	7fbb      	ldrb	r3, [r7, #30]
 8013c6e:	3301      	adds	r3, #1
 8013c70:	77bb      	strb	r3, [r7, #30]
 8013c72:	7fbb      	ldrb	r3, [r7, #30]
 8013c74:	2b02      	cmp	r3, #2
 8013c76:	d9ed      	bls.n	8013c54 <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8013c78:	89b8      	ldrh	r0, [r7, #12]
 8013c7a:	693b      	ldr	r3, [r7, #16]
 8013c7c:	33f0      	adds	r3, #240	; 0xf0
 8013c7e:	697a      	ldr	r2, [r7, #20]
 8013c80:	4619      	mov	r1, r3
 8013c82:	f001 fca9 	bl	80155d8 <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8013c86:	4b27      	ldr	r3, [pc, #156]	; (8013d24 <dhcp_select+0x1e8>)
 8013c88:	6818      	ldr	r0, [r3, #0]
 8013c8a:	4b27      	ldr	r3, [pc, #156]	; (8013d28 <dhcp_select+0x1ec>)
 8013c8c:	9301      	str	r3, [sp, #4]
 8013c8e:	687b      	ldr	r3, [r7, #4]
 8013c90:	9300      	str	r3, [sp, #0]
 8013c92:	2343      	movs	r3, #67	; 0x43
 8013c94:	4a25      	ldr	r2, [pc, #148]	; (8013d2c <dhcp_select+0x1f0>)
 8013c96:	6979      	ldr	r1, [r7, #20]
 8013c98:	f7ff fbce 	bl	8013438 <udp_sendto_if_src>
 8013c9c:	4603      	mov	r3, r0
 8013c9e:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8013ca0:	6978      	ldr	r0, [r7, #20]
 8013ca2:	f7f8 fcb9 	bl	800c618 <pbuf_free>
 8013ca6:	e001      	b.n	8013cac <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8013ca8:	23ff      	movs	r3, #255	; 0xff
 8013caa:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8013cac:	69bb      	ldr	r3, [r7, #24]
 8013cae:	799b      	ldrb	r3, [r3, #6]
 8013cb0:	2bff      	cmp	r3, #255	; 0xff
 8013cb2:	d005      	beq.n	8013cc0 <dhcp_select+0x184>
    dhcp->tries++;
 8013cb4:	69bb      	ldr	r3, [r7, #24]
 8013cb6:	799b      	ldrb	r3, [r3, #6]
 8013cb8:	3301      	adds	r3, #1
 8013cba:	b2da      	uxtb	r2, r3
 8013cbc:	69bb      	ldr	r3, [r7, #24]
 8013cbe:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8013cc0:	69bb      	ldr	r3, [r7, #24]
 8013cc2:	799b      	ldrb	r3, [r3, #6]
 8013cc4:	2b05      	cmp	r3, #5
 8013cc6:	d80d      	bhi.n	8013ce4 <dhcp_select+0x1a8>
 8013cc8:	69bb      	ldr	r3, [r7, #24]
 8013cca:	799b      	ldrb	r3, [r3, #6]
 8013ccc:	461a      	mov	r2, r3
 8013cce:	2301      	movs	r3, #1
 8013cd0:	4093      	lsls	r3, r2
 8013cd2:	b29b      	uxth	r3, r3
 8013cd4:	461a      	mov	r2, r3
 8013cd6:	0152      	lsls	r2, r2, #5
 8013cd8:	1ad2      	subs	r2, r2, r3
 8013cda:	0092      	lsls	r2, r2, #2
 8013cdc:	4413      	add	r3, r2
 8013cde:	00db      	lsls	r3, r3, #3
 8013ce0:	b29b      	uxth	r3, r3
 8013ce2:	e001      	b.n	8013ce8 <dhcp_select+0x1ac>
 8013ce4:	f64e 2360 	movw	r3, #60000	; 0xea60
 8013ce8:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8013cea:	89fb      	ldrh	r3, [r7, #14]
 8013cec:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8013cf0:	4a0f      	ldr	r2, [pc, #60]	; (8013d30 <dhcp_select+0x1f4>)
 8013cf2:	fb82 1203 	smull	r1, r2, r2, r3
 8013cf6:	1152      	asrs	r2, r2, #5
 8013cf8:	17db      	asrs	r3, r3, #31
 8013cfa:	1ad3      	subs	r3, r2, r3
 8013cfc:	b29a      	uxth	r2, r3
 8013cfe:	69bb      	ldr	r3, [r7, #24]
 8013d00:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8013d02:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8013d06:	4618      	mov	r0, r3
 8013d08:	3720      	adds	r7, #32
 8013d0a:	46bd      	mov	sp, r7
 8013d0c:	bdb0      	pop	{r4, r5, r7, pc}
 8013d0e:	bf00      	nop
 8013d10:	0801c37c 	.word	0x0801c37c
 8013d14:	0801c428 	.word	0x0801c428
 8013d18:	0801c3dc 	.word	0x0801c3dc
 8013d1c:	0801c444 	.word	0x0801c444
 8013d20:	20000030 	.word	0x20000030
 8013d24:	20010e00 	.word	0x20010e00
 8013d28:	08027060 	.word	0x08027060
 8013d2c:	08027064 	.word	0x08027064
 8013d30:	10624dd3 	.word	0x10624dd3

08013d34 <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 8013d34:	b580      	push	{r7, lr}
 8013d36:	b082      	sub	sp, #8
 8013d38:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 8013d3a:	4b27      	ldr	r3, [pc, #156]	; (8013dd8 <dhcp_coarse_tmr+0xa4>)
 8013d3c:	681b      	ldr	r3, [r3, #0]
 8013d3e:	607b      	str	r3, [r7, #4]
 8013d40:	e042      	b.n	8013dc8 <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8013d42:	687b      	ldr	r3, [r7, #4]
 8013d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013d46:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 8013d48:	683b      	ldr	r3, [r7, #0]
 8013d4a:	2b00      	cmp	r3, #0
 8013d4c:	d039      	beq.n	8013dc2 <dhcp_coarse_tmr+0x8e>
 8013d4e:	683b      	ldr	r3, [r7, #0]
 8013d50:	795b      	ldrb	r3, [r3, #5]
 8013d52:	2b00      	cmp	r3, #0
 8013d54:	d035      	beq.n	8013dc2 <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 8013d56:	683b      	ldr	r3, [r7, #0]
 8013d58:	8a9b      	ldrh	r3, [r3, #20]
 8013d5a:	2b00      	cmp	r3, #0
 8013d5c:	d012      	beq.n	8013d84 <dhcp_coarse_tmr+0x50>
 8013d5e:	683b      	ldr	r3, [r7, #0]
 8013d60:	8a5b      	ldrh	r3, [r3, #18]
 8013d62:	3301      	adds	r3, #1
 8013d64:	b29a      	uxth	r2, r3
 8013d66:	683b      	ldr	r3, [r7, #0]
 8013d68:	825a      	strh	r2, [r3, #18]
 8013d6a:	683b      	ldr	r3, [r7, #0]
 8013d6c:	8a5a      	ldrh	r2, [r3, #18]
 8013d6e:	683b      	ldr	r3, [r7, #0]
 8013d70:	8a9b      	ldrh	r3, [r3, #20]
 8013d72:	429a      	cmp	r2, r3
 8013d74:	d106      	bne.n	8013d84 <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 8013d76:	6878      	ldr	r0, [r7, #4]
 8013d78:	f000 fe32 	bl	80149e0 <dhcp_release_and_stop>
        dhcp_start(netif);
 8013d7c:	6878      	ldr	r0, [r7, #4]
 8013d7e:	f000 f969 	bl	8014054 <dhcp_start>
 8013d82:	e01e      	b.n	8013dc2 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 8013d84:	683b      	ldr	r3, [r7, #0]
 8013d86:	8a1b      	ldrh	r3, [r3, #16]
 8013d88:	2b00      	cmp	r3, #0
 8013d8a:	d00b      	beq.n	8013da4 <dhcp_coarse_tmr+0x70>
 8013d8c:	683b      	ldr	r3, [r7, #0]
 8013d8e:	8a1b      	ldrh	r3, [r3, #16]
 8013d90:	1e5a      	subs	r2, r3, #1
 8013d92:	b291      	uxth	r1, r2
 8013d94:	683a      	ldr	r2, [r7, #0]
 8013d96:	8211      	strh	r1, [r2, #16]
 8013d98:	2b01      	cmp	r3, #1
 8013d9a:	d103      	bne.n	8013da4 <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 8013d9c:	6878      	ldr	r0, [r7, #4]
 8013d9e:	f000 f8c6 	bl	8013f2e <dhcp_t2_timeout>
 8013da2:	e00e      	b.n	8013dc2 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 8013da4:	683b      	ldr	r3, [r7, #0]
 8013da6:	89db      	ldrh	r3, [r3, #14]
 8013da8:	2b00      	cmp	r3, #0
 8013daa:	d00a      	beq.n	8013dc2 <dhcp_coarse_tmr+0x8e>
 8013dac:	683b      	ldr	r3, [r7, #0]
 8013dae:	89db      	ldrh	r3, [r3, #14]
 8013db0:	1e5a      	subs	r2, r3, #1
 8013db2:	b291      	uxth	r1, r2
 8013db4:	683a      	ldr	r2, [r7, #0]
 8013db6:	81d1      	strh	r1, [r2, #14]
 8013db8:	2b01      	cmp	r3, #1
 8013dba:	d102      	bne.n	8013dc2 <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 8013dbc:	6878      	ldr	r0, [r7, #4]
 8013dbe:	f000 f888 	bl	8013ed2 <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 8013dc2:	687b      	ldr	r3, [r7, #4]
 8013dc4:	681b      	ldr	r3, [r3, #0]
 8013dc6:	607b      	str	r3, [r7, #4]
 8013dc8:	687b      	ldr	r3, [r7, #4]
 8013dca:	2b00      	cmp	r3, #0
 8013dcc:	d1b9      	bne.n	8013d42 <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 8013dce:	bf00      	nop
 8013dd0:	bf00      	nop
 8013dd2:	3708      	adds	r7, #8
 8013dd4:	46bd      	mov	sp, r7
 8013dd6:	bd80      	pop	{r7, pc}
 8013dd8:	20010d6c 	.word	0x20010d6c

08013ddc <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 8013ddc:	b580      	push	{r7, lr}
 8013dde:	b082      	sub	sp, #8
 8013de0:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 8013de2:	4b16      	ldr	r3, [pc, #88]	; (8013e3c <dhcp_fine_tmr+0x60>)
 8013de4:	681b      	ldr	r3, [r3, #0]
 8013de6:	607b      	str	r3, [r7, #4]
 8013de8:	e020      	b.n	8013e2c <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8013dea:	687b      	ldr	r3, [r7, #4]
 8013dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013dee:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 8013df0:	683b      	ldr	r3, [r7, #0]
 8013df2:	2b00      	cmp	r3, #0
 8013df4:	d017      	beq.n	8013e26 <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 8013df6:	683b      	ldr	r3, [r7, #0]
 8013df8:	891b      	ldrh	r3, [r3, #8]
 8013dfa:	2b01      	cmp	r3, #1
 8013dfc:	d906      	bls.n	8013e0c <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 8013dfe:	683b      	ldr	r3, [r7, #0]
 8013e00:	891b      	ldrh	r3, [r3, #8]
 8013e02:	3b01      	subs	r3, #1
 8013e04:	b29a      	uxth	r2, r3
 8013e06:	683b      	ldr	r3, [r7, #0]
 8013e08:	811a      	strh	r2, [r3, #8]
 8013e0a:	e00c      	b.n	8013e26 <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 8013e0c:	683b      	ldr	r3, [r7, #0]
 8013e0e:	891b      	ldrh	r3, [r3, #8]
 8013e10:	2b01      	cmp	r3, #1
 8013e12:	d108      	bne.n	8013e26 <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 8013e14:	683b      	ldr	r3, [r7, #0]
 8013e16:	891b      	ldrh	r3, [r3, #8]
 8013e18:	3b01      	subs	r3, #1
 8013e1a:	b29a      	uxth	r2, r3
 8013e1c:	683b      	ldr	r3, [r7, #0]
 8013e1e:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 8013e20:	6878      	ldr	r0, [r7, #4]
 8013e22:	f000 f80d 	bl	8013e40 <dhcp_timeout>
  NETIF_FOREACH(netif) {
 8013e26:	687b      	ldr	r3, [r7, #4]
 8013e28:	681b      	ldr	r3, [r3, #0]
 8013e2a:	607b      	str	r3, [r7, #4]
 8013e2c:	687b      	ldr	r3, [r7, #4]
 8013e2e:	2b00      	cmp	r3, #0
 8013e30:	d1db      	bne.n	8013dea <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 8013e32:	bf00      	nop
 8013e34:	bf00      	nop
 8013e36:	3708      	adds	r7, #8
 8013e38:	46bd      	mov	sp, r7
 8013e3a:	bd80      	pop	{r7, pc}
 8013e3c:	20010d6c 	.word	0x20010d6c

08013e40 <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 8013e40:	b580      	push	{r7, lr}
 8013e42:	b084      	sub	sp, #16
 8013e44:	af00      	add	r7, sp, #0
 8013e46:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013e48:	687b      	ldr	r3, [r7, #4]
 8013e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013e4c:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 8013e4e:	68fb      	ldr	r3, [r7, #12]
 8013e50:	795b      	ldrb	r3, [r3, #5]
 8013e52:	2b0c      	cmp	r3, #12
 8013e54:	d003      	beq.n	8013e5e <dhcp_timeout+0x1e>
 8013e56:	68fb      	ldr	r3, [r7, #12]
 8013e58:	795b      	ldrb	r3, [r3, #5]
 8013e5a:	2b06      	cmp	r3, #6
 8013e5c:	d103      	bne.n	8013e66 <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 8013e5e:	6878      	ldr	r0, [r7, #4]
 8013e60:	f000 fa54 	bl	801430c <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 8013e64:	e031      	b.n	8013eca <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 8013e66:	68fb      	ldr	r3, [r7, #12]
 8013e68:	795b      	ldrb	r3, [r3, #5]
 8013e6a:	2b01      	cmp	r3, #1
 8013e6c:	d10e      	bne.n	8013e8c <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 8013e6e:	68fb      	ldr	r3, [r7, #12]
 8013e70:	799b      	ldrb	r3, [r3, #6]
 8013e72:	2b05      	cmp	r3, #5
 8013e74:	d803      	bhi.n	8013e7e <dhcp_timeout+0x3e>
      dhcp_select(netif);
 8013e76:	6878      	ldr	r0, [r7, #4]
 8013e78:	f7ff fe60 	bl	8013b3c <dhcp_select>
}
 8013e7c:	e025      	b.n	8013eca <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 8013e7e:	6878      	ldr	r0, [r7, #4]
 8013e80:	f000 fdae 	bl	80149e0 <dhcp_release_and_stop>
      dhcp_start(netif);
 8013e84:	6878      	ldr	r0, [r7, #4]
 8013e86:	f000 f8e5 	bl	8014054 <dhcp_start>
}
 8013e8a:	e01e      	b.n	8013eca <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 8013e8c:	68fb      	ldr	r3, [r7, #12]
 8013e8e:	795b      	ldrb	r3, [r3, #5]
 8013e90:	2b08      	cmp	r3, #8
 8013e92:	d10b      	bne.n	8013eac <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 8013e94:	68fb      	ldr	r3, [r7, #12]
 8013e96:	799b      	ldrb	r3, [r3, #6]
 8013e98:	2b01      	cmp	r3, #1
 8013e9a:	d803      	bhi.n	8013ea4 <dhcp_timeout+0x64>
      dhcp_check(netif);
 8013e9c:	6878      	ldr	r0, [r7, #4]
 8013e9e:	f7ff fdf3 	bl	8013a88 <dhcp_check>
}
 8013ea2:	e012      	b.n	8013eca <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 8013ea4:	6878      	ldr	r0, [r7, #4]
 8013ea6:	f000 fad3 	bl	8014450 <dhcp_bind>
}
 8013eaa:	e00e      	b.n	8013eca <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 8013eac:	68fb      	ldr	r3, [r7, #12]
 8013eae:	795b      	ldrb	r3, [r3, #5]
 8013eb0:	2b03      	cmp	r3, #3
 8013eb2:	d10a      	bne.n	8013eca <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 8013eb4:	68fb      	ldr	r3, [r7, #12]
 8013eb6:	799b      	ldrb	r3, [r3, #6]
 8013eb8:	2b01      	cmp	r3, #1
 8013eba:	d803      	bhi.n	8013ec4 <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 8013ebc:	6878      	ldr	r0, [r7, #4]
 8013ebe:	f000 fcd9 	bl	8014874 <dhcp_reboot>
}
 8013ec2:	e002      	b.n	8013eca <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 8013ec4:	6878      	ldr	r0, [r7, #4]
 8013ec6:	f000 fa21 	bl	801430c <dhcp_discover>
}
 8013eca:	bf00      	nop
 8013ecc:	3710      	adds	r7, #16
 8013ece:	46bd      	mov	sp, r7
 8013ed0:	bd80      	pop	{r7, pc}

08013ed2 <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 8013ed2:	b580      	push	{r7, lr}
 8013ed4:	b084      	sub	sp, #16
 8013ed6:	af00      	add	r7, sp, #0
 8013ed8:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013eda:	687b      	ldr	r3, [r7, #4]
 8013edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013ede:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8013ee0:	68fb      	ldr	r3, [r7, #12]
 8013ee2:	795b      	ldrb	r3, [r3, #5]
 8013ee4:	2b01      	cmp	r3, #1
 8013ee6:	d007      	beq.n	8013ef8 <dhcp_t1_timeout+0x26>
 8013ee8:	68fb      	ldr	r3, [r7, #12]
 8013eea:	795b      	ldrb	r3, [r3, #5]
 8013eec:	2b0a      	cmp	r3, #10
 8013eee:	d003      	beq.n	8013ef8 <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 8013ef0:	68fb      	ldr	r3, [r7, #12]
 8013ef2:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8013ef4:	2b05      	cmp	r3, #5
 8013ef6:	d116      	bne.n	8013f26 <dhcp_t1_timeout+0x54>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 8013ef8:	6878      	ldr	r0, [r7, #4]
 8013efa:	f000 fb83 	bl	8014604 <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8013efe:	68fb      	ldr	r3, [r7, #12]
 8013f00:	899b      	ldrh	r3, [r3, #12]
 8013f02:	461a      	mov	r2, r3
 8013f04:	68fb      	ldr	r3, [r7, #12]
 8013f06:	8a5b      	ldrh	r3, [r3, #18]
 8013f08:	1ad3      	subs	r3, r2, r3
 8013f0a:	2b01      	cmp	r3, #1
 8013f0c:	dd0b      	ble.n	8013f26 <dhcp_t1_timeout+0x54>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 8013f0e:	68fb      	ldr	r3, [r7, #12]
 8013f10:	899b      	ldrh	r3, [r3, #12]
 8013f12:	461a      	mov	r2, r3
 8013f14:	68fb      	ldr	r3, [r7, #12]
 8013f16:	8a5b      	ldrh	r3, [r3, #18]
 8013f18:	1ad3      	subs	r3, r2, r3
 8013f1a:	0fda      	lsrs	r2, r3, #31
 8013f1c:	4413      	add	r3, r2
 8013f1e:	105b      	asrs	r3, r3, #1
 8013f20:	b29a      	uxth	r2, r3
 8013f22:	68fb      	ldr	r3, [r7, #12]
 8013f24:	81da      	strh	r2, [r3, #14]
    }
  }
}
 8013f26:	bf00      	nop
 8013f28:	3710      	adds	r7, #16
 8013f2a:	46bd      	mov	sp, r7
 8013f2c:	bd80      	pop	{r7, pc}

08013f2e <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 8013f2e:	b580      	push	{r7, lr}
 8013f30:	b084      	sub	sp, #16
 8013f32:	af00      	add	r7, sp, #0
 8013f34:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013f36:	687b      	ldr	r3, [r7, #4]
 8013f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013f3a:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8013f3c:	68fb      	ldr	r3, [r7, #12]
 8013f3e:	795b      	ldrb	r3, [r3, #5]
 8013f40:	2b01      	cmp	r3, #1
 8013f42:	d00b      	beq.n	8013f5c <dhcp_t2_timeout+0x2e>
 8013f44:	68fb      	ldr	r3, [r7, #12]
 8013f46:	795b      	ldrb	r3, [r3, #5]
 8013f48:	2b0a      	cmp	r3, #10
 8013f4a:	d007      	beq.n	8013f5c <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8013f4c:	68fb      	ldr	r3, [r7, #12]
 8013f4e:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8013f50:	2b05      	cmp	r3, #5
 8013f52:	d003      	beq.n	8013f5c <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8013f54:	68fb      	ldr	r3, [r7, #12]
 8013f56:	795b      	ldrb	r3, [r3, #5]
 8013f58:	2b04      	cmp	r3, #4
 8013f5a:	d116      	bne.n	8013f8a <dhcp_t2_timeout+0x5c>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 8013f5c:	6878      	ldr	r0, [r7, #4]
 8013f5e:	f000 fbed 	bl	801473c <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8013f62:	68fb      	ldr	r3, [r7, #12]
 8013f64:	8a9b      	ldrh	r3, [r3, #20]
 8013f66:	461a      	mov	r2, r3
 8013f68:	68fb      	ldr	r3, [r7, #12]
 8013f6a:	8a5b      	ldrh	r3, [r3, #18]
 8013f6c:	1ad3      	subs	r3, r2, r3
 8013f6e:	2b01      	cmp	r3, #1
 8013f70:	dd0b      	ble.n	8013f8a <dhcp_t2_timeout+0x5c>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 8013f72:	68fb      	ldr	r3, [r7, #12]
 8013f74:	8a9b      	ldrh	r3, [r3, #20]
 8013f76:	461a      	mov	r2, r3
 8013f78:	68fb      	ldr	r3, [r7, #12]
 8013f7a:	8a5b      	ldrh	r3, [r3, #18]
 8013f7c:	1ad3      	subs	r3, r2, r3
 8013f7e:	0fda      	lsrs	r2, r3, #31
 8013f80:	4413      	add	r3, r2
 8013f82:	105b      	asrs	r3, r3, #1
 8013f84:	b29a      	uxth	r2, r3
 8013f86:	68fb      	ldr	r3, [r7, #12]
 8013f88:	821a      	strh	r2, [r3, #16]
    }
  }
}
 8013f8a:	bf00      	nop
 8013f8c:	3710      	adds	r7, #16
 8013f8e:	46bd      	mov	sp, r7
 8013f90:	bd80      	pop	{r7, pc}
	...

08013f94 <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 8013f94:	b580      	push	{r7, lr}
 8013f96:	b084      	sub	sp, #16
 8013f98:	af00      	add	r7, sp, #0
 8013f9a:	6078      	str	r0, [r7, #4]
 8013f9c:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013f9e:	687b      	ldr	r3, [r7, #4]
 8013fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013fa2:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8013fa4:	68fb      	ldr	r3, [r7, #12]
 8013fa6:	2200      	movs	r2, #0
 8013fa8:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8013faa:	68fb      	ldr	r3, [r7, #12]
 8013fac:	2200      	movs	r2, #0
 8013fae:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 8013fb0:	4b26      	ldr	r3, [pc, #152]	; (801404c <dhcp_handle_ack+0xb8>)
 8013fb2:	78db      	ldrb	r3, [r3, #3]
 8013fb4:	2b00      	cmp	r3, #0
 8013fb6:	d003      	beq.n	8013fc0 <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 8013fb8:	4b25      	ldr	r3, [pc, #148]	; (8014050 <dhcp_handle_ack+0xbc>)
 8013fba:	68da      	ldr	r2, [r3, #12]
 8013fbc:	68fb      	ldr	r3, [r7, #12]
 8013fbe:	629a      	str	r2, [r3, #40]	; 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 8013fc0:	4b22      	ldr	r3, [pc, #136]	; (801404c <dhcp_handle_ack+0xb8>)
 8013fc2:	791b      	ldrb	r3, [r3, #4]
 8013fc4:	2b00      	cmp	r3, #0
 8013fc6:	d004      	beq.n	8013fd2 <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 8013fc8:	4b21      	ldr	r3, [pc, #132]	; (8014050 <dhcp_handle_ack+0xbc>)
 8013fca:	691a      	ldr	r2, [r3, #16]
 8013fcc:	68fb      	ldr	r3, [r7, #12]
 8013fce:	62da      	str	r2, [r3, #44]	; 0x2c
 8013fd0:	e004      	b.n	8013fdc <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 8013fd2:	68fb      	ldr	r3, [r7, #12]
 8013fd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013fd6:	085a      	lsrs	r2, r3, #1
 8013fd8:	68fb      	ldr	r3, [r7, #12]
 8013fda:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 8013fdc:	4b1b      	ldr	r3, [pc, #108]	; (801404c <dhcp_handle_ack+0xb8>)
 8013fde:	795b      	ldrb	r3, [r3, #5]
 8013fe0:	2b00      	cmp	r3, #0
 8013fe2:	d004      	beq.n	8013fee <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 8013fe4:	4b1a      	ldr	r3, [pc, #104]	; (8014050 <dhcp_handle_ack+0xbc>)
 8013fe6:	695a      	ldr	r2, [r3, #20]
 8013fe8:	68fb      	ldr	r3, [r7, #12]
 8013fea:	631a      	str	r2, [r3, #48]	; 0x30
 8013fec:	e007      	b.n	8013ffe <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 8013fee:	68fb      	ldr	r3, [r7, #12]
 8013ff0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8013ff2:	4613      	mov	r3, r2
 8013ff4:	00db      	lsls	r3, r3, #3
 8013ff6:	1a9b      	subs	r3, r3, r2
 8013ff8:	08da      	lsrs	r2, r3, #3
 8013ffa:	68fb      	ldr	r3, [r7, #12]
 8013ffc:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8013ffe:	683b      	ldr	r3, [r7, #0]
 8014000:	691a      	ldr	r2, [r3, #16]
 8014002:	68fb      	ldr	r3, [r7, #12]
 8014004:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 8014006:	4b11      	ldr	r3, [pc, #68]	; (801404c <dhcp_handle_ack+0xb8>)
 8014008:	799b      	ldrb	r3, [r3, #6]
 801400a:	2b00      	cmp	r3, #0
 801400c:	d00b      	beq.n	8014026 <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 801400e:	4b10      	ldr	r3, [pc, #64]	; (8014050 <dhcp_handle_ack+0xbc>)
 8014010:	699b      	ldr	r3, [r3, #24]
 8014012:	4618      	mov	r0, r3
 8014014:	f7f6 fee1 	bl	800adda <lwip_htonl>
 8014018:	4602      	mov	r2, r0
 801401a:	68fb      	ldr	r3, [r7, #12]
 801401c:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 801401e:	68fb      	ldr	r3, [r7, #12]
 8014020:	2201      	movs	r2, #1
 8014022:	71da      	strb	r2, [r3, #7]
 8014024:	e002      	b.n	801402c <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 8014026:	68fb      	ldr	r3, [r7, #12]
 8014028:	2200      	movs	r2, #0
 801402a:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 801402c:	4b07      	ldr	r3, [pc, #28]	; (801404c <dhcp_handle_ack+0xb8>)
 801402e:	79db      	ldrb	r3, [r3, #7]
 8014030:	2b00      	cmp	r3, #0
 8014032:	d007      	beq.n	8014044 <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 8014034:	4b06      	ldr	r3, [pc, #24]	; (8014050 <dhcp_handle_ack+0xbc>)
 8014036:	69db      	ldr	r3, [r3, #28]
 8014038:	4618      	mov	r0, r3
 801403a:	f7f6 fece 	bl	800adda <lwip_htonl>
 801403e:	4602      	mov	r2, r0
 8014040:	68fb      	ldr	r3, [r7, #12]
 8014042:	625a      	str	r2, [r3, #36]	; 0x24
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 8014044:	bf00      	nop
 8014046:	3710      	adds	r7, #16
 8014048:	46bd      	mov	sp, r7
 801404a:	bd80      	pop	{r7, pc}
 801404c:	20010df8 	.word	0x20010df8
 8014050:	20010dd8 	.word	0x20010dd8

08014054 <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 8014054:	b580      	push	{r7, lr}
 8014056:	b084      	sub	sp, #16
 8014058:	af00      	add	r7, sp, #0
 801405a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 801405c:	687b      	ldr	r3, [r7, #4]
 801405e:	2b00      	cmp	r3, #0
 8014060:	d109      	bne.n	8014076 <dhcp_start+0x22>
 8014062:	4b37      	ldr	r3, [pc, #220]	; (8014140 <dhcp_start+0xec>)
 8014064:	f240 22e7 	movw	r2, #743	; 0x2e7
 8014068:	4936      	ldr	r1, [pc, #216]	; (8014144 <dhcp_start+0xf0>)
 801406a:	4837      	ldr	r0, [pc, #220]	; (8014148 <dhcp_start+0xf4>)
 801406c:	f004 f9aa 	bl	80183c4 <iprintf>
 8014070:	f06f 030f 	mvn.w	r3, #15
 8014074:	e060      	b.n	8014138 <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 8014076:	687b      	ldr	r3, [r7, #4]
 8014078:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801407c:	f003 0301 	and.w	r3, r3, #1
 8014080:	2b00      	cmp	r3, #0
 8014082:	d109      	bne.n	8014098 <dhcp_start+0x44>
 8014084:	4b2e      	ldr	r3, [pc, #184]	; (8014140 <dhcp_start+0xec>)
 8014086:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 801408a:	4930      	ldr	r1, [pc, #192]	; (801414c <dhcp_start+0xf8>)
 801408c:	482e      	ldr	r0, [pc, #184]	; (8014148 <dhcp_start+0xf4>)
 801408e:	f004 f999 	bl	80183c4 <iprintf>
 8014092:	f06f 030f 	mvn.w	r3, #15
 8014096:	e04f      	b.n	8014138 <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 8014098:	687b      	ldr	r3, [r7, #4]
 801409a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801409c:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 801409e:	687b      	ldr	r3, [r7, #4]
 80140a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80140a2:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 80140a6:	d202      	bcs.n	80140ae <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 80140a8:	f04f 33ff 	mov.w	r3, #4294967295
 80140ac:	e044      	b.n	8014138 <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 80140ae:	68fb      	ldr	r3, [r7, #12]
 80140b0:	2b00      	cmp	r3, #0
 80140b2:	d10d      	bne.n	80140d0 <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 80140b4:	2034      	movs	r0, #52	; 0x34
 80140b6:	f7f7 f9e5 	bl	800b484 <mem_malloc>
 80140ba:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 80140bc:	68fb      	ldr	r3, [r7, #12]
 80140be:	2b00      	cmp	r3, #0
 80140c0:	d102      	bne.n	80140c8 <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 80140c2:	f04f 33ff 	mov.w	r3, #4294967295
 80140c6:	e037      	b.n	8014138 <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 80140c8:	687b      	ldr	r3, [r7, #4]
 80140ca:	68fa      	ldr	r2, [r7, #12]
 80140cc:	625a      	str	r2, [r3, #36]	; 0x24
 80140ce:	e005      	b.n	80140dc <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 80140d0:	68fb      	ldr	r3, [r7, #12]
 80140d2:	791b      	ldrb	r3, [r3, #4]
 80140d4:	2b00      	cmp	r3, #0
 80140d6:	d001      	beq.n	80140dc <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 80140d8:	f7ff fc92 	bl	8013a00 <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 80140dc:	2234      	movs	r2, #52	; 0x34
 80140de:	2100      	movs	r1, #0
 80140e0:	68f8      	ldr	r0, [r7, #12]
 80140e2:	f004 f8d2 	bl	801828a <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 80140e6:	f7ff fc39 	bl	801395c <dhcp_inc_pcb_refcount>
 80140ea:	4603      	mov	r3, r0
 80140ec:	2b00      	cmp	r3, #0
 80140ee:	d002      	beq.n	80140f6 <dhcp_start+0xa2>
    return ERR_MEM;
 80140f0:	f04f 33ff 	mov.w	r3, #4294967295
 80140f4:	e020      	b.n	8014138 <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 80140f6:	68fb      	ldr	r3, [r7, #12]
 80140f8:	2201      	movs	r2, #1
 80140fa:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 80140fc:	687b      	ldr	r3, [r7, #4]
 80140fe:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8014102:	f003 0304 	and.w	r3, r3, #4
 8014106:	2b00      	cmp	r3, #0
 8014108:	d105      	bne.n	8014116 <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 801410a:	2102      	movs	r1, #2
 801410c:	68f8      	ldr	r0, [r7, #12]
 801410e:	f000 fd01 	bl	8014b14 <dhcp_set_state>
    return ERR_OK;
 8014112:	2300      	movs	r3, #0
 8014114:	e010      	b.n	8014138 <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 8014116:	6878      	ldr	r0, [r7, #4]
 8014118:	f000 f8f8 	bl	801430c <dhcp_discover>
 801411c:	4603      	mov	r3, r0
 801411e:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 8014120:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8014124:	2b00      	cmp	r3, #0
 8014126:	d005      	beq.n	8014134 <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 8014128:	6878      	ldr	r0, [r7, #4]
 801412a:	f000 fc59 	bl	80149e0 <dhcp_release_and_stop>
    return ERR_MEM;
 801412e:	f04f 33ff 	mov.w	r3, #4294967295
 8014132:	e001      	b.n	8014138 <dhcp_start+0xe4>
  }
  return result;
 8014134:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8014138:	4618      	mov	r0, r3
 801413a:	3710      	adds	r7, #16
 801413c:	46bd      	mov	sp, r7
 801413e:	bd80      	pop	{r7, pc}
 8014140:	0801c37c 	.word	0x0801c37c
 8014144:	0801c460 	.word	0x0801c460
 8014148:	0801c3dc 	.word	0x0801c3dc
 801414c:	0801c4a4 	.word	0x0801c4a4

08014150 <dhcp_network_changed>:
 * This enters the REBOOTING state to verify that the currently bound
 * address is still valid.
 */
void
dhcp_network_changed(struct netif *netif)
{
 8014150:	b580      	push	{r7, lr}
 8014152:	b084      	sub	sp, #16
 8014154:	af00      	add	r7, sp, #0
 8014156:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014158:	687b      	ldr	r3, [r7, #4]
 801415a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801415c:	60fb      	str	r3, [r7, #12]

  if (!dhcp) {
 801415e:	68fb      	ldr	r3, [r7, #12]
 8014160:	2b00      	cmp	r3, #0
 8014162:	d025      	beq.n	80141b0 <dhcp_network_changed+0x60>
    return;
  }
  switch (dhcp->state) {
 8014164:	68fb      	ldr	r3, [r7, #12]
 8014166:	795b      	ldrb	r3, [r3, #5]
 8014168:	2b0a      	cmp	r3, #10
 801416a:	d008      	beq.n	801417e <dhcp_network_changed+0x2e>
 801416c:	2b0a      	cmp	r3, #10
 801416e:	dc0d      	bgt.n	801418c <dhcp_network_changed+0x3c>
 8014170:	2b00      	cmp	r3, #0
 8014172:	d01f      	beq.n	80141b4 <dhcp_network_changed+0x64>
 8014174:	2b00      	cmp	r3, #0
 8014176:	db09      	blt.n	801418c <dhcp_network_changed+0x3c>
 8014178:	3b03      	subs	r3, #3
 801417a:	2b02      	cmp	r3, #2
 801417c:	d806      	bhi.n	801418c <dhcp_network_changed+0x3c>
    case DHCP_STATE_REBINDING:
    case DHCP_STATE_RENEWING:
    case DHCP_STATE_BOUND:
    case DHCP_STATE_REBOOTING:
      dhcp->tries = 0;
 801417e:	68fb      	ldr	r3, [r7, #12]
 8014180:	2200      	movs	r2, #0
 8014182:	719a      	strb	r2, [r3, #6]
      dhcp_reboot(netif);
 8014184:	6878      	ldr	r0, [r7, #4]
 8014186:	f000 fb75 	bl	8014874 <dhcp_reboot>
      break;
 801418a:	e014      	b.n	80141b6 <dhcp_network_changed+0x66>
    case DHCP_STATE_OFF:
      /* stay off */
      break;
    default:
      LWIP_ASSERT("invalid dhcp->state", dhcp->state <= DHCP_STATE_BACKING_OFF);
 801418c:	68fb      	ldr	r3, [r7, #12]
 801418e:	795b      	ldrb	r3, [r3, #5]
 8014190:	2b0c      	cmp	r3, #12
 8014192:	d906      	bls.n	80141a2 <dhcp_network_changed+0x52>
 8014194:	4b09      	ldr	r3, [pc, #36]	; (80141bc <dhcp_network_changed+0x6c>)
 8014196:	f240 326d 	movw	r2, #877	; 0x36d
 801419a:	4909      	ldr	r1, [pc, #36]	; (80141c0 <dhcp_network_changed+0x70>)
 801419c:	4809      	ldr	r0, [pc, #36]	; (80141c4 <dhcp_network_changed+0x74>)
 801419e:	f004 f911 	bl	80183c4 <iprintf>
        autoip_stop(netif);
        dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
      }
#endif /* LWIP_DHCP_AUTOIP_COOP */
      /* ensure we start with short timeouts, even if already discovering */
      dhcp->tries = 0;
 80141a2:	68fb      	ldr	r3, [r7, #12]
 80141a4:	2200      	movs	r2, #0
 80141a6:	719a      	strb	r2, [r3, #6]
      dhcp_discover(netif);
 80141a8:	6878      	ldr	r0, [r7, #4]
 80141aa:	f000 f8af 	bl	801430c <dhcp_discover>
      break;
 80141ae:	e002      	b.n	80141b6 <dhcp_network_changed+0x66>
    return;
 80141b0:	bf00      	nop
 80141b2:	e000      	b.n	80141b6 <dhcp_network_changed+0x66>
      break;
 80141b4:	bf00      	nop
  }
}
 80141b6:	3710      	adds	r7, #16
 80141b8:	46bd      	mov	sp, r7
 80141ba:	bd80      	pop	{r7, pc}
 80141bc:	0801c37c 	.word	0x0801c37c
 80141c0:	0801c4c8 	.word	0x0801c4c8
 80141c4:	0801c3dc 	.word	0x0801c3dc

080141c8 <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 80141c8:	b580      	push	{r7, lr}
 80141ca:	b084      	sub	sp, #16
 80141cc:	af00      	add	r7, sp, #0
 80141ce:	6078      	str	r0, [r7, #4]
 80141d0:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80141d2:	687b      	ldr	r3, [r7, #4]
 80141d4:	2b00      	cmp	r3, #0
 80141d6:	d107      	bne.n	80141e8 <dhcp_arp_reply+0x20>
 80141d8:	4b0e      	ldr	r3, [pc, #56]	; (8014214 <dhcp_arp_reply+0x4c>)
 80141da:	f240 328b 	movw	r2, #907	; 0x38b
 80141de:	490e      	ldr	r1, [pc, #56]	; (8014218 <dhcp_arp_reply+0x50>)
 80141e0:	480e      	ldr	r0, [pc, #56]	; (801421c <dhcp_arp_reply+0x54>)
 80141e2:	f004 f8ef 	bl	80183c4 <iprintf>
 80141e6:	e012      	b.n	801420e <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 80141e8:	687b      	ldr	r3, [r7, #4]
 80141ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80141ec:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 80141ee:	68fb      	ldr	r3, [r7, #12]
 80141f0:	2b00      	cmp	r3, #0
 80141f2:	d00c      	beq.n	801420e <dhcp_arp_reply+0x46>
 80141f4:	68fb      	ldr	r3, [r7, #12]
 80141f6:	795b      	ldrb	r3, [r3, #5]
 80141f8:	2b08      	cmp	r3, #8
 80141fa:	d108      	bne.n	801420e <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 80141fc:	683b      	ldr	r3, [r7, #0]
 80141fe:	681a      	ldr	r2, [r3, #0]
 8014200:	68fb      	ldr	r3, [r7, #12]
 8014202:	69db      	ldr	r3, [r3, #28]
 8014204:	429a      	cmp	r2, r3
 8014206:	d102      	bne.n	801420e <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 8014208:	6878      	ldr	r0, [r7, #4]
 801420a:	f000 f809 	bl	8014220 <dhcp_decline>
    }
  }
}
 801420e:	3710      	adds	r7, #16
 8014210:	46bd      	mov	sp, r7
 8014212:	bd80      	pop	{r7, pc}
 8014214:	0801c37c 	.word	0x0801c37c
 8014218:	0801c460 	.word	0x0801c460
 801421c:	0801c3dc 	.word	0x0801c3dc

08014220 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 8014220:	b5b0      	push	{r4, r5, r7, lr}
 8014222:	b08a      	sub	sp, #40	; 0x28
 8014224:	af02      	add	r7, sp, #8
 8014226:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014228:	687b      	ldr	r3, [r7, #4]
 801422a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801422c:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 801422e:	210c      	movs	r1, #12
 8014230:	69b8      	ldr	r0, [r7, #24]
 8014232:	f000 fc6f 	bl	8014b14 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 8014236:	f107 030c 	add.w	r3, r7, #12
 801423a:	2204      	movs	r2, #4
 801423c:	69b9      	ldr	r1, [r7, #24]
 801423e:	6878      	ldr	r0, [r7, #4]
 8014240:	f001 f8f4 	bl	801542c <dhcp_create_msg>
 8014244:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8014246:	697b      	ldr	r3, [r7, #20]
 8014248:	2b00      	cmp	r3, #0
 801424a:	d035      	beq.n	80142b8 <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801424c:	697b      	ldr	r3, [r7, #20]
 801424e:	685b      	ldr	r3, [r3, #4]
 8014250:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8014252:	89b8      	ldrh	r0, [r7, #12]
 8014254:	693b      	ldr	r3, [r7, #16]
 8014256:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801425a:	2304      	movs	r3, #4
 801425c:	2232      	movs	r2, #50	; 0x32
 801425e:	f000 fc73 	bl	8014b48 <dhcp_option>
 8014262:	4603      	mov	r3, r0
 8014264:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8014266:	89bc      	ldrh	r4, [r7, #12]
 8014268:	693b      	ldr	r3, [r7, #16]
 801426a:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 801426e:	69bb      	ldr	r3, [r7, #24]
 8014270:	69db      	ldr	r3, [r3, #28]
 8014272:	4618      	mov	r0, r3
 8014274:	f7f6 fdb1 	bl	800adda <lwip_htonl>
 8014278:	4603      	mov	r3, r0
 801427a:	461a      	mov	r2, r3
 801427c:	4629      	mov	r1, r5
 801427e:	4620      	mov	r0, r4
 8014280:	f000 fcee 	bl	8014c60 <dhcp_option_long>
 8014284:	4603      	mov	r3, r0
 8014286:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8014288:	89b8      	ldrh	r0, [r7, #12]
 801428a:	693b      	ldr	r3, [r7, #16]
 801428c:	33f0      	adds	r3, #240	; 0xf0
 801428e:	697a      	ldr	r2, [r7, #20]
 8014290:	4619      	mov	r1, r3
 8014292:	f001 f9a1 	bl	80155d8 <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8014296:	4b19      	ldr	r3, [pc, #100]	; (80142fc <dhcp_decline+0xdc>)
 8014298:	6818      	ldr	r0, [r3, #0]
 801429a:	4b19      	ldr	r3, [pc, #100]	; (8014300 <dhcp_decline+0xe0>)
 801429c:	9301      	str	r3, [sp, #4]
 801429e:	687b      	ldr	r3, [r7, #4]
 80142a0:	9300      	str	r3, [sp, #0]
 80142a2:	2343      	movs	r3, #67	; 0x43
 80142a4:	4a17      	ldr	r2, [pc, #92]	; (8014304 <dhcp_decline+0xe4>)
 80142a6:	6979      	ldr	r1, [r7, #20]
 80142a8:	f7ff f8c6 	bl	8013438 <udp_sendto_if_src>
 80142ac:	4603      	mov	r3, r0
 80142ae:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80142b0:	6978      	ldr	r0, [r7, #20]
 80142b2:	f7f8 f9b1 	bl	800c618 <pbuf_free>
 80142b6:	e001      	b.n	80142bc <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80142b8:	23ff      	movs	r3, #255	; 0xff
 80142ba:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80142bc:	69bb      	ldr	r3, [r7, #24]
 80142be:	799b      	ldrb	r3, [r3, #6]
 80142c0:	2bff      	cmp	r3, #255	; 0xff
 80142c2:	d005      	beq.n	80142d0 <dhcp_decline+0xb0>
    dhcp->tries++;
 80142c4:	69bb      	ldr	r3, [r7, #24]
 80142c6:	799b      	ldrb	r3, [r3, #6]
 80142c8:	3301      	adds	r3, #1
 80142ca:	b2da      	uxtb	r2, r3
 80142cc:	69bb      	ldr	r3, [r7, #24]
 80142ce:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 80142d0:	f242 7310 	movw	r3, #10000	; 0x2710
 80142d4:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80142d6:	89fb      	ldrh	r3, [r7, #14]
 80142d8:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80142dc:	4a0a      	ldr	r2, [pc, #40]	; (8014308 <dhcp_decline+0xe8>)
 80142de:	fb82 1203 	smull	r1, r2, r2, r3
 80142e2:	1152      	asrs	r2, r2, #5
 80142e4:	17db      	asrs	r3, r3, #31
 80142e6:	1ad3      	subs	r3, r2, r3
 80142e8:	b29a      	uxth	r2, r3
 80142ea:	69bb      	ldr	r3, [r7, #24]
 80142ec:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80142ee:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80142f2:	4618      	mov	r0, r3
 80142f4:	3720      	adds	r7, #32
 80142f6:	46bd      	mov	sp, r7
 80142f8:	bdb0      	pop	{r4, r5, r7, pc}
 80142fa:	bf00      	nop
 80142fc:	20010e00 	.word	0x20010e00
 8014300:	08027060 	.word	0x08027060
 8014304:	08027064 	.word	0x08027064
 8014308:	10624dd3 	.word	0x10624dd3

0801430c <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 801430c:	b580      	push	{r7, lr}
 801430e:	b08a      	sub	sp, #40	; 0x28
 8014310:	af02      	add	r7, sp, #8
 8014312:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014314:	687b      	ldr	r3, [r7, #4]
 8014316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014318:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 801431a:	2300      	movs	r3, #0
 801431c:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 801431e:	69bb      	ldr	r3, [r7, #24]
 8014320:	2200      	movs	r2, #0
 8014322:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 8014324:	2106      	movs	r1, #6
 8014326:	69b8      	ldr	r0, [r7, #24]
 8014328:	f000 fbf4 	bl	8014b14 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 801432c:	f107 0308 	add.w	r3, r7, #8
 8014330:	2201      	movs	r2, #1
 8014332:	69b9      	ldr	r1, [r7, #24]
 8014334:	6878      	ldr	r0, [r7, #4]
 8014336:	f001 f879 	bl	801542c <dhcp_create_msg>
 801433a:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 801433c:	693b      	ldr	r3, [r7, #16]
 801433e:	2b00      	cmp	r3, #0
 8014340:	d04b      	beq.n	80143da <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8014342:	693b      	ldr	r3, [r7, #16]
 8014344:	685b      	ldr	r3, [r3, #4]
 8014346:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8014348:	8938      	ldrh	r0, [r7, #8]
 801434a:	68fb      	ldr	r3, [r7, #12]
 801434c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014350:	2302      	movs	r3, #2
 8014352:	2239      	movs	r2, #57	; 0x39
 8014354:	f000 fbf8 	bl	8014b48 <dhcp_option>
 8014358:	4603      	mov	r3, r0
 801435a:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801435c:	8938      	ldrh	r0, [r7, #8]
 801435e:	68fb      	ldr	r3, [r7, #12]
 8014360:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014364:	687b      	ldr	r3, [r7, #4]
 8014366:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014368:	461a      	mov	r2, r3
 801436a:	f000 fc47 	bl	8014bfc <dhcp_option_short>
 801436e:	4603      	mov	r3, r0
 8014370:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8014372:	8938      	ldrh	r0, [r7, #8]
 8014374:	68fb      	ldr	r3, [r7, #12]
 8014376:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801437a:	2303      	movs	r3, #3
 801437c:	2237      	movs	r2, #55	; 0x37
 801437e:	f000 fbe3 	bl	8014b48 <dhcp_option>
 8014382:	4603      	mov	r3, r0
 8014384:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8014386:	2300      	movs	r3, #0
 8014388:	77fb      	strb	r3, [r7, #31]
 801438a:	e00e      	b.n	80143aa <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801438c:	8938      	ldrh	r0, [r7, #8]
 801438e:	68fb      	ldr	r3, [r7, #12]
 8014390:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014394:	7ffb      	ldrb	r3, [r7, #31]
 8014396:	4a29      	ldr	r2, [pc, #164]	; (801443c <dhcp_discover+0x130>)
 8014398:	5cd3      	ldrb	r3, [r2, r3]
 801439a:	461a      	mov	r2, r3
 801439c:	f000 fc08 	bl	8014bb0 <dhcp_option_byte>
 80143a0:	4603      	mov	r3, r0
 80143a2:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80143a4:	7ffb      	ldrb	r3, [r7, #31]
 80143a6:	3301      	adds	r3, #1
 80143a8:	77fb      	strb	r3, [r7, #31]
 80143aa:	7ffb      	ldrb	r3, [r7, #31]
 80143ac:	2b02      	cmp	r3, #2
 80143ae:	d9ed      	bls.n	801438c <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80143b0:	8938      	ldrh	r0, [r7, #8]
 80143b2:	68fb      	ldr	r3, [r7, #12]
 80143b4:	33f0      	adds	r3, #240	; 0xf0
 80143b6:	693a      	ldr	r2, [r7, #16]
 80143b8:	4619      	mov	r1, r3
 80143ba:	f001 f90d 	bl	80155d8 <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 80143be:	4b20      	ldr	r3, [pc, #128]	; (8014440 <dhcp_discover+0x134>)
 80143c0:	6818      	ldr	r0, [r3, #0]
 80143c2:	4b20      	ldr	r3, [pc, #128]	; (8014444 <dhcp_discover+0x138>)
 80143c4:	9301      	str	r3, [sp, #4]
 80143c6:	687b      	ldr	r3, [r7, #4]
 80143c8:	9300      	str	r3, [sp, #0]
 80143ca:	2343      	movs	r3, #67	; 0x43
 80143cc:	4a1e      	ldr	r2, [pc, #120]	; (8014448 <dhcp_discover+0x13c>)
 80143ce:	6939      	ldr	r1, [r7, #16]
 80143d0:	f7ff f832 	bl	8013438 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 80143d4:	6938      	ldr	r0, [r7, #16]
 80143d6:	f7f8 f91f 	bl	800c618 <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 80143da:	69bb      	ldr	r3, [r7, #24]
 80143dc:	799b      	ldrb	r3, [r3, #6]
 80143de:	2bff      	cmp	r3, #255	; 0xff
 80143e0:	d005      	beq.n	80143ee <dhcp_discover+0xe2>
    dhcp->tries++;
 80143e2:	69bb      	ldr	r3, [r7, #24]
 80143e4:	799b      	ldrb	r3, [r3, #6]
 80143e6:	3301      	adds	r3, #1
 80143e8:	b2da      	uxtb	r2, r3
 80143ea:	69bb      	ldr	r3, [r7, #24]
 80143ec:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 80143ee:	69bb      	ldr	r3, [r7, #24]
 80143f0:	799b      	ldrb	r3, [r3, #6]
 80143f2:	2b05      	cmp	r3, #5
 80143f4:	d80d      	bhi.n	8014412 <dhcp_discover+0x106>
 80143f6:	69bb      	ldr	r3, [r7, #24]
 80143f8:	799b      	ldrb	r3, [r3, #6]
 80143fa:	461a      	mov	r2, r3
 80143fc:	2301      	movs	r3, #1
 80143fe:	4093      	lsls	r3, r2
 8014400:	b29b      	uxth	r3, r3
 8014402:	461a      	mov	r2, r3
 8014404:	0152      	lsls	r2, r2, #5
 8014406:	1ad2      	subs	r2, r2, r3
 8014408:	0092      	lsls	r2, r2, #2
 801440a:	4413      	add	r3, r2
 801440c:	00db      	lsls	r3, r3, #3
 801440e:	b29b      	uxth	r3, r3
 8014410:	e001      	b.n	8014416 <dhcp_discover+0x10a>
 8014412:	f64e 2360 	movw	r3, #60000	; 0xea60
 8014416:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8014418:	897b      	ldrh	r3, [r7, #10]
 801441a:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801441e:	4a0b      	ldr	r2, [pc, #44]	; (801444c <dhcp_discover+0x140>)
 8014420:	fb82 1203 	smull	r1, r2, r2, r3
 8014424:	1152      	asrs	r2, r2, #5
 8014426:	17db      	asrs	r3, r3, #31
 8014428:	1ad3      	subs	r3, r2, r3
 801442a:	b29a      	uxth	r2, r3
 801442c:	69bb      	ldr	r3, [r7, #24]
 801442e:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8014430:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8014434:	4618      	mov	r0, r3
 8014436:	3720      	adds	r7, #32
 8014438:	46bd      	mov	sp, r7
 801443a:	bd80      	pop	{r7, pc}
 801443c:	20000030 	.word	0x20000030
 8014440:	20010e00 	.word	0x20010e00
 8014444:	08027060 	.word	0x08027060
 8014448:	08027064 	.word	0x08027064
 801444c:	10624dd3 	.word	0x10624dd3

08014450 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 8014450:	b580      	push	{r7, lr}
 8014452:	b088      	sub	sp, #32
 8014454:	af00      	add	r7, sp, #0
 8014456:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 8014458:	687b      	ldr	r3, [r7, #4]
 801445a:	2b00      	cmp	r3, #0
 801445c:	d107      	bne.n	801446e <dhcp_bind+0x1e>
 801445e:	4b64      	ldr	r3, [pc, #400]	; (80145f0 <dhcp_bind+0x1a0>)
 8014460:	f240 4215 	movw	r2, #1045	; 0x415
 8014464:	4963      	ldr	r1, [pc, #396]	; (80145f4 <dhcp_bind+0x1a4>)
 8014466:	4864      	ldr	r0, [pc, #400]	; (80145f8 <dhcp_bind+0x1a8>)
 8014468:	f003 ffac 	bl	80183c4 <iprintf>
 801446c:	e0bc      	b.n	80145e8 <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 801446e:	687b      	ldr	r3, [r7, #4]
 8014470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014472:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 8014474:	69bb      	ldr	r3, [r7, #24]
 8014476:	2b00      	cmp	r3, #0
 8014478:	d107      	bne.n	801448a <dhcp_bind+0x3a>
 801447a:	4b5d      	ldr	r3, [pc, #372]	; (80145f0 <dhcp_bind+0x1a0>)
 801447c:	f240 4217 	movw	r2, #1047	; 0x417
 8014480:	495e      	ldr	r1, [pc, #376]	; (80145fc <dhcp_bind+0x1ac>)
 8014482:	485d      	ldr	r0, [pc, #372]	; (80145f8 <dhcp_bind+0x1a8>)
 8014484:	f003 ff9e 	bl	80183c4 <iprintf>
 8014488:	e0ae      	b.n	80145e8 <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 801448a:	69bb      	ldr	r3, [r7, #24]
 801448c:	2200      	movs	r2, #0
 801448e:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 8014490:	69bb      	ldr	r3, [r7, #24]
 8014492:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014494:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014498:	d019      	beq.n	80144ce <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801449a:	69bb      	ldr	r3, [r7, #24]
 801449c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801449e:	331e      	adds	r3, #30
 80144a0:	4a57      	ldr	r2, [pc, #348]	; (8014600 <dhcp_bind+0x1b0>)
 80144a2:	fba2 2303 	umull	r2, r3, r2, r3
 80144a6:	095b      	lsrs	r3, r3, #5
 80144a8:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 80144aa:	69fb      	ldr	r3, [r7, #28]
 80144ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80144b0:	d302      	bcc.n	80144b8 <dhcp_bind+0x68>
      timeout = 0xffff;
 80144b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80144b6:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 80144b8:	69fb      	ldr	r3, [r7, #28]
 80144ba:	b29a      	uxth	r2, r3
 80144bc:	69bb      	ldr	r3, [r7, #24]
 80144be:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 80144c0:	69bb      	ldr	r3, [r7, #24]
 80144c2:	8a9b      	ldrh	r3, [r3, #20]
 80144c4:	2b00      	cmp	r3, #0
 80144c6:	d102      	bne.n	80144ce <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 80144c8:	69bb      	ldr	r3, [r7, #24]
 80144ca:	2201      	movs	r2, #1
 80144cc:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 80144ce:	69bb      	ldr	r3, [r7, #24]
 80144d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80144d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80144d6:	d01d      	beq.n	8014514 <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 80144d8:	69bb      	ldr	r3, [r7, #24]
 80144da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80144dc:	331e      	adds	r3, #30
 80144de:	4a48      	ldr	r2, [pc, #288]	; (8014600 <dhcp_bind+0x1b0>)
 80144e0:	fba2 2303 	umull	r2, r3, r2, r3
 80144e4:	095b      	lsrs	r3, r3, #5
 80144e6:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 80144e8:	69fb      	ldr	r3, [r7, #28]
 80144ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80144ee:	d302      	bcc.n	80144f6 <dhcp_bind+0xa6>
      timeout = 0xffff;
 80144f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80144f4:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 80144f6:	69fb      	ldr	r3, [r7, #28]
 80144f8:	b29a      	uxth	r2, r3
 80144fa:	69bb      	ldr	r3, [r7, #24]
 80144fc:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 80144fe:	69bb      	ldr	r3, [r7, #24]
 8014500:	895b      	ldrh	r3, [r3, #10]
 8014502:	2b00      	cmp	r3, #0
 8014504:	d102      	bne.n	801450c <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 8014506:	69bb      	ldr	r3, [r7, #24]
 8014508:	2201      	movs	r2, #1
 801450a:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 801450c:	69bb      	ldr	r3, [r7, #24]
 801450e:	895a      	ldrh	r2, [r3, #10]
 8014510:	69bb      	ldr	r3, [r7, #24]
 8014512:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 8014514:	69bb      	ldr	r3, [r7, #24]
 8014516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014518:	f1b3 3fff 	cmp.w	r3, #4294967295
 801451c:	d01d      	beq.n	801455a <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801451e:	69bb      	ldr	r3, [r7, #24]
 8014520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014522:	331e      	adds	r3, #30
 8014524:	4a36      	ldr	r2, [pc, #216]	; (8014600 <dhcp_bind+0x1b0>)
 8014526:	fba2 2303 	umull	r2, r3, r2, r3
 801452a:	095b      	lsrs	r3, r3, #5
 801452c:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 801452e:	69fb      	ldr	r3, [r7, #28]
 8014530:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014534:	d302      	bcc.n	801453c <dhcp_bind+0xec>
      timeout = 0xffff;
 8014536:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801453a:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 801453c:	69fb      	ldr	r3, [r7, #28]
 801453e:	b29a      	uxth	r2, r3
 8014540:	69bb      	ldr	r3, [r7, #24]
 8014542:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 8014544:	69bb      	ldr	r3, [r7, #24]
 8014546:	899b      	ldrh	r3, [r3, #12]
 8014548:	2b00      	cmp	r3, #0
 801454a:	d102      	bne.n	8014552 <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 801454c:	69bb      	ldr	r3, [r7, #24]
 801454e:	2201      	movs	r2, #1
 8014550:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 8014552:	69bb      	ldr	r3, [r7, #24]
 8014554:	899a      	ldrh	r2, [r3, #12]
 8014556:	69bb      	ldr	r3, [r7, #24]
 8014558:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 801455a:	69bb      	ldr	r3, [r7, #24]
 801455c:	895a      	ldrh	r2, [r3, #10]
 801455e:	69bb      	ldr	r3, [r7, #24]
 8014560:	899b      	ldrh	r3, [r3, #12]
 8014562:	429a      	cmp	r2, r3
 8014564:	d306      	bcc.n	8014574 <dhcp_bind+0x124>
 8014566:	69bb      	ldr	r3, [r7, #24]
 8014568:	899b      	ldrh	r3, [r3, #12]
 801456a:	2b00      	cmp	r3, #0
 801456c:	d002      	beq.n	8014574 <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 801456e:	69bb      	ldr	r3, [r7, #24]
 8014570:	2200      	movs	r2, #0
 8014572:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 8014574:	69bb      	ldr	r3, [r7, #24]
 8014576:	79db      	ldrb	r3, [r3, #7]
 8014578:	2b00      	cmp	r3, #0
 801457a:	d003      	beq.n	8014584 <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 801457c:	69bb      	ldr	r3, [r7, #24]
 801457e:	6a1b      	ldr	r3, [r3, #32]
 8014580:	613b      	str	r3, [r7, #16]
 8014582:	e014      	b.n	80145ae <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 8014584:	69bb      	ldr	r3, [r7, #24]
 8014586:	331c      	adds	r3, #28
 8014588:	781b      	ldrb	r3, [r3, #0]
 801458a:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 801458c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8014590:	2b00      	cmp	r3, #0
 8014592:	db02      	blt.n	801459a <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 8014594:	23ff      	movs	r3, #255	; 0xff
 8014596:	613b      	str	r3, [r7, #16]
 8014598:	e009      	b.n	80145ae <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 801459a:	7dfb      	ldrb	r3, [r7, #23]
 801459c:	2bbf      	cmp	r3, #191	; 0xbf
 801459e:	d903      	bls.n	80145a8 <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 80145a0:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80145a4:	613b      	str	r3, [r7, #16]
 80145a6:	e002      	b.n	80145ae <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 80145a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80145ac:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 80145ae:	69bb      	ldr	r3, [r7, #24]
 80145b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80145b2:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 80145b4:	68fb      	ldr	r3, [r7, #12]
 80145b6:	2b00      	cmp	r3, #0
 80145b8:	d108      	bne.n	80145cc <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 80145ba:	69bb      	ldr	r3, [r7, #24]
 80145bc:	69da      	ldr	r2, [r3, #28]
 80145be:	693b      	ldr	r3, [r7, #16]
 80145c0:	4013      	ands	r3, r2
 80145c2:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 80145c4:	68fb      	ldr	r3, [r7, #12]
 80145c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80145ca:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 80145cc:	210a      	movs	r1, #10
 80145ce:	69b8      	ldr	r0, [r7, #24]
 80145d0:	f000 faa0 	bl	8014b14 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 80145d4:	69bb      	ldr	r3, [r7, #24]
 80145d6:	f103 011c 	add.w	r1, r3, #28
 80145da:	f107 030c 	add.w	r3, r7, #12
 80145de:	f107 0210 	add.w	r2, r7, #16
 80145e2:	6878      	ldr	r0, [r7, #4]
 80145e4:	f7f7 fb0a 	bl	800bbfc <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 80145e8:	3720      	adds	r7, #32
 80145ea:	46bd      	mov	sp, r7
 80145ec:	bd80      	pop	{r7, pc}
 80145ee:	bf00      	nop
 80145f0:	0801c37c 	.word	0x0801c37c
 80145f4:	0801c4dc 	.word	0x0801c4dc
 80145f8:	0801c3dc 	.word	0x0801c3dc
 80145fc:	0801c4f8 	.word	0x0801c4f8
 8014600:	88888889 	.word	0x88888889

08014604 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 8014604:	b580      	push	{r7, lr}
 8014606:	b08a      	sub	sp, #40	; 0x28
 8014608:	af02      	add	r7, sp, #8
 801460a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801460c:	687b      	ldr	r3, [r7, #4]
 801460e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014610:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 8014612:	2105      	movs	r1, #5
 8014614:	69b8      	ldr	r0, [r7, #24]
 8014616:	f000 fa7d 	bl	8014b14 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801461a:	f107 030c 	add.w	r3, r7, #12
 801461e:	2203      	movs	r2, #3
 8014620:	69b9      	ldr	r1, [r7, #24]
 8014622:	6878      	ldr	r0, [r7, #4]
 8014624:	f000 ff02 	bl	801542c <dhcp_create_msg>
 8014628:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801462a:	697b      	ldr	r3, [r7, #20]
 801462c:	2b00      	cmp	r3, #0
 801462e:	d04e      	beq.n	80146ce <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8014630:	697b      	ldr	r3, [r7, #20]
 8014632:	685b      	ldr	r3, [r3, #4]
 8014634:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8014636:	89b8      	ldrh	r0, [r7, #12]
 8014638:	693b      	ldr	r3, [r7, #16]
 801463a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801463e:	2302      	movs	r3, #2
 8014640:	2239      	movs	r2, #57	; 0x39
 8014642:	f000 fa81 	bl	8014b48 <dhcp_option>
 8014646:	4603      	mov	r3, r0
 8014648:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801464a:	89b8      	ldrh	r0, [r7, #12]
 801464c:	693b      	ldr	r3, [r7, #16]
 801464e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014652:	687b      	ldr	r3, [r7, #4]
 8014654:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014656:	461a      	mov	r2, r3
 8014658:	f000 fad0 	bl	8014bfc <dhcp_option_short>
 801465c:	4603      	mov	r3, r0
 801465e:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8014660:	89b8      	ldrh	r0, [r7, #12]
 8014662:	693b      	ldr	r3, [r7, #16]
 8014664:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014668:	2303      	movs	r3, #3
 801466a:	2237      	movs	r2, #55	; 0x37
 801466c:	f000 fa6c 	bl	8014b48 <dhcp_option>
 8014670:	4603      	mov	r3, r0
 8014672:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8014674:	2300      	movs	r3, #0
 8014676:	77bb      	strb	r3, [r7, #30]
 8014678:	e00e      	b.n	8014698 <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801467a:	89b8      	ldrh	r0, [r7, #12]
 801467c:	693b      	ldr	r3, [r7, #16]
 801467e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014682:	7fbb      	ldrb	r3, [r7, #30]
 8014684:	4a2a      	ldr	r2, [pc, #168]	; (8014730 <dhcp_renew+0x12c>)
 8014686:	5cd3      	ldrb	r3, [r2, r3]
 8014688:	461a      	mov	r2, r3
 801468a:	f000 fa91 	bl	8014bb0 <dhcp_option_byte>
 801468e:	4603      	mov	r3, r0
 8014690:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8014692:	7fbb      	ldrb	r3, [r7, #30]
 8014694:	3301      	adds	r3, #1
 8014696:	77bb      	strb	r3, [r7, #30]
 8014698:	7fbb      	ldrb	r3, [r7, #30]
 801469a:	2b02      	cmp	r3, #2
 801469c:	d9ed      	bls.n	801467a <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801469e:	89b8      	ldrh	r0, [r7, #12]
 80146a0:	693b      	ldr	r3, [r7, #16]
 80146a2:	33f0      	adds	r3, #240	; 0xf0
 80146a4:	697a      	ldr	r2, [r7, #20]
 80146a6:	4619      	mov	r1, r3
 80146a8:	f000 ff96 	bl	80155d8 <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80146ac:	4b21      	ldr	r3, [pc, #132]	; (8014734 <dhcp_renew+0x130>)
 80146ae:	6818      	ldr	r0, [r3, #0]
 80146b0:	69bb      	ldr	r3, [r7, #24]
 80146b2:	f103 0218 	add.w	r2, r3, #24
 80146b6:	687b      	ldr	r3, [r7, #4]
 80146b8:	9300      	str	r3, [sp, #0]
 80146ba:	2343      	movs	r3, #67	; 0x43
 80146bc:	6979      	ldr	r1, [r7, #20]
 80146be:	f7fe fe47 	bl	8013350 <udp_sendto_if>
 80146c2:	4603      	mov	r3, r0
 80146c4:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80146c6:	6978      	ldr	r0, [r7, #20]
 80146c8:	f7f7 ffa6 	bl	800c618 <pbuf_free>
 80146cc:	e001      	b.n	80146d2 <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80146ce:	23ff      	movs	r3, #255	; 0xff
 80146d0:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80146d2:	69bb      	ldr	r3, [r7, #24]
 80146d4:	799b      	ldrb	r3, [r3, #6]
 80146d6:	2bff      	cmp	r3, #255	; 0xff
 80146d8:	d005      	beq.n	80146e6 <dhcp_renew+0xe2>
    dhcp->tries++;
 80146da:	69bb      	ldr	r3, [r7, #24]
 80146dc:	799b      	ldrb	r3, [r3, #6]
 80146de:	3301      	adds	r3, #1
 80146e0:	b2da      	uxtb	r2, r3
 80146e2:	69bb      	ldr	r3, [r7, #24]
 80146e4:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 80146e6:	69bb      	ldr	r3, [r7, #24]
 80146e8:	799b      	ldrb	r3, [r3, #6]
 80146ea:	2b09      	cmp	r3, #9
 80146ec:	d80a      	bhi.n	8014704 <dhcp_renew+0x100>
 80146ee:	69bb      	ldr	r3, [r7, #24]
 80146f0:	799b      	ldrb	r3, [r3, #6]
 80146f2:	b29b      	uxth	r3, r3
 80146f4:	461a      	mov	r2, r3
 80146f6:	0152      	lsls	r2, r2, #5
 80146f8:	1ad2      	subs	r2, r2, r3
 80146fa:	0092      	lsls	r2, r2, #2
 80146fc:	4413      	add	r3, r2
 80146fe:	011b      	lsls	r3, r3, #4
 8014700:	b29b      	uxth	r3, r3
 8014702:	e001      	b.n	8014708 <dhcp_renew+0x104>
 8014704:	f644 6320 	movw	r3, #20000	; 0x4e20
 8014708:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801470a:	89fb      	ldrh	r3, [r7, #14]
 801470c:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8014710:	4a09      	ldr	r2, [pc, #36]	; (8014738 <dhcp_renew+0x134>)
 8014712:	fb82 1203 	smull	r1, r2, r2, r3
 8014716:	1152      	asrs	r2, r2, #5
 8014718:	17db      	asrs	r3, r3, #31
 801471a:	1ad3      	subs	r3, r2, r3
 801471c:	b29a      	uxth	r2, r3
 801471e:	69bb      	ldr	r3, [r7, #24]
 8014720:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8014722:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8014726:	4618      	mov	r0, r3
 8014728:	3720      	adds	r7, #32
 801472a:	46bd      	mov	sp, r7
 801472c:	bd80      	pop	{r7, pc}
 801472e:	bf00      	nop
 8014730:	20000030 	.word	0x20000030
 8014734:	20010e00 	.word	0x20010e00
 8014738:	10624dd3 	.word	0x10624dd3

0801473c <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 801473c:	b580      	push	{r7, lr}
 801473e:	b08a      	sub	sp, #40	; 0x28
 8014740:	af02      	add	r7, sp, #8
 8014742:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014744:	687b      	ldr	r3, [r7, #4]
 8014746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014748:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 801474a:	2104      	movs	r1, #4
 801474c:	69b8      	ldr	r0, [r7, #24]
 801474e:	f000 f9e1 	bl	8014b14 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8014752:	f107 030c 	add.w	r3, r7, #12
 8014756:	2203      	movs	r2, #3
 8014758:	69b9      	ldr	r1, [r7, #24]
 801475a:	6878      	ldr	r0, [r7, #4]
 801475c:	f000 fe66 	bl	801542c <dhcp_create_msg>
 8014760:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8014762:	697b      	ldr	r3, [r7, #20]
 8014764:	2b00      	cmp	r3, #0
 8014766:	d04c      	beq.n	8014802 <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8014768:	697b      	ldr	r3, [r7, #20]
 801476a:	685b      	ldr	r3, [r3, #4]
 801476c:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801476e:	89b8      	ldrh	r0, [r7, #12]
 8014770:	693b      	ldr	r3, [r7, #16]
 8014772:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014776:	2302      	movs	r3, #2
 8014778:	2239      	movs	r2, #57	; 0x39
 801477a:	f000 f9e5 	bl	8014b48 <dhcp_option>
 801477e:	4603      	mov	r3, r0
 8014780:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8014782:	89b8      	ldrh	r0, [r7, #12]
 8014784:	693b      	ldr	r3, [r7, #16]
 8014786:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801478a:	687b      	ldr	r3, [r7, #4]
 801478c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801478e:	461a      	mov	r2, r3
 8014790:	f000 fa34 	bl	8014bfc <dhcp_option_short>
 8014794:	4603      	mov	r3, r0
 8014796:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8014798:	89b8      	ldrh	r0, [r7, #12]
 801479a:	693b      	ldr	r3, [r7, #16]
 801479c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80147a0:	2303      	movs	r3, #3
 80147a2:	2237      	movs	r2, #55	; 0x37
 80147a4:	f000 f9d0 	bl	8014b48 <dhcp_option>
 80147a8:	4603      	mov	r3, r0
 80147aa:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80147ac:	2300      	movs	r3, #0
 80147ae:	77bb      	strb	r3, [r7, #30]
 80147b0:	e00e      	b.n	80147d0 <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80147b2:	89b8      	ldrh	r0, [r7, #12]
 80147b4:	693b      	ldr	r3, [r7, #16]
 80147b6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80147ba:	7fbb      	ldrb	r3, [r7, #30]
 80147bc:	4a29      	ldr	r2, [pc, #164]	; (8014864 <dhcp_rebind+0x128>)
 80147be:	5cd3      	ldrb	r3, [r2, r3]
 80147c0:	461a      	mov	r2, r3
 80147c2:	f000 f9f5 	bl	8014bb0 <dhcp_option_byte>
 80147c6:	4603      	mov	r3, r0
 80147c8:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80147ca:	7fbb      	ldrb	r3, [r7, #30]
 80147cc:	3301      	adds	r3, #1
 80147ce:	77bb      	strb	r3, [r7, #30]
 80147d0:	7fbb      	ldrb	r3, [r7, #30]
 80147d2:	2b02      	cmp	r3, #2
 80147d4:	d9ed      	bls.n	80147b2 <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80147d6:	89b8      	ldrh	r0, [r7, #12]
 80147d8:	693b      	ldr	r3, [r7, #16]
 80147da:	33f0      	adds	r3, #240	; 0xf0
 80147dc:	697a      	ldr	r2, [r7, #20]
 80147de:	4619      	mov	r1, r3
 80147e0:	f000 fefa 	bl	80155d8 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80147e4:	4b20      	ldr	r3, [pc, #128]	; (8014868 <dhcp_rebind+0x12c>)
 80147e6:	6818      	ldr	r0, [r3, #0]
 80147e8:	687b      	ldr	r3, [r7, #4]
 80147ea:	9300      	str	r3, [sp, #0]
 80147ec:	2343      	movs	r3, #67	; 0x43
 80147ee:	4a1f      	ldr	r2, [pc, #124]	; (801486c <dhcp_rebind+0x130>)
 80147f0:	6979      	ldr	r1, [r7, #20]
 80147f2:	f7fe fdad 	bl	8013350 <udp_sendto_if>
 80147f6:	4603      	mov	r3, r0
 80147f8:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80147fa:	6978      	ldr	r0, [r7, #20]
 80147fc:	f7f7 ff0c 	bl	800c618 <pbuf_free>
 8014800:	e001      	b.n	8014806 <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8014802:	23ff      	movs	r3, #255	; 0xff
 8014804:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8014806:	69bb      	ldr	r3, [r7, #24]
 8014808:	799b      	ldrb	r3, [r3, #6]
 801480a:	2bff      	cmp	r3, #255	; 0xff
 801480c:	d005      	beq.n	801481a <dhcp_rebind+0xde>
    dhcp->tries++;
 801480e:	69bb      	ldr	r3, [r7, #24]
 8014810:	799b      	ldrb	r3, [r3, #6]
 8014812:	3301      	adds	r3, #1
 8014814:	b2da      	uxtb	r2, r3
 8014816:	69bb      	ldr	r3, [r7, #24]
 8014818:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 801481a:	69bb      	ldr	r3, [r7, #24]
 801481c:	799b      	ldrb	r3, [r3, #6]
 801481e:	2b09      	cmp	r3, #9
 8014820:	d80a      	bhi.n	8014838 <dhcp_rebind+0xfc>
 8014822:	69bb      	ldr	r3, [r7, #24]
 8014824:	799b      	ldrb	r3, [r3, #6]
 8014826:	b29b      	uxth	r3, r3
 8014828:	461a      	mov	r2, r3
 801482a:	0152      	lsls	r2, r2, #5
 801482c:	1ad2      	subs	r2, r2, r3
 801482e:	0092      	lsls	r2, r2, #2
 8014830:	4413      	add	r3, r2
 8014832:	00db      	lsls	r3, r3, #3
 8014834:	b29b      	uxth	r3, r3
 8014836:	e001      	b.n	801483c <dhcp_rebind+0x100>
 8014838:	f242 7310 	movw	r3, #10000	; 0x2710
 801483c:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801483e:	89fb      	ldrh	r3, [r7, #14]
 8014840:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8014844:	4a0a      	ldr	r2, [pc, #40]	; (8014870 <dhcp_rebind+0x134>)
 8014846:	fb82 1203 	smull	r1, r2, r2, r3
 801484a:	1152      	asrs	r2, r2, #5
 801484c:	17db      	asrs	r3, r3, #31
 801484e:	1ad3      	subs	r3, r2, r3
 8014850:	b29a      	uxth	r2, r3
 8014852:	69bb      	ldr	r3, [r7, #24]
 8014854:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8014856:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801485a:	4618      	mov	r0, r3
 801485c:	3720      	adds	r7, #32
 801485e:	46bd      	mov	sp, r7
 8014860:	bd80      	pop	{r7, pc}
 8014862:	bf00      	nop
 8014864:	20000030 	.word	0x20000030
 8014868:	20010e00 	.word	0x20010e00
 801486c:	08027064 	.word	0x08027064
 8014870:	10624dd3 	.word	0x10624dd3

08014874 <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 8014874:	b5b0      	push	{r4, r5, r7, lr}
 8014876:	b08a      	sub	sp, #40	; 0x28
 8014878:	af02      	add	r7, sp, #8
 801487a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801487c:	687b      	ldr	r3, [r7, #4]
 801487e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014880:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 8014882:	2103      	movs	r1, #3
 8014884:	69b8      	ldr	r0, [r7, #24]
 8014886:	f000 f945 	bl	8014b14 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801488a:	f107 030c 	add.w	r3, r7, #12
 801488e:	2203      	movs	r2, #3
 8014890:	69b9      	ldr	r1, [r7, #24]
 8014892:	6878      	ldr	r0, [r7, #4]
 8014894:	f000 fdca 	bl	801542c <dhcp_create_msg>
 8014898:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801489a:	697b      	ldr	r3, [r7, #20]
 801489c:	2b00      	cmp	r3, #0
 801489e:	d066      	beq.n	801496e <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80148a0:	697b      	ldr	r3, [r7, #20]
 80148a2:	685b      	ldr	r3, [r3, #4]
 80148a4:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80148a6:	89b8      	ldrh	r0, [r7, #12]
 80148a8:	693b      	ldr	r3, [r7, #16]
 80148aa:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80148ae:	2302      	movs	r3, #2
 80148b0:	2239      	movs	r2, #57	; 0x39
 80148b2:	f000 f949 	bl	8014b48 <dhcp_option>
 80148b6:	4603      	mov	r3, r0
 80148b8:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 80148ba:	89b8      	ldrh	r0, [r7, #12]
 80148bc:	693b      	ldr	r3, [r7, #16]
 80148be:	33f0      	adds	r3, #240	; 0xf0
 80148c0:	f44f 7210 	mov.w	r2, #576	; 0x240
 80148c4:	4619      	mov	r1, r3
 80148c6:	f000 f999 	bl	8014bfc <dhcp_option_short>
 80148ca:	4603      	mov	r3, r0
 80148cc:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 80148ce:	89b8      	ldrh	r0, [r7, #12]
 80148d0:	693b      	ldr	r3, [r7, #16]
 80148d2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80148d6:	2304      	movs	r3, #4
 80148d8:	2232      	movs	r2, #50	; 0x32
 80148da:	f000 f935 	bl	8014b48 <dhcp_option>
 80148de:	4603      	mov	r3, r0
 80148e0:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 80148e2:	89bc      	ldrh	r4, [r7, #12]
 80148e4:	693b      	ldr	r3, [r7, #16]
 80148e6:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 80148ea:	69bb      	ldr	r3, [r7, #24]
 80148ec:	69db      	ldr	r3, [r3, #28]
 80148ee:	4618      	mov	r0, r3
 80148f0:	f7f6 fa73 	bl	800adda <lwip_htonl>
 80148f4:	4603      	mov	r3, r0
 80148f6:	461a      	mov	r2, r3
 80148f8:	4629      	mov	r1, r5
 80148fa:	4620      	mov	r0, r4
 80148fc:	f000 f9b0 	bl	8014c60 <dhcp_option_long>
 8014900:	4603      	mov	r3, r0
 8014902:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8014904:	89b8      	ldrh	r0, [r7, #12]
 8014906:	693b      	ldr	r3, [r7, #16]
 8014908:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801490c:	2303      	movs	r3, #3
 801490e:	2237      	movs	r2, #55	; 0x37
 8014910:	f000 f91a 	bl	8014b48 <dhcp_option>
 8014914:	4603      	mov	r3, r0
 8014916:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8014918:	2300      	movs	r3, #0
 801491a:	77bb      	strb	r3, [r7, #30]
 801491c:	e00e      	b.n	801493c <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801491e:	89b8      	ldrh	r0, [r7, #12]
 8014920:	693b      	ldr	r3, [r7, #16]
 8014922:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014926:	7fbb      	ldrb	r3, [r7, #30]
 8014928:	4a29      	ldr	r2, [pc, #164]	; (80149d0 <dhcp_reboot+0x15c>)
 801492a:	5cd3      	ldrb	r3, [r2, r3]
 801492c:	461a      	mov	r2, r3
 801492e:	f000 f93f 	bl	8014bb0 <dhcp_option_byte>
 8014932:	4603      	mov	r3, r0
 8014934:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8014936:	7fbb      	ldrb	r3, [r7, #30]
 8014938:	3301      	adds	r3, #1
 801493a:	77bb      	strb	r3, [r7, #30]
 801493c:	7fbb      	ldrb	r3, [r7, #30]
 801493e:	2b02      	cmp	r3, #2
 8014940:	d9ed      	bls.n	801491e <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8014942:	89b8      	ldrh	r0, [r7, #12]
 8014944:	693b      	ldr	r3, [r7, #16]
 8014946:	33f0      	adds	r3, #240	; 0xf0
 8014948:	697a      	ldr	r2, [r7, #20]
 801494a:	4619      	mov	r1, r3
 801494c:	f000 fe44 	bl	80155d8 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8014950:	4b20      	ldr	r3, [pc, #128]	; (80149d4 <dhcp_reboot+0x160>)
 8014952:	6818      	ldr	r0, [r3, #0]
 8014954:	687b      	ldr	r3, [r7, #4]
 8014956:	9300      	str	r3, [sp, #0]
 8014958:	2343      	movs	r3, #67	; 0x43
 801495a:	4a1f      	ldr	r2, [pc, #124]	; (80149d8 <dhcp_reboot+0x164>)
 801495c:	6979      	ldr	r1, [r7, #20]
 801495e:	f7fe fcf7 	bl	8013350 <udp_sendto_if>
 8014962:	4603      	mov	r3, r0
 8014964:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8014966:	6978      	ldr	r0, [r7, #20]
 8014968:	f7f7 fe56 	bl	800c618 <pbuf_free>
 801496c:	e001      	b.n	8014972 <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801496e:	23ff      	movs	r3, #255	; 0xff
 8014970:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8014972:	69bb      	ldr	r3, [r7, #24]
 8014974:	799b      	ldrb	r3, [r3, #6]
 8014976:	2bff      	cmp	r3, #255	; 0xff
 8014978:	d005      	beq.n	8014986 <dhcp_reboot+0x112>
    dhcp->tries++;
 801497a:	69bb      	ldr	r3, [r7, #24]
 801497c:	799b      	ldrb	r3, [r3, #6]
 801497e:	3301      	adds	r3, #1
 8014980:	b2da      	uxtb	r2, r3
 8014982:	69bb      	ldr	r3, [r7, #24]
 8014984:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8014986:	69bb      	ldr	r3, [r7, #24]
 8014988:	799b      	ldrb	r3, [r3, #6]
 801498a:	2b09      	cmp	r3, #9
 801498c:	d80a      	bhi.n	80149a4 <dhcp_reboot+0x130>
 801498e:	69bb      	ldr	r3, [r7, #24]
 8014990:	799b      	ldrb	r3, [r3, #6]
 8014992:	b29b      	uxth	r3, r3
 8014994:	461a      	mov	r2, r3
 8014996:	0152      	lsls	r2, r2, #5
 8014998:	1ad2      	subs	r2, r2, r3
 801499a:	0092      	lsls	r2, r2, #2
 801499c:	4413      	add	r3, r2
 801499e:	00db      	lsls	r3, r3, #3
 80149a0:	b29b      	uxth	r3, r3
 80149a2:	e001      	b.n	80149a8 <dhcp_reboot+0x134>
 80149a4:	f242 7310 	movw	r3, #10000	; 0x2710
 80149a8:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80149aa:	89fb      	ldrh	r3, [r7, #14]
 80149ac:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80149b0:	4a0a      	ldr	r2, [pc, #40]	; (80149dc <dhcp_reboot+0x168>)
 80149b2:	fb82 1203 	smull	r1, r2, r2, r3
 80149b6:	1152      	asrs	r2, r2, #5
 80149b8:	17db      	asrs	r3, r3, #31
 80149ba:	1ad3      	subs	r3, r2, r3
 80149bc:	b29a      	uxth	r2, r3
 80149be:	69bb      	ldr	r3, [r7, #24]
 80149c0:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80149c2:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80149c6:	4618      	mov	r0, r3
 80149c8:	3720      	adds	r7, #32
 80149ca:	46bd      	mov	sp, r7
 80149cc:	bdb0      	pop	{r4, r5, r7, pc}
 80149ce:	bf00      	nop
 80149d0:	20000030 	.word	0x20000030
 80149d4:	20010e00 	.word	0x20010e00
 80149d8:	08027064 	.word	0x08027064
 80149dc:	10624dd3 	.word	0x10624dd3

080149e0 <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 80149e0:	b5b0      	push	{r4, r5, r7, lr}
 80149e2:	b08a      	sub	sp, #40	; 0x28
 80149e4:	af02      	add	r7, sp, #8
 80149e6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80149e8:	687b      	ldr	r3, [r7, #4]
 80149ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80149ec:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 80149ee:	69fb      	ldr	r3, [r7, #28]
 80149f0:	2b00      	cmp	r3, #0
 80149f2:	f000 8084 	beq.w	8014afe <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 80149f6:	69fb      	ldr	r3, [r7, #28]
 80149f8:	795b      	ldrb	r3, [r3, #5]
 80149fa:	2b00      	cmp	r3, #0
 80149fc:	f000 8081 	beq.w	8014b02 <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 8014a00:	69fb      	ldr	r3, [r7, #28]
 8014a02:	699b      	ldr	r3, [r3, #24]
 8014a04:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 8014a06:	69fb      	ldr	r3, [r7, #28]
 8014a08:	2200      	movs	r2, #0
 8014a0a:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 8014a0c:	69fb      	ldr	r3, [r7, #28]
 8014a0e:	2200      	movs	r2, #0
 8014a10:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8014a12:	69fb      	ldr	r3, [r7, #28]
 8014a14:	2200      	movs	r2, #0
 8014a16:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8014a18:	69fb      	ldr	r3, [r7, #28]
 8014a1a:	2200      	movs	r2, #0
 8014a1c:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 8014a1e:	69fb      	ldr	r3, [r7, #28]
 8014a20:	2200      	movs	r2, #0
 8014a22:	631a      	str	r2, [r3, #48]	; 0x30
 8014a24:	69fb      	ldr	r3, [r7, #28]
 8014a26:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8014a28:	69fb      	ldr	r3, [r7, #28]
 8014a2a:	62da      	str	r2, [r3, #44]	; 0x2c
 8014a2c:	69fb      	ldr	r3, [r7, #28]
 8014a2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014a30:	69fb      	ldr	r3, [r7, #28]
 8014a32:	629a      	str	r2, [r3, #40]	; 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 8014a34:	69fb      	ldr	r3, [r7, #28]
 8014a36:	2200      	movs	r2, #0
 8014a38:	829a      	strh	r2, [r3, #20]
 8014a3a:	69fb      	ldr	r3, [r7, #28]
 8014a3c:	8a9a      	ldrh	r2, [r3, #20]
 8014a3e:	69fb      	ldr	r3, [r7, #28]
 8014a40:	825a      	strh	r2, [r3, #18]
 8014a42:	69fb      	ldr	r3, [r7, #28]
 8014a44:	8a5a      	ldrh	r2, [r3, #18]
 8014a46:	69fb      	ldr	r3, [r7, #28]
 8014a48:	821a      	strh	r2, [r3, #16]
 8014a4a:	69fb      	ldr	r3, [r7, #28]
 8014a4c:	8a1a      	ldrh	r2, [r3, #16]
 8014a4e:	69fb      	ldr	r3, [r7, #28]
 8014a50:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 8014a52:	6878      	ldr	r0, [r7, #4]
 8014a54:	f000 fdee 	bl	8015634 <dhcp_supplied_address>
 8014a58:	4603      	mov	r3, r0
 8014a5a:	2b00      	cmp	r3, #0
 8014a5c:	d03b      	beq.n	8014ad6 <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 8014a5e:	f107 030e 	add.w	r3, r7, #14
 8014a62:	2207      	movs	r2, #7
 8014a64:	69f9      	ldr	r1, [r7, #28]
 8014a66:	6878      	ldr	r0, [r7, #4]
 8014a68:	f000 fce0 	bl	801542c <dhcp_create_msg>
 8014a6c:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 8014a6e:	69bb      	ldr	r3, [r7, #24]
 8014a70:	2b00      	cmp	r3, #0
 8014a72:	d030      	beq.n	8014ad6 <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8014a74:	69bb      	ldr	r3, [r7, #24]
 8014a76:	685b      	ldr	r3, [r3, #4]
 8014a78:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8014a7a:	89f8      	ldrh	r0, [r7, #14]
 8014a7c:	697b      	ldr	r3, [r7, #20]
 8014a7e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014a82:	2304      	movs	r3, #4
 8014a84:	2236      	movs	r2, #54	; 0x36
 8014a86:	f000 f85f 	bl	8014b48 <dhcp_option>
 8014a8a:	4603      	mov	r3, r0
 8014a8c:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 8014a8e:	89fc      	ldrh	r4, [r7, #14]
 8014a90:	697b      	ldr	r3, [r7, #20]
 8014a92:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8014a96:	693b      	ldr	r3, [r7, #16]
 8014a98:	4618      	mov	r0, r3
 8014a9a:	f7f6 f99e 	bl	800adda <lwip_htonl>
 8014a9e:	4603      	mov	r3, r0
 8014aa0:	461a      	mov	r2, r3
 8014aa2:	4629      	mov	r1, r5
 8014aa4:	4620      	mov	r0, r4
 8014aa6:	f000 f8db 	bl	8014c60 <dhcp_option_long>
 8014aaa:	4603      	mov	r3, r0
 8014aac:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8014aae:	89f8      	ldrh	r0, [r7, #14]
 8014ab0:	697b      	ldr	r3, [r7, #20]
 8014ab2:	33f0      	adds	r3, #240	; 0xf0
 8014ab4:	69ba      	ldr	r2, [r7, #24]
 8014ab6:	4619      	mov	r1, r3
 8014ab8:	f000 fd8e 	bl	80155d8 <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8014abc:	4b13      	ldr	r3, [pc, #76]	; (8014b0c <dhcp_release_and_stop+0x12c>)
 8014abe:	6818      	ldr	r0, [r3, #0]
 8014ac0:	f107 0210 	add.w	r2, r7, #16
 8014ac4:	687b      	ldr	r3, [r7, #4]
 8014ac6:	9300      	str	r3, [sp, #0]
 8014ac8:	2343      	movs	r3, #67	; 0x43
 8014aca:	69b9      	ldr	r1, [r7, #24]
 8014acc:	f7fe fc40 	bl	8013350 <udp_sendto_if>
      pbuf_free(p_out);
 8014ad0:	69b8      	ldr	r0, [r7, #24]
 8014ad2:	f7f7 fda1 	bl	800c618 <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8014ad6:	4b0e      	ldr	r3, [pc, #56]	; (8014b10 <dhcp_release_and_stop+0x130>)
 8014ad8:	4a0d      	ldr	r2, [pc, #52]	; (8014b10 <dhcp_release_and_stop+0x130>)
 8014ada:	490d      	ldr	r1, [pc, #52]	; (8014b10 <dhcp_release_and_stop+0x130>)
 8014adc:	6878      	ldr	r0, [r7, #4]
 8014ade:	f7f7 f88d 	bl	800bbfc <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 8014ae2:	2100      	movs	r1, #0
 8014ae4:	69f8      	ldr	r0, [r7, #28]
 8014ae6:	f000 f815 	bl	8014b14 <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 8014aea:	69fb      	ldr	r3, [r7, #28]
 8014aec:	791b      	ldrb	r3, [r3, #4]
 8014aee:	2b00      	cmp	r3, #0
 8014af0:	d008      	beq.n	8014b04 <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8014af2:	f7fe ff85 	bl	8013a00 <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 8014af6:	69fb      	ldr	r3, [r7, #28]
 8014af8:	2200      	movs	r2, #0
 8014afa:	711a      	strb	r2, [r3, #4]
 8014afc:	e002      	b.n	8014b04 <dhcp_release_and_stop+0x124>
    return;
 8014afe:	bf00      	nop
 8014b00:	e000      	b.n	8014b04 <dhcp_release_and_stop+0x124>
    return;
 8014b02:	bf00      	nop
  }
}
 8014b04:	3720      	adds	r7, #32
 8014b06:	46bd      	mov	sp, r7
 8014b08:	bdb0      	pop	{r4, r5, r7, pc}
 8014b0a:	bf00      	nop
 8014b0c:	20010e00 	.word	0x20010e00
 8014b10:	08027060 	.word	0x08027060

08014b14 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 8014b14:	b480      	push	{r7}
 8014b16:	b083      	sub	sp, #12
 8014b18:	af00      	add	r7, sp, #0
 8014b1a:	6078      	str	r0, [r7, #4]
 8014b1c:	460b      	mov	r3, r1
 8014b1e:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 8014b20:	687b      	ldr	r3, [r7, #4]
 8014b22:	795b      	ldrb	r3, [r3, #5]
 8014b24:	78fa      	ldrb	r2, [r7, #3]
 8014b26:	429a      	cmp	r2, r3
 8014b28:	d008      	beq.n	8014b3c <dhcp_set_state+0x28>
    dhcp->state = new_state;
 8014b2a:	687b      	ldr	r3, [r7, #4]
 8014b2c:	78fa      	ldrb	r2, [r7, #3]
 8014b2e:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 8014b30:	687b      	ldr	r3, [r7, #4]
 8014b32:	2200      	movs	r2, #0
 8014b34:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 8014b36:	687b      	ldr	r3, [r7, #4]
 8014b38:	2200      	movs	r2, #0
 8014b3a:	811a      	strh	r2, [r3, #8]
  }
}
 8014b3c:	bf00      	nop
 8014b3e:	370c      	adds	r7, #12
 8014b40:	46bd      	mov	sp, r7
 8014b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b46:	4770      	bx	lr

08014b48 <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 8014b48:	b580      	push	{r7, lr}
 8014b4a:	b082      	sub	sp, #8
 8014b4c:	af00      	add	r7, sp, #0
 8014b4e:	6039      	str	r1, [r7, #0]
 8014b50:	4611      	mov	r1, r2
 8014b52:	461a      	mov	r2, r3
 8014b54:	4603      	mov	r3, r0
 8014b56:	80fb      	strh	r3, [r7, #6]
 8014b58:	460b      	mov	r3, r1
 8014b5a:	717b      	strb	r3, [r7, #5]
 8014b5c:	4613      	mov	r3, r2
 8014b5e:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8014b60:	88fa      	ldrh	r2, [r7, #6]
 8014b62:	793b      	ldrb	r3, [r7, #4]
 8014b64:	4413      	add	r3, r2
 8014b66:	3302      	adds	r3, #2
 8014b68:	2b44      	cmp	r3, #68	; 0x44
 8014b6a:	d906      	bls.n	8014b7a <dhcp_option+0x32>
 8014b6c:	4b0d      	ldr	r3, [pc, #52]	; (8014ba4 <dhcp_option+0x5c>)
 8014b6e:	f240 529a 	movw	r2, #1434	; 0x59a
 8014b72:	490d      	ldr	r1, [pc, #52]	; (8014ba8 <dhcp_option+0x60>)
 8014b74:	480d      	ldr	r0, [pc, #52]	; (8014bac <dhcp_option+0x64>)
 8014b76:	f003 fc25 	bl	80183c4 <iprintf>
  options[options_out_len++] = option_type;
 8014b7a:	88fb      	ldrh	r3, [r7, #6]
 8014b7c:	1c5a      	adds	r2, r3, #1
 8014b7e:	80fa      	strh	r2, [r7, #6]
 8014b80:	461a      	mov	r2, r3
 8014b82:	683b      	ldr	r3, [r7, #0]
 8014b84:	4413      	add	r3, r2
 8014b86:	797a      	ldrb	r2, [r7, #5]
 8014b88:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 8014b8a:	88fb      	ldrh	r3, [r7, #6]
 8014b8c:	1c5a      	adds	r2, r3, #1
 8014b8e:	80fa      	strh	r2, [r7, #6]
 8014b90:	461a      	mov	r2, r3
 8014b92:	683b      	ldr	r3, [r7, #0]
 8014b94:	4413      	add	r3, r2
 8014b96:	793a      	ldrb	r2, [r7, #4]
 8014b98:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8014b9a:	88fb      	ldrh	r3, [r7, #6]
}
 8014b9c:	4618      	mov	r0, r3
 8014b9e:	3708      	adds	r7, #8
 8014ba0:	46bd      	mov	sp, r7
 8014ba2:	bd80      	pop	{r7, pc}
 8014ba4:	0801c37c 	.word	0x0801c37c
 8014ba8:	0801c510 	.word	0x0801c510
 8014bac:	0801c3dc 	.word	0x0801c3dc

08014bb0 <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 8014bb0:	b580      	push	{r7, lr}
 8014bb2:	b082      	sub	sp, #8
 8014bb4:	af00      	add	r7, sp, #0
 8014bb6:	4603      	mov	r3, r0
 8014bb8:	6039      	str	r1, [r7, #0]
 8014bba:	80fb      	strh	r3, [r7, #6]
 8014bbc:	4613      	mov	r3, r2
 8014bbe:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8014bc0:	88fb      	ldrh	r3, [r7, #6]
 8014bc2:	2b43      	cmp	r3, #67	; 0x43
 8014bc4:	d906      	bls.n	8014bd4 <dhcp_option_byte+0x24>
 8014bc6:	4b0a      	ldr	r3, [pc, #40]	; (8014bf0 <dhcp_option_byte+0x40>)
 8014bc8:	f240 52a6 	movw	r2, #1446	; 0x5a6
 8014bcc:	4909      	ldr	r1, [pc, #36]	; (8014bf4 <dhcp_option_byte+0x44>)
 8014bce:	480a      	ldr	r0, [pc, #40]	; (8014bf8 <dhcp_option_byte+0x48>)
 8014bd0:	f003 fbf8 	bl	80183c4 <iprintf>
  options[options_out_len++] = value;
 8014bd4:	88fb      	ldrh	r3, [r7, #6]
 8014bd6:	1c5a      	adds	r2, r3, #1
 8014bd8:	80fa      	strh	r2, [r7, #6]
 8014bda:	461a      	mov	r2, r3
 8014bdc:	683b      	ldr	r3, [r7, #0]
 8014bde:	4413      	add	r3, r2
 8014be0:	797a      	ldrb	r2, [r7, #5]
 8014be2:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8014be4:	88fb      	ldrh	r3, [r7, #6]
}
 8014be6:	4618      	mov	r0, r3
 8014be8:	3708      	adds	r7, #8
 8014bea:	46bd      	mov	sp, r7
 8014bec:	bd80      	pop	{r7, pc}
 8014bee:	bf00      	nop
 8014bf0:	0801c37c 	.word	0x0801c37c
 8014bf4:	0801c554 	.word	0x0801c554
 8014bf8:	0801c3dc 	.word	0x0801c3dc

08014bfc <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 8014bfc:	b580      	push	{r7, lr}
 8014bfe:	b082      	sub	sp, #8
 8014c00:	af00      	add	r7, sp, #0
 8014c02:	4603      	mov	r3, r0
 8014c04:	6039      	str	r1, [r7, #0]
 8014c06:	80fb      	strh	r3, [r7, #6]
 8014c08:	4613      	mov	r3, r2
 8014c0a:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8014c0c:	88fb      	ldrh	r3, [r7, #6]
 8014c0e:	3302      	adds	r3, #2
 8014c10:	2b44      	cmp	r3, #68	; 0x44
 8014c12:	d906      	bls.n	8014c22 <dhcp_option_short+0x26>
 8014c14:	4b0f      	ldr	r3, [pc, #60]	; (8014c54 <dhcp_option_short+0x58>)
 8014c16:	f240 52ae 	movw	r2, #1454	; 0x5ae
 8014c1a:	490f      	ldr	r1, [pc, #60]	; (8014c58 <dhcp_option_short+0x5c>)
 8014c1c:	480f      	ldr	r0, [pc, #60]	; (8014c5c <dhcp_option_short+0x60>)
 8014c1e:	f003 fbd1 	bl	80183c4 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 8014c22:	88bb      	ldrh	r3, [r7, #4]
 8014c24:	0a1b      	lsrs	r3, r3, #8
 8014c26:	b29a      	uxth	r2, r3
 8014c28:	88fb      	ldrh	r3, [r7, #6]
 8014c2a:	1c59      	adds	r1, r3, #1
 8014c2c:	80f9      	strh	r1, [r7, #6]
 8014c2e:	4619      	mov	r1, r3
 8014c30:	683b      	ldr	r3, [r7, #0]
 8014c32:	440b      	add	r3, r1
 8014c34:	b2d2      	uxtb	r2, r2
 8014c36:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 8014c38:	88fb      	ldrh	r3, [r7, #6]
 8014c3a:	1c5a      	adds	r2, r3, #1
 8014c3c:	80fa      	strh	r2, [r7, #6]
 8014c3e:	461a      	mov	r2, r3
 8014c40:	683b      	ldr	r3, [r7, #0]
 8014c42:	4413      	add	r3, r2
 8014c44:	88ba      	ldrh	r2, [r7, #4]
 8014c46:	b2d2      	uxtb	r2, r2
 8014c48:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8014c4a:	88fb      	ldrh	r3, [r7, #6]
}
 8014c4c:	4618      	mov	r0, r3
 8014c4e:	3708      	adds	r7, #8
 8014c50:	46bd      	mov	sp, r7
 8014c52:	bd80      	pop	{r7, pc}
 8014c54:	0801c37c 	.word	0x0801c37c
 8014c58:	0801c58c 	.word	0x0801c58c
 8014c5c:	0801c3dc 	.word	0x0801c3dc

08014c60 <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 8014c60:	b580      	push	{r7, lr}
 8014c62:	b084      	sub	sp, #16
 8014c64:	af00      	add	r7, sp, #0
 8014c66:	4603      	mov	r3, r0
 8014c68:	60b9      	str	r1, [r7, #8]
 8014c6a:	607a      	str	r2, [r7, #4]
 8014c6c:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 8014c6e:	89fb      	ldrh	r3, [r7, #14]
 8014c70:	3304      	adds	r3, #4
 8014c72:	2b44      	cmp	r3, #68	; 0x44
 8014c74:	d906      	bls.n	8014c84 <dhcp_option_long+0x24>
 8014c76:	4b19      	ldr	r3, [pc, #100]	; (8014cdc <dhcp_option_long+0x7c>)
 8014c78:	f240 52b7 	movw	r2, #1463	; 0x5b7
 8014c7c:	4918      	ldr	r1, [pc, #96]	; (8014ce0 <dhcp_option_long+0x80>)
 8014c7e:	4819      	ldr	r0, [pc, #100]	; (8014ce4 <dhcp_option_long+0x84>)
 8014c80:	f003 fba0 	bl	80183c4 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 8014c84:	687b      	ldr	r3, [r7, #4]
 8014c86:	0e1a      	lsrs	r2, r3, #24
 8014c88:	89fb      	ldrh	r3, [r7, #14]
 8014c8a:	1c59      	adds	r1, r3, #1
 8014c8c:	81f9      	strh	r1, [r7, #14]
 8014c8e:	4619      	mov	r1, r3
 8014c90:	68bb      	ldr	r3, [r7, #8]
 8014c92:	440b      	add	r3, r1
 8014c94:	b2d2      	uxtb	r2, r2
 8014c96:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 8014c98:	687b      	ldr	r3, [r7, #4]
 8014c9a:	0c1a      	lsrs	r2, r3, #16
 8014c9c:	89fb      	ldrh	r3, [r7, #14]
 8014c9e:	1c59      	adds	r1, r3, #1
 8014ca0:	81f9      	strh	r1, [r7, #14]
 8014ca2:	4619      	mov	r1, r3
 8014ca4:	68bb      	ldr	r3, [r7, #8]
 8014ca6:	440b      	add	r3, r1
 8014ca8:	b2d2      	uxtb	r2, r2
 8014caa:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 8014cac:	687b      	ldr	r3, [r7, #4]
 8014cae:	0a1a      	lsrs	r2, r3, #8
 8014cb0:	89fb      	ldrh	r3, [r7, #14]
 8014cb2:	1c59      	adds	r1, r3, #1
 8014cb4:	81f9      	strh	r1, [r7, #14]
 8014cb6:	4619      	mov	r1, r3
 8014cb8:	68bb      	ldr	r3, [r7, #8]
 8014cba:	440b      	add	r3, r1
 8014cbc:	b2d2      	uxtb	r2, r2
 8014cbe:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 8014cc0:	89fb      	ldrh	r3, [r7, #14]
 8014cc2:	1c5a      	adds	r2, r3, #1
 8014cc4:	81fa      	strh	r2, [r7, #14]
 8014cc6:	461a      	mov	r2, r3
 8014cc8:	68bb      	ldr	r3, [r7, #8]
 8014cca:	4413      	add	r3, r2
 8014ccc:	687a      	ldr	r2, [r7, #4]
 8014cce:	b2d2      	uxtb	r2, r2
 8014cd0:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8014cd2:	89fb      	ldrh	r3, [r7, #14]
}
 8014cd4:	4618      	mov	r0, r3
 8014cd6:	3710      	adds	r7, #16
 8014cd8:	46bd      	mov	sp, r7
 8014cda:	bd80      	pop	{r7, pc}
 8014cdc:	0801c37c 	.word	0x0801c37c
 8014ce0:	0801c5c8 	.word	0x0801c5c8
 8014ce4:	0801c3dc 	.word	0x0801c3dc

08014ce8 <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 8014ce8:	b580      	push	{r7, lr}
 8014cea:	b090      	sub	sp, #64	; 0x40
 8014cec:	af00      	add	r7, sp, #0
 8014cee:	6078      	str	r0, [r7, #4]
 8014cf0:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 8014cf2:	2300      	movs	r3, #0
 8014cf4:	62fb      	str	r3, [r7, #44]	; 0x2c
  int parse_sname_as_options = 0;
 8014cf6:	2300      	movs	r3, #0
 8014cf8:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 8014cfa:	2208      	movs	r2, #8
 8014cfc:	2100      	movs	r1, #0
 8014cfe:	48b5      	ldr	r0, [pc, #724]	; (8014fd4 <dhcp_parse_reply+0x2ec>)
 8014d00:	f003 fac3 	bl	801828a <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 8014d04:	687b      	ldr	r3, [r7, #4]
 8014d06:	895b      	ldrh	r3, [r3, #10]
 8014d08:	2b2b      	cmp	r3, #43	; 0x2b
 8014d0a:	d802      	bhi.n	8014d12 <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 8014d0c:	f06f 0301 	mvn.w	r3, #1
 8014d10:	e2a7      	b.n	8015262 <dhcp_parse_reply+0x57a>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 8014d12:	687b      	ldr	r3, [r7, #4]
 8014d14:	685b      	ldr	r3, [r3, #4]
 8014d16:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 8014d18:	23f0      	movs	r3, #240	; 0xf0
 8014d1a:	86fb      	strh	r3, [r7, #54]	; 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 8014d1c:	687b      	ldr	r3, [r7, #4]
 8014d1e:	891b      	ldrh	r3, [r3, #8]
 8014d20:	86bb      	strh	r3, [r7, #52]	; 0x34
again:
  q = p;
 8014d22:	687b      	ldr	r3, [r7, #4]
 8014d24:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 8014d26:	e00c      	b.n	8014d42 <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 8014d28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014d2a:	895b      	ldrh	r3, [r3, #10]
 8014d2c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8014d2e:	1ad3      	subs	r3, r2, r3
 8014d30:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 8014d32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014d34:	895b      	ldrh	r3, [r3, #10]
 8014d36:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8014d38:	1ad3      	subs	r3, r2, r3
 8014d3a:	86bb      	strh	r3, [r7, #52]	; 0x34
    q = q->next;
 8014d3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014d3e:	681b      	ldr	r3, [r3, #0]
 8014d40:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 8014d42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014d44:	2b00      	cmp	r3, #0
 8014d46:	d004      	beq.n	8014d52 <dhcp_parse_reply+0x6a>
 8014d48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014d4a:	895b      	ldrh	r3, [r3, #10]
 8014d4c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8014d4e:	429a      	cmp	r2, r3
 8014d50:	d2ea      	bcs.n	8014d28 <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 8014d52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014d54:	2b00      	cmp	r3, #0
 8014d56:	d102      	bne.n	8014d5e <dhcp_parse_reply+0x76>
    return ERR_BUF;
 8014d58:	f06f 0301 	mvn.w	r3, #1
 8014d5c:	e281      	b.n	8015262 <dhcp_parse_reply+0x57a>
  }
  offset = options_idx;
 8014d5e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8014d60:	877b      	strh	r3, [r7, #58]	; 0x3a
  offset_max = options_idx_max;
 8014d62:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8014d64:	873b      	strh	r3, [r7, #56]	; 0x38
  options = (u8_t *)q->payload;
 8014d66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014d68:	685b      	ldr	r3, [r3, #4]
 8014d6a:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8014d6c:	e239      	b.n	80151e2 <dhcp_parse_reply+0x4fa>
    u8_t op = options[offset];
 8014d6e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8014d70:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8014d72:	4413      	add	r3, r2
 8014d74:	781b      	ldrb	r3, [r3, #0]
 8014d76:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 8014d78:	2300      	movs	r3, #0
 8014d7a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    int decode_idx = -1;
 8014d7e:	f04f 33ff 	mov.w	r3, #4294967295
 8014d82:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 8014d84:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8014d86:	3302      	adds	r3, #2
 8014d88:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 8014d8a:	8bfa      	ldrh	r2, [r7, #30]
 8014d8c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8014d8e:	429a      	cmp	r2, r3
 8014d90:	d202      	bcs.n	8014d98 <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 8014d92:	f06f 0301 	mvn.w	r3, #1
 8014d96:	e264      	b.n	8015262 <dhcp_parse_reply+0x57a>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 8014d98:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8014d9a:	3301      	adds	r3, #1
 8014d9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014d9e:	8952      	ldrh	r2, [r2, #10]
 8014da0:	4293      	cmp	r3, r2
 8014da2:	da07      	bge.n	8014db4 <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 8014da4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8014da6:	3301      	adds	r3, #1
 8014da8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8014daa:	4413      	add	r3, r2
 8014dac:	781b      	ldrb	r3, [r3, #0]
 8014dae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8014db2:	e00b      	b.n	8014dcc <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 8014db4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014db6:	681b      	ldr	r3, [r3, #0]
 8014db8:	2b00      	cmp	r3, #0
 8014dba:	d004      	beq.n	8014dc6 <dhcp_parse_reply+0xde>
 8014dbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014dbe:	681b      	ldr	r3, [r3, #0]
 8014dc0:	685b      	ldr	r3, [r3, #4]
 8014dc2:	781b      	ldrb	r3, [r3, #0]
 8014dc4:	e000      	b.n	8014dc8 <dhcp_parse_reply+0xe0>
 8014dc6:	2300      	movs	r3, #0
 8014dc8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 8014dcc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014dd0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    switch (op) {
 8014dd4:	7dfb      	ldrb	r3, [r7, #23]
 8014dd6:	2b3b      	cmp	r3, #59	; 0x3b
 8014dd8:	f200 812c 	bhi.w	8015034 <dhcp_parse_reply+0x34c>
 8014ddc:	a201      	add	r2, pc, #4	; (adr r2, 8014de4 <dhcp_parse_reply+0xfc>)
 8014dde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014de2:	bf00      	nop
 8014de4:	08014ed5 	.word	0x08014ed5
 8014de8:	08014ee5 	.word	0x08014ee5
 8014dec:	08015035 	.word	0x08015035
 8014df0:	08014f07 	.word	0x08014f07
 8014df4:	08015035 	.word	0x08015035
 8014df8:	08015035 	.word	0x08015035
 8014dfc:	08015035 	.word	0x08015035
 8014e00:	08015035 	.word	0x08015035
 8014e04:	08015035 	.word	0x08015035
 8014e08:	08015035 	.word	0x08015035
 8014e0c:	08015035 	.word	0x08015035
 8014e10:	08015035 	.word	0x08015035
 8014e14:	08015035 	.word	0x08015035
 8014e18:	08015035 	.word	0x08015035
 8014e1c:	08015035 	.word	0x08015035
 8014e20:	08015035 	.word	0x08015035
 8014e24:	08015035 	.word	0x08015035
 8014e28:	08015035 	.word	0x08015035
 8014e2c:	08015035 	.word	0x08015035
 8014e30:	08015035 	.word	0x08015035
 8014e34:	08015035 	.word	0x08015035
 8014e38:	08015035 	.word	0x08015035
 8014e3c:	08015035 	.word	0x08015035
 8014e40:	08015035 	.word	0x08015035
 8014e44:	08015035 	.word	0x08015035
 8014e48:	08015035 	.word	0x08015035
 8014e4c:	08015035 	.word	0x08015035
 8014e50:	08015035 	.word	0x08015035
 8014e54:	08015035 	.word	0x08015035
 8014e58:	08015035 	.word	0x08015035
 8014e5c:	08015035 	.word	0x08015035
 8014e60:	08015035 	.word	0x08015035
 8014e64:	08015035 	.word	0x08015035
 8014e68:	08015035 	.word	0x08015035
 8014e6c:	08015035 	.word	0x08015035
 8014e70:	08015035 	.word	0x08015035
 8014e74:	08015035 	.word	0x08015035
 8014e78:	08015035 	.word	0x08015035
 8014e7c:	08015035 	.word	0x08015035
 8014e80:	08015035 	.word	0x08015035
 8014e84:	08015035 	.word	0x08015035
 8014e88:	08015035 	.word	0x08015035
 8014e8c:	08015035 	.word	0x08015035
 8014e90:	08015035 	.word	0x08015035
 8014e94:	08015035 	.word	0x08015035
 8014e98:	08015035 	.word	0x08015035
 8014e9c:	08015035 	.word	0x08015035
 8014ea0:	08015035 	.word	0x08015035
 8014ea4:	08015035 	.word	0x08015035
 8014ea8:	08015035 	.word	0x08015035
 8014eac:	08015035 	.word	0x08015035
 8014eb0:	08014f33 	.word	0x08014f33
 8014eb4:	08014f55 	.word	0x08014f55
 8014eb8:	08014f91 	.word	0x08014f91
 8014ebc:	08014fb3 	.word	0x08014fb3
 8014ec0:	08015035 	.word	0x08015035
 8014ec4:	08015035 	.word	0x08015035
 8014ec8:	08015035 	.word	0x08015035
 8014ecc:	08014ff1 	.word	0x08014ff1
 8014ed0:	08015013 	.word	0x08015013
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 8014ed4:	2300      	movs	r3, #0
 8014ed6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8014eda:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014ede:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        /* will be increased below */
        break;
 8014ee2:	e0ab      	b.n	801503c <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8014ee4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014ee8:	2b04      	cmp	r3, #4
 8014eea:	d009      	beq.n	8014f00 <dhcp_parse_reply+0x218>
 8014eec:	4b3a      	ldr	r3, [pc, #232]	; (8014fd8 <dhcp_parse_reply+0x2f0>)
 8014eee:	f240 622e 	movw	r2, #1582	; 0x62e
 8014ef2:	493a      	ldr	r1, [pc, #232]	; (8014fdc <dhcp_parse_reply+0x2f4>)
 8014ef4:	483a      	ldr	r0, [pc, #232]	; (8014fe0 <dhcp_parse_reply+0x2f8>)
 8014ef6:	f003 fa65 	bl	80183c4 <iprintf>
 8014efa:	f06f 0305 	mvn.w	r3, #5
 8014efe:	e1b0      	b.n	8015262 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 8014f00:	2306      	movs	r3, #6
 8014f02:	623b      	str	r3, [r7, #32]
        break;
 8014f04:	e09a      	b.n	801503c <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 8014f06:	2304      	movs	r3, #4
 8014f08:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 8014f0c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8014f10:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8014f14:	429a      	cmp	r2, r3
 8014f16:	d209      	bcs.n	8014f2c <dhcp_parse_reply+0x244>
 8014f18:	4b2f      	ldr	r3, [pc, #188]	; (8014fd8 <dhcp_parse_reply+0x2f0>)
 8014f1a:	f240 6233 	movw	r2, #1587	; 0x633
 8014f1e:	4931      	ldr	r1, [pc, #196]	; (8014fe4 <dhcp_parse_reply+0x2fc>)
 8014f20:	482f      	ldr	r0, [pc, #188]	; (8014fe0 <dhcp_parse_reply+0x2f8>)
 8014f22:	f003 fa4f 	bl	80183c4 <iprintf>
 8014f26:	f06f 0305 	mvn.w	r3, #5
 8014f2a:	e19a      	b.n	8015262 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 8014f2c:	2307      	movs	r3, #7
 8014f2e:	623b      	str	r3, [r7, #32]
        break;
 8014f30:	e084      	b.n	801503c <dhcp_parse_reply+0x354>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8014f32:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014f36:	2b04      	cmp	r3, #4
 8014f38:	d009      	beq.n	8014f4e <dhcp_parse_reply+0x266>
 8014f3a:	4b27      	ldr	r3, [pc, #156]	; (8014fd8 <dhcp_parse_reply+0x2f0>)
 8014f3c:	f240 6241 	movw	r2, #1601	; 0x641
 8014f40:	4926      	ldr	r1, [pc, #152]	; (8014fdc <dhcp_parse_reply+0x2f4>)
 8014f42:	4827      	ldr	r0, [pc, #156]	; (8014fe0 <dhcp_parse_reply+0x2f8>)
 8014f44:	f003 fa3e 	bl	80183c4 <iprintf>
 8014f48:	f06f 0305 	mvn.w	r3, #5
 8014f4c:	e189      	b.n	8015262 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 8014f4e:	2303      	movs	r3, #3
 8014f50:	623b      	str	r3, [r7, #32]
        break;
 8014f52:	e073      	b.n	801503c <dhcp_parse_reply+0x354>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8014f54:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014f58:	2b01      	cmp	r3, #1
 8014f5a:	d009      	beq.n	8014f70 <dhcp_parse_reply+0x288>
 8014f5c:	4b1e      	ldr	r3, [pc, #120]	; (8014fd8 <dhcp_parse_reply+0x2f0>)
 8014f5e:	f240 624f 	movw	r2, #1615	; 0x64f
 8014f62:	4921      	ldr	r1, [pc, #132]	; (8014fe8 <dhcp_parse_reply+0x300>)
 8014f64:	481e      	ldr	r0, [pc, #120]	; (8014fe0 <dhcp_parse_reply+0x2f8>)
 8014f66:	f003 fa2d 	bl	80183c4 <iprintf>
 8014f6a:	f06f 0305 	mvn.w	r3, #5
 8014f6e:	e178      	b.n	8015262 <dhcp_parse_reply+0x57a>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 8014f70:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8014f72:	2bf0      	cmp	r3, #240	; 0xf0
 8014f74:	d009      	beq.n	8014f8a <dhcp_parse_reply+0x2a2>
 8014f76:	4b18      	ldr	r3, [pc, #96]	; (8014fd8 <dhcp_parse_reply+0x2f0>)
 8014f78:	f240 6251 	movw	r2, #1617	; 0x651
 8014f7c:	491b      	ldr	r1, [pc, #108]	; (8014fec <dhcp_parse_reply+0x304>)
 8014f7e:	4818      	ldr	r0, [pc, #96]	; (8014fe0 <dhcp_parse_reply+0x2f8>)
 8014f80:	f003 fa20 	bl	80183c4 <iprintf>
 8014f84:	f06f 0305 	mvn.w	r3, #5
 8014f88:	e16b      	b.n	8015262 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 8014f8a:	2300      	movs	r3, #0
 8014f8c:	623b      	str	r3, [r7, #32]
        break;
 8014f8e:	e055      	b.n	801503c <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8014f90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014f94:	2b01      	cmp	r3, #1
 8014f96:	d009      	beq.n	8014fac <dhcp_parse_reply+0x2c4>
 8014f98:	4b0f      	ldr	r3, [pc, #60]	; (8014fd8 <dhcp_parse_reply+0x2f0>)
 8014f9a:	f240 6255 	movw	r2, #1621	; 0x655
 8014f9e:	4912      	ldr	r1, [pc, #72]	; (8014fe8 <dhcp_parse_reply+0x300>)
 8014fa0:	480f      	ldr	r0, [pc, #60]	; (8014fe0 <dhcp_parse_reply+0x2f8>)
 8014fa2:	f003 fa0f 	bl	80183c4 <iprintf>
 8014fa6:	f06f 0305 	mvn.w	r3, #5
 8014faa:	e15a      	b.n	8015262 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 8014fac:	2301      	movs	r3, #1
 8014fae:	623b      	str	r3, [r7, #32]
        break;
 8014fb0:	e044      	b.n	801503c <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8014fb2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014fb6:	2b04      	cmp	r3, #4
 8014fb8:	d009      	beq.n	8014fce <dhcp_parse_reply+0x2e6>
 8014fba:	4b07      	ldr	r3, [pc, #28]	; (8014fd8 <dhcp_parse_reply+0x2f0>)
 8014fbc:	f240 6259 	movw	r2, #1625	; 0x659
 8014fc0:	4906      	ldr	r1, [pc, #24]	; (8014fdc <dhcp_parse_reply+0x2f4>)
 8014fc2:	4807      	ldr	r0, [pc, #28]	; (8014fe0 <dhcp_parse_reply+0x2f8>)
 8014fc4:	f003 f9fe 	bl	80183c4 <iprintf>
 8014fc8:	f06f 0305 	mvn.w	r3, #5
 8014fcc:	e149      	b.n	8015262 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 8014fce:	2302      	movs	r3, #2
 8014fd0:	623b      	str	r3, [r7, #32]
        break;
 8014fd2:	e033      	b.n	801503c <dhcp_parse_reply+0x354>
 8014fd4:	20010df8 	.word	0x20010df8
 8014fd8:	0801c37c 	.word	0x0801c37c
 8014fdc:	0801c604 	.word	0x0801c604
 8014fe0:	0801c3dc 	.word	0x0801c3dc
 8014fe4:	0801c610 	.word	0x0801c610
 8014fe8:	0801c624 	.word	0x0801c624
 8014fec:	0801c630 	.word	0x0801c630
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8014ff0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014ff4:	2b04      	cmp	r3, #4
 8014ff6:	d009      	beq.n	801500c <dhcp_parse_reply+0x324>
 8014ff8:	4b9c      	ldr	r3, [pc, #624]	; (801526c <dhcp_parse_reply+0x584>)
 8014ffa:	f240 625d 	movw	r2, #1629	; 0x65d
 8014ffe:	499c      	ldr	r1, [pc, #624]	; (8015270 <dhcp_parse_reply+0x588>)
 8015000:	489c      	ldr	r0, [pc, #624]	; (8015274 <dhcp_parse_reply+0x58c>)
 8015002:	f003 f9df 	bl	80183c4 <iprintf>
 8015006:	f06f 0305 	mvn.w	r3, #5
 801500a:	e12a      	b.n	8015262 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_T1;
 801500c:	2304      	movs	r3, #4
 801500e:	623b      	str	r3, [r7, #32]
        break;
 8015010:	e014      	b.n	801503c <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8015012:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015016:	2b04      	cmp	r3, #4
 8015018:	d009      	beq.n	801502e <dhcp_parse_reply+0x346>
 801501a:	4b94      	ldr	r3, [pc, #592]	; (801526c <dhcp_parse_reply+0x584>)
 801501c:	f240 6261 	movw	r2, #1633	; 0x661
 8015020:	4993      	ldr	r1, [pc, #588]	; (8015270 <dhcp_parse_reply+0x588>)
 8015022:	4894      	ldr	r0, [pc, #592]	; (8015274 <dhcp_parse_reply+0x58c>)
 8015024:	f003 f9ce 	bl	80183c4 <iprintf>
 8015028:	f06f 0305 	mvn.w	r3, #5
 801502c:	e119      	b.n	8015262 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_T2;
 801502e:	2305      	movs	r3, #5
 8015030:	623b      	str	r3, [r7, #32]
        break;
 8015032:	e003      	b.n	801503c <dhcp_parse_reply+0x354>
      default:
        decode_len = 0;
 8015034:	2300      	movs	r3, #0
 8015036:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 801503a:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 801503c:	7dfb      	ldrb	r3, [r7, #23]
 801503e:	2b00      	cmp	r3, #0
 8015040:	d103      	bne.n	801504a <dhcp_parse_reply+0x362>
      offset++;
 8015042:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015044:	3301      	adds	r3, #1
 8015046:	877b      	strh	r3, [r7, #58]	; 0x3a
 8015048:	e0a1      	b.n	801518e <dhcp_parse_reply+0x4a6>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 801504a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801504c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015050:	4413      	add	r3, r2
 8015052:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 8015056:	4293      	cmp	r3, r2
 8015058:	dd02      	ble.n	8015060 <dhcp_parse_reply+0x378>
        /* overflow */
        return ERR_BUF;
 801505a:	f06f 0301 	mvn.w	r3, #1
 801505e:	e100      	b.n	8015262 <dhcp_parse_reply+0x57a>
      }
      offset = (u16_t)(offset + len + 2);
 8015060:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015064:	b29a      	uxth	r2, r3
 8015066:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015068:	4413      	add	r3, r2
 801506a:	b29b      	uxth	r3, r3
 801506c:	3302      	adds	r3, #2
 801506e:	877b      	strh	r3, [r7, #58]	; 0x3a
      if (decode_len > 0) {
 8015070:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015074:	2b00      	cmp	r3, #0
 8015076:	f000 808a 	beq.w	801518e <dhcp_parse_reply+0x4a6>
        u32_t value = 0;
 801507a:	2300      	movs	r3, #0
 801507c:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 801507e:	6a3b      	ldr	r3, [r7, #32]
 8015080:	2b00      	cmp	r3, #0
 8015082:	db02      	blt.n	801508a <dhcp_parse_reply+0x3a2>
 8015084:	6a3b      	ldr	r3, [r7, #32]
 8015086:	2b07      	cmp	r3, #7
 8015088:	dd06      	ble.n	8015098 <dhcp_parse_reply+0x3b0>
 801508a:	4b78      	ldr	r3, [pc, #480]	; (801526c <dhcp_parse_reply+0x584>)
 801508c:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 8015090:	4979      	ldr	r1, [pc, #484]	; (8015278 <dhcp_parse_reply+0x590>)
 8015092:	4878      	ldr	r0, [pc, #480]	; (8015274 <dhcp_parse_reply+0x58c>)
 8015094:	f003 f996 	bl	80183c4 <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 8015098:	4a78      	ldr	r2, [pc, #480]	; (801527c <dhcp_parse_reply+0x594>)
 801509a:	6a3b      	ldr	r3, [r7, #32]
 801509c:	4413      	add	r3, r2
 801509e:	781b      	ldrb	r3, [r3, #0]
 80150a0:	2b00      	cmp	r3, #0
 80150a2:	d174      	bne.n	801518e <dhcp_parse_reply+0x4a6>
          copy_len = LWIP_MIN(decode_len, 4);
 80150a4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80150a8:	2b04      	cmp	r3, #4
 80150aa:	bf28      	it	cs
 80150ac:	2304      	movcs	r3, #4
 80150ae:	b2db      	uxtb	r3, r3
 80150b0:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 80150b2:	8bfb      	ldrh	r3, [r7, #30]
 80150b4:	8aba      	ldrh	r2, [r7, #20]
 80150b6:	f107 0108 	add.w	r1, r7, #8
 80150ba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80150bc:	f7f7 fcb2 	bl	800ca24 <pbuf_copy_partial>
 80150c0:	4603      	mov	r3, r0
 80150c2:	461a      	mov	r2, r3
 80150c4:	8abb      	ldrh	r3, [r7, #20]
 80150c6:	4293      	cmp	r3, r2
 80150c8:	d002      	beq.n	80150d0 <dhcp_parse_reply+0x3e8>
            return ERR_BUF;
 80150ca:	f06f 0301 	mvn.w	r3, #1
 80150ce:	e0c8      	b.n	8015262 <dhcp_parse_reply+0x57a>
          }
          if (decode_len > 4) {
 80150d0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80150d4:	2b04      	cmp	r3, #4
 80150d6:	d933      	bls.n	8015140 <dhcp_parse_reply+0x458>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 80150d8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80150dc:	f003 0303 	and.w	r3, r3, #3
 80150e0:	b2db      	uxtb	r3, r3
 80150e2:	2b00      	cmp	r3, #0
 80150e4:	d009      	beq.n	80150fa <dhcp_parse_reply+0x412>
 80150e6:	4b61      	ldr	r3, [pc, #388]	; (801526c <dhcp_parse_reply+0x584>)
 80150e8:	f240 6281 	movw	r2, #1665	; 0x681
 80150ec:	4964      	ldr	r1, [pc, #400]	; (8015280 <dhcp_parse_reply+0x598>)
 80150ee:	4861      	ldr	r0, [pc, #388]	; (8015274 <dhcp_parse_reply+0x58c>)
 80150f0:	f003 f968 	bl	80183c4 <iprintf>
 80150f4:	f06f 0305 	mvn.w	r3, #5
 80150f8:	e0b3      	b.n	8015262 <dhcp_parse_reply+0x57a>
            dhcp_got_option(dhcp, decode_idx);
 80150fa:	4a60      	ldr	r2, [pc, #384]	; (801527c <dhcp_parse_reply+0x594>)
 80150fc:	6a3b      	ldr	r3, [r7, #32]
 80150fe:	4413      	add	r3, r2
 8015100:	2201      	movs	r2, #1
 8015102:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 8015104:	68bb      	ldr	r3, [r7, #8]
 8015106:	4618      	mov	r0, r3
 8015108:	f7f5 fe67 	bl	800adda <lwip_htonl>
 801510c:	4602      	mov	r2, r0
 801510e:	495d      	ldr	r1, [pc, #372]	; (8015284 <dhcp_parse_reply+0x59c>)
 8015110:	6a3b      	ldr	r3, [r7, #32]
 8015112:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 8015116:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801511a:	3b04      	subs	r3, #4
 801511c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 8015120:	8bfb      	ldrh	r3, [r7, #30]
 8015122:	3304      	adds	r3, #4
 8015124:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 8015126:	8a7a      	ldrh	r2, [r7, #18]
 8015128:	8bfb      	ldrh	r3, [r7, #30]
 801512a:	429a      	cmp	r2, r3
 801512c:	d202      	bcs.n	8015134 <dhcp_parse_reply+0x44c>
              /* overflow */
              return ERR_BUF;
 801512e:	f06f 0301 	mvn.w	r3, #1
 8015132:	e096      	b.n	8015262 <dhcp_parse_reply+0x57a>
            }
            val_offset = next_val_offset;
 8015134:	8a7b      	ldrh	r3, [r7, #18]
 8015136:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 8015138:	6a3b      	ldr	r3, [r7, #32]
 801513a:	3301      	adds	r3, #1
 801513c:	623b      	str	r3, [r7, #32]
            goto decode_next;
 801513e:	e79e      	b.n	801507e <dhcp_parse_reply+0x396>
          } else if (decode_len == 4) {
 8015140:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015144:	2b04      	cmp	r3, #4
 8015146:	d106      	bne.n	8015156 <dhcp_parse_reply+0x46e>
            value = lwip_ntohl(value);
 8015148:	68bb      	ldr	r3, [r7, #8]
 801514a:	4618      	mov	r0, r3
 801514c:	f7f5 fe45 	bl	800adda <lwip_htonl>
 8015150:	4603      	mov	r3, r0
 8015152:	60bb      	str	r3, [r7, #8]
 8015154:	e011      	b.n	801517a <dhcp_parse_reply+0x492>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 8015156:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801515a:	2b01      	cmp	r3, #1
 801515c:	d009      	beq.n	8015172 <dhcp_parse_reply+0x48a>
 801515e:	4b43      	ldr	r3, [pc, #268]	; (801526c <dhcp_parse_reply+0x584>)
 8015160:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 8015164:	4948      	ldr	r1, [pc, #288]	; (8015288 <dhcp_parse_reply+0x5a0>)
 8015166:	4843      	ldr	r0, [pc, #268]	; (8015274 <dhcp_parse_reply+0x58c>)
 8015168:	f003 f92c 	bl	80183c4 <iprintf>
 801516c:	f06f 0305 	mvn.w	r3, #5
 8015170:	e077      	b.n	8015262 <dhcp_parse_reply+0x57a>
            value = ((u8_t *)&value)[0];
 8015172:	f107 0308 	add.w	r3, r7, #8
 8015176:	781b      	ldrb	r3, [r3, #0]
 8015178:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 801517a:	4a40      	ldr	r2, [pc, #256]	; (801527c <dhcp_parse_reply+0x594>)
 801517c:	6a3b      	ldr	r3, [r7, #32]
 801517e:	4413      	add	r3, r2
 8015180:	2201      	movs	r2, #1
 8015182:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 8015184:	68ba      	ldr	r2, [r7, #8]
 8015186:	493f      	ldr	r1, [pc, #252]	; (8015284 <dhcp_parse_reply+0x59c>)
 8015188:	6a3b      	ldr	r3, [r7, #32]
 801518a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 801518e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015190:	895b      	ldrh	r3, [r3, #10]
 8015192:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8015194:	429a      	cmp	r2, r3
 8015196:	d324      	bcc.n	80151e2 <dhcp_parse_reply+0x4fa>
      offset = (u16_t)(offset - q->len);
 8015198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801519a:	895b      	ldrh	r3, [r3, #10]
 801519c:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801519e:	1ad3      	subs	r3, r2, r3
 80151a0:	877b      	strh	r3, [r7, #58]	; 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 80151a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80151a4:	895b      	ldrh	r3, [r3, #10]
 80151a6:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80151a8:	1ad3      	subs	r3, r2, r3
 80151aa:	873b      	strh	r3, [r7, #56]	; 0x38
      if (offset < offset_max) {
 80151ac:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80151ae:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80151b0:	429a      	cmp	r2, r3
 80151b2:	d213      	bcs.n	80151dc <dhcp_parse_reply+0x4f4>
        q = q->next;
 80151b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80151b6:	681b      	ldr	r3, [r3, #0]
 80151b8:	633b      	str	r3, [r7, #48]	; 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 80151ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80151bc:	2b00      	cmp	r3, #0
 80151be:	d109      	bne.n	80151d4 <dhcp_parse_reply+0x4ec>
 80151c0:	4b2a      	ldr	r3, [pc, #168]	; (801526c <dhcp_parse_reply+0x584>)
 80151c2:	f240 629d 	movw	r2, #1693	; 0x69d
 80151c6:	4931      	ldr	r1, [pc, #196]	; (801528c <dhcp_parse_reply+0x5a4>)
 80151c8:	482a      	ldr	r0, [pc, #168]	; (8015274 <dhcp_parse_reply+0x58c>)
 80151ca:	f003 f8fb 	bl	80183c4 <iprintf>
 80151ce:	f06f 0305 	mvn.w	r3, #5
 80151d2:	e046      	b.n	8015262 <dhcp_parse_reply+0x57a>
        options = (u8_t *)q->payload;
 80151d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80151d6:	685b      	ldr	r3, [r3, #4]
 80151d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80151da:	e002      	b.n	80151e2 <dhcp_parse_reply+0x4fa>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 80151dc:	f06f 0301 	mvn.w	r3, #1
 80151e0:	e03f      	b.n	8015262 <dhcp_parse_reply+0x57a>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 80151e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80151e4:	2b00      	cmp	r3, #0
 80151e6:	d00a      	beq.n	80151fe <dhcp_parse_reply+0x516>
 80151e8:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80151ea:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80151ec:	429a      	cmp	r2, r3
 80151ee:	d206      	bcs.n	80151fe <dhcp_parse_reply+0x516>
 80151f0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80151f2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80151f4:	4413      	add	r3, r2
 80151f6:	781b      	ldrb	r3, [r3, #0]
 80151f8:	2bff      	cmp	r3, #255	; 0xff
 80151fa:	f47f adb8 	bne.w	8014d6e <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 80151fe:	4b1f      	ldr	r3, [pc, #124]	; (801527c <dhcp_parse_reply+0x594>)
 8015200:	781b      	ldrb	r3, [r3, #0]
 8015202:	2b00      	cmp	r3, #0
 8015204:	d018      	beq.n	8015238 <dhcp_parse_reply+0x550>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8015206:	4b1f      	ldr	r3, [pc, #124]	; (8015284 <dhcp_parse_reply+0x59c>)
 8015208:	681b      	ldr	r3, [r3, #0]
 801520a:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 801520c:	4b1b      	ldr	r3, [pc, #108]	; (801527c <dhcp_parse_reply+0x594>)
 801520e:	2200      	movs	r2, #0
 8015210:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 8015212:	68fb      	ldr	r3, [r7, #12]
 8015214:	2b01      	cmp	r3, #1
 8015216:	d102      	bne.n	801521e <dhcp_parse_reply+0x536>
      parse_file_as_options = 1;
 8015218:	2301      	movs	r3, #1
 801521a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801521c:	e00c      	b.n	8015238 <dhcp_parse_reply+0x550>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 801521e:	68fb      	ldr	r3, [r7, #12]
 8015220:	2b02      	cmp	r3, #2
 8015222:	d102      	bne.n	801522a <dhcp_parse_reply+0x542>
      parse_sname_as_options = 1;
 8015224:	2301      	movs	r3, #1
 8015226:	62bb      	str	r3, [r7, #40]	; 0x28
 8015228:	e006      	b.n	8015238 <dhcp_parse_reply+0x550>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 801522a:	68fb      	ldr	r3, [r7, #12]
 801522c:	2b03      	cmp	r3, #3
 801522e:	d103      	bne.n	8015238 <dhcp_parse_reply+0x550>
      parse_sname_as_options = 1;
 8015230:	2301      	movs	r3, #1
 8015232:	62bb      	str	r3, [r7, #40]	; 0x28
      parse_file_as_options = 1;
 8015234:	2301      	movs	r3, #1
 8015236:	62fb      	str	r3, [r7, #44]	; 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 8015238:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801523a:	2b00      	cmp	r3, #0
 801523c:	d006      	beq.n	801524c <dhcp_parse_reply+0x564>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 801523e:	2300      	movs	r3, #0
 8015240:	62fb      	str	r3, [r7, #44]	; 0x2c
    options_idx = DHCP_FILE_OFS;
 8015242:	236c      	movs	r3, #108	; 0x6c
 8015244:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 8015246:	23ec      	movs	r3, #236	; 0xec
 8015248:	86bb      	strh	r3, [r7, #52]	; 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 801524a:	e56a      	b.n	8014d22 <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 801524c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801524e:	2b00      	cmp	r3, #0
 8015250:	d006      	beq.n	8015260 <dhcp_parse_reply+0x578>
    parse_sname_as_options = 0;
 8015252:	2300      	movs	r3, #0
 8015254:	62bb      	str	r3, [r7, #40]	; 0x28
    options_idx = DHCP_SNAME_OFS;
 8015256:	232c      	movs	r3, #44	; 0x2c
 8015258:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 801525a:	236c      	movs	r3, #108	; 0x6c
 801525c:	86bb      	strh	r3, [r7, #52]	; 0x34
    goto again;
 801525e:	e560      	b.n	8014d22 <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 8015260:	2300      	movs	r3, #0
}
 8015262:	4618      	mov	r0, r3
 8015264:	3740      	adds	r7, #64	; 0x40
 8015266:	46bd      	mov	sp, r7
 8015268:	bd80      	pop	{r7, pc}
 801526a:	bf00      	nop
 801526c:	0801c37c 	.word	0x0801c37c
 8015270:	0801c604 	.word	0x0801c604
 8015274:	0801c3dc 	.word	0x0801c3dc
 8015278:	0801c648 	.word	0x0801c648
 801527c:	20010df8 	.word	0x20010df8
 8015280:	0801c65c 	.word	0x0801c65c
 8015284:	20010dd8 	.word	0x20010dd8
 8015288:	0801c674 	.word	0x0801c674
 801528c:	0801c688 	.word	0x0801c688

08015290 <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8015290:	b580      	push	{r7, lr}
 8015292:	b08a      	sub	sp, #40	; 0x28
 8015294:	af00      	add	r7, sp, #0
 8015296:	60f8      	str	r0, [r7, #12]
 8015298:	60b9      	str	r1, [r7, #8]
 801529a:	607a      	str	r2, [r7, #4]
 801529c:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 801529e:	4b60      	ldr	r3, [pc, #384]	; (8015420 <dhcp_recv+0x190>)
 80152a0:	685b      	ldr	r3, [r3, #4]
 80152a2:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80152a4:	6a3b      	ldr	r3, [r7, #32]
 80152a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80152a8:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 80152aa:	687b      	ldr	r3, [r7, #4]
 80152ac:	685b      	ldr	r3, [r3, #4]
 80152ae:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 80152b0:	69fb      	ldr	r3, [r7, #28]
 80152b2:	2b00      	cmp	r3, #0
 80152b4:	f000 809d 	beq.w	80153f2 <dhcp_recv+0x162>
 80152b8:	69fb      	ldr	r3, [r7, #28]
 80152ba:	791b      	ldrb	r3, [r3, #4]
 80152bc:	2b00      	cmp	r3, #0
 80152be:	f000 8098 	beq.w	80153f2 <dhcp_recv+0x162>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 80152c2:	687b      	ldr	r3, [r7, #4]
 80152c4:	895b      	ldrh	r3, [r3, #10]
 80152c6:	2b2b      	cmp	r3, #43	; 0x2b
 80152c8:	f240 8095 	bls.w	80153f6 <dhcp_recv+0x166>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 80152cc:	69bb      	ldr	r3, [r7, #24]
 80152ce:	781b      	ldrb	r3, [r3, #0]
 80152d0:	2b02      	cmp	r3, #2
 80152d2:	f040 8092 	bne.w	80153fa <dhcp_recv+0x16a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 80152d6:	2300      	movs	r3, #0
 80152d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80152dc:	e012      	b.n	8015304 <dhcp_recv+0x74>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 80152de:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80152e2:	6a3a      	ldr	r2, [r7, #32]
 80152e4:	4413      	add	r3, r2
 80152e6:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 80152ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80152ee:	69b9      	ldr	r1, [r7, #24]
 80152f0:	440b      	add	r3, r1
 80152f2:	7f1b      	ldrb	r3, [r3, #28]
 80152f4:	429a      	cmp	r2, r3
 80152f6:	f040 8082 	bne.w	80153fe <dhcp_recv+0x16e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 80152fa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80152fe:	3301      	adds	r3, #1
 8015300:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8015304:	6a3b      	ldr	r3, [r7, #32]
 8015306:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801530a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801530e:	429a      	cmp	r2, r3
 8015310:	d203      	bcs.n	801531a <dhcp_recv+0x8a>
 8015312:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015316:	2b05      	cmp	r3, #5
 8015318:	d9e1      	bls.n	80152de <dhcp_recv+0x4e>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 801531a:	69bb      	ldr	r3, [r7, #24]
 801531c:	685b      	ldr	r3, [r3, #4]
 801531e:	4618      	mov	r0, r3
 8015320:	f7f5 fd5b 	bl	800adda <lwip_htonl>
 8015324:	4602      	mov	r2, r0
 8015326:	69fb      	ldr	r3, [r7, #28]
 8015328:	681b      	ldr	r3, [r3, #0]
 801532a:	429a      	cmp	r2, r3
 801532c:	d169      	bne.n	8015402 <dhcp_recv+0x172>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 801532e:	69f9      	ldr	r1, [r7, #28]
 8015330:	6878      	ldr	r0, [r7, #4]
 8015332:	f7ff fcd9 	bl	8014ce8 <dhcp_parse_reply>
 8015336:	4603      	mov	r3, r0
 8015338:	2b00      	cmp	r3, #0
 801533a:	d164      	bne.n	8015406 <dhcp_recv+0x176>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 801533c:	4b39      	ldr	r3, [pc, #228]	; (8015424 <dhcp_recv+0x194>)
 801533e:	785b      	ldrb	r3, [r3, #1]
 8015340:	2b00      	cmp	r3, #0
 8015342:	d062      	beq.n	801540a <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 8015344:	687b      	ldr	r3, [r7, #4]
 8015346:	685b      	ldr	r3, [r3, #4]
 8015348:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 801534a:	4b37      	ldr	r3, [pc, #220]	; (8015428 <dhcp_recv+0x198>)
 801534c:	685b      	ldr	r3, [r3, #4]
 801534e:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 8015350:	7cfb      	ldrb	r3, [r7, #19]
 8015352:	2b05      	cmp	r3, #5
 8015354:	d12a      	bne.n	80153ac <dhcp_recv+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 8015356:	69fb      	ldr	r3, [r7, #28]
 8015358:	795b      	ldrb	r3, [r3, #5]
 801535a:	2b01      	cmp	r3, #1
 801535c:	d112      	bne.n	8015384 <dhcp_recv+0xf4>
      dhcp_handle_ack(netif, msg_in);
 801535e:	6979      	ldr	r1, [r7, #20]
 8015360:	6a38      	ldr	r0, [r7, #32]
 8015362:	f7fe fe17 	bl	8013f94 <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 8015366:	6a3b      	ldr	r3, [r7, #32]
 8015368:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801536c:	f003 0308 	and.w	r3, r3, #8
 8015370:	2b00      	cmp	r3, #0
 8015372:	d003      	beq.n	801537c <dhcp_recv+0xec>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 8015374:	6a38      	ldr	r0, [r7, #32]
 8015376:	f7fe fb87 	bl	8013a88 <dhcp_check>
 801537a:	e049      	b.n	8015410 <dhcp_recv+0x180>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 801537c:	6a38      	ldr	r0, [r7, #32]
 801537e:	f7ff f867 	bl	8014450 <dhcp_bind>
 8015382:	e045      	b.n	8015410 <dhcp_recv+0x180>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8015384:	69fb      	ldr	r3, [r7, #28]
 8015386:	795b      	ldrb	r3, [r3, #5]
 8015388:	2b03      	cmp	r3, #3
 801538a:	d007      	beq.n	801539c <dhcp_recv+0x10c>
 801538c:	69fb      	ldr	r3, [r7, #28]
 801538e:	795b      	ldrb	r3, [r3, #5]
 8015390:	2b04      	cmp	r3, #4
 8015392:	d003      	beq.n	801539c <dhcp_recv+0x10c>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 8015394:	69fb      	ldr	r3, [r7, #28]
 8015396:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8015398:	2b05      	cmp	r3, #5
 801539a:	d139      	bne.n	8015410 <dhcp_recv+0x180>
      dhcp_handle_ack(netif, msg_in);
 801539c:	6979      	ldr	r1, [r7, #20]
 801539e:	6a38      	ldr	r0, [r7, #32]
 80153a0:	f7fe fdf8 	bl	8013f94 <dhcp_handle_ack>
      dhcp_bind(netif);
 80153a4:	6a38      	ldr	r0, [r7, #32]
 80153a6:	f7ff f853 	bl	8014450 <dhcp_bind>
 80153aa:	e031      	b.n	8015410 <dhcp_recv+0x180>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 80153ac:	7cfb      	ldrb	r3, [r7, #19]
 80153ae:	2b06      	cmp	r3, #6
 80153b0:	d113      	bne.n	80153da <dhcp_recv+0x14a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 80153b2:	69fb      	ldr	r3, [r7, #28]
 80153b4:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 80153b6:	2b03      	cmp	r3, #3
 80153b8:	d00b      	beq.n	80153d2 <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 80153ba:	69fb      	ldr	r3, [r7, #28]
 80153bc:	795b      	ldrb	r3, [r3, #5]
 80153be:	2b01      	cmp	r3, #1
 80153c0:	d007      	beq.n	80153d2 <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 80153c2:	69fb      	ldr	r3, [r7, #28]
 80153c4:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 80153c6:	2b04      	cmp	r3, #4
 80153c8:	d003      	beq.n	80153d2 <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 80153ca:	69fb      	ldr	r3, [r7, #28]
 80153cc:	795b      	ldrb	r3, [r3, #5]
 80153ce:	2b05      	cmp	r3, #5
 80153d0:	d103      	bne.n	80153da <dhcp_recv+0x14a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 80153d2:	6a38      	ldr	r0, [r7, #32]
 80153d4:	f7fe fb3e 	bl	8013a54 <dhcp_handle_nak>
 80153d8:	e01a      	b.n	8015410 <dhcp_recv+0x180>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 80153da:	7cfb      	ldrb	r3, [r7, #19]
 80153dc:	2b02      	cmp	r3, #2
 80153de:	d116      	bne.n	801540e <dhcp_recv+0x17e>
 80153e0:	69fb      	ldr	r3, [r7, #28]
 80153e2:	795b      	ldrb	r3, [r3, #5]
 80153e4:	2b06      	cmp	r3, #6
 80153e6:	d112      	bne.n	801540e <dhcp_recv+0x17e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 80153e8:	6979      	ldr	r1, [r7, #20]
 80153ea:	6a38      	ldr	r0, [r7, #32]
 80153ec:	f7fe fb80 	bl	8013af0 <dhcp_handle_offer>
 80153f0:	e00e      	b.n	8015410 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 80153f2:	bf00      	nop
 80153f4:	e00c      	b.n	8015410 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 80153f6:	bf00      	nop
 80153f8:	e00a      	b.n	8015410 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 80153fa:	bf00      	nop
 80153fc:	e008      	b.n	8015410 <dhcp_recv+0x180>
      goto free_pbuf_and_return;
 80153fe:	bf00      	nop
 8015400:	e006      	b.n	8015410 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8015402:	bf00      	nop
 8015404:	e004      	b.n	8015410 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8015406:	bf00      	nop
 8015408:	e002      	b.n	8015410 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801540a:	bf00      	nop
 801540c:	e000      	b.n	8015410 <dhcp_recv+0x180>
  }

free_pbuf_and_return:
 801540e:	bf00      	nop
  pbuf_free(p);
 8015410:	6878      	ldr	r0, [r7, #4]
 8015412:	f7f7 f901 	bl	800c618 <pbuf_free>
}
 8015416:	bf00      	nop
 8015418:	3728      	adds	r7, #40	; 0x28
 801541a:	46bd      	mov	sp, r7
 801541c:	bd80      	pop	{r7, pc}
 801541e:	bf00      	nop
 8015420:	2000d604 	.word	0x2000d604
 8015424:	20010df8 	.word	0x20010df8
 8015428:	20010dd8 	.word	0x20010dd8

0801542c <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 801542c:	b580      	push	{r7, lr}
 801542e:	b088      	sub	sp, #32
 8015430:	af00      	add	r7, sp, #0
 8015432:	60f8      	str	r0, [r7, #12]
 8015434:	60b9      	str	r1, [r7, #8]
 8015436:	603b      	str	r3, [r7, #0]
 8015438:	4613      	mov	r3, r2
 801543a:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 801543c:	68fb      	ldr	r3, [r7, #12]
 801543e:	2b00      	cmp	r3, #0
 8015440:	d108      	bne.n	8015454 <dhcp_create_msg+0x28>
 8015442:	4b5f      	ldr	r3, [pc, #380]	; (80155c0 <dhcp_create_msg+0x194>)
 8015444:	f240 7269 	movw	r2, #1897	; 0x769
 8015448:	495e      	ldr	r1, [pc, #376]	; (80155c4 <dhcp_create_msg+0x198>)
 801544a:	485f      	ldr	r0, [pc, #380]	; (80155c8 <dhcp_create_msg+0x19c>)
 801544c:	f002 ffba 	bl	80183c4 <iprintf>
 8015450:	2300      	movs	r3, #0
 8015452:	e0b1      	b.n	80155b8 <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 8015454:	68bb      	ldr	r3, [r7, #8]
 8015456:	2b00      	cmp	r3, #0
 8015458:	d108      	bne.n	801546c <dhcp_create_msg+0x40>
 801545a:	4b59      	ldr	r3, [pc, #356]	; (80155c0 <dhcp_create_msg+0x194>)
 801545c:	f240 726a 	movw	r2, #1898	; 0x76a
 8015460:	495a      	ldr	r1, [pc, #360]	; (80155cc <dhcp_create_msg+0x1a0>)
 8015462:	4859      	ldr	r0, [pc, #356]	; (80155c8 <dhcp_create_msg+0x19c>)
 8015464:	f002 ffae 	bl	80183c4 <iprintf>
 8015468:	2300      	movs	r3, #0
 801546a:	e0a5      	b.n	80155b8 <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 801546c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015470:	f44f 719a 	mov.w	r1, #308	; 0x134
 8015474:	2036      	movs	r0, #54	; 0x36
 8015476:	f7f6 fdeb 	bl	800c050 <pbuf_alloc>
 801547a:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 801547c:	69bb      	ldr	r3, [r7, #24]
 801547e:	2b00      	cmp	r3, #0
 8015480:	d101      	bne.n	8015486 <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 8015482:	2300      	movs	r3, #0
 8015484:	e098      	b.n	80155b8 <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 8015486:	69bb      	ldr	r3, [r7, #24]
 8015488:	895b      	ldrh	r3, [r3, #10]
 801548a:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 801548e:	d206      	bcs.n	801549e <dhcp_create_msg+0x72>
 8015490:	4b4b      	ldr	r3, [pc, #300]	; (80155c0 <dhcp_create_msg+0x194>)
 8015492:	f240 7271 	movw	r2, #1905	; 0x771
 8015496:	494e      	ldr	r1, [pc, #312]	; (80155d0 <dhcp_create_msg+0x1a4>)
 8015498:	484b      	ldr	r0, [pc, #300]	; (80155c8 <dhcp_create_msg+0x19c>)
 801549a:	f002 ff93 	bl	80183c4 <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 801549e:	79fb      	ldrb	r3, [r7, #7]
 80154a0:	2b03      	cmp	r3, #3
 80154a2:	d103      	bne.n	80154ac <dhcp_create_msg+0x80>
 80154a4:	68bb      	ldr	r3, [r7, #8]
 80154a6:	795b      	ldrb	r3, [r3, #5]
 80154a8:	2b03      	cmp	r3, #3
 80154aa:	d10d      	bne.n	80154c8 <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 80154ac:	68bb      	ldr	r3, [r7, #8]
 80154ae:	799b      	ldrb	r3, [r3, #6]
 80154b0:	2b00      	cmp	r3, #0
 80154b2:	d105      	bne.n	80154c0 <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 80154b4:	f002 ff9e 	bl	80183f4 <rand>
 80154b8:	4603      	mov	r3, r0
 80154ba:	461a      	mov	r2, r3
 80154bc:	4b45      	ldr	r3, [pc, #276]	; (80155d4 <dhcp_create_msg+0x1a8>)
 80154be:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 80154c0:	4b44      	ldr	r3, [pc, #272]	; (80155d4 <dhcp_create_msg+0x1a8>)
 80154c2:	681a      	ldr	r2, [r3, #0]
 80154c4:	68bb      	ldr	r3, [r7, #8]
 80154c6:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 80154c8:	69bb      	ldr	r3, [r7, #24]
 80154ca:	685b      	ldr	r3, [r3, #4]
 80154cc:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 80154ce:	f44f 729a 	mov.w	r2, #308	; 0x134
 80154d2:	2100      	movs	r1, #0
 80154d4:	6978      	ldr	r0, [r7, #20]
 80154d6:	f002 fed8 	bl	801828a <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 80154da:	697b      	ldr	r3, [r7, #20]
 80154dc:	2201      	movs	r2, #1
 80154de:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 80154e0:	697b      	ldr	r3, [r7, #20]
 80154e2:	2201      	movs	r2, #1
 80154e4:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 80154e6:	68fb      	ldr	r3, [r7, #12]
 80154e8:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 80154ec:	697b      	ldr	r3, [r7, #20]
 80154ee:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 80154f0:	68bb      	ldr	r3, [r7, #8]
 80154f2:	681b      	ldr	r3, [r3, #0]
 80154f4:	4618      	mov	r0, r3
 80154f6:	f7f5 fc70 	bl	800adda <lwip_htonl>
 80154fa:	4602      	mov	r2, r0
 80154fc:	697b      	ldr	r3, [r7, #20]
 80154fe:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 8015500:	79fb      	ldrb	r3, [r7, #7]
 8015502:	2b08      	cmp	r3, #8
 8015504:	d010      	beq.n	8015528 <dhcp_create_msg+0xfc>
 8015506:	79fb      	ldrb	r3, [r7, #7]
 8015508:	2b04      	cmp	r3, #4
 801550a:	d00d      	beq.n	8015528 <dhcp_create_msg+0xfc>
 801550c:	79fb      	ldrb	r3, [r7, #7]
 801550e:	2b07      	cmp	r3, #7
 8015510:	d00a      	beq.n	8015528 <dhcp_create_msg+0xfc>
 8015512:	79fb      	ldrb	r3, [r7, #7]
 8015514:	2b03      	cmp	r3, #3
 8015516:	d10c      	bne.n	8015532 <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8015518:	68bb      	ldr	r3, [r7, #8]
 801551a:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 801551c:	2b05      	cmp	r3, #5
 801551e:	d003      	beq.n	8015528 <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8015520:	68bb      	ldr	r3, [r7, #8]
 8015522:	795b      	ldrb	r3, [r3, #5]
 8015524:	2b04      	cmp	r3, #4
 8015526:	d104      	bne.n	8015532 <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 8015528:	68fb      	ldr	r3, [r7, #12]
 801552a:	3304      	adds	r3, #4
 801552c:	681a      	ldr	r2, [r3, #0]
 801552e:	697b      	ldr	r3, [r7, #20]
 8015530:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8015532:	2300      	movs	r3, #0
 8015534:	83fb      	strh	r3, [r7, #30]
 8015536:	e00c      	b.n	8015552 <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 8015538:	8bfa      	ldrh	r2, [r7, #30]
 801553a:	8bfb      	ldrh	r3, [r7, #30]
 801553c:	68f9      	ldr	r1, [r7, #12]
 801553e:	440a      	add	r2, r1
 8015540:	f892 102a 	ldrb.w	r1, [r2, #42]	; 0x2a
 8015544:	697a      	ldr	r2, [r7, #20]
 8015546:	4413      	add	r3, r2
 8015548:	460a      	mov	r2, r1
 801554a:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801554c:	8bfb      	ldrh	r3, [r7, #30]
 801554e:	3301      	adds	r3, #1
 8015550:	83fb      	strh	r3, [r7, #30]
 8015552:	8bfb      	ldrh	r3, [r7, #30]
 8015554:	2b05      	cmp	r3, #5
 8015556:	d9ef      	bls.n	8015538 <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 8015558:	697b      	ldr	r3, [r7, #20]
 801555a:	2200      	movs	r2, #0
 801555c:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 8015560:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 8015564:	2200      	movs	r2, #0
 8015566:	f062 027d 	orn	r2, r2, #125	; 0x7d
 801556a:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 801556e:	2200      	movs	r2, #0
 8015570:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 8015574:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 8015578:	2200      	movs	r2, #0
 801557a:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 801557e:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 8015582:	697b      	ldr	r3, [r7, #20]
 8015584:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015588:	2301      	movs	r3, #1
 801558a:	2235      	movs	r2, #53	; 0x35
 801558c:	2000      	movs	r0, #0
 801558e:	f7ff fadb 	bl	8014b48 <dhcp_option>
 8015592:	4603      	mov	r3, r0
 8015594:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 8015596:	697b      	ldr	r3, [r7, #20]
 8015598:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801559c:	79fa      	ldrb	r2, [r7, #7]
 801559e:	8a7b      	ldrh	r3, [r7, #18]
 80155a0:	4618      	mov	r0, r3
 80155a2:	f7ff fb05 	bl	8014bb0 <dhcp_option_byte>
 80155a6:	4603      	mov	r3, r0
 80155a8:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 80155aa:	683b      	ldr	r3, [r7, #0]
 80155ac:	2b00      	cmp	r3, #0
 80155ae:	d002      	beq.n	80155b6 <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 80155b0:	683b      	ldr	r3, [r7, #0]
 80155b2:	8a7a      	ldrh	r2, [r7, #18]
 80155b4:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 80155b6:	69bb      	ldr	r3, [r7, #24]
}
 80155b8:	4618      	mov	r0, r3
 80155ba:	3720      	adds	r7, #32
 80155bc:	46bd      	mov	sp, r7
 80155be:	bd80      	pop	{r7, pc}
 80155c0:	0801c37c 	.word	0x0801c37c
 80155c4:	0801c69c 	.word	0x0801c69c
 80155c8:	0801c3dc 	.word	0x0801c3dc
 80155cc:	0801c6bc 	.word	0x0801c6bc
 80155d0:	0801c6dc 	.word	0x0801c6dc
 80155d4:	20010e08 	.word	0x20010e08

080155d8 <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 80155d8:	b580      	push	{r7, lr}
 80155da:	b084      	sub	sp, #16
 80155dc:	af00      	add	r7, sp, #0
 80155de:	4603      	mov	r3, r0
 80155e0:	60b9      	str	r1, [r7, #8]
 80155e2:	607a      	str	r2, [r7, #4]
 80155e4:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 80155e6:	89fb      	ldrh	r3, [r7, #14]
 80155e8:	1c5a      	adds	r2, r3, #1
 80155ea:	81fa      	strh	r2, [r7, #14]
 80155ec:	461a      	mov	r2, r3
 80155ee:	68bb      	ldr	r3, [r7, #8]
 80155f0:	4413      	add	r3, r2
 80155f2:	22ff      	movs	r2, #255	; 0xff
 80155f4:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 80155f6:	e007      	b.n	8015608 <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 80155f8:	89fb      	ldrh	r3, [r7, #14]
 80155fa:	1c5a      	adds	r2, r3, #1
 80155fc:	81fa      	strh	r2, [r7, #14]
 80155fe:	461a      	mov	r2, r3
 8015600:	68bb      	ldr	r3, [r7, #8]
 8015602:	4413      	add	r3, r2
 8015604:	2200      	movs	r2, #0
 8015606:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8015608:	89fb      	ldrh	r3, [r7, #14]
 801560a:	2b43      	cmp	r3, #67	; 0x43
 801560c:	d904      	bls.n	8015618 <dhcp_option_trailer+0x40>
 801560e:	89fb      	ldrh	r3, [r7, #14]
 8015610:	f003 0303 	and.w	r3, r3, #3
 8015614:	2b00      	cmp	r3, #0
 8015616:	d002      	beq.n	801561e <dhcp_option_trailer+0x46>
 8015618:	89fb      	ldrh	r3, [r7, #14]
 801561a:	2b43      	cmp	r3, #67	; 0x43
 801561c:	d9ec      	bls.n	80155f8 <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 801561e:	89fb      	ldrh	r3, [r7, #14]
 8015620:	33f0      	adds	r3, #240	; 0xf0
 8015622:	b29b      	uxth	r3, r3
 8015624:	4619      	mov	r1, r3
 8015626:	6878      	ldr	r0, [r7, #4]
 8015628:	f7f6 fe70 	bl	800c30c <pbuf_realloc>
}
 801562c:	bf00      	nop
 801562e:	3710      	adds	r7, #16
 8015630:	46bd      	mov	sp, r7
 8015632:	bd80      	pop	{r7, pc}

08015634 <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 8015634:	b480      	push	{r7}
 8015636:	b085      	sub	sp, #20
 8015638:	af00      	add	r7, sp, #0
 801563a:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 801563c:	687b      	ldr	r3, [r7, #4]
 801563e:	2b00      	cmp	r3, #0
 8015640:	d017      	beq.n	8015672 <dhcp_supplied_address+0x3e>
 8015642:	687b      	ldr	r3, [r7, #4]
 8015644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015646:	2b00      	cmp	r3, #0
 8015648:	d013      	beq.n	8015672 <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 801564a:	687b      	ldr	r3, [r7, #4]
 801564c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801564e:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8015650:	68fb      	ldr	r3, [r7, #12]
 8015652:	795b      	ldrb	r3, [r3, #5]
 8015654:	2b0a      	cmp	r3, #10
 8015656:	d007      	beq.n	8015668 <dhcp_supplied_address+0x34>
 8015658:	68fb      	ldr	r3, [r7, #12]
 801565a:	795b      	ldrb	r3, [r3, #5]
 801565c:	2b05      	cmp	r3, #5
 801565e:	d003      	beq.n	8015668 <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 8015660:	68fb      	ldr	r3, [r7, #12]
 8015662:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8015664:	2b04      	cmp	r3, #4
 8015666:	d101      	bne.n	801566c <dhcp_supplied_address+0x38>
 8015668:	2301      	movs	r3, #1
 801566a:	e000      	b.n	801566e <dhcp_supplied_address+0x3a>
 801566c:	2300      	movs	r3, #0
 801566e:	b2db      	uxtb	r3, r3
 8015670:	e000      	b.n	8015674 <dhcp_supplied_address+0x40>
  }
  return 0;
 8015672:	2300      	movs	r3, #0
}
 8015674:	4618      	mov	r0, r3
 8015676:	3714      	adds	r7, #20
 8015678:	46bd      	mov	sp, r7
 801567a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801567e:	4770      	bx	lr

08015680 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8015680:	b580      	push	{r7, lr}
 8015682:	b082      	sub	sp, #8
 8015684:	af00      	add	r7, sp, #0
 8015686:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8015688:	4915      	ldr	r1, [pc, #84]	; (80156e0 <etharp_free_entry+0x60>)
 801568a:	687a      	ldr	r2, [r7, #4]
 801568c:	4613      	mov	r3, r2
 801568e:	005b      	lsls	r3, r3, #1
 8015690:	4413      	add	r3, r2
 8015692:	00db      	lsls	r3, r3, #3
 8015694:	440b      	add	r3, r1
 8015696:	681b      	ldr	r3, [r3, #0]
 8015698:	2b00      	cmp	r3, #0
 801569a:	d013      	beq.n	80156c4 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 801569c:	4910      	ldr	r1, [pc, #64]	; (80156e0 <etharp_free_entry+0x60>)
 801569e:	687a      	ldr	r2, [r7, #4]
 80156a0:	4613      	mov	r3, r2
 80156a2:	005b      	lsls	r3, r3, #1
 80156a4:	4413      	add	r3, r2
 80156a6:	00db      	lsls	r3, r3, #3
 80156a8:	440b      	add	r3, r1
 80156aa:	681b      	ldr	r3, [r3, #0]
 80156ac:	4618      	mov	r0, r3
 80156ae:	f7f6 ffb3 	bl	800c618 <pbuf_free>
    arp_table[i].q = NULL;
 80156b2:	490b      	ldr	r1, [pc, #44]	; (80156e0 <etharp_free_entry+0x60>)
 80156b4:	687a      	ldr	r2, [r7, #4]
 80156b6:	4613      	mov	r3, r2
 80156b8:	005b      	lsls	r3, r3, #1
 80156ba:	4413      	add	r3, r2
 80156bc:	00db      	lsls	r3, r3, #3
 80156be:	440b      	add	r3, r1
 80156c0:	2200      	movs	r2, #0
 80156c2:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 80156c4:	4906      	ldr	r1, [pc, #24]	; (80156e0 <etharp_free_entry+0x60>)
 80156c6:	687a      	ldr	r2, [r7, #4]
 80156c8:	4613      	mov	r3, r2
 80156ca:	005b      	lsls	r3, r3, #1
 80156cc:	4413      	add	r3, r2
 80156ce:	00db      	lsls	r3, r3, #3
 80156d0:	440b      	add	r3, r1
 80156d2:	3314      	adds	r3, #20
 80156d4:	2200      	movs	r2, #0
 80156d6:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 80156d8:	bf00      	nop
 80156da:	3708      	adds	r7, #8
 80156dc:	46bd      	mov	sp, r7
 80156de:	bd80      	pop	{r7, pc}
 80156e0:	20010e0c 	.word	0x20010e0c

080156e4 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 80156e4:	b580      	push	{r7, lr}
 80156e6:	b082      	sub	sp, #8
 80156e8:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80156ea:	2300      	movs	r3, #0
 80156ec:	607b      	str	r3, [r7, #4]
 80156ee:	e096      	b.n	801581e <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 80156f0:	494f      	ldr	r1, [pc, #316]	; (8015830 <etharp_tmr+0x14c>)
 80156f2:	687a      	ldr	r2, [r7, #4]
 80156f4:	4613      	mov	r3, r2
 80156f6:	005b      	lsls	r3, r3, #1
 80156f8:	4413      	add	r3, r2
 80156fa:	00db      	lsls	r3, r3, #3
 80156fc:	440b      	add	r3, r1
 80156fe:	3314      	adds	r3, #20
 8015700:	781b      	ldrb	r3, [r3, #0]
 8015702:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8015704:	78fb      	ldrb	r3, [r7, #3]
 8015706:	2b00      	cmp	r3, #0
 8015708:	f000 8086 	beq.w	8015818 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 801570c:	4948      	ldr	r1, [pc, #288]	; (8015830 <etharp_tmr+0x14c>)
 801570e:	687a      	ldr	r2, [r7, #4]
 8015710:	4613      	mov	r3, r2
 8015712:	005b      	lsls	r3, r3, #1
 8015714:	4413      	add	r3, r2
 8015716:	00db      	lsls	r3, r3, #3
 8015718:	440b      	add	r3, r1
 801571a:	3312      	adds	r3, #18
 801571c:	881b      	ldrh	r3, [r3, #0]
 801571e:	3301      	adds	r3, #1
 8015720:	b298      	uxth	r0, r3
 8015722:	4943      	ldr	r1, [pc, #268]	; (8015830 <etharp_tmr+0x14c>)
 8015724:	687a      	ldr	r2, [r7, #4]
 8015726:	4613      	mov	r3, r2
 8015728:	005b      	lsls	r3, r3, #1
 801572a:	4413      	add	r3, r2
 801572c:	00db      	lsls	r3, r3, #3
 801572e:	440b      	add	r3, r1
 8015730:	3312      	adds	r3, #18
 8015732:	4602      	mov	r2, r0
 8015734:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8015736:	493e      	ldr	r1, [pc, #248]	; (8015830 <etharp_tmr+0x14c>)
 8015738:	687a      	ldr	r2, [r7, #4]
 801573a:	4613      	mov	r3, r2
 801573c:	005b      	lsls	r3, r3, #1
 801573e:	4413      	add	r3, r2
 8015740:	00db      	lsls	r3, r3, #3
 8015742:	440b      	add	r3, r1
 8015744:	3312      	adds	r3, #18
 8015746:	881b      	ldrh	r3, [r3, #0]
 8015748:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 801574c:	d215      	bcs.n	801577a <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801574e:	4938      	ldr	r1, [pc, #224]	; (8015830 <etharp_tmr+0x14c>)
 8015750:	687a      	ldr	r2, [r7, #4]
 8015752:	4613      	mov	r3, r2
 8015754:	005b      	lsls	r3, r3, #1
 8015756:	4413      	add	r3, r2
 8015758:	00db      	lsls	r3, r3, #3
 801575a:	440b      	add	r3, r1
 801575c:	3314      	adds	r3, #20
 801575e:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8015760:	2b01      	cmp	r3, #1
 8015762:	d10e      	bne.n	8015782 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8015764:	4932      	ldr	r1, [pc, #200]	; (8015830 <etharp_tmr+0x14c>)
 8015766:	687a      	ldr	r2, [r7, #4]
 8015768:	4613      	mov	r3, r2
 801576a:	005b      	lsls	r3, r3, #1
 801576c:	4413      	add	r3, r2
 801576e:	00db      	lsls	r3, r3, #3
 8015770:	440b      	add	r3, r1
 8015772:	3312      	adds	r3, #18
 8015774:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8015776:	2b04      	cmp	r3, #4
 8015778:	d903      	bls.n	8015782 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 801577a:	6878      	ldr	r0, [r7, #4]
 801577c:	f7ff ff80 	bl	8015680 <etharp_free_entry>
 8015780:	e04a      	b.n	8015818 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8015782:	492b      	ldr	r1, [pc, #172]	; (8015830 <etharp_tmr+0x14c>)
 8015784:	687a      	ldr	r2, [r7, #4]
 8015786:	4613      	mov	r3, r2
 8015788:	005b      	lsls	r3, r3, #1
 801578a:	4413      	add	r3, r2
 801578c:	00db      	lsls	r3, r3, #3
 801578e:	440b      	add	r3, r1
 8015790:	3314      	adds	r3, #20
 8015792:	781b      	ldrb	r3, [r3, #0]
 8015794:	2b03      	cmp	r3, #3
 8015796:	d10a      	bne.n	80157ae <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8015798:	4925      	ldr	r1, [pc, #148]	; (8015830 <etharp_tmr+0x14c>)
 801579a:	687a      	ldr	r2, [r7, #4]
 801579c:	4613      	mov	r3, r2
 801579e:	005b      	lsls	r3, r3, #1
 80157a0:	4413      	add	r3, r2
 80157a2:	00db      	lsls	r3, r3, #3
 80157a4:	440b      	add	r3, r1
 80157a6:	3314      	adds	r3, #20
 80157a8:	2204      	movs	r2, #4
 80157aa:	701a      	strb	r2, [r3, #0]
 80157ac:	e034      	b.n	8015818 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 80157ae:	4920      	ldr	r1, [pc, #128]	; (8015830 <etharp_tmr+0x14c>)
 80157b0:	687a      	ldr	r2, [r7, #4]
 80157b2:	4613      	mov	r3, r2
 80157b4:	005b      	lsls	r3, r3, #1
 80157b6:	4413      	add	r3, r2
 80157b8:	00db      	lsls	r3, r3, #3
 80157ba:	440b      	add	r3, r1
 80157bc:	3314      	adds	r3, #20
 80157be:	781b      	ldrb	r3, [r3, #0]
 80157c0:	2b04      	cmp	r3, #4
 80157c2:	d10a      	bne.n	80157da <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 80157c4:	491a      	ldr	r1, [pc, #104]	; (8015830 <etharp_tmr+0x14c>)
 80157c6:	687a      	ldr	r2, [r7, #4]
 80157c8:	4613      	mov	r3, r2
 80157ca:	005b      	lsls	r3, r3, #1
 80157cc:	4413      	add	r3, r2
 80157ce:	00db      	lsls	r3, r3, #3
 80157d0:	440b      	add	r3, r1
 80157d2:	3314      	adds	r3, #20
 80157d4:	2202      	movs	r2, #2
 80157d6:	701a      	strb	r2, [r3, #0]
 80157d8:	e01e      	b.n	8015818 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80157da:	4915      	ldr	r1, [pc, #84]	; (8015830 <etharp_tmr+0x14c>)
 80157dc:	687a      	ldr	r2, [r7, #4]
 80157de:	4613      	mov	r3, r2
 80157e0:	005b      	lsls	r3, r3, #1
 80157e2:	4413      	add	r3, r2
 80157e4:	00db      	lsls	r3, r3, #3
 80157e6:	440b      	add	r3, r1
 80157e8:	3314      	adds	r3, #20
 80157ea:	781b      	ldrb	r3, [r3, #0]
 80157ec:	2b01      	cmp	r3, #1
 80157ee:	d113      	bne.n	8015818 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 80157f0:	490f      	ldr	r1, [pc, #60]	; (8015830 <etharp_tmr+0x14c>)
 80157f2:	687a      	ldr	r2, [r7, #4]
 80157f4:	4613      	mov	r3, r2
 80157f6:	005b      	lsls	r3, r3, #1
 80157f8:	4413      	add	r3, r2
 80157fa:	00db      	lsls	r3, r3, #3
 80157fc:	440b      	add	r3, r1
 80157fe:	3308      	adds	r3, #8
 8015800:	6818      	ldr	r0, [r3, #0]
 8015802:	687a      	ldr	r2, [r7, #4]
 8015804:	4613      	mov	r3, r2
 8015806:	005b      	lsls	r3, r3, #1
 8015808:	4413      	add	r3, r2
 801580a:	00db      	lsls	r3, r3, #3
 801580c:	4a08      	ldr	r2, [pc, #32]	; (8015830 <etharp_tmr+0x14c>)
 801580e:	4413      	add	r3, r2
 8015810:	3304      	adds	r3, #4
 8015812:	4619      	mov	r1, r3
 8015814:	f000 fe72 	bl	80164fc <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015818:	687b      	ldr	r3, [r7, #4]
 801581a:	3301      	adds	r3, #1
 801581c:	607b      	str	r3, [r7, #4]
 801581e:	687b      	ldr	r3, [r7, #4]
 8015820:	2b09      	cmp	r3, #9
 8015822:	f77f af65 	ble.w	80156f0 <etharp_tmr+0xc>
      }
    }
  }
}
 8015826:	bf00      	nop
 8015828:	bf00      	nop
 801582a:	3708      	adds	r7, #8
 801582c:	46bd      	mov	sp, r7
 801582e:	bd80      	pop	{r7, pc}
 8015830:	20010e0c 	.word	0x20010e0c

08015834 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8015834:	b580      	push	{r7, lr}
 8015836:	b08a      	sub	sp, #40	; 0x28
 8015838:	af00      	add	r7, sp, #0
 801583a:	60f8      	str	r0, [r7, #12]
 801583c:	460b      	mov	r3, r1
 801583e:	607a      	str	r2, [r7, #4]
 8015840:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8015842:	230a      	movs	r3, #10
 8015844:	84fb      	strh	r3, [r7, #38]	; 0x26
 8015846:	230a      	movs	r3, #10
 8015848:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 801584a:	230a      	movs	r3, #10
 801584c:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 801584e:	2300      	movs	r3, #0
 8015850:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8015852:	230a      	movs	r3, #10
 8015854:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8015856:	2300      	movs	r3, #0
 8015858:	83bb      	strh	r3, [r7, #28]
 801585a:	2300      	movs	r3, #0
 801585c:	837b      	strh	r3, [r7, #26]
 801585e:	2300      	movs	r3, #0
 8015860:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015862:	2300      	movs	r3, #0
 8015864:	843b      	strh	r3, [r7, #32]
 8015866:	e0ae      	b.n	80159c6 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8015868:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801586c:	49a6      	ldr	r1, [pc, #664]	; (8015b08 <etharp_find_entry+0x2d4>)
 801586e:	4613      	mov	r3, r2
 8015870:	005b      	lsls	r3, r3, #1
 8015872:	4413      	add	r3, r2
 8015874:	00db      	lsls	r3, r3, #3
 8015876:	440b      	add	r3, r1
 8015878:	3314      	adds	r3, #20
 801587a:	781b      	ldrb	r3, [r3, #0]
 801587c:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801587e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8015882:	2b0a      	cmp	r3, #10
 8015884:	d105      	bne.n	8015892 <etharp_find_entry+0x5e>
 8015886:	7dfb      	ldrb	r3, [r7, #23]
 8015888:	2b00      	cmp	r3, #0
 801588a:	d102      	bne.n	8015892 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 801588c:	8c3b      	ldrh	r3, [r7, #32]
 801588e:	847b      	strh	r3, [r7, #34]	; 0x22
 8015890:	e095      	b.n	80159be <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8015892:	7dfb      	ldrb	r3, [r7, #23]
 8015894:	2b00      	cmp	r3, #0
 8015896:	f000 8092 	beq.w	80159be <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 801589a:	7dfb      	ldrb	r3, [r7, #23]
 801589c:	2b01      	cmp	r3, #1
 801589e:	d009      	beq.n	80158b4 <etharp_find_entry+0x80>
 80158a0:	7dfb      	ldrb	r3, [r7, #23]
 80158a2:	2b01      	cmp	r3, #1
 80158a4:	d806      	bhi.n	80158b4 <etharp_find_entry+0x80>
 80158a6:	4b99      	ldr	r3, [pc, #612]	; (8015b0c <etharp_find_entry+0x2d8>)
 80158a8:	f240 1223 	movw	r2, #291	; 0x123
 80158ac:	4998      	ldr	r1, [pc, #608]	; (8015b10 <etharp_find_entry+0x2dc>)
 80158ae:	4899      	ldr	r0, [pc, #612]	; (8015b14 <etharp_find_entry+0x2e0>)
 80158b0:	f002 fd88 	bl	80183c4 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 80158b4:	68fb      	ldr	r3, [r7, #12]
 80158b6:	2b00      	cmp	r3, #0
 80158b8:	d020      	beq.n	80158fc <etharp_find_entry+0xc8>
 80158ba:	68fb      	ldr	r3, [r7, #12]
 80158bc:	6819      	ldr	r1, [r3, #0]
 80158be:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80158c2:	4891      	ldr	r0, [pc, #580]	; (8015b08 <etharp_find_entry+0x2d4>)
 80158c4:	4613      	mov	r3, r2
 80158c6:	005b      	lsls	r3, r3, #1
 80158c8:	4413      	add	r3, r2
 80158ca:	00db      	lsls	r3, r3, #3
 80158cc:	4403      	add	r3, r0
 80158ce:	3304      	adds	r3, #4
 80158d0:	681b      	ldr	r3, [r3, #0]
 80158d2:	4299      	cmp	r1, r3
 80158d4:	d112      	bne.n	80158fc <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 80158d6:	687b      	ldr	r3, [r7, #4]
 80158d8:	2b00      	cmp	r3, #0
 80158da:	d00c      	beq.n	80158f6 <etharp_find_entry+0xc2>
 80158dc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80158e0:	4989      	ldr	r1, [pc, #548]	; (8015b08 <etharp_find_entry+0x2d4>)
 80158e2:	4613      	mov	r3, r2
 80158e4:	005b      	lsls	r3, r3, #1
 80158e6:	4413      	add	r3, r2
 80158e8:	00db      	lsls	r3, r3, #3
 80158ea:	440b      	add	r3, r1
 80158ec:	3308      	adds	r3, #8
 80158ee:	681b      	ldr	r3, [r3, #0]
 80158f0:	687a      	ldr	r2, [r7, #4]
 80158f2:	429a      	cmp	r2, r3
 80158f4:	d102      	bne.n	80158fc <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 80158f6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80158fa:	e100      	b.n	8015afe <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 80158fc:	7dfb      	ldrb	r3, [r7, #23]
 80158fe:	2b01      	cmp	r3, #1
 8015900:	d140      	bne.n	8015984 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8015902:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015906:	4980      	ldr	r1, [pc, #512]	; (8015b08 <etharp_find_entry+0x2d4>)
 8015908:	4613      	mov	r3, r2
 801590a:	005b      	lsls	r3, r3, #1
 801590c:	4413      	add	r3, r2
 801590e:	00db      	lsls	r3, r3, #3
 8015910:	440b      	add	r3, r1
 8015912:	681b      	ldr	r3, [r3, #0]
 8015914:	2b00      	cmp	r3, #0
 8015916:	d01a      	beq.n	801594e <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8015918:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801591c:	497a      	ldr	r1, [pc, #488]	; (8015b08 <etharp_find_entry+0x2d4>)
 801591e:	4613      	mov	r3, r2
 8015920:	005b      	lsls	r3, r3, #1
 8015922:	4413      	add	r3, r2
 8015924:	00db      	lsls	r3, r3, #3
 8015926:	440b      	add	r3, r1
 8015928:	3312      	adds	r3, #18
 801592a:	881b      	ldrh	r3, [r3, #0]
 801592c:	8bba      	ldrh	r2, [r7, #28]
 801592e:	429a      	cmp	r2, r3
 8015930:	d845      	bhi.n	80159be <etharp_find_entry+0x18a>
            old_queue = i;
 8015932:	8c3b      	ldrh	r3, [r7, #32]
 8015934:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8015936:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801593a:	4973      	ldr	r1, [pc, #460]	; (8015b08 <etharp_find_entry+0x2d4>)
 801593c:	4613      	mov	r3, r2
 801593e:	005b      	lsls	r3, r3, #1
 8015940:	4413      	add	r3, r2
 8015942:	00db      	lsls	r3, r3, #3
 8015944:	440b      	add	r3, r1
 8015946:	3312      	adds	r3, #18
 8015948:	881b      	ldrh	r3, [r3, #0]
 801594a:	83bb      	strh	r3, [r7, #28]
 801594c:	e037      	b.n	80159be <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 801594e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015952:	496d      	ldr	r1, [pc, #436]	; (8015b08 <etharp_find_entry+0x2d4>)
 8015954:	4613      	mov	r3, r2
 8015956:	005b      	lsls	r3, r3, #1
 8015958:	4413      	add	r3, r2
 801595a:	00db      	lsls	r3, r3, #3
 801595c:	440b      	add	r3, r1
 801595e:	3312      	adds	r3, #18
 8015960:	881b      	ldrh	r3, [r3, #0]
 8015962:	8b7a      	ldrh	r2, [r7, #26]
 8015964:	429a      	cmp	r2, r3
 8015966:	d82a      	bhi.n	80159be <etharp_find_entry+0x18a>
            old_pending = i;
 8015968:	8c3b      	ldrh	r3, [r7, #32]
 801596a:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 801596c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015970:	4965      	ldr	r1, [pc, #404]	; (8015b08 <etharp_find_entry+0x2d4>)
 8015972:	4613      	mov	r3, r2
 8015974:	005b      	lsls	r3, r3, #1
 8015976:	4413      	add	r3, r2
 8015978:	00db      	lsls	r3, r3, #3
 801597a:	440b      	add	r3, r1
 801597c:	3312      	adds	r3, #18
 801597e:	881b      	ldrh	r3, [r3, #0]
 8015980:	837b      	strh	r3, [r7, #26]
 8015982:	e01c      	b.n	80159be <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8015984:	7dfb      	ldrb	r3, [r7, #23]
 8015986:	2b01      	cmp	r3, #1
 8015988:	d919      	bls.n	80159be <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 801598a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801598e:	495e      	ldr	r1, [pc, #376]	; (8015b08 <etharp_find_entry+0x2d4>)
 8015990:	4613      	mov	r3, r2
 8015992:	005b      	lsls	r3, r3, #1
 8015994:	4413      	add	r3, r2
 8015996:	00db      	lsls	r3, r3, #3
 8015998:	440b      	add	r3, r1
 801599a:	3312      	adds	r3, #18
 801599c:	881b      	ldrh	r3, [r3, #0]
 801599e:	8b3a      	ldrh	r2, [r7, #24]
 80159a0:	429a      	cmp	r2, r3
 80159a2:	d80c      	bhi.n	80159be <etharp_find_entry+0x18a>
            old_stable = i;
 80159a4:	8c3b      	ldrh	r3, [r7, #32]
 80159a6:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 80159a8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80159ac:	4956      	ldr	r1, [pc, #344]	; (8015b08 <etharp_find_entry+0x2d4>)
 80159ae:	4613      	mov	r3, r2
 80159b0:	005b      	lsls	r3, r3, #1
 80159b2:	4413      	add	r3, r2
 80159b4:	00db      	lsls	r3, r3, #3
 80159b6:	440b      	add	r3, r1
 80159b8:	3312      	adds	r3, #18
 80159ba:	881b      	ldrh	r3, [r3, #0]
 80159bc:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80159be:	8c3b      	ldrh	r3, [r7, #32]
 80159c0:	3301      	adds	r3, #1
 80159c2:	b29b      	uxth	r3, r3
 80159c4:	843b      	strh	r3, [r7, #32]
 80159c6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80159ca:	2b09      	cmp	r3, #9
 80159cc:	f77f af4c 	ble.w	8015868 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 80159d0:	7afb      	ldrb	r3, [r7, #11]
 80159d2:	f003 0302 	and.w	r3, r3, #2
 80159d6:	2b00      	cmp	r3, #0
 80159d8:	d108      	bne.n	80159ec <etharp_find_entry+0x1b8>
 80159da:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80159de:	2b0a      	cmp	r3, #10
 80159e0:	d107      	bne.n	80159f2 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 80159e2:	7afb      	ldrb	r3, [r7, #11]
 80159e4:	f003 0301 	and.w	r3, r3, #1
 80159e8:	2b00      	cmp	r3, #0
 80159ea:	d102      	bne.n	80159f2 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 80159ec:	f04f 33ff 	mov.w	r3, #4294967295
 80159f0:	e085      	b.n	8015afe <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 80159f2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80159f6:	2b09      	cmp	r3, #9
 80159f8:	dc02      	bgt.n	8015a00 <etharp_find_entry+0x1cc>
    i = empty;
 80159fa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80159fc:	843b      	strh	r3, [r7, #32]
 80159fe:	e039      	b.n	8015a74 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8015a00:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8015a04:	2b09      	cmp	r3, #9
 8015a06:	dc14      	bgt.n	8015a32 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8015a08:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015a0a:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8015a0c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015a10:	493d      	ldr	r1, [pc, #244]	; (8015b08 <etharp_find_entry+0x2d4>)
 8015a12:	4613      	mov	r3, r2
 8015a14:	005b      	lsls	r3, r3, #1
 8015a16:	4413      	add	r3, r2
 8015a18:	00db      	lsls	r3, r3, #3
 8015a1a:	440b      	add	r3, r1
 8015a1c:	681b      	ldr	r3, [r3, #0]
 8015a1e:	2b00      	cmp	r3, #0
 8015a20:	d018      	beq.n	8015a54 <etharp_find_entry+0x220>
 8015a22:	4b3a      	ldr	r3, [pc, #232]	; (8015b0c <etharp_find_entry+0x2d8>)
 8015a24:	f240 126d 	movw	r2, #365	; 0x16d
 8015a28:	493b      	ldr	r1, [pc, #236]	; (8015b18 <etharp_find_entry+0x2e4>)
 8015a2a:	483a      	ldr	r0, [pc, #232]	; (8015b14 <etharp_find_entry+0x2e0>)
 8015a2c:	f002 fcca 	bl	80183c4 <iprintf>
 8015a30:	e010      	b.n	8015a54 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8015a32:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8015a36:	2b09      	cmp	r3, #9
 8015a38:	dc02      	bgt.n	8015a40 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8015a3a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8015a3c:	843b      	strh	r3, [r7, #32]
 8015a3e:	e009      	b.n	8015a54 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8015a40:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8015a44:	2b09      	cmp	r3, #9
 8015a46:	dc02      	bgt.n	8015a4e <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8015a48:	8bfb      	ldrh	r3, [r7, #30]
 8015a4a:	843b      	strh	r3, [r7, #32]
 8015a4c:	e002      	b.n	8015a54 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8015a4e:	f04f 33ff 	mov.w	r3, #4294967295
 8015a52:	e054      	b.n	8015afe <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8015a54:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8015a58:	2b09      	cmp	r3, #9
 8015a5a:	dd06      	ble.n	8015a6a <etharp_find_entry+0x236>
 8015a5c:	4b2b      	ldr	r3, [pc, #172]	; (8015b0c <etharp_find_entry+0x2d8>)
 8015a5e:	f240 127f 	movw	r2, #383	; 0x17f
 8015a62:	492e      	ldr	r1, [pc, #184]	; (8015b1c <etharp_find_entry+0x2e8>)
 8015a64:	482b      	ldr	r0, [pc, #172]	; (8015b14 <etharp_find_entry+0x2e0>)
 8015a66:	f002 fcad 	bl	80183c4 <iprintf>
    etharp_free_entry(i);
 8015a6a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8015a6e:	4618      	mov	r0, r3
 8015a70:	f7ff fe06 	bl	8015680 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8015a74:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8015a78:	2b09      	cmp	r3, #9
 8015a7a:	dd06      	ble.n	8015a8a <etharp_find_entry+0x256>
 8015a7c:	4b23      	ldr	r3, [pc, #140]	; (8015b0c <etharp_find_entry+0x2d8>)
 8015a7e:	f240 1283 	movw	r2, #387	; 0x183
 8015a82:	4926      	ldr	r1, [pc, #152]	; (8015b1c <etharp_find_entry+0x2e8>)
 8015a84:	4823      	ldr	r0, [pc, #140]	; (8015b14 <etharp_find_entry+0x2e0>)
 8015a86:	f002 fc9d 	bl	80183c4 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8015a8a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015a8e:	491e      	ldr	r1, [pc, #120]	; (8015b08 <etharp_find_entry+0x2d4>)
 8015a90:	4613      	mov	r3, r2
 8015a92:	005b      	lsls	r3, r3, #1
 8015a94:	4413      	add	r3, r2
 8015a96:	00db      	lsls	r3, r3, #3
 8015a98:	440b      	add	r3, r1
 8015a9a:	3314      	adds	r3, #20
 8015a9c:	781b      	ldrb	r3, [r3, #0]
 8015a9e:	2b00      	cmp	r3, #0
 8015aa0:	d006      	beq.n	8015ab0 <etharp_find_entry+0x27c>
 8015aa2:	4b1a      	ldr	r3, [pc, #104]	; (8015b0c <etharp_find_entry+0x2d8>)
 8015aa4:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8015aa8:	491d      	ldr	r1, [pc, #116]	; (8015b20 <etharp_find_entry+0x2ec>)
 8015aaa:	481a      	ldr	r0, [pc, #104]	; (8015b14 <etharp_find_entry+0x2e0>)
 8015aac:	f002 fc8a 	bl	80183c4 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8015ab0:	68fb      	ldr	r3, [r7, #12]
 8015ab2:	2b00      	cmp	r3, #0
 8015ab4:	d00b      	beq.n	8015ace <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8015ab6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015aba:	68fb      	ldr	r3, [r7, #12]
 8015abc:	6819      	ldr	r1, [r3, #0]
 8015abe:	4812      	ldr	r0, [pc, #72]	; (8015b08 <etharp_find_entry+0x2d4>)
 8015ac0:	4613      	mov	r3, r2
 8015ac2:	005b      	lsls	r3, r3, #1
 8015ac4:	4413      	add	r3, r2
 8015ac6:	00db      	lsls	r3, r3, #3
 8015ac8:	4403      	add	r3, r0
 8015aca:	3304      	adds	r3, #4
 8015acc:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8015ace:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015ad2:	490d      	ldr	r1, [pc, #52]	; (8015b08 <etharp_find_entry+0x2d4>)
 8015ad4:	4613      	mov	r3, r2
 8015ad6:	005b      	lsls	r3, r3, #1
 8015ad8:	4413      	add	r3, r2
 8015ada:	00db      	lsls	r3, r3, #3
 8015adc:	440b      	add	r3, r1
 8015ade:	3312      	adds	r3, #18
 8015ae0:	2200      	movs	r2, #0
 8015ae2:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8015ae4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015ae8:	4907      	ldr	r1, [pc, #28]	; (8015b08 <etharp_find_entry+0x2d4>)
 8015aea:	4613      	mov	r3, r2
 8015aec:	005b      	lsls	r3, r3, #1
 8015aee:	4413      	add	r3, r2
 8015af0:	00db      	lsls	r3, r3, #3
 8015af2:	440b      	add	r3, r1
 8015af4:	3308      	adds	r3, #8
 8015af6:	687a      	ldr	r2, [r7, #4]
 8015af8:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8015afa:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8015afe:	4618      	mov	r0, r3
 8015b00:	3728      	adds	r7, #40	; 0x28
 8015b02:	46bd      	mov	sp, r7
 8015b04:	bd80      	pop	{r7, pc}
 8015b06:	bf00      	nop
 8015b08:	20010e0c 	.word	0x20010e0c
 8015b0c:	0801c71c 	.word	0x0801c71c
 8015b10:	0801c754 	.word	0x0801c754
 8015b14:	0801c794 	.word	0x0801c794
 8015b18:	0801c7bc 	.word	0x0801c7bc
 8015b1c:	0801c7d4 	.word	0x0801c7d4
 8015b20:	0801c7e8 	.word	0x0801c7e8

08015b24 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8015b24:	b580      	push	{r7, lr}
 8015b26:	b088      	sub	sp, #32
 8015b28:	af02      	add	r7, sp, #8
 8015b2a:	60f8      	str	r0, [r7, #12]
 8015b2c:	60b9      	str	r1, [r7, #8]
 8015b2e:	607a      	str	r2, [r7, #4]
 8015b30:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8015b32:	68fb      	ldr	r3, [r7, #12]
 8015b34:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8015b38:	2b06      	cmp	r3, #6
 8015b3a:	d006      	beq.n	8015b4a <etharp_update_arp_entry+0x26>
 8015b3c:	4b48      	ldr	r3, [pc, #288]	; (8015c60 <etharp_update_arp_entry+0x13c>)
 8015b3e:	f240 12a9 	movw	r2, #425	; 0x1a9
 8015b42:	4948      	ldr	r1, [pc, #288]	; (8015c64 <etharp_update_arp_entry+0x140>)
 8015b44:	4848      	ldr	r0, [pc, #288]	; (8015c68 <etharp_update_arp_entry+0x144>)
 8015b46:	f002 fc3d 	bl	80183c4 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8015b4a:	68bb      	ldr	r3, [r7, #8]
 8015b4c:	2b00      	cmp	r3, #0
 8015b4e:	d012      	beq.n	8015b76 <etharp_update_arp_entry+0x52>
 8015b50:	68bb      	ldr	r3, [r7, #8]
 8015b52:	681b      	ldr	r3, [r3, #0]
 8015b54:	2b00      	cmp	r3, #0
 8015b56:	d00e      	beq.n	8015b76 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8015b58:	68bb      	ldr	r3, [r7, #8]
 8015b5a:	681b      	ldr	r3, [r3, #0]
 8015b5c:	68f9      	ldr	r1, [r7, #12]
 8015b5e:	4618      	mov	r0, r3
 8015b60:	f001 f920 	bl	8016da4 <ip4_addr_isbroadcast_u32>
 8015b64:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8015b66:	2b00      	cmp	r3, #0
 8015b68:	d105      	bne.n	8015b76 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8015b6a:	68bb      	ldr	r3, [r7, #8]
 8015b6c:	681b      	ldr	r3, [r3, #0]
 8015b6e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8015b72:	2be0      	cmp	r3, #224	; 0xe0
 8015b74:	d102      	bne.n	8015b7c <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8015b76:	f06f 030f 	mvn.w	r3, #15
 8015b7a:	e06c      	b.n	8015c56 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8015b7c:	78fb      	ldrb	r3, [r7, #3]
 8015b7e:	68fa      	ldr	r2, [r7, #12]
 8015b80:	4619      	mov	r1, r3
 8015b82:	68b8      	ldr	r0, [r7, #8]
 8015b84:	f7ff fe56 	bl	8015834 <etharp_find_entry>
 8015b88:	4603      	mov	r3, r0
 8015b8a:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8015b8c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8015b90:	2b00      	cmp	r3, #0
 8015b92:	da02      	bge.n	8015b9a <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8015b94:	8afb      	ldrh	r3, [r7, #22]
 8015b96:	b25b      	sxtb	r3, r3
 8015b98:	e05d      	b.n	8015c56 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8015b9a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015b9e:	4933      	ldr	r1, [pc, #204]	; (8015c6c <etharp_update_arp_entry+0x148>)
 8015ba0:	4613      	mov	r3, r2
 8015ba2:	005b      	lsls	r3, r3, #1
 8015ba4:	4413      	add	r3, r2
 8015ba6:	00db      	lsls	r3, r3, #3
 8015ba8:	440b      	add	r3, r1
 8015baa:	3314      	adds	r3, #20
 8015bac:	2202      	movs	r2, #2
 8015bae:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8015bb0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015bb4:	492d      	ldr	r1, [pc, #180]	; (8015c6c <etharp_update_arp_entry+0x148>)
 8015bb6:	4613      	mov	r3, r2
 8015bb8:	005b      	lsls	r3, r3, #1
 8015bba:	4413      	add	r3, r2
 8015bbc:	00db      	lsls	r3, r3, #3
 8015bbe:	440b      	add	r3, r1
 8015bc0:	3308      	adds	r3, #8
 8015bc2:	68fa      	ldr	r2, [r7, #12]
 8015bc4:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8015bc6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015bca:	4613      	mov	r3, r2
 8015bcc:	005b      	lsls	r3, r3, #1
 8015bce:	4413      	add	r3, r2
 8015bd0:	00db      	lsls	r3, r3, #3
 8015bd2:	3308      	adds	r3, #8
 8015bd4:	4a25      	ldr	r2, [pc, #148]	; (8015c6c <etharp_update_arp_entry+0x148>)
 8015bd6:	4413      	add	r3, r2
 8015bd8:	3304      	adds	r3, #4
 8015bda:	2206      	movs	r2, #6
 8015bdc:	6879      	ldr	r1, [r7, #4]
 8015bde:	4618      	mov	r0, r3
 8015be0:	f002 fb45 	bl	801826e <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8015be4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015be8:	4920      	ldr	r1, [pc, #128]	; (8015c6c <etharp_update_arp_entry+0x148>)
 8015bea:	4613      	mov	r3, r2
 8015bec:	005b      	lsls	r3, r3, #1
 8015bee:	4413      	add	r3, r2
 8015bf0:	00db      	lsls	r3, r3, #3
 8015bf2:	440b      	add	r3, r1
 8015bf4:	3312      	adds	r3, #18
 8015bf6:	2200      	movs	r2, #0
 8015bf8:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8015bfa:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015bfe:	491b      	ldr	r1, [pc, #108]	; (8015c6c <etharp_update_arp_entry+0x148>)
 8015c00:	4613      	mov	r3, r2
 8015c02:	005b      	lsls	r3, r3, #1
 8015c04:	4413      	add	r3, r2
 8015c06:	00db      	lsls	r3, r3, #3
 8015c08:	440b      	add	r3, r1
 8015c0a:	681b      	ldr	r3, [r3, #0]
 8015c0c:	2b00      	cmp	r3, #0
 8015c0e:	d021      	beq.n	8015c54 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8015c10:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015c14:	4915      	ldr	r1, [pc, #84]	; (8015c6c <etharp_update_arp_entry+0x148>)
 8015c16:	4613      	mov	r3, r2
 8015c18:	005b      	lsls	r3, r3, #1
 8015c1a:	4413      	add	r3, r2
 8015c1c:	00db      	lsls	r3, r3, #3
 8015c1e:	440b      	add	r3, r1
 8015c20:	681b      	ldr	r3, [r3, #0]
 8015c22:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8015c24:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015c28:	4910      	ldr	r1, [pc, #64]	; (8015c6c <etharp_update_arp_entry+0x148>)
 8015c2a:	4613      	mov	r3, r2
 8015c2c:	005b      	lsls	r3, r3, #1
 8015c2e:	4413      	add	r3, r2
 8015c30:	00db      	lsls	r3, r3, #3
 8015c32:	440b      	add	r3, r1
 8015c34:	2200      	movs	r2, #0
 8015c36:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8015c38:	68fb      	ldr	r3, [r7, #12]
 8015c3a:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 8015c3e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8015c42:	9300      	str	r3, [sp, #0]
 8015c44:	687b      	ldr	r3, [r7, #4]
 8015c46:	6939      	ldr	r1, [r7, #16]
 8015c48:	68f8      	ldr	r0, [r7, #12]
 8015c4a:	f001 ffb9 	bl	8017bc0 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8015c4e:	6938      	ldr	r0, [r7, #16]
 8015c50:	f7f6 fce2 	bl	800c618 <pbuf_free>
  }
  return ERR_OK;
 8015c54:	2300      	movs	r3, #0
}
 8015c56:	4618      	mov	r0, r3
 8015c58:	3718      	adds	r7, #24
 8015c5a:	46bd      	mov	sp, r7
 8015c5c:	bd80      	pop	{r7, pc}
 8015c5e:	bf00      	nop
 8015c60:	0801c71c 	.word	0x0801c71c
 8015c64:	0801c814 	.word	0x0801c814
 8015c68:	0801c794 	.word	0x0801c794
 8015c6c:	20010e0c 	.word	0x20010e0c

08015c70 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8015c70:	b580      	push	{r7, lr}
 8015c72:	b084      	sub	sp, #16
 8015c74:	af00      	add	r7, sp, #0
 8015c76:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015c78:	2300      	movs	r3, #0
 8015c7a:	60fb      	str	r3, [r7, #12]
 8015c7c:	e01e      	b.n	8015cbc <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8015c7e:	4913      	ldr	r1, [pc, #76]	; (8015ccc <etharp_cleanup_netif+0x5c>)
 8015c80:	68fa      	ldr	r2, [r7, #12]
 8015c82:	4613      	mov	r3, r2
 8015c84:	005b      	lsls	r3, r3, #1
 8015c86:	4413      	add	r3, r2
 8015c88:	00db      	lsls	r3, r3, #3
 8015c8a:	440b      	add	r3, r1
 8015c8c:	3314      	adds	r3, #20
 8015c8e:	781b      	ldrb	r3, [r3, #0]
 8015c90:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8015c92:	7afb      	ldrb	r3, [r7, #11]
 8015c94:	2b00      	cmp	r3, #0
 8015c96:	d00e      	beq.n	8015cb6 <etharp_cleanup_netif+0x46>
 8015c98:	490c      	ldr	r1, [pc, #48]	; (8015ccc <etharp_cleanup_netif+0x5c>)
 8015c9a:	68fa      	ldr	r2, [r7, #12]
 8015c9c:	4613      	mov	r3, r2
 8015c9e:	005b      	lsls	r3, r3, #1
 8015ca0:	4413      	add	r3, r2
 8015ca2:	00db      	lsls	r3, r3, #3
 8015ca4:	440b      	add	r3, r1
 8015ca6:	3308      	adds	r3, #8
 8015ca8:	681b      	ldr	r3, [r3, #0]
 8015caa:	687a      	ldr	r2, [r7, #4]
 8015cac:	429a      	cmp	r2, r3
 8015cae:	d102      	bne.n	8015cb6 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8015cb0:	68f8      	ldr	r0, [r7, #12]
 8015cb2:	f7ff fce5 	bl	8015680 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015cb6:	68fb      	ldr	r3, [r7, #12]
 8015cb8:	3301      	adds	r3, #1
 8015cba:	60fb      	str	r3, [r7, #12]
 8015cbc:	68fb      	ldr	r3, [r7, #12]
 8015cbe:	2b09      	cmp	r3, #9
 8015cc0:	dddd      	ble.n	8015c7e <etharp_cleanup_netif+0xe>
    }
  }
}
 8015cc2:	bf00      	nop
 8015cc4:	bf00      	nop
 8015cc6:	3710      	adds	r7, #16
 8015cc8:	46bd      	mov	sp, r7
 8015cca:	bd80      	pop	{r7, pc}
 8015ccc:	20010e0c 	.word	0x20010e0c

08015cd0 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8015cd0:	b5b0      	push	{r4, r5, r7, lr}
 8015cd2:	b08a      	sub	sp, #40	; 0x28
 8015cd4:	af04      	add	r7, sp, #16
 8015cd6:	6078      	str	r0, [r7, #4]
 8015cd8:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8015cda:	683b      	ldr	r3, [r7, #0]
 8015cdc:	2b00      	cmp	r3, #0
 8015cde:	d107      	bne.n	8015cf0 <etharp_input+0x20>
 8015ce0:	4b3f      	ldr	r3, [pc, #252]	; (8015de0 <etharp_input+0x110>)
 8015ce2:	f240 228a 	movw	r2, #650	; 0x28a
 8015ce6:	493f      	ldr	r1, [pc, #252]	; (8015de4 <etharp_input+0x114>)
 8015ce8:	483f      	ldr	r0, [pc, #252]	; (8015de8 <etharp_input+0x118>)
 8015cea:	f002 fb6b 	bl	80183c4 <iprintf>
 8015cee:	e074      	b.n	8015dda <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 8015cf0:	687b      	ldr	r3, [r7, #4]
 8015cf2:	685b      	ldr	r3, [r3, #4]
 8015cf4:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8015cf6:	693b      	ldr	r3, [r7, #16]
 8015cf8:	881b      	ldrh	r3, [r3, #0]
 8015cfa:	b29b      	uxth	r3, r3
 8015cfc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8015d00:	d10c      	bne.n	8015d1c <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8015d02:	693b      	ldr	r3, [r7, #16]
 8015d04:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8015d06:	2b06      	cmp	r3, #6
 8015d08:	d108      	bne.n	8015d1c <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8015d0a:	693b      	ldr	r3, [r7, #16]
 8015d0c:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8015d0e:	2b04      	cmp	r3, #4
 8015d10:	d104      	bne.n	8015d1c <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8015d12:	693b      	ldr	r3, [r7, #16]
 8015d14:	885b      	ldrh	r3, [r3, #2]
 8015d16:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8015d18:	2b08      	cmp	r3, #8
 8015d1a:	d003      	beq.n	8015d24 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8015d1c:	6878      	ldr	r0, [r7, #4]
 8015d1e:	f7f6 fc7b 	bl	800c618 <pbuf_free>
    return;
 8015d22:	e05a      	b.n	8015dda <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8015d24:	693b      	ldr	r3, [r7, #16]
 8015d26:	330e      	adds	r3, #14
 8015d28:	681b      	ldr	r3, [r3, #0]
 8015d2a:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8015d2c:	693b      	ldr	r3, [r7, #16]
 8015d2e:	3318      	adds	r3, #24
 8015d30:	681b      	ldr	r3, [r3, #0]
 8015d32:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8015d34:	683b      	ldr	r3, [r7, #0]
 8015d36:	3304      	adds	r3, #4
 8015d38:	681b      	ldr	r3, [r3, #0]
 8015d3a:	2b00      	cmp	r3, #0
 8015d3c:	d102      	bne.n	8015d44 <etharp_input+0x74>
    for_us = 0;
 8015d3e:	2300      	movs	r3, #0
 8015d40:	75fb      	strb	r3, [r7, #23]
 8015d42:	e009      	b.n	8015d58 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8015d44:	68ba      	ldr	r2, [r7, #8]
 8015d46:	683b      	ldr	r3, [r7, #0]
 8015d48:	3304      	adds	r3, #4
 8015d4a:	681b      	ldr	r3, [r3, #0]
 8015d4c:	429a      	cmp	r2, r3
 8015d4e:	bf0c      	ite	eq
 8015d50:	2301      	moveq	r3, #1
 8015d52:	2300      	movne	r3, #0
 8015d54:	b2db      	uxtb	r3, r3
 8015d56:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8015d58:	693b      	ldr	r3, [r7, #16]
 8015d5a:	f103 0208 	add.w	r2, r3, #8
 8015d5e:	7dfb      	ldrb	r3, [r7, #23]
 8015d60:	2b00      	cmp	r3, #0
 8015d62:	d001      	beq.n	8015d68 <etharp_input+0x98>
 8015d64:	2301      	movs	r3, #1
 8015d66:	e000      	b.n	8015d6a <etharp_input+0x9a>
 8015d68:	2302      	movs	r3, #2
 8015d6a:	f107 010c 	add.w	r1, r7, #12
 8015d6e:	6838      	ldr	r0, [r7, #0]
 8015d70:	f7ff fed8 	bl	8015b24 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8015d74:	693b      	ldr	r3, [r7, #16]
 8015d76:	88db      	ldrh	r3, [r3, #6]
 8015d78:	b29b      	uxth	r3, r3
 8015d7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8015d7e:	d003      	beq.n	8015d88 <etharp_input+0xb8>
 8015d80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015d84:	d01e      	beq.n	8015dc4 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8015d86:	e025      	b.n	8015dd4 <etharp_input+0x104>
      if (for_us) {
 8015d88:	7dfb      	ldrb	r3, [r7, #23]
 8015d8a:	2b00      	cmp	r3, #0
 8015d8c:	d021      	beq.n	8015dd2 <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8015d8e:	683b      	ldr	r3, [r7, #0]
 8015d90:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 8015d94:	693b      	ldr	r3, [r7, #16]
 8015d96:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8015d9a:	683b      	ldr	r3, [r7, #0]
 8015d9c:	f103 052a 	add.w	r5, r3, #42	; 0x2a
 8015da0:	683b      	ldr	r3, [r7, #0]
 8015da2:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8015da4:	693a      	ldr	r2, [r7, #16]
 8015da6:	3208      	adds	r2, #8
        etharp_raw(netif,
 8015da8:	2102      	movs	r1, #2
 8015daa:	9103      	str	r1, [sp, #12]
 8015dac:	f107 010c 	add.w	r1, r7, #12
 8015db0:	9102      	str	r1, [sp, #8]
 8015db2:	9201      	str	r2, [sp, #4]
 8015db4:	9300      	str	r3, [sp, #0]
 8015db6:	462b      	mov	r3, r5
 8015db8:	4622      	mov	r2, r4
 8015dba:	4601      	mov	r1, r0
 8015dbc:	6838      	ldr	r0, [r7, #0]
 8015dbe:	f000 faef 	bl	80163a0 <etharp_raw>
      break;
 8015dc2:	e006      	b.n	8015dd2 <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 8015dc4:	f107 030c 	add.w	r3, r7, #12
 8015dc8:	4619      	mov	r1, r3
 8015dca:	6838      	ldr	r0, [r7, #0]
 8015dcc:	f7fe f9fc 	bl	80141c8 <dhcp_arp_reply>
      break;
 8015dd0:	e000      	b.n	8015dd4 <etharp_input+0x104>
      break;
 8015dd2:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8015dd4:	6878      	ldr	r0, [r7, #4]
 8015dd6:	f7f6 fc1f 	bl	800c618 <pbuf_free>
}
 8015dda:	3718      	adds	r7, #24
 8015ddc:	46bd      	mov	sp, r7
 8015dde:	bdb0      	pop	{r4, r5, r7, pc}
 8015de0:	0801c71c 	.word	0x0801c71c
 8015de4:	0801c86c 	.word	0x0801c86c
 8015de8:	0801c794 	.word	0x0801c794

08015dec <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8015dec:	b580      	push	{r7, lr}
 8015dee:	b086      	sub	sp, #24
 8015df0:	af02      	add	r7, sp, #8
 8015df2:	60f8      	str	r0, [r7, #12]
 8015df4:	60b9      	str	r1, [r7, #8]
 8015df6:	4613      	mov	r3, r2
 8015df8:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8015dfa:	79fa      	ldrb	r2, [r7, #7]
 8015dfc:	4944      	ldr	r1, [pc, #272]	; (8015f10 <etharp_output_to_arp_index+0x124>)
 8015dfe:	4613      	mov	r3, r2
 8015e00:	005b      	lsls	r3, r3, #1
 8015e02:	4413      	add	r3, r2
 8015e04:	00db      	lsls	r3, r3, #3
 8015e06:	440b      	add	r3, r1
 8015e08:	3314      	adds	r3, #20
 8015e0a:	781b      	ldrb	r3, [r3, #0]
 8015e0c:	2b01      	cmp	r3, #1
 8015e0e:	d806      	bhi.n	8015e1e <etharp_output_to_arp_index+0x32>
 8015e10:	4b40      	ldr	r3, [pc, #256]	; (8015f14 <etharp_output_to_arp_index+0x128>)
 8015e12:	f240 22ee 	movw	r2, #750	; 0x2ee
 8015e16:	4940      	ldr	r1, [pc, #256]	; (8015f18 <etharp_output_to_arp_index+0x12c>)
 8015e18:	4840      	ldr	r0, [pc, #256]	; (8015f1c <etharp_output_to_arp_index+0x130>)
 8015e1a:	f002 fad3 	bl	80183c4 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8015e1e:	79fa      	ldrb	r2, [r7, #7]
 8015e20:	493b      	ldr	r1, [pc, #236]	; (8015f10 <etharp_output_to_arp_index+0x124>)
 8015e22:	4613      	mov	r3, r2
 8015e24:	005b      	lsls	r3, r3, #1
 8015e26:	4413      	add	r3, r2
 8015e28:	00db      	lsls	r3, r3, #3
 8015e2a:	440b      	add	r3, r1
 8015e2c:	3314      	adds	r3, #20
 8015e2e:	781b      	ldrb	r3, [r3, #0]
 8015e30:	2b02      	cmp	r3, #2
 8015e32:	d153      	bne.n	8015edc <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8015e34:	79fa      	ldrb	r2, [r7, #7]
 8015e36:	4936      	ldr	r1, [pc, #216]	; (8015f10 <etharp_output_to_arp_index+0x124>)
 8015e38:	4613      	mov	r3, r2
 8015e3a:	005b      	lsls	r3, r3, #1
 8015e3c:	4413      	add	r3, r2
 8015e3e:	00db      	lsls	r3, r3, #3
 8015e40:	440b      	add	r3, r1
 8015e42:	3312      	adds	r3, #18
 8015e44:	881b      	ldrh	r3, [r3, #0]
 8015e46:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8015e4a:	d919      	bls.n	8015e80 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8015e4c:	79fa      	ldrb	r2, [r7, #7]
 8015e4e:	4613      	mov	r3, r2
 8015e50:	005b      	lsls	r3, r3, #1
 8015e52:	4413      	add	r3, r2
 8015e54:	00db      	lsls	r3, r3, #3
 8015e56:	4a2e      	ldr	r2, [pc, #184]	; (8015f10 <etharp_output_to_arp_index+0x124>)
 8015e58:	4413      	add	r3, r2
 8015e5a:	3304      	adds	r3, #4
 8015e5c:	4619      	mov	r1, r3
 8015e5e:	68f8      	ldr	r0, [r7, #12]
 8015e60:	f000 fb4c 	bl	80164fc <etharp_request>
 8015e64:	4603      	mov	r3, r0
 8015e66:	2b00      	cmp	r3, #0
 8015e68:	d138      	bne.n	8015edc <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8015e6a:	79fa      	ldrb	r2, [r7, #7]
 8015e6c:	4928      	ldr	r1, [pc, #160]	; (8015f10 <etharp_output_to_arp_index+0x124>)
 8015e6e:	4613      	mov	r3, r2
 8015e70:	005b      	lsls	r3, r3, #1
 8015e72:	4413      	add	r3, r2
 8015e74:	00db      	lsls	r3, r3, #3
 8015e76:	440b      	add	r3, r1
 8015e78:	3314      	adds	r3, #20
 8015e7a:	2203      	movs	r2, #3
 8015e7c:	701a      	strb	r2, [r3, #0]
 8015e7e:	e02d      	b.n	8015edc <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8015e80:	79fa      	ldrb	r2, [r7, #7]
 8015e82:	4923      	ldr	r1, [pc, #140]	; (8015f10 <etharp_output_to_arp_index+0x124>)
 8015e84:	4613      	mov	r3, r2
 8015e86:	005b      	lsls	r3, r3, #1
 8015e88:	4413      	add	r3, r2
 8015e8a:	00db      	lsls	r3, r3, #3
 8015e8c:	440b      	add	r3, r1
 8015e8e:	3312      	adds	r3, #18
 8015e90:	881b      	ldrh	r3, [r3, #0]
 8015e92:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8015e96:	d321      	bcc.n	8015edc <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8015e98:	79fa      	ldrb	r2, [r7, #7]
 8015e9a:	4613      	mov	r3, r2
 8015e9c:	005b      	lsls	r3, r3, #1
 8015e9e:	4413      	add	r3, r2
 8015ea0:	00db      	lsls	r3, r3, #3
 8015ea2:	4a1b      	ldr	r2, [pc, #108]	; (8015f10 <etharp_output_to_arp_index+0x124>)
 8015ea4:	4413      	add	r3, r2
 8015ea6:	1d19      	adds	r1, r3, #4
 8015ea8:	79fa      	ldrb	r2, [r7, #7]
 8015eaa:	4613      	mov	r3, r2
 8015eac:	005b      	lsls	r3, r3, #1
 8015eae:	4413      	add	r3, r2
 8015eb0:	00db      	lsls	r3, r3, #3
 8015eb2:	3308      	adds	r3, #8
 8015eb4:	4a16      	ldr	r2, [pc, #88]	; (8015f10 <etharp_output_to_arp_index+0x124>)
 8015eb6:	4413      	add	r3, r2
 8015eb8:	3304      	adds	r3, #4
 8015eba:	461a      	mov	r2, r3
 8015ebc:	68f8      	ldr	r0, [r7, #12]
 8015ebe:	f000 fafb 	bl	80164b8 <etharp_request_dst>
 8015ec2:	4603      	mov	r3, r0
 8015ec4:	2b00      	cmp	r3, #0
 8015ec6:	d109      	bne.n	8015edc <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8015ec8:	79fa      	ldrb	r2, [r7, #7]
 8015eca:	4911      	ldr	r1, [pc, #68]	; (8015f10 <etharp_output_to_arp_index+0x124>)
 8015ecc:	4613      	mov	r3, r2
 8015ece:	005b      	lsls	r3, r3, #1
 8015ed0:	4413      	add	r3, r2
 8015ed2:	00db      	lsls	r3, r3, #3
 8015ed4:	440b      	add	r3, r1
 8015ed6:	3314      	adds	r3, #20
 8015ed8:	2203      	movs	r2, #3
 8015eda:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8015edc:	68fb      	ldr	r3, [r7, #12]
 8015ede:	f103 012a 	add.w	r1, r3, #42	; 0x2a
 8015ee2:	79fa      	ldrb	r2, [r7, #7]
 8015ee4:	4613      	mov	r3, r2
 8015ee6:	005b      	lsls	r3, r3, #1
 8015ee8:	4413      	add	r3, r2
 8015eea:	00db      	lsls	r3, r3, #3
 8015eec:	3308      	adds	r3, #8
 8015eee:	4a08      	ldr	r2, [pc, #32]	; (8015f10 <etharp_output_to_arp_index+0x124>)
 8015ef0:	4413      	add	r3, r2
 8015ef2:	3304      	adds	r3, #4
 8015ef4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8015ef8:	9200      	str	r2, [sp, #0]
 8015efa:	460a      	mov	r2, r1
 8015efc:	68b9      	ldr	r1, [r7, #8]
 8015efe:	68f8      	ldr	r0, [r7, #12]
 8015f00:	f001 fe5e 	bl	8017bc0 <ethernet_output>
 8015f04:	4603      	mov	r3, r0
}
 8015f06:	4618      	mov	r0, r3
 8015f08:	3710      	adds	r7, #16
 8015f0a:	46bd      	mov	sp, r7
 8015f0c:	bd80      	pop	{r7, pc}
 8015f0e:	bf00      	nop
 8015f10:	20010e0c 	.word	0x20010e0c
 8015f14:	0801c71c 	.word	0x0801c71c
 8015f18:	0801c88c 	.word	0x0801c88c
 8015f1c:	0801c794 	.word	0x0801c794

08015f20 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8015f20:	b580      	push	{r7, lr}
 8015f22:	b08a      	sub	sp, #40	; 0x28
 8015f24:	af02      	add	r7, sp, #8
 8015f26:	60f8      	str	r0, [r7, #12]
 8015f28:	60b9      	str	r1, [r7, #8]
 8015f2a:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8015f2c:	687b      	ldr	r3, [r7, #4]
 8015f2e:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8015f30:	68fb      	ldr	r3, [r7, #12]
 8015f32:	2b00      	cmp	r3, #0
 8015f34:	d106      	bne.n	8015f44 <etharp_output+0x24>
 8015f36:	4b73      	ldr	r3, [pc, #460]	; (8016104 <etharp_output+0x1e4>)
 8015f38:	f240 321e 	movw	r2, #798	; 0x31e
 8015f3c:	4972      	ldr	r1, [pc, #456]	; (8016108 <etharp_output+0x1e8>)
 8015f3e:	4873      	ldr	r0, [pc, #460]	; (801610c <etharp_output+0x1ec>)
 8015f40:	f002 fa40 	bl	80183c4 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8015f44:	68bb      	ldr	r3, [r7, #8]
 8015f46:	2b00      	cmp	r3, #0
 8015f48:	d106      	bne.n	8015f58 <etharp_output+0x38>
 8015f4a:	4b6e      	ldr	r3, [pc, #440]	; (8016104 <etharp_output+0x1e4>)
 8015f4c:	f240 321f 	movw	r2, #799	; 0x31f
 8015f50:	496f      	ldr	r1, [pc, #444]	; (8016110 <etharp_output+0x1f0>)
 8015f52:	486e      	ldr	r0, [pc, #440]	; (801610c <etharp_output+0x1ec>)
 8015f54:	f002 fa36 	bl	80183c4 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8015f58:	687b      	ldr	r3, [r7, #4]
 8015f5a:	2b00      	cmp	r3, #0
 8015f5c:	d106      	bne.n	8015f6c <etharp_output+0x4c>
 8015f5e:	4b69      	ldr	r3, [pc, #420]	; (8016104 <etharp_output+0x1e4>)
 8015f60:	f44f 7248 	mov.w	r2, #800	; 0x320
 8015f64:	496b      	ldr	r1, [pc, #428]	; (8016114 <etharp_output+0x1f4>)
 8015f66:	4869      	ldr	r0, [pc, #420]	; (801610c <etharp_output+0x1ec>)
 8015f68:	f002 fa2c 	bl	80183c4 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8015f6c:	687b      	ldr	r3, [r7, #4]
 8015f6e:	681b      	ldr	r3, [r3, #0]
 8015f70:	68f9      	ldr	r1, [r7, #12]
 8015f72:	4618      	mov	r0, r3
 8015f74:	f000 ff16 	bl	8016da4 <ip4_addr_isbroadcast_u32>
 8015f78:	4603      	mov	r3, r0
 8015f7a:	2b00      	cmp	r3, #0
 8015f7c:	d002      	beq.n	8015f84 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8015f7e:	4b66      	ldr	r3, [pc, #408]	; (8016118 <etharp_output+0x1f8>)
 8015f80:	61fb      	str	r3, [r7, #28]
 8015f82:	e0af      	b.n	80160e4 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8015f84:	687b      	ldr	r3, [r7, #4]
 8015f86:	681b      	ldr	r3, [r3, #0]
 8015f88:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015f8c:	2be0      	cmp	r3, #224	; 0xe0
 8015f8e:	d118      	bne.n	8015fc2 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8015f90:	2301      	movs	r3, #1
 8015f92:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8015f94:	2300      	movs	r3, #0
 8015f96:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8015f98:	235e      	movs	r3, #94	; 0x5e
 8015f9a:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8015f9c:	687b      	ldr	r3, [r7, #4]
 8015f9e:	3301      	adds	r3, #1
 8015fa0:	781b      	ldrb	r3, [r3, #0]
 8015fa2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015fa6:	b2db      	uxtb	r3, r3
 8015fa8:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8015faa:	687b      	ldr	r3, [r7, #4]
 8015fac:	3302      	adds	r3, #2
 8015fae:	781b      	ldrb	r3, [r3, #0]
 8015fb0:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8015fb2:	687b      	ldr	r3, [r7, #4]
 8015fb4:	3303      	adds	r3, #3
 8015fb6:	781b      	ldrb	r3, [r3, #0]
 8015fb8:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8015fba:	f107 0310 	add.w	r3, r7, #16
 8015fbe:	61fb      	str	r3, [r7, #28]
 8015fc0:	e090      	b.n	80160e4 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8015fc2:	687b      	ldr	r3, [r7, #4]
 8015fc4:	681a      	ldr	r2, [r3, #0]
 8015fc6:	68fb      	ldr	r3, [r7, #12]
 8015fc8:	3304      	adds	r3, #4
 8015fca:	681b      	ldr	r3, [r3, #0]
 8015fcc:	405a      	eors	r2, r3
 8015fce:	68fb      	ldr	r3, [r7, #12]
 8015fd0:	3308      	adds	r3, #8
 8015fd2:	681b      	ldr	r3, [r3, #0]
 8015fd4:	4013      	ands	r3, r2
 8015fd6:	2b00      	cmp	r3, #0
 8015fd8:	d012      	beq.n	8016000 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8015fda:	687b      	ldr	r3, [r7, #4]
 8015fdc:	681b      	ldr	r3, [r3, #0]
 8015fde:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8015fe0:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8015fe4:	4293      	cmp	r3, r2
 8015fe6:	d00b      	beq.n	8016000 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8015fe8:	68fb      	ldr	r3, [r7, #12]
 8015fea:	330c      	adds	r3, #12
 8015fec:	681b      	ldr	r3, [r3, #0]
 8015fee:	2b00      	cmp	r3, #0
 8015ff0:	d003      	beq.n	8015ffa <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8015ff2:	68fb      	ldr	r3, [r7, #12]
 8015ff4:	330c      	adds	r3, #12
 8015ff6:	61bb      	str	r3, [r7, #24]
 8015ff8:	e002      	b.n	8016000 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8015ffa:	f06f 0303 	mvn.w	r3, #3
 8015ffe:	e07d      	b.n	80160fc <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8016000:	4b46      	ldr	r3, [pc, #280]	; (801611c <etharp_output+0x1fc>)
 8016002:	781b      	ldrb	r3, [r3, #0]
 8016004:	4619      	mov	r1, r3
 8016006:	4a46      	ldr	r2, [pc, #280]	; (8016120 <etharp_output+0x200>)
 8016008:	460b      	mov	r3, r1
 801600a:	005b      	lsls	r3, r3, #1
 801600c:	440b      	add	r3, r1
 801600e:	00db      	lsls	r3, r3, #3
 8016010:	4413      	add	r3, r2
 8016012:	3314      	adds	r3, #20
 8016014:	781b      	ldrb	r3, [r3, #0]
 8016016:	2b01      	cmp	r3, #1
 8016018:	d925      	bls.n	8016066 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 801601a:	4b40      	ldr	r3, [pc, #256]	; (801611c <etharp_output+0x1fc>)
 801601c:	781b      	ldrb	r3, [r3, #0]
 801601e:	4619      	mov	r1, r3
 8016020:	4a3f      	ldr	r2, [pc, #252]	; (8016120 <etharp_output+0x200>)
 8016022:	460b      	mov	r3, r1
 8016024:	005b      	lsls	r3, r3, #1
 8016026:	440b      	add	r3, r1
 8016028:	00db      	lsls	r3, r3, #3
 801602a:	4413      	add	r3, r2
 801602c:	3308      	adds	r3, #8
 801602e:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8016030:	68fa      	ldr	r2, [r7, #12]
 8016032:	429a      	cmp	r2, r3
 8016034:	d117      	bne.n	8016066 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8016036:	69bb      	ldr	r3, [r7, #24]
 8016038:	681a      	ldr	r2, [r3, #0]
 801603a:	4b38      	ldr	r3, [pc, #224]	; (801611c <etharp_output+0x1fc>)
 801603c:	781b      	ldrb	r3, [r3, #0]
 801603e:	4618      	mov	r0, r3
 8016040:	4937      	ldr	r1, [pc, #220]	; (8016120 <etharp_output+0x200>)
 8016042:	4603      	mov	r3, r0
 8016044:	005b      	lsls	r3, r3, #1
 8016046:	4403      	add	r3, r0
 8016048:	00db      	lsls	r3, r3, #3
 801604a:	440b      	add	r3, r1
 801604c:	3304      	adds	r3, #4
 801604e:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8016050:	429a      	cmp	r2, r3
 8016052:	d108      	bne.n	8016066 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8016054:	4b31      	ldr	r3, [pc, #196]	; (801611c <etharp_output+0x1fc>)
 8016056:	781b      	ldrb	r3, [r3, #0]
 8016058:	461a      	mov	r2, r3
 801605a:	68b9      	ldr	r1, [r7, #8]
 801605c:	68f8      	ldr	r0, [r7, #12]
 801605e:	f7ff fec5 	bl	8015dec <etharp_output_to_arp_index>
 8016062:	4603      	mov	r3, r0
 8016064:	e04a      	b.n	80160fc <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8016066:	2300      	movs	r3, #0
 8016068:	75fb      	strb	r3, [r7, #23]
 801606a:	e031      	b.n	80160d0 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801606c:	7dfa      	ldrb	r2, [r7, #23]
 801606e:	492c      	ldr	r1, [pc, #176]	; (8016120 <etharp_output+0x200>)
 8016070:	4613      	mov	r3, r2
 8016072:	005b      	lsls	r3, r3, #1
 8016074:	4413      	add	r3, r2
 8016076:	00db      	lsls	r3, r3, #3
 8016078:	440b      	add	r3, r1
 801607a:	3314      	adds	r3, #20
 801607c:	781b      	ldrb	r3, [r3, #0]
 801607e:	2b01      	cmp	r3, #1
 8016080:	d923      	bls.n	80160ca <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8016082:	7dfa      	ldrb	r2, [r7, #23]
 8016084:	4926      	ldr	r1, [pc, #152]	; (8016120 <etharp_output+0x200>)
 8016086:	4613      	mov	r3, r2
 8016088:	005b      	lsls	r3, r3, #1
 801608a:	4413      	add	r3, r2
 801608c:	00db      	lsls	r3, r3, #3
 801608e:	440b      	add	r3, r1
 8016090:	3308      	adds	r3, #8
 8016092:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8016094:	68fa      	ldr	r2, [r7, #12]
 8016096:	429a      	cmp	r2, r3
 8016098:	d117      	bne.n	80160ca <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801609a:	69bb      	ldr	r3, [r7, #24]
 801609c:	6819      	ldr	r1, [r3, #0]
 801609e:	7dfa      	ldrb	r2, [r7, #23]
 80160a0:	481f      	ldr	r0, [pc, #124]	; (8016120 <etharp_output+0x200>)
 80160a2:	4613      	mov	r3, r2
 80160a4:	005b      	lsls	r3, r3, #1
 80160a6:	4413      	add	r3, r2
 80160a8:	00db      	lsls	r3, r3, #3
 80160aa:	4403      	add	r3, r0
 80160ac:	3304      	adds	r3, #4
 80160ae:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 80160b0:	4299      	cmp	r1, r3
 80160b2:	d10a      	bne.n	80160ca <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 80160b4:	4a19      	ldr	r2, [pc, #100]	; (801611c <etharp_output+0x1fc>)
 80160b6:	7dfb      	ldrb	r3, [r7, #23]
 80160b8:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 80160ba:	7dfb      	ldrb	r3, [r7, #23]
 80160bc:	461a      	mov	r2, r3
 80160be:	68b9      	ldr	r1, [r7, #8]
 80160c0:	68f8      	ldr	r0, [r7, #12]
 80160c2:	f7ff fe93 	bl	8015dec <etharp_output_to_arp_index>
 80160c6:	4603      	mov	r3, r0
 80160c8:	e018      	b.n	80160fc <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80160ca:	7dfb      	ldrb	r3, [r7, #23]
 80160cc:	3301      	adds	r3, #1
 80160ce:	75fb      	strb	r3, [r7, #23]
 80160d0:	7dfb      	ldrb	r3, [r7, #23]
 80160d2:	2b09      	cmp	r3, #9
 80160d4:	d9ca      	bls.n	801606c <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 80160d6:	68ba      	ldr	r2, [r7, #8]
 80160d8:	69b9      	ldr	r1, [r7, #24]
 80160da:	68f8      	ldr	r0, [r7, #12]
 80160dc:	f000 f822 	bl	8016124 <etharp_query>
 80160e0:	4603      	mov	r3, r0
 80160e2:	e00b      	b.n	80160fc <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 80160e4:	68fb      	ldr	r3, [r7, #12]
 80160e6:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 80160ea:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80160ee:	9300      	str	r3, [sp, #0]
 80160f0:	69fb      	ldr	r3, [r7, #28]
 80160f2:	68b9      	ldr	r1, [r7, #8]
 80160f4:	68f8      	ldr	r0, [r7, #12]
 80160f6:	f001 fd63 	bl	8017bc0 <ethernet_output>
 80160fa:	4603      	mov	r3, r0
}
 80160fc:	4618      	mov	r0, r3
 80160fe:	3720      	adds	r7, #32
 8016100:	46bd      	mov	sp, r7
 8016102:	bd80      	pop	{r7, pc}
 8016104:	0801c71c 	.word	0x0801c71c
 8016108:	0801c86c 	.word	0x0801c86c
 801610c:	0801c794 	.word	0x0801c794
 8016110:	0801c8bc 	.word	0x0801c8bc
 8016114:	0801c85c 	.word	0x0801c85c
 8016118:	08027068 	.word	0x08027068
 801611c:	20010efc 	.word	0x20010efc
 8016120:	20010e0c 	.word	0x20010e0c

08016124 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8016124:	b580      	push	{r7, lr}
 8016126:	b08c      	sub	sp, #48	; 0x30
 8016128:	af02      	add	r7, sp, #8
 801612a:	60f8      	str	r0, [r7, #12]
 801612c:	60b9      	str	r1, [r7, #8]
 801612e:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8016130:	68fb      	ldr	r3, [r7, #12]
 8016132:	332a      	adds	r3, #42	; 0x2a
 8016134:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8016136:	23ff      	movs	r3, #255	; 0xff
 8016138:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 801613c:	2300      	movs	r3, #0
 801613e:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8016140:	68bb      	ldr	r3, [r7, #8]
 8016142:	681b      	ldr	r3, [r3, #0]
 8016144:	68f9      	ldr	r1, [r7, #12]
 8016146:	4618      	mov	r0, r3
 8016148:	f000 fe2c 	bl	8016da4 <ip4_addr_isbroadcast_u32>
 801614c:	4603      	mov	r3, r0
 801614e:	2b00      	cmp	r3, #0
 8016150:	d10c      	bne.n	801616c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8016152:	68bb      	ldr	r3, [r7, #8]
 8016154:	681b      	ldr	r3, [r3, #0]
 8016156:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801615a:	2be0      	cmp	r3, #224	; 0xe0
 801615c:	d006      	beq.n	801616c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801615e:	68bb      	ldr	r3, [r7, #8]
 8016160:	2b00      	cmp	r3, #0
 8016162:	d003      	beq.n	801616c <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8016164:	68bb      	ldr	r3, [r7, #8]
 8016166:	681b      	ldr	r3, [r3, #0]
 8016168:	2b00      	cmp	r3, #0
 801616a:	d102      	bne.n	8016172 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801616c:	f06f 030f 	mvn.w	r3, #15
 8016170:	e101      	b.n	8016376 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8016172:	68fa      	ldr	r2, [r7, #12]
 8016174:	2101      	movs	r1, #1
 8016176:	68b8      	ldr	r0, [r7, #8]
 8016178:	f7ff fb5c 	bl	8015834 <etharp_find_entry>
 801617c:	4603      	mov	r3, r0
 801617e:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8016180:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8016184:	2b00      	cmp	r3, #0
 8016186:	da02      	bge.n	801618e <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8016188:	8a7b      	ldrh	r3, [r7, #18]
 801618a:	b25b      	sxtb	r3, r3
 801618c:	e0f3      	b.n	8016376 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 801618e:	8a7b      	ldrh	r3, [r7, #18]
 8016190:	2b7e      	cmp	r3, #126	; 0x7e
 8016192:	d906      	bls.n	80161a2 <etharp_query+0x7e>
 8016194:	4b7a      	ldr	r3, [pc, #488]	; (8016380 <etharp_query+0x25c>)
 8016196:	f240 32c1 	movw	r2, #961	; 0x3c1
 801619a:	497a      	ldr	r1, [pc, #488]	; (8016384 <etharp_query+0x260>)
 801619c:	487a      	ldr	r0, [pc, #488]	; (8016388 <etharp_query+0x264>)
 801619e:	f002 f911 	bl	80183c4 <iprintf>
  i = (netif_addr_idx_t)i_err;
 80161a2:	8a7b      	ldrh	r3, [r7, #18]
 80161a4:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 80161a6:	7c7a      	ldrb	r2, [r7, #17]
 80161a8:	4978      	ldr	r1, [pc, #480]	; (801638c <etharp_query+0x268>)
 80161aa:	4613      	mov	r3, r2
 80161ac:	005b      	lsls	r3, r3, #1
 80161ae:	4413      	add	r3, r2
 80161b0:	00db      	lsls	r3, r3, #3
 80161b2:	440b      	add	r3, r1
 80161b4:	3314      	adds	r3, #20
 80161b6:	781b      	ldrb	r3, [r3, #0]
 80161b8:	2b00      	cmp	r3, #0
 80161ba:	d115      	bne.n	80161e8 <etharp_query+0xc4>
    is_new_entry = 1;
 80161bc:	2301      	movs	r3, #1
 80161be:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 80161c0:	7c7a      	ldrb	r2, [r7, #17]
 80161c2:	4972      	ldr	r1, [pc, #456]	; (801638c <etharp_query+0x268>)
 80161c4:	4613      	mov	r3, r2
 80161c6:	005b      	lsls	r3, r3, #1
 80161c8:	4413      	add	r3, r2
 80161ca:	00db      	lsls	r3, r3, #3
 80161cc:	440b      	add	r3, r1
 80161ce:	3314      	adds	r3, #20
 80161d0:	2201      	movs	r2, #1
 80161d2:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 80161d4:	7c7a      	ldrb	r2, [r7, #17]
 80161d6:	496d      	ldr	r1, [pc, #436]	; (801638c <etharp_query+0x268>)
 80161d8:	4613      	mov	r3, r2
 80161da:	005b      	lsls	r3, r3, #1
 80161dc:	4413      	add	r3, r2
 80161de:	00db      	lsls	r3, r3, #3
 80161e0:	440b      	add	r3, r1
 80161e2:	3308      	adds	r3, #8
 80161e4:	68fa      	ldr	r2, [r7, #12]
 80161e6:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 80161e8:	7c7a      	ldrb	r2, [r7, #17]
 80161ea:	4968      	ldr	r1, [pc, #416]	; (801638c <etharp_query+0x268>)
 80161ec:	4613      	mov	r3, r2
 80161ee:	005b      	lsls	r3, r3, #1
 80161f0:	4413      	add	r3, r2
 80161f2:	00db      	lsls	r3, r3, #3
 80161f4:	440b      	add	r3, r1
 80161f6:	3314      	adds	r3, #20
 80161f8:	781b      	ldrb	r3, [r3, #0]
 80161fa:	2b01      	cmp	r3, #1
 80161fc:	d011      	beq.n	8016222 <etharp_query+0xfe>
 80161fe:	7c7a      	ldrb	r2, [r7, #17]
 8016200:	4962      	ldr	r1, [pc, #392]	; (801638c <etharp_query+0x268>)
 8016202:	4613      	mov	r3, r2
 8016204:	005b      	lsls	r3, r3, #1
 8016206:	4413      	add	r3, r2
 8016208:	00db      	lsls	r3, r3, #3
 801620a:	440b      	add	r3, r1
 801620c:	3314      	adds	r3, #20
 801620e:	781b      	ldrb	r3, [r3, #0]
 8016210:	2b01      	cmp	r3, #1
 8016212:	d806      	bhi.n	8016222 <etharp_query+0xfe>
 8016214:	4b5a      	ldr	r3, [pc, #360]	; (8016380 <etharp_query+0x25c>)
 8016216:	f240 32cd 	movw	r2, #973	; 0x3cd
 801621a:	495d      	ldr	r1, [pc, #372]	; (8016390 <etharp_query+0x26c>)
 801621c:	485a      	ldr	r0, [pc, #360]	; (8016388 <etharp_query+0x264>)
 801621e:	f002 f8d1 	bl	80183c4 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8016222:	6a3b      	ldr	r3, [r7, #32]
 8016224:	2b00      	cmp	r3, #0
 8016226:	d102      	bne.n	801622e <etharp_query+0x10a>
 8016228:	687b      	ldr	r3, [r7, #4]
 801622a:	2b00      	cmp	r3, #0
 801622c:	d10c      	bne.n	8016248 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 801622e:	68b9      	ldr	r1, [r7, #8]
 8016230:	68f8      	ldr	r0, [r7, #12]
 8016232:	f000 f963 	bl	80164fc <etharp_request>
 8016236:	4603      	mov	r3, r0
 8016238:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 801623c:	687b      	ldr	r3, [r7, #4]
 801623e:	2b00      	cmp	r3, #0
 8016240:	d102      	bne.n	8016248 <etharp_query+0x124>
      return result;
 8016242:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8016246:	e096      	b.n	8016376 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8016248:	687b      	ldr	r3, [r7, #4]
 801624a:	2b00      	cmp	r3, #0
 801624c:	d106      	bne.n	801625c <etharp_query+0x138>
 801624e:	4b4c      	ldr	r3, [pc, #304]	; (8016380 <etharp_query+0x25c>)
 8016250:	f240 32e1 	movw	r2, #993	; 0x3e1
 8016254:	494f      	ldr	r1, [pc, #316]	; (8016394 <etharp_query+0x270>)
 8016256:	484c      	ldr	r0, [pc, #304]	; (8016388 <etharp_query+0x264>)
 8016258:	f002 f8b4 	bl	80183c4 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 801625c:	7c7a      	ldrb	r2, [r7, #17]
 801625e:	494b      	ldr	r1, [pc, #300]	; (801638c <etharp_query+0x268>)
 8016260:	4613      	mov	r3, r2
 8016262:	005b      	lsls	r3, r3, #1
 8016264:	4413      	add	r3, r2
 8016266:	00db      	lsls	r3, r3, #3
 8016268:	440b      	add	r3, r1
 801626a:	3314      	adds	r3, #20
 801626c:	781b      	ldrb	r3, [r3, #0]
 801626e:	2b01      	cmp	r3, #1
 8016270:	d917      	bls.n	80162a2 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8016272:	4a49      	ldr	r2, [pc, #292]	; (8016398 <etharp_query+0x274>)
 8016274:	7c7b      	ldrb	r3, [r7, #17]
 8016276:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8016278:	7c7a      	ldrb	r2, [r7, #17]
 801627a:	4613      	mov	r3, r2
 801627c:	005b      	lsls	r3, r3, #1
 801627e:	4413      	add	r3, r2
 8016280:	00db      	lsls	r3, r3, #3
 8016282:	3308      	adds	r3, #8
 8016284:	4a41      	ldr	r2, [pc, #260]	; (801638c <etharp_query+0x268>)
 8016286:	4413      	add	r3, r2
 8016288:	3304      	adds	r3, #4
 801628a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801628e:	9200      	str	r2, [sp, #0]
 8016290:	697a      	ldr	r2, [r7, #20]
 8016292:	6879      	ldr	r1, [r7, #4]
 8016294:	68f8      	ldr	r0, [r7, #12]
 8016296:	f001 fc93 	bl	8017bc0 <ethernet_output>
 801629a:	4603      	mov	r3, r0
 801629c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80162a0:	e067      	b.n	8016372 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80162a2:	7c7a      	ldrb	r2, [r7, #17]
 80162a4:	4939      	ldr	r1, [pc, #228]	; (801638c <etharp_query+0x268>)
 80162a6:	4613      	mov	r3, r2
 80162a8:	005b      	lsls	r3, r3, #1
 80162aa:	4413      	add	r3, r2
 80162ac:	00db      	lsls	r3, r3, #3
 80162ae:	440b      	add	r3, r1
 80162b0:	3314      	adds	r3, #20
 80162b2:	781b      	ldrb	r3, [r3, #0]
 80162b4:	2b01      	cmp	r3, #1
 80162b6:	d15c      	bne.n	8016372 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 80162b8:	2300      	movs	r3, #0
 80162ba:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 80162bc:	687b      	ldr	r3, [r7, #4]
 80162be:	61fb      	str	r3, [r7, #28]
    while (p) {
 80162c0:	e01c      	b.n	80162fc <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 80162c2:	69fb      	ldr	r3, [r7, #28]
 80162c4:	895a      	ldrh	r2, [r3, #10]
 80162c6:	69fb      	ldr	r3, [r7, #28]
 80162c8:	891b      	ldrh	r3, [r3, #8]
 80162ca:	429a      	cmp	r2, r3
 80162cc:	d10a      	bne.n	80162e4 <etharp_query+0x1c0>
 80162ce:	69fb      	ldr	r3, [r7, #28]
 80162d0:	681b      	ldr	r3, [r3, #0]
 80162d2:	2b00      	cmp	r3, #0
 80162d4:	d006      	beq.n	80162e4 <etharp_query+0x1c0>
 80162d6:	4b2a      	ldr	r3, [pc, #168]	; (8016380 <etharp_query+0x25c>)
 80162d8:	f240 32f1 	movw	r2, #1009	; 0x3f1
 80162dc:	492f      	ldr	r1, [pc, #188]	; (801639c <etharp_query+0x278>)
 80162de:	482a      	ldr	r0, [pc, #168]	; (8016388 <etharp_query+0x264>)
 80162e0:	f002 f870 	bl	80183c4 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 80162e4:	69fb      	ldr	r3, [r7, #28]
 80162e6:	7b1b      	ldrb	r3, [r3, #12]
 80162e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80162ec:	2b00      	cmp	r3, #0
 80162ee:	d002      	beq.n	80162f6 <etharp_query+0x1d2>
        copy_needed = 1;
 80162f0:	2301      	movs	r3, #1
 80162f2:	61bb      	str	r3, [r7, #24]
        break;
 80162f4:	e005      	b.n	8016302 <etharp_query+0x1de>
      }
      p = p->next;
 80162f6:	69fb      	ldr	r3, [r7, #28]
 80162f8:	681b      	ldr	r3, [r3, #0]
 80162fa:	61fb      	str	r3, [r7, #28]
    while (p) {
 80162fc:	69fb      	ldr	r3, [r7, #28]
 80162fe:	2b00      	cmp	r3, #0
 8016300:	d1df      	bne.n	80162c2 <etharp_query+0x19e>
    }
    if (copy_needed) {
 8016302:	69bb      	ldr	r3, [r7, #24]
 8016304:	2b00      	cmp	r3, #0
 8016306:	d007      	beq.n	8016318 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8016308:	687a      	ldr	r2, [r7, #4]
 801630a:	f44f 7120 	mov.w	r1, #640	; 0x280
 801630e:	200e      	movs	r0, #14
 8016310:	f7f6 fbfa 	bl	800cb08 <pbuf_clone>
 8016314:	61f8      	str	r0, [r7, #28]
 8016316:	e004      	b.n	8016322 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8016318:	687b      	ldr	r3, [r7, #4]
 801631a:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 801631c:	69f8      	ldr	r0, [r7, #28]
 801631e:	f7f6 fa21 	bl	800c764 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8016322:	69fb      	ldr	r3, [r7, #28]
 8016324:	2b00      	cmp	r3, #0
 8016326:	d021      	beq.n	801636c <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8016328:	7c7a      	ldrb	r2, [r7, #17]
 801632a:	4918      	ldr	r1, [pc, #96]	; (801638c <etharp_query+0x268>)
 801632c:	4613      	mov	r3, r2
 801632e:	005b      	lsls	r3, r3, #1
 8016330:	4413      	add	r3, r2
 8016332:	00db      	lsls	r3, r3, #3
 8016334:	440b      	add	r3, r1
 8016336:	681b      	ldr	r3, [r3, #0]
 8016338:	2b00      	cmp	r3, #0
 801633a:	d00a      	beq.n	8016352 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 801633c:	7c7a      	ldrb	r2, [r7, #17]
 801633e:	4913      	ldr	r1, [pc, #76]	; (801638c <etharp_query+0x268>)
 8016340:	4613      	mov	r3, r2
 8016342:	005b      	lsls	r3, r3, #1
 8016344:	4413      	add	r3, r2
 8016346:	00db      	lsls	r3, r3, #3
 8016348:	440b      	add	r3, r1
 801634a:	681b      	ldr	r3, [r3, #0]
 801634c:	4618      	mov	r0, r3
 801634e:	f7f6 f963 	bl	800c618 <pbuf_free>
      }
      arp_table[i].q = p;
 8016352:	7c7a      	ldrb	r2, [r7, #17]
 8016354:	490d      	ldr	r1, [pc, #52]	; (801638c <etharp_query+0x268>)
 8016356:	4613      	mov	r3, r2
 8016358:	005b      	lsls	r3, r3, #1
 801635a:	4413      	add	r3, r2
 801635c:	00db      	lsls	r3, r3, #3
 801635e:	440b      	add	r3, r1
 8016360:	69fa      	ldr	r2, [r7, #28]
 8016362:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8016364:	2300      	movs	r3, #0
 8016366:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801636a:	e002      	b.n	8016372 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 801636c:	23ff      	movs	r3, #255	; 0xff
 801636e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8016372:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8016376:	4618      	mov	r0, r3
 8016378:	3728      	adds	r7, #40	; 0x28
 801637a:	46bd      	mov	sp, r7
 801637c:	bd80      	pop	{r7, pc}
 801637e:	bf00      	nop
 8016380:	0801c71c 	.word	0x0801c71c
 8016384:	0801c8c8 	.word	0x0801c8c8
 8016388:	0801c794 	.word	0x0801c794
 801638c:	20010e0c 	.word	0x20010e0c
 8016390:	0801c8d8 	.word	0x0801c8d8
 8016394:	0801c8bc 	.word	0x0801c8bc
 8016398:	20010efc 	.word	0x20010efc
 801639c:	0801c900 	.word	0x0801c900

080163a0 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 80163a0:	b580      	push	{r7, lr}
 80163a2:	b08a      	sub	sp, #40	; 0x28
 80163a4:	af02      	add	r7, sp, #8
 80163a6:	60f8      	str	r0, [r7, #12]
 80163a8:	60b9      	str	r1, [r7, #8]
 80163aa:	607a      	str	r2, [r7, #4]
 80163ac:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 80163ae:	2300      	movs	r3, #0
 80163b0:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 80163b2:	68fb      	ldr	r3, [r7, #12]
 80163b4:	2b00      	cmp	r3, #0
 80163b6:	d106      	bne.n	80163c6 <etharp_raw+0x26>
 80163b8:	4b3a      	ldr	r3, [pc, #232]	; (80164a4 <etharp_raw+0x104>)
 80163ba:	f240 4257 	movw	r2, #1111	; 0x457
 80163be:	493a      	ldr	r1, [pc, #232]	; (80164a8 <etharp_raw+0x108>)
 80163c0:	483a      	ldr	r0, [pc, #232]	; (80164ac <etharp_raw+0x10c>)
 80163c2:	f001 ffff 	bl	80183c4 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 80163c6:	f44f 7220 	mov.w	r2, #640	; 0x280
 80163ca:	211c      	movs	r1, #28
 80163cc:	200e      	movs	r0, #14
 80163ce:	f7f5 fe3f 	bl	800c050 <pbuf_alloc>
 80163d2:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 80163d4:	69bb      	ldr	r3, [r7, #24]
 80163d6:	2b00      	cmp	r3, #0
 80163d8:	d102      	bne.n	80163e0 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 80163da:	f04f 33ff 	mov.w	r3, #4294967295
 80163de:	e05d      	b.n	801649c <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 80163e0:	69bb      	ldr	r3, [r7, #24]
 80163e2:	895b      	ldrh	r3, [r3, #10]
 80163e4:	2b1b      	cmp	r3, #27
 80163e6:	d806      	bhi.n	80163f6 <etharp_raw+0x56>
 80163e8:	4b2e      	ldr	r3, [pc, #184]	; (80164a4 <etharp_raw+0x104>)
 80163ea:	f240 4262 	movw	r2, #1122	; 0x462
 80163ee:	4930      	ldr	r1, [pc, #192]	; (80164b0 <etharp_raw+0x110>)
 80163f0:	482e      	ldr	r0, [pc, #184]	; (80164ac <etharp_raw+0x10c>)
 80163f2:	f001 ffe7 	bl	80183c4 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 80163f6:	69bb      	ldr	r3, [r7, #24]
 80163f8:	685b      	ldr	r3, [r3, #4]
 80163fa:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 80163fc:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80163fe:	4618      	mov	r0, r3
 8016400:	f7f4 fcd6 	bl	800adb0 <lwip_htons>
 8016404:	4603      	mov	r3, r0
 8016406:	461a      	mov	r2, r3
 8016408:	697b      	ldr	r3, [r7, #20]
 801640a:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 801640c:	68fb      	ldr	r3, [r7, #12]
 801640e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8016412:	2b06      	cmp	r3, #6
 8016414:	d006      	beq.n	8016424 <etharp_raw+0x84>
 8016416:	4b23      	ldr	r3, [pc, #140]	; (80164a4 <etharp_raw+0x104>)
 8016418:	f240 4269 	movw	r2, #1129	; 0x469
 801641c:	4925      	ldr	r1, [pc, #148]	; (80164b4 <etharp_raw+0x114>)
 801641e:	4823      	ldr	r0, [pc, #140]	; (80164ac <etharp_raw+0x10c>)
 8016420:	f001 ffd0 	bl	80183c4 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8016424:	697b      	ldr	r3, [r7, #20]
 8016426:	3308      	adds	r3, #8
 8016428:	2206      	movs	r2, #6
 801642a:	6839      	ldr	r1, [r7, #0]
 801642c:	4618      	mov	r0, r3
 801642e:	f001 ff1e 	bl	801826e <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8016432:	697b      	ldr	r3, [r7, #20]
 8016434:	3312      	adds	r3, #18
 8016436:	2206      	movs	r2, #6
 8016438:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801643a:	4618      	mov	r0, r3
 801643c:	f001 ff17 	bl	801826e <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8016440:	697b      	ldr	r3, [r7, #20]
 8016442:	330e      	adds	r3, #14
 8016444:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016446:	6812      	ldr	r2, [r2, #0]
 8016448:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801644a:	697b      	ldr	r3, [r7, #20]
 801644c:	3318      	adds	r3, #24
 801644e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016450:	6812      	ldr	r2, [r2, #0]
 8016452:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8016454:	697b      	ldr	r3, [r7, #20]
 8016456:	2200      	movs	r2, #0
 8016458:	701a      	strb	r2, [r3, #0]
 801645a:	2200      	movs	r2, #0
 801645c:	f042 0201 	orr.w	r2, r2, #1
 8016460:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8016462:	697b      	ldr	r3, [r7, #20]
 8016464:	2200      	movs	r2, #0
 8016466:	f042 0208 	orr.w	r2, r2, #8
 801646a:	709a      	strb	r2, [r3, #2]
 801646c:	2200      	movs	r2, #0
 801646e:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8016470:	697b      	ldr	r3, [r7, #20]
 8016472:	2206      	movs	r2, #6
 8016474:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8016476:	697b      	ldr	r3, [r7, #20]
 8016478:	2204      	movs	r2, #4
 801647a:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801647c:	f640 0306 	movw	r3, #2054	; 0x806
 8016480:	9300      	str	r3, [sp, #0]
 8016482:	687b      	ldr	r3, [r7, #4]
 8016484:	68ba      	ldr	r2, [r7, #8]
 8016486:	69b9      	ldr	r1, [r7, #24]
 8016488:	68f8      	ldr	r0, [r7, #12]
 801648a:	f001 fb99 	bl	8017bc0 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 801648e:	69b8      	ldr	r0, [r7, #24]
 8016490:	f7f6 f8c2 	bl	800c618 <pbuf_free>
  p = NULL;
 8016494:	2300      	movs	r3, #0
 8016496:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8016498:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801649c:	4618      	mov	r0, r3
 801649e:	3720      	adds	r7, #32
 80164a0:	46bd      	mov	sp, r7
 80164a2:	bd80      	pop	{r7, pc}
 80164a4:	0801c71c 	.word	0x0801c71c
 80164a8:	0801c86c 	.word	0x0801c86c
 80164ac:	0801c794 	.word	0x0801c794
 80164b0:	0801c91c 	.word	0x0801c91c
 80164b4:	0801c950 	.word	0x0801c950

080164b8 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 80164b8:	b580      	push	{r7, lr}
 80164ba:	b088      	sub	sp, #32
 80164bc:	af04      	add	r7, sp, #16
 80164be:	60f8      	str	r0, [r7, #12]
 80164c0:	60b9      	str	r1, [r7, #8]
 80164c2:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80164c4:	68fb      	ldr	r3, [r7, #12]
 80164c6:	f103 012a 	add.w	r1, r3, #42	; 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 80164ca:	68fb      	ldr	r3, [r7, #12]
 80164cc:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 80164d0:	68fb      	ldr	r3, [r7, #12]
 80164d2:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80164d4:	2201      	movs	r2, #1
 80164d6:	9203      	str	r2, [sp, #12]
 80164d8:	68ba      	ldr	r2, [r7, #8]
 80164da:	9202      	str	r2, [sp, #8]
 80164dc:	4a06      	ldr	r2, [pc, #24]	; (80164f8 <etharp_request_dst+0x40>)
 80164de:	9201      	str	r2, [sp, #4]
 80164e0:	9300      	str	r3, [sp, #0]
 80164e2:	4603      	mov	r3, r0
 80164e4:	687a      	ldr	r2, [r7, #4]
 80164e6:	68f8      	ldr	r0, [r7, #12]
 80164e8:	f7ff ff5a 	bl	80163a0 <etharp_raw>
 80164ec:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 80164ee:	4618      	mov	r0, r3
 80164f0:	3710      	adds	r7, #16
 80164f2:	46bd      	mov	sp, r7
 80164f4:	bd80      	pop	{r7, pc}
 80164f6:	bf00      	nop
 80164f8:	08027070 	.word	0x08027070

080164fc <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 80164fc:	b580      	push	{r7, lr}
 80164fe:	b082      	sub	sp, #8
 8016500:	af00      	add	r7, sp, #0
 8016502:	6078      	str	r0, [r7, #4]
 8016504:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8016506:	4a05      	ldr	r2, [pc, #20]	; (801651c <etharp_request+0x20>)
 8016508:	6839      	ldr	r1, [r7, #0]
 801650a:	6878      	ldr	r0, [r7, #4]
 801650c:	f7ff ffd4 	bl	80164b8 <etharp_request_dst>
 8016510:	4603      	mov	r3, r0
}
 8016512:	4618      	mov	r0, r3
 8016514:	3708      	adds	r7, #8
 8016516:	46bd      	mov	sp, r7
 8016518:	bd80      	pop	{r7, pc}
 801651a:	bf00      	nop
 801651c:	08027068 	.word	0x08027068

08016520 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8016520:	b580      	push	{r7, lr}
 8016522:	b08e      	sub	sp, #56	; 0x38
 8016524:	af04      	add	r7, sp, #16
 8016526:	6078      	str	r0, [r7, #4]
 8016528:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801652a:	4b79      	ldr	r3, [pc, #484]	; (8016710 <icmp_input+0x1f0>)
 801652c:	689b      	ldr	r3, [r3, #8]
 801652e:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8016530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016532:	781b      	ldrb	r3, [r3, #0]
 8016534:	f003 030f 	and.w	r3, r3, #15
 8016538:	b2db      	uxtb	r3, r3
 801653a:	009b      	lsls	r3, r3, #2
 801653c:	b2db      	uxtb	r3, r3
 801653e:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8016540:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016542:	2b13      	cmp	r3, #19
 8016544:	f240 80cd 	bls.w	80166e2 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8016548:	687b      	ldr	r3, [r7, #4]
 801654a:	895b      	ldrh	r3, [r3, #10]
 801654c:	2b03      	cmp	r3, #3
 801654e:	f240 80ca 	bls.w	80166e6 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8016552:	687b      	ldr	r3, [r7, #4]
 8016554:	685b      	ldr	r3, [r3, #4]
 8016556:	781b      	ldrb	r3, [r3, #0]
 8016558:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 801655c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8016560:	2b00      	cmp	r3, #0
 8016562:	f000 80b7 	beq.w	80166d4 <icmp_input+0x1b4>
 8016566:	2b08      	cmp	r3, #8
 8016568:	f040 80b7 	bne.w	80166da <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 801656c:	4b69      	ldr	r3, [pc, #420]	; (8016714 <icmp_input+0x1f4>)
 801656e:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8016570:	4b67      	ldr	r3, [pc, #412]	; (8016710 <icmp_input+0x1f0>)
 8016572:	695b      	ldr	r3, [r3, #20]
 8016574:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8016578:	2be0      	cmp	r3, #224	; 0xe0
 801657a:	f000 80bb 	beq.w	80166f4 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801657e:	4b64      	ldr	r3, [pc, #400]	; (8016710 <icmp_input+0x1f0>)
 8016580:	695b      	ldr	r3, [r3, #20]
 8016582:	4a63      	ldr	r2, [pc, #396]	; (8016710 <icmp_input+0x1f0>)
 8016584:	6812      	ldr	r2, [r2, #0]
 8016586:	4611      	mov	r1, r2
 8016588:	4618      	mov	r0, r3
 801658a:	f000 fc0b 	bl	8016da4 <ip4_addr_isbroadcast_u32>
 801658e:	4603      	mov	r3, r0
 8016590:	2b00      	cmp	r3, #0
 8016592:	f040 80b1 	bne.w	80166f8 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8016596:	687b      	ldr	r3, [r7, #4]
 8016598:	891b      	ldrh	r3, [r3, #8]
 801659a:	2b07      	cmp	r3, #7
 801659c:	f240 80a5 	bls.w	80166ea <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80165a0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80165a2:	330e      	adds	r3, #14
 80165a4:	4619      	mov	r1, r3
 80165a6:	6878      	ldr	r0, [r7, #4]
 80165a8:	f7f5 ffa0 	bl	800c4ec <pbuf_add_header>
 80165ac:	4603      	mov	r3, r0
 80165ae:	2b00      	cmp	r3, #0
 80165b0:	d04b      	beq.n	801664a <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 80165b2:	687b      	ldr	r3, [r7, #4]
 80165b4:	891a      	ldrh	r2, [r3, #8]
 80165b6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80165b8:	4413      	add	r3, r2
 80165ba:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 80165bc:	687b      	ldr	r3, [r7, #4]
 80165be:	891b      	ldrh	r3, [r3, #8]
 80165c0:	8b7a      	ldrh	r2, [r7, #26]
 80165c2:	429a      	cmp	r2, r3
 80165c4:	f0c0 809a 	bcc.w	80166fc <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 80165c8:	8b7b      	ldrh	r3, [r7, #26]
 80165ca:	f44f 7220 	mov.w	r2, #640	; 0x280
 80165ce:	4619      	mov	r1, r3
 80165d0:	200e      	movs	r0, #14
 80165d2:	f7f5 fd3d 	bl	800c050 <pbuf_alloc>
 80165d6:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 80165d8:	697b      	ldr	r3, [r7, #20]
 80165da:	2b00      	cmp	r3, #0
 80165dc:	f000 8090 	beq.w	8016700 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 80165e0:	697b      	ldr	r3, [r7, #20]
 80165e2:	895b      	ldrh	r3, [r3, #10]
 80165e4:	461a      	mov	r2, r3
 80165e6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80165e8:	3308      	adds	r3, #8
 80165ea:	429a      	cmp	r2, r3
 80165ec:	d203      	bcs.n	80165f6 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 80165ee:	6978      	ldr	r0, [r7, #20]
 80165f0:	f7f6 f812 	bl	800c618 <pbuf_free>
          goto icmperr;
 80165f4:	e085      	b.n	8016702 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 80165f6:	697b      	ldr	r3, [r7, #20]
 80165f8:	685b      	ldr	r3, [r3, #4]
 80165fa:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80165fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80165fe:	4618      	mov	r0, r3
 8016600:	f001 fe35 	bl	801826e <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8016604:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016606:	4619      	mov	r1, r3
 8016608:	6978      	ldr	r0, [r7, #20]
 801660a:	f7f5 ff7f 	bl	800c50c <pbuf_remove_header>
 801660e:	4603      	mov	r3, r0
 8016610:	2b00      	cmp	r3, #0
 8016612:	d009      	beq.n	8016628 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8016614:	4b40      	ldr	r3, [pc, #256]	; (8016718 <icmp_input+0x1f8>)
 8016616:	22b6      	movs	r2, #182	; 0xb6
 8016618:	4940      	ldr	r1, [pc, #256]	; (801671c <icmp_input+0x1fc>)
 801661a:	4841      	ldr	r0, [pc, #260]	; (8016720 <icmp_input+0x200>)
 801661c:	f001 fed2 	bl	80183c4 <iprintf>
          pbuf_free(r);
 8016620:	6978      	ldr	r0, [r7, #20]
 8016622:	f7f5 fff9 	bl	800c618 <pbuf_free>
          goto icmperr;
 8016626:	e06c      	b.n	8016702 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8016628:	6879      	ldr	r1, [r7, #4]
 801662a:	6978      	ldr	r0, [r7, #20]
 801662c:	f7f6 f928 	bl	800c880 <pbuf_copy>
 8016630:	4603      	mov	r3, r0
 8016632:	2b00      	cmp	r3, #0
 8016634:	d003      	beq.n	801663e <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8016636:	6978      	ldr	r0, [r7, #20]
 8016638:	f7f5 ffee 	bl	800c618 <pbuf_free>
          goto icmperr;
 801663c:	e061      	b.n	8016702 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 801663e:	6878      	ldr	r0, [r7, #4]
 8016640:	f7f5 ffea 	bl	800c618 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8016644:	697b      	ldr	r3, [r7, #20]
 8016646:	607b      	str	r3, [r7, #4]
 8016648:	e00f      	b.n	801666a <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801664a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801664c:	330e      	adds	r3, #14
 801664e:	4619      	mov	r1, r3
 8016650:	6878      	ldr	r0, [r7, #4]
 8016652:	f7f5 ff5b 	bl	800c50c <pbuf_remove_header>
 8016656:	4603      	mov	r3, r0
 8016658:	2b00      	cmp	r3, #0
 801665a:	d006      	beq.n	801666a <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 801665c:	4b2e      	ldr	r3, [pc, #184]	; (8016718 <icmp_input+0x1f8>)
 801665e:	22c7      	movs	r2, #199	; 0xc7
 8016660:	4930      	ldr	r1, [pc, #192]	; (8016724 <icmp_input+0x204>)
 8016662:	482f      	ldr	r0, [pc, #188]	; (8016720 <icmp_input+0x200>)
 8016664:	f001 feae 	bl	80183c4 <iprintf>
          goto icmperr;
 8016668:	e04b      	b.n	8016702 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 801666a:	687b      	ldr	r3, [r7, #4]
 801666c:	685b      	ldr	r3, [r3, #4]
 801666e:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8016670:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016672:	4619      	mov	r1, r3
 8016674:	6878      	ldr	r0, [r7, #4]
 8016676:	f7f5 ff39 	bl	800c4ec <pbuf_add_header>
 801667a:	4603      	mov	r3, r0
 801667c:	2b00      	cmp	r3, #0
 801667e:	d12b      	bne.n	80166d8 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8016680:	687b      	ldr	r3, [r7, #4]
 8016682:	685b      	ldr	r3, [r3, #4]
 8016684:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8016686:	69fb      	ldr	r3, [r7, #28]
 8016688:	681a      	ldr	r2, [r3, #0]
 801668a:	68fb      	ldr	r3, [r7, #12]
 801668c:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801668e:	4b20      	ldr	r3, [pc, #128]	; (8016710 <icmp_input+0x1f0>)
 8016690:	691a      	ldr	r2, [r3, #16]
 8016692:	68fb      	ldr	r3, [r7, #12]
 8016694:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8016696:	693b      	ldr	r3, [r7, #16]
 8016698:	2200      	movs	r2, #0
 801669a:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 801669c:	693b      	ldr	r3, [r7, #16]
 801669e:	2200      	movs	r2, #0
 80166a0:	709a      	strb	r2, [r3, #2]
 80166a2:	2200      	movs	r2, #0
 80166a4:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 80166a6:	68fb      	ldr	r3, [r7, #12]
 80166a8:	22ff      	movs	r2, #255	; 0xff
 80166aa:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 80166ac:	68fb      	ldr	r3, [r7, #12]
 80166ae:	2200      	movs	r2, #0
 80166b0:	729a      	strb	r2, [r3, #10]
 80166b2:	2200      	movs	r2, #0
 80166b4:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 80166b6:	683b      	ldr	r3, [r7, #0]
 80166b8:	9302      	str	r3, [sp, #8]
 80166ba:	2301      	movs	r3, #1
 80166bc:	9301      	str	r3, [sp, #4]
 80166be:	2300      	movs	r3, #0
 80166c0:	9300      	str	r3, [sp, #0]
 80166c2:	23ff      	movs	r3, #255	; 0xff
 80166c4:	2200      	movs	r2, #0
 80166c6:	69f9      	ldr	r1, [r7, #28]
 80166c8:	6878      	ldr	r0, [r7, #4]
 80166ca:	f000 fa93 	bl	8016bf4 <ip4_output_if>
 80166ce:	4603      	mov	r3, r0
 80166d0:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 80166d2:	e001      	b.n	80166d8 <icmp_input+0x1b8>
      break;
 80166d4:	bf00      	nop
 80166d6:	e000      	b.n	80166da <icmp_input+0x1ba>
      break;
 80166d8:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 80166da:	6878      	ldr	r0, [r7, #4]
 80166dc:	f7f5 ff9c 	bl	800c618 <pbuf_free>
  return;
 80166e0:	e013      	b.n	801670a <icmp_input+0x1ea>
    goto lenerr;
 80166e2:	bf00      	nop
 80166e4:	e002      	b.n	80166ec <icmp_input+0x1cc>
    goto lenerr;
 80166e6:	bf00      	nop
 80166e8:	e000      	b.n	80166ec <icmp_input+0x1cc>
        goto lenerr;
 80166ea:	bf00      	nop
lenerr:
  pbuf_free(p);
 80166ec:	6878      	ldr	r0, [r7, #4]
 80166ee:	f7f5 ff93 	bl	800c618 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80166f2:	e00a      	b.n	801670a <icmp_input+0x1ea>
        goto icmperr;
 80166f4:	bf00      	nop
 80166f6:	e004      	b.n	8016702 <icmp_input+0x1e2>
        goto icmperr;
 80166f8:	bf00      	nop
 80166fa:	e002      	b.n	8016702 <icmp_input+0x1e2>
          goto icmperr;
 80166fc:	bf00      	nop
 80166fe:	e000      	b.n	8016702 <icmp_input+0x1e2>
          goto icmperr;
 8016700:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8016702:	6878      	ldr	r0, [r7, #4]
 8016704:	f7f5 ff88 	bl	800c618 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8016708:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 801670a:	3728      	adds	r7, #40	; 0x28
 801670c:	46bd      	mov	sp, r7
 801670e:	bd80      	pop	{r7, pc}
 8016710:	2000d604 	.word	0x2000d604
 8016714:	2000d618 	.word	0x2000d618
 8016718:	0801c994 	.word	0x0801c994
 801671c:	0801c9cc 	.word	0x0801c9cc
 8016720:	0801ca04 	.word	0x0801ca04
 8016724:	0801ca2c 	.word	0x0801ca2c

08016728 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8016728:	b580      	push	{r7, lr}
 801672a:	b082      	sub	sp, #8
 801672c:	af00      	add	r7, sp, #0
 801672e:	6078      	str	r0, [r7, #4]
 8016730:	460b      	mov	r3, r1
 8016732:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8016734:	78fb      	ldrb	r3, [r7, #3]
 8016736:	461a      	mov	r2, r3
 8016738:	2103      	movs	r1, #3
 801673a:	6878      	ldr	r0, [r7, #4]
 801673c:	f000 f814 	bl	8016768 <icmp_send_response>
}
 8016740:	bf00      	nop
 8016742:	3708      	adds	r7, #8
 8016744:	46bd      	mov	sp, r7
 8016746:	bd80      	pop	{r7, pc}

08016748 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8016748:	b580      	push	{r7, lr}
 801674a:	b082      	sub	sp, #8
 801674c:	af00      	add	r7, sp, #0
 801674e:	6078      	str	r0, [r7, #4]
 8016750:	460b      	mov	r3, r1
 8016752:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8016754:	78fb      	ldrb	r3, [r7, #3]
 8016756:	461a      	mov	r2, r3
 8016758:	210b      	movs	r1, #11
 801675a:	6878      	ldr	r0, [r7, #4]
 801675c:	f000 f804 	bl	8016768 <icmp_send_response>
}
 8016760:	bf00      	nop
 8016762:	3708      	adds	r7, #8
 8016764:	46bd      	mov	sp, r7
 8016766:	bd80      	pop	{r7, pc}

08016768 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8016768:	b580      	push	{r7, lr}
 801676a:	b08c      	sub	sp, #48	; 0x30
 801676c:	af04      	add	r7, sp, #16
 801676e:	6078      	str	r0, [r7, #4]
 8016770:	460b      	mov	r3, r1
 8016772:	70fb      	strb	r3, [r7, #3]
 8016774:	4613      	mov	r3, r2
 8016776:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8016778:	f44f 7220 	mov.w	r2, #640	; 0x280
 801677c:	2124      	movs	r1, #36	; 0x24
 801677e:	2022      	movs	r0, #34	; 0x22
 8016780:	f7f5 fc66 	bl	800c050 <pbuf_alloc>
 8016784:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8016786:	69fb      	ldr	r3, [r7, #28]
 8016788:	2b00      	cmp	r3, #0
 801678a:	d04c      	beq.n	8016826 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 801678c:	69fb      	ldr	r3, [r7, #28]
 801678e:	895b      	ldrh	r3, [r3, #10]
 8016790:	2b23      	cmp	r3, #35	; 0x23
 8016792:	d806      	bhi.n	80167a2 <icmp_send_response+0x3a>
 8016794:	4b26      	ldr	r3, [pc, #152]	; (8016830 <icmp_send_response+0xc8>)
 8016796:	f44f 72b4 	mov.w	r2, #360	; 0x168
 801679a:	4926      	ldr	r1, [pc, #152]	; (8016834 <icmp_send_response+0xcc>)
 801679c:	4826      	ldr	r0, [pc, #152]	; (8016838 <icmp_send_response+0xd0>)
 801679e:	f001 fe11 	bl	80183c4 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 80167a2:	687b      	ldr	r3, [r7, #4]
 80167a4:	685b      	ldr	r3, [r3, #4]
 80167a6:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 80167a8:	69fb      	ldr	r3, [r7, #28]
 80167aa:	685b      	ldr	r3, [r3, #4]
 80167ac:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 80167ae:	697b      	ldr	r3, [r7, #20]
 80167b0:	78fa      	ldrb	r2, [r7, #3]
 80167b2:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 80167b4:	697b      	ldr	r3, [r7, #20]
 80167b6:	78ba      	ldrb	r2, [r7, #2]
 80167b8:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 80167ba:	697b      	ldr	r3, [r7, #20]
 80167bc:	2200      	movs	r2, #0
 80167be:	711a      	strb	r2, [r3, #4]
 80167c0:	2200      	movs	r2, #0
 80167c2:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 80167c4:	697b      	ldr	r3, [r7, #20]
 80167c6:	2200      	movs	r2, #0
 80167c8:	719a      	strb	r2, [r3, #6]
 80167ca:	2200      	movs	r2, #0
 80167cc:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 80167ce:	69fb      	ldr	r3, [r7, #28]
 80167d0:	685b      	ldr	r3, [r3, #4]
 80167d2:	f103 0008 	add.w	r0, r3, #8
 80167d6:	687b      	ldr	r3, [r7, #4]
 80167d8:	685b      	ldr	r3, [r3, #4]
 80167da:	221c      	movs	r2, #28
 80167dc:	4619      	mov	r1, r3
 80167de:	f001 fd46 	bl	801826e <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 80167e2:	69bb      	ldr	r3, [r7, #24]
 80167e4:	68db      	ldr	r3, [r3, #12]
 80167e6:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 80167e8:	f107 030c 	add.w	r3, r7, #12
 80167ec:	4618      	mov	r0, r3
 80167ee:	f000 f825 	bl	801683c <ip4_route>
 80167f2:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 80167f4:	693b      	ldr	r3, [r7, #16]
 80167f6:	2b00      	cmp	r3, #0
 80167f8:	d011      	beq.n	801681e <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 80167fa:	697b      	ldr	r3, [r7, #20]
 80167fc:	2200      	movs	r2, #0
 80167fe:	709a      	strb	r2, [r3, #2]
 8016800:	2200      	movs	r2, #0
 8016802:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8016804:	f107 020c 	add.w	r2, r7, #12
 8016808:	693b      	ldr	r3, [r7, #16]
 801680a:	9302      	str	r3, [sp, #8]
 801680c:	2301      	movs	r3, #1
 801680e:	9301      	str	r3, [sp, #4]
 8016810:	2300      	movs	r3, #0
 8016812:	9300      	str	r3, [sp, #0]
 8016814:	23ff      	movs	r3, #255	; 0xff
 8016816:	2100      	movs	r1, #0
 8016818:	69f8      	ldr	r0, [r7, #28]
 801681a:	f000 f9eb 	bl	8016bf4 <ip4_output_if>
  }
  pbuf_free(q);
 801681e:	69f8      	ldr	r0, [r7, #28]
 8016820:	f7f5 fefa 	bl	800c618 <pbuf_free>
 8016824:	e000      	b.n	8016828 <icmp_send_response+0xc0>
    return;
 8016826:	bf00      	nop
}
 8016828:	3720      	adds	r7, #32
 801682a:	46bd      	mov	sp, r7
 801682c:	bd80      	pop	{r7, pc}
 801682e:	bf00      	nop
 8016830:	0801c994 	.word	0x0801c994
 8016834:	0801ca60 	.word	0x0801ca60
 8016838:	0801ca04 	.word	0x0801ca04

0801683c <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 801683c:	b480      	push	{r7}
 801683e:	b085      	sub	sp, #20
 8016840:	af00      	add	r7, sp, #0
 8016842:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8016844:	4b33      	ldr	r3, [pc, #204]	; (8016914 <ip4_route+0xd8>)
 8016846:	681b      	ldr	r3, [r3, #0]
 8016848:	60fb      	str	r3, [r7, #12]
 801684a:	e036      	b.n	80168ba <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801684c:	68fb      	ldr	r3, [r7, #12]
 801684e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8016852:	f003 0301 	and.w	r3, r3, #1
 8016856:	b2db      	uxtb	r3, r3
 8016858:	2b00      	cmp	r3, #0
 801685a:	d02b      	beq.n	80168b4 <ip4_route+0x78>
 801685c:	68fb      	ldr	r3, [r7, #12]
 801685e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8016862:	089b      	lsrs	r3, r3, #2
 8016864:	f003 0301 	and.w	r3, r3, #1
 8016868:	b2db      	uxtb	r3, r3
 801686a:	2b00      	cmp	r3, #0
 801686c:	d022      	beq.n	80168b4 <ip4_route+0x78>
 801686e:	68fb      	ldr	r3, [r7, #12]
 8016870:	3304      	adds	r3, #4
 8016872:	681b      	ldr	r3, [r3, #0]
 8016874:	2b00      	cmp	r3, #0
 8016876:	d01d      	beq.n	80168b4 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8016878:	687b      	ldr	r3, [r7, #4]
 801687a:	681a      	ldr	r2, [r3, #0]
 801687c:	68fb      	ldr	r3, [r7, #12]
 801687e:	3304      	adds	r3, #4
 8016880:	681b      	ldr	r3, [r3, #0]
 8016882:	405a      	eors	r2, r3
 8016884:	68fb      	ldr	r3, [r7, #12]
 8016886:	3308      	adds	r3, #8
 8016888:	681b      	ldr	r3, [r3, #0]
 801688a:	4013      	ands	r3, r2
 801688c:	2b00      	cmp	r3, #0
 801688e:	d101      	bne.n	8016894 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8016890:	68fb      	ldr	r3, [r7, #12]
 8016892:	e038      	b.n	8016906 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8016894:	68fb      	ldr	r3, [r7, #12]
 8016896:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801689a:	f003 0302 	and.w	r3, r3, #2
 801689e:	2b00      	cmp	r3, #0
 80168a0:	d108      	bne.n	80168b4 <ip4_route+0x78>
 80168a2:	687b      	ldr	r3, [r7, #4]
 80168a4:	681a      	ldr	r2, [r3, #0]
 80168a6:	68fb      	ldr	r3, [r7, #12]
 80168a8:	330c      	adds	r3, #12
 80168aa:	681b      	ldr	r3, [r3, #0]
 80168ac:	429a      	cmp	r2, r3
 80168ae:	d101      	bne.n	80168b4 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 80168b0:	68fb      	ldr	r3, [r7, #12]
 80168b2:	e028      	b.n	8016906 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 80168b4:	68fb      	ldr	r3, [r7, #12]
 80168b6:	681b      	ldr	r3, [r3, #0]
 80168b8:	60fb      	str	r3, [r7, #12]
 80168ba:	68fb      	ldr	r3, [r7, #12]
 80168bc:	2b00      	cmp	r3, #0
 80168be:	d1c5      	bne.n	801684c <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80168c0:	4b15      	ldr	r3, [pc, #84]	; (8016918 <ip4_route+0xdc>)
 80168c2:	681b      	ldr	r3, [r3, #0]
 80168c4:	2b00      	cmp	r3, #0
 80168c6:	d01a      	beq.n	80168fe <ip4_route+0xc2>
 80168c8:	4b13      	ldr	r3, [pc, #76]	; (8016918 <ip4_route+0xdc>)
 80168ca:	681b      	ldr	r3, [r3, #0]
 80168cc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80168d0:	f003 0301 	and.w	r3, r3, #1
 80168d4:	2b00      	cmp	r3, #0
 80168d6:	d012      	beq.n	80168fe <ip4_route+0xc2>
 80168d8:	4b0f      	ldr	r3, [pc, #60]	; (8016918 <ip4_route+0xdc>)
 80168da:	681b      	ldr	r3, [r3, #0]
 80168dc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80168e0:	f003 0304 	and.w	r3, r3, #4
 80168e4:	2b00      	cmp	r3, #0
 80168e6:	d00a      	beq.n	80168fe <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80168e8:	4b0b      	ldr	r3, [pc, #44]	; (8016918 <ip4_route+0xdc>)
 80168ea:	681b      	ldr	r3, [r3, #0]
 80168ec:	3304      	adds	r3, #4
 80168ee:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80168f0:	2b00      	cmp	r3, #0
 80168f2:	d004      	beq.n	80168fe <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80168f4:	687b      	ldr	r3, [r7, #4]
 80168f6:	681b      	ldr	r3, [r3, #0]
 80168f8:	b2db      	uxtb	r3, r3
 80168fa:	2b7f      	cmp	r3, #127	; 0x7f
 80168fc:	d101      	bne.n	8016902 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 80168fe:	2300      	movs	r3, #0
 8016900:	e001      	b.n	8016906 <ip4_route+0xca>
  }

  return netif_default;
 8016902:	4b05      	ldr	r3, [pc, #20]	; (8016918 <ip4_route+0xdc>)
 8016904:	681b      	ldr	r3, [r3, #0]
}
 8016906:	4618      	mov	r0, r3
 8016908:	3714      	adds	r7, #20
 801690a:	46bd      	mov	sp, r7
 801690c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016910:	4770      	bx	lr
 8016912:	bf00      	nop
 8016914:	20010d6c 	.word	0x20010d6c
 8016918:	20010d70 	.word	0x20010d70

0801691c <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 801691c:	b580      	push	{r7, lr}
 801691e:	b082      	sub	sp, #8
 8016920:	af00      	add	r7, sp, #0
 8016922:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8016924:	687b      	ldr	r3, [r7, #4]
 8016926:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801692a:	f003 0301 	and.w	r3, r3, #1
 801692e:	b2db      	uxtb	r3, r3
 8016930:	2b00      	cmp	r3, #0
 8016932:	d016      	beq.n	8016962 <ip4_input_accept+0x46>
 8016934:	687b      	ldr	r3, [r7, #4]
 8016936:	3304      	adds	r3, #4
 8016938:	681b      	ldr	r3, [r3, #0]
 801693a:	2b00      	cmp	r3, #0
 801693c:	d011      	beq.n	8016962 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801693e:	4b0b      	ldr	r3, [pc, #44]	; (801696c <ip4_input_accept+0x50>)
 8016940:	695a      	ldr	r2, [r3, #20]
 8016942:	687b      	ldr	r3, [r7, #4]
 8016944:	3304      	adds	r3, #4
 8016946:	681b      	ldr	r3, [r3, #0]
 8016948:	429a      	cmp	r2, r3
 801694a:	d008      	beq.n	801695e <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 801694c:	4b07      	ldr	r3, [pc, #28]	; (801696c <ip4_input_accept+0x50>)
 801694e:	695b      	ldr	r3, [r3, #20]
 8016950:	6879      	ldr	r1, [r7, #4]
 8016952:	4618      	mov	r0, r3
 8016954:	f000 fa26 	bl	8016da4 <ip4_addr_isbroadcast_u32>
 8016958:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801695a:	2b00      	cmp	r3, #0
 801695c:	d001      	beq.n	8016962 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801695e:	2301      	movs	r3, #1
 8016960:	e000      	b.n	8016964 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8016962:	2300      	movs	r3, #0
}
 8016964:	4618      	mov	r0, r3
 8016966:	3708      	adds	r7, #8
 8016968:	46bd      	mov	sp, r7
 801696a:	bd80      	pop	{r7, pc}
 801696c:	2000d604 	.word	0x2000d604

08016970 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8016970:	b580      	push	{r7, lr}
 8016972:	b088      	sub	sp, #32
 8016974:	af00      	add	r7, sp, #0
 8016976:	6078      	str	r0, [r7, #4]
 8016978:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 801697a:	2301      	movs	r3, #1
 801697c:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801697e:	687b      	ldr	r3, [r7, #4]
 8016980:	685b      	ldr	r3, [r3, #4]
 8016982:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 8016984:	69fb      	ldr	r3, [r7, #28]
 8016986:	781b      	ldrb	r3, [r3, #0]
 8016988:	091b      	lsrs	r3, r3, #4
 801698a:	b2db      	uxtb	r3, r3
 801698c:	2b04      	cmp	r3, #4
 801698e:	d004      	beq.n	801699a <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8016990:	6878      	ldr	r0, [r7, #4]
 8016992:	f7f5 fe41 	bl	800c618 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8016996:	2300      	movs	r3, #0
 8016998:	e123      	b.n	8016be2 <ip4_input+0x272>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801699a:	69fb      	ldr	r3, [r7, #28]
 801699c:	781b      	ldrb	r3, [r3, #0]
 801699e:	f003 030f 	and.w	r3, r3, #15
 80169a2:	b2db      	uxtb	r3, r3
 80169a4:	009b      	lsls	r3, r3, #2
 80169a6:	b2db      	uxtb	r3, r3
 80169a8:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 80169aa:	69fb      	ldr	r3, [r7, #28]
 80169ac:	885b      	ldrh	r3, [r3, #2]
 80169ae:	b29b      	uxth	r3, r3
 80169b0:	4618      	mov	r0, r3
 80169b2:	f7f4 f9fd 	bl	800adb0 <lwip_htons>
 80169b6:	4603      	mov	r3, r0
 80169b8:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 80169ba:	687b      	ldr	r3, [r7, #4]
 80169bc:	891b      	ldrh	r3, [r3, #8]
 80169be:	8a3a      	ldrh	r2, [r7, #16]
 80169c0:	429a      	cmp	r2, r3
 80169c2:	d204      	bcs.n	80169ce <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 80169c4:	8a3b      	ldrh	r3, [r7, #16]
 80169c6:	4619      	mov	r1, r3
 80169c8:	6878      	ldr	r0, [r7, #4]
 80169ca:	f7f5 fc9f 	bl	800c30c <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 80169ce:	687b      	ldr	r3, [r7, #4]
 80169d0:	895b      	ldrh	r3, [r3, #10]
 80169d2:	8a7a      	ldrh	r2, [r7, #18]
 80169d4:	429a      	cmp	r2, r3
 80169d6:	d807      	bhi.n	80169e8 <ip4_input+0x78>
 80169d8:	687b      	ldr	r3, [r7, #4]
 80169da:	891b      	ldrh	r3, [r3, #8]
 80169dc:	8a3a      	ldrh	r2, [r7, #16]
 80169de:	429a      	cmp	r2, r3
 80169e0:	d802      	bhi.n	80169e8 <ip4_input+0x78>
 80169e2:	8a7b      	ldrh	r3, [r7, #18]
 80169e4:	2b13      	cmp	r3, #19
 80169e6:	d804      	bhi.n	80169f2 <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 80169e8:	6878      	ldr	r0, [r7, #4]
 80169ea:	f7f5 fe15 	bl	800c618 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 80169ee:	2300      	movs	r3, #0
 80169f0:	e0f7      	b.n	8016be2 <ip4_input+0x272>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 80169f2:	69fb      	ldr	r3, [r7, #28]
 80169f4:	691b      	ldr	r3, [r3, #16]
 80169f6:	4a7d      	ldr	r2, [pc, #500]	; (8016bec <ip4_input+0x27c>)
 80169f8:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 80169fa:	69fb      	ldr	r3, [r7, #28]
 80169fc:	68db      	ldr	r3, [r3, #12]
 80169fe:	4a7b      	ldr	r2, [pc, #492]	; (8016bec <ip4_input+0x27c>)
 8016a00:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8016a02:	4b7a      	ldr	r3, [pc, #488]	; (8016bec <ip4_input+0x27c>)
 8016a04:	695b      	ldr	r3, [r3, #20]
 8016a06:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8016a0a:	2be0      	cmp	r3, #224	; 0xe0
 8016a0c:	d112      	bne.n	8016a34 <ip4_input+0xc4>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8016a0e:	683b      	ldr	r3, [r7, #0]
 8016a10:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8016a14:	f003 0301 	and.w	r3, r3, #1
 8016a18:	b2db      	uxtb	r3, r3
 8016a1a:	2b00      	cmp	r3, #0
 8016a1c:	d007      	beq.n	8016a2e <ip4_input+0xbe>
 8016a1e:	683b      	ldr	r3, [r7, #0]
 8016a20:	3304      	adds	r3, #4
 8016a22:	681b      	ldr	r3, [r3, #0]
 8016a24:	2b00      	cmp	r3, #0
 8016a26:	d002      	beq.n	8016a2e <ip4_input+0xbe>
      netif = inp;
 8016a28:	683b      	ldr	r3, [r7, #0]
 8016a2a:	61bb      	str	r3, [r7, #24]
 8016a2c:	e02a      	b.n	8016a84 <ip4_input+0x114>
    } else {
      netif = NULL;
 8016a2e:	2300      	movs	r3, #0
 8016a30:	61bb      	str	r3, [r7, #24]
 8016a32:	e027      	b.n	8016a84 <ip4_input+0x114>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8016a34:	6838      	ldr	r0, [r7, #0]
 8016a36:	f7ff ff71 	bl	801691c <ip4_input_accept>
 8016a3a:	4603      	mov	r3, r0
 8016a3c:	2b00      	cmp	r3, #0
 8016a3e:	d002      	beq.n	8016a46 <ip4_input+0xd6>
      netif = inp;
 8016a40:	683b      	ldr	r3, [r7, #0]
 8016a42:	61bb      	str	r3, [r7, #24]
 8016a44:	e01e      	b.n	8016a84 <ip4_input+0x114>
    } else {
      netif = NULL;
 8016a46:	2300      	movs	r3, #0
 8016a48:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8016a4a:	4b68      	ldr	r3, [pc, #416]	; (8016bec <ip4_input+0x27c>)
 8016a4c:	695b      	ldr	r3, [r3, #20]
 8016a4e:	b2db      	uxtb	r3, r3
 8016a50:	2b7f      	cmp	r3, #127	; 0x7f
 8016a52:	d017      	beq.n	8016a84 <ip4_input+0x114>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8016a54:	4b66      	ldr	r3, [pc, #408]	; (8016bf0 <ip4_input+0x280>)
 8016a56:	681b      	ldr	r3, [r3, #0]
 8016a58:	61bb      	str	r3, [r7, #24]
 8016a5a:	e00e      	b.n	8016a7a <ip4_input+0x10a>
          if (netif == inp) {
 8016a5c:	69ba      	ldr	r2, [r7, #24]
 8016a5e:	683b      	ldr	r3, [r7, #0]
 8016a60:	429a      	cmp	r2, r3
 8016a62:	d006      	beq.n	8016a72 <ip4_input+0x102>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8016a64:	69b8      	ldr	r0, [r7, #24]
 8016a66:	f7ff ff59 	bl	801691c <ip4_input_accept>
 8016a6a:	4603      	mov	r3, r0
 8016a6c:	2b00      	cmp	r3, #0
 8016a6e:	d108      	bne.n	8016a82 <ip4_input+0x112>
 8016a70:	e000      	b.n	8016a74 <ip4_input+0x104>
            continue;
 8016a72:	bf00      	nop
        NETIF_FOREACH(netif) {
 8016a74:	69bb      	ldr	r3, [r7, #24]
 8016a76:	681b      	ldr	r3, [r3, #0]
 8016a78:	61bb      	str	r3, [r7, #24]
 8016a7a:	69bb      	ldr	r3, [r7, #24]
 8016a7c:	2b00      	cmp	r3, #0
 8016a7e:	d1ed      	bne.n	8016a5c <ip4_input+0xec>
 8016a80:	e000      	b.n	8016a84 <ip4_input+0x114>
            break;
 8016a82:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 8016a84:	69bb      	ldr	r3, [r7, #24]
 8016a86:	2b00      	cmp	r3, #0
 8016a88:	d111      	bne.n	8016aae <ip4_input+0x13e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 8016a8a:	69fb      	ldr	r3, [r7, #28]
 8016a8c:	7a5b      	ldrb	r3, [r3, #9]
 8016a8e:	2b11      	cmp	r3, #17
 8016a90:	d10d      	bne.n	8016aae <ip4_input+0x13e>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 8016a92:	8a7b      	ldrh	r3, [r7, #18]
 8016a94:	69fa      	ldr	r2, [r7, #28]
 8016a96:	4413      	add	r3, r2
 8016a98:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 8016a9a:	68fb      	ldr	r3, [r7, #12]
 8016a9c:	885b      	ldrh	r3, [r3, #2]
 8016a9e:	b29b      	uxth	r3, r3
 8016aa0:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 8016aa4:	d103      	bne.n	8016aae <ip4_input+0x13e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 8016aa6:	683b      	ldr	r3, [r7, #0]
 8016aa8:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 8016aaa:	2300      	movs	r3, #0
 8016aac:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 8016aae:	697b      	ldr	r3, [r7, #20]
 8016ab0:	2b00      	cmp	r3, #0
 8016ab2:	d017      	beq.n	8016ae4 <ip4_input+0x174>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 8016ab4:	4b4d      	ldr	r3, [pc, #308]	; (8016bec <ip4_input+0x27c>)
 8016ab6:	691b      	ldr	r3, [r3, #16]
 8016ab8:	2b00      	cmp	r3, #0
 8016aba:	d013      	beq.n	8016ae4 <ip4_input+0x174>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8016abc:	4b4b      	ldr	r3, [pc, #300]	; (8016bec <ip4_input+0x27c>)
 8016abe:	691b      	ldr	r3, [r3, #16]
 8016ac0:	6839      	ldr	r1, [r7, #0]
 8016ac2:	4618      	mov	r0, r3
 8016ac4:	f000 f96e 	bl	8016da4 <ip4_addr_isbroadcast_u32>
 8016ac8:	4603      	mov	r3, r0
 8016aca:	2b00      	cmp	r3, #0
 8016acc:	d105      	bne.n	8016ada <ip4_input+0x16a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8016ace:	4b47      	ldr	r3, [pc, #284]	; (8016bec <ip4_input+0x27c>)
 8016ad0:	691b      	ldr	r3, [r3, #16]
 8016ad2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8016ad6:	2be0      	cmp	r3, #224	; 0xe0
 8016ad8:	d104      	bne.n	8016ae4 <ip4_input+0x174>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8016ada:	6878      	ldr	r0, [r7, #4]
 8016adc:	f7f5 fd9c 	bl	800c618 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8016ae0:	2300      	movs	r3, #0
 8016ae2:	e07e      	b.n	8016be2 <ip4_input+0x272>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8016ae4:	69bb      	ldr	r3, [r7, #24]
 8016ae6:	2b00      	cmp	r3, #0
 8016ae8:	d104      	bne.n	8016af4 <ip4_input+0x184>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8016aea:	6878      	ldr	r0, [r7, #4]
 8016aec:	f7f5 fd94 	bl	800c618 <pbuf_free>
    return ERR_OK;
 8016af0:	2300      	movs	r3, #0
 8016af2:	e076      	b.n	8016be2 <ip4_input+0x272>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8016af4:	69fb      	ldr	r3, [r7, #28]
 8016af6:	88db      	ldrh	r3, [r3, #6]
 8016af8:	b29b      	uxth	r3, r3
 8016afa:	461a      	mov	r2, r3
 8016afc:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8016b00:	4013      	ands	r3, r2
 8016b02:	2b00      	cmp	r3, #0
 8016b04:	d00b      	beq.n	8016b1e <ip4_input+0x1ae>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8016b06:	6878      	ldr	r0, [r7, #4]
 8016b08:	f000 fc92 	bl	8017430 <ip4_reass>
 8016b0c:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8016b0e:	687b      	ldr	r3, [r7, #4]
 8016b10:	2b00      	cmp	r3, #0
 8016b12:	d101      	bne.n	8016b18 <ip4_input+0x1a8>
      return ERR_OK;
 8016b14:	2300      	movs	r3, #0
 8016b16:	e064      	b.n	8016be2 <ip4_input+0x272>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8016b18:	687b      	ldr	r3, [r7, #4]
 8016b1a:	685b      	ldr	r3, [r3, #4]
 8016b1c:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8016b1e:	4a33      	ldr	r2, [pc, #204]	; (8016bec <ip4_input+0x27c>)
 8016b20:	69bb      	ldr	r3, [r7, #24]
 8016b22:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8016b24:	4a31      	ldr	r2, [pc, #196]	; (8016bec <ip4_input+0x27c>)
 8016b26:	683b      	ldr	r3, [r7, #0]
 8016b28:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8016b2a:	4a30      	ldr	r2, [pc, #192]	; (8016bec <ip4_input+0x27c>)
 8016b2c:	69fb      	ldr	r3, [r7, #28]
 8016b2e:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8016b30:	69fb      	ldr	r3, [r7, #28]
 8016b32:	781b      	ldrb	r3, [r3, #0]
 8016b34:	f003 030f 	and.w	r3, r3, #15
 8016b38:	b2db      	uxtb	r3, r3
 8016b3a:	009b      	lsls	r3, r3, #2
 8016b3c:	b2db      	uxtb	r3, r3
 8016b3e:	b29a      	uxth	r2, r3
 8016b40:	4b2a      	ldr	r3, [pc, #168]	; (8016bec <ip4_input+0x27c>)
 8016b42:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8016b44:	8a7b      	ldrh	r3, [r7, #18]
 8016b46:	4619      	mov	r1, r3
 8016b48:	6878      	ldr	r0, [r7, #4]
 8016b4a:	f7f5 fcdf 	bl	800c50c <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8016b4e:	69fb      	ldr	r3, [r7, #28]
 8016b50:	7a5b      	ldrb	r3, [r3, #9]
 8016b52:	2b11      	cmp	r3, #17
 8016b54:	d006      	beq.n	8016b64 <ip4_input+0x1f4>
 8016b56:	2b11      	cmp	r3, #17
 8016b58:	dc13      	bgt.n	8016b82 <ip4_input+0x212>
 8016b5a:	2b01      	cmp	r3, #1
 8016b5c:	d00c      	beq.n	8016b78 <ip4_input+0x208>
 8016b5e:	2b06      	cmp	r3, #6
 8016b60:	d005      	beq.n	8016b6e <ip4_input+0x1fe>
 8016b62:	e00e      	b.n	8016b82 <ip4_input+0x212>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8016b64:	6839      	ldr	r1, [r7, #0]
 8016b66:	6878      	ldr	r0, [r7, #4]
 8016b68:	f7fc fade 	bl	8013128 <udp_input>
        break;
 8016b6c:	e026      	b.n	8016bbc <ip4_input+0x24c>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8016b6e:	6839      	ldr	r1, [r7, #0]
 8016b70:	6878      	ldr	r0, [r7, #4]
 8016b72:	f7f7 fe97 	bl	800e8a4 <tcp_input>
        break;
 8016b76:	e021      	b.n	8016bbc <ip4_input+0x24c>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8016b78:	6839      	ldr	r1, [r7, #0]
 8016b7a:	6878      	ldr	r0, [r7, #4]
 8016b7c:	f7ff fcd0 	bl	8016520 <icmp_input>
        break;
 8016b80:	e01c      	b.n	8016bbc <ip4_input+0x24c>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8016b82:	4b1a      	ldr	r3, [pc, #104]	; (8016bec <ip4_input+0x27c>)
 8016b84:	695b      	ldr	r3, [r3, #20]
 8016b86:	69b9      	ldr	r1, [r7, #24]
 8016b88:	4618      	mov	r0, r3
 8016b8a:	f000 f90b 	bl	8016da4 <ip4_addr_isbroadcast_u32>
 8016b8e:	4603      	mov	r3, r0
 8016b90:	2b00      	cmp	r3, #0
 8016b92:	d10f      	bne.n	8016bb4 <ip4_input+0x244>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8016b94:	4b15      	ldr	r3, [pc, #84]	; (8016bec <ip4_input+0x27c>)
 8016b96:	695b      	ldr	r3, [r3, #20]
 8016b98:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8016b9c:	2be0      	cmp	r3, #224	; 0xe0
 8016b9e:	d009      	beq.n	8016bb4 <ip4_input+0x244>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8016ba0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8016ba4:	4619      	mov	r1, r3
 8016ba6:	6878      	ldr	r0, [r7, #4]
 8016ba8:	f7f5 fd23 	bl	800c5f2 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8016bac:	2102      	movs	r1, #2
 8016bae:	6878      	ldr	r0, [r7, #4]
 8016bb0:	f7ff fdba 	bl	8016728 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8016bb4:	6878      	ldr	r0, [r7, #4]
 8016bb6:	f7f5 fd2f 	bl	800c618 <pbuf_free>
        break;
 8016bba:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8016bbc:	4b0b      	ldr	r3, [pc, #44]	; (8016bec <ip4_input+0x27c>)
 8016bbe:	2200      	movs	r2, #0
 8016bc0:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8016bc2:	4b0a      	ldr	r3, [pc, #40]	; (8016bec <ip4_input+0x27c>)
 8016bc4:	2200      	movs	r2, #0
 8016bc6:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8016bc8:	4b08      	ldr	r3, [pc, #32]	; (8016bec <ip4_input+0x27c>)
 8016bca:	2200      	movs	r2, #0
 8016bcc:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8016bce:	4b07      	ldr	r3, [pc, #28]	; (8016bec <ip4_input+0x27c>)
 8016bd0:	2200      	movs	r2, #0
 8016bd2:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8016bd4:	4b05      	ldr	r3, [pc, #20]	; (8016bec <ip4_input+0x27c>)
 8016bd6:	2200      	movs	r2, #0
 8016bd8:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8016bda:	4b04      	ldr	r3, [pc, #16]	; (8016bec <ip4_input+0x27c>)
 8016bdc:	2200      	movs	r2, #0
 8016bde:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8016be0:	2300      	movs	r3, #0
}
 8016be2:	4618      	mov	r0, r3
 8016be4:	3720      	adds	r7, #32
 8016be6:	46bd      	mov	sp, r7
 8016be8:	bd80      	pop	{r7, pc}
 8016bea:	bf00      	nop
 8016bec:	2000d604 	.word	0x2000d604
 8016bf0:	20010d6c 	.word	0x20010d6c

08016bf4 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8016bf4:	b580      	push	{r7, lr}
 8016bf6:	b08a      	sub	sp, #40	; 0x28
 8016bf8:	af04      	add	r7, sp, #16
 8016bfa:	60f8      	str	r0, [r7, #12]
 8016bfc:	60b9      	str	r1, [r7, #8]
 8016bfe:	607a      	str	r2, [r7, #4]
 8016c00:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8016c02:	68bb      	ldr	r3, [r7, #8]
 8016c04:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8016c06:	687b      	ldr	r3, [r7, #4]
 8016c08:	2b00      	cmp	r3, #0
 8016c0a:	d009      	beq.n	8016c20 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8016c0c:	68bb      	ldr	r3, [r7, #8]
 8016c0e:	2b00      	cmp	r3, #0
 8016c10:	d003      	beq.n	8016c1a <ip4_output_if+0x26>
 8016c12:	68bb      	ldr	r3, [r7, #8]
 8016c14:	681b      	ldr	r3, [r3, #0]
 8016c16:	2b00      	cmp	r3, #0
 8016c18:	d102      	bne.n	8016c20 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8016c1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016c1c:	3304      	adds	r3, #4
 8016c1e:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8016c20:	78fa      	ldrb	r2, [r7, #3]
 8016c22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016c24:	9302      	str	r3, [sp, #8]
 8016c26:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8016c2a:	9301      	str	r3, [sp, #4]
 8016c2c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8016c30:	9300      	str	r3, [sp, #0]
 8016c32:	4613      	mov	r3, r2
 8016c34:	687a      	ldr	r2, [r7, #4]
 8016c36:	6979      	ldr	r1, [r7, #20]
 8016c38:	68f8      	ldr	r0, [r7, #12]
 8016c3a:	f000 f805 	bl	8016c48 <ip4_output_if_src>
 8016c3e:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8016c40:	4618      	mov	r0, r3
 8016c42:	3718      	adds	r7, #24
 8016c44:	46bd      	mov	sp, r7
 8016c46:	bd80      	pop	{r7, pc}

08016c48 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8016c48:	b580      	push	{r7, lr}
 8016c4a:	b088      	sub	sp, #32
 8016c4c:	af00      	add	r7, sp, #0
 8016c4e:	60f8      	str	r0, [r7, #12]
 8016c50:	60b9      	str	r1, [r7, #8]
 8016c52:	607a      	str	r2, [r7, #4]
 8016c54:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8016c56:	68fb      	ldr	r3, [r7, #12]
 8016c58:	7b9b      	ldrb	r3, [r3, #14]
 8016c5a:	2b01      	cmp	r3, #1
 8016c5c:	d006      	beq.n	8016c6c <ip4_output_if_src+0x24>
 8016c5e:	4b4b      	ldr	r3, [pc, #300]	; (8016d8c <ip4_output_if_src+0x144>)
 8016c60:	f44f 7255 	mov.w	r2, #852	; 0x354
 8016c64:	494a      	ldr	r1, [pc, #296]	; (8016d90 <ip4_output_if_src+0x148>)
 8016c66:	484b      	ldr	r0, [pc, #300]	; (8016d94 <ip4_output_if_src+0x14c>)
 8016c68:	f001 fbac 	bl	80183c4 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8016c6c:	687b      	ldr	r3, [r7, #4]
 8016c6e:	2b00      	cmp	r3, #0
 8016c70:	d060      	beq.n	8016d34 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8016c72:	2314      	movs	r3, #20
 8016c74:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8016c76:	2114      	movs	r1, #20
 8016c78:	68f8      	ldr	r0, [r7, #12]
 8016c7a:	f7f5 fc37 	bl	800c4ec <pbuf_add_header>
 8016c7e:	4603      	mov	r3, r0
 8016c80:	2b00      	cmp	r3, #0
 8016c82:	d002      	beq.n	8016c8a <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8016c84:	f06f 0301 	mvn.w	r3, #1
 8016c88:	e07c      	b.n	8016d84 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8016c8a:	68fb      	ldr	r3, [r7, #12]
 8016c8c:	685b      	ldr	r3, [r3, #4]
 8016c8e:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8016c90:	68fb      	ldr	r3, [r7, #12]
 8016c92:	895b      	ldrh	r3, [r3, #10]
 8016c94:	2b13      	cmp	r3, #19
 8016c96:	d806      	bhi.n	8016ca6 <ip4_output_if_src+0x5e>
 8016c98:	4b3c      	ldr	r3, [pc, #240]	; (8016d8c <ip4_output_if_src+0x144>)
 8016c9a:	f44f 7262 	mov.w	r2, #904	; 0x388
 8016c9e:	493e      	ldr	r1, [pc, #248]	; (8016d98 <ip4_output_if_src+0x150>)
 8016ca0:	483c      	ldr	r0, [pc, #240]	; (8016d94 <ip4_output_if_src+0x14c>)
 8016ca2:	f001 fb8f 	bl	80183c4 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8016ca6:	69fb      	ldr	r3, [r7, #28]
 8016ca8:	78fa      	ldrb	r2, [r7, #3]
 8016caa:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8016cac:	69fb      	ldr	r3, [r7, #28]
 8016cae:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8016cb2:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8016cb4:	687b      	ldr	r3, [r7, #4]
 8016cb6:	681a      	ldr	r2, [r3, #0]
 8016cb8:	69fb      	ldr	r3, [r7, #28]
 8016cba:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8016cbc:	8b7b      	ldrh	r3, [r7, #26]
 8016cbe:	089b      	lsrs	r3, r3, #2
 8016cc0:	b29b      	uxth	r3, r3
 8016cc2:	b2db      	uxtb	r3, r3
 8016cc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016cc8:	b2da      	uxtb	r2, r3
 8016cca:	69fb      	ldr	r3, [r7, #28]
 8016ccc:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8016cce:	69fb      	ldr	r3, [r7, #28]
 8016cd0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8016cd4:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8016cd6:	68fb      	ldr	r3, [r7, #12]
 8016cd8:	891b      	ldrh	r3, [r3, #8]
 8016cda:	4618      	mov	r0, r3
 8016cdc:	f7f4 f868 	bl	800adb0 <lwip_htons>
 8016ce0:	4603      	mov	r3, r0
 8016ce2:	461a      	mov	r2, r3
 8016ce4:	69fb      	ldr	r3, [r7, #28]
 8016ce6:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8016ce8:	69fb      	ldr	r3, [r7, #28]
 8016cea:	2200      	movs	r2, #0
 8016cec:	719a      	strb	r2, [r3, #6]
 8016cee:	2200      	movs	r2, #0
 8016cf0:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8016cf2:	4b2a      	ldr	r3, [pc, #168]	; (8016d9c <ip4_output_if_src+0x154>)
 8016cf4:	881b      	ldrh	r3, [r3, #0]
 8016cf6:	4618      	mov	r0, r3
 8016cf8:	f7f4 f85a 	bl	800adb0 <lwip_htons>
 8016cfc:	4603      	mov	r3, r0
 8016cfe:	461a      	mov	r2, r3
 8016d00:	69fb      	ldr	r3, [r7, #28]
 8016d02:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8016d04:	4b25      	ldr	r3, [pc, #148]	; (8016d9c <ip4_output_if_src+0x154>)
 8016d06:	881b      	ldrh	r3, [r3, #0]
 8016d08:	3301      	adds	r3, #1
 8016d0a:	b29a      	uxth	r2, r3
 8016d0c:	4b23      	ldr	r3, [pc, #140]	; (8016d9c <ip4_output_if_src+0x154>)
 8016d0e:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8016d10:	68bb      	ldr	r3, [r7, #8]
 8016d12:	2b00      	cmp	r3, #0
 8016d14:	d104      	bne.n	8016d20 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8016d16:	4b22      	ldr	r3, [pc, #136]	; (8016da0 <ip4_output_if_src+0x158>)
 8016d18:	681a      	ldr	r2, [r3, #0]
 8016d1a:	69fb      	ldr	r3, [r7, #28]
 8016d1c:	60da      	str	r2, [r3, #12]
 8016d1e:	e003      	b.n	8016d28 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8016d20:	68bb      	ldr	r3, [r7, #8]
 8016d22:	681a      	ldr	r2, [r3, #0]
 8016d24:	69fb      	ldr	r3, [r7, #28]
 8016d26:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8016d28:	69fb      	ldr	r3, [r7, #28]
 8016d2a:	2200      	movs	r2, #0
 8016d2c:	729a      	strb	r2, [r3, #10]
 8016d2e:	2200      	movs	r2, #0
 8016d30:	72da      	strb	r2, [r3, #11]
 8016d32:	e00f      	b.n	8016d54 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8016d34:	68fb      	ldr	r3, [r7, #12]
 8016d36:	895b      	ldrh	r3, [r3, #10]
 8016d38:	2b13      	cmp	r3, #19
 8016d3a:	d802      	bhi.n	8016d42 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8016d3c:	f06f 0301 	mvn.w	r3, #1
 8016d40:	e020      	b.n	8016d84 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8016d42:	68fb      	ldr	r3, [r7, #12]
 8016d44:	685b      	ldr	r3, [r3, #4]
 8016d46:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8016d48:	69fb      	ldr	r3, [r7, #28]
 8016d4a:	691b      	ldr	r3, [r3, #16]
 8016d4c:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8016d4e:	f107 0314 	add.w	r3, r7, #20
 8016d52:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8016d54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016d56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016d58:	2b00      	cmp	r3, #0
 8016d5a:	d00c      	beq.n	8016d76 <ip4_output_if_src+0x12e>
 8016d5c:	68fb      	ldr	r3, [r7, #12]
 8016d5e:	891a      	ldrh	r2, [r3, #8]
 8016d60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016d62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016d64:	429a      	cmp	r2, r3
 8016d66:	d906      	bls.n	8016d76 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8016d68:	687a      	ldr	r2, [r7, #4]
 8016d6a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8016d6c:	68f8      	ldr	r0, [r7, #12]
 8016d6e:	f000 fd53 	bl	8017818 <ip4_frag>
 8016d72:	4603      	mov	r3, r0
 8016d74:	e006      	b.n	8016d84 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8016d76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016d78:	695b      	ldr	r3, [r3, #20]
 8016d7a:	687a      	ldr	r2, [r7, #4]
 8016d7c:	68f9      	ldr	r1, [r7, #12]
 8016d7e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016d80:	4798      	blx	r3
 8016d82:	4603      	mov	r3, r0
}
 8016d84:	4618      	mov	r0, r3
 8016d86:	3720      	adds	r7, #32
 8016d88:	46bd      	mov	sp, r7
 8016d8a:	bd80      	pop	{r7, pc}
 8016d8c:	0801ca8c 	.word	0x0801ca8c
 8016d90:	0801cac0 	.word	0x0801cac0
 8016d94:	0801cacc 	.word	0x0801cacc
 8016d98:	0801caf4 	.word	0x0801caf4
 8016d9c:	20010efe 	.word	0x20010efe
 8016da0:	08027060 	.word	0x08027060

08016da4 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8016da4:	b480      	push	{r7}
 8016da6:	b085      	sub	sp, #20
 8016da8:	af00      	add	r7, sp, #0
 8016daa:	6078      	str	r0, [r7, #4]
 8016dac:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8016dae:	687b      	ldr	r3, [r7, #4]
 8016db0:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8016db2:	687b      	ldr	r3, [r7, #4]
 8016db4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016db8:	d002      	beq.n	8016dc0 <ip4_addr_isbroadcast_u32+0x1c>
 8016dba:	687b      	ldr	r3, [r7, #4]
 8016dbc:	2b00      	cmp	r3, #0
 8016dbe:	d101      	bne.n	8016dc4 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8016dc0:	2301      	movs	r3, #1
 8016dc2:	e02a      	b.n	8016e1a <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8016dc4:	683b      	ldr	r3, [r7, #0]
 8016dc6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8016dca:	f003 0302 	and.w	r3, r3, #2
 8016dce:	2b00      	cmp	r3, #0
 8016dd0:	d101      	bne.n	8016dd6 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8016dd2:	2300      	movs	r3, #0
 8016dd4:	e021      	b.n	8016e1a <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8016dd6:	683b      	ldr	r3, [r7, #0]
 8016dd8:	3304      	adds	r3, #4
 8016dda:	681b      	ldr	r3, [r3, #0]
 8016ddc:	687a      	ldr	r2, [r7, #4]
 8016dde:	429a      	cmp	r2, r3
 8016de0:	d101      	bne.n	8016de6 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8016de2:	2300      	movs	r3, #0
 8016de4:	e019      	b.n	8016e1a <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8016de6:	68fa      	ldr	r2, [r7, #12]
 8016de8:	683b      	ldr	r3, [r7, #0]
 8016dea:	3304      	adds	r3, #4
 8016dec:	681b      	ldr	r3, [r3, #0]
 8016dee:	405a      	eors	r2, r3
 8016df0:	683b      	ldr	r3, [r7, #0]
 8016df2:	3308      	adds	r3, #8
 8016df4:	681b      	ldr	r3, [r3, #0]
 8016df6:	4013      	ands	r3, r2
 8016df8:	2b00      	cmp	r3, #0
 8016dfa:	d10d      	bne.n	8016e18 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8016dfc:	683b      	ldr	r3, [r7, #0]
 8016dfe:	3308      	adds	r3, #8
 8016e00:	681b      	ldr	r3, [r3, #0]
 8016e02:	43da      	mvns	r2, r3
 8016e04:	687b      	ldr	r3, [r7, #4]
 8016e06:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8016e08:	683b      	ldr	r3, [r7, #0]
 8016e0a:	3308      	adds	r3, #8
 8016e0c:	681b      	ldr	r3, [r3, #0]
 8016e0e:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8016e10:	429a      	cmp	r2, r3
 8016e12:	d101      	bne.n	8016e18 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8016e14:	2301      	movs	r3, #1
 8016e16:	e000      	b.n	8016e1a <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8016e18:	2300      	movs	r3, #0
  }
}
 8016e1a:	4618      	mov	r0, r3
 8016e1c:	3714      	adds	r7, #20
 8016e1e:	46bd      	mov	sp, r7
 8016e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e24:	4770      	bx	lr
	...

08016e28 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8016e28:	b580      	push	{r7, lr}
 8016e2a:	b084      	sub	sp, #16
 8016e2c:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8016e2e:	2300      	movs	r3, #0
 8016e30:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8016e32:	4b12      	ldr	r3, [pc, #72]	; (8016e7c <ip_reass_tmr+0x54>)
 8016e34:	681b      	ldr	r3, [r3, #0]
 8016e36:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8016e38:	e018      	b.n	8016e6c <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8016e3a:	68fb      	ldr	r3, [r7, #12]
 8016e3c:	7fdb      	ldrb	r3, [r3, #31]
 8016e3e:	2b00      	cmp	r3, #0
 8016e40:	d00b      	beq.n	8016e5a <ip_reass_tmr+0x32>
      r->timer--;
 8016e42:	68fb      	ldr	r3, [r7, #12]
 8016e44:	7fdb      	ldrb	r3, [r3, #31]
 8016e46:	3b01      	subs	r3, #1
 8016e48:	b2da      	uxtb	r2, r3
 8016e4a:	68fb      	ldr	r3, [r7, #12]
 8016e4c:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8016e4e:	68fb      	ldr	r3, [r7, #12]
 8016e50:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8016e52:	68fb      	ldr	r3, [r7, #12]
 8016e54:	681b      	ldr	r3, [r3, #0]
 8016e56:	60fb      	str	r3, [r7, #12]
 8016e58:	e008      	b.n	8016e6c <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8016e5a:	68fb      	ldr	r3, [r7, #12]
 8016e5c:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8016e5e:	68fb      	ldr	r3, [r7, #12]
 8016e60:	681b      	ldr	r3, [r3, #0]
 8016e62:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8016e64:	68b9      	ldr	r1, [r7, #8]
 8016e66:	6878      	ldr	r0, [r7, #4]
 8016e68:	f000 f80a 	bl	8016e80 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8016e6c:	68fb      	ldr	r3, [r7, #12]
 8016e6e:	2b00      	cmp	r3, #0
 8016e70:	d1e3      	bne.n	8016e3a <ip_reass_tmr+0x12>
    }
  }
}
 8016e72:	bf00      	nop
 8016e74:	bf00      	nop
 8016e76:	3710      	adds	r7, #16
 8016e78:	46bd      	mov	sp, r7
 8016e7a:	bd80      	pop	{r7, pc}
 8016e7c:	20010f00 	.word	0x20010f00

08016e80 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8016e80:	b580      	push	{r7, lr}
 8016e82:	b088      	sub	sp, #32
 8016e84:	af00      	add	r7, sp, #0
 8016e86:	6078      	str	r0, [r7, #4]
 8016e88:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8016e8a:	2300      	movs	r3, #0
 8016e8c:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8016e8e:	683a      	ldr	r2, [r7, #0]
 8016e90:	687b      	ldr	r3, [r7, #4]
 8016e92:	429a      	cmp	r2, r3
 8016e94:	d105      	bne.n	8016ea2 <ip_reass_free_complete_datagram+0x22>
 8016e96:	4b45      	ldr	r3, [pc, #276]	; (8016fac <ip_reass_free_complete_datagram+0x12c>)
 8016e98:	22ab      	movs	r2, #171	; 0xab
 8016e9a:	4945      	ldr	r1, [pc, #276]	; (8016fb0 <ip_reass_free_complete_datagram+0x130>)
 8016e9c:	4845      	ldr	r0, [pc, #276]	; (8016fb4 <ip_reass_free_complete_datagram+0x134>)
 8016e9e:	f001 fa91 	bl	80183c4 <iprintf>
  if (prev != NULL) {
 8016ea2:	683b      	ldr	r3, [r7, #0]
 8016ea4:	2b00      	cmp	r3, #0
 8016ea6:	d00a      	beq.n	8016ebe <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8016ea8:	683b      	ldr	r3, [r7, #0]
 8016eaa:	681b      	ldr	r3, [r3, #0]
 8016eac:	687a      	ldr	r2, [r7, #4]
 8016eae:	429a      	cmp	r2, r3
 8016eb0:	d005      	beq.n	8016ebe <ip_reass_free_complete_datagram+0x3e>
 8016eb2:	4b3e      	ldr	r3, [pc, #248]	; (8016fac <ip_reass_free_complete_datagram+0x12c>)
 8016eb4:	22ad      	movs	r2, #173	; 0xad
 8016eb6:	4940      	ldr	r1, [pc, #256]	; (8016fb8 <ip_reass_free_complete_datagram+0x138>)
 8016eb8:	483e      	ldr	r0, [pc, #248]	; (8016fb4 <ip_reass_free_complete_datagram+0x134>)
 8016eba:	f001 fa83 	bl	80183c4 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8016ebe:	687b      	ldr	r3, [r7, #4]
 8016ec0:	685b      	ldr	r3, [r3, #4]
 8016ec2:	685b      	ldr	r3, [r3, #4]
 8016ec4:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8016ec6:	697b      	ldr	r3, [r7, #20]
 8016ec8:	889b      	ldrh	r3, [r3, #4]
 8016eca:	b29b      	uxth	r3, r3
 8016ecc:	2b00      	cmp	r3, #0
 8016ece:	d12a      	bne.n	8016f26 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8016ed0:	687b      	ldr	r3, [r7, #4]
 8016ed2:	685b      	ldr	r3, [r3, #4]
 8016ed4:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8016ed6:	697b      	ldr	r3, [r7, #20]
 8016ed8:	681a      	ldr	r2, [r3, #0]
 8016eda:	687b      	ldr	r3, [r7, #4]
 8016edc:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8016ede:	69bb      	ldr	r3, [r7, #24]
 8016ee0:	6858      	ldr	r0, [r3, #4]
 8016ee2:	687b      	ldr	r3, [r7, #4]
 8016ee4:	3308      	adds	r3, #8
 8016ee6:	2214      	movs	r2, #20
 8016ee8:	4619      	mov	r1, r3
 8016eea:	f001 f9c0 	bl	801826e <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8016eee:	2101      	movs	r1, #1
 8016ef0:	69b8      	ldr	r0, [r7, #24]
 8016ef2:	f7ff fc29 	bl	8016748 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8016ef6:	69b8      	ldr	r0, [r7, #24]
 8016ef8:	f7f5 fc1c 	bl	800c734 <pbuf_clen>
 8016efc:	4603      	mov	r3, r0
 8016efe:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8016f00:	8bfa      	ldrh	r2, [r7, #30]
 8016f02:	8a7b      	ldrh	r3, [r7, #18]
 8016f04:	4413      	add	r3, r2
 8016f06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8016f0a:	db05      	blt.n	8016f18 <ip_reass_free_complete_datagram+0x98>
 8016f0c:	4b27      	ldr	r3, [pc, #156]	; (8016fac <ip_reass_free_complete_datagram+0x12c>)
 8016f0e:	22bc      	movs	r2, #188	; 0xbc
 8016f10:	492a      	ldr	r1, [pc, #168]	; (8016fbc <ip_reass_free_complete_datagram+0x13c>)
 8016f12:	4828      	ldr	r0, [pc, #160]	; (8016fb4 <ip_reass_free_complete_datagram+0x134>)
 8016f14:	f001 fa56 	bl	80183c4 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8016f18:	8bfa      	ldrh	r2, [r7, #30]
 8016f1a:	8a7b      	ldrh	r3, [r7, #18]
 8016f1c:	4413      	add	r3, r2
 8016f1e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8016f20:	69b8      	ldr	r0, [r7, #24]
 8016f22:	f7f5 fb79 	bl	800c618 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8016f26:	687b      	ldr	r3, [r7, #4]
 8016f28:	685b      	ldr	r3, [r3, #4]
 8016f2a:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8016f2c:	e01f      	b.n	8016f6e <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8016f2e:	69bb      	ldr	r3, [r7, #24]
 8016f30:	685b      	ldr	r3, [r3, #4]
 8016f32:	617b      	str	r3, [r7, #20]
    pcur = p;
 8016f34:	69bb      	ldr	r3, [r7, #24]
 8016f36:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8016f38:	697b      	ldr	r3, [r7, #20]
 8016f3a:	681b      	ldr	r3, [r3, #0]
 8016f3c:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8016f3e:	68f8      	ldr	r0, [r7, #12]
 8016f40:	f7f5 fbf8 	bl	800c734 <pbuf_clen>
 8016f44:	4603      	mov	r3, r0
 8016f46:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8016f48:	8bfa      	ldrh	r2, [r7, #30]
 8016f4a:	8a7b      	ldrh	r3, [r7, #18]
 8016f4c:	4413      	add	r3, r2
 8016f4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8016f52:	db05      	blt.n	8016f60 <ip_reass_free_complete_datagram+0xe0>
 8016f54:	4b15      	ldr	r3, [pc, #84]	; (8016fac <ip_reass_free_complete_datagram+0x12c>)
 8016f56:	22cc      	movs	r2, #204	; 0xcc
 8016f58:	4918      	ldr	r1, [pc, #96]	; (8016fbc <ip_reass_free_complete_datagram+0x13c>)
 8016f5a:	4816      	ldr	r0, [pc, #88]	; (8016fb4 <ip_reass_free_complete_datagram+0x134>)
 8016f5c:	f001 fa32 	bl	80183c4 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8016f60:	8bfa      	ldrh	r2, [r7, #30]
 8016f62:	8a7b      	ldrh	r3, [r7, #18]
 8016f64:	4413      	add	r3, r2
 8016f66:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8016f68:	68f8      	ldr	r0, [r7, #12]
 8016f6a:	f7f5 fb55 	bl	800c618 <pbuf_free>
  while (p != NULL) {
 8016f6e:	69bb      	ldr	r3, [r7, #24]
 8016f70:	2b00      	cmp	r3, #0
 8016f72:	d1dc      	bne.n	8016f2e <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8016f74:	6839      	ldr	r1, [r7, #0]
 8016f76:	6878      	ldr	r0, [r7, #4]
 8016f78:	f000 f8c2 	bl	8017100 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8016f7c:	4b10      	ldr	r3, [pc, #64]	; (8016fc0 <ip_reass_free_complete_datagram+0x140>)
 8016f7e:	881b      	ldrh	r3, [r3, #0]
 8016f80:	8bfa      	ldrh	r2, [r7, #30]
 8016f82:	429a      	cmp	r2, r3
 8016f84:	d905      	bls.n	8016f92 <ip_reass_free_complete_datagram+0x112>
 8016f86:	4b09      	ldr	r3, [pc, #36]	; (8016fac <ip_reass_free_complete_datagram+0x12c>)
 8016f88:	22d2      	movs	r2, #210	; 0xd2
 8016f8a:	490e      	ldr	r1, [pc, #56]	; (8016fc4 <ip_reass_free_complete_datagram+0x144>)
 8016f8c:	4809      	ldr	r0, [pc, #36]	; (8016fb4 <ip_reass_free_complete_datagram+0x134>)
 8016f8e:	f001 fa19 	bl	80183c4 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8016f92:	4b0b      	ldr	r3, [pc, #44]	; (8016fc0 <ip_reass_free_complete_datagram+0x140>)
 8016f94:	881a      	ldrh	r2, [r3, #0]
 8016f96:	8bfb      	ldrh	r3, [r7, #30]
 8016f98:	1ad3      	subs	r3, r2, r3
 8016f9a:	b29a      	uxth	r2, r3
 8016f9c:	4b08      	ldr	r3, [pc, #32]	; (8016fc0 <ip_reass_free_complete_datagram+0x140>)
 8016f9e:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8016fa0:	8bfb      	ldrh	r3, [r7, #30]
}
 8016fa2:	4618      	mov	r0, r3
 8016fa4:	3720      	adds	r7, #32
 8016fa6:	46bd      	mov	sp, r7
 8016fa8:	bd80      	pop	{r7, pc}
 8016faa:	bf00      	nop
 8016fac:	0801cb24 	.word	0x0801cb24
 8016fb0:	0801cb60 	.word	0x0801cb60
 8016fb4:	0801cb6c 	.word	0x0801cb6c
 8016fb8:	0801cb94 	.word	0x0801cb94
 8016fbc:	0801cba8 	.word	0x0801cba8
 8016fc0:	20010f04 	.word	0x20010f04
 8016fc4:	0801cbc8 	.word	0x0801cbc8

08016fc8 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8016fc8:	b580      	push	{r7, lr}
 8016fca:	b08a      	sub	sp, #40	; 0x28
 8016fcc:	af00      	add	r7, sp, #0
 8016fce:	6078      	str	r0, [r7, #4]
 8016fd0:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8016fd2:	2300      	movs	r3, #0
 8016fd4:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8016fd6:	2300      	movs	r3, #0
 8016fd8:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8016fda:	2300      	movs	r3, #0
 8016fdc:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8016fde:	2300      	movs	r3, #0
 8016fe0:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8016fe2:	2300      	movs	r3, #0
 8016fe4:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8016fe6:	4b28      	ldr	r3, [pc, #160]	; (8017088 <ip_reass_remove_oldest_datagram+0xc0>)
 8016fe8:	681b      	ldr	r3, [r3, #0]
 8016fea:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8016fec:	e030      	b.n	8017050 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8016fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ff0:	695a      	ldr	r2, [r3, #20]
 8016ff2:	687b      	ldr	r3, [r7, #4]
 8016ff4:	68db      	ldr	r3, [r3, #12]
 8016ff6:	429a      	cmp	r2, r3
 8016ff8:	d10c      	bne.n	8017014 <ip_reass_remove_oldest_datagram+0x4c>
 8016ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ffc:	699a      	ldr	r2, [r3, #24]
 8016ffe:	687b      	ldr	r3, [r7, #4]
 8017000:	691b      	ldr	r3, [r3, #16]
 8017002:	429a      	cmp	r2, r3
 8017004:	d106      	bne.n	8017014 <ip_reass_remove_oldest_datagram+0x4c>
 8017006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017008:	899a      	ldrh	r2, [r3, #12]
 801700a:	687b      	ldr	r3, [r7, #4]
 801700c:	889b      	ldrh	r3, [r3, #4]
 801700e:	b29b      	uxth	r3, r3
 8017010:	429a      	cmp	r2, r3
 8017012:	d014      	beq.n	801703e <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8017014:	693b      	ldr	r3, [r7, #16]
 8017016:	3301      	adds	r3, #1
 8017018:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801701a:	6a3b      	ldr	r3, [r7, #32]
 801701c:	2b00      	cmp	r3, #0
 801701e:	d104      	bne.n	801702a <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8017020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017022:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8017024:	69fb      	ldr	r3, [r7, #28]
 8017026:	61bb      	str	r3, [r7, #24]
 8017028:	e009      	b.n	801703e <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801702a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801702c:	7fda      	ldrb	r2, [r3, #31]
 801702e:	6a3b      	ldr	r3, [r7, #32]
 8017030:	7fdb      	ldrb	r3, [r3, #31]
 8017032:	429a      	cmp	r2, r3
 8017034:	d803      	bhi.n	801703e <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8017036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017038:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801703a:	69fb      	ldr	r3, [r7, #28]
 801703c:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801703e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017040:	681b      	ldr	r3, [r3, #0]
 8017042:	2b00      	cmp	r3, #0
 8017044:	d001      	beq.n	801704a <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8017046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017048:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801704a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801704c:	681b      	ldr	r3, [r3, #0]
 801704e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8017050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017052:	2b00      	cmp	r3, #0
 8017054:	d1cb      	bne.n	8016fee <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8017056:	6a3b      	ldr	r3, [r7, #32]
 8017058:	2b00      	cmp	r3, #0
 801705a:	d008      	beq.n	801706e <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 801705c:	69b9      	ldr	r1, [r7, #24]
 801705e:	6a38      	ldr	r0, [r7, #32]
 8017060:	f7ff ff0e 	bl	8016e80 <ip_reass_free_complete_datagram>
 8017064:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8017066:	697a      	ldr	r2, [r7, #20]
 8017068:	68fb      	ldr	r3, [r7, #12]
 801706a:	4413      	add	r3, r2
 801706c:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801706e:	697a      	ldr	r2, [r7, #20]
 8017070:	683b      	ldr	r3, [r7, #0]
 8017072:	429a      	cmp	r2, r3
 8017074:	da02      	bge.n	801707c <ip_reass_remove_oldest_datagram+0xb4>
 8017076:	693b      	ldr	r3, [r7, #16]
 8017078:	2b01      	cmp	r3, #1
 801707a:	dcac      	bgt.n	8016fd6 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 801707c:	697b      	ldr	r3, [r7, #20]
}
 801707e:	4618      	mov	r0, r3
 8017080:	3728      	adds	r7, #40	; 0x28
 8017082:	46bd      	mov	sp, r7
 8017084:	bd80      	pop	{r7, pc}
 8017086:	bf00      	nop
 8017088:	20010f00 	.word	0x20010f00

0801708c <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 801708c:	b580      	push	{r7, lr}
 801708e:	b084      	sub	sp, #16
 8017090:	af00      	add	r7, sp, #0
 8017092:	6078      	str	r0, [r7, #4]
 8017094:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8017096:	2004      	movs	r0, #4
 8017098:	f7f4 fb98 	bl	800b7cc <memp_malloc>
 801709c:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801709e:	68fb      	ldr	r3, [r7, #12]
 80170a0:	2b00      	cmp	r3, #0
 80170a2:	d110      	bne.n	80170c6 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 80170a4:	6839      	ldr	r1, [r7, #0]
 80170a6:	6878      	ldr	r0, [r7, #4]
 80170a8:	f7ff ff8e 	bl	8016fc8 <ip_reass_remove_oldest_datagram>
 80170ac:	4602      	mov	r2, r0
 80170ae:	683b      	ldr	r3, [r7, #0]
 80170b0:	4293      	cmp	r3, r2
 80170b2:	dc03      	bgt.n	80170bc <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80170b4:	2004      	movs	r0, #4
 80170b6:	f7f4 fb89 	bl	800b7cc <memp_malloc>
 80170ba:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 80170bc:	68fb      	ldr	r3, [r7, #12]
 80170be:	2b00      	cmp	r3, #0
 80170c0:	d101      	bne.n	80170c6 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 80170c2:	2300      	movs	r3, #0
 80170c4:	e016      	b.n	80170f4 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 80170c6:	2220      	movs	r2, #32
 80170c8:	2100      	movs	r1, #0
 80170ca:	68f8      	ldr	r0, [r7, #12]
 80170cc:	f001 f8dd 	bl	801828a <memset>
  ipr->timer = IP_REASS_MAXAGE;
 80170d0:	68fb      	ldr	r3, [r7, #12]
 80170d2:	220f      	movs	r2, #15
 80170d4:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 80170d6:	4b09      	ldr	r3, [pc, #36]	; (80170fc <ip_reass_enqueue_new_datagram+0x70>)
 80170d8:	681a      	ldr	r2, [r3, #0]
 80170da:	68fb      	ldr	r3, [r7, #12]
 80170dc:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 80170de:	4a07      	ldr	r2, [pc, #28]	; (80170fc <ip_reass_enqueue_new_datagram+0x70>)
 80170e0:	68fb      	ldr	r3, [r7, #12]
 80170e2:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 80170e4:	68fb      	ldr	r3, [r7, #12]
 80170e6:	3308      	adds	r3, #8
 80170e8:	2214      	movs	r2, #20
 80170ea:	6879      	ldr	r1, [r7, #4]
 80170ec:	4618      	mov	r0, r3
 80170ee:	f001 f8be 	bl	801826e <memcpy>
  return ipr;
 80170f2:	68fb      	ldr	r3, [r7, #12]
}
 80170f4:	4618      	mov	r0, r3
 80170f6:	3710      	adds	r7, #16
 80170f8:	46bd      	mov	sp, r7
 80170fa:	bd80      	pop	{r7, pc}
 80170fc:	20010f00 	.word	0x20010f00

08017100 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8017100:	b580      	push	{r7, lr}
 8017102:	b082      	sub	sp, #8
 8017104:	af00      	add	r7, sp, #0
 8017106:	6078      	str	r0, [r7, #4]
 8017108:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801710a:	4b10      	ldr	r3, [pc, #64]	; (801714c <ip_reass_dequeue_datagram+0x4c>)
 801710c:	681b      	ldr	r3, [r3, #0]
 801710e:	687a      	ldr	r2, [r7, #4]
 8017110:	429a      	cmp	r2, r3
 8017112:	d104      	bne.n	801711e <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8017114:	687b      	ldr	r3, [r7, #4]
 8017116:	681b      	ldr	r3, [r3, #0]
 8017118:	4a0c      	ldr	r2, [pc, #48]	; (801714c <ip_reass_dequeue_datagram+0x4c>)
 801711a:	6013      	str	r3, [r2, #0]
 801711c:	e00d      	b.n	801713a <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801711e:	683b      	ldr	r3, [r7, #0]
 8017120:	2b00      	cmp	r3, #0
 8017122:	d106      	bne.n	8017132 <ip_reass_dequeue_datagram+0x32>
 8017124:	4b0a      	ldr	r3, [pc, #40]	; (8017150 <ip_reass_dequeue_datagram+0x50>)
 8017126:	f240 1245 	movw	r2, #325	; 0x145
 801712a:	490a      	ldr	r1, [pc, #40]	; (8017154 <ip_reass_dequeue_datagram+0x54>)
 801712c:	480a      	ldr	r0, [pc, #40]	; (8017158 <ip_reass_dequeue_datagram+0x58>)
 801712e:	f001 f949 	bl	80183c4 <iprintf>
    prev->next = ipr->next;
 8017132:	687b      	ldr	r3, [r7, #4]
 8017134:	681a      	ldr	r2, [r3, #0]
 8017136:	683b      	ldr	r3, [r7, #0]
 8017138:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801713a:	6879      	ldr	r1, [r7, #4]
 801713c:	2004      	movs	r0, #4
 801713e:	f7f4 fbbb 	bl	800b8b8 <memp_free>
}
 8017142:	bf00      	nop
 8017144:	3708      	adds	r7, #8
 8017146:	46bd      	mov	sp, r7
 8017148:	bd80      	pop	{r7, pc}
 801714a:	bf00      	nop
 801714c:	20010f00 	.word	0x20010f00
 8017150:	0801cb24 	.word	0x0801cb24
 8017154:	0801cbec 	.word	0x0801cbec
 8017158:	0801cb6c 	.word	0x0801cb6c

0801715c <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 801715c:	b580      	push	{r7, lr}
 801715e:	b08c      	sub	sp, #48	; 0x30
 8017160:	af00      	add	r7, sp, #0
 8017162:	60f8      	str	r0, [r7, #12]
 8017164:	60b9      	str	r1, [r7, #8]
 8017166:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8017168:	2300      	movs	r3, #0
 801716a:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 801716c:	2301      	movs	r3, #1
 801716e:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8017170:	68bb      	ldr	r3, [r7, #8]
 8017172:	685b      	ldr	r3, [r3, #4]
 8017174:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8017176:	69fb      	ldr	r3, [r7, #28]
 8017178:	885b      	ldrh	r3, [r3, #2]
 801717a:	b29b      	uxth	r3, r3
 801717c:	4618      	mov	r0, r3
 801717e:	f7f3 fe17 	bl	800adb0 <lwip_htons>
 8017182:	4603      	mov	r3, r0
 8017184:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8017186:	69fb      	ldr	r3, [r7, #28]
 8017188:	781b      	ldrb	r3, [r3, #0]
 801718a:	f003 030f 	and.w	r3, r3, #15
 801718e:	b2db      	uxtb	r3, r3
 8017190:	009b      	lsls	r3, r3, #2
 8017192:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8017194:	7e7b      	ldrb	r3, [r7, #25]
 8017196:	b29b      	uxth	r3, r3
 8017198:	8b7a      	ldrh	r2, [r7, #26]
 801719a:	429a      	cmp	r2, r3
 801719c:	d202      	bcs.n	80171a4 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801719e:	f04f 33ff 	mov.w	r3, #4294967295
 80171a2:	e135      	b.n	8017410 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 80171a4:	7e7b      	ldrb	r3, [r7, #25]
 80171a6:	b29b      	uxth	r3, r3
 80171a8:	8b7a      	ldrh	r2, [r7, #26]
 80171aa:	1ad3      	subs	r3, r2, r3
 80171ac:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 80171ae:	69fb      	ldr	r3, [r7, #28]
 80171b0:	88db      	ldrh	r3, [r3, #6]
 80171b2:	b29b      	uxth	r3, r3
 80171b4:	4618      	mov	r0, r3
 80171b6:	f7f3 fdfb 	bl	800adb0 <lwip_htons>
 80171ba:	4603      	mov	r3, r0
 80171bc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80171c0:	b29b      	uxth	r3, r3
 80171c2:	00db      	lsls	r3, r3, #3
 80171c4:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 80171c6:	68bb      	ldr	r3, [r7, #8]
 80171c8:	685b      	ldr	r3, [r3, #4]
 80171ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 80171cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80171ce:	2200      	movs	r2, #0
 80171d0:	701a      	strb	r2, [r3, #0]
 80171d2:	2200      	movs	r2, #0
 80171d4:	705a      	strb	r2, [r3, #1]
 80171d6:	2200      	movs	r2, #0
 80171d8:	709a      	strb	r2, [r3, #2]
 80171da:	2200      	movs	r2, #0
 80171dc:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 80171de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80171e0:	8afa      	ldrh	r2, [r7, #22]
 80171e2:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 80171e4:	8afa      	ldrh	r2, [r7, #22]
 80171e6:	8b7b      	ldrh	r3, [r7, #26]
 80171e8:	4413      	add	r3, r2
 80171ea:	b29a      	uxth	r2, r3
 80171ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80171ee:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 80171f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80171f2:	88db      	ldrh	r3, [r3, #6]
 80171f4:	b29b      	uxth	r3, r3
 80171f6:	8afa      	ldrh	r2, [r7, #22]
 80171f8:	429a      	cmp	r2, r3
 80171fa:	d902      	bls.n	8017202 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80171fc:	f04f 33ff 	mov.w	r3, #4294967295
 8017200:	e106      	b.n	8017410 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8017202:	68fb      	ldr	r3, [r7, #12]
 8017204:	685b      	ldr	r3, [r3, #4]
 8017206:	627b      	str	r3, [r7, #36]	; 0x24
 8017208:	e068      	b.n	80172dc <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801720a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801720c:	685b      	ldr	r3, [r3, #4]
 801720e:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8017210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017212:	889b      	ldrh	r3, [r3, #4]
 8017214:	b29a      	uxth	r2, r3
 8017216:	693b      	ldr	r3, [r7, #16]
 8017218:	889b      	ldrh	r3, [r3, #4]
 801721a:	b29b      	uxth	r3, r3
 801721c:	429a      	cmp	r2, r3
 801721e:	d235      	bcs.n	801728c <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8017220:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017222:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017224:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8017226:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017228:	2b00      	cmp	r3, #0
 801722a:	d020      	beq.n	801726e <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 801722c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801722e:	889b      	ldrh	r3, [r3, #4]
 8017230:	b29a      	uxth	r2, r3
 8017232:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017234:	88db      	ldrh	r3, [r3, #6]
 8017236:	b29b      	uxth	r3, r3
 8017238:	429a      	cmp	r2, r3
 801723a:	d307      	bcc.n	801724c <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 801723c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801723e:	88db      	ldrh	r3, [r3, #6]
 8017240:	b29a      	uxth	r2, r3
 8017242:	693b      	ldr	r3, [r7, #16]
 8017244:	889b      	ldrh	r3, [r3, #4]
 8017246:	b29b      	uxth	r3, r3
 8017248:	429a      	cmp	r2, r3
 801724a:	d902      	bls.n	8017252 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801724c:	f04f 33ff 	mov.w	r3, #4294967295
 8017250:	e0de      	b.n	8017410 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8017252:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017254:	68ba      	ldr	r2, [r7, #8]
 8017256:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8017258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801725a:	88db      	ldrh	r3, [r3, #6]
 801725c:	b29a      	uxth	r2, r3
 801725e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017260:	889b      	ldrh	r3, [r3, #4]
 8017262:	b29b      	uxth	r3, r3
 8017264:	429a      	cmp	r2, r3
 8017266:	d03d      	beq.n	80172e4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8017268:	2300      	movs	r3, #0
 801726a:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 801726c:	e03a      	b.n	80172e4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801726e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017270:	88db      	ldrh	r3, [r3, #6]
 8017272:	b29a      	uxth	r2, r3
 8017274:	693b      	ldr	r3, [r7, #16]
 8017276:	889b      	ldrh	r3, [r3, #4]
 8017278:	b29b      	uxth	r3, r3
 801727a:	429a      	cmp	r2, r3
 801727c:	d902      	bls.n	8017284 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801727e:	f04f 33ff 	mov.w	r3, #4294967295
 8017282:	e0c5      	b.n	8017410 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8017284:	68fb      	ldr	r3, [r7, #12]
 8017286:	68ba      	ldr	r2, [r7, #8]
 8017288:	605a      	str	r2, [r3, #4]
      break;
 801728a:	e02b      	b.n	80172e4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 801728c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801728e:	889b      	ldrh	r3, [r3, #4]
 8017290:	b29a      	uxth	r2, r3
 8017292:	693b      	ldr	r3, [r7, #16]
 8017294:	889b      	ldrh	r3, [r3, #4]
 8017296:	b29b      	uxth	r3, r3
 8017298:	429a      	cmp	r2, r3
 801729a:	d102      	bne.n	80172a2 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801729c:	f04f 33ff 	mov.w	r3, #4294967295
 80172a0:	e0b6      	b.n	8017410 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 80172a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80172a4:	889b      	ldrh	r3, [r3, #4]
 80172a6:	b29a      	uxth	r2, r3
 80172a8:	693b      	ldr	r3, [r7, #16]
 80172aa:	88db      	ldrh	r3, [r3, #6]
 80172ac:	b29b      	uxth	r3, r3
 80172ae:	429a      	cmp	r2, r3
 80172b0:	d202      	bcs.n	80172b8 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80172b2:	f04f 33ff 	mov.w	r3, #4294967295
 80172b6:	e0ab      	b.n	8017410 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 80172b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80172ba:	2b00      	cmp	r3, #0
 80172bc:	d009      	beq.n	80172d2 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 80172be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80172c0:	88db      	ldrh	r3, [r3, #6]
 80172c2:	b29a      	uxth	r2, r3
 80172c4:	693b      	ldr	r3, [r7, #16]
 80172c6:	889b      	ldrh	r3, [r3, #4]
 80172c8:	b29b      	uxth	r3, r3
 80172ca:	429a      	cmp	r2, r3
 80172cc:	d001      	beq.n	80172d2 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80172ce:	2300      	movs	r3, #0
 80172d0:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 80172d2:	693b      	ldr	r3, [r7, #16]
 80172d4:	681b      	ldr	r3, [r3, #0]
 80172d6:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 80172d8:	693b      	ldr	r3, [r7, #16]
 80172da:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 80172dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80172de:	2b00      	cmp	r3, #0
 80172e0:	d193      	bne.n	801720a <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 80172e2:	e000      	b.n	80172e6 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 80172e4:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 80172e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80172e8:	2b00      	cmp	r3, #0
 80172ea:	d12d      	bne.n	8017348 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 80172ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80172ee:	2b00      	cmp	r3, #0
 80172f0:	d01c      	beq.n	801732c <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 80172f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80172f4:	88db      	ldrh	r3, [r3, #6]
 80172f6:	b29a      	uxth	r2, r3
 80172f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80172fa:	889b      	ldrh	r3, [r3, #4]
 80172fc:	b29b      	uxth	r3, r3
 80172fe:	429a      	cmp	r2, r3
 8017300:	d906      	bls.n	8017310 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8017302:	4b45      	ldr	r3, [pc, #276]	; (8017418 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8017304:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8017308:	4944      	ldr	r1, [pc, #272]	; (801741c <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801730a:	4845      	ldr	r0, [pc, #276]	; (8017420 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801730c:	f001 f85a 	bl	80183c4 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8017310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017312:	68ba      	ldr	r2, [r7, #8]
 8017314:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8017316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017318:	88db      	ldrh	r3, [r3, #6]
 801731a:	b29a      	uxth	r2, r3
 801731c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801731e:	889b      	ldrh	r3, [r3, #4]
 8017320:	b29b      	uxth	r3, r3
 8017322:	429a      	cmp	r2, r3
 8017324:	d010      	beq.n	8017348 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8017326:	2300      	movs	r3, #0
 8017328:	623b      	str	r3, [r7, #32]
 801732a:	e00d      	b.n	8017348 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 801732c:	68fb      	ldr	r3, [r7, #12]
 801732e:	685b      	ldr	r3, [r3, #4]
 8017330:	2b00      	cmp	r3, #0
 8017332:	d006      	beq.n	8017342 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8017334:	4b38      	ldr	r3, [pc, #224]	; (8017418 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8017336:	f44f 72df 	mov.w	r2, #446	; 0x1be
 801733a:	493a      	ldr	r1, [pc, #232]	; (8017424 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 801733c:	4838      	ldr	r0, [pc, #224]	; (8017420 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801733e:	f001 f841 	bl	80183c4 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8017342:	68fb      	ldr	r3, [r7, #12]
 8017344:	68ba      	ldr	r2, [r7, #8]
 8017346:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8017348:	687b      	ldr	r3, [r7, #4]
 801734a:	2b00      	cmp	r3, #0
 801734c:	d105      	bne.n	801735a <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801734e:	68fb      	ldr	r3, [r7, #12]
 8017350:	7f9b      	ldrb	r3, [r3, #30]
 8017352:	f003 0301 	and.w	r3, r3, #1
 8017356:	2b00      	cmp	r3, #0
 8017358:	d059      	beq.n	801740e <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801735a:	6a3b      	ldr	r3, [r7, #32]
 801735c:	2b00      	cmp	r3, #0
 801735e:	d04f      	beq.n	8017400 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8017360:	68fb      	ldr	r3, [r7, #12]
 8017362:	685b      	ldr	r3, [r3, #4]
 8017364:	2b00      	cmp	r3, #0
 8017366:	d006      	beq.n	8017376 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8017368:	68fb      	ldr	r3, [r7, #12]
 801736a:	685b      	ldr	r3, [r3, #4]
 801736c:	685b      	ldr	r3, [r3, #4]
 801736e:	889b      	ldrh	r3, [r3, #4]
 8017370:	b29b      	uxth	r3, r3
 8017372:	2b00      	cmp	r3, #0
 8017374:	d002      	beq.n	801737c <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8017376:	2300      	movs	r3, #0
 8017378:	623b      	str	r3, [r7, #32]
 801737a:	e041      	b.n	8017400 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 801737c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801737e:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8017380:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017382:	681b      	ldr	r3, [r3, #0]
 8017384:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8017386:	e012      	b.n	80173ae <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8017388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801738a:	685b      	ldr	r3, [r3, #4]
 801738c:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 801738e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017390:	88db      	ldrh	r3, [r3, #6]
 8017392:	b29a      	uxth	r2, r3
 8017394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017396:	889b      	ldrh	r3, [r3, #4]
 8017398:	b29b      	uxth	r3, r3
 801739a:	429a      	cmp	r2, r3
 801739c:	d002      	beq.n	80173a4 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801739e:	2300      	movs	r3, #0
 80173a0:	623b      	str	r3, [r7, #32]
            break;
 80173a2:	e007      	b.n	80173b4 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 80173a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80173a6:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 80173a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80173aa:	681b      	ldr	r3, [r3, #0]
 80173ac:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80173ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80173b0:	2b00      	cmp	r3, #0
 80173b2:	d1e9      	bne.n	8017388 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 80173b4:	6a3b      	ldr	r3, [r7, #32]
 80173b6:	2b00      	cmp	r3, #0
 80173b8:	d022      	beq.n	8017400 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 80173ba:	68fb      	ldr	r3, [r7, #12]
 80173bc:	685b      	ldr	r3, [r3, #4]
 80173be:	2b00      	cmp	r3, #0
 80173c0:	d106      	bne.n	80173d0 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 80173c2:	4b15      	ldr	r3, [pc, #84]	; (8017418 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80173c4:	f240 12df 	movw	r2, #479	; 0x1df
 80173c8:	4917      	ldr	r1, [pc, #92]	; (8017428 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80173ca:	4815      	ldr	r0, [pc, #84]	; (8017420 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80173cc:	f000 fffa 	bl	80183c4 <iprintf>
          LWIP_ASSERT("sanity check",
 80173d0:	68fb      	ldr	r3, [r7, #12]
 80173d2:	685b      	ldr	r3, [r3, #4]
 80173d4:	685b      	ldr	r3, [r3, #4]
 80173d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80173d8:	429a      	cmp	r2, r3
 80173da:	d106      	bne.n	80173ea <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 80173dc:	4b0e      	ldr	r3, [pc, #56]	; (8017418 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80173de:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80173e2:	4911      	ldr	r1, [pc, #68]	; (8017428 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80173e4:	480e      	ldr	r0, [pc, #56]	; (8017420 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80173e6:	f000 ffed 	bl	80183c4 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 80173ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80173ec:	681b      	ldr	r3, [r3, #0]
 80173ee:	2b00      	cmp	r3, #0
 80173f0:	d006      	beq.n	8017400 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 80173f2:	4b09      	ldr	r3, [pc, #36]	; (8017418 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80173f4:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 80173f8:	490c      	ldr	r1, [pc, #48]	; (801742c <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 80173fa:	4809      	ldr	r0, [pc, #36]	; (8017420 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80173fc:	f000 ffe2 	bl	80183c4 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8017400:	6a3b      	ldr	r3, [r7, #32]
 8017402:	2b00      	cmp	r3, #0
 8017404:	bf14      	ite	ne
 8017406:	2301      	movne	r3, #1
 8017408:	2300      	moveq	r3, #0
 801740a:	b2db      	uxtb	r3, r3
 801740c:	e000      	b.n	8017410 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801740e:	2300      	movs	r3, #0
}
 8017410:	4618      	mov	r0, r3
 8017412:	3730      	adds	r7, #48	; 0x30
 8017414:	46bd      	mov	sp, r7
 8017416:	bd80      	pop	{r7, pc}
 8017418:	0801cb24 	.word	0x0801cb24
 801741c:	0801cc08 	.word	0x0801cc08
 8017420:	0801cb6c 	.word	0x0801cb6c
 8017424:	0801cc28 	.word	0x0801cc28
 8017428:	0801cc60 	.word	0x0801cc60
 801742c:	0801cc70 	.word	0x0801cc70

08017430 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8017430:	b580      	push	{r7, lr}
 8017432:	b08e      	sub	sp, #56	; 0x38
 8017434:	af00      	add	r7, sp, #0
 8017436:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8017438:	687b      	ldr	r3, [r7, #4]
 801743a:	685b      	ldr	r3, [r3, #4]
 801743c:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801743e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017440:	781b      	ldrb	r3, [r3, #0]
 8017442:	f003 030f 	and.w	r3, r3, #15
 8017446:	b2db      	uxtb	r3, r3
 8017448:	009b      	lsls	r3, r3, #2
 801744a:	b2db      	uxtb	r3, r3
 801744c:	2b14      	cmp	r3, #20
 801744e:	f040 8171 	bne.w	8017734 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8017452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017454:	88db      	ldrh	r3, [r3, #6]
 8017456:	b29b      	uxth	r3, r3
 8017458:	4618      	mov	r0, r3
 801745a:	f7f3 fca9 	bl	800adb0 <lwip_htons>
 801745e:	4603      	mov	r3, r0
 8017460:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8017464:	b29b      	uxth	r3, r3
 8017466:	00db      	lsls	r3, r3, #3
 8017468:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801746a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801746c:	885b      	ldrh	r3, [r3, #2]
 801746e:	b29b      	uxth	r3, r3
 8017470:	4618      	mov	r0, r3
 8017472:	f7f3 fc9d 	bl	800adb0 <lwip_htons>
 8017476:	4603      	mov	r3, r0
 8017478:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801747a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801747c:	781b      	ldrb	r3, [r3, #0]
 801747e:	f003 030f 	and.w	r3, r3, #15
 8017482:	b2db      	uxtb	r3, r3
 8017484:	009b      	lsls	r3, r3, #2
 8017486:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 801748a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801748e:	b29b      	uxth	r3, r3
 8017490:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8017492:	429a      	cmp	r2, r3
 8017494:	f0c0 8150 	bcc.w	8017738 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8017498:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801749c:	b29b      	uxth	r3, r3
 801749e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80174a0:	1ad3      	subs	r3, r2, r3
 80174a2:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 80174a4:	6878      	ldr	r0, [r7, #4]
 80174a6:	f7f5 f945 	bl	800c734 <pbuf_clen>
 80174aa:	4603      	mov	r3, r0
 80174ac:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 80174ae:	4b8c      	ldr	r3, [pc, #560]	; (80176e0 <ip4_reass+0x2b0>)
 80174b0:	881b      	ldrh	r3, [r3, #0]
 80174b2:	461a      	mov	r2, r3
 80174b4:	8c3b      	ldrh	r3, [r7, #32]
 80174b6:	4413      	add	r3, r2
 80174b8:	2b0a      	cmp	r3, #10
 80174ba:	dd10      	ble.n	80174de <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80174bc:	8c3b      	ldrh	r3, [r7, #32]
 80174be:	4619      	mov	r1, r3
 80174c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80174c2:	f7ff fd81 	bl	8016fc8 <ip_reass_remove_oldest_datagram>
 80174c6:	4603      	mov	r3, r0
 80174c8:	2b00      	cmp	r3, #0
 80174ca:	f000 8137 	beq.w	801773c <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 80174ce:	4b84      	ldr	r3, [pc, #528]	; (80176e0 <ip4_reass+0x2b0>)
 80174d0:	881b      	ldrh	r3, [r3, #0]
 80174d2:	461a      	mov	r2, r3
 80174d4:	8c3b      	ldrh	r3, [r7, #32]
 80174d6:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80174d8:	2b0a      	cmp	r3, #10
 80174da:	f300 812f 	bgt.w	801773c <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80174de:	4b81      	ldr	r3, [pc, #516]	; (80176e4 <ip4_reass+0x2b4>)
 80174e0:	681b      	ldr	r3, [r3, #0]
 80174e2:	633b      	str	r3, [r7, #48]	; 0x30
 80174e4:	e015      	b.n	8017512 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 80174e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80174e8:	695a      	ldr	r2, [r3, #20]
 80174ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80174ec:	68db      	ldr	r3, [r3, #12]
 80174ee:	429a      	cmp	r2, r3
 80174f0:	d10c      	bne.n	801750c <ip4_reass+0xdc>
 80174f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80174f4:	699a      	ldr	r2, [r3, #24]
 80174f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80174f8:	691b      	ldr	r3, [r3, #16]
 80174fa:	429a      	cmp	r2, r3
 80174fc:	d106      	bne.n	801750c <ip4_reass+0xdc>
 80174fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017500:	899a      	ldrh	r2, [r3, #12]
 8017502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017504:	889b      	ldrh	r3, [r3, #4]
 8017506:	b29b      	uxth	r3, r3
 8017508:	429a      	cmp	r2, r3
 801750a:	d006      	beq.n	801751a <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801750c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801750e:	681b      	ldr	r3, [r3, #0]
 8017510:	633b      	str	r3, [r7, #48]	; 0x30
 8017512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017514:	2b00      	cmp	r3, #0
 8017516:	d1e6      	bne.n	80174e6 <ip4_reass+0xb6>
 8017518:	e000      	b.n	801751c <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801751a:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 801751c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801751e:	2b00      	cmp	r3, #0
 8017520:	d109      	bne.n	8017536 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8017522:	8c3b      	ldrh	r3, [r7, #32]
 8017524:	4619      	mov	r1, r3
 8017526:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017528:	f7ff fdb0 	bl	801708c <ip_reass_enqueue_new_datagram>
 801752c:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801752e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017530:	2b00      	cmp	r3, #0
 8017532:	d11c      	bne.n	801756e <ip4_reass+0x13e>
      goto nullreturn;
 8017534:	e105      	b.n	8017742 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8017536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017538:	88db      	ldrh	r3, [r3, #6]
 801753a:	b29b      	uxth	r3, r3
 801753c:	4618      	mov	r0, r3
 801753e:	f7f3 fc37 	bl	800adb0 <lwip_htons>
 8017542:	4603      	mov	r3, r0
 8017544:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8017548:	2b00      	cmp	r3, #0
 801754a:	d110      	bne.n	801756e <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801754c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801754e:	89db      	ldrh	r3, [r3, #14]
 8017550:	4618      	mov	r0, r3
 8017552:	f7f3 fc2d 	bl	800adb0 <lwip_htons>
 8017556:	4603      	mov	r3, r0
 8017558:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801755c:	2b00      	cmp	r3, #0
 801755e:	d006      	beq.n	801756e <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8017560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017562:	3308      	adds	r3, #8
 8017564:	2214      	movs	r2, #20
 8017566:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8017568:	4618      	mov	r0, r3
 801756a:	f000 fe80 	bl	801826e <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801756e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017570:	88db      	ldrh	r3, [r3, #6]
 8017572:	b29b      	uxth	r3, r3
 8017574:	f003 0320 	and.w	r3, r3, #32
 8017578:	2b00      	cmp	r3, #0
 801757a:	bf0c      	ite	eq
 801757c:	2301      	moveq	r3, #1
 801757e:	2300      	movne	r3, #0
 8017580:	b2db      	uxtb	r3, r3
 8017582:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8017584:	69fb      	ldr	r3, [r7, #28]
 8017586:	2b00      	cmp	r3, #0
 8017588:	d00e      	beq.n	80175a8 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801758a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801758c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801758e:	4413      	add	r3, r2
 8017590:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8017592:	8b7a      	ldrh	r2, [r7, #26]
 8017594:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8017596:	429a      	cmp	r2, r3
 8017598:	f0c0 80a0 	bcc.w	80176dc <ip4_reass+0x2ac>
 801759c:	8b7b      	ldrh	r3, [r7, #26]
 801759e:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 80175a2:	4293      	cmp	r3, r2
 80175a4:	f200 809a 	bhi.w	80176dc <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 80175a8:	69fa      	ldr	r2, [r7, #28]
 80175aa:	6879      	ldr	r1, [r7, #4]
 80175ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80175ae:	f7ff fdd5 	bl	801715c <ip_reass_chain_frag_into_datagram_and_validate>
 80175b2:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 80175b4:	697b      	ldr	r3, [r7, #20]
 80175b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80175ba:	f000 809b 	beq.w	80176f4 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 80175be:	4b48      	ldr	r3, [pc, #288]	; (80176e0 <ip4_reass+0x2b0>)
 80175c0:	881a      	ldrh	r2, [r3, #0]
 80175c2:	8c3b      	ldrh	r3, [r7, #32]
 80175c4:	4413      	add	r3, r2
 80175c6:	b29a      	uxth	r2, r3
 80175c8:	4b45      	ldr	r3, [pc, #276]	; (80176e0 <ip4_reass+0x2b0>)
 80175ca:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 80175cc:	69fb      	ldr	r3, [r7, #28]
 80175ce:	2b00      	cmp	r3, #0
 80175d0:	d00d      	beq.n	80175ee <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 80175d2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80175d4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80175d6:	4413      	add	r3, r2
 80175d8:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 80175da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80175dc:	8a7a      	ldrh	r2, [r7, #18]
 80175de:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80175e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80175e2:	7f9b      	ldrb	r3, [r3, #30]
 80175e4:	f043 0301 	orr.w	r3, r3, #1
 80175e8:	b2da      	uxtb	r2, r3
 80175ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80175ec:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 80175ee:	697b      	ldr	r3, [r7, #20]
 80175f0:	2b01      	cmp	r3, #1
 80175f2:	d171      	bne.n	80176d8 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 80175f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80175f6:	8b9b      	ldrh	r3, [r3, #28]
 80175f8:	3314      	adds	r3, #20
 80175fa:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 80175fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80175fe:	685b      	ldr	r3, [r3, #4]
 8017600:	685b      	ldr	r3, [r3, #4]
 8017602:	681b      	ldr	r3, [r3, #0]
 8017604:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8017606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017608:	685b      	ldr	r3, [r3, #4]
 801760a:	685b      	ldr	r3, [r3, #4]
 801760c:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801760e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017610:	3308      	adds	r3, #8
 8017612:	2214      	movs	r2, #20
 8017614:	4619      	mov	r1, r3
 8017616:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017618:	f000 fe29 	bl	801826e <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 801761c:	8a3b      	ldrh	r3, [r7, #16]
 801761e:	4618      	mov	r0, r3
 8017620:	f7f3 fbc6 	bl	800adb0 <lwip_htons>
 8017624:	4603      	mov	r3, r0
 8017626:	461a      	mov	r2, r3
 8017628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801762a:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 801762c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801762e:	2200      	movs	r2, #0
 8017630:	719a      	strb	r2, [r3, #6]
 8017632:	2200      	movs	r2, #0
 8017634:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8017636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017638:	2200      	movs	r2, #0
 801763a:	729a      	strb	r2, [r3, #10]
 801763c:	2200      	movs	r2, #0
 801763e:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8017640:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017642:	685b      	ldr	r3, [r3, #4]
 8017644:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8017646:	e00d      	b.n	8017664 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8017648:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801764a:	685b      	ldr	r3, [r3, #4]
 801764c:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801764e:	2114      	movs	r1, #20
 8017650:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8017652:	f7f4 ff5b 	bl	800c50c <pbuf_remove_header>
      pbuf_cat(p, r);
 8017656:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8017658:	6878      	ldr	r0, [r7, #4]
 801765a:	f7f5 f8ab 	bl	800c7b4 <pbuf_cat>
      r = iprh->next_pbuf;
 801765e:	68fb      	ldr	r3, [r7, #12]
 8017660:	681b      	ldr	r3, [r3, #0]
 8017662:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8017664:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017666:	2b00      	cmp	r3, #0
 8017668:	d1ee      	bne.n	8017648 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801766a:	4b1e      	ldr	r3, [pc, #120]	; (80176e4 <ip4_reass+0x2b4>)
 801766c:	681b      	ldr	r3, [r3, #0]
 801766e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017670:	429a      	cmp	r2, r3
 8017672:	d102      	bne.n	801767a <ip4_reass+0x24a>
      ipr_prev = NULL;
 8017674:	2300      	movs	r3, #0
 8017676:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017678:	e010      	b.n	801769c <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801767a:	4b1a      	ldr	r3, [pc, #104]	; (80176e4 <ip4_reass+0x2b4>)
 801767c:	681b      	ldr	r3, [r3, #0]
 801767e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017680:	e007      	b.n	8017692 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8017682:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017684:	681b      	ldr	r3, [r3, #0]
 8017686:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017688:	429a      	cmp	r2, r3
 801768a:	d006      	beq.n	801769a <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801768c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801768e:	681b      	ldr	r3, [r3, #0]
 8017690:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017694:	2b00      	cmp	r3, #0
 8017696:	d1f4      	bne.n	8017682 <ip4_reass+0x252>
 8017698:	e000      	b.n	801769c <ip4_reass+0x26c>
          break;
 801769a:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 801769c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801769e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80176a0:	f7ff fd2e 	bl	8017100 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 80176a4:	6878      	ldr	r0, [r7, #4]
 80176a6:	f7f5 f845 	bl	800c734 <pbuf_clen>
 80176aa:	4603      	mov	r3, r0
 80176ac:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 80176ae:	4b0c      	ldr	r3, [pc, #48]	; (80176e0 <ip4_reass+0x2b0>)
 80176b0:	881b      	ldrh	r3, [r3, #0]
 80176b2:	8c3a      	ldrh	r2, [r7, #32]
 80176b4:	429a      	cmp	r2, r3
 80176b6:	d906      	bls.n	80176c6 <ip4_reass+0x296>
 80176b8:	4b0b      	ldr	r3, [pc, #44]	; (80176e8 <ip4_reass+0x2b8>)
 80176ba:	f240 229b 	movw	r2, #667	; 0x29b
 80176be:	490b      	ldr	r1, [pc, #44]	; (80176ec <ip4_reass+0x2bc>)
 80176c0:	480b      	ldr	r0, [pc, #44]	; (80176f0 <ip4_reass+0x2c0>)
 80176c2:	f000 fe7f 	bl	80183c4 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 80176c6:	4b06      	ldr	r3, [pc, #24]	; (80176e0 <ip4_reass+0x2b0>)
 80176c8:	881a      	ldrh	r2, [r3, #0]
 80176ca:	8c3b      	ldrh	r3, [r7, #32]
 80176cc:	1ad3      	subs	r3, r2, r3
 80176ce:	b29a      	uxth	r2, r3
 80176d0:	4b03      	ldr	r3, [pc, #12]	; (80176e0 <ip4_reass+0x2b0>)
 80176d2:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 80176d4:	687b      	ldr	r3, [r7, #4]
 80176d6:	e038      	b.n	801774a <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 80176d8:	2300      	movs	r3, #0
 80176da:	e036      	b.n	801774a <ip4_reass+0x31a>
      goto nullreturn_ipr;
 80176dc:	bf00      	nop
 80176de:	e00a      	b.n	80176f6 <ip4_reass+0x2c6>
 80176e0:	20010f04 	.word	0x20010f04
 80176e4:	20010f00 	.word	0x20010f00
 80176e8:	0801cb24 	.word	0x0801cb24
 80176ec:	0801cc94 	.word	0x0801cc94
 80176f0:	0801cb6c 	.word	0x0801cb6c
    goto nullreturn_ipr;
 80176f4:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 80176f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80176f8:	2b00      	cmp	r3, #0
 80176fa:	d106      	bne.n	801770a <ip4_reass+0x2da>
 80176fc:	4b15      	ldr	r3, [pc, #84]	; (8017754 <ip4_reass+0x324>)
 80176fe:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8017702:	4915      	ldr	r1, [pc, #84]	; (8017758 <ip4_reass+0x328>)
 8017704:	4815      	ldr	r0, [pc, #84]	; (801775c <ip4_reass+0x32c>)
 8017706:	f000 fe5d 	bl	80183c4 <iprintf>
  if (ipr->p == NULL) {
 801770a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801770c:	685b      	ldr	r3, [r3, #4]
 801770e:	2b00      	cmp	r3, #0
 8017710:	d116      	bne.n	8017740 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8017712:	4b13      	ldr	r3, [pc, #76]	; (8017760 <ip4_reass+0x330>)
 8017714:	681b      	ldr	r3, [r3, #0]
 8017716:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017718:	429a      	cmp	r2, r3
 801771a:	d006      	beq.n	801772a <ip4_reass+0x2fa>
 801771c:	4b0d      	ldr	r3, [pc, #52]	; (8017754 <ip4_reass+0x324>)
 801771e:	f240 22ab 	movw	r2, #683	; 0x2ab
 8017722:	4910      	ldr	r1, [pc, #64]	; (8017764 <ip4_reass+0x334>)
 8017724:	480d      	ldr	r0, [pc, #52]	; (801775c <ip4_reass+0x32c>)
 8017726:	f000 fe4d 	bl	80183c4 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801772a:	2100      	movs	r1, #0
 801772c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801772e:	f7ff fce7 	bl	8017100 <ip_reass_dequeue_datagram>
 8017732:	e006      	b.n	8017742 <ip4_reass+0x312>
    goto nullreturn;
 8017734:	bf00      	nop
 8017736:	e004      	b.n	8017742 <ip4_reass+0x312>
    goto nullreturn;
 8017738:	bf00      	nop
 801773a:	e002      	b.n	8017742 <ip4_reass+0x312>
      goto nullreturn;
 801773c:	bf00      	nop
 801773e:	e000      	b.n	8017742 <ip4_reass+0x312>
  }

nullreturn:
 8017740:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8017742:	6878      	ldr	r0, [r7, #4]
 8017744:	f7f4 ff68 	bl	800c618 <pbuf_free>
  return NULL;
 8017748:	2300      	movs	r3, #0
}
 801774a:	4618      	mov	r0, r3
 801774c:	3738      	adds	r7, #56	; 0x38
 801774e:	46bd      	mov	sp, r7
 8017750:	bd80      	pop	{r7, pc}
 8017752:	bf00      	nop
 8017754:	0801cb24 	.word	0x0801cb24
 8017758:	0801ccb0 	.word	0x0801ccb0
 801775c:	0801cb6c 	.word	0x0801cb6c
 8017760:	20010f00 	.word	0x20010f00
 8017764:	0801ccbc 	.word	0x0801ccbc

08017768 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8017768:	b580      	push	{r7, lr}
 801776a:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 801776c:	2005      	movs	r0, #5
 801776e:	f7f4 f82d 	bl	800b7cc <memp_malloc>
 8017772:	4603      	mov	r3, r0
}
 8017774:	4618      	mov	r0, r3
 8017776:	bd80      	pop	{r7, pc}

08017778 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8017778:	b580      	push	{r7, lr}
 801777a:	b082      	sub	sp, #8
 801777c:	af00      	add	r7, sp, #0
 801777e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8017780:	687b      	ldr	r3, [r7, #4]
 8017782:	2b00      	cmp	r3, #0
 8017784:	d106      	bne.n	8017794 <ip_frag_free_pbuf_custom_ref+0x1c>
 8017786:	4b07      	ldr	r3, [pc, #28]	; (80177a4 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8017788:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 801778c:	4906      	ldr	r1, [pc, #24]	; (80177a8 <ip_frag_free_pbuf_custom_ref+0x30>)
 801778e:	4807      	ldr	r0, [pc, #28]	; (80177ac <ip_frag_free_pbuf_custom_ref+0x34>)
 8017790:	f000 fe18 	bl	80183c4 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8017794:	6879      	ldr	r1, [r7, #4]
 8017796:	2005      	movs	r0, #5
 8017798:	f7f4 f88e 	bl	800b8b8 <memp_free>
}
 801779c:	bf00      	nop
 801779e:	3708      	adds	r7, #8
 80177a0:	46bd      	mov	sp, r7
 80177a2:	bd80      	pop	{r7, pc}
 80177a4:	0801cb24 	.word	0x0801cb24
 80177a8:	0801ccdc 	.word	0x0801ccdc
 80177ac:	0801cb6c 	.word	0x0801cb6c

080177b0 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 80177b0:	b580      	push	{r7, lr}
 80177b2:	b084      	sub	sp, #16
 80177b4:	af00      	add	r7, sp, #0
 80177b6:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 80177b8:	687b      	ldr	r3, [r7, #4]
 80177ba:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 80177bc:	68fb      	ldr	r3, [r7, #12]
 80177be:	2b00      	cmp	r3, #0
 80177c0:	d106      	bne.n	80177d0 <ipfrag_free_pbuf_custom+0x20>
 80177c2:	4b11      	ldr	r3, [pc, #68]	; (8017808 <ipfrag_free_pbuf_custom+0x58>)
 80177c4:	f240 22ce 	movw	r2, #718	; 0x2ce
 80177c8:	4910      	ldr	r1, [pc, #64]	; (801780c <ipfrag_free_pbuf_custom+0x5c>)
 80177ca:	4811      	ldr	r0, [pc, #68]	; (8017810 <ipfrag_free_pbuf_custom+0x60>)
 80177cc:	f000 fdfa 	bl	80183c4 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 80177d0:	68fa      	ldr	r2, [r7, #12]
 80177d2:	687b      	ldr	r3, [r7, #4]
 80177d4:	429a      	cmp	r2, r3
 80177d6:	d006      	beq.n	80177e6 <ipfrag_free_pbuf_custom+0x36>
 80177d8:	4b0b      	ldr	r3, [pc, #44]	; (8017808 <ipfrag_free_pbuf_custom+0x58>)
 80177da:	f240 22cf 	movw	r2, #719	; 0x2cf
 80177de:	490d      	ldr	r1, [pc, #52]	; (8017814 <ipfrag_free_pbuf_custom+0x64>)
 80177e0:	480b      	ldr	r0, [pc, #44]	; (8017810 <ipfrag_free_pbuf_custom+0x60>)
 80177e2:	f000 fdef 	bl	80183c4 <iprintf>
  if (pcr->original != NULL) {
 80177e6:	68fb      	ldr	r3, [r7, #12]
 80177e8:	695b      	ldr	r3, [r3, #20]
 80177ea:	2b00      	cmp	r3, #0
 80177ec:	d004      	beq.n	80177f8 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 80177ee:	68fb      	ldr	r3, [r7, #12]
 80177f0:	695b      	ldr	r3, [r3, #20]
 80177f2:	4618      	mov	r0, r3
 80177f4:	f7f4 ff10 	bl	800c618 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 80177f8:	68f8      	ldr	r0, [r7, #12]
 80177fa:	f7ff ffbd 	bl	8017778 <ip_frag_free_pbuf_custom_ref>
}
 80177fe:	bf00      	nop
 8017800:	3710      	adds	r7, #16
 8017802:	46bd      	mov	sp, r7
 8017804:	bd80      	pop	{r7, pc}
 8017806:	bf00      	nop
 8017808:	0801cb24 	.word	0x0801cb24
 801780c:	0801cce8 	.word	0x0801cce8
 8017810:	0801cb6c 	.word	0x0801cb6c
 8017814:	0801ccf4 	.word	0x0801ccf4

08017818 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8017818:	b580      	push	{r7, lr}
 801781a:	b094      	sub	sp, #80	; 0x50
 801781c:	af02      	add	r7, sp, #8
 801781e:	60f8      	str	r0, [r7, #12]
 8017820:	60b9      	str	r1, [r7, #8]
 8017822:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8017824:	2300      	movs	r3, #0
 8017826:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801782a:	68bb      	ldr	r3, [r7, #8]
 801782c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801782e:	3b14      	subs	r3, #20
 8017830:	2b00      	cmp	r3, #0
 8017832:	da00      	bge.n	8017836 <ip4_frag+0x1e>
 8017834:	3307      	adds	r3, #7
 8017836:	10db      	asrs	r3, r3, #3
 8017838:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801783a:	2314      	movs	r3, #20
 801783c:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801783e:	68fb      	ldr	r3, [r7, #12]
 8017840:	685b      	ldr	r3, [r3, #4]
 8017842:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8017844:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017846:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8017848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801784a:	781b      	ldrb	r3, [r3, #0]
 801784c:	f003 030f 	and.w	r3, r3, #15
 8017850:	b2db      	uxtb	r3, r3
 8017852:	009b      	lsls	r3, r3, #2
 8017854:	b2db      	uxtb	r3, r3
 8017856:	2b14      	cmp	r3, #20
 8017858:	d002      	beq.n	8017860 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801785a:	f06f 0305 	mvn.w	r3, #5
 801785e:	e110      	b.n	8017a82 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8017860:	68fb      	ldr	r3, [r7, #12]
 8017862:	895b      	ldrh	r3, [r3, #10]
 8017864:	2b13      	cmp	r3, #19
 8017866:	d809      	bhi.n	801787c <ip4_frag+0x64>
 8017868:	4b88      	ldr	r3, [pc, #544]	; (8017a8c <ip4_frag+0x274>)
 801786a:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 801786e:	4988      	ldr	r1, [pc, #544]	; (8017a90 <ip4_frag+0x278>)
 8017870:	4888      	ldr	r0, [pc, #544]	; (8017a94 <ip4_frag+0x27c>)
 8017872:	f000 fda7 	bl	80183c4 <iprintf>
 8017876:	f06f 0305 	mvn.w	r3, #5
 801787a:	e102      	b.n	8017a82 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 801787c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801787e:	88db      	ldrh	r3, [r3, #6]
 8017880:	b29b      	uxth	r3, r3
 8017882:	4618      	mov	r0, r3
 8017884:	f7f3 fa94 	bl	800adb0 <lwip_htons>
 8017888:	4603      	mov	r3, r0
 801788a:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 801788c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801788e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8017892:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8017896:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8017898:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801789c:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801789e:	68fb      	ldr	r3, [r7, #12]
 80178a0:	891b      	ldrh	r3, [r3, #8]
 80178a2:	3b14      	subs	r3, #20
 80178a4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 80178a8:	e0e1      	b.n	8017a6e <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 80178aa:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80178ac:	00db      	lsls	r3, r3, #3
 80178ae:	b29b      	uxth	r3, r3
 80178b0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80178b4:	4293      	cmp	r3, r2
 80178b6:	bf28      	it	cs
 80178b8:	4613      	movcs	r3, r2
 80178ba:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 80178bc:	f44f 7220 	mov.w	r2, #640	; 0x280
 80178c0:	2114      	movs	r1, #20
 80178c2:	200e      	movs	r0, #14
 80178c4:	f7f4 fbc4 	bl	800c050 <pbuf_alloc>
 80178c8:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 80178ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80178cc:	2b00      	cmp	r3, #0
 80178ce:	f000 80d5 	beq.w	8017a7c <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 80178d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80178d4:	895b      	ldrh	r3, [r3, #10]
 80178d6:	2b13      	cmp	r3, #19
 80178d8:	d806      	bhi.n	80178e8 <ip4_frag+0xd0>
 80178da:	4b6c      	ldr	r3, [pc, #432]	; (8017a8c <ip4_frag+0x274>)
 80178dc:	f44f 7249 	mov.w	r2, #804	; 0x324
 80178e0:	496d      	ldr	r1, [pc, #436]	; (8017a98 <ip4_frag+0x280>)
 80178e2:	486c      	ldr	r0, [pc, #432]	; (8017a94 <ip4_frag+0x27c>)
 80178e4:	f000 fd6e 	bl	80183c4 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 80178e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80178ea:	685b      	ldr	r3, [r3, #4]
 80178ec:	2214      	movs	r2, #20
 80178ee:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80178f0:	4618      	mov	r0, r3
 80178f2:	f000 fcbc 	bl	801826e <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 80178f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80178f8:	685b      	ldr	r3, [r3, #4]
 80178fa:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 80178fc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80178fe:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8017902:	e064      	b.n	80179ce <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8017904:	68fb      	ldr	r3, [r7, #12]
 8017906:	895a      	ldrh	r2, [r3, #10]
 8017908:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801790a:	1ad3      	subs	r3, r2, r3
 801790c:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801790e:	68fb      	ldr	r3, [r7, #12]
 8017910:	895b      	ldrh	r3, [r3, #10]
 8017912:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8017914:	429a      	cmp	r2, r3
 8017916:	d906      	bls.n	8017926 <ip4_frag+0x10e>
 8017918:	4b5c      	ldr	r3, [pc, #368]	; (8017a8c <ip4_frag+0x274>)
 801791a:	f240 322d 	movw	r2, #813	; 0x32d
 801791e:	495f      	ldr	r1, [pc, #380]	; (8017a9c <ip4_frag+0x284>)
 8017920:	485c      	ldr	r0, [pc, #368]	; (8017a94 <ip4_frag+0x27c>)
 8017922:	f000 fd4f 	bl	80183c4 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8017926:	8bfa      	ldrh	r2, [r7, #30]
 8017928:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801792c:	4293      	cmp	r3, r2
 801792e:	bf28      	it	cs
 8017930:	4613      	movcs	r3, r2
 8017932:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8017936:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801793a:	2b00      	cmp	r3, #0
 801793c:	d105      	bne.n	801794a <ip4_frag+0x132>
        poff = 0;
 801793e:	2300      	movs	r3, #0
 8017940:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8017942:	68fb      	ldr	r3, [r7, #12]
 8017944:	681b      	ldr	r3, [r3, #0]
 8017946:	60fb      	str	r3, [r7, #12]
        continue;
 8017948:	e041      	b.n	80179ce <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801794a:	f7ff ff0d 	bl	8017768 <ip_frag_alloc_pbuf_custom_ref>
 801794e:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8017950:	69bb      	ldr	r3, [r7, #24]
 8017952:	2b00      	cmp	r3, #0
 8017954:	d103      	bne.n	801795e <ip4_frag+0x146>
        pbuf_free(rambuf);
 8017956:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017958:	f7f4 fe5e 	bl	800c618 <pbuf_free>
        goto memerr;
 801795c:	e08f      	b.n	8017a7e <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801795e:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8017960:	68fb      	ldr	r3, [r7, #12]
 8017962:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8017964:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8017966:	4413      	add	r3, r2
 8017968:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 801796c:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8017970:	9201      	str	r2, [sp, #4]
 8017972:	9300      	str	r3, [sp, #0]
 8017974:	4603      	mov	r3, r0
 8017976:	2241      	movs	r2, #65	; 0x41
 8017978:	2000      	movs	r0, #0
 801797a:	f7f4 fc93 	bl	800c2a4 <pbuf_alloced_custom>
 801797e:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8017980:	697b      	ldr	r3, [r7, #20]
 8017982:	2b00      	cmp	r3, #0
 8017984:	d106      	bne.n	8017994 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8017986:	69b8      	ldr	r0, [r7, #24]
 8017988:	f7ff fef6 	bl	8017778 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 801798c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801798e:	f7f4 fe43 	bl	800c618 <pbuf_free>
        goto memerr;
 8017992:	e074      	b.n	8017a7e <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8017994:	68f8      	ldr	r0, [r7, #12]
 8017996:	f7f4 fee5 	bl	800c764 <pbuf_ref>
      pcr->original = p;
 801799a:	69bb      	ldr	r3, [r7, #24]
 801799c:	68fa      	ldr	r2, [r7, #12]
 801799e:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 80179a0:	69bb      	ldr	r3, [r7, #24]
 80179a2:	4a3f      	ldr	r2, [pc, #252]	; (8017aa0 <ip4_frag+0x288>)
 80179a4:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 80179a6:	6979      	ldr	r1, [r7, #20]
 80179a8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80179aa:	f7f4 ff03 	bl	800c7b4 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 80179ae:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 80179b2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80179b6:	1ad3      	subs	r3, r2, r3
 80179b8:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 80179bc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80179c0:	2b00      	cmp	r3, #0
 80179c2:	d004      	beq.n	80179ce <ip4_frag+0x1b6>
        poff = 0;
 80179c4:	2300      	movs	r3, #0
 80179c6:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 80179c8:	68fb      	ldr	r3, [r7, #12]
 80179ca:	681b      	ldr	r3, [r3, #0]
 80179cc:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 80179ce:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80179d2:	2b00      	cmp	r3, #0
 80179d4:	d196      	bne.n	8017904 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 80179d6:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80179d8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80179dc:	4413      	add	r3, r2
 80179de:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 80179e0:	68bb      	ldr	r3, [r7, #8]
 80179e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80179e4:	f1a3 0213 	sub.w	r2, r3, #19
 80179e8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80179ec:	429a      	cmp	r2, r3
 80179ee:	bfcc      	ite	gt
 80179f0:	2301      	movgt	r3, #1
 80179f2:	2300      	movle	r3, #0
 80179f4:	b2db      	uxtb	r3, r3
 80179f6:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 80179f8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80179fc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8017a00:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8017a02:	6a3b      	ldr	r3, [r7, #32]
 8017a04:	2b00      	cmp	r3, #0
 8017a06:	d002      	beq.n	8017a0e <ip4_frag+0x1f6>
 8017a08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017a0a:	2b00      	cmp	r3, #0
 8017a0c:	d003      	beq.n	8017a16 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8017a0e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8017a10:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8017a14:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8017a16:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8017a18:	4618      	mov	r0, r3
 8017a1a:	f7f3 f9c9 	bl	800adb0 <lwip_htons>
 8017a1e:	4603      	mov	r3, r0
 8017a20:	461a      	mov	r2, r3
 8017a22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017a24:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8017a26:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8017a28:	3314      	adds	r3, #20
 8017a2a:	b29b      	uxth	r3, r3
 8017a2c:	4618      	mov	r0, r3
 8017a2e:	f7f3 f9bf 	bl	800adb0 <lwip_htons>
 8017a32:	4603      	mov	r3, r0
 8017a34:	461a      	mov	r2, r3
 8017a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017a38:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8017a3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017a3c:	2200      	movs	r2, #0
 8017a3e:	729a      	strb	r2, [r3, #10]
 8017a40:	2200      	movs	r2, #0
 8017a42:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8017a44:	68bb      	ldr	r3, [r7, #8]
 8017a46:	695b      	ldr	r3, [r3, #20]
 8017a48:	687a      	ldr	r2, [r7, #4]
 8017a4a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8017a4c:	68b8      	ldr	r0, [r7, #8]
 8017a4e:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8017a50:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017a52:	f7f4 fde1 	bl	800c618 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8017a56:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8017a5a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8017a5c:	1ad3      	subs	r3, r2, r3
 8017a5e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8017a62:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8017a66:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8017a68:	4413      	add	r3, r2
 8017a6a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8017a6e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8017a72:	2b00      	cmp	r3, #0
 8017a74:	f47f af19 	bne.w	80178aa <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8017a78:	2300      	movs	r3, #0
 8017a7a:	e002      	b.n	8017a82 <ip4_frag+0x26a>
      goto memerr;
 8017a7c:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8017a7e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8017a82:	4618      	mov	r0, r3
 8017a84:	3748      	adds	r7, #72	; 0x48
 8017a86:	46bd      	mov	sp, r7
 8017a88:	bd80      	pop	{r7, pc}
 8017a8a:	bf00      	nop
 8017a8c:	0801cb24 	.word	0x0801cb24
 8017a90:	0801cd00 	.word	0x0801cd00
 8017a94:	0801cb6c 	.word	0x0801cb6c
 8017a98:	0801cd1c 	.word	0x0801cd1c
 8017a9c:	0801cd3c 	.word	0x0801cd3c
 8017aa0:	080177b1 	.word	0x080177b1

08017aa4 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8017aa4:	b580      	push	{r7, lr}
 8017aa6:	b086      	sub	sp, #24
 8017aa8:	af00      	add	r7, sp, #0
 8017aaa:	6078      	str	r0, [r7, #4]
 8017aac:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8017aae:	230e      	movs	r3, #14
 8017ab0:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8017ab2:	687b      	ldr	r3, [r7, #4]
 8017ab4:	895b      	ldrh	r3, [r3, #10]
 8017ab6:	2b0e      	cmp	r3, #14
 8017ab8:	d96e      	bls.n	8017b98 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8017aba:	687b      	ldr	r3, [r7, #4]
 8017abc:	7bdb      	ldrb	r3, [r3, #15]
 8017abe:	2b00      	cmp	r3, #0
 8017ac0:	d106      	bne.n	8017ad0 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8017ac2:	683b      	ldr	r3, [r7, #0]
 8017ac4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8017ac8:	3301      	adds	r3, #1
 8017aca:	b2da      	uxtb	r2, r3
 8017acc:	687b      	ldr	r3, [r7, #4]
 8017ace:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8017ad0:	687b      	ldr	r3, [r7, #4]
 8017ad2:	685b      	ldr	r3, [r3, #4]
 8017ad4:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8017ad6:	693b      	ldr	r3, [r7, #16]
 8017ad8:	7b1a      	ldrb	r2, [r3, #12]
 8017ada:	7b5b      	ldrb	r3, [r3, #13]
 8017adc:	021b      	lsls	r3, r3, #8
 8017ade:	4313      	orrs	r3, r2
 8017ae0:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8017ae2:	693b      	ldr	r3, [r7, #16]
 8017ae4:	781b      	ldrb	r3, [r3, #0]
 8017ae6:	f003 0301 	and.w	r3, r3, #1
 8017aea:	2b00      	cmp	r3, #0
 8017aec:	d023      	beq.n	8017b36 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8017aee:	693b      	ldr	r3, [r7, #16]
 8017af0:	781b      	ldrb	r3, [r3, #0]
 8017af2:	2b01      	cmp	r3, #1
 8017af4:	d10f      	bne.n	8017b16 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8017af6:	693b      	ldr	r3, [r7, #16]
 8017af8:	785b      	ldrb	r3, [r3, #1]
 8017afa:	2b00      	cmp	r3, #0
 8017afc:	d11b      	bne.n	8017b36 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8017afe:	693b      	ldr	r3, [r7, #16]
 8017b00:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8017b02:	2b5e      	cmp	r3, #94	; 0x5e
 8017b04:	d117      	bne.n	8017b36 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8017b06:	687b      	ldr	r3, [r7, #4]
 8017b08:	7b5b      	ldrb	r3, [r3, #13]
 8017b0a:	f043 0310 	orr.w	r3, r3, #16
 8017b0e:	b2da      	uxtb	r2, r3
 8017b10:	687b      	ldr	r3, [r7, #4]
 8017b12:	735a      	strb	r2, [r3, #13]
 8017b14:	e00f      	b.n	8017b36 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8017b16:	693b      	ldr	r3, [r7, #16]
 8017b18:	2206      	movs	r2, #6
 8017b1a:	4928      	ldr	r1, [pc, #160]	; (8017bbc <ethernet_input+0x118>)
 8017b1c:	4618      	mov	r0, r3
 8017b1e:	f000 fb96 	bl	801824e <memcmp>
 8017b22:	4603      	mov	r3, r0
 8017b24:	2b00      	cmp	r3, #0
 8017b26:	d106      	bne.n	8017b36 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8017b28:	687b      	ldr	r3, [r7, #4]
 8017b2a:	7b5b      	ldrb	r3, [r3, #13]
 8017b2c:	f043 0308 	orr.w	r3, r3, #8
 8017b30:	b2da      	uxtb	r2, r3
 8017b32:	687b      	ldr	r3, [r7, #4]
 8017b34:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8017b36:	89fb      	ldrh	r3, [r7, #14]
 8017b38:	2b08      	cmp	r3, #8
 8017b3a:	d003      	beq.n	8017b44 <ethernet_input+0xa0>
 8017b3c:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8017b40:	d014      	beq.n	8017b6c <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8017b42:	e032      	b.n	8017baa <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8017b44:	683b      	ldr	r3, [r7, #0]
 8017b46:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8017b4a:	f003 0308 	and.w	r3, r3, #8
 8017b4e:	2b00      	cmp	r3, #0
 8017b50:	d024      	beq.n	8017b9c <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8017b52:	8afb      	ldrh	r3, [r7, #22]
 8017b54:	4619      	mov	r1, r3
 8017b56:	6878      	ldr	r0, [r7, #4]
 8017b58:	f7f4 fcd8 	bl	800c50c <pbuf_remove_header>
 8017b5c:	4603      	mov	r3, r0
 8017b5e:	2b00      	cmp	r3, #0
 8017b60:	d11e      	bne.n	8017ba0 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8017b62:	6839      	ldr	r1, [r7, #0]
 8017b64:	6878      	ldr	r0, [r7, #4]
 8017b66:	f7fe ff03 	bl	8016970 <ip4_input>
      break;
 8017b6a:	e013      	b.n	8017b94 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8017b6c:	683b      	ldr	r3, [r7, #0]
 8017b6e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8017b72:	f003 0308 	and.w	r3, r3, #8
 8017b76:	2b00      	cmp	r3, #0
 8017b78:	d014      	beq.n	8017ba4 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8017b7a:	8afb      	ldrh	r3, [r7, #22]
 8017b7c:	4619      	mov	r1, r3
 8017b7e:	6878      	ldr	r0, [r7, #4]
 8017b80:	f7f4 fcc4 	bl	800c50c <pbuf_remove_header>
 8017b84:	4603      	mov	r3, r0
 8017b86:	2b00      	cmp	r3, #0
 8017b88:	d10e      	bne.n	8017ba8 <ethernet_input+0x104>
        etharp_input(p, netif);
 8017b8a:	6839      	ldr	r1, [r7, #0]
 8017b8c:	6878      	ldr	r0, [r7, #4]
 8017b8e:	f7fe f89f 	bl	8015cd0 <etharp_input>
      break;
 8017b92:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8017b94:	2300      	movs	r3, #0
 8017b96:	e00c      	b.n	8017bb2 <ethernet_input+0x10e>
    goto free_and_return;
 8017b98:	bf00      	nop
 8017b9a:	e006      	b.n	8017baa <ethernet_input+0x106>
        goto free_and_return;
 8017b9c:	bf00      	nop
 8017b9e:	e004      	b.n	8017baa <ethernet_input+0x106>
        goto free_and_return;
 8017ba0:	bf00      	nop
 8017ba2:	e002      	b.n	8017baa <ethernet_input+0x106>
        goto free_and_return;
 8017ba4:	bf00      	nop
 8017ba6:	e000      	b.n	8017baa <ethernet_input+0x106>
        goto free_and_return;
 8017ba8:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8017baa:	6878      	ldr	r0, [r7, #4]
 8017bac:	f7f4 fd34 	bl	800c618 <pbuf_free>
  return ERR_OK;
 8017bb0:	2300      	movs	r3, #0
}
 8017bb2:	4618      	mov	r0, r3
 8017bb4:	3718      	adds	r7, #24
 8017bb6:	46bd      	mov	sp, r7
 8017bb8:	bd80      	pop	{r7, pc}
 8017bba:	bf00      	nop
 8017bbc:	08027068 	.word	0x08027068

08017bc0 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8017bc0:	b580      	push	{r7, lr}
 8017bc2:	b086      	sub	sp, #24
 8017bc4:	af00      	add	r7, sp, #0
 8017bc6:	60f8      	str	r0, [r7, #12]
 8017bc8:	60b9      	str	r1, [r7, #8]
 8017bca:	607a      	str	r2, [r7, #4]
 8017bcc:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8017bce:	8c3b      	ldrh	r3, [r7, #32]
 8017bd0:	4618      	mov	r0, r3
 8017bd2:	f7f3 f8ed 	bl	800adb0 <lwip_htons>
 8017bd6:	4603      	mov	r3, r0
 8017bd8:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8017bda:	210e      	movs	r1, #14
 8017bdc:	68b8      	ldr	r0, [r7, #8]
 8017bde:	f7f4 fc85 	bl	800c4ec <pbuf_add_header>
 8017be2:	4603      	mov	r3, r0
 8017be4:	2b00      	cmp	r3, #0
 8017be6:	d125      	bne.n	8017c34 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8017be8:	68bb      	ldr	r3, [r7, #8]
 8017bea:	685b      	ldr	r3, [r3, #4]
 8017bec:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8017bee:	693b      	ldr	r3, [r7, #16]
 8017bf0:	8afa      	ldrh	r2, [r7, #22]
 8017bf2:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8017bf4:	693b      	ldr	r3, [r7, #16]
 8017bf6:	2206      	movs	r2, #6
 8017bf8:	6839      	ldr	r1, [r7, #0]
 8017bfa:	4618      	mov	r0, r3
 8017bfc:	f000 fb37 	bl	801826e <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8017c00:	693b      	ldr	r3, [r7, #16]
 8017c02:	3306      	adds	r3, #6
 8017c04:	2206      	movs	r2, #6
 8017c06:	6879      	ldr	r1, [r7, #4]
 8017c08:	4618      	mov	r0, r3
 8017c0a:	f000 fb30 	bl	801826e <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8017c0e:	68fb      	ldr	r3, [r7, #12]
 8017c10:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8017c14:	2b06      	cmp	r3, #6
 8017c16:	d006      	beq.n	8017c26 <ethernet_output+0x66>
 8017c18:	4b0a      	ldr	r3, [pc, #40]	; (8017c44 <ethernet_output+0x84>)
 8017c1a:	f44f 7299 	mov.w	r2, #306	; 0x132
 8017c1e:	490a      	ldr	r1, [pc, #40]	; (8017c48 <ethernet_output+0x88>)
 8017c20:	480a      	ldr	r0, [pc, #40]	; (8017c4c <ethernet_output+0x8c>)
 8017c22:	f000 fbcf 	bl	80183c4 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8017c26:	68fb      	ldr	r3, [r7, #12]
 8017c28:	699b      	ldr	r3, [r3, #24]
 8017c2a:	68b9      	ldr	r1, [r7, #8]
 8017c2c:	68f8      	ldr	r0, [r7, #12]
 8017c2e:	4798      	blx	r3
 8017c30:	4603      	mov	r3, r0
 8017c32:	e002      	b.n	8017c3a <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8017c34:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8017c36:	f06f 0301 	mvn.w	r3, #1
}
 8017c3a:	4618      	mov	r0, r3
 8017c3c:	3718      	adds	r7, #24
 8017c3e:	46bd      	mov	sp, r7
 8017c40:	bd80      	pop	{r7, pc}
 8017c42:	bf00      	nop
 8017c44:	0801cd4c 	.word	0x0801cd4c
 8017c48:	0801cd84 	.word	0x0801cd84
 8017c4c:	0801cdb8 	.word	0x0801cdb8

08017c50 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8017c50:	b580      	push	{r7, lr}
 8017c52:	b086      	sub	sp, #24
 8017c54:	af00      	add	r7, sp, #0
 8017c56:	6078      	str	r0, [r7, #4]
 8017c58:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 8017c5a:	683b      	ldr	r3, [r7, #0]
 8017c5c:	60bb      	str	r3, [r7, #8]
 8017c5e:	2304      	movs	r3, #4
 8017c60:	60fb      	str	r3, [r7, #12]
 8017c62:	2300      	movs	r3, #0
 8017c64:	613b      	str	r3, [r7, #16]
 8017c66:	2300      	movs	r3, #0
 8017c68:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 8017c6a:	f107 0308 	add.w	r3, r7, #8
 8017c6e:	2100      	movs	r1, #0
 8017c70:	4618      	mov	r0, r3
 8017c72:	f7ed f982 	bl	8004f7a <osMessageCreate>
 8017c76:	4602      	mov	r2, r0
 8017c78:	687b      	ldr	r3, [r7, #4]
 8017c7a:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8017c7c:	687b      	ldr	r3, [r7, #4]
 8017c7e:	681b      	ldr	r3, [r3, #0]
 8017c80:	2b00      	cmp	r3, #0
 8017c82:	d102      	bne.n	8017c8a <sys_mbox_new+0x3a>
    return ERR_MEM;
 8017c84:	f04f 33ff 	mov.w	r3, #4294967295
 8017c88:	e000      	b.n	8017c8c <sys_mbox_new+0x3c>

  return ERR_OK;
 8017c8a:	2300      	movs	r3, #0
}
 8017c8c:	4618      	mov	r0, r3
 8017c8e:	3718      	adds	r7, #24
 8017c90:	46bd      	mov	sp, r7
 8017c92:	bd80      	pop	{r7, pc}

08017c94 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 8017c94:	b580      	push	{r7, lr}
 8017c96:	b082      	sub	sp, #8
 8017c98:	af00      	add	r7, sp, #0
 8017c9a:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
 8017c9c:	687b      	ldr	r3, [r7, #4]
 8017c9e:	681b      	ldr	r3, [r3, #0]
 8017ca0:	4618      	mov	r0, r3
 8017ca2:	f7ed fa47 	bl	8005134 <osMessageWaiting>
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
 8017ca6:	687b      	ldr	r3, [r7, #4]
 8017ca8:	681b      	ldr	r3, [r3, #0]
 8017caa:	4618      	mov	r0, r3
 8017cac:	f7ed fa58 	bl	8005160 <osMessageDelete>
  osMessageQueueDelete(*mbox);
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 8017cb0:	bf00      	nop
 8017cb2:	3708      	adds	r7, #8
 8017cb4:	46bd      	mov	sp, r7
 8017cb6:	bd80      	pop	{r7, pc}

08017cb8 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8017cb8:	b580      	push	{r7, lr}
 8017cba:	b084      	sub	sp, #16
 8017cbc:	af00      	add	r7, sp, #0
 8017cbe:	6078      	str	r0, [r7, #4]
 8017cc0:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 8017cc2:	687b      	ldr	r3, [r7, #4]
 8017cc4:	681b      	ldr	r3, [r3, #0]
 8017cc6:	6839      	ldr	r1, [r7, #0]
 8017cc8:	2200      	movs	r2, #0
 8017cca:	4618      	mov	r0, r3
 8017ccc:	f7ed f97e 	bl	8004fcc <osMessagePut>
 8017cd0:	4603      	mov	r3, r0
 8017cd2:	2b00      	cmp	r3, #0
 8017cd4:	d102      	bne.n	8017cdc <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 8017cd6:	2300      	movs	r3, #0
 8017cd8:	73fb      	strb	r3, [r7, #15]
 8017cda:	e001      	b.n	8017ce0 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8017cdc:	23ff      	movs	r3, #255	; 0xff
 8017cde:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8017ce0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8017ce4:	4618      	mov	r0, r3
 8017ce6:	3710      	adds	r7, #16
 8017ce8:	46bd      	mov	sp, r7
 8017cea:	bd80      	pop	{r7, pc}

08017cec <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8017cec:	b580      	push	{r7, lr}
 8017cee:	b08c      	sub	sp, #48	; 0x30
 8017cf0:	af00      	add	r7, sp, #0
 8017cf2:	61f8      	str	r0, [r7, #28]
 8017cf4:	61b9      	str	r1, [r7, #24]
 8017cf6:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 8017cf8:	f7ec ff6a 	bl	8004bd0 <osKernelSysTick>
 8017cfc:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8017cfe:	697b      	ldr	r3, [r7, #20]
 8017d00:	2b00      	cmp	r3, #0
 8017d02:	d017      	beq.n	8017d34 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 8017d04:	69fb      	ldr	r3, [r7, #28]
 8017d06:	6819      	ldr	r1, [r3, #0]
 8017d08:	f107 0320 	add.w	r3, r7, #32
 8017d0c:	697a      	ldr	r2, [r7, #20]
 8017d0e:	4618      	mov	r0, r3
 8017d10:	f7ed f99c 	bl	800504c <osMessageGet>

    if(event.status == osEventMessage)
 8017d14:	6a3b      	ldr	r3, [r7, #32]
 8017d16:	2b10      	cmp	r3, #16
 8017d18:	d109      	bne.n	8017d2e <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 8017d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017d1c:	461a      	mov	r2, r3
 8017d1e:	69bb      	ldr	r3, [r7, #24]
 8017d20:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 8017d22:	f7ec ff55 	bl	8004bd0 <osKernelSysTick>
 8017d26:	4602      	mov	r2, r0
 8017d28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017d2a:	1ad3      	subs	r3, r2, r3
 8017d2c:	e019      	b.n	8017d62 <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8017d2e:	f04f 33ff 	mov.w	r3, #4294967295
 8017d32:	e016      	b.n	8017d62 <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 8017d34:	69fb      	ldr	r3, [r7, #28]
 8017d36:	6819      	ldr	r1, [r3, #0]
 8017d38:	463b      	mov	r3, r7
 8017d3a:	f04f 32ff 	mov.w	r2, #4294967295
 8017d3e:	4618      	mov	r0, r3
 8017d40:	f7ed f984 	bl	800504c <osMessageGet>
 8017d44:	f107 0320 	add.w	r3, r7, #32
 8017d48:	463a      	mov	r2, r7
 8017d4a:	ca07      	ldmia	r2, {r0, r1, r2}
 8017d4c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 8017d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017d52:	461a      	mov	r2, r3
 8017d54:	69bb      	ldr	r3, [r7, #24]
 8017d56:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 8017d58:	f7ec ff3a 	bl	8004bd0 <osKernelSysTick>
 8017d5c:	4602      	mov	r2, r0
 8017d5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017d60:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8017d62:	4618      	mov	r0, r3
 8017d64:	3730      	adds	r7, #48	; 0x30
 8017d66:	46bd      	mov	sp, r7
 8017d68:	bd80      	pop	{r7, pc}

08017d6a <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 8017d6a:	b580      	push	{r7, lr}
 8017d6c:	b086      	sub	sp, #24
 8017d6e:	af00      	add	r7, sp, #0
 8017d70:	6078      	str	r0, [r7, #4]
 8017d72:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osEvent event;

  event = osMessageGet (*mbox, 0);
 8017d74:	687b      	ldr	r3, [r7, #4]
 8017d76:	6819      	ldr	r1, [r3, #0]
 8017d78:	f107 030c 	add.w	r3, r7, #12
 8017d7c:	2200      	movs	r2, #0
 8017d7e:	4618      	mov	r0, r3
 8017d80:	f7ed f964 	bl	800504c <osMessageGet>

  if(event.status == osEventMessage)
 8017d84:	68fb      	ldr	r3, [r7, #12]
 8017d86:	2b10      	cmp	r3, #16
 8017d88:	d105      	bne.n	8017d96 <sys_arch_mbox_tryfetch+0x2c>
  {
    *msg = (void *)event.value.v;
 8017d8a:	693b      	ldr	r3, [r7, #16]
 8017d8c:	461a      	mov	r2, r3
 8017d8e:	683b      	ldr	r3, [r7, #0]
 8017d90:	601a      	str	r2, [r3, #0]
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
  {
#endif
    return ERR_OK;
 8017d92:	2300      	movs	r3, #0
 8017d94:	e001      	b.n	8017d9a <sys_arch_mbox_tryfetch+0x30>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 8017d96:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 8017d9a:	4618      	mov	r0, r3
 8017d9c:	3718      	adds	r7, #24
 8017d9e:	46bd      	mov	sp, r7
 8017da0:	bd80      	pop	{r7, pc}

08017da2 <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8017da2:	b480      	push	{r7}
 8017da4:	b083      	sub	sp, #12
 8017da6:	af00      	add	r7, sp, #0
 8017da8:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8017daa:	687b      	ldr	r3, [r7, #4]
 8017dac:	681b      	ldr	r3, [r3, #0]
 8017dae:	2b00      	cmp	r3, #0
 8017db0:	d101      	bne.n	8017db6 <sys_mbox_valid+0x14>
    return 0;
 8017db2:	2300      	movs	r3, #0
 8017db4:	e000      	b.n	8017db8 <sys_mbox_valid+0x16>
  else
    return 1;
 8017db6:	2301      	movs	r3, #1
}
 8017db8:	4618      	mov	r0, r3
 8017dba:	370c      	adds	r7, #12
 8017dbc:	46bd      	mov	sp, r7
 8017dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017dc2:	4770      	bx	lr

08017dc4 <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 8017dc4:	b480      	push	{r7}
 8017dc6:	b083      	sub	sp, #12
 8017dc8:	af00      	add	r7, sp, #0
 8017dca:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 8017dcc:	687b      	ldr	r3, [r7, #4]
 8017dce:	2200      	movs	r2, #0
 8017dd0:	601a      	str	r2, [r3, #0]
}
 8017dd2:	bf00      	nop
 8017dd4:	370c      	adds	r7, #12
 8017dd6:	46bd      	mov	sp, r7
 8017dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ddc:	4770      	bx	lr

08017dde <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 8017dde:	b580      	push	{r7, lr}
 8017de0:	b084      	sub	sp, #16
 8017de2:	af00      	add	r7, sp, #0
 8017de4:	6078      	str	r0, [r7, #4]
 8017de6:	460b      	mov	r3, r1
 8017de8:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
 8017dea:	2300      	movs	r3, #0
 8017dec:	60bb      	str	r3, [r7, #8]
 8017dee:	2300      	movs	r3, #0
 8017df0:	60fb      	str	r3, [r7, #12]
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 8017df2:	f107 0308 	add.w	r3, r7, #8
 8017df6:	2101      	movs	r1, #1
 8017df8:	4618      	mov	r0, r3
 8017dfa:	f7ec fff5 	bl	8004de8 <osSemaphoreCreate>
 8017dfe:	4602      	mov	r2, r0
 8017e00:	687b      	ldr	r3, [r7, #4]
 8017e02:	601a      	str	r2, [r3, #0]
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
#endif

  if(*sem == NULL)
 8017e04:	687b      	ldr	r3, [r7, #4]
 8017e06:	681b      	ldr	r3, [r3, #0]
 8017e08:	2b00      	cmp	r3, #0
 8017e0a:	d102      	bne.n	8017e12 <sys_sem_new+0x34>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8017e0c:	f04f 33ff 	mov.w	r3, #4294967295
 8017e10:	e009      	b.n	8017e26 <sys_sem_new+0x48>
  }

  if(count == 0)	// Means it can't be taken
 8017e12:	78fb      	ldrb	r3, [r7, #3]
 8017e14:	2b00      	cmp	r3, #0
 8017e16:	d105      	bne.n	8017e24 <sys_sem_new+0x46>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
 8017e18:	687b      	ldr	r3, [r7, #4]
 8017e1a:	681b      	ldr	r3, [r3, #0]
 8017e1c:	2100      	movs	r1, #0
 8017e1e:	4618      	mov	r0, r3
 8017e20:	f7ed f814 	bl	8004e4c <osSemaphoreWait>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 8017e24:	2300      	movs	r3, #0
}
 8017e26:	4618      	mov	r0, r3
 8017e28:	3710      	adds	r7, #16
 8017e2a:	46bd      	mov	sp, r7
 8017e2c:	bd80      	pop	{r7, pc}

08017e2e <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 8017e2e:	b580      	push	{r7, lr}
 8017e30:	b084      	sub	sp, #16
 8017e32:	af00      	add	r7, sp, #0
 8017e34:	6078      	str	r0, [r7, #4]
 8017e36:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
 8017e38:	f7ec feca 	bl	8004bd0 <osKernelSysTick>
 8017e3c:	60f8      	str	r0, [r7, #12]
#else
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8017e3e:	683b      	ldr	r3, [r7, #0]
 8017e40:	2b00      	cmp	r3, #0
 8017e42:	d011      	beq.n	8017e68 <sys_arch_sem_wait+0x3a>
  {
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
 8017e44:	687b      	ldr	r3, [r7, #4]
 8017e46:	681b      	ldr	r3, [r3, #0]
 8017e48:	6839      	ldr	r1, [r7, #0]
 8017e4a:	4618      	mov	r0, r3
 8017e4c:	f7ec fffe 	bl	8004e4c <osSemaphoreWait>
 8017e50:	4603      	mov	r3, r0
 8017e52:	2b00      	cmp	r3, #0
 8017e54:	d105      	bne.n	8017e62 <sys_arch_sem_wait+0x34>
    {
      return (osKernelSysTick() - starttime);
 8017e56:	f7ec febb 	bl	8004bd0 <osKernelSysTick>
 8017e5a:	4602      	mov	r2, r0
 8017e5c:	68fb      	ldr	r3, [r7, #12]
 8017e5e:	1ad3      	subs	r3, r2, r3
 8017e60:	e012      	b.n	8017e88 <sys_arch_sem_wait+0x5a>
        return (osKernelGetTickCount() - starttime);
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 8017e62:	f04f 33ff 	mov.w	r3, #4294967295
 8017e66:	e00f      	b.n	8017e88 <sys_arch_sem_wait+0x5a>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 8017e68:	bf00      	nop
 8017e6a:	687b      	ldr	r3, [r7, #4]
 8017e6c:	681b      	ldr	r3, [r3, #0]
 8017e6e:	f04f 31ff 	mov.w	r1, #4294967295
 8017e72:	4618      	mov	r0, r3
 8017e74:	f7ec ffea 	bl	8004e4c <osSemaphoreWait>
 8017e78:	4603      	mov	r3, r0
 8017e7a:	2b00      	cmp	r3, #0
 8017e7c:	d1f5      	bne.n	8017e6a <sys_arch_sem_wait+0x3c>
    return (osKernelSysTick() - starttime);
 8017e7e:	f7ec fea7 	bl	8004bd0 <osKernelSysTick>
 8017e82:	4602      	mov	r2, r0
 8017e84:	68fb      	ldr	r3, [r7, #12]
 8017e86:	1ad3      	subs	r3, r2, r3
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8017e88:	4618      	mov	r0, r3
 8017e8a:	3710      	adds	r7, #16
 8017e8c:	46bd      	mov	sp, r7
 8017e8e:	bd80      	pop	{r7, pc}

08017e90 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 8017e90:	b580      	push	{r7, lr}
 8017e92:	b082      	sub	sp, #8
 8017e94:	af00      	add	r7, sp, #0
 8017e96:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 8017e98:	687b      	ldr	r3, [r7, #4]
 8017e9a:	681b      	ldr	r3, [r3, #0]
 8017e9c:	4618      	mov	r0, r3
 8017e9e:	f7ed f823 	bl	8004ee8 <osSemaphoreRelease>
}
 8017ea2:	bf00      	nop
 8017ea4:	3708      	adds	r7, #8
 8017ea6:	46bd      	mov	sp, r7
 8017ea8:	bd80      	pop	{r7, pc}

08017eaa <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 8017eaa:	b580      	push	{r7, lr}
 8017eac:	b082      	sub	sp, #8
 8017eae:	af00      	add	r7, sp, #0
 8017eb0:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 8017eb2:	687b      	ldr	r3, [r7, #4]
 8017eb4:	681b      	ldr	r3, [r3, #0]
 8017eb6:	4618      	mov	r0, r3
 8017eb8:	f7ed f84c 	bl	8004f54 <osSemaphoreDelete>
}
 8017ebc:	bf00      	nop
 8017ebe:	3708      	adds	r7, #8
 8017ec0:	46bd      	mov	sp, r7
 8017ec2:	bd80      	pop	{r7, pc}

08017ec4 <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 8017ec4:	b480      	push	{r7}
 8017ec6:	b083      	sub	sp, #12
 8017ec8:	af00      	add	r7, sp, #0
 8017eca:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 8017ecc:	687b      	ldr	r3, [r7, #4]
 8017ece:	681b      	ldr	r3, [r3, #0]
 8017ed0:	2b00      	cmp	r3, #0
 8017ed2:	d101      	bne.n	8017ed8 <sys_sem_valid+0x14>
    return 0;
 8017ed4:	2300      	movs	r3, #0
 8017ed6:	e000      	b.n	8017eda <sys_sem_valid+0x16>
  else
    return 1;
 8017ed8:	2301      	movs	r3, #1
}
 8017eda:	4618      	mov	r0, r3
 8017edc:	370c      	adds	r7, #12
 8017ede:	46bd      	mov	sp, r7
 8017ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ee4:	4770      	bx	lr

08017ee6 <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 8017ee6:	b480      	push	{r7}
 8017ee8:	b083      	sub	sp, #12
 8017eea:	af00      	add	r7, sp, #0
 8017eec:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 8017eee:	687b      	ldr	r3, [r7, #4]
 8017ef0:	2200      	movs	r2, #0
 8017ef2:	601a      	str	r2, [r3, #0]
}
 8017ef4:	bf00      	nop
 8017ef6:	370c      	adds	r7, #12
 8017ef8:	46bd      	mov	sp, r7
 8017efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017efe:	4770      	bx	lr

08017f00 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8017f00:	b580      	push	{r7, lr}
 8017f02:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 8017f04:	4803      	ldr	r0, [pc, #12]	; (8017f14 <sys_init+0x14>)
 8017f06:	f7ec fed3 	bl	8004cb0 <osMutexCreate>
 8017f0a:	4603      	mov	r3, r0
 8017f0c:	4a02      	ldr	r2, [pc, #8]	; (8017f18 <sys_init+0x18>)
 8017f0e:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 8017f10:	bf00      	nop
 8017f12:	bd80      	pop	{r7, pc}
 8017f14:	08027078 	.word	0x08027078
 8017f18:	20010f08 	.word	0x20010f08

08017f1c <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8017f1c:	b580      	push	{r7, lr}
 8017f1e:	b084      	sub	sp, #16
 8017f20:	af00      	add	r7, sp, #0
 8017f22:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 8017f24:	2300      	movs	r3, #0
 8017f26:	60bb      	str	r3, [r7, #8]
 8017f28:	2300      	movs	r3, #0
 8017f2a:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 8017f2c:	f107 0308 	add.w	r3, r7, #8
 8017f30:	4618      	mov	r0, r3
 8017f32:	f7ec febd 	bl	8004cb0 <osMutexCreate>
 8017f36:	4602      	mov	r2, r0
 8017f38:	687b      	ldr	r3, [r7, #4]
 8017f3a:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 8017f3c:	687b      	ldr	r3, [r7, #4]
 8017f3e:	681b      	ldr	r3, [r3, #0]
 8017f40:	2b00      	cmp	r3, #0
 8017f42:	d102      	bne.n	8017f4a <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8017f44:	f04f 33ff 	mov.w	r3, #4294967295
 8017f48:	e000      	b.n	8017f4c <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8017f4a:	2300      	movs	r3, #0
}
 8017f4c:	4618      	mov	r0, r3
 8017f4e:	3710      	adds	r7, #16
 8017f50:	46bd      	mov	sp, r7
 8017f52:	bd80      	pop	{r7, pc}

08017f54 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8017f54:	b580      	push	{r7, lr}
 8017f56:	b082      	sub	sp, #8
 8017f58:	af00      	add	r7, sp, #0
 8017f5a:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 8017f5c:	687b      	ldr	r3, [r7, #4]
 8017f5e:	681b      	ldr	r3, [r3, #0]
 8017f60:	f04f 31ff 	mov.w	r1, #4294967295
 8017f64:	4618      	mov	r0, r3
 8017f66:	f7ec febb 	bl	8004ce0 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 8017f6a:	bf00      	nop
 8017f6c:	3708      	adds	r7, #8
 8017f6e:	46bd      	mov	sp, r7
 8017f70:	bd80      	pop	{r7, pc}

08017f72 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8017f72:	b580      	push	{r7, lr}
 8017f74:	b082      	sub	sp, #8
 8017f76:	af00      	add	r7, sp, #0
 8017f78:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8017f7a:	687b      	ldr	r3, [r7, #4]
 8017f7c:	681b      	ldr	r3, [r3, #0]
 8017f7e:	4618      	mov	r0, r3
 8017f80:	f7ec fefc 	bl	8004d7c <osMutexRelease>
}
 8017f84:	bf00      	nop
 8017f86:	3708      	adds	r7, #8
 8017f88:	46bd      	mov	sp, r7
 8017f8a:	bd80      	pop	{r7, pc}

08017f8c <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8017f8c:	b580      	push	{r7, lr}
 8017f8e:	b08c      	sub	sp, #48	; 0x30
 8017f90:	af00      	add	r7, sp, #0
 8017f92:	60f8      	str	r0, [r7, #12]
 8017f94:	60b9      	str	r1, [r7, #8]
 8017f96:	607a      	str	r2, [r7, #4]
 8017f98:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 8017f9a:	f107 0314 	add.w	r3, r7, #20
 8017f9e:	2200      	movs	r2, #0
 8017fa0:	601a      	str	r2, [r3, #0]
 8017fa2:	605a      	str	r2, [r3, #4]
 8017fa4:	609a      	str	r2, [r3, #8]
 8017fa6:	60da      	str	r2, [r3, #12]
 8017fa8:	611a      	str	r2, [r3, #16]
 8017faa:	615a      	str	r2, [r3, #20]
 8017fac:	619a      	str	r2, [r3, #24]
 8017fae:	68fb      	ldr	r3, [r7, #12]
 8017fb0:	617b      	str	r3, [r7, #20]
 8017fb2:	68bb      	ldr	r3, [r7, #8]
 8017fb4:	61bb      	str	r3, [r7, #24]
 8017fb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017fb8:	b21b      	sxth	r3, r3
 8017fba:	83bb      	strh	r3, [r7, #28]
 8017fbc:	683b      	ldr	r3, [r7, #0]
 8017fbe:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 8017fc0:	f107 0314 	add.w	r3, r7, #20
 8017fc4:	6879      	ldr	r1, [r7, #4]
 8017fc6:	4618      	mov	r0, r3
 8017fc8:	f7ec fe12 	bl	8004bf0 <osThreadCreate>
 8017fcc:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 8017fce:	4618      	mov	r0, r3
 8017fd0:	3730      	adds	r7, #48	; 0x30
 8017fd2:	46bd      	mov	sp, r7
 8017fd4:	bd80      	pop	{r7, pc}
	...

08017fd8 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8017fd8:	b580      	push	{r7, lr}
 8017fda:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 8017fdc:	4b04      	ldr	r3, [pc, #16]	; (8017ff0 <sys_arch_protect+0x18>)
 8017fde:	681b      	ldr	r3, [r3, #0]
 8017fe0:	f04f 31ff 	mov.w	r1, #4294967295
 8017fe4:	4618      	mov	r0, r3
 8017fe6:	f7ec fe7b 	bl	8004ce0 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 8017fea:	2301      	movs	r3, #1
}
 8017fec:	4618      	mov	r0, r3
 8017fee:	bd80      	pop	{r7, pc}
 8017ff0:	20010f08 	.word	0x20010f08

08017ff4 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8017ff4:	b580      	push	{r7, lr}
 8017ff6:	b082      	sub	sp, #8
 8017ff8:	af00      	add	r7, sp, #0
 8017ffa:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8017ffc:	4b04      	ldr	r3, [pc, #16]	; (8018010 <sys_arch_unprotect+0x1c>)
 8017ffe:	681b      	ldr	r3, [r3, #0]
 8018000:	4618      	mov	r0, r3
 8018002:	f7ec febb 	bl	8004d7c <osMutexRelease>
}
 8018006:	bf00      	nop
 8018008:	3708      	adds	r7, #8
 801800a:	46bd      	mov	sp, r7
 801800c:	bd80      	pop	{r7, pc}
 801800e:	bf00      	nop
 8018010:	20010f08 	.word	0x20010f08

08018014 <std>:
 8018014:	2300      	movs	r3, #0
 8018016:	b510      	push	{r4, lr}
 8018018:	4604      	mov	r4, r0
 801801a:	e9c0 3300 	strd	r3, r3, [r0]
 801801e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8018022:	6083      	str	r3, [r0, #8]
 8018024:	8181      	strh	r1, [r0, #12]
 8018026:	6643      	str	r3, [r0, #100]	; 0x64
 8018028:	81c2      	strh	r2, [r0, #14]
 801802a:	6183      	str	r3, [r0, #24]
 801802c:	4619      	mov	r1, r3
 801802e:	2208      	movs	r2, #8
 8018030:	305c      	adds	r0, #92	; 0x5c
 8018032:	f000 f92a 	bl	801828a <memset>
 8018036:	4b05      	ldr	r3, [pc, #20]	; (801804c <std+0x38>)
 8018038:	6263      	str	r3, [r4, #36]	; 0x24
 801803a:	4b05      	ldr	r3, [pc, #20]	; (8018050 <std+0x3c>)
 801803c:	62a3      	str	r3, [r4, #40]	; 0x28
 801803e:	4b05      	ldr	r3, [pc, #20]	; (8018054 <std+0x40>)
 8018040:	62e3      	str	r3, [r4, #44]	; 0x2c
 8018042:	4b05      	ldr	r3, [pc, #20]	; (8018058 <std+0x44>)
 8018044:	6224      	str	r4, [r4, #32]
 8018046:	6323      	str	r3, [r4, #48]	; 0x30
 8018048:	bd10      	pop	{r4, pc}
 801804a:	bf00      	nop
 801804c:	08018565 	.word	0x08018565
 8018050:	08018587 	.word	0x08018587
 8018054:	080185bf 	.word	0x080185bf
 8018058:	080185e3 	.word	0x080185e3

0801805c <_cleanup_r>:
 801805c:	4901      	ldr	r1, [pc, #4]	; (8018064 <_cleanup_r+0x8>)
 801805e:	f000 b8af 	b.w	80181c0 <_fwalk_reent>
 8018062:	bf00      	nop
 8018064:	080187b9 	.word	0x080187b9

08018068 <__sfmoreglue>:
 8018068:	b570      	push	{r4, r5, r6, lr}
 801806a:	2268      	movs	r2, #104	; 0x68
 801806c:	1e4d      	subs	r5, r1, #1
 801806e:	4355      	muls	r5, r2
 8018070:	460e      	mov	r6, r1
 8018072:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8018076:	f000 f931 	bl	80182dc <_malloc_r>
 801807a:	4604      	mov	r4, r0
 801807c:	b140      	cbz	r0, 8018090 <__sfmoreglue+0x28>
 801807e:	2100      	movs	r1, #0
 8018080:	e9c0 1600 	strd	r1, r6, [r0]
 8018084:	300c      	adds	r0, #12
 8018086:	60a0      	str	r0, [r4, #8]
 8018088:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801808c:	f000 f8fd 	bl	801828a <memset>
 8018090:	4620      	mov	r0, r4
 8018092:	bd70      	pop	{r4, r5, r6, pc}

08018094 <__sfp_lock_acquire>:
 8018094:	4801      	ldr	r0, [pc, #4]	; (801809c <__sfp_lock_acquire+0x8>)
 8018096:	f000 b8d8 	b.w	801824a <__retarget_lock_acquire_recursive>
 801809a:	bf00      	nop
 801809c:	20010f0d 	.word	0x20010f0d

080180a0 <__sfp_lock_release>:
 80180a0:	4801      	ldr	r0, [pc, #4]	; (80180a8 <__sfp_lock_release+0x8>)
 80180a2:	f000 b8d3 	b.w	801824c <__retarget_lock_release_recursive>
 80180a6:	bf00      	nop
 80180a8:	20010f0d 	.word	0x20010f0d

080180ac <__sinit_lock_acquire>:
 80180ac:	4801      	ldr	r0, [pc, #4]	; (80180b4 <__sinit_lock_acquire+0x8>)
 80180ae:	f000 b8cc 	b.w	801824a <__retarget_lock_acquire_recursive>
 80180b2:	bf00      	nop
 80180b4:	20010f0e 	.word	0x20010f0e

080180b8 <__sinit_lock_release>:
 80180b8:	4801      	ldr	r0, [pc, #4]	; (80180c0 <__sinit_lock_release+0x8>)
 80180ba:	f000 b8c7 	b.w	801824c <__retarget_lock_release_recursive>
 80180be:	bf00      	nop
 80180c0:	20010f0e 	.word	0x20010f0e

080180c4 <__sinit>:
 80180c4:	b510      	push	{r4, lr}
 80180c6:	4604      	mov	r4, r0
 80180c8:	f7ff fff0 	bl	80180ac <__sinit_lock_acquire>
 80180cc:	69a3      	ldr	r3, [r4, #24]
 80180ce:	b11b      	cbz	r3, 80180d8 <__sinit+0x14>
 80180d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80180d4:	f7ff bff0 	b.w	80180b8 <__sinit_lock_release>
 80180d8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80180dc:	6523      	str	r3, [r4, #80]	; 0x50
 80180de:	4b13      	ldr	r3, [pc, #76]	; (801812c <__sinit+0x68>)
 80180e0:	4a13      	ldr	r2, [pc, #76]	; (8018130 <__sinit+0x6c>)
 80180e2:	681b      	ldr	r3, [r3, #0]
 80180e4:	62a2      	str	r2, [r4, #40]	; 0x28
 80180e6:	42a3      	cmp	r3, r4
 80180e8:	bf04      	itt	eq
 80180ea:	2301      	moveq	r3, #1
 80180ec:	61a3      	streq	r3, [r4, #24]
 80180ee:	4620      	mov	r0, r4
 80180f0:	f000 f820 	bl	8018134 <__sfp>
 80180f4:	6060      	str	r0, [r4, #4]
 80180f6:	4620      	mov	r0, r4
 80180f8:	f000 f81c 	bl	8018134 <__sfp>
 80180fc:	60a0      	str	r0, [r4, #8]
 80180fe:	4620      	mov	r0, r4
 8018100:	f000 f818 	bl	8018134 <__sfp>
 8018104:	2200      	movs	r2, #0
 8018106:	60e0      	str	r0, [r4, #12]
 8018108:	2104      	movs	r1, #4
 801810a:	6860      	ldr	r0, [r4, #4]
 801810c:	f7ff ff82 	bl	8018014 <std>
 8018110:	68a0      	ldr	r0, [r4, #8]
 8018112:	2201      	movs	r2, #1
 8018114:	2109      	movs	r1, #9
 8018116:	f7ff ff7d 	bl	8018014 <std>
 801811a:	68e0      	ldr	r0, [r4, #12]
 801811c:	2202      	movs	r2, #2
 801811e:	2112      	movs	r1, #18
 8018120:	f7ff ff78 	bl	8018014 <std>
 8018124:	2301      	movs	r3, #1
 8018126:	61a3      	str	r3, [r4, #24]
 8018128:	e7d2      	b.n	80180d0 <__sinit+0xc>
 801812a:	bf00      	nop
 801812c:	080270e0 	.word	0x080270e0
 8018130:	0801805d 	.word	0x0801805d

08018134 <__sfp>:
 8018134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018136:	4607      	mov	r7, r0
 8018138:	f7ff ffac 	bl	8018094 <__sfp_lock_acquire>
 801813c:	4b1e      	ldr	r3, [pc, #120]	; (80181b8 <__sfp+0x84>)
 801813e:	681e      	ldr	r6, [r3, #0]
 8018140:	69b3      	ldr	r3, [r6, #24]
 8018142:	b913      	cbnz	r3, 801814a <__sfp+0x16>
 8018144:	4630      	mov	r0, r6
 8018146:	f7ff ffbd 	bl	80180c4 <__sinit>
 801814a:	3648      	adds	r6, #72	; 0x48
 801814c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8018150:	3b01      	subs	r3, #1
 8018152:	d503      	bpl.n	801815c <__sfp+0x28>
 8018154:	6833      	ldr	r3, [r6, #0]
 8018156:	b30b      	cbz	r3, 801819c <__sfp+0x68>
 8018158:	6836      	ldr	r6, [r6, #0]
 801815a:	e7f7      	b.n	801814c <__sfp+0x18>
 801815c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8018160:	b9d5      	cbnz	r5, 8018198 <__sfp+0x64>
 8018162:	4b16      	ldr	r3, [pc, #88]	; (80181bc <__sfp+0x88>)
 8018164:	60e3      	str	r3, [r4, #12]
 8018166:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801816a:	6665      	str	r5, [r4, #100]	; 0x64
 801816c:	f000 f86c 	bl	8018248 <__retarget_lock_init_recursive>
 8018170:	f7ff ff96 	bl	80180a0 <__sfp_lock_release>
 8018174:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8018178:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801817c:	6025      	str	r5, [r4, #0]
 801817e:	61a5      	str	r5, [r4, #24]
 8018180:	2208      	movs	r2, #8
 8018182:	4629      	mov	r1, r5
 8018184:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8018188:	f000 f87f 	bl	801828a <memset>
 801818c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8018190:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8018194:	4620      	mov	r0, r4
 8018196:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018198:	3468      	adds	r4, #104	; 0x68
 801819a:	e7d9      	b.n	8018150 <__sfp+0x1c>
 801819c:	2104      	movs	r1, #4
 801819e:	4638      	mov	r0, r7
 80181a0:	f7ff ff62 	bl	8018068 <__sfmoreglue>
 80181a4:	4604      	mov	r4, r0
 80181a6:	6030      	str	r0, [r6, #0]
 80181a8:	2800      	cmp	r0, #0
 80181aa:	d1d5      	bne.n	8018158 <__sfp+0x24>
 80181ac:	f7ff ff78 	bl	80180a0 <__sfp_lock_release>
 80181b0:	230c      	movs	r3, #12
 80181b2:	603b      	str	r3, [r7, #0]
 80181b4:	e7ee      	b.n	8018194 <__sfp+0x60>
 80181b6:	bf00      	nop
 80181b8:	080270e0 	.word	0x080270e0
 80181bc:	ffff0001 	.word	0xffff0001

080181c0 <_fwalk_reent>:
 80181c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80181c4:	4606      	mov	r6, r0
 80181c6:	4688      	mov	r8, r1
 80181c8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80181cc:	2700      	movs	r7, #0
 80181ce:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80181d2:	f1b9 0901 	subs.w	r9, r9, #1
 80181d6:	d505      	bpl.n	80181e4 <_fwalk_reent+0x24>
 80181d8:	6824      	ldr	r4, [r4, #0]
 80181da:	2c00      	cmp	r4, #0
 80181dc:	d1f7      	bne.n	80181ce <_fwalk_reent+0xe>
 80181de:	4638      	mov	r0, r7
 80181e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80181e4:	89ab      	ldrh	r3, [r5, #12]
 80181e6:	2b01      	cmp	r3, #1
 80181e8:	d907      	bls.n	80181fa <_fwalk_reent+0x3a>
 80181ea:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80181ee:	3301      	adds	r3, #1
 80181f0:	d003      	beq.n	80181fa <_fwalk_reent+0x3a>
 80181f2:	4629      	mov	r1, r5
 80181f4:	4630      	mov	r0, r6
 80181f6:	47c0      	blx	r8
 80181f8:	4307      	orrs	r7, r0
 80181fa:	3568      	adds	r5, #104	; 0x68
 80181fc:	e7e9      	b.n	80181d2 <_fwalk_reent+0x12>
	...

08018200 <__libc_init_array>:
 8018200:	b570      	push	{r4, r5, r6, lr}
 8018202:	4d0d      	ldr	r5, [pc, #52]	; (8018238 <__libc_init_array+0x38>)
 8018204:	4c0d      	ldr	r4, [pc, #52]	; (801823c <__libc_init_array+0x3c>)
 8018206:	1b64      	subs	r4, r4, r5
 8018208:	10a4      	asrs	r4, r4, #2
 801820a:	2600      	movs	r6, #0
 801820c:	42a6      	cmp	r6, r4
 801820e:	d109      	bne.n	8018224 <__libc_init_array+0x24>
 8018210:	4d0b      	ldr	r5, [pc, #44]	; (8018240 <__libc_init_array+0x40>)
 8018212:	4c0c      	ldr	r4, [pc, #48]	; (8018244 <__libc_init_array+0x44>)
 8018214:	f001 f822 	bl	801925c <_init>
 8018218:	1b64      	subs	r4, r4, r5
 801821a:	10a4      	asrs	r4, r4, #2
 801821c:	2600      	movs	r6, #0
 801821e:	42a6      	cmp	r6, r4
 8018220:	d105      	bne.n	801822e <__libc_init_array+0x2e>
 8018222:	bd70      	pop	{r4, r5, r6, pc}
 8018224:	f855 3b04 	ldr.w	r3, [r5], #4
 8018228:	4798      	blx	r3
 801822a:	3601      	adds	r6, #1
 801822c:	e7ee      	b.n	801820c <__libc_init_array+0xc>
 801822e:	f855 3b04 	ldr.w	r3, [r5], #4
 8018232:	4798      	blx	r3
 8018234:	3601      	adds	r6, #1
 8018236:	e7f2      	b.n	801821e <__libc_init_array+0x1e>
 8018238:	080271d0 	.word	0x080271d0
 801823c:	080271d0 	.word	0x080271d0
 8018240:	080271d0 	.word	0x080271d0
 8018244:	080271d4 	.word	0x080271d4

08018248 <__retarget_lock_init_recursive>:
 8018248:	4770      	bx	lr

0801824a <__retarget_lock_acquire_recursive>:
 801824a:	4770      	bx	lr

0801824c <__retarget_lock_release_recursive>:
 801824c:	4770      	bx	lr

0801824e <memcmp>:
 801824e:	b510      	push	{r4, lr}
 8018250:	3901      	subs	r1, #1
 8018252:	4402      	add	r2, r0
 8018254:	4290      	cmp	r0, r2
 8018256:	d101      	bne.n	801825c <memcmp+0xe>
 8018258:	2000      	movs	r0, #0
 801825a:	e005      	b.n	8018268 <memcmp+0x1a>
 801825c:	7803      	ldrb	r3, [r0, #0]
 801825e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8018262:	42a3      	cmp	r3, r4
 8018264:	d001      	beq.n	801826a <memcmp+0x1c>
 8018266:	1b18      	subs	r0, r3, r4
 8018268:	bd10      	pop	{r4, pc}
 801826a:	3001      	adds	r0, #1
 801826c:	e7f2      	b.n	8018254 <memcmp+0x6>

0801826e <memcpy>:
 801826e:	440a      	add	r2, r1
 8018270:	4291      	cmp	r1, r2
 8018272:	f100 33ff 	add.w	r3, r0, #4294967295
 8018276:	d100      	bne.n	801827a <memcpy+0xc>
 8018278:	4770      	bx	lr
 801827a:	b510      	push	{r4, lr}
 801827c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8018280:	f803 4f01 	strb.w	r4, [r3, #1]!
 8018284:	4291      	cmp	r1, r2
 8018286:	d1f9      	bne.n	801827c <memcpy+0xe>
 8018288:	bd10      	pop	{r4, pc}

0801828a <memset>:
 801828a:	4402      	add	r2, r0
 801828c:	4603      	mov	r3, r0
 801828e:	4293      	cmp	r3, r2
 8018290:	d100      	bne.n	8018294 <memset+0xa>
 8018292:	4770      	bx	lr
 8018294:	f803 1b01 	strb.w	r1, [r3], #1
 8018298:	e7f9      	b.n	801828e <memset+0x4>
	...

0801829c <sbrk_aligned>:
 801829c:	b570      	push	{r4, r5, r6, lr}
 801829e:	4e0e      	ldr	r6, [pc, #56]	; (80182d8 <sbrk_aligned+0x3c>)
 80182a0:	460c      	mov	r4, r1
 80182a2:	6831      	ldr	r1, [r6, #0]
 80182a4:	4605      	mov	r5, r0
 80182a6:	b911      	cbnz	r1, 80182ae <sbrk_aligned+0x12>
 80182a8:	f000 f94c 	bl	8018544 <_sbrk_r>
 80182ac:	6030      	str	r0, [r6, #0]
 80182ae:	4621      	mov	r1, r4
 80182b0:	4628      	mov	r0, r5
 80182b2:	f000 f947 	bl	8018544 <_sbrk_r>
 80182b6:	1c43      	adds	r3, r0, #1
 80182b8:	d00a      	beq.n	80182d0 <sbrk_aligned+0x34>
 80182ba:	1cc4      	adds	r4, r0, #3
 80182bc:	f024 0403 	bic.w	r4, r4, #3
 80182c0:	42a0      	cmp	r0, r4
 80182c2:	d007      	beq.n	80182d4 <sbrk_aligned+0x38>
 80182c4:	1a21      	subs	r1, r4, r0
 80182c6:	4628      	mov	r0, r5
 80182c8:	f000 f93c 	bl	8018544 <_sbrk_r>
 80182cc:	3001      	adds	r0, #1
 80182ce:	d101      	bne.n	80182d4 <sbrk_aligned+0x38>
 80182d0:	f04f 34ff 	mov.w	r4, #4294967295
 80182d4:	4620      	mov	r0, r4
 80182d6:	bd70      	pop	{r4, r5, r6, pc}
 80182d8:	20010f14 	.word	0x20010f14

080182dc <_malloc_r>:
 80182dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80182e0:	1ccd      	adds	r5, r1, #3
 80182e2:	f025 0503 	bic.w	r5, r5, #3
 80182e6:	3508      	adds	r5, #8
 80182e8:	2d0c      	cmp	r5, #12
 80182ea:	bf38      	it	cc
 80182ec:	250c      	movcc	r5, #12
 80182ee:	2d00      	cmp	r5, #0
 80182f0:	4607      	mov	r7, r0
 80182f2:	db01      	blt.n	80182f8 <_malloc_r+0x1c>
 80182f4:	42a9      	cmp	r1, r5
 80182f6:	d905      	bls.n	8018304 <_malloc_r+0x28>
 80182f8:	230c      	movs	r3, #12
 80182fa:	603b      	str	r3, [r7, #0]
 80182fc:	2600      	movs	r6, #0
 80182fe:	4630      	mov	r0, r6
 8018300:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018304:	4e2e      	ldr	r6, [pc, #184]	; (80183c0 <_malloc_r+0xe4>)
 8018306:	f000 fabf 	bl	8018888 <__malloc_lock>
 801830a:	6833      	ldr	r3, [r6, #0]
 801830c:	461c      	mov	r4, r3
 801830e:	bb34      	cbnz	r4, 801835e <_malloc_r+0x82>
 8018310:	4629      	mov	r1, r5
 8018312:	4638      	mov	r0, r7
 8018314:	f7ff ffc2 	bl	801829c <sbrk_aligned>
 8018318:	1c43      	adds	r3, r0, #1
 801831a:	4604      	mov	r4, r0
 801831c:	d14d      	bne.n	80183ba <_malloc_r+0xde>
 801831e:	6834      	ldr	r4, [r6, #0]
 8018320:	4626      	mov	r6, r4
 8018322:	2e00      	cmp	r6, #0
 8018324:	d140      	bne.n	80183a8 <_malloc_r+0xcc>
 8018326:	6823      	ldr	r3, [r4, #0]
 8018328:	4631      	mov	r1, r6
 801832a:	4638      	mov	r0, r7
 801832c:	eb04 0803 	add.w	r8, r4, r3
 8018330:	f000 f908 	bl	8018544 <_sbrk_r>
 8018334:	4580      	cmp	r8, r0
 8018336:	d13a      	bne.n	80183ae <_malloc_r+0xd2>
 8018338:	6821      	ldr	r1, [r4, #0]
 801833a:	3503      	adds	r5, #3
 801833c:	1a6d      	subs	r5, r5, r1
 801833e:	f025 0503 	bic.w	r5, r5, #3
 8018342:	3508      	adds	r5, #8
 8018344:	2d0c      	cmp	r5, #12
 8018346:	bf38      	it	cc
 8018348:	250c      	movcc	r5, #12
 801834a:	4629      	mov	r1, r5
 801834c:	4638      	mov	r0, r7
 801834e:	f7ff ffa5 	bl	801829c <sbrk_aligned>
 8018352:	3001      	adds	r0, #1
 8018354:	d02b      	beq.n	80183ae <_malloc_r+0xd2>
 8018356:	6823      	ldr	r3, [r4, #0]
 8018358:	442b      	add	r3, r5
 801835a:	6023      	str	r3, [r4, #0]
 801835c:	e00e      	b.n	801837c <_malloc_r+0xa0>
 801835e:	6822      	ldr	r2, [r4, #0]
 8018360:	1b52      	subs	r2, r2, r5
 8018362:	d41e      	bmi.n	80183a2 <_malloc_r+0xc6>
 8018364:	2a0b      	cmp	r2, #11
 8018366:	d916      	bls.n	8018396 <_malloc_r+0xba>
 8018368:	1961      	adds	r1, r4, r5
 801836a:	42a3      	cmp	r3, r4
 801836c:	6025      	str	r5, [r4, #0]
 801836e:	bf18      	it	ne
 8018370:	6059      	strne	r1, [r3, #4]
 8018372:	6863      	ldr	r3, [r4, #4]
 8018374:	bf08      	it	eq
 8018376:	6031      	streq	r1, [r6, #0]
 8018378:	5162      	str	r2, [r4, r5]
 801837a:	604b      	str	r3, [r1, #4]
 801837c:	4638      	mov	r0, r7
 801837e:	f104 060b 	add.w	r6, r4, #11
 8018382:	f000 fa87 	bl	8018894 <__malloc_unlock>
 8018386:	f026 0607 	bic.w	r6, r6, #7
 801838a:	1d23      	adds	r3, r4, #4
 801838c:	1af2      	subs	r2, r6, r3
 801838e:	d0b6      	beq.n	80182fe <_malloc_r+0x22>
 8018390:	1b9b      	subs	r3, r3, r6
 8018392:	50a3      	str	r3, [r4, r2]
 8018394:	e7b3      	b.n	80182fe <_malloc_r+0x22>
 8018396:	6862      	ldr	r2, [r4, #4]
 8018398:	42a3      	cmp	r3, r4
 801839a:	bf0c      	ite	eq
 801839c:	6032      	streq	r2, [r6, #0]
 801839e:	605a      	strne	r2, [r3, #4]
 80183a0:	e7ec      	b.n	801837c <_malloc_r+0xa0>
 80183a2:	4623      	mov	r3, r4
 80183a4:	6864      	ldr	r4, [r4, #4]
 80183a6:	e7b2      	b.n	801830e <_malloc_r+0x32>
 80183a8:	4634      	mov	r4, r6
 80183aa:	6876      	ldr	r6, [r6, #4]
 80183ac:	e7b9      	b.n	8018322 <_malloc_r+0x46>
 80183ae:	230c      	movs	r3, #12
 80183b0:	603b      	str	r3, [r7, #0]
 80183b2:	4638      	mov	r0, r7
 80183b4:	f000 fa6e 	bl	8018894 <__malloc_unlock>
 80183b8:	e7a1      	b.n	80182fe <_malloc_r+0x22>
 80183ba:	6025      	str	r5, [r4, #0]
 80183bc:	e7de      	b.n	801837c <_malloc_r+0xa0>
 80183be:	bf00      	nop
 80183c0:	20010f10 	.word	0x20010f10

080183c4 <iprintf>:
 80183c4:	b40f      	push	{r0, r1, r2, r3}
 80183c6:	4b0a      	ldr	r3, [pc, #40]	; (80183f0 <iprintf+0x2c>)
 80183c8:	b513      	push	{r0, r1, r4, lr}
 80183ca:	681c      	ldr	r4, [r3, #0]
 80183cc:	b124      	cbz	r4, 80183d8 <iprintf+0x14>
 80183ce:	69a3      	ldr	r3, [r4, #24]
 80183d0:	b913      	cbnz	r3, 80183d8 <iprintf+0x14>
 80183d2:	4620      	mov	r0, r4
 80183d4:	f7ff fe76 	bl	80180c4 <__sinit>
 80183d8:	ab05      	add	r3, sp, #20
 80183da:	9a04      	ldr	r2, [sp, #16]
 80183dc:	68a1      	ldr	r1, [r4, #8]
 80183de:	9301      	str	r3, [sp, #4]
 80183e0:	4620      	mov	r0, r4
 80183e2:	f000 fad3 	bl	801898c <_vfiprintf_r>
 80183e6:	b002      	add	sp, #8
 80183e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80183ec:	b004      	add	sp, #16
 80183ee:	4770      	bx	lr
 80183f0:	20000034 	.word	0x20000034

080183f4 <rand>:
 80183f4:	4b16      	ldr	r3, [pc, #88]	; (8018450 <rand+0x5c>)
 80183f6:	b510      	push	{r4, lr}
 80183f8:	681c      	ldr	r4, [r3, #0]
 80183fa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80183fc:	b9b3      	cbnz	r3, 801842c <rand+0x38>
 80183fe:	2018      	movs	r0, #24
 8018400:	f000 fa3a 	bl	8018878 <malloc>
 8018404:	63a0      	str	r0, [r4, #56]	; 0x38
 8018406:	b928      	cbnz	r0, 8018414 <rand+0x20>
 8018408:	4602      	mov	r2, r0
 801840a:	4b12      	ldr	r3, [pc, #72]	; (8018454 <rand+0x60>)
 801840c:	4812      	ldr	r0, [pc, #72]	; (8018458 <rand+0x64>)
 801840e:	214e      	movs	r1, #78	; 0x4e
 8018410:	f000 f91e 	bl	8018650 <__assert_func>
 8018414:	4a11      	ldr	r2, [pc, #68]	; (801845c <rand+0x68>)
 8018416:	4b12      	ldr	r3, [pc, #72]	; (8018460 <rand+0x6c>)
 8018418:	e9c0 2300 	strd	r2, r3, [r0]
 801841c:	4b11      	ldr	r3, [pc, #68]	; (8018464 <rand+0x70>)
 801841e:	6083      	str	r3, [r0, #8]
 8018420:	230b      	movs	r3, #11
 8018422:	8183      	strh	r3, [r0, #12]
 8018424:	2201      	movs	r2, #1
 8018426:	2300      	movs	r3, #0
 8018428:	e9c0 2304 	strd	r2, r3, [r0, #16]
 801842c:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 801842e:	4a0e      	ldr	r2, [pc, #56]	; (8018468 <rand+0x74>)
 8018430:	6920      	ldr	r0, [r4, #16]
 8018432:	6963      	ldr	r3, [r4, #20]
 8018434:	490d      	ldr	r1, [pc, #52]	; (801846c <rand+0x78>)
 8018436:	4342      	muls	r2, r0
 8018438:	fb01 2203 	mla	r2, r1, r3, r2
 801843c:	fba0 0101 	umull	r0, r1, r0, r1
 8018440:	1c43      	adds	r3, r0, #1
 8018442:	eb42 0001 	adc.w	r0, r2, r1
 8018446:	e9c4 3004 	strd	r3, r0, [r4, #16]
 801844a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801844e:	bd10      	pop	{r4, pc}
 8018450:	20000034 	.word	0x20000034
 8018454:	080270e4 	.word	0x080270e4
 8018458:	080270fb 	.word	0x080270fb
 801845c:	abcd330e 	.word	0xabcd330e
 8018460:	e66d1234 	.word	0xe66d1234
 8018464:	0005deec 	.word	0x0005deec
 8018468:	5851f42d 	.word	0x5851f42d
 801846c:	4c957f2d 	.word	0x4c957f2d

08018470 <cleanup_glue>:
 8018470:	b538      	push	{r3, r4, r5, lr}
 8018472:	460c      	mov	r4, r1
 8018474:	6809      	ldr	r1, [r1, #0]
 8018476:	4605      	mov	r5, r0
 8018478:	b109      	cbz	r1, 801847e <cleanup_glue+0xe>
 801847a:	f7ff fff9 	bl	8018470 <cleanup_glue>
 801847e:	4621      	mov	r1, r4
 8018480:	4628      	mov	r0, r5
 8018482:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018486:	f000 ba0b 	b.w	80188a0 <_free_r>
	...

0801848c <_reclaim_reent>:
 801848c:	4b2c      	ldr	r3, [pc, #176]	; (8018540 <_reclaim_reent+0xb4>)
 801848e:	681b      	ldr	r3, [r3, #0]
 8018490:	4283      	cmp	r3, r0
 8018492:	b570      	push	{r4, r5, r6, lr}
 8018494:	4604      	mov	r4, r0
 8018496:	d051      	beq.n	801853c <_reclaim_reent+0xb0>
 8018498:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801849a:	b143      	cbz	r3, 80184ae <_reclaim_reent+0x22>
 801849c:	68db      	ldr	r3, [r3, #12]
 801849e:	2b00      	cmp	r3, #0
 80184a0:	d14a      	bne.n	8018538 <_reclaim_reent+0xac>
 80184a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80184a4:	6819      	ldr	r1, [r3, #0]
 80184a6:	b111      	cbz	r1, 80184ae <_reclaim_reent+0x22>
 80184a8:	4620      	mov	r0, r4
 80184aa:	f000 f9f9 	bl	80188a0 <_free_r>
 80184ae:	6961      	ldr	r1, [r4, #20]
 80184b0:	b111      	cbz	r1, 80184b8 <_reclaim_reent+0x2c>
 80184b2:	4620      	mov	r0, r4
 80184b4:	f000 f9f4 	bl	80188a0 <_free_r>
 80184b8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80184ba:	b111      	cbz	r1, 80184c2 <_reclaim_reent+0x36>
 80184bc:	4620      	mov	r0, r4
 80184be:	f000 f9ef 	bl	80188a0 <_free_r>
 80184c2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80184c4:	b111      	cbz	r1, 80184cc <_reclaim_reent+0x40>
 80184c6:	4620      	mov	r0, r4
 80184c8:	f000 f9ea 	bl	80188a0 <_free_r>
 80184cc:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80184ce:	b111      	cbz	r1, 80184d6 <_reclaim_reent+0x4a>
 80184d0:	4620      	mov	r0, r4
 80184d2:	f000 f9e5 	bl	80188a0 <_free_r>
 80184d6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80184d8:	b111      	cbz	r1, 80184e0 <_reclaim_reent+0x54>
 80184da:	4620      	mov	r0, r4
 80184dc:	f000 f9e0 	bl	80188a0 <_free_r>
 80184e0:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80184e2:	b111      	cbz	r1, 80184ea <_reclaim_reent+0x5e>
 80184e4:	4620      	mov	r0, r4
 80184e6:	f000 f9db 	bl	80188a0 <_free_r>
 80184ea:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80184ec:	b111      	cbz	r1, 80184f4 <_reclaim_reent+0x68>
 80184ee:	4620      	mov	r0, r4
 80184f0:	f000 f9d6 	bl	80188a0 <_free_r>
 80184f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80184f6:	b111      	cbz	r1, 80184fe <_reclaim_reent+0x72>
 80184f8:	4620      	mov	r0, r4
 80184fa:	f000 f9d1 	bl	80188a0 <_free_r>
 80184fe:	69a3      	ldr	r3, [r4, #24]
 8018500:	b1e3      	cbz	r3, 801853c <_reclaim_reent+0xb0>
 8018502:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8018504:	4620      	mov	r0, r4
 8018506:	4798      	blx	r3
 8018508:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801850a:	b1b9      	cbz	r1, 801853c <_reclaim_reent+0xb0>
 801850c:	4620      	mov	r0, r4
 801850e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018512:	f7ff bfad 	b.w	8018470 <cleanup_glue>
 8018516:	5949      	ldr	r1, [r1, r5]
 8018518:	b941      	cbnz	r1, 801852c <_reclaim_reent+0xa0>
 801851a:	3504      	adds	r5, #4
 801851c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801851e:	2d80      	cmp	r5, #128	; 0x80
 8018520:	68d9      	ldr	r1, [r3, #12]
 8018522:	d1f8      	bne.n	8018516 <_reclaim_reent+0x8a>
 8018524:	4620      	mov	r0, r4
 8018526:	f000 f9bb 	bl	80188a0 <_free_r>
 801852a:	e7ba      	b.n	80184a2 <_reclaim_reent+0x16>
 801852c:	680e      	ldr	r6, [r1, #0]
 801852e:	4620      	mov	r0, r4
 8018530:	f000 f9b6 	bl	80188a0 <_free_r>
 8018534:	4631      	mov	r1, r6
 8018536:	e7ef      	b.n	8018518 <_reclaim_reent+0x8c>
 8018538:	2500      	movs	r5, #0
 801853a:	e7ef      	b.n	801851c <_reclaim_reent+0x90>
 801853c:	bd70      	pop	{r4, r5, r6, pc}
 801853e:	bf00      	nop
 8018540:	20000034 	.word	0x20000034

08018544 <_sbrk_r>:
 8018544:	b538      	push	{r3, r4, r5, lr}
 8018546:	4d06      	ldr	r5, [pc, #24]	; (8018560 <_sbrk_r+0x1c>)
 8018548:	2300      	movs	r3, #0
 801854a:	4604      	mov	r4, r0
 801854c:	4608      	mov	r0, r1
 801854e:	602b      	str	r3, [r5, #0]
 8018550:	f7e8 fbaa 	bl	8000ca8 <_sbrk>
 8018554:	1c43      	adds	r3, r0, #1
 8018556:	d102      	bne.n	801855e <_sbrk_r+0x1a>
 8018558:	682b      	ldr	r3, [r5, #0]
 801855a:	b103      	cbz	r3, 801855e <_sbrk_r+0x1a>
 801855c:	6023      	str	r3, [r4, #0]
 801855e:	bd38      	pop	{r3, r4, r5, pc}
 8018560:	20010f18 	.word	0x20010f18

08018564 <__sread>:
 8018564:	b510      	push	{r4, lr}
 8018566:	460c      	mov	r4, r1
 8018568:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801856c:	f000 fcd2 	bl	8018f14 <_read_r>
 8018570:	2800      	cmp	r0, #0
 8018572:	bfab      	itete	ge
 8018574:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8018576:	89a3      	ldrhlt	r3, [r4, #12]
 8018578:	181b      	addge	r3, r3, r0
 801857a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801857e:	bfac      	ite	ge
 8018580:	6563      	strge	r3, [r4, #84]	; 0x54
 8018582:	81a3      	strhlt	r3, [r4, #12]
 8018584:	bd10      	pop	{r4, pc}

08018586 <__swrite>:
 8018586:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801858a:	461f      	mov	r7, r3
 801858c:	898b      	ldrh	r3, [r1, #12]
 801858e:	05db      	lsls	r3, r3, #23
 8018590:	4605      	mov	r5, r0
 8018592:	460c      	mov	r4, r1
 8018594:	4616      	mov	r6, r2
 8018596:	d505      	bpl.n	80185a4 <__swrite+0x1e>
 8018598:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801859c:	2302      	movs	r3, #2
 801859e:	2200      	movs	r2, #0
 80185a0:	f000 f958 	bl	8018854 <_lseek_r>
 80185a4:	89a3      	ldrh	r3, [r4, #12]
 80185a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80185aa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80185ae:	81a3      	strh	r3, [r4, #12]
 80185b0:	4632      	mov	r2, r6
 80185b2:	463b      	mov	r3, r7
 80185b4:	4628      	mov	r0, r5
 80185b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80185ba:	f000 b837 	b.w	801862c <_write_r>

080185be <__sseek>:
 80185be:	b510      	push	{r4, lr}
 80185c0:	460c      	mov	r4, r1
 80185c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80185c6:	f000 f945 	bl	8018854 <_lseek_r>
 80185ca:	1c43      	adds	r3, r0, #1
 80185cc:	89a3      	ldrh	r3, [r4, #12]
 80185ce:	bf15      	itete	ne
 80185d0:	6560      	strne	r0, [r4, #84]	; 0x54
 80185d2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80185d6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80185da:	81a3      	strheq	r3, [r4, #12]
 80185dc:	bf18      	it	ne
 80185de:	81a3      	strhne	r3, [r4, #12]
 80185e0:	bd10      	pop	{r4, pc}

080185e2 <__sclose>:
 80185e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80185e6:	f000 b851 	b.w	801868c <_close_r>

080185ea <strchr>:
 80185ea:	b2c9      	uxtb	r1, r1
 80185ec:	4603      	mov	r3, r0
 80185ee:	f810 2b01 	ldrb.w	r2, [r0], #1
 80185f2:	b11a      	cbz	r2, 80185fc <strchr+0x12>
 80185f4:	428a      	cmp	r2, r1
 80185f6:	d1f9      	bne.n	80185ec <strchr+0x2>
 80185f8:	4618      	mov	r0, r3
 80185fa:	4770      	bx	lr
 80185fc:	2900      	cmp	r1, #0
 80185fe:	bf18      	it	ne
 8018600:	2300      	movne	r3, #0
 8018602:	e7f9      	b.n	80185f8 <strchr+0xe>

08018604 <strncmp>:
 8018604:	b510      	push	{r4, lr}
 8018606:	b17a      	cbz	r2, 8018628 <strncmp+0x24>
 8018608:	4603      	mov	r3, r0
 801860a:	3901      	subs	r1, #1
 801860c:	1884      	adds	r4, r0, r2
 801860e:	f813 0b01 	ldrb.w	r0, [r3], #1
 8018612:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8018616:	4290      	cmp	r0, r2
 8018618:	d101      	bne.n	801861e <strncmp+0x1a>
 801861a:	42a3      	cmp	r3, r4
 801861c:	d101      	bne.n	8018622 <strncmp+0x1e>
 801861e:	1a80      	subs	r0, r0, r2
 8018620:	bd10      	pop	{r4, pc}
 8018622:	2800      	cmp	r0, #0
 8018624:	d1f3      	bne.n	801860e <strncmp+0xa>
 8018626:	e7fa      	b.n	801861e <strncmp+0x1a>
 8018628:	4610      	mov	r0, r2
 801862a:	e7f9      	b.n	8018620 <strncmp+0x1c>

0801862c <_write_r>:
 801862c:	b538      	push	{r3, r4, r5, lr}
 801862e:	4d07      	ldr	r5, [pc, #28]	; (801864c <_write_r+0x20>)
 8018630:	4604      	mov	r4, r0
 8018632:	4608      	mov	r0, r1
 8018634:	4611      	mov	r1, r2
 8018636:	2200      	movs	r2, #0
 8018638:	602a      	str	r2, [r5, #0]
 801863a:	461a      	mov	r2, r3
 801863c:	f7e8 fae3 	bl	8000c06 <_write>
 8018640:	1c43      	adds	r3, r0, #1
 8018642:	d102      	bne.n	801864a <_write_r+0x1e>
 8018644:	682b      	ldr	r3, [r5, #0]
 8018646:	b103      	cbz	r3, 801864a <_write_r+0x1e>
 8018648:	6023      	str	r3, [r4, #0]
 801864a:	bd38      	pop	{r3, r4, r5, pc}
 801864c:	20010f18 	.word	0x20010f18

08018650 <__assert_func>:
 8018650:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8018652:	4614      	mov	r4, r2
 8018654:	461a      	mov	r2, r3
 8018656:	4b09      	ldr	r3, [pc, #36]	; (801867c <__assert_func+0x2c>)
 8018658:	681b      	ldr	r3, [r3, #0]
 801865a:	4605      	mov	r5, r0
 801865c:	68d8      	ldr	r0, [r3, #12]
 801865e:	b14c      	cbz	r4, 8018674 <__assert_func+0x24>
 8018660:	4b07      	ldr	r3, [pc, #28]	; (8018680 <__assert_func+0x30>)
 8018662:	9100      	str	r1, [sp, #0]
 8018664:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8018668:	4906      	ldr	r1, [pc, #24]	; (8018684 <__assert_func+0x34>)
 801866a:	462b      	mov	r3, r5
 801866c:	f000 f8e0 	bl	8018830 <fiprintf>
 8018670:	f000 fd22 	bl	80190b8 <abort>
 8018674:	4b04      	ldr	r3, [pc, #16]	; (8018688 <__assert_func+0x38>)
 8018676:	461c      	mov	r4, r3
 8018678:	e7f3      	b.n	8018662 <__assert_func+0x12>
 801867a:	bf00      	nop
 801867c:	20000034 	.word	0x20000034
 8018680:	08027156 	.word	0x08027156
 8018684:	08027163 	.word	0x08027163
 8018688:	08027191 	.word	0x08027191

0801868c <_close_r>:
 801868c:	b538      	push	{r3, r4, r5, lr}
 801868e:	4d06      	ldr	r5, [pc, #24]	; (80186a8 <_close_r+0x1c>)
 8018690:	2300      	movs	r3, #0
 8018692:	4604      	mov	r4, r0
 8018694:	4608      	mov	r0, r1
 8018696:	602b      	str	r3, [r5, #0]
 8018698:	f7e8 fad1 	bl	8000c3e <_close>
 801869c:	1c43      	adds	r3, r0, #1
 801869e:	d102      	bne.n	80186a6 <_close_r+0x1a>
 80186a0:	682b      	ldr	r3, [r5, #0]
 80186a2:	b103      	cbz	r3, 80186a6 <_close_r+0x1a>
 80186a4:	6023      	str	r3, [r4, #0]
 80186a6:	bd38      	pop	{r3, r4, r5, pc}
 80186a8:	20010f18 	.word	0x20010f18

080186ac <__sflush_r>:
 80186ac:	898a      	ldrh	r2, [r1, #12]
 80186ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80186b2:	4605      	mov	r5, r0
 80186b4:	0710      	lsls	r0, r2, #28
 80186b6:	460c      	mov	r4, r1
 80186b8:	d458      	bmi.n	801876c <__sflush_r+0xc0>
 80186ba:	684b      	ldr	r3, [r1, #4]
 80186bc:	2b00      	cmp	r3, #0
 80186be:	dc05      	bgt.n	80186cc <__sflush_r+0x20>
 80186c0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80186c2:	2b00      	cmp	r3, #0
 80186c4:	dc02      	bgt.n	80186cc <__sflush_r+0x20>
 80186c6:	2000      	movs	r0, #0
 80186c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80186cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80186ce:	2e00      	cmp	r6, #0
 80186d0:	d0f9      	beq.n	80186c6 <__sflush_r+0x1a>
 80186d2:	2300      	movs	r3, #0
 80186d4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80186d8:	682f      	ldr	r7, [r5, #0]
 80186da:	602b      	str	r3, [r5, #0]
 80186dc:	d032      	beq.n	8018744 <__sflush_r+0x98>
 80186de:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80186e0:	89a3      	ldrh	r3, [r4, #12]
 80186e2:	075a      	lsls	r2, r3, #29
 80186e4:	d505      	bpl.n	80186f2 <__sflush_r+0x46>
 80186e6:	6863      	ldr	r3, [r4, #4]
 80186e8:	1ac0      	subs	r0, r0, r3
 80186ea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80186ec:	b10b      	cbz	r3, 80186f2 <__sflush_r+0x46>
 80186ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80186f0:	1ac0      	subs	r0, r0, r3
 80186f2:	2300      	movs	r3, #0
 80186f4:	4602      	mov	r2, r0
 80186f6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80186f8:	6a21      	ldr	r1, [r4, #32]
 80186fa:	4628      	mov	r0, r5
 80186fc:	47b0      	blx	r6
 80186fe:	1c43      	adds	r3, r0, #1
 8018700:	89a3      	ldrh	r3, [r4, #12]
 8018702:	d106      	bne.n	8018712 <__sflush_r+0x66>
 8018704:	6829      	ldr	r1, [r5, #0]
 8018706:	291d      	cmp	r1, #29
 8018708:	d82c      	bhi.n	8018764 <__sflush_r+0xb8>
 801870a:	4a2a      	ldr	r2, [pc, #168]	; (80187b4 <__sflush_r+0x108>)
 801870c:	40ca      	lsrs	r2, r1
 801870e:	07d6      	lsls	r6, r2, #31
 8018710:	d528      	bpl.n	8018764 <__sflush_r+0xb8>
 8018712:	2200      	movs	r2, #0
 8018714:	6062      	str	r2, [r4, #4]
 8018716:	04d9      	lsls	r1, r3, #19
 8018718:	6922      	ldr	r2, [r4, #16]
 801871a:	6022      	str	r2, [r4, #0]
 801871c:	d504      	bpl.n	8018728 <__sflush_r+0x7c>
 801871e:	1c42      	adds	r2, r0, #1
 8018720:	d101      	bne.n	8018726 <__sflush_r+0x7a>
 8018722:	682b      	ldr	r3, [r5, #0]
 8018724:	b903      	cbnz	r3, 8018728 <__sflush_r+0x7c>
 8018726:	6560      	str	r0, [r4, #84]	; 0x54
 8018728:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801872a:	602f      	str	r7, [r5, #0]
 801872c:	2900      	cmp	r1, #0
 801872e:	d0ca      	beq.n	80186c6 <__sflush_r+0x1a>
 8018730:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018734:	4299      	cmp	r1, r3
 8018736:	d002      	beq.n	801873e <__sflush_r+0x92>
 8018738:	4628      	mov	r0, r5
 801873a:	f000 f8b1 	bl	80188a0 <_free_r>
 801873e:	2000      	movs	r0, #0
 8018740:	6360      	str	r0, [r4, #52]	; 0x34
 8018742:	e7c1      	b.n	80186c8 <__sflush_r+0x1c>
 8018744:	6a21      	ldr	r1, [r4, #32]
 8018746:	2301      	movs	r3, #1
 8018748:	4628      	mov	r0, r5
 801874a:	47b0      	blx	r6
 801874c:	1c41      	adds	r1, r0, #1
 801874e:	d1c7      	bne.n	80186e0 <__sflush_r+0x34>
 8018750:	682b      	ldr	r3, [r5, #0]
 8018752:	2b00      	cmp	r3, #0
 8018754:	d0c4      	beq.n	80186e0 <__sflush_r+0x34>
 8018756:	2b1d      	cmp	r3, #29
 8018758:	d001      	beq.n	801875e <__sflush_r+0xb2>
 801875a:	2b16      	cmp	r3, #22
 801875c:	d101      	bne.n	8018762 <__sflush_r+0xb6>
 801875e:	602f      	str	r7, [r5, #0]
 8018760:	e7b1      	b.n	80186c6 <__sflush_r+0x1a>
 8018762:	89a3      	ldrh	r3, [r4, #12]
 8018764:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018768:	81a3      	strh	r3, [r4, #12]
 801876a:	e7ad      	b.n	80186c8 <__sflush_r+0x1c>
 801876c:	690f      	ldr	r7, [r1, #16]
 801876e:	2f00      	cmp	r7, #0
 8018770:	d0a9      	beq.n	80186c6 <__sflush_r+0x1a>
 8018772:	0793      	lsls	r3, r2, #30
 8018774:	680e      	ldr	r6, [r1, #0]
 8018776:	bf08      	it	eq
 8018778:	694b      	ldreq	r3, [r1, #20]
 801877a:	600f      	str	r7, [r1, #0]
 801877c:	bf18      	it	ne
 801877e:	2300      	movne	r3, #0
 8018780:	eba6 0807 	sub.w	r8, r6, r7
 8018784:	608b      	str	r3, [r1, #8]
 8018786:	f1b8 0f00 	cmp.w	r8, #0
 801878a:	dd9c      	ble.n	80186c6 <__sflush_r+0x1a>
 801878c:	6a21      	ldr	r1, [r4, #32]
 801878e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8018790:	4643      	mov	r3, r8
 8018792:	463a      	mov	r2, r7
 8018794:	4628      	mov	r0, r5
 8018796:	47b0      	blx	r6
 8018798:	2800      	cmp	r0, #0
 801879a:	dc06      	bgt.n	80187aa <__sflush_r+0xfe>
 801879c:	89a3      	ldrh	r3, [r4, #12]
 801879e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80187a2:	81a3      	strh	r3, [r4, #12]
 80187a4:	f04f 30ff 	mov.w	r0, #4294967295
 80187a8:	e78e      	b.n	80186c8 <__sflush_r+0x1c>
 80187aa:	4407      	add	r7, r0
 80187ac:	eba8 0800 	sub.w	r8, r8, r0
 80187b0:	e7e9      	b.n	8018786 <__sflush_r+0xda>
 80187b2:	bf00      	nop
 80187b4:	20400001 	.word	0x20400001

080187b8 <_fflush_r>:
 80187b8:	b538      	push	{r3, r4, r5, lr}
 80187ba:	690b      	ldr	r3, [r1, #16]
 80187bc:	4605      	mov	r5, r0
 80187be:	460c      	mov	r4, r1
 80187c0:	b913      	cbnz	r3, 80187c8 <_fflush_r+0x10>
 80187c2:	2500      	movs	r5, #0
 80187c4:	4628      	mov	r0, r5
 80187c6:	bd38      	pop	{r3, r4, r5, pc}
 80187c8:	b118      	cbz	r0, 80187d2 <_fflush_r+0x1a>
 80187ca:	6983      	ldr	r3, [r0, #24]
 80187cc:	b90b      	cbnz	r3, 80187d2 <_fflush_r+0x1a>
 80187ce:	f7ff fc79 	bl	80180c4 <__sinit>
 80187d2:	4b14      	ldr	r3, [pc, #80]	; (8018824 <_fflush_r+0x6c>)
 80187d4:	429c      	cmp	r4, r3
 80187d6:	d11b      	bne.n	8018810 <_fflush_r+0x58>
 80187d8:	686c      	ldr	r4, [r5, #4]
 80187da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80187de:	2b00      	cmp	r3, #0
 80187e0:	d0ef      	beq.n	80187c2 <_fflush_r+0xa>
 80187e2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80187e4:	07d0      	lsls	r0, r2, #31
 80187e6:	d404      	bmi.n	80187f2 <_fflush_r+0x3a>
 80187e8:	0599      	lsls	r1, r3, #22
 80187ea:	d402      	bmi.n	80187f2 <_fflush_r+0x3a>
 80187ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80187ee:	f7ff fd2c 	bl	801824a <__retarget_lock_acquire_recursive>
 80187f2:	4628      	mov	r0, r5
 80187f4:	4621      	mov	r1, r4
 80187f6:	f7ff ff59 	bl	80186ac <__sflush_r>
 80187fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80187fc:	07da      	lsls	r2, r3, #31
 80187fe:	4605      	mov	r5, r0
 8018800:	d4e0      	bmi.n	80187c4 <_fflush_r+0xc>
 8018802:	89a3      	ldrh	r3, [r4, #12]
 8018804:	059b      	lsls	r3, r3, #22
 8018806:	d4dd      	bmi.n	80187c4 <_fflush_r+0xc>
 8018808:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801880a:	f7ff fd1f 	bl	801824c <__retarget_lock_release_recursive>
 801880e:	e7d9      	b.n	80187c4 <_fflush_r+0xc>
 8018810:	4b05      	ldr	r3, [pc, #20]	; (8018828 <_fflush_r+0x70>)
 8018812:	429c      	cmp	r4, r3
 8018814:	d101      	bne.n	801881a <_fflush_r+0x62>
 8018816:	68ac      	ldr	r4, [r5, #8]
 8018818:	e7df      	b.n	80187da <_fflush_r+0x22>
 801881a:	4b04      	ldr	r3, [pc, #16]	; (801882c <_fflush_r+0x74>)
 801881c:	429c      	cmp	r4, r3
 801881e:	bf08      	it	eq
 8018820:	68ec      	ldreq	r4, [r5, #12]
 8018822:	e7da      	b.n	80187da <_fflush_r+0x22>
 8018824:	080270a0 	.word	0x080270a0
 8018828:	080270c0 	.word	0x080270c0
 801882c:	08027080 	.word	0x08027080

08018830 <fiprintf>:
 8018830:	b40e      	push	{r1, r2, r3}
 8018832:	b503      	push	{r0, r1, lr}
 8018834:	4601      	mov	r1, r0
 8018836:	ab03      	add	r3, sp, #12
 8018838:	4805      	ldr	r0, [pc, #20]	; (8018850 <fiprintf+0x20>)
 801883a:	f853 2b04 	ldr.w	r2, [r3], #4
 801883e:	6800      	ldr	r0, [r0, #0]
 8018840:	9301      	str	r3, [sp, #4]
 8018842:	f000 f8a3 	bl	801898c <_vfiprintf_r>
 8018846:	b002      	add	sp, #8
 8018848:	f85d eb04 	ldr.w	lr, [sp], #4
 801884c:	b003      	add	sp, #12
 801884e:	4770      	bx	lr
 8018850:	20000034 	.word	0x20000034

08018854 <_lseek_r>:
 8018854:	b538      	push	{r3, r4, r5, lr}
 8018856:	4d07      	ldr	r5, [pc, #28]	; (8018874 <_lseek_r+0x20>)
 8018858:	4604      	mov	r4, r0
 801885a:	4608      	mov	r0, r1
 801885c:	4611      	mov	r1, r2
 801885e:	2200      	movs	r2, #0
 8018860:	602a      	str	r2, [r5, #0]
 8018862:	461a      	mov	r2, r3
 8018864:	f7e8 fa12 	bl	8000c8c <_lseek>
 8018868:	1c43      	adds	r3, r0, #1
 801886a:	d102      	bne.n	8018872 <_lseek_r+0x1e>
 801886c:	682b      	ldr	r3, [r5, #0]
 801886e:	b103      	cbz	r3, 8018872 <_lseek_r+0x1e>
 8018870:	6023      	str	r3, [r4, #0]
 8018872:	bd38      	pop	{r3, r4, r5, pc}
 8018874:	20010f18 	.word	0x20010f18

08018878 <malloc>:
 8018878:	4b02      	ldr	r3, [pc, #8]	; (8018884 <malloc+0xc>)
 801887a:	4601      	mov	r1, r0
 801887c:	6818      	ldr	r0, [r3, #0]
 801887e:	f7ff bd2d 	b.w	80182dc <_malloc_r>
 8018882:	bf00      	nop
 8018884:	20000034 	.word	0x20000034

08018888 <__malloc_lock>:
 8018888:	4801      	ldr	r0, [pc, #4]	; (8018890 <__malloc_lock+0x8>)
 801888a:	f7ff bcde 	b.w	801824a <__retarget_lock_acquire_recursive>
 801888e:	bf00      	nop
 8018890:	20010f0c 	.word	0x20010f0c

08018894 <__malloc_unlock>:
 8018894:	4801      	ldr	r0, [pc, #4]	; (801889c <__malloc_unlock+0x8>)
 8018896:	f7ff bcd9 	b.w	801824c <__retarget_lock_release_recursive>
 801889a:	bf00      	nop
 801889c:	20010f0c 	.word	0x20010f0c

080188a0 <_free_r>:
 80188a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80188a2:	2900      	cmp	r1, #0
 80188a4:	d044      	beq.n	8018930 <_free_r+0x90>
 80188a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80188aa:	9001      	str	r0, [sp, #4]
 80188ac:	2b00      	cmp	r3, #0
 80188ae:	f1a1 0404 	sub.w	r4, r1, #4
 80188b2:	bfb8      	it	lt
 80188b4:	18e4      	addlt	r4, r4, r3
 80188b6:	f7ff ffe7 	bl	8018888 <__malloc_lock>
 80188ba:	4a1e      	ldr	r2, [pc, #120]	; (8018934 <_free_r+0x94>)
 80188bc:	9801      	ldr	r0, [sp, #4]
 80188be:	6813      	ldr	r3, [r2, #0]
 80188c0:	b933      	cbnz	r3, 80188d0 <_free_r+0x30>
 80188c2:	6063      	str	r3, [r4, #4]
 80188c4:	6014      	str	r4, [r2, #0]
 80188c6:	b003      	add	sp, #12
 80188c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80188cc:	f7ff bfe2 	b.w	8018894 <__malloc_unlock>
 80188d0:	42a3      	cmp	r3, r4
 80188d2:	d908      	bls.n	80188e6 <_free_r+0x46>
 80188d4:	6825      	ldr	r5, [r4, #0]
 80188d6:	1961      	adds	r1, r4, r5
 80188d8:	428b      	cmp	r3, r1
 80188da:	bf01      	itttt	eq
 80188dc:	6819      	ldreq	r1, [r3, #0]
 80188de:	685b      	ldreq	r3, [r3, #4]
 80188e0:	1949      	addeq	r1, r1, r5
 80188e2:	6021      	streq	r1, [r4, #0]
 80188e4:	e7ed      	b.n	80188c2 <_free_r+0x22>
 80188e6:	461a      	mov	r2, r3
 80188e8:	685b      	ldr	r3, [r3, #4]
 80188ea:	b10b      	cbz	r3, 80188f0 <_free_r+0x50>
 80188ec:	42a3      	cmp	r3, r4
 80188ee:	d9fa      	bls.n	80188e6 <_free_r+0x46>
 80188f0:	6811      	ldr	r1, [r2, #0]
 80188f2:	1855      	adds	r5, r2, r1
 80188f4:	42a5      	cmp	r5, r4
 80188f6:	d10b      	bne.n	8018910 <_free_r+0x70>
 80188f8:	6824      	ldr	r4, [r4, #0]
 80188fa:	4421      	add	r1, r4
 80188fc:	1854      	adds	r4, r2, r1
 80188fe:	42a3      	cmp	r3, r4
 8018900:	6011      	str	r1, [r2, #0]
 8018902:	d1e0      	bne.n	80188c6 <_free_r+0x26>
 8018904:	681c      	ldr	r4, [r3, #0]
 8018906:	685b      	ldr	r3, [r3, #4]
 8018908:	6053      	str	r3, [r2, #4]
 801890a:	4421      	add	r1, r4
 801890c:	6011      	str	r1, [r2, #0]
 801890e:	e7da      	b.n	80188c6 <_free_r+0x26>
 8018910:	d902      	bls.n	8018918 <_free_r+0x78>
 8018912:	230c      	movs	r3, #12
 8018914:	6003      	str	r3, [r0, #0]
 8018916:	e7d6      	b.n	80188c6 <_free_r+0x26>
 8018918:	6825      	ldr	r5, [r4, #0]
 801891a:	1961      	adds	r1, r4, r5
 801891c:	428b      	cmp	r3, r1
 801891e:	bf04      	itt	eq
 8018920:	6819      	ldreq	r1, [r3, #0]
 8018922:	685b      	ldreq	r3, [r3, #4]
 8018924:	6063      	str	r3, [r4, #4]
 8018926:	bf04      	itt	eq
 8018928:	1949      	addeq	r1, r1, r5
 801892a:	6021      	streq	r1, [r4, #0]
 801892c:	6054      	str	r4, [r2, #4]
 801892e:	e7ca      	b.n	80188c6 <_free_r+0x26>
 8018930:	b003      	add	sp, #12
 8018932:	bd30      	pop	{r4, r5, pc}
 8018934:	20010f10 	.word	0x20010f10

08018938 <__sfputc_r>:
 8018938:	6893      	ldr	r3, [r2, #8]
 801893a:	3b01      	subs	r3, #1
 801893c:	2b00      	cmp	r3, #0
 801893e:	b410      	push	{r4}
 8018940:	6093      	str	r3, [r2, #8]
 8018942:	da08      	bge.n	8018956 <__sfputc_r+0x1e>
 8018944:	6994      	ldr	r4, [r2, #24]
 8018946:	42a3      	cmp	r3, r4
 8018948:	db01      	blt.n	801894e <__sfputc_r+0x16>
 801894a:	290a      	cmp	r1, #10
 801894c:	d103      	bne.n	8018956 <__sfputc_r+0x1e>
 801894e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018952:	f000 baf1 	b.w	8018f38 <__swbuf_r>
 8018956:	6813      	ldr	r3, [r2, #0]
 8018958:	1c58      	adds	r0, r3, #1
 801895a:	6010      	str	r0, [r2, #0]
 801895c:	7019      	strb	r1, [r3, #0]
 801895e:	4608      	mov	r0, r1
 8018960:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018964:	4770      	bx	lr

08018966 <__sfputs_r>:
 8018966:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018968:	4606      	mov	r6, r0
 801896a:	460f      	mov	r7, r1
 801896c:	4614      	mov	r4, r2
 801896e:	18d5      	adds	r5, r2, r3
 8018970:	42ac      	cmp	r4, r5
 8018972:	d101      	bne.n	8018978 <__sfputs_r+0x12>
 8018974:	2000      	movs	r0, #0
 8018976:	e007      	b.n	8018988 <__sfputs_r+0x22>
 8018978:	f814 1b01 	ldrb.w	r1, [r4], #1
 801897c:	463a      	mov	r2, r7
 801897e:	4630      	mov	r0, r6
 8018980:	f7ff ffda 	bl	8018938 <__sfputc_r>
 8018984:	1c43      	adds	r3, r0, #1
 8018986:	d1f3      	bne.n	8018970 <__sfputs_r+0xa>
 8018988:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801898c <_vfiprintf_r>:
 801898c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018990:	460d      	mov	r5, r1
 8018992:	b09d      	sub	sp, #116	; 0x74
 8018994:	4614      	mov	r4, r2
 8018996:	4698      	mov	r8, r3
 8018998:	4606      	mov	r6, r0
 801899a:	b118      	cbz	r0, 80189a4 <_vfiprintf_r+0x18>
 801899c:	6983      	ldr	r3, [r0, #24]
 801899e:	b90b      	cbnz	r3, 80189a4 <_vfiprintf_r+0x18>
 80189a0:	f7ff fb90 	bl	80180c4 <__sinit>
 80189a4:	4b89      	ldr	r3, [pc, #548]	; (8018bcc <_vfiprintf_r+0x240>)
 80189a6:	429d      	cmp	r5, r3
 80189a8:	d11b      	bne.n	80189e2 <_vfiprintf_r+0x56>
 80189aa:	6875      	ldr	r5, [r6, #4]
 80189ac:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80189ae:	07d9      	lsls	r1, r3, #31
 80189b0:	d405      	bmi.n	80189be <_vfiprintf_r+0x32>
 80189b2:	89ab      	ldrh	r3, [r5, #12]
 80189b4:	059a      	lsls	r2, r3, #22
 80189b6:	d402      	bmi.n	80189be <_vfiprintf_r+0x32>
 80189b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80189ba:	f7ff fc46 	bl	801824a <__retarget_lock_acquire_recursive>
 80189be:	89ab      	ldrh	r3, [r5, #12]
 80189c0:	071b      	lsls	r3, r3, #28
 80189c2:	d501      	bpl.n	80189c8 <_vfiprintf_r+0x3c>
 80189c4:	692b      	ldr	r3, [r5, #16]
 80189c6:	b9eb      	cbnz	r3, 8018a04 <_vfiprintf_r+0x78>
 80189c8:	4629      	mov	r1, r5
 80189ca:	4630      	mov	r0, r6
 80189cc:	f000 fb06 	bl	8018fdc <__swsetup_r>
 80189d0:	b1c0      	cbz	r0, 8018a04 <_vfiprintf_r+0x78>
 80189d2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80189d4:	07dc      	lsls	r4, r3, #31
 80189d6:	d50e      	bpl.n	80189f6 <_vfiprintf_r+0x6a>
 80189d8:	f04f 30ff 	mov.w	r0, #4294967295
 80189dc:	b01d      	add	sp, #116	; 0x74
 80189de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80189e2:	4b7b      	ldr	r3, [pc, #492]	; (8018bd0 <_vfiprintf_r+0x244>)
 80189e4:	429d      	cmp	r5, r3
 80189e6:	d101      	bne.n	80189ec <_vfiprintf_r+0x60>
 80189e8:	68b5      	ldr	r5, [r6, #8]
 80189ea:	e7df      	b.n	80189ac <_vfiprintf_r+0x20>
 80189ec:	4b79      	ldr	r3, [pc, #484]	; (8018bd4 <_vfiprintf_r+0x248>)
 80189ee:	429d      	cmp	r5, r3
 80189f0:	bf08      	it	eq
 80189f2:	68f5      	ldreq	r5, [r6, #12]
 80189f4:	e7da      	b.n	80189ac <_vfiprintf_r+0x20>
 80189f6:	89ab      	ldrh	r3, [r5, #12]
 80189f8:	0598      	lsls	r0, r3, #22
 80189fa:	d4ed      	bmi.n	80189d8 <_vfiprintf_r+0x4c>
 80189fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80189fe:	f7ff fc25 	bl	801824c <__retarget_lock_release_recursive>
 8018a02:	e7e9      	b.n	80189d8 <_vfiprintf_r+0x4c>
 8018a04:	2300      	movs	r3, #0
 8018a06:	9309      	str	r3, [sp, #36]	; 0x24
 8018a08:	2320      	movs	r3, #32
 8018a0a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8018a0e:	f8cd 800c 	str.w	r8, [sp, #12]
 8018a12:	2330      	movs	r3, #48	; 0x30
 8018a14:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8018bd8 <_vfiprintf_r+0x24c>
 8018a18:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8018a1c:	f04f 0901 	mov.w	r9, #1
 8018a20:	4623      	mov	r3, r4
 8018a22:	469a      	mov	sl, r3
 8018a24:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018a28:	b10a      	cbz	r2, 8018a2e <_vfiprintf_r+0xa2>
 8018a2a:	2a25      	cmp	r2, #37	; 0x25
 8018a2c:	d1f9      	bne.n	8018a22 <_vfiprintf_r+0x96>
 8018a2e:	ebba 0b04 	subs.w	fp, sl, r4
 8018a32:	d00b      	beq.n	8018a4c <_vfiprintf_r+0xc0>
 8018a34:	465b      	mov	r3, fp
 8018a36:	4622      	mov	r2, r4
 8018a38:	4629      	mov	r1, r5
 8018a3a:	4630      	mov	r0, r6
 8018a3c:	f7ff ff93 	bl	8018966 <__sfputs_r>
 8018a40:	3001      	adds	r0, #1
 8018a42:	f000 80aa 	beq.w	8018b9a <_vfiprintf_r+0x20e>
 8018a46:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018a48:	445a      	add	r2, fp
 8018a4a:	9209      	str	r2, [sp, #36]	; 0x24
 8018a4c:	f89a 3000 	ldrb.w	r3, [sl]
 8018a50:	2b00      	cmp	r3, #0
 8018a52:	f000 80a2 	beq.w	8018b9a <_vfiprintf_r+0x20e>
 8018a56:	2300      	movs	r3, #0
 8018a58:	f04f 32ff 	mov.w	r2, #4294967295
 8018a5c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018a60:	f10a 0a01 	add.w	sl, sl, #1
 8018a64:	9304      	str	r3, [sp, #16]
 8018a66:	9307      	str	r3, [sp, #28]
 8018a68:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8018a6c:	931a      	str	r3, [sp, #104]	; 0x68
 8018a6e:	4654      	mov	r4, sl
 8018a70:	2205      	movs	r2, #5
 8018a72:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018a76:	4858      	ldr	r0, [pc, #352]	; (8018bd8 <_vfiprintf_r+0x24c>)
 8018a78:	f7e7 fbd2 	bl	8000220 <memchr>
 8018a7c:	9a04      	ldr	r2, [sp, #16]
 8018a7e:	b9d8      	cbnz	r0, 8018ab8 <_vfiprintf_r+0x12c>
 8018a80:	06d1      	lsls	r1, r2, #27
 8018a82:	bf44      	itt	mi
 8018a84:	2320      	movmi	r3, #32
 8018a86:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8018a8a:	0713      	lsls	r3, r2, #28
 8018a8c:	bf44      	itt	mi
 8018a8e:	232b      	movmi	r3, #43	; 0x2b
 8018a90:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8018a94:	f89a 3000 	ldrb.w	r3, [sl]
 8018a98:	2b2a      	cmp	r3, #42	; 0x2a
 8018a9a:	d015      	beq.n	8018ac8 <_vfiprintf_r+0x13c>
 8018a9c:	9a07      	ldr	r2, [sp, #28]
 8018a9e:	4654      	mov	r4, sl
 8018aa0:	2000      	movs	r0, #0
 8018aa2:	f04f 0c0a 	mov.w	ip, #10
 8018aa6:	4621      	mov	r1, r4
 8018aa8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018aac:	3b30      	subs	r3, #48	; 0x30
 8018aae:	2b09      	cmp	r3, #9
 8018ab0:	d94e      	bls.n	8018b50 <_vfiprintf_r+0x1c4>
 8018ab2:	b1b0      	cbz	r0, 8018ae2 <_vfiprintf_r+0x156>
 8018ab4:	9207      	str	r2, [sp, #28]
 8018ab6:	e014      	b.n	8018ae2 <_vfiprintf_r+0x156>
 8018ab8:	eba0 0308 	sub.w	r3, r0, r8
 8018abc:	fa09 f303 	lsl.w	r3, r9, r3
 8018ac0:	4313      	orrs	r3, r2
 8018ac2:	9304      	str	r3, [sp, #16]
 8018ac4:	46a2      	mov	sl, r4
 8018ac6:	e7d2      	b.n	8018a6e <_vfiprintf_r+0xe2>
 8018ac8:	9b03      	ldr	r3, [sp, #12]
 8018aca:	1d19      	adds	r1, r3, #4
 8018acc:	681b      	ldr	r3, [r3, #0]
 8018ace:	9103      	str	r1, [sp, #12]
 8018ad0:	2b00      	cmp	r3, #0
 8018ad2:	bfbb      	ittet	lt
 8018ad4:	425b      	neglt	r3, r3
 8018ad6:	f042 0202 	orrlt.w	r2, r2, #2
 8018ada:	9307      	strge	r3, [sp, #28]
 8018adc:	9307      	strlt	r3, [sp, #28]
 8018ade:	bfb8      	it	lt
 8018ae0:	9204      	strlt	r2, [sp, #16]
 8018ae2:	7823      	ldrb	r3, [r4, #0]
 8018ae4:	2b2e      	cmp	r3, #46	; 0x2e
 8018ae6:	d10c      	bne.n	8018b02 <_vfiprintf_r+0x176>
 8018ae8:	7863      	ldrb	r3, [r4, #1]
 8018aea:	2b2a      	cmp	r3, #42	; 0x2a
 8018aec:	d135      	bne.n	8018b5a <_vfiprintf_r+0x1ce>
 8018aee:	9b03      	ldr	r3, [sp, #12]
 8018af0:	1d1a      	adds	r2, r3, #4
 8018af2:	681b      	ldr	r3, [r3, #0]
 8018af4:	9203      	str	r2, [sp, #12]
 8018af6:	2b00      	cmp	r3, #0
 8018af8:	bfb8      	it	lt
 8018afa:	f04f 33ff 	movlt.w	r3, #4294967295
 8018afe:	3402      	adds	r4, #2
 8018b00:	9305      	str	r3, [sp, #20]
 8018b02:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8018be8 <_vfiprintf_r+0x25c>
 8018b06:	7821      	ldrb	r1, [r4, #0]
 8018b08:	2203      	movs	r2, #3
 8018b0a:	4650      	mov	r0, sl
 8018b0c:	f7e7 fb88 	bl	8000220 <memchr>
 8018b10:	b140      	cbz	r0, 8018b24 <_vfiprintf_r+0x198>
 8018b12:	2340      	movs	r3, #64	; 0x40
 8018b14:	eba0 000a 	sub.w	r0, r0, sl
 8018b18:	fa03 f000 	lsl.w	r0, r3, r0
 8018b1c:	9b04      	ldr	r3, [sp, #16]
 8018b1e:	4303      	orrs	r3, r0
 8018b20:	3401      	adds	r4, #1
 8018b22:	9304      	str	r3, [sp, #16]
 8018b24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018b28:	482c      	ldr	r0, [pc, #176]	; (8018bdc <_vfiprintf_r+0x250>)
 8018b2a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8018b2e:	2206      	movs	r2, #6
 8018b30:	f7e7 fb76 	bl	8000220 <memchr>
 8018b34:	2800      	cmp	r0, #0
 8018b36:	d03f      	beq.n	8018bb8 <_vfiprintf_r+0x22c>
 8018b38:	4b29      	ldr	r3, [pc, #164]	; (8018be0 <_vfiprintf_r+0x254>)
 8018b3a:	bb1b      	cbnz	r3, 8018b84 <_vfiprintf_r+0x1f8>
 8018b3c:	9b03      	ldr	r3, [sp, #12]
 8018b3e:	3307      	adds	r3, #7
 8018b40:	f023 0307 	bic.w	r3, r3, #7
 8018b44:	3308      	adds	r3, #8
 8018b46:	9303      	str	r3, [sp, #12]
 8018b48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018b4a:	443b      	add	r3, r7
 8018b4c:	9309      	str	r3, [sp, #36]	; 0x24
 8018b4e:	e767      	b.n	8018a20 <_vfiprintf_r+0x94>
 8018b50:	fb0c 3202 	mla	r2, ip, r2, r3
 8018b54:	460c      	mov	r4, r1
 8018b56:	2001      	movs	r0, #1
 8018b58:	e7a5      	b.n	8018aa6 <_vfiprintf_r+0x11a>
 8018b5a:	2300      	movs	r3, #0
 8018b5c:	3401      	adds	r4, #1
 8018b5e:	9305      	str	r3, [sp, #20]
 8018b60:	4619      	mov	r1, r3
 8018b62:	f04f 0c0a 	mov.w	ip, #10
 8018b66:	4620      	mov	r0, r4
 8018b68:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018b6c:	3a30      	subs	r2, #48	; 0x30
 8018b6e:	2a09      	cmp	r2, #9
 8018b70:	d903      	bls.n	8018b7a <_vfiprintf_r+0x1ee>
 8018b72:	2b00      	cmp	r3, #0
 8018b74:	d0c5      	beq.n	8018b02 <_vfiprintf_r+0x176>
 8018b76:	9105      	str	r1, [sp, #20]
 8018b78:	e7c3      	b.n	8018b02 <_vfiprintf_r+0x176>
 8018b7a:	fb0c 2101 	mla	r1, ip, r1, r2
 8018b7e:	4604      	mov	r4, r0
 8018b80:	2301      	movs	r3, #1
 8018b82:	e7f0      	b.n	8018b66 <_vfiprintf_r+0x1da>
 8018b84:	ab03      	add	r3, sp, #12
 8018b86:	9300      	str	r3, [sp, #0]
 8018b88:	462a      	mov	r2, r5
 8018b8a:	4b16      	ldr	r3, [pc, #88]	; (8018be4 <_vfiprintf_r+0x258>)
 8018b8c:	a904      	add	r1, sp, #16
 8018b8e:	4630      	mov	r0, r6
 8018b90:	f3af 8000 	nop.w
 8018b94:	4607      	mov	r7, r0
 8018b96:	1c78      	adds	r0, r7, #1
 8018b98:	d1d6      	bne.n	8018b48 <_vfiprintf_r+0x1bc>
 8018b9a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8018b9c:	07d9      	lsls	r1, r3, #31
 8018b9e:	d405      	bmi.n	8018bac <_vfiprintf_r+0x220>
 8018ba0:	89ab      	ldrh	r3, [r5, #12]
 8018ba2:	059a      	lsls	r2, r3, #22
 8018ba4:	d402      	bmi.n	8018bac <_vfiprintf_r+0x220>
 8018ba6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8018ba8:	f7ff fb50 	bl	801824c <__retarget_lock_release_recursive>
 8018bac:	89ab      	ldrh	r3, [r5, #12]
 8018bae:	065b      	lsls	r3, r3, #25
 8018bb0:	f53f af12 	bmi.w	80189d8 <_vfiprintf_r+0x4c>
 8018bb4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8018bb6:	e711      	b.n	80189dc <_vfiprintf_r+0x50>
 8018bb8:	ab03      	add	r3, sp, #12
 8018bba:	9300      	str	r3, [sp, #0]
 8018bbc:	462a      	mov	r2, r5
 8018bbe:	4b09      	ldr	r3, [pc, #36]	; (8018be4 <_vfiprintf_r+0x258>)
 8018bc0:	a904      	add	r1, sp, #16
 8018bc2:	4630      	mov	r0, r6
 8018bc4:	f000 f880 	bl	8018cc8 <_printf_i>
 8018bc8:	e7e4      	b.n	8018b94 <_vfiprintf_r+0x208>
 8018bca:	bf00      	nop
 8018bcc:	080270a0 	.word	0x080270a0
 8018bd0:	080270c0 	.word	0x080270c0
 8018bd4:	08027080 	.word	0x08027080
 8018bd8:	08027192 	.word	0x08027192
 8018bdc:	0802719c 	.word	0x0802719c
 8018be0:	00000000 	.word	0x00000000
 8018be4:	08018967 	.word	0x08018967
 8018be8:	08027198 	.word	0x08027198

08018bec <_printf_common>:
 8018bec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018bf0:	4616      	mov	r6, r2
 8018bf2:	4699      	mov	r9, r3
 8018bf4:	688a      	ldr	r2, [r1, #8]
 8018bf6:	690b      	ldr	r3, [r1, #16]
 8018bf8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8018bfc:	4293      	cmp	r3, r2
 8018bfe:	bfb8      	it	lt
 8018c00:	4613      	movlt	r3, r2
 8018c02:	6033      	str	r3, [r6, #0]
 8018c04:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8018c08:	4607      	mov	r7, r0
 8018c0a:	460c      	mov	r4, r1
 8018c0c:	b10a      	cbz	r2, 8018c12 <_printf_common+0x26>
 8018c0e:	3301      	adds	r3, #1
 8018c10:	6033      	str	r3, [r6, #0]
 8018c12:	6823      	ldr	r3, [r4, #0]
 8018c14:	0699      	lsls	r1, r3, #26
 8018c16:	bf42      	ittt	mi
 8018c18:	6833      	ldrmi	r3, [r6, #0]
 8018c1a:	3302      	addmi	r3, #2
 8018c1c:	6033      	strmi	r3, [r6, #0]
 8018c1e:	6825      	ldr	r5, [r4, #0]
 8018c20:	f015 0506 	ands.w	r5, r5, #6
 8018c24:	d106      	bne.n	8018c34 <_printf_common+0x48>
 8018c26:	f104 0a19 	add.w	sl, r4, #25
 8018c2a:	68e3      	ldr	r3, [r4, #12]
 8018c2c:	6832      	ldr	r2, [r6, #0]
 8018c2e:	1a9b      	subs	r3, r3, r2
 8018c30:	42ab      	cmp	r3, r5
 8018c32:	dc26      	bgt.n	8018c82 <_printf_common+0x96>
 8018c34:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8018c38:	1e13      	subs	r3, r2, #0
 8018c3a:	6822      	ldr	r2, [r4, #0]
 8018c3c:	bf18      	it	ne
 8018c3e:	2301      	movne	r3, #1
 8018c40:	0692      	lsls	r2, r2, #26
 8018c42:	d42b      	bmi.n	8018c9c <_printf_common+0xb0>
 8018c44:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8018c48:	4649      	mov	r1, r9
 8018c4a:	4638      	mov	r0, r7
 8018c4c:	47c0      	blx	r8
 8018c4e:	3001      	adds	r0, #1
 8018c50:	d01e      	beq.n	8018c90 <_printf_common+0xa4>
 8018c52:	6823      	ldr	r3, [r4, #0]
 8018c54:	68e5      	ldr	r5, [r4, #12]
 8018c56:	6832      	ldr	r2, [r6, #0]
 8018c58:	f003 0306 	and.w	r3, r3, #6
 8018c5c:	2b04      	cmp	r3, #4
 8018c5e:	bf08      	it	eq
 8018c60:	1aad      	subeq	r5, r5, r2
 8018c62:	68a3      	ldr	r3, [r4, #8]
 8018c64:	6922      	ldr	r2, [r4, #16]
 8018c66:	bf0c      	ite	eq
 8018c68:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8018c6c:	2500      	movne	r5, #0
 8018c6e:	4293      	cmp	r3, r2
 8018c70:	bfc4      	itt	gt
 8018c72:	1a9b      	subgt	r3, r3, r2
 8018c74:	18ed      	addgt	r5, r5, r3
 8018c76:	2600      	movs	r6, #0
 8018c78:	341a      	adds	r4, #26
 8018c7a:	42b5      	cmp	r5, r6
 8018c7c:	d11a      	bne.n	8018cb4 <_printf_common+0xc8>
 8018c7e:	2000      	movs	r0, #0
 8018c80:	e008      	b.n	8018c94 <_printf_common+0xa8>
 8018c82:	2301      	movs	r3, #1
 8018c84:	4652      	mov	r2, sl
 8018c86:	4649      	mov	r1, r9
 8018c88:	4638      	mov	r0, r7
 8018c8a:	47c0      	blx	r8
 8018c8c:	3001      	adds	r0, #1
 8018c8e:	d103      	bne.n	8018c98 <_printf_common+0xac>
 8018c90:	f04f 30ff 	mov.w	r0, #4294967295
 8018c94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018c98:	3501      	adds	r5, #1
 8018c9a:	e7c6      	b.n	8018c2a <_printf_common+0x3e>
 8018c9c:	18e1      	adds	r1, r4, r3
 8018c9e:	1c5a      	adds	r2, r3, #1
 8018ca0:	2030      	movs	r0, #48	; 0x30
 8018ca2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8018ca6:	4422      	add	r2, r4
 8018ca8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8018cac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8018cb0:	3302      	adds	r3, #2
 8018cb2:	e7c7      	b.n	8018c44 <_printf_common+0x58>
 8018cb4:	2301      	movs	r3, #1
 8018cb6:	4622      	mov	r2, r4
 8018cb8:	4649      	mov	r1, r9
 8018cba:	4638      	mov	r0, r7
 8018cbc:	47c0      	blx	r8
 8018cbe:	3001      	adds	r0, #1
 8018cc0:	d0e6      	beq.n	8018c90 <_printf_common+0xa4>
 8018cc2:	3601      	adds	r6, #1
 8018cc4:	e7d9      	b.n	8018c7a <_printf_common+0x8e>
	...

08018cc8 <_printf_i>:
 8018cc8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8018ccc:	7e0f      	ldrb	r7, [r1, #24]
 8018cce:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8018cd0:	2f78      	cmp	r7, #120	; 0x78
 8018cd2:	4691      	mov	r9, r2
 8018cd4:	4680      	mov	r8, r0
 8018cd6:	460c      	mov	r4, r1
 8018cd8:	469a      	mov	sl, r3
 8018cda:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8018cde:	d807      	bhi.n	8018cf0 <_printf_i+0x28>
 8018ce0:	2f62      	cmp	r7, #98	; 0x62
 8018ce2:	d80a      	bhi.n	8018cfa <_printf_i+0x32>
 8018ce4:	2f00      	cmp	r7, #0
 8018ce6:	f000 80d8 	beq.w	8018e9a <_printf_i+0x1d2>
 8018cea:	2f58      	cmp	r7, #88	; 0x58
 8018cec:	f000 80a3 	beq.w	8018e36 <_printf_i+0x16e>
 8018cf0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8018cf4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8018cf8:	e03a      	b.n	8018d70 <_printf_i+0xa8>
 8018cfa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8018cfe:	2b15      	cmp	r3, #21
 8018d00:	d8f6      	bhi.n	8018cf0 <_printf_i+0x28>
 8018d02:	a101      	add	r1, pc, #4	; (adr r1, 8018d08 <_printf_i+0x40>)
 8018d04:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8018d08:	08018d61 	.word	0x08018d61
 8018d0c:	08018d75 	.word	0x08018d75
 8018d10:	08018cf1 	.word	0x08018cf1
 8018d14:	08018cf1 	.word	0x08018cf1
 8018d18:	08018cf1 	.word	0x08018cf1
 8018d1c:	08018cf1 	.word	0x08018cf1
 8018d20:	08018d75 	.word	0x08018d75
 8018d24:	08018cf1 	.word	0x08018cf1
 8018d28:	08018cf1 	.word	0x08018cf1
 8018d2c:	08018cf1 	.word	0x08018cf1
 8018d30:	08018cf1 	.word	0x08018cf1
 8018d34:	08018e81 	.word	0x08018e81
 8018d38:	08018da5 	.word	0x08018da5
 8018d3c:	08018e63 	.word	0x08018e63
 8018d40:	08018cf1 	.word	0x08018cf1
 8018d44:	08018cf1 	.word	0x08018cf1
 8018d48:	08018ea3 	.word	0x08018ea3
 8018d4c:	08018cf1 	.word	0x08018cf1
 8018d50:	08018da5 	.word	0x08018da5
 8018d54:	08018cf1 	.word	0x08018cf1
 8018d58:	08018cf1 	.word	0x08018cf1
 8018d5c:	08018e6b 	.word	0x08018e6b
 8018d60:	682b      	ldr	r3, [r5, #0]
 8018d62:	1d1a      	adds	r2, r3, #4
 8018d64:	681b      	ldr	r3, [r3, #0]
 8018d66:	602a      	str	r2, [r5, #0]
 8018d68:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8018d6c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8018d70:	2301      	movs	r3, #1
 8018d72:	e0a3      	b.n	8018ebc <_printf_i+0x1f4>
 8018d74:	6820      	ldr	r0, [r4, #0]
 8018d76:	6829      	ldr	r1, [r5, #0]
 8018d78:	0606      	lsls	r6, r0, #24
 8018d7a:	f101 0304 	add.w	r3, r1, #4
 8018d7e:	d50a      	bpl.n	8018d96 <_printf_i+0xce>
 8018d80:	680e      	ldr	r6, [r1, #0]
 8018d82:	602b      	str	r3, [r5, #0]
 8018d84:	2e00      	cmp	r6, #0
 8018d86:	da03      	bge.n	8018d90 <_printf_i+0xc8>
 8018d88:	232d      	movs	r3, #45	; 0x2d
 8018d8a:	4276      	negs	r6, r6
 8018d8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8018d90:	485e      	ldr	r0, [pc, #376]	; (8018f0c <_printf_i+0x244>)
 8018d92:	230a      	movs	r3, #10
 8018d94:	e019      	b.n	8018dca <_printf_i+0x102>
 8018d96:	680e      	ldr	r6, [r1, #0]
 8018d98:	602b      	str	r3, [r5, #0]
 8018d9a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8018d9e:	bf18      	it	ne
 8018da0:	b236      	sxthne	r6, r6
 8018da2:	e7ef      	b.n	8018d84 <_printf_i+0xbc>
 8018da4:	682b      	ldr	r3, [r5, #0]
 8018da6:	6820      	ldr	r0, [r4, #0]
 8018da8:	1d19      	adds	r1, r3, #4
 8018daa:	6029      	str	r1, [r5, #0]
 8018dac:	0601      	lsls	r1, r0, #24
 8018dae:	d501      	bpl.n	8018db4 <_printf_i+0xec>
 8018db0:	681e      	ldr	r6, [r3, #0]
 8018db2:	e002      	b.n	8018dba <_printf_i+0xf2>
 8018db4:	0646      	lsls	r6, r0, #25
 8018db6:	d5fb      	bpl.n	8018db0 <_printf_i+0xe8>
 8018db8:	881e      	ldrh	r6, [r3, #0]
 8018dba:	4854      	ldr	r0, [pc, #336]	; (8018f0c <_printf_i+0x244>)
 8018dbc:	2f6f      	cmp	r7, #111	; 0x6f
 8018dbe:	bf0c      	ite	eq
 8018dc0:	2308      	moveq	r3, #8
 8018dc2:	230a      	movne	r3, #10
 8018dc4:	2100      	movs	r1, #0
 8018dc6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8018dca:	6865      	ldr	r5, [r4, #4]
 8018dcc:	60a5      	str	r5, [r4, #8]
 8018dce:	2d00      	cmp	r5, #0
 8018dd0:	bfa2      	ittt	ge
 8018dd2:	6821      	ldrge	r1, [r4, #0]
 8018dd4:	f021 0104 	bicge.w	r1, r1, #4
 8018dd8:	6021      	strge	r1, [r4, #0]
 8018dda:	b90e      	cbnz	r6, 8018de0 <_printf_i+0x118>
 8018ddc:	2d00      	cmp	r5, #0
 8018dde:	d04d      	beq.n	8018e7c <_printf_i+0x1b4>
 8018de0:	4615      	mov	r5, r2
 8018de2:	fbb6 f1f3 	udiv	r1, r6, r3
 8018de6:	fb03 6711 	mls	r7, r3, r1, r6
 8018dea:	5dc7      	ldrb	r7, [r0, r7]
 8018dec:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8018df0:	4637      	mov	r7, r6
 8018df2:	42bb      	cmp	r3, r7
 8018df4:	460e      	mov	r6, r1
 8018df6:	d9f4      	bls.n	8018de2 <_printf_i+0x11a>
 8018df8:	2b08      	cmp	r3, #8
 8018dfa:	d10b      	bne.n	8018e14 <_printf_i+0x14c>
 8018dfc:	6823      	ldr	r3, [r4, #0]
 8018dfe:	07de      	lsls	r6, r3, #31
 8018e00:	d508      	bpl.n	8018e14 <_printf_i+0x14c>
 8018e02:	6923      	ldr	r3, [r4, #16]
 8018e04:	6861      	ldr	r1, [r4, #4]
 8018e06:	4299      	cmp	r1, r3
 8018e08:	bfde      	ittt	le
 8018e0a:	2330      	movle	r3, #48	; 0x30
 8018e0c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8018e10:	f105 35ff 	addle.w	r5, r5, #4294967295
 8018e14:	1b52      	subs	r2, r2, r5
 8018e16:	6122      	str	r2, [r4, #16]
 8018e18:	f8cd a000 	str.w	sl, [sp]
 8018e1c:	464b      	mov	r3, r9
 8018e1e:	aa03      	add	r2, sp, #12
 8018e20:	4621      	mov	r1, r4
 8018e22:	4640      	mov	r0, r8
 8018e24:	f7ff fee2 	bl	8018bec <_printf_common>
 8018e28:	3001      	adds	r0, #1
 8018e2a:	d14c      	bne.n	8018ec6 <_printf_i+0x1fe>
 8018e2c:	f04f 30ff 	mov.w	r0, #4294967295
 8018e30:	b004      	add	sp, #16
 8018e32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018e36:	4835      	ldr	r0, [pc, #212]	; (8018f0c <_printf_i+0x244>)
 8018e38:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8018e3c:	6829      	ldr	r1, [r5, #0]
 8018e3e:	6823      	ldr	r3, [r4, #0]
 8018e40:	f851 6b04 	ldr.w	r6, [r1], #4
 8018e44:	6029      	str	r1, [r5, #0]
 8018e46:	061d      	lsls	r5, r3, #24
 8018e48:	d514      	bpl.n	8018e74 <_printf_i+0x1ac>
 8018e4a:	07df      	lsls	r7, r3, #31
 8018e4c:	bf44      	itt	mi
 8018e4e:	f043 0320 	orrmi.w	r3, r3, #32
 8018e52:	6023      	strmi	r3, [r4, #0]
 8018e54:	b91e      	cbnz	r6, 8018e5e <_printf_i+0x196>
 8018e56:	6823      	ldr	r3, [r4, #0]
 8018e58:	f023 0320 	bic.w	r3, r3, #32
 8018e5c:	6023      	str	r3, [r4, #0]
 8018e5e:	2310      	movs	r3, #16
 8018e60:	e7b0      	b.n	8018dc4 <_printf_i+0xfc>
 8018e62:	6823      	ldr	r3, [r4, #0]
 8018e64:	f043 0320 	orr.w	r3, r3, #32
 8018e68:	6023      	str	r3, [r4, #0]
 8018e6a:	2378      	movs	r3, #120	; 0x78
 8018e6c:	4828      	ldr	r0, [pc, #160]	; (8018f10 <_printf_i+0x248>)
 8018e6e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8018e72:	e7e3      	b.n	8018e3c <_printf_i+0x174>
 8018e74:	0659      	lsls	r1, r3, #25
 8018e76:	bf48      	it	mi
 8018e78:	b2b6      	uxthmi	r6, r6
 8018e7a:	e7e6      	b.n	8018e4a <_printf_i+0x182>
 8018e7c:	4615      	mov	r5, r2
 8018e7e:	e7bb      	b.n	8018df8 <_printf_i+0x130>
 8018e80:	682b      	ldr	r3, [r5, #0]
 8018e82:	6826      	ldr	r6, [r4, #0]
 8018e84:	6961      	ldr	r1, [r4, #20]
 8018e86:	1d18      	adds	r0, r3, #4
 8018e88:	6028      	str	r0, [r5, #0]
 8018e8a:	0635      	lsls	r5, r6, #24
 8018e8c:	681b      	ldr	r3, [r3, #0]
 8018e8e:	d501      	bpl.n	8018e94 <_printf_i+0x1cc>
 8018e90:	6019      	str	r1, [r3, #0]
 8018e92:	e002      	b.n	8018e9a <_printf_i+0x1d2>
 8018e94:	0670      	lsls	r0, r6, #25
 8018e96:	d5fb      	bpl.n	8018e90 <_printf_i+0x1c8>
 8018e98:	8019      	strh	r1, [r3, #0]
 8018e9a:	2300      	movs	r3, #0
 8018e9c:	6123      	str	r3, [r4, #16]
 8018e9e:	4615      	mov	r5, r2
 8018ea0:	e7ba      	b.n	8018e18 <_printf_i+0x150>
 8018ea2:	682b      	ldr	r3, [r5, #0]
 8018ea4:	1d1a      	adds	r2, r3, #4
 8018ea6:	602a      	str	r2, [r5, #0]
 8018ea8:	681d      	ldr	r5, [r3, #0]
 8018eaa:	6862      	ldr	r2, [r4, #4]
 8018eac:	2100      	movs	r1, #0
 8018eae:	4628      	mov	r0, r5
 8018eb0:	f7e7 f9b6 	bl	8000220 <memchr>
 8018eb4:	b108      	cbz	r0, 8018eba <_printf_i+0x1f2>
 8018eb6:	1b40      	subs	r0, r0, r5
 8018eb8:	6060      	str	r0, [r4, #4]
 8018eba:	6863      	ldr	r3, [r4, #4]
 8018ebc:	6123      	str	r3, [r4, #16]
 8018ebe:	2300      	movs	r3, #0
 8018ec0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8018ec4:	e7a8      	b.n	8018e18 <_printf_i+0x150>
 8018ec6:	6923      	ldr	r3, [r4, #16]
 8018ec8:	462a      	mov	r2, r5
 8018eca:	4649      	mov	r1, r9
 8018ecc:	4640      	mov	r0, r8
 8018ece:	47d0      	blx	sl
 8018ed0:	3001      	adds	r0, #1
 8018ed2:	d0ab      	beq.n	8018e2c <_printf_i+0x164>
 8018ed4:	6823      	ldr	r3, [r4, #0]
 8018ed6:	079b      	lsls	r3, r3, #30
 8018ed8:	d413      	bmi.n	8018f02 <_printf_i+0x23a>
 8018eda:	68e0      	ldr	r0, [r4, #12]
 8018edc:	9b03      	ldr	r3, [sp, #12]
 8018ede:	4298      	cmp	r0, r3
 8018ee0:	bfb8      	it	lt
 8018ee2:	4618      	movlt	r0, r3
 8018ee4:	e7a4      	b.n	8018e30 <_printf_i+0x168>
 8018ee6:	2301      	movs	r3, #1
 8018ee8:	4632      	mov	r2, r6
 8018eea:	4649      	mov	r1, r9
 8018eec:	4640      	mov	r0, r8
 8018eee:	47d0      	blx	sl
 8018ef0:	3001      	adds	r0, #1
 8018ef2:	d09b      	beq.n	8018e2c <_printf_i+0x164>
 8018ef4:	3501      	adds	r5, #1
 8018ef6:	68e3      	ldr	r3, [r4, #12]
 8018ef8:	9903      	ldr	r1, [sp, #12]
 8018efa:	1a5b      	subs	r3, r3, r1
 8018efc:	42ab      	cmp	r3, r5
 8018efe:	dcf2      	bgt.n	8018ee6 <_printf_i+0x21e>
 8018f00:	e7eb      	b.n	8018eda <_printf_i+0x212>
 8018f02:	2500      	movs	r5, #0
 8018f04:	f104 0619 	add.w	r6, r4, #25
 8018f08:	e7f5      	b.n	8018ef6 <_printf_i+0x22e>
 8018f0a:	bf00      	nop
 8018f0c:	080271a3 	.word	0x080271a3
 8018f10:	080271b4 	.word	0x080271b4

08018f14 <_read_r>:
 8018f14:	b538      	push	{r3, r4, r5, lr}
 8018f16:	4d07      	ldr	r5, [pc, #28]	; (8018f34 <_read_r+0x20>)
 8018f18:	4604      	mov	r4, r0
 8018f1a:	4608      	mov	r0, r1
 8018f1c:	4611      	mov	r1, r2
 8018f1e:	2200      	movs	r2, #0
 8018f20:	602a      	str	r2, [r5, #0]
 8018f22:	461a      	mov	r2, r3
 8018f24:	f7e7 fe52 	bl	8000bcc <_read>
 8018f28:	1c43      	adds	r3, r0, #1
 8018f2a:	d102      	bne.n	8018f32 <_read_r+0x1e>
 8018f2c:	682b      	ldr	r3, [r5, #0]
 8018f2e:	b103      	cbz	r3, 8018f32 <_read_r+0x1e>
 8018f30:	6023      	str	r3, [r4, #0]
 8018f32:	bd38      	pop	{r3, r4, r5, pc}
 8018f34:	20010f18 	.word	0x20010f18

08018f38 <__swbuf_r>:
 8018f38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018f3a:	460e      	mov	r6, r1
 8018f3c:	4614      	mov	r4, r2
 8018f3e:	4605      	mov	r5, r0
 8018f40:	b118      	cbz	r0, 8018f4a <__swbuf_r+0x12>
 8018f42:	6983      	ldr	r3, [r0, #24]
 8018f44:	b90b      	cbnz	r3, 8018f4a <__swbuf_r+0x12>
 8018f46:	f7ff f8bd 	bl	80180c4 <__sinit>
 8018f4a:	4b21      	ldr	r3, [pc, #132]	; (8018fd0 <__swbuf_r+0x98>)
 8018f4c:	429c      	cmp	r4, r3
 8018f4e:	d12b      	bne.n	8018fa8 <__swbuf_r+0x70>
 8018f50:	686c      	ldr	r4, [r5, #4]
 8018f52:	69a3      	ldr	r3, [r4, #24]
 8018f54:	60a3      	str	r3, [r4, #8]
 8018f56:	89a3      	ldrh	r3, [r4, #12]
 8018f58:	071a      	lsls	r2, r3, #28
 8018f5a:	d52f      	bpl.n	8018fbc <__swbuf_r+0x84>
 8018f5c:	6923      	ldr	r3, [r4, #16]
 8018f5e:	b36b      	cbz	r3, 8018fbc <__swbuf_r+0x84>
 8018f60:	6923      	ldr	r3, [r4, #16]
 8018f62:	6820      	ldr	r0, [r4, #0]
 8018f64:	1ac0      	subs	r0, r0, r3
 8018f66:	6963      	ldr	r3, [r4, #20]
 8018f68:	b2f6      	uxtb	r6, r6
 8018f6a:	4283      	cmp	r3, r0
 8018f6c:	4637      	mov	r7, r6
 8018f6e:	dc04      	bgt.n	8018f7a <__swbuf_r+0x42>
 8018f70:	4621      	mov	r1, r4
 8018f72:	4628      	mov	r0, r5
 8018f74:	f7ff fc20 	bl	80187b8 <_fflush_r>
 8018f78:	bb30      	cbnz	r0, 8018fc8 <__swbuf_r+0x90>
 8018f7a:	68a3      	ldr	r3, [r4, #8]
 8018f7c:	3b01      	subs	r3, #1
 8018f7e:	60a3      	str	r3, [r4, #8]
 8018f80:	6823      	ldr	r3, [r4, #0]
 8018f82:	1c5a      	adds	r2, r3, #1
 8018f84:	6022      	str	r2, [r4, #0]
 8018f86:	701e      	strb	r6, [r3, #0]
 8018f88:	6963      	ldr	r3, [r4, #20]
 8018f8a:	3001      	adds	r0, #1
 8018f8c:	4283      	cmp	r3, r0
 8018f8e:	d004      	beq.n	8018f9a <__swbuf_r+0x62>
 8018f90:	89a3      	ldrh	r3, [r4, #12]
 8018f92:	07db      	lsls	r3, r3, #31
 8018f94:	d506      	bpl.n	8018fa4 <__swbuf_r+0x6c>
 8018f96:	2e0a      	cmp	r6, #10
 8018f98:	d104      	bne.n	8018fa4 <__swbuf_r+0x6c>
 8018f9a:	4621      	mov	r1, r4
 8018f9c:	4628      	mov	r0, r5
 8018f9e:	f7ff fc0b 	bl	80187b8 <_fflush_r>
 8018fa2:	b988      	cbnz	r0, 8018fc8 <__swbuf_r+0x90>
 8018fa4:	4638      	mov	r0, r7
 8018fa6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018fa8:	4b0a      	ldr	r3, [pc, #40]	; (8018fd4 <__swbuf_r+0x9c>)
 8018faa:	429c      	cmp	r4, r3
 8018fac:	d101      	bne.n	8018fb2 <__swbuf_r+0x7a>
 8018fae:	68ac      	ldr	r4, [r5, #8]
 8018fb0:	e7cf      	b.n	8018f52 <__swbuf_r+0x1a>
 8018fb2:	4b09      	ldr	r3, [pc, #36]	; (8018fd8 <__swbuf_r+0xa0>)
 8018fb4:	429c      	cmp	r4, r3
 8018fb6:	bf08      	it	eq
 8018fb8:	68ec      	ldreq	r4, [r5, #12]
 8018fba:	e7ca      	b.n	8018f52 <__swbuf_r+0x1a>
 8018fbc:	4621      	mov	r1, r4
 8018fbe:	4628      	mov	r0, r5
 8018fc0:	f000 f80c 	bl	8018fdc <__swsetup_r>
 8018fc4:	2800      	cmp	r0, #0
 8018fc6:	d0cb      	beq.n	8018f60 <__swbuf_r+0x28>
 8018fc8:	f04f 37ff 	mov.w	r7, #4294967295
 8018fcc:	e7ea      	b.n	8018fa4 <__swbuf_r+0x6c>
 8018fce:	bf00      	nop
 8018fd0:	080270a0 	.word	0x080270a0
 8018fd4:	080270c0 	.word	0x080270c0
 8018fd8:	08027080 	.word	0x08027080

08018fdc <__swsetup_r>:
 8018fdc:	4b32      	ldr	r3, [pc, #200]	; (80190a8 <__swsetup_r+0xcc>)
 8018fde:	b570      	push	{r4, r5, r6, lr}
 8018fe0:	681d      	ldr	r5, [r3, #0]
 8018fe2:	4606      	mov	r6, r0
 8018fe4:	460c      	mov	r4, r1
 8018fe6:	b125      	cbz	r5, 8018ff2 <__swsetup_r+0x16>
 8018fe8:	69ab      	ldr	r3, [r5, #24]
 8018fea:	b913      	cbnz	r3, 8018ff2 <__swsetup_r+0x16>
 8018fec:	4628      	mov	r0, r5
 8018fee:	f7ff f869 	bl	80180c4 <__sinit>
 8018ff2:	4b2e      	ldr	r3, [pc, #184]	; (80190ac <__swsetup_r+0xd0>)
 8018ff4:	429c      	cmp	r4, r3
 8018ff6:	d10f      	bne.n	8019018 <__swsetup_r+0x3c>
 8018ff8:	686c      	ldr	r4, [r5, #4]
 8018ffa:	89a3      	ldrh	r3, [r4, #12]
 8018ffc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8019000:	0719      	lsls	r1, r3, #28
 8019002:	d42c      	bmi.n	801905e <__swsetup_r+0x82>
 8019004:	06dd      	lsls	r5, r3, #27
 8019006:	d411      	bmi.n	801902c <__swsetup_r+0x50>
 8019008:	2309      	movs	r3, #9
 801900a:	6033      	str	r3, [r6, #0]
 801900c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8019010:	81a3      	strh	r3, [r4, #12]
 8019012:	f04f 30ff 	mov.w	r0, #4294967295
 8019016:	e03e      	b.n	8019096 <__swsetup_r+0xba>
 8019018:	4b25      	ldr	r3, [pc, #148]	; (80190b0 <__swsetup_r+0xd4>)
 801901a:	429c      	cmp	r4, r3
 801901c:	d101      	bne.n	8019022 <__swsetup_r+0x46>
 801901e:	68ac      	ldr	r4, [r5, #8]
 8019020:	e7eb      	b.n	8018ffa <__swsetup_r+0x1e>
 8019022:	4b24      	ldr	r3, [pc, #144]	; (80190b4 <__swsetup_r+0xd8>)
 8019024:	429c      	cmp	r4, r3
 8019026:	bf08      	it	eq
 8019028:	68ec      	ldreq	r4, [r5, #12]
 801902a:	e7e6      	b.n	8018ffa <__swsetup_r+0x1e>
 801902c:	0758      	lsls	r0, r3, #29
 801902e:	d512      	bpl.n	8019056 <__swsetup_r+0x7a>
 8019030:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8019032:	b141      	cbz	r1, 8019046 <__swsetup_r+0x6a>
 8019034:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019038:	4299      	cmp	r1, r3
 801903a:	d002      	beq.n	8019042 <__swsetup_r+0x66>
 801903c:	4630      	mov	r0, r6
 801903e:	f7ff fc2f 	bl	80188a0 <_free_r>
 8019042:	2300      	movs	r3, #0
 8019044:	6363      	str	r3, [r4, #52]	; 0x34
 8019046:	89a3      	ldrh	r3, [r4, #12]
 8019048:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801904c:	81a3      	strh	r3, [r4, #12]
 801904e:	2300      	movs	r3, #0
 8019050:	6063      	str	r3, [r4, #4]
 8019052:	6923      	ldr	r3, [r4, #16]
 8019054:	6023      	str	r3, [r4, #0]
 8019056:	89a3      	ldrh	r3, [r4, #12]
 8019058:	f043 0308 	orr.w	r3, r3, #8
 801905c:	81a3      	strh	r3, [r4, #12]
 801905e:	6923      	ldr	r3, [r4, #16]
 8019060:	b94b      	cbnz	r3, 8019076 <__swsetup_r+0x9a>
 8019062:	89a3      	ldrh	r3, [r4, #12]
 8019064:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8019068:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801906c:	d003      	beq.n	8019076 <__swsetup_r+0x9a>
 801906e:	4621      	mov	r1, r4
 8019070:	4630      	mov	r0, r6
 8019072:	f000 f84d 	bl	8019110 <__smakebuf_r>
 8019076:	89a0      	ldrh	r0, [r4, #12]
 8019078:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801907c:	f010 0301 	ands.w	r3, r0, #1
 8019080:	d00a      	beq.n	8019098 <__swsetup_r+0xbc>
 8019082:	2300      	movs	r3, #0
 8019084:	60a3      	str	r3, [r4, #8]
 8019086:	6963      	ldr	r3, [r4, #20]
 8019088:	425b      	negs	r3, r3
 801908a:	61a3      	str	r3, [r4, #24]
 801908c:	6923      	ldr	r3, [r4, #16]
 801908e:	b943      	cbnz	r3, 80190a2 <__swsetup_r+0xc6>
 8019090:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8019094:	d1ba      	bne.n	801900c <__swsetup_r+0x30>
 8019096:	bd70      	pop	{r4, r5, r6, pc}
 8019098:	0781      	lsls	r1, r0, #30
 801909a:	bf58      	it	pl
 801909c:	6963      	ldrpl	r3, [r4, #20]
 801909e:	60a3      	str	r3, [r4, #8]
 80190a0:	e7f4      	b.n	801908c <__swsetup_r+0xb0>
 80190a2:	2000      	movs	r0, #0
 80190a4:	e7f7      	b.n	8019096 <__swsetup_r+0xba>
 80190a6:	bf00      	nop
 80190a8:	20000034 	.word	0x20000034
 80190ac:	080270a0 	.word	0x080270a0
 80190b0:	080270c0 	.word	0x080270c0
 80190b4:	08027080 	.word	0x08027080

080190b8 <abort>:
 80190b8:	b508      	push	{r3, lr}
 80190ba:	2006      	movs	r0, #6
 80190bc:	f000 f890 	bl	80191e0 <raise>
 80190c0:	2001      	movs	r0, #1
 80190c2:	f7e7 fd79 	bl	8000bb8 <_exit>

080190c6 <__swhatbuf_r>:
 80190c6:	b570      	push	{r4, r5, r6, lr}
 80190c8:	460e      	mov	r6, r1
 80190ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80190ce:	2900      	cmp	r1, #0
 80190d0:	b096      	sub	sp, #88	; 0x58
 80190d2:	4614      	mov	r4, r2
 80190d4:	461d      	mov	r5, r3
 80190d6:	da08      	bge.n	80190ea <__swhatbuf_r+0x24>
 80190d8:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80190dc:	2200      	movs	r2, #0
 80190de:	602a      	str	r2, [r5, #0]
 80190e0:	061a      	lsls	r2, r3, #24
 80190e2:	d410      	bmi.n	8019106 <__swhatbuf_r+0x40>
 80190e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80190e8:	e00e      	b.n	8019108 <__swhatbuf_r+0x42>
 80190ea:	466a      	mov	r2, sp
 80190ec:	f000 f894 	bl	8019218 <_fstat_r>
 80190f0:	2800      	cmp	r0, #0
 80190f2:	dbf1      	blt.n	80190d8 <__swhatbuf_r+0x12>
 80190f4:	9a01      	ldr	r2, [sp, #4]
 80190f6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80190fa:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80190fe:	425a      	negs	r2, r3
 8019100:	415a      	adcs	r2, r3
 8019102:	602a      	str	r2, [r5, #0]
 8019104:	e7ee      	b.n	80190e4 <__swhatbuf_r+0x1e>
 8019106:	2340      	movs	r3, #64	; 0x40
 8019108:	2000      	movs	r0, #0
 801910a:	6023      	str	r3, [r4, #0]
 801910c:	b016      	add	sp, #88	; 0x58
 801910e:	bd70      	pop	{r4, r5, r6, pc}

08019110 <__smakebuf_r>:
 8019110:	898b      	ldrh	r3, [r1, #12]
 8019112:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8019114:	079d      	lsls	r5, r3, #30
 8019116:	4606      	mov	r6, r0
 8019118:	460c      	mov	r4, r1
 801911a:	d507      	bpl.n	801912c <__smakebuf_r+0x1c>
 801911c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8019120:	6023      	str	r3, [r4, #0]
 8019122:	6123      	str	r3, [r4, #16]
 8019124:	2301      	movs	r3, #1
 8019126:	6163      	str	r3, [r4, #20]
 8019128:	b002      	add	sp, #8
 801912a:	bd70      	pop	{r4, r5, r6, pc}
 801912c:	ab01      	add	r3, sp, #4
 801912e:	466a      	mov	r2, sp
 8019130:	f7ff ffc9 	bl	80190c6 <__swhatbuf_r>
 8019134:	9900      	ldr	r1, [sp, #0]
 8019136:	4605      	mov	r5, r0
 8019138:	4630      	mov	r0, r6
 801913a:	f7ff f8cf 	bl	80182dc <_malloc_r>
 801913e:	b948      	cbnz	r0, 8019154 <__smakebuf_r+0x44>
 8019140:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019144:	059a      	lsls	r2, r3, #22
 8019146:	d4ef      	bmi.n	8019128 <__smakebuf_r+0x18>
 8019148:	f023 0303 	bic.w	r3, r3, #3
 801914c:	f043 0302 	orr.w	r3, r3, #2
 8019150:	81a3      	strh	r3, [r4, #12]
 8019152:	e7e3      	b.n	801911c <__smakebuf_r+0xc>
 8019154:	4b0d      	ldr	r3, [pc, #52]	; (801918c <__smakebuf_r+0x7c>)
 8019156:	62b3      	str	r3, [r6, #40]	; 0x28
 8019158:	89a3      	ldrh	r3, [r4, #12]
 801915a:	6020      	str	r0, [r4, #0]
 801915c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019160:	81a3      	strh	r3, [r4, #12]
 8019162:	9b00      	ldr	r3, [sp, #0]
 8019164:	6163      	str	r3, [r4, #20]
 8019166:	9b01      	ldr	r3, [sp, #4]
 8019168:	6120      	str	r0, [r4, #16]
 801916a:	b15b      	cbz	r3, 8019184 <__smakebuf_r+0x74>
 801916c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8019170:	4630      	mov	r0, r6
 8019172:	f000 f863 	bl	801923c <_isatty_r>
 8019176:	b128      	cbz	r0, 8019184 <__smakebuf_r+0x74>
 8019178:	89a3      	ldrh	r3, [r4, #12]
 801917a:	f023 0303 	bic.w	r3, r3, #3
 801917e:	f043 0301 	orr.w	r3, r3, #1
 8019182:	81a3      	strh	r3, [r4, #12]
 8019184:	89a0      	ldrh	r0, [r4, #12]
 8019186:	4305      	orrs	r5, r0
 8019188:	81a5      	strh	r5, [r4, #12]
 801918a:	e7cd      	b.n	8019128 <__smakebuf_r+0x18>
 801918c:	0801805d 	.word	0x0801805d

08019190 <_raise_r>:
 8019190:	291f      	cmp	r1, #31
 8019192:	b538      	push	{r3, r4, r5, lr}
 8019194:	4604      	mov	r4, r0
 8019196:	460d      	mov	r5, r1
 8019198:	d904      	bls.n	80191a4 <_raise_r+0x14>
 801919a:	2316      	movs	r3, #22
 801919c:	6003      	str	r3, [r0, #0]
 801919e:	f04f 30ff 	mov.w	r0, #4294967295
 80191a2:	bd38      	pop	{r3, r4, r5, pc}
 80191a4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80191a6:	b112      	cbz	r2, 80191ae <_raise_r+0x1e>
 80191a8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80191ac:	b94b      	cbnz	r3, 80191c2 <_raise_r+0x32>
 80191ae:	4620      	mov	r0, r4
 80191b0:	f000 f830 	bl	8019214 <_getpid_r>
 80191b4:	462a      	mov	r2, r5
 80191b6:	4601      	mov	r1, r0
 80191b8:	4620      	mov	r0, r4
 80191ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80191be:	f000 b817 	b.w	80191f0 <_kill_r>
 80191c2:	2b01      	cmp	r3, #1
 80191c4:	d00a      	beq.n	80191dc <_raise_r+0x4c>
 80191c6:	1c59      	adds	r1, r3, #1
 80191c8:	d103      	bne.n	80191d2 <_raise_r+0x42>
 80191ca:	2316      	movs	r3, #22
 80191cc:	6003      	str	r3, [r0, #0]
 80191ce:	2001      	movs	r0, #1
 80191d0:	e7e7      	b.n	80191a2 <_raise_r+0x12>
 80191d2:	2400      	movs	r4, #0
 80191d4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80191d8:	4628      	mov	r0, r5
 80191da:	4798      	blx	r3
 80191dc:	2000      	movs	r0, #0
 80191de:	e7e0      	b.n	80191a2 <_raise_r+0x12>

080191e0 <raise>:
 80191e0:	4b02      	ldr	r3, [pc, #8]	; (80191ec <raise+0xc>)
 80191e2:	4601      	mov	r1, r0
 80191e4:	6818      	ldr	r0, [r3, #0]
 80191e6:	f7ff bfd3 	b.w	8019190 <_raise_r>
 80191ea:	bf00      	nop
 80191ec:	20000034 	.word	0x20000034

080191f0 <_kill_r>:
 80191f0:	b538      	push	{r3, r4, r5, lr}
 80191f2:	4d07      	ldr	r5, [pc, #28]	; (8019210 <_kill_r+0x20>)
 80191f4:	2300      	movs	r3, #0
 80191f6:	4604      	mov	r4, r0
 80191f8:	4608      	mov	r0, r1
 80191fa:	4611      	mov	r1, r2
 80191fc:	602b      	str	r3, [r5, #0]
 80191fe:	f7e7 fcc9 	bl	8000b94 <_kill>
 8019202:	1c43      	adds	r3, r0, #1
 8019204:	d102      	bne.n	801920c <_kill_r+0x1c>
 8019206:	682b      	ldr	r3, [r5, #0]
 8019208:	b103      	cbz	r3, 801920c <_kill_r+0x1c>
 801920a:	6023      	str	r3, [r4, #0]
 801920c:	bd38      	pop	{r3, r4, r5, pc}
 801920e:	bf00      	nop
 8019210:	20010f18 	.word	0x20010f18

08019214 <_getpid_r>:
 8019214:	f7e7 bcb6 	b.w	8000b84 <_getpid>

08019218 <_fstat_r>:
 8019218:	b538      	push	{r3, r4, r5, lr}
 801921a:	4d07      	ldr	r5, [pc, #28]	; (8019238 <_fstat_r+0x20>)
 801921c:	2300      	movs	r3, #0
 801921e:	4604      	mov	r4, r0
 8019220:	4608      	mov	r0, r1
 8019222:	4611      	mov	r1, r2
 8019224:	602b      	str	r3, [r5, #0]
 8019226:	f7e7 fd16 	bl	8000c56 <_fstat>
 801922a:	1c43      	adds	r3, r0, #1
 801922c:	d102      	bne.n	8019234 <_fstat_r+0x1c>
 801922e:	682b      	ldr	r3, [r5, #0]
 8019230:	b103      	cbz	r3, 8019234 <_fstat_r+0x1c>
 8019232:	6023      	str	r3, [r4, #0]
 8019234:	bd38      	pop	{r3, r4, r5, pc}
 8019236:	bf00      	nop
 8019238:	20010f18 	.word	0x20010f18

0801923c <_isatty_r>:
 801923c:	b538      	push	{r3, r4, r5, lr}
 801923e:	4d06      	ldr	r5, [pc, #24]	; (8019258 <_isatty_r+0x1c>)
 8019240:	2300      	movs	r3, #0
 8019242:	4604      	mov	r4, r0
 8019244:	4608      	mov	r0, r1
 8019246:	602b      	str	r3, [r5, #0]
 8019248:	f7e7 fd15 	bl	8000c76 <_isatty>
 801924c:	1c43      	adds	r3, r0, #1
 801924e:	d102      	bne.n	8019256 <_isatty_r+0x1a>
 8019250:	682b      	ldr	r3, [r5, #0]
 8019252:	b103      	cbz	r3, 8019256 <_isatty_r+0x1a>
 8019254:	6023      	str	r3, [r4, #0]
 8019256:	bd38      	pop	{r3, r4, r5, pc}
 8019258:	20010f18 	.word	0x20010f18

0801925c <_init>:
 801925c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801925e:	bf00      	nop
 8019260:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019262:	bc08      	pop	{r3}
 8019264:	469e      	mov	lr, r3
 8019266:	4770      	bx	lr

08019268 <_fini>:
 8019268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801926a:	bf00      	nop
 801926c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801926e:	bc08      	pop	{r3}
 8019270:	469e      	mov	lr, r3
 8019272:	4770      	bx	lr
