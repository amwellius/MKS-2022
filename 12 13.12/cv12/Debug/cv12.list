
cv12.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00018354  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003bfc  08018504  08018504  00028504  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801c100  0801c100  00030098  2**0
                  CONTENTS
  4 .ARM          00000008  0801c100  0801c100  0002c100  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801c108  0801c108  00030098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801c108  0801c108  0002c108  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801c10c  0801c10c  0002c10c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  0801c110  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030098  2**0
                  CONTENTS
 10 .bss          00010a44  20000098  20000098  00030098  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20010adc  20010adc  00030098  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030098  2**0
                  CONTENTS, READONLY
 13 .debug_info   0003436d  00000000  00000000  000300c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00007ae2  00000000  00000000  00064435  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000023e0  00000000  00000000  0006bf18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002280  00000000  00000000  0006e2f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00035d34  00000000  00000000  00070578  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00037f38  00000000  00000000  000a62ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00100e8f  00000000  00000000  000de1e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001df073  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00009ccc  00000000  00000000  001df0c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000098 	.word	0x20000098
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080184ec 	.word	0x080184ec

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000009c 	.word	0x2000009c
 80001ec:	080184ec 	.word	0x080184ec

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000594:	b480      	push	{r7}
 8000596:	b085      	sub	sp, #20
 8000598:	af00      	add	r7, sp, #0
 800059a:	60f8      	str	r0, [r7, #12]
 800059c:	60b9      	str	r1, [r7, #8]
 800059e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005a0:	68fb      	ldr	r3, [r7, #12]
 80005a2:	4a07      	ldr	r2, [pc, #28]	; (80005c0 <vApplicationGetIdleTaskMemory+0x2c>)
 80005a4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005a6:	68bb      	ldr	r3, [r7, #8]
 80005a8:	4a06      	ldr	r2, [pc, #24]	; (80005c4 <vApplicationGetIdleTaskMemory+0x30>)
 80005aa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	2280      	movs	r2, #128	; 0x80
 80005b0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005b2:	bf00      	nop
 80005b4:	3714      	adds	r7, #20
 80005b6:	46bd      	mov	sp, r7
 80005b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop
 80005c0:	200000b4 	.word	0x200000b4
 80005c4:	20000168 	.word	0x20000168

080005c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c8:	b5b0      	push	{r4, r5, r7, lr}
 80005ca:	b088      	sub	sp, #32
 80005cc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ce:	f000 fd99 	bl	8001104 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005d2:	f000 f81d 	bl	8000610 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005d6:	f000 f8af 	bl	8000738 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80005da:	f000 f883 	bl	80006e4 <MX_USART3_UART_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 1024);
 80005de:	4b0a      	ldr	r3, [pc, #40]	; (8000608 <main+0x40>)
 80005e0:	1d3c      	adds	r4, r7, #4
 80005e2:	461d      	mov	r5, r3
 80005e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005e8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005ec:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80005f0:	1d3b      	adds	r3, r7, #4
 80005f2:	2100      	movs	r1, #0
 80005f4:	4618      	mov	r0, r3
 80005f6:	f004 fae1 	bl	8004bbc <osThreadCreate>
 80005fa:	4603      	mov	r3, r0
 80005fc:	4a03      	ldr	r2, [pc, #12]	; (800060c <main+0x44>)
 80005fe:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000600:	f004 fac5 	bl	8004b8e <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000604:	e7fe      	b.n	8000604 <main+0x3c>
 8000606:	bf00      	nop
 8000608:	08018510 	.word	0x08018510
 800060c:	200003ac 	.word	0x200003ac

08000610 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b094      	sub	sp, #80	; 0x50
 8000614:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000616:	f107 0320 	add.w	r3, r7, #32
 800061a:	2230      	movs	r2, #48	; 0x30
 800061c:	2100      	movs	r1, #0
 800061e:	4618      	mov	r0, r3
 8000620:	f016 ff9b 	bl	801755a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000624:	f107 030c 	add.w	r3, r7, #12
 8000628:	2200      	movs	r2, #0
 800062a:	601a      	str	r2, [r3, #0]
 800062c:	605a      	str	r2, [r3, #4]
 800062e:	609a      	str	r2, [r3, #8]
 8000630:	60da      	str	r2, [r3, #12]
 8000632:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000634:	2300      	movs	r3, #0
 8000636:	60bb      	str	r3, [r7, #8]
 8000638:	4b28      	ldr	r3, [pc, #160]	; (80006dc <SystemClock_Config+0xcc>)
 800063a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800063c:	4a27      	ldr	r2, [pc, #156]	; (80006dc <SystemClock_Config+0xcc>)
 800063e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000642:	6413      	str	r3, [r2, #64]	; 0x40
 8000644:	4b25      	ldr	r3, [pc, #148]	; (80006dc <SystemClock_Config+0xcc>)
 8000646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000648:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800064c:	60bb      	str	r3, [r7, #8]
 800064e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000650:	2300      	movs	r3, #0
 8000652:	607b      	str	r3, [r7, #4]
 8000654:	4b22      	ldr	r3, [pc, #136]	; (80006e0 <SystemClock_Config+0xd0>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	4a21      	ldr	r2, [pc, #132]	; (80006e0 <SystemClock_Config+0xd0>)
 800065a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800065e:	6013      	str	r3, [r2, #0]
 8000660:	4b1f      	ldr	r3, [pc, #124]	; (80006e0 <SystemClock_Config+0xd0>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000668:	607b      	str	r3, [r7, #4]
 800066a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800066c:	2301      	movs	r3, #1
 800066e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000670:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000674:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000676:	2302      	movs	r3, #2
 8000678:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800067a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800067e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000680:	2304      	movs	r3, #4
 8000682:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000684:	23a8      	movs	r3, #168	; 0xa8
 8000686:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000688:	2302      	movs	r3, #2
 800068a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800068c:	2307      	movs	r3, #7
 800068e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000690:	f107 0320 	add.w	r3, r7, #32
 8000694:	4618      	mov	r0, r3
 8000696:	f002 faf3 	bl	8002c80 <HAL_RCC_OscConfig>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006a0:	f000 f936 	bl	8000910 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006a4:	230f      	movs	r3, #15
 80006a6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006a8:	2302      	movs	r3, #2
 80006aa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ac:	2300      	movs	r3, #0
 80006ae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006b0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006b4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006ba:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006bc:	f107 030c 	add.w	r3, r7, #12
 80006c0:	2105      	movs	r1, #5
 80006c2:	4618      	mov	r0, r3
 80006c4:	f002 fd54 	bl	8003170 <HAL_RCC_ClockConfig>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006ce:	f000 f91f 	bl	8000910 <Error_Handler>
  }
}
 80006d2:	bf00      	nop
 80006d4:	3750      	adds	r7, #80	; 0x50
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	40023800 	.word	0x40023800
 80006e0:	40007000 	.word	0x40007000

080006e4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80006e8:	4b11      	ldr	r3, [pc, #68]	; (8000730 <MX_USART3_UART_Init+0x4c>)
 80006ea:	4a12      	ldr	r2, [pc, #72]	; (8000734 <MX_USART3_UART_Init+0x50>)
 80006ec:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80006ee:	4b10      	ldr	r3, [pc, #64]	; (8000730 <MX_USART3_UART_Init+0x4c>)
 80006f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006f4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80006f6:	4b0e      	ldr	r3, [pc, #56]	; (8000730 <MX_USART3_UART_Init+0x4c>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80006fc:	4b0c      	ldr	r3, [pc, #48]	; (8000730 <MX_USART3_UART_Init+0x4c>)
 80006fe:	2200      	movs	r2, #0
 8000700:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000702:	4b0b      	ldr	r3, [pc, #44]	; (8000730 <MX_USART3_UART_Init+0x4c>)
 8000704:	2200      	movs	r2, #0
 8000706:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000708:	4b09      	ldr	r3, [pc, #36]	; (8000730 <MX_USART3_UART_Init+0x4c>)
 800070a:	220c      	movs	r2, #12
 800070c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800070e:	4b08      	ldr	r3, [pc, #32]	; (8000730 <MX_USART3_UART_Init+0x4c>)
 8000710:	2200      	movs	r2, #0
 8000712:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000714:	4b06      	ldr	r3, [pc, #24]	; (8000730 <MX_USART3_UART_Init+0x4c>)
 8000716:	2200      	movs	r2, #0
 8000718:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800071a:	4805      	ldr	r0, [pc, #20]	; (8000730 <MX_USART3_UART_Init+0x4c>)
 800071c:	f003 fa28 	bl	8003b70 <HAL_UART_Init>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000726:	f000 f8f3 	bl	8000910 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800072a:	bf00      	nop
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	20000368 	.word	0x20000368
 8000734:	40004800 	.word	0x40004800

08000738 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b08c      	sub	sp, #48	; 0x30
 800073c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800073e:	f107 031c 	add.w	r3, r7, #28
 8000742:	2200      	movs	r2, #0
 8000744:	601a      	str	r2, [r3, #0]
 8000746:	605a      	str	r2, [r3, #4]
 8000748:	609a      	str	r2, [r3, #8]
 800074a:	60da      	str	r2, [r3, #12]
 800074c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800074e:	2300      	movs	r3, #0
 8000750:	61bb      	str	r3, [r7, #24]
 8000752:	4b5b      	ldr	r3, [pc, #364]	; (80008c0 <MX_GPIO_Init+0x188>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000756:	4a5a      	ldr	r2, [pc, #360]	; (80008c0 <MX_GPIO_Init+0x188>)
 8000758:	f043 0304 	orr.w	r3, r3, #4
 800075c:	6313      	str	r3, [r2, #48]	; 0x30
 800075e:	4b58      	ldr	r3, [pc, #352]	; (80008c0 <MX_GPIO_Init+0x188>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000762:	f003 0304 	and.w	r3, r3, #4
 8000766:	61bb      	str	r3, [r7, #24]
 8000768:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800076a:	2300      	movs	r3, #0
 800076c:	617b      	str	r3, [r7, #20]
 800076e:	4b54      	ldr	r3, [pc, #336]	; (80008c0 <MX_GPIO_Init+0x188>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000772:	4a53      	ldr	r2, [pc, #332]	; (80008c0 <MX_GPIO_Init+0x188>)
 8000774:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000778:	6313      	str	r3, [r2, #48]	; 0x30
 800077a:	4b51      	ldr	r3, [pc, #324]	; (80008c0 <MX_GPIO_Init+0x188>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000782:	617b      	str	r3, [r7, #20]
 8000784:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000786:	2300      	movs	r3, #0
 8000788:	613b      	str	r3, [r7, #16]
 800078a:	4b4d      	ldr	r3, [pc, #308]	; (80008c0 <MX_GPIO_Init+0x188>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078e:	4a4c      	ldr	r2, [pc, #304]	; (80008c0 <MX_GPIO_Init+0x188>)
 8000790:	f043 0301 	orr.w	r3, r3, #1
 8000794:	6313      	str	r3, [r2, #48]	; 0x30
 8000796:	4b4a      	ldr	r3, [pc, #296]	; (80008c0 <MX_GPIO_Init+0x188>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079a:	f003 0301 	and.w	r3, r3, #1
 800079e:	613b      	str	r3, [r7, #16]
 80007a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007a2:	2300      	movs	r3, #0
 80007a4:	60fb      	str	r3, [r7, #12]
 80007a6:	4b46      	ldr	r3, [pc, #280]	; (80008c0 <MX_GPIO_Init+0x188>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	4a45      	ldr	r2, [pc, #276]	; (80008c0 <MX_GPIO_Init+0x188>)
 80007ac:	f043 0302 	orr.w	r3, r3, #2
 80007b0:	6313      	str	r3, [r2, #48]	; 0x30
 80007b2:	4b43      	ldr	r3, [pc, #268]	; (80008c0 <MX_GPIO_Init+0x188>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	f003 0302 	and.w	r3, r3, #2
 80007ba:	60fb      	str	r3, [r7, #12]
 80007bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007be:	2300      	movs	r3, #0
 80007c0:	60bb      	str	r3, [r7, #8]
 80007c2:	4b3f      	ldr	r3, [pc, #252]	; (80008c0 <MX_GPIO_Init+0x188>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	4a3e      	ldr	r2, [pc, #248]	; (80008c0 <MX_GPIO_Init+0x188>)
 80007c8:	f043 0308 	orr.w	r3, r3, #8
 80007cc:	6313      	str	r3, [r2, #48]	; 0x30
 80007ce:	4b3c      	ldr	r3, [pc, #240]	; (80008c0 <MX_GPIO_Init+0x188>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	f003 0308 	and.w	r3, r3, #8
 80007d6:	60bb      	str	r3, [r7, #8]
 80007d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80007da:	2300      	movs	r3, #0
 80007dc:	607b      	str	r3, [r7, #4]
 80007de:	4b38      	ldr	r3, [pc, #224]	; (80008c0 <MX_GPIO_Init+0x188>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	4a37      	ldr	r2, [pc, #220]	; (80008c0 <MX_GPIO_Init+0x188>)
 80007e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007e8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ea:	4b35      	ldr	r3, [pc, #212]	; (80008c0 <MX_GPIO_Init+0x188>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007f2:	607b      	str	r3, [r7, #4]
 80007f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80007f6:	2200      	movs	r2, #0
 80007f8:	f244 0181 	movw	r1, #16513	; 0x4081
 80007fc:	4831      	ldr	r0, [pc, #196]	; (80008c4 <MX_GPIO_Init+0x18c>)
 80007fe:	f002 fa25 	bl	8002c4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000802:	2200      	movs	r2, #0
 8000804:	2140      	movs	r1, #64	; 0x40
 8000806:	4830      	ldr	r0, [pc, #192]	; (80008c8 <MX_GPIO_Init+0x190>)
 8000808:	f002 fa20 	bl	8002c4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800080c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000810:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000812:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000816:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000818:	2300      	movs	r3, #0
 800081a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800081c:	f107 031c 	add.w	r3, r7, #28
 8000820:	4619      	mov	r1, r3
 8000822:	482a      	ldr	r0, [pc, #168]	; (80008cc <MX_GPIO_Init+0x194>)
 8000824:	f002 f866 	bl	80028f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000828:	f244 0381 	movw	r3, #16513	; 0x4081
 800082c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800082e:	2301      	movs	r3, #1
 8000830:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000832:	2300      	movs	r3, #0
 8000834:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000836:	2300      	movs	r3, #0
 8000838:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800083a:	f107 031c 	add.w	r3, r7, #28
 800083e:	4619      	mov	r1, r3
 8000840:	4820      	ldr	r0, [pc, #128]	; (80008c4 <MX_GPIO_Init+0x18c>)
 8000842:	f002 f857 	bl	80028f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000846:	2340      	movs	r3, #64	; 0x40
 8000848:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800084a:	2301      	movs	r3, #1
 800084c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084e:	2300      	movs	r3, #0
 8000850:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000852:	2300      	movs	r3, #0
 8000854:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000856:	f107 031c 	add.w	r3, r7, #28
 800085a:	4619      	mov	r1, r3
 800085c:	481a      	ldr	r0, [pc, #104]	; (80008c8 <MX_GPIO_Init+0x190>)
 800085e:	f002 f849 	bl	80028f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000862:	2380      	movs	r3, #128	; 0x80
 8000864:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000866:	2300      	movs	r3, #0
 8000868:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086a:	2300      	movs	r3, #0
 800086c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800086e:	f107 031c 	add.w	r3, r7, #28
 8000872:	4619      	mov	r1, r3
 8000874:	4814      	ldr	r0, [pc, #80]	; (80008c8 <MX_GPIO_Init+0x190>)
 8000876:	f002 f83d 	bl	80028f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800087a:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800087e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000880:	2302      	movs	r3, #2
 8000882:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000884:	2300      	movs	r3, #0
 8000886:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000888:	2303      	movs	r3, #3
 800088a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800088c:	230a      	movs	r3, #10
 800088e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000890:	f107 031c 	add.w	r3, r7, #28
 8000894:	4619      	mov	r1, r3
 8000896:	480e      	ldr	r0, [pc, #56]	; (80008d0 <MX_GPIO_Init+0x198>)
 8000898:	f002 f82c 	bl	80028f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800089c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80008a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008a2:	2300      	movs	r3, #0
 80008a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a6:	2300      	movs	r3, #0
 80008a8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80008aa:	f107 031c 	add.w	r3, r7, #28
 80008ae:	4619      	mov	r1, r3
 80008b0:	4807      	ldr	r0, [pc, #28]	; (80008d0 <MX_GPIO_Init+0x198>)
 80008b2:	f002 f81f 	bl	80028f4 <HAL_GPIO_Init>

}
 80008b6:	bf00      	nop
 80008b8:	3730      	adds	r7, #48	; 0x30
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	40023800 	.word	0x40023800
 80008c4:	40020400 	.word	0x40020400
 80008c8:	40021800 	.word	0x40021800
 80008cc:	40020800 	.word	0x40020800
 80008d0:	40020000 	.word	0x40020000

080008d4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b082      	sub	sp, #8
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 80008dc:	f003 fc0a 	bl	80040f4 <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  /* Initialize tcp echo server */
  tcpecho_init();
 80008e0:	f000 fa72 	bl	8000dc8 <tcpecho_init>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80008e4:	2001      	movs	r0, #1
 80008e6:	f004 f9b5 	bl	8004c54 <osDelay>
 80008ea:	e7fb      	b.n	80008e4 <StartDefaultTask+0x10>

080008ec <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b082      	sub	sp, #8
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	4a04      	ldr	r2, [pc, #16]	; (800090c <HAL_TIM_PeriodElapsedCallback+0x20>)
 80008fa:	4293      	cmp	r3, r2
 80008fc:	d101      	bne.n	8000902 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80008fe:	f000 fc23 	bl	8001148 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000902:	bf00      	nop
 8000904:	3708      	adds	r7, #8
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	40002000 	.word	0x40002000

08000910 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000914:	b672      	cpsid	i
}
 8000916:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000918:	e7fe      	b.n	8000918 <Error_Handler+0x8>
	...

0800091c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b082      	sub	sp, #8
 8000920:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000922:	2300      	movs	r3, #0
 8000924:	607b      	str	r3, [r7, #4]
 8000926:	4b12      	ldr	r3, [pc, #72]	; (8000970 <HAL_MspInit+0x54>)
 8000928:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800092a:	4a11      	ldr	r2, [pc, #68]	; (8000970 <HAL_MspInit+0x54>)
 800092c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000930:	6453      	str	r3, [r2, #68]	; 0x44
 8000932:	4b0f      	ldr	r3, [pc, #60]	; (8000970 <HAL_MspInit+0x54>)
 8000934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000936:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800093a:	607b      	str	r3, [r7, #4]
 800093c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800093e:	2300      	movs	r3, #0
 8000940:	603b      	str	r3, [r7, #0]
 8000942:	4b0b      	ldr	r3, [pc, #44]	; (8000970 <HAL_MspInit+0x54>)
 8000944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000946:	4a0a      	ldr	r2, [pc, #40]	; (8000970 <HAL_MspInit+0x54>)
 8000948:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800094c:	6413      	str	r3, [r2, #64]	; 0x40
 800094e:	4b08      	ldr	r3, [pc, #32]	; (8000970 <HAL_MspInit+0x54>)
 8000950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000952:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000956:	603b      	str	r3, [r7, #0]
 8000958:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800095a:	2200      	movs	r2, #0
 800095c:	210f      	movs	r1, #15
 800095e:	f06f 0001 	mvn.w	r0, #1
 8000962:	f000 fced 	bl	8001340 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000966:	bf00      	nop
 8000968:	3708      	adds	r7, #8
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	40023800 	.word	0x40023800

08000974 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b08a      	sub	sp, #40	; 0x28
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800097c:	f107 0314 	add.w	r3, r7, #20
 8000980:	2200      	movs	r2, #0
 8000982:	601a      	str	r2, [r3, #0]
 8000984:	605a      	str	r2, [r3, #4]
 8000986:	609a      	str	r2, [r3, #8]
 8000988:	60da      	str	r2, [r3, #12]
 800098a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	4a19      	ldr	r2, [pc, #100]	; (80009f8 <HAL_UART_MspInit+0x84>)
 8000992:	4293      	cmp	r3, r2
 8000994:	d12c      	bne.n	80009f0 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000996:	2300      	movs	r3, #0
 8000998:	613b      	str	r3, [r7, #16]
 800099a:	4b18      	ldr	r3, [pc, #96]	; (80009fc <HAL_UART_MspInit+0x88>)
 800099c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800099e:	4a17      	ldr	r2, [pc, #92]	; (80009fc <HAL_UART_MspInit+0x88>)
 80009a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80009a4:	6413      	str	r3, [r2, #64]	; 0x40
 80009a6:	4b15      	ldr	r3, [pc, #84]	; (80009fc <HAL_UART_MspInit+0x88>)
 80009a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80009ae:	613b      	str	r3, [r7, #16]
 80009b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80009b2:	2300      	movs	r3, #0
 80009b4:	60fb      	str	r3, [r7, #12]
 80009b6:	4b11      	ldr	r3, [pc, #68]	; (80009fc <HAL_UART_MspInit+0x88>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ba:	4a10      	ldr	r2, [pc, #64]	; (80009fc <HAL_UART_MspInit+0x88>)
 80009bc:	f043 0308 	orr.w	r3, r3, #8
 80009c0:	6313      	str	r3, [r2, #48]	; 0x30
 80009c2:	4b0e      	ldr	r3, [pc, #56]	; (80009fc <HAL_UART_MspInit+0x88>)
 80009c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c6:	f003 0308 	and.w	r3, r3, #8
 80009ca:	60fb      	str	r3, [r7, #12]
 80009cc:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80009ce:	f44f 7340 	mov.w	r3, #768	; 0x300
 80009d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009d4:	2302      	movs	r3, #2
 80009d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d8:	2300      	movs	r3, #0
 80009da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009dc:	2303      	movs	r3, #3
 80009de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80009e0:	2307      	movs	r3, #7
 80009e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009e4:	f107 0314 	add.w	r3, r7, #20
 80009e8:	4619      	mov	r1, r3
 80009ea:	4805      	ldr	r0, [pc, #20]	; (8000a00 <HAL_UART_MspInit+0x8c>)
 80009ec:	f001 ff82 	bl	80028f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80009f0:	bf00      	nop
 80009f2:	3728      	adds	r7, #40	; 0x28
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	40004800 	.word	0x40004800
 80009fc:	40023800 	.word	0x40023800
 8000a00:	40020c00 	.word	0x40020c00

08000a04 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b08e      	sub	sp, #56	; 0x38
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000a10:	2300      	movs	r3, #0
 8000a12:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 8000a14:	2300      	movs	r3, #0
 8000a16:	60fb      	str	r3, [r7, #12]
 8000a18:	4b33      	ldr	r3, [pc, #204]	; (8000ae8 <HAL_InitTick+0xe4>)
 8000a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a1c:	4a32      	ldr	r2, [pc, #200]	; (8000ae8 <HAL_InitTick+0xe4>)
 8000a1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a22:	6413      	str	r3, [r2, #64]	; 0x40
 8000a24:	4b30      	ldr	r3, [pc, #192]	; (8000ae8 <HAL_InitTick+0xe4>)
 8000a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a2c:	60fb      	str	r3, [r7, #12]
 8000a2e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a30:	f107 0210 	add.w	r2, r7, #16
 8000a34:	f107 0314 	add.w	r3, r7, #20
 8000a38:	4611      	mov	r1, r2
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f002 fdb8 	bl	80035b0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000a40:	6a3b      	ldr	r3, [r7, #32]
 8000a42:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM14 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000a44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d103      	bne.n	8000a52 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000a4a:	f002 fd89 	bl	8003560 <HAL_RCC_GetPCLK1Freq>
 8000a4e:	6378      	str	r0, [r7, #52]	; 0x34
 8000a50:	e004      	b.n	8000a5c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000a52:	f002 fd85 	bl	8003560 <HAL_RCC_GetPCLK1Freq>
 8000a56:	4603      	mov	r3, r0
 8000a58:	005b      	lsls	r3, r3, #1
 8000a5a:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a5e:	4a23      	ldr	r2, [pc, #140]	; (8000aec <HAL_InitTick+0xe8>)
 8000a60:	fba2 2303 	umull	r2, r3, r2, r3
 8000a64:	0c9b      	lsrs	r3, r3, #18
 8000a66:	3b01      	subs	r3, #1
 8000a68:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 8000a6a:	4b21      	ldr	r3, [pc, #132]	; (8000af0 <HAL_InitTick+0xec>)
 8000a6c:	4a21      	ldr	r2, [pc, #132]	; (8000af4 <HAL_InitTick+0xf0>)
 8000a6e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 8000a70:	4b1f      	ldr	r3, [pc, #124]	; (8000af0 <HAL_InitTick+0xec>)
 8000a72:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a76:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 8000a78:	4a1d      	ldr	r2, [pc, #116]	; (8000af0 <HAL_InitTick+0xec>)
 8000a7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a7c:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 8000a7e:	4b1c      	ldr	r3, [pc, #112]	; (8000af0 <HAL_InitTick+0xec>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a84:	4b1a      	ldr	r3, [pc, #104]	; (8000af0 <HAL_InitTick+0xec>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	609a      	str	r2, [r3, #8]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a8a:	4b19      	ldr	r3, [pc, #100]	; (8000af0 <HAL_InitTick+0xec>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim14);
 8000a90:	4817      	ldr	r0, [pc, #92]	; (8000af0 <HAL_InitTick+0xec>)
 8000a92:	f002 fdbf 	bl	8003614 <HAL_TIM_Base_Init>
 8000a96:	4603      	mov	r3, r0
 8000a98:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000a9c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d11b      	bne.n	8000adc <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim14);
 8000aa4:	4812      	ldr	r0, [pc, #72]	; (8000af0 <HAL_InitTick+0xec>)
 8000aa6:	f002 fe0f 	bl	80036c8 <HAL_TIM_Base_Start_IT>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000ab0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d111      	bne.n	8000adc <HAL_InitTick+0xd8>
    {
    /* Enable the TIM14 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8000ab8:	202d      	movs	r0, #45	; 0x2d
 8000aba:	f000 fc5d 	bl	8001378 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	2b0f      	cmp	r3, #15
 8000ac2:	d808      	bhi.n	8000ad6 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority, 0U);
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	6879      	ldr	r1, [r7, #4]
 8000ac8:	202d      	movs	r0, #45	; 0x2d
 8000aca:	f000 fc39 	bl	8001340 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ace:	4a0a      	ldr	r2, [pc, #40]	; (8000af8 <HAL_InitTick+0xf4>)
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	6013      	str	r3, [r2, #0]
 8000ad4:	e002      	b.n	8000adc <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000ad6:	2301      	movs	r3, #1
 8000ad8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000adc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	3738      	adds	r7, #56	; 0x38
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	40023800 	.word	0x40023800
 8000aec:	431bde83 	.word	0x431bde83
 8000af0:	200003b0 	.word	0x200003b0
 8000af4:	40002000 	.word	0x40002000
 8000af8:	20000004 	.word	0x20000004

08000afc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b00:	e7fe      	b.n	8000b00 <NMI_Handler+0x4>

08000b02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b02:	b480      	push	{r7}
 8000b04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b06:	e7fe      	b.n	8000b06 <HardFault_Handler+0x4>

08000b08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b0c:	e7fe      	b.n	8000b0c <MemManage_Handler+0x4>

08000b0e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b0e:	b480      	push	{r7}
 8000b10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b12:	e7fe      	b.n	8000b12 <BusFault_Handler+0x4>

08000b14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b18:	e7fe      	b.n	8000b18 <UsageFault_Handler+0x4>

08000b1a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b1a:	b480      	push	{r7}
 8000b1c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b1e:	bf00      	nop
 8000b20:	46bd      	mov	sp, r7
 8000b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b26:	4770      	bx	lr

08000b28 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8000b2c:	4802      	ldr	r0, [pc, #8]	; (8000b38 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8000b2e:	f002 fe3b 	bl	80037a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8000b32:	bf00      	nop
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	200003b0 	.word	0x200003b0

08000b3c <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000b40:	4802      	ldr	r0, [pc, #8]	; (8000b4c <ETH_IRQHandler+0x10>)
 8000b42:	f001 f801 	bl	8001b48 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000b46:	bf00      	nop
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	20004f18 	.word	0x20004f18

08000b50 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
	return 1;
 8000b54:	2301      	movs	r3, #1
}
 8000b56:	4618      	mov	r0, r3
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5e:	4770      	bx	lr

08000b60 <_kill>:

int _kill(int pid, int sig)
{
 8000b60:	b480      	push	{r7}
 8000b62:	b083      	sub	sp, #12
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
 8000b68:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000b6a:	4b05      	ldr	r3, [pc, #20]	; (8000b80 <_kill+0x20>)
 8000b6c:	2216      	movs	r2, #22
 8000b6e:	601a      	str	r2, [r3, #0]
	return -1;
 8000b70:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b74:	4618      	mov	r0, r3
 8000b76:	370c      	adds	r7, #12
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7e:	4770      	bx	lr
 8000b80:	20010ad8 	.word	0x20010ad8

08000b84 <_exit>:

void _exit (int status)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b082      	sub	sp, #8
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000b8c:	f04f 31ff 	mov.w	r1, #4294967295
 8000b90:	6878      	ldr	r0, [r7, #4]
 8000b92:	f7ff ffe5 	bl	8000b60 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000b96:	e7fe      	b.n	8000b96 <_exit+0x12>

08000b98 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b086      	sub	sp, #24
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	60f8      	str	r0, [r7, #12]
 8000ba0:	60b9      	str	r1, [r7, #8]
 8000ba2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	617b      	str	r3, [r7, #20]
 8000ba8:	e00a      	b.n	8000bc0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000baa:	f3af 8000 	nop.w
 8000bae:	4601      	mov	r1, r0
 8000bb0:	68bb      	ldr	r3, [r7, #8]
 8000bb2:	1c5a      	adds	r2, r3, #1
 8000bb4:	60ba      	str	r2, [r7, #8]
 8000bb6:	b2ca      	uxtb	r2, r1
 8000bb8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bba:	697b      	ldr	r3, [r7, #20]
 8000bbc:	3301      	adds	r3, #1
 8000bbe:	617b      	str	r3, [r7, #20]
 8000bc0:	697a      	ldr	r2, [r7, #20]
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	429a      	cmp	r2, r3
 8000bc6:	dbf0      	blt.n	8000baa <_read+0x12>
	}

return len;
 8000bc8:	687b      	ldr	r3, [r7, #4]
}
 8000bca:	4618      	mov	r0, r3
 8000bcc:	3718      	adds	r7, #24
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}

08000bd2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000bd2:	b580      	push	{r7, lr}
 8000bd4:	b086      	sub	sp, #24
 8000bd6:	af00      	add	r7, sp, #0
 8000bd8:	60f8      	str	r0, [r7, #12]
 8000bda:	60b9      	str	r1, [r7, #8]
 8000bdc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bde:	2300      	movs	r3, #0
 8000be0:	617b      	str	r3, [r7, #20]
 8000be2:	e009      	b.n	8000bf8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000be4:	68bb      	ldr	r3, [r7, #8]
 8000be6:	1c5a      	adds	r2, r3, #1
 8000be8:	60ba      	str	r2, [r7, #8]
 8000bea:	781b      	ldrb	r3, [r3, #0]
 8000bec:	4618      	mov	r0, r3
 8000bee:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bf2:	697b      	ldr	r3, [r7, #20]
 8000bf4:	3301      	adds	r3, #1
 8000bf6:	617b      	str	r3, [r7, #20]
 8000bf8:	697a      	ldr	r2, [r7, #20]
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	429a      	cmp	r2, r3
 8000bfe:	dbf1      	blt.n	8000be4 <_write+0x12>
	}
	return len;
 8000c00:	687b      	ldr	r3, [r7, #4]
}
 8000c02:	4618      	mov	r0, r3
 8000c04:	3718      	adds	r7, #24
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}

08000c0a <_close>:

int _close(int file)
{
 8000c0a:	b480      	push	{r7}
 8000c0c:	b083      	sub	sp, #12
 8000c0e:	af00      	add	r7, sp, #0
 8000c10:	6078      	str	r0, [r7, #4]
	return -1;
 8000c12:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c16:	4618      	mov	r0, r3
 8000c18:	370c      	adds	r7, #12
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr

08000c22 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c22:	b480      	push	{r7}
 8000c24:	b083      	sub	sp, #12
 8000c26:	af00      	add	r7, sp, #0
 8000c28:	6078      	str	r0, [r7, #4]
 8000c2a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c32:	605a      	str	r2, [r3, #4]
	return 0;
 8000c34:	2300      	movs	r3, #0
}
 8000c36:	4618      	mov	r0, r3
 8000c38:	370c      	adds	r7, #12
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c40:	4770      	bx	lr

08000c42 <_isatty>:

int _isatty(int file)
{
 8000c42:	b480      	push	{r7}
 8000c44:	b083      	sub	sp, #12
 8000c46:	af00      	add	r7, sp, #0
 8000c48:	6078      	str	r0, [r7, #4]
	return 1;
 8000c4a:	2301      	movs	r3, #1
}
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	370c      	adds	r7, #12
 8000c50:	46bd      	mov	sp, r7
 8000c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c56:	4770      	bx	lr

08000c58 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b085      	sub	sp, #20
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	60f8      	str	r0, [r7, #12]
 8000c60:	60b9      	str	r1, [r7, #8]
 8000c62:	607a      	str	r2, [r7, #4]
	return 0;
 8000c64:	2300      	movs	r3, #0
}
 8000c66:	4618      	mov	r0, r3
 8000c68:	3714      	adds	r7, #20
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c70:	4770      	bx	lr
	...

08000c74 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c74:	b480      	push	{r7}
 8000c76:	b087      	sub	sp, #28
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c7c:	4a14      	ldr	r2, [pc, #80]	; (8000cd0 <_sbrk+0x5c>)
 8000c7e:	4b15      	ldr	r3, [pc, #84]	; (8000cd4 <_sbrk+0x60>)
 8000c80:	1ad3      	subs	r3, r2, r3
 8000c82:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c84:	697b      	ldr	r3, [r7, #20]
 8000c86:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c88:	4b13      	ldr	r3, [pc, #76]	; (8000cd8 <_sbrk+0x64>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d102      	bne.n	8000c96 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c90:	4b11      	ldr	r3, [pc, #68]	; (8000cd8 <_sbrk+0x64>)
 8000c92:	4a12      	ldr	r2, [pc, #72]	; (8000cdc <_sbrk+0x68>)
 8000c94:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c96:	4b10      	ldr	r3, [pc, #64]	; (8000cd8 <_sbrk+0x64>)
 8000c98:	681a      	ldr	r2, [r3, #0]
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	4413      	add	r3, r2
 8000c9e:	693a      	ldr	r2, [r7, #16]
 8000ca0:	429a      	cmp	r2, r3
 8000ca2:	d205      	bcs.n	8000cb0 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000ca4:	4b0e      	ldr	r3, [pc, #56]	; (8000ce0 <_sbrk+0x6c>)
 8000ca6:	220c      	movs	r2, #12
 8000ca8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000caa:	f04f 33ff 	mov.w	r3, #4294967295
 8000cae:	e009      	b.n	8000cc4 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cb0:	4b09      	ldr	r3, [pc, #36]	; (8000cd8 <_sbrk+0x64>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cb6:	4b08      	ldr	r3, [pc, #32]	; (8000cd8 <_sbrk+0x64>)
 8000cb8:	681a      	ldr	r2, [r3, #0]
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	4413      	add	r3, r2
 8000cbe:	4a06      	ldr	r2, [pc, #24]	; (8000cd8 <_sbrk+0x64>)
 8000cc0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cc2:	68fb      	ldr	r3, [r7, #12]
}
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	371c      	adds	r7, #28
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cce:	4770      	bx	lr
 8000cd0:	20030000 	.word	0x20030000
 8000cd4:	00000400 	.word	0x00000400
 8000cd8:	200003f8 	.word	0x200003f8
 8000cdc:	20010ae0 	.word	0x20010ae0
 8000ce0:	20010ad8 	.word	0x20010ad8

08000ce4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ce8:	4b06      	ldr	r3, [pc, #24]	; (8000d04 <SystemInit+0x20>)
 8000cea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cee:	4a05      	ldr	r2, [pc, #20]	; (8000d04 <SystemInit+0x20>)
 8000cf0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cf4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cf8:	bf00      	nop
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d00:	4770      	bx	lr
 8000d02:	bf00      	nop
 8000d04:	e000ed00 	.word	0xe000ed00

08000d08 <tcpecho_thread>:



/*-----------------------------------------------------------------------------------*/
static void tcpecho_thread(void *arg)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b08a      	sub	sp, #40	; 0x28
 8000d0c:	af02      	add	r7, sp, #8
 8000d0e:	6078      	str	r0, [r7, #4]
  u16_t len;
      
  LWIP_UNUSED_ARG(arg);

  /* Create a new connection identifier. */
  conn = netconn_new(NETCONN_TCP);
 8000d10:	2200      	movs	r2, #0
 8000d12:	2100      	movs	r1, #0
 8000d14:	2010      	movs	r0, #16
 8000d16:	f006 ff27 	bl	8007b68 <netconn_new_with_proto_and_callback>
 8000d1a:	61f8      	str	r0, [r7, #28]
  
  if (conn!=NULL)
 8000d1c:	69fb      	ldr	r3, [r7, #28]
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d04e      	beq.n	8000dc0 <tcpecho_thread+0xb8>
  {  
    /* Bind connection to well known port number 7. */
    err = netconn_bind(conn, NULL, 7);
 8000d22:	2207      	movs	r2, #7
 8000d24:	2100      	movs	r1, #0
 8000d26:	69f8      	ldr	r0, [r7, #28]
 8000d28:	f006 ffd8 	bl	8007cdc <netconn_bind>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	76fb      	strb	r3, [r7, #27]
    
    if (err == ERR_OK)
 8000d30:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d13f      	bne.n	8000db8 <tcpecho_thread+0xb0>
    {
      /* Tell connection to go into listening mode. */
      netconn_listen(conn);
 8000d38:	21ff      	movs	r1, #255	; 0xff
 8000d3a:	69f8      	ldr	r0, [r7, #28]
 8000d3c:	f007 f806 	bl	8007d4c <netconn_listen_with_backlog>
    
      while (1) 
      {
        /* Grab new connection. */
         accept_err = netconn_accept(conn, &newconn);
 8000d40:	f107 0314 	add.w	r3, r7, #20
 8000d44:	4619      	mov	r1, r3
 8000d46:	69f8      	ldr	r0, [r7, #28]
 8000d48:	f007 f82c 	bl	8007da4 <netconn_accept>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	76bb      	strb	r3, [r7, #26]
    
        /* Process the new connection. */
        if (accept_err == ERR_OK) 
 8000d50:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d1f3      	bne.n	8000d40 <tcpecho_thread+0x38>
        {

          while (netconn_recv(newconn, &buf) == ERR_OK) 
 8000d58:	e01b      	b.n	8000d92 <tcpecho_thread+0x8a>
          {
            do 
            {
              netbuf_data(buf, &data, &len);
 8000d5a:	693b      	ldr	r3, [r7, #16]
 8000d5c:	f107 020a 	add.w	r2, r7, #10
 8000d60:	f107 010c 	add.w	r1, r7, #12
 8000d64:	4618      	mov	r0, r3
 8000d66:	f008 ffbf 	bl	8009ce8 <netbuf_data>
              netconn_write(newconn, data, len, NETCONN_COPY);
 8000d6a:	6978      	ldr	r0, [r7, #20]
 8000d6c:	68f9      	ldr	r1, [r7, #12]
 8000d6e:	897b      	ldrh	r3, [r7, #10]
 8000d70:	461a      	mov	r2, r3
 8000d72:	2300      	movs	r3, #0
 8000d74:	9300      	str	r3, [sp, #0]
 8000d76:	2301      	movs	r3, #1
 8000d78:	f007 fa96 	bl	80082a8 <netconn_write_partly>
          
            } 
            while (netbuf_next(buf) >= 0);
 8000d7c:	693b      	ldr	r3, [r7, #16]
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f008 fffc 	bl	8009d7c <netbuf_next>
 8000d84:	4603      	mov	r3, r0
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	dae7      	bge.n	8000d5a <tcpecho_thread+0x52>
          
            netbuf_delete(buf);
 8000d8a:	693b      	ldr	r3, [r7, #16]
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f008 ff8b 	bl	8009ca8 <netbuf_delete>
          while (netconn_recv(newconn, &buf) == ERR_OK) 
 8000d92:	697b      	ldr	r3, [r7, #20]
 8000d94:	f107 0210 	add.w	r2, r7, #16
 8000d98:	4611      	mov	r1, r2
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f007 fa0a 	bl	80081b4 <netconn_recv>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d0d9      	beq.n	8000d5a <tcpecho_thread+0x52>
          }
        
          /* Close connection and discard connection identifier. */
          netconn_close(newconn);
 8000da6:	697b      	ldr	r3, [r7, #20]
 8000da8:	4618      	mov	r0, r3
 8000daa:	f007 fb7f 	bl	80084ac <netconn_close>
          netconn_delete(newconn);
 8000dae:	697b      	ldr	r3, [r7, #20]
 8000db0:	4618      	mov	r0, r3
 8000db2:	f006 ff77 	bl	8007ca4 <netconn_delete>
         accept_err = netconn_accept(conn, &newconn);
 8000db6:	e7c3      	b.n	8000d40 <tcpecho_thread+0x38>
        }
      }
    }
    else
    {
      netconn_delete(newconn);
 8000db8:	697b      	ldr	r3, [r7, #20]
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f006 ff72 	bl	8007ca4 <netconn_delete>
    }
  }
}
 8000dc0:	bf00      	nop
 8000dc2:	3720      	adds	r7, #32
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}

08000dc8 <tcpecho_init>:
/*-----------------------------------------------------------------------------------*/

void tcpecho_init(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b082      	sub	sp, #8
 8000dcc:	af02      	add	r7, sp, #8
  sys_thread_new("tcpecho_thread", tcpecho_thread, NULL, DEFAULT_THREAD_STACKSIZE, TCPECHO_THREAD_PRIO);
 8000dce:	2304      	movs	r3, #4
 8000dd0:	9300      	str	r3, [sp, #0]
 8000dd2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	4903      	ldr	r1, [pc, #12]	; (8000de8 <tcpecho_init+0x20>)
 8000dda:	4804      	ldr	r0, [pc, #16]	; (8000dec <tcpecho_init+0x24>)
 8000ddc:	f016 fa3e 	bl	801725c <sys_thread_new>
}
 8000de0:	bf00      	nop
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	08000d09 	.word	0x08000d09
 8000dec:	0801852c 	.word	0x0801852c

08000df0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000df0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e28 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000df4:	480d      	ldr	r0, [pc, #52]	; (8000e2c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000df6:	490e      	ldr	r1, [pc, #56]	; (8000e30 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000df8:	4a0e      	ldr	r2, [pc, #56]	; (8000e34 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000dfa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dfc:	e002      	b.n	8000e04 <LoopCopyDataInit>

08000dfe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dfe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e02:	3304      	adds	r3, #4

08000e04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e08:	d3f9      	bcc.n	8000dfe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e0a:	4a0b      	ldr	r2, [pc, #44]	; (8000e38 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e0c:	4c0b      	ldr	r4, [pc, #44]	; (8000e3c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e10:	e001      	b.n	8000e16 <LoopFillZerobss>

08000e12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e14:	3204      	adds	r2, #4

08000e16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e18:	d3fb      	bcc.n	8000e12 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e1a:	f7ff ff63 	bl	8000ce4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e1e:	f016 fb57 	bl	80174d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e22:	f7ff fbd1 	bl	80005c8 <main>
  bx  lr    
 8000e26:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000e28:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000e2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e30:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 8000e34:	0801c110 	.word	0x0801c110
  ldr r2, =_sbss
 8000e38:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 8000e3c:	20010adc 	.word	0x20010adc

08000e40 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e40:	e7fe      	b.n	8000e40 <ADC_IRQHandler>

08000e42 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8000e42:	b480      	push	{r7}
 8000e44:	b083      	sub	sp, #12
 8000e46:	af00      	add	r7, sp, #0
 8000e48:	6078      	str	r0, [r7, #4]
 8000e4a:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d00b      	beq.n	8000e6a <LAN8742_RegisterBusIO+0x28>
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	68db      	ldr	r3, [r3, #12]
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d007      	beq.n	8000e6a <LAN8742_RegisterBusIO+0x28>
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	689b      	ldr	r3, [r3, #8]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d003      	beq.n	8000e6a <LAN8742_RegisterBusIO+0x28>
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	691b      	ldr	r3, [r3, #16]
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d102      	bne.n	8000e70 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8000e6a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e6e:	e014      	b.n	8000e9a <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	681a      	ldr	r2, [r3, #0]
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	685a      	ldr	r2, [r3, #4]
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	68da      	ldr	r2, [r3, #12]
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	689a      	ldr	r2, [r3, #8]
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	691a      	ldr	r2, [r3, #16]
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 8000e98:	2300      	movs	r3, #0
}
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	370c      	adds	r7, #12
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea4:	4770      	bx	lr

08000ea6 <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8000ea6:	b580      	push	{r7, lr}
 8000ea8:	b086      	sub	sp, #24
 8000eaa:	af00      	add	r7, sp, #0
 8000eac:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	60fb      	str	r3, [r7, #12]
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	60bb      	str	r3, [r7, #8]
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	685b      	ldr	r3, [r3, #4]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d17c      	bne.n	8000fc0 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	689b      	ldr	r3, [r3, #8]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d002      	beq.n	8000ed4 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	689b      	ldr	r3, [r3, #8]
 8000ed2:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	2220      	movs	r2, #32
 8000ed8:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000eda:	2300      	movs	r3, #0
 8000edc:	617b      	str	r3, [r7, #20]
 8000ede:	e01c      	b.n	8000f1a <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	695b      	ldr	r3, [r3, #20]
 8000ee4:	f107 0208 	add.w	r2, r7, #8
 8000ee8:	2112      	movs	r1, #18
 8000eea:	6978      	ldr	r0, [r7, #20]
 8000eec:	4798      	blx	r3
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	da03      	bge.n	8000efc <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 8000ef4:	f06f 0304 	mvn.w	r3, #4
 8000ef8:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 8000efa:	e00b      	b.n	8000f14 <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8000efc:	68bb      	ldr	r3, [r7, #8]
 8000efe:	f003 031f 	and.w	r3, r3, #31
 8000f02:	697a      	ldr	r2, [r7, #20]
 8000f04:	429a      	cmp	r2, r3
 8000f06:	d105      	bne.n	8000f14 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	697a      	ldr	r2, [r7, #20]
 8000f0c:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	613b      	str	r3, [r7, #16]
         break;
 8000f12:	e005      	b.n	8000f20 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000f14:	697b      	ldr	r3, [r7, #20]
 8000f16:	3301      	adds	r3, #1
 8000f18:	617b      	str	r3, [r7, #20]
 8000f1a:	697b      	ldr	r3, [r7, #20]
 8000f1c:	2b1f      	cmp	r3, #31
 8000f1e:	d9df      	bls.n	8000ee0 <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	2b1f      	cmp	r3, #31
 8000f26:	d902      	bls.n	8000f2e <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8000f28:	f06f 0302 	mvn.w	r3, #2
 8000f2c:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8000f2e:	693b      	ldr	r3, [r7, #16]
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d145      	bne.n	8000fc0 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	691b      	ldr	r3, [r3, #16]
 8000f38:	687a      	ldr	r2, [r7, #4]
 8000f3a:	6810      	ldr	r0, [r2, #0]
 8000f3c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000f40:	2100      	movs	r1, #0
 8000f42:	4798      	blx	r3
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	db37      	blt.n	8000fba <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	695b      	ldr	r3, [r3, #20]
 8000f4e:	687a      	ldr	r2, [r7, #4]
 8000f50:	6810      	ldr	r0, [r2, #0]
 8000f52:	f107 0208 	add.w	r2, r7, #8
 8000f56:	2100      	movs	r1, #0
 8000f58:	4798      	blx	r3
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	db28      	blt.n	8000fb2 <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	699b      	ldr	r3, [r3, #24]
 8000f64:	4798      	blx	r3
 8000f66:	4603      	mov	r3, r0
 8000f68:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8000f6a:	e01c      	b.n	8000fa6 <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	699b      	ldr	r3, [r3, #24]
 8000f70:	4798      	blx	r3
 8000f72:	4603      	mov	r3, r0
 8000f74:	461a      	mov	r2, r3
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	1ad3      	subs	r3, r2, r3
 8000f7a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000f7e:	d80e      	bhi.n	8000f9e <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	695b      	ldr	r3, [r3, #20]
 8000f84:	687a      	ldr	r2, [r7, #4]
 8000f86:	6810      	ldr	r0, [r2, #0]
 8000f88:	f107 0208 	add.w	r2, r7, #8
 8000f8c:	2100      	movs	r1, #0
 8000f8e:	4798      	blx	r3
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	da07      	bge.n	8000fa6 <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 8000f96:	f06f 0304 	mvn.w	r3, #4
 8000f9a:	613b      	str	r3, [r7, #16]
                 break;
 8000f9c:	e010      	b.n	8000fc0 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 8000f9e:	f06f 0301 	mvn.w	r3, #1
 8000fa2:	613b      	str	r3, [r7, #16]
               break;
 8000fa4:	e00c      	b.n	8000fc0 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8000fa6:	68bb      	ldr	r3, [r7, #8]
 8000fa8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d1dd      	bne.n	8000f6c <LAN8742_Init+0xc6>
 8000fb0:	e006      	b.n	8000fc0 <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 8000fb2:	f06f 0304 	mvn.w	r3, #4
 8000fb6:	613b      	str	r3, [r7, #16]
 8000fb8:	e002      	b.n	8000fc0 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 8000fba:	f06f 0303 	mvn.w	r3, #3
 8000fbe:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 8000fc0:	693b      	ldr	r3, [r7, #16]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d112      	bne.n	8000fec <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	699b      	ldr	r3, [r3, #24]
 8000fca:	4798      	blx	r3
 8000fcc:	4603      	mov	r3, r0
 8000fce:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8000fd0:	bf00      	nop
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	699b      	ldr	r3, [r3, #24]
 8000fd6:	4798      	blx	r3
 8000fd8:	4603      	mov	r3, r0
 8000fda:	461a      	mov	r2, r3
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	1ad3      	subs	r3, r2, r3
 8000fe0:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000fe4:	d9f5      	bls.n	8000fd2 <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	2201      	movs	r2, #1
 8000fea:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 8000fec:	693b      	ldr	r3, [r7, #16]
 }
 8000fee:	4618      	mov	r0, r3
 8000ff0:	3718      	adds	r7, #24
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}

08000ff6 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8000ff6:	b580      	push	{r7, lr}
 8000ff8:	b084      	sub	sp, #16
 8000ffa:	af00      	add	r7, sp, #0
 8000ffc:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8000ffe:	2300      	movs	r3, #0
 8001000:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	695b      	ldr	r3, [r3, #20]
 8001006:	687a      	ldr	r2, [r7, #4]
 8001008:	6810      	ldr	r0, [r2, #0]
 800100a:	f107 020c 	add.w	r2, r7, #12
 800100e:	2101      	movs	r1, #1
 8001010:	4798      	blx	r3
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	da02      	bge.n	800101e <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001018:	f06f 0304 	mvn.w	r3, #4
 800101c:	e06e      	b.n	80010fc <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	695b      	ldr	r3, [r3, #20]
 8001022:	687a      	ldr	r2, [r7, #4]
 8001024:	6810      	ldr	r0, [r2, #0]
 8001026:	f107 020c 	add.w	r2, r7, #12
 800102a:	2101      	movs	r1, #1
 800102c:	4798      	blx	r3
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	da02      	bge.n	800103a <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001034:	f06f 0304 	mvn.w	r3, #4
 8001038:	e060      	b.n	80010fc <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	f003 0304 	and.w	r3, r3, #4
 8001040:	2b00      	cmp	r3, #0
 8001042:	d101      	bne.n	8001048 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 8001044:	2301      	movs	r3, #1
 8001046:	e059      	b.n	80010fc <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	695b      	ldr	r3, [r3, #20]
 800104c:	687a      	ldr	r2, [r7, #4]
 800104e:	6810      	ldr	r0, [r2, #0]
 8001050:	f107 020c 	add.w	r2, r7, #12
 8001054:	2100      	movs	r1, #0
 8001056:	4798      	blx	r3
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	da02      	bge.n	8001064 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 800105e:	f06f 0304 	mvn.w	r3, #4
 8001062:	e04b      	b.n	80010fc <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800106a:	2b00      	cmp	r3, #0
 800106c:	d11b      	bne.n	80010a6 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001074:	2b00      	cmp	r3, #0
 8001076:	d006      	beq.n	8001086 <LAN8742_GetLinkState+0x90>
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001082:	2302      	movs	r3, #2
 8001084:	e03a      	b.n	80010fc <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800108c:	2b00      	cmp	r3, #0
 800108e:	d001      	beq.n	8001094 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001090:	2303      	movs	r3, #3
 8001092:	e033      	b.n	80010fc <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800109a:	2b00      	cmp	r3, #0
 800109c:	d001      	beq.n	80010a2 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 800109e:	2304      	movs	r3, #4
 80010a0:	e02c      	b.n	80010fc <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80010a2:	2305      	movs	r3, #5
 80010a4:	e02a      	b.n	80010fc <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	695b      	ldr	r3, [r3, #20]
 80010aa:	687a      	ldr	r2, [r7, #4]
 80010ac:	6810      	ldr	r0, [r2, #0]
 80010ae:	f107 020c 	add.w	r2, r7, #12
 80010b2:	211f      	movs	r1, #31
 80010b4:	4798      	blx	r3
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	da02      	bge.n	80010c2 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 80010bc:	f06f 0304 	mvn.w	r3, #4
 80010c0:	e01c      	b.n	80010fc <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d101      	bne.n	80010d0 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 80010cc:	2306      	movs	r3, #6
 80010ce:	e015      	b.n	80010fc <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	f003 031c 	and.w	r3, r3, #28
 80010d6:	2b18      	cmp	r3, #24
 80010d8:	d101      	bne.n	80010de <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80010da:	2302      	movs	r3, #2
 80010dc:	e00e      	b.n	80010fc <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	f003 031c 	and.w	r3, r3, #28
 80010e4:	2b08      	cmp	r3, #8
 80010e6:	d101      	bne.n	80010ec <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80010e8:	2303      	movs	r3, #3
 80010ea:	e007      	b.n	80010fc <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	f003 031c 	and.w	r3, r3, #28
 80010f2:	2b14      	cmp	r3, #20
 80010f4:	d101      	bne.n	80010fa <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80010f6:	2304      	movs	r3, #4
 80010f8:	e000      	b.n	80010fc <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80010fa:	2305      	movs	r3, #5
    }				
  }
}
 80010fc:	4618      	mov	r0, r3
 80010fe:	3710      	adds	r7, #16
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}

08001104 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001108:	4b0e      	ldr	r3, [pc, #56]	; (8001144 <HAL_Init+0x40>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4a0d      	ldr	r2, [pc, #52]	; (8001144 <HAL_Init+0x40>)
 800110e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001112:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001114:	4b0b      	ldr	r3, [pc, #44]	; (8001144 <HAL_Init+0x40>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4a0a      	ldr	r2, [pc, #40]	; (8001144 <HAL_Init+0x40>)
 800111a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800111e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001120:	4b08      	ldr	r3, [pc, #32]	; (8001144 <HAL_Init+0x40>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4a07      	ldr	r2, [pc, #28]	; (8001144 <HAL_Init+0x40>)
 8001126:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800112a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800112c:	2003      	movs	r0, #3
 800112e:	f000 f8fc 	bl	800132a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001132:	200f      	movs	r0, #15
 8001134:	f7ff fc66 	bl	8000a04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001138:	f7ff fbf0 	bl	800091c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800113c:	2300      	movs	r3, #0
}
 800113e:	4618      	mov	r0, r3
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	40023c00 	.word	0x40023c00

08001148 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800114c:	4b06      	ldr	r3, [pc, #24]	; (8001168 <HAL_IncTick+0x20>)
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	461a      	mov	r2, r3
 8001152:	4b06      	ldr	r3, [pc, #24]	; (800116c <HAL_IncTick+0x24>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	4413      	add	r3, r2
 8001158:	4a04      	ldr	r2, [pc, #16]	; (800116c <HAL_IncTick+0x24>)
 800115a:	6013      	str	r3, [r2, #0]
}
 800115c:	bf00      	nop
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr
 8001166:	bf00      	nop
 8001168:	20000008 	.word	0x20000008
 800116c:	200003fc 	.word	0x200003fc

08001170 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
  return uwTick;
 8001174:	4b03      	ldr	r3, [pc, #12]	; (8001184 <HAL_GetTick+0x14>)
 8001176:	681b      	ldr	r3, [r3, #0]
}
 8001178:	4618      	mov	r0, r3
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr
 8001182:	bf00      	nop
 8001184:	200003fc 	.word	0x200003fc

08001188 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b084      	sub	sp, #16
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001190:	f7ff ffee 	bl	8001170 <HAL_GetTick>
 8001194:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011a0:	d005      	beq.n	80011ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011a2:	4b0a      	ldr	r3, [pc, #40]	; (80011cc <HAL_Delay+0x44>)
 80011a4:	781b      	ldrb	r3, [r3, #0]
 80011a6:	461a      	mov	r2, r3
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	4413      	add	r3, r2
 80011ac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80011ae:	bf00      	nop
 80011b0:	f7ff ffde 	bl	8001170 <HAL_GetTick>
 80011b4:	4602      	mov	r2, r0
 80011b6:	68bb      	ldr	r3, [r7, #8]
 80011b8:	1ad3      	subs	r3, r2, r3
 80011ba:	68fa      	ldr	r2, [r7, #12]
 80011bc:	429a      	cmp	r2, r3
 80011be:	d8f7      	bhi.n	80011b0 <HAL_Delay+0x28>
  {
  }
}
 80011c0:	bf00      	nop
 80011c2:	bf00      	nop
 80011c4:	3710      	adds	r7, #16
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	20000008 	.word	0x20000008

080011d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b085      	sub	sp, #20
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	f003 0307 	and.w	r3, r3, #7
 80011de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011e0:	4b0c      	ldr	r3, [pc, #48]	; (8001214 <__NVIC_SetPriorityGrouping+0x44>)
 80011e2:	68db      	ldr	r3, [r3, #12]
 80011e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011e6:	68ba      	ldr	r2, [r7, #8]
 80011e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011ec:	4013      	ands	r3, r2
 80011ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011f4:	68bb      	ldr	r3, [r7, #8]
 80011f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001200:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001202:	4a04      	ldr	r2, [pc, #16]	; (8001214 <__NVIC_SetPriorityGrouping+0x44>)
 8001204:	68bb      	ldr	r3, [r7, #8]
 8001206:	60d3      	str	r3, [r2, #12]
}
 8001208:	bf00      	nop
 800120a:	3714      	adds	r7, #20
 800120c:	46bd      	mov	sp, r7
 800120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001212:	4770      	bx	lr
 8001214:	e000ed00 	.word	0xe000ed00

08001218 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800121c:	4b04      	ldr	r3, [pc, #16]	; (8001230 <__NVIC_GetPriorityGrouping+0x18>)
 800121e:	68db      	ldr	r3, [r3, #12]
 8001220:	0a1b      	lsrs	r3, r3, #8
 8001222:	f003 0307 	and.w	r3, r3, #7
}
 8001226:	4618      	mov	r0, r3
 8001228:	46bd      	mov	sp, r7
 800122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122e:	4770      	bx	lr
 8001230:	e000ed00 	.word	0xe000ed00

08001234 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001234:	b480      	push	{r7}
 8001236:	b083      	sub	sp, #12
 8001238:	af00      	add	r7, sp, #0
 800123a:	4603      	mov	r3, r0
 800123c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800123e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001242:	2b00      	cmp	r3, #0
 8001244:	db0b      	blt.n	800125e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001246:	79fb      	ldrb	r3, [r7, #7]
 8001248:	f003 021f 	and.w	r2, r3, #31
 800124c:	4907      	ldr	r1, [pc, #28]	; (800126c <__NVIC_EnableIRQ+0x38>)
 800124e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001252:	095b      	lsrs	r3, r3, #5
 8001254:	2001      	movs	r0, #1
 8001256:	fa00 f202 	lsl.w	r2, r0, r2
 800125a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800125e:	bf00      	nop
 8001260:	370c      	adds	r7, #12
 8001262:	46bd      	mov	sp, r7
 8001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001268:	4770      	bx	lr
 800126a:	bf00      	nop
 800126c:	e000e100 	.word	0xe000e100

08001270 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001270:	b480      	push	{r7}
 8001272:	b083      	sub	sp, #12
 8001274:	af00      	add	r7, sp, #0
 8001276:	4603      	mov	r3, r0
 8001278:	6039      	str	r1, [r7, #0]
 800127a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800127c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001280:	2b00      	cmp	r3, #0
 8001282:	db0a      	blt.n	800129a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	b2da      	uxtb	r2, r3
 8001288:	490c      	ldr	r1, [pc, #48]	; (80012bc <__NVIC_SetPriority+0x4c>)
 800128a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800128e:	0112      	lsls	r2, r2, #4
 8001290:	b2d2      	uxtb	r2, r2
 8001292:	440b      	add	r3, r1
 8001294:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001298:	e00a      	b.n	80012b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	b2da      	uxtb	r2, r3
 800129e:	4908      	ldr	r1, [pc, #32]	; (80012c0 <__NVIC_SetPriority+0x50>)
 80012a0:	79fb      	ldrb	r3, [r7, #7]
 80012a2:	f003 030f 	and.w	r3, r3, #15
 80012a6:	3b04      	subs	r3, #4
 80012a8:	0112      	lsls	r2, r2, #4
 80012aa:	b2d2      	uxtb	r2, r2
 80012ac:	440b      	add	r3, r1
 80012ae:	761a      	strb	r2, [r3, #24]
}
 80012b0:	bf00      	nop
 80012b2:	370c      	adds	r7, #12
 80012b4:	46bd      	mov	sp, r7
 80012b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ba:	4770      	bx	lr
 80012bc:	e000e100 	.word	0xe000e100
 80012c0:	e000ed00 	.word	0xe000ed00

080012c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b089      	sub	sp, #36	; 0x24
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	60f8      	str	r0, [r7, #12]
 80012cc:	60b9      	str	r1, [r7, #8]
 80012ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	f003 0307 	and.w	r3, r3, #7
 80012d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012d8:	69fb      	ldr	r3, [r7, #28]
 80012da:	f1c3 0307 	rsb	r3, r3, #7
 80012de:	2b04      	cmp	r3, #4
 80012e0:	bf28      	it	cs
 80012e2:	2304      	movcs	r3, #4
 80012e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012e6:	69fb      	ldr	r3, [r7, #28]
 80012e8:	3304      	adds	r3, #4
 80012ea:	2b06      	cmp	r3, #6
 80012ec:	d902      	bls.n	80012f4 <NVIC_EncodePriority+0x30>
 80012ee:	69fb      	ldr	r3, [r7, #28]
 80012f0:	3b03      	subs	r3, #3
 80012f2:	e000      	b.n	80012f6 <NVIC_EncodePriority+0x32>
 80012f4:	2300      	movs	r3, #0
 80012f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012f8:	f04f 32ff 	mov.w	r2, #4294967295
 80012fc:	69bb      	ldr	r3, [r7, #24]
 80012fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001302:	43da      	mvns	r2, r3
 8001304:	68bb      	ldr	r3, [r7, #8]
 8001306:	401a      	ands	r2, r3
 8001308:	697b      	ldr	r3, [r7, #20]
 800130a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800130c:	f04f 31ff 	mov.w	r1, #4294967295
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	fa01 f303 	lsl.w	r3, r1, r3
 8001316:	43d9      	mvns	r1, r3
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800131c:	4313      	orrs	r3, r2
         );
}
 800131e:	4618      	mov	r0, r3
 8001320:	3724      	adds	r7, #36	; 0x24
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr

0800132a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800132a:	b580      	push	{r7, lr}
 800132c:	b082      	sub	sp, #8
 800132e:	af00      	add	r7, sp, #0
 8001330:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001332:	6878      	ldr	r0, [r7, #4]
 8001334:	f7ff ff4c 	bl	80011d0 <__NVIC_SetPriorityGrouping>
}
 8001338:	bf00      	nop
 800133a:	3708      	adds	r7, #8
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}

08001340 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001340:	b580      	push	{r7, lr}
 8001342:	b086      	sub	sp, #24
 8001344:	af00      	add	r7, sp, #0
 8001346:	4603      	mov	r3, r0
 8001348:	60b9      	str	r1, [r7, #8]
 800134a:	607a      	str	r2, [r7, #4]
 800134c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800134e:	2300      	movs	r3, #0
 8001350:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001352:	f7ff ff61 	bl	8001218 <__NVIC_GetPriorityGrouping>
 8001356:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001358:	687a      	ldr	r2, [r7, #4]
 800135a:	68b9      	ldr	r1, [r7, #8]
 800135c:	6978      	ldr	r0, [r7, #20]
 800135e:	f7ff ffb1 	bl	80012c4 <NVIC_EncodePriority>
 8001362:	4602      	mov	r2, r0
 8001364:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001368:	4611      	mov	r1, r2
 800136a:	4618      	mov	r0, r3
 800136c:	f7ff ff80 	bl	8001270 <__NVIC_SetPriority>
}
 8001370:	bf00      	nop
 8001372:	3718      	adds	r7, #24
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}

08001378 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b082      	sub	sp, #8
 800137c:	af00      	add	r7, sp, #0
 800137e:	4603      	mov	r3, r0
 8001380:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001382:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001386:	4618      	mov	r0, r3
 8001388:	f7ff ff54 	bl	8001234 <__NVIC_EnableIRQ>
}
 800138c:	bf00      	nop
 800138e:	3708      	adds	r7, #8
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}

08001394 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b084      	sub	sp, #16
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d101      	bne.n	80013a6 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80013a2:	2301      	movs	r3, #1
 80013a4:	e06c      	b.n	8001480 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d106      	bne.n	80013be <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	2223      	movs	r2, #35	; 0x23
 80013b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80013b8:	6878      	ldr	r0, [r7, #4]
 80013ba:	f003 f999 	bl	80046f0 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013be:	2300      	movs	r3, #0
 80013c0:	60bb      	str	r3, [r7, #8]
 80013c2:	4b31      	ldr	r3, [pc, #196]	; (8001488 <HAL_ETH_Init+0xf4>)
 80013c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013c6:	4a30      	ldr	r2, [pc, #192]	; (8001488 <HAL_ETH_Init+0xf4>)
 80013c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013cc:	6453      	str	r3, [r2, #68]	; 0x44
 80013ce:	4b2e      	ldr	r3, [pc, #184]	; (8001488 <HAL_ETH_Init+0xf4>)
 80013d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013d6:	60bb      	str	r3, [r7, #8]
 80013d8:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80013da:	4b2c      	ldr	r3, [pc, #176]	; (800148c <HAL_ETH_Init+0xf8>)
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	4a2b      	ldr	r2, [pc, #172]	; (800148c <HAL_ETH_Init+0xf8>)
 80013e0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80013e4:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80013e6:	4b29      	ldr	r3, [pc, #164]	; (800148c <HAL_ETH_Init+0xf8>)
 80013e8:	685a      	ldr	r2, [r3, #4]
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	689b      	ldr	r3, [r3, #8]
 80013ee:	4927      	ldr	r1, [pc, #156]	; (800148c <HAL_ETH_Init+0xf8>)
 80013f0:	4313      	orrs	r3, r2
 80013f2:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80013f4:	4b25      	ldr	r3, [pc, #148]	; (800148c <HAL_ETH_Init+0xf8>)
 80013f6:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	687a      	ldr	r2, [r7, #4]
 8001404:	6812      	ldr	r2, [r2, #0]
 8001406:	f043 0301 	orr.w	r3, r3, #1
 800140a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800140e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001410:	f7ff feae 	bl	8001170 <HAL_GetTick>
 8001414:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001416:	e011      	b.n	800143c <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001418:	f7ff feaa 	bl	8001170 <HAL_GetTick>
 800141c:	4602      	mov	r2, r0
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	1ad3      	subs	r3, r2, r3
 8001422:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001426:	d909      	bls.n	800143c <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2204      	movs	r2, #4
 800142c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	22e0      	movs	r2, #224	; 0xe0
 8001434:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001438:	2301      	movs	r3, #1
 800143a:	e021      	b.n	8001480 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f003 0301 	and.w	r3, r3, #1
 800144a:	2b00      	cmp	r3, #0
 800144c:	d1e4      	bne.n	8001418 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800144e:	6878      	ldr	r0, [r7, #4]
 8001450:	f000 ffaa 	bl	80023a8 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001454:	6878      	ldr	r0, [r7, #4]
 8001456:	f001 f851 	bl	80024fc <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800145a:	6878      	ldr	r0, [r7, #4]
 800145c:	f001 f8a7 	bl	80025ae <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	461a      	mov	r2, r3
 8001466:	2100      	movs	r1, #0
 8001468:	6878      	ldr	r0, [r7, #4]
 800146a:	f001 f80f 	bl	800248c <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	2200      	movs	r2, #0
 8001472:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	2210      	movs	r2, #16
 800147a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800147e:	2300      	movs	r3, #0
}
 8001480:	4618      	mov	r0, r3
 8001482:	3710      	adds	r7, #16
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}
 8001488:	40023800 	.word	0x40023800
 800148c:	40013800 	.word	0x40013800

08001490 <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b084      	sub	sp, #16
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800149e:	2b10      	cmp	r3, #16
 80014a0:	d150      	bne.n	8001544 <HAL_ETH_Start+0xb4>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	2223      	movs	r2, #35	; 0x23
 80014a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	2204      	movs	r2, #4
 80014ae:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 80014b0:	6878      	ldr	r0, [r7, #4]
 80014b2:	f000 fa79 	bl	80019a8 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	681a      	ldr	r2, [r3, #0]
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f042 0208 	orr.w	r2, r2, #8
 80014c4:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80014ce:	2001      	movs	r0, #1
 80014d0:	f7ff fe5a 	bl	8001188 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	68fa      	ldr	r2, [r7, #12]
 80014da:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	681a      	ldr	r2, [r3, #0]
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f042 0204 	orr.w	r2, r2, #4
 80014ea:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80014f4:	2001      	movs	r0, #1
 80014f6:	f7ff fe47 	bl	8001188 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	68fa      	ldr	r2, [r7, #12]
 8001500:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8001502:	6878      	ldr	r0, [r7, #4]
 8001504:	f000 fdf1 	bl	80020ea <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001510:	699b      	ldr	r3, [r3, #24]
 8001512:	687a      	ldr	r2, [r7, #4]
 8001514:	6812      	ldr	r2, [r2, #0]
 8001516:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800151a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800151e:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001528:	699b      	ldr	r3, [r3, #24]
 800152a:	687a      	ldr	r2, [r7, #4]
 800152c:	6812      	ldr	r2, [r2, #0]
 800152e:	f043 0302 	orr.w	r3, r3, #2
 8001532:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001536:	6193      	str	r3, [r2, #24]

    heth->gState = HAL_ETH_STATE_STARTED;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	2223      	movs	r2, #35	; 0x23
 800153c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8001540:	2300      	movs	r3, #0
 8001542:	e000      	b.n	8001546 <HAL_ETH_Start+0xb6>
  }
  else
  {
    return HAL_ERROR;
 8001544:	2301      	movs	r3, #1
  }
}
 8001546:	4618      	mov	r0, r3
 8001548:	3710      	adds	r7, #16
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}

0800154e <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 800154e:	b580      	push	{r7, lr}
 8001550:	b084      	sub	sp, #16
 8001552:	af00      	add	r7, sp, #0
 8001554:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800155c:	2b10      	cmp	r3, #16
 800155e:	d17f      	bne.n	8001660 <HAL_ETH_Start_IT+0x112>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2223      	movs	r2, #35	; 0x23
 8001564:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2201      	movs	r2, #1
 800156c:	659a      	str	r2, [r3, #88]	; 0x58
    /* Disable MMC Interrupts */
    SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f442 7202 	orr.w	r2, r2, #520	; 0x208
 800157c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable Rx MMC Interrupts */
    SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8001586:	687a      	ldr	r2, [r7, #4]
 8001588:	6812      	ldr	r2, [r2, #0]
 800158a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800158e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001592:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
            ETH_MMCRIMR_RFCEM);

    /* Disable Tx MMC Interrupts */
    SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f442 1203 	orr.w	r2, r2, #2146304	; 0x20c000
 80015a6:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            ETH_MMCTIMR_TGFSCM);

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	2204      	movs	r2, #4
 80015ae:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 80015b0:	6878      	ldr	r0, [r7, #4]
 80015b2:	f000 f9f9 	bl	80019a8 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	681a      	ldr	r2, [r3, #0]
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f042 0208 	orr.w	r2, r2, #8
 80015c4:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80015ce:	2001      	movs	r0, #1
 80015d0:	f7ff fdda 	bl	8001188 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	68fa      	ldr	r2, [r7, #12]
 80015da:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	681a      	ldr	r2, [r3, #0]
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f042 0204 	orr.w	r2, r2, #4
 80015ea:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80015f4:	2001      	movs	r0, #1
 80015f6:	f7ff fdc7 	bl	8001188 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	68fa      	ldr	r2, [r7, #12]
 8001600:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8001602:	6878      	ldr	r0, [r7, #4]
 8001604:	f000 fd71 	bl	80020ea <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001610:	699b      	ldr	r3, [r3, #24]
 8001612:	687a      	ldr	r2, [r7, #4]
 8001614:	6812      	ldr	r2, [r2, #0]
 8001616:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800161a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800161e:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001628:	699b      	ldr	r3, [r3, #24]
 800162a:	687a      	ldr	r2, [r7, #4]
 800162c:	6812      	ldr	r2, [r2, #0]
 800162e:	f043 0302 	orr.w	r3, r3, #2
 8001632:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001636:	6193      	str	r3, [r2, #24]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001640:	69db      	ldr	r3, [r3, #28]
 8001642:	687a      	ldr	r2, [r7, #4]
 8001644:	6812      	ldr	r2, [r2, #0]
 8001646:	f443 33d0 	orr.w	r3, r3, #106496	; 0x1a000
 800164a:	f043 03c1 	orr.w	r3, r3, #193	; 0xc1
 800164e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001652:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	2223      	movs	r2, #35	; 0x23
 8001658:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    return HAL_OK;
 800165c:	2300      	movs	r3, #0
 800165e:	e000      	b.n	8001662 <HAL_ETH_Start_IT+0x114>
  }
  else
  {
    return HAL_ERROR;
 8001660:	2301      	movs	r3, #1
  }
}
 8001662:	4618      	mov	r0, r3
 8001664:	3710      	adds	r7, #16
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}

0800166a <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 800166a:	b580      	push	{r7, lr}
 800166c:	b086      	sub	sp, #24
 800166e:	af00      	add	r7, sp, #0
 8001670:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001678:	2b23      	cmp	r3, #35	; 0x23
 800167a:	d170      	bne.n	800175e <HAL_ETH_Stop_IT+0xf4>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2223      	movs	r2, #35	; 0x23
 8001680:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800168c:	69db      	ldr	r3, [r3, #28]
 800168e:	687a      	ldr	r2, [r7, #4]
 8001690:	6812      	ldr	r2, [r2, #0]
 8001692:	f423 33d0 	bic.w	r3, r3, #106496	; 0x1a000
 8001696:	f023 03c1 	bic.w	r3, r3, #193	; 0xc1
 800169a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800169e:	61d3      	str	r3, [r2, #28]
                                    ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016a8:	699b      	ldr	r3, [r3, #24]
 80016aa:	687a      	ldr	r2, [r7, #4]
 80016ac:	6812      	ldr	r2, [r2, #0]
 80016ae:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80016b2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80016b6:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016c0:	699b      	ldr	r3, [r3, #24]
 80016c2:	687a      	ldr	r2, [r7, #4]
 80016c4:	6812      	ldr	r2, [r2, #0]
 80016c6:	f023 0302 	bic.w	r3, r3, #2
 80016ca:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80016ce:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	681a      	ldr	r2, [r3, #0]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f022 0204 	bic.w	r2, r2, #4
 80016de:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80016e8:	2001      	movs	r0, #1
 80016ea:	f7ff fd4d 	bl	8001188 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	693a      	ldr	r2, [r7, #16]
 80016f4:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 80016f6:	6878      	ldr	r0, [r7, #4]
 80016f8:	f000 fcf7 	bl	80020ea <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	681a      	ldr	r2, [r3, #0]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f022 0208 	bic.w	r2, r2, #8
 800170a:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001714:	2001      	movs	r0, #1
 8001716:	f7ff fd37 	bl	8001188 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	693a      	ldr	r2, [r7, #16]
 8001720:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8001722:	2300      	movs	r3, #0
 8001724:	617b      	str	r3, [r7, #20]
 8001726:	e00e      	b.n	8001746 <HAL_ETH_Stop_IT+0xdc>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	697a      	ldr	r2, [r7, #20]
 800172c:	3212      	adds	r2, #18
 800172e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001732:	60fb      	str	r3, [r7, #12]
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	605a      	str	r2, [r3, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	3301      	adds	r3, #1
 8001744:	617b      	str	r3, [r7, #20]
 8001746:	697b      	ldr	r3, [r7, #20]
 8001748:	2b03      	cmp	r3, #3
 800174a:	d9ed      	bls.n	8001728 <HAL_ETH_Stop_IT+0xbe>
    }

    heth->RxDescList.ItMode = 0U;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2200      	movs	r2, #0
 8001750:	659a      	str	r2, [r3, #88]	; 0x58

    heth->gState = HAL_ETH_STATE_READY;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2210      	movs	r2, #16
 8001756:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 800175a:	2300      	movs	r3, #0
 800175c:	e000      	b.n	8001760 <HAL_ETH_Stop_IT+0xf6>
  }
  else
  {
    return HAL_ERROR;
 800175e:	2301      	movs	r3, #1
  }
}
 8001760:	4618      	mov	r0, r3
 8001762:	3718      	adds	r7, #24
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}

08001768 <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b082      	sub	sp, #8
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
 8001770:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d109      	bne.n	800178c <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800177e:	f043 0201 	orr.w	r2, r3, #1
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8001788:	2301      	movs	r3, #1
 800178a:	e045      	b.n	8001818 <HAL_ETH_Transmit_IT+0xb0>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001792:	2b23      	cmp	r3, #35	; 0x23
 8001794:	d13f      	bne.n	8001816 <HAL_ETH_Transmit_IT+0xae>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 800179e:	2201      	movs	r2, #1
 80017a0:	6839      	ldr	r1, [r7, #0]
 80017a2:	6878      	ldr	r0, [r7, #4]
 80017a4:	f000 ff70 	bl	8002688 <ETH_Prepare_Tx_Descriptors>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d009      	beq.n	80017c2 <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017b4:	f043 0202 	orr.w	r2, r3, #2
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 80017be:	2301      	movs	r3, #1
 80017c0:	e02a      	b.n	8001818 <HAL_ETH_Transmit_IT+0xb0>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80017c2:	f3bf 8f4f 	dsb	sy
}
 80017c6:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017cc:	1c5a      	adds	r2, r3, #1
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	629a      	str	r2, [r3, #40]	; 0x28
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017d6:	2b03      	cmp	r3, #3
 80017d8:	d904      	bls.n	80017e4 <HAL_ETH_Transmit_IT+0x7c>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017de:	1f1a      	subs	r2, r3, #4
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017ec:	695b      	ldr	r3, [r3, #20]
 80017ee:	f003 0304 	and.w	r3, r3, #4
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d00d      	beq.n	8001812 <HAL_ETH_Transmit_IT+0xaa>
    {
      /* Clear TBUS ETHERNET DMA flag */
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017fe:	461a      	mov	r2, r3
 8001800:	2304      	movs	r3, #4
 8001802:	6153      	str	r3, [r2, #20]
      /* Resume DMA transmission*/
      (heth->Instance)->DMATPDR = 0U;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800180c:	461a      	mov	r2, r3
 800180e:	2300      	movs	r3, #0
 8001810:	6053      	str	r3, [r2, #4]
    }

    return HAL_OK;
 8001812:	2300      	movs	r3, #0
 8001814:	e000      	b.n	8001818 <HAL_ETH_Transmit_IT+0xb0>

  }
  else
  {
    return HAL_ERROR;
 8001816:	2301      	movs	r3, #1
  }
}
 8001818:	4618      	mov	r0, r3
 800181a:	3708      	adds	r7, #8
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}

08001820 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b088      	sub	sp, #32
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
 8001828:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 800182a:	2300      	movs	r3, #0
 800182c:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 800182e:	2300      	movs	r3, #0
 8001830:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d109      	bne.n	800184c <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800183e:	f043 0201 	orr.w	r2, r3, #1
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8001848:	2301      	movs	r3, #1
 800184a:	e0a8      	b.n	800199e <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001852:	2b23      	cmp	r3, #35	; 0x23
 8001854:	d001      	beq.n	800185a <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8001856:	2301      	movs	r3, #1
 8001858:	e0a1      	b.n	800199e <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800185e:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	69fa      	ldr	r2, [r7, #28]
 8001864:	3212      	adds	r2, #18
 8001866:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800186a:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001870:	f1c3 0304 	rsb	r3, r3, #4
 8001874:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001876:	e06a      	b.n	800194e <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8001878:	69bb      	ldr	r3, [r7, #24]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001880:	2b00      	cmp	r3, #0
 8001882:	d007      	beq.n	8001894 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC6;
 8001884:	69bb      	ldr	r3, [r7, #24]
 8001886:	699a      	ldr	r2, [r3, #24]
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC7;
 800188c:	69bb      	ldr	r3, [r7, #24]
 800188e:	69da      	ldr	r2, [r3, #28]
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8001894:	69bb      	ldr	r3, [r7, #24]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800189c:	2b00      	cmp	r3, #0
 800189e:	d103      	bne.n	80018a8 <HAL_ETH_ReadData+0x88>
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d040      	beq.n	800192a <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 80018a8:	69bb      	ldr	r3, [r7, #24]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d005      	beq.n	80018c0 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2200      	movs	r2, #0
 80018b8:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	2200      	movs	r2, #0
 80018be:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	695b      	ldr	r3, [r3, #20]
 80018c4:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 80018c6:	69bb      	ldr	r3, [r7, #24]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d00c      	beq.n	80018ec <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 80018d2:	69bb      	ldr	r3, [r7, #24]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	0c1b      	lsrs	r3, r3, #16
 80018d8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80018dc:	3b04      	subs	r3, #4
 80018de:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 80018e0:	69bb      	ldr	r3, [r7, #24]
 80018e2:	681a      	ldr	r2, [r3, #0]
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 80018e8:	2301      	movs	r3, #1
 80018ea:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 80018ec:	69bb      	ldr	r3, [r7, #24]
 80018ee:	689a      	ldr	r2, [r3, #8]
 80018f0:	69bb      	ldr	r3, [r7, #24]
 80018f2:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8001900:	69bb      	ldr	r3, [r7, #24]
 8001902:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001904:	461a      	mov	r2, r3
 8001906:	693b      	ldr	r3, [r7, #16]
 8001908:	b29b      	uxth	r3, r3
 800190a:	f003 f8cb 	bl	8004aa4 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001912:	1c5a      	adds	r2, r3, #1
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800191c:	693b      	ldr	r3, [r7, #16]
 800191e:	441a      	add	r2, r3
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8001924:	69bb      	ldr	r3, [r7, #24]
 8001926:	2200      	movs	r2, #0
 8001928:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 800192a:	69fb      	ldr	r3, [r7, #28]
 800192c:	3301      	adds	r3, #1
 800192e:	61fb      	str	r3, [r7, #28]
 8001930:	69fb      	ldr	r3, [r7, #28]
 8001932:	2b03      	cmp	r3, #3
 8001934:	d902      	bls.n	800193c <HAL_ETH_ReadData+0x11c>
 8001936:	69fb      	ldr	r3, [r7, #28]
 8001938:	3b04      	subs	r3, #4
 800193a:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	69fa      	ldr	r2, [r7, #28]
 8001940:	3212      	adds	r2, #18
 8001942:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001946:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8001948:	697b      	ldr	r3, [r7, #20]
 800194a:	3301      	adds	r3, #1
 800194c:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800194e:	69bb      	ldr	r3, [r7, #24]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	2b00      	cmp	r3, #0
 8001954:	db06      	blt.n	8001964 <HAL_ETH_ReadData+0x144>
 8001956:	697a      	ldr	r2, [r7, #20]
 8001958:	68bb      	ldr	r3, [r7, #8]
 800195a:	429a      	cmp	r2, r3
 800195c:	d202      	bcs.n	8001964 <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 800195e:	7bfb      	ldrb	r3, [r7, #15]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d089      	beq.n	8001878 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001968:	697b      	ldr	r3, [r7, #20]
 800196a:	441a      	add	r2, r3
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001974:	2b00      	cmp	r3, #0
 8001976:	d002      	beq.n	800197e <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8001978:	6878      	ldr	r0, [r7, #4]
 800197a:	f000 f815 	bl	80019a8 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	69fa      	ldr	r2, [r7, #28]
 8001982:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 8001984:	7bfb      	ldrb	r3, [r7, #15]
 8001986:	2b01      	cmp	r3, #1
 8001988:	d108      	bne.n	800199c <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	2200      	movs	r2, #0
 8001996:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8001998:	2300      	movs	r3, #0
 800199a:	e000      	b.n	800199e <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 800199c:	2301      	movs	r3, #1
}
 800199e:	4618      	mov	r0, r3
 80019a0:	3720      	adds	r7, #32
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
	...

080019a8 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b088      	sub	sp, #32
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 80019b0:	2300      	movs	r3, #0
 80019b2:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 80019b4:	2301      	movs	r3, #1
 80019b6:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80019bc:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	69fa      	ldr	r2, [r7, #28]
 80019c2:	3212      	adds	r2, #18
 80019c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019c8:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80019ce:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 80019d0:	e040      	b.n	8001a54 <ETH_UpdateDescriptor+0xac>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 80019d2:	697b      	ldr	r3, [r7, #20]
 80019d4:	6a1b      	ldr	r3, [r3, #32]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d112      	bne.n	8001a00 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 80019da:	f107 030c 	add.w	r3, r7, #12
 80019de:	4618      	mov	r0, r3
 80019e0:	f003 f830 	bl	8004a44 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d102      	bne.n	80019f0 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 80019ea:	2300      	movs	r3, #0
 80019ec:	74fb      	strb	r3, [r7, #19]
 80019ee:	e007      	b.n	8001a00 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	461a      	mov	r2, r3
 80019f4:	697b      	ldr	r3, [r7, #20]
 80019f6:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	461a      	mov	r2, r3
 80019fc:	697b      	ldr	r3, [r7, #20]
 80019fe:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8001a00:	7cfb      	ldrb	r3, [r7, #19]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d026      	beq.n	8001a54 <ETH_UpdateDescriptor+0xac>
    {
      if (heth->RxDescList.ItMode == 0U)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d103      	bne.n	8001a16 <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8001a0e:	697b      	ldr	r3, [r7, #20]
 8001a10:	4a1e      	ldr	r2, [pc, #120]	; (8001a8c <ETH_UpdateDescriptor+0xe4>)
 8001a12:	605a      	str	r2, [r3, #4]
 8001a14:	e003      	b.n	8001a1e <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8001a16:	697b      	ldr	r3, [r7, #20]
 8001a18:	f244 52f8 	movw	r2, #17912	; 0x45f8
 8001a1c:	605a      	str	r2, [r3, #4]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001a1e:	f3bf 8f5f 	dmb	sy
}
 8001a22:	bf00      	nop
         is fully performed.
         The __DMB() instruction is added to avoid any potential compiler optimization that
         may lead to abnormal behavior. */
      __DMB();

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8001a24:	697b      	ldr	r3, [r7, #20]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001a2c:	697b      	ldr	r3, [r7, #20]
 8001a2e:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001a30:	69fb      	ldr	r3, [r7, #28]
 8001a32:	3301      	adds	r3, #1
 8001a34:	61fb      	str	r3, [r7, #28]
 8001a36:	69fb      	ldr	r3, [r7, #28]
 8001a38:	2b03      	cmp	r3, #3
 8001a3a:	d902      	bls.n	8001a42 <ETH_UpdateDescriptor+0x9a>
 8001a3c:	69fb      	ldr	r3, [r7, #28]
 8001a3e:	3b04      	subs	r3, #4
 8001a40:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	69fa      	ldr	r2, [r7, #28]
 8001a46:	3212      	adds	r2, #18
 8001a48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a4c:	617b      	str	r3, [r7, #20]
      desccount--;
 8001a4e:	69bb      	ldr	r3, [r7, #24]
 8001a50:	3b01      	subs	r3, #1
 8001a52:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8001a54:	69bb      	ldr	r3, [r7, #24]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d002      	beq.n	8001a60 <ETH_UpdateDescriptor+0xb8>
 8001a5a:	7cfb      	ldrb	r3, [r7, #19]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d1b8      	bne.n	80019d2 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001a64:	69ba      	ldr	r2, [r7, #24]
 8001a66:	429a      	cmp	r2, r3
 8001a68:	d00c      	beq.n	8001a84 <ETH_UpdateDescriptor+0xdc>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, 0);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a72:	461a      	mov	r2, r3
 8001a74:	2300      	movs	r3, #0
 8001a76:	6093      	str	r3, [r2, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	69fa      	ldr	r2, [r7, #28]
 8001a7c:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	69ba      	ldr	r2, [r7, #24]
 8001a82:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 8001a84:	bf00      	nop
 8001a86:	3720      	adds	r7, #32
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}
 8001a8c:	800045f8 	.word	0x800045f8

08001a90 <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b086      	sub	sp, #24
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	3318      	adds	r3, #24
 8001a9c:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 8001a9e:	68bb      	ldr	r3, [r7, #8]
 8001aa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aa2:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 8001aa4:	68bb      	ldr	r3, [r7, #8]
 8001aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aa8:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8001aae:	e03f      	b.n	8001b30 <HAL_ETH_ReleaseTxPacket+0xa0>
  {
    pktInUse = 1U;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	3b01      	subs	r3, #1
 8001ab8:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 8001aba:	68ba      	ldr	r2, [r7, #8]
 8001abc:	693b      	ldr	r3, [r7, #16]
 8001abe:	3304      	adds	r3, #4
 8001ac0:	009b      	lsls	r3, r3, #2
 8001ac2:	4413      	add	r3, r2
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d106      	bne.n	8001ad8 <HAL_ETH_ReleaseTxPacket+0x48>
    {
      /* No packet in use, skip to next.  */
      idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8001aca:	693b      	ldr	r3, [r7, #16]
 8001acc:	3301      	adds	r3, #1
 8001ace:	f003 0303 	and.w	r3, r3, #3
 8001ad2:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 8001ad8:	7bbb      	ldrb	r3, [r7, #14]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d028      	beq.n	8001b30 <HAL_ETH_ReleaseTxPacket+0xa0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	68d9      	ldr	r1, [r3, #12]
 8001ae2:	693a      	ldr	r2, [r7, #16]
 8001ae4:	4613      	mov	r3, r2
 8001ae6:	009b      	lsls	r3, r3, #2
 8001ae8:	4413      	add	r3, r2
 8001aea:	00db      	lsls	r3, r3, #3
 8001aec:	440b      	add	r3, r1
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	db1b      	blt.n	8001b2c <HAL_ETH_ReleaseTxPacket+0x9c>
#ifdef HAL_ETH_USE_PTP
        /* Handle Ptp  */
        HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 8001af4:	68ba      	ldr	r2, [r7, #8]
 8001af6:	693b      	ldr	r3, [r7, #16]
 8001af8:	3304      	adds	r3, #4
 8001afa:	009b      	lsls	r3, r3, #2
 8001afc:	4413      	add	r3, r2
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	4618      	mov	r0, r3
 8001b02:	f003 f80f 	bl	8004b24 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 8001b06:	68ba      	ldr	r2, [r7, #8]
 8001b08:	693b      	ldr	r3, [r7, #16]
 8001b0a:	3304      	adds	r3, #4
 8001b0c:	009b      	lsls	r3, r3, #2
 8001b0e:	4413      	add	r3, r2
 8001b10:	2200      	movs	r2, #0
 8001b12:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8001b14:	693b      	ldr	r3, [r7, #16]
 8001b16:	3301      	adds	r3, #1
 8001b18:	f003 0303 	and.w	r3, r3, #3
 8001b1c:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 8001b1e:	68bb      	ldr	r3, [r7, #8]
 8001b20:	697a      	ldr	r2, [r7, #20]
 8001b22:	629a      	str	r2, [r3, #40]	; 0x28
        dmatxdesclist->releaseIndex = idx;
 8001b24:	68bb      	ldr	r3, [r7, #8]
 8001b26:	693a      	ldr	r2, [r7, #16]
 8001b28:	62da      	str	r2, [r3, #44]	; 0x2c
 8001b2a:	e001      	b.n	8001b30 <HAL_ETH_ReleaseTxPacket+0xa0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d002      	beq.n	8001b3c <HAL_ETH_ReleaseTxPacket+0xac>
 8001b36:	7bfb      	ldrb	r3, [r7, #15]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d1b9      	bne.n	8001ab0 <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 8001b3c:	2300      	movs	r3, #0
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	3718      	adds	r7, #24
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
	...

08001b48 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b082      	sub	sp, #8
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b58:	695b      	ldr	r3, [r3, #20]
 8001b5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b5e:	2b40      	cmp	r3, #64	; 0x40
 8001b60:	d112      	bne.n	8001b88 <HAL_ETH_IRQHandler+0x40>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_RIE))
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b6a:	69db      	ldr	r3, [r3, #28]
 8001b6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b70:	2b40      	cmp	r3, #64	; 0x40
 8001b72:	d109      	bne.n	8001b88 <HAL_ETH_IRQHandler+0x40>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b7c:	461a      	mov	r2, r3
 8001b7e:	4b50      	ldr	r3, [pc, #320]	; (8001cc0 <HAL_ETH_IRQHandler+0x178>)
 8001b80:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 8001b82:	6878      	ldr	r0, [r7, #4]
 8001b84:	f002 fb18 	bl	80041b8 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b90:	695b      	ldr	r3, [r3, #20]
 8001b92:	f003 0301 	and.w	r3, r3, #1
 8001b96:	2b01      	cmp	r3, #1
 8001b98:	d113      	bne.n	8001bc2 <HAL_ETH_IRQHandler+0x7a>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_TIE))
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ba2:	69db      	ldr	r3, [r3, #28]
 8001ba4:	f003 0301 	and.w	r3, r3, #1
 8001ba8:	2b01      	cmp	r3, #1
 8001baa:	d10a      	bne.n	8001bc2 <HAL_ETH_IRQHandler+0x7a>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bb4:	461a      	mov	r2, r3
 8001bb6:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8001bba:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 8001bbc:	6878      	ldr	r0, [r7, #4]
 8001bbe:	f002 fb0b 	bl	80041d8 <HAL_ETH_TxCpltCallback>
    }
  }


  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bca:	695b      	ldr	r3, [r3, #20]
 8001bcc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001bd0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001bd4:	d14c      	bne.n	8001c70 <HAL_ETH_IRQHandler+0x128>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_AISE))
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bde:	69db      	ldr	r3, [r3, #28]
 8001be0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001be4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001be8:	d142      	bne.n	8001c70 <HAL_ETH_IRQHandler+0x128>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bf0:	f043 0208 	orr.w	r2, r3, #8
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c02:	695b      	ldr	r3, [r3, #20]
 8001c04:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c08:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001c0c:	d11a      	bne.n	8001c44 <HAL_ETH_IRQHandler+0xfc>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c16:	695a      	ldr	r2, [r3, #20]
 8001c18:	4b2a      	ldr	r3, [pc, #168]	; (8001cc4 <HAL_ETH_IRQHandler+0x17c>)
 8001c1a:	4013      	ands	r3, r2
 8001c1c:	687a      	ldr	r2, [r7, #4]
 8001c1e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c2a:	69db      	ldr	r3, [r3, #28]
 8001c2c:	687a      	ldr	r2, [r7, #4]
 8001c2e:	6812      	ldr	r2, [r2, #0]
 8001c30:	f423 33c0 	bic.w	r3, r3, #98304	; 0x18000
 8001c34:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001c38:	61d3      	str	r3, [r2, #28]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	22e0      	movs	r2, #224	; 0xe0
 8001c3e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8001c42:	e012      	b.n	8001c6a <HAL_ETH_IRQHandler+0x122>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c4c:	695a      	ldr	r2, [r3, #20]
 8001c4e:	f248 6380 	movw	r3, #34432	; 0x8680
 8001c52:	4013      	ands	r3, r2
 8001c54:	687a      	ldr	r2, [r7, #4]
 8001c56:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                                                              ETH_DMASR_RBUS | ETH_DMASR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c62:	461a      	mov	r2, r3
 8001c64:	f248 6380 	movw	r3, #34432	; 0x8680
 8001c68:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 8001c6a:	6878      	ldr	r0, [r7, #4]
 8001c6c:	f002 fac4 	bl	80041f8 <HAL_ETH_ErrorCallback>
    }
  }


  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c76:	f003 0308 	and.w	r3, r3, #8
 8001c7a:	2b08      	cmp	r3, #8
 8001c7c:	d10e      	bne.n	8001c9c <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c84:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8001c8e:	6878      	ldr	r0, [r7, #4]
 8001c90:	f000 f81c 	bl	8001ccc <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2200      	movs	r2, #0
 8001c98:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }


  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8001c9c:	4b0a      	ldr	r3, [pc, #40]	; (8001cc8 <HAL_ETH_IRQHandler+0x180>)
 8001c9e:	695b      	ldr	r3, [r3, #20]
 8001ca0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d006      	beq.n	8001cb6 <HAL_ETH_IRQHandler+0x16e>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8001ca8:	4b07      	ldr	r3, [pc, #28]	; (8001cc8 <HAL_ETH_IRQHandler+0x180>)
 8001caa:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001cae:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8001cb0:	6878      	ldr	r0, [r7, #4]
 8001cb2:	f000 f815 	bl	8001ce0 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 8001cb6:	bf00      	nop
 8001cb8:	3708      	adds	r7, #8
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	00010040 	.word	0x00010040
 8001cc4:	007e2000 	.word	0x007e2000
 8001cc8:	40013c00 	.word	0x40013c00

08001ccc <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b083      	sub	sp, #12
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8001cd4:	bf00      	nop
 8001cd6:	370c      	adds	r7, #12
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cde:	4770      	bx	lr

08001ce0 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b083      	sub	sp, #12
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8001ce8:	bf00      	nop
 8001cea:	370c      	adds	r7, #12
 8001cec:	46bd      	mov	sp, r7
 8001cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf2:	4770      	bx	lr

08001cf4 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b086      	sub	sp, #24
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	60f8      	str	r0, [r7, #12]
 8001cfc:	60b9      	str	r1, [r7, #8]
 8001cfe:	607a      	str	r2, [r7, #4]
 8001d00:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	691b      	ldr	r3, [r3, #16]
 8001d08:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001d0a:	697b      	ldr	r3, [r7, #20]
 8001d0c:	f003 031c 	and.w	r3, r3, #28
 8001d10:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8001d12:	68bb      	ldr	r3, [r7, #8]
 8001d14:	02db      	lsls	r3, r3, #11
 8001d16:	b29b      	uxth	r3, r3
 8001d18:	697a      	ldr	r2, [r7, #20]
 8001d1a:	4313      	orrs	r3, r2
 8001d1c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	019b      	lsls	r3, r3, #6
 8001d22:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001d26:	697a      	ldr	r2, [r7, #20]
 8001d28:	4313      	orrs	r3, r2
 8001d2a:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8001d2c:	697b      	ldr	r3, [r7, #20]
 8001d2e:	f023 0302 	bic.w	r3, r3, #2
 8001d32:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	f043 0301 	orr.w	r3, r3, #1
 8001d3a:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	697a      	ldr	r2, [r7, #20]
 8001d42:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8001d44:	f7ff fa14 	bl	8001170 <HAL_GetTick>
 8001d48:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001d4a:	e00d      	b.n	8001d68 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8001d4c:	f7ff fa10 	bl	8001170 <HAL_GetTick>
 8001d50:	4602      	mov	r2, r0
 8001d52:	693b      	ldr	r3, [r7, #16]
 8001d54:	1ad3      	subs	r3, r2, r3
 8001d56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d5a:	d301      	bcc.n	8001d60 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	e010      	b.n	8001d82 <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	691b      	ldr	r3, [r3, #16]
 8001d66:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	f003 0301 	and.w	r3, r3, #1
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d1ec      	bne.n	8001d4c <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	695b      	ldr	r3, [r3, #20]
 8001d78:	b29b      	uxth	r3, r3
 8001d7a:	461a      	mov	r2, r3
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8001d80:	2300      	movs	r3, #0
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	3718      	adds	r7, #24
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}

08001d8a <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8001d8a:	b580      	push	{r7, lr}
 8001d8c:	b086      	sub	sp, #24
 8001d8e:	af00      	add	r7, sp, #0
 8001d90:	60f8      	str	r0, [r7, #12]
 8001d92:	60b9      	str	r1, [r7, #8]
 8001d94:	607a      	str	r2, [r7, #4]
 8001d96:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	691b      	ldr	r3, [r3, #16]
 8001d9e:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	f003 031c 	and.w	r3, r3, #28
 8001da6:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8001da8:	68bb      	ldr	r3, [r7, #8]
 8001daa:	02db      	lsls	r3, r3, #11
 8001dac:	b29b      	uxth	r3, r3
 8001dae:	697a      	ldr	r2, [r7, #20]
 8001db0:	4313      	orrs	r3, r2
 8001db2:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	019b      	lsls	r3, r3, #6
 8001db8:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001dbc:	697a      	ldr	r2, [r7, #20]
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8001dc2:	697b      	ldr	r3, [r7, #20]
 8001dc4:	f043 0302 	orr.w	r3, r3, #2
 8001dc8:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8001dca:	697b      	ldr	r3, [r7, #20]
 8001dcc:	f043 0301 	orr.w	r3, r3, #1
 8001dd0:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	b29a      	uxth	r2, r3
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	697a      	ldr	r2, [r7, #20]
 8001de2:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001de4:	f7ff f9c4 	bl	8001170 <HAL_GetTick>
 8001de8:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001dea:	e00d      	b.n	8001e08 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8001dec:	f7ff f9c0 	bl	8001170 <HAL_GetTick>
 8001df0:	4602      	mov	r2, r0
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	1ad3      	subs	r3, r2, r3
 8001df6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001dfa:	d301      	bcc.n	8001e00 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	e009      	b.n	8001e14 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	691b      	ldr	r3, [r3, #16]
 8001e06:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	f003 0301 	and.w	r3, r3, #1
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d1ec      	bne.n	8001dec <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8001e12:	2300      	movs	r3, #0
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	3718      	adds	r7, #24
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}

08001e1c <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b083      	sub	sp, #12
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
 8001e24:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d101      	bne.n	8001e30 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	e0d9      	b.n	8001fe4 <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f003 0310 	and.w	r3, r3, #16
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	bf14      	ite	ne
 8001e3e:	2301      	movne	r3, #1
 8001e40:	2300      	moveq	r3, #0
 8001e42:	b2db      	uxtb	r3, r3
 8001e44:	461a      	mov	r2, r3
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	bf0c      	ite	eq
 8001e68:	2301      	moveq	r3, #1
 8001e6a:	2300      	movne	r3, #0
 8001e6c:	b2db      	uxtb	r3, r3
 8001e6e:	461a      	mov	r2, r3
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	bf14      	ite	ne
 8001e84:	2301      	movne	r3, #1
 8001e86:	2300      	moveq	r3, #0
 8001e88:	b2db      	uxtb	r3, r3
 8001e8a:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	bf0c      	ite	eq
 8001e9e:	2301      	moveq	r3, #1
 8001ea0:	2300      	movne	r3, #0
 8001ea2:	b2db      	uxtb	r3, r3
 8001ea4:	461a      	mov	r2, r3
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	bf14      	ite	ne
 8001eb8:	2301      	movne	r3, #1
 8001eba:	2300      	moveq	r3, #0
 8001ebc:	b2db      	uxtb	r3, r3
 8001ebe:	461a      	mov	r2, r3
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	bf0c      	ite	eq
 8001eee:	2301      	moveq	r3, #1
 8001ef0:	2300      	movne	r3, #0
 8001ef2:	b2db      	uxtb	r3, r3
 8001ef4:	461a      	mov	r2, r3
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	bf0c      	ite	eq
 8001f08:	2301      	moveq	r3, #1
 8001f0a:	2300      	movne	r3, #0
 8001f0c:	b2db      	uxtb	r3, r3
 8001f0e:	461a      	mov	r2, r3
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	bf14      	ite	ne
 8001f22:	2301      	movne	r3, #1
 8001f24:	2300      	moveq	r3, #0
 8001f26:	b2db      	uxtb	r3, r3
 8001f28:	461a      	mov	r2, r3
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	bf14      	ite	ne
 8001f4a:	2301      	movne	r3, #1
 8001f4c:	2300      	moveq	r3, #0
 8001f4e:	b2db      	uxtb	r3, r3
 8001f50:	461a      	mov	r2, r3
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	699b      	ldr	r3, [r3, #24]
 8001f5c:	f003 0302 	and.w	r3, r3, #2
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	bf14      	ite	ne
 8001f64:	2301      	movne	r3, #1
 8001f66:	2300      	moveq	r3, #0
 8001f68:	b2db      	uxtb	r3, r3
 8001f6a:	461a      	mov	r2, r3
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	699b      	ldr	r3, [r3, #24]
 8001f78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	bf0c      	ite	eq
 8001f80:	2301      	moveq	r3, #1
 8001f82:	2300      	movne	r3, #0
 8001f84:	b2db      	uxtb	r3, r3
 8001f86:	461a      	mov	r2, r3
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	699b      	ldr	r3, [r3, #24]
 8001f94:	f003 0230 	and.w	r2, r3, #48	; 0x30
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	699b      	ldr	r3, [r3, #24]
 8001fa2:	0c1b      	lsrs	r3, r3, #16
 8001fa4:	b29a      	uxth	r2, r3
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	699b      	ldr	r3, [r3, #24]
 8001fb0:	f003 0304 	and.w	r3, r3, #4
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	bf14      	ite	ne
 8001fb8:	2301      	movne	r3, #1
 8001fba:	2300      	moveq	r3, #0
 8001fbc:	b2db      	uxtb	r3, r3
 8001fbe:	461a      	mov	r2, r3
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	699b      	ldr	r3, [r3, #24]
 8001fcc:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	bf14      	ite	ne
 8001fd4:	2301      	movne	r3, #1
 8001fd6:	2300      	moveq	r3, #0
 8001fd8:	b2db      	uxtb	r3, r3
 8001fda:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 8001fe2:	2300      	movs	r3, #0
}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	370c      	adds	r7, #12
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fee:	4770      	bx	lr

08001ff0 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b082      	sub	sp, #8
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
 8001ff8:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d101      	bne.n	8002004 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002000:	2301      	movs	r3, #1
 8002002:	e00b      	b.n	800201c <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800200a:	2b10      	cmp	r3, #16
 800200c:	d105      	bne.n	800201a <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 800200e:	6839      	ldr	r1, [r7, #0]
 8002010:	6878      	ldr	r0, [r7, #4]
 8002012:	f000 f88f 	bl	8002134 <ETH_SetMACConfig>

    return HAL_OK;
 8002016:	2300      	movs	r3, #0
 8002018:	e000      	b.n	800201c <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 800201a:	2301      	movs	r3, #1
  }
}
 800201c:	4618      	mov	r0, r3
 800201e:	3708      	adds	r7, #8
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}

08002024 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b084      	sub	sp, #16
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	691b      	ldr	r3, [r3, #16]
 8002032:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	f023 031c 	bic.w	r3, r3, #28
 800203a:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800203c:	f001 fa84 	bl	8003548 <HAL_RCC_GetHCLKFreq>
 8002040:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8002042:	68bb      	ldr	r3, [r7, #8]
 8002044:	4a1d      	ldr	r2, [pc, #116]	; (80020bc <HAL_ETH_SetMDIOClockRange+0x98>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d908      	bls.n	800205c <HAL_ETH_SetMDIOClockRange+0x38>
 800204a:	68bb      	ldr	r3, [r7, #8]
 800204c:	4a1c      	ldr	r2, [pc, #112]	; (80020c0 <HAL_ETH_SetMDIOClockRange+0x9c>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d804      	bhi.n	800205c <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	f043 0308 	orr.w	r3, r3, #8
 8002058:	60fb      	str	r3, [r7, #12]
 800205a:	e027      	b.n	80020ac <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 800205c:	68bb      	ldr	r3, [r7, #8]
 800205e:	4a18      	ldr	r2, [pc, #96]	; (80020c0 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8002060:	4293      	cmp	r3, r2
 8002062:	d908      	bls.n	8002076 <HAL_ETH_SetMDIOClockRange+0x52>
 8002064:	68bb      	ldr	r3, [r7, #8]
 8002066:	4a17      	ldr	r2, [pc, #92]	; (80020c4 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d204      	bcs.n	8002076 <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	f043 030c 	orr.w	r3, r3, #12
 8002072:	60fb      	str	r3, [r7, #12]
 8002074:	e01a      	b.n	80020ac <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8002076:	68bb      	ldr	r3, [r7, #8]
 8002078:	4a12      	ldr	r2, [pc, #72]	; (80020c4 <HAL_ETH_SetMDIOClockRange+0xa0>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d303      	bcc.n	8002086 <HAL_ETH_SetMDIOClockRange+0x62>
 800207e:	68bb      	ldr	r3, [r7, #8]
 8002080:	4a11      	ldr	r2, [pc, #68]	; (80020c8 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d911      	bls.n	80020aa <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8002086:	68bb      	ldr	r3, [r7, #8]
 8002088:	4a0f      	ldr	r2, [pc, #60]	; (80020c8 <HAL_ETH_SetMDIOClockRange+0xa4>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d908      	bls.n	80020a0 <HAL_ETH_SetMDIOClockRange+0x7c>
 800208e:	68bb      	ldr	r3, [r7, #8]
 8002090:	4a0e      	ldr	r2, [pc, #56]	; (80020cc <HAL_ETH_SetMDIOClockRange+0xa8>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d804      	bhi.n	80020a0 <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	f043 0304 	orr.w	r3, r3, #4
 800209c:	60fb      	str	r3, [r7, #12]
 800209e:	e005      	b.n	80020ac <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	f043 0310 	orr.w	r3, r3, #16
 80020a6:	60fb      	str	r3, [r7, #12]
 80020a8:	e000      	b.n	80020ac <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 80020aa:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	68fa      	ldr	r2, [r7, #12]
 80020b2:	611a      	str	r2, [r3, #16]
}
 80020b4:	bf00      	nop
 80020b6:	3710      	adds	r7, #16
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}
 80020bc:	01312cff 	.word	0x01312cff
 80020c0:	02160ebf 	.word	0x02160ebf
 80020c4:	03938700 	.word	0x03938700
 80020c8:	05f5e0ff 	.word	0x05f5e0ff
 80020cc:	08f0d17f 	.word	0x08f0d17f

080020d0 <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(ETH_HandleTypeDef *heth)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b083      	sub	sp, #12
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
}
 80020de:	4618      	mov	r0, r3
 80020e0:	370c      	adds	r7, #12
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr

080020ea <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 80020ea:	b580      	push	{r7, lr}
 80020ec:	b084      	sub	sp, #16
 80020ee:	af00      	add	r7, sp, #0
 80020f0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80020f2:	2300      	movs	r3, #0
 80020f4:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020fe:	699b      	ldr	r3, [r3, #24]
 8002100:	687a      	ldr	r2, [r7, #4]
 8002102:	6812      	ldr	r2, [r2, #0]
 8002104:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002108:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800210c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002116:	699b      	ldr	r3, [r3, #24]
 8002118:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800211a:	2001      	movs	r0, #1
 800211c:	f7ff f834 	bl	8001188 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681a      	ldr	r2, [r3, #0]
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800212a:	6193      	str	r3, [r2, #24]
}
 800212c:	bf00      	nop
 800212e:	3710      	adds	r7, #16
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}

08002134 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b084      	sub	sp, #16
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
 800213c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002146:	68fa      	ldr	r2, [r7, #12]
 8002148:	4b51      	ldr	r3, [pc, #324]	; (8002290 <ETH_SetMACConfig+0x15c>)
 800214a:	4013      	ands	r3, r2
 800214c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	7c1b      	ldrb	r3, [r3, #16]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d102      	bne.n	800215c <ETH_SetMACConfig+0x28>
 8002156:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800215a:	e000      	b.n	800215e <ETH_SetMACConfig+0x2a>
 800215c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	7c5b      	ldrb	r3, [r3, #17]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d102      	bne.n	800216c <ETH_SetMACConfig+0x38>
 8002166:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800216a:	e000      	b.n	800216e <ETH_SetMACConfig+0x3a>
 800216c:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800216e:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002174:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	7fdb      	ldrb	r3, [r3, #31]
 800217a:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 800217c:	431a      	orrs	r2, r3
                        macconf->Speed |
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002182:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002184:	683a      	ldr	r2, [r7, #0]
 8002186:	7f92      	ldrb	r2, [r2, #30]
 8002188:	2a00      	cmp	r2, #0
 800218a:	d102      	bne.n	8002192 <ETH_SetMACConfig+0x5e>
 800218c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002190:	e000      	b.n	8002194 <ETH_SetMACConfig+0x60>
 8002192:	2200      	movs	r2, #0
                        macconf->Speed |
 8002194:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	7f1b      	ldrb	r3, [r3, #28]
 800219a:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800219c:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80021a2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	791b      	ldrb	r3, [r3, #4]
 80021a8:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80021aa:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80021ac:	683a      	ldr	r2, [r7, #0]
 80021ae:	f892 2020 	ldrb.w	r2, [r2, #32]
 80021b2:	2a00      	cmp	r2, #0
 80021b4:	d102      	bne.n	80021bc <ETH_SetMACConfig+0x88>
 80021b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80021ba:	e000      	b.n	80021be <ETH_SetMACConfig+0x8a>
 80021bc:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80021be:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	7bdb      	ldrb	r3, [r3, #15]
 80021c4:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80021c6:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80021cc:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80021d4:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80021d6:	4313      	orrs	r3, r2
 80021d8:	68fa      	ldr	r2, [r7, #12]
 80021da:	4313      	orrs	r3, r2
 80021dc:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	68fa      	ldr	r2, [r7, #12]
 80021e4:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80021ee:	2001      	movs	r0, #1
 80021f0:	f7fe ffca 	bl	8001188 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	68fa      	ldr	r2, [r7, #12]
 80021fa:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	699b      	ldr	r3, [r3, #24]
 8002202:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002204:	68fa      	ldr	r2, [r7, #12]
 8002206:	f64f 7341 	movw	r3, #65345	; 0xff41
 800220a:	4013      	ands	r3, r2
 800220c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002212:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002214:	683a      	ldr	r2, [r7, #0]
 8002216:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800221a:	2a00      	cmp	r2, #0
 800221c:	d101      	bne.n	8002222 <ETH_SetMACConfig+0xee>
 800221e:	2280      	movs	r2, #128	; 0x80
 8002220:	e000      	b.n	8002224 <ETH_SetMACConfig+0xf0>
 8002222:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002224:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800222a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800222c:	683a      	ldr	r2, [r7, #0]
 800222e:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8002232:	2a01      	cmp	r2, #1
 8002234:	d101      	bne.n	800223a <ETH_SetMACConfig+0x106>
 8002236:	2208      	movs	r2, #8
 8002238:	e000      	b.n	800223c <ETH_SetMACConfig+0x108>
 800223a:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 800223c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800223e:	683a      	ldr	r2, [r7, #0]
 8002240:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8002244:	2a01      	cmp	r2, #1
 8002246:	d101      	bne.n	800224c <ETH_SetMACConfig+0x118>
 8002248:	2204      	movs	r2, #4
 800224a:	e000      	b.n	800224e <ETH_SetMACConfig+0x11a>
 800224c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800224e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002250:	683a      	ldr	r2, [r7, #0]
 8002252:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8002256:	2a01      	cmp	r2, #1
 8002258:	d101      	bne.n	800225e <ETH_SetMACConfig+0x12a>
 800225a:	2202      	movs	r2, #2
 800225c:	e000      	b.n	8002260 <ETH_SetMACConfig+0x12c>
 800225e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002260:	4313      	orrs	r3, r2
 8002262:	68fa      	ldr	r2, [r7, #12]
 8002264:	4313      	orrs	r3, r2
 8002266:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	68fa      	ldr	r2, [r7, #12]
 800226e:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	699b      	ldr	r3, [r3, #24]
 8002276:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002278:	2001      	movs	r0, #1
 800227a:	f7fe ff85 	bl	8001188 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	68fa      	ldr	r2, [r7, #12]
 8002284:	619a      	str	r2, [r3, #24]
}
 8002286:	bf00      	nop
 8002288:	3710      	adds	r7, #16
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}
 800228e:	bf00      	nop
 8002290:	ff20810f 	.word	0xff20810f

08002294 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b084      	sub	sp, #16
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
 800229c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022a6:	699b      	ldr	r3, [r3, #24]
 80022a8:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80022aa:	68fa      	ldr	r2, [r7, #12]
 80022ac:	4b3d      	ldr	r3, [pc, #244]	; (80023a4 <ETH_SetDMAConfig+0x110>)
 80022ae:	4013      	ands	r3, r2
 80022b0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	7b1b      	ldrb	r3, [r3, #12]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d102      	bne.n	80022c0 <ETH_SetDMAConfig+0x2c>
 80022ba:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80022be:	e000      	b.n	80022c2 <ETH_SetDMAConfig+0x2e>
 80022c0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	7b5b      	ldrb	r3, [r3, #13]
 80022c6:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80022c8:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80022ca:	683a      	ldr	r2, [r7, #0]
 80022cc:	7f52      	ldrb	r2, [r2, #29]
 80022ce:	2a00      	cmp	r2, #0
 80022d0:	d102      	bne.n	80022d8 <ETH_SetDMAConfig+0x44>
 80022d2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80022d6:	e000      	b.n	80022da <ETH_SetDMAConfig+0x46>
 80022d8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80022da:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	7b9b      	ldrb	r3, [r3, #14]
 80022e0:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80022e2:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80022e8:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	7f1b      	ldrb	r3, [r3, #28]
 80022ee:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80022f0:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	7f9b      	ldrb	r3, [r3, #30]
 80022f6:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80022f8:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80022fe:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002306:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002308:	4313      	orrs	r3, r2
 800230a:	68fa      	ldr	r2, [r7, #12]
 800230c:	4313      	orrs	r3, r2
 800230e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002318:	461a      	mov	r2, r3
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002326:	699b      	ldr	r3, [r3, #24]
 8002328:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800232a:	2001      	movs	r0, #1
 800232c:	f7fe ff2c 	bl	8001188 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002338:	461a      	mov	r2, r3
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	791b      	ldrb	r3, [r3, #4]
 8002342:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002348:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800234e:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002354:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800235c:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800235e:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002364:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002366:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800236c:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800236e:	687a      	ldr	r2, [r7, #4]
 8002370:	6812      	ldr	r2, [r2, #0]
 8002372:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002376:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800237a:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002388:	2001      	movs	r0, #1
 800238a:	f7fe fefd 	bl	8001188 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002396:	461a      	mov	r2, r3
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	6013      	str	r3, [r2, #0]
}
 800239c:	bf00      	nop
 800239e:	3710      	adds	r7, #16
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}
 80023a4:	f8de3f23 	.word	0xf8de3f23

080023a8 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b0a6      	sub	sp, #152	; 0x98
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80023b0:	2301      	movs	r3, #1
 80023b2:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 80023b6:	2301      	movs	r3, #1
 80023b8:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80023bc:	2300      	movs	r3, #0
 80023be:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80023c0:	2300      	movs	r3, #0
 80023c2:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80023c6:	2301      	movs	r3, #1
 80023c8:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80023cc:	2300      	movs	r3, #0
 80023ce:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 80023d2:	2301      	movs	r3, #1
 80023d4:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80023d8:	2300      	movs	r3, #0
 80023da:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80023de:	2300      	movs	r3, #0
 80023e0:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80023e4:	2300      	movs	r3, #0
 80023e6:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80023e8:	2300      	movs	r3, #0
 80023ea:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80023ee:	2300      	movs	r3, #0
 80023f0:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80023f2:	2300      	movs	r3, #0
 80023f4:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80023f8:	2300      	movs	r3, #0
 80023fa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80023fe:	2300      	movs	r3, #0
 8002400:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002404:	2300      	movs	r3, #0
 8002406:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800240a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800240e:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002410:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002414:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002416:	2300      	movs	r3, #0
 8002418:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800241c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002420:	4619      	mov	r1, r3
 8002422:	6878      	ldr	r0, [r7, #4]
 8002424:	f7ff fe86 	bl	8002134 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002428:	2301      	movs	r3, #1
 800242a:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 800242c:	2301      	movs	r3, #1
 800242e:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002430:	2301      	movs	r3, #1
 8002432:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8002436:	2301      	movs	r3, #1
 8002438:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800243a:	2300      	movs	r3, #0
 800243c:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 800243e:	2300      	movs	r3, #0
 8002440:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002444:	2300      	movs	r3, #0
 8002446:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800244a:	2300      	movs	r3, #0
 800244c:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 800244e:	2301      	movs	r3, #1
 8002450:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002454:	2301      	movs	r3, #1
 8002456:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002458:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800245c:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800245e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002462:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002464:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002468:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 800246a:	2301      	movs	r3, #1
 800246c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002470:	2300      	movs	r3, #0
 8002472:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002474:	2300      	movs	r3, #0
 8002476:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002478:	f107 0308 	add.w	r3, r7, #8
 800247c:	4619      	mov	r1, r3
 800247e:	6878      	ldr	r0, [r7, #4]
 8002480:	f7ff ff08 	bl	8002294 <ETH_SetDMAConfig>
}
 8002484:	bf00      	nop
 8002486:	3798      	adds	r7, #152	; 0x98
 8002488:	46bd      	mov	sp, r7
 800248a:	bd80      	pop	{r7, pc}

0800248c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 800248c:	b480      	push	{r7}
 800248e:	b087      	sub	sp, #28
 8002490:	af00      	add	r7, sp, #0
 8002492:	60f8      	str	r0, [r7, #12]
 8002494:	60b9      	str	r1, [r7, #8]
 8002496:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	3305      	adds	r3, #5
 800249c:	781b      	ldrb	r3, [r3, #0]
 800249e:	021b      	lsls	r3, r3, #8
 80024a0:	687a      	ldr	r2, [r7, #4]
 80024a2:	3204      	adds	r2, #4
 80024a4:	7812      	ldrb	r2, [r2, #0]
 80024a6:	4313      	orrs	r3, r2
 80024a8:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80024aa:	68ba      	ldr	r2, [r7, #8]
 80024ac:	4b11      	ldr	r3, [pc, #68]	; (80024f4 <ETH_MACAddressConfig+0x68>)
 80024ae:	4413      	add	r3, r2
 80024b0:	461a      	mov	r2, r3
 80024b2:	697b      	ldr	r3, [r7, #20]
 80024b4:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	3303      	adds	r3, #3
 80024ba:	781b      	ldrb	r3, [r3, #0]
 80024bc:	061a      	lsls	r2, r3, #24
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	3302      	adds	r3, #2
 80024c2:	781b      	ldrb	r3, [r3, #0]
 80024c4:	041b      	lsls	r3, r3, #16
 80024c6:	431a      	orrs	r2, r3
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	3301      	adds	r3, #1
 80024cc:	781b      	ldrb	r3, [r3, #0]
 80024ce:	021b      	lsls	r3, r3, #8
 80024d0:	4313      	orrs	r3, r2
 80024d2:	687a      	ldr	r2, [r7, #4]
 80024d4:	7812      	ldrb	r2, [r2, #0]
 80024d6:	4313      	orrs	r3, r2
 80024d8:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80024da:	68ba      	ldr	r2, [r7, #8]
 80024dc:	4b06      	ldr	r3, [pc, #24]	; (80024f8 <ETH_MACAddressConfig+0x6c>)
 80024de:	4413      	add	r3, r2
 80024e0:	461a      	mov	r2, r3
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	6013      	str	r3, [r2, #0]
}
 80024e6:	bf00      	nop
 80024e8:	371c      	adds	r7, #28
 80024ea:	46bd      	mov	sp, r7
 80024ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f0:	4770      	bx	lr
 80024f2:	bf00      	nop
 80024f4:	40028040 	.word	0x40028040
 80024f8:	40028044 	.word	0x40028044

080024fc <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80024fc:	b480      	push	{r7}
 80024fe:	b085      	sub	sp, #20
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002504:	2300      	movs	r3, #0
 8002506:	60fb      	str	r3, [r7, #12]
 8002508:	e03e      	b.n	8002588 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	68d9      	ldr	r1, [r3, #12]
 800250e:	68fa      	ldr	r2, [r7, #12]
 8002510:	4613      	mov	r3, r2
 8002512:	009b      	lsls	r3, r3, #2
 8002514:	4413      	add	r3, r2
 8002516:	00db      	lsls	r3, r3, #3
 8002518:	440b      	add	r3, r1
 800251a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	2200      	movs	r2, #0
 8002520:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002522:	68bb      	ldr	r3, [r7, #8]
 8002524:	2200      	movs	r2, #0
 8002526:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	2200      	movs	r2, #0
 800252c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800252e:	68bb      	ldr	r3, [r7, #8]
 8002530:	2200      	movs	r2, #0
 8002532:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002534:	68b9      	ldr	r1, [r7, #8]
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	68fa      	ldr	r2, [r7, #12]
 800253a:	3206      	adds	r2, #6
 800253c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002540:	68bb      	ldr	r3, [r7, #8]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	2b02      	cmp	r3, #2
 8002550:	d80c      	bhi.n	800256c <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	68d9      	ldr	r1, [r3, #12]
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	1c5a      	adds	r2, r3, #1
 800255a:	4613      	mov	r3, r2
 800255c:	009b      	lsls	r3, r3, #2
 800255e:	4413      	add	r3, r2
 8002560:	00db      	lsls	r3, r3, #3
 8002562:	440b      	add	r3, r1
 8002564:	461a      	mov	r2, r3
 8002566:	68bb      	ldr	r3, [r7, #8]
 8002568:	60da      	str	r2, [r3, #12]
 800256a:	e004      	b.n	8002576 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	68db      	ldr	r3, [r3, #12]
 8002570:	461a      	mov	r2, r3
 8002572:	68bb      	ldr	r3, [r7, #8]
 8002574:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8002576:	68bb      	ldr	r3, [r7, #8]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800257e:	68bb      	ldr	r3, [r7, #8]
 8002580:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	3301      	adds	r3, #1
 8002586:	60fb      	str	r3, [r7, #12]
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	2b03      	cmp	r3, #3
 800258c:	d9bd      	bls.n	800250a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2200      	movs	r2, #0
 8002592:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	68da      	ldr	r2, [r3, #12]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025a0:	611a      	str	r2, [r3, #16]
}
 80025a2:	bf00      	nop
 80025a4:	3714      	adds	r7, #20
 80025a6:	46bd      	mov	sp, r7
 80025a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ac:	4770      	bx	lr

080025ae <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80025ae:	b480      	push	{r7}
 80025b0:	b085      	sub	sp, #20
 80025b2:	af00      	add	r7, sp, #0
 80025b4:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80025b6:	2300      	movs	r3, #0
 80025b8:	60fb      	str	r3, [r7, #12]
 80025ba:	e046      	b.n	800264a <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6919      	ldr	r1, [r3, #16]
 80025c0:	68fa      	ldr	r2, [r7, #12]
 80025c2:	4613      	mov	r3, r2
 80025c4:	009b      	lsls	r3, r3, #2
 80025c6:	4413      	add	r3, r2
 80025c8:	00db      	lsls	r3, r3, #3
 80025ca:	440b      	add	r3, r1
 80025cc:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80025ce:	68bb      	ldr	r3, [r7, #8]
 80025d0:	2200      	movs	r2, #0
 80025d2:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	2200      	movs	r2, #0
 80025d8:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80025da:	68bb      	ldr	r3, [r7, #8]
 80025dc:	2200      	movs	r2, #0
 80025de:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80025e0:	68bb      	ldr	r3, [r7, #8]
 80025e2:	2200      	movs	r2, #0
 80025e4:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80025e6:	68bb      	ldr	r3, [r7, #8]
 80025e8:	2200      	movs	r2, #0
 80025ea:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80025ec:	68bb      	ldr	r3, [r7, #8]
 80025ee:	2200      	movs	r2, #0
 80025f0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80025f2:	68bb      	ldr	r3, [r7, #8]
 80025f4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80025f8:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 80025fa:	68bb      	ldr	r3, [r7, #8]
 80025fc:	f244 52f8 	movw	r2, #17912	; 0x45f8
 8002600:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002602:	68bb      	ldr	r3, [r7, #8]
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800260a:	68bb      	ldr	r3, [r7, #8]
 800260c:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800260e:	68b9      	ldr	r1, [r7, #8]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	68fa      	ldr	r2, [r7, #12]
 8002614:	3212      	adds	r2, #18
 8002616:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	2b02      	cmp	r3, #2
 800261e:	d80c      	bhi.n	800263a <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6919      	ldr	r1, [r3, #16]
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	1c5a      	adds	r2, r3, #1
 8002628:	4613      	mov	r3, r2
 800262a:	009b      	lsls	r3, r3, #2
 800262c:	4413      	add	r3, r2
 800262e:	00db      	lsls	r3, r3, #3
 8002630:	440b      	add	r3, r1
 8002632:	461a      	mov	r2, r3
 8002634:	68bb      	ldr	r3, [r7, #8]
 8002636:	60da      	str	r2, [r3, #12]
 8002638:	e004      	b.n	8002644 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	691b      	ldr	r3, [r3, #16]
 800263e:	461a      	mov	r2, r3
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	3301      	adds	r3, #1
 8002648:	60fb      	str	r3, [r7, #12]
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	2b03      	cmp	r3, #3
 800264e:	d9b5      	bls.n	80025bc <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2200      	movs	r2, #0
 8002654:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2200      	movs	r2, #0
 800265a:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2200      	movs	r2, #0
 8002660:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2200      	movs	r2, #0
 8002666:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2200      	movs	r2, #0
 800266c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	691a      	ldr	r2, [r3, #16]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800267a:	60da      	str	r2, [r3, #12]
}
 800267c:	bf00      	nop
 800267e:	3714      	adds	r7, #20
 8002680:	46bd      	mov	sp, r7
 8002682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002686:	4770      	bx	lr

08002688 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8002688:	b480      	push	{r7}
 800268a:	b08d      	sub	sp, #52	; 0x34
 800268c:	af00      	add	r7, sp, #0
 800268e:	60f8      	str	r0, [r7, #12]
 8002690:	60b9      	str	r1, [r7, #8]
 8002692:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	3318      	adds	r3, #24
 8002698:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 800269a:	697b      	ldr	r3, [r7, #20]
 800269c:	691b      	ldr	r3, [r3, #16]
 800269e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	691b      	ldr	r3, [r3, #16]
 80026a4:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 80026a6:	2300      	movs	r3, #0
 80026a8:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80026aa:	697b      	ldr	r3, [r7, #20]
 80026ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80026ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026b2:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	689b      	ldr	r3, [r3, #8]
 80026b8:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 80026ba:	2300      	movs	r3, #0
 80026bc:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80026be:	6a3b      	ldr	r3, [r7, #32]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80026c6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80026ca:	d007      	beq.n	80026dc <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80026cc:	697a      	ldr	r2, [r7, #20]
 80026ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026d0:	3304      	adds	r3, #4
 80026d2:	009b      	lsls	r3, r3, #2
 80026d4:	4413      	add	r3, r2
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d001      	beq.n	80026e0 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 80026dc:	2302      	movs	r3, #2
 80026de:	e103      	b.n	80028e8 <ETH_Prepare_Tx_Descriptors+0x260>
  }


  descnbr += 1U;
 80026e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e2:	3301      	adds	r3, #1
 80026e4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 80026e6:	69fb      	ldr	r3, [r7, #28]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	461a      	mov	r2, r3
 80026ec:	6a3b      	ldr	r3, [r7, #32]
 80026ee:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 80026f0:	6a3b      	ldr	r3, [r7, #32]
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 80026f8:	f023 031f 	bic.w	r3, r3, #31
 80026fc:	69fa      	ldr	r2, [r7, #28]
 80026fe:	6852      	ldr	r2, [r2, #4]
 8002700:	431a      	orrs	r2, r3
 8002702:	6a3b      	ldr	r3, [r7, #32]
 8002704:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8002706:	68bb      	ldr	r3, [r7, #8]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f003 0301 	and.w	r3, r3, #1
 800270e:	2b00      	cmp	r3, #0
 8002710:	d008      	beq.n	8002724 <ETH_Prepare_Tx_Descriptors+0x9c>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8002712:	6a3b      	ldr	r3, [r7, #32]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800271a:	68bb      	ldr	r3, [r7, #8]
 800271c:	695b      	ldr	r3, [r3, #20]
 800271e:	431a      	orrs	r2, r3
 8002720:	6a3b      	ldr	r3, [r7, #32]
 8002722:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8002724:	68bb      	ldr	r3, [r7, #8]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f003 0320 	and.w	r3, r3, #32
 800272c:	2b00      	cmp	r3, #0
 800272e:	d008      	beq.n	8002742 <ETH_Prepare_Tx_Descriptors+0xba>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8002730:	6a3b      	ldr	r3, [r7, #32]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002738:	68bb      	ldr	r3, [r7, #8]
 800273a:	691b      	ldr	r3, [r3, #16]
 800273c:	431a      	orrs	r2, r3
 800273e:	6a3b      	ldr	r3, [r7, #32]
 8002740:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8002742:	68bb      	ldr	r3, [r7, #8]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f003 0304 	and.w	r3, r3, #4
 800274a:	2b00      	cmp	r3, #0
 800274c:	d005      	beq.n	800275a <ETH_Prepare_Tx_Descriptors+0xd2>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 800274e:	6a3b      	ldr	r3, [r7, #32]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002756:	6a3b      	ldr	r3, [r7, #32]
 8002758:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 800275a:	6a3b      	ldr	r3, [r7, #32]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002762:	6a3b      	ldr	r3, [r7, #32]
 8002764:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 8002766:	f3bf 8f5f 	dmb	sy
}
 800276a:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 800276c:	6a3b      	ldr	r3, [r7, #32]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002774:	6a3b      	ldr	r3, [r7, #32]
 8002776:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8002778:	e084      	b.n	8002884 <ETH_Prepare_Tx_Descriptors+0x1fc>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 800277a:	6a3b      	ldr	r3, [r7, #32]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002782:	6a3b      	ldr	r3, [r7, #32]
 8002784:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d006      	beq.n	800279a <ETH_Prepare_Tx_Descriptors+0x112>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800278c:	6a3b      	ldr	r3, [r7, #32]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002794:	6a3b      	ldr	r3, [r7, #32]
 8002796:	601a      	str	r2, [r3, #0]
 8002798:	e005      	b.n	80027a6 <ETH_Prepare_Tx_Descriptors+0x11e>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800279a:	6a3b      	ldr	r3, [r7, #32]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80027a2:	6a3b      	ldr	r3, [r7, #32]
 80027a4:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 80027a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027a8:	3301      	adds	r3, #1
 80027aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80027ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027ae:	2b03      	cmp	r3, #3
 80027b0:	d902      	bls.n	80027b8 <ETH_Prepare_Tx_Descriptors+0x130>
 80027b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027b4:	3b04      	subs	r3, #4
 80027b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027c0:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 80027c2:	6a3b      	ldr	r3, [r7, #32]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80027ca:	6a3b      	ldr	r3, [r7, #32]
 80027cc:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80027ce:	6a3b      	ldr	r3, [r7, #32]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80027d6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80027da:	d007      	beq.n	80027ec <ETH_Prepare_Tx_Descriptors+0x164>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80027dc:	697a      	ldr	r2, [r7, #20]
 80027de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027e0:	3304      	adds	r3, #4
 80027e2:	009b      	lsls	r3, r3, #2
 80027e4:	4413      	add	r3, r2
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d029      	beq.n	8002840 <ETH_Prepare_Tx_Descriptors+0x1b8>
    {
      descidx = firstdescidx;
 80027ec:	693b      	ldr	r3, [r7, #16]
 80027ee:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027f8:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 80027fa:	2300      	movs	r3, #0
 80027fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80027fe:	e019      	b.n	8002834 <ETH_Prepare_Tx_Descriptors+0x1ac>
  __ASM volatile ("dmb 0xF":::"memory");
 8002800:	f3bf 8f5f 	dmb	sy
}
 8002804:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002806:	6a3b      	ldr	r3, [r7, #32]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800280e:	6a3b      	ldr	r3, [r7, #32]
 8002810:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8002812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002814:	3301      	adds	r3, #1
 8002816:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800281a:	2b03      	cmp	r3, #3
 800281c:	d902      	bls.n	8002824 <ETH_Prepare_Tx_Descriptors+0x19c>
 800281e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002820:	3b04      	subs	r3, #4
 8002822:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002828:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800282c:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 800282e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002830:	3301      	adds	r3, #1
 8002832:	62bb      	str	r3, [r7, #40]	; 0x28
 8002834:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002838:	429a      	cmp	r2, r3
 800283a:	d3e1      	bcc.n	8002800 <ETH_Prepare_Tx_Descriptors+0x178>
      }

      return HAL_ETH_ERROR_BUSY;
 800283c:	2302      	movs	r3, #2
 800283e:	e053      	b.n	80028e8 <ETH_Prepare_Tx_Descriptors+0x260>
    }

    descnbr += 1U;
 8002840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002842:	3301      	adds	r3, #1
 8002844:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8002846:	69fb      	ldr	r3, [r7, #28]
 8002848:	689b      	ldr	r3, [r3, #8]
 800284a:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 800284c:	69fb      	ldr	r3, [r7, #28]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	461a      	mov	r2, r3
 8002852:	6a3b      	ldr	r3, [r7, #32]
 8002854:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8002856:	6a3b      	ldr	r3, [r7, #32]
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 800285e:	f023 031f 	bic.w	r3, r3, #31
 8002862:	69fa      	ldr	r2, [r7, #28]
 8002864:	6852      	ldr	r2, [r2, #4]
 8002866:	431a      	orrs	r2, r3
 8002868:	6a3b      	ldr	r3, [r7, #32]
 800286a:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 800286c:	69bb      	ldr	r3, [r7, #24]
 800286e:	3301      	adds	r3, #1
 8002870:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 8002872:	f3bf 8f5f 	dmb	sy
}
 8002876:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002878:	6a3b      	ldr	r3, [r7, #32]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002880:	6a3b      	ldr	r3, [r7, #32]
 8002882:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8002884:	69fb      	ldr	r3, [r7, #28]
 8002886:	689b      	ldr	r3, [r3, #8]
 8002888:	2b00      	cmp	r3, #0
 800288a:	f47f af76 	bne.w	800277a <ETH_Prepare_Tx_Descriptors+0xf2>
  }

  if (ItMode != ((uint32_t)RESET))
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d006      	beq.n	80028a2 <ETH_Prepare_Tx_Descriptors+0x21a>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002894:	6a3b      	ldr	r3, [r7, #32]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800289c:	6a3b      	ldr	r3, [r7, #32]
 800289e:	601a      	str	r2, [r3, #0]
 80028a0:	e005      	b.n	80028ae <ETH_Prepare_Tx_Descriptors+0x226>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80028a2:	6a3b      	ldr	r3, [r7, #32]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80028aa:	6a3b      	ldr	r3, [r7, #32]
 80028ac:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80028ae:	6a3b      	ldr	r3, [r7, #32]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80028b6:	6a3b      	ldr	r3, [r7, #32]
 80028b8:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 80028ba:	697b      	ldr	r3, [r7, #20]
 80028bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80028be:	6979      	ldr	r1, [r7, #20]
 80028c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028c2:	3304      	adds	r3, #4
 80028c4:	009b      	lsls	r3, r3, #2
 80028c6:	440b      	add	r3, r1
 80028c8:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80028ce:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80028d0:	b672      	cpsid	i
}
 80028d2:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80028d8:	69bb      	ldr	r3, [r7, #24]
 80028da:	4413      	add	r3, r2
 80028dc:	1c5a      	adds	r2, r3, #1
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 80028e2:	b662      	cpsie	i
}
 80028e4:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 80028e6:	2300      	movs	r3, #0
}
 80028e8:	4618      	mov	r0, r3
 80028ea:	3734      	adds	r7, #52	; 0x34
 80028ec:	46bd      	mov	sp, r7
 80028ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f2:	4770      	bx	lr

080028f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028f4:	b480      	push	{r7}
 80028f6:	b089      	sub	sp, #36	; 0x24
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
 80028fc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80028fe:	2300      	movs	r3, #0
 8002900:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002902:	2300      	movs	r3, #0
 8002904:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002906:	2300      	movs	r3, #0
 8002908:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800290a:	2300      	movs	r3, #0
 800290c:	61fb      	str	r3, [r7, #28]
 800290e:	e177      	b.n	8002c00 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002910:	2201      	movs	r2, #1
 8002912:	69fb      	ldr	r3, [r7, #28]
 8002914:	fa02 f303 	lsl.w	r3, r2, r3
 8002918:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	697a      	ldr	r2, [r7, #20]
 8002920:	4013      	ands	r3, r2
 8002922:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002924:	693a      	ldr	r2, [r7, #16]
 8002926:	697b      	ldr	r3, [r7, #20]
 8002928:	429a      	cmp	r2, r3
 800292a:	f040 8166 	bne.w	8002bfa <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	f003 0303 	and.w	r3, r3, #3
 8002936:	2b01      	cmp	r3, #1
 8002938:	d005      	beq.n	8002946 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002942:	2b02      	cmp	r3, #2
 8002944:	d130      	bne.n	80029a8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	689b      	ldr	r3, [r3, #8]
 800294a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800294c:	69fb      	ldr	r3, [r7, #28]
 800294e:	005b      	lsls	r3, r3, #1
 8002950:	2203      	movs	r2, #3
 8002952:	fa02 f303 	lsl.w	r3, r2, r3
 8002956:	43db      	mvns	r3, r3
 8002958:	69ba      	ldr	r2, [r7, #24]
 800295a:	4013      	ands	r3, r2
 800295c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	68da      	ldr	r2, [r3, #12]
 8002962:	69fb      	ldr	r3, [r7, #28]
 8002964:	005b      	lsls	r3, r3, #1
 8002966:	fa02 f303 	lsl.w	r3, r2, r3
 800296a:	69ba      	ldr	r2, [r7, #24]
 800296c:	4313      	orrs	r3, r2
 800296e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	69ba      	ldr	r2, [r7, #24]
 8002974:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800297c:	2201      	movs	r2, #1
 800297e:	69fb      	ldr	r3, [r7, #28]
 8002980:	fa02 f303 	lsl.w	r3, r2, r3
 8002984:	43db      	mvns	r3, r3
 8002986:	69ba      	ldr	r2, [r7, #24]
 8002988:	4013      	ands	r3, r2
 800298a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	091b      	lsrs	r3, r3, #4
 8002992:	f003 0201 	and.w	r2, r3, #1
 8002996:	69fb      	ldr	r3, [r7, #28]
 8002998:	fa02 f303 	lsl.w	r3, r2, r3
 800299c:	69ba      	ldr	r2, [r7, #24]
 800299e:	4313      	orrs	r3, r2
 80029a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	69ba      	ldr	r2, [r7, #24]
 80029a6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	f003 0303 	and.w	r3, r3, #3
 80029b0:	2b03      	cmp	r3, #3
 80029b2:	d017      	beq.n	80029e4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	68db      	ldr	r3, [r3, #12]
 80029b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80029ba:	69fb      	ldr	r3, [r7, #28]
 80029bc:	005b      	lsls	r3, r3, #1
 80029be:	2203      	movs	r2, #3
 80029c0:	fa02 f303 	lsl.w	r3, r2, r3
 80029c4:	43db      	mvns	r3, r3
 80029c6:	69ba      	ldr	r2, [r7, #24]
 80029c8:	4013      	ands	r3, r2
 80029ca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	689a      	ldr	r2, [r3, #8]
 80029d0:	69fb      	ldr	r3, [r7, #28]
 80029d2:	005b      	lsls	r3, r3, #1
 80029d4:	fa02 f303 	lsl.w	r3, r2, r3
 80029d8:	69ba      	ldr	r2, [r7, #24]
 80029da:	4313      	orrs	r3, r2
 80029dc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	69ba      	ldr	r2, [r7, #24]
 80029e2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	f003 0303 	and.w	r3, r3, #3
 80029ec:	2b02      	cmp	r3, #2
 80029ee:	d123      	bne.n	8002a38 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80029f0:	69fb      	ldr	r3, [r7, #28]
 80029f2:	08da      	lsrs	r2, r3, #3
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	3208      	adds	r2, #8
 80029f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80029fe:	69fb      	ldr	r3, [r7, #28]
 8002a00:	f003 0307 	and.w	r3, r3, #7
 8002a04:	009b      	lsls	r3, r3, #2
 8002a06:	220f      	movs	r2, #15
 8002a08:	fa02 f303 	lsl.w	r3, r2, r3
 8002a0c:	43db      	mvns	r3, r3
 8002a0e:	69ba      	ldr	r2, [r7, #24]
 8002a10:	4013      	ands	r3, r2
 8002a12:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	691a      	ldr	r2, [r3, #16]
 8002a18:	69fb      	ldr	r3, [r7, #28]
 8002a1a:	f003 0307 	and.w	r3, r3, #7
 8002a1e:	009b      	lsls	r3, r3, #2
 8002a20:	fa02 f303 	lsl.w	r3, r2, r3
 8002a24:	69ba      	ldr	r2, [r7, #24]
 8002a26:	4313      	orrs	r3, r2
 8002a28:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002a2a:	69fb      	ldr	r3, [r7, #28]
 8002a2c:	08da      	lsrs	r2, r3, #3
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	3208      	adds	r2, #8
 8002a32:	69b9      	ldr	r1, [r7, #24]
 8002a34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002a3e:	69fb      	ldr	r3, [r7, #28]
 8002a40:	005b      	lsls	r3, r3, #1
 8002a42:	2203      	movs	r2, #3
 8002a44:	fa02 f303 	lsl.w	r3, r2, r3
 8002a48:	43db      	mvns	r3, r3
 8002a4a:	69ba      	ldr	r2, [r7, #24]
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	f003 0203 	and.w	r2, r3, #3
 8002a58:	69fb      	ldr	r3, [r7, #28]
 8002a5a:	005b      	lsls	r3, r3, #1
 8002a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a60:	69ba      	ldr	r2, [r7, #24]
 8002a62:	4313      	orrs	r3, r2
 8002a64:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	69ba      	ldr	r2, [r7, #24]
 8002a6a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	f000 80c0 	beq.w	8002bfa <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	60fb      	str	r3, [r7, #12]
 8002a7e:	4b66      	ldr	r3, [pc, #408]	; (8002c18 <HAL_GPIO_Init+0x324>)
 8002a80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a82:	4a65      	ldr	r2, [pc, #404]	; (8002c18 <HAL_GPIO_Init+0x324>)
 8002a84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a88:	6453      	str	r3, [r2, #68]	; 0x44
 8002a8a:	4b63      	ldr	r3, [pc, #396]	; (8002c18 <HAL_GPIO_Init+0x324>)
 8002a8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a92:	60fb      	str	r3, [r7, #12]
 8002a94:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002a96:	4a61      	ldr	r2, [pc, #388]	; (8002c1c <HAL_GPIO_Init+0x328>)
 8002a98:	69fb      	ldr	r3, [r7, #28]
 8002a9a:	089b      	lsrs	r3, r3, #2
 8002a9c:	3302      	adds	r3, #2
 8002a9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002aa2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002aa4:	69fb      	ldr	r3, [r7, #28]
 8002aa6:	f003 0303 	and.w	r3, r3, #3
 8002aaa:	009b      	lsls	r3, r3, #2
 8002aac:	220f      	movs	r2, #15
 8002aae:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab2:	43db      	mvns	r3, r3
 8002ab4:	69ba      	ldr	r2, [r7, #24]
 8002ab6:	4013      	ands	r3, r2
 8002ab8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	4a58      	ldr	r2, [pc, #352]	; (8002c20 <HAL_GPIO_Init+0x32c>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d037      	beq.n	8002b32 <HAL_GPIO_Init+0x23e>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	4a57      	ldr	r2, [pc, #348]	; (8002c24 <HAL_GPIO_Init+0x330>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d031      	beq.n	8002b2e <HAL_GPIO_Init+0x23a>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	4a56      	ldr	r2, [pc, #344]	; (8002c28 <HAL_GPIO_Init+0x334>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d02b      	beq.n	8002b2a <HAL_GPIO_Init+0x236>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	4a55      	ldr	r2, [pc, #340]	; (8002c2c <HAL_GPIO_Init+0x338>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d025      	beq.n	8002b26 <HAL_GPIO_Init+0x232>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	4a54      	ldr	r2, [pc, #336]	; (8002c30 <HAL_GPIO_Init+0x33c>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d01f      	beq.n	8002b22 <HAL_GPIO_Init+0x22e>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	4a53      	ldr	r2, [pc, #332]	; (8002c34 <HAL_GPIO_Init+0x340>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d019      	beq.n	8002b1e <HAL_GPIO_Init+0x22a>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	4a52      	ldr	r2, [pc, #328]	; (8002c38 <HAL_GPIO_Init+0x344>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d013      	beq.n	8002b1a <HAL_GPIO_Init+0x226>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	4a51      	ldr	r2, [pc, #324]	; (8002c3c <HAL_GPIO_Init+0x348>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d00d      	beq.n	8002b16 <HAL_GPIO_Init+0x222>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	4a50      	ldr	r2, [pc, #320]	; (8002c40 <HAL_GPIO_Init+0x34c>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d007      	beq.n	8002b12 <HAL_GPIO_Init+0x21e>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	4a4f      	ldr	r2, [pc, #316]	; (8002c44 <HAL_GPIO_Init+0x350>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d101      	bne.n	8002b0e <HAL_GPIO_Init+0x21a>
 8002b0a:	2309      	movs	r3, #9
 8002b0c:	e012      	b.n	8002b34 <HAL_GPIO_Init+0x240>
 8002b0e:	230a      	movs	r3, #10
 8002b10:	e010      	b.n	8002b34 <HAL_GPIO_Init+0x240>
 8002b12:	2308      	movs	r3, #8
 8002b14:	e00e      	b.n	8002b34 <HAL_GPIO_Init+0x240>
 8002b16:	2307      	movs	r3, #7
 8002b18:	e00c      	b.n	8002b34 <HAL_GPIO_Init+0x240>
 8002b1a:	2306      	movs	r3, #6
 8002b1c:	e00a      	b.n	8002b34 <HAL_GPIO_Init+0x240>
 8002b1e:	2305      	movs	r3, #5
 8002b20:	e008      	b.n	8002b34 <HAL_GPIO_Init+0x240>
 8002b22:	2304      	movs	r3, #4
 8002b24:	e006      	b.n	8002b34 <HAL_GPIO_Init+0x240>
 8002b26:	2303      	movs	r3, #3
 8002b28:	e004      	b.n	8002b34 <HAL_GPIO_Init+0x240>
 8002b2a:	2302      	movs	r3, #2
 8002b2c:	e002      	b.n	8002b34 <HAL_GPIO_Init+0x240>
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e000      	b.n	8002b34 <HAL_GPIO_Init+0x240>
 8002b32:	2300      	movs	r3, #0
 8002b34:	69fa      	ldr	r2, [r7, #28]
 8002b36:	f002 0203 	and.w	r2, r2, #3
 8002b3a:	0092      	lsls	r2, r2, #2
 8002b3c:	4093      	lsls	r3, r2
 8002b3e:	69ba      	ldr	r2, [r7, #24]
 8002b40:	4313      	orrs	r3, r2
 8002b42:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b44:	4935      	ldr	r1, [pc, #212]	; (8002c1c <HAL_GPIO_Init+0x328>)
 8002b46:	69fb      	ldr	r3, [r7, #28]
 8002b48:	089b      	lsrs	r3, r3, #2
 8002b4a:	3302      	adds	r3, #2
 8002b4c:	69ba      	ldr	r2, [r7, #24]
 8002b4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b52:	4b3d      	ldr	r3, [pc, #244]	; (8002c48 <HAL_GPIO_Init+0x354>)
 8002b54:	689b      	ldr	r3, [r3, #8]
 8002b56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b58:	693b      	ldr	r3, [r7, #16]
 8002b5a:	43db      	mvns	r3, r3
 8002b5c:	69ba      	ldr	r2, [r7, #24]
 8002b5e:	4013      	ands	r3, r2
 8002b60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d003      	beq.n	8002b76 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002b6e:	69ba      	ldr	r2, [r7, #24]
 8002b70:	693b      	ldr	r3, [r7, #16]
 8002b72:	4313      	orrs	r3, r2
 8002b74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002b76:	4a34      	ldr	r2, [pc, #208]	; (8002c48 <HAL_GPIO_Init+0x354>)
 8002b78:	69bb      	ldr	r3, [r7, #24]
 8002b7a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002b7c:	4b32      	ldr	r3, [pc, #200]	; (8002c48 <HAL_GPIO_Init+0x354>)
 8002b7e:	68db      	ldr	r3, [r3, #12]
 8002b80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b82:	693b      	ldr	r3, [r7, #16]
 8002b84:	43db      	mvns	r3, r3
 8002b86:	69ba      	ldr	r2, [r7, #24]
 8002b88:	4013      	ands	r3, r2
 8002b8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d003      	beq.n	8002ba0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002b98:	69ba      	ldr	r2, [r7, #24]
 8002b9a:	693b      	ldr	r3, [r7, #16]
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ba0:	4a29      	ldr	r2, [pc, #164]	; (8002c48 <HAL_GPIO_Init+0x354>)
 8002ba2:	69bb      	ldr	r3, [r7, #24]
 8002ba4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002ba6:	4b28      	ldr	r3, [pc, #160]	; (8002c48 <HAL_GPIO_Init+0x354>)
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bac:	693b      	ldr	r3, [r7, #16]
 8002bae:	43db      	mvns	r3, r3
 8002bb0:	69ba      	ldr	r2, [r7, #24]
 8002bb2:	4013      	ands	r3, r2
 8002bb4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d003      	beq.n	8002bca <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002bc2:	69ba      	ldr	r2, [r7, #24]
 8002bc4:	693b      	ldr	r3, [r7, #16]
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002bca:	4a1f      	ldr	r2, [pc, #124]	; (8002c48 <HAL_GPIO_Init+0x354>)
 8002bcc:	69bb      	ldr	r3, [r7, #24]
 8002bce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002bd0:	4b1d      	ldr	r3, [pc, #116]	; (8002c48 <HAL_GPIO_Init+0x354>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bd6:	693b      	ldr	r3, [r7, #16]
 8002bd8:	43db      	mvns	r3, r3
 8002bda:	69ba      	ldr	r2, [r7, #24]
 8002bdc:	4013      	ands	r3, r2
 8002bde:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d003      	beq.n	8002bf4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002bec:	69ba      	ldr	r2, [r7, #24]
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002bf4:	4a14      	ldr	r2, [pc, #80]	; (8002c48 <HAL_GPIO_Init+0x354>)
 8002bf6:	69bb      	ldr	r3, [r7, #24]
 8002bf8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002bfa:	69fb      	ldr	r3, [r7, #28]
 8002bfc:	3301      	adds	r3, #1
 8002bfe:	61fb      	str	r3, [r7, #28]
 8002c00:	69fb      	ldr	r3, [r7, #28]
 8002c02:	2b0f      	cmp	r3, #15
 8002c04:	f67f ae84 	bls.w	8002910 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002c08:	bf00      	nop
 8002c0a:	bf00      	nop
 8002c0c:	3724      	adds	r7, #36	; 0x24
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c14:	4770      	bx	lr
 8002c16:	bf00      	nop
 8002c18:	40023800 	.word	0x40023800
 8002c1c:	40013800 	.word	0x40013800
 8002c20:	40020000 	.word	0x40020000
 8002c24:	40020400 	.word	0x40020400
 8002c28:	40020800 	.word	0x40020800
 8002c2c:	40020c00 	.word	0x40020c00
 8002c30:	40021000 	.word	0x40021000
 8002c34:	40021400 	.word	0x40021400
 8002c38:	40021800 	.word	0x40021800
 8002c3c:	40021c00 	.word	0x40021c00
 8002c40:	40022000 	.word	0x40022000
 8002c44:	40022400 	.word	0x40022400
 8002c48:	40013c00 	.word	0x40013c00

08002c4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b083      	sub	sp, #12
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
 8002c54:	460b      	mov	r3, r1
 8002c56:	807b      	strh	r3, [r7, #2]
 8002c58:	4613      	mov	r3, r2
 8002c5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c5c:	787b      	ldrb	r3, [r7, #1]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d003      	beq.n	8002c6a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c62:	887a      	ldrh	r2, [r7, #2]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002c68:	e003      	b.n	8002c72 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002c6a:	887b      	ldrh	r3, [r7, #2]
 8002c6c:	041a      	lsls	r2, r3, #16
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	619a      	str	r2, [r3, #24]
}
 8002c72:	bf00      	nop
 8002c74:	370c      	adds	r7, #12
 8002c76:	46bd      	mov	sp, r7
 8002c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7c:	4770      	bx	lr
	...

08002c80 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b086      	sub	sp, #24
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d101      	bne.n	8002c92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e267      	b.n	8003162 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f003 0301 	and.w	r3, r3, #1
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d075      	beq.n	8002d8a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002c9e:	4b88      	ldr	r3, [pc, #544]	; (8002ec0 <HAL_RCC_OscConfig+0x240>)
 8002ca0:	689b      	ldr	r3, [r3, #8]
 8002ca2:	f003 030c 	and.w	r3, r3, #12
 8002ca6:	2b04      	cmp	r3, #4
 8002ca8:	d00c      	beq.n	8002cc4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002caa:	4b85      	ldr	r3, [pc, #532]	; (8002ec0 <HAL_RCC_OscConfig+0x240>)
 8002cac:	689b      	ldr	r3, [r3, #8]
 8002cae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002cb2:	2b08      	cmp	r3, #8
 8002cb4:	d112      	bne.n	8002cdc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002cb6:	4b82      	ldr	r3, [pc, #520]	; (8002ec0 <HAL_RCC_OscConfig+0x240>)
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cbe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002cc2:	d10b      	bne.n	8002cdc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cc4:	4b7e      	ldr	r3, [pc, #504]	; (8002ec0 <HAL_RCC_OscConfig+0x240>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d05b      	beq.n	8002d88 <HAL_RCC_OscConfig+0x108>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d157      	bne.n	8002d88 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	e242      	b.n	8003162 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ce4:	d106      	bne.n	8002cf4 <HAL_RCC_OscConfig+0x74>
 8002ce6:	4b76      	ldr	r3, [pc, #472]	; (8002ec0 <HAL_RCC_OscConfig+0x240>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4a75      	ldr	r2, [pc, #468]	; (8002ec0 <HAL_RCC_OscConfig+0x240>)
 8002cec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cf0:	6013      	str	r3, [r2, #0]
 8002cf2:	e01d      	b.n	8002d30 <HAL_RCC_OscConfig+0xb0>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002cfc:	d10c      	bne.n	8002d18 <HAL_RCC_OscConfig+0x98>
 8002cfe:	4b70      	ldr	r3, [pc, #448]	; (8002ec0 <HAL_RCC_OscConfig+0x240>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a6f      	ldr	r2, [pc, #444]	; (8002ec0 <HAL_RCC_OscConfig+0x240>)
 8002d04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d08:	6013      	str	r3, [r2, #0]
 8002d0a:	4b6d      	ldr	r3, [pc, #436]	; (8002ec0 <HAL_RCC_OscConfig+0x240>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a6c      	ldr	r2, [pc, #432]	; (8002ec0 <HAL_RCC_OscConfig+0x240>)
 8002d10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d14:	6013      	str	r3, [r2, #0]
 8002d16:	e00b      	b.n	8002d30 <HAL_RCC_OscConfig+0xb0>
 8002d18:	4b69      	ldr	r3, [pc, #420]	; (8002ec0 <HAL_RCC_OscConfig+0x240>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a68      	ldr	r2, [pc, #416]	; (8002ec0 <HAL_RCC_OscConfig+0x240>)
 8002d1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d22:	6013      	str	r3, [r2, #0]
 8002d24:	4b66      	ldr	r3, [pc, #408]	; (8002ec0 <HAL_RCC_OscConfig+0x240>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a65      	ldr	r2, [pc, #404]	; (8002ec0 <HAL_RCC_OscConfig+0x240>)
 8002d2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d2e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d013      	beq.n	8002d60 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d38:	f7fe fa1a 	bl	8001170 <HAL_GetTick>
 8002d3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d3e:	e008      	b.n	8002d52 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d40:	f7fe fa16 	bl	8001170 <HAL_GetTick>
 8002d44:	4602      	mov	r2, r0
 8002d46:	693b      	ldr	r3, [r7, #16]
 8002d48:	1ad3      	subs	r3, r2, r3
 8002d4a:	2b64      	cmp	r3, #100	; 0x64
 8002d4c:	d901      	bls.n	8002d52 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002d4e:	2303      	movs	r3, #3
 8002d50:	e207      	b.n	8003162 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d52:	4b5b      	ldr	r3, [pc, #364]	; (8002ec0 <HAL_RCC_OscConfig+0x240>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d0f0      	beq.n	8002d40 <HAL_RCC_OscConfig+0xc0>
 8002d5e:	e014      	b.n	8002d8a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d60:	f7fe fa06 	bl	8001170 <HAL_GetTick>
 8002d64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d66:	e008      	b.n	8002d7a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d68:	f7fe fa02 	bl	8001170 <HAL_GetTick>
 8002d6c:	4602      	mov	r2, r0
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	1ad3      	subs	r3, r2, r3
 8002d72:	2b64      	cmp	r3, #100	; 0x64
 8002d74:	d901      	bls.n	8002d7a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002d76:	2303      	movs	r3, #3
 8002d78:	e1f3      	b.n	8003162 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d7a:	4b51      	ldr	r3, [pc, #324]	; (8002ec0 <HAL_RCC_OscConfig+0x240>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d1f0      	bne.n	8002d68 <HAL_RCC_OscConfig+0xe8>
 8002d86:	e000      	b.n	8002d8a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f003 0302 	and.w	r3, r3, #2
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d063      	beq.n	8002e5e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002d96:	4b4a      	ldr	r3, [pc, #296]	; (8002ec0 <HAL_RCC_OscConfig+0x240>)
 8002d98:	689b      	ldr	r3, [r3, #8]
 8002d9a:	f003 030c 	and.w	r3, r3, #12
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d00b      	beq.n	8002dba <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002da2:	4b47      	ldr	r3, [pc, #284]	; (8002ec0 <HAL_RCC_OscConfig+0x240>)
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002daa:	2b08      	cmp	r3, #8
 8002dac:	d11c      	bne.n	8002de8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002dae:	4b44      	ldr	r3, [pc, #272]	; (8002ec0 <HAL_RCC_OscConfig+0x240>)
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d116      	bne.n	8002de8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dba:	4b41      	ldr	r3, [pc, #260]	; (8002ec0 <HAL_RCC_OscConfig+0x240>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f003 0302 	and.w	r3, r3, #2
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d005      	beq.n	8002dd2 <HAL_RCC_OscConfig+0x152>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	68db      	ldr	r3, [r3, #12]
 8002dca:	2b01      	cmp	r3, #1
 8002dcc:	d001      	beq.n	8002dd2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e1c7      	b.n	8003162 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dd2:	4b3b      	ldr	r3, [pc, #236]	; (8002ec0 <HAL_RCC_OscConfig+0x240>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	691b      	ldr	r3, [r3, #16]
 8002dde:	00db      	lsls	r3, r3, #3
 8002de0:	4937      	ldr	r1, [pc, #220]	; (8002ec0 <HAL_RCC_OscConfig+0x240>)
 8002de2:	4313      	orrs	r3, r2
 8002de4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002de6:	e03a      	b.n	8002e5e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	68db      	ldr	r3, [r3, #12]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d020      	beq.n	8002e32 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002df0:	4b34      	ldr	r3, [pc, #208]	; (8002ec4 <HAL_RCC_OscConfig+0x244>)
 8002df2:	2201      	movs	r2, #1
 8002df4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002df6:	f7fe f9bb 	bl	8001170 <HAL_GetTick>
 8002dfa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dfc:	e008      	b.n	8002e10 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002dfe:	f7fe f9b7 	bl	8001170 <HAL_GetTick>
 8002e02:	4602      	mov	r2, r0
 8002e04:	693b      	ldr	r3, [r7, #16]
 8002e06:	1ad3      	subs	r3, r2, r3
 8002e08:	2b02      	cmp	r3, #2
 8002e0a:	d901      	bls.n	8002e10 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002e0c:	2303      	movs	r3, #3
 8002e0e:	e1a8      	b.n	8003162 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e10:	4b2b      	ldr	r3, [pc, #172]	; (8002ec0 <HAL_RCC_OscConfig+0x240>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f003 0302 	and.w	r3, r3, #2
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d0f0      	beq.n	8002dfe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e1c:	4b28      	ldr	r3, [pc, #160]	; (8002ec0 <HAL_RCC_OscConfig+0x240>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	691b      	ldr	r3, [r3, #16]
 8002e28:	00db      	lsls	r3, r3, #3
 8002e2a:	4925      	ldr	r1, [pc, #148]	; (8002ec0 <HAL_RCC_OscConfig+0x240>)
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	600b      	str	r3, [r1, #0]
 8002e30:	e015      	b.n	8002e5e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e32:	4b24      	ldr	r3, [pc, #144]	; (8002ec4 <HAL_RCC_OscConfig+0x244>)
 8002e34:	2200      	movs	r2, #0
 8002e36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e38:	f7fe f99a 	bl	8001170 <HAL_GetTick>
 8002e3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e3e:	e008      	b.n	8002e52 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e40:	f7fe f996 	bl	8001170 <HAL_GetTick>
 8002e44:	4602      	mov	r2, r0
 8002e46:	693b      	ldr	r3, [r7, #16]
 8002e48:	1ad3      	subs	r3, r2, r3
 8002e4a:	2b02      	cmp	r3, #2
 8002e4c:	d901      	bls.n	8002e52 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002e4e:	2303      	movs	r3, #3
 8002e50:	e187      	b.n	8003162 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e52:	4b1b      	ldr	r3, [pc, #108]	; (8002ec0 <HAL_RCC_OscConfig+0x240>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f003 0302 	and.w	r3, r3, #2
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d1f0      	bne.n	8002e40 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f003 0308 	and.w	r3, r3, #8
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d036      	beq.n	8002ed8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	695b      	ldr	r3, [r3, #20]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d016      	beq.n	8002ea0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e72:	4b15      	ldr	r3, [pc, #84]	; (8002ec8 <HAL_RCC_OscConfig+0x248>)
 8002e74:	2201      	movs	r2, #1
 8002e76:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e78:	f7fe f97a 	bl	8001170 <HAL_GetTick>
 8002e7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e7e:	e008      	b.n	8002e92 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e80:	f7fe f976 	bl	8001170 <HAL_GetTick>
 8002e84:	4602      	mov	r2, r0
 8002e86:	693b      	ldr	r3, [r7, #16]
 8002e88:	1ad3      	subs	r3, r2, r3
 8002e8a:	2b02      	cmp	r3, #2
 8002e8c:	d901      	bls.n	8002e92 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002e8e:	2303      	movs	r3, #3
 8002e90:	e167      	b.n	8003162 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e92:	4b0b      	ldr	r3, [pc, #44]	; (8002ec0 <HAL_RCC_OscConfig+0x240>)
 8002e94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e96:	f003 0302 	and.w	r3, r3, #2
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d0f0      	beq.n	8002e80 <HAL_RCC_OscConfig+0x200>
 8002e9e:	e01b      	b.n	8002ed8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ea0:	4b09      	ldr	r3, [pc, #36]	; (8002ec8 <HAL_RCC_OscConfig+0x248>)
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ea6:	f7fe f963 	bl	8001170 <HAL_GetTick>
 8002eaa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002eac:	e00e      	b.n	8002ecc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002eae:	f7fe f95f 	bl	8001170 <HAL_GetTick>
 8002eb2:	4602      	mov	r2, r0
 8002eb4:	693b      	ldr	r3, [r7, #16]
 8002eb6:	1ad3      	subs	r3, r2, r3
 8002eb8:	2b02      	cmp	r3, #2
 8002eba:	d907      	bls.n	8002ecc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002ebc:	2303      	movs	r3, #3
 8002ebe:	e150      	b.n	8003162 <HAL_RCC_OscConfig+0x4e2>
 8002ec0:	40023800 	.word	0x40023800
 8002ec4:	42470000 	.word	0x42470000
 8002ec8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ecc:	4b88      	ldr	r3, [pc, #544]	; (80030f0 <HAL_RCC_OscConfig+0x470>)
 8002ece:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ed0:	f003 0302 	and.w	r3, r3, #2
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d1ea      	bne.n	8002eae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f003 0304 	and.w	r3, r3, #4
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	f000 8097 	beq.w	8003014 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002eea:	4b81      	ldr	r3, [pc, #516]	; (80030f0 <HAL_RCC_OscConfig+0x470>)
 8002eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d10f      	bne.n	8002f16 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	60bb      	str	r3, [r7, #8]
 8002efa:	4b7d      	ldr	r3, [pc, #500]	; (80030f0 <HAL_RCC_OscConfig+0x470>)
 8002efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002efe:	4a7c      	ldr	r2, [pc, #496]	; (80030f0 <HAL_RCC_OscConfig+0x470>)
 8002f00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f04:	6413      	str	r3, [r2, #64]	; 0x40
 8002f06:	4b7a      	ldr	r3, [pc, #488]	; (80030f0 <HAL_RCC_OscConfig+0x470>)
 8002f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f0e:	60bb      	str	r3, [r7, #8]
 8002f10:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f12:	2301      	movs	r3, #1
 8002f14:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f16:	4b77      	ldr	r3, [pc, #476]	; (80030f4 <HAL_RCC_OscConfig+0x474>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d118      	bne.n	8002f54 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f22:	4b74      	ldr	r3, [pc, #464]	; (80030f4 <HAL_RCC_OscConfig+0x474>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4a73      	ldr	r2, [pc, #460]	; (80030f4 <HAL_RCC_OscConfig+0x474>)
 8002f28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f2c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f2e:	f7fe f91f 	bl	8001170 <HAL_GetTick>
 8002f32:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f34:	e008      	b.n	8002f48 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f36:	f7fe f91b 	bl	8001170 <HAL_GetTick>
 8002f3a:	4602      	mov	r2, r0
 8002f3c:	693b      	ldr	r3, [r7, #16]
 8002f3e:	1ad3      	subs	r3, r2, r3
 8002f40:	2b02      	cmp	r3, #2
 8002f42:	d901      	bls.n	8002f48 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002f44:	2303      	movs	r3, #3
 8002f46:	e10c      	b.n	8003162 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f48:	4b6a      	ldr	r3, [pc, #424]	; (80030f4 <HAL_RCC_OscConfig+0x474>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d0f0      	beq.n	8002f36 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	689b      	ldr	r3, [r3, #8]
 8002f58:	2b01      	cmp	r3, #1
 8002f5a:	d106      	bne.n	8002f6a <HAL_RCC_OscConfig+0x2ea>
 8002f5c:	4b64      	ldr	r3, [pc, #400]	; (80030f0 <HAL_RCC_OscConfig+0x470>)
 8002f5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f60:	4a63      	ldr	r2, [pc, #396]	; (80030f0 <HAL_RCC_OscConfig+0x470>)
 8002f62:	f043 0301 	orr.w	r3, r3, #1
 8002f66:	6713      	str	r3, [r2, #112]	; 0x70
 8002f68:	e01c      	b.n	8002fa4 <HAL_RCC_OscConfig+0x324>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	689b      	ldr	r3, [r3, #8]
 8002f6e:	2b05      	cmp	r3, #5
 8002f70:	d10c      	bne.n	8002f8c <HAL_RCC_OscConfig+0x30c>
 8002f72:	4b5f      	ldr	r3, [pc, #380]	; (80030f0 <HAL_RCC_OscConfig+0x470>)
 8002f74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f76:	4a5e      	ldr	r2, [pc, #376]	; (80030f0 <HAL_RCC_OscConfig+0x470>)
 8002f78:	f043 0304 	orr.w	r3, r3, #4
 8002f7c:	6713      	str	r3, [r2, #112]	; 0x70
 8002f7e:	4b5c      	ldr	r3, [pc, #368]	; (80030f0 <HAL_RCC_OscConfig+0x470>)
 8002f80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f82:	4a5b      	ldr	r2, [pc, #364]	; (80030f0 <HAL_RCC_OscConfig+0x470>)
 8002f84:	f043 0301 	orr.w	r3, r3, #1
 8002f88:	6713      	str	r3, [r2, #112]	; 0x70
 8002f8a:	e00b      	b.n	8002fa4 <HAL_RCC_OscConfig+0x324>
 8002f8c:	4b58      	ldr	r3, [pc, #352]	; (80030f0 <HAL_RCC_OscConfig+0x470>)
 8002f8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f90:	4a57      	ldr	r2, [pc, #348]	; (80030f0 <HAL_RCC_OscConfig+0x470>)
 8002f92:	f023 0301 	bic.w	r3, r3, #1
 8002f96:	6713      	str	r3, [r2, #112]	; 0x70
 8002f98:	4b55      	ldr	r3, [pc, #340]	; (80030f0 <HAL_RCC_OscConfig+0x470>)
 8002f9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f9c:	4a54      	ldr	r2, [pc, #336]	; (80030f0 <HAL_RCC_OscConfig+0x470>)
 8002f9e:	f023 0304 	bic.w	r3, r3, #4
 8002fa2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	689b      	ldr	r3, [r3, #8]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d015      	beq.n	8002fd8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fac:	f7fe f8e0 	bl	8001170 <HAL_GetTick>
 8002fb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fb2:	e00a      	b.n	8002fca <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fb4:	f7fe f8dc 	bl	8001170 <HAL_GetTick>
 8002fb8:	4602      	mov	r2, r0
 8002fba:	693b      	ldr	r3, [r7, #16]
 8002fbc:	1ad3      	subs	r3, r2, r3
 8002fbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d901      	bls.n	8002fca <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002fc6:	2303      	movs	r3, #3
 8002fc8:	e0cb      	b.n	8003162 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fca:	4b49      	ldr	r3, [pc, #292]	; (80030f0 <HAL_RCC_OscConfig+0x470>)
 8002fcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fce:	f003 0302 	and.w	r3, r3, #2
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d0ee      	beq.n	8002fb4 <HAL_RCC_OscConfig+0x334>
 8002fd6:	e014      	b.n	8003002 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fd8:	f7fe f8ca 	bl	8001170 <HAL_GetTick>
 8002fdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fde:	e00a      	b.n	8002ff6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fe0:	f7fe f8c6 	bl	8001170 <HAL_GetTick>
 8002fe4:	4602      	mov	r2, r0
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	1ad3      	subs	r3, r2, r3
 8002fea:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d901      	bls.n	8002ff6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002ff2:	2303      	movs	r3, #3
 8002ff4:	e0b5      	b.n	8003162 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ff6:	4b3e      	ldr	r3, [pc, #248]	; (80030f0 <HAL_RCC_OscConfig+0x470>)
 8002ff8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ffa:	f003 0302 	and.w	r3, r3, #2
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d1ee      	bne.n	8002fe0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003002:	7dfb      	ldrb	r3, [r7, #23]
 8003004:	2b01      	cmp	r3, #1
 8003006:	d105      	bne.n	8003014 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003008:	4b39      	ldr	r3, [pc, #228]	; (80030f0 <HAL_RCC_OscConfig+0x470>)
 800300a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800300c:	4a38      	ldr	r2, [pc, #224]	; (80030f0 <HAL_RCC_OscConfig+0x470>)
 800300e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003012:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	699b      	ldr	r3, [r3, #24]
 8003018:	2b00      	cmp	r3, #0
 800301a:	f000 80a1 	beq.w	8003160 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800301e:	4b34      	ldr	r3, [pc, #208]	; (80030f0 <HAL_RCC_OscConfig+0x470>)
 8003020:	689b      	ldr	r3, [r3, #8]
 8003022:	f003 030c 	and.w	r3, r3, #12
 8003026:	2b08      	cmp	r3, #8
 8003028:	d05c      	beq.n	80030e4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	699b      	ldr	r3, [r3, #24]
 800302e:	2b02      	cmp	r3, #2
 8003030:	d141      	bne.n	80030b6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003032:	4b31      	ldr	r3, [pc, #196]	; (80030f8 <HAL_RCC_OscConfig+0x478>)
 8003034:	2200      	movs	r2, #0
 8003036:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003038:	f7fe f89a 	bl	8001170 <HAL_GetTick>
 800303c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800303e:	e008      	b.n	8003052 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003040:	f7fe f896 	bl	8001170 <HAL_GetTick>
 8003044:	4602      	mov	r2, r0
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	1ad3      	subs	r3, r2, r3
 800304a:	2b02      	cmp	r3, #2
 800304c:	d901      	bls.n	8003052 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800304e:	2303      	movs	r3, #3
 8003050:	e087      	b.n	8003162 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003052:	4b27      	ldr	r3, [pc, #156]	; (80030f0 <HAL_RCC_OscConfig+0x470>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800305a:	2b00      	cmp	r3, #0
 800305c:	d1f0      	bne.n	8003040 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	69da      	ldr	r2, [r3, #28]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6a1b      	ldr	r3, [r3, #32]
 8003066:	431a      	orrs	r2, r3
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800306c:	019b      	lsls	r3, r3, #6
 800306e:	431a      	orrs	r2, r3
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003074:	085b      	lsrs	r3, r3, #1
 8003076:	3b01      	subs	r3, #1
 8003078:	041b      	lsls	r3, r3, #16
 800307a:	431a      	orrs	r2, r3
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003080:	061b      	lsls	r3, r3, #24
 8003082:	491b      	ldr	r1, [pc, #108]	; (80030f0 <HAL_RCC_OscConfig+0x470>)
 8003084:	4313      	orrs	r3, r2
 8003086:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003088:	4b1b      	ldr	r3, [pc, #108]	; (80030f8 <HAL_RCC_OscConfig+0x478>)
 800308a:	2201      	movs	r2, #1
 800308c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800308e:	f7fe f86f 	bl	8001170 <HAL_GetTick>
 8003092:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003094:	e008      	b.n	80030a8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003096:	f7fe f86b 	bl	8001170 <HAL_GetTick>
 800309a:	4602      	mov	r2, r0
 800309c:	693b      	ldr	r3, [r7, #16]
 800309e:	1ad3      	subs	r3, r2, r3
 80030a0:	2b02      	cmp	r3, #2
 80030a2:	d901      	bls.n	80030a8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80030a4:	2303      	movs	r3, #3
 80030a6:	e05c      	b.n	8003162 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030a8:	4b11      	ldr	r3, [pc, #68]	; (80030f0 <HAL_RCC_OscConfig+0x470>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d0f0      	beq.n	8003096 <HAL_RCC_OscConfig+0x416>
 80030b4:	e054      	b.n	8003160 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030b6:	4b10      	ldr	r3, [pc, #64]	; (80030f8 <HAL_RCC_OscConfig+0x478>)
 80030b8:	2200      	movs	r2, #0
 80030ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030bc:	f7fe f858 	bl	8001170 <HAL_GetTick>
 80030c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030c2:	e008      	b.n	80030d6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030c4:	f7fe f854 	bl	8001170 <HAL_GetTick>
 80030c8:	4602      	mov	r2, r0
 80030ca:	693b      	ldr	r3, [r7, #16]
 80030cc:	1ad3      	subs	r3, r2, r3
 80030ce:	2b02      	cmp	r3, #2
 80030d0:	d901      	bls.n	80030d6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80030d2:	2303      	movs	r3, #3
 80030d4:	e045      	b.n	8003162 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030d6:	4b06      	ldr	r3, [pc, #24]	; (80030f0 <HAL_RCC_OscConfig+0x470>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d1f0      	bne.n	80030c4 <HAL_RCC_OscConfig+0x444>
 80030e2:	e03d      	b.n	8003160 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	699b      	ldr	r3, [r3, #24]
 80030e8:	2b01      	cmp	r3, #1
 80030ea:	d107      	bne.n	80030fc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80030ec:	2301      	movs	r3, #1
 80030ee:	e038      	b.n	8003162 <HAL_RCC_OscConfig+0x4e2>
 80030f0:	40023800 	.word	0x40023800
 80030f4:	40007000 	.word	0x40007000
 80030f8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80030fc:	4b1b      	ldr	r3, [pc, #108]	; (800316c <HAL_RCC_OscConfig+0x4ec>)
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	699b      	ldr	r3, [r3, #24]
 8003106:	2b01      	cmp	r3, #1
 8003108:	d028      	beq.n	800315c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003114:	429a      	cmp	r2, r3
 8003116:	d121      	bne.n	800315c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003122:	429a      	cmp	r2, r3
 8003124:	d11a      	bne.n	800315c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003126:	68fa      	ldr	r2, [r7, #12]
 8003128:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800312c:	4013      	ands	r3, r2
 800312e:	687a      	ldr	r2, [r7, #4]
 8003130:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003132:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003134:	4293      	cmp	r3, r2
 8003136:	d111      	bne.n	800315c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003142:	085b      	lsrs	r3, r3, #1
 8003144:	3b01      	subs	r3, #1
 8003146:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003148:	429a      	cmp	r2, r3
 800314a:	d107      	bne.n	800315c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003156:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003158:	429a      	cmp	r2, r3
 800315a:	d001      	beq.n	8003160 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800315c:	2301      	movs	r3, #1
 800315e:	e000      	b.n	8003162 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003160:	2300      	movs	r3, #0
}
 8003162:	4618      	mov	r0, r3
 8003164:	3718      	adds	r7, #24
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}
 800316a:	bf00      	nop
 800316c:	40023800 	.word	0x40023800

08003170 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b084      	sub	sp, #16
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
 8003178:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d101      	bne.n	8003184 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003180:	2301      	movs	r3, #1
 8003182:	e0cc      	b.n	800331e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003184:	4b68      	ldr	r3, [pc, #416]	; (8003328 <HAL_RCC_ClockConfig+0x1b8>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f003 030f 	and.w	r3, r3, #15
 800318c:	683a      	ldr	r2, [r7, #0]
 800318e:	429a      	cmp	r2, r3
 8003190:	d90c      	bls.n	80031ac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003192:	4b65      	ldr	r3, [pc, #404]	; (8003328 <HAL_RCC_ClockConfig+0x1b8>)
 8003194:	683a      	ldr	r2, [r7, #0]
 8003196:	b2d2      	uxtb	r2, r2
 8003198:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800319a:	4b63      	ldr	r3, [pc, #396]	; (8003328 <HAL_RCC_ClockConfig+0x1b8>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f003 030f 	and.w	r3, r3, #15
 80031a2:	683a      	ldr	r2, [r7, #0]
 80031a4:	429a      	cmp	r2, r3
 80031a6:	d001      	beq.n	80031ac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80031a8:	2301      	movs	r3, #1
 80031aa:	e0b8      	b.n	800331e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f003 0302 	and.w	r3, r3, #2
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d020      	beq.n	80031fa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f003 0304 	and.w	r3, r3, #4
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d005      	beq.n	80031d0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80031c4:	4b59      	ldr	r3, [pc, #356]	; (800332c <HAL_RCC_ClockConfig+0x1bc>)
 80031c6:	689b      	ldr	r3, [r3, #8]
 80031c8:	4a58      	ldr	r2, [pc, #352]	; (800332c <HAL_RCC_ClockConfig+0x1bc>)
 80031ca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80031ce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f003 0308 	and.w	r3, r3, #8
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d005      	beq.n	80031e8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80031dc:	4b53      	ldr	r3, [pc, #332]	; (800332c <HAL_RCC_ClockConfig+0x1bc>)
 80031de:	689b      	ldr	r3, [r3, #8]
 80031e0:	4a52      	ldr	r2, [pc, #328]	; (800332c <HAL_RCC_ClockConfig+0x1bc>)
 80031e2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80031e6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031e8:	4b50      	ldr	r3, [pc, #320]	; (800332c <HAL_RCC_ClockConfig+0x1bc>)
 80031ea:	689b      	ldr	r3, [r3, #8]
 80031ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	689b      	ldr	r3, [r3, #8]
 80031f4:	494d      	ldr	r1, [pc, #308]	; (800332c <HAL_RCC_ClockConfig+0x1bc>)
 80031f6:	4313      	orrs	r3, r2
 80031f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f003 0301 	and.w	r3, r3, #1
 8003202:	2b00      	cmp	r3, #0
 8003204:	d044      	beq.n	8003290 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	2b01      	cmp	r3, #1
 800320c:	d107      	bne.n	800321e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800320e:	4b47      	ldr	r3, [pc, #284]	; (800332c <HAL_RCC_ClockConfig+0x1bc>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003216:	2b00      	cmp	r3, #0
 8003218:	d119      	bne.n	800324e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800321a:	2301      	movs	r3, #1
 800321c:	e07f      	b.n	800331e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	2b02      	cmp	r3, #2
 8003224:	d003      	beq.n	800322e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800322a:	2b03      	cmp	r3, #3
 800322c:	d107      	bne.n	800323e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800322e:	4b3f      	ldr	r3, [pc, #252]	; (800332c <HAL_RCC_ClockConfig+0x1bc>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003236:	2b00      	cmp	r3, #0
 8003238:	d109      	bne.n	800324e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800323a:	2301      	movs	r3, #1
 800323c:	e06f      	b.n	800331e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800323e:	4b3b      	ldr	r3, [pc, #236]	; (800332c <HAL_RCC_ClockConfig+0x1bc>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f003 0302 	and.w	r3, r3, #2
 8003246:	2b00      	cmp	r3, #0
 8003248:	d101      	bne.n	800324e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800324a:	2301      	movs	r3, #1
 800324c:	e067      	b.n	800331e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800324e:	4b37      	ldr	r3, [pc, #220]	; (800332c <HAL_RCC_ClockConfig+0x1bc>)
 8003250:	689b      	ldr	r3, [r3, #8]
 8003252:	f023 0203 	bic.w	r2, r3, #3
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	4934      	ldr	r1, [pc, #208]	; (800332c <HAL_RCC_ClockConfig+0x1bc>)
 800325c:	4313      	orrs	r3, r2
 800325e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003260:	f7fd ff86 	bl	8001170 <HAL_GetTick>
 8003264:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003266:	e00a      	b.n	800327e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003268:	f7fd ff82 	bl	8001170 <HAL_GetTick>
 800326c:	4602      	mov	r2, r0
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	1ad3      	subs	r3, r2, r3
 8003272:	f241 3288 	movw	r2, #5000	; 0x1388
 8003276:	4293      	cmp	r3, r2
 8003278:	d901      	bls.n	800327e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800327a:	2303      	movs	r3, #3
 800327c:	e04f      	b.n	800331e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800327e:	4b2b      	ldr	r3, [pc, #172]	; (800332c <HAL_RCC_ClockConfig+0x1bc>)
 8003280:	689b      	ldr	r3, [r3, #8]
 8003282:	f003 020c 	and.w	r2, r3, #12
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	009b      	lsls	r3, r3, #2
 800328c:	429a      	cmp	r2, r3
 800328e:	d1eb      	bne.n	8003268 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003290:	4b25      	ldr	r3, [pc, #148]	; (8003328 <HAL_RCC_ClockConfig+0x1b8>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f003 030f 	and.w	r3, r3, #15
 8003298:	683a      	ldr	r2, [r7, #0]
 800329a:	429a      	cmp	r2, r3
 800329c:	d20c      	bcs.n	80032b8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800329e:	4b22      	ldr	r3, [pc, #136]	; (8003328 <HAL_RCC_ClockConfig+0x1b8>)
 80032a0:	683a      	ldr	r2, [r7, #0]
 80032a2:	b2d2      	uxtb	r2, r2
 80032a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032a6:	4b20      	ldr	r3, [pc, #128]	; (8003328 <HAL_RCC_ClockConfig+0x1b8>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f003 030f 	and.w	r3, r3, #15
 80032ae:	683a      	ldr	r2, [r7, #0]
 80032b0:	429a      	cmp	r2, r3
 80032b2:	d001      	beq.n	80032b8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80032b4:	2301      	movs	r3, #1
 80032b6:	e032      	b.n	800331e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f003 0304 	and.w	r3, r3, #4
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d008      	beq.n	80032d6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032c4:	4b19      	ldr	r3, [pc, #100]	; (800332c <HAL_RCC_ClockConfig+0x1bc>)
 80032c6:	689b      	ldr	r3, [r3, #8]
 80032c8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	68db      	ldr	r3, [r3, #12]
 80032d0:	4916      	ldr	r1, [pc, #88]	; (800332c <HAL_RCC_ClockConfig+0x1bc>)
 80032d2:	4313      	orrs	r3, r2
 80032d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f003 0308 	and.w	r3, r3, #8
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d009      	beq.n	80032f6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80032e2:	4b12      	ldr	r3, [pc, #72]	; (800332c <HAL_RCC_ClockConfig+0x1bc>)
 80032e4:	689b      	ldr	r3, [r3, #8]
 80032e6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	691b      	ldr	r3, [r3, #16]
 80032ee:	00db      	lsls	r3, r3, #3
 80032f0:	490e      	ldr	r1, [pc, #56]	; (800332c <HAL_RCC_ClockConfig+0x1bc>)
 80032f2:	4313      	orrs	r3, r2
 80032f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80032f6:	f000 f821 	bl	800333c <HAL_RCC_GetSysClockFreq>
 80032fa:	4602      	mov	r2, r0
 80032fc:	4b0b      	ldr	r3, [pc, #44]	; (800332c <HAL_RCC_ClockConfig+0x1bc>)
 80032fe:	689b      	ldr	r3, [r3, #8]
 8003300:	091b      	lsrs	r3, r3, #4
 8003302:	f003 030f 	and.w	r3, r3, #15
 8003306:	490a      	ldr	r1, [pc, #40]	; (8003330 <HAL_RCC_ClockConfig+0x1c0>)
 8003308:	5ccb      	ldrb	r3, [r1, r3]
 800330a:	fa22 f303 	lsr.w	r3, r2, r3
 800330e:	4a09      	ldr	r2, [pc, #36]	; (8003334 <HAL_RCC_ClockConfig+0x1c4>)
 8003310:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003312:	4b09      	ldr	r3, [pc, #36]	; (8003338 <HAL_RCC_ClockConfig+0x1c8>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4618      	mov	r0, r3
 8003318:	f7fd fb74 	bl	8000a04 <HAL_InitTick>

  return HAL_OK;
 800331c:	2300      	movs	r3, #0
}
 800331e:	4618      	mov	r0, r3
 8003320:	3710      	adds	r7, #16
 8003322:	46bd      	mov	sp, r7
 8003324:	bd80      	pop	{r7, pc}
 8003326:	bf00      	nop
 8003328:	40023c00 	.word	0x40023c00
 800332c:	40023800 	.word	0x40023800
 8003330:	0801be50 	.word	0x0801be50
 8003334:	20000000 	.word	0x20000000
 8003338:	20000004 	.word	0x20000004

0800333c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800333c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003340:	b094      	sub	sp, #80	; 0x50
 8003342:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003344:	2300      	movs	r3, #0
 8003346:	647b      	str	r3, [r7, #68]	; 0x44
 8003348:	2300      	movs	r3, #0
 800334a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800334c:	2300      	movs	r3, #0
 800334e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003350:	2300      	movs	r3, #0
 8003352:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003354:	4b79      	ldr	r3, [pc, #484]	; (800353c <HAL_RCC_GetSysClockFreq+0x200>)
 8003356:	689b      	ldr	r3, [r3, #8]
 8003358:	f003 030c 	and.w	r3, r3, #12
 800335c:	2b08      	cmp	r3, #8
 800335e:	d00d      	beq.n	800337c <HAL_RCC_GetSysClockFreq+0x40>
 8003360:	2b08      	cmp	r3, #8
 8003362:	f200 80e1 	bhi.w	8003528 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003366:	2b00      	cmp	r3, #0
 8003368:	d002      	beq.n	8003370 <HAL_RCC_GetSysClockFreq+0x34>
 800336a:	2b04      	cmp	r3, #4
 800336c:	d003      	beq.n	8003376 <HAL_RCC_GetSysClockFreq+0x3a>
 800336e:	e0db      	b.n	8003528 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003370:	4b73      	ldr	r3, [pc, #460]	; (8003540 <HAL_RCC_GetSysClockFreq+0x204>)
 8003372:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003374:	e0db      	b.n	800352e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003376:	4b73      	ldr	r3, [pc, #460]	; (8003544 <HAL_RCC_GetSysClockFreq+0x208>)
 8003378:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800337a:	e0d8      	b.n	800352e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800337c:	4b6f      	ldr	r3, [pc, #444]	; (800353c <HAL_RCC_GetSysClockFreq+0x200>)
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003384:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003386:	4b6d      	ldr	r3, [pc, #436]	; (800353c <HAL_RCC_GetSysClockFreq+0x200>)
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800338e:	2b00      	cmp	r3, #0
 8003390:	d063      	beq.n	800345a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003392:	4b6a      	ldr	r3, [pc, #424]	; (800353c <HAL_RCC_GetSysClockFreq+0x200>)
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	099b      	lsrs	r3, r3, #6
 8003398:	2200      	movs	r2, #0
 800339a:	63bb      	str	r3, [r7, #56]	; 0x38
 800339c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800339e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033a4:	633b      	str	r3, [r7, #48]	; 0x30
 80033a6:	2300      	movs	r3, #0
 80033a8:	637b      	str	r3, [r7, #52]	; 0x34
 80033aa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80033ae:	4622      	mov	r2, r4
 80033b0:	462b      	mov	r3, r5
 80033b2:	f04f 0000 	mov.w	r0, #0
 80033b6:	f04f 0100 	mov.w	r1, #0
 80033ba:	0159      	lsls	r1, r3, #5
 80033bc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80033c0:	0150      	lsls	r0, r2, #5
 80033c2:	4602      	mov	r2, r0
 80033c4:	460b      	mov	r3, r1
 80033c6:	4621      	mov	r1, r4
 80033c8:	1a51      	subs	r1, r2, r1
 80033ca:	6139      	str	r1, [r7, #16]
 80033cc:	4629      	mov	r1, r5
 80033ce:	eb63 0301 	sbc.w	r3, r3, r1
 80033d2:	617b      	str	r3, [r7, #20]
 80033d4:	f04f 0200 	mov.w	r2, #0
 80033d8:	f04f 0300 	mov.w	r3, #0
 80033dc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80033e0:	4659      	mov	r1, fp
 80033e2:	018b      	lsls	r3, r1, #6
 80033e4:	4651      	mov	r1, sl
 80033e6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80033ea:	4651      	mov	r1, sl
 80033ec:	018a      	lsls	r2, r1, #6
 80033ee:	4651      	mov	r1, sl
 80033f0:	ebb2 0801 	subs.w	r8, r2, r1
 80033f4:	4659      	mov	r1, fp
 80033f6:	eb63 0901 	sbc.w	r9, r3, r1
 80033fa:	f04f 0200 	mov.w	r2, #0
 80033fe:	f04f 0300 	mov.w	r3, #0
 8003402:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003406:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800340a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800340e:	4690      	mov	r8, r2
 8003410:	4699      	mov	r9, r3
 8003412:	4623      	mov	r3, r4
 8003414:	eb18 0303 	adds.w	r3, r8, r3
 8003418:	60bb      	str	r3, [r7, #8]
 800341a:	462b      	mov	r3, r5
 800341c:	eb49 0303 	adc.w	r3, r9, r3
 8003420:	60fb      	str	r3, [r7, #12]
 8003422:	f04f 0200 	mov.w	r2, #0
 8003426:	f04f 0300 	mov.w	r3, #0
 800342a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800342e:	4629      	mov	r1, r5
 8003430:	024b      	lsls	r3, r1, #9
 8003432:	4621      	mov	r1, r4
 8003434:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003438:	4621      	mov	r1, r4
 800343a:	024a      	lsls	r2, r1, #9
 800343c:	4610      	mov	r0, r2
 800343e:	4619      	mov	r1, r3
 8003440:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003442:	2200      	movs	r2, #0
 8003444:	62bb      	str	r3, [r7, #40]	; 0x28
 8003446:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003448:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800344c:	f7fc ff20 	bl	8000290 <__aeabi_uldivmod>
 8003450:	4602      	mov	r2, r0
 8003452:	460b      	mov	r3, r1
 8003454:	4613      	mov	r3, r2
 8003456:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003458:	e058      	b.n	800350c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800345a:	4b38      	ldr	r3, [pc, #224]	; (800353c <HAL_RCC_GetSysClockFreq+0x200>)
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	099b      	lsrs	r3, r3, #6
 8003460:	2200      	movs	r2, #0
 8003462:	4618      	mov	r0, r3
 8003464:	4611      	mov	r1, r2
 8003466:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800346a:	623b      	str	r3, [r7, #32]
 800346c:	2300      	movs	r3, #0
 800346e:	627b      	str	r3, [r7, #36]	; 0x24
 8003470:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003474:	4642      	mov	r2, r8
 8003476:	464b      	mov	r3, r9
 8003478:	f04f 0000 	mov.w	r0, #0
 800347c:	f04f 0100 	mov.w	r1, #0
 8003480:	0159      	lsls	r1, r3, #5
 8003482:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003486:	0150      	lsls	r0, r2, #5
 8003488:	4602      	mov	r2, r0
 800348a:	460b      	mov	r3, r1
 800348c:	4641      	mov	r1, r8
 800348e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003492:	4649      	mov	r1, r9
 8003494:	eb63 0b01 	sbc.w	fp, r3, r1
 8003498:	f04f 0200 	mov.w	r2, #0
 800349c:	f04f 0300 	mov.w	r3, #0
 80034a0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80034a4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80034a8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80034ac:	ebb2 040a 	subs.w	r4, r2, sl
 80034b0:	eb63 050b 	sbc.w	r5, r3, fp
 80034b4:	f04f 0200 	mov.w	r2, #0
 80034b8:	f04f 0300 	mov.w	r3, #0
 80034bc:	00eb      	lsls	r3, r5, #3
 80034be:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80034c2:	00e2      	lsls	r2, r4, #3
 80034c4:	4614      	mov	r4, r2
 80034c6:	461d      	mov	r5, r3
 80034c8:	4643      	mov	r3, r8
 80034ca:	18e3      	adds	r3, r4, r3
 80034cc:	603b      	str	r3, [r7, #0]
 80034ce:	464b      	mov	r3, r9
 80034d0:	eb45 0303 	adc.w	r3, r5, r3
 80034d4:	607b      	str	r3, [r7, #4]
 80034d6:	f04f 0200 	mov.w	r2, #0
 80034da:	f04f 0300 	mov.w	r3, #0
 80034de:	e9d7 4500 	ldrd	r4, r5, [r7]
 80034e2:	4629      	mov	r1, r5
 80034e4:	028b      	lsls	r3, r1, #10
 80034e6:	4621      	mov	r1, r4
 80034e8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80034ec:	4621      	mov	r1, r4
 80034ee:	028a      	lsls	r2, r1, #10
 80034f0:	4610      	mov	r0, r2
 80034f2:	4619      	mov	r1, r3
 80034f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80034f6:	2200      	movs	r2, #0
 80034f8:	61bb      	str	r3, [r7, #24]
 80034fa:	61fa      	str	r2, [r7, #28]
 80034fc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003500:	f7fc fec6 	bl	8000290 <__aeabi_uldivmod>
 8003504:	4602      	mov	r2, r0
 8003506:	460b      	mov	r3, r1
 8003508:	4613      	mov	r3, r2
 800350a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800350c:	4b0b      	ldr	r3, [pc, #44]	; (800353c <HAL_RCC_GetSysClockFreq+0x200>)
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	0c1b      	lsrs	r3, r3, #16
 8003512:	f003 0303 	and.w	r3, r3, #3
 8003516:	3301      	adds	r3, #1
 8003518:	005b      	lsls	r3, r3, #1
 800351a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800351c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800351e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003520:	fbb2 f3f3 	udiv	r3, r2, r3
 8003524:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003526:	e002      	b.n	800352e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003528:	4b05      	ldr	r3, [pc, #20]	; (8003540 <HAL_RCC_GetSysClockFreq+0x204>)
 800352a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800352c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800352e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003530:	4618      	mov	r0, r3
 8003532:	3750      	adds	r7, #80	; 0x50
 8003534:	46bd      	mov	sp, r7
 8003536:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800353a:	bf00      	nop
 800353c:	40023800 	.word	0x40023800
 8003540:	00f42400 	.word	0x00f42400
 8003544:	007a1200 	.word	0x007a1200

08003548 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003548:	b480      	push	{r7}
 800354a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800354c:	4b03      	ldr	r3, [pc, #12]	; (800355c <HAL_RCC_GetHCLKFreq+0x14>)
 800354e:	681b      	ldr	r3, [r3, #0]
}
 8003550:	4618      	mov	r0, r3
 8003552:	46bd      	mov	sp, r7
 8003554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003558:	4770      	bx	lr
 800355a:	bf00      	nop
 800355c:	20000000 	.word	0x20000000

08003560 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003564:	f7ff fff0 	bl	8003548 <HAL_RCC_GetHCLKFreq>
 8003568:	4602      	mov	r2, r0
 800356a:	4b05      	ldr	r3, [pc, #20]	; (8003580 <HAL_RCC_GetPCLK1Freq+0x20>)
 800356c:	689b      	ldr	r3, [r3, #8]
 800356e:	0a9b      	lsrs	r3, r3, #10
 8003570:	f003 0307 	and.w	r3, r3, #7
 8003574:	4903      	ldr	r1, [pc, #12]	; (8003584 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003576:	5ccb      	ldrb	r3, [r1, r3]
 8003578:	fa22 f303 	lsr.w	r3, r2, r3
}
 800357c:	4618      	mov	r0, r3
 800357e:	bd80      	pop	{r7, pc}
 8003580:	40023800 	.word	0x40023800
 8003584:	0801be60 	.word	0x0801be60

08003588 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800358c:	f7ff ffdc 	bl	8003548 <HAL_RCC_GetHCLKFreq>
 8003590:	4602      	mov	r2, r0
 8003592:	4b05      	ldr	r3, [pc, #20]	; (80035a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003594:	689b      	ldr	r3, [r3, #8]
 8003596:	0b5b      	lsrs	r3, r3, #13
 8003598:	f003 0307 	and.w	r3, r3, #7
 800359c:	4903      	ldr	r1, [pc, #12]	; (80035ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800359e:	5ccb      	ldrb	r3, [r1, r3]
 80035a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035a4:	4618      	mov	r0, r3
 80035a6:	bd80      	pop	{r7, pc}
 80035a8:	40023800 	.word	0x40023800
 80035ac:	0801be60 	.word	0x0801be60

080035b0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80035b0:	b480      	push	{r7}
 80035b2:	b083      	sub	sp, #12
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
 80035b8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	220f      	movs	r2, #15
 80035be:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80035c0:	4b12      	ldr	r3, [pc, #72]	; (800360c <HAL_RCC_GetClockConfig+0x5c>)
 80035c2:	689b      	ldr	r3, [r3, #8]
 80035c4:	f003 0203 	and.w	r2, r3, #3
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80035cc:	4b0f      	ldr	r3, [pc, #60]	; (800360c <HAL_RCC_GetClockConfig+0x5c>)
 80035ce:	689b      	ldr	r3, [r3, #8]
 80035d0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80035d8:	4b0c      	ldr	r3, [pc, #48]	; (800360c <HAL_RCC_GetClockConfig+0x5c>)
 80035da:	689b      	ldr	r3, [r3, #8]
 80035dc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80035e4:	4b09      	ldr	r3, [pc, #36]	; (800360c <HAL_RCC_GetClockConfig+0x5c>)
 80035e6:	689b      	ldr	r3, [r3, #8]
 80035e8:	08db      	lsrs	r3, r3, #3
 80035ea:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80035f2:	4b07      	ldr	r3, [pc, #28]	; (8003610 <HAL_RCC_GetClockConfig+0x60>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f003 020f 	and.w	r2, r3, #15
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	601a      	str	r2, [r3, #0]
}
 80035fe:	bf00      	nop
 8003600:	370c      	adds	r7, #12
 8003602:	46bd      	mov	sp, r7
 8003604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003608:	4770      	bx	lr
 800360a:	bf00      	nop
 800360c:	40023800 	.word	0x40023800
 8003610:	40023c00 	.word	0x40023c00

08003614 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b082      	sub	sp, #8
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d101      	bne.n	8003626 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	e041      	b.n	80036aa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800362c:	b2db      	uxtb	r3, r3
 800362e:	2b00      	cmp	r3, #0
 8003630:	d106      	bne.n	8003640 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2200      	movs	r2, #0
 8003636:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800363a:	6878      	ldr	r0, [r7, #4]
 800363c:	f000 f839 	bl	80036b2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2202      	movs	r2, #2
 8003644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681a      	ldr	r2, [r3, #0]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	3304      	adds	r3, #4
 8003650:	4619      	mov	r1, r3
 8003652:	4610      	mov	r0, r2
 8003654:	f000 f9d8 	bl	8003a08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2201      	movs	r2, #1
 800365c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2201      	movs	r2, #1
 8003664:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2201      	movs	r2, #1
 800366c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2201      	movs	r2, #1
 8003674:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2201      	movs	r2, #1
 800367c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2201      	movs	r2, #1
 8003684:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2201      	movs	r2, #1
 800368c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2201      	movs	r2, #1
 8003694:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2201      	movs	r2, #1
 800369c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2201      	movs	r2, #1
 80036a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80036a8:	2300      	movs	r3, #0
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	3708      	adds	r7, #8
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}

080036b2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80036b2:	b480      	push	{r7}
 80036b4:	b083      	sub	sp, #12
 80036b6:	af00      	add	r7, sp, #0
 80036b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80036ba:	bf00      	nop
 80036bc:	370c      	adds	r7, #12
 80036be:	46bd      	mov	sp, r7
 80036c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c4:	4770      	bx	lr
	...

080036c8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80036c8:	b480      	push	{r7}
 80036ca:	b085      	sub	sp, #20
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036d6:	b2db      	uxtb	r3, r3
 80036d8:	2b01      	cmp	r3, #1
 80036da:	d001      	beq.n	80036e0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80036dc:	2301      	movs	r3, #1
 80036de:	e04e      	b.n	800377e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2202      	movs	r2, #2
 80036e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	68da      	ldr	r2, [r3, #12]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f042 0201 	orr.w	r2, r2, #1
 80036f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a23      	ldr	r2, [pc, #140]	; (800378c <HAL_TIM_Base_Start_IT+0xc4>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d022      	beq.n	8003748 <HAL_TIM_Base_Start_IT+0x80>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800370a:	d01d      	beq.n	8003748 <HAL_TIM_Base_Start_IT+0x80>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a1f      	ldr	r2, [pc, #124]	; (8003790 <HAL_TIM_Base_Start_IT+0xc8>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d018      	beq.n	8003748 <HAL_TIM_Base_Start_IT+0x80>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4a1e      	ldr	r2, [pc, #120]	; (8003794 <HAL_TIM_Base_Start_IT+0xcc>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d013      	beq.n	8003748 <HAL_TIM_Base_Start_IT+0x80>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a1c      	ldr	r2, [pc, #112]	; (8003798 <HAL_TIM_Base_Start_IT+0xd0>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d00e      	beq.n	8003748 <HAL_TIM_Base_Start_IT+0x80>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4a1b      	ldr	r2, [pc, #108]	; (800379c <HAL_TIM_Base_Start_IT+0xd4>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d009      	beq.n	8003748 <HAL_TIM_Base_Start_IT+0x80>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a19      	ldr	r2, [pc, #100]	; (80037a0 <HAL_TIM_Base_Start_IT+0xd8>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d004      	beq.n	8003748 <HAL_TIM_Base_Start_IT+0x80>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4a18      	ldr	r2, [pc, #96]	; (80037a4 <HAL_TIM_Base_Start_IT+0xdc>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d111      	bne.n	800376c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	689b      	ldr	r3, [r3, #8]
 800374e:	f003 0307 	and.w	r3, r3, #7
 8003752:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	2b06      	cmp	r3, #6
 8003758:	d010      	beq.n	800377c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	681a      	ldr	r2, [r3, #0]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f042 0201 	orr.w	r2, r2, #1
 8003768:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800376a:	e007      	b.n	800377c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	681a      	ldr	r2, [r3, #0]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f042 0201 	orr.w	r2, r2, #1
 800377a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800377c:	2300      	movs	r3, #0
}
 800377e:	4618      	mov	r0, r3
 8003780:	3714      	adds	r7, #20
 8003782:	46bd      	mov	sp, r7
 8003784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003788:	4770      	bx	lr
 800378a:	bf00      	nop
 800378c:	40010000 	.word	0x40010000
 8003790:	40000400 	.word	0x40000400
 8003794:	40000800 	.word	0x40000800
 8003798:	40000c00 	.word	0x40000c00
 800379c:	40010400 	.word	0x40010400
 80037a0:	40014000 	.word	0x40014000
 80037a4:	40001800 	.word	0x40001800

080037a8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b082      	sub	sp, #8
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	691b      	ldr	r3, [r3, #16]
 80037b6:	f003 0302 	and.w	r3, r3, #2
 80037ba:	2b02      	cmp	r3, #2
 80037bc:	d122      	bne.n	8003804 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	68db      	ldr	r3, [r3, #12]
 80037c4:	f003 0302 	and.w	r3, r3, #2
 80037c8:	2b02      	cmp	r3, #2
 80037ca:	d11b      	bne.n	8003804 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f06f 0202 	mvn.w	r2, #2
 80037d4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2201      	movs	r2, #1
 80037da:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	699b      	ldr	r3, [r3, #24]
 80037e2:	f003 0303 	and.w	r3, r3, #3
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d003      	beq.n	80037f2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80037ea:	6878      	ldr	r0, [r7, #4]
 80037ec:	f000 f8ee 	bl	80039cc <HAL_TIM_IC_CaptureCallback>
 80037f0:	e005      	b.n	80037fe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80037f2:	6878      	ldr	r0, [r7, #4]
 80037f4:	f000 f8e0 	bl	80039b8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037f8:	6878      	ldr	r0, [r7, #4]
 80037fa:	f000 f8f1 	bl	80039e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2200      	movs	r2, #0
 8003802:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	691b      	ldr	r3, [r3, #16]
 800380a:	f003 0304 	and.w	r3, r3, #4
 800380e:	2b04      	cmp	r3, #4
 8003810:	d122      	bne.n	8003858 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	68db      	ldr	r3, [r3, #12]
 8003818:	f003 0304 	and.w	r3, r3, #4
 800381c:	2b04      	cmp	r3, #4
 800381e:	d11b      	bne.n	8003858 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f06f 0204 	mvn.w	r2, #4
 8003828:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2202      	movs	r2, #2
 800382e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	699b      	ldr	r3, [r3, #24]
 8003836:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800383a:	2b00      	cmp	r3, #0
 800383c:	d003      	beq.n	8003846 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800383e:	6878      	ldr	r0, [r7, #4]
 8003840:	f000 f8c4 	bl	80039cc <HAL_TIM_IC_CaptureCallback>
 8003844:	e005      	b.n	8003852 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003846:	6878      	ldr	r0, [r7, #4]
 8003848:	f000 f8b6 	bl	80039b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800384c:	6878      	ldr	r0, [r7, #4]
 800384e:	f000 f8c7 	bl	80039e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2200      	movs	r2, #0
 8003856:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	691b      	ldr	r3, [r3, #16]
 800385e:	f003 0308 	and.w	r3, r3, #8
 8003862:	2b08      	cmp	r3, #8
 8003864:	d122      	bne.n	80038ac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	68db      	ldr	r3, [r3, #12]
 800386c:	f003 0308 	and.w	r3, r3, #8
 8003870:	2b08      	cmp	r3, #8
 8003872:	d11b      	bne.n	80038ac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f06f 0208 	mvn.w	r2, #8
 800387c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2204      	movs	r2, #4
 8003882:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	69db      	ldr	r3, [r3, #28]
 800388a:	f003 0303 	and.w	r3, r3, #3
 800388e:	2b00      	cmp	r3, #0
 8003890:	d003      	beq.n	800389a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003892:	6878      	ldr	r0, [r7, #4]
 8003894:	f000 f89a 	bl	80039cc <HAL_TIM_IC_CaptureCallback>
 8003898:	e005      	b.n	80038a6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800389a:	6878      	ldr	r0, [r7, #4]
 800389c:	f000 f88c 	bl	80039b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038a0:	6878      	ldr	r0, [r7, #4]
 80038a2:	f000 f89d 	bl	80039e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2200      	movs	r2, #0
 80038aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	691b      	ldr	r3, [r3, #16]
 80038b2:	f003 0310 	and.w	r3, r3, #16
 80038b6:	2b10      	cmp	r3, #16
 80038b8:	d122      	bne.n	8003900 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	68db      	ldr	r3, [r3, #12]
 80038c0:	f003 0310 	and.w	r3, r3, #16
 80038c4:	2b10      	cmp	r3, #16
 80038c6:	d11b      	bne.n	8003900 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f06f 0210 	mvn.w	r2, #16
 80038d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2208      	movs	r2, #8
 80038d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	69db      	ldr	r3, [r3, #28]
 80038de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d003      	beq.n	80038ee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038e6:	6878      	ldr	r0, [r7, #4]
 80038e8:	f000 f870 	bl	80039cc <HAL_TIM_IC_CaptureCallback>
 80038ec:	e005      	b.n	80038fa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038ee:	6878      	ldr	r0, [r7, #4]
 80038f0:	f000 f862 	bl	80039b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038f4:	6878      	ldr	r0, [r7, #4]
 80038f6:	f000 f873 	bl	80039e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2200      	movs	r2, #0
 80038fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	691b      	ldr	r3, [r3, #16]
 8003906:	f003 0301 	and.w	r3, r3, #1
 800390a:	2b01      	cmp	r3, #1
 800390c:	d10e      	bne.n	800392c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	68db      	ldr	r3, [r3, #12]
 8003914:	f003 0301 	and.w	r3, r3, #1
 8003918:	2b01      	cmp	r3, #1
 800391a:	d107      	bne.n	800392c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f06f 0201 	mvn.w	r2, #1
 8003924:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003926:	6878      	ldr	r0, [r7, #4]
 8003928:	f7fc ffe0 	bl	80008ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	691b      	ldr	r3, [r3, #16]
 8003932:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003936:	2b80      	cmp	r3, #128	; 0x80
 8003938:	d10e      	bne.n	8003958 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	68db      	ldr	r3, [r3, #12]
 8003940:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003944:	2b80      	cmp	r3, #128	; 0x80
 8003946:	d107      	bne.n	8003958 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003950:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003952:	6878      	ldr	r0, [r7, #4]
 8003954:	f000 f902 	bl	8003b5c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	691b      	ldr	r3, [r3, #16]
 800395e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003962:	2b40      	cmp	r3, #64	; 0x40
 8003964:	d10e      	bne.n	8003984 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	68db      	ldr	r3, [r3, #12]
 800396c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003970:	2b40      	cmp	r3, #64	; 0x40
 8003972:	d107      	bne.n	8003984 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800397c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800397e:	6878      	ldr	r0, [r7, #4]
 8003980:	f000 f838 	bl	80039f4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	691b      	ldr	r3, [r3, #16]
 800398a:	f003 0320 	and.w	r3, r3, #32
 800398e:	2b20      	cmp	r3, #32
 8003990:	d10e      	bne.n	80039b0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	68db      	ldr	r3, [r3, #12]
 8003998:	f003 0320 	and.w	r3, r3, #32
 800399c:	2b20      	cmp	r3, #32
 800399e:	d107      	bne.n	80039b0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f06f 0220 	mvn.w	r2, #32
 80039a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80039aa:	6878      	ldr	r0, [r7, #4]
 80039ac:	f000 f8cc 	bl	8003b48 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80039b0:	bf00      	nop
 80039b2:	3708      	adds	r7, #8
 80039b4:	46bd      	mov	sp, r7
 80039b6:	bd80      	pop	{r7, pc}

080039b8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80039b8:	b480      	push	{r7}
 80039ba:	b083      	sub	sp, #12
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80039c0:	bf00      	nop
 80039c2:	370c      	adds	r7, #12
 80039c4:	46bd      	mov	sp, r7
 80039c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ca:	4770      	bx	lr

080039cc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80039cc:	b480      	push	{r7}
 80039ce:	b083      	sub	sp, #12
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80039d4:	bf00      	nop
 80039d6:	370c      	adds	r7, #12
 80039d8:	46bd      	mov	sp, r7
 80039da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039de:	4770      	bx	lr

080039e0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80039e0:	b480      	push	{r7}
 80039e2:	b083      	sub	sp, #12
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80039e8:	bf00      	nop
 80039ea:	370c      	adds	r7, #12
 80039ec:	46bd      	mov	sp, r7
 80039ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f2:	4770      	bx	lr

080039f4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80039f4:	b480      	push	{r7}
 80039f6:	b083      	sub	sp, #12
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80039fc:	bf00      	nop
 80039fe:	370c      	adds	r7, #12
 8003a00:	46bd      	mov	sp, r7
 8003a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a06:	4770      	bx	lr

08003a08 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	b085      	sub	sp, #20
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
 8003a10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	4a40      	ldr	r2, [pc, #256]	; (8003b1c <TIM_Base_SetConfig+0x114>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d013      	beq.n	8003a48 <TIM_Base_SetConfig+0x40>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a26:	d00f      	beq.n	8003a48 <TIM_Base_SetConfig+0x40>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	4a3d      	ldr	r2, [pc, #244]	; (8003b20 <TIM_Base_SetConfig+0x118>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d00b      	beq.n	8003a48 <TIM_Base_SetConfig+0x40>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	4a3c      	ldr	r2, [pc, #240]	; (8003b24 <TIM_Base_SetConfig+0x11c>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d007      	beq.n	8003a48 <TIM_Base_SetConfig+0x40>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	4a3b      	ldr	r2, [pc, #236]	; (8003b28 <TIM_Base_SetConfig+0x120>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d003      	beq.n	8003a48 <TIM_Base_SetConfig+0x40>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	4a3a      	ldr	r2, [pc, #232]	; (8003b2c <TIM_Base_SetConfig+0x124>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d108      	bne.n	8003a5a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a4e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	68fa      	ldr	r2, [r7, #12]
 8003a56:	4313      	orrs	r3, r2
 8003a58:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	4a2f      	ldr	r2, [pc, #188]	; (8003b1c <TIM_Base_SetConfig+0x114>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d02b      	beq.n	8003aba <TIM_Base_SetConfig+0xb2>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a68:	d027      	beq.n	8003aba <TIM_Base_SetConfig+0xb2>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	4a2c      	ldr	r2, [pc, #176]	; (8003b20 <TIM_Base_SetConfig+0x118>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d023      	beq.n	8003aba <TIM_Base_SetConfig+0xb2>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	4a2b      	ldr	r2, [pc, #172]	; (8003b24 <TIM_Base_SetConfig+0x11c>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d01f      	beq.n	8003aba <TIM_Base_SetConfig+0xb2>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	4a2a      	ldr	r2, [pc, #168]	; (8003b28 <TIM_Base_SetConfig+0x120>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d01b      	beq.n	8003aba <TIM_Base_SetConfig+0xb2>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	4a29      	ldr	r2, [pc, #164]	; (8003b2c <TIM_Base_SetConfig+0x124>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d017      	beq.n	8003aba <TIM_Base_SetConfig+0xb2>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	4a28      	ldr	r2, [pc, #160]	; (8003b30 <TIM_Base_SetConfig+0x128>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d013      	beq.n	8003aba <TIM_Base_SetConfig+0xb2>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	4a27      	ldr	r2, [pc, #156]	; (8003b34 <TIM_Base_SetConfig+0x12c>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d00f      	beq.n	8003aba <TIM_Base_SetConfig+0xb2>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	4a26      	ldr	r2, [pc, #152]	; (8003b38 <TIM_Base_SetConfig+0x130>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d00b      	beq.n	8003aba <TIM_Base_SetConfig+0xb2>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	4a25      	ldr	r2, [pc, #148]	; (8003b3c <TIM_Base_SetConfig+0x134>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d007      	beq.n	8003aba <TIM_Base_SetConfig+0xb2>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	4a24      	ldr	r2, [pc, #144]	; (8003b40 <TIM_Base_SetConfig+0x138>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d003      	beq.n	8003aba <TIM_Base_SetConfig+0xb2>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	4a23      	ldr	r2, [pc, #140]	; (8003b44 <TIM_Base_SetConfig+0x13c>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d108      	bne.n	8003acc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ac0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	68db      	ldr	r3, [r3, #12]
 8003ac6:	68fa      	ldr	r2, [r7, #12]
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	695b      	ldr	r3, [r3, #20]
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	68fa      	ldr	r2, [r7, #12]
 8003ade:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	689a      	ldr	r2, [r3, #8]
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	681a      	ldr	r2, [r3, #0]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	4a0a      	ldr	r2, [pc, #40]	; (8003b1c <TIM_Base_SetConfig+0x114>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d003      	beq.n	8003b00 <TIM_Base_SetConfig+0xf8>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	4a0c      	ldr	r2, [pc, #48]	; (8003b2c <TIM_Base_SetConfig+0x124>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d103      	bne.n	8003b08 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	691a      	ldr	r2, [r3, #16]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	615a      	str	r2, [r3, #20]
}
 8003b0e:	bf00      	nop
 8003b10:	3714      	adds	r7, #20
 8003b12:	46bd      	mov	sp, r7
 8003b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b18:	4770      	bx	lr
 8003b1a:	bf00      	nop
 8003b1c:	40010000 	.word	0x40010000
 8003b20:	40000400 	.word	0x40000400
 8003b24:	40000800 	.word	0x40000800
 8003b28:	40000c00 	.word	0x40000c00
 8003b2c:	40010400 	.word	0x40010400
 8003b30:	40014000 	.word	0x40014000
 8003b34:	40014400 	.word	0x40014400
 8003b38:	40014800 	.word	0x40014800
 8003b3c:	40001800 	.word	0x40001800
 8003b40:	40001c00 	.word	0x40001c00
 8003b44:	40002000 	.word	0x40002000

08003b48 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b083      	sub	sp, #12
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003b50:	bf00      	nop
 8003b52:	370c      	adds	r7, #12
 8003b54:	46bd      	mov	sp, r7
 8003b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5a:	4770      	bx	lr

08003b5c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	b083      	sub	sp, #12
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003b64:	bf00      	nop
 8003b66:	370c      	adds	r7, #12
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6e:	4770      	bx	lr

08003b70 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b082      	sub	sp, #8
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d101      	bne.n	8003b82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	e03f      	b.n	8003c02 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b88:	b2db      	uxtb	r3, r3
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d106      	bne.n	8003b9c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2200      	movs	r2, #0
 8003b92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b96:	6878      	ldr	r0, [r7, #4]
 8003b98:	f7fc feec 	bl	8000974 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2224      	movs	r2, #36	; 0x24
 8003ba0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	68da      	ldr	r2, [r3, #12]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003bb2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003bb4:	6878      	ldr	r0, [r7, #4]
 8003bb6:	f000 f829 	bl	8003c0c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	691a      	ldr	r2, [r3, #16]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003bc8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	695a      	ldr	r2, [r3, #20]
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003bd8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	68da      	ldr	r2, [r3, #12]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003be8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2200      	movs	r2, #0
 8003bee:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2220      	movs	r2, #32
 8003bf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2220      	movs	r2, #32
 8003bfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003c00:	2300      	movs	r3, #0
}
 8003c02:	4618      	mov	r0, r3
 8003c04:	3708      	adds	r7, #8
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bd80      	pop	{r7, pc}
	...

08003c0c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c10:	b0c0      	sub	sp, #256	; 0x100
 8003c12:	af00      	add	r7, sp, #0
 8003c14:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	691b      	ldr	r3, [r3, #16]
 8003c20:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003c24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c28:	68d9      	ldr	r1, [r3, #12]
 8003c2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c2e:	681a      	ldr	r2, [r3, #0]
 8003c30:	ea40 0301 	orr.w	r3, r0, r1
 8003c34:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003c36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c3a:	689a      	ldr	r2, [r3, #8]
 8003c3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c40:	691b      	ldr	r3, [r3, #16]
 8003c42:	431a      	orrs	r2, r3
 8003c44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c48:	695b      	ldr	r3, [r3, #20]
 8003c4a:	431a      	orrs	r2, r3
 8003c4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c50:	69db      	ldr	r3, [r3, #28]
 8003c52:	4313      	orrs	r3, r2
 8003c54:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003c58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	68db      	ldr	r3, [r3, #12]
 8003c60:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003c64:	f021 010c 	bic.w	r1, r1, #12
 8003c68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c6c:	681a      	ldr	r2, [r3, #0]
 8003c6e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003c72:	430b      	orrs	r3, r1
 8003c74:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003c76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	695b      	ldr	r3, [r3, #20]
 8003c7e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003c82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c86:	6999      	ldr	r1, [r3, #24]
 8003c88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c8c:	681a      	ldr	r2, [r3, #0]
 8003c8e:	ea40 0301 	orr.w	r3, r0, r1
 8003c92:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003c94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c98:	681a      	ldr	r2, [r3, #0]
 8003c9a:	4b8f      	ldr	r3, [pc, #572]	; (8003ed8 <UART_SetConfig+0x2cc>)
 8003c9c:	429a      	cmp	r2, r3
 8003c9e:	d005      	beq.n	8003cac <UART_SetConfig+0xa0>
 8003ca0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ca4:	681a      	ldr	r2, [r3, #0]
 8003ca6:	4b8d      	ldr	r3, [pc, #564]	; (8003edc <UART_SetConfig+0x2d0>)
 8003ca8:	429a      	cmp	r2, r3
 8003caa:	d104      	bne.n	8003cb6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003cac:	f7ff fc6c 	bl	8003588 <HAL_RCC_GetPCLK2Freq>
 8003cb0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003cb4:	e003      	b.n	8003cbe <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003cb6:	f7ff fc53 	bl	8003560 <HAL_RCC_GetPCLK1Freq>
 8003cba:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003cbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cc2:	69db      	ldr	r3, [r3, #28]
 8003cc4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003cc8:	f040 810c 	bne.w	8003ee4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003ccc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003cd6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003cda:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003cde:	4622      	mov	r2, r4
 8003ce0:	462b      	mov	r3, r5
 8003ce2:	1891      	adds	r1, r2, r2
 8003ce4:	65b9      	str	r1, [r7, #88]	; 0x58
 8003ce6:	415b      	adcs	r3, r3
 8003ce8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003cea:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003cee:	4621      	mov	r1, r4
 8003cf0:	eb12 0801 	adds.w	r8, r2, r1
 8003cf4:	4629      	mov	r1, r5
 8003cf6:	eb43 0901 	adc.w	r9, r3, r1
 8003cfa:	f04f 0200 	mov.w	r2, #0
 8003cfe:	f04f 0300 	mov.w	r3, #0
 8003d02:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003d06:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003d0a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003d0e:	4690      	mov	r8, r2
 8003d10:	4699      	mov	r9, r3
 8003d12:	4623      	mov	r3, r4
 8003d14:	eb18 0303 	adds.w	r3, r8, r3
 8003d18:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003d1c:	462b      	mov	r3, r5
 8003d1e:	eb49 0303 	adc.w	r3, r9, r3
 8003d22:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003d26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003d32:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003d36:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003d3a:	460b      	mov	r3, r1
 8003d3c:	18db      	adds	r3, r3, r3
 8003d3e:	653b      	str	r3, [r7, #80]	; 0x50
 8003d40:	4613      	mov	r3, r2
 8003d42:	eb42 0303 	adc.w	r3, r2, r3
 8003d46:	657b      	str	r3, [r7, #84]	; 0x54
 8003d48:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003d4c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003d50:	f7fc fa9e 	bl	8000290 <__aeabi_uldivmod>
 8003d54:	4602      	mov	r2, r0
 8003d56:	460b      	mov	r3, r1
 8003d58:	4b61      	ldr	r3, [pc, #388]	; (8003ee0 <UART_SetConfig+0x2d4>)
 8003d5a:	fba3 2302 	umull	r2, r3, r3, r2
 8003d5e:	095b      	lsrs	r3, r3, #5
 8003d60:	011c      	lsls	r4, r3, #4
 8003d62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d66:	2200      	movs	r2, #0
 8003d68:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003d6c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003d70:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003d74:	4642      	mov	r2, r8
 8003d76:	464b      	mov	r3, r9
 8003d78:	1891      	adds	r1, r2, r2
 8003d7a:	64b9      	str	r1, [r7, #72]	; 0x48
 8003d7c:	415b      	adcs	r3, r3
 8003d7e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d80:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003d84:	4641      	mov	r1, r8
 8003d86:	eb12 0a01 	adds.w	sl, r2, r1
 8003d8a:	4649      	mov	r1, r9
 8003d8c:	eb43 0b01 	adc.w	fp, r3, r1
 8003d90:	f04f 0200 	mov.w	r2, #0
 8003d94:	f04f 0300 	mov.w	r3, #0
 8003d98:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003d9c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003da0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003da4:	4692      	mov	sl, r2
 8003da6:	469b      	mov	fp, r3
 8003da8:	4643      	mov	r3, r8
 8003daa:	eb1a 0303 	adds.w	r3, sl, r3
 8003dae:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003db2:	464b      	mov	r3, r9
 8003db4:	eb4b 0303 	adc.w	r3, fp, r3
 8003db8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003dbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003dc8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003dcc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003dd0:	460b      	mov	r3, r1
 8003dd2:	18db      	adds	r3, r3, r3
 8003dd4:	643b      	str	r3, [r7, #64]	; 0x40
 8003dd6:	4613      	mov	r3, r2
 8003dd8:	eb42 0303 	adc.w	r3, r2, r3
 8003ddc:	647b      	str	r3, [r7, #68]	; 0x44
 8003dde:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003de2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003de6:	f7fc fa53 	bl	8000290 <__aeabi_uldivmod>
 8003dea:	4602      	mov	r2, r0
 8003dec:	460b      	mov	r3, r1
 8003dee:	4611      	mov	r1, r2
 8003df0:	4b3b      	ldr	r3, [pc, #236]	; (8003ee0 <UART_SetConfig+0x2d4>)
 8003df2:	fba3 2301 	umull	r2, r3, r3, r1
 8003df6:	095b      	lsrs	r3, r3, #5
 8003df8:	2264      	movs	r2, #100	; 0x64
 8003dfa:	fb02 f303 	mul.w	r3, r2, r3
 8003dfe:	1acb      	subs	r3, r1, r3
 8003e00:	00db      	lsls	r3, r3, #3
 8003e02:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003e06:	4b36      	ldr	r3, [pc, #216]	; (8003ee0 <UART_SetConfig+0x2d4>)
 8003e08:	fba3 2302 	umull	r2, r3, r3, r2
 8003e0c:	095b      	lsrs	r3, r3, #5
 8003e0e:	005b      	lsls	r3, r3, #1
 8003e10:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003e14:	441c      	add	r4, r3
 8003e16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003e20:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003e24:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003e28:	4642      	mov	r2, r8
 8003e2a:	464b      	mov	r3, r9
 8003e2c:	1891      	adds	r1, r2, r2
 8003e2e:	63b9      	str	r1, [r7, #56]	; 0x38
 8003e30:	415b      	adcs	r3, r3
 8003e32:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e34:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003e38:	4641      	mov	r1, r8
 8003e3a:	1851      	adds	r1, r2, r1
 8003e3c:	6339      	str	r1, [r7, #48]	; 0x30
 8003e3e:	4649      	mov	r1, r9
 8003e40:	414b      	adcs	r3, r1
 8003e42:	637b      	str	r3, [r7, #52]	; 0x34
 8003e44:	f04f 0200 	mov.w	r2, #0
 8003e48:	f04f 0300 	mov.w	r3, #0
 8003e4c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003e50:	4659      	mov	r1, fp
 8003e52:	00cb      	lsls	r3, r1, #3
 8003e54:	4651      	mov	r1, sl
 8003e56:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003e5a:	4651      	mov	r1, sl
 8003e5c:	00ca      	lsls	r2, r1, #3
 8003e5e:	4610      	mov	r0, r2
 8003e60:	4619      	mov	r1, r3
 8003e62:	4603      	mov	r3, r0
 8003e64:	4642      	mov	r2, r8
 8003e66:	189b      	adds	r3, r3, r2
 8003e68:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003e6c:	464b      	mov	r3, r9
 8003e6e:	460a      	mov	r2, r1
 8003e70:	eb42 0303 	adc.w	r3, r2, r3
 8003e74:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003e78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003e84:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003e88:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003e8c:	460b      	mov	r3, r1
 8003e8e:	18db      	adds	r3, r3, r3
 8003e90:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e92:	4613      	mov	r3, r2
 8003e94:	eb42 0303 	adc.w	r3, r2, r3
 8003e98:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e9a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003e9e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003ea2:	f7fc f9f5 	bl	8000290 <__aeabi_uldivmod>
 8003ea6:	4602      	mov	r2, r0
 8003ea8:	460b      	mov	r3, r1
 8003eaa:	4b0d      	ldr	r3, [pc, #52]	; (8003ee0 <UART_SetConfig+0x2d4>)
 8003eac:	fba3 1302 	umull	r1, r3, r3, r2
 8003eb0:	095b      	lsrs	r3, r3, #5
 8003eb2:	2164      	movs	r1, #100	; 0x64
 8003eb4:	fb01 f303 	mul.w	r3, r1, r3
 8003eb8:	1ad3      	subs	r3, r2, r3
 8003eba:	00db      	lsls	r3, r3, #3
 8003ebc:	3332      	adds	r3, #50	; 0x32
 8003ebe:	4a08      	ldr	r2, [pc, #32]	; (8003ee0 <UART_SetConfig+0x2d4>)
 8003ec0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ec4:	095b      	lsrs	r3, r3, #5
 8003ec6:	f003 0207 	and.w	r2, r3, #7
 8003eca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4422      	add	r2, r4
 8003ed2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003ed4:	e105      	b.n	80040e2 <UART_SetConfig+0x4d6>
 8003ed6:	bf00      	nop
 8003ed8:	40011000 	.word	0x40011000
 8003edc:	40011400 	.word	0x40011400
 8003ee0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003ee4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003ee8:	2200      	movs	r2, #0
 8003eea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003eee:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003ef2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003ef6:	4642      	mov	r2, r8
 8003ef8:	464b      	mov	r3, r9
 8003efa:	1891      	adds	r1, r2, r2
 8003efc:	6239      	str	r1, [r7, #32]
 8003efe:	415b      	adcs	r3, r3
 8003f00:	627b      	str	r3, [r7, #36]	; 0x24
 8003f02:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003f06:	4641      	mov	r1, r8
 8003f08:	1854      	adds	r4, r2, r1
 8003f0a:	4649      	mov	r1, r9
 8003f0c:	eb43 0501 	adc.w	r5, r3, r1
 8003f10:	f04f 0200 	mov.w	r2, #0
 8003f14:	f04f 0300 	mov.w	r3, #0
 8003f18:	00eb      	lsls	r3, r5, #3
 8003f1a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003f1e:	00e2      	lsls	r2, r4, #3
 8003f20:	4614      	mov	r4, r2
 8003f22:	461d      	mov	r5, r3
 8003f24:	4643      	mov	r3, r8
 8003f26:	18e3      	adds	r3, r4, r3
 8003f28:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003f2c:	464b      	mov	r3, r9
 8003f2e:	eb45 0303 	adc.w	r3, r5, r3
 8003f32:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003f36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003f42:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003f46:	f04f 0200 	mov.w	r2, #0
 8003f4a:	f04f 0300 	mov.w	r3, #0
 8003f4e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003f52:	4629      	mov	r1, r5
 8003f54:	008b      	lsls	r3, r1, #2
 8003f56:	4621      	mov	r1, r4
 8003f58:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003f5c:	4621      	mov	r1, r4
 8003f5e:	008a      	lsls	r2, r1, #2
 8003f60:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003f64:	f7fc f994 	bl	8000290 <__aeabi_uldivmod>
 8003f68:	4602      	mov	r2, r0
 8003f6a:	460b      	mov	r3, r1
 8003f6c:	4b60      	ldr	r3, [pc, #384]	; (80040f0 <UART_SetConfig+0x4e4>)
 8003f6e:	fba3 2302 	umull	r2, r3, r3, r2
 8003f72:	095b      	lsrs	r3, r3, #5
 8003f74:	011c      	lsls	r4, r3, #4
 8003f76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003f80:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003f84:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003f88:	4642      	mov	r2, r8
 8003f8a:	464b      	mov	r3, r9
 8003f8c:	1891      	adds	r1, r2, r2
 8003f8e:	61b9      	str	r1, [r7, #24]
 8003f90:	415b      	adcs	r3, r3
 8003f92:	61fb      	str	r3, [r7, #28]
 8003f94:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003f98:	4641      	mov	r1, r8
 8003f9a:	1851      	adds	r1, r2, r1
 8003f9c:	6139      	str	r1, [r7, #16]
 8003f9e:	4649      	mov	r1, r9
 8003fa0:	414b      	adcs	r3, r1
 8003fa2:	617b      	str	r3, [r7, #20]
 8003fa4:	f04f 0200 	mov.w	r2, #0
 8003fa8:	f04f 0300 	mov.w	r3, #0
 8003fac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003fb0:	4659      	mov	r1, fp
 8003fb2:	00cb      	lsls	r3, r1, #3
 8003fb4:	4651      	mov	r1, sl
 8003fb6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003fba:	4651      	mov	r1, sl
 8003fbc:	00ca      	lsls	r2, r1, #3
 8003fbe:	4610      	mov	r0, r2
 8003fc0:	4619      	mov	r1, r3
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	4642      	mov	r2, r8
 8003fc6:	189b      	adds	r3, r3, r2
 8003fc8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003fcc:	464b      	mov	r3, r9
 8003fce:	460a      	mov	r2, r1
 8003fd0:	eb42 0303 	adc.w	r3, r2, r3
 8003fd4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003fd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	2200      	movs	r2, #0
 8003fe0:	67bb      	str	r3, [r7, #120]	; 0x78
 8003fe2:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003fe4:	f04f 0200 	mov.w	r2, #0
 8003fe8:	f04f 0300 	mov.w	r3, #0
 8003fec:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003ff0:	4649      	mov	r1, r9
 8003ff2:	008b      	lsls	r3, r1, #2
 8003ff4:	4641      	mov	r1, r8
 8003ff6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003ffa:	4641      	mov	r1, r8
 8003ffc:	008a      	lsls	r2, r1, #2
 8003ffe:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004002:	f7fc f945 	bl	8000290 <__aeabi_uldivmod>
 8004006:	4602      	mov	r2, r0
 8004008:	460b      	mov	r3, r1
 800400a:	4b39      	ldr	r3, [pc, #228]	; (80040f0 <UART_SetConfig+0x4e4>)
 800400c:	fba3 1302 	umull	r1, r3, r3, r2
 8004010:	095b      	lsrs	r3, r3, #5
 8004012:	2164      	movs	r1, #100	; 0x64
 8004014:	fb01 f303 	mul.w	r3, r1, r3
 8004018:	1ad3      	subs	r3, r2, r3
 800401a:	011b      	lsls	r3, r3, #4
 800401c:	3332      	adds	r3, #50	; 0x32
 800401e:	4a34      	ldr	r2, [pc, #208]	; (80040f0 <UART_SetConfig+0x4e4>)
 8004020:	fba2 2303 	umull	r2, r3, r2, r3
 8004024:	095b      	lsrs	r3, r3, #5
 8004026:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800402a:	441c      	add	r4, r3
 800402c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004030:	2200      	movs	r2, #0
 8004032:	673b      	str	r3, [r7, #112]	; 0x70
 8004034:	677a      	str	r2, [r7, #116]	; 0x74
 8004036:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800403a:	4642      	mov	r2, r8
 800403c:	464b      	mov	r3, r9
 800403e:	1891      	adds	r1, r2, r2
 8004040:	60b9      	str	r1, [r7, #8]
 8004042:	415b      	adcs	r3, r3
 8004044:	60fb      	str	r3, [r7, #12]
 8004046:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800404a:	4641      	mov	r1, r8
 800404c:	1851      	adds	r1, r2, r1
 800404e:	6039      	str	r1, [r7, #0]
 8004050:	4649      	mov	r1, r9
 8004052:	414b      	adcs	r3, r1
 8004054:	607b      	str	r3, [r7, #4]
 8004056:	f04f 0200 	mov.w	r2, #0
 800405a:	f04f 0300 	mov.w	r3, #0
 800405e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004062:	4659      	mov	r1, fp
 8004064:	00cb      	lsls	r3, r1, #3
 8004066:	4651      	mov	r1, sl
 8004068:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800406c:	4651      	mov	r1, sl
 800406e:	00ca      	lsls	r2, r1, #3
 8004070:	4610      	mov	r0, r2
 8004072:	4619      	mov	r1, r3
 8004074:	4603      	mov	r3, r0
 8004076:	4642      	mov	r2, r8
 8004078:	189b      	adds	r3, r3, r2
 800407a:	66bb      	str	r3, [r7, #104]	; 0x68
 800407c:	464b      	mov	r3, r9
 800407e:	460a      	mov	r2, r1
 8004080:	eb42 0303 	adc.w	r3, r2, r3
 8004084:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004086:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	2200      	movs	r2, #0
 800408e:	663b      	str	r3, [r7, #96]	; 0x60
 8004090:	667a      	str	r2, [r7, #100]	; 0x64
 8004092:	f04f 0200 	mov.w	r2, #0
 8004096:	f04f 0300 	mov.w	r3, #0
 800409a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800409e:	4649      	mov	r1, r9
 80040a0:	008b      	lsls	r3, r1, #2
 80040a2:	4641      	mov	r1, r8
 80040a4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80040a8:	4641      	mov	r1, r8
 80040aa:	008a      	lsls	r2, r1, #2
 80040ac:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80040b0:	f7fc f8ee 	bl	8000290 <__aeabi_uldivmod>
 80040b4:	4602      	mov	r2, r0
 80040b6:	460b      	mov	r3, r1
 80040b8:	4b0d      	ldr	r3, [pc, #52]	; (80040f0 <UART_SetConfig+0x4e4>)
 80040ba:	fba3 1302 	umull	r1, r3, r3, r2
 80040be:	095b      	lsrs	r3, r3, #5
 80040c0:	2164      	movs	r1, #100	; 0x64
 80040c2:	fb01 f303 	mul.w	r3, r1, r3
 80040c6:	1ad3      	subs	r3, r2, r3
 80040c8:	011b      	lsls	r3, r3, #4
 80040ca:	3332      	adds	r3, #50	; 0x32
 80040cc:	4a08      	ldr	r2, [pc, #32]	; (80040f0 <UART_SetConfig+0x4e4>)
 80040ce:	fba2 2303 	umull	r2, r3, r2, r3
 80040d2:	095b      	lsrs	r3, r3, #5
 80040d4:	f003 020f 	and.w	r2, r3, #15
 80040d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4422      	add	r2, r4
 80040e0:	609a      	str	r2, [r3, #8]
}
 80040e2:	bf00      	nop
 80040e4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80040e8:	46bd      	mov	sp, r7
 80040ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80040ee:	bf00      	nop
 80040f0:	51eb851f 	.word	0x51eb851f

080040f4 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 80040f4:	b5b0      	push	{r4, r5, r7, lr}
 80040f6:	b08c      	sub	sp, #48	; 0x30
 80040f8:	af04      	add	r7, sp, #16
  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 80040fa:	2100      	movs	r1, #0
 80040fc:	2000      	movs	r0, #0
 80040fe:	f005 ffdb 	bl	800a0b8 <tcpip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 8004102:	4b20      	ldr	r3, [pc, #128]	; (8004184 <MX_LWIP_Init+0x90>)
 8004104:	2200      	movs	r2, #0
 8004106:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 8004108:	4b1f      	ldr	r3, [pc, #124]	; (8004188 <MX_LWIP_Init+0x94>)
 800410a:	2200      	movs	r2, #0
 800410c:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 800410e:	4b1f      	ldr	r3, [pc, #124]	; (800418c <MX_LWIP_Init+0x98>)
 8004110:	2200      	movs	r2, #0
 8004112:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8004114:	4b1e      	ldr	r3, [pc, #120]	; (8004190 <MX_LWIP_Init+0x9c>)
 8004116:	9302      	str	r3, [sp, #8]
 8004118:	4b1e      	ldr	r3, [pc, #120]	; (8004194 <MX_LWIP_Init+0xa0>)
 800411a:	9301      	str	r3, [sp, #4]
 800411c:	2300      	movs	r3, #0
 800411e:	9300      	str	r3, [sp, #0]
 8004120:	4b1a      	ldr	r3, [pc, #104]	; (800418c <MX_LWIP_Init+0x98>)
 8004122:	4a19      	ldr	r2, [pc, #100]	; (8004188 <MX_LWIP_Init+0x94>)
 8004124:	4917      	ldr	r1, [pc, #92]	; (8004184 <MX_LWIP_Init+0x90>)
 8004126:	481c      	ldr	r0, [pc, #112]	; (8004198 <MX_LWIP_Init+0xa4>)
 8004128:	f006 fd90 	bl	800ac4c <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800412c:	481a      	ldr	r0, [pc, #104]	; (8004198 <MX_LWIP_Init+0xa4>)
 800412e:	f006 ff47 	bl	800afc0 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8004132:	4b19      	ldr	r3, [pc, #100]	; (8004198 <MX_LWIP_Init+0xa4>)
 8004134:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004138:	089b      	lsrs	r3, r3, #2
 800413a:	f003 0301 	and.w	r3, r3, #1
 800413e:	b2db      	uxtb	r3, r3
 8004140:	2b00      	cmp	r3, #0
 8004142:	d003      	beq.n	800414c <MX_LWIP_Init+0x58>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8004144:	4814      	ldr	r0, [pc, #80]	; (8004198 <MX_LWIP_Init+0xa4>)
 8004146:	f006 ff4b 	bl	800afe0 <netif_set_up>
 800414a:	e002      	b.n	8004152 <MX_LWIP_Init+0x5e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 800414c:	4812      	ldr	r0, [pc, #72]	; (8004198 <MX_LWIP_Init+0xa4>)
 800414e:	f006 ffb3 	bl	800b0b8 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8004152:	4912      	ldr	r1, [pc, #72]	; (800419c <MX_LWIP_Init+0xa8>)
 8004154:	4810      	ldr	r0, [pc, #64]	; (8004198 <MX_LWIP_Init+0xa4>)
 8004156:	f007 f849 	bl	800b1ec <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthLink, ethernet_link_thread, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE *2);
 800415a:	4b11      	ldr	r3, [pc, #68]	; (80041a0 <MX_LWIP_Init+0xac>)
 800415c:	1d3c      	adds	r4, r7, #4
 800415e:	461d      	mov	r5, r3
 8004160:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004162:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004164:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004168:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthLink), &gnetif);
 800416c:	1d3b      	adds	r3, r7, #4
 800416e:	490a      	ldr	r1, [pc, #40]	; (8004198 <MX_LWIP_Init+0xa4>)
 8004170:	4618      	mov	r0, r3
 8004172:	f000 fd23 	bl	8004bbc <osThreadCreate>
/* USER CODE END H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 8004176:	4808      	ldr	r0, [pc, #32]	; (8004198 <MX_LWIP_Init+0xa4>)
 8004178:	f00f f8d4 	bl	8013324 <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800417c:	bf00      	nop
 800417e:	3720      	adds	r7, #32
 8004180:	46bd      	mov	sp, r7
 8004182:	bdb0      	pop	{r4, r5, r7, pc}
 8004184:	20000438 	.word	0x20000438
 8004188:	2000043c 	.word	0x2000043c
 800418c:	20000440 	.word	0x20000440
 8004190:	08009fc9 	.word	0x08009fc9
 8004194:	08004645 	.word	0x08004645
 8004198:	20000400 	.word	0x20000400
 800419c:	080041a5 	.word	0x080041a5
 80041a0:	08018544 	.word	0x08018544

080041a4 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 80041a4:	b480      	push	{r7}
 80041a6:	b083      	sub	sp, #12
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 80041ac:	bf00      	nop
 80041ae:	370c      	adds	r7, #12
 80041b0:	46bd      	mov	sp, r7
 80041b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b6:	4770      	bx	lr

080041b8 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b082      	sub	sp, #8
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 80041c0:	4b04      	ldr	r3, [pc, #16]	; (80041d4 <HAL_ETH_RxCpltCallback+0x1c>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4618      	mov	r0, r3
 80041c6:	f000 fe75 	bl	8004eb4 <osSemaphoreRelease>
}
 80041ca:	bf00      	nop
 80041cc:	3708      	adds	r7, #8
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bd80      	pop	{r7, pc}
 80041d2:	bf00      	nop
 80041d4:	20004f10 	.word	0x20004f10

080041d8 <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b082      	sub	sp, #8
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 80041e0:	4b04      	ldr	r3, [pc, #16]	; (80041f4 <HAL_ETH_TxCpltCallback+0x1c>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4618      	mov	r0, r3
 80041e6:	f000 fe65 	bl	8004eb4 <osSemaphoreRelease>
}
 80041ea:	bf00      	nop
 80041ec:	3708      	adds	r7, #8
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bd80      	pop	{r7, pc}
 80041f2:	bf00      	nop
 80041f4:	20004f14 	.word	0x20004f14

080041f8 <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b082      	sub	sp, #8
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 8004200:	6878      	ldr	r0, [r7, #4]
 8004202:	f7fd ff65 	bl	80020d0 <HAL_ETH_GetDMAError>
 8004206:	4603      	mov	r3, r0
 8004208:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800420c:	2b80      	cmp	r3, #128	; 0x80
 800420e:	d104      	bne.n	800421a <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 8004210:	4b04      	ldr	r3, [pc, #16]	; (8004224 <HAL_ETH_ErrorCallback+0x2c>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4618      	mov	r0, r3
 8004216:	f000 fe4d 	bl	8004eb4 <osSemaphoreRelease>
  }
}
 800421a:	bf00      	nop
 800421c:	3708      	adds	r7, #8
 800421e:	46bd      	mov	sp, r7
 8004220:	bd80      	pop	{r7, pc}
 8004222:	bf00      	nop
 8004224:	20004f10 	.word	0x20004f10

08004228 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8004228:	b5b0      	push	{r4, r5, r7, lr}
 800422a:	b0a8      	sub	sp, #160	; 0xa0
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8004230:	2300      	movs	r3, #0
 8004232:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t duplex, speed = 0;
 8004236:	2300      	movs	r3, #0
 8004238:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  int32_t PHYLinkState = 0;
 800423c:	2300      	movs	r3, #0
 800423e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  ETH_MACConfigTypeDef MACConf = {0};
 8004242:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004246:	2264      	movs	r2, #100	; 0x64
 8004248:	2100      	movs	r1, #0
 800424a:	4618      	mov	r0, r3
 800424c:	f013 f985 	bl	801755a <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8004250:	4b85      	ldr	r3, [pc, #532]	; (8004468 <low_level_init+0x240>)
 8004252:	4a86      	ldr	r2, [pc, #536]	; (800446c <low_level_init+0x244>)
 8004254:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8004256:	2300      	movs	r3, #0
 8004258:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  MACAddr[1] = 0x80;
 800425c:	2380      	movs	r3, #128	; 0x80
 800425e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  MACAddr[2] = 0xE1;
 8004262:	23e1      	movs	r3, #225	; 0xe1
 8004264:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  MACAddr[3] = 0xFE;
 8004268:	23fe      	movs	r3, #254	; 0xfe
 800426a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  MACAddr[4] = 0xEC;
 800426e:	23ec      	movs	r3, #236	; 0xec
 8004270:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  MACAddr[5] = 0x72;
 8004274:	2372      	movs	r3, #114	; 0x72
 8004276:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  heth.Init.MACAddr = &MACAddr[0];
 800427a:	4a7b      	ldr	r2, [pc, #492]	; (8004468 <low_level_init+0x240>)
 800427c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004280:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8004282:	4b79      	ldr	r3, [pc, #484]	; (8004468 <low_level_init+0x240>)
 8004284:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8004288:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800428a:	4b77      	ldr	r3, [pc, #476]	; (8004468 <low_level_init+0x240>)
 800428c:	4a78      	ldr	r2, [pc, #480]	; (8004470 <low_level_init+0x248>)
 800428e:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8004290:	4b75      	ldr	r3, [pc, #468]	; (8004468 <low_level_init+0x240>)
 8004292:	4a78      	ldr	r2, [pc, #480]	; (8004474 <low_level_init+0x24c>)
 8004294:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8004296:	4b74      	ldr	r3, [pc, #464]	; (8004468 <low_level_init+0x240>)
 8004298:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800429c:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800429e:	4872      	ldr	r0, [pc, #456]	; (8004468 <low_level_init+0x240>)
 80042a0:	f7fd f878 	bl	8001394 <HAL_ETH_Init>
 80042a4:	4603      	mov	r3, r0
 80042a6:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80042aa:	2238      	movs	r2, #56	; 0x38
 80042ac:	2100      	movs	r1, #0
 80042ae:	4872      	ldr	r0, [pc, #456]	; (8004478 <low_level_init+0x250>)
 80042b0:	f013 f953 	bl	801755a <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80042b4:	4b70      	ldr	r3, [pc, #448]	; (8004478 <low_level_init+0x250>)
 80042b6:	2221      	movs	r2, #33	; 0x21
 80042b8:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80042ba:	4b6f      	ldr	r3, [pc, #444]	; (8004478 <low_level_init+0x250>)
 80042bc:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 80042c0:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80042c2:	4b6d      	ldr	r3, [pc, #436]	; (8004478 <low_level_init+0x250>)
 80042c4:	2200      	movs	r2, #0
 80042c6:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 80042c8:	486c      	ldr	r0, [pc, #432]	; (800447c <low_level_init+0x254>)
 80042ca:	f006 fb79 	bl	800a9c0 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2206      	movs	r2, #6
 80042d2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 80042d6:	4b64      	ldr	r3, [pc, #400]	; (8004468 <low_level_init+0x240>)
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	781a      	ldrb	r2, [r3, #0]
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 80042e2:	4b61      	ldr	r3, [pc, #388]	; (8004468 <low_level_init+0x240>)
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	785a      	ldrb	r2, [r3, #1]
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 80042ee:	4b5e      	ldr	r3, [pc, #376]	; (8004468 <low_level_init+0x240>)
 80042f0:	685b      	ldr	r3, [r3, #4]
 80042f2:	789a      	ldrb	r2, [r3, #2]
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 80042fa:	4b5b      	ldr	r3, [pc, #364]	; (8004468 <low_level_init+0x240>)
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	78da      	ldrb	r2, [r3, #3]
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8004306:	4b58      	ldr	r3, [pc, #352]	; (8004468 <low_level_init+0x240>)
 8004308:	685b      	ldr	r3, [r3, #4]
 800430a:	791a      	ldrb	r2, [r3, #4]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8004312:	4b55      	ldr	r3, [pc, #340]	; (8004468 <low_level_init+0x240>)
 8004314:	685b      	ldr	r3, [r3, #4]
 8004316:	795a      	ldrb	r2, [r3, #5]
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8004324:	851a      	strh	r2, [r3, #40]	; 0x28

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800432c:	f043 030a 	orr.w	r3, r3, #10
 8004330:	b2da      	uxtb	r2, r3
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = xSemaphoreCreateBinary();
 8004338:	2203      	movs	r2, #3
 800433a:	2100      	movs	r1, #0
 800433c:	2001      	movs	r0, #1
 800433e:	f001 f89d 	bl	800547c <xQueueGenericCreate>
 8004342:	4603      	mov	r3, r0
 8004344:	4a4e      	ldr	r2, [pc, #312]	; (8004480 <low_level_init+0x258>)
 8004346:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  TxPktSemaphore = xSemaphoreCreateBinary();
 8004348:	2203      	movs	r2, #3
 800434a:	2100      	movs	r1, #0
 800434c:	2001      	movs	r0, #1
 800434e:	f001 f895 	bl	800547c <xQueueGenericCreate>
 8004352:	4603      	mov	r3, r0
 8004354:	4a4b      	ldr	r2, [pc, #300]	; (8004484 <low_level_init+0x25c>)
 8004356:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8004358:	4b4b      	ldr	r3, [pc, #300]	; (8004488 <low_level_init+0x260>)
 800435a:	f107 0408 	add.w	r4, r7, #8
 800435e:	461d      	mov	r5, r3
 8004360:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004362:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004364:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004368:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 800436c:	f107 0308 	add.w	r3, r7, #8
 8004370:	6879      	ldr	r1, [r7, #4]
 8004372:	4618      	mov	r0, r3
 8004374:	f000 fc22 	bl	8004bbc <osThreadCreate>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8004378:	4944      	ldr	r1, [pc, #272]	; (800448c <low_level_init+0x264>)
 800437a:	4845      	ldr	r0, [pc, #276]	; (8004490 <low_level_init+0x268>)
 800437c:	f7fc fd61 	bl	8000e42 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 8004380:	4843      	ldr	r0, [pc, #268]	; (8004490 <low_level_init+0x268>)
 8004382:	f7fc fd90 	bl	8000ea6 <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 8004386:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800438a:	2b00      	cmp	r3, #0
 800438c:	d165      	bne.n	800445a <low_level_init+0x232>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800438e:	4840      	ldr	r0, [pc, #256]	; (8004490 <low_level_init+0x268>)
 8004390:	f7fc fe31 	bl	8000ff6 <LAN8742_GetLinkState>
 8004394:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 8004398:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800439c:	2b01      	cmp	r3, #1
 800439e:	dc06      	bgt.n	80043ae <low_level_init+0x186>
    {
      netif_set_link_down(netif);
 80043a0:	6878      	ldr	r0, [r7, #4]
 80043a2:	f006 fef3 	bl	800b18c <netif_set_link_down>
      netif_set_down(netif);
 80043a6:	6878      	ldr	r0, [r7, #4]
 80043a8:	f006 fe86 	bl	800b0b8 <netif_set_down>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 80043ac:	e057      	b.n	800445e <low_level_init+0x236>
      switch (PHYLinkState)
 80043ae:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80043b2:	3b02      	subs	r3, #2
 80043b4:	2b03      	cmp	r3, #3
 80043b6:	d82b      	bhi.n	8004410 <low_level_init+0x1e8>
 80043b8:	a201      	add	r2, pc, #4	; (adr r2, 80043c0 <low_level_init+0x198>)
 80043ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043be:	bf00      	nop
 80043c0:	080043d1 	.word	0x080043d1
 80043c4:	080043e3 	.word	0x080043e3
 80043c8:	080043f3 	.word	0x080043f3
 80043cc:	08004403 	.word	0x08004403
        duplex = ETH_FULLDUPLEX_MODE;
 80043d0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80043d4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_100M;
 80043d8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80043dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 80043e0:	e01f      	b.n	8004422 <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 80043e2:	2300      	movs	r3, #0
 80043e4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_100M;
 80043e8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80043ec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 80043f0:	e017      	b.n	8004422 <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 80043f2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80043f6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_10M;
 80043fa:	2300      	movs	r3, #0
 80043fc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 8004400:	e00f      	b.n	8004422 <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 8004402:	2300      	movs	r3, #0
 8004404:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_10M;
 8004408:	2300      	movs	r3, #0
 800440a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 800440e:	e008      	b.n	8004422 <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 8004410:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004414:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_100M;
 8004418:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800441c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 8004420:	bf00      	nop
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 8004422:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004426:	4619      	mov	r1, r3
 8004428:	480f      	ldr	r0, [pc, #60]	; (8004468 <low_level_init+0x240>)
 800442a:	f7fd fcf7 	bl	8001e1c <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 800442e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004432:	647b      	str	r3, [r7, #68]	; 0x44
    MACConf.Speed = speed;
 8004434:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004438:	643b      	str	r3, [r7, #64]	; 0x40
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 800443a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800443e:	4619      	mov	r1, r3
 8004440:	4809      	ldr	r0, [pc, #36]	; (8004468 <low_level_init+0x240>)
 8004442:	f7fd fdd5 	bl	8001ff0 <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&heth);
 8004446:	4808      	ldr	r0, [pc, #32]	; (8004468 <low_level_init+0x240>)
 8004448:	f7fd f881 	bl	800154e <HAL_ETH_Start_IT>
    netif_set_up(netif);
 800444c:	6878      	ldr	r0, [r7, #4]
 800444e:	f006 fdc7 	bl	800afe0 <netif_set_up>
    netif_set_link_up(netif);
 8004452:	6878      	ldr	r0, [r7, #4]
 8004454:	f006 fe62 	bl	800b11c <netif_set_link_up>
}
 8004458:	e001      	b.n	800445e <low_level_init+0x236>
    Error_Handler();
 800445a:	f7fc fa59 	bl	8000910 <Error_Handler>
}
 800445e:	bf00      	nop
 8004460:	37a0      	adds	r7, #160	; 0xa0
 8004462:	46bd      	mov	sp, r7
 8004464:	bdb0      	pop	{r4, r5, r7, pc}
 8004466:	bf00      	nop
 8004468:	20004f18 	.word	0x20004f18
 800446c:	40028000 	.word	0x40028000
 8004470:	20004e70 	.word	0x20004e70
 8004474:	20004dd0 	.word	0x20004dd0
 8004478:	20004fc8 	.word	0x20004fc8
 800447c:	0801be68 	.word	0x0801be68
 8004480:	20004f10 	.word	0x20004f10
 8004484:	20004f14 	.word	0x20004f14
 8004488:	08018568 	.word	0x08018568
 800448c:	2000000c 	.word	0x2000000c
 8004490:	20005000 	.word	0x20005000

08004494 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b092      	sub	sp, #72	; 0x48
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
 800449c:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 800449e:	2300      	movs	r3, #0
 80044a0:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 80044a2:	2300      	movs	r3, #0
 80044a4:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 80044a6:	2300      	movs	r3, #0
 80044a8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 80044ac:	f107 030c 	add.w	r3, r7, #12
 80044b0:	2230      	movs	r2, #48	; 0x30
 80044b2:	2100      	movs	r1, #0
 80044b4:	4618      	mov	r0, r3
 80044b6:	f013 f850 	bl	801755a <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 80044ba:	f107 030c 	add.w	r3, r7, #12
 80044be:	2230      	movs	r2, #48	; 0x30
 80044c0:	2100      	movs	r1, #0
 80044c2:	4618      	mov	r0, r3
 80044c4:	f013 f849 	bl	801755a <memset>

  for(q = p; q != NULL; q = q->next)
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	643b      	str	r3, [r7, #64]	; 0x40
 80044cc:	e045      	b.n	800455a <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 80044ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044d0:	2b03      	cmp	r3, #3
 80044d2:	d902      	bls.n	80044da <low_level_output+0x46>
      return ERR_IF;
 80044d4:	f06f 030b 	mvn.w	r3, #11
 80044d8:	e065      	b.n	80045a6 <low_level_output+0x112>

    Txbuffer[i].buffer = q->payload;
 80044da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044dc:	6859      	ldr	r1, [r3, #4]
 80044de:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80044e0:	4613      	mov	r3, r2
 80044e2:	005b      	lsls	r3, r3, #1
 80044e4:	4413      	add	r3, r2
 80044e6:	009b      	lsls	r3, r3, #2
 80044e8:	3348      	adds	r3, #72	; 0x48
 80044ea:	443b      	add	r3, r7
 80044ec:	3b3c      	subs	r3, #60	; 0x3c
 80044ee:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 80044f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044f2:	895b      	ldrh	r3, [r3, #10]
 80044f4:	4619      	mov	r1, r3
 80044f6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80044f8:	4613      	mov	r3, r2
 80044fa:	005b      	lsls	r3, r3, #1
 80044fc:	4413      	add	r3, r2
 80044fe:	009b      	lsls	r3, r3, #2
 8004500:	3348      	adds	r3, #72	; 0x48
 8004502:	443b      	add	r3, r7
 8004504:	3b38      	subs	r3, #56	; 0x38
 8004506:	6019      	str	r1, [r3, #0]

    if(i>0)
 8004508:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800450a:	2b00      	cmp	r3, #0
 800450c:	d011      	beq.n	8004532 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800450e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004510:	1e5a      	subs	r2, r3, #1
 8004512:	f107 000c 	add.w	r0, r7, #12
 8004516:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004518:	460b      	mov	r3, r1
 800451a:	005b      	lsls	r3, r3, #1
 800451c:	440b      	add	r3, r1
 800451e:	009b      	lsls	r3, r3, #2
 8004520:	18c1      	adds	r1, r0, r3
 8004522:	4613      	mov	r3, r2
 8004524:	005b      	lsls	r3, r3, #1
 8004526:	4413      	add	r3, r2
 8004528:	009b      	lsls	r3, r3, #2
 800452a:	3348      	adds	r3, #72	; 0x48
 800452c:	443b      	add	r3, r7
 800452e:	3b34      	subs	r3, #52	; 0x34
 8004530:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8004532:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d109      	bne.n	800454e <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 800453a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800453c:	4613      	mov	r3, r2
 800453e:	005b      	lsls	r3, r3, #1
 8004540:	4413      	add	r3, r2
 8004542:	009b      	lsls	r3, r3, #2
 8004544:	3348      	adds	r3, #72	; 0x48
 8004546:	443b      	add	r3, r7
 8004548:	3b34      	subs	r3, #52	; 0x34
 800454a:	2200      	movs	r2, #0
 800454c:	601a      	str	r2, [r3, #0]
    }

    i++;
 800454e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004550:	3301      	adds	r3, #1
 8004552:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 8004554:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	643b      	str	r3, [r7, #64]	; 0x40
 800455a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800455c:	2b00      	cmp	r3, #0
 800455e:	d1b6      	bne.n	80044ce <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	891b      	ldrh	r3, [r3, #8]
 8004564:	461a      	mov	r2, r3
 8004566:	4b12      	ldr	r3, [pc, #72]	; (80045b0 <low_level_output+0x11c>)
 8004568:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800456a:	4a11      	ldr	r2, [pc, #68]	; (80045b0 <low_level_output+0x11c>)
 800456c:	f107 030c 	add.w	r3, r7, #12
 8004570:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8004572:	4a0f      	ldr	r2, [pc, #60]	; (80045b0 <low_level_output+0x11c>)
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	6353      	str	r3, [r2, #52]	; 0x34

  pbuf_ref(p);
 8004578:	6838      	ldr	r0, [r7, #0]
 800457a:	f007 fa8b 	bl	800ba94 <pbuf_ref>

  HAL_ETH_Transmit_IT(&heth, &TxConfig);
 800457e:	490c      	ldr	r1, [pc, #48]	; (80045b0 <low_level_output+0x11c>)
 8004580:	480c      	ldr	r0, [pc, #48]	; (80045b4 <low_level_output+0x120>)
 8004582:	f7fd f8f1 	bl	8001768 <HAL_ETH_Transmit_IT>
  while(osSemaphoreWait(TxPktSemaphore, TIME_WAITING_FOR_INPUT)!=osOK)
 8004586:	bf00      	nop
 8004588:	4b0b      	ldr	r3, [pc, #44]	; (80045b8 <low_level_output+0x124>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f04f 31ff 	mov.w	r1, #4294967295
 8004590:	4618      	mov	r0, r3
 8004592:	f000 fc41 	bl	8004e18 <osSemaphoreWait>
 8004596:	4603      	mov	r3, r0
 8004598:	2b00      	cmp	r3, #0
 800459a:	d1f5      	bne.n	8004588 <low_level_output+0xf4>

  {
  }

  HAL_ETH_ReleaseTxPacket(&heth);
 800459c:	4805      	ldr	r0, [pc, #20]	; (80045b4 <low_level_output+0x120>)
 800459e:	f7fd fa77 	bl	8001a90 <HAL_ETH_ReleaseTxPacket>

  return errval;
 80045a2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 80045a6:	4618      	mov	r0, r3
 80045a8:	3748      	adds	r7, #72	; 0x48
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bd80      	pop	{r7, pc}
 80045ae:	bf00      	nop
 80045b0:	20004fc8 	.word	0x20004fc8
 80045b4:	20004f18 	.word	0x20004f18
 80045b8:	20004f14 	.word	0x20004f14

080045bc <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b084      	sub	sp, #16
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80045c4:	2300      	movs	r3, #0
 80045c6:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 80045c8:	4b07      	ldr	r3, [pc, #28]	; (80045e8 <low_level_input+0x2c>)
 80045ca:	781b      	ldrb	r3, [r3, #0]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d105      	bne.n	80045dc <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 80045d0:	f107 030c 	add.w	r3, r7, #12
 80045d4:	4619      	mov	r1, r3
 80045d6:	4805      	ldr	r0, [pc, #20]	; (80045ec <low_level_input+0x30>)
 80045d8:	f7fd f922 	bl	8001820 <HAL_ETH_ReadData>
  }

  return p;
 80045dc:	68fb      	ldr	r3, [r7, #12]
}
 80045de:	4618      	mov	r0, r3
 80045e0:	3710      	adds	r7, #16
 80045e2:	46bd      	mov	sp, r7
 80045e4:	bd80      	pop	{r7, pc}
 80045e6:	bf00      	nop
 80045e8:	20004dcc 	.word	0x20004dcc
 80045ec:	20004f18 	.word	0x20004f18

080045f0 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
static void ethernetif_input(void const * argument)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b084      	sub	sp, #16
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80045f8:	2300      	movs	r3, #0
 80045fa:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8004600:	4b0f      	ldr	r3, [pc, #60]	; (8004640 <ethernetif_input+0x50>)
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f04f 31ff 	mov.w	r1, #4294967295
 8004608:	4618      	mov	r0, r3
 800460a:	f000 fc05 	bl	8004e18 <osSemaphoreWait>
 800460e:	4603      	mov	r3, r0
 8004610:	2b00      	cmp	r3, #0
 8004612:	d1f5      	bne.n	8004600 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 8004614:	68b8      	ldr	r0, [r7, #8]
 8004616:	f7ff ffd1 	bl	80045bc <low_level_input>
 800461a:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d00a      	beq.n	8004638 <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 8004622:	68bb      	ldr	r3, [r7, #8]
 8004624:	691b      	ldr	r3, [r3, #16]
 8004626:	68b9      	ldr	r1, [r7, #8]
 8004628:	68f8      	ldr	r0, [r7, #12]
 800462a:	4798      	blx	r3
 800462c:	4603      	mov	r3, r0
 800462e:	2b00      	cmp	r3, #0
 8004630:	d002      	beq.n	8004638 <ethernetif_input+0x48>
          {
            pbuf_free(p);
 8004632:	68f8      	ldr	r0, [r7, #12]
 8004634:	f007 f988 	bl	800b948 <pbuf_free>
          }
        }
      } while(p!=NULL);
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d1ea      	bne.n	8004614 <ethernetif_input+0x24>
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800463e:	e7df      	b.n	8004600 <ethernetif_input+0x10>
 8004640:	20004f10 	.word	0x20004f10

08004644 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b082      	sub	sp, #8
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d106      	bne.n	8004660 <ethernetif_init+0x1c>
 8004652:	4b0e      	ldr	r3, [pc, #56]	; (800468c <ethernetif_init+0x48>)
 8004654:	f240 12df 	movw	r2, #479	; 0x1df
 8004658:	490d      	ldr	r1, [pc, #52]	; (8004690 <ethernetif_init+0x4c>)
 800465a:	480e      	ldr	r0, [pc, #56]	; (8004694 <ethernetif_init+0x50>)
 800465c:	f013 f81a 	bl	8017694 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2273      	movs	r2, #115	; 0x73
 8004664:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  netif->name[1] = IFNAME1;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2274      	movs	r2, #116	; 0x74
 800466c:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	4a09      	ldr	r2, [pc, #36]	; (8004698 <ethernetif_init+0x54>)
 8004674:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	4a08      	ldr	r2, [pc, #32]	; (800469c <ethernetif_init+0x58>)
 800467a:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800467c:	6878      	ldr	r0, [r7, #4]
 800467e:	f7ff fdd3 	bl	8004228 <low_level_init>

  return ERR_OK;
 8004682:	2300      	movs	r3, #0
}
 8004684:	4618      	mov	r0, r3
 8004686:	3708      	adds	r7, #8
 8004688:	46bd      	mov	sp, r7
 800468a:	bd80      	pop	{r7, pc}
 800468c:	08018584 	.word	0x08018584
 8004690:	080185a0 	.word	0x080185a0
 8004694:	080185b0 	.word	0x080185b0
 8004698:	080151f1 	.word	0x080151f1
 800469c:	08004495 	.word	0x08004495

080046a0 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b084      	sub	sp, #16
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 80046ac:	68f9      	ldr	r1, [r7, #12]
 80046ae:	4809      	ldr	r0, [pc, #36]	; (80046d4 <pbuf_free_custom+0x34>)
 80046b0:	f006 fa76 	bl	800aba0 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 80046b4:	4b08      	ldr	r3, [pc, #32]	; (80046d8 <pbuf_free_custom+0x38>)
 80046b6:	781b      	ldrb	r3, [r3, #0]
 80046b8:	2b01      	cmp	r3, #1
 80046ba:	d107      	bne.n	80046cc <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 80046bc:	4b06      	ldr	r3, [pc, #24]	; (80046d8 <pbuf_free_custom+0x38>)
 80046be:	2200      	movs	r2, #0
 80046c0:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 80046c2:	4b06      	ldr	r3, [pc, #24]	; (80046dc <pbuf_free_custom+0x3c>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4618      	mov	r0, r3
 80046c8:	f000 fbf4 	bl	8004eb4 <osSemaphoreRelease>
  }
}
 80046cc:	bf00      	nop
 80046ce:	3710      	adds	r7, #16
 80046d0:	46bd      	mov	sp, r7
 80046d2:	bd80      	pop	{r7, pc}
 80046d4:	0801be68 	.word	0x0801be68
 80046d8:	20004dcc 	.word	0x20004dcc
 80046dc:	20004f10 	.word	0x20004f10

080046e0 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80046e4:	f7fc fd44 	bl	8001170 <HAL_GetTick>
 80046e8:	4603      	mov	r3, r0
}
 80046ea:	4618      	mov	r0, r3
 80046ec:	bd80      	pop	{r7, pc}
	...

080046f0 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b08e      	sub	sp, #56	; 0x38
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80046fc:	2200      	movs	r2, #0
 80046fe:	601a      	str	r2, [r3, #0]
 8004700:	605a      	str	r2, [r3, #4]
 8004702:	609a      	str	r2, [r3, #8]
 8004704:	60da      	str	r2, [r3, #12]
 8004706:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4a59      	ldr	r2, [pc, #356]	; (8004874 <HAL_ETH_MspInit+0x184>)
 800470e:	4293      	cmp	r3, r2
 8004710:	f040 80ac 	bne.w	800486c <HAL_ETH_MspInit+0x17c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8004714:	2300      	movs	r3, #0
 8004716:	623b      	str	r3, [r7, #32]
 8004718:	4b57      	ldr	r3, [pc, #348]	; (8004878 <HAL_ETH_MspInit+0x188>)
 800471a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800471c:	4a56      	ldr	r2, [pc, #344]	; (8004878 <HAL_ETH_MspInit+0x188>)
 800471e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004722:	6313      	str	r3, [r2, #48]	; 0x30
 8004724:	4b54      	ldr	r3, [pc, #336]	; (8004878 <HAL_ETH_MspInit+0x188>)
 8004726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004728:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800472c:	623b      	str	r3, [r7, #32]
 800472e:	6a3b      	ldr	r3, [r7, #32]
 8004730:	2300      	movs	r3, #0
 8004732:	61fb      	str	r3, [r7, #28]
 8004734:	4b50      	ldr	r3, [pc, #320]	; (8004878 <HAL_ETH_MspInit+0x188>)
 8004736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004738:	4a4f      	ldr	r2, [pc, #316]	; (8004878 <HAL_ETH_MspInit+0x188>)
 800473a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800473e:	6313      	str	r3, [r2, #48]	; 0x30
 8004740:	4b4d      	ldr	r3, [pc, #308]	; (8004878 <HAL_ETH_MspInit+0x188>)
 8004742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004744:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004748:	61fb      	str	r3, [r7, #28]
 800474a:	69fb      	ldr	r3, [r7, #28]
 800474c:	2300      	movs	r3, #0
 800474e:	61bb      	str	r3, [r7, #24]
 8004750:	4b49      	ldr	r3, [pc, #292]	; (8004878 <HAL_ETH_MspInit+0x188>)
 8004752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004754:	4a48      	ldr	r2, [pc, #288]	; (8004878 <HAL_ETH_MspInit+0x188>)
 8004756:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800475a:	6313      	str	r3, [r2, #48]	; 0x30
 800475c:	4b46      	ldr	r3, [pc, #280]	; (8004878 <HAL_ETH_MspInit+0x188>)
 800475e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004760:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004764:	61bb      	str	r3, [r7, #24]
 8004766:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004768:	2300      	movs	r3, #0
 800476a:	617b      	str	r3, [r7, #20]
 800476c:	4b42      	ldr	r3, [pc, #264]	; (8004878 <HAL_ETH_MspInit+0x188>)
 800476e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004770:	4a41      	ldr	r2, [pc, #260]	; (8004878 <HAL_ETH_MspInit+0x188>)
 8004772:	f043 0304 	orr.w	r3, r3, #4
 8004776:	6313      	str	r3, [r2, #48]	; 0x30
 8004778:	4b3f      	ldr	r3, [pc, #252]	; (8004878 <HAL_ETH_MspInit+0x188>)
 800477a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800477c:	f003 0304 	and.w	r3, r3, #4
 8004780:	617b      	str	r3, [r7, #20]
 8004782:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004784:	2300      	movs	r3, #0
 8004786:	613b      	str	r3, [r7, #16]
 8004788:	4b3b      	ldr	r3, [pc, #236]	; (8004878 <HAL_ETH_MspInit+0x188>)
 800478a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800478c:	4a3a      	ldr	r2, [pc, #232]	; (8004878 <HAL_ETH_MspInit+0x188>)
 800478e:	f043 0301 	orr.w	r3, r3, #1
 8004792:	6313      	str	r3, [r2, #48]	; 0x30
 8004794:	4b38      	ldr	r3, [pc, #224]	; (8004878 <HAL_ETH_MspInit+0x188>)
 8004796:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004798:	f003 0301 	and.w	r3, r3, #1
 800479c:	613b      	str	r3, [r7, #16]
 800479e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80047a0:	2300      	movs	r3, #0
 80047a2:	60fb      	str	r3, [r7, #12]
 80047a4:	4b34      	ldr	r3, [pc, #208]	; (8004878 <HAL_ETH_MspInit+0x188>)
 80047a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047a8:	4a33      	ldr	r2, [pc, #204]	; (8004878 <HAL_ETH_MspInit+0x188>)
 80047aa:	f043 0302 	orr.w	r3, r3, #2
 80047ae:	6313      	str	r3, [r2, #48]	; 0x30
 80047b0:	4b31      	ldr	r3, [pc, #196]	; (8004878 <HAL_ETH_MspInit+0x188>)
 80047b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047b4:	f003 0302 	and.w	r3, r3, #2
 80047b8:	60fb      	str	r3, [r7, #12]
 80047ba:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80047bc:	2300      	movs	r3, #0
 80047be:	60bb      	str	r3, [r7, #8]
 80047c0:	4b2d      	ldr	r3, [pc, #180]	; (8004878 <HAL_ETH_MspInit+0x188>)
 80047c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047c4:	4a2c      	ldr	r2, [pc, #176]	; (8004878 <HAL_ETH_MspInit+0x188>)
 80047c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80047ca:	6313      	str	r3, [r2, #48]	; 0x30
 80047cc:	4b2a      	ldr	r3, [pc, #168]	; (8004878 <HAL_ETH_MspInit+0x188>)
 80047ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047d4:	60bb      	str	r3, [r7, #8]
 80047d6:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80047d8:	2332      	movs	r3, #50	; 0x32
 80047da:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047dc:	2302      	movs	r3, #2
 80047de:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047e0:	2300      	movs	r3, #0
 80047e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80047e4:	2303      	movs	r3, #3
 80047e6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80047e8:	230b      	movs	r3, #11
 80047ea:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80047ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80047f0:	4619      	mov	r1, r3
 80047f2:	4822      	ldr	r0, [pc, #136]	; (800487c <HAL_ETH_MspInit+0x18c>)
 80047f4:	f7fe f87e 	bl	80028f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80047f8:	2386      	movs	r3, #134	; 0x86
 80047fa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047fc:	2302      	movs	r3, #2
 80047fe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004800:	2300      	movs	r3, #0
 8004802:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004804:	2303      	movs	r3, #3
 8004806:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004808:	230b      	movs	r3, #11
 800480a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800480c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004810:	4619      	mov	r1, r3
 8004812:	481b      	ldr	r0, [pc, #108]	; (8004880 <HAL_ETH_MspInit+0x190>)
 8004814:	f7fe f86e 	bl	80028f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8004818:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800481c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800481e:	2302      	movs	r3, #2
 8004820:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004822:	2300      	movs	r3, #0
 8004824:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004826:	2303      	movs	r3, #3
 8004828:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800482a:	230b      	movs	r3, #11
 800482c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800482e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004832:	4619      	mov	r1, r3
 8004834:	4813      	ldr	r0, [pc, #76]	; (8004884 <HAL_ETH_MspInit+0x194>)
 8004836:	f7fe f85d 	bl	80028f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800483a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800483e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004840:	2302      	movs	r3, #2
 8004842:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004844:	2300      	movs	r3, #0
 8004846:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004848:	2303      	movs	r3, #3
 800484a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800484c:	230b      	movs	r3, #11
 800484e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004850:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004854:	4619      	mov	r1, r3
 8004856:	480c      	ldr	r0, [pc, #48]	; (8004888 <HAL_ETH_MspInit+0x198>)
 8004858:	f7fe f84c 	bl	80028f4 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 800485c:	2200      	movs	r2, #0
 800485e:	2105      	movs	r1, #5
 8004860:	203d      	movs	r0, #61	; 0x3d
 8004862:	f7fc fd6d 	bl	8001340 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8004866:	203d      	movs	r0, #61	; 0x3d
 8004868:	f7fc fd86 	bl	8001378 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800486c:	bf00      	nop
 800486e:	3738      	adds	r7, #56	; 0x38
 8004870:	46bd      	mov	sp, r7
 8004872:	bd80      	pop	{r7, pc}
 8004874:	40028000 	.word	0x40028000
 8004878:	40023800 	.word	0x40023800
 800487c:	40020800 	.word	0x40020800
 8004880:	40020000 	.word	0x40020000
 8004884:	40020400 	.word	0x40020400
 8004888:	40021800 	.word	0x40021800

0800488c <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8004890:	4802      	ldr	r0, [pc, #8]	; (800489c <ETH_PHY_IO_Init+0x10>)
 8004892:	f7fd fbc7 	bl	8002024 <HAL_ETH_SetMDIOClockRange>

  return 0;
 8004896:	2300      	movs	r3, #0
}
 8004898:	4618      	mov	r0, r3
 800489a:	bd80      	pop	{r7, pc}
 800489c:	20004f18 	.word	0x20004f18

080048a0 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 80048a0:	b480      	push	{r7}
 80048a2:	af00      	add	r7, sp, #0
  return 0;
 80048a4:	2300      	movs	r3, #0
}
 80048a6:	4618      	mov	r0, r3
 80048a8:	46bd      	mov	sp, r7
 80048aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ae:	4770      	bx	lr

080048b0 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b084      	sub	sp, #16
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	60f8      	str	r0, [r7, #12]
 80048b8:	60b9      	str	r1, [r7, #8]
 80048ba:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	68ba      	ldr	r2, [r7, #8]
 80048c0:	68f9      	ldr	r1, [r7, #12]
 80048c2:	4807      	ldr	r0, [pc, #28]	; (80048e0 <ETH_PHY_IO_ReadReg+0x30>)
 80048c4:	f7fd fa16 	bl	8001cf4 <HAL_ETH_ReadPHYRegister>
 80048c8:	4603      	mov	r3, r0
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d002      	beq.n	80048d4 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 80048ce:	f04f 33ff 	mov.w	r3, #4294967295
 80048d2:	e000      	b.n	80048d6 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 80048d4:	2300      	movs	r3, #0
}
 80048d6:	4618      	mov	r0, r3
 80048d8:	3710      	adds	r7, #16
 80048da:	46bd      	mov	sp, r7
 80048dc:	bd80      	pop	{r7, pc}
 80048de:	bf00      	nop
 80048e0:	20004f18 	.word	0x20004f18

080048e4 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b084      	sub	sp, #16
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	60f8      	str	r0, [r7, #12]
 80048ec:	60b9      	str	r1, [r7, #8]
 80048ee:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	68ba      	ldr	r2, [r7, #8]
 80048f4:	68f9      	ldr	r1, [r7, #12]
 80048f6:	4807      	ldr	r0, [pc, #28]	; (8004914 <ETH_PHY_IO_WriteReg+0x30>)
 80048f8:	f7fd fa47 	bl	8001d8a <HAL_ETH_WritePHYRegister>
 80048fc:	4603      	mov	r3, r0
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d002      	beq.n	8004908 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 8004902:	f04f 33ff 	mov.w	r3, #4294967295
 8004906:	e000      	b.n	800490a <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8004908:	2300      	movs	r3, #0
}
 800490a:	4618      	mov	r0, r3
 800490c:	3710      	adds	r7, #16
 800490e:	46bd      	mov	sp, r7
 8004910:	bd80      	pop	{r7, pc}
 8004912:	bf00      	nop
 8004914:	20004f18 	.word	0x20004f18

08004918 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800491c:	f7fc fc28 	bl	8001170 <HAL_GetTick>
 8004920:	4603      	mov	r3, r0
}
 8004922:	4618      	mov	r0, r3
 8004924:	bd80      	pop	{r7, pc}
	...

08004928 <ethernet_link_thread>:
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */

void ethernet_link_thread(void const * argument)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b0a0      	sub	sp, #128	; 0x80
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8004930:	f107 0308 	add.w	r3, r7, #8
 8004934:	2264      	movs	r2, #100	; 0x64
 8004936:	2100      	movs	r1, #0
 8004938:	4618      	mov	r0, r3
 800493a:	f012 fe0e 	bl	801755a <memset>
  int32_t PHYLinkState = 0;
 800493e:	2300      	movs	r3, #0
 8004940:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8004942:	2300      	movs	r3, #0
 8004944:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004946:	2300      	movs	r3, #0
 8004948:	67bb      	str	r3, [r7, #120]	; 0x78
 800494a:	2300      	movs	r3, #0
 800494c:	677b      	str	r3, [r7, #116]	; 0x74

  struct netif *netif = (struct netif *) argument;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	66fb      	str	r3, [r7, #108]	; 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8004952:	483a      	ldr	r0, [pc, #232]	; (8004a3c <ethernet_link_thread+0x114>)
 8004954:	f7fc fb4f 	bl	8000ff6 <LAN8742_GetLinkState>
 8004958:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 800495a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800495c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004960:	089b      	lsrs	r3, r3, #2
 8004962:	f003 0301 	and.w	r3, r3, #1
 8004966:	b2db      	uxtb	r3, r3
 8004968:	2b00      	cmp	r3, #0
 800496a:	d00c      	beq.n	8004986 <ethernet_link_thread+0x5e>
 800496c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800496e:	2b01      	cmp	r3, #1
 8004970:	dc09      	bgt.n	8004986 <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 8004972:	4833      	ldr	r0, [pc, #204]	; (8004a40 <ethernet_link_thread+0x118>)
 8004974:	f7fc fe79 	bl	800166a <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 8004978:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800497a:	f006 fb9d 	bl	800b0b8 <netif_set_down>
    netif_set_link_down(netif);
 800497e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004980:	f006 fc04 	bl	800b18c <netif_set_link_down>
 8004984:	e055      	b.n	8004a32 <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8004986:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004988:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800498c:	f003 0304 	and.w	r3, r3, #4
 8004990:	2b00      	cmp	r3, #0
 8004992:	d14e      	bne.n	8004a32 <ethernet_link_thread+0x10a>
 8004994:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004996:	2b01      	cmp	r3, #1
 8004998:	dd4b      	ble.n	8004a32 <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
 800499a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800499c:	3b02      	subs	r3, #2
 800499e:	2b03      	cmp	r3, #3
 80049a0:	d82a      	bhi.n	80049f8 <ethernet_link_thread+0xd0>
 80049a2:	a201      	add	r2, pc, #4	; (adr r2, 80049a8 <ethernet_link_thread+0x80>)
 80049a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049a8:	080049b9 	.word	0x080049b9
 80049ac:	080049cb 	.word	0x080049cb
 80049b0:	080049db 	.word	0x080049db
 80049b4:	080049eb 	.word	0x080049eb
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 80049b8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80049bc:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 80049be:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80049c2:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80049c4:	2301      	movs	r3, #1
 80049c6:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80049c8:	e017      	b.n	80049fa <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 80049ca:	2300      	movs	r3, #0
 80049cc:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 80049ce:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80049d2:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80049d4:	2301      	movs	r3, #1
 80049d6:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80049d8:	e00f      	b.n	80049fa <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 80049da:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80049de:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 80049e0:	2300      	movs	r3, #0
 80049e2:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80049e4:	2301      	movs	r3, #1
 80049e6:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80049e8:	e007      	b.n	80049fa <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 80049ea:	2300      	movs	r3, #0
 80049ec:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 80049ee:	2300      	movs	r3, #0
 80049f0:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80049f2:	2301      	movs	r3, #1
 80049f4:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80049f6:	e000      	b.n	80049fa <ethernet_link_thread+0xd2>
    default:
      break;
 80049f8:	bf00      	nop
    }

    if(linkchanged)
 80049fa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d018      	beq.n	8004a32 <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8004a00:	f107 0308 	add.w	r3, r7, #8
 8004a04:	4619      	mov	r1, r3
 8004a06:	480e      	ldr	r0, [pc, #56]	; (8004a40 <ethernet_link_thread+0x118>)
 8004a08:	f7fd fa08 	bl	8001e1c <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8004a0c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a0e:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 8004a10:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004a12:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8004a14:	f107 0308 	add.w	r3, r7, #8
 8004a18:	4619      	mov	r1, r3
 8004a1a:	4809      	ldr	r0, [pc, #36]	; (8004a40 <ethernet_link_thread+0x118>)
 8004a1c:	f7fd fae8 	bl	8001ff0 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 8004a20:	4807      	ldr	r0, [pc, #28]	; (8004a40 <ethernet_link_thread+0x118>)
 8004a22:	f7fc fd35 	bl	8001490 <HAL_ETH_Start>
      netif_set_up(netif);
 8004a26:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004a28:	f006 fada 	bl	800afe0 <netif_set_up>
      netif_set_link_up(netif);
 8004a2c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004a2e:	f006 fb75 	bl	800b11c <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 8004a32:	2064      	movs	r0, #100	; 0x64
 8004a34:	f000 f90e 	bl	8004c54 <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8004a38:	e78b      	b.n	8004952 <ethernet_link_thread+0x2a>
 8004a3a:	bf00      	nop
 8004a3c:	20005000 	.word	0x20005000
 8004a40:	20004f18 	.word	0x20004f18

08004a44 <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b086      	sub	sp, #24
 8004a48:	af02      	add	r7, sp, #8
 8004a4a:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8004a4c:	4812      	ldr	r0, [pc, #72]	; (8004a98 <HAL_ETH_RxAllocateCallback+0x54>)
 8004a4e:	f006 f833 	bl	800aab8 <memp_malloc_pool>
 8004a52:	60f8      	str	r0, [r7, #12]
  if (p)
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d014      	beq.n	8004a84 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	f103 0220 	add.w	r2, r3, #32
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	4a0d      	ldr	r2, [pc, #52]	; (8004a9c <HAL_ETH_RxAllocateCallback+0x58>)
 8004a68:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8004a72:	9201      	str	r2, [sp, #4]
 8004a74:	9300      	str	r3, [sp, #0]
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	2241      	movs	r2, #65	; 0x41
 8004a7a:	2100      	movs	r1, #0
 8004a7c:	2000      	movs	r0, #0
 8004a7e:	f006 fda9 	bl	800b5d4 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8004a82:	e005      	b.n	8004a90 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8004a84:	4b06      	ldr	r3, [pc, #24]	; (8004aa0 <HAL_ETH_RxAllocateCallback+0x5c>)
 8004a86:	2201      	movs	r2, #1
 8004a88:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	601a      	str	r2, [r3, #0]
}
 8004a90:	bf00      	nop
 8004a92:	3710      	adds	r7, #16
 8004a94:	46bd      	mov	sp, r7
 8004a96:	bd80      	pop	{r7, pc}
 8004a98:	0801be68 	.word	0x0801be68
 8004a9c:	080046a1 	.word	0x080046a1
 8004aa0:	20004dcc 	.word	0x20004dcc

08004aa4 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	b089      	sub	sp, #36	; 0x24
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	60f8      	str	r0, [r7, #12]
 8004aac:	60b9      	str	r1, [r7, #8]
 8004aae:	607a      	str	r2, [r7, #4]
 8004ab0:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 8004ab6:	68bb      	ldr	r3, [r7, #8]
 8004ab8:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8004aba:	2300      	movs	r3, #0
 8004abc:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	3b20      	subs	r3, #32
 8004ac2:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 8004ac4:	69fb      	ldr	r3, [r7, #28]
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 8004aca:	69fb      	ldr	r3, [r7, #28]
 8004acc:	2200      	movs	r2, #0
 8004ace:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8004ad0:	69fb      	ldr	r3, [r7, #28]
 8004ad2:	887a      	ldrh	r2, [r7, #2]
 8004ad4:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 8004ad6:	69bb      	ldr	r3, [r7, #24]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d103      	bne.n	8004ae6 <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 8004ade:	69bb      	ldr	r3, [r7, #24]
 8004ae0:	69fa      	ldr	r2, [r7, #28]
 8004ae2:	601a      	str	r2, [r3, #0]
 8004ae4:	e003      	b.n	8004aee <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 8004ae6:	697b      	ldr	r3, [r7, #20]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	69fa      	ldr	r2, [r7, #28]
 8004aec:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 8004aee:	697b      	ldr	r3, [r7, #20]
 8004af0:	69fa      	ldr	r2, [r7, #28]
 8004af2:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8004af4:	69bb      	ldr	r3, [r7, #24]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	61fb      	str	r3, [r7, #28]
 8004afa:	e009      	b.n	8004b10 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8004afc:	69fb      	ldr	r3, [r7, #28]
 8004afe:	891a      	ldrh	r2, [r3, #8]
 8004b00:	887b      	ldrh	r3, [r7, #2]
 8004b02:	4413      	add	r3, r2
 8004b04:	b29a      	uxth	r2, r3
 8004b06:	69fb      	ldr	r3, [r7, #28]
 8004b08:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8004b0a:	69fb      	ldr	r3, [r7, #28]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	61fb      	str	r3, [r7, #28]
 8004b10:	69fb      	ldr	r3, [r7, #28]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d1f2      	bne.n	8004afc <HAL_ETH_RxLinkCallback+0x58>
  }

/* USER CODE END HAL ETH RxLinkCallback */
}
 8004b16:	bf00      	nop
 8004b18:	bf00      	nop
 8004b1a:	3724      	adds	r7, #36	; 0x24
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b22:	4770      	bx	lr

08004b24 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b082      	sub	sp, #8
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 8004b2c:	6878      	ldr	r0, [r7, #4]
 8004b2e:	f006 ff0b 	bl	800b948 <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 8004b32:	bf00      	nop
 8004b34:	3708      	adds	r7, #8
 8004b36:	46bd      	mov	sp, r7
 8004b38:	bd80      	pop	{r7, pc}

08004b3a <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004b3a:	b480      	push	{r7}
 8004b3c:	b085      	sub	sp, #20
 8004b3e:	af00      	add	r7, sp, #0
 8004b40:	4603      	mov	r3, r0
 8004b42:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004b44:	2300      	movs	r3, #0
 8004b46:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004b48:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004b4c:	2b84      	cmp	r3, #132	; 0x84
 8004b4e:	d005      	beq.n	8004b5c <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8004b50:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	4413      	add	r3, r2
 8004b58:	3303      	adds	r3, #3
 8004b5a:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
}
 8004b5e:	4618      	mov	r0, r3
 8004b60:	3714      	adds	r7, #20
 8004b62:	46bd      	mov	sp, r7
 8004b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b68:	4770      	bx	lr

08004b6a <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8004b6a:	b480      	push	{r7}
 8004b6c:	b083      	sub	sp, #12
 8004b6e:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004b70:	f3ef 8305 	mrs	r3, IPSR
 8004b74:	607b      	str	r3, [r7, #4]
  return(result);
 8004b76:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	bf14      	ite	ne
 8004b7c:	2301      	movne	r3, #1
 8004b7e:	2300      	moveq	r3, #0
 8004b80:	b2db      	uxtb	r3, r3
}
 8004b82:	4618      	mov	r0, r3
 8004b84:	370c      	adds	r7, #12
 8004b86:	46bd      	mov	sp, r7
 8004b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8c:	4770      	bx	lr

08004b8e <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004b8e:	b580      	push	{r7, lr}
 8004b90:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004b92:	f001 fd3b 	bl	800660c <vTaskStartScheduler>
  
  return osOK;
 8004b96:	2300      	movs	r3, #0
}
 8004b98:	4618      	mov	r0, r3
 8004b9a:	bd80      	pop	{r7, pc}

08004b9c <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8004ba0:	f7ff ffe3 	bl	8004b6a <inHandlerMode>
 8004ba4:	4603      	mov	r3, r0
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d003      	beq.n	8004bb2 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8004baa:	f001 fe53 	bl	8006854 <xTaskGetTickCountFromISR>
 8004bae:	4603      	mov	r3, r0
 8004bb0:	e002      	b.n	8004bb8 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8004bb2:	f001 fe3f 	bl	8006834 <xTaskGetTickCount>
 8004bb6:	4603      	mov	r3, r0
  }
}
 8004bb8:	4618      	mov	r0, r3
 8004bba:	bd80      	pop	{r7, pc}

08004bbc <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004bbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004bbe:	b089      	sub	sp, #36	; 0x24
 8004bc0:	af04      	add	r7, sp, #16
 8004bc2:	6078      	str	r0, [r7, #4]
 8004bc4:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	695b      	ldr	r3, [r3, #20]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d020      	beq.n	8004c10 <osThreadCreate+0x54>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	699b      	ldr	r3, [r3, #24]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d01c      	beq.n	8004c10 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	685c      	ldr	r4, [r3, #4]
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681d      	ldr	r5, [r3, #0]
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	691e      	ldr	r6, [r3, #16]
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004be8:	4618      	mov	r0, r3
 8004bea:	f7ff ffa6 	bl	8004b3a <makeFreeRtosPriority>
 8004bee:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	695b      	ldr	r3, [r3, #20]
 8004bf4:	687a      	ldr	r2, [r7, #4]
 8004bf6:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004bf8:	9202      	str	r2, [sp, #8]
 8004bfa:	9301      	str	r3, [sp, #4]
 8004bfc:	9100      	str	r1, [sp, #0]
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	4632      	mov	r2, r6
 8004c02:	4629      	mov	r1, r5
 8004c04:	4620      	mov	r0, r4
 8004c06:	f001 fb23 	bl	8006250 <xTaskCreateStatic>
 8004c0a:	4603      	mov	r3, r0
 8004c0c:	60fb      	str	r3, [r7, #12]
 8004c0e:	e01c      	b.n	8004c4a <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	685c      	ldr	r4, [r3, #4]
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004c1c:	b29e      	uxth	r6, r3
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004c24:	4618      	mov	r0, r3
 8004c26:	f7ff ff88 	bl	8004b3a <makeFreeRtosPriority>
 8004c2a:	4602      	mov	r2, r0
 8004c2c:	f107 030c 	add.w	r3, r7, #12
 8004c30:	9301      	str	r3, [sp, #4]
 8004c32:	9200      	str	r2, [sp, #0]
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	4632      	mov	r2, r6
 8004c38:	4629      	mov	r1, r5
 8004c3a:	4620      	mov	r0, r4
 8004c3c:	f001 fb65 	bl	800630a <xTaskCreate>
 8004c40:	4603      	mov	r3, r0
 8004c42:	2b01      	cmp	r3, #1
 8004c44:	d001      	beq.n	8004c4a <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8004c46:	2300      	movs	r3, #0
 8004c48:	e000      	b.n	8004c4c <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
}
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	3714      	adds	r7, #20
 8004c50:	46bd      	mov	sp, r7
 8004c52:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004c54 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b084      	sub	sp, #16
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d001      	beq.n	8004c6a <osDelay+0x16>
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	e000      	b.n	8004c6c <osDelay+0x18>
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	f001 fc99 	bl	80065a4 <vTaskDelay>
  
  return osOK;
 8004c72:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8004c74:	4618      	mov	r0, r3
 8004c76:	3710      	adds	r7, #16
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	bd80      	pop	{r7, pc}

08004c7c <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b082      	sub	sp, #8
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	685b      	ldr	r3, [r3, #4]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d007      	beq.n	8004c9c <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	685b      	ldr	r3, [r3, #4]
 8004c90:	4619      	mov	r1, r3
 8004c92:	2001      	movs	r0, #1
 8004c94:	f000 fc7d 	bl	8005592 <xQueueCreateMutexStatic>
 8004c98:	4603      	mov	r3, r0
 8004c9a:	e003      	b.n	8004ca4 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8004c9c:	2001      	movs	r0, #1
 8004c9e:	f000 fc60 	bl	8005562 <xQueueCreateMutex>
 8004ca2:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	3708      	adds	r7, #8
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	bd80      	pop	{r7, pc}

08004cac <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b084      	sub	sp, #16
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
 8004cb4:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d101      	bne.n	8004cc4 <osMutexWait+0x18>
    return osErrorParameter;
 8004cc0:	2380      	movs	r3, #128	; 0x80
 8004cc2:	e03a      	b.n	8004d3a <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cce:	d103      	bne.n	8004cd8 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8004cd0:	f04f 33ff 	mov.w	r3, #4294967295
 8004cd4:	60fb      	str	r3, [r7, #12]
 8004cd6:	e009      	b.n	8004cec <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d006      	beq.n	8004cec <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d101      	bne.n	8004cec <osMutexWait+0x40>
      ticks = 1;
 8004ce8:	2301      	movs	r3, #1
 8004cea:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8004cec:	f7ff ff3d 	bl	8004b6a <inHandlerMode>
 8004cf0:	4603      	mov	r3, r0
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d017      	beq.n	8004d26 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8004cf6:	f107 0308 	add.w	r3, r7, #8
 8004cfa:	461a      	mov	r2, r3
 8004cfc:	2100      	movs	r1, #0
 8004cfe:	6878      	ldr	r0, [r7, #4]
 8004d00:	f001 f874 	bl	8005dec <xQueueReceiveFromISR>
 8004d04:	4603      	mov	r3, r0
 8004d06:	2b01      	cmp	r3, #1
 8004d08:	d001      	beq.n	8004d0e <osMutexWait+0x62>
      return osErrorOS;
 8004d0a:	23ff      	movs	r3, #255	; 0xff
 8004d0c:	e015      	b.n	8004d3a <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8004d0e:	68bb      	ldr	r3, [r7, #8]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d011      	beq.n	8004d38 <osMutexWait+0x8c>
 8004d14:	4b0b      	ldr	r3, [pc, #44]	; (8004d44 <osMutexWait+0x98>)
 8004d16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d1a:	601a      	str	r2, [r3, #0]
 8004d1c:	f3bf 8f4f 	dsb	sy
 8004d20:	f3bf 8f6f 	isb	sy
 8004d24:	e008      	b.n	8004d38 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8004d26:	68f9      	ldr	r1, [r7, #12]
 8004d28:	6878      	ldr	r0, [r7, #4]
 8004d2a:	f000 ff53 	bl	8005bd4 <xQueueSemaphoreTake>
 8004d2e:	4603      	mov	r3, r0
 8004d30:	2b01      	cmp	r3, #1
 8004d32:	d001      	beq.n	8004d38 <osMutexWait+0x8c>
    return osErrorOS;
 8004d34:	23ff      	movs	r3, #255	; 0xff
 8004d36:	e000      	b.n	8004d3a <osMutexWait+0x8e>
  }
  
  return osOK;
 8004d38:	2300      	movs	r3, #0
}
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	3710      	adds	r7, #16
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	bd80      	pop	{r7, pc}
 8004d42:	bf00      	nop
 8004d44:	e000ed04 	.word	0xe000ed04

08004d48 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b084      	sub	sp, #16
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8004d50:	2300      	movs	r3, #0
 8004d52:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8004d54:	2300      	movs	r3, #0
 8004d56:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8004d58:	f7ff ff07 	bl	8004b6a <inHandlerMode>
 8004d5c:	4603      	mov	r3, r0
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d016      	beq.n	8004d90 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8004d62:	f107 0308 	add.w	r3, r7, #8
 8004d66:	4619      	mov	r1, r3
 8004d68:	6878      	ldr	r0, [r7, #4]
 8004d6a:	f000 fdc6 	bl	80058fa <xQueueGiveFromISR>
 8004d6e:	4603      	mov	r3, r0
 8004d70:	2b01      	cmp	r3, #1
 8004d72:	d001      	beq.n	8004d78 <osMutexRelease+0x30>
      return osErrorOS;
 8004d74:	23ff      	movs	r3, #255	; 0xff
 8004d76:	e017      	b.n	8004da8 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8004d78:	68bb      	ldr	r3, [r7, #8]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d013      	beq.n	8004da6 <osMutexRelease+0x5e>
 8004d7e:	4b0c      	ldr	r3, [pc, #48]	; (8004db0 <osMutexRelease+0x68>)
 8004d80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d84:	601a      	str	r2, [r3, #0]
 8004d86:	f3bf 8f4f 	dsb	sy
 8004d8a:	f3bf 8f6f 	isb	sy
 8004d8e:	e00a      	b.n	8004da6 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8004d90:	2300      	movs	r3, #0
 8004d92:	2200      	movs	r2, #0
 8004d94:	2100      	movs	r1, #0
 8004d96:	6878      	ldr	r0, [r7, #4]
 8004d98:	f000 fc16 	bl	80055c8 <xQueueGenericSend>
 8004d9c:	4603      	mov	r3, r0
 8004d9e:	2b01      	cmp	r3, #1
 8004da0:	d001      	beq.n	8004da6 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8004da2:	23ff      	movs	r3, #255	; 0xff
 8004da4:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8004da6:	68fb      	ldr	r3, [r7, #12]
}
 8004da8:	4618      	mov	r0, r3
 8004daa:	3710      	adds	r7, #16
 8004dac:	46bd      	mov	sp, r7
 8004dae:	bd80      	pop	{r7, pc}
 8004db0:	e000ed04 	.word	0xe000ed04

08004db4 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b086      	sub	sp, #24
 8004db8:	af02      	add	r7, sp, #8
 8004dba:	6078      	str	r0, [r7, #4]
 8004dbc:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	685b      	ldr	r3, [r3, #4]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d00f      	beq.n	8004de6 <osSemaphoreCreate+0x32>
    if (count == 1) {
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	2b01      	cmp	r3, #1
 8004dca:	d10a      	bne.n	8004de2 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	685b      	ldr	r3, [r3, #4]
 8004dd0:	2203      	movs	r2, #3
 8004dd2:	9200      	str	r2, [sp, #0]
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	2100      	movs	r1, #0
 8004dd8:	2001      	movs	r0, #1
 8004dda:	f000 fad7 	bl	800538c <xQueueGenericCreateStatic>
 8004dde:	4603      	mov	r3, r0
 8004de0:	e016      	b.n	8004e10 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8004de2:	2300      	movs	r3, #0
 8004de4:	e014      	b.n	8004e10 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	2b01      	cmp	r3, #1
 8004dea:	d110      	bne.n	8004e0e <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8004dec:	2203      	movs	r2, #3
 8004dee:	2100      	movs	r1, #0
 8004df0:	2001      	movs	r0, #1
 8004df2:	f000 fb43 	bl	800547c <xQueueGenericCreate>
 8004df6:	60f8      	str	r0, [r7, #12]
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d005      	beq.n	8004e0a <osSemaphoreCreate+0x56>
 8004dfe:	2300      	movs	r3, #0
 8004e00:	2200      	movs	r2, #0
 8004e02:	2100      	movs	r1, #0
 8004e04:	68f8      	ldr	r0, [r7, #12]
 8004e06:	f000 fbdf 	bl	80055c8 <xQueueGenericSend>
      return sema;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	e000      	b.n	8004e10 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8004e0e:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8004e10:	4618      	mov	r0, r3
 8004e12:	3710      	adds	r7, #16
 8004e14:	46bd      	mov	sp, r7
 8004e16:	bd80      	pop	{r7, pc}

08004e18 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b084      	sub	sp, #16
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
 8004e20:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8004e22:	2300      	movs	r3, #0
 8004e24:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d101      	bne.n	8004e30 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8004e2c:	2380      	movs	r3, #128	; 0x80
 8004e2e:	e03a      	b.n	8004ea6 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8004e30:	2300      	movs	r3, #0
 8004e32:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e3a:	d103      	bne.n	8004e44 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8004e3c:	f04f 33ff 	mov.w	r3, #4294967295
 8004e40:	60fb      	str	r3, [r7, #12]
 8004e42:	e009      	b.n	8004e58 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d006      	beq.n	8004e58 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d101      	bne.n	8004e58 <osSemaphoreWait+0x40>
      ticks = 1;
 8004e54:	2301      	movs	r3, #1
 8004e56:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8004e58:	f7ff fe87 	bl	8004b6a <inHandlerMode>
 8004e5c:	4603      	mov	r3, r0
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d017      	beq.n	8004e92 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8004e62:	f107 0308 	add.w	r3, r7, #8
 8004e66:	461a      	mov	r2, r3
 8004e68:	2100      	movs	r1, #0
 8004e6a:	6878      	ldr	r0, [r7, #4]
 8004e6c:	f000 ffbe 	bl	8005dec <xQueueReceiveFromISR>
 8004e70:	4603      	mov	r3, r0
 8004e72:	2b01      	cmp	r3, #1
 8004e74:	d001      	beq.n	8004e7a <osSemaphoreWait+0x62>
      return osErrorOS;
 8004e76:	23ff      	movs	r3, #255	; 0xff
 8004e78:	e015      	b.n	8004ea6 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8004e7a:	68bb      	ldr	r3, [r7, #8]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d011      	beq.n	8004ea4 <osSemaphoreWait+0x8c>
 8004e80:	4b0b      	ldr	r3, [pc, #44]	; (8004eb0 <osSemaphoreWait+0x98>)
 8004e82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e86:	601a      	str	r2, [r3, #0]
 8004e88:	f3bf 8f4f 	dsb	sy
 8004e8c:	f3bf 8f6f 	isb	sy
 8004e90:	e008      	b.n	8004ea4 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8004e92:	68f9      	ldr	r1, [r7, #12]
 8004e94:	6878      	ldr	r0, [r7, #4]
 8004e96:	f000 fe9d 	bl	8005bd4 <xQueueSemaphoreTake>
 8004e9a:	4603      	mov	r3, r0
 8004e9c:	2b01      	cmp	r3, #1
 8004e9e:	d001      	beq.n	8004ea4 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8004ea0:	23ff      	movs	r3, #255	; 0xff
 8004ea2:	e000      	b.n	8004ea6 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8004ea4:	2300      	movs	r3, #0
}
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	3710      	adds	r7, #16
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	bd80      	pop	{r7, pc}
 8004eae:	bf00      	nop
 8004eb0:	e000ed04 	.word	0xe000ed04

08004eb4 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b084      	sub	sp, #16
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8004ec4:	f7ff fe51 	bl	8004b6a <inHandlerMode>
 8004ec8:	4603      	mov	r3, r0
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d016      	beq.n	8004efc <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8004ece:	f107 0308 	add.w	r3, r7, #8
 8004ed2:	4619      	mov	r1, r3
 8004ed4:	6878      	ldr	r0, [r7, #4]
 8004ed6:	f000 fd10 	bl	80058fa <xQueueGiveFromISR>
 8004eda:	4603      	mov	r3, r0
 8004edc:	2b01      	cmp	r3, #1
 8004ede:	d001      	beq.n	8004ee4 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8004ee0:	23ff      	movs	r3, #255	; 0xff
 8004ee2:	e017      	b.n	8004f14 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d013      	beq.n	8004f12 <osSemaphoreRelease+0x5e>
 8004eea:	4b0c      	ldr	r3, [pc, #48]	; (8004f1c <osSemaphoreRelease+0x68>)
 8004eec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ef0:	601a      	str	r2, [r3, #0]
 8004ef2:	f3bf 8f4f 	dsb	sy
 8004ef6:	f3bf 8f6f 	isb	sy
 8004efa:	e00a      	b.n	8004f12 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8004efc:	2300      	movs	r3, #0
 8004efe:	2200      	movs	r2, #0
 8004f00:	2100      	movs	r1, #0
 8004f02:	6878      	ldr	r0, [r7, #4]
 8004f04:	f000 fb60 	bl	80055c8 <xQueueGenericSend>
 8004f08:	4603      	mov	r3, r0
 8004f0a:	2b01      	cmp	r3, #1
 8004f0c:	d001      	beq.n	8004f12 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8004f0e:	23ff      	movs	r3, #255	; 0xff
 8004f10:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8004f12:	68fb      	ldr	r3, [r7, #12]
}
 8004f14:	4618      	mov	r0, r3
 8004f16:	3710      	adds	r7, #16
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	bd80      	pop	{r7, pc}
 8004f1c:	e000ed04 	.word	0xe000ed04

08004f20 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b082      	sub	sp, #8
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8004f28:	f7ff fe1f 	bl	8004b6a <inHandlerMode>
 8004f2c:	4603      	mov	r3, r0
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d001      	beq.n	8004f36 <osSemaphoreDelete+0x16>
    return osErrorISR;
 8004f32:	2382      	movs	r3, #130	; 0x82
 8004f34:	e003      	b.n	8004f3e <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 8004f36:	6878      	ldr	r0, [r7, #4]
 8004f38:	f001 f814 	bl	8005f64 <vQueueDelete>

  return osOK; 
 8004f3c:	2300      	movs	r3, #0
}
 8004f3e:	4618      	mov	r0, r3
 8004f40:	3708      	adds	r7, #8
 8004f42:	46bd      	mov	sp, r7
 8004f44:	bd80      	pop	{r7, pc}

08004f46 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8004f46:	b590      	push	{r4, r7, lr}
 8004f48:	b085      	sub	sp, #20
 8004f4a:	af02      	add	r7, sp, #8
 8004f4c:	6078      	str	r0, [r7, #4]
 8004f4e:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	689b      	ldr	r3, [r3, #8]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d011      	beq.n	8004f7c <osMessageCreate+0x36>
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	68db      	ldr	r3, [r3, #12]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d00d      	beq.n	8004f7c <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6818      	ldr	r0, [r3, #0]
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6859      	ldr	r1, [r3, #4]
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	689a      	ldr	r2, [r3, #8]
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	68db      	ldr	r3, [r3, #12]
 8004f70:	2400      	movs	r4, #0
 8004f72:	9400      	str	r4, [sp, #0]
 8004f74:	f000 fa0a 	bl	800538c <xQueueGenericCreateStatic>
 8004f78:	4603      	mov	r3, r0
 8004f7a:	e008      	b.n	8004f8e <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6818      	ldr	r0, [r3, #0]
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	685b      	ldr	r3, [r3, #4]
 8004f84:	2200      	movs	r2, #0
 8004f86:	4619      	mov	r1, r3
 8004f88:	f000 fa78 	bl	800547c <xQueueGenericCreate>
 8004f8c:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8004f8e:	4618      	mov	r0, r3
 8004f90:	370c      	adds	r7, #12
 8004f92:	46bd      	mov	sp, r7
 8004f94:	bd90      	pop	{r4, r7, pc}
	...

08004f98 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b086      	sub	sp, #24
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	60f8      	str	r0, [r7, #12]
 8004fa0:	60b9      	str	r1, [r7, #8]
 8004fa2:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8004fac:	697b      	ldr	r3, [r7, #20]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d101      	bne.n	8004fb6 <osMessagePut+0x1e>
    ticks = 1;
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8004fb6:	f7ff fdd8 	bl	8004b6a <inHandlerMode>
 8004fba:	4603      	mov	r3, r0
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d018      	beq.n	8004ff2 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8004fc0:	f107 0210 	add.w	r2, r7, #16
 8004fc4:	f107 0108 	add.w	r1, r7, #8
 8004fc8:	2300      	movs	r3, #0
 8004fca:	68f8      	ldr	r0, [r7, #12]
 8004fcc:	f000 fbfa 	bl	80057c4 <xQueueGenericSendFromISR>
 8004fd0:	4603      	mov	r3, r0
 8004fd2:	2b01      	cmp	r3, #1
 8004fd4:	d001      	beq.n	8004fda <osMessagePut+0x42>
      return osErrorOS;
 8004fd6:	23ff      	movs	r3, #255	; 0xff
 8004fd8:	e018      	b.n	800500c <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8004fda:	693b      	ldr	r3, [r7, #16]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d014      	beq.n	800500a <osMessagePut+0x72>
 8004fe0:	4b0c      	ldr	r3, [pc, #48]	; (8005014 <osMessagePut+0x7c>)
 8004fe2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004fe6:	601a      	str	r2, [r3, #0]
 8004fe8:	f3bf 8f4f 	dsb	sy
 8004fec:	f3bf 8f6f 	isb	sy
 8004ff0:	e00b      	b.n	800500a <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8004ff2:	f107 0108 	add.w	r1, r7, #8
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	697a      	ldr	r2, [r7, #20]
 8004ffa:	68f8      	ldr	r0, [r7, #12]
 8004ffc:	f000 fae4 	bl	80055c8 <xQueueGenericSend>
 8005000:	4603      	mov	r3, r0
 8005002:	2b01      	cmp	r3, #1
 8005004:	d001      	beq.n	800500a <osMessagePut+0x72>
      return osErrorOS;
 8005006:	23ff      	movs	r3, #255	; 0xff
 8005008:	e000      	b.n	800500c <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800500a:	2300      	movs	r3, #0
}
 800500c:	4618      	mov	r0, r3
 800500e:	3718      	adds	r7, #24
 8005010:	46bd      	mov	sp, r7
 8005012:	bd80      	pop	{r7, pc}
 8005014:	e000ed04 	.word	0xe000ed04

08005018 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8005018:	b590      	push	{r4, r7, lr}
 800501a:	b08b      	sub	sp, #44	; 0x2c
 800501c:	af00      	add	r7, sp, #0
 800501e:	60f8      	str	r0, [r7, #12]
 8005020:	60b9      	str	r1, [r7, #8]
 8005022:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8005024:	68bb      	ldr	r3, [r7, #8]
 8005026:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8005028:	2300      	movs	r3, #0
 800502a:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800502c:	68bb      	ldr	r3, [r7, #8]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d10a      	bne.n	8005048 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8005032:	2380      	movs	r3, #128	; 0x80
 8005034:	617b      	str	r3, [r7, #20]
    return event;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	461c      	mov	r4, r3
 800503a:	f107 0314 	add.w	r3, r7, #20
 800503e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005042:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005046:	e054      	b.n	80050f2 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8005048:	2300      	movs	r3, #0
 800504a:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800504c:	2300      	movs	r3, #0
 800504e:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005056:	d103      	bne.n	8005060 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8005058:	f04f 33ff 	mov.w	r3, #4294967295
 800505c:	627b      	str	r3, [r7, #36]	; 0x24
 800505e:	e009      	b.n	8005074 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d006      	beq.n	8005074 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800506a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800506c:	2b00      	cmp	r3, #0
 800506e:	d101      	bne.n	8005074 <osMessageGet+0x5c>
      ticks = 1;
 8005070:	2301      	movs	r3, #1
 8005072:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8005074:	f7ff fd79 	bl	8004b6a <inHandlerMode>
 8005078:	4603      	mov	r3, r0
 800507a:	2b00      	cmp	r3, #0
 800507c:	d01c      	beq.n	80050b8 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800507e:	f107 0220 	add.w	r2, r7, #32
 8005082:	f107 0314 	add.w	r3, r7, #20
 8005086:	3304      	adds	r3, #4
 8005088:	4619      	mov	r1, r3
 800508a:	68b8      	ldr	r0, [r7, #8]
 800508c:	f000 feae 	bl	8005dec <xQueueReceiveFromISR>
 8005090:	4603      	mov	r3, r0
 8005092:	2b01      	cmp	r3, #1
 8005094:	d102      	bne.n	800509c <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8005096:	2310      	movs	r3, #16
 8005098:	617b      	str	r3, [r7, #20]
 800509a:	e001      	b.n	80050a0 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800509c:	2300      	movs	r3, #0
 800509e:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 80050a0:	6a3b      	ldr	r3, [r7, #32]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d01d      	beq.n	80050e2 <osMessageGet+0xca>
 80050a6:	4b15      	ldr	r3, [pc, #84]	; (80050fc <osMessageGet+0xe4>)
 80050a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050ac:	601a      	str	r2, [r3, #0]
 80050ae:	f3bf 8f4f 	dsb	sy
 80050b2:	f3bf 8f6f 	isb	sy
 80050b6:	e014      	b.n	80050e2 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 80050b8:	f107 0314 	add.w	r3, r7, #20
 80050bc:	3304      	adds	r3, #4
 80050be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050c0:	4619      	mov	r1, r3
 80050c2:	68b8      	ldr	r0, [r7, #8]
 80050c4:	f000 fca6 	bl	8005a14 <xQueueReceive>
 80050c8:	4603      	mov	r3, r0
 80050ca:	2b01      	cmp	r3, #1
 80050cc:	d102      	bne.n	80050d4 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 80050ce:	2310      	movs	r3, #16
 80050d0:	617b      	str	r3, [r7, #20]
 80050d2:	e006      	b.n	80050e2 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 80050d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d101      	bne.n	80050de <osMessageGet+0xc6>
 80050da:	2300      	movs	r3, #0
 80050dc:	e000      	b.n	80050e0 <osMessageGet+0xc8>
 80050de:	2340      	movs	r3, #64	; 0x40
 80050e0:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	461c      	mov	r4, r3
 80050e6:	f107 0314 	add.w	r3, r7, #20
 80050ea:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80050ee:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80050f2:	68f8      	ldr	r0, [r7, #12]
 80050f4:	372c      	adds	r7, #44	; 0x2c
 80050f6:	46bd      	mov	sp, r7
 80050f8:	bd90      	pop	{r4, r7, pc}
 80050fa:	bf00      	nop
 80050fc:	e000ed04 	.word	0xe000ed04

08005100 <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b082      	sub	sp, #8
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8005108:	f7ff fd2f 	bl	8004b6a <inHandlerMode>
 800510c:	4603      	mov	r3, r0
 800510e:	2b00      	cmp	r3, #0
 8005110:	d004      	beq.n	800511c <osMessageWaiting+0x1c>
    return uxQueueMessagesWaitingFromISR(queue_id);
 8005112:	6878      	ldr	r0, [r7, #4]
 8005114:	f000 ff08 	bl	8005f28 <uxQueueMessagesWaitingFromISR>
 8005118:	4603      	mov	r3, r0
 800511a:	e003      	b.n	8005124 <osMessageWaiting+0x24>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 800511c:	6878      	ldr	r0, [r7, #4]
 800511e:	f000 fee5 	bl	8005eec <uxQueueMessagesWaiting>
 8005122:	4603      	mov	r3, r0
  }
}
 8005124:	4618      	mov	r0, r3
 8005126:	3708      	adds	r7, #8
 8005128:	46bd      	mov	sp, r7
 800512a:	bd80      	pop	{r7, pc}

0800512c <osMessageDelete>:
* @brief Delete a Message Queue
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osMessageDelete (osMessageQId queue_id)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b082      	sub	sp, #8
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8005134:	f7ff fd19 	bl	8004b6a <inHandlerMode>
 8005138:	4603      	mov	r3, r0
 800513a:	2b00      	cmp	r3, #0
 800513c:	d001      	beq.n	8005142 <osMessageDelete+0x16>
    return osErrorISR;
 800513e:	2382      	movs	r3, #130	; 0x82
 8005140:	e003      	b.n	800514a <osMessageDelete+0x1e>
  }

  vQueueDelete(queue_id);
 8005142:	6878      	ldr	r0, [r7, #4]
 8005144:	f000 ff0e 	bl	8005f64 <vQueueDelete>

  return osOK; 
 8005148:	2300      	movs	r3, #0
}
 800514a:	4618      	mov	r0, r3
 800514c:	3708      	adds	r7, #8
 800514e:	46bd      	mov	sp, r7
 8005150:	bd80      	pop	{r7, pc}

08005152 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005152:	b480      	push	{r7}
 8005154:	b083      	sub	sp, #12
 8005156:	af00      	add	r7, sp, #0
 8005158:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	f103 0208 	add.w	r2, r3, #8
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	f04f 32ff 	mov.w	r2, #4294967295
 800516a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	f103 0208 	add.w	r2, r3, #8
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	f103 0208 	add.w	r2, r3, #8
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2200      	movs	r2, #0
 8005184:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005186:	bf00      	nop
 8005188:	370c      	adds	r7, #12
 800518a:	46bd      	mov	sp, r7
 800518c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005190:	4770      	bx	lr

08005192 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005192:	b480      	push	{r7}
 8005194:	b083      	sub	sp, #12
 8005196:	af00      	add	r7, sp, #0
 8005198:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2200      	movs	r2, #0
 800519e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80051a0:	bf00      	nop
 80051a2:	370c      	adds	r7, #12
 80051a4:	46bd      	mov	sp, r7
 80051a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051aa:	4770      	bx	lr

080051ac <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80051ac:	b480      	push	{r7}
 80051ae:	b085      	sub	sp, #20
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
 80051b4:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	685b      	ldr	r3, [r3, #4]
 80051ba:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	68fa      	ldr	r2, [r7, #12]
 80051c0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	689a      	ldr	r2, [r3, #8]
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	689b      	ldr	r3, [r3, #8]
 80051ce:	683a      	ldr	r2, [r7, #0]
 80051d0:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	683a      	ldr	r2, [r7, #0]
 80051d6:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	687a      	ldr	r2, [r7, #4]
 80051dc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	1c5a      	adds	r2, r3, #1
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	601a      	str	r2, [r3, #0]
}
 80051e8:	bf00      	nop
 80051ea:	3714      	adds	r7, #20
 80051ec:	46bd      	mov	sp, r7
 80051ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f2:	4770      	bx	lr

080051f4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80051f4:	b480      	push	{r7}
 80051f6:	b085      	sub	sp, #20
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
 80051fc:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005204:	68bb      	ldr	r3, [r7, #8]
 8005206:	f1b3 3fff 	cmp.w	r3, #4294967295
 800520a:	d103      	bne.n	8005214 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	691b      	ldr	r3, [r3, #16]
 8005210:	60fb      	str	r3, [r7, #12]
 8005212:	e00c      	b.n	800522e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	3308      	adds	r3, #8
 8005218:	60fb      	str	r3, [r7, #12]
 800521a:	e002      	b.n	8005222 <vListInsert+0x2e>
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	685b      	ldr	r3, [r3, #4]
 8005220:	60fb      	str	r3, [r7, #12]
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	685b      	ldr	r3, [r3, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	68ba      	ldr	r2, [r7, #8]
 800522a:	429a      	cmp	r2, r3
 800522c:	d2f6      	bcs.n	800521c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	685a      	ldr	r2, [r3, #4]
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	685b      	ldr	r3, [r3, #4]
 800523a:	683a      	ldr	r2, [r7, #0]
 800523c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	68fa      	ldr	r2, [r7, #12]
 8005242:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	683a      	ldr	r2, [r7, #0]
 8005248:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	687a      	ldr	r2, [r7, #4]
 800524e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	1c5a      	adds	r2, r3, #1
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	601a      	str	r2, [r3, #0]
}
 800525a:	bf00      	nop
 800525c:	3714      	adds	r7, #20
 800525e:	46bd      	mov	sp, r7
 8005260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005264:	4770      	bx	lr

08005266 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005266:	b480      	push	{r7}
 8005268:	b085      	sub	sp, #20
 800526a:	af00      	add	r7, sp, #0
 800526c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	691b      	ldr	r3, [r3, #16]
 8005272:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	685b      	ldr	r3, [r3, #4]
 8005278:	687a      	ldr	r2, [r7, #4]
 800527a:	6892      	ldr	r2, [r2, #8]
 800527c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	689b      	ldr	r3, [r3, #8]
 8005282:	687a      	ldr	r2, [r7, #4]
 8005284:	6852      	ldr	r2, [r2, #4]
 8005286:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	685b      	ldr	r3, [r3, #4]
 800528c:	687a      	ldr	r2, [r7, #4]
 800528e:	429a      	cmp	r2, r3
 8005290:	d103      	bne.n	800529a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	689a      	ldr	r2, [r3, #8]
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2200      	movs	r2, #0
 800529e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	1e5a      	subs	r2, r3, #1
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
}
 80052ae:	4618      	mov	r0, r3
 80052b0:	3714      	adds	r7, #20
 80052b2:	46bd      	mov	sp, r7
 80052b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b8:	4770      	bx	lr
	...

080052bc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b084      	sub	sp, #16
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
 80052c4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d10a      	bne.n	80052e6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80052d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052d4:	f383 8811 	msr	BASEPRI, r3
 80052d8:	f3bf 8f6f 	isb	sy
 80052dc:	f3bf 8f4f 	dsb	sy
 80052e0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80052e2:	bf00      	nop
 80052e4:	e7fe      	b.n	80052e4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80052e6:	f002 f915 	bl	8007514 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681a      	ldr	r2, [r3, #0]
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052f2:	68f9      	ldr	r1, [r7, #12]
 80052f4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80052f6:	fb01 f303 	mul.w	r3, r1, r3
 80052fa:	441a      	add	r2, r3
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	2200      	movs	r2, #0
 8005304:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681a      	ldr	r2, [r3, #0]
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681a      	ldr	r2, [r3, #0]
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005316:	3b01      	subs	r3, #1
 8005318:	68f9      	ldr	r1, [r7, #12]
 800531a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800531c:	fb01 f303 	mul.w	r3, r1, r3
 8005320:	441a      	add	r2, r3
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	22ff      	movs	r2, #255	; 0xff
 800532a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	22ff      	movs	r2, #255	; 0xff
 8005332:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d114      	bne.n	8005366 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	691b      	ldr	r3, [r3, #16]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d01a      	beq.n	800537a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	3310      	adds	r3, #16
 8005348:	4618      	mov	r0, r3
 800534a:	f001 fbd3 	bl	8006af4 <xTaskRemoveFromEventList>
 800534e:	4603      	mov	r3, r0
 8005350:	2b00      	cmp	r3, #0
 8005352:	d012      	beq.n	800537a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005354:	4b0c      	ldr	r3, [pc, #48]	; (8005388 <xQueueGenericReset+0xcc>)
 8005356:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800535a:	601a      	str	r2, [r3, #0]
 800535c:	f3bf 8f4f 	dsb	sy
 8005360:	f3bf 8f6f 	isb	sy
 8005364:	e009      	b.n	800537a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	3310      	adds	r3, #16
 800536a:	4618      	mov	r0, r3
 800536c:	f7ff fef1 	bl	8005152 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	3324      	adds	r3, #36	; 0x24
 8005374:	4618      	mov	r0, r3
 8005376:	f7ff feec 	bl	8005152 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800537a:	f002 f8fb 	bl	8007574 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800537e:	2301      	movs	r3, #1
}
 8005380:	4618      	mov	r0, r3
 8005382:	3710      	adds	r7, #16
 8005384:	46bd      	mov	sp, r7
 8005386:	bd80      	pop	{r7, pc}
 8005388:	e000ed04 	.word	0xe000ed04

0800538c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800538c:	b580      	push	{r7, lr}
 800538e:	b08e      	sub	sp, #56	; 0x38
 8005390:	af02      	add	r7, sp, #8
 8005392:	60f8      	str	r0, [r7, #12]
 8005394:	60b9      	str	r1, [r7, #8]
 8005396:	607a      	str	r2, [r7, #4]
 8005398:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d10a      	bne.n	80053b6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80053a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053a4:	f383 8811 	msr	BASEPRI, r3
 80053a8:	f3bf 8f6f 	isb	sy
 80053ac:	f3bf 8f4f 	dsb	sy
 80053b0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80053b2:	bf00      	nop
 80053b4:	e7fe      	b.n	80053b4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d10a      	bne.n	80053d2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80053bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053c0:	f383 8811 	msr	BASEPRI, r3
 80053c4:	f3bf 8f6f 	isb	sy
 80053c8:	f3bf 8f4f 	dsb	sy
 80053cc:	627b      	str	r3, [r7, #36]	; 0x24
}
 80053ce:	bf00      	nop
 80053d0:	e7fe      	b.n	80053d0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d002      	beq.n	80053de <xQueueGenericCreateStatic+0x52>
 80053d8:	68bb      	ldr	r3, [r7, #8]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d001      	beq.n	80053e2 <xQueueGenericCreateStatic+0x56>
 80053de:	2301      	movs	r3, #1
 80053e0:	e000      	b.n	80053e4 <xQueueGenericCreateStatic+0x58>
 80053e2:	2300      	movs	r3, #0
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d10a      	bne.n	80053fe <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80053e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053ec:	f383 8811 	msr	BASEPRI, r3
 80053f0:	f3bf 8f6f 	isb	sy
 80053f4:	f3bf 8f4f 	dsb	sy
 80053f8:	623b      	str	r3, [r7, #32]
}
 80053fa:	bf00      	nop
 80053fc:	e7fe      	b.n	80053fc <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d102      	bne.n	800540a <xQueueGenericCreateStatic+0x7e>
 8005404:	68bb      	ldr	r3, [r7, #8]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d101      	bne.n	800540e <xQueueGenericCreateStatic+0x82>
 800540a:	2301      	movs	r3, #1
 800540c:	e000      	b.n	8005410 <xQueueGenericCreateStatic+0x84>
 800540e:	2300      	movs	r3, #0
 8005410:	2b00      	cmp	r3, #0
 8005412:	d10a      	bne.n	800542a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005414:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005418:	f383 8811 	msr	BASEPRI, r3
 800541c:	f3bf 8f6f 	isb	sy
 8005420:	f3bf 8f4f 	dsb	sy
 8005424:	61fb      	str	r3, [r7, #28]
}
 8005426:	bf00      	nop
 8005428:	e7fe      	b.n	8005428 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800542a:	2348      	movs	r3, #72	; 0x48
 800542c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800542e:	697b      	ldr	r3, [r7, #20]
 8005430:	2b48      	cmp	r3, #72	; 0x48
 8005432:	d00a      	beq.n	800544a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005434:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005438:	f383 8811 	msr	BASEPRI, r3
 800543c:	f3bf 8f6f 	isb	sy
 8005440:	f3bf 8f4f 	dsb	sy
 8005444:	61bb      	str	r3, [r7, #24]
}
 8005446:	bf00      	nop
 8005448:	e7fe      	b.n	8005448 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800544a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005452:	2b00      	cmp	r3, #0
 8005454:	d00d      	beq.n	8005472 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005458:	2201      	movs	r2, #1
 800545a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800545e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005464:	9300      	str	r3, [sp, #0]
 8005466:	4613      	mov	r3, r2
 8005468:	687a      	ldr	r2, [r7, #4]
 800546a:	68b9      	ldr	r1, [r7, #8]
 800546c:	68f8      	ldr	r0, [r7, #12]
 800546e:	f000 f83f 	bl	80054f0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005474:	4618      	mov	r0, r3
 8005476:	3730      	adds	r7, #48	; 0x30
 8005478:	46bd      	mov	sp, r7
 800547a:	bd80      	pop	{r7, pc}

0800547c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800547c:	b580      	push	{r7, lr}
 800547e:	b08a      	sub	sp, #40	; 0x28
 8005480:	af02      	add	r7, sp, #8
 8005482:	60f8      	str	r0, [r7, #12]
 8005484:	60b9      	str	r1, [r7, #8]
 8005486:	4613      	mov	r3, r2
 8005488:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d10a      	bne.n	80054a6 <xQueueGenericCreate+0x2a>
	__asm volatile
 8005490:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005494:	f383 8811 	msr	BASEPRI, r3
 8005498:	f3bf 8f6f 	isb	sy
 800549c:	f3bf 8f4f 	dsb	sy
 80054a0:	613b      	str	r3, [r7, #16]
}
 80054a2:	bf00      	nop
 80054a4:	e7fe      	b.n	80054a4 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	68ba      	ldr	r2, [r7, #8]
 80054aa:	fb02 f303 	mul.w	r3, r2, r3
 80054ae:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80054b0:	69fb      	ldr	r3, [r7, #28]
 80054b2:	3348      	adds	r3, #72	; 0x48
 80054b4:	4618      	mov	r0, r3
 80054b6:	f002 f94f 	bl	8007758 <pvPortMalloc>
 80054ba:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80054bc:	69bb      	ldr	r3, [r7, #24]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d011      	beq.n	80054e6 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80054c2:	69bb      	ldr	r3, [r7, #24]
 80054c4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80054c6:	697b      	ldr	r3, [r7, #20]
 80054c8:	3348      	adds	r3, #72	; 0x48
 80054ca:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80054cc:	69bb      	ldr	r3, [r7, #24]
 80054ce:	2200      	movs	r2, #0
 80054d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80054d4:	79fa      	ldrb	r2, [r7, #7]
 80054d6:	69bb      	ldr	r3, [r7, #24]
 80054d8:	9300      	str	r3, [sp, #0]
 80054da:	4613      	mov	r3, r2
 80054dc:	697a      	ldr	r2, [r7, #20]
 80054de:	68b9      	ldr	r1, [r7, #8]
 80054e0:	68f8      	ldr	r0, [r7, #12]
 80054e2:	f000 f805 	bl	80054f0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80054e6:	69bb      	ldr	r3, [r7, #24]
	}
 80054e8:	4618      	mov	r0, r3
 80054ea:	3720      	adds	r7, #32
 80054ec:	46bd      	mov	sp, r7
 80054ee:	bd80      	pop	{r7, pc}

080054f0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b084      	sub	sp, #16
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	60f8      	str	r0, [r7, #12]
 80054f8:	60b9      	str	r1, [r7, #8]
 80054fa:	607a      	str	r2, [r7, #4]
 80054fc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80054fe:	68bb      	ldr	r3, [r7, #8]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d103      	bne.n	800550c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005504:	69bb      	ldr	r3, [r7, #24]
 8005506:	69ba      	ldr	r2, [r7, #24]
 8005508:	601a      	str	r2, [r3, #0]
 800550a:	e002      	b.n	8005512 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800550c:	69bb      	ldr	r3, [r7, #24]
 800550e:	687a      	ldr	r2, [r7, #4]
 8005510:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005512:	69bb      	ldr	r3, [r7, #24]
 8005514:	68fa      	ldr	r2, [r7, #12]
 8005516:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005518:	69bb      	ldr	r3, [r7, #24]
 800551a:	68ba      	ldr	r2, [r7, #8]
 800551c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800551e:	2101      	movs	r1, #1
 8005520:	69b8      	ldr	r0, [r7, #24]
 8005522:	f7ff fecb 	bl	80052bc <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005526:	bf00      	nop
 8005528:	3710      	adds	r7, #16
 800552a:	46bd      	mov	sp, r7
 800552c:	bd80      	pop	{r7, pc}

0800552e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800552e:	b580      	push	{r7, lr}
 8005530:	b082      	sub	sp, #8
 8005532:	af00      	add	r7, sp, #0
 8005534:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d00e      	beq.n	800555a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2200      	movs	r2, #0
 8005540:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2200      	movs	r2, #0
 8005546:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2200      	movs	r2, #0
 800554c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800554e:	2300      	movs	r3, #0
 8005550:	2200      	movs	r2, #0
 8005552:	2100      	movs	r1, #0
 8005554:	6878      	ldr	r0, [r7, #4]
 8005556:	f000 f837 	bl	80055c8 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800555a:	bf00      	nop
 800555c:	3708      	adds	r7, #8
 800555e:	46bd      	mov	sp, r7
 8005560:	bd80      	pop	{r7, pc}

08005562 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8005562:	b580      	push	{r7, lr}
 8005564:	b086      	sub	sp, #24
 8005566:	af00      	add	r7, sp, #0
 8005568:	4603      	mov	r3, r0
 800556a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800556c:	2301      	movs	r3, #1
 800556e:	617b      	str	r3, [r7, #20]
 8005570:	2300      	movs	r3, #0
 8005572:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8005574:	79fb      	ldrb	r3, [r7, #7]
 8005576:	461a      	mov	r2, r3
 8005578:	6939      	ldr	r1, [r7, #16]
 800557a:	6978      	ldr	r0, [r7, #20]
 800557c:	f7ff ff7e 	bl	800547c <xQueueGenericCreate>
 8005580:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005582:	68f8      	ldr	r0, [r7, #12]
 8005584:	f7ff ffd3 	bl	800552e <prvInitialiseMutex>

		return xNewQueue;
 8005588:	68fb      	ldr	r3, [r7, #12]
	}
 800558a:	4618      	mov	r0, r3
 800558c:	3718      	adds	r7, #24
 800558e:	46bd      	mov	sp, r7
 8005590:	bd80      	pop	{r7, pc}

08005592 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8005592:	b580      	push	{r7, lr}
 8005594:	b088      	sub	sp, #32
 8005596:	af02      	add	r7, sp, #8
 8005598:	4603      	mov	r3, r0
 800559a:	6039      	str	r1, [r7, #0]
 800559c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800559e:	2301      	movs	r3, #1
 80055a0:	617b      	str	r3, [r7, #20]
 80055a2:	2300      	movs	r3, #0
 80055a4:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80055a6:	79fb      	ldrb	r3, [r7, #7]
 80055a8:	9300      	str	r3, [sp, #0]
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	2200      	movs	r2, #0
 80055ae:	6939      	ldr	r1, [r7, #16]
 80055b0:	6978      	ldr	r0, [r7, #20]
 80055b2:	f7ff feeb 	bl	800538c <xQueueGenericCreateStatic>
 80055b6:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80055b8:	68f8      	ldr	r0, [r7, #12]
 80055ba:	f7ff ffb8 	bl	800552e <prvInitialiseMutex>

		return xNewQueue;
 80055be:	68fb      	ldr	r3, [r7, #12]
	}
 80055c0:	4618      	mov	r0, r3
 80055c2:	3718      	adds	r7, #24
 80055c4:	46bd      	mov	sp, r7
 80055c6:	bd80      	pop	{r7, pc}

080055c8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b08e      	sub	sp, #56	; 0x38
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	60f8      	str	r0, [r7, #12]
 80055d0:	60b9      	str	r1, [r7, #8]
 80055d2:	607a      	str	r2, [r7, #4]
 80055d4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80055d6:	2300      	movs	r3, #0
 80055d8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80055de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d10a      	bne.n	80055fa <xQueueGenericSend+0x32>
	__asm volatile
 80055e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055e8:	f383 8811 	msr	BASEPRI, r3
 80055ec:	f3bf 8f6f 	isb	sy
 80055f0:	f3bf 8f4f 	dsb	sy
 80055f4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80055f6:	bf00      	nop
 80055f8:	e7fe      	b.n	80055f8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80055fa:	68bb      	ldr	r3, [r7, #8]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d103      	bne.n	8005608 <xQueueGenericSend+0x40>
 8005600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005604:	2b00      	cmp	r3, #0
 8005606:	d101      	bne.n	800560c <xQueueGenericSend+0x44>
 8005608:	2301      	movs	r3, #1
 800560a:	e000      	b.n	800560e <xQueueGenericSend+0x46>
 800560c:	2300      	movs	r3, #0
 800560e:	2b00      	cmp	r3, #0
 8005610:	d10a      	bne.n	8005628 <xQueueGenericSend+0x60>
	__asm volatile
 8005612:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005616:	f383 8811 	msr	BASEPRI, r3
 800561a:	f3bf 8f6f 	isb	sy
 800561e:	f3bf 8f4f 	dsb	sy
 8005622:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005624:	bf00      	nop
 8005626:	e7fe      	b.n	8005626 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	2b02      	cmp	r3, #2
 800562c:	d103      	bne.n	8005636 <xQueueGenericSend+0x6e>
 800562e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005630:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005632:	2b01      	cmp	r3, #1
 8005634:	d101      	bne.n	800563a <xQueueGenericSend+0x72>
 8005636:	2301      	movs	r3, #1
 8005638:	e000      	b.n	800563c <xQueueGenericSend+0x74>
 800563a:	2300      	movs	r3, #0
 800563c:	2b00      	cmp	r3, #0
 800563e:	d10a      	bne.n	8005656 <xQueueGenericSend+0x8e>
	__asm volatile
 8005640:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005644:	f383 8811 	msr	BASEPRI, r3
 8005648:	f3bf 8f6f 	isb	sy
 800564c:	f3bf 8f4f 	dsb	sy
 8005650:	623b      	str	r3, [r7, #32]
}
 8005652:	bf00      	nop
 8005654:	e7fe      	b.n	8005654 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005656:	f001 fc0d 	bl	8006e74 <xTaskGetSchedulerState>
 800565a:	4603      	mov	r3, r0
 800565c:	2b00      	cmp	r3, #0
 800565e:	d102      	bne.n	8005666 <xQueueGenericSend+0x9e>
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d101      	bne.n	800566a <xQueueGenericSend+0xa2>
 8005666:	2301      	movs	r3, #1
 8005668:	e000      	b.n	800566c <xQueueGenericSend+0xa4>
 800566a:	2300      	movs	r3, #0
 800566c:	2b00      	cmp	r3, #0
 800566e:	d10a      	bne.n	8005686 <xQueueGenericSend+0xbe>
	__asm volatile
 8005670:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005674:	f383 8811 	msr	BASEPRI, r3
 8005678:	f3bf 8f6f 	isb	sy
 800567c:	f3bf 8f4f 	dsb	sy
 8005680:	61fb      	str	r3, [r7, #28]
}
 8005682:	bf00      	nop
 8005684:	e7fe      	b.n	8005684 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005686:	f001 ff45 	bl	8007514 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800568a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800568c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800568e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005690:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005692:	429a      	cmp	r2, r3
 8005694:	d302      	bcc.n	800569c <xQueueGenericSend+0xd4>
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	2b02      	cmp	r3, #2
 800569a:	d129      	bne.n	80056f0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800569c:	683a      	ldr	r2, [r7, #0]
 800569e:	68b9      	ldr	r1, [r7, #8]
 80056a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80056a2:	f000 fc9a 	bl	8005fda <prvCopyDataToQueue>
 80056a6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80056a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d010      	beq.n	80056d2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80056b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056b2:	3324      	adds	r3, #36	; 0x24
 80056b4:	4618      	mov	r0, r3
 80056b6:	f001 fa1d 	bl	8006af4 <xTaskRemoveFromEventList>
 80056ba:	4603      	mov	r3, r0
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d013      	beq.n	80056e8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80056c0:	4b3f      	ldr	r3, [pc, #252]	; (80057c0 <xQueueGenericSend+0x1f8>)
 80056c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056c6:	601a      	str	r2, [r3, #0]
 80056c8:	f3bf 8f4f 	dsb	sy
 80056cc:	f3bf 8f6f 	isb	sy
 80056d0:	e00a      	b.n	80056e8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80056d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d007      	beq.n	80056e8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80056d8:	4b39      	ldr	r3, [pc, #228]	; (80057c0 <xQueueGenericSend+0x1f8>)
 80056da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056de:	601a      	str	r2, [r3, #0]
 80056e0:	f3bf 8f4f 	dsb	sy
 80056e4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80056e8:	f001 ff44 	bl	8007574 <vPortExitCritical>
				return pdPASS;
 80056ec:	2301      	movs	r3, #1
 80056ee:	e063      	b.n	80057b8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d103      	bne.n	80056fe <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80056f6:	f001 ff3d 	bl	8007574 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80056fa:	2300      	movs	r3, #0
 80056fc:	e05c      	b.n	80057b8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80056fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005700:	2b00      	cmp	r3, #0
 8005702:	d106      	bne.n	8005712 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005704:	f107 0314 	add.w	r3, r7, #20
 8005708:	4618      	mov	r0, r3
 800570a:	f001 fa55 	bl	8006bb8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800570e:	2301      	movs	r3, #1
 8005710:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005712:	f001 ff2f 	bl	8007574 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005716:	f000 ffe3 	bl	80066e0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800571a:	f001 fefb 	bl	8007514 <vPortEnterCritical>
 800571e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005720:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005724:	b25b      	sxtb	r3, r3
 8005726:	f1b3 3fff 	cmp.w	r3, #4294967295
 800572a:	d103      	bne.n	8005734 <xQueueGenericSend+0x16c>
 800572c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800572e:	2200      	movs	r2, #0
 8005730:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005736:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800573a:	b25b      	sxtb	r3, r3
 800573c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005740:	d103      	bne.n	800574a <xQueueGenericSend+0x182>
 8005742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005744:	2200      	movs	r2, #0
 8005746:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800574a:	f001 ff13 	bl	8007574 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800574e:	1d3a      	adds	r2, r7, #4
 8005750:	f107 0314 	add.w	r3, r7, #20
 8005754:	4611      	mov	r1, r2
 8005756:	4618      	mov	r0, r3
 8005758:	f001 fa44 	bl	8006be4 <xTaskCheckForTimeOut>
 800575c:	4603      	mov	r3, r0
 800575e:	2b00      	cmp	r3, #0
 8005760:	d124      	bne.n	80057ac <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005762:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005764:	f000 fd31 	bl	80061ca <prvIsQueueFull>
 8005768:	4603      	mov	r3, r0
 800576a:	2b00      	cmp	r3, #0
 800576c:	d018      	beq.n	80057a0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800576e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005770:	3310      	adds	r3, #16
 8005772:	687a      	ldr	r2, [r7, #4]
 8005774:	4611      	mov	r1, r2
 8005776:	4618      	mov	r0, r3
 8005778:	f001 f998 	bl	8006aac <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800577c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800577e:	f000 fcbc 	bl	80060fa <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005782:	f000 ffbb 	bl	80066fc <xTaskResumeAll>
 8005786:	4603      	mov	r3, r0
 8005788:	2b00      	cmp	r3, #0
 800578a:	f47f af7c 	bne.w	8005686 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800578e:	4b0c      	ldr	r3, [pc, #48]	; (80057c0 <xQueueGenericSend+0x1f8>)
 8005790:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005794:	601a      	str	r2, [r3, #0]
 8005796:	f3bf 8f4f 	dsb	sy
 800579a:	f3bf 8f6f 	isb	sy
 800579e:	e772      	b.n	8005686 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80057a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80057a2:	f000 fcaa 	bl	80060fa <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80057a6:	f000 ffa9 	bl	80066fc <xTaskResumeAll>
 80057aa:	e76c      	b.n	8005686 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80057ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80057ae:	f000 fca4 	bl	80060fa <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80057b2:	f000 ffa3 	bl	80066fc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80057b6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80057b8:	4618      	mov	r0, r3
 80057ba:	3738      	adds	r7, #56	; 0x38
 80057bc:	46bd      	mov	sp, r7
 80057be:	bd80      	pop	{r7, pc}
 80057c0:	e000ed04 	.word	0xe000ed04

080057c4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b090      	sub	sp, #64	; 0x40
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	60f8      	str	r0, [r7, #12]
 80057cc:	60b9      	str	r1, [r7, #8]
 80057ce:	607a      	str	r2, [r7, #4]
 80057d0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80057d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d10a      	bne.n	80057f2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80057dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057e0:	f383 8811 	msr	BASEPRI, r3
 80057e4:	f3bf 8f6f 	isb	sy
 80057e8:	f3bf 8f4f 	dsb	sy
 80057ec:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80057ee:	bf00      	nop
 80057f0:	e7fe      	b.n	80057f0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80057f2:	68bb      	ldr	r3, [r7, #8]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d103      	bne.n	8005800 <xQueueGenericSendFromISR+0x3c>
 80057f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d101      	bne.n	8005804 <xQueueGenericSendFromISR+0x40>
 8005800:	2301      	movs	r3, #1
 8005802:	e000      	b.n	8005806 <xQueueGenericSendFromISR+0x42>
 8005804:	2300      	movs	r3, #0
 8005806:	2b00      	cmp	r3, #0
 8005808:	d10a      	bne.n	8005820 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800580a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800580e:	f383 8811 	msr	BASEPRI, r3
 8005812:	f3bf 8f6f 	isb	sy
 8005816:	f3bf 8f4f 	dsb	sy
 800581a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800581c:	bf00      	nop
 800581e:	e7fe      	b.n	800581e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	2b02      	cmp	r3, #2
 8005824:	d103      	bne.n	800582e <xQueueGenericSendFromISR+0x6a>
 8005826:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005828:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800582a:	2b01      	cmp	r3, #1
 800582c:	d101      	bne.n	8005832 <xQueueGenericSendFromISR+0x6e>
 800582e:	2301      	movs	r3, #1
 8005830:	e000      	b.n	8005834 <xQueueGenericSendFromISR+0x70>
 8005832:	2300      	movs	r3, #0
 8005834:	2b00      	cmp	r3, #0
 8005836:	d10a      	bne.n	800584e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005838:	f04f 0350 	mov.w	r3, #80	; 0x50
 800583c:	f383 8811 	msr	BASEPRI, r3
 8005840:	f3bf 8f6f 	isb	sy
 8005844:	f3bf 8f4f 	dsb	sy
 8005848:	623b      	str	r3, [r7, #32]
}
 800584a:	bf00      	nop
 800584c:	e7fe      	b.n	800584c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800584e:	f001 ff43 	bl	80076d8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005852:	f3ef 8211 	mrs	r2, BASEPRI
 8005856:	f04f 0350 	mov.w	r3, #80	; 0x50
 800585a:	f383 8811 	msr	BASEPRI, r3
 800585e:	f3bf 8f6f 	isb	sy
 8005862:	f3bf 8f4f 	dsb	sy
 8005866:	61fa      	str	r2, [r7, #28]
 8005868:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800586a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800586c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800586e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005870:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005872:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005874:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005876:	429a      	cmp	r2, r3
 8005878:	d302      	bcc.n	8005880 <xQueueGenericSendFromISR+0xbc>
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	2b02      	cmp	r3, #2
 800587e:	d12f      	bne.n	80058e0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005880:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005882:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005886:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800588a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800588c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800588e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005890:	683a      	ldr	r2, [r7, #0]
 8005892:	68b9      	ldr	r1, [r7, #8]
 8005894:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005896:	f000 fba0 	bl	8005fda <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800589a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800589e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058a2:	d112      	bne.n	80058ca <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80058a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d016      	beq.n	80058da <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80058ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058ae:	3324      	adds	r3, #36	; 0x24
 80058b0:	4618      	mov	r0, r3
 80058b2:	f001 f91f 	bl	8006af4 <xTaskRemoveFromEventList>
 80058b6:	4603      	mov	r3, r0
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d00e      	beq.n	80058da <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d00b      	beq.n	80058da <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	2201      	movs	r2, #1
 80058c6:	601a      	str	r2, [r3, #0]
 80058c8:	e007      	b.n	80058da <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80058ca:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80058ce:	3301      	adds	r3, #1
 80058d0:	b2db      	uxtb	r3, r3
 80058d2:	b25a      	sxtb	r2, r3
 80058d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80058da:	2301      	movs	r3, #1
 80058dc:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80058de:	e001      	b.n	80058e4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80058e0:	2300      	movs	r3, #0
 80058e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80058e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058e6:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80058e8:	697b      	ldr	r3, [r7, #20]
 80058ea:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80058ee:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80058f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80058f2:	4618      	mov	r0, r3
 80058f4:	3740      	adds	r7, #64	; 0x40
 80058f6:	46bd      	mov	sp, r7
 80058f8:	bd80      	pop	{r7, pc}

080058fa <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80058fa:	b580      	push	{r7, lr}
 80058fc:	b08e      	sub	sp, #56	; 0x38
 80058fe:	af00      	add	r7, sp, #0
 8005900:	6078      	str	r0, [r7, #4]
 8005902:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8005908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800590a:	2b00      	cmp	r3, #0
 800590c:	d10a      	bne.n	8005924 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800590e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005912:	f383 8811 	msr	BASEPRI, r3
 8005916:	f3bf 8f6f 	isb	sy
 800591a:	f3bf 8f4f 	dsb	sy
 800591e:	623b      	str	r3, [r7, #32]
}
 8005920:	bf00      	nop
 8005922:	e7fe      	b.n	8005922 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005924:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005928:	2b00      	cmp	r3, #0
 800592a:	d00a      	beq.n	8005942 <xQueueGiveFromISR+0x48>
	__asm volatile
 800592c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005930:	f383 8811 	msr	BASEPRI, r3
 8005934:	f3bf 8f6f 	isb	sy
 8005938:	f3bf 8f4f 	dsb	sy
 800593c:	61fb      	str	r3, [r7, #28]
}
 800593e:	bf00      	nop
 8005940:	e7fe      	b.n	8005940 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8005942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d103      	bne.n	8005952 <xQueueGiveFromISR+0x58>
 800594a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800594c:	689b      	ldr	r3, [r3, #8]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d101      	bne.n	8005956 <xQueueGiveFromISR+0x5c>
 8005952:	2301      	movs	r3, #1
 8005954:	e000      	b.n	8005958 <xQueueGiveFromISR+0x5e>
 8005956:	2300      	movs	r3, #0
 8005958:	2b00      	cmp	r3, #0
 800595a:	d10a      	bne.n	8005972 <xQueueGiveFromISR+0x78>
	__asm volatile
 800595c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005960:	f383 8811 	msr	BASEPRI, r3
 8005964:	f3bf 8f6f 	isb	sy
 8005968:	f3bf 8f4f 	dsb	sy
 800596c:	61bb      	str	r3, [r7, #24]
}
 800596e:	bf00      	nop
 8005970:	e7fe      	b.n	8005970 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005972:	f001 feb1 	bl	80076d8 <vPortValidateInterruptPriority>
	__asm volatile
 8005976:	f3ef 8211 	mrs	r2, BASEPRI
 800597a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800597e:	f383 8811 	msr	BASEPRI, r3
 8005982:	f3bf 8f6f 	isb	sy
 8005986:	f3bf 8f4f 	dsb	sy
 800598a:	617a      	str	r2, [r7, #20]
 800598c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800598e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005990:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005994:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005996:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8005998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800599a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800599c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800599e:	429a      	cmp	r2, r3
 80059a0:	d22b      	bcs.n	80059fa <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80059a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059a4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80059a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80059ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059ae:	1c5a      	adds	r2, r3, #1
 80059b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059b2:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80059b4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80059b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059bc:	d112      	bne.n	80059e4 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80059be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d016      	beq.n	80059f4 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80059c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059c8:	3324      	adds	r3, #36	; 0x24
 80059ca:	4618      	mov	r0, r3
 80059cc:	f001 f892 	bl	8006af4 <xTaskRemoveFromEventList>
 80059d0:	4603      	mov	r3, r0
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d00e      	beq.n	80059f4 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d00b      	beq.n	80059f4 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	2201      	movs	r2, #1
 80059e0:	601a      	str	r2, [r3, #0]
 80059e2:	e007      	b.n	80059f4 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80059e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80059e8:	3301      	adds	r3, #1
 80059ea:	b2db      	uxtb	r3, r3
 80059ec:	b25a      	sxtb	r2, r3
 80059ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80059f4:	2301      	movs	r3, #1
 80059f6:	637b      	str	r3, [r7, #52]	; 0x34
 80059f8:	e001      	b.n	80059fe <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80059fa:	2300      	movs	r3, #0
 80059fc:	637b      	str	r3, [r7, #52]	; 0x34
 80059fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a00:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	f383 8811 	msr	BASEPRI, r3
}
 8005a08:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005a0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	3738      	adds	r7, #56	; 0x38
 8005a10:	46bd      	mov	sp, r7
 8005a12:	bd80      	pop	{r7, pc}

08005a14 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b08c      	sub	sp, #48	; 0x30
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	60f8      	str	r0, [r7, #12]
 8005a1c:	60b9      	str	r1, [r7, #8]
 8005a1e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005a20:	2300      	movs	r3, #0
 8005a22:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005a28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d10a      	bne.n	8005a44 <xQueueReceive+0x30>
	__asm volatile
 8005a2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a32:	f383 8811 	msr	BASEPRI, r3
 8005a36:	f3bf 8f6f 	isb	sy
 8005a3a:	f3bf 8f4f 	dsb	sy
 8005a3e:	623b      	str	r3, [r7, #32]
}
 8005a40:	bf00      	nop
 8005a42:	e7fe      	b.n	8005a42 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005a44:	68bb      	ldr	r3, [r7, #8]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d103      	bne.n	8005a52 <xQueueReceive+0x3e>
 8005a4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d101      	bne.n	8005a56 <xQueueReceive+0x42>
 8005a52:	2301      	movs	r3, #1
 8005a54:	e000      	b.n	8005a58 <xQueueReceive+0x44>
 8005a56:	2300      	movs	r3, #0
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d10a      	bne.n	8005a72 <xQueueReceive+0x5e>
	__asm volatile
 8005a5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a60:	f383 8811 	msr	BASEPRI, r3
 8005a64:	f3bf 8f6f 	isb	sy
 8005a68:	f3bf 8f4f 	dsb	sy
 8005a6c:	61fb      	str	r3, [r7, #28]
}
 8005a6e:	bf00      	nop
 8005a70:	e7fe      	b.n	8005a70 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005a72:	f001 f9ff 	bl	8006e74 <xTaskGetSchedulerState>
 8005a76:	4603      	mov	r3, r0
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d102      	bne.n	8005a82 <xQueueReceive+0x6e>
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d101      	bne.n	8005a86 <xQueueReceive+0x72>
 8005a82:	2301      	movs	r3, #1
 8005a84:	e000      	b.n	8005a88 <xQueueReceive+0x74>
 8005a86:	2300      	movs	r3, #0
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d10a      	bne.n	8005aa2 <xQueueReceive+0x8e>
	__asm volatile
 8005a8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a90:	f383 8811 	msr	BASEPRI, r3
 8005a94:	f3bf 8f6f 	isb	sy
 8005a98:	f3bf 8f4f 	dsb	sy
 8005a9c:	61bb      	str	r3, [r7, #24]
}
 8005a9e:	bf00      	nop
 8005aa0:	e7fe      	b.n	8005aa0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005aa2:	f001 fd37 	bl	8007514 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005aa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aaa:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d01f      	beq.n	8005af2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005ab2:	68b9      	ldr	r1, [r7, #8]
 8005ab4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005ab6:	f000 fafa 	bl	80060ae <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005abc:	1e5a      	subs	r2, r3, #1
 8005abe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ac0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005ac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ac4:	691b      	ldr	r3, [r3, #16]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d00f      	beq.n	8005aea <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005aca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005acc:	3310      	adds	r3, #16
 8005ace:	4618      	mov	r0, r3
 8005ad0:	f001 f810 	bl	8006af4 <xTaskRemoveFromEventList>
 8005ad4:	4603      	mov	r3, r0
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d007      	beq.n	8005aea <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005ada:	4b3d      	ldr	r3, [pc, #244]	; (8005bd0 <xQueueReceive+0x1bc>)
 8005adc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ae0:	601a      	str	r2, [r3, #0]
 8005ae2:	f3bf 8f4f 	dsb	sy
 8005ae6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005aea:	f001 fd43 	bl	8007574 <vPortExitCritical>
				return pdPASS;
 8005aee:	2301      	movs	r3, #1
 8005af0:	e069      	b.n	8005bc6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d103      	bne.n	8005b00 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005af8:	f001 fd3c 	bl	8007574 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005afc:	2300      	movs	r3, #0
 8005afe:	e062      	b.n	8005bc6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005b00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d106      	bne.n	8005b14 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005b06:	f107 0310 	add.w	r3, r7, #16
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	f001 f854 	bl	8006bb8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005b10:	2301      	movs	r3, #1
 8005b12:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005b14:	f001 fd2e 	bl	8007574 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005b18:	f000 fde2 	bl	80066e0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005b1c:	f001 fcfa 	bl	8007514 <vPortEnterCritical>
 8005b20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b22:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005b26:	b25b      	sxtb	r3, r3
 8005b28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b2c:	d103      	bne.n	8005b36 <xQueueReceive+0x122>
 8005b2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b30:	2200      	movs	r2, #0
 8005b32:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005b36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b38:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005b3c:	b25b      	sxtb	r3, r3
 8005b3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b42:	d103      	bne.n	8005b4c <xQueueReceive+0x138>
 8005b44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b46:	2200      	movs	r2, #0
 8005b48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005b4c:	f001 fd12 	bl	8007574 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005b50:	1d3a      	adds	r2, r7, #4
 8005b52:	f107 0310 	add.w	r3, r7, #16
 8005b56:	4611      	mov	r1, r2
 8005b58:	4618      	mov	r0, r3
 8005b5a:	f001 f843 	bl	8006be4 <xTaskCheckForTimeOut>
 8005b5e:	4603      	mov	r3, r0
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d123      	bne.n	8005bac <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005b64:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b66:	f000 fb1a 	bl	800619e <prvIsQueueEmpty>
 8005b6a:	4603      	mov	r3, r0
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d017      	beq.n	8005ba0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005b70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b72:	3324      	adds	r3, #36	; 0x24
 8005b74:	687a      	ldr	r2, [r7, #4]
 8005b76:	4611      	mov	r1, r2
 8005b78:	4618      	mov	r0, r3
 8005b7a:	f000 ff97 	bl	8006aac <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005b7e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b80:	f000 fabb 	bl	80060fa <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005b84:	f000 fdba 	bl	80066fc <xTaskResumeAll>
 8005b88:	4603      	mov	r3, r0
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d189      	bne.n	8005aa2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005b8e:	4b10      	ldr	r3, [pc, #64]	; (8005bd0 <xQueueReceive+0x1bc>)
 8005b90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b94:	601a      	str	r2, [r3, #0]
 8005b96:	f3bf 8f4f 	dsb	sy
 8005b9a:	f3bf 8f6f 	isb	sy
 8005b9e:	e780      	b.n	8005aa2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005ba0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005ba2:	f000 faaa 	bl	80060fa <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005ba6:	f000 fda9 	bl	80066fc <xTaskResumeAll>
 8005baa:	e77a      	b.n	8005aa2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005bac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005bae:	f000 faa4 	bl	80060fa <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005bb2:	f000 fda3 	bl	80066fc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005bb6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005bb8:	f000 faf1 	bl	800619e <prvIsQueueEmpty>
 8005bbc:	4603      	mov	r3, r0
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	f43f af6f 	beq.w	8005aa2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005bc4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	3730      	adds	r7, #48	; 0x30
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	bd80      	pop	{r7, pc}
 8005bce:	bf00      	nop
 8005bd0:	e000ed04 	.word	0xe000ed04

08005bd4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b08e      	sub	sp, #56	; 0x38
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
 8005bdc:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8005bde:	2300      	movs	r3, #0
 8005be0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8005be6:	2300      	movs	r3, #0
 8005be8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005bea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d10a      	bne.n	8005c06 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8005bf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bf4:	f383 8811 	msr	BASEPRI, r3
 8005bf8:	f3bf 8f6f 	isb	sy
 8005bfc:	f3bf 8f4f 	dsb	sy
 8005c00:	623b      	str	r3, [r7, #32]
}
 8005c02:	bf00      	nop
 8005c04:	e7fe      	b.n	8005c04 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005c06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d00a      	beq.n	8005c24 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8005c0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c12:	f383 8811 	msr	BASEPRI, r3
 8005c16:	f3bf 8f6f 	isb	sy
 8005c1a:	f3bf 8f4f 	dsb	sy
 8005c1e:	61fb      	str	r3, [r7, #28]
}
 8005c20:	bf00      	nop
 8005c22:	e7fe      	b.n	8005c22 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005c24:	f001 f926 	bl	8006e74 <xTaskGetSchedulerState>
 8005c28:	4603      	mov	r3, r0
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d102      	bne.n	8005c34 <xQueueSemaphoreTake+0x60>
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d101      	bne.n	8005c38 <xQueueSemaphoreTake+0x64>
 8005c34:	2301      	movs	r3, #1
 8005c36:	e000      	b.n	8005c3a <xQueueSemaphoreTake+0x66>
 8005c38:	2300      	movs	r3, #0
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d10a      	bne.n	8005c54 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8005c3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c42:	f383 8811 	msr	BASEPRI, r3
 8005c46:	f3bf 8f6f 	isb	sy
 8005c4a:	f3bf 8f4f 	dsb	sy
 8005c4e:	61bb      	str	r3, [r7, #24]
}
 8005c50:	bf00      	nop
 8005c52:	e7fe      	b.n	8005c52 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005c54:	f001 fc5e 	bl	8007514 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8005c58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c5c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005c5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d024      	beq.n	8005cae <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005c64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c66:	1e5a      	subs	r2, r3, #1
 8005c68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c6a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005c6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d104      	bne.n	8005c7e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8005c74:	f001 faa6 	bl	80071c4 <pvTaskIncrementMutexHeldCount>
 8005c78:	4602      	mov	r2, r0
 8005c7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c7c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005c7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c80:	691b      	ldr	r3, [r3, #16]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d00f      	beq.n	8005ca6 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005c86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c88:	3310      	adds	r3, #16
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	f000 ff32 	bl	8006af4 <xTaskRemoveFromEventList>
 8005c90:	4603      	mov	r3, r0
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d007      	beq.n	8005ca6 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005c96:	4b54      	ldr	r3, [pc, #336]	; (8005de8 <xQueueSemaphoreTake+0x214>)
 8005c98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c9c:	601a      	str	r2, [r3, #0]
 8005c9e:	f3bf 8f4f 	dsb	sy
 8005ca2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005ca6:	f001 fc65 	bl	8007574 <vPortExitCritical>
				return pdPASS;
 8005caa:	2301      	movs	r3, #1
 8005cac:	e097      	b.n	8005dde <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d111      	bne.n	8005cd8 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8005cb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d00a      	beq.n	8005cd0 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8005cba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cbe:	f383 8811 	msr	BASEPRI, r3
 8005cc2:	f3bf 8f6f 	isb	sy
 8005cc6:	f3bf 8f4f 	dsb	sy
 8005cca:	617b      	str	r3, [r7, #20]
}
 8005ccc:	bf00      	nop
 8005cce:	e7fe      	b.n	8005cce <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8005cd0:	f001 fc50 	bl	8007574 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	e082      	b.n	8005dde <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005cd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d106      	bne.n	8005cec <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005cde:	f107 030c 	add.w	r3, r7, #12
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	f000 ff68 	bl	8006bb8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005ce8:	2301      	movs	r3, #1
 8005cea:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005cec:	f001 fc42 	bl	8007574 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005cf0:	f000 fcf6 	bl	80066e0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005cf4:	f001 fc0e 	bl	8007514 <vPortEnterCritical>
 8005cf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cfa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005cfe:	b25b      	sxtb	r3, r3
 8005d00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d04:	d103      	bne.n	8005d0e <xQueueSemaphoreTake+0x13a>
 8005d06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d08:	2200      	movs	r2, #0
 8005d0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d10:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005d14:	b25b      	sxtb	r3, r3
 8005d16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d1a:	d103      	bne.n	8005d24 <xQueueSemaphoreTake+0x150>
 8005d1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d1e:	2200      	movs	r2, #0
 8005d20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005d24:	f001 fc26 	bl	8007574 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005d28:	463a      	mov	r2, r7
 8005d2a:	f107 030c 	add.w	r3, r7, #12
 8005d2e:	4611      	mov	r1, r2
 8005d30:	4618      	mov	r0, r3
 8005d32:	f000 ff57 	bl	8006be4 <xTaskCheckForTimeOut>
 8005d36:	4603      	mov	r3, r0
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d132      	bne.n	8005da2 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005d3c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005d3e:	f000 fa2e 	bl	800619e <prvIsQueueEmpty>
 8005d42:	4603      	mov	r3, r0
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d026      	beq.n	8005d96 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005d48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d109      	bne.n	8005d64 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8005d50:	f001 fbe0 	bl	8007514 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005d54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d56:	689b      	ldr	r3, [r3, #8]
 8005d58:	4618      	mov	r0, r3
 8005d5a:	f001 f8a9 	bl	8006eb0 <xTaskPriorityInherit>
 8005d5e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8005d60:	f001 fc08 	bl	8007574 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005d64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d66:	3324      	adds	r3, #36	; 0x24
 8005d68:	683a      	ldr	r2, [r7, #0]
 8005d6a:	4611      	mov	r1, r2
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	f000 fe9d 	bl	8006aac <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005d72:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005d74:	f000 f9c1 	bl	80060fa <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005d78:	f000 fcc0 	bl	80066fc <xTaskResumeAll>
 8005d7c:	4603      	mov	r3, r0
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	f47f af68 	bne.w	8005c54 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8005d84:	4b18      	ldr	r3, [pc, #96]	; (8005de8 <xQueueSemaphoreTake+0x214>)
 8005d86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d8a:	601a      	str	r2, [r3, #0]
 8005d8c:	f3bf 8f4f 	dsb	sy
 8005d90:	f3bf 8f6f 	isb	sy
 8005d94:	e75e      	b.n	8005c54 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8005d96:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005d98:	f000 f9af 	bl	80060fa <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005d9c:	f000 fcae 	bl	80066fc <xTaskResumeAll>
 8005da0:	e758      	b.n	8005c54 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8005da2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005da4:	f000 f9a9 	bl	80060fa <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005da8:	f000 fca8 	bl	80066fc <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005dac:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005dae:	f000 f9f6 	bl	800619e <prvIsQueueEmpty>
 8005db2:	4603      	mov	r3, r0
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	f43f af4d 	beq.w	8005c54 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8005dba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d00d      	beq.n	8005ddc <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8005dc0:	f001 fba8 	bl	8007514 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005dc4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005dc6:	f000 f8f0 	bl	8005faa <prvGetDisinheritPriorityAfterTimeout>
 8005dca:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8005dcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dce:	689b      	ldr	r3, [r3, #8]
 8005dd0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	f001 f968 	bl	80070a8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8005dd8:	f001 fbcc 	bl	8007574 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005ddc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005dde:	4618      	mov	r0, r3
 8005de0:	3738      	adds	r7, #56	; 0x38
 8005de2:	46bd      	mov	sp, r7
 8005de4:	bd80      	pop	{r7, pc}
 8005de6:	bf00      	nop
 8005de8:	e000ed04 	.word	0xe000ed04

08005dec <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005dec:	b580      	push	{r7, lr}
 8005dee:	b08e      	sub	sp, #56	; 0x38
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	60f8      	str	r0, [r7, #12]
 8005df4:	60b9      	str	r1, [r7, #8]
 8005df6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005dfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d10a      	bne.n	8005e18 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8005e02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e06:	f383 8811 	msr	BASEPRI, r3
 8005e0a:	f3bf 8f6f 	isb	sy
 8005e0e:	f3bf 8f4f 	dsb	sy
 8005e12:	623b      	str	r3, [r7, #32]
}
 8005e14:	bf00      	nop
 8005e16:	e7fe      	b.n	8005e16 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005e18:	68bb      	ldr	r3, [r7, #8]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d103      	bne.n	8005e26 <xQueueReceiveFromISR+0x3a>
 8005e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d101      	bne.n	8005e2a <xQueueReceiveFromISR+0x3e>
 8005e26:	2301      	movs	r3, #1
 8005e28:	e000      	b.n	8005e2c <xQueueReceiveFromISR+0x40>
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d10a      	bne.n	8005e46 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8005e30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e34:	f383 8811 	msr	BASEPRI, r3
 8005e38:	f3bf 8f6f 	isb	sy
 8005e3c:	f3bf 8f4f 	dsb	sy
 8005e40:	61fb      	str	r3, [r7, #28]
}
 8005e42:	bf00      	nop
 8005e44:	e7fe      	b.n	8005e44 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005e46:	f001 fc47 	bl	80076d8 <vPortValidateInterruptPriority>
	__asm volatile
 8005e4a:	f3ef 8211 	mrs	r2, BASEPRI
 8005e4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e52:	f383 8811 	msr	BASEPRI, r3
 8005e56:	f3bf 8f6f 	isb	sy
 8005e5a:	f3bf 8f4f 	dsb	sy
 8005e5e:	61ba      	str	r2, [r7, #24]
 8005e60:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8005e62:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005e64:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e6a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005e6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d02f      	beq.n	8005ed2 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8005e72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e74:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005e78:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005e7c:	68b9      	ldr	r1, [r7, #8]
 8005e7e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005e80:	f000 f915 	bl	80060ae <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005e84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e86:	1e5a      	subs	r2, r3, #1
 8005e88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e8a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8005e8c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005e90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e94:	d112      	bne.n	8005ebc <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005e96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e98:	691b      	ldr	r3, [r3, #16]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d016      	beq.n	8005ecc <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005e9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ea0:	3310      	adds	r3, #16
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	f000 fe26 	bl	8006af4 <xTaskRemoveFromEventList>
 8005ea8:	4603      	mov	r3, r0
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d00e      	beq.n	8005ecc <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d00b      	beq.n	8005ecc <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2201      	movs	r2, #1
 8005eb8:	601a      	str	r2, [r3, #0]
 8005eba:	e007      	b.n	8005ecc <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005ebc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005ec0:	3301      	adds	r3, #1
 8005ec2:	b2db      	uxtb	r3, r3
 8005ec4:	b25a      	sxtb	r2, r3
 8005ec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ec8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8005ecc:	2301      	movs	r3, #1
 8005ece:	637b      	str	r3, [r7, #52]	; 0x34
 8005ed0:	e001      	b.n	8005ed6 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	637b      	str	r3, [r7, #52]	; 0x34
 8005ed6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ed8:	613b      	str	r3, [r7, #16]
	__asm volatile
 8005eda:	693b      	ldr	r3, [r7, #16]
 8005edc:	f383 8811 	msr	BASEPRI, r3
}
 8005ee0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005ee2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	3738      	adds	r7, #56	; 0x38
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	bd80      	pop	{r7, pc}

08005eec <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b084      	sub	sp, #16
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d10a      	bne.n	8005f10 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 8005efa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005efe:	f383 8811 	msr	BASEPRI, r3
 8005f02:	f3bf 8f6f 	isb	sy
 8005f06:	f3bf 8f4f 	dsb	sy
 8005f0a:	60bb      	str	r3, [r7, #8]
}
 8005f0c:	bf00      	nop
 8005f0e:	e7fe      	b.n	8005f0e <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 8005f10:	f001 fb00 	bl	8007514 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f18:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8005f1a:	f001 fb2b 	bl	8007574 <vPortExitCritical>

	return uxReturn;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8005f20:	4618      	mov	r0, r3
 8005f22:	3710      	adds	r7, #16
 8005f24:	46bd      	mov	sp, r7
 8005f26:	bd80      	pop	{r7, pc}

08005f28 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8005f28:	b480      	push	{r7}
 8005f2a:	b087      	sub	sp, #28
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8005f34:	697b      	ldr	r3, [r7, #20]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d10a      	bne.n	8005f50 <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 8005f3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f3e:	f383 8811 	msr	BASEPRI, r3
 8005f42:	f3bf 8f6f 	isb	sy
 8005f46:	f3bf 8f4f 	dsb	sy
 8005f4a:	60fb      	str	r3, [r7, #12]
}
 8005f4c:	bf00      	nop
 8005f4e:	e7fe      	b.n	8005f4e <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 8005f50:	697b      	ldr	r3, [r7, #20]
 8005f52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f54:	613b      	str	r3, [r7, #16]

	return uxReturn;
 8005f56:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8005f58:	4618      	mov	r0, r3
 8005f5a:	371c      	adds	r7, #28
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f62:	4770      	bx	lr

08005f64 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8005f64:	b580      	push	{r7, lr}
 8005f66:	b084      	sub	sp, #16
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d10a      	bne.n	8005f8c <vQueueDelete+0x28>
	__asm volatile
 8005f76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f7a:	f383 8811 	msr	BASEPRI, r3
 8005f7e:	f3bf 8f6f 	isb	sy
 8005f82:	f3bf 8f4f 	dsb	sy
 8005f86:	60bb      	str	r3, [r7, #8]
}
 8005f88:	bf00      	nop
 8005f8a:	e7fe      	b.n	8005f8a <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8005f8c:	68f8      	ldr	r0, [r7, #12]
 8005f8e:	f000 f935 	bl	80061fc <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d102      	bne.n	8005fa2 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8005f9c:	68f8      	ldr	r0, [r7, #12]
 8005f9e:	f001 fca7 	bl	80078f0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8005fa2:	bf00      	nop
 8005fa4:	3710      	adds	r7, #16
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	bd80      	pop	{r7, pc}

08005faa <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8005faa:	b480      	push	{r7}
 8005fac:	b085      	sub	sp, #20
 8005fae:	af00      	add	r7, sp, #0
 8005fb0:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d006      	beq.n	8005fc8 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f1c3 0307 	rsb	r3, r3, #7
 8005fc4:	60fb      	str	r3, [r7, #12]
 8005fc6:	e001      	b.n	8005fcc <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8005fc8:	2300      	movs	r3, #0
 8005fca:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
	}
 8005fce:	4618      	mov	r0, r3
 8005fd0:	3714      	adds	r7, #20
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd8:	4770      	bx	lr

08005fda <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005fda:	b580      	push	{r7, lr}
 8005fdc:	b086      	sub	sp, #24
 8005fde:	af00      	add	r7, sp, #0
 8005fe0:	60f8      	str	r0, [r7, #12]
 8005fe2:	60b9      	str	r1, [r7, #8]
 8005fe4:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fee:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d10d      	bne.n	8006014 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d14d      	bne.n	800609c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	689b      	ldr	r3, [r3, #8]
 8006004:	4618      	mov	r0, r3
 8006006:	f000 ffc9 	bl	8006f9c <xTaskPriorityDisinherit>
 800600a:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	2200      	movs	r2, #0
 8006010:	609a      	str	r2, [r3, #8]
 8006012:	e043      	b.n	800609c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d119      	bne.n	800604e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	6858      	ldr	r0, [r3, #4]
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006022:	461a      	mov	r2, r3
 8006024:	68b9      	ldr	r1, [r7, #8]
 8006026:	f011 fa8a 	bl	801753e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	685a      	ldr	r2, [r3, #4]
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006032:	441a      	add	r2, r3
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	685a      	ldr	r2, [r3, #4]
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	689b      	ldr	r3, [r3, #8]
 8006040:	429a      	cmp	r2, r3
 8006042:	d32b      	bcc.n	800609c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	681a      	ldr	r2, [r3, #0]
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	605a      	str	r2, [r3, #4]
 800604c:	e026      	b.n	800609c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	68d8      	ldr	r0, [r3, #12]
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006056:	461a      	mov	r2, r3
 8006058:	68b9      	ldr	r1, [r7, #8]
 800605a:	f011 fa70 	bl	801753e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	68da      	ldr	r2, [r3, #12]
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006066:	425b      	negs	r3, r3
 8006068:	441a      	add	r2, r3
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	68da      	ldr	r2, [r3, #12]
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	429a      	cmp	r2, r3
 8006078:	d207      	bcs.n	800608a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	689a      	ldr	r2, [r3, #8]
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006082:	425b      	negs	r3, r3
 8006084:	441a      	add	r2, r3
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2b02      	cmp	r3, #2
 800608e:	d105      	bne.n	800609c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006090:	693b      	ldr	r3, [r7, #16]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d002      	beq.n	800609c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006096:	693b      	ldr	r3, [r7, #16]
 8006098:	3b01      	subs	r3, #1
 800609a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800609c:	693b      	ldr	r3, [r7, #16]
 800609e:	1c5a      	adds	r2, r3, #1
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80060a4:	697b      	ldr	r3, [r7, #20]
}
 80060a6:	4618      	mov	r0, r3
 80060a8:	3718      	adds	r7, #24
 80060aa:	46bd      	mov	sp, r7
 80060ac:	bd80      	pop	{r7, pc}

080060ae <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80060ae:	b580      	push	{r7, lr}
 80060b0:	b082      	sub	sp, #8
 80060b2:	af00      	add	r7, sp, #0
 80060b4:	6078      	str	r0, [r7, #4]
 80060b6:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d018      	beq.n	80060f2 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	68da      	ldr	r2, [r3, #12]
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060c8:	441a      	add	r2, r3
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	68da      	ldr	r2, [r3, #12]
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	689b      	ldr	r3, [r3, #8]
 80060d6:	429a      	cmp	r2, r3
 80060d8:	d303      	bcc.n	80060e2 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681a      	ldr	r2, [r3, #0]
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	68d9      	ldr	r1, [r3, #12]
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ea:	461a      	mov	r2, r3
 80060ec:	6838      	ldr	r0, [r7, #0]
 80060ee:	f011 fa26 	bl	801753e <memcpy>
	}
}
 80060f2:	bf00      	nop
 80060f4:	3708      	adds	r7, #8
 80060f6:	46bd      	mov	sp, r7
 80060f8:	bd80      	pop	{r7, pc}

080060fa <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80060fa:	b580      	push	{r7, lr}
 80060fc:	b084      	sub	sp, #16
 80060fe:	af00      	add	r7, sp, #0
 8006100:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006102:	f001 fa07 	bl	8007514 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800610c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800610e:	e011      	b.n	8006134 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006114:	2b00      	cmp	r3, #0
 8006116:	d012      	beq.n	800613e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	3324      	adds	r3, #36	; 0x24
 800611c:	4618      	mov	r0, r3
 800611e:	f000 fce9 	bl	8006af4 <xTaskRemoveFromEventList>
 8006122:	4603      	mov	r3, r0
 8006124:	2b00      	cmp	r3, #0
 8006126:	d001      	beq.n	800612c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006128:	f000 fdbe 	bl	8006ca8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800612c:	7bfb      	ldrb	r3, [r7, #15]
 800612e:	3b01      	subs	r3, #1
 8006130:	b2db      	uxtb	r3, r3
 8006132:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006134:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006138:	2b00      	cmp	r3, #0
 800613a:	dce9      	bgt.n	8006110 <prvUnlockQueue+0x16>
 800613c:	e000      	b.n	8006140 <prvUnlockQueue+0x46>
					break;
 800613e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	22ff      	movs	r2, #255	; 0xff
 8006144:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006148:	f001 fa14 	bl	8007574 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800614c:	f001 f9e2 	bl	8007514 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006156:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006158:	e011      	b.n	800617e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	691b      	ldr	r3, [r3, #16]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d012      	beq.n	8006188 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	3310      	adds	r3, #16
 8006166:	4618      	mov	r0, r3
 8006168:	f000 fcc4 	bl	8006af4 <xTaskRemoveFromEventList>
 800616c:	4603      	mov	r3, r0
 800616e:	2b00      	cmp	r3, #0
 8006170:	d001      	beq.n	8006176 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006172:	f000 fd99 	bl	8006ca8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006176:	7bbb      	ldrb	r3, [r7, #14]
 8006178:	3b01      	subs	r3, #1
 800617a:	b2db      	uxtb	r3, r3
 800617c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800617e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006182:	2b00      	cmp	r3, #0
 8006184:	dce9      	bgt.n	800615a <prvUnlockQueue+0x60>
 8006186:	e000      	b.n	800618a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006188:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	22ff      	movs	r2, #255	; 0xff
 800618e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006192:	f001 f9ef 	bl	8007574 <vPortExitCritical>
}
 8006196:	bf00      	nop
 8006198:	3710      	adds	r7, #16
 800619a:	46bd      	mov	sp, r7
 800619c:	bd80      	pop	{r7, pc}

0800619e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800619e:	b580      	push	{r7, lr}
 80061a0:	b084      	sub	sp, #16
 80061a2:	af00      	add	r7, sp, #0
 80061a4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80061a6:	f001 f9b5 	bl	8007514 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d102      	bne.n	80061b8 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80061b2:	2301      	movs	r3, #1
 80061b4:	60fb      	str	r3, [r7, #12]
 80061b6:	e001      	b.n	80061bc <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80061b8:	2300      	movs	r3, #0
 80061ba:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80061bc:	f001 f9da 	bl	8007574 <vPortExitCritical>

	return xReturn;
 80061c0:	68fb      	ldr	r3, [r7, #12]
}
 80061c2:	4618      	mov	r0, r3
 80061c4:	3710      	adds	r7, #16
 80061c6:	46bd      	mov	sp, r7
 80061c8:	bd80      	pop	{r7, pc}

080061ca <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80061ca:	b580      	push	{r7, lr}
 80061cc:	b084      	sub	sp, #16
 80061ce:	af00      	add	r7, sp, #0
 80061d0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80061d2:	f001 f99f 	bl	8007514 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061de:	429a      	cmp	r2, r3
 80061e0:	d102      	bne.n	80061e8 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80061e2:	2301      	movs	r3, #1
 80061e4:	60fb      	str	r3, [r7, #12]
 80061e6:	e001      	b.n	80061ec <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80061e8:	2300      	movs	r3, #0
 80061ea:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80061ec:	f001 f9c2 	bl	8007574 <vPortExitCritical>

	return xReturn;
 80061f0:	68fb      	ldr	r3, [r7, #12]
}
 80061f2:	4618      	mov	r0, r3
 80061f4:	3710      	adds	r7, #16
 80061f6:	46bd      	mov	sp, r7
 80061f8:	bd80      	pop	{r7, pc}
	...

080061fc <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80061fc:	b480      	push	{r7}
 80061fe:	b085      	sub	sp, #20
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006204:	2300      	movs	r3, #0
 8006206:	60fb      	str	r3, [r7, #12]
 8006208:	e016      	b.n	8006238 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800620a:	4a10      	ldr	r2, [pc, #64]	; (800624c <vQueueUnregisterQueue+0x50>)
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	00db      	lsls	r3, r3, #3
 8006210:	4413      	add	r3, r2
 8006212:	685b      	ldr	r3, [r3, #4]
 8006214:	687a      	ldr	r2, [r7, #4]
 8006216:	429a      	cmp	r2, r3
 8006218:	d10b      	bne.n	8006232 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800621a:	4a0c      	ldr	r2, [pc, #48]	; (800624c <vQueueUnregisterQueue+0x50>)
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	2100      	movs	r1, #0
 8006220:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8006224:	4a09      	ldr	r2, [pc, #36]	; (800624c <vQueueUnregisterQueue+0x50>)
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	00db      	lsls	r3, r3, #3
 800622a:	4413      	add	r3, r2
 800622c:	2200      	movs	r2, #0
 800622e:	605a      	str	r2, [r3, #4]
				break;
 8006230:	e006      	b.n	8006240 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	3301      	adds	r3, #1
 8006236:	60fb      	str	r3, [r7, #12]
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	2b07      	cmp	r3, #7
 800623c:	d9e5      	bls.n	800620a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800623e:	bf00      	nop
 8006240:	bf00      	nop
 8006242:	3714      	adds	r7, #20
 8006244:	46bd      	mov	sp, r7
 8006246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624a:	4770      	bx	lr
 800624c:	20005020 	.word	0x20005020

08006250 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006250:	b580      	push	{r7, lr}
 8006252:	b08e      	sub	sp, #56	; 0x38
 8006254:	af04      	add	r7, sp, #16
 8006256:	60f8      	str	r0, [r7, #12]
 8006258:	60b9      	str	r1, [r7, #8]
 800625a:	607a      	str	r2, [r7, #4]
 800625c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800625e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006260:	2b00      	cmp	r3, #0
 8006262:	d10a      	bne.n	800627a <xTaskCreateStatic+0x2a>
	__asm volatile
 8006264:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006268:	f383 8811 	msr	BASEPRI, r3
 800626c:	f3bf 8f6f 	isb	sy
 8006270:	f3bf 8f4f 	dsb	sy
 8006274:	623b      	str	r3, [r7, #32]
}
 8006276:	bf00      	nop
 8006278:	e7fe      	b.n	8006278 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800627a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800627c:	2b00      	cmp	r3, #0
 800627e:	d10a      	bne.n	8006296 <xTaskCreateStatic+0x46>
	__asm volatile
 8006280:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006284:	f383 8811 	msr	BASEPRI, r3
 8006288:	f3bf 8f6f 	isb	sy
 800628c:	f3bf 8f4f 	dsb	sy
 8006290:	61fb      	str	r3, [r7, #28]
}
 8006292:	bf00      	nop
 8006294:	e7fe      	b.n	8006294 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006296:	23b4      	movs	r3, #180	; 0xb4
 8006298:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800629a:	693b      	ldr	r3, [r7, #16]
 800629c:	2bb4      	cmp	r3, #180	; 0xb4
 800629e:	d00a      	beq.n	80062b6 <xTaskCreateStatic+0x66>
	__asm volatile
 80062a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062a4:	f383 8811 	msr	BASEPRI, r3
 80062a8:	f3bf 8f6f 	isb	sy
 80062ac:	f3bf 8f4f 	dsb	sy
 80062b0:	61bb      	str	r3, [r7, #24]
}
 80062b2:	bf00      	nop
 80062b4:	e7fe      	b.n	80062b4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80062b6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80062b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d01e      	beq.n	80062fc <xTaskCreateStatic+0xac>
 80062be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d01b      	beq.n	80062fc <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80062c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062c6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80062c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80062cc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80062ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062d0:	2202      	movs	r2, #2
 80062d2:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80062d6:	2300      	movs	r3, #0
 80062d8:	9303      	str	r3, [sp, #12]
 80062da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062dc:	9302      	str	r3, [sp, #8]
 80062de:	f107 0314 	add.w	r3, r7, #20
 80062e2:	9301      	str	r3, [sp, #4]
 80062e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062e6:	9300      	str	r3, [sp, #0]
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	687a      	ldr	r2, [r7, #4]
 80062ec:	68b9      	ldr	r1, [r7, #8]
 80062ee:	68f8      	ldr	r0, [r7, #12]
 80062f0:	f000 f850 	bl	8006394 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80062f4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80062f6:	f000 f8eb 	bl	80064d0 <prvAddNewTaskToReadyList>
 80062fa:	e001      	b.n	8006300 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80062fc:	2300      	movs	r3, #0
 80062fe:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006300:	697b      	ldr	r3, [r7, #20]
	}
 8006302:	4618      	mov	r0, r3
 8006304:	3728      	adds	r7, #40	; 0x28
 8006306:	46bd      	mov	sp, r7
 8006308:	bd80      	pop	{r7, pc}

0800630a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800630a:	b580      	push	{r7, lr}
 800630c:	b08c      	sub	sp, #48	; 0x30
 800630e:	af04      	add	r7, sp, #16
 8006310:	60f8      	str	r0, [r7, #12]
 8006312:	60b9      	str	r1, [r7, #8]
 8006314:	603b      	str	r3, [r7, #0]
 8006316:	4613      	mov	r3, r2
 8006318:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800631a:	88fb      	ldrh	r3, [r7, #6]
 800631c:	009b      	lsls	r3, r3, #2
 800631e:	4618      	mov	r0, r3
 8006320:	f001 fa1a 	bl	8007758 <pvPortMalloc>
 8006324:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006326:	697b      	ldr	r3, [r7, #20]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d00e      	beq.n	800634a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800632c:	20b4      	movs	r0, #180	; 0xb4
 800632e:	f001 fa13 	bl	8007758 <pvPortMalloc>
 8006332:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006334:	69fb      	ldr	r3, [r7, #28]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d003      	beq.n	8006342 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800633a:	69fb      	ldr	r3, [r7, #28]
 800633c:	697a      	ldr	r2, [r7, #20]
 800633e:	631a      	str	r2, [r3, #48]	; 0x30
 8006340:	e005      	b.n	800634e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006342:	6978      	ldr	r0, [r7, #20]
 8006344:	f001 fad4 	bl	80078f0 <vPortFree>
 8006348:	e001      	b.n	800634e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800634a:	2300      	movs	r3, #0
 800634c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800634e:	69fb      	ldr	r3, [r7, #28]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d017      	beq.n	8006384 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006354:	69fb      	ldr	r3, [r7, #28]
 8006356:	2200      	movs	r2, #0
 8006358:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800635c:	88fa      	ldrh	r2, [r7, #6]
 800635e:	2300      	movs	r3, #0
 8006360:	9303      	str	r3, [sp, #12]
 8006362:	69fb      	ldr	r3, [r7, #28]
 8006364:	9302      	str	r3, [sp, #8]
 8006366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006368:	9301      	str	r3, [sp, #4]
 800636a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800636c:	9300      	str	r3, [sp, #0]
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	68b9      	ldr	r1, [r7, #8]
 8006372:	68f8      	ldr	r0, [r7, #12]
 8006374:	f000 f80e 	bl	8006394 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006378:	69f8      	ldr	r0, [r7, #28]
 800637a:	f000 f8a9 	bl	80064d0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800637e:	2301      	movs	r3, #1
 8006380:	61bb      	str	r3, [r7, #24]
 8006382:	e002      	b.n	800638a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006384:	f04f 33ff 	mov.w	r3, #4294967295
 8006388:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800638a:	69bb      	ldr	r3, [r7, #24]
	}
 800638c:	4618      	mov	r0, r3
 800638e:	3720      	adds	r7, #32
 8006390:	46bd      	mov	sp, r7
 8006392:	bd80      	pop	{r7, pc}

08006394 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006394:	b580      	push	{r7, lr}
 8006396:	b088      	sub	sp, #32
 8006398:	af00      	add	r7, sp, #0
 800639a:	60f8      	str	r0, [r7, #12]
 800639c:	60b9      	str	r1, [r7, #8]
 800639e:	607a      	str	r2, [r7, #4]
 80063a0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80063a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80063ac:	3b01      	subs	r3, #1
 80063ae:	009b      	lsls	r3, r3, #2
 80063b0:	4413      	add	r3, r2
 80063b2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80063b4:	69bb      	ldr	r3, [r7, #24]
 80063b6:	f023 0307 	bic.w	r3, r3, #7
 80063ba:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80063bc:	69bb      	ldr	r3, [r7, #24]
 80063be:	f003 0307 	and.w	r3, r3, #7
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d00a      	beq.n	80063dc <prvInitialiseNewTask+0x48>
	__asm volatile
 80063c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063ca:	f383 8811 	msr	BASEPRI, r3
 80063ce:	f3bf 8f6f 	isb	sy
 80063d2:	f3bf 8f4f 	dsb	sy
 80063d6:	617b      	str	r3, [r7, #20]
}
 80063d8:	bf00      	nop
 80063da:	e7fe      	b.n	80063da <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80063dc:	68bb      	ldr	r3, [r7, #8]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d01f      	beq.n	8006422 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80063e2:	2300      	movs	r3, #0
 80063e4:	61fb      	str	r3, [r7, #28]
 80063e6:	e012      	b.n	800640e <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80063e8:	68ba      	ldr	r2, [r7, #8]
 80063ea:	69fb      	ldr	r3, [r7, #28]
 80063ec:	4413      	add	r3, r2
 80063ee:	7819      	ldrb	r1, [r3, #0]
 80063f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80063f2:	69fb      	ldr	r3, [r7, #28]
 80063f4:	4413      	add	r3, r2
 80063f6:	3334      	adds	r3, #52	; 0x34
 80063f8:	460a      	mov	r2, r1
 80063fa:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80063fc:	68ba      	ldr	r2, [r7, #8]
 80063fe:	69fb      	ldr	r3, [r7, #28]
 8006400:	4413      	add	r3, r2
 8006402:	781b      	ldrb	r3, [r3, #0]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d006      	beq.n	8006416 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006408:	69fb      	ldr	r3, [r7, #28]
 800640a:	3301      	adds	r3, #1
 800640c:	61fb      	str	r3, [r7, #28]
 800640e:	69fb      	ldr	r3, [r7, #28]
 8006410:	2b0f      	cmp	r3, #15
 8006412:	d9e9      	bls.n	80063e8 <prvInitialiseNewTask+0x54>
 8006414:	e000      	b.n	8006418 <prvInitialiseNewTask+0x84>
			{
				break;
 8006416:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800641a:	2200      	movs	r2, #0
 800641c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006420:	e003      	b.n	800642a <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006424:	2200      	movs	r2, #0
 8006426:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800642a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800642c:	2b06      	cmp	r3, #6
 800642e:	d901      	bls.n	8006434 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006430:	2306      	movs	r3, #6
 8006432:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006436:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006438:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800643a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800643c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800643e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006442:	2200      	movs	r2, #0
 8006444:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006448:	3304      	adds	r3, #4
 800644a:	4618      	mov	r0, r3
 800644c:	f7fe fea1 	bl	8005192 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006452:	3318      	adds	r3, #24
 8006454:	4618      	mov	r0, r3
 8006456:	f7fe fe9c 	bl	8005192 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800645a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800645c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800645e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006462:	f1c3 0207 	rsb	r2, r3, #7
 8006466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006468:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800646a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800646c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800646e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006472:	2200      	movs	r2, #0
 8006474:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800647a:	2200      	movs	r2, #0
 800647c:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006482:	334c      	adds	r3, #76	; 0x4c
 8006484:	2260      	movs	r2, #96	; 0x60
 8006486:	2100      	movs	r1, #0
 8006488:	4618      	mov	r0, r3
 800648a:	f011 f866 	bl	801755a <memset>
 800648e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006490:	4a0c      	ldr	r2, [pc, #48]	; (80064c4 <prvInitialiseNewTask+0x130>)
 8006492:	651a      	str	r2, [r3, #80]	; 0x50
 8006494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006496:	4a0c      	ldr	r2, [pc, #48]	; (80064c8 <prvInitialiseNewTask+0x134>)
 8006498:	655a      	str	r2, [r3, #84]	; 0x54
 800649a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800649c:	4a0b      	ldr	r2, [pc, #44]	; (80064cc <prvInitialiseNewTask+0x138>)
 800649e:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80064a0:	683a      	ldr	r2, [r7, #0]
 80064a2:	68f9      	ldr	r1, [r7, #12]
 80064a4:	69b8      	ldr	r0, [r7, #24]
 80064a6:	f000 ff07 	bl	80072b8 <pxPortInitialiseStack>
 80064aa:	4602      	mov	r2, r0
 80064ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064ae:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80064b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d002      	beq.n	80064bc <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80064b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80064ba:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80064bc:	bf00      	nop
 80064be:	3720      	adds	r7, #32
 80064c0:	46bd      	mov	sp, r7
 80064c2:	bd80      	pop	{r7, pc}
 80064c4:	0801bfd8 	.word	0x0801bfd8
 80064c8:	0801bff8 	.word	0x0801bff8
 80064cc:	0801bfb8 	.word	0x0801bfb8

080064d0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b082      	sub	sp, #8
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80064d8:	f001 f81c 	bl	8007514 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80064dc:	4b2a      	ldr	r3, [pc, #168]	; (8006588 <prvAddNewTaskToReadyList+0xb8>)
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	3301      	adds	r3, #1
 80064e2:	4a29      	ldr	r2, [pc, #164]	; (8006588 <prvAddNewTaskToReadyList+0xb8>)
 80064e4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80064e6:	4b29      	ldr	r3, [pc, #164]	; (800658c <prvAddNewTaskToReadyList+0xbc>)
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d109      	bne.n	8006502 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80064ee:	4a27      	ldr	r2, [pc, #156]	; (800658c <prvAddNewTaskToReadyList+0xbc>)
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80064f4:	4b24      	ldr	r3, [pc, #144]	; (8006588 <prvAddNewTaskToReadyList+0xb8>)
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	2b01      	cmp	r3, #1
 80064fa:	d110      	bne.n	800651e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80064fc:	f000 fbf8 	bl	8006cf0 <prvInitialiseTaskLists>
 8006500:	e00d      	b.n	800651e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006502:	4b23      	ldr	r3, [pc, #140]	; (8006590 <prvAddNewTaskToReadyList+0xc0>)
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d109      	bne.n	800651e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800650a:	4b20      	ldr	r3, [pc, #128]	; (800658c <prvAddNewTaskToReadyList+0xbc>)
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006514:	429a      	cmp	r2, r3
 8006516:	d802      	bhi.n	800651e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006518:	4a1c      	ldr	r2, [pc, #112]	; (800658c <prvAddNewTaskToReadyList+0xbc>)
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800651e:	4b1d      	ldr	r3, [pc, #116]	; (8006594 <prvAddNewTaskToReadyList+0xc4>)
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	3301      	adds	r3, #1
 8006524:	4a1b      	ldr	r2, [pc, #108]	; (8006594 <prvAddNewTaskToReadyList+0xc4>)
 8006526:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800652c:	2201      	movs	r2, #1
 800652e:	409a      	lsls	r2, r3
 8006530:	4b19      	ldr	r3, [pc, #100]	; (8006598 <prvAddNewTaskToReadyList+0xc8>)
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	4313      	orrs	r3, r2
 8006536:	4a18      	ldr	r2, [pc, #96]	; (8006598 <prvAddNewTaskToReadyList+0xc8>)
 8006538:	6013      	str	r3, [r2, #0]
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800653e:	4613      	mov	r3, r2
 8006540:	009b      	lsls	r3, r3, #2
 8006542:	4413      	add	r3, r2
 8006544:	009b      	lsls	r3, r3, #2
 8006546:	4a15      	ldr	r2, [pc, #84]	; (800659c <prvAddNewTaskToReadyList+0xcc>)
 8006548:	441a      	add	r2, r3
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	3304      	adds	r3, #4
 800654e:	4619      	mov	r1, r3
 8006550:	4610      	mov	r0, r2
 8006552:	f7fe fe2b 	bl	80051ac <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006556:	f001 f80d 	bl	8007574 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800655a:	4b0d      	ldr	r3, [pc, #52]	; (8006590 <prvAddNewTaskToReadyList+0xc0>)
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d00e      	beq.n	8006580 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006562:	4b0a      	ldr	r3, [pc, #40]	; (800658c <prvAddNewTaskToReadyList+0xbc>)
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800656c:	429a      	cmp	r2, r3
 800656e:	d207      	bcs.n	8006580 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006570:	4b0b      	ldr	r3, [pc, #44]	; (80065a0 <prvAddNewTaskToReadyList+0xd0>)
 8006572:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006576:	601a      	str	r2, [r3, #0]
 8006578:	f3bf 8f4f 	dsb	sy
 800657c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006580:	bf00      	nop
 8006582:	3708      	adds	r7, #8
 8006584:	46bd      	mov	sp, r7
 8006586:	bd80      	pop	{r7, pc}
 8006588:	20005160 	.word	0x20005160
 800658c:	20005060 	.word	0x20005060
 8006590:	2000516c 	.word	0x2000516c
 8006594:	2000517c 	.word	0x2000517c
 8006598:	20005168 	.word	0x20005168
 800659c:	20005064 	.word	0x20005064
 80065a0:	e000ed04 	.word	0xe000ed04

080065a4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80065a4:	b580      	push	{r7, lr}
 80065a6:	b084      	sub	sp, #16
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80065ac:	2300      	movs	r3, #0
 80065ae:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d017      	beq.n	80065e6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80065b6:	4b13      	ldr	r3, [pc, #76]	; (8006604 <vTaskDelay+0x60>)
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d00a      	beq.n	80065d4 <vTaskDelay+0x30>
	__asm volatile
 80065be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065c2:	f383 8811 	msr	BASEPRI, r3
 80065c6:	f3bf 8f6f 	isb	sy
 80065ca:	f3bf 8f4f 	dsb	sy
 80065ce:	60bb      	str	r3, [r7, #8]
}
 80065d0:	bf00      	nop
 80065d2:	e7fe      	b.n	80065d2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80065d4:	f000 f884 	bl	80066e0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80065d8:	2100      	movs	r1, #0
 80065da:	6878      	ldr	r0, [r7, #4]
 80065dc:	f000 fe06 	bl	80071ec <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80065e0:	f000 f88c 	bl	80066fc <xTaskResumeAll>
 80065e4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d107      	bne.n	80065fc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80065ec:	4b06      	ldr	r3, [pc, #24]	; (8006608 <vTaskDelay+0x64>)
 80065ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80065f2:	601a      	str	r2, [r3, #0]
 80065f4:	f3bf 8f4f 	dsb	sy
 80065f8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80065fc:	bf00      	nop
 80065fe:	3710      	adds	r7, #16
 8006600:	46bd      	mov	sp, r7
 8006602:	bd80      	pop	{r7, pc}
 8006604:	20005188 	.word	0x20005188
 8006608:	e000ed04 	.word	0xe000ed04

0800660c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800660c:	b580      	push	{r7, lr}
 800660e:	b08a      	sub	sp, #40	; 0x28
 8006610:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006612:	2300      	movs	r3, #0
 8006614:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006616:	2300      	movs	r3, #0
 8006618:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800661a:	463a      	mov	r2, r7
 800661c:	1d39      	adds	r1, r7, #4
 800661e:	f107 0308 	add.w	r3, r7, #8
 8006622:	4618      	mov	r0, r3
 8006624:	f7f9 ffb6 	bl	8000594 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006628:	6839      	ldr	r1, [r7, #0]
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	68ba      	ldr	r2, [r7, #8]
 800662e:	9202      	str	r2, [sp, #8]
 8006630:	9301      	str	r3, [sp, #4]
 8006632:	2300      	movs	r3, #0
 8006634:	9300      	str	r3, [sp, #0]
 8006636:	2300      	movs	r3, #0
 8006638:	460a      	mov	r2, r1
 800663a:	4921      	ldr	r1, [pc, #132]	; (80066c0 <vTaskStartScheduler+0xb4>)
 800663c:	4821      	ldr	r0, [pc, #132]	; (80066c4 <vTaskStartScheduler+0xb8>)
 800663e:	f7ff fe07 	bl	8006250 <xTaskCreateStatic>
 8006642:	4603      	mov	r3, r0
 8006644:	4a20      	ldr	r2, [pc, #128]	; (80066c8 <vTaskStartScheduler+0xbc>)
 8006646:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006648:	4b1f      	ldr	r3, [pc, #124]	; (80066c8 <vTaskStartScheduler+0xbc>)
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	2b00      	cmp	r3, #0
 800664e:	d002      	beq.n	8006656 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006650:	2301      	movs	r3, #1
 8006652:	617b      	str	r3, [r7, #20]
 8006654:	e001      	b.n	800665a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006656:	2300      	movs	r3, #0
 8006658:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800665a:	697b      	ldr	r3, [r7, #20]
 800665c:	2b01      	cmp	r3, #1
 800665e:	d11b      	bne.n	8006698 <vTaskStartScheduler+0x8c>
	__asm volatile
 8006660:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006664:	f383 8811 	msr	BASEPRI, r3
 8006668:	f3bf 8f6f 	isb	sy
 800666c:	f3bf 8f4f 	dsb	sy
 8006670:	613b      	str	r3, [r7, #16]
}
 8006672:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006674:	4b15      	ldr	r3, [pc, #84]	; (80066cc <vTaskStartScheduler+0xc0>)
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	334c      	adds	r3, #76	; 0x4c
 800667a:	4a15      	ldr	r2, [pc, #84]	; (80066d0 <vTaskStartScheduler+0xc4>)
 800667c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800667e:	4b15      	ldr	r3, [pc, #84]	; (80066d4 <vTaskStartScheduler+0xc8>)
 8006680:	f04f 32ff 	mov.w	r2, #4294967295
 8006684:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006686:	4b14      	ldr	r3, [pc, #80]	; (80066d8 <vTaskStartScheduler+0xcc>)
 8006688:	2201      	movs	r2, #1
 800668a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800668c:	4b13      	ldr	r3, [pc, #76]	; (80066dc <vTaskStartScheduler+0xd0>)
 800668e:	2200      	movs	r2, #0
 8006690:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006692:	f000 fe9d 	bl	80073d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006696:	e00e      	b.n	80066b6 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006698:	697b      	ldr	r3, [r7, #20]
 800669a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800669e:	d10a      	bne.n	80066b6 <vTaskStartScheduler+0xaa>
	__asm volatile
 80066a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066a4:	f383 8811 	msr	BASEPRI, r3
 80066a8:	f3bf 8f6f 	isb	sy
 80066ac:	f3bf 8f4f 	dsb	sy
 80066b0:	60fb      	str	r3, [r7, #12]
}
 80066b2:	bf00      	nop
 80066b4:	e7fe      	b.n	80066b4 <vTaskStartScheduler+0xa8>
}
 80066b6:	bf00      	nop
 80066b8:	3718      	adds	r7, #24
 80066ba:	46bd      	mov	sp, r7
 80066bc:	bd80      	pop	{r7, pc}
 80066be:	bf00      	nop
 80066c0:	080185d8 	.word	0x080185d8
 80066c4:	08006cc1 	.word	0x08006cc1
 80066c8:	20005184 	.word	0x20005184
 80066cc:	20005060 	.word	0x20005060
 80066d0:	20000034 	.word	0x20000034
 80066d4:	20005180 	.word	0x20005180
 80066d8:	2000516c 	.word	0x2000516c
 80066dc:	20005164 	.word	0x20005164

080066e0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80066e0:	b480      	push	{r7}
 80066e2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80066e4:	4b04      	ldr	r3, [pc, #16]	; (80066f8 <vTaskSuspendAll+0x18>)
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	3301      	adds	r3, #1
 80066ea:	4a03      	ldr	r2, [pc, #12]	; (80066f8 <vTaskSuspendAll+0x18>)
 80066ec:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80066ee:	bf00      	nop
 80066f0:	46bd      	mov	sp, r7
 80066f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f6:	4770      	bx	lr
 80066f8:	20005188 	.word	0x20005188

080066fc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80066fc:	b580      	push	{r7, lr}
 80066fe:	b084      	sub	sp, #16
 8006700:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006702:	2300      	movs	r3, #0
 8006704:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006706:	2300      	movs	r3, #0
 8006708:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800670a:	4b41      	ldr	r3, [pc, #260]	; (8006810 <xTaskResumeAll+0x114>)
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d10a      	bne.n	8006728 <xTaskResumeAll+0x2c>
	__asm volatile
 8006712:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006716:	f383 8811 	msr	BASEPRI, r3
 800671a:	f3bf 8f6f 	isb	sy
 800671e:	f3bf 8f4f 	dsb	sy
 8006722:	603b      	str	r3, [r7, #0]
}
 8006724:	bf00      	nop
 8006726:	e7fe      	b.n	8006726 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006728:	f000 fef4 	bl	8007514 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800672c:	4b38      	ldr	r3, [pc, #224]	; (8006810 <xTaskResumeAll+0x114>)
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	3b01      	subs	r3, #1
 8006732:	4a37      	ldr	r2, [pc, #220]	; (8006810 <xTaskResumeAll+0x114>)
 8006734:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006736:	4b36      	ldr	r3, [pc, #216]	; (8006810 <xTaskResumeAll+0x114>)
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d161      	bne.n	8006802 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800673e:	4b35      	ldr	r3, [pc, #212]	; (8006814 <xTaskResumeAll+0x118>)
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	2b00      	cmp	r3, #0
 8006744:	d05d      	beq.n	8006802 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006746:	e02e      	b.n	80067a6 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006748:	4b33      	ldr	r3, [pc, #204]	; (8006818 <xTaskResumeAll+0x11c>)
 800674a:	68db      	ldr	r3, [r3, #12]
 800674c:	68db      	ldr	r3, [r3, #12]
 800674e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	3318      	adds	r3, #24
 8006754:	4618      	mov	r0, r3
 8006756:	f7fe fd86 	bl	8005266 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	3304      	adds	r3, #4
 800675e:	4618      	mov	r0, r3
 8006760:	f7fe fd81 	bl	8005266 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006768:	2201      	movs	r2, #1
 800676a:	409a      	lsls	r2, r3
 800676c:	4b2b      	ldr	r3, [pc, #172]	; (800681c <xTaskResumeAll+0x120>)
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	4313      	orrs	r3, r2
 8006772:	4a2a      	ldr	r2, [pc, #168]	; (800681c <xTaskResumeAll+0x120>)
 8006774:	6013      	str	r3, [r2, #0]
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800677a:	4613      	mov	r3, r2
 800677c:	009b      	lsls	r3, r3, #2
 800677e:	4413      	add	r3, r2
 8006780:	009b      	lsls	r3, r3, #2
 8006782:	4a27      	ldr	r2, [pc, #156]	; (8006820 <xTaskResumeAll+0x124>)
 8006784:	441a      	add	r2, r3
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	3304      	adds	r3, #4
 800678a:	4619      	mov	r1, r3
 800678c:	4610      	mov	r0, r2
 800678e:	f7fe fd0d 	bl	80051ac <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006796:	4b23      	ldr	r3, [pc, #140]	; (8006824 <xTaskResumeAll+0x128>)
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800679c:	429a      	cmp	r2, r3
 800679e:	d302      	bcc.n	80067a6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80067a0:	4b21      	ldr	r3, [pc, #132]	; (8006828 <xTaskResumeAll+0x12c>)
 80067a2:	2201      	movs	r2, #1
 80067a4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80067a6:	4b1c      	ldr	r3, [pc, #112]	; (8006818 <xTaskResumeAll+0x11c>)
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d1cc      	bne.n	8006748 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d001      	beq.n	80067b8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80067b4:	f000 fb3e 	bl	8006e34 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80067b8:	4b1c      	ldr	r3, [pc, #112]	; (800682c <xTaskResumeAll+0x130>)
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d010      	beq.n	80067e6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80067c4:	f000 f858 	bl	8006878 <xTaskIncrementTick>
 80067c8:	4603      	mov	r3, r0
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d002      	beq.n	80067d4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80067ce:	4b16      	ldr	r3, [pc, #88]	; (8006828 <xTaskResumeAll+0x12c>)
 80067d0:	2201      	movs	r2, #1
 80067d2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	3b01      	subs	r3, #1
 80067d8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d1f1      	bne.n	80067c4 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80067e0:	4b12      	ldr	r3, [pc, #72]	; (800682c <xTaskResumeAll+0x130>)
 80067e2:	2200      	movs	r2, #0
 80067e4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80067e6:	4b10      	ldr	r3, [pc, #64]	; (8006828 <xTaskResumeAll+0x12c>)
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d009      	beq.n	8006802 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80067ee:	2301      	movs	r3, #1
 80067f0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80067f2:	4b0f      	ldr	r3, [pc, #60]	; (8006830 <xTaskResumeAll+0x134>)
 80067f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067f8:	601a      	str	r2, [r3, #0]
 80067fa:	f3bf 8f4f 	dsb	sy
 80067fe:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006802:	f000 feb7 	bl	8007574 <vPortExitCritical>

	return xAlreadyYielded;
 8006806:	68bb      	ldr	r3, [r7, #8]
}
 8006808:	4618      	mov	r0, r3
 800680a:	3710      	adds	r7, #16
 800680c:	46bd      	mov	sp, r7
 800680e:	bd80      	pop	{r7, pc}
 8006810:	20005188 	.word	0x20005188
 8006814:	20005160 	.word	0x20005160
 8006818:	20005120 	.word	0x20005120
 800681c:	20005168 	.word	0x20005168
 8006820:	20005064 	.word	0x20005064
 8006824:	20005060 	.word	0x20005060
 8006828:	20005174 	.word	0x20005174
 800682c:	20005170 	.word	0x20005170
 8006830:	e000ed04 	.word	0xe000ed04

08006834 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006834:	b480      	push	{r7}
 8006836:	b083      	sub	sp, #12
 8006838:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800683a:	4b05      	ldr	r3, [pc, #20]	; (8006850 <xTaskGetTickCount+0x1c>)
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006840:	687b      	ldr	r3, [r7, #4]
}
 8006842:	4618      	mov	r0, r3
 8006844:	370c      	adds	r7, #12
 8006846:	46bd      	mov	sp, r7
 8006848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684c:	4770      	bx	lr
 800684e:	bf00      	nop
 8006850:	20005164 	.word	0x20005164

08006854 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8006854:	b580      	push	{r7, lr}
 8006856:	b082      	sub	sp, #8
 8006858:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800685a:	f000 ff3d 	bl	80076d8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800685e:	2300      	movs	r3, #0
 8006860:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8006862:	4b04      	ldr	r3, [pc, #16]	; (8006874 <xTaskGetTickCountFromISR+0x20>)
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006868:	683b      	ldr	r3, [r7, #0]
}
 800686a:	4618      	mov	r0, r3
 800686c:	3708      	adds	r7, #8
 800686e:	46bd      	mov	sp, r7
 8006870:	bd80      	pop	{r7, pc}
 8006872:	bf00      	nop
 8006874:	20005164 	.word	0x20005164

08006878 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006878:	b580      	push	{r7, lr}
 800687a:	b086      	sub	sp, #24
 800687c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800687e:	2300      	movs	r3, #0
 8006880:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006882:	4b4e      	ldr	r3, [pc, #312]	; (80069bc <xTaskIncrementTick+0x144>)
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	2b00      	cmp	r3, #0
 8006888:	f040 808e 	bne.w	80069a8 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800688c:	4b4c      	ldr	r3, [pc, #304]	; (80069c0 <xTaskIncrementTick+0x148>)
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	3301      	adds	r3, #1
 8006892:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006894:	4a4a      	ldr	r2, [pc, #296]	; (80069c0 <xTaskIncrementTick+0x148>)
 8006896:	693b      	ldr	r3, [r7, #16]
 8006898:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800689a:	693b      	ldr	r3, [r7, #16]
 800689c:	2b00      	cmp	r3, #0
 800689e:	d120      	bne.n	80068e2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80068a0:	4b48      	ldr	r3, [pc, #288]	; (80069c4 <xTaskIncrementTick+0x14c>)
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d00a      	beq.n	80068c0 <xTaskIncrementTick+0x48>
	__asm volatile
 80068aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068ae:	f383 8811 	msr	BASEPRI, r3
 80068b2:	f3bf 8f6f 	isb	sy
 80068b6:	f3bf 8f4f 	dsb	sy
 80068ba:	603b      	str	r3, [r7, #0]
}
 80068bc:	bf00      	nop
 80068be:	e7fe      	b.n	80068be <xTaskIncrementTick+0x46>
 80068c0:	4b40      	ldr	r3, [pc, #256]	; (80069c4 <xTaskIncrementTick+0x14c>)
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	60fb      	str	r3, [r7, #12]
 80068c6:	4b40      	ldr	r3, [pc, #256]	; (80069c8 <xTaskIncrementTick+0x150>)
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	4a3e      	ldr	r2, [pc, #248]	; (80069c4 <xTaskIncrementTick+0x14c>)
 80068cc:	6013      	str	r3, [r2, #0]
 80068ce:	4a3e      	ldr	r2, [pc, #248]	; (80069c8 <xTaskIncrementTick+0x150>)
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	6013      	str	r3, [r2, #0]
 80068d4:	4b3d      	ldr	r3, [pc, #244]	; (80069cc <xTaskIncrementTick+0x154>)
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	3301      	adds	r3, #1
 80068da:	4a3c      	ldr	r2, [pc, #240]	; (80069cc <xTaskIncrementTick+0x154>)
 80068dc:	6013      	str	r3, [r2, #0]
 80068de:	f000 faa9 	bl	8006e34 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80068e2:	4b3b      	ldr	r3, [pc, #236]	; (80069d0 <xTaskIncrementTick+0x158>)
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	693a      	ldr	r2, [r7, #16]
 80068e8:	429a      	cmp	r2, r3
 80068ea:	d348      	bcc.n	800697e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80068ec:	4b35      	ldr	r3, [pc, #212]	; (80069c4 <xTaskIncrementTick+0x14c>)
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d104      	bne.n	8006900 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80068f6:	4b36      	ldr	r3, [pc, #216]	; (80069d0 <xTaskIncrementTick+0x158>)
 80068f8:	f04f 32ff 	mov.w	r2, #4294967295
 80068fc:	601a      	str	r2, [r3, #0]
					break;
 80068fe:	e03e      	b.n	800697e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006900:	4b30      	ldr	r3, [pc, #192]	; (80069c4 <xTaskIncrementTick+0x14c>)
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	68db      	ldr	r3, [r3, #12]
 8006906:	68db      	ldr	r3, [r3, #12]
 8006908:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800690a:	68bb      	ldr	r3, [r7, #8]
 800690c:	685b      	ldr	r3, [r3, #4]
 800690e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006910:	693a      	ldr	r2, [r7, #16]
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	429a      	cmp	r2, r3
 8006916:	d203      	bcs.n	8006920 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006918:	4a2d      	ldr	r2, [pc, #180]	; (80069d0 <xTaskIncrementTick+0x158>)
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800691e:	e02e      	b.n	800697e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006920:	68bb      	ldr	r3, [r7, #8]
 8006922:	3304      	adds	r3, #4
 8006924:	4618      	mov	r0, r3
 8006926:	f7fe fc9e 	bl	8005266 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800692a:	68bb      	ldr	r3, [r7, #8]
 800692c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800692e:	2b00      	cmp	r3, #0
 8006930:	d004      	beq.n	800693c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006932:	68bb      	ldr	r3, [r7, #8]
 8006934:	3318      	adds	r3, #24
 8006936:	4618      	mov	r0, r3
 8006938:	f7fe fc95 	bl	8005266 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800693c:	68bb      	ldr	r3, [r7, #8]
 800693e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006940:	2201      	movs	r2, #1
 8006942:	409a      	lsls	r2, r3
 8006944:	4b23      	ldr	r3, [pc, #140]	; (80069d4 <xTaskIncrementTick+0x15c>)
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	4313      	orrs	r3, r2
 800694a:	4a22      	ldr	r2, [pc, #136]	; (80069d4 <xTaskIncrementTick+0x15c>)
 800694c:	6013      	str	r3, [r2, #0]
 800694e:	68bb      	ldr	r3, [r7, #8]
 8006950:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006952:	4613      	mov	r3, r2
 8006954:	009b      	lsls	r3, r3, #2
 8006956:	4413      	add	r3, r2
 8006958:	009b      	lsls	r3, r3, #2
 800695a:	4a1f      	ldr	r2, [pc, #124]	; (80069d8 <xTaskIncrementTick+0x160>)
 800695c:	441a      	add	r2, r3
 800695e:	68bb      	ldr	r3, [r7, #8]
 8006960:	3304      	adds	r3, #4
 8006962:	4619      	mov	r1, r3
 8006964:	4610      	mov	r0, r2
 8006966:	f7fe fc21 	bl	80051ac <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800696a:	68bb      	ldr	r3, [r7, #8]
 800696c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800696e:	4b1b      	ldr	r3, [pc, #108]	; (80069dc <xTaskIncrementTick+0x164>)
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006974:	429a      	cmp	r2, r3
 8006976:	d3b9      	bcc.n	80068ec <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006978:	2301      	movs	r3, #1
 800697a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800697c:	e7b6      	b.n	80068ec <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800697e:	4b17      	ldr	r3, [pc, #92]	; (80069dc <xTaskIncrementTick+0x164>)
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006984:	4914      	ldr	r1, [pc, #80]	; (80069d8 <xTaskIncrementTick+0x160>)
 8006986:	4613      	mov	r3, r2
 8006988:	009b      	lsls	r3, r3, #2
 800698a:	4413      	add	r3, r2
 800698c:	009b      	lsls	r3, r3, #2
 800698e:	440b      	add	r3, r1
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	2b01      	cmp	r3, #1
 8006994:	d901      	bls.n	800699a <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8006996:	2301      	movs	r3, #1
 8006998:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800699a:	4b11      	ldr	r3, [pc, #68]	; (80069e0 <xTaskIncrementTick+0x168>)
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d007      	beq.n	80069b2 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80069a2:	2301      	movs	r3, #1
 80069a4:	617b      	str	r3, [r7, #20]
 80069a6:	e004      	b.n	80069b2 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80069a8:	4b0e      	ldr	r3, [pc, #56]	; (80069e4 <xTaskIncrementTick+0x16c>)
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	3301      	adds	r3, #1
 80069ae:	4a0d      	ldr	r2, [pc, #52]	; (80069e4 <xTaskIncrementTick+0x16c>)
 80069b0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80069b2:	697b      	ldr	r3, [r7, #20]
}
 80069b4:	4618      	mov	r0, r3
 80069b6:	3718      	adds	r7, #24
 80069b8:	46bd      	mov	sp, r7
 80069ba:	bd80      	pop	{r7, pc}
 80069bc:	20005188 	.word	0x20005188
 80069c0:	20005164 	.word	0x20005164
 80069c4:	20005118 	.word	0x20005118
 80069c8:	2000511c 	.word	0x2000511c
 80069cc:	20005178 	.word	0x20005178
 80069d0:	20005180 	.word	0x20005180
 80069d4:	20005168 	.word	0x20005168
 80069d8:	20005064 	.word	0x20005064
 80069dc:	20005060 	.word	0x20005060
 80069e0:	20005174 	.word	0x20005174
 80069e4:	20005170 	.word	0x20005170

080069e8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80069e8:	b480      	push	{r7}
 80069ea:	b087      	sub	sp, #28
 80069ec:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80069ee:	4b29      	ldr	r3, [pc, #164]	; (8006a94 <vTaskSwitchContext+0xac>)
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d003      	beq.n	80069fe <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80069f6:	4b28      	ldr	r3, [pc, #160]	; (8006a98 <vTaskSwitchContext+0xb0>)
 80069f8:	2201      	movs	r2, #1
 80069fa:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80069fc:	e044      	b.n	8006a88 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 80069fe:	4b26      	ldr	r3, [pc, #152]	; (8006a98 <vTaskSwitchContext+0xb0>)
 8006a00:	2200      	movs	r2, #0
 8006a02:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a04:	4b25      	ldr	r3, [pc, #148]	; (8006a9c <vTaskSwitchContext+0xb4>)
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	fab3 f383 	clz	r3, r3
 8006a10:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006a12:	7afb      	ldrb	r3, [r7, #11]
 8006a14:	f1c3 031f 	rsb	r3, r3, #31
 8006a18:	617b      	str	r3, [r7, #20]
 8006a1a:	4921      	ldr	r1, [pc, #132]	; (8006aa0 <vTaskSwitchContext+0xb8>)
 8006a1c:	697a      	ldr	r2, [r7, #20]
 8006a1e:	4613      	mov	r3, r2
 8006a20:	009b      	lsls	r3, r3, #2
 8006a22:	4413      	add	r3, r2
 8006a24:	009b      	lsls	r3, r3, #2
 8006a26:	440b      	add	r3, r1
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d10a      	bne.n	8006a44 <vTaskSwitchContext+0x5c>
	__asm volatile
 8006a2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a32:	f383 8811 	msr	BASEPRI, r3
 8006a36:	f3bf 8f6f 	isb	sy
 8006a3a:	f3bf 8f4f 	dsb	sy
 8006a3e:	607b      	str	r3, [r7, #4]
}
 8006a40:	bf00      	nop
 8006a42:	e7fe      	b.n	8006a42 <vTaskSwitchContext+0x5a>
 8006a44:	697a      	ldr	r2, [r7, #20]
 8006a46:	4613      	mov	r3, r2
 8006a48:	009b      	lsls	r3, r3, #2
 8006a4a:	4413      	add	r3, r2
 8006a4c:	009b      	lsls	r3, r3, #2
 8006a4e:	4a14      	ldr	r2, [pc, #80]	; (8006aa0 <vTaskSwitchContext+0xb8>)
 8006a50:	4413      	add	r3, r2
 8006a52:	613b      	str	r3, [r7, #16]
 8006a54:	693b      	ldr	r3, [r7, #16]
 8006a56:	685b      	ldr	r3, [r3, #4]
 8006a58:	685a      	ldr	r2, [r3, #4]
 8006a5a:	693b      	ldr	r3, [r7, #16]
 8006a5c:	605a      	str	r2, [r3, #4]
 8006a5e:	693b      	ldr	r3, [r7, #16]
 8006a60:	685a      	ldr	r2, [r3, #4]
 8006a62:	693b      	ldr	r3, [r7, #16]
 8006a64:	3308      	adds	r3, #8
 8006a66:	429a      	cmp	r2, r3
 8006a68:	d104      	bne.n	8006a74 <vTaskSwitchContext+0x8c>
 8006a6a:	693b      	ldr	r3, [r7, #16]
 8006a6c:	685b      	ldr	r3, [r3, #4]
 8006a6e:	685a      	ldr	r2, [r3, #4]
 8006a70:	693b      	ldr	r3, [r7, #16]
 8006a72:	605a      	str	r2, [r3, #4]
 8006a74:	693b      	ldr	r3, [r7, #16]
 8006a76:	685b      	ldr	r3, [r3, #4]
 8006a78:	68db      	ldr	r3, [r3, #12]
 8006a7a:	4a0a      	ldr	r2, [pc, #40]	; (8006aa4 <vTaskSwitchContext+0xbc>)
 8006a7c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006a7e:	4b09      	ldr	r3, [pc, #36]	; (8006aa4 <vTaskSwitchContext+0xbc>)
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	334c      	adds	r3, #76	; 0x4c
 8006a84:	4a08      	ldr	r2, [pc, #32]	; (8006aa8 <vTaskSwitchContext+0xc0>)
 8006a86:	6013      	str	r3, [r2, #0]
}
 8006a88:	bf00      	nop
 8006a8a:	371c      	adds	r7, #28
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a92:	4770      	bx	lr
 8006a94:	20005188 	.word	0x20005188
 8006a98:	20005174 	.word	0x20005174
 8006a9c:	20005168 	.word	0x20005168
 8006aa0:	20005064 	.word	0x20005064
 8006aa4:	20005060 	.word	0x20005060
 8006aa8:	20000034 	.word	0x20000034

08006aac <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006aac:	b580      	push	{r7, lr}
 8006aae:	b084      	sub	sp, #16
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
 8006ab4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d10a      	bne.n	8006ad2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006abc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ac0:	f383 8811 	msr	BASEPRI, r3
 8006ac4:	f3bf 8f6f 	isb	sy
 8006ac8:	f3bf 8f4f 	dsb	sy
 8006acc:	60fb      	str	r3, [r7, #12]
}
 8006ace:	bf00      	nop
 8006ad0:	e7fe      	b.n	8006ad0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006ad2:	4b07      	ldr	r3, [pc, #28]	; (8006af0 <vTaskPlaceOnEventList+0x44>)
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	3318      	adds	r3, #24
 8006ad8:	4619      	mov	r1, r3
 8006ada:	6878      	ldr	r0, [r7, #4]
 8006adc:	f7fe fb8a 	bl	80051f4 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006ae0:	2101      	movs	r1, #1
 8006ae2:	6838      	ldr	r0, [r7, #0]
 8006ae4:	f000 fb82 	bl	80071ec <prvAddCurrentTaskToDelayedList>
}
 8006ae8:	bf00      	nop
 8006aea:	3710      	adds	r7, #16
 8006aec:	46bd      	mov	sp, r7
 8006aee:	bd80      	pop	{r7, pc}
 8006af0:	20005060 	.word	0x20005060

08006af4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b086      	sub	sp, #24
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	68db      	ldr	r3, [r3, #12]
 8006b00:	68db      	ldr	r3, [r3, #12]
 8006b02:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006b04:	693b      	ldr	r3, [r7, #16]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d10a      	bne.n	8006b20 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006b0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b0e:	f383 8811 	msr	BASEPRI, r3
 8006b12:	f3bf 8f6f 	isb	sy
 8006b16:	f3bf 8f4f 	dsb	sy
 8006b1a:	60fb      	str	r3, [r7, #12]
}
 8006b1c:	bf00      	nop
 8006b1e:	e7fe      	b.n	8006b1e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006b20:	693b      	ldr	r3, [r7, #16]
 8006b22:	3318      	adds	r3, #24
 8006b24:	4618      	mov	r0, r3
 8006b26:	f7fe fb9e 	bl	8005266 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006b2a:	4b1d      	ldr	r3, [pc, #116]	; (8006ba0 <xTaskRemoveFromEventList+0xac>)
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d11c      	bne.n	8006b6c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006b32:	693b      	ldr	r3, [r7, #16]
 8006b34:	3304      	adds	r3, #4
 8006b36:	4618      	mov	r0, r3
 8006b38:	f7fe fb95 	bl	8005266 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006b3c:	693b      	ldr	r3, [r7, #16]
 8006b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b40:	2201      	movs	r2, #1
 8006b42:	409a      	lsls	r2, r3
 8006b44:	4b17      	ldr	r3, [pc, #92]	; (8006ba4 <xTaskRemoveFromEventList+0xb0>)
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	4313      	orrs	r3, r2
 8006b4a:	4a16      	ldr	r2, [pc, #88]	; (8006ba4 <xTaskRemoveFromEventList+0xb0>)
 8006b4c:	6013      	str	r3, [r2, #0]
 8006b4e:	693b      	ldr	r3, [r7, #16]
 8006b50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b52:	4613      	mov	r3, r2
 8006b54:	009b      	lsls	r3, r3, #2
 8006b56:	4413      	add	r3, r2
 8006b58:	009b      	lsls	r3, r3, #2
 8006b5a:	4a13      	ldr	r2, [pc, #76]	; (8006ba8 <xTaskRemoveFromEventList+0xb4>)
 8006b5c:	441a      	add	r2, r3
 8006b5e:	693b      	ldr	r3, [r7, #16]
 8006b60:	3304      	adds	r3, #4
 8006b62:	4619      	mov	r1, r3
 8006b64:	4610      	mov	r0, r2
 8006b66:	f7fe fb21 	bl	80051ac <vListInsertEnd>
 8006b6a:	e005      	b.n	8006b78 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006b6c:	693b      	ldr	r3, [r7, #16]
 8006b6e:	3318      	adds	r3, #24
 8006b70:	4619      	mov	r1, r3
 8006b72:	480e      	ldr	r0, [pc, #56]	; (8006bac <xTaskRemoveFromEventList+0xb8>)
 8006b74:	f7fe fb1a 	bl	80051ac <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006b78:	693b      	ldr	r3, [r7, #16]
 8006b7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b7c:	4b0c      	ldr	r3, [pc, #48]	; (8006bb0 <xTaskRemoveFromEventList+0xbc>)
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b82:	429a      	cmp	r2, r3
 8006b84:	d905      	bls.n	8006b92 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006b86:	2301      	movs	r3, #1
 8006b88:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006b8a:	4b0a      	ldr	r3, [pc, #40]	; (8006bb4 <xTaskRemoveFromEventList+0xc0>)
 8006b8c:	2201      	movs	r2, #1
 8006b8e:	601a      	str	r2, [r3, #0]
 8006b90:	e001      	b.n	8006b96 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8006b92:	2300      	movs	r3, #0
 8006b94:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006b96:	697b      	ldr	r3, [r7, #20]
}
 8006b98:	4618      	mov	r0, r3
 8006b9a:	3718      	adds	r7, #24
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	bd80      	pop	{r7, pc}
 8006ba0:	20005188 	.word	0x20005188
 8006ba4:	20005168 	.word	0x20005168
 8006ba8:	20005064 	.word	0x20005064
 8006bac:	20005120 	.word	0x20005120
 8006bb0:	20005060 	.word	0x20005060
 8006bb4:	20005174 	.word	0x20005174

08006bb8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006bb8:	b480      	push	{r7}
 8006bba:	b083      	sub	sp, #12
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006bc0:	4b06      	ldr	r3, [pc, #24]	; (8006bdc <vTaskInternalSetTimeOutState+0x24>)
 8006bc2:	681a      	ldr	r2, [r3, #0]
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006bc8:	4b05      	ldr	r3, [pc, #20]	; (8006be0 <vTaskInternalSetTimeOutState+0x28>)
 8006bca:	681a      	ldr	r2, [r3, #0]
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	605a      	str	r2, [r3, #4]
}
 8006bd0:	bf00      	nop
 8006bd2:	370c      	adds	r7, #12
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bda:	4770      	bx	lr
 8006bdc:	20005178 	.word	0x20005178
 8006be0:	20005164 	.word	0x20005164

08006be4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006be4:	b580      	push	{r7, lr}
 8006be6:	b088      	sub	sp, #32
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
 8006bec:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d10a      	bne.n	8006c0a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006bf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bf8:	f383 8811 	msr	BASEPRI, r3
 8006bfc:	f3bf 8f6f 	isb	sy
 8006c00:	f3bf 8f4f 	dsb	sy
 8006c04:	613b      	str	r3, [r7, #16]
}
 8006c06:	bf00      	nop
 8006c08:	e7fe      	b.n	8006c08 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006c0a:	683b      	ldr	r3, [r7, #0]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d10a      	bne.n	8006c26 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006c10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c14:	f383 8811 	msr	BASEPRI, r3
 8006c18:	f3bf 8f6f 	isb	sy
 8006c1c:	f3bf 8f4f 	dsb	sy
 8006c20:	60fb      	str	r3, [r7, #12]
}
 8006c22:	bf00      	nop
 8006c24:	e7fe      	b.n	8006c24 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006c26:	f000 fc75 	bl	8007514 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006c2a:	4b1d      	ldr	r3, [pc, #116]	; (8006ca0 <xTaskCheckForTimeOut+0xbc>)
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	685b      	ldr	r3, [r3, #4]
 8006c34:	69ba      	ldr	r2, [r7, #24]
 8006c36:	1ad3      	subs	r3, r2, r3
 8006c38:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006c3a:	683b      	ldr	r3, [r7, #0]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c42:	d102      	bne.n	8006c4a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006c44:	2300      	movs	r3, #0
 8006c46:	61fb      	str	r3, [r7, #28]
 8006c48:	e023      	b.n	8006c92 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681a      	ldr	r2, [r3, #0]
 8006c4e:	4b15      	ldr	r3, [pc, #84]	; (8006ca4 <xTaskCheckForTimeOut+0xc0>)
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	429a      	cmp	r2, r3
 8006c54:	d007      	beq.n	8006c66 <xTaskCheckForTimeOut+0x82>
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	685b      	ldr	r3, [r3, #4]
 8006c5a:	69ba      	ldr	r2, [r7, #24]
 8006c5c:	429a      	cmp	r2, r3
 8006c5e:	d302      	bcc.n	8006c66 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006c60:	2301      	movs	r3, #1
 8006c62:	61fb      	str	r3, [r7, #28]
 8006c64:	e015      	b.n	8006c92 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006c66:	683b      	ldr	r3, [r7, #0]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	697a      	ldr	r2, [r7, #20]
 8006c6c:	429a      	cmp	r2, r3
 8006c6e:	d20b      	bcs.n	8006c88 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006c70:	683b      	ldr	r3, [r7, #0]
 8006c72:	681a      	ldr	r2, [r3, #0]
 8006c74:	697b      	ldr	r3, [r7, #20]
 8006c76:	1ad2      	subs	r2, r2, r3
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006c7c:	6878      	ldr	r0, [r7, #4]
 8006c7e:	f7ff ff9b 	bl	8006bb8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006c82:	2300      	movs	r3, #0
 8006c84:	61fb      	str	r3, [r7, #28]
 8006c86:	e004      	b.n	8006c92 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006c88:	683b      	ldr	r3, [r7, #0]
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006c8e:	2301      	movs	r3, #1
 8006c90:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006c92:	f000 fc6f 	bl	8007574 <vPortExitCritical>

	return xReturn;
 8006c96:	69fb      	ldr	r3, [r7, #28]
}
 8006c98:	4618      	mov	r0, r3
 8006c9a:	3720      	adds	r7, #32
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	bd80      	pop	{r7, pc}
 8006ca0:	20005164 	.word	0x20005164
 8006ca4:	20005178 	.word	0x20005178

08006ca8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006ca8:	b480      	push	{r7}
 8006caa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006cac:	4b03      	ldr	r3, [pc, #12]	; (8006cbc <vTaskMissedYield+0x14>)
 8006cae:	2201      	movs	r2, #1
 8006cb0:	601a      	str	r2, [r3, #0]
}
 8006cb2:	bf00      	nop
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cba:	4770      	bx	lr
 8006cbc:	20005174 	.word	0x20005174

08006cc0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006cc0:	b580      	push	{r7, lr}
 8006cc2:	b082      	sub	sp, #8
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006cc8:	f000 f852 	bl	8006d70 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006ccc:	4b06      	ldr	r3, [pc, #24]	; (8006ce8 <prvIdleTask+0x28>)
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	2b01      	cmp	r3, #1
 8006cd2:	d9f9      	bls.n	8006cc8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006cd4:	4b05      	ldr	r3, [pc, #20]	; (8006cec <prvIdleTask+0x2c>)
 8006cd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006cda:	601a      	str	r2, [r3, #0]
 8006cdc:	f3bf 8f4f 	dsb	sy
 8006ce0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006ce4:	e7f0      	b.n	8006cc8 <prvIdleTask+0x8>
 8006ce6:	bf00      	nop
 8006ce8:	20005064 	.word	0x20005064
 8006cec:	e000ed04 	.word	0xe000ed04

08006cf0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006cf0:	b580      	push	{r7, lr}
 8006cf2:	b082      	sub	sp, #8
 8006cf4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	607b      	str	r3, [r7, #4]
 8006cfa:	e00c      	b.n	8006d16 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006cfc:	687a      	ldr	r2, [r7, #4]
 8006cfe:	4613      	mov	r3, r2
 8006d00:	009b      	lsls	r3, r3, #2
 8006d02:	4413      	add	r3, r2
 8006d04:	009b      	lsls	r3, r3, #2
 8006d06:	4a12      	ldr	r2, [pc, #72]	; (8006d50 <prvInitialiseTaskLists+0x60>)
 8006d08:	4413      	add	r3, r2
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	f7fe fa21 	bl	8005152 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	3301      	adds	r3, #1
 8006d14:	607b      	str	r3, [r7, #4]
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	2b06      	cmp	r3, #6
 8006d1a:	d9ef      	bls.n	8006cfc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006d1c:	480d      	ldr	r0, [pc, #52]	; (8006d54 <prvInitialiseTaskLists+0x64>)
 8006d1e:	f7fe fa18 	bl	8005152 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006d22:	480d      	ldr	r0, [pc, #52]	; (8006d58 <prvInitialiseTaskLists+0x68>)
 8006d24:	f7fe fa15 	bl	8005152 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006d28:	480c      	ldr	r0, [pc, #48]	; (8006d5c <prvInitialiseTaskLists+0x6c>)
 8006d2a:	f7fe fa12 	bl	8005152 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006d2e:	480c      	ldr	r0, [pc, #48]	; (8006d60 <prvInitialiseTaskLists+0x70>)
 8006d30:	f7fe fa0f 	bl	8005152 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006d34:	480b      	ldr	r0, [pc, #44]	; (8006d64 <prvInitialiseTaskLists+0x74>)
 8006d36:	f7fe fa0c 	bl	8005152 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006d3a:	4b0b      	ldr	r3, [pc, #44]	; (8006d68 <prvInitialiseTaskLists+0x78>)
 8006d3c:	4a05      	ldr	r2, [pc, #20]	; (8006d54 <prvInitialiseTaskLists+0x64>)
 8006d3e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006d40:	4b0a      	ldr	r3, [pc, #40]	; (8006d6c <prvInitialiseTaskLists+0x7c>)
 8006d42:	4a05      	ldr	r2, [pc, #20]	; (8006d58 <prvInitialiseTaskLists+0x68>)
 8006d44:	601a      	str	r2, [r3, #0]
}
 8006d46:	bf00      	nop
 8006d48:	3708      	adds	r7, #8
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	bd80      	pop	{r7, pc}
 8006d4e:	bf00      	nop
 8006d50:	20005064 	.word	0x20005064
 8006d54:	200050f0 	.word	0x200050f0
 8006d58:	20005104 	.word	0x20005104
 8006d5c:	20005120 	.word	0x20005120
 8006d60:	20005134 	.word	0x20005134
 8006d64:	2000514c 	.word	0x2000514c
 8006d68:	20005118 	.word	0x20005118
 8006d6c:	2000511c 	.word	0x2000511c

08006d70 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b082      	sub	sp, #8
 8006d74:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006d76:	e019      	b.n	8006dac <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006d78:	f000 fbcc 	bl	8007514 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d7c:	4b10      	ldr	r3, [pc, #64]	; (8006dc0 <prvCheckTasksWaitingTermination+0x50>)
 8006d7e:	68db      	ldr	r3, [r3, #12]
 8006d80:	68db      	ldr	r3, [r3, #12]
 8006d82:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	3304      	adds	r3, #4
 8006d88:	4618      	mov	r0, r3
 8006d8a:	f7fe fa6c 	bl	8005266 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006d8e:	4b0d      	ldr	r3, [pc, #52]	; (8006dc4 <prvCheckTasksWaitingTermination+0x54>)
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	3b01      	subs	r3, #1
 8006d94:	4a0b      	ldr	r2, [pc, #44]	; (8006dc4 <prvCheckTasksWaitingTermination+0x54>)
 8006d96:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006d98:	4b0b      	ldr	r3, [pc, #44]	; (8006dc8 <prvCheckTasksWaitingTermination+0x58>)
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	3b01      	subs	r3, #1
 8006d9e:	4a0a      	ldr	r2, [pc, #40]	; (8006dc8 <prvCheckTasksWaitingTermination+0x58>)
 8006da0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006da2:	f000 fbe7 	bl	8007574 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006da6:	6878      	ldr	r0, [r7, #4]
 8006da8:	f000 f810 	bl	8006dcc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006dac:	4b06      	ldr	r3, [pc, #24]	; (8006dc8 <prvCheckTasksWaitingTermination+0x58>)
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d1e1      	bne.n	8006d78 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006db4:	bf00      	nop
 8006db6:	bf00      	nop
 8006db8:	3708      	adds	r7, #8
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	bd80      	pop	{r7, pc}
 8006dbe:	bf00      	nop
 8006dc0:	20005134 	.word	0x20005134
 8006dc4:	20005160 	.word	0x20005160
 8006dc8:	20005148 	.word	0x20005148

08006dcc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006dcc:	b580      	push	{r7, lr}
 8006dce:	b084      	sub	sp, #16
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	334c      	adds	r3, #76	; 0x4c
 8006dd8:	4618      	mov	r0, r3
 8006dda:	f010 fcbf 	bl	801775c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d108      	bne.n	8006dfa <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dec:	4618      	mov	r0, r3
 8006dee:	f000 fd7f 	bl	80078f0 <vPortFree>
				vPortFree( pxTCB );
 8006df2:	6878      	ldr	r0, [r7, #4]
 8006df4:	f000 fd7c 	bl	80078f0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006df8:	e018      	b.n	8006e2c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8006e00:	2b01      	cmp	r3, #1
 8006e02:	d103      	bne.n	8006e0c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006e04:	6878      	ldr	r0, [r7, #4]
 8006e06:	f000 fd73 	bl	80078f0 <vPortFree>
	}
 8006e0a:	e00f      	b.n	8006e2c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8006e12:	2b02      	cmp	r3, #2
 8006e14:	d00a      	beq.n	8006e2c <prvDeleteTCB+0x60>
	__asm volatile
 8006e16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e1a:	f383 8811 	msr	BASEPRI, r3
 8006e1e:	f3bf 8f6f 	isb	sy
 8006e22:	f3bf 8f4f 	dsb	sy
 8006e26:	60fb      	str	r3, [r7, #12]
}
 8006e28:	bf00      	nop
 8006e2a:	e7fe      	b.n	8006e2a <prvDeleteTCB+0x5e>
	}
 8006e2c:	bf00      	nop
 8006e2e:	3710      	adds	r7, #16
 8006e30:	46bd      	mov	sp, r7
 8006e32:	bd80      	pop	{r7, pc}

08006e34 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006e34:	b480      	push	{r7}
 8006e36:	b083      	sub	sp, #12
 8006e38:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006e3a:	4b0c      	ldr	r3, [pc, #48]	; (8006e6c <prvResetNextTaskUnblockTime+0x38>)
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d104      	bne.n	8006e4e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006e44:	4b0a      	ldr	r3, [pc, #40]	; (8006e70 <prvResetNextTaskUnblockTime+0x3c>)
 8006e46:	f04f 32ff 	mov.w	r2, #4294967295
 8006e4a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006e4c:	e008      	b.n	8006e60 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e4e:	4b07      	ldr	r3, [pc, #28]	; (8006e6c <prvResetNextTaskUnblockTime+0x38>)
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	68db      	ldr	r3, [r3, #12]
 8006e54:	68db      	ldr	r3, [r3, #12]
 8006e56:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	685b      	ldr	r3, [r3, #4]
 8006e5c:	4a04      	ldr	r2, [pc, #16]	; (8006e70 <prvResetNextTaskUnblockTime+0x3c>)
 8006e5e:	6013      	str	r3, [r2, #0]
}
 8006e60:	bf00      	nop
 8006e62:	370c      	adds	r7, #12
 8006e64:	46bd      	mov	sp, r7
 8006e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6a:	4770      	bx	lr
 8006e6c:	20005118 	.word	0x20005118
 8006e70:	20005180 	.word	0x20005180

08006e74 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006e74:	b480      	push	{r7}
 8006e76:	b083      	sub	sp, #12
 8006e78:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006e7a:	4b0b      	ldr	r3, [pc, #44]	; (8006ea8 <xTaskGetSchedulerState+0x34>)
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d102      	bne.n	8006e88 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006e82:	2301      	movs	r3, #1
 8006e84:	607b      	str	r3, [r7, #4]
 8006e86:	e008      	b.n	8006e9a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006e88:	4b08      	ldr	r3, [pc, #32]	; (8006eac <xTaskGetSchedulerState+0x38>)
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d102      	bne.n	8006e96 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006e90:	2302      	movs	r3, #2
 8006e92:	607b      	str	r3, [r7, #4]
 8006e94:	e001      	b.n	8006e9a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006e96:	2300      	movs	r3, #0
 8006e98:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006e9a:	687b      	ldr	r3, [r7, #4]
	}
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	370c      	adds	r7, #12
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea6:	4770      	bx	lr
 8006ea8:	2000516c 	.word	0x2000516c
 8006eac:	20005188 	.word	0x20005188

08006eb0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8006eb0:	b580      	push	{r7, lr}
 8006eb2:	b084      	sub	sp, #16
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8006ebc:	2300      	movs	r3, #0
 8006ebe:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d05e      	beq.n	8006f84 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8006ec6:	68bb      	ldr	r3, [r7, #8]
 8006ec8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006eca:	4b31      	ldr	r3, [pc, #196]	; (8006f90 <xTaskPriorityInherit+0xe0>)
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ed0:	429a      	cmp	r2, r3
 8006ed2:	d24e      	bcs.n	8006f72 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006ed4:	68bb      	ldr	r3, [r7, #8]
 8006ed6:	699b      	ldr	r3, [r3, #24]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	db06      	blt.n	8006eea <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006edc:	4b2c      	ldr	r3, [pc, #176]	; (8006f90 <xTaskPriorityInherit+0xe0>)
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ee2:	f1c3 0207 	rsb	r2, r3, #7
 8006ee6:	68bb      	ldr	r3, [r7, #8]
 8006ee8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8006eea:	68bb      	ldr	r3, [r7, #8]
 8006eec:	6959      	ldr	r1, [r3, #20]
 8006eee:	68bb      	ldr	r3, [r7, #8]
 8006ef0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ef2:	4613      	mov	r3, r2
 8006ef4:	009b      	lsls	r3, r3, #2
 8006ef6:	4413      	add	r3, r2
 8006ef8:	009b      	lsls	r3, r3, #2
 8006efa:	4a26      	ldr	r2, [pc, #152]	; (8006f94 <xTaskPriorityInherit+0xe4>)
 8006efc:	4413      	add	r3, r2
 8006efe:	4299      	cmp	r1, r3
 8006f00:	d12f      	bne.n	8006f62 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006f02:	68bb      	ldr	r3, [r7, #8]
 8006f04:	3304      	adds	r3, #4
 8006f06:	4618      	mov	r0, r3
 8006f08:	f7fe f9ad 	bl	8005266 <uxListRemove>
 8006f0c:	4603      	mov	r3, r0
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d10a      	bne.n	8006f28 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8006f12:	68bb      	ldr	r3, [r7, #8]
 8006f14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f16:	2201      	movs	r2, #1
 8006f18:	fa02 f303 	lsl.w	r3, r2, r3
 8006f1c:	43da      	mvns	r2, r3
 8006f1e:	4b1e      	ldr	r3, [pc, #120]	; (8006f98 <xTaskPriorityInherit+0xe8>)
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	4013      	ands	r3, r2
 8006f24:	4a1c      	ldr	r2, [pc, #112]	; (8006f98 <xTaskPriorityInherit+0xe8>)
 8006f26:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006f28:	4b19      	ldr	r3, [pc, #100]	; (8006f90 <xTaskPriorityInherit+0xe0>)
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f2e:	68bb      	ldr	r3, [r7, #8]
 8006f30:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8006f32:	68bb      	ldr	r3, [r7, #8]
 8006f34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f36:	2201      	movs	r2, #1
 8006f38:	409a      	lsls	r2, r3
 8006f3a:	4b17      	ldr	r3, [pc, #92]	; (8006f98 <xTaskPriorityInherit+0xe8>)
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	4313      	orrs	r3, r2
 8006f40:	4a15      	ldr	r2, [pc, #84]	; (8006f98 <xTaskPriorityInherit+0xe8>)
 8006f42:	6013      	str	r3, [r2, #0]
 8006f44:	68bb      	ldr	r3, [r7, #8]
 8006f46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f48:	4613      	mov	r3, r2
 8006f4a:	009b      	lsls	r3, r3, #2
 8006f4c:	4413      	add	r3, r2
 8006f4e:	009b      	lsls	r3, r3, #2
 8006f50:	4a10      	ldr	r2, [pc, #64]	; (8006f94 <xTaskPriorityInherit+0xe4>)
 8006f52:	441a      	add	r2, r3
 8006f54:	68bb      	ldr	r3, [r7, #8]
 8006f56:	3304      	adds	r3, #4
 8006f58:	4619      	mov	r1, r3
 8006f5a:	4610      	mov	r0, r2
 8006f5c:	f7fe f926 	bl	80051ac <vListInsertEnd>
 8006f60:	e004      	b.n	8006f6c <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006f62:	4b0b      	ldr	r3, [pc, #44]	; (8006f90 <xTaskPriorityInherit+0xe0>)
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f68:	68bb      	ldr	r3, [r7, #8]
 8006f6a:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8006f6c:	2301      	movs	r3, #1
 8006f6e:	60fb      	str	r3, [r7, #12]
 8006f70:	e008      	b.n	8006f84 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8006f72:	68bb      	ldr	r3, [r7, #8]
 8006f74:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006f76:	4b06      	ldr	r3, [pc, #24]	; (8006f90 <xTaskPriorityInherit+0xe0>)
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f7c:	429a      	cmp	r2, r3
 8006f7e:	d201      	bcs.n	8006f84 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8006f80:	2301      	movs	r3, #1
 8006f82:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006f84:	68fb      	ldr	r3, [r7, #12]
	}
 8006f86:	4618      	mov	r0, r3
 8006f88:	3710      	adds	r7, #16
 8006f8a:	46bd      	mov	sp, r7
 8006f8c:	bd80      	pop	{r7, pc}
 8006f8e:	bf00      	nop
 8006f90:	20005060 	.word	0x20005060
 8006f94:	20005064 	.word	0x20005064
 8006f98:	20005168 	.word	0x20005168

08006f9c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b086      	sub	sp, #24
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006fa8:	2300      	movs	r3, #0
 8006faa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d06e      	beq.n	8007090 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006fb2:	4b3a      	ldr	r3, [pc, #232]	; (800709c <xTaskPriorityDisinherit+0x100>)
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	693a      	ldr	r2, [r7, #16]
 8006fb8:	429a      	cmp	r2, r3
 8006fba:	d00a      	beq.n	8006fd2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006fbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fc0:	f383 8811 	msr	BASEPRI, r3
 8006fc4:	f3bf 8f6f 	isb	sy
 8006fc8:	f3bf 8f4f 	dsb	sy
 8006fcc:	60fb      	str	r3, [r7, #12]
}
 8006fce:	bf00      	nop
 8006fd0:	e7fe      	b.n	8006fd0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006fd2:	693b      	ldr	r3, [r7, #16]
 8006fd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d10a      	bne.n	8006ff0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006fda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fde:	f383 8811 	msr	BASEPRI, r3
 8006fe2:	f3bf 8f6f 	isb	sy
 8006fe6:	f3bf 8f4f 	dsb	sy
 8006fea:	60bb      	str	r3, [r7, #8]
}
 8006fec:	bf00      	nop
 8006fee:	e7fe      	b.n	8006fee <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006ff0:	693b      	ldr	r3, [r7, #16]
 8006ff2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ff4:	1e5a      	subs	r2, r3, #1
 8006ff6:	693b      	ldr	r3, [r7, #16]
 8006ff8:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006ffa:	693b      	ldr	r3, [r7, #16]
 8006ffc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ffe:	693b      	ldr	r3, [r7, #16]
 8007000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007002:	429a      	cmp	r2, r3
 8007004:	d044      	beq.n	8007090 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007006:	693b      	ldr	r3, [r7, #16]
 8007008:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800700a:	2b00      	cmp	r3, #0
 800700c:	d140      	bne.n	8007090 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800700e:	693b      	ldr	r3, [r7, #16]
 8007010:	3304      	adds	r3, #4
 8007012:	4618      	mov	r0, r3
 8007014:	f7fe f927 	bl	8005266 <uxListRemove>
 8007018:	4603      	mov	r3, r0
 800701a:	2b00      	cmp	r3, #0
 800701c:	d115      	bne.n	800704a <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800701e:	693b      	ldr	r3, [r7, #16]
 8007020:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007022:	491f      	ldr	r1, [pc, #124]	; (80070a0 <xTaskPriorityDisinherit+0x104>)
 8007024:	4613      	mov	r3, r2
 8007026:	009b      	lsls	r3, r3, #2
 8007028:	4413      	add	r3, r2
 800702a:	009b      	lsls	r3, r3, #2
 800702c:	440b      	add	r3, r1
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d10a      	bne.n	800704a <xTaskPriorityDisinherit+0xae>
 8007034:	693b      	ldr	r3, [r7, #16]
 8007036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007038:	2201      	movs	r2, #1
 800703a:	fa02 f303 	lsl.w	r3, r2, r3
 800703e:	43da      	mvns	r2, r3
 8007040:	4b18      	ldr	r3, [pc, #96]	; (80070a4 <xTaskPriorityDisinherit+0x108>)
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	4013      	ands	r3, r2
 8007046:	4a17      	ldr	r2, [pc, #92]	; (80070a4 <xTaskPriorityDisinherit+0x108>)
 8007048:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800704a:	693b      	ldr	r3, [r7, #16]
 800704c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800704e:	693b      	ldr	r3, [r7, #16]
 8007050:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007052:	693b      	ldr	r3, [r7, #16]
 8007054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007056:	f1c3 0207 	rsb	r2, r3, #7
 800705a:	693b      	ldr	r3, [r7, #16]
 800705c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800705e:	693b      	ldr	r3, [r7, #16]
 8007060:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007062:	2201      	movs	r2, #1
 8007064:	409a      	lsls	r2, r3
 8007066:	4b0f      	ldr	r3, [pc, #60]	; (80070a4 <xTaskPriorityDisinherit+0x108>)
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	4313      	orrs	r3, r2
 800706c:	4a0d      	ldr	r2, [pc, #52]	; (80070a4 <xTaskPriorityDisinherit+0x108>)
 800706e:	6013      	str	r3, [r2, #0]
 8007070:	693b      	ldr	r3, [r7, #16]
 8007072:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007074:	4613      	mov	r3, r2
 8007076:	009b      	lsls	r3, r3, #2
 8007078:	4413      	add	r3, r2
 800707a:	009b      	lsls	r3, r3, #2
 800707c:	4a08      	ldr	r2, [pc, #32]	; (80070a0 <xTaskPriorityDisinherit+0x104>)
 800707e:	441a      	add	r2, r3
 8007080:	693b      	ldr	r3, [r7, #16]
 8007082:	3304      	adds	r3, #4
 8007084:	4619      	mov	r1, r3
 8007086:	4610      	mov	r0, r2
 8007088:	f7fe f890 	bl	80051ac <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800708c:	2301      	movs	r3, #1
 800708e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007090:	697b      	ldr	r3, [r7, #20]
	}
 8007092:	4618      	mov	r0, r3
 8007094:	3718      	adds	r7, #24
 8007096:	46bd      	mov	sp, r7
 8007098:	bd80      	pop	{r7, pc}
 800709a:	bf00      	nop
 800709c:	20005060 	.word	0x20005060
 80070a0:	20005064 	.word	0x20005064
 80070a4:	20005168 	.word	0x20005168

080070a8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b088      	sub	sp, #32
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
 80070b0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80070b6:	2301      	movs	r3, #1
 80070b8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d077      	beq.n	80071b0 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80070c0:	69bb      	ldr	r3, [r7, #24]
 80070c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d10a      	bne.n	80070de <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 80070c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070cc:	f383 8811 	msr	BASEPRI, r3
 80070d0:	f3bf 8f6f 	isb	sy
 80070d4:	f3bf 8f4f 	dsb	sy
 80070d8:	60fb      	str	r3, [r7, #12]
}
 80070da:	bf00      	nop
 80070dc:	e7fe      	b.n	80070dc <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80070de:	69bb      	ldr	r3, [r7, #24]
 80070e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070e2:	683a      	ldr	r2, [r7, #0]
 80070e4:	429a      	cmp	r2, r3
 80070e6:	d902      	bls.n	80070ee <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80070e8:	683b      	ldr	r3, [r7, #0]
 80070ea:	61fb      	str	r3, [r7, #28]
 80070ec:	e002      	b.n	80070f4 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80070ee:	69bb      	ldr	r3, [r7, #24]
 80070f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070f2:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80070f4:	69bb      	ldr	r3, [r7, #24]
 80070f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070f8:	69fa      	ldr	r2, [r7, #28]
 80070fa:	429a      	cmp	r2, r3
 80070fc:	d058      	beq.n	80071b0 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80070fe:	69bb      	ldr	r3, [r7, #24]
 8007100:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007102:	697a      	ldr	r2, [r7, #20]
 8007104:	429a      	cmp	r2, r3
 8007106:	d153      	bne.n	80071b0 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8007108:	4b2b      	ldr	r3, [pc, #172]	; (80071b8 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	69ba      	ldr	r2, [r7, #24]
 800710e:	429a      	cmp	r2, r3
 8007110:	d10a      	bne.n	8007128 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8007112:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007116:	f383 8811 	msr	BASEPRI, r3
 800711a:	f3bf 8f6f 	isb	sy
 800711e:	f3bf 8f4f 	dsb	sy
 8007122:	60bb      	str	r3, [r7, #8]
}
 8007124:	bf00      	nop
 8007126:	e7fe      	b.n	8007126 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007128:	69bb      	ldr	r3, [r7, #24]
 800712a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800712c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800712e:	69bb      	ldr	r3, [r7, #24]
 8007130:	69fa      	ldr	r2, [r7, #28]
 8007132:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007134:	69bb      	ldr	r3, [r7, #24]
 8007136:	699b      	ldr	r3, [r3, #24]
 8007138:	2b00      	cmp	r3, #0
 800713a:	db04      	blt.n	8007146 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800713c:	69fb      	ldr	r3, [r7, #28]
 800713e:	f1c3 0207 	rsb	r2, r3, #7
 8007142:	69bb      	ldr	r3, [r7, #24]
 8007144:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007146:	69bb      	ldr	r3, [r7, #24]
 8007148:	6959      	ldr	r1, [r3, #20]
 800714a:	693a      	ldr	r2, [r7, #16]
 800714c:	4613      	mov	r3, r2
 800714e:	009b      	lsls	r3, r3, #2
 8007150:	4413      	add	r3, r2
 8007152:	009b      	lsls	r3, r3, #2
 8007154:	4a19      	ldr	r2, [pc, #100]	; (80071bc <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8007156:	4413      	add	r3, r2
 8007158:	4299      	cmp	r1, r3
 800715a:	d129      	bne.n	80071b0 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800715c:	69bb      	ldr	r3, [r7, #24]
 800715e:	3304      	adds	r3, #4
 8007160:	4618      	mov	r0, r3
 8007162:	f7fe f880 	bl	8005266 <uxListRemove>
 8007166:	4603      	mov	r3, r0
 8007168:	2b00      	cmp	r3, #0
 800716a:	d10a      	bne.n	8007182 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800716c:	69bb      	ldr	r3, [r7, #24]
 800716e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007170:	2201      	movs	r2, #1
 8007172:	fa02 f303 	lsl.w	r3, r2, r3
 8007176:	43da      	mvns	r2, r3
 8007178:	4b11      	ldr	r3, [pc, #68]	; (80071c0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	4013      	ands	r3, r2
 800717e:	4a10      	ldr	r2, [pc, #64]	; (80071c0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8007180:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8007182:	69bb      	ldr	r3, [r7, #24]
 8007184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007186:	2201      	movs	r2, #1
 8007188:	409a      	lsls	r2, r3
 800718a:	4b0d      	ldr	r3, [pc, #52]	; (80071c0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	4313      	orrs	r3, r2
 8007190:	4a0b      	ldr	r2, [pc, #44]	; (80071c0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8007192:	6013      	str	r3, [r2, #0]
 8007194:	69bb      	ldr	r3, [r7, #24]
 8007196:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007198:	4613      	mov	r3, r2
 800719a:	009b      	lsls	r3, r3, #2
 800719c:	4413      	add	r3, r2
 800719e:	009b      	lsls	r3, r3, #2
 80071a0:	4a06      	ldr	r2, [pc, #24]	; (80071bc <vTaskPriorityDisinheritAfterTimeout+0x114>)
 80071a2:	441a      	add	r2, r3
 80071a4:	69bb      	ldr	r3, [r7, #24]
 80071a6:	3304      	adds	r3, #4
 80071a8:	4619      	mov	r1, r3
 80071aa:	4610      	mov	r0, r2
 80071ac:	f7fd fffe 	bl	80051ac <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80071b0:	bf00      	nop
 80071b2:	3720      	adds	r7, #32
 80071b4:	46bd      	mov	sp, r7
 80071b6:	bd80      	pop	{r7, pc}
 80071b8:	20005060 	.word	0x20005060
 80071bc:	20005064 	.word	0x20005064
 80071c0:	20005168 	.word	0x20005168

080071c4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80071c4:	b480      	push	{r7}
 80071c6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80071c8:	4b07      	ldr	r3, [pc, #28]	; (80071e8 <pvTaskIncrementMutexHeldCount+0x24>)
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d004      	beq.n	80071da <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80071d0:	4b05      	ldr	r3, [pc, #20]	; (80071e8 <pvTaskIncrementMutexHeldCount+0x24>)
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80071d6:	3201      	adds	r2, #1
 80071d8:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 80071da:	4b03      	ldr	r3, [pc, #12]	; (80071e8 <pvTaskIncrementMutexHeldCount+0x24>)
 80071dc:	681b      	ldr	r3, [r3, #0]
	}
 80071de:	4618      	mov	r0, r3
 80071e0:	46bd      	mov	sp, r7
 80071e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e6:	4770      	bx	lr
 80071e8:	20005060 	.word	0x20005060

080071ec <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80071ec:	b580      	push	{r7, lr}
 80071ee:	b084      	sub	sp, #16
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
 80071f4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80071f6:	4b29      	ldr	r3, [pc, #164]	; (800729c <prvAddCurrentTaskToDelayedList+0xb0>)
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80071fc:	4b28      	ldr	r3, [pc, #160]	; (80072a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	3304      	adds	r3, #4
 8007202:	4618      	mov	r0, r3
 8007204:	f7fe f82f 	bl	8005266 <uxListRemove>
 8007208:	4603      	mov	r3, r0
 800720a:	2b00      	cmp	r3, #0
 800720c:	d10b      	bne.n	8007226 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800720e:	4b24      	ldr	r3, [pc, #144]	; (80072a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007214:	2201      	movs	r2, #1
 8007216:	fa02 f303 	lsl.w	r3, r2, r3
 800721a:	43da      	mvns	r2, r3
 800721c:	4b21      	ldr	r3, [pc, #132]	; (80072a4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	4013      	ands	r3, r2
 8007222:	4a20      	ldr	r2, [pc, #128]	; (80072a4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007224:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	f1b3 3fff 	cmp.w	r3, #4294967295
 800722c:	d10a      	bne.n	8007244 <prvAddCurrentTaskToDelayedList+0x58>
 800722e:	683b      	ldr	r3, [r7, #0]
 8007230:	2b00      	cmp	r3, #0
 8007232:	d007      	beq.n	8007244 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007234:	4b1a      	ldr	r3, [pc, #104]	; (80072a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	3304      	adds	r3, #4
 800723a:	4619      	mov	r1, r3
 800723c:	481a      	ldr	r0, [pc, #104]	; (80072a8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800723e:	f7fd ffb5 	bl	80051ac <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007242:	e026      	b.n	8007292 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007244:	68fa      	ldr	r2, [r7, #12]
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	4413      	add	r3, r2
 800724a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800724c:	4b14      	ldr	r3, [pc, #80]	; (80072a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	68ba      	ldr	r2, [r7, #8]
 8007252:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007254:	68ba      	ldr	r2, [r7, #8]
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	429a      	cmp	r2, r3
 800725a:	d209      	bcs.n	8007270 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800725c:	4b13      	ldr	r3, [pc, #76]	; (80072ac <prvAddCurrentTaskToDelayedList+0xc0>)
 800725e:	681a      	ldr	r2, [r3, #0]
 8007260:	4b0f      	ldr	r3, [pc, #60]	; (80072a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	3304      	adds	r3, #4
 8007266:	4619      	mov	r1, r3
 8007268:	4610      	mov	r0, r2
 800726a:	f7fd ffc3 	bl	80051f4 <vListInsert>
}
 800726e:	e010      	b.n	8007292 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007270:	4b0f      	ldr	r3, [pc, #60]	; (80072b0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8007272:	681a      	ldr	r2, [r3, #0]
 8007274:	4b0a      	ldr	r3, [pc, #40]	; (80072a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	3304      	adds	r3, #4
 800727a:	4619      	mov	r1, r3
 800727c:	4610      	mov	r0, r2
 800727e:	f7fd ffb9 	bl	80051f4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007282:	4b0c      	ldr	r3, [pc, #48]	; (80072b4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	68ba      	ldr	r2, [r7, #8]
 8007288:	429a      	cmp	r2, r3
 800728a:	d202      	bcs.n	8007292 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800728c:	4a09      	ldr	r2, [pc, #36]	; (80072b4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800728e:	68bb      	ldr	r3, [r7, #8]
 8007290:	6013      	str	r3, [r2, #0]
}
 8007292:	bf00      	nop
 8007294:	3710      	adds	r7, #16
 8007296:	46bd      	mov	sp, r7
 8007298:	bd80      	pop	{r7, pc}
 800729a:	bf00      	nop
 800729c:	20005164 	.word	0x20005164
 80072a0:	20005060 	.word	0x20005060
 80072a4:	20005168 	.word	0x20005168
 80072a8:	2000514c 	.word	0x2000514c
 80072ac:	2000511c 	.word	0x2000511c
 80072b0:	20005118 	.word	0x20005118
 80072b4:	20005180 	.word	0x20005180

080072b8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80072b8:	b480      	push	{r7}
 80072ba:	b085      	sub	sp, #20
 80072bc:	af00      	add	r7, sp, #0
 80072be:	60f8      	str	r0, [r7, #12]
 80072c0:	60b9      	str	r1, [r7, #8]
 80072c2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	3b04      	subs	r3, #4
 80072c8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80072d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	3b04      	subs	r3, #4
 80072d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80072d8:	68bb      	ldr	r3, [r7, #8]
 80072da:	f023 0201 	bic.w	r2, r3, #1
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	3b04      	subs	r3, #4
 80072e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80072e8:	4a0c      	ldr	r2, [pc, #48]	; (800731c <pxPortInitialiseStack+0x64>)
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	3b14      	subs	r3, #20
 80072f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80072f4:	687a      	ldr	r2, [r7, #4]
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	3b04      	subs	r3, #4
 80072fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	f06f 0202 	mvn.w	r2, #2
 8007306:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	3b20      	subs	r3, #32
 800730c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800730e:	68fb      	ldr	r3, [r7, #12]
}
 8007310:	4618      	mov	r0, r3
 8007312:	3714      	adds	r7, #20
 8007314:	46bd      	mov	sp, r7
 8007316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731a:	4770      	bx	lr
 800731c:	08007321 	.word	0x08007321

08007320 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007320:	b480      	push	{r7}
 8007322:	b085      	sub	sp, #20
 8007324:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007326:	2300      	movs	r3, #0
 8007328:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800732a:	4b12      	ldr	r3, [pc, #72]	; (8007374 <prvTaskExitError+0x54>)
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007332:	d00a      	beq.n	800734a <prvTaskExitError+0x2a>
	__asm volatile
 8007334:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007338:	f383 8811 	msr	BASEPRI, r3
 800733c:	f3bf 8f6f 	isb	sy
 8007340:	f3bf 8f4f 	dsb	sy
 8007344:	60fb      	str	r3, [r7, #12]
}
 8007346:	bf00      	nop
 8007348:	e7fe      	b.n	8007348 <prvTaskExitError+0x28>
	__asm volatile
 800734a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800734e:	f383 8811 	msr	BASEPRI, r3
 8007352:	f3bf 8f6f 	isb	sy
 8007356:	f3bf 8f4f 	dsb	sy
 800735a:	60bb      	str	r3, [r7, #8]
}
 800735c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800735e:	bf00      	nop
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	2b00      	cmp	r3, #0
 8007364:	d0fc      	beq.n	8007360 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007366:	bf00      	nop
 8007368:	bf00      	nop
 800736a:	3714      	adds	r7, #20
 800736c:	46bd      	mov	sp, r7
 800736e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007372:	4770      	bx	lr
 8007374:	20000020 	.word	0x20000020
	...

08007380 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007380:	4b07      	ldr	r3, [pc, #28]	; (80073a0 <pxCurrentTCBConst2>)
 8007382:	6819      	ldr	r1, [r3, #0]
 8007384:	6808      	ldr	r0, [r1, #0]
 8007386:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800738a:	f380 8809 	msr	PSP, r0
 800738e:	f3bf 8f6f 	isb	sy
 8007392:	f04f 0000 	mov.w	r0, #0
 8007396:	f380 8811 	msr	BASEPRI, r0
 800739a:	4770      	bx	lr
 800739c:	f3af 8000 	nop.w

080073a0 <pxCurrentTCBConst2>:
 80073a0:	20005060 	.word	0x20005060
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80073a4:	bf00      	nop
 80073a6:	bf00      	nop

080073a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80073a8:	4808      	ldr	r0, [pc, #32]	; (80073cc <prvPortStartFirstTask+0x24>)
 80073aa:	6800      	ldr	r0, [r0, #0]
 80073ac:	6800      	ldr	r0, [r0, #0]
 80073ae:	f380 8808 	msr	MSP, r0
 80073b2:	f04f 0000 	mov.w	r0, #0
 80073b6:	f380 8814 	msr	CONTROL, r0
 80073ba:	b662      	cpsie	i
 80073bc:	b661      	cpsie	f
 80073be:	f3bf 8f4f 	dsb	sy
 80073c2:	f3bf 8f6f 	isb	sy
 80073c6:	df00      	svc	0
 80073c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80073ca:	bf00      	nop
 80073cc:	e000ed08 	.word	0xe000ed08

080073d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80073d0:	b580      	push	{r7, lr}
 80073d2:	b086      	sub	sp, #24
 80073d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80073d6:	4b46      	ldr	r3, [pc, #280]	; (80074f0 <xPortStartScheduler+0x120>)
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	4a46      	ldr	r2, [pc, #280]	; (80074f4 <xPortStartScheduler+0x124>)
 80073dc:	4293      	cmp	r3, r2
 80073de:	d10a      	bne.n	80073f6 <xPortStartScheduler+0x26>
	__asm volatile
 80073e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073e4:	f383 8811 	msr	BASEPRI, r3
 80073e8:	f3bf 8f6f 	isb	sy
 80073ec:	f3bf 8f4f 	dsb	sy
 80073f0:	613b      	str	r3, [r7, #16]
}
 80073f2:	bf00      	nop
 80073f4:	e7fe      	b.n	80073f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80073f6:	4b3e      	ldr	r3, [pc, #248]	; (80074f0 <xPortStartScheduler+0x120>)
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	4a3f      	ldr	r2, [pc, #252]	; (80074f8 <xPortStartScheduler+0x128>)
 80073fc:	4293      	cmp	r3, r2
 80073fe:	d10a      	bne.n	8007416 <xPortStartScheduler+0x46>
	__asm volatile
 8007400:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007404:	f383 8811 	msr	BASEPRI, r3
 8007408:	f3bf 8f6f 	isb	sy
 800740c:	f3bf 8f4f 	dsb	sy
 8007410:	60fb      	str	r3, [r7, #12]
}
 8007412:	bf00      	nop
 8007414:	e7fe      	b.n	8007414 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007416:	4b39      	ldr	r3, [pc, #228]	; (80074fc <xPortStartScheduler+0x12c>)
 8007418:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800741a:	697b      	ldr	r3, [r7, #20]
 800741c:	781b      	ldrb	r3, [r3, #0]
 800741e:	b2db      	uxtb	r3, r3
 8007420:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007422:	697b      	ldr	r3, [r7, #20]
 8007424:	22ff      	movs	r2, #255	; 0xff
 8007426:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007428:	697b      	ldr	r3, [r7, #20]
 800742a:	781b      	ldrb	r3, [r3, #0]
 800742c:	b2db      	uxtb	r3, r3
 800742e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007430:	78fb      	ldrb	r3, [r7, #3]
 8007432:	b2db      	uxtb	r3, r3
 8007434:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007438:	b2da      	uxtb	r2, r3
 800743a:	4b31      	ldr	r3, [pc, #196]	; (8007500 <xPortStartScheduler+0x130>)
 800743c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800743e:	4b31      	ldr	r3, [pc, #196]	; (8007504 <xPortStartScheduler+0x134>)
 8007440:	2207      	movs	r2, #7
 8007442:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007444:	e009      	b.n	800745a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007446:	4b2f      	ldr	r3, [pc, #188]	; (8007504 <xPortStartScheduler+0x134>)
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	3b01      	subs	r3, #1
 800744c:	4a2d      	ldr	r2, [pc, #180]	; (8007504 <xPortStartScheduler+0x134>)
 800744e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007450:	78fb      	ldrb	r3, [r7, #3]
 8007452:	b2db      	uxtb	r3, r3
 8007454:	005b      	lsls	r3, r3, #1
 8007456:	b2db      	uxtb	r3, r3
 8007458:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800745a:	78fb      	ldrb	r3, [r7, #3]
 800745c:	b2db      	uxtb	r3, r3
 800745e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007462:	2b80      	cmp	r3, #128	; 0x80
 8007464:	d0ef      	beq.n	8007446 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007466:	4b27      	ldr	r3, [pc, #156]	; (8007504 <xPortStartScheduler+0x134>)
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	f1c3 0307 	rsb	r3, r3, #7
 800746e:	2b04      	cmp	r3, #4
 8007470:	d00a      	beq.n	8007488 <xPortStartScheduler+0xb8>
	__asm volatile
 8007472:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007476:	f383 8811 	msr	BASEPRI, r3
 800747a:	f3bf 8f6f 	isb	sy
 800747e:	f3bf 8f4f 	dsb	sy
 8007482:	60bb      	str	r3, [r7, #8]
}
 8007484:	bf00      	nop
 8007486:	e7fe      	b.n	8007486 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007488:	4b1e      	ldr	r3, [pc, #120]	; (8007504 <xPortStartScheduler+0x134>)
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	021b      	lsls	r3, r3, #8
 800748e:	4a1d      	ldr	r2, [pc, #116]	; (8007504 <xPortStartScheduler+0x134>)
 8007490:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007492:	4b1c      	ldr	r3, [pc, #112]	; (8007504 <xPortStartScheduler+0x134>)
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800749a:	4a1a      	ldr	r2, [pc, #104]	; (8007504 <xPortStartScheduler+0x134>)
 800749c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	b2da      	uxtb	r2, r3
 80074a2:	697b      	ldr	r3, [r7, #20]
 80074a4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80074a6:	4b18      	ldr	r3, [pc, #96]	; (8007508 <xPortStartScheduler+0x138>)
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	4a17      	ldr	r2, [pc, #92]	; (8007508 <xPortStartScheduler+0x138>)
 80074ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80074b0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80074b2:	4b15      	ldr	r3, [pc, #84]	; (8007508 <xPortStartScheduler+0x138>)
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	4a14      	ldr	r2, [pc, #80]	; (8007508 <xPortStartScheduler+0x138>)
 80074b8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80074bc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80074be:	f000 f8dd 	bl	800767c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80074c2:	4b12      	ldr	r3, [pc, #72]	; (800750c <xPortStartScheduler+0x13c>)
 80074c4:	2200      	movs	r2, #0
 80074c6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80074c8:	f000 f8fc 	bl	80076c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80074cc:	4b10      	ldr	r3, [pc, #64]	; (8007510 <xPortStartScheduler+0x140>)
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	4a0f      	ldr	r2, [pc, #60]	; (8007510 <xPortStartScheduler+0x140>)
 80074d2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80074d6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80074d8:	f7ff ff66 	bl	80073a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80074dc:	f7ff fa84 	bl	80069e8 <vTaskSwitchContext>
	prvTaskExitError();
 80074e0:	f7ff ff1e 	bl	8007320 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80074e4:	2300      	movs	r3, #0
}
 80074e6:	4618      	mov	r0, r3
 80074e8:	3718      	adds	r7, #24
 80074ea:	46bd      	mov	sp, r7
 80074ec:	bd80      	pop	{r7, pc}
 80074ee:	bf00      	nop
 80074f0:	e000ed00 	.word	0xe000ed00
 80074f4:	410fc271 	.word	0x410fc271
 80074f8:	410fc270 	.word	0x410fc270
 80074fc:	e000e400 	.word	0xe000e400
 8007500:	2000518c 	.word	0x2000518c
 8007504:	20005190 	.word	0x20005190
 8007508:	e000ed20 	.word	0xe000ed20
 800750c:	20000020 	.word	0x20000020
 8007510:	e000ef34 	.word	0xe000ef34

08007514 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007514:	b480      	push	{r7}
 8007516:	b083      	sub	sp, #12
 8007518:	af00      	add	r7, sp, #0
	__asm volatile
 800751a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800751e:	f383 8811 	msr	BASEPRI, r3
 8007522:	f3bf 8f6f 	isb	sy
 8007526:	f3bf 8f4f 	dsb	sy
 800752a:	607b      	str	r3, [r7, #4]
}
 800752c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800752e:	4b0f      	ldr	r3, [pc, #60]	; (800756c <vPortEnterCritical+0x58>)
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	3301      	adds	r3, #1
 8007534:	4a0d      	ldr	r2, [pc, #52]	; (800756c <vPortEnterCritical+0x58>)
 8007536:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007538:	4b0c      	ldr	r3, [pc, #48]	; (800756c <vPortEnterCritical+0x58>)
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	2b01      	cmp	r3, #1
 800753e:	d10f      	bne.n	8007560 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007540:	4b0b      	ldr	r3, [pc, #44]	; (8007570 <vPortEnterCritical+0x5c>)
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	b2db      	uxtb	r3, r3
 8007546:	2b00      	cmp	r3, #0
 8007548:	d00a      	beq.n	8007560 <vPortEnterCritical+0x4c>
	__asm volatile
 800754a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800754e:	f383 8811 	msr	BASEPRI, r3
 8007552:	f3bf 8f6f 	isb	sy
 8007556:	f3bf 8f4f 	dsb	sy
 800755a:	603b      	str	r3, [r7, #0]
}
 800755c:	bf00      	nop
 800755e:	e7fe      	b.n	800755e <vPortEnterCritical+0x4a>
	}
}
 8007560:	bf00      	nop
 8007562:	370c      	adds	r7, #12
 8007564:	46bd      	mov	sp, r7
 8007566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756a:	4770      	bx	lr
 800756c:	20000020 	.word	0x20000020
 8007570:	e000ed04 	.word	0xe000ed04

08007574 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007574:	b480      	push	{r7}
 8007576:	b083      	sub	sp, #12
 8007578:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800757a:	4b12      	ldr	r3, [pc, #72]	; (80075c4 <vPortExitCritical+0x50>)
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	2b00      	cmp	r3, #0
 8007580:	d10a      	bne.n	8007598 <vPortExitCritical+0x24>
	__asm volatile
 8007582:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007586:	f383 8811 	msr	BASEPRI, r3
 800758a:	f3bf 8f6f 	isb	sy
 800758e:	f3bf 8f4f 	dsb	sy
 8007592:	607b      	str	r3, [r7, #4]
}
 8007594:	bf00      	nop
 8007596:	e7fe      	b.n	8007596 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007598:	4b0a      	ldr	r3, [pc, #40]	; (80075c4 <vPortExitCritical+0x50>)
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	3b01      	subs	r3, #1
 800759e:	4a09      	ldr	r2, [pc, #36]	; (80075c4 <vPortExitCritical+0x50>)
 80075a0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80075a2:	4b08      	ldr	r3, [pc, #32]	; (80075c4 <vPortExitCritical+0x50>)
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d105      	bne.n	80075b6 <vPortExitCritical+0x42>
 80075aa:	2300      	movs	r3, #0
 80075ac:	603b      	str	r3, [r7, #0]
	__asm volatile
 80075ae:	683b      	ldr	r3, [r7, #0]
 80075b0:	f383 8811 	msr	BASEPRI, r3
}
 80075b4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80075b6:	bf00      	nop
 80075b8:	370c      	adds	r7, #12
 80075ba:	46bd      	mov	sp, r7
 80075bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c0:	4770      	bx	lr
 80075c2:	bf00      	nop
 80075c4:	20000020 	.word	0x20000020
	...

080075d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80075d0:	f3ef 8009 	mrs	r0, PSP
 80075d4:	f3bf 8f6f 	isb	sy
 80075d8:	4b15      	ldr	r3, [pc, #84]	; (8007630 <pxCurrentTCBConst>)
 80075da:	681a      	ldr	r2, [r3, #0]
 80075dc:	f01e 0f10 	tst.w	lr, #16
 80075e0:	bf08      	it	eq
 80075e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80075e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075ea:	6010      	str	r0, [r2, #0]
 80075ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80075f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80075f4:	f380 8811 	msr	BASEPRI, r0
 80075f8:	f3bf 8f4f 	dsb	sy
 80075fc:	f3bf 8f6f 	isb	sy
 8007600:	f7ff f9f2 	bl	80069e8 <vTaskSwitchContext>
 8007604:	f04f 0000 	mov.w	r0, #0
 8007608:	f380 8811 	msr	BASEPRI, r0
 800760c:	bc09      	pop	{r0, r3}
 800760e:	6819      	ldr	r1, [r3, #0]
 8007610:	6808      	ldr	r0, [r1, #0]
 8007612:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007616:	f01e 0f10 	tst.w	lr, #16
 800761a:	bf08      	it	eq
 800761c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007620:	f380 8809 	msr	PSP, r0
 8007624:	f3bf 8f6f 	isb	sy
 8007628:	4770      	bx	lr
 800762a:	bf00      	nop
 800762c:	f3af 8000 	nop.w

08007630 <pxCurrentTCBConst>:
 8007630:	20005060 	.word	0x20005060
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007634:	bf00      	nop
 8007636:	bf00      	nop

08007638 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007638:	b580      	push	{r7, lr}
 800763a:	b082      	sub	sp, #8
 800763c:	af00      	add	r7, sp, #0
	__asm volatile
 800763e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007642:	f383 8811 	msr	BASEPRI, r3
 8007646:	f3bf 8f6f 	isb	sy
 800764a:	f3bf 8f4f 	dsb	sy
 800764e:	607b      	str	r3, [r7, #4]
}
 8007650:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007652:	f7ff f911 	bl	8006878 <xTaskIncrementTick>
 8007656:	4603      	mov	r3, r0
 8007658:	2b00      	cmp	r3, #0
 800765a:	d003      	beq.n	8007664 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800765c:	4b06      	ldr	r3, [pc, #24]	; (8007678 <SysTick_Handler+0x40>)
 800765e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007662:	601a      	str	r2, [r3, #0]
 8007664:	2300      	movs	r3, #0
 8007666:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007668:	683b      	ldr	r3, [r7, #0]
 800766a:	f383 8811 	msr	BASEPRI, r3
}
 800766e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007670:	bf00      	nop
 8007672:	3708      	adds	r7, #8
 8007674:	46bd      	mov	sp, r7
 8007676:	bd80      	pop	{r7, pc}
 8007678:	e000ed04 	.word	0xe000ed04

0800767c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800767c:	b480      	push	{r7}
 800767e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007680:	4b0b      	ldr	r3, [pc, #44]	; (80076b0 <vPortSetupTimerInterrupt+0x34>)
 8007682:	2200      	movs	r2, #0
 8007684:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007686:	4b0b      	ldr	r3, [pc, #44]	; (80076b4 <vPortSetupTimerInterrupt+0x38>)
 8007688:	2200      	movs	r2, #0
 800768a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800768c:	4b0a      	ldr	r3, [pc, #40]	; (80076b8 <vPortSetupTimerInterrupt+0x3c>)
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	4a0a      	ldr	r2, [pc, #40]	; (80076bc <vPortSetupTimerInterrupt+0x40>)
 8007692:	fba2 2303 	umull	r2, r3, r2, r3
 8007696:	099b      	lsrs	r3, r3, #6
 8007698:	4a09      	ldr	r2, [pc, #36]	; (80076c0 <vPortSetupTimerInterrupt+0x44>)
 800769a:	3b01      	subs	r3, #1
 800769c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800769e:	4b04      	ldr	r3, [pc, #16]	; (80076b0 <vPortSetupTimerInterrupt+0x34>)
 80076a0:	2207      	movs	r2, #7
 80076a2:	601a      	str	r2, [r3, #0]
}
 80076a4:	bf00      	nop
 80076a6:	46bd      	mov	sp, r7
 80076a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ac:	4770      	bx	lr
 80076ae:	bf00      	nop
 80076b0:	e000e010 	.word	0xe000e010
 80076b4:	e000e018 	.word	0xe000e018
 80076b8:	20000000 	.word	0x20000000
 80076bc:	10624dd3 	.word	0x10624dd3
 80076c0:	e000e014 	.word	0xe000e014

080076c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80076c4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80076d4 <vPortEnableVFP+0x10>
 80076c8:	6801      	ldr	r1, [r0, #0]
 80076ca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80076ce:	6001      	str	r1, [r0, #0]
 80076d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80076d2:	bf00      	nop
 80076d4:	e000ed88 	.word	0xe000ed88

080076d8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80076d8:	b480      	push	{r7}
 80076da:	b085      	sub	sp, #20
 80076dc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80076de:	f3ef 8305 	mrs	r3, IPSR
 80076e2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	2b0f      	cmp	r3, #15
 80076e8:	d914      	bls.n	8007714 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80076ea:	4a17      	ldr	r2, [pc, #92]	; (8007748 <vPortValidateInterruptPriority+0x70>)
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	4413      	add	r3, r2
 80076f0:	781b      	ldrb	r3, [r3, #0]
 80076f2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80076f4:	4b15      	ldr	r3, [pc, #84]	; (800774c <vPortValidateInterruptPriority+0x74>)
 80076f6:	781b      	ldrb	r3, [r3, #0]
 80076f8:	7afa      	ldrb	r2, [r7, #11]
 80076fa:	429a      	cmp	r2, r3
 80076fc:	d20a      	bcs.n	8007714 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80076fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007702:	f383 8811 	msr	BASEPRI, r3
 8007706:	f3bf 8f6f 	isb	sy
 800770a:	f3bf 8f4f 	dsb	sy
 800770e:	607b      	str	r3, [r7, #4]
}
 8007710:	bf00      	nop
 8007712:	e7fe      	b.n	8007712 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007714:	4b0e      	ldr	r3, [pc, #56]	; (8007750 <vPortValidateInterruptPriority+0x78>)
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800771c:	4b0d      	ldr	r3, [pc, #52]	; (8007754 <vPortValidateInterruptPriority+0x7c>)
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	429a      	cmp	r2, r3
 8007722:	d90a      	bls.n	800773a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007724:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007728:	f383 8811 	msr	BASEPRI, r3
 800772c:	f3bf 8f6f 	isb	sy
 8007730:	f3bf 8f4f 	dsb	sy
 8007734:	603b      	str	r3, [r7, #0]
}
 8007736:	bf00      	nop
 8007738:	e7fe      	b.n	8007738 <vPortValidateInterruptPriority+0x60>
	}
 800773a:	bf00      	nop
 800773c:	3714      	adds	r7, #20
 800773e:	46bd      	mov	sp, r7
 8007740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007744:	4770      	bx	lr
 8007746:	bf00      	nop
 8007748:	e000e3f0 	.word	0xe000e3f0
 800774c:	2000518c 	.word	0x2000518c
 8007750:	e000ed0c 	.word	0xe000ed0c
 8007754:	20005190 	.word	0x20005190

08007758 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007758:	b580      	push	{r7, lr}
 800775a:	b08a      	sub	sp, #40	; 0x28
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007760:	2300      	movs	r3, #0
 8007762:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007764:	f7fe ffbc 	bl	80066e0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007768:	4b5b      	ldr	r3, [pc, #364]	; (80078d8 <pvPortMalloc+0x180>)
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	2b00      	cmp	r3, #0
 800776e:	d101      	bne.n	8007774 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007770:	f000 f920 	bl	80079b4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007774:	4b59      	ldr	r3, [pc, #356]	; (80078dc <pvPortMalloc+0x184>)
 8007776:	681a      	ldr	r2, [r3, #0]
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	4013      	ands	r3, r2
 800777c:	2b00      	cmp	r3, #0
 800777e:	f040 8093 	bne.w	80078a8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	2b00      	cmp	r3, #0
 8007786:	d01d      	beq.n	80077c4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007788:	2208      	movs	r2, #8
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	4413      	add	r3, r2
 800778e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	f003 0307 	and.w	r3, r3, #7
 8007796:	2b00      	cmp	r3, #0
 8007798:	d014      	beq.n	80077c4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	f023 0307 	bic.w	r3, r3, #7
 80077a0:	3308      	adds	r3, #8
 80077a2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	f003 0307 	and.w	r3, r3, #7
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d00a      	beq.n	80077c4 <pvPortMalloc+0x6c>
	__asm volatile
 80077ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077b2:	f383 8811 	msr	BASEPRI, r3
 80077b6:	f3bf 8f6f 	isb	sy
 80077ba:	f3bf 8f4f 	dsb	sy
 80077be:	617b      	str	r3, [r7, #20]
}
 80077c0:	bf00      	nop
 80077c2:	e7fe      	b.n	80077c2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d06e      	beq.n	80078a8 <pvPortMalloc+0x150>
 80077ca:	4b45      	ldr	r3, [pc, #276]	; (80078e0 <pvPortMalloc+0x188>)
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	687a      	ldr	r2, [r7, #4]
 80077d0:	429a      	cmp	r2, r3
 80077d2:	d869      	bhi.n	80078a8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80077d4:	4b43      	ldr	r3, [pc, #268]	; (80078e4 <pvPortMalloc+0x18c>)
 80077d6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80077d8:	4b42      	ldr	r3, [pc, #264]	; (80078e4 <pvPortMalloc+0x18c>)
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80077de:	e004      	b.n	80077ea <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80077e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077e2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80077e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80077ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077ec:	685b      	ldr	r3, [r3, #4]
 80077ee:	687a      	ldr	r2, [r7, #4]
 80077f0:	429a      	cmp	r2, r3
 80077f2:	d903      	bls.n	80077fc <pvPortMalloc+0xa4>
 80077f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d1f1      	bne.n	80077e0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80077fc:	4b36      	ldr	r3, [pc, #216]	; (80078d8 <pvPortMalloc+0x180>)
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007802:	429a      	cmp	r2, r3
 8007804:	d050      	beq.n	80078a8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007806:	6a3b      	ldr	r3, [r7, #32]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	2208      	movs	r2, #8
 800780c:	4413      	add	r3, r2
 800780e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007812:	681a      	ldr	r2, [r3, #0]
 8007814:	6a3b      	ldr	r3, [r7, #32]
 8007816:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800781a:	685a      	ldr	r2, [r3, #4]
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	1ad2      	subs	r2, r2, r3
 8007820:	2308      	movs	r3, #8
 8007822:	005b      	lsls	r3, r3, #1
 8007824:	429a      	cmp	r2, r3
 8007826:	d91f      	bls.n	8007868 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007828:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	4413      	add	r3, r2
 800782e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007830:	69bb      	ldr	r3, [r7, #24]
 8007832:	f003 0307 	and.w	r3, r3, #7
 8007836:	2b00      	cmp	r3, #0
 8007838:	d00a      	beq.n	8007850 <pvPortMalloc+0xf8>
	__asm volatile
 800783a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800783e:	f383 8811 	msr	BASEPRI, r3
 8007842:	f3bf 8f6f 	isb	sy
 8007846:	f3bf 8f4f 	dsb	sy
 800784a:	613b      	str	r3, [r7, #16]
}
 800784c:	bf00      	nop
 800784e:	e7fe      	b.n	800784e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007852:	685a      	ldr	r2, [r3, #4]
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	1ad2      	subs	r2, r2, r3
 8007858:	69bb      	ldr	r3, [r7, #24]
 800785a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800785c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800785e:	687a      	ldr	r2, [r7, #4]
 8007860:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007862:	69b8      	ldr	r0, [r7, #24]
 8007864:	f000 f908 	bl	8007a78 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007868:	4b1d      	ldr	r3, [pc, #116]	; (80078e0 <pvPortMalloc+0x188>)
 800786a:	681a      	ldr	r2, [r3, #0]
 800786c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800786e:	685b      	ldr	r3, [r3, #4]
 8007870:	1ad3      	subs	r3, r2, r3
 8007872:	4a1b      	ldr	r2, [pc, #108]	; (80078e0 <pvPortMalloc+0x188>)
 8007874:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007876:	4b1a      	ldr	r3, [pc, #104]	; (80078e0 <pvPortMalloc+0x188>)
 8007878:	681a      	ldr	r2, [r3, #0]
 800787a:	4b1b      	ldr	r3, [pc, #108]	; (80078e8 <pvPortMalloc+0x190>)
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	429a      	cmp	r2, r3
 8007880:	d203      	bcs.n	800788a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007882:	4b17      	ldr	r3, [pc, #92]	; (80078e0 <pvPortMalloc+0x188>)
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	4a18      	ldr	r2, [pc, #96]	; (80078e8 <pvPortMalloc+0x190>)
 8007888:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800788a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800788c:	685a      	ldr	r2, [r3, #4]
 800788e:	4b13      	ldr	r3, [pc, #76]	; (80078dc <pvPortMalloc+0x184>)
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	431a      	orrs	r2, r3
 8007894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007896:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800789a:	2200      	movs	r2, #0
 800789c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800789e:	4b13      	ldr	r3, [pc, #76]	; (80078ec <pvPortMalloc+0x194>)
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	3301      	adds	r3, #1
 80078a4:	4a11      	ldr	r2, [pc, #68]	; (80078ec <pvPortMalloc+0x194>)
 80078a6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80078a8:	f7fe ff28 	bl	80066fc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80078ac:	69fb      	ldr	r3, [r7, #28]
 80078ae:	f003 0307 	and.w	r3, r3, #7
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d00a      	beq.n	80078cc <pvPortMalloc+0x174>
	__asm volatile
 80078b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078ba:	f383 8811 	msr	BASEPRI, r3
 80078be:	f3bf 8f6f 	isb	sy
 80078c2:	f3bf 8f4f 	dsb	sy
 80078c6:	60fb      	str	r3, [r7, #12]
}
 80078c8:	bf00      	nop
 80078ca:	e7fe      	b.n	80078ca <pvPortMalloc+0x172>
	return pvReturn;
 80078cc:	69fb      	ldr	r3, [r7, #28]
}
 80078ce:	4618      	mov	r0, r3
 80078d0:	3728      	adds	r7, #40	; 0x28
 80078d2:	46bd      	mov	sp, r7
 80078d4:	bd80      	pop	{r7, pc}
 80078d6:	bf00      	nop
 80078d8:	2000d19c 	.word	0x2000d19c
 80078dc:	2000d1b0 	.word	0x2000d1b0
 80078e0:	2000d1a0 	.word	0x2000d1a0
 80078e4:	2000d194 	.word	0x2000d194
 80078e8:	2000d1a4 	.word	0x2000d1a4
 80078ec:	2000d1a8 	.word	0x2000d1a8

080078f0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80078f0:	b580      	push	{r7, lr}
 80078f2:	b086      	sub	sp, #24
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d04d      	beq.n	800799e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007902:	2308      	movs	r3, #8
 8007904:	425b      	negs	r3, r3
 8007906:	697a      	ldr	r2, [r7, #20]
 8007908:	4413      	add	r3, r2
 800790a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800790c:	697b      	ldr	r3, [r7, #20]
 800790e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007910:	693b      	ldr	r3, [r7, #16]
 8007912:	685a      	ldr	r2, [r3, #4]
 8007914:	4b24      	ldr	r3, [pc, #144]	; (80079a8 <vPortFree+0xb8>)
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	4013      	ands	r3, r2
 800791a:	2b00      	cmp	r3, #0
 800791c:	d10a      	bne.n	8007934 <vPortFree+0x44>
	__asm volatile
 800791e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007922:	f383 8811 	msr	BASEPRI, r3
 8007926:	f3bf 8f6f 	isb	sy
 800792a:	f3bf 8f4f 	dsb	sy
 800792e:	60fb      	str	r3, [r7, #12]
}
 8007930:	bf00      	nop
 8007932:	e7fe      	b.n	8007932 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007934:	693b      	ldr	r3, [r7, #16]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	2b00      	cmp	r3, #0
 800793a:	d00a      	beq.n	8007952 <vPortFree+0x62>
	__asm volatile
 800793c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007940:	f383 8811 	msr	BASEPRI, r3
 8007944:	f3bf 8f6f 	isb	sy
 8007948:	f3bf 8f4f 	dsb	sy
 800794c:	60bb      	str	r3, [r7, #8]
}
 800794e:	bf00      	nop
 8007950:	e7fe      	b.n	8007950 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007952:	693b      	ldr	r3, [r7, #16]
 8007954:	685a      	ldr	r2, [r3, #4]
 8007956:	4b14      	ldr	r3, [pc, #80]	; (80079a8 <vPortFree+0xb8>)
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	4013      	ands	r3, r2
 800795c:	2b00      	cmp	r3, #0
 800795e:	d01e      	beq.n	800799e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007960:	693b      	ldr	r3, [r7, #16]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	2b00      	cmp	r3, #0
 8007966:	d11a      	bne.n	800799e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007968:	693b      	ldr	r3, [r7, #16]
 800796a:	685a      	ldr	r2, [r3, #4]
 800796c:	4b0e      	ldr	r3, [pc, #56]	; (80079a8 <vPortFree+0xb8>)
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	43db      	mvns	r3, r3
 8007972:	401a      	ands	r2, r3
 8007974:	693b      	ldr	r3, [r7, #16]
 8007976:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007978:	f7fe feb2 	bl	80066e0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800797c:	693b      	ldr	r3, [r7, #16]
 800797e:	685a      	ldr	r2, [r3, #4]
 8007980:	4b0a      	ldr	r3, [pc, #40]	; (80079ac <vPortFree+0xbc>)
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	4413      	add	r3, r2
 8007986:	4a09      	ldr	r2, [pc, #36]	; (80079ac <vPortFree+0xbc>)
 8007988:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800798a:	6938      	ldr	r0, [r7, #16]
 800798c:	f000 f874 	bl	8007a78 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007990:	4b07      	ldr	r3, [pc, #28]	; (80079b0 <vPortFree+0xc0>)
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	3301      	adds	r3, #1
 8007996:	4a06      	ldr	r2, [pc, #24]	; (80079b0 <vPortFree+0xc0>)
 8007998:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800799a:	f7fe feaf 	bl	80066fc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800799e:	bf00      	nop
 80079a0:	3718      	adds	r7, #24
 80079a2:	46bd      	mov	sp, r7
 80079a4:	bd80      	pop	{r7, pc}
 80079a6:	bf00      	nop
 80079a8:	2000d1b0 	.word	0x2000d1b0
 80079ac:	2000d1a0 	.word	0x2000d1a0
 80079b0:	2000d1ac 	.word	0x2000d1ac

080079b4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80079b4:	b480      	push	{r7}
 80079b6:	b085      	sub	sp, #20
 80079b8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80079ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80079be:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80079c0:	4b27      	ldr	r3, [pc, #156]	; (8007a60 <prvHeapInit+0xac>)
 80079c2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	f003 0307 	and.w	r3, r3, #7
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d00c      	beq.n	80079e8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	3307      	adds	r3, #7
 80079d2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	f023 0307 	bic.w	r3, r3, #7
 80079da:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80079dc:	68ba      	ldr	r2, [r7, #8]
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	1ad3      	subs	r3, r2, r3
 80079e2:	4a1f      	ldr	r2, [pc, #124]	; (8007a60 <prvHeapInit+0xac>)
 80079e4:	4413      	add	r3, r2
 80079e6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80079ec:	4a1d      	ldr	r2, [pc, #116]	; (8007a64 <prvHeapInit+0xb0>)
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80079f2:	4b1c      	ldr	r3, [pc, #112]	; (8007a64 <prvHeapInit+0xb0>)
 80079f4:	2200      	movs	r2, #0
 80079f6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	68ba      	ldr	r2, [r7, #8]
 80079fc:	4413      	add	r3, r2
 80079fe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007a00:	2208      	movs	r2, #8
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	1a9b      	subs	r3, r3, r2
 8007a06:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	f023 0307 	bic.w	r3, r3, #7
 8007a0e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	4a15      	ldr	r2, [pc, #84]	; (8007a68 <prvHeapInit+0xb4>)
 8007a14:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007a16:	4b14      	ldr	r3, [pc, #80]	; (8007a68 <prvHeapInit+0xb4>)
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	2200      	movs	r2, #0
 8007a1c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007a1e:	4b12      	ldr	r3, [pc, #72]	; (8007a68 <prvHeapInit+0xb4>)
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	2200      	movs	r2, #0
 8007a24:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007a2a:	683b      	ldr	r3, [r7, #0]
 8007a2c:	68fa      	ldr	r2, [r7, #12]
 8007a2e:	1ad2      	subs	r2, r2, r3
 8007a30:	683b      	ldr	r3, [r7, #0]
 8007a32:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007a34:	4b0c      	ldr	r3, [pc, #48]	; (8007a68 <prvHeapInit+0xb4>)
 8007a36:	681a      	ldr	r2, [r3, #0]
 8007a38:	683b      	ldr	r3, [r7, #0]
 8007a3a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007a3c:	683b      	ldr	r3, [r7, #0]
 8007a3e:	685b      	ldr	r3, [r3, #4]
 8007a40:	4a0a      	ldr	r2, [pc, #40]	; (8007a6c <prvHeapInit+0xb8>)
 8007a42:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007a44:	683b      	ldr	r3, [r7, #0]
 8007a46:	685b      	ldr	r3, [r3, #4]
 8007a48:	4a09      	ldr	r2, [pc, #36]	; (8007a70 <prvHeapInit+0xbc>)
 8007a4a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007a4c:	4b09      	ldr	r3, [pc, #36]	; (8007a74 <prvHeapInit+0xc0>)
 8007a4e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007a52:	601a      	str	r2, [r3, #0]
}
 8007a54:	bf00      	nop
 8007a56:	3714      	adds	r7, #20
 8007a58:	46bd      	mov	sp, r7
 8007a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a5e:	4770      	bx	lr
 8007a60:	20005194 	.word	0x20005194
 8007a64:	2000d194 	.word	0x2000d194
 8007a68:	2000d19c 	.word	0x2000d19c
 8007a6c:	2000d1a4 	.word	0x2000d1a4
 8007a70:	2000d1a0 	.word	0x2000d1a0
 8007a74:	2000d1b0 	.word	0x2000d1b0

08007a78 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007a78:	b480      	push	{r7}
 8007a7a:	b085      	sub	sp, #20
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007a80:	4b28      	ldr	r3, [pc, #160]	; (8007b24 <prvInsertBlockIntoFreeList+0xac>)
 8007a82:	60fb      	str	r3, [r7, #12]
 8007a84:	e002      	b.n	8007a8c <prvInsertBlockIntoFreeList+0x14>
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	60fb      	str	r3, [r7, #12]
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	687a      	ldr	r2, [r7, #4]
 8007a92:	429a      	cmp	r2, r3
 8007a94:	d8f7      	bhi.n	8007a86 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	685b      	ldr	r3, [r3, #4]
 8007a9e:	68ba      	ldr	r2, [r7, #8]
 8007aa0:	4413      	add	r3, r2
 8007aa2:	687a      	ldr	r2, [r7, #4]
 8007aa4:	429a      	cmp	r2, r3
 8007aa6:	d108      	bne.n	8007aba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	685a      	ldr	r2, [r3, #4]
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	685b      	ldr	r3, [r3, #4]
 8007ab0:	441a      	add	r2, r3
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	685b      	ldr	r3, [r3, #4]
 8007ac2:	68ba      	ldr	r2, [r7, #8]
 8007ac4:	441a      	add	r2, r3
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	429a      	cmp	r2, r3
 8007acc:	d118      	bne.n	8007b00 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	681a      	ldr	r2, [r3, #0]
 8007ad2:	4b15      	ldr	r3, [pc, #84]	; (8007b28 <prvInsertBlockIntoFreeList+0xb0>)
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	429a      	cmp	r2, r3
 8007ad8:	d00d      	beq.n	8007af6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	685a      	ldr	r2, [r3, #4]
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	685b      	ldr	r3, [r3, #4]
 8007ae4:	441a      	add	r2, r3
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	681a      	ldr	r2, [r3, #0]
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	601a      	str	r2, [r3, #0]
 8007af4:	e008      	b.n	8007b08 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007af6:	4b0c      	ldr	r3, [pc, #48]	; (8007b28 <prvInsertBlockIntoFreeList+0xb0>)
 8007af8:	681a      	ldr	r2, [r3, #0]
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	601a      	str	r2, [r3, #0]
 8007afe:	e003      	b.n	8007b08 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	681a      	ldr	r2, [r3, #0]
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007b08:	68fa      	ldr	r2, [r7, #12]
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	429a      	cmp	r2, r3
 8007b0e:	d002      	beq.n	8007b16 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	687a      	ldr	r2, [r7, #4]
 8007b14:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007b16:	bf00      	nop
 8007b18:	3714      	adds	r7, #20
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b20:	4770      	bx	lr
 8007b22:	bf00      	nop
 8007b24:	2000d194 	.word	0x2000d194
 8007b28:	2000d19c 	.word	0x2000d19c

08007b2c <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 8007b2c:	b580      	push	{r7, lr}
 8007b2e:	b084      	sub	sp, #16
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	6078      	str	r0, [r7, #4]
 8007b34:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8007b36:	683b      	ldr	r3, [r7, #0]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	330c      	adds	r3, #12
 8007b3c:	461a      	mov	r2, r3
 8007b3e:	6839      	ldr	r1, [r7, #0]
 8007b40:	6878      	ldr	r0, [r7, #4]
 8007b42:	f002 faa3 	bl	800a08c <tcpip_send_msg_wait_sem>
 8007b46:	4603      	mov	r3, r0
 8007b48:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 8007b4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d103      	bne.n	8007b5a <netconn_apimsg+0x2e>
    return apimsg->err;
 8007b52:	683b      	ldr	r3, [r7, #0]
 8007b54:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8007b58:	e001      	b.n	8007b5e <netconn_apimsg+0x32>
  }
  return err;
 8007b5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007b5e:	4618      	mov	r0, r3
 8007b60:	3710      	adds	r7, #16
 8007b62:	46bd      	mov	sp, r7
 8007b64:	bd80      	pop	{r7, pc}
	...

08007b68 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	b08c      	sub	sp, #48	; 0x30
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	4603      	mov	r3, r0
 8007b70:	603a      	str	r2, [r7, #0]
 8007b72:	71fb      	strb	r3, [r7, #7]
 8007b74:	460b      	mov	r3, r1
 8007b76:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 8007b78:	79fb      	ldrb	r3, [r7, #7]
 8007b7a:	6839      	ldr	r1, [r7, #0]
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	f001 f923 	bl	8008dc8 <netconn_alloc>
 8007b82:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (conn != NULL) {
 8007b84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d054      	beq.n	8007c34 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 8007b8a:	79bb      	ldrb	r3, [r7, #6]
 8007b8c:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 8007b8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b90:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 8007b92:	f107 0308 	add.w	r3, r7, #8
 8007b96:	4619      	mov	r1, r3
 8007b98:	4829      	ldr	r0, [pc, #164]	; (8007c40 <netconn_new_with_proto_and_callback+0xd8>)
 8007b9a:	f7ff ffc7 	bl	8007b2c <netconn_apimsg>
 8007b9e:	4603      	mov	r3, r0
 8007ba0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (err != ERR_OK) {
 8007ba4:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d043      	beq.n	8007c34 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 8007bac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bae:	685b      	ldr	r3, [r3, #4]
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d005      	beq.n	8007bc0 <netconn_new_with_proto_and_callback+0x58>
 8007bb4:	4b23      	ldr	r3, [pc, #140]	; (8007c44 <netconn_new_with_proto_and_callback+0xdc>)
 8007bb6:	22a3      	movs	r2, #163	; 0xa3
 8007bb8:	4923      	ldr	r1, [pc, #140]	; (8007c48 <netconn_new_with_proto_and_callback+0xe0>)
 8007bba:	4824      	ldr	r0, [pc, #144]	; (8007c4c <netconn_new_with_proto_and_callback+0xe4>)
 8007bbc:	f00f fd6a 	bl	8017694 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 8007bc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bc2:	3310      	adds	r3, #16
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	f00f fa54 	bl	8017072 <sys_mbox_valid>
 8007bca:	4603      	mov	r3, r0
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d105      	bne.n	8007bdc <netconn_new_with_proto_and_callback+0x74>
 8007bd0:	4b1c      	ldr	r3, [pc, #112]	; (8007c44 <netconn_new_with_proto_and_callback+0xdc>)
 8007bd2:	22a4      	movs	r2, #164	; 0xa4
 8007bd4:	491e      	ldr	r1, [pc, #120]	; (8007c50 <netconn_new_with_proto_and_callback+0xe8>)
 8007bd6:	481d      	ldr	r0, [pc, #116]	; (8007c4c <netconn_new_with_proto_and_callback+0xe4>)
 8007bd8:	f00f fd5c 	bl	8017694 <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 8007bdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bde:	3314      	adds	r3, #20
 8007be0:	4618      	mov	r0, r3
 8007be2:	f00f fa46 	bl	8017072 <sys_mbox_valid>
 8007be6:	4603      	mov	r3, r0
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d005      	beq.n	8007bf8 <netconn_new_with_proto_and_callback+0x90>
 8007bec:	4b15      	ldr	r3, [pc, #84]	; (8007c44 <netconn_new_with_proto_and_callback+0xdc>)
 8007bee:	22a6      	movs	r2, #166	; 0xa6
 8007bf0:	4918      	ldr	r1, [pc, #96]	; (8007c54 <netconn_new_with_proto_and_callback+0xec>)
 8007bf2:	4816      	ldr	r0, [pc, #88]	; (8007c4c <netconn_new_with_proto_and_callback+0xe4>)
 8007bf4:	f00f fd4e 	bl	8017694 <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 8007bf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bfa:	330c      	adds	r3, #12
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	f00f fac9 	bl	8017194 <sys_sem_valid>
 8007c02:	4603      	mov	r3, r0
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d105      	bne.n	8007c14 <netconn_new_with_proto_and_callback+0xac>
 8007c08:	4b0e      	ldr	r3, [pc, #56]	; (8007c44 <netconn_new_with_proto_and_callback+0xdc>)
 8007c0a:	22a9      	movs	r2, #169	; 0xa9
 8007c0c:	4912      	ldr	r1, [pc, #72]	; (8007c58 <netconn_new_with_proto_and_callback+0xf0>)
 8007c0e:	480f      	ldr	r0, [pc, #60]	; (8007c4c <netconn_new_with_proto_and_callback+0xe4>)
 8007c10:	f00f fd40 	bl	8017694 <iprintf>
      sys_sem_free(&conn->op_completed);
 8007c14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c16:	330c      	adds	r3, #12
 8007c18:	4618      	mov	r0, r3
 8007c1a:	f00f faae 	bl	801717a <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 8007c1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c20:	3310      	adds	r3, #16
 8007c22:	4618      	mov	r0, r3
 8007c24:	f00f f99e 	bl	8016f64 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 8007c28:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007c2a:	2007      	movs	r0, #7
 8007c2c:	f002 ffdc 	bl	800abe8 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 8007c30:	2300      	movs	r3, #0
 8007c32:	e000      	b.n	8007c36 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 8007c34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8007c36:	4618      	mov	r0, r3
 8007c38:	3730      	adds	r7, #48	; 0x30
 8007c3a:	46bd      	mov	sp, r7
 8007c3c:	bd80      	pop	{r7, pc}
 8007c3e:	bf00      	nop
 8007c40:	08008d9d 	.word	0x08008d9d
 8007c44:	080185e0 	.word	0x080185e0
 8007c48:	08018614 	.word	0x08018614
 8007c4c:	08018638 	.word	0x08018638
 8007c50:	08018660 	.word	0x08018660
 8007c54:	08018678 	.word	0x08018678
 8007c58:	0801869c 	.word	0x0801869c

08007c5c <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 8007c5c:	b580      	push	{r7, lr}
 8007c5e:	b08c      	sub	sp, #48	; 0x30
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d101      	bne.n	8007c6e <netconn_prepare_delete+0x12>
    return ERR_OK;
 8007c6a:	2300      	movs	r3, #0
 8007c6c:	e014      	b.n	8007c98 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8007c72:	2329      	movs	r3, #41	; 0x29
 8007c74:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 8007c76:	f107 030c 	add.w	r3, r7, #12
 8007c7a:	4619      	mov	r1, r3
 8007c7c:	4808      	ldr	r0, [pc, #32]	; (8007ca0 <netconn_prepare_delete+0x44>)
 8007c7e:	f7ff ff55 	bl	8007b2c <netconn_apimsg>
 8007c82:	4603      	mov	r3, r0
 8007c84:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 8007c88:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d002      	beq.n	8007c96 <netconn_prepare_delete+0x3a>
    return err;
 8007c90:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007c94:	e000      	b.n	8007c98 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 8007c96:	2300      	movs	r3, #0
}
 8007c98:	4618      	mov	r0, r3
 8007c9a:	3730      	adds	r7, #48	; 0x30
 8007c9c:	46bd      	mov	sp, r7
 8007c9e:	bd80      	pop	{r7, pc}
 8007ca0:	08009309 	.word	0x08009309

08007ca4 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 8007ca4:	b580      	push	{r7, lr}
 8007ca6:	b084      	sub	sp, #16
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d101      	bne.n	8007cb6 <netconn_delete+0x12>
    return ERR_OK;
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	e00d      	b.n	8007cd2 <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 8007cb6:	6878      	ldr	r0, [r7, #4]
 8007cb8:	f7ff ffd0 	bl	8007c5c <netconn_prepare_delete>
 8007cbc:	4603      	mov	r3, r0
 8007cbe:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 8007cc0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d102      	bne.n	8007cce <netconn_delete+0x2a>
    netconn_free(conn);
 8007cc8:	6878      	ldr	r0, [r7, #4]
 8007cca:	f001 f8eb 	bl	8008ea4 <netconn_free>
  }
  return err;
 8007cce:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	3710      	adds	r7, #16
 8007cd6:	46bd      	mov	sp, r7
 8007cd8:	bd80      	pop	{r7, pc}
	...

08007cdc <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 8007cdc:	b580      	push	{r7, lr}
 8007cde:	b08e      	sub	sp, #56	; 0x38
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	60f8      	str	r0, [r7, #12]
 8007ce4:	60b9      	str	r1, [r7, #8]
 8007ce6:	4613      	mov	r3, r2
 8007ce8:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d109      	bne.n	8007d04 <netconn_bind+0x28>
 8007cf0:	4b11      	ldr	r3, [pc, #68]	; (8007d38 <netconn_bind+0x5c>)
 8007cf2:	f44f 729c 	mov.w	r2, #312	; 0x138
 8007cf6:	4911      	ldr	r1, [pc, #68]	; (8007d3c <netconn_bind+0x60>)
 8007cf8:	4811      	ldr	r0, [pc, #68]	; (8007d40 <netconn_bind+0x64>)
 8007cfa:	f00f fccb 	bl	8017694 <iprintf>
 8007cfe:	f06f 030f 	mvn.w	r3, #15
 8007d02:	e015      	b.n	8007d30 <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 8007d04:	68bb      	ldr	r3, [r7, #8]
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d101      	bne.n	8007d0e <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 8007d0a:	4b0e      	ldr	r3, [pc, #56]	; (8007d44 <netconn_bind+0x68>)
 8007d0c:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 8007d12:	68bb      	ldr	r3, [r7, #8]
 8007d14:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 8007d16:	88fb      	ldrh	r3, [r7, #6]
 8007d18:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 8007d1a:	f107 0314 	add.w	r3, r7, #20
 8007d1e:	4619      	mov	r1, r3
 8007d20:	4809      	ldr	r0, [pc, #36]	; (8007d48 <netconn_bind+0x6c>)
 8007d22:	f7ff ff03 	bl	8007b2c <netconn_apimsg>
 8007d26:	4603      	mov	r3, r0
 8007d28:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 8007d2c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8007d30:	4618      	mov	r0, r3
 8007d32:	3738      	adds	r7, #56	; 0x38
 8007d34:	46bd      	mov	sp, r7
 8007d36:	bd80      	pop	{r7, pc}
 8007d38:	080185e0 	.word	0x080185e0
 8007d3c:	08018718 	.word	0x08018718
 8007d40:	08018638 	.word	0x08018638
 8007d44:	0801bf98 	.word	0x0801bf98
 8007d48:	080094d1 	.word	0x080094d1

08007d4c <netconn_listen_with_backlog>:
 * @return ERR_OK if the netconn was set to listen (UDP and RAW netconns
 *         don't return any error (yet?))
 */
err_t
netconn_listen_with_backlog(struct netconn *conn, u8_t backlog)
{
 8007d4c:	b580      	push	{r7, lr}
 8007d4e:	b08c      	sub	sp, #48	; 0x30
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	6078      	str	r0, [r7, #4]
 8007d54:	460b      	mov	r3, r1
 8007d56:	70fb      	strb	r3, [r7, #3]
  err_t err;

  /* This does no harm. If TCP_LISTEN_BACKLOG is off, backlog is unused. */
  LWIP_UNUSED_ARG(backlog);

  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d109      	bne.n	8007d72 <netconn_listen_with_backlog+0x26>
 8007d5e:	4b0d      	ldr	r3, [pc, #52]	; (8007d94 <netconn_listen_with_backlog+0x48>)
 8007d60:	f240 12bb 	movw	r2, #443	; 0x1bb
 8007d64:	490c      	ldr	r1, [pc, #48]	; (8007d98 <netconn_listen_with_backlog+0x4c>)
 8007d66:	480d      	ldr	r0, [pc, #52]	; (8007d9c <netconn_listen_with_backlog+0x50>)
 8007d68:	f00f fc94 	bl	8017694 <iprintf>
 8007d6c:	f06f 030f 	mvn.w	r3, #15
 8007d70:	e00c      	b.n	8007d8c <netconn_listen_with_backlog+0x40>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	60fb      	str	r3, [r7, #12]
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_REF(msg).msg.lb.backlog = backlog;
#endif /* TCP_LISTEN_BACKLOG */
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
 8007d76:	f107 030c 	add.w	r3, r7, #12
 8007d7a:	4619      	mov	r1, r3
 8007d7c:	4808      	ldr	r0, [pc, #32]	; (8007da0 <netconn_listen_with_backlog+0x54>)
 8007d7e:	f7ff fed5 	bl	8007b2c <netconn_apimsg>
 8007d82:	4603      	mov	r3, r0
 8007d84:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8007d88:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(backlog);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	3730      	adds	r7, #48	; 0x30
 8007d90:	46bd      	mov	sp, r7
 8007d92:	bd80      	pop	{r7, pc}
 8007d94:	080185e0 	.word	0x080185e0
 8007d98:	08018798 	.word	0x08018798
 8007d9c:	08018638 	.word	0x08018638
 8007da0:	08009545 	.word	0x08009545

08007da4 <netconn_accept>:
 * @return ERR_OK if a new connection has been received or an error
 *                code otherwise
 */
err_t
netconn_accept(struct netconn *conn, struct netconn **new_conn)
{
 8007da4:	b580      	push	{r7, lr}
 8007da6:	b086      	sub	sp, #24
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	6078      	str	r0, [r7, #4]
 8007dac:	6039      	str	r1, [r7, #0]
  struct netconn *newconn;
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_DECLARE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 8007dae:	683b      	ldr	r3, [r7, #0]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d109      	bne.n	8007dc8 <netconn_accept+0x24>
 8007db4:	4b3d      	ldr	r3, [pc, #244]	; (8007eac <netconn_accept+0x108>)
 8007db6:	f240 12e1 	movw	r2, #481	; 0x1e1
 8007dba:	493d      	ldr	r1, [pc, #244]	; (8007eb0 <netconn_accept+0x10c>)
 8007dbc:	483d      	ldr	r0, [pc, #244]	; (8007eb4 <netconn_accept+0x110>)
 8007dbe:	f00f fc69 	bl	8017694 <iprintf>
 8007dc2:	f06f 030f 	mvn.w	r3, #15
 8007dc6:	e06c      	b.n	8007ea2 <netconn_accept+0xfe>
  *new_conn = NULL;
 8007dc8:	683b      	ldr	r3, [r7, #0]
 8007dca:	2200      	movs	r2, #0
 8007dcc:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d109      	bne.n	8007de8 <netconn_accept+0x44>
 8007dd4:	4b35      	ldr	r3, [pc, #212]	; (8007eac <netconn_accept+0x108>)
 8007dd6:	f240 12e3 	movw	r2, #483	; 0x1e3
 8007dda:	4937      	ldr	r1, [pc, #220]	; (8007eb8 <netconn_accept+0x114>)
 8007ddc:	4835      	ldr	r0, [pc, #212]	; (8007eb4 <netconn_accept+0x110>)
 8007dde:	f00f fc59 	bl	8017694 <iprintf>
 8007de2:	f06f 030f 	mvn.w	r3, #15
 8007de6:	e05c      	b.n	8007ea2 <netconn_accept+0xfe>

  /* NOTE: Although the opengroup spec says a pending error shall be returned to
           send/recv/getsockopt(SO_ERROR) only, we return it for listening
           connections also, to handle embedded-system errors */
  err = netconn_err(conn);
 8007de8:	6878      	ldr	r0, [r7, #4]
 8007dea:	f000 fb6c 	bl	80084c6 <netconn_err>
 8007dee:	4603      	mov	r3, r0
 8007df0:	74fb      	strb	r3, [r7, #19]
  if (err != ERR_OK) {
 8007df2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d002      	beq.n	8007e00 <netconn_accept+0x5c>
    /* return pending error */
    return err;
 8007dfa:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007dfe:	e050      	b.n	8007ea2 <netconn_accept+0xfe>
  }
  if (!NETCONN_ACCEPTMBOX_WAITABLE(conn)) {
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	3314      	adds	r3, #20
 8007e04:	4618      	mov	r0, r3
 8007e06:	f00f f934 	bl	8017072 <sys_mbox_valid>
 8007e0a:	4603      	mov	r3, r0
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d005      	beq.n	8007e1c <netconn_accept+0x78>
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	7f1b      	ldrb	r3, [r3, #28]
 8007e14:	f003 0301 	and.w	r3, r3, #1
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d002      	beq.n	8007e22 <netconn_accept+0x7e>
    /* don't accept if closed: this might block the application task
       waiting on acceptmbox forever! */
    return ERR_CLSD;
 8007e1c:	f06f 030e 	mvn.w	r3, #14
 8007e20:	e03f      	b.n	8007ea2 <netconn_accept+0xfe>
  }

  API_MSG_VAR_ALLOC_ACCEPT(msg);

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn)) {
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	7f1b      	ldrb	r3, [r3, #28]
 8007e26:	f003 0302 	and.w	r3, r3, #2
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d00e      	beq.n	8007e4c <netconn_accept+0xa8>
    if (sys_arch_mbox_tryfetch(&conn->acceptmbox, &accept_ptr) == SYS_ARCH_TIMEOUT) {
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	3314      	adds	r3, #20
 8007e32:	f107 020c 	add.w	r2, r7, #12
 8007e36:	4611      	mov	r1, r2
 8007e38:	4618      	mov	r0, r3
 8007e3a:	f00f f8fe 	bl	801703a <sys_arch_mbox_tryfetch>
 8007e3e:	4603      	mov	r3, r0
 8007e40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e44:	d10a      	bne.n	8007e5c <netconn_accept+0xb8>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_WOULDBLOCK;
 8007e46:	f06f 0306 	mvn.w	r3, #6
 8007e4a:	e02a      	b.n	8007ea2 <netconn_accept+0xfe>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, 0);
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	3314      	adds	r3, #20
 8007e50:	f107 010c 	add.w	r1, r7, #12
 8007e54:	2200      	movs	r2, #0
 8007e56:	4618      	mov	r0, r3
 8007e58:	f00f f8b0 	bl	8016fbc <sys_arch_mbox_fetch>
    }
  }
#endif

  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d005      	beq.n	8007e70 <netconn_accept+0xcc>
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e68:	2200      	movs	r2, #0
 8007e6a:	2101      	movs	r1, #1
 8007e6c:	6878      	ldr	r0, [r7, #4]
 8007e6e:	4798      	blx	r3

  if (lwip_netconn_is_err_msg(accept_ptr, &err)) {
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	f107 0213 	add.w	r2, r7, #19
 8007e76:	4611      	mov	r1, r2
 8007e78:	4618      	mov	r0, r3
 8007e7a:	f000 fb75 	bl	8008568 <lwip_netconn_is_err_msg>
 8007e7e:	4603      	mov	r3, r0
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d002      	beq.n	8007e8a <netconn_accept+0xe6>
    /* a connection has been aborted: e.g. out of pcbs or out of netconns during accept */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return err;
 8007e84:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007e88:	e00b      	b.n	8007ea2 <netconn_accept+0xfe>
  }
  if (accept_ptr == NULL) {
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d102      	bne.n	8007e96 <netconn_accept+0xf2>
    /* connection has been aborted */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return ERR_CLSD;
 8007e90:	f06f 030e 	mvn.w	r3, #14
 8007e94:	e005      	b.n	8007ea2 <netconn_accept+0xfe>
  }
  newconn = (struct netconn *)accept_ptr;
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	617b      	str	r3, [r7, #20]
  /* don't care for the return value of lwip_netconn_do_recv */
  netconn_apimsg(lwip_netconn_do_accepted, &API_MSG_VAR_REF(msg));
  API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  *new_conn = newconn;
 8007e9a:	683b      	ldr	r3, [r7, #0]
 8007e9c:	697a      	ldr	r2, [r7, #20]
 8007e9e:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 8007ea0:	2300      	movs	r3, #0
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(new_conn);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	3718      	adds	r7, #24
 8007ea6:	46bd      	mov	sp, r7
 8007ea8:	bd80      	pop	{r7, pc}
 8007eaa:	bf00      	nop
 8007eac:	080185e0 	.word	0x080185e0
 8007eb0:	080187b8 	.word	0x080187b8
 8007eb4:	08018638 	.word	0x08018638
 8007eb8:	080187d8 	.word	0x080187d8

08007ebc <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 8007ebc:	b580      	push	{r7, lr}
 8007ebe:	b088      	sub	sp, #32
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	60f8      	str	r0, [r7, #12]
 8007ec4:	60b9      	str	r1, [r7, #8]
 8007ec6:	4613      	mov	r3, r2
 8007ec8:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 8007eca:	2300      	movs	r3, #0
 8007ecc:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8007ece:	68bb      	ldr	r3, [r7, #8]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d109      	bne.n	8007ee8 <netconn_recv_data+0x2c>
 8007ed4:	4b58      	ldr	r3, [pc, #352]	; (8008038 <netconn_recv_data+0x17c>)
 8007ed6:	f44f 7212 	mov.w	r2, #584	; 0x248
 8007eda:	4958      	ldr	r1, [pc, #352]	; (800803c <netconn_recv_data+0x180>)
 8007edc:	4858      	ldr	r0, [pc, #352]	; (8008040 <netconn_recv_data+0x184>)
 8007ede:	f00f fbd9 	bl	8017694 <iprintf>
 8007ee2:	f06f 030f 	mvn.w	r3, #15
 8007ee6:	e0a2      	b.n	800802e <netconn_recv_data+0x172>
  *new_buf = NULL;
 8007ee8:	68bb      	ldr	r3, [r7, #8]
 8007eea:	2200      	movs	r2, #0
 8007eec:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d109      	bne.n	8007f08 <netconn_recv_data+0x4c>
 8007ef4:	4b50      	ldr	r3, [pc, #320]	; (8008038 <netconn_recv_data+0x17c>)
 8007ef6:	f240 224a 	movw	r2, #586	; 0x24a
 8007efa:	4952      	ldr	r1, [pc, #328]	; (8008044 <netconn_recv_data+0x188>)
 8007efc:	4850      	ldr	r0, [pc, #320]	; (8008040 <netconn_recv_data+0x184>)
 8007efe:	f00f fbc9 	bl	8017694 <iprintf>
 8007f02:	f06f 030f 	mvn.w	r3, #15
 8007f06:	e092      	b.n	800802e <netconn_recv_data+0x172>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	3310      	adds	r3, #16
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	f00f f8b0 	bl	8017072 <sys_mbox_valid>
 8007f12:	4603      	mov	r3, r0
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d10e      	bne.n	8007f36 <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 8007f18:	68f8      	ldr	r0, [r7, #12]
 8007f1a:	f000 fad4 	bl	80084c6 <netconn_err>
 8007f1e:	4603      	mov	r3, r0
 8007f20:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
 8007f22:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d002      	beq.n	8007f30 <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 8007f2a:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8007f2e:	e07e      	b.n	800802e <netconn_recv_data+0x172>
    }
    return ERR_CONN;
 8007f30:	f06f 030a 	mvn.w	r3, #10
 8007f34:	e07b      	b.n	800802e <netconn_recv_data+0x172>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	7f1b      	ldrb	r3, [r3, #28]
 8007f3a:	f003 0302 	and.w	r3, r3, #2
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d10f      	bne.n	8007f62 <netconn_recv_data+0xa6>
 8007f42:	79fb      	ldrb	r3, [r7, #7]
 8007f44:	f003 0304 	and.w	r3, r3, #4
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d10a      	bne.n	8007f62 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	7f1b      	ldrb	r3, [r3, #28]
 8007f50:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d104      	bne.n	8007f62 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d023      	beq.n	8007faa <netconn_recv_data+0xee>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	3310      	adds	r3, #16
 8007f66:	f107 0218 	add.w	r2, r7, #24
 8007f6a:	4611      	mov	r1, r2
 8007f6c:	4618      	mov	r0, r3
 8007f6e:	f00f f864 	bl	801703a <sys_arch_mbox_tryfetch>
 8007f72:	4603      	mov	r3, r0
 8007f74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f78:	d11f      	bne.n	8007fba <netconn_recv_data+0xfe>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 8007f7a:	68f8      	ldr	r0, [r7, #12]
 8007f7c:	f000 faa3 	bl	80084c6 <netconn_err>
 8007f80:	4603      	mov	r3, r0
 8007f82:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
 8007f84:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d002      	beq.n	8007f92 <netconn_recv_data+0xd6>
        /* return pending error */
        return err;
 8007f8c:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8007f90:	e04d      	b.n	800802e <netconn_recv_data+0x172>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	7f1b      	ldrb	r3, [r3, #28]
 8007f96:	f003 0301 	and.w	r3, r3, #1
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d002      	beq.n	8007fa4 <netconn_recv_data+0xe8>
        return ERR_CONN;
 8007f9e:	f06f 030a 	mvn.w	r3, #10
 8007fa2:	e044      	b.n	800802e <netconn_recv_data+0x172>
      }
      return ERR_WOULDBLOCK;
 8007fa4:	f06f 0306 	mvn.w	r3, #6
 8007fa8:	e041      	b.n	800802e <netconn_recv_data+0x172>
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	3310      	adds	r3, #16
 8007fae:	f107 0118 	add.w	r1, r7, #24
 8007fb2:	2200      	movs	r2, #0
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	f00f f801 	bl	8016fbc <sys_arch_mbox_fetch>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	781b      	ldrb	r3, [r3, #0]
 8007fbe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007fc2:	2b10      	cmp	r3, #16
 8007fc4:	d117      	bne.n	8007ff6 <netconn_recv_data+0x13a>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 8007fc6:	69bb      	ldr	r3, [r7, #24]
 8007fc8:	f107 0217 	add.w	r2, r7, #23
 8007fcc:	4611      	mov	r1, r2
 8007fce:	4618      	mov	r0, r3
 8007fd0:	f000 faca 	bl	8008568 <lwip_netconn_is_err_msg>
 8007fd4:	4603      	mov	r3, r0
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d009      	beq.n	8007fee <netconn_recv_data+0x132>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 8007fda:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007fde:	f113 0f0f 	cmn.w	r3, #15
 8007fe2:	d101      	bne.n	8007fe8 <netconn_recv_data+0x12c>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 8007fe4:	2300      	movs	r3, #0
 8007fe6:	e022      	b.n	800802e <netconn_recv_data+0x172>
      }
      return err;
 8007fe8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007fec:	e01f      	b.n	800802e <netconn_recv_data+0x172>
    }
    len = ((struct pbuf *)buf)->tot_len;
 8007fee:	69bb      	ldr	r3, [r7, #24]
 8007ff0:	891b      	ldrh	r3, [r3, #8]
 8007ff2:	83fb      	strh	r3, [r7, #30]
 8007ff4:	e00d      	b.n	8008012 <netconn_recv_data+0x156>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 8007ff6:	69bb      	ldr	r3, [r7, #24]
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d106      	bne.n	800800a <netconn_recv_data+0x14e>
 8007ffc:	4b0e      	ldr	r3, [pc, #56]	; (8008038 <netconn_recv_data+0x17c>)
 8007ffe:	f240 2291 	movw	r2, #657	; 0x291
 8008002:	4911      	ldr	r1, [pc, #68]	; (8008048 <netconn_recv_data+0x18c>)
 8008004:	480e      	ldr	r0, [pc, #56]	; (8008040 <netconn_recv_data+0x184>)
 8008006:	f00f fb45 	bl	8017694 <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 800800a:	69bb      	ldr	r3, [r7, #24]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	891b      	ldrh	r3, [r3, #8]
 8008010:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008016:	2b00      	cmp	r3, #0
 8008018:	d005      	beq.n	8008026 <netconn_recv_data+0x16a>
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800801e:	8bfa      	ldrh	r2, [r7, #30]
 8008020:	2101      	movs	r1, #1
 8008022:	68f8      	ldr	r0, [r7, #12]
 8008024:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 8008026:	69ba      	ldr	r2, [r7, #24]
 8008028:	68bb      	ldr	r3, [r7, #8]
 800802a:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 800802c:	2300      	movs	r3, #0
}
 800802e:	4618      	mov	r0, r3
 8008030:	3720      	adds	r7, #32
 8008032:	46bd      	mov	sp, r7
 8008034:	bd80      	pop	{r7, pc}
 8008036:	bf00      	nop
 8008038:	080185e0 	.word	0x080185e0
 800803c:	080187f8 	.word	0x080187f8
 8008040:	08018638 	.word	0x08018638
 8008044:	08018818 	.word	0x08018818
 8008048:	08018834 	.word	0x08018834

0800804c <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 800804c:	b580      	push	{r7, lr}
 800804e:	b084      	sub	sp, #16
 8008050:	af00      	add	r7, sp, #0
 8008052:	60f8      	str	r0, [r7, #12]
 8008054:	60b9      	str	r1, [r7, #8]
 8008056:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	2b00      	cmp	r3, #0
 800805c:	d005      	beq.n	800806a <netconn_tcp_recvd_msg+0x1e>
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	781b      	ldrb	r3, [r3, #0]
 8008062:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008066:	2b10      	cmp	r3, #16
 8008068:	d009      	beq.n	800807e <netconn_tcp_recvd_msg+0x32>
 800806a:	4b0c      	ldr	r3, [pc, #48]	; (800809c <netconn_tcp_recvd_msg+0x50>)
 800806c:	f240 22a7 	movw	r2, #679	; 0x2a7
 8008070:	490b      	ldr	r1, [pc, #44]	; (80080a0 <netconn_tcp_recvd_msg+0x54>)
 8008072:	480c      	ldr	r0, [pc, #48]	; (80080a4 <netconn_tcp_recvd_msg+0x58>)
 8008074:	f00f fb0e 	bl	8017694 <iprintf>
 8008078:	f06f 030f 	mvn.w	r3, #15
 800807c:	e00a      	b.n	8008094 <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	68fa      	ldr	r2, [r7, #12]
 8008082:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	68ba      	ldr	r2, [r7, #8]
 8008088:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 800808a:	6879      	ldr	r1, [r7, #4]
 800808c:	4806      	ldr	r0, [pc, #24]	; (80080a8 <netconn_tcp_recvd_msg+0x5c>)
 800808e:	f7ff fd4d 	bl	8007b2c <netconn_apimsg>
 8008092:	4603      	mov	r3, r0
}
 8008094:	4618      	mov	r0, r3
 8008096:	3710      	adds	r7, #16
 8008098:	46bd      	mov	sp, r7
 800809a:	bd80      	pop	{r7, pc}
 800809c:	080185e0 	.word	0x080185e0
 80080a0:	08018840 	.word	0x08018840
 80080a4:	08018638 	.word	0x08018638
 80080a8:	08009675 	.word	0x08009675

080080ac <netconn_recv_data_tcp>:
  return err;
}

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 80080ac:	b580      	push	{r7, lr}
 80080ae:	b090      	sub	sp, #64	; 0x40
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	60f8      	str	r0, [r7, #12]
 80080b4:	60b9      	str	r1, [r7, #8]
 80080b6:	4613      	mov	r3, r2
 80080b8:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	3310      	adds	r3, #16
 80080be:	4618      	mov	r0, r3
 80080c0:	f00e ffd7 	bl	8017072 <sys_mbox_valid>
 80080c4:	4603      	mov	r3, r0
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d102      	bne.n	80080d0 <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 80080ca:	f06f 030a 	mvn.w	r3, #10
 80080ce:	e06d      	b.n	80081ac <netconn_recv_data_tcp+0x100>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	7f1b      	ldrb	r3, [r3, #28]
 80080d4:	b25b      	sxtb	r3, r3
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	da07      	bge.n	80080ea <netconn_recv_data_tcp+0x3e>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	7f1b      	ldrb	r3, [r3, #28]
 80080de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80080e2:	b2da      	uxtb	r2, r3
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	771a      	strb	r2, [r3, #28]
    goto handle_fin;
 80080e8:	e039      	b.n	800815e <netconn_recv_data_tcp+0xb2>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 80080ea:	79fb      	ldrb	r3, [r7, #7]
 80080ec:	461a      	mov	r2, r3
 80080ee:	68b9      	ldr	r1, [r7, #8]
 80080f0:	68f8      	ldr	r0, [r7, #12]
 80080f2:	f7ff fee3 	bl	8007ebc <netconn_recv_data>
 80080f6:	4603      	mov	r3, r0
 80080f8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (err != ERR_OK) {
 80080fc:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008100:	2b00      	cmp	r3, #0
 8008102:	d002      	beq.n	800810a <netconn_recv_data_tcp+0x5e>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 8008104:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008108:	e050      	b.n	80081ac <netconn_recv_data_tcp+0x100>
  }
  buf = *new_buf;
 800810a:	68bb      	ldr	r3, [r7, #8]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 8008110:	79fb      	ldrb	r3, [r7, #7]
 8008112:	f003 0308 	and.w	r3, r3, #8
 8008116:	2b00      	cmp	r3, #0
 8008118:	d10e      	bne.n	8008138 <netconn_recv_data_tcp+0x8c>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 800811a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800811c:	2b00      	cmp	r3, #0
 800811e:	d002      	beq.n	8008126 <netconn_recv_data_tcp+0x7a>
 8008120:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008122:	891b      	ldrh	r3, [r3, #8]
 8008124:	e000      	b.n	8008128 <netconn_recv_data_tcp+0x7c>
 8008126:	2301      	movs	r3, #1
 8008128:	86fb      	strh	r3, [r7, #54]	; 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 800812a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800812c:	f107 0214 	add.w	r2, r7, #20
 8008130:	4619      	mov	r1, r3
 8008132:	68f8      	ldr	r0, [r7, #12]
 8008134:	f7ff ff8a 	bl	800804c <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 8008138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800813a:	2b00      	cmp	r3, #0
 800813c:	d134      	bne.n	80081a8 <netconn_recv_data_tcp+0xfc>
    if (apiflags & NETCONN_NOFIN) {
 800813e:	79fb      	ldrb	r3, [r7, #7]
 8008140:	f003 0310 	and.w	r3, r3, #16
 8008144:	2b00      	cmp	r3, #0
 8008146:	d009      	beq.n	800815c <netconn_recv_data_tcp+0xb0>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	7f1b      	ldrb	r3, [r3, #28]
 800814c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008150:	b2da      	uxtb	r2, r3
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	771a      	strb	r2, [r3, #28]
      return ERR_WOULDBLOCK;
 8008156:	f06f 0306 	mvn.w	r3, #6
 800815a:	e027      	b.n	80081ac <netconn_recv_data_tcp+0x100>
    } else {
handle_fin:
 800815c:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008162:	2b00      	cmp	r3, #0
 8008164:	d005      	beq.n	8008172 <netconn_recv_data_tcp+0xc6>
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800816a:	2200      	movs	r2, #0
 800816c:	2101      	movs	r1, #1
 800816e:	68f8      	ldr	r0, [r7, #12]
 8008170:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	685b      	ldr	r3, [r3, #4]
 8008176:	2b00      	cmp	r3, #0
 8008178:	d10f      	bne.n	800819a <netconn_recv_data_tcp+0xee>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 800817a:	68f8      	ldr	r0, [r7, #12]
 800817c:	f000 f9a3 	bl	80084c6 <netconn_err>
 8008180:	4603      	mov	r3, r0
 8008182:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        if (err != ERR_OK) {
 8008186:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800818a:	2b00      	cmp	r3, #0
 800818c:	d002      	beq.n	8008194 <netconn_recv_data_tcp+0xe8>
          return err;
 800818e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008192:	e00b      	b.n	80081ac <netconn_recv_data_tcp+0x100>
        }
        return ERR_RST;
 8008194:	f06f 030d 	mvn.w	r3, #13
 8008198:	e008      	b.n	80081ac <netconn_recv_data_tcp+0x100>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 800819a:	2101      	movs	r1, #1
 800819c:	68f8      	ldr	r0, [r7, #12]
 800819e:	f000 f955 	bl	800844c <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 80081a2:	f06f 030e 	mvn.w	r3, #14
 80081a6:	e001      	b.n	80081ac <netconn_recv_data_tcp+0x100>
    }
  }
  return err;
 80081a8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 80081ac:	4618      	mov	r0, r3
 80081ae:	3740      	adds	r7, #64	; 0x40
 80081b0:	46bd      	mov	sp, r7
 80081b2:	bd80      	pop	{r7, pc}

080081b4 <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 80081b4:	b580      	push	{r7, lr}
 80081b6:	b086      	sub	sp, #24
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	6078      	str	r0, [r7, #4]
 80081bc:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct netbuf *buf = NULL;
 80081be:	2300      	movs	r3, #0
 80081c0:	617b      	str	r3, [r7, #20]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 80081c2:	683b      	ldr	r3, [r7, #0]
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d109      	bne.n	80081dc <netconn_recv+0x28>
 80081c8:	4b32      	ldr	r3, [pc, #200]	; (8008294 <netconn_recv+0xe0>)
 80081ca:	f240 3263 	movw	r2, #867	; 0x363
 80081ce:	4932      	ldr	r1, [pc, #200]	; (8008298 <netconn_recv+0xe4>)
 80081d0:	4832      	ldr	r0, [pc, #200]	; (800829c <netconn_recv+0xe8>)
 80081d2:	f00f fa5f 	bl	8017694 <iprintf>
 80081d6:	f06f 030f 	mvn.w	r3, #15
 80081da:	e056      	b.n	800828a <netconn_recv+0xd6>
  *new_buf = NULL;
 80081dc:	683b      	ldr	r3, [r7, #0]
 80081de:	2200      	movs	r2, #0
 80081e0:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d109      	bne.n	80081fc <netconn_recv+0x48>
 80081e8:	4b2a      	ldr	r3, [pc, #168]	; (8008294 <netconn_recv+0xe0>)
 80081ea:	f240 3265 	movw	r2, #869	; 0x365
 80081ee:	492c      	ldr	r1, [pc, #176]	; (80082a0 <netconn_recv+0xec>)
 80081f0:	482a      	ldr	r0, [pc, #168]	; (800829c <netconn_recv+0xe8>)
 80081f2:	f00f fa4f 	bl	8017694 <iprintf>
 80081f6:	f06f 030f 	mvn.w	r3, #15
 80081fa:	e046      	b.n	800828a <netconn_recv+0xd6>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	781b      	ldrb	r3, [r3, #0]
 8008200:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008204:	2b10      	cmp	r3, #16
 8008206:	d13a      	bne.n	800827e <netconn_recv+0xca>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
 8008208:	2300      	movs	r3, #0
 800820a:	60fb      	str	r3, [r7, #12]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800820c:	2006      	movs	r0, #6
 800820e:	f002 fc75 	bl	800aafc <memp_malloc>
 8008212:	6178      	str	r0, [r7, #20]
    if (buf == NULL) {
 8008214:	697b      	ldr	r3, [r7, #20]
 8008216:	2b00      	cmp	r3, #0
 8008218:	d102      	bne.n	8008220 <netconn_recv+0x6c>
      return ERR_MEM;
 800821a:	f04f 33ff 	mov.w	r3, #4294967295
 800821e:	e034      	b.n	800828a <netconn_recv+0xd6>
    }

    err = netconn_recv_data_tcp(conn, &p, 0);
 8008220:	f107 030c 	add.w	r3, r7, #12
 8008224:	2200      	movs	r2, #0
 8008226:	4619      	mov	r1, r3
 8008228:	6878      	ldr	r0, [r7, #4]
 800822a:	f7ff ff3f 	bl	80080ac <netconn_recv_data_tcp>
 800822e:	4603      	mov	r3, r0
 8008230:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8008232:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008236:	2b00      	cmp	r3, #0
 8008238:	d006      	beq.n	8008248 <netconn_recv+0x94>
      memp_free(MEMP_NETBUF, buf);
 800823a:	6979      	ldr	r1, [r7, #20]
 800823c:	2006      	movs	r0, #6
 800823e:	f002 fcd3 	bl	800abe8 <memp_free>
      return err;
 8008242:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008246:	e020      	b.n	800828a <netconn_recv+0xd6>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	2b00      	cmp	r3, #0
 800824c:	d106      	bne.n	800825c <netconn_recv+0xa8>
 800824e:	4b11      	ldr	r3, [pc, #68]	; (8008294 <netconn_recv+0xe0>)
 8008250:	f240 3279 	movw	r2, #889	; 0x379
 8008254:	4913      	ldr	r1, [pc, #76]	; (80082a4 <netconn_recv+0xf0>)
 8008256:	4811      	ldr	r0, [pc, #68]	; (800829c <netconn_recv+0xe8>)
 8008258:	f00f fa1c 	bl	8017694 <iprintf>

    buf->p = p;
 800825c:	68fa      	ldr	r2, [r7, #12]
 800825e:	697b      	ldr	r3, [r7, #20]
 8008260:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 8008262:	68fa      	ldr	r2, [r7, #12]
 8008264:	697b      	ldr	r3, [r7, #20]
 8008266:	605a      	str	r2, [r3, #4]
    buf->port = 0;
 8008268:	697b      	ldr	r3, [r7, #20]
 800826a:	2200      	movs	r2, #0
 800826c:	819a      	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
 800826e:	697b      	ldr	r3, [r7, #20]
 8008270:	2200      	movs	r2, #0
 8008272:	609a      	str	r2, [r3, #8]
    *new_buf = buf;
 8008274:	683b      	ldr	r3, [r7, #0]
 8008276:	697a      	ldr	r2, [r7, #20]
 8008278:	601a      	str	r2, [r3, #0]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
 800827a:	2300      	movs	r3, #0
 800827c:	e005      	b.n	800828a <netconn_recv+0xd6>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf, 0);
 800827e:	2200      	movs	r2, #0
 8008280:	6839      	ldr	r1, [r7, #0]
 8008282:	6878      	ldr	r0, [r7, #4]
 8008284:	f7ff fe1a 	bl	8007ebc <netconn_recv_data>
 8008288:	4603      	mov	r3, r0
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 800828a:	4618      	mov	r0, r3
 800828c:	3718      	adds	r7, #24
 800828e:	46bd      	mov	sp, r7
 8008290:	bd80      	pop	{r7, pc}
 8008292:	bf00      	nop
 8008294:	080185e0 	.word	0x080185e0
 8008298:	080187f8 	.word	0x080187f8
 800829c:	08018638 	.word	0x08018638
 80082a0:	08018818 	.word	0x08018818
 80082a4:	08018890 	.word	0x08018890

080082a8 <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 80082a8:	b580      	push	{r7, lr}
 80082aa:	b088      	sub	sp, #32
 80082ac:	af02      	add	r7, sp, #8
 80082ae:	60f8      	str	r0, [r7, #12]
 80082b0:	60b9      	str	r1, [r7, #8]
 80082b2:	607a      	str	r2, [r7, #4]
 80082b4:	70fb      	strb	r3, [r7, #3]
  struct netvector vector;
  vector.ptr = dataptr;
 80082b6:	68bb      	ldr	r3, [r7, #8]
 80082b8:	613b      	str	r3, [r7, #16]
  vector.len = size;
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	617b      	str	r3, [r7, #20]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 80082be:	78fa      	ldrb	r2, [r7, #3]
 80082c0:	f107 0110 	add.w	r1, r7, #16
 80082c4:	6a3b      	ldr	r3, [r7, #32]
 80082c6:	9300      	str	r3, [sp, #0]
 80082c8:	4613      	mov	r3, r2
 80082ca:	2201      	movs	r2, #1
 80082cc:	68f8      	ldr	r0, [r7, #12]
 80082ce:	f000 f805 	bl	80082dc <netconn_write_vectors_partly>
 80082d2:	4603      	mov	r3, r0
}
 80082d4:	4618      	mov	r0, r3
 80082d6:	3718      	adds	r7, #24
 80082d8:	46bd      	mov	sp, r7
 80082da:	bd80      	pop	{r7, pc}

080082dc <netconn_write_vectors_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_vectors_partly(struct netconn *conn, struct netvector *vectors, u16_t vectorcnt,
                             u8_t apiflags, size_t *bytes_written)
{
 80082dc:	b580      	push	{r7, lr}
 80082de:	b092      	sub	sp, #72	; 0x48
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	60f8      	str	r0, [r7, #12]
 80082e4:	60b9      	str	r1, [r7, #8]
 80082e6:	4611      	mov	r1, r2
 80082e8:	461a      	mov	r2, r3
 80082ea:	460b      	mov	r3, r1
 80082ec:	80fb      	strh	r3, [r7, #6]
 80082ee:	4613      	mov	r3, r2
 80082f0:	717b      	strb	r3, [r7, #5]
  err_t err;
  u8_t dontblock;
  size_t size;
  int i;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d109      	bne.n	800830c <netconn_write_vectors_partly+0x30>
 80082f8:	4b4e      	ldr	r3, [pc, #312]	; (8008434 <netconn_write_vectors_partly+0x158>)
 80082fa:	f240 32ee 	movw	r2, #1006	; 0x3ee
 80082fe:	494e      	ldr	r1, [pc, #312]	; (8008438 <netconn_write_vectors_partly+0x15c>)
 8008300:	484e      	ldr	r0, [pc, #312]	; (800843c <netconn_write_vectors_partly+0x160>)
 8008302:	f00f f9c7 	bl	8017694 <iprintf>
 8008306:	f06f 030f 	mvn.w	r3, #15
 800830a:	e08e      	b.n	800842a <netconn_write_vectors_partly+0x14e>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	781b      	ldrb	r3, [r3, #0]
 8008310:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008314:	2b10      	cmp	r3, #16
 8008316:	d009      	beq.n	800832c <netconn_write_vectors_partly+0x50>
 8008318:	4b46      	ldr	r3, [pc, #280]	; (8008434 <netconn_write_vectors_partly+0x158>)
 800831a:	f240 32ef 	movw	r2, #1007	; 0x3ef
 800831e:	4948      	ldr	r1, [pc, #288]	; (8008440 <netconn_write_vectors_partly+0x164>)
 8008320:	4846      	ldr	r0, [pc, #280]	; (800843c <netconn_write_vectors_partly+0x160>)
 8008322:	f00f f9b7 	bl	8017694 <iprintf>
 8008326:	f06f 0305 	mvn.w	r3, #5
 800832a:	e07e      	b.n	800842a <netconn_write_vectors_partly+0x14e>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	7f1b      	ldrb	r3, [r3, #28]
 8008330:	f003 0302 	and.w	r3, r3, #2
 8008334:	2b00      	cmp	r3, #0
 8008336:	d104      	bne.n	8008342 <netconn_write_vectors_partly+0x66>
 8008338:	797b      	ldrb	r3, [r7, #5]
 800833a:	f003 0304 	and.w	r3, r3, #4
 800833e:	2b00      	cmp	r3, #0
 8008340:	d001      	beq.n	8008346 <netconn_write_vectors_partly+0x6a>
 8008342:	2301      	movs	r3, #1
 8008344:	e000      	b.n	8008348 <netconn_write_vectors_partly+0x6c>
 8008346:	2300      	movs	r3, #0
 8008348:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 800834c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008350:	2b00      	cmp	r3, #0
 8008352:	d005      	beq.n	8008360 <netconn_write_vectors_partly+0x84>
 8008354:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008356:	2b00      	cmp	r3, #0
 8008358:	d102      	bne.n	8008360 <netconn_write_vectors_partly+0x84>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 800835a:	f06f 0305 	mvn.w	r3, #5
 800835e:	e064      	b.n	800842a <netconn_write_vectors_partly+0x14e>
  }

  /* sum up the total size */
  size = 0;
 8008360:	2300      	movs	r3, #0
 8008362:	647b      	str	r3, [r7, #68]	; 0x44
  for (i = 0; i < vectorcnt; i++) {
 8008364:	2300      	movs	r3, #0
 8008366:	643b      	str	r3, [r7, #64]	; 0x40
 8008368:	e015      	b.n	8008396 <netconn_write_vectors_partly+0xba>
    size += vectors[i].len;
 800836a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800836c:	00db      	lsls	r3, r3, #3
 800836e:	68ba      	ldr	r2, [r7, #8]
 8008370:	4413      	add	r3, r2
 8008372:	685b      	ldr	r3, [r3, #4]
 8008374:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008376:	4413      	add	r3, r2
 8008378:	647b      	str	r3, [r7, #68]	; 0x44
    if (size < vectors[i].len) {
 800837a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800837c:	00db      	lsls	r3, r3, #3
 800837e:	68ba      	ldr	r2, [r7, #8]
 8008380:	4413      	add	r3, r2
 8008382:	685b      	ldr	r3, [r3, #4]
 8008384:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008386:	429a      	cmp	r2, r3
 8008388:	d202      	bcs.n	8008390 <netconn_write_vectors_partly+0xb4>
      /* overflow */
      return ERR_VAL;
 800838a:	f06f 0305 	mvn.w	r3, #5
 800838e:	e04c      	b.n	800842a <netconn_write_vectors_partly+0x14e>
  for (i = 0; i < vectorcnt; i++) {
 8008390:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008392:	3301      	adds	r3, #1
 8008394:	643b      	str	r3, [r7, #64]	; 0x40
 8008396:	88fb      	ldrh	r3, [r7, #6]
 8008398:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800839a:	429a      	cmp	r2, r3
 800839c:	dbe5      	blt.n	800836a <netconn_write_vectors_partly+0x8e>
    }
  }
  if (size == 0) {
 800839e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d101      	bne.n	80083a8 <netconn_write_vectors_partly+0xcc>
    return ERR_OK;
 80083a4:	2300      	movs	r3, #0
 80083a6:	e040      	b.n	800842a <netconn_write_vectors_partly+0x14e>
  } else if (size > SSIZE_MAX) {
 80083a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	da0a      	bge.n	80083c4 <netconn_write_vectors_partly+0xe8>
    ssize_t limited;
    /* this is required by the socket layer (cannot send full size_t range) */
    if (!bytes_written) {
 80083ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d102      	bne.n	80083ba <netconn_write_vectors_partly+0xde>
      return ERR_VAL;
 80083b4:	f06f 0305 	mvn.w	r3, #5
 80083b8:	e037      	b.n	800842a <netconn_write_vectors_partly+0x14e>
    }
    /* limit the amount of data to send */
    limited = SSIZE_MAX;
 80083ba:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80083be:	63bb      	str	r3, [r7, #56]	; 0x38
    size = (size_t)limited;
 80083c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083c2:	647b      	str	r3, [r7, #68]	; 0x44
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 80083c8:	68bb      	ldr	r3, [r7, #8]
 80083ca:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 80083cc:	88fb      	ldrh	r3, [r7, #6]
 80083ce:	843b      	strh	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 80083d0:	2300      	movs	r3, #0
 80083d2:	627b      	str	r3, [r7, #36]	; 0x24
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 80083d4:	797b      	ldrb	r3, [r7, #5]
 80083d6:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  API_MSG_VAR_REF(msg).msg.w.len = size;
 80083da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80083dc:	62bb      	str	r3, [r7, #40]	; 0x28
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 80083de:	2300      	movs	r3, #0
 80083e0:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 80083e2:	f107 0314 	add.w	r3, r7, #20
 80083e6:	4619      	mov	r1, r3
 80083e8:	4816      	ldr	r0, [pc, #88]	; (8008444 <netconn_write_vectors_partly+0x168>)
 80083ea:	f7ff fb9f 	bl	8007b2c <netconn_apimsg>
 80083ee:	4603      	mov	r3, r0
 80083f0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (err == ERR_OK) {
 80083f4:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d114      	bne.n	8008426 <netconn_write_vectors_partly+0x14a>
    if (bytes_written != NULL) {
 80083fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d002      	beq.n	8008408 <netconn_write_vectors_partly+0x12c>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 8008402:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008404:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008406:	601a      	str	r2, [r3, #0]
    }
    /* for blocking, check all requested bytes were written, NOTE: send_timeout is
       treated as dontblock (see dontblock assignment above) */
    if (!dontblock) {
 8008408:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800840c:	2b00      	cmp	r3, #0
 800840e:	d10a      	bne.n	8008426 <netconn_write_vectors_partly+0x14a>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 8008410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008412:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008414:	429a      	cmp	r2, r3
 8008416:	d006      	beq.n	8008426 <netconn_write_vectors_partly+0x14a>
 8008418:	4b06      	ldr	r3, [pc, #24]	; (8008434 <netconn_write_vectors_partly+0x158>)
 800841a:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800841e:	490a      	ldr	r1, [pc, #40]	; (8008448 <netconn_write_vectors_partly+0x16c>)
 8008420:	4806      	ldr	r0, [pc, #24]	; (800843c <netconn_write_vectors_partly+0x160>)
 8008422:	f00f f937 	bl	8017694 <iprintf>
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 8008426:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800842a:	4618      	mov	r0, r3
 800842c:	3748      	adds	r7, #72	; 0x48
 800842e:	46bd      	mov	sp, r7
 8008430:	bd80      	pop	{r7, pc}
 8008432:	bf00      	nop
 8008434:	080185e0 	.word	0x080185e0
 8008438:	080188b8 	.word	0x080188b8
 800843c:	08018638 	.word	0x08018638
 8008440:	080188d4 	.word	0x080188d4
 8008444:	08009a79 	.word	0x08009a79
 8008448:	080188f8 	.word	0x080188f8

0800844c <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 800844c:	b580      	push	{r7, lr}
 800844e:	b08c      	sub	sp, #48	; 0x30
 8008450:	af00      	add	r7, sp, #0
 8008452:	6078      	str	r0, [r7, #4]
 8008454:	460b      	mov	r3, r1
 8008456:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	2b00      	cmp	r3, #0
 800845c:	d109      	bne.n	8008472 <netconn_close_shutdown+0x26>
 800845e:	4b0f      	ldr	r3, [pc, #60]	; (800849c <netconn_close_shutdown+0x50>)
 8008460:	f240 4247 	movw	r2, #1095	; 0x447
 8008464:	490e      	ldr	r1, [pc, #56]	; (80084a0 <netconn_close_shutdown+0x54>)
 8008466:	480f      	ldr	r0, [pc, #60]	; (80084a4 <netconn_close_shutdown+0x58>)
 8008468:	f00f f914 	bl	8017694 <iprintf>
 800846c:	f06f 030f 	mvn.w	r3, #15
 8008470:	e010      	b.n	8008494 <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 8008476:	78fb      	ldrb	r3, [r7, #3]
 8008478:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800847a:	2329      	movs	r3, #41	; 0x29
 800847c:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 800847e:	f107 030c 	add.w	r3, r7, #12
 8008482:	4619      	mov	r1, r3
 8008484:	4808      	ldr	r0, [pc, #32]	; (80084a8 <netconn_close_shutdown+0x5c>)
 8008486:	f7ff fb51 	bl	8007b2c <netconn_apimsg>
 800848a:	4603      	mov	r3, r0
 800848c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8008490:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8008494:	4618      	mov	r0, r3
 8008496:	3730      	adds	r7, #48	; 0x30
 8008498:	46bd      	mov	sp, r7
 800849a:	bd80      	pop	{r7, pc}
 800849c:	080185e0 	.word	0x080185e0
 80084a0:	0801891c 	.word	0x0801891c
 80084a4:	08018638 	.word	0x08018638
 80084a8:	08009b91 	.word	0x08009b91

080084ac <netconn_close>:
 * @param conn the TCP netconn to close
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
err_t
netconn_close(struct netconn *conn)
{
 80084ac:	b580      	push	{r7, lr}
 80084ae:	b082      	sub	sp, #8
 80084b0:	af00      	add	r7, sp, #0
 80084b2:	6078      	str	r0, [r7, #4]
  /* shutting down both ends is the same as closing */
  return netconn_close_shutdown(conn, NETCONN_SHUT_RDWR);
 80084b4:	2103      	movs	r1, #3
 80084b6:	6878      	ldr	r0, [r7, #4]
 80084b8:	f7ff ffc8 	bl	800844c <netconn_close_shutdown>
 80084bc:	4603      	mov	r3, r0
}
 80084be:	4618      	mov	r0, r3
 80084c0:	3708      	adds	r7, #8
 80084c2:	46bd      	mov	sp, r7
 80084c4:	bd80      	pop	{r7, pc}

080084c6 <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 80084c6:	b580      	push	{r7, lr}
 80084c8:	b084      	sub	sp, #16
 80084ca:	af00      	add	r7, sp, #0
 80084cc:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d101      	bne.n	80084d8 <netconn_err+0x12>
    return ERR_OK;
 80084d4:	2300      	movs	r3, #0
 80084d6:	e00d      	b.n	80084f4 <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 80084d8:	f00e fee6 	bl	80172a8 <sys_arch_protect>
 80084dc:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	7a1b      	ldrb	r3, [r3, #8]
 80084e2:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	2200      	movs	r2, #0
 80084e8:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 80084ea:	68f8      	ldr	r0, [r7, #12]
 80084ec:	f00e feea 	bl	80172c4 <sys_arch_unprotect>
  return err;
 80084f0:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80084f4:	4618      	mov	r0, r3
 80084f6:	3710      	adds	r7, #16
 80084f8:	46bd      	mov	sp, r7
 80084fa:	bd80      	pop	{r7, pc}

080084fc <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 80084fc:	b580      	push	{r7, lr}
 80084fe:	b082      	sub	sp, #8
 8008500:	af00      	add	r7, sp, #0
 8008502:	4603      	mov	r3, r0
 8008504:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 8008506:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800850a:	f113 0f0d 	cmn.w	r3, #13
 800850e:	d009      	beq.n	8008524 <lwip_netconn_err_to_msg+0x28>
 8008510:	f113 0f0d 	cmn.w	r3, #13
 8008514:	dc0c      	bgt.n	8008530 <lwip_netconn_err_to_msg+0x34>
 8008516:	f113 0f0f 	cmn.w	r3, #15
 800851a:	d007      	beq.n	800852c <lwip_netconn_err_to_msg+0x30>
 800851c:	f113 0f0e 	cmn.w	r3, #14
 8008520:	d002      	beq.n	8008528 <lwip_netconn_err_to_msg+0x2c>
 8008522:	e005      	b.n	8008530 <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 8008524:	4b0a      	ldr	r3, [pc, #40]	; (8008550 <lwip_netconn_err_to_msg+0x54>)
 8008526:	e00e      	b.n	8008546 <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 8008528:	4b0a      	ldr	r3, [pc, #40]	; (8008554 <lwip_netconn_err_to_msg+0x58>)
 800852a:	e00c      	b.n	8008546 <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 800852c:	4b0a      	ldr	r3, [pc, #40]	; (8008558 <lwip_netconn_err_to_msg+0x5c>)
 800852e:	e00a      	b.n	8008546 <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 8008530:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008534:	2b00      	cmp	r3, #0
 8008536:	d005      	beq.n	8008544 <lwip_netconn_err_to_msg+0x48>
 8008538:	4b08      	ldr	r3, [pc, #32]	; (800855c <lwip_netconn_err_to_msg+0x60>)
 800853a:	227d      	movs	r2, #125	; 0x7d
 800853c:	4908      	ldr	r1, [pc, #32]	; (8008560 <lwip_netconn_err_to_msg+0x64>)
 800853e:	4809      	ldr	r0, [pc, #36]	; (8008564 <lwip_netconn_err_to_msg+0x68>)
 8008540:	f00f f8a8 	bl	8017694 <iprintf>
      return NULL;
 8008544:	2300      	movs	r3, #0
  }
}
 8008546:	4618      	mov	r0, r3
 8008548:	3708      	adds	r7, #8
 800854a:	46bd      	mov	sp, r7
 800854c:	bd80      	pop	{r7, pc}
 800854e:	bf00      	nop
 8008550:	0801be74 	.word	0x0801be74
 8008554:	0801be75 	.word	0x0801be75
 8008558:	0801be76 	.word	0x0801be76
 800855c:	08018938 	.word	0x08018938
 8008560:	0801896c 	.word	0x0801896c
 8008564:	0801897c 	.word	0x0801897c

08008568 <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 8008568:	b580      	push	{r7, lr}
 800856a:	b082      	sub	sp, #8
 800856c:	af00      	add	r7, sp, #0
 800856e:	6078      	str	r0, [r7, #4]
 8008570:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 8008572:	683b      	ldr	r3, [r7, #0]
 8008574:	2b00      	cmp	r3, #0
 8008576:	d105      	bne.n	8008584 <lwip_netconn_is_err_msg+0x1c>
 8008578:	4b12      	ldr	r3, [pc, #72]	; (80085c4 <lwip_netconn_is_err_msg+0x5c>)
 800857a:	2285      	movs	r2, #133	; 0x85
 800857c:	4912      	ldr	r1, [pc, #72]	; (80085c8 <lwip_netconn_is_err_msg+0x60>)
 800857e:	4813      	ldr	r0, [pc, #76]	; (80085cc <lwip_netconn_is_err_msg+0x64>)
 8008580:	f00f f888 	bl	8017694 <iprintf>

  if (msg == &netconn_aborted) {
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	4a12      	ldr	r2, [pc, #72]	; (80085d0 <lwip_netconn_is_err_msg+0x68>)
 8008588:	4293      	cmp	r3, r2
 800858a:	d104      	bne.n	8008596 <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 800858c:	683b      	ldr	r3, [r7, #0]
 800858e:	22f3      	movs	r2, #243	; 0xf3
 8008590:	701a      	strb	r2, [r3, #0]
    return 1;
 8008592:	2301      	movs	r3, #1
 8008594:	e012      	b.n	80085bc <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	4a0e      	ldr	r2, [pc, #56]	; (80085d4 <lwip_netconn_is_err_msg+0x6c>)
 800859a:	4293      	cmp	r3, r2
 800859c:	d104      	bne.n	80085a8 <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 800859e:	683b      	ldr	r3, [r7, #0]
 80085a0:	22f2      	movs	r2, #242	; 0xf2
 80085a2:	701a      	strb	r2, [r3, #0]
    return 1;
 80085a4:	2301      	movs	r3, #1
 80085a6:	e009      	b.n	80085bc <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	4a0b      	ldr	r2, [pc, #44]	; (80085d8 <lwip_netconn_is_err_msg+0x70>)
 80085ac:	4293      	cmp	r3, r2
 80085ae:	d104      	bne.n	80085ba <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 80085b0:	683b      	ldr	r3, [r7, #0]
 80085b2:	22f1      	movs	r2, #241	; 0xf1
 80085b4:	701a      	strb	r2, [r3, #0]
    return 1;
 80085b6:	2301      	movs	r3, #1
 80085b8:	e000      	b.n	80085bc <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 80085ba:	2300      	movs	r3, #0
}
 80085bc:	4618      	mov	r0, r3
 80085be:	3708      	adds	r7, #8
 80085c0:	46bd      	mov	sp, r7
 80085c2:	bd80      	pop	{r7, pc}
 80085c4:	08018938 	.word	0x08018938
 80085c8:	080189a4 	.word	0x080189a4
 80085cc:	0801897c 	.word	0x0801897c
 80085d0:	0801be74 	.word	0x0801be74
 80085d4:	0801be75 	.word	0x0801be75
 80085d8:	0801be76 	.word	0x0801be76

080085dc <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 80085dc:	b580      	push	{r7, lr}
 80085de:	b088      	sub	sp, #32
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	60f8      	str	r0, [r7, #12]
 80085e4:	60b9      	str	r1, [r7, #8]
 80085e6:	607a      	str	r2, [r7, #4]
 80085e8:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 80085ea:	68bb      	ldr	r3, [r7, #8]
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d105      	bne.n	80085fc <recv_udp+0x20>
 80085f0:	4b34      	ldr	r3, [pc, #208]	; (80086c4 <recv_udp+0xe8>)
 80085f2:	22e5      	movs	r2, #229	; 0xe5
 80085f4:	4934      	ldr	r1, [pc, #208]	; (80086c8 <recv_udp+0xec>)
 80085f6:	4835      	ldr	r0, [pc, #212]	; (80086cc <recv_udp+0xf0>)
 80085f8:	f00f f84c 	bl	8017694 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d105      	bne.n	800860e <recv_udp+0x32>
 8008602:	4b30      	ldr	r3, [pc, #192]	; (80086c4 <recv_udp+0xe8>)
 8008604:	22e6      	movs	r2, #230	; 0xe6
 8008606:	4932      	ldr	r1, [pc, #200]	; (80086d0 <recv_udp+0xf4>)
 8008608:	4830      	ldr	r0, [pc, #192]	; (80086cc <recv_udp+0xf0>)
 800860a:	f00f f843 	bl	8017694 <iprintf>
  conn = (struct netconn *)arg;
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 8008612:	69fb      	ldr	r3, [r7, #28]
 8008614:	2b00      	cmp	r3, #0
 8008616:	d103      	bne.n	8008620 <recv_udp+0x44>
    pbuf_free(p);
 8008618:	6878      	ldr	r0, [r7, #4]
 800861a:	f003 f995 	bl	800b948 <pbuf_free>
    return;
 800861e:	e04d      	b.n	80086bc <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 8008620:	69fb      	ldr	r3, [r7, #28]
 8008622:	685b      	ldr	r3, [r3, #4]
 8008624:	68ba      	ldr	r2, [r7, #8]
 8008626:	429a      	cmp	r2, r3
 8008628:	d005      	beq.n	8008636 <recv_udp+0x5a>
 800862a:	4b26      	ldr	r3, [pc, #152]	; (80086c4 <recv_udp+0xe8>)
 800862c:	22ee      	movs	r2, #238	; 0xee
 800862e:	4929      	ldr	r1, [pc, #164]	; (80086d4 <recv_udp+0xf8>)
 8008630:	4826      	ldr	r0, [pc, #152]	; (80086cc <recv_udp+0xf0>)
 8008632:	f00f f82f 	bl	8017694 <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8008636:	69fb      	ldr	r3, [r7, #28]
 8008638:	3310      	adds	r3, #16
 800863a:	4618      	mov	r0, r3
 800863c:	f00e fd19 	bl	8017072 <sys_mbox_valid>
 8008640:	4603      	mov	r3, r0
 8008642:	2b00      	cmp	r3, #0
 8008644:	d103      	bne.n	800864e <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 8008646:	6878      	ldr	r0, [r7, #4]
 8008648:	f003 f97e 	bl	800b948 <pbuf_free>
    return;
 800864c:	e036      	b.n	80086bc <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800864e:	2006      	movs	r0, #6
 8008650:	f002 fa54 	bl	800aafc <memp_malloc>
 8008654:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 8008656:	69bb      	ldr	r3, [r7, #24]
 8008658:	2b00      	cmp	r3, #0
 800865a:	d103      	bne.n	8008664 <recv_udp+0x88>
    pbuf_free(p);
 800865c:	6878      	ldr	r0, [r7, #4]
 800865e:	f003 f973 	bl	800b948 <pbuf_free>
    return;
 8008662:	e02b      	b.n	80086bc <recv_udp+0xe0>
  } else {
    buf->p = p;
 8008664:	69bb      	ldr	r3, [r7, #24]
 8008666:	687a      	ldr	r2, [r7, #4]
 8008668:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800866a:	69bb      	ldr	r3, [r7, #24]
 800866c:	687a      	ldr	r2, [r7, #4]
 800866e:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 8008670:	683b      	ldr	r3, [r7, #0]
 8008672:	2b00      	cmp	r3, #0
 8008674:	d002      	beq.n	800867c <recv_udp+0xa0>
 8008676:	683b      	ldr	r3, [r7, #0]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	e000      	b.n	800867e <recv_udp+0xa2>
 800867c:	2300      	movs	r3, #0
 800867e:	69ba      	ldr	r2, [r7, #24]
 8008680:	6093      	str	r3, [r2, #8]
    buf->port = port;
 8008682:	69bb      	ldr	r3, [r7, #24]
 8008684:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8008686:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	891b      	ldrh	r3, [r3, #8]
 800868c:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 800868e:	69fb      	ldr	r3, [r7, #28]
 8008690:	3310      	adds	r3, #16
 8008692:	69b9      	ldr	r1, [r7, #24]
 8008694:	4618      	mov	r0, r3
 8008696:	f00e fc77 	bl	8016f88 <sys_mbox_trypost>
 800869a:	4603      	mov	r3, r0
 800869c:	2b00      	cmp	r3, #0
 800869e:	d003      	beq.n	80086a8 <recv_udp+0xcc>
    netbuf_delete(buf);
 80086a0:	69b8      	ldr	r0, [r7, #24]
 80086a2:	f001 fb01 	bl	8009ca8 <netbuf_delete>
    return;
 80086a6:	e009      	b.n	80086bc <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 80086a8:	69fb      	ldr	r3, [r7, #28]
 80086aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d005      	beq.n	80086bc <recv_udp+0xe0>
 80086b0:	69fb      	ldr	r3, [r7, #28]
 80086b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086b4:	8afa      	ldrh	r2, [r7, #22]
 80086b6:	2100      	movs	r1, #0
 80086b8:	69f8      	ldr	r0, [r7, #28]
 80086ba:	4798      	blx	r3
  }
}
 80086bc:	3720      	adds	r7, #32
 80086be:	46bd      	mov	sp, r7
 80086c0:	bd80      	pop	{r7, pc}
 80086c2:	bf00      	nop
 80086c4:	08018938 	.word	0x08018938
 80086c8:	080189b0 	.word	0x080189b0
 80086cc:	0801897c 	.word	0x0801897c
 80086d0:	080189d4 	.word	0x080189d4
 80086d4:	080189f4 	.word	0x080189f4

080086d8 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 80086d8:	b580      	push	{r7, lr}
 80086da:	b088      	sub	sp, #32
 80086dc:	af00      	add	r7, sp, #0
 80086de:	60f8      	str	r0, [r7, #12]
 80086e0:	60b9      	str	r1, [r7, #8]
 80086e2:	607a      	str	r2, [r7, #4]
 80086e4:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 80086e6:	68bb      	ldr	r3, [r7, #8]
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d106      	bne.n	80086fa <recv_tcp+0x22>
 80086ec:	4b36      	ldr	r3, [pc, #216]	; (80087c8 <recv_tcp+0xf0>)
 80086ee:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80086f2:	4936      	ldr	r1, [pc, #216]	; (80087cc <recv_tcp+0xf4>)
 80086f4:	4836      	ldr	r0, [pc, #216]	; (80087d0 <recv_tcp+0xf8>)
 80086f6:	f00e ffcd 	bl	8017694 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d106      	bne.n	800870e <recv_tcp+0x36>
 8008700:	4b31      	ldr	r3, [pc, #196]	; (80087c8 <recv_tcp+0xf0>)
 8008702:	f240 122d 	movw	r2, #301	; 0x12d
 8008706:	4933      	ldr	r1, [pc, #204]	; (80087d4 <recv_tcp+0xfc>)
 8008708:	4831      	ldr	r0, [pc, #196]	; (80087d0 <recv_tcp+0xf8>)
 800870a:	f00e ffc3 	bl	8017694 <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 800870e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008712:	2b00      	cmp	r3, #0
 8008714:	d006      	beq.n	8008724 <recv_tcp+0x4c>
 8008716:	4b2c      	ldr	r3, [pc, #176]	; (80087c8 <recv_tcp+0xf0>)
 8008718:	f44f 7297 	mov.w	r2, #302	; 0x12e
 800871c:	492e      	ldr	r1, [pc, #184]	; (80087d8 <recv_tcp+0x100>)
 800871e:	482c      	ldr	r0, [pc, #176]	; (80087d0 <recv_tcp+0xf8>)
 8008720:	f00e ffb8 	bl	8017694 <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 8008728:	697b      	ldr	r3, [r7, #20]
 800872a:	2b00      	cmp	r3, #0
 800872c:	d102      	bne.n	8008734 <recv_tcp+0x5c>
    return ERR_VAL;
 800872e:	f06f 0305 	mvn.w	r3, #5
 8008732:	e045      	b.n	80087c0 <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 8008734:	697b      	ldr	r3, [r7, #20]
 8008736:	685b      	ldr	r3, [r3, #4]
 8008738:	68ba      	ldr	r2, [r7, #8]
 800873a:	429a      	cmp	r2, r3
 800873c:	d006      	beq.n	800874c <recv_tcp+0x74>
 800873e:	4b22      	ldr	r3, [pc, #136]	; (80087c8 <recv_tcp+0xf0>)
 8008740:	f240 1235 	movw	r2, #309	; 0x135
 8008744:	4925      	ldr	r1, [pc, #148]	; (80087dc <recv_tcp+0x104>)
 8008746:	4822      	ldr	r0, [pc, #136]	; (80087d0 <recv_tcp+0xf8>)
 8008748:	f00e ffa4 	bl	8017694 <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800874c:	697b      	ldr	r3, [r7, #20]
 800874e:	3310      	adds	r3, #16
 8008750:	4618      	mov	r0, r3
 8008752:	f00e fc8e 	bl	8017072 <sys_mbox_valid>
 8008756:	4603      	mov	r3, r0
 8008758:	2b00      	cmp	r3, #0
 800875a:	d10d      	bne.n	8008778 <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	2b00      	cmp	r3, #0
 8008760:	d008      	beq.n	8008774 <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	891b      	ldrh	r3, [r3, #8]
 8008766:	4619      	mov	r1, r3
 8008768:	68b8      	ldr	r0, [r7, #8]
 800876a:	f004 f8b5 	bl	800c8d8 <tcp_recved>
      pbuf_free(p);
 800876e:	6878      	ldr	r0, [r7, #4]
 8008770:	f003 f8ea 	bl	800b948 <pbuf_free>
    }
    return ERR_OK;
 8008774:	2300      	movs	r3, #0
 8008776:	e023      	b.n	80087c0 <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	2b00      	cmp	r3, #0
 800877c:	d005      	beq.n	800878a <recv_tcp+0xb2>
    msg = p;
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	891b      	ldrh	r3, [r3, #8]
 8008786:	83fb      	strh	r3, [r7, #30]
 8008788:	e003      	b.n	8008792 <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 800878a:	4b15      	ldr	r3, [pc, #84]	; (80087e0 <recv_tcp+0x108>)
 800878c:	61bb      	str	r3, [r7, #24]
    len = 0;
 800878e:	2300      	movs	r3, #0
 8008790:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 8008792:	697b      	ldr	r3, [r7, #20]
 8008794:	3310      	adds	r3, #16
 8008796:	69b9      	ldr	r1, [r7, #24]
 8008798:	4618      	mov	r0, r3
 800879a:	f00e fbf5 	bl	8016f88 <sys_mbox_trypost>
 800879e:	4603      	mov	r3, r0
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d002      	beq.n	80087aa <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 80087a4:	f04f 33ff 	mov.w	r3, #4294967295
 80087a8:	e00a      	b.n	80087c0 <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 80087aa:	697b      	ldr	r3, [r7, #20]
 80087ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d005      	beq.n	80087be <recv_tcp+0xe6>
 80087b2:	697b      	ldr	r3, [r7, #20]
 80087b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087b6:	8bfa      	ldrh	r2, [r7, #30]
 80087b8:	2100      	movs	r1, #0
 80087ba:	6978      	ldr	r0, [r7, #20]
 80087bc:	4798      	blx	r3
  }

  return ERR_OK;
 80087be:	2300      	movs	r3, #0
}
 80087c0:	4618      	mov	r0, r3
 80087c2:	3720      	adds	r7, #32
 80087c4:	46bd      	mov	sp, r7
 80087c6:	bd80      	pop	{r7, pc}
 80087c8:	08018938 	.word	0x08018938
 80087cc:	08018a14 	.word	0x08018a14
 80087d0:	0801897c 	.word	0x0801897c
 80087d4:	08018a38 	.word	0x08018a38
 80087d8:	08018a58 	.word	0x08018a58
 80087dc:	08018a70 	.word	0x08018a70
 80087e0:	0801be76 	.word	0x0801be76

080087e4 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 80087e4:	b580      	push	{r7, lr}
 80087e6:	b084      	sub	sp, #16
 80087e8:	af00      	add	r7, sp, #0
 80087ea:	6078      	str	r0, [r7, #4]
 80087ec:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d106      	bne.n	8008806 <poll_tcp+0x22>
 80087f8:	4b29      	ldr	r3, [pc, #164]	; (80088a0 <poll_tcp+0xbc>)
 80087fa:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 80087fe:	4929      	ldr	r1, [pc, #164]	; (80088a4 <poll_tcp+0xc0>)
 8008800:	4829      	ldr	r0, [pc, #164]	; (80088a8 <poll_tcp+0xc4>)
 8008802:	f00e ff47 	bl	8017694 <iprintf>

  if (conn->state == NETCONN_WRITE) {
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	785b      	ldrb	r3, [r3, #1]
 800880a:	2b01      	cmp	r3, #1
 800880c:	d104      	bne.n	8008818 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800880e:	2101      	movs	r1, #1
 8008810:	68f8      	ldr	r0, [r7, #12]
 8008812:	f000 ff65 	bl	80096e0 <lwip_netconn_do_writemore>
 8008816:	e016      	b.n	8008846 <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	785b      	ldrb	r3, [r3, #1]
 800881c:	2b04      	cmp	r3, #4
 800881e:	d112      	bne.n	8008846 <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	6a1b      	ldr	r3, [r3, #32]
 8008824:	2b00      	cmp	r3, #0
 8008826:	d00a      	beq.n	800883e <poll_tcp+0x5a>
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	6a1b      	ldr	r3, [r3, #32]
 800882c:	7a5b      	ldrb	r3, [r3, #9]
 800882e:	2b00      	cmp	r3, #0
 8008830:	d005      	beq.n	800883e <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	6a1b      	ldr	r3, [r3, #32]
 8008836:	7a5a      	ldrb	r2, [r3, #9]
 8008838:	3a01      	subs	r2, #1
 800883a:	b2d2      	uxtb	r2, r2
 800883c:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800883e:	2101      	movs	r1, #1
 8008840:	68f8      	ldr	r0, [r7, #12]
 8008842:	f000 fbf7 	bl	8009034 <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	7f1b      	ldrb	r3, [r3, #28]
 800884a:	f003 0310 	and.w	r3, r3, #16
 800884e:	2b00      	cmp	r3, #0
 8008850:	d021      	beq.n	8008896 <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	685b      	ldr	r3, [r3, #4]
 8008856:	2b00      	cmp	r3, #0
 8008858:	d01d      	beq.n	8008896 <poll_tcp+0xb2>
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	685b      	ldr	r3, [r3, #4]
 800885e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8008862:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 8008866:	d316      	bcc.n	8008896 <poll_tcp+0xb2>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	685b      	ldr	r3, [r3, #4]
 800886c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8008870:	2b04      	cmp	r3, #4
 8008872:	d810      	bhi.n	8008896 <poll_tcp+0xb2>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	7f1b      	ldrb	r3, [r3, #28]
 8008878:	f023 0310 	bic.w	r3, r3, #16
 800887c:	b2da      	uxtb	r2, r3
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008886:	2b00      	cmp	r3, #0
 8008888:	d005      	beq.n	8008896 <poll_tcp+0xb2>
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800888e:	2200      	movs	r2, #0
 8008890:	2102      	movs	r1, #2
 8008892:	68f8      	ldr	r0, [r7, #12]
 8008894:	4798      	blx	r3
    }
  }

  return ERR_OK;
 8008896:	2300      	movs	r3, #0
}
 8008898:	4618      	mov	r0, r3
 800889a:	3710      	adds	r7, #16
 800889c:	46bd      	mov	sp, r7
 800889e:	bd80      	pop	{r7, pc}
 80088a0:	08018938 	.word	0x08018938
 80088a4:	08018a90 	.word	0x08018a90
 80088a8:	0801897c 	.word	0x0801897c

080088ac <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 80088ac:	b580      	push	{r7, lr}
 80088ae:	b086      	sub	sp, #24
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	60f8      	str	r0, [r7, #12]
 80088b4:	60b9      	str	r1, [r7, #8]
 80088b6:	4613      	mov	r3, r2
 80088b8:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 80088be:	697b      	ldr	r3, [r7, #20]
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d106      	bne.n	80088d2 <sent_tcp+0x26>
 80088c4:	4b20      	ldr	r3, [pc, #128]	; (8008948 <sent_tcp+0x9c>)
 80088c6:	f240 1293 	movw	r2, #403	; 0x193
 80088ca:	4920      	ldr	r1, [pc, #128]	; (800894c <sent_tcp+0xa0>)
 80088cc:	4820      	ldr	r0, [pc, #128]	; (8008950 <sent_tcp+0xa4>)
 80088ce:	f00e fee1 	bl	8017694 <iprintf>

  if (conn) {
 80088d2:	697b      	ldr	r3, [r7, #20]
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d032      	beq.n	800893e <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 80088d8:	697b      	ldr	r3, [r7, #20]
 80088da:	785b      	ldrb	r3, [r3, #1]
 80088dc:	2b01      	cmp	r3, #1
 80088de:	d104      	bne.n	80088ea <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 80088e0:	2101      	movs	r1, #1
 80088e2:	6978      	ldr	r0, [r7, #20]
 80088e4:	f000 fefc 	bl	80096e0 <lwip_netconn_do_writemore>
 80088e8:	e007      	b.n	80088fa <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 80088ea:	697b      	ldr	r3, [r7, #20]
 80088ec:	785b      	ldrb	r3, [r3, #1]
 80088ee:	2b04      	cmp	r3, #4
 80088f0:	d103      	bne.n	80088fa <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 80088f2:	2101      	movs	r1, #1
 80088f4:	6978      	ldr	r0, [r7, #20]
 80088f6:	f000 fb9d 	bl	8009034 <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 80088fa:	697b      	ldr	r3, [r7, #20]
 80088fc:	685b      	ldr	r3, [r3, #4]
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d01d      	beq.n	800893e <sent_tcp+0x92>
 8008902:	697b      	ldr	r3, [r7, #20]
 8008904:	685b      	ldr	r3, [r3, #4]
 8008906:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800890a:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800890e:	d316      	bcc.n	800893e <sent_tcp+0x92>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8008910:	697b      	ldr	r3, [r7, #20]
 8008912:	685b      	ldr	r3, [r3, #4]
 8008914:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8008918:	2b04      	cmp	r3, #4
 800891a:	d810      	bhi.n	800893e <sent_tcp+0x92>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800891c:	697b      	ldr	r3, [r7, #20]
 800891e:	7f1b      	ldrb	r3, [r3, #28]
 8008920:	f023 0310 	bic.w	r3, r3, #16
 8008924:	b2da      	uxtb	r2, r3
 8008926:	697b      	ldr	r3, [r7, #20]
 8008928:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 800892a:	697b      	ldr	r3, [r7, #20]
 800892c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800892e:	2b00      	cmp	r3, #0
 8008930:	d005      	beq.n	800893e <sent_tcp+0x92>
 8008932:	697b      	ldr	r3, [r7, #20]
 8008934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008936:	88fa      	ldrh	r2, [r7, #6]
 8008938:	2102      	movs	r1, #2
 800893a:	6978      	ldr	r0, [r7, #20]
 800893c:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800893e:	2300      	movs	r3, #0
}
 8008940:	4618      	mov	r0, r3
 8008942:	3718      	adds	r7, #24
 8008944:	46bd      	mov	sp, r7
 8008946:	bd80      	pop	{r7, pc}
 8008948:	08018938 	.word	0x08018938
 800894c:	08018a90 	.word	0x08018a90
 8008950:	0801897c 	.word	0x0801897c

08008954 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 8008954:	b580      	push	{r7, lr}
 8008956:	b088      	sub	sp, #32
 8008958:	af00      	add	r7, sp, #0
 800895a:	6078      	str	r0, [r7, #4]
 800895c:	460b      	mov	r3, r1
 800895e:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8008964:	69fb      	ldr	r3, [r7, #28]
 8008966:	2b00      	cmp	r3, #0
 8008968:	d106      	bne.n	8008978 <err_tcp+0x24>
 800896a:	4b5f      	ldr	r3, [pc, #380]	; (8008ae8 <err_tcp+0x194>)
 800896c:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8008970:	495e      	ldr	r1, [pc, #376]	; (8008aec <err_tcp+0x198>)
 8008972:	485f      	ldr	r0, [pc, #380]	; (8008af0 <err_tcp+0x19c>)
 8008974:	f00e fe8e 	bl	8017694 <iprintf>

  SYS_ARCH_PROTECT(lev);
 8008978:	f00e fc96 	bl	80172a8 <sys_arch_protect>
 800897c:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 800897e:	69fb      	ldr	r3, [r7, #28]
 8008980:	2200      	movs	r2, #0
 8008982:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 8008984:	69fb      	ldr	r3, [r7, #28]
 8008986:	78fa      	ldrb	r2, [r7, #3]
 8008988:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 800898a:	69fb      	ldr	r3, [r7, #28]
 800898c:	7f1b      	ldrb	r3, [r3, #28]
 800898e:	f043 0301 	orr.w	r3, r3, #1
 8008992:	b2da      	uxtb	r2, r3
 8008994:	69fb      	ldr	r3, [r7, #28]
 8008996:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 8008998:	69fb      	ldr	r3, [r7, #28]
 800899a:	785b      	ldrb	r3, [r3, #1]
 800899c:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 800899e:	69fb      	ldr	r3, [r7, #28]
 80089a0:	2200      	movs	r2, #0
 80089a2:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 80089a4:	69b8      	ldr	r0, [r7, #24]
 80089a6:	f00e fc8d 	bl	80172c4 <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 80089aa:	69fb      	ldr	r3, [r7, #28]
 80089ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d005      	beq.n	80089be <err_tcp+0x6a>
 80089b2:	69fb      	ldr	r3, [r7, #28]
 80089b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089b6:	2200      	movs	r2, #0
 80089b8:	2104      	movs	r1, #4
 80089ba:	69f8      	ldr	r0, [r7, #28]
 80089bc:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 80089be:	69fb      	ldr	r3, [r7, #28]
 80089c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d005      	beq.n	80089d2 <err_tcp+0x7e>
 80089c6:	69fb      	ldr	r3, [r7, #28]
 80089c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089ca:	2200      	movs	r2, #0
 80089cc:	2100      	movs	r1, #0
 80089ce:	69f8      	ldr	r0, [r7, #28]
 80089d0:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 80089d2:	69fb      	ldr	r3, [r7, #28]
 80089d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d005      	beq.n	80089e6 <err_tcp+0x92>
 80089da:	69fb      	ldr	r3, [r7, #28]
 80089dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089de:	2200      	movs	r2, #0
 80089e0:	2102      	movs	r1, #2
 80089e2:	69f8      	ldr	r0, [r7, #28]
 80089e4:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 80089e6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80089ea:	4618      	mov	r0, r3
 80089ec:	f7ff fd86 	bl	80084fc <lwip_netconn_err_to_msg>
 80089f0:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 80089f2:	69fb      	ldr	r3, [r7, #28]
 80089f4:	3310      	adds	r3, #16
 80089f6:	4618      	mov	r0, r3
 80089f8:	f00e fb3b 	bl	8017072 <sys_mbox_valid>
 80089fc:	4603      	mov	r3, r0
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d005      	beq.n	8008a0e <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 8008a02:	69fb      	ldr	r3, [r7, #28]
 8008a04:	3310      	adds	r3, #16
 8008a06:	6939      	ldr	r1, [r7, #16]
 8008a08:	4618      	mov	r0, r3
 8008a0a:	f00e fabd 	bl	8016f88 <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 8008a0e:	69fb      	ldr	r3, [r7, #28]
 8008a10:	3314      	adds	r3, #20
 8008a12:	4618      	mov	r0, r3
 8008a14:	f00e fb2d 	bl	8017072 <sys_mbox_valid>
 8008a18:	4603      	mov	r3, r0
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d005      	beq.n	8008a2a <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 8008a1e:	69fb      	ldr	r3, [r7, #28]
 8008a20:	3314      	adds	r3, #20
 8008a22:	6939      	ldr	r1, [r7, #16]
 8008a24:	4618      	mov	r0, r3
 8008a26:	f00e faaf 	bl	8016f88 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 8008a2a:	7dfb      	ldrb	r3, [r7, #23]
 8008a2c:	2b01      	cmp	r3, #1
 8008a2e:	d005      	beq.n	8008a3c <err_tcp+0xe8>
 8008a30:	7dfb      	ldrb	r3, [r7, #23]
 8008a32:	2b04      	cmp	r3, #4
 8008a34:	d002      	beq.n	8008a3c <err_tcp+0xe8>
 8008a36:	7dfb      	ldrb	r3, [r7, #23]
 8008a38:	2b03      	cmp	r3, #3
 8008a3a:	d143      	bne.n	8008ac4 <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 8008a3c:	69fb      	ldr	r3, [r7, #28]
 8008a3e:	7f1b      	ldrb	r3, [r3, #28]
 8008a40:	f003 0304 	and.w	r3, r3, #4
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	bf14      	ite	ne
 8008a48:	2301      	movne	r3, #1
 8008a4a:	2300      	moveq	r3, #0
 8008a4c:	b2db      	uxtb	r3, r3
 8008a4e:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 8008a50:	69fb      	ldr	r3, [r7, #28]
 8008a52:	7f1b      	ldrb	r3, [r3, #28]
 8008a54:	f023 0304 	bic.w	r3, r3, #4
 8008a58:	b2da      	uxtb	r2, r3
 8008a5a:	69fb      	ldr	r3, [r7, #28]
 8008a5c:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d13b      	bne.n	8008adc <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8008a64:	69fb      	ldr	r3, [r7, #28]
 8008a66:	6a1b      	ldr	r3, [r3, #32]
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d106      	bne.n	8008a7a <err_tcp+0x126>
 8008a6c:	4b1e      	ldr	r3, [pc, #120]	; (8008ae8 <err_tcp+0x194>)
 8008a6e:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8008a72:	4920      	ldr	r1, [pc, #128]	; (8008af4 <err_tcp+0x1a0>)
 8008a74:	481e      	ldr	r0, [pc, #120]	; (8008af0 <err_tcp+0x19c>)
 8008a76:	f00e fe0d 	bl	8017694 <iprintf>
      if (old_state == NETCONN_CLOSE) {
 8008a7a:	7dfb      	ldrb	r3, [r7, #23]
 8008a7c:	2b04      	cmp	r3, #4
 8008a7e:	d104      	bne.n	8008a8a <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 8008a80:	69fb      	ldr	r3, [r7, #28]
 8008a82:	6a1b      	ldr	r3, [r3, #32]
 8008a84:	2200      	movs	r2, #0
 8008a86:	711a      	strb	r2, [r3, #4]
 8008a88:	e003      	b.n	8008a92 <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 8008a8a:	69fb      	ldr	r3, [r7, #28]
 8008a8c:	6a1b      	ldr	r3, [r3, #32]
 8008a8e:	78fa      	ldrb	r2, [r7, #3]
 8008a90:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8008a92:	69fb      	ldr	r3, [r7, #28]
 8008a94:	6a1b      	ldr	r3, [r3, #32]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	330c      	adds	r3, #12
 8008a9a:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 8008a9c:	68b8      	ldr	r0, [r7, #8]
 8008a9e:	f00e fb79 	bl	8017194 <sys_sem_valid>
 8008aa2:	4603      	mov	r3, r0
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d106      	bne.n	8008ab6 <err_tcp+0x162>
 8008aa8:	4b0f      	ldr	r3, [pc, #60]	; (8008ae8 <err_tcp+0x194>)
 8008aaa:	f240 12ef 	movw	r2, #495	; 0x1ef
 8008aae:	4912      	ldr	r1, [pc, #72]	; (8008af8 <err_tcp+0x1a4>)
 8008ab0:	480f      	ldr	r0, [pc, #60]	; (8008af0 <err_tcp+0x19c>)
 8008ab2:	f00e fdef 	bl	8017694 <iprintf>
      conn->current_msg = NULL;
 8008ab6:	69fb      	ldr	r3, [r7, #28]
 8008ab8:	2200      	movs	r2, #0
 8008aba:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 8008abc:	68b8      	ldr	r0, [r7, #8]
 8008abe:	f00e fb4f 	bl	8017160 <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 8008ac2:	e00b      	b.n	8008adc <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 8008ac4:	69fb      	ldr	r3, [r7, #28]
 8008ac6:	6a1b      	ldr	r3, [r3, #32]
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d008      	beq.n	8008ade <err_tcp+0x18a>
 8008acc:	4b06      	ldr	r3, [pc, #24]	; (8008ae8 <err_tcp+0x194>)
 8008ace:	f240 12f7 	movw	r2, #503	; 0x1f7
 8008ad2:	490a      	ldr	r1, [pc, #40]	; (8008afc <err_tcp+0x1a8>)
 8008ad4:	4806      	ldr	r0, [pc, #24]	; (8008af0 <err_tcp+0x19c>)
 8008ad6:	f00e fddd 	bl	8017694 <iprintf>
  }
}
 8008ada:	e000      	b.n	8008ade <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 8008adc:	bf00      	nop
}
 8008ade:	bf00      	nop
 8008ae0:	3720      	adds	r7, #32
 8008ae2:	46bd      	mov	sp, r7
 8008ae4:	bd80      	pop	{r7, pc}
 8008ae6:	bf00      	nop
 8008ae8:	08018938 	.word	0x08018938
 8008aec:	08018a90 	.word	0x08018a90
 8008af0:	0801897c 	.word	0x0801897c
 8008af4:	08018aa0 	.word	0x08018aa0
 8008af8:	08018abc 	.word	0x08018abc
 8008afc:	08018ad8 	.word	0x08018ad8

08008b00 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 8008b00:	b580      	push	{r7, lr}
 8008b02:	b084      	sub	sp, #16
 8008b04:	af00      	add	r7, sp, #0
 8008b06:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	685b      	ldr	r3, [r3, #4]
 8008b0c:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 8008b0e:	6879      	ldr	r1, [r7, #4]
 8008b10:	68f8      	ldr	r0, [r7, #12]
 8008b12:	f004 fda7 	bl	800d664 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 8008b16:	490a      	ldr	r1, [pc, #40]	; (8008b40 <setup_tcp+0x40>)
 8008b18:	68f8      	ldr	r0, [r7, #12]
 8008b1a:	f004 fdb5 	bl	800d688 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 8008b1e:	4909      	ldr	r1, [pc, #36]	; (8008b44 <setup_tcp+0x44>)
 8008b20:	68f8      	ldr	r0, [r7, #12]
 8008b22:	f004 fdd3 	bl	800d6cc <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 8008b26:	2202      	movs	r2, #2
 8008b28:	4907      	ldr	r1, [pc, #28]	; (8008b48 <setup_tcp+0x48>)
 8008b2a:	68f8      	ldr	r0, [r7, #12]
 8008b2c:	f004 fe2a 	bl	800d784 <tcp_poll>
  tcp_err(pcb, err_tcp);
 8008b30:	4906      	ldr	r1, [pc, #24]	; (8008b4c <setup_tcp+0x4c>)
 8008b32:	68f8      	ldr	r0, [r7, #12]
 8008b34:	f004 fdec 	bl	800d710 <tcp_err>
}
 8008b38:	bf00      	nop
 8008b3a:	3710      	adds	r7, #16
 8008b3c:	46bd      	mov	sp, r7
 8008b3e:	bd80      	pop	{r7, pc}
 8008b40:	080086d9 	.word	0x080086d9
 8008b44:	080088ad 	.word	0x080088ad
 8008b48:	080087e5 	.word	0x080087e5
 8008b4c:	08008955 	.word	0x08008955

08008b50 <accept_function>:
 *
 * @see tcp.h (struct tcp_pcb_listen.accept) for parameters and return value
 */
static err_t
accept_function(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 8008b50:	b590      	push	{r4, r7, lr}
 8008b52:	b089      	sub	sp, #36	; 0x24
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	60f8      	str	r0, [r7, #12]
 8008b58:	60b9      	str	r1, [r7, #8]
 8008b5a:	4613      	mov	r3, r2
 8008b5c:	71fb      	strb	r3, [r7, #7]
  struct netconn *newconn;
  struct netconn *conn = (struct netconn *)arg;
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 8008b62:	69fb      	ldr	r3, [r7, #28]
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d102      	bne.n	8008b6e <accept_function+0x1e>
    return ERR_VAL;
 8008b68:	f06f 0305 	mvn.w	r3, #5
 8008b6c:	e0a1      	b.n	8008cb2 <accept_function+0x162>
  }
  if (!NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 8008b6e:	69fb      	ldr	r3, [r7, #28]
 8008b70:	3314      	adds	r3, #20
 8008b72:	4618      	mov	r0, r3
 8008b74:	f00e fa7d 	bl	8017072 <sys_mbox_valid>
 8008b78:	4603      	mov	r3, r0
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d102      	bne.n	8008b84 <accept_function+0x34>
    LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: acceptmbox already deleted\n"));
    return ERR_VAL;
 8008b7e:	f06f 0305 	mvn.w	r3, #5
 8008b82:	e096      	b.n	8008cb2 <accept_function+0x162>
  }

  if (newpcb == NULL) {
 8008b84:	68bb      	ldr	r3, [r7, #8]
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d11b      	bne.n	8008bc2 <accept_function+0x72>
    /* out-of-pcbs during connect: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 8008b8a:	69fb      	ldr	r3, [r7, #28]
 8008b8c:	f103 0414 	add.w	r4, r3, #20
 8008b90:	f06f 000c 	mvn.w	r0, #12
 8008b94:	f7ff fcb2 	bl	80084fc <lwip_netconn_err_to_msg>
 8008b98:	4603      	mov	r3, r0
 8008b9a:	4619      	mov	r1, r3
 8008b9c:	4620      	mov	r0, r4
 8008b9e:	f00e f9f3 	bl	8016f88 <sys_mbox_trypost>
 8008ba2:	4603      	mov	r3, r0
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d109      	bne.n	8008bbc <accept_function+0x6c>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8008ba8:	69fb      	ldr	r3, [r7, #28]
 8008baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d005      	beq.n	8008bbc <accept_function+0x6c>
 8008bb0:	69fb      	ldr	r3, [r7, #28]
 8008bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bb4:	2200      	movs	r2, #0
 8008bb6:	2100      	movs	r1, #0
 8008bb8:	69f8      	ldr	r0, [r7, #28]
 8008bba:	4798      	blx	r3
    }
    return ERR_VAL;
 8008bbc:	f06f 0305 	mvn.w	r3, #5
 8008bc0:	e077      	b.n	8008cb2 <accept_function+0x162>
  }
  LWIP_ASSERT("expect newpcb == NULL or err == ERR_OK", err == ERR_OK);
 8008bc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d006      	beq.n	8008bd8 <accept_function+0x88>
 8008bca:	4b3c      	ldr	r3, [pc, #240]	; (8008cbc <accept_function+0x16c>)
 8008bcc:	f240 222a 	movw	r2, #554	; 0x22a
 8008bd0:	493b      	ldr	r1, [pc, #236]	; (8008cc0 <accept_function+0x170>)
 8008bd2:	483c      	ldr	r0, [pc, #240]	; (8008cc4 <accept_function+0x174>)
 8008bd4:	f00e fd5e 	bl	8017694 <iprintf>

  LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: newpcb->state: %s\n", tcp_debug_state_str(newpcb->state)));

  /* We have to set the callback here even though
   * the new socket is unknown. newconn->socket is marked as -1. */
  newconn = netconn_alloc(conn->type, conn->callback);
 8008bd8:	69fb      	ldr	r3, [r7, #28]
 8008bda:	781a      	ldrb	r2, [r3, #0]
 8008bdc:	69fb      	ldr	r3, [r7, #28]
 8008bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008be0:	4619      	mov	r1, r3
 8008be2:	4610      	mov	r0, r2
 8008be4:	f000 f8f0 	bl	8008dc8 <netconn_alloc>
 8008be8:	61b8      	str	r0, [r7, #24]
  if (newconn == NULL) {
 8008bea:	69bb      	ldr	r3, [r7, #24]
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d11b      	bne.n	8008c28 <accept_function+0xd8>
    /* outof netconns: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 8008bf0:	69fb      	ldr	r3, [r7, #28]
 8008bf2:	f103 0414 	add.w	r4, r3, #20
 8008bf6:	f06f 000c 	mvn.w	r0, #12
 8008bfa:	f7ff fc7f 	bl	80084fc <lwip_netconn_err_to_msg>
 8008bfe:	4603      	mov	r3, r0
 8008c00:	4619      	mov	r1, r3
 8008c02:	4620      	mov	r0, r4
 8008c04:	f00e f9c0 	bl	8016f88 <sys_mbox_trypost>
 8008c08:	4603      	mov	r3, r0
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d109      	bne.n	8008c22 <accept_function+0xd2>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8008c0e:	69fb      	ldr	r3, [r7, #28]
 8008c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d005      	beq.n	8008c22 <accept_function+0xd2>
 8008c16:	69fb      	ldr	r3, [r7, #28]
 8008c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c1a:	2200      	movs	r2, #0
 8008c1c:	2100      	movs	r1, #0
 8008c1e:	69f8      	ldr	r0, [r7, #28]
 8008c20:	4798      	blx	r3
    }
    return ERR_MEM;
 8008c22:	f04f 33ff 	mov.w	r3, #4294967295
 8008c26:	e044      	b.n	8008cb2 <accept_function+0x162>
  }
  newconn->pcb.tcp = newpcb;
 8008c28:	69bb      	ldr	r3, [r7, #24]
 8008c2a:	68ba      	ldr	r2, [r7, #8]
 8008c2c:	605a      	str	r2, [r3, #4]
  setup_tcp(newconn);
 8008c2e:	69b8      	ldr	r0, [r7, #24]
 8008c30:	f7ff ff66 	bl	8008b00 <setup_tcp>

  /* handle backlog counter */
  tcp_backlog_delayed(newpcb);

  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 8008c34:	69fb      	ldr	r3, [r7, #28]
 8008c36:	3314      	adds	r3, #20
 8008c38:	69b9      	ldr	r1, [r7, #24]
 8008c3a:	4618      	mov	r0, r3
 8008c3c:	f00e f9a4 	bl	8016f88 <sys_mbox_trypost>
 8008c40:	4603      	mov	r3, r0
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d02a      	beq.n	8008c9c <accept_function+0x14c>
    /* When returning != ERR_OK, the pcb is aborted in tcp_process(),
       so do nothing here! */
    /* remove all references to this netconn from the pcb */
    struct tcp_pcb *pcb = newconn->pcb.tcp;
 8008c46:	69bb      	ldr	r3, [r7, #24]
 8008c48:	685b      	ldr	r3, [r3, #4]
 8008c4a:	617b      	str	r3, [r7, #20]
    tcp_arg(pcb, NULL);
 8008c4c:	2100      	movs	r1, #0
 8008c4e:	6978      	ldr	r0, [r7, #20]
 8008c50:	f004 fd08 	bl	800d664 <tcp_arg>
    tcp_recv(pcb, NULL);
 8008c54:	2100      	movs	r1, #0
 8008c56:	6978      	ldr	r0, [r7, #20]
 8008c58:	f004 fd16 	bl	800d688 <tcp_recv>
    tcp_sent(pcb, NULL);
 8008c5c:	2100      	movs	r1, #0
 8008c5e:	6978      	ldr	r0, [r7, #20]
 8008c60:	f004 fd34 	bl	800d6cc <tcp_sent>
    tcp_poll(pcb, NULL, 0);
 8008c64:	2200      	movs	r2, #0
 8008c66:	2100      	movs	r1, #0
 8008c68:	6978      	ldr	r0, [r7, #20]
 8008c6a:	f004 fd8b 	bl	800d784 <tcp_poll>
    tcp_err(pcb, NULL);
 8008c6e:	2100      	movs	r1, #0
 8008c70:	6978      	ldr	r0, [r7, #20]
 8008c72:	f004 fd4d 	bl	800d710 <tcp_err>
    /* remove reference from to the pcb from this netconn */
    newconn->pcb.tcp = NULL;
 8008c76:	69bb      	ldr	r3, [r7, #24]
 8008c78:	2200      	movs	r2, #0
 8008c7a:	605a      	str	r2, [r3, #4]
    /* no need to drain since we know the recvmbox is empty. */
    sys_mbox_free(&newconn->recvmbox);
 8008c7c:	69bb      	ldr	r3, [r7, #24]
 8008c7e:	3310      	adds	r3, #16
 8008c80:	4618      	mov	r0, r3
 8008c82:	f00e f96f 	bl	8016f64 <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
 8008c86:	69bb      	ldr	r3, [r7, #24]
 8008c88:	3310      	adds	r3, #16
 8008c8a:	4618      	mov	r0, r3
 8008c8c:	f00e fa02 	bl	8017094 <sys_mbox_set_invalid>
    netconn_free(newconn);
 8008c90:	69b8      	ldr	r0, [r7, #24]
 8008c92:	f000 f907 	bl	8008ea4 <netconn_free>
    return ERR_MEM;
 8008c96:	f04f 33ff 	mov.w	r3, #4294967295
 8008c9a:	e00a      	b.n	8008cb2 <accept_function+0x162>
  } else {
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8008c9c:	69fb      	ldr	r3, [r7, #28]
 8008c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d005      	beq.n	8008cb0 <accept_function+0x160>
 8008ca4:	69fb      	ldr	r3, [r7, #28]
 8008ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ca8:	2200      	movs	r2, #0
 8008caa:	2100      	movs	r1, #0
 8008cac:	69f8      	ldr	r0, [r7, #28]
 8008cae:	4798      	blx	r3
  }

  return ERR_OK;
 8008cb0:	2300      	movs	r3, #0
}
 8008cb2:	4618      	mov	r0, r3
 8008cb4:	3724      	adds	r7, #36	; 0x24
 8008cb6:	46bd      	mov	sp, r7
 8008cb8:	bd90      	pop	{r4, r7, pc}
 8008cba:	bf00      	nop
 8008cbc:	08018938 	.word	0x08018938
 8008cc0:	08018af4 	.word	0x08018af4
 8008cc4:	0801897c 	.word	0x0801897c

08008cc8 <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 8008cc8:	b590      	push	{r4, r7, lr}
 8008cca:	b085      	sub	sp, #20
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 8008cd0:	2300      	movs	r3, #0
 8008cd2:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	685b      	ldr	r3, [r3, #4]
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d006      	beq.n	8008cec <pcb_new+0x24>
 8008cde:	4b2b      	ldr	r3, [pc, #172]	; (8008d8c <pcb_new+0xc4>)
 8008ce0:	f240 2265 	movw	r2, #613	; 0x265
 8008ce4:	492a      	ldr	r1, [pc, #168]	; (8008d90 <pcb_new+0xc8>)
 8008ce6:	482b      	ldr	r0, [pc, #172]	; (8008d94 <pcb_new+0xcc>)
 8008ce8:	f00e fcd4 	bl	8017694 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	781b      	ldrb	r3, [r3, #0]
 8008cf2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008cf6:	2b10      	cmp	r3, #16
 8008cf8:	d022      	beq.n	8008d40 <pcb_new+0x78>
 8008cfa:	2b20      	cmp	r3, #32
 8008cfc:	d133      	bne.n	8008d66 <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681c      	ldr	r4, [r3, #0]
 8008d02:	7bfb      	ldrb	r3, [r7, #15]
 8008d04:	4618      	mov	r0, r3
 8008d06:	f009 ff54 	bl	8012bb2 <udp_new_ip_type>
 8008d0a:	4603      	mov	r3, r0
 8008d0c:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	685b      	ldr	r3, [r3, #4]
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d02a      	beq.n	8008d6e <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	781b      	ldrb	r3, [r3, #0]
 8008d1e:	2b22      	cmp	r3, #34	; 0x22
 8008d20:	d104      	bne.n	8008d2c <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	685b      	ldr	r3, [r3, #4]
 8008d28:	2201      	movs	r2, #1
 8008d2a:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	6858      	ldr	r0, [r3, #4]
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	461a      	mov	r2, r3
 8008d38:	4917      	ldr	r1, [pc, #92]	; (8008d98 <pcb_new+0xd0>)
 8008d3a:	f009 fec1 	bl	8012ac0 <udp_recv>
      }
      break;
 8008d3e:	e016      	b.n	8008d6e <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681c      	ldr	r4, [r3, #0]
 8008d44:	7bfb      	ldrb	r3, [r7, #15]
 8008d46:	4618      	mov	r0, r3
 8008d48:	f004 fc7e 	bl	800d648 <tcp_new_ip_type>
 8008d4c:	4603      	mov	r3, r0
 8008d4e:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	685b      	ldr	r3, [r3, #4]
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d00b      	beq.n	8008d72 <pcb_new+0xaa>
        setup_tcp(msg->conn);
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	4618      	mov	r0, r3
 8008d60:	f7ff fece 	bl	8008b00 <setup_tcp>
      }
      break;
 8008d64:	e005      	b.n	8008d72 <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	22fa      	movs	r2, #250	; 0xfa
 8008d6a:	711a      	strb	r2, [r3, #4]
      return;
 8008d6c:	e00a      	b.n	8008d84 <pcb_new+0xbc>
      break;
 8008d6e:	bf00      	nop
 8008d70:	e000      	b.n	8008d74 <pcb_new+0xac>
      break;
 8008d72:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	685b      	ldr	r3, [r3, #4]
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d102      	bne.n	8008d84 <pcb_new+0xbc>
    msg->err = ERR_MEM;
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	22ff      	movs	r2, #255	; 0xff
 8008d82:	711a      	strb	r2, [r3, #4]
  }
}
 8008d84:	3714      	adds	r7, #20
 8008d86:	46bd      	mov	sp, r7
 8008d88:	bd90      	pop	{r4, r7, pc}
 8008d8a:	bf00      	nop
 8008d8c:	08018938 	.word	0x08018938
 8008d90:	08018b1c 	.word	0x08018b1c
 8008d94:	0801897c 	.word	0x0801897c
 8008d98:	080085dd 	.word	0x080085dd

08008d9c <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 8008d9c:	b580      	push	{r7, lr}
 8008d9e:	b084      	sub	sp, #16
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	2200      	movs	r2, #0
 8008dac:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	685b      	ldr	r3, [r3, #4]
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d102      	bne.n	8008dbe <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 8008db8:	68f8      	ldr	r0, [r7, #12]
 8008dba:	f7ff ff85 	bl	8008cc8 <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 8008dbe:	bf00      	nop
 8008dc0:	3710      	adds	r7, #16
 8008dc2:	46bd      	mov	sp, r7
 8008dc4:	bd80      	pop	{r7, pc}
	...

08008dc8 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 8008dc8:	b580      	push	{r7, lr}
 8008dca:	b086      	sub	sp, #24
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	4603      	mov	r3, r0
 8008dd0:	6039      	str	r1, [r7, #0]
 8008dd2:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 8008dd4:	2300      	movs	r3, #0
 8008dd6:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 8008dd8:	2007      	movs	r0, #7
 8008dda:	f001 fe8f 	bl	800aafc <memp_malloc>
 8008dde:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d101      	bne.n	8008dea <netconn_alloc+0x22>
    return NULL;
 8008de6:	2300      	movs	r3, #0
 8008de8:	e052      	b.n	8008e90 <netconn_alloc+0xc8>
  }

  conn->pending_err = ERR_OK;
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	2200      	movs	r2, #0
 8008dee:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	79fa      	ldrb	r2, [r7, #7]
 8008df4:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	2200      	movs	r2, #0
 8008dfa:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 8008dfc:	79fb      	ldrb	r3, [r7, #7]
 8008dfe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008e02:	2b10      	cmp	r3, #16
 8008e04:	d004      	beq.n	8008e10 <netconn_alloc+0x48>
 8008e06:	2b20      	cmp	r3, #32
 8008e08:	d105      	bne.n	8008e16 <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 8008e0a:	2306      	movs	r3, #6
 8008e0c:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 8008e0e:	e00a      	b.n	8008e26 <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 8008e10:	2306      	movs	r3, #6
 8008e12:	617b      	str	r3, [r7, #20]
      break;
 8008e14:	e007      	b.n	8008e26 <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 8008e16:	4b20      	ldr	r3, [pc, #128]	; (8008e98 <netconn_alloc+0xd0>)
 8008e18:	f240 22e5 	movw	r2, #741	; 0x2e5
 8008e1c:	491f      	ldr	r1, [pc, #124]	; (8008e9c <netconn_alloc+0xd4>)
 8008e1e:	4820      	ldr	r0, [pc, #128]	; (8008ea0 <netconn_alloc+0xd8>)
 8008e20:	f00e fc38 	bl	8017694 <iprintf>
      goto free_and_return;
 8008e24:	e02f      	b.n	8008e86 <netconn_alloc+0xbe>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	3310      	adds	r3, #16
 8008e2a:	6979      	ldr	r1, [r7, #20]
 8008e2c:	4618      	mov	r0, r3
 8008e2e:	f00e f877 	bl	8016f20 <sys_mbox_new>
 8008e32:	4603      	mov	r3, r0
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d125      	bne.n	8008e84 <netconn_alloc+0xbc>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	330c      	adds	r3, #12
 8008e3c:	2100      	movs	r1, #0
 8008e3e:	4618      	mov	r0, r3
 8008e40:	f00e f935 	bl	80170ae <sys_sem_new>
 8008e44:	4603      	mov	r3, r0
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d005      	beq.n	8008e56 <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	3310      	adds	r3, #16
 8008e4e:	4618      	mov	r0, r3
 8008e50:	f00e f888 	bl	8016f64 <sys_mbox_free>
    goto free_and_return;
 8008e54:	e017      	b.n	8008e86 <netconn_alloc+0xbe>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	3314      	adds	r3, #20
 8008e5a:	4618      	mov	r0, r3
 8008e5c:	f00e f91a 	bl	8017094 <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	2200      	movs	r2, #0
 8008e64:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	f04f 32ff 	mov.w	r2, #4294967295
 8008e6c:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	683a      	ldr	r2, [r7, #0]
 8008e72:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	2200      	movs	r2, #0
 8008e78:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	7cfa      	ldrb	r2, [r7, #19]
 8008e7e:	771a      	strb	r2, [r3, #28]
  return conn;
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	e005      	b.n	8008e90 <netconn_alloc+0xc8>
    goto free_and_return;
 8008e84:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 8008e86:	68f9      	ldr	r1, [r7, #12]
 8008e88:	2007      	movs	r0, #7
 8008e8a:	f001 fead 	bl	800abe8 <memp_free>
  return NULL;
 8008e8e:	2300      	movs	r3, #0
}
 8008e90:	4618      	mov	r0, r3
 8008e92:	3718      	adds	r7, #24
 8008e94:	46bd      	mov	sp, r7
 8008e96:	bd80      	pop	{r7, pc}
 8008e98:	08018938 	.word	0x08018938
 8008e9c:	08018b3c 	.word	0x08018b3c
 8008ea0:	0801897c 	.word	0x0801897c

08008ea4 <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 8008ea4:	b580      	push	{r7, lr}
 8008ea6:	b082      	sub	sp, #8
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	685b      	ldr	r3, [r3, #4]
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d006      	beq.n	8008ec2 <netconn_free+0x1e>
 8008eb4:	4b1b      	ldr	r3, [pc, #108]	; (8008f24 <netconn_free+0x80>)
 8008eb6:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8008eba:	491b      	ldr	r1, [pc, #108]	; (8008f28 <netconn_free+0x84>)
 8008ebc:	481b      	ldr	r0, [pc, #108]	; (8008f2c <netconn_free+0x88>)
 8008ebe:	f00e fbe9 	bl	8017694 <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	3310      	adds	r3, #16
 8008ec6:	4618      	mov	r0, r3
 8008ec8:	f00e f8d3 	bl	8017072 <sys_mbox_valid>
 8008ecc:	4603      	mov	r3, r0
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d006      	beq.n	8008ee0 <netconn_free+0x3c>
 8008ed2:	4b14      	ldr	r3, [pc, #80]	; (8008f24 <netconn_free+0x80>)
 8008ed4:	f240 3223 	movw	r2, #803	; 0x323
 8008ed8:	4915      	ldr	r1, [pc, #84]	; (8008f30 <netconn_free+0x8c>)
 8008eda:	4814      	ldr	r0, [pc, #80]	; (8008f2c <netconn_free+0x88>)
 8008edc:	f00e fbda 	bl	8017694 <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	3314      	adds	r3, #20
 8008ee4:	4618      	mov	r0, r3
 8008ee6:	f00e f8c4 	bl	8017072 <sys_mbox_valid>
 8008eea:	4603      	mov	r3, r0
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d006      	beq.n	8008efe <netconn_free+0x5a>
 8008ef0:	4b0c      	ldr	r3, [pc, #48]	; (8008f24 <netconn_free+0x80>)
 8008ef2:	f240 3226 	movw	r2, #806	; 0x326
 8008ef6:	490f      	ldr	r1, [pc, #60]	; (8008f34 <netconn_free+0x90>)
 8008ef8:	480c      	ldr	r0, [pc, #48]	; (8008f2c <netconn_free+0x88>)
 8008efa:	f00e fbcb 	bl	8017694 <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	330c      	adds	r3, #12
 8008f02:	4618      	mov	r0, r3
 8008f04:	f00e f939 	bl	801717a <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	330c      	adds	r3, #12
 8008f0c:	4618      	mov	r0, r3
 8008f0e:	f00e f952 	bl	80171b6 <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 8008f12:	6879      	ldr	r1, [r7, #4]
 8008f14:	2007      	movs	r0, #7
 8008f16:	f001 fe67 	bl	800abe8 <memp_free>
}
 8008f1a:	bf00      	nop
 8008f1c:	3708      	adds	r7, #8
 8008f1e:	46bd      	mov	sp, r7
 8008f20:	bd80      	pop	{r7, pc}
 8008f22:	bf00      	nop
 8008f24:	08018938 	.word	0x08018938
 8008f28:	08018b64 	.word	0x08018b64
 8008f2c:	0801897c 	.word	0x0801897c
 8008f30:	08018b94 	.word	0x08018b94
 8008f34:	08018bd0 	.word	0x08018bd0

08008f38 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 8008f38:	b580      	push	{r7, lr}
 8008f3a:	b086      	sub	sp, #24
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	3310      	adds	r3, #16
 8008f44:	4618      	mov	r0, r3
 8008f46:	f00e f894 	bl	8017072 <sys_mbox_valid>
 8008f4a:	4603      	mov	r3, r0
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d02f      	beq.n	8008fb0 <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8008f50:	e018      	b.n	8008f84 <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	781b      	ldrb	r3, [r3, #0]
 8008f56:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008f5a:	2b10      	cmp	r3, #16
 8008f5c:	d10e      	bne.n	8008f7c <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 8008f5e:	693b      	ldr	r3, [r7, #16]
 8008f60:	f107 020f 	add.w	r2, r7, #15
 8008f64:	4611      	mov	r1, r2
 8008f66:	4618      	mov	r0, r3
 8008f68:	f7ff fafe 	bl	8008568 <lwip_netconn_is_err_msg>
 8008f6c:	4603      	mov	r3, r0
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d108      	bne.n	8008f84 <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 8008f72:	693b      	ldr	r3, [r7, #16]
 8008f74:	4618      	mov	r0, r3
 8008f76:	f002 fce7 	bl	800b948 <pbuf_free>
 8008f7a:	e003      	b.n	8008f84 <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 8008f7c:	693b      	ldr	r3, [r7, #16]
 8008f7e:	4618      	mov	r0, r3
 8008f80:	f000 fe92 	bl	8009ca8 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	3310      	adds	r3, #16
 8008f88:	f107 0210 	add.w	r2, r7, #16
 8008f8c:	4611      	mov	r1, r2
 8008f8e:	4618      	mov	r0, r3
 8008f90:	f00e f853 	bl	801703a <sys_arch_mbox_tryfetch>
 8008f94:	4603      	mov	r3, r0
 8008f96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f9a:	d1da      	bne.n	8008f52 <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	3310      	adds	r3, #16
 8008fa0:	4618      	mov	r0, r3
 8008fa2:	f00d ffdf 	bl	8016f64 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	3310      	adds	r3, #16
 8008faa:	4618      	mov	r0, r3
 8008fac:	f00e f872 	bl	8017094 <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	3314      	adds	r3, #20
 8008fb4:	4618      	mov	r0, r3
 8008fb6:	f00e f85c 	bl	8017072 <sys_mbox_valid>
 8008fba:	4603      	mov	r3, r0
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d034      	beq.n	800902a <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 8008fc0:	e01d      	b.n	8008ffe <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 8008fc2:	693b      	ldr	r3, [r7, #16]
 8008fc4:	f107 020e 	add.w	r2, r7, #14
 8008fc8:	4611      	mov	r1, r2
 8008fca:	4618      	mov	r0, r3
 8008fcc:	f7ff facc 	bl	8008568 <lwip_netconn_is_err_msg>
 8008fd0:	4603      	mov	r3, r0
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d113      	bne.n	8008ffe <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 8008fd6:	693b      	ldr	r3, [r7, #16]
 8008fd8:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 8008fda:	6978      	ldr	r0, [r7, #20]
 8008fdc:	f7ff ffac 	bl	8008f38 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 8008fe0:	697b      	ldr	r3, [r7, #20]
 8008fe2:	685b      	ldr	r3, [r3, #4]
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d007      	beq.n	8008ff8 <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 8008fe8:	697b      	ldr	r3, [r7, #20]
 8008fea:	685b      	ldr	r3, [r3, #4]
 8008fec:	4618      	mov	r0, r3
 8008fee:	f003 faab 	bl	800c548 <tcp_abort>
            newconn->pcb.tcp = NULL;
 8008ff2:	697b      	ldr	r3, [r7, #20]
 8008ff4:	2200      	movs	r2, #0
 8008ff6:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 8008ff8:	6978      	ldr	r0, [r7, #20]
 8008ffa:	f7ff ff53 	bl	8008ea4 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	3314      	adds	r3, #20
 8009002:	f107 0210 	add.w	r2, r7, #16
 8009006:	4611      	mov	r1, r2
 8009008:	4618      	mov	r0, r3
 800900a:	f00e f816 	bl	801703a <sys_arch_mbox_tryfetch>
 800900e:	4603      	mov	r3, r0
 8009010:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009014:	d1d5      	bne.n	8008fc2 <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	3314      	adds	r3, #20
 800901a:	4618      	mov	r0, r3
 800901c:	f00d ffa2 	bl	8016f64 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	3314      	adds	r3, #20
 8009024:	4618      	mov	r0, r3
 8009026:	f00e f835 	bl	8017094 <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 800902a:	bf00      	nop
 800902c:	3718      	adds	r7, #24
 800902e:	46bd      	mov	sp, r7
 8009030:	bd80      	pop	{r7, pc}
	...

08009034 <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8009034:	b580      	push	{r7, lr}
 8009036:	b086      	sub	sp, #24
 8009038:	af00      	add	r7, sp, #0
 800903a:	6078      	str	r0, [r7, #4]
 800903c:	460b      	mov	r3, r1
 800903e:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 8009040:	2300      	movs	r3, #0
 8009042:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	2b00      	cmp	r3, #0
 8009048:	d106      	bne.n	8009058 <lwip_netconn_do_close_internal+0x24>
 800904a:	4b87      	ldr	r3, [pc, #540]	; (8009268 <lwip_netconn_do_close_internal+0x234>)
 800904c:	f240 32a2 	movw	r2, #930	; 0x3a2
 8009050:	4986      	ldr	r1, [pc, #536]	; (800926c <lwip_netconn_do_close_internal+0x238>)
 8009052:	4887      	ldr	r0, [pc, #540]	; (8009270 <lwip_netconn_do_close_internal+0x23c>)
 8009054:	f00e fb1e 	bl	8017694 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	781b      	ldrb	r3, [r3, #0]
 800905c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009060:	2b10      	cmp	r3, #16
 8009062:	d006      	beq.n	8009072 <lwip_netconn_do_close_internal+0x3e>
 8009064:	4b80      	ldr	r3, [pc, #512]	; (8009268 <lwip_netconn_do_close_internal+0x234>)
 8009066:	f240 32a3 	movw	r2, #931	; 0x3a3
 800906a:	4982      	ldr	r1, [pc, #520]	; (8009274 <lwip_netconn_do_close_internal+0x240>)
 800906c:	4880      	ldr	r0, [pc, #512]	; (8009270 <lwip_netconn_do_close_internal+0x23c>)
 800906e:	f00e fb11 	bl	8017694 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	785b      	ldrb	r3, [r3, #1]
 8009076:	2b04      	cmp	r3, #4
 8009078:	d006      	beq.n	8009088 <lwip_netconn_do_close_internal+0x54>
 800907a:	4b7b      	ldr	r3, [pc, #492]	; (8009268 <lwip_netconn_do_close_internal+0x234>)
 800907c:	f44f 7269 	mov.w	r2, #932	; 0x3a4
 8009080:	497d      	ldr	r1, [pc, #500]	; (8009278 <lwip_netconn_do_close_internal+0x244>)
 8009082:	487b      	ldr	r0, [pc, #492]	; (8009270 <lwip_netconn_do_close_internal+0x23c>)
 8009084:	f00e fb06 	bl	8017694 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	685b      	ldr	r3, [r3, #4]
 800908c:	2b00      	cmp	r3, #0
 800908e:	d106      	bne.n	800909e <lwip_netconn_do_close_internal+0x6a>
 8009090:	4b75      	ldr	r3, [pc, #468]	; (8009268 <lwip_netconn_do_close_internal+0x234>)
 8009092:	f240 32a5 	movw	r2, #933	; 0x3a5
 8009096:	4979      	ldr	r1, [pc, #484]	; (800927c <lwip_netconn_do_close_internal+0x248>)
 8009098:	4875      	ldr	r0, [pc, #468]	; (8009270 <lwip_netconn_do_close_internal+0x23c>)
 800909a:	f00e fafb 	bl	8017694 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	6a1b      	ldr	r3, [r3, #32]
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d106      	bne.n	80090b4 <lwip_netconn_do_close_internal+0x80>
 80090a6:	4b70      	ldr	r3, [pc, #448]	; (8009268 <lwip_netconn_do_close_internal+0x234>)
 80090a8:	f240 32a6 	movw	r2, #934	; 0x3a6
 80090ac:	4974      	ldr	r1, [pc, #464]	; (8009280 <lwip_netconn_do_close_internal+0x24c>)
 80090ae:	4870      	ldr	r0, [pc, #448]	; (8009270 <lwip_netconn_do_close_internal+0x23c>)
 80090b0:	f00e faf0 	bl	8017694 <iprintf>

  tpcb = conn->pcb.tcp;
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	685b      	ldr	r3, [r3, #4]
 80090b8:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	6a1b      	ldr	r3, [r3, #32]
 80090be:	7a1b      	ldrb	r3, [r3, #8]
 80090c0:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 80090c2:	7bfb      	ldrb	r3, [r7, #15]
 80090c4:	f003 0301 	and.w	r3, r3, #1
 80090c8:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 80090ca:	7bfb      	ldrb	r3, [r7, #15]
 80090cc:	f003 0302 	and.w	r3, r3, #2
 80090d0:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 80090d2:	7bfb      	ldrb	r3, [r7, #15]
 80090d4:	2b03      	cmp	r3, #3
 80090d6:	d102      	bne.n	80090de <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 80090d8:	2301      	movs	r3, #1
 80090da:	75bb      	strb	r3, [r7, #22]
 80090dc:	e01f      	b.n	800911e <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 80090de:	7bbb      	ldrb	r3, [r7, #14]
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d00e      	beq.n	8009102 <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 80090e4:	693b      	ldr	r3, [r7, #16]
 80090e6:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 80090e8:	2b05      	cmp	r3, #5
 80090ea:	d007      	beq.n	80090fc <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 80090ec:	693b      	ldr	r3, [r7, #16]
 80090ee:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 80090f0:	2b06      	cmp	r3, #6
 80090f2:	d003      	beq.n	80090fc <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 80090f4:	693b      	ldr	r3, [r7, #16]
 80090f6:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 80090f8:	2b08      	cmp	r3, #8
 80090fa:	d102      	bne.n	8009102 <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 80090fc:	2301      	movs	r3, #1
 80090fe:	75bb      	strb	r3, [r7, #22]
 8009100:	e00d      	b.n	800911e <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 8009102:	7b7b      	ldrb	r3, [r7, #13]
 8009104:	2b00      	cmp	r3, #0
 8009106:	d008      	beq.n	800911a <lwip_netconn_do_close_internal+0xe6>
 8009108:	693b      	ldr	r3, [r7, #16]
 800910a:	8b5b      	ldrh	r3, [r3, #26]
 800910c:	f003 0310 	and.w	r3, r3, #16
 8009110:	2b00      	cmp	r3, #0
 8009112:	d002      	beq.n	800911a <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 8009114:	2301      	movs	r3, #1
 8009116:	75bb      	strb	r3, [r7, #22]
 8009118:	e001      	b.n	800911e <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 800911a:	2300      	movs	r3, #0
 800911c:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 800911e:	7dbb      	ldrb	r3, [r7, #22]
 8009120:	2b00      	cmp	r3, #0
 8009122:	d003      	beq.n	800912c <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 8009124:	2100      	movs	r1, #0
 8009126:	6938      	ldr	r0, [r7, #16]
 8009128:	f004 fa9c 	bl	800d664 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 800912c:	693b      	ldr	r3, [r7, #16]
 800912e:	7d1b      	ldrb	r3, [r3, #20]
 8009130:	2b01      	cmp	r3, #1
 8009132:	d104      	bne.n	800913e <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 8009134:	2100      	movs	r1, #0
 8009136:	6938      	ldr	r0, [r7, #16]
 8009138:	f004 fb0c 	bl	800d754 <tcp_accept>
 800913c:	e01d      	b.n	800917a <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 800913e:	7bbb      	ldrb	r3, [r7, #14]
 8009140:	2b00      	cmp	r3, #0
 8009142:	d007      	beq.n	8009154 <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 8009144:	2100      	movs	r1, #0
 8009146:	6938      	ldr	r0, [r7, #16]
 8009148:	f004 fa9e 	bl	800d688 <tcp_recv>
      tcp_accept(tpcb, NULL);
 800914c:	2100      	movs	r1, #0
 800914e:	6938      	ldr	r0, [r7, #16]
 8009150:	f004 fb00 	bl	800d754 <tcp_accept>
    }
    if (shut_tx) {
 8009154:	7b7b      	ldrb	r3, [r7, #13]
 8009156:	2b00      	cmp	r3, #0
 8009158:	d003      	beq.n	8009162 <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 800915a:	2100      	movs	r1, #0
 800915c:	6938      	ldr	r0, [r7, #16]
 800915e:	f004 fab5 	bl	800d6cc <tcp_sent>
    }
    if (shut_close) {
 8009162:	7dbb      	ldrb	r3, [r7, #22]
 8009164:	2b00      	cmp	r3, #0
 8009166:	d008      	beq.n	800917a <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 8009168:	2200      	movs	r2, #0
 800916a:	2100      	movs	r1, #0
 800916c:	6938      	ldr	r0, [r7, #16]
 800916e:	f004 fb09 	bl	800d784 <tcp_poll>
      tcp_err(tpcb, NULL);
 8009172:	2100      	movs	r1, #0
 8009174:	6938      	ldr	r0, [r7, #16]
 8009176:	f004 facb 	bl	800d710 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 800917a:	7dbb      	ldrb	r3, [r7, #22]
 800917c:	2b00      	cmp	r3, #0
 800917e:	d005      	beq.n	800918c <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 8009180:	6938      	ldr	r0, [r7, #16]
 8009182:	f003 f89b 	bl	800c2bc <tcp_close>
 8009186:	4603      	mov	r3, r0
 8009188:	75fb      	strb	r3, [r7, #23]
 800918a:	e007      	b.n	800919c <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 800918c:	7bbb      	ldrb	r3, [r7, #14]
 800918e:	7b7a      	ldrb	r2, [r7, #13]
 8009190:	4619      	mov	r1, r3
 8009192:	6938      	ldr	r0, [r7, #16]
 8009194:	f003 f8be 	bl	800c314 <tcp_shutdown>
 8009198:	4603      	mov	r3, r0
 800919a:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 800919c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d102      	bne.n	80091aa <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 80091a4:	2301      	movs	r3, #1
 80091a6:	757b      	strb	r3, [r7, #21]
 80091a8:	e016      	b.n	80091d8 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 80091aa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80091ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091b2:	d10f      	bne.n	80091d4 <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	6a1b      	ldr	r3, [r3, #32]
 80091b8:	7a5b      	ldrb	r3, [r3, #9]
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d10c      	bne.n	80091d8 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 80091be:	2301      	movs	r3, #1
 80091c0:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 80091c2:	7dbb      	ldrb	r3, [r7, #22]
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d007      	beq.n	80091d8 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 80091c8:	6938      	ldr	r0, [r7, #16]
 80091ca:	f003 f9bd 	bl	800c548 <tcp_abort>
          err = ERR_OK;
 80091ce:	2300      	movs	r3, #0
 80091d0:	75fb      	strb	r3, [r7, #23]
 80091d2:	e001      	b.n	80091d8 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 80091d4:	2301      	movs	r3, #1
 80091d6:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 80091d8:	7d7b      	ldrb	r3, [r7, #21]
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d052      	beq.n	8009284 <lwip_netconn_do_close_internal+0x250>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	6a1b      	ldr	r3, [r3, #32]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	330c      	adds	r3, #12
 80091e6:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	6a1b      	ldr	r3, [r3, #32]
 80091ec:	7dfa      	ldrb	r2, [r7, #23]
 80091ee:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	2200      	movs	r2, #0
 80091f4:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	2200      	movs	r2, #0
 80091fa:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 80091fc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009200:	2b00      	cmp	r3, #0
 8009202:	d129      	bne.n	8009258 <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 8009204:	7dbb      	ldrb	r3, [r7, #22]
 8009206:	2b00      	cmp	r3, #0
 8009208:	d00c      	beq.n	8009224 <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	2200      	movs	r2, #0
 800920e:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009214:	2b00      	cmp	r3, #0
 8009216:	d005      	beq.n	8009224 <lwip_netconn_do_close_internal+0x1f0>
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800921c:	2200      	movs	r2, #0
 800921e:	2104      	movs	r1, #4
 8009220:	6878      	ldr	r0, [r7, #4]
 8009222:	4798      	blx	r3
      }
      if (shut_rx) {
 8009224:	7bbb      	ldrb	r3, [r7, #14]
 8009226:	2b00      	cmp	r3, #0
 8009228:	d009      	beq.n	800923e <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800922e:	2b00      	cmp	r3, #0
 8009230:	d005      	beq.n	800923e <lwip_netconn_do_close_internal+0x20a>
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009236:	2200      	movs	r2, #0
 8009238:	2100      	movs	r1, #0
 800923a:	6878      	ldr	r0, [r7, #4]
 800923c:	4798      	blx	r3
      }
      if (shut_tx) {
 800923e:	7b7b      	ldrb	r3, [r7, #13]
 8009240:	2b00      	cmp	r3, #0
 8009242:	d009      	beq.n	8009258 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009248:	2b00      	cmp	r3, #0
 800924a:	d005      	beq.n	8009258 <lwip_netconn_do_close_internal+0x224>
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009250:	2200      	movs	r2, #0
 8009252:	2102      	movs	r1, #2
 8009254:	6878      	ldr	r0, [r7, #4]
 8009256:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 8009258:	78fb      	ldrb	r3, [r7, #3]
 800925a:	2b00      	cmp	r3, #0
 800925c:	d002      	beq.n	8009264 <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 800925e:	68b8      	ldr	r0, [r7, #8]
 8009260:	f00d ff7e 	bl	8017160 <sys_sem_signal>
    }
    return ERR_OK;
 8009264:	2300      	movs	r3, #0
 8009266:	e03c      	b.n	80092e2 <lwip_netconn_do_close_internal+0x2ae>
 8009268:	08018938 	.word	0x08018938
 800926c:	08018c0c 	.word	0x08018c0c
 8009270:	0801897c 	.word	0x0801897c
 8009274:	08018c1c 	.word	0x08018c1c
 8009278:	08018c3c 	.word	0x08018c3c
 800927c:	08018c60 	.word	0x08018c60
 8009280:	08018aa0 	.word	0x08018aa0
  }
  if (!close_finished) {
 8009284:	7d7b      	ldrb	r3, [r7, #21]
 8009286:	2b00      	cmp	r3, #0
 8009288:	d11e      	bne.n	80092c8 <lwip_netconn_do_close_internal+0x294>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 800928a:	693b      	ldr	r3, [r7, #16]
 800928c:	7d1b      	ldrb	r3, [r3, #20]
 800928e:	2b01      	cmp	r3, #1
 8009290:	d106      	bne.n	80092a0 <lwip_netconn_do_close_internal+0x26c>
 8009292:	4b16      	ldr	r3, [pc, #88]	; (80092ec <lwip_netconn_do_close_internal+0x2b8>)
 8009294:	f240 4241 	movw	r2, #1089	; 0x441
 8009298:	4915      	ldr	r1, [pc, #84]	; (80092f0 <lwip_netconn_do_close_internal+0x2bc>)
 800929a:	4816      	ldr	r0, [pc, #88]	; (80092f4 <lwip_netconn_do_close_internal+0x2c0>)
 800929c:	f00e f9fa 	bl	8017694 <iprintf>
    if (shut_tx) {
 80092a0:	7b7b      	ldrb	r3, [r7, #13]
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d003      	beq.n	80092ae <lwip_netconn_do_close_internal+0x27a>
      tcp_sent(tpcb, sent_tcp);
 80092a6:	4914      	ldr	r1, [pc, #80]	; (80092f8 <lwip_netconn_do_close_internal+0x2c4>)
 80092a8:	6938      	ldr	r0, [r7, #16]
 80092aa:	f004 fa0f 	bl	800d6cc <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 80092ae:	2201      	movs	r2, #1
 80092b0:	4912      	ldr	r1, [pc, #72]	; (80092fc <lwip_netconn_do_close_internal+0x2c8>)
 80092b2:	6938      	ldr	r0, [r7, #16]
 80092b4:	f004 fa66 	bl	800d784 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 80092b8:	4911      	ldr	r1, [pc, #68]	; (8009300 <lwip_netconn_do_close_internal+0x2cc>)
 80092ba:	6938      	ldr	r0, [r7, #16]
 80092bc:	f004 fa28 	bl	800d710 <tcp_err>
    tcp_arg(tpcb, conn);
 80092c0:	6879      	ldr	r1, [r7, #4]
 80092c2:	6938      	ldr	r0, [r7, #16]
 80092c4:	f004 f9ce 	bl	800d664 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 80092c8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d106      	bne.n	80092de <lwip_netconn_do_close_internal+0x2aa>
 80092d0:	4b06      	ldr	r3, [pc, #24]	; (80092ec <lwip_netconn_do_close_internal+0x2b8>)
 80092d2:	f240 424d 	movw	r2, #1101	; 0x44d
 80092d6:	490b      	ldr	r1, [pc, #44]	; (8009304 <lwip_netconn_do_close_internal+0x2d0>)
 80092d8:	4806      	ldr	r0, [pc, #24]	; (80092f4 <lwip_netconn_do_close_internal+0x2c0>)
 80092da:	f00e f9db 	bl	8017694 <iprintf>
  return err;
 80092de:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80092e2:	4618      	mov	r0, r3
 80092e4:	3718      	adds	r7, #24
 80092e6:	46bd      	mov	sp, r7
 80092e8:	bd80      	pop	{r7, pc}
 80092ea:	bf00      	nop
 80092ec:	08018938 	.word	0x08018938
 80092f0:	08018c74 	.word	0x08018c74
 80092f4:	0801897c 	.word	0x0801897c
 80092f8:	080088ad 	.word	0x080088ad
 80092fc:	080087e5 	.word	0x080087e5
 8009300:	08008955 	.word	0x08008955
 8009304:	08018c98 	.word	0x08018c98

08009308 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 8009308:	b580      	push	{r7, lr}
 800930a:	b084      	sub	sp, #16
 800930c:	af00      	add	r7, sp, #0
 800930e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	785b      	ldrb	r3, [r3, #1]
 800931a:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 800931c:	7afb      	ldrb	r3, [r7, #11]
 800931e:	2b00      	cmp	r3, #0
 8009320:	d00d      	beq.n	800933e <lwip_netconn_do_delconn+0x36>
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	781b      	ldrb	r3, [r3, #0]
 8009328:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800932c:	2b10      	cmp	r3, #16
 800932e:	d006      	beq.n	800933e <lwip_netconn_do_delconn+0x36>
 8009330:	4b60      	ldr	r3, [pc, #384]	; (80094b4 <lwip_netconn_do_delconn+0x1ac>)
 8009332:	f240 425e 	movw	r2, #1118	; 0x45e
 8009336:	4960      	ldr	r1, [pc, #384]	; (80094b8 <lwip_netconn_do_delconn+0x1b0>)
 8009338:	4860      	ldr	r0, [pc, #384]	; (80094bc <lwip_netconn_do_delconn+0x1b4>)
 800933a:	f00e f9ab 	bl	8017694 <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 800933e:	7afb      	ldrb	r3, [r7, #11]
 8009340:	2b00      	cmp	r3, #0
 8009342:	d005      	beq.n	8009350 <lwip_netconn_do_delconn+0x48>
 8009344:	7afb      	ldrb	r3, [r7, #11]
 8009346:	2b02      	cmp	r3, #2
 8009348:	d002      	beq.n	8009350 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 800934a:	7afb      	ldrb	r3, [r7, #11]
 800934c:	2b03      	cmp	r3, #3
 800934e:	d109      	bne.n	8009364 <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 8009350:	7afb      	ldrb	r3, [r7, #11]
 8009352:	2b03      	cmp	r3, #3
 8009354:	d10a      	bne.n	800936c <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	7f1b      	ldrb	r3, [r3, #28]
 800935c:	f003 0304 	and.w	r3, r3, #4
 8009360:	2b00      	cmp	r3, #0
 8009362:	d103      	bne.n	800936c <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	22fb      	movs	r2, #251	; 0xfb
 8009368:	711a      	strb	r2, [r3, #4]
 800936a:	e097      	b.n	800949c <lwip_netconn_do_delconn+0x194>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 800936c:	7afb      	ldrb	r3, [r7, #11]
 800936e:	2b03      	cmp	r3, #3
 8009370:	d10d      	bne.n	800938e <lwip_netconn_do_delconn+0x86>
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	7f1b      	ldrb	r3, [r3, #28]
 8009378:	f003 0304 	and.w	r3, r3, #4
 800937c:	2b00      	cmp	r3, #0
 800937e:	d106      	bne.n	800938e <lwip_netconn_do_delconn+0x86>
 8009380:	4b4c      	ldr	r3, [pc, #304]	; (80094b4 <lwip_netconn_do_delconn+0x1ac>)
 8009382:	f240 427a 	movw	r2, #1146	; 0x47a
 8009386:	494e      	ldr	r1, [pc, #312]	; (80094c0 <lwip_netconn_do_delconn+0x1b8>)
 8009388:	484c      	ldr	r0, [pc, #304]	; (80094bc <lwip_netconn_do_delconn+0x1b4>)
 800938a:	f00e f983 	bl	8017694 <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	2200      	movs	r2, #0
 8009392:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	4618      	mov	r0, r3
 800939a:	f7ff fdcd 	bl	8008f38 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	685b      	ldr	r3, [r3, #4]
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d05f      	beq.n	8009468 <lwip_netconn_do_delconn+0x160>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	781b      	ldrb	r3, [r3, #0]
 80093ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80093b2:	2b10      	cmp	r3, #16
 80093b4:	d00d      	beq.n	80093d2 <lwip_netconn_do_delconn+0xca>
 80093b6:	2b20      	cmp	r3, #32
 80093b8:	d151      	bne.n	800945e <lwip_netconn_do_delconn+0x156>
          raw_remove(msg->conn->pcb.raw);
          break;
#endif /* LWIP_RAW */
#if LWIP_UDP
        case NETCONN_UDP:
          msg->conn->pcb.udp->recv_arg = NULL;
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	685b      	ldr	r3, [r3, #4]
 80093c0:	2200      	movs	r2, #0
 80093c2:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	685b      	ldr	r3, [r3, #4]
 80093ca:	4618      	mov	r0, r3
 80093cc:	f009 fb98 	bl	8012b00 <udp_remove>
          break;
 80093d0:	e046      	b.n	8009460 <lwip_netconn_do_delconn+0x158>
#endif /* LWIP_UDP */
#if LWIP_TCP
        case NETCONN_TCP:
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	6a1b      	ldr	r3, [r3, #32]
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d006      	beq.n	80093ea <lwip_netconn_do_delconn+0xe2>
 80093dc:	4b35      	ldr	r3, [pc, #212]	; (80094b4 <lwip_netconn_do_delconn+0x1ac>)
 80093de:	f240 4294 	movw	r2, #1172	; 0x494
 80093e2:	4938      	ldr	r1, [pc, #224]	; (80094c4 <lwip_netconn_do_delconn+0x1bc>)
 80093e4:	4835      	ldr	r0, [pc, #212]	; (80094bc <lwip_netconn_do_delconn+0x1b4>)
 80093e6:	f00e f955 	bl	8017694 <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	2204      	movs	r2, #4
 80093f0:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	2203      	movs	r2, #3
 80093f6:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	68fa      	ldr	r2, [r7, #12]
 80093fe:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	2100      	movs	r1, #0
 8009406:	4618      	mov	r0, r3
 8009408:	f7ff fe14 	bl	8009034 <lwip_netconn_do_close_internal>
 800940c:	4603      	mov	r3, r0
 800940e:	2b00      	cmp	r3, #0
 8009410:	d04b      	beq.n	80094aa <lwip_netconn_do_delconn+0x1a2>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	785b      	ldrb	r3, [r3, #1]
 8009418:	2b04      	cmp	r3, #4
 800941a:	d006      	beq.n	800942a <lwip_netconn_do_delconn+0x122>
 800941c:	4b25      	ldr	r3, [pc, #148]	; (80094b4 <lwip_netconn_do_delconn+0x1ac>)
 800941e:	f240 429a 	movw	r2, #1178	; 0x49a
 8009422:	4929      	ldr	r1, [pc, #164]	; (80094c8 <lwip_netconn_do_delconn+0x1c0>)
 8009424:	4825      	ldr	r0, [pc, #148]	; (80094bc <lwip_netconn_do_delconn+0x1b4>)
 8009426:	f00e f935 	bl	8017694 <iprintf>
            UNLOCK_TCPIP_CORE();
 800942a:	4828      	ldr	r0, [pc, #160]	; (80094cc <lwip_netconn_do_delconn+0x1c4>)
 800942c:	f00d ff09 	bl	8017242 <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	330c      	adds	r3, #12
 8009436:	2100      	movs	r1, #0
 8009438:	4618      	mov	r0, r3
 800943a:	f00d fe60 	bl	80170fe <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 800943e:	4823      	ldr	r0, [pc, #140]	; (80094cc <lwip_netconn_do_delconn+0x1c4>)
 8009440:	f00d fef0 	bl	8017224 <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	785b      	ldrb	r3, [r3, #1]
 800944a:	2b00      	cmp	r3, #0
 800944c:	d02d      	beq.n	80094aa <lwip_netconn_do_delconn+0x1a2>
 800944e:	4b19      	ldr	r3, [pc, #100]	; (80094b4 <lwip_netconn_do_delconn+0x1ac>)
 8009450:	f240 429e 	movw	r2, #1182	; 0x49e
 8009454:	491c      	ldr	r1, [pc, #112]	; (80094c8 <lwip_netconn_do_delconn+0x1c0>)
 8009456:	4819      	ldr	r0, [pc, #100]	; (80094bc <lwip_netconn_do_delconn+0x1b4>)
 8009458:	f00e f91c 	bl	8017694 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
          lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
 800945c:	e025      	b.n	80094aa <lwip_netconn_do_delconn+0x1a2>
#endif /* LWIP_TCP */
        default:
          break;
 800945e:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	2200      	movs	r2, #0
 8009466:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800946e:	2b00      	cmp	r3, #0
 8009470:	d007      	beq.n	8009482 <lwip_netconn_do_delconn+0x17a>
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009478:	68fa      	ldr	r2, [r7, #12]
 800947a:	6810      	ldr	r0, [r2, #0]
 800947c:	2200      	movs	r2, #0
 800947e:	2100      	movs	r1, #0
 8009480:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009488:	2b00      	cmp	r3, #0
 800948a:	d007      	beq.n	800949c <lwip_netconn_do_delconn+0x194>
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009492:	68fa      	ldr	r2, [r7, #12]
 8009494:	6810      	ldr	r0, [r2, #0]
 8009496:	2200      	movs	r2, #0
 8009498:	2102      	movs	r1, #2
 800949a:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	330c      	adds	r3, #12
 80094a2:	4618      	mov	r0, r3
 80094a4:	f00d fe76 	bl	8017194 <sys_sem_valid>
 80094a8:	e000      	b.n	80094ac <lwip_netconn_do_delconn+0x1a4>
          return;
 80094aa:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 80094ac:	3710      	adds	r7, #16
 80094ae:	46bd      	mov	sp, r7
 80094b0:	bd80      	pop	{r7, pc}
 80094b2:	bf00      	nop
 80094b4:	08018938 	.word	0x08018938
 80094b8:	08018ca8 	.word	0x08018ca8
 80094bc:	0801897c 	.word	0x0801897c
 80094c0:	08018cbc 	.word	0x08018cbc
 80094c4:	08018cdc 	.word	0x08018cdc
 80094c8:	08018cf8 	.word	0x08018cf8
 80094cc:	2000d1c0 	.word	0x2000d1c0

080094d0 <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 80094d0:	b580      	push	{r7, lr}
 80094d2:	b084      	sub	sp, #16
 80094d4:	af00      	add	r7, sp, #0
 80094d6:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 80094dc:	68bb      	ldr	r3, [r7, #8]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	685b      	ldr	r3, [r3, #4]
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d025      	beq.n	8009532 <lwip_netconn_do_bind+0x62>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 80094e6:	68bb      	ldr	r3, [r7, #8]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	781b      	ldrb	r3, [r3, #0]
 80094ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80094f0:	2b10      	cmp	r3, #16
 80094f2:	d00e      	beq.n	8009512 <lwip_netconn_do_bind+0x42>
 80094f4:	2b20      	cmp	r3, #32
 80094f6:	d119      	bne.n	800952c <lwip_netconn_do_bind+0x5c>
        err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 80094f8:	68bb      	ldr	r3, [r7, #8]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	6858      	ldr	r0, [r3, #4]
 80094fe:	68bb      	ldr	r3, [r7, #8]
 8009500:	6899      	ldr	r1, [r3, #8]
 8009502:	68bb      	ldr	r3, [r7, #8]
 8009504:	899b      	ldrh	r3, [r3, #12]
 8009506:	461a      	mov	r2, r3
 8009508:	f009 f9e4 	bl	80128d4 <udp_bind>
 800950c:	4603      	mov	r3, r0
 800950e:	73fb      	strb	r3, [r7, #15]
        break;
 8009510:	e011      	b.n	8009536 <lwip_netconn_do_bind+0x66>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8009512:	68bb      	ldr	r3, [r7, #8]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	6858      	ldr	r0, [r3, #4]
 8009518:	68bb      	ldr	r3, [r7, #8]
 800951a:	6899      	ldr	r1, [r3, #8]
 800951c:	68bb      	ldr	r3, [r7, #8]
 800951e:	899b      	ldrh	r3, [r3, #12]
 8009520:	461a      	mov	r2, r3
 8009522:	f003 f81d 	bl	800c560 <tcp_bind>
 8009526:	4603      	mov	r3, r0
 8009528:	73fb      	strb	r3, [r7, #15]
        break;
 800952a:	e004      	b.n	8009536 <lwip_netconn_do_bind+0x66>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 800952c:	23fa      	movs	r3, #250	; 0xfa
 800952e:	73fb      	strb	r3, [r7, #15]
        break;
 8009530:	e001      	b.n	8009536 <lwip_netconn_do_bind+0x66>
    }
  } else {
    err = ERR_VAL;
 8009532:	23fa      	movs	r3, #250	; 0xfa
 8009534:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 8009536:	68bb      	ldr	r3, [r7, #8]
 8009538:	7bfa      	ldrb	r2, [r7, #15]
 800953a:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800953c:	bf00      	nop
 800953e:	3710      	adds	r7, #16
 8009540:	46bd      	mov	sp, r7
 8009542:	bd80      	pop	{r7, pc}

08009544 <lwip_netconn_do_listen>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_listen(void *m)
{
 8009544:	b580      	push	{r7, lr}
 8009546:	b086      	sub	sp, #24
 8009548:	af00      	add	r7, sp, #0
 800954a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	617b      	str	r3, [r7, #20]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 8009550:	697b      	ldr	r3, [r7, #20]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	685b      	ldr	r3, [r3, #4]
 8009556:	2b00      	cmp	r3, #0
 8009558:	d07f      	beq.n	800965a <lwip_netconn_do_listen+0x116>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800955a:	697b      	ldr	r3, [r7, #20]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	781b      	ldrb	r3, [r3, #0]
 8009560:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009564:	2b10      	cmp	r3, #16
 8009566:	d175      	bne.n	8009654 <lwip_netconn_do_listen+0x110>
      if (msg->conn->state == NETCONN_NONE) {
 8009568:	697b      	ldr	r3, [r7, #20]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	785b      	ldrb	r3, [r3, #1]
 800956e:	2b00      	cmp	r3, #0
 8009570:	d165      	bne.n	800963e <lwip_netconn_do_listen+0xfa>
        struct tcp_pcb *lpcb;
        if (msg->conn->pcb.tcp->state != CLOSED) {
 8009572:	697b      	ldr	r3, [r7, #20]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	685b      	ldr	r3, [r3, #4]
 8009578:	7d1b      	ldrb	r3, [r3, #20]
 800957a:	2b00      	cmp	r3, #0
 800957c:	d002      	beq.n	8009584 <lwip_netconn_do_listen+0x40>
          /* connection is not closed, cannot listen */
          err = ERR_VAL;
 800957e:	23fa      	movs	r3, #250	; 0xfa
 8009580:	72fb      	strb	r3, [r7, #11]
 8009582:	e06c      	b.n	800965e <lwip_netconn_do_listen+0x11a>
        } else {
          u8_t backlog;
#if TCP_LISTEN_BACKLOG
          backlog = msg->msg.lb.backlog;
#else  /* TCP_LISTEN_BACKLOG */
          backlog = TCP_DEFAULT_LISTEN_BACKLOG;
 8009584:	23ff      	movs	r3, #255	; 0xff
 8009586:	74fb      	strb	r3, [r7, #19]
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->local_ip,  IPADDR_TYPE_ANY);
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->remote_ip, IPADDR_TYPE_ANY);
          }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

          lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
 8009588:	697b      	ldr	r3, [r7, #20]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	685b      	ldr	r3, [r3, #4]
 800958e:	f107 020b 	add.w	r2, r7, #11
 8009592:	7cf9      	ldrb	r1, [r7, #19]
 8009594:	4618      	mov	r0, r3
 8009596:	f003 f89b 	bl	800c6d0 <tcp_listen_with_backlog_and_err>
 800959a:	60f8      	str	r0, [r7, #12]

          if (lpcb == NULL) {
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d05d      	beq.n	800965e <lwip_netconn_do_listen+0x11a>
            /* in this case, the old pcb is still allocated */
          } else {
            /* delete the recvmbox and allocate the acceptmbox */
            if (sys_mbox_valid(&msg->conn->recvmbox)) {
 80095a2:	697b      	ldr	r3, [r7, #20]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	3310      	adds	r3, #16
 80095a8:	4618      	mov	r0, r3
 80095aa:	f00d fd62 	bl	8017072 <sys_mbox_valid>
 80095ae:	4603      	mov	r3, r0
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d00b      	beq.n	80095cc <lwip_netconn_do_listen+0x88>
              /** @todo: should we drain the recvmbox here? */
              sys_mbox_free(&msg->conn->recvmbox);
 80095b4:	697b      	ldr	r3, [r7, #20]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	3310      	adds	r3, #16
 80095ba:	4618      	mov	r0, r3
 80095bc:	f00d fcd2 	bl	8016f64 <sys_mbox_free>
              sys_mbox_set_invalid(&msg->conn->recvmbox);
 80095c0:	697b      	ldr	r3, [r7, #20]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	3310      	adds	r3, #16
 80095c6:	4618      	mov	r0, r3
 80095c8:	f00d fd64 	bl	8017094 <sys_mbox_set_invalid>
            }
            err = ERR_OK;
 80095cc:	2300      	movs	r3, #0
 80095ce:	72fb      	strb	r3, [r7, #11]
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 80095d0:	697b      	ldr	r3, [r7, #20]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	3314      	adds	r3, #20
 80095d6:	4618      	mov	r0, r3
 80095d8:	f00d fd4b 	bl	8017072 <sys_mbox_valid>
 80095dc:	4603      	mov	r3, r0
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d108      	bne.n	80095f4 <lwip_netconn_do_listen+0xb0>
              err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 80095e2:	697b      	ldr	r3, [r7, #20]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	3314      	adds	r3, #20
 80095e8:	2106      	movs	r1, #6
 80095ea:	4618      	mov	r0, r3
 80095ec:	f00d fc98 	bl	8016f20 <sys_mbox_new>
 80095f0:	4603      	mov	r3, r0
 80095f2:	72fb      	strb	r3, [r7, #11]
            }
            if (err == ERR_OK) {
 80095f4:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d118      	bne.n	800962e <lwip_netconn_do_listen+0xea>
              msg->conn->state = NETCONN_LISTEN;
 80095fc:	697b      	ldr	r3, [r7, #20]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	2202      	movs	r2, #2
 8009602:	705a      	strb	r2, [r3, #1]
              msg->conn->pcb.tcp = lpcb;
 8009604:	697b      	ldr	r3, [r7, #20]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	68fa      	ldr	r2, [r7, #12]
 800960a:	605a      	str	r2, [r3, #4]
              tcp_arg(msg->conn->pcb.tcp, msg->conn);
 800960c:	697b      	ldr	r3, [r7, #20]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	685a      	ldr	r2, [r3, #4]
 8009612:	697b      	ldr	r3, [r7, #20]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	4619      	mov	r1, r3
 8009618:	4610      	mov	r0, r2
 800961a:	f004 f823 	bl	800d664 <tcp_arg>
              tcp_accept(msg->conn->pcb.tcp, accept_function);
 800961e:	697b      	ldr	r3, [r7, #20]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	685b      	ldr	r3, [r3, #4]
 8009624:	4912      	ldr	r1, [pc, #72]	; (8009670 <lwip_netconn_do_listen+0x12c>)
 8009626:	4618      	mov	r0, r3
 8009628:	f004 f894 	bl	800d754 <tcp_accept>
 800962c:	e017      	b.n	800965e <lwip_netconn_do_listen+0x11a>
            } else {
              /* since the old pcb is already deallocated, free lpcb now */
              tcp_close(lpcb);
 800962e:	68f8      	ldr	r0, [r7, #12]
 8009630:	f002 fe44 	bl	800c2bc <tcp_close>
              msg->conn->pcb.tcp = NULL;
 8009634:	697b      	ldr	r3, [r7, #20]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	2200      	movs	r2, #0
 800963a:	605a      	str	r2, [r3, #4]
 800963c:	e00f      	b.n	800965e <lwip_netconn_do_listen+0x11a>
            }
          }
        }
      } else if (msg->conn->state == NETCONN_LISTEN) {
 800963e:	697b      	ldr	r3, [r7, #20]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	785b      	ldrb	r3, [r3, #1]
 8009644:	2b02      	cmp	r3, #2
 8009646:	d102      	bne.n	800964e <lwip_netconn_do_listen+0x10a>
        /* already listening, allow updating of the backlog */
        err = ERR_OK;
 8009648:	2300      	movs	r3, #0
 800964a:	72fb      	strb	r3, [r7, #11]
 800964c:	e007      	b.n	800965e <lwip_netconn_do_listen+0x11a>
        tcp_backlog_set(msg->conn->pcb.tcp, msg->msg.lb.backlog);
      } else {
        err = ERR_CONN;
 800964e:	23f5      	movs	r3, #245	; 0xf5
 8009650:	72fb      	strb	r3, [r7, #11]
 8009652:	e004      	b.n	800965e <lwip_netconn_do_listen+0x11a>
      }
    } else {
      err = ERR_ARG;
 8009654:	23f0      	movs	r3, #240	; 0xf0
 8009656:	72fb      	strb	r3, [r7, #11]
 8009658:	e001      	b.n	800965e <lwip_netconn_do_listen+0x11a>
    }
  } else {
    err = ERR_CONN;
 800965a:	23f5      	movs	r3, #245	; 0xf5
 800965c:	72fb      	strb	r3, [r7, #11]
  }
  msg->err = err;
 800965e:	f997 200b 	ldrsb.w	r2, [r7, #11]
 8009662:	697b      	ldr	r3, [r7, #20]
 8009664:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 8009666:	bf00      	nop
 8009668:	3718      	adds	r7, #24
 800966a:	46bd      	mov	sp, r7
 800966c:	bd80      	pop	{r7, pc}
 800966e:	bf00      	nop
 8009670:	08008b51 	.word	0x08008b51

08009674 <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 8009674:	b580      	push	{r7, lr}
 8009676:	b086      	sub	sp, #24
 8009678:	af00      	add	r7, sp, #0
 800967a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 8009680:	693b      	ldr	r3, [r7, #16]
 8009682:	2200      	movs	r2, #0
 8009684:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 8009686:	693b      	ldr	r3, [r7, #16]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	685b      	ldr	r3, [r3, #4]
 800968c:	2b00      	cmp	r3, #0
 800968e:	d022      	beq.n	80096d6 <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8009690:	693b      	ldr	r3, [r7, #16]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	781b      	ldrb	r3, [r3, #0]
 8009696:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800969a:	2b10      	cmp	r3, #16
 800969c:	d11b      	bne.n	80096d6 <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 800969e:	693b      	ldr	r3, [r7, #16]
 80096a0:	689b      	ldr	r3, [r3, #8]
 80096a2:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 80096a4:	697b      	ldr	r3, [r7, #20]
 80096a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80096aa:	d202      	bcs.n	80096b2 <lwip_netconn_do_recv+0x3e>
 80096ac:	697b      	ldr	r3, [r7, #20]
 80096ae:	b29b      	uxth	r3, r3
 80096b0:	e001      	b.n	80096b6 <lwip_netconn_do_recv+0x42>
 80096b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80096b6:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 80096b8:	693b      	ldr	r3, [r7, #16]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	685b      	ldr	r3, [r3, #4]
 80096be:	89fa      	ldrh	r2, [r7, #14]
 80096c0:	4611      	mov	r1, r2
 80096c2:	4618      	mov	r0, r3
 80096c4:	f003 f908 	bl	800c8d8 <tcp_recved>
        remaining -= recved;
 80096c8:	89fb      	ldrh	r3, [r7, #14]
 80096ca:	697a      	ldr	r2, [r7, #20]
 80096cc:	1ad3      	subs	r3, r2, r3
 80096ce:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 80096d0:	697b      	ldr	r3, [r7, #20]
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d1e6      	bne.n	80096a4 <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 80096d6:	bf00      	nop
 80096d8:	3718      	adds	r7, #24
 80096da:	46bd      	mov	sp, r7
 80096dc:	bd80      	pop	{r7, pc}
	...

080096e0 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 80096e0:	b580      	push	{r7, lr}
 80096e2:	b088      	sub	sp, #32
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	6078      	str	r0, [r7, #4]
 80096e8:	460b      	mov	r3, r1
 80096ea:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 80096ec:	2300      	movs	r3, #0
 80096ee:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d106      	bne.n	8009704 <lwip_netconn_do_writemore+0x24>
 80096f6:	4b96      	ldr	r3, [pc, #600]	; (8009950 <lwip_netconn_do_writemore+0x270>)
 80096f8:	f240 6273 	movw	r2, #1651	; 0x673
 80096fc:	4995      	ldr	r1, [pc, #596]	; (8009954 <lwip_netconn_do_writemore+0x274>)
 80096fe:	4896      	ldr	r0, [pc, #600]	; (8009958 <lwip_netconn_do_writemore+0x278>)
 8009700:	f00d ffc8 	bl	8017694 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	785b      	ldrb	r3, [r3, #1]
 8009708:	2b01      	cmp	r3, #1
 800970a:	d006      	beq.n	800971a <lwip_netconn_do_writemore+0x3a>
 800970c:	4b90      	ldr	r3, [pc, #576]	; (8009950 <lwip_netconn_do_writemore+0x270>)
 800970e:	f240 6274 	movw	r2, #1652	; 0x674
 8009712:	4992      	ldr	r1, [pc, #584]	; (800995c <lwip_netconn_do_writemore+0x27c>)
 8009714:	4890      	ldr	r0, [pc, #576]	; (8009958 <lwip_netconn_do_writemore+0x278>)
 8009716:	f00d ffbd 	bl	8017694 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	6a1b      	ldr	r3, [r3, #32]
 800971e:	2b00      	cmp	r3, #0
 8009720:	d106      	bne.n	8009730 <lwip_netconn_do_writemore+0x50>
 8009722:	4b8b      	ldr	r3, [pc, #556]	; (8009950 <lwip_netconn_do_writemore+0x270>)
 8009724:	f240 6275 	movw	r2, #1653	; 0x675
 8009728:	498d      	ldr	r1, [pc, #564]	; (8009960 <lwip_netconn_do_writemore+0x280>)
 800972a:	488b      	ldr	r0, [pc, #556]	; (8009958 <lwip_netconn_do_writemore+0x278>)
 800972c:	f00d ffb2 	bl	8017694 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	685b      	ldr	r3, [r3, #4]
 8009734:	2b00      	cmp	r3, #0
 8009736:	d106      	bne.n	8009746 <lwip_netconn_do_writemore+0x66>
 8009738:	4b85      	ldr	r3, [pc, #532]	; (8009950 <lwip_netconn_do_writemore+0x270>)
 800973a:	f240 6276 	movw	r2, #1654	; 0x676
 800973e:	4989      	ldr	r1, [pc, #548]	; (8009964 <lwip_netconn_do_writemore+0x284>)
 8009740:	4885      	ldr	r0, [pc, #532]	; (8009958 <lwip_netconn_do_writemore+0x278>)
 8009742:	f00d ffa7 	bl	8017694 <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	6a1b      	ldr	r3, [r3, #32]
 800974a:	699a      	ldr	r2, [r3, #24]
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	6a1b      	ldr	r3, [r3, #32]
 8009750:	695b      	ldr	r3, [r3, #20]
 8009752:	429a      	cmp	r2, r3
 8009754:	d306      	bcc.n	8009764 <lwip_netconn_do_writemore+0x84>
 8009756:	4b7e      	ldr	r3, [pc, #504]	; (8009950 <lwip_netconn_do_writemore+0x270>)
 8009758:	f240 6277 	movw	r2, #1655	; 0x677
 800975c:	4982      	ldr	r1, [pc, #520]	; (8009968 <lwip_netconn_do_writemore+0x288>)
 800975e:	487e      	ldr	r0, [pc, #504]	; (8009958 <lwip_netconn_do_writemore+0x278>)
 8009760:	f00d ff98 	bl	8017694 <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	6a1b      	ldr	r3, [r3, #32]
 8009768:	899b      	ldrh	r3, [r3, #12]
 800976a:	2b00      	cmp	r3, #0
 800976c:	d106      	bne.n	800977c <lwip_netconn_do_writemore+0x9c>
 800976e:	4b78      	ldr	r3, [pc, #480]	; (8009950 <lwip_netconn_do_writemore+0x270>)
 8009770:	f240 6279 	movw	r2, #1657	; 0x679
 8009774:	497d      	ldr	r1, [pc, #500]	; (800996c <lwip_netconn_do_writemore+0x28c>)
 8009776:	4878      	ldr	r0, [pc, #480]	; (8009958 <lwip_netconn_do_writemore+0x278>)
 8009778:	f00d ff8c 	bl	8017694 <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	6a1b      	ldr	r3, [r3, #32]
 8009780:	7f1b      	ldrb	r3, [r3, #28]
 8009782:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	7f1b      	ldrb	r3, [r3, #28]
 8009788:	f003 0302 	and.w	r3, r3, #2
 800978c:	2b00      	cmp	r3, #0
 800978e:	d104      	bne.n	800979a <lwip_netconn_do_writemore+0xba>
 8009790:	7ebb      	ldrb	r3, [r7, #26]
 8009792:	f003 0304 	and.w	r3, r3, #4
 8009796:	2b00      	cmp	r3, #0
 8009798:	d001      	beq.n	800979e <lwip_netconn_do_writemore+0xbe>
 800979a:	2301      	movs	r3, #1
 800979c:	e000      	b.n	80097a0 <lwip_netconn_do_writemore+0xc0>
 800979e:	2300      	movs	r3, #0
 80097a0:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	6a1b      	ldr	r3, [r3, #32]
 80097a6:	689b      	ldr	r3, [r3, #8]
 80097a8:	681a      	ldr	r2, [r3, #0]
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	6a1b      	ldr	r3, [r3, #32]
 80097ae:	691b      	ldr	r3, [r3, #16]
 80097b0:	4413      	add	r3, r2
 80097b2:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	6a1b      	ldr	r3, [r3, #32]
 80097b8:	689b      	ldr	r3, [r3, #8]
 80097ba:	685a      	ldr	r2, [r3, #4]
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	6a1b      	ldr	r3, [r3, #32]
 80097c0:	691b      	ldr	r3, [r3, #16]
 80097c2:	1ad3      	subs	r3, r2, r3
 80097c4:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 80097c6:	693b      	ldr	r3, [r7, #16]
 80097c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80097cc:	d307      	bcc.n	80097de <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 80097ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80097d2:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 80097d4:	7ebb      	ldrb	r3, [r7, #26]
 80097d6:	f043 0302 	orr.w	r3, r3, #2
 80097da:	76bb      	strb	r3, [r7, #26]
 80097dc:	e001      	b.n	80097e2 <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 80097de:	693b      	ldr	r3, [r7, #16]
 80097e0:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	685b      	ldr	r3, [r3, #4]
 80097e6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80097ea:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 80097ec:	89fa      	ldrh	r2, [r7, #14]
 80097ee:	8bbb      	ldrh	r3, [r7, #28]
 80097f0:	429a      	cmp	r2, r3
 80097f2:	d216      	bcs.n	8009822 <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 80097f4:	89fb      	ldrh	r3, [r7, #14]
 80097f6:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 80097f8:	7e3b      	ldrb	r3, [r7, #24]
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d00d      	beq.n	800981a <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 80097fe:	8bbb      	ldrh	r3, [r7, #28]
 8009800:	2b00      	cmp	r3, #0
 8009802:	d10e      	bne.n	8009822 <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	6a1b      	ldr	r3, [r3, #32]
 8009808:	699b      	ldr	r3, [r3, #24]
 800980a:	2b00      	cmp	r3, #0
 800980c:	d102      	bne.n	8009814 <lwip_netconn_do_writemore+0x134>
 800980e:	f06f 0306 	mvn.w	r3, #6
 8009812:	e000      	b.n	8009816 <lwip_netconn_do_writemore+0x136>
 8009814:	2300      	movs	r3, #0
 8009816:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 8009818:	e07d      	b.n	8009916 <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 800981a:	7ebb      	ldrb	r3, [r7, #26]
 800981c:	f043 0302 	orr.w	r3, r3, #2
 8009820:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	6a1b      	ldr	r3, [r3, #32]
 8009826:	691a      	ldr	r2, [r3, #16]
 8009828:	8bbb      	ldrh	r3, [r7, #28]
 800982a:	441a      	add	r2, r3
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	6a1b      	ldr	r3, [r3, #32]
 8009830:	689b      	ldr	r3, [r3, #8]
 8009832:	685b      	ldr	r3, [r3, #4]
 8009834:	429a      	cmp	r2, r3
 8009836:	d906      	bls.n	8009846 <lwip_netconn_do_writemore+0x166>
 8009838:	4b45      	ldr	r3, [pc, #276]	; (8009950 <lwip_netconn_do_writemore+0x270>)
 800983a:	f240 62a3 	movw	r2, #1699	; 0x6a3
 800983e:	494c      	ldr	r1, [pc, #304]	; (8009970 <lwip_netconn_do_writemore+0x290>)
 8009840:	4845      	ldr	r0, [pc, #276]	; (8009958 <lwip_netconn_do_writemore+0x278>)
 8009842:	f00d ff27 	bl	8017694 <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 8009846:	8bbb      	ldrh	r3, [r7, #28]
 8009848:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800984c:	4293      	cmp	r3, r2
 800984e:	d103      	bne.n	8009858 <lwip_netconn_do_writemore+0x178>
 8009850:	693b      	ldr	r3, [r7, #16]
 8009852:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009856:	d209      	bcs.n	800986c <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 8009858:	693b      	ldr	r3, [r7, #16]
 800985a:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 800985c:	8bba      	ldrh	r2, [r7, #28]
 800985e:	429a      	cmp	r2, r3
 8009860:	d10b      	bne.n	800987a <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	6a1b      	ldr	r3, [r3, #32]
 8009866:	899b      	ldrh	r3, [r3, #12]
 8009868:	2b01      	cmp	r3, #1
 800986a:	d906      	bls.n	800987a <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 800986c:	2301      	movs	r3, #1
 800986e:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 8009870:	7ebb      	ldrb	r3, [r7, #26]
 8009872:	f043 0302 	orr.w	r3, r3, #2
 8009876:	76bb      	strb	r3, [r7, #26]
 8009878:	e001      	b.n	800987e <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 800987a:	2300      	movs	r3, #0
 800987c:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	6858      	ldr	r0, [r3, #4]
 8009882:	7ebb      	ldrb	r3, [r7, #26]
 8009884:	8bba      	ldrh	r2, [r7, #28]
 8009886:	6979      	ldr	r1, [r7, #20]
 8009888:	f006 fe2e 	bl	80104e8 <tcp_write>
 800988c:	4603      	mov	r3, r0
 800988e:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 8009890:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009894:	2b00      	cmp	r3, #0
 8009896:	d12c      	bne.n	80098f2 <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	6a1b      	ldr	r3, [r3, #32]
 800989c:	6999      	ldr	r1, [r3, #24]
 800989e:	8bba      	ldrh	r2, [r7, #28]
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	6a1b      	ldr	r3, [r3, #32]
 80098a4:	440a      	add	r2, r1
 80098a6:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	6a1b      	ldr	r3, [r3, #32]
 80098ac:	6919      	ldr	r1, [r3, #16]
 80098ae:	8bba      	ldrh	r2, [r7, #28]
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	6a1b      	ldr	r3, [r3, #32]
 80098b4:	440a      	add	r2, r1
 80098b6:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	6a1b      	ldr	r3, [r3, #32]
 80098bc:	691a      	ldr	r2, [r3, #16]
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	6a1b      	ldr	r3, [r3, #32]
 80098c2:	689b      	ldr	r3, [r3, #8]
 80098c4:	685b      	ldr	r3, [r3, #4]
 80098c6:	429a      	cmp	r2, r3
 80098c8:	d113      	bne.n	80098f2 <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	6a1b      	ldr	r3, [r3, #32]
 80098ce:	899a      	ldrh	r2, [r3, #12]
 80098d0:	3a01      	subs	r2, #1
 80098d2:	b292      	uxth	r2, r2
 80098d4:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	6a1b      	ldr	r3, [r3, #32]
 80098da:	899b      	ldrh	r3, [r3, #12]
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d008      	beq.n	80098f2 <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	6a1b      	ldr	r3, [r3, #32]
 80098e4:	689a      	ldr	r2, [r3, #8]
 80098e6:	3208      	adds	r2, #8
 80098e8:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	6a1b      	ldr	r3, [r3, #32]
 80098ee:	2200      	movs	r2, #0
 80098f0:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 80098f2:	7e7b      	ldrb	r3, [r7, #25]
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d004      	beq.n	8009902 <lwip_netconn_do_writemore+0x222>
 80098f8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	f43f af50 	beq.w	80097a2 <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 8009902:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009906:	2b00      	cmp	r3, #0
 8009908:	d004      	beq.n	8009914 <lwip_netconn_do_writemore+0x234>
 800990a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800990e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009912:	d146      	bne.n	80099a2 <lwip_netconn_do_writemore+0x2c2>
err_mem:
 8009914:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 8009916:	7e3b      	ldrb	r3, [r7, #24]
 8009918:	2b00      	cmp	r3, #0
 800991a:	d02b      	beq.n	8009974 <lwip_netconn_do_writemore+0x294>
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	6a1b      	ldr	r3, [r3, #32]
 8009920:	699a      	ldr	r2, [r3, #24]
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	6a1b      	ldr	r3, [r3, #32]
 8009926:	695b      	ldr	r3, [r3, #20]
 8009928:	429a      	cmp	r2, r3
 800992a:	d223      	bcs.n	8009974 <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009930:	2b00      	cmp	r3, #0
 8009932:	d005      	beq.n	8009940 <lwip_netconn_do_writemore+0x260>
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009938:	2200      	movs	r2, #0
 800993a:	2103      	movs	r1, #3
 800993c:	6878      	ldr	r0, [r7, #4]
 800993e:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	7f1b      	ldrb	r3, [r3, #28]
 8009944:	f043 0310 	orr.w	r3, r3, #16
 8009948:	b2da      	uxtb	r2, r3
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	771a      	strb	r2, [r3, #28]
 800994e:	e028      	b.n	80099a2 <lwip_netconn_do_writemore+0x2c2>
 8009950:	08018938 	.word	0x08018938
 8009954:	08018a90 	.word	0x08018a90
 8009958:	0801897c 	.word	0x0801897c
 800995c:	08018d98 	.word	0x08018d98
 8009960:	08018aa0 	.word	0x08018aa0
 8009964:	08018db8 	.word	0x08018db8
 8009968:	08018dd0 	.word	0x08018dd0
 800996c:	08018e10 	.word	0x08018e10
 8009970:	08018e38 	.word	0x08018e38
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	685b      	ldr	r3, [r3, #4]
 8009978:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800997c:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 8009980:	d305      	bcc.n	800998e <lwip_netconn_do_writemore+0x2ae>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	685b      	ldr	r3, [r3, #4]
 8009986:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800998a:	2b04      	cmp	r3, #4
 800998c:	d909      	bls.n	80099a2 <lwip_netconn_do_writemore+0x2c2>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009992:	2b00      	cmp	r3, #0
 8009994:	d005      	beq.n	80099a2 <lwip_netconn_do_writemore+0x2c2>
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800999a:	2200      	movs	r2, #0
 800999c:	2103      	movs	r1, #3
 800999e:	6878      	ldr	r0, [r7, #4]
 80099a0:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 80099a2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d11d      	bne.n	80099e6 <lwip_netconn_do_writemore+0x306>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	6a1b      	ldr	r3, [r3, #32]
 80099ae:	699a      	ldr	r2, [r3, #24]
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	6a1b      	ldr	r3, [r3, #32]
 80099b4:	695b      	ldr	r3, [r3, #20]
 80099b6:	429a      	cmp	r2, r3
 80099b8:	d002      	beq.n	80099c0 <lwip_netconn_do_writemore+0x2e0>
 80099ba:	7e3b      	ldrb	r3, [r7, #24]
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d001      	beq.n	80099c4 <lwip_netconn_do_writemore+0x2e4>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 80099c0:	2301      	movs	r3, #1
 80099c2:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	685b      	ldr	r3, [r3, #4]
 80099c8:	4618      	mov	r0, r3
 80099ca:	f007 fb77 	bl	80110bc <tcp_output>
 80099ce:	4603      	mov	r3, r0
 80099d0:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 80099d2:	f997 300c 	ldrsb.w	r3, [r7, #12]
 80099d6:	f113 0f04 	cmn.w	r3, #4
 80099da:	d12c      	bne.n	8009a36 <lwip_netconn_do_writemore+0x356>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 80099dc:	7b3b      	ldrb	r3, [r7, #12]
 80099de:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 80099e0:	2301      	movs	r3, #1
 80099e2:	76fb      	strb	r3, [r7, #27]
 80099e4:	e027      	b.n	8009a36 <lwip_netconn_do_writemore+0x356>
      }
    } else if (err == ERR_MEM) {
 80099e6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80099ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099ee:	d120      	bne.n	8009a32 <lwip_netconn_do_writemore+0x352>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	685b      	ldr	r3, [r3, #4]
 80099f4:	4618      	mov	r0, r3
 80099f6:	f007 fb61 	bl	80110bc <tcp_output>
 80099fa:	4603      	mov	r3, r0
 80099fc:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 80099fe:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8009a02:	f113 0f04 	cmn.w	r3, #4
 8009a06:	d104      	bne.n	8009a12 <lwip_netconn_do_writemore+0x332>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 8009a08:	7b7b      	ldrb	r3, [r7, #13]
 8009a0a:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8009a0c:	2301      	movs	r3, #1
 8009a0e:	76fb      	strb	r3, [r7, #27]
 8009a10:	e011      	b.n	8009a36 <lwip_netconn_do_writemore+0x356>
      } else if (dontblock) {
 8009a12:	7e3b      	ldrb	r3, [r7, #24]
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d00e      	beq.n	8009a36 <lwip_netconn_do_writemore+0x356>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	6a1b      	ldr	r3, [r3, #32]
 8009a1c:	699b      	ldr	r3, [r3, #24]
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d102      	bne.n	8009a28 <lwip_netconn_do_writemore+0x348>
 8009a22:	f06f 0306 	mvn.w	r3, #6
 8009a26:	e000      	b.n	8009a2a <lwip_netconn_do_writemore+0x34a>
 8009a28:	2300      	movs	r3, #0
 8009a2a:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8009a2c:	2301      	movs	r3, #1
 8009a2e:	76fb      	strb	r3, [r7, #27]
 8009a30:	e001      	b.n	8009a36 <lwip_netconn_do_writemore+0x356>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 8009a32:	2301      	movs	r3, #1
 8009a34:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 8009a36:	7efb      	ldrb	r3, [r7, #27]
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d015      	beq.n	8009a68 <lwip_netconn_do_writemore+0x388>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	6a1b      	ldr	r3, [r3, #32]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	330c      	adds	r3, #12
 8009a44:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	6a1b      	ldr	r3, [r3, #32]
 8009a4a:	7ffa      	ldrb	r2, [r7, #31]
 8009a4c:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	2200      	movs	r2, #0
 8009a52:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	2200      	movs	r2, #0
 8009a58:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 8009a5a:	78fb      	ldrb	r3, [r7, #3]
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d006      	beq.n	8009a6e <lwip_netconn_do_writemore+0x38e>
#endif
    {
      sys_sem_signal(op_completed_sem);
 8009a60:	68b8      	ldr	r0, [r7, #8]
 8009a62:	f00d fb7d 	bl	8017160 <sys_sem_signal>
 8009a66:	e002      	b.n	8009a6e <lwip_netconn_do_writemore+0x38e>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 8009a68:	f04f 33ff 	mov.w	r3, #4294967295
 8009a6c:	e000      	b.n	8009a70 <lwip_netconn_do_writemore+0x390>
  }
#endif
  return ERR_OK;
 8009a6e:	2300      	movs	r3, #0
}
 8009a70:	4618      	mov	r0, r3
 8009a72:	3720      	adds	r7, #32
 8009a74:	46bd      	mov	sp, r7
 8009a76:	bd80      	pop	{r7, pc}

08009a78 <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 8009a78:	b580      	push	{r7, lr}
 8009a7a:	b084      	sub	sp, #16
 8009a7c:	af00      	add	r7, sp, #0
 8009a7e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 8009a84:	68bb      	ldr	r3, [r7, #8]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	4618      	mov	r0, r3
 8009a8a:	f7fe fd1c 	bl	80084c6 <netconn_err>
 8009a8e:	4603      	mov	r3, r0
 8009a90:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 8009a92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d166      	bne.n	8009b68 <lwip_netconn_do_write+0xf0>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8009a9a:	68bb      	ldr	r3, [r7, #8]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	781b      	ldrb	r3, [r3, #0]
 8009aa0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009aa4:	2b10      	cmp	r3, #16
 8009aa6:	d15d      	bne.n	8009b64 <lwip_netconn_do_write+0xec>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 8009aa8:	68bb      	ldr	r3, [r7, #8]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	785b      	ldrb	r3, [r3, #1]
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d002      	beq.n	8009ab8 <lwip_netconn_do_write+0x40>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
 8009ab2:	23fb      	movs	r3, #251	; 0xfb
 8009ab4:	73fb      	strb	r3, [r7, #15]
 8009ab6:	e057      	b.n	8009b68 <lwip_netconn_do_write+0xf0>
      } else if (msg->conn->pcb.tcp != NULL) {
 8009ab8:	68bb      	ldr	r3, [r7, #8]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	685b      	ldr	r3, [r3, #4]
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d04d      	beq.n	8009b5e <lwip_netconn_do_write+0xe6>
        msg->conn->state = NETCONN_WRITE;
 8009ac2:	68bb      	ldr	r3, [r7, #8]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	2201      	movs	r2, #1
 8009ac8:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8009aca:	68bb      	ldr	r3, [r7, #8]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	6a1b      	ldr	r3, [r3, #32]
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d006      	beq.n	8009ae2 <lwip_netconn_do_write+0x6a>
 8009ad4:	4b28      	ldr	r3, [pc, #160]	; (8009b78 <lwip_netconn_do_write+0x100>)
 8009ad6:	f240 7223 	movw	r2, #1827	; 0x723
 8009ada:	4928      	ldr	r1, [pc, #160]	; (8009b7c <lwip_netconn_do_write+0x104>)
 8009adc:	4828      	ldr	r0, [pc, #160]	; (8009b80 <lwip_netconn_do_write+0x108>)
 8009ade:	f00d fdd9 	bl	8017694 <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 8009ae2:	68bb      	ldr	r3, [r7, #8]
 8009ae4:	695b      	ldr	r3, [r3, #20]
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d106      	bne.n	8009af8 <lwip_netconn_do_write+0x80>
 8009aea:	4b23      	ldr	r3, [pc, #140]	; (8009b78 <lwip_netconn_do_write+0x100>)
 8009aec:	f240 7224 	movw	r2, #1828	; 0x724
 8009af0:	4924      	ldr	r1, [pc, #144]	; (8009b84 <lwip_netconn_do_write+0x10c>)
 8009af2:	4823      	ldr	r0, [pc, #140]	; (8009b80 <lwip_netconn_do_write+0x108>)
 8009af4:	f00d fdce 	bl	8017694 <iprintf>
        msg->conn->current_msg = msg;
 8009af8:	68bb      	ldr	r3, [r7, #8]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	68ba      	ldr	r2, [r7, #8]
 8009afe:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 8009b00:	68bb      	ldr	r3, [r7, #8]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	2100      	movs	r1, #0
 8009b06:	4618      	mov	r0, r3
 8009b08:	f7ff fdea 	bl	80096e0 <lwip_netconn_do_writemore>
 8009b0c:	4603      	mov	r3, r0
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d02e      	beq.n	8009b70 <lwip_netconn_do_write+0xf8>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 8009b12:	68bb      	ldr	r3, [r7, #8]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	785b      	ldrb	r3, [r3, #1]
 8009b18:	2b01      	cmp	r3, #1
 8009b1a:	d006      	beq.n	8009b2a <lwip_netconn_do_write+0xb2>
 8009b1c:	4b16      	ldr	r3, [pc, #88]	; (8009b78 <lwip_netconn_do_write+0x100>)
 8009b1e:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 8009b22:	4919      	ldr	r1, [pc, #100]	; (8009b88 <lwip_netconn_do_write+0x110>)
 8009b24:	4816      	ldr	r0, [pc, #88]	; (8009b80 <lwip_netconn_do_write+0x108>)
 8009b26:	f00d fdb5 	bl	8017694 <iprintf>
          UNLOCK_TCPIP_CORE();
 8009b2a:	4818      	ldr	r0, [pc, #96]	; (8009b8c <lwip_netconn_do_write+0x114>)
 8009b2c:	f00d fb89 	bl	8017242 <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8009b30:	68bb      	ldr	r3, [r7, #8]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	330c      	adds	r3, #12
 8009b36:	2100      	movs	r1, #0
 8009b38:	4618      	mov	r0, r3
 8009b3a:	f00d fae0 	bl	80170fe <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 8009b3e:	4813      	ldr	r0, [pc, #76]	; (8009b8c <lwip_netconn_do_write+0x114>)
 8009b40:	f00d fb70 	bl	8017224 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 8009b44:	68bb      	ldr	r3, [r7, #8]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	785b      	ldrb	r3, [r3, #1]
 8009b4a:	2b01      	cmp	r3, #1
 8009b4c:	d110      	bne.n	8009b70 <lwip_netconn_do_write+0xf8>
 8009b4e:	4b0a      	ldr	r3, [pc, #40]	; (8009b78 <lwip_netconn_do_write+0x100>)
 8009b50:	f240 722c 	movw	r2, #1836	; 0x72c
 8009b54:	490c      	ldr	r1, [pc, #48]	; (8009b88 <lwip_netconn_do_write+0x110>)
 8009b56:	480a      	ldr	r0, [pc, #40]	; (8009b80 <lwip_netconn_do_write+0x108>)
 8009b58:	f00d fd9c 	bl	8017694 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 8009b5c:	e008      	b.n	8009b70 <lwip_netconn_do_write+0xf8>
      } else {
        err = ERR_CONN;
 8009b5e:	23f5      	movs	r3, #245	; 0xf5
 8009b60:	73fb      	strb	r3, [r7, #15]
 8009b62:	e001      	b.n	8009b68 <lwip_netconn_do_write+0xf0>
#else /* LWIP_TCP */
      err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      err = ERR_VAL;
 8009b64:	23fa      	movs	r3, #250	; 0xfa
 8009b66:	73fb      	strb	r3, [r7, #15]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
 8009b68:	68bb      	ldr	r3, [r7, #8]
 8009b6a:	7bfa      	ldrb	r2, [r7, #15]
 8009b6c:	711a      	strb	r2, [r3, #4]
 8009b6e:	e000      	b.n	8009b72 <lwip_netconn_do_write+0xfa>
        return;
 8009b70:	bf00      	nop
  TCPIP_APIMSG_ACK(msg);
}
 8009b72:	3710      	adds	r7, #16
 8009b74:	46bd      	mov	sp, r7
 8009b76:	bd80      	pop	{r7, pc}
 8009b78:	08018938 	.word	0x08018938
 8009b7c:	08018cdc 	.word	0x08018cdc
 8009b80:	0801897c 	.word	0x0801897c
 8009b84:	08018e64 	.word	0x08018e64
 8009b88:	08018cf8 	.word	0x08018cf8
 8009b8c:	2000d1c0 	.word	0x2000d1c0

08009b90 <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 8009b90:	b580      	push	{r7, lr}
 8009b92:	b084      	sub	sp, #16
 8009b94:	af00      	add	r7, sp, #0
 8009b96:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	785b      	ldrb	r3, [r3, #1]
 8009ba2:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	685b      	ldr	r3, [r3, #4]
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d069      	beq.n	8009c82 <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	781b      	ldrb	r3, [r3, #0]
 8009bb4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 8009bb8:	2b10      	cmp	r3, #16
 8009bba:	d162      	bne.n	8009c82 <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 8009bc0:	2b03      	cmp	r3, #3
 8009bc2:	d002      	beq.n	8009bca <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 8009bc4:	7afb      	ldrb	r3, [r7, #11]
 8009bc6:	2b02      	cmp	r3, #2
 8009bc8:	d05b      	beq.n	8009c82 <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 8009bca:	7afb      	ldrb	r3, [r7, #11]
 8009bcc:	2b03      	cmp	r3, #3
 8009bce:	d103      	bne.n	8009bd8 <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	22f5      	movs	r2, #245	; 0xf5
 8009bd4:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 8009bd6:	e059      	b.n	8009c8c <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 8009bd8:	7afb      	ldrb	r3, [r7, #11]
 8009bda:	2b01      	cmp	r3, #1
 8009bdc:	d103      	bne.n	8009be6 <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	22fb      	movs	r2, #251	; 0xfb
 8009be2:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 8009be4:	e052      	b.n	8009c8c <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	7a1b      	ldrb	r3, [r3, #8]
 8009bea:	f003 0301 	and.w	r3, r3, #1
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d004      	beq.n	8009bfc <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	4618      	mov	r0, r3
 8009bf8:	f7ff f99e 	bl	8008f38 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	6a1b      	ldr	r3, [r3, #32]
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d006      	beq.n	8009c14 <lwip_netconn_do_close+0x84>
 8009c06:	4b23      	ldr	r3, [pc, #140]	; (8009c94 <lwip_netconn_do_close+0x104>)
 8009c08:	f240 72bd 	movw	r2, #1981	; 0x7bd
 8009c0c:	4922      	ldr	r1, [pc, #136]	; (8009c98 <lwip_netconn_do_close+0x108>)
 8009c0e:	4823      	ldr	r0, [pc, #140]	; (8009c9c <lwip_netconn_do_close+0x10c>)
 8009c10:	f00d fd40 	bl	8017694 <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	2204      	movs	r2, #4
 8009c1a:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	68fa      	ldr	r2, [r7, #12]
 8009c22:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	2100      	movs	r1, #0
 8009c2a:	4618      	mov	r0, r3
 8009c2c:	f7ff fa02 	bl	8009034 <lwip_netconn_do_close_internal>
 8009c30:	4603      	mov	r3, r0
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d029      	beq.n	8009c8a <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	785b      	ldrb	r3, [r3, #1]
 8009c3c:	2b04      	cmp	r3, #4
 8009c3e:	d006      	beq.n	8009c4e <lwip_netconn_do_close+0xbe>
 8009c40:	4b14      	ldr	r3, [pc, #80]	; (8009c94 <lwip_netconn_do_close+0x104>)
 8009c42:	f240 72c2 	movw	r2, #1986	; 0x7c2
 8009c46:	4916      	ldr	r1, [pc, #88]	; (8009ca0 <lwip_netconn_do_close+0x110>)
 8009c48:	4814      	ldr	r0, [pc, #80]	; (8009c9c <lwip_netconn_do_close+0x10c>)
 8009c4a:	f00d fd23 	bl	8017694 <iprintf>
        UNLOCK_TCPIP_CORE();
 8009c4e:	4815      	ldr	r0, [pc, #84]	; (8009ca4 <lwip_netconn_do_close+0x114>)
 8009c50:	f00d faf7 	bl	8017242 <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	330c      	adds	r3, #12
 8009c5a:	2100      	movs	r1, #0
 8009c5c:	4618      	mov	r0, r3
 8009c5e:	f00d fa4e 	bl	80170fe <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 8009c62:	4810      	ldr	r0, [pc, #64]	; (8009ca4 <lwip_netconn_do_close+0x114>)
 8009c64:	f00d fade 	bl	8017224 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	785b      	ldrb	r3, [r3, #1]
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d00b      	beq.n	8009c8a <lwip_netconn_do_close+0xfa>
 8009c72:	4b08      	ldr	r3, [pc, #32]	; (8009c94 <lwip_netconn_do_close+0x104>)
 8009c74:	f240 72c6 	movw	r2, #1990	; 0x7c6
 8009c78:	4909      	ldr	r1, [pc, #36]	; (8009ca0 <lwip_netconn_do_close+0x110>)
 8009c7a:	4808      	ldr	r0, [pc, #32]	; (8009c9c <lwip_netconn_do_close+0x10c>)
 8009c7c:	f00d fd0a 	bl	8017694 <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 8009c80:	e003      	b.n	8009c8a <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	22f5      	movs	r2, #245	; 0xf5
 8009c86:	711a      	strb	r2, [r3, #4]
 8009c88:	e000      	b.n	8009c8c <lwip_netconn_do_close+0xfc>
      return;
 8009c8a:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 8009c8c:	3710      	adds	r7, #16
 8009c8e:	46bd      	mov	sp, r7
 8009c90:	bd80      	pop	{r7, pc}
 8009c92:	bf00      	nop
 8009c94:	08018938 	.word	0x08018938
 8009c98:	08018cdc 	.word	0x08018cdc
 8009c9c:	0801897c 	.word	0x0801897c
 8009ca0:	08018cf8 	.word	0x08018cf8
 8009ca4:	2000d1c0 	.word	0x2000d1c0

08009ca8 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 8009ca8:	b580      	push	{r7, lr}
 8009caa:	b082      	sub	sp, #8
 8009cac:	af00      	add	r7, sp, #0
 8009cae:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d013      	beq.n	8009cde <netbuf_delete+0x36>
    if (buf->p != NULL) {
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d00b      	beq.n	8009cd6 <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	4618      	mov	r0, r3
 8009cc4:	f001 fe40 	bl	800b948 <pbuf_free>
      buf->p = buf->ptr = NULL;
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	2200      	movs	r2, #0
 8009ccc:	605a      	str	r2, [r3, #4]
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	685a      	ldr	r2, [r3, #4]
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 8009cd6:	6879      	ldr	r1, [r7, #4]
 8009cd8:	2006      	movs	r0, #6
 8009cda:	f000 ff85 	bl	800abe8 <memp_free>
  }
}
 8009cde:	bf00      	nop
 8009ce0:	3708      	adds	r7, #8
 8009ce2:	46bd      	mov	sp, r7
 8009ce4:	bd80      	pop	{r7, pc}
	...

08009ce8 <netbuf_data>:
 * @return ERR_OK if the information was retrieved,
 *         ERR_BUF on error.
 */
err_t
netbuf_data(struct netbuf *buf, void **dataptr, u16_t *len)
{
 8009ce8:	b580      	push	{r7, lr}
 8009cea:	b084      	sub	sp, #16
 8009cec:	af00      	add	r7, sp, #0
 8009cee:	60f8      	str	r0, [r7, #12]
 8009cf0:	60b9      	str	r1, [r7, #8]
 8009cf2:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netbuf_data: invalid buf", (buf != NULL), return ERR_ARG;);
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d108      	bne.n	8009d0c <netbuf_data+0x24>
 8009cfa:	4b1b      	ldr	r3, [pc, #108]	; (8009d68 <netbuf_data+0x80>)
 8009cfc:	22c6      	movs	r2, #198	; 0xc6
 8009cfe:	491b      	ldr	r1, [pc, #108]	; (8009d6c <netbuf_data+0x84>)
 8009d00:	481b      	ldr	r0, [pc, #108]	; (8009d70 <netbuf_data+0x88>)
 8009d02:	f00d fcc7 	bl	8017694 <iprintf>
 8009d06:	f06f 030f 	mvn.w	r3, #15
 8009d0a:	e029      	b.n	8009d60 <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 8009d0c:	68bb      	ldr	r3, [r7, #8]
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d108      	bne.n	8009d24 <netbuf_data+0x3c>
 8009d12:	4b15      	ldr	r3, [pc, #84]	; (8009d68 <netbuf_data+0x80>)
 8009d14:	22c7      	movs	r2, #199	; 0xc7
 8009d16:	4917      	ldr	r1, [pc, #92]	; (8009d74 <netbuf_data+0x8c>)
 8009d18:	4815      	ldr	r0, [pc, #84]	; (8009d70 <netbuf_data+0x88>)
 8009d1a:	f00d fcbb 	bl	8017694 <iprintf>
 8009d1e:	f06f 030f 	mvn.w	r3, #15
 8009d22:	e01d      	b.n	8009d60 <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid len", (len != NULL), return ERR_ARG;);
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d108      	bne.n	8009d3c <netbuf_data+0x54>
 8009d2a:	4b0f      	ldr	r3, [pc, #60]	; (8009d68 <netbuf_data+0x80>)
 8009d2c:	22c8      	movs	r2, #200	; 0xc8
 8009d2e:	4912      	ldr	r1, [pc, #72]	; (8009d78 <netbuf_data+0x90>)
 8009d30:	480f      	ldr	r0, [pc, #60]	; (8009d70 <netbuf_data+0x88>)
 8009d32:	f00d fcaf 	bl	8017694 <iprintf>
 8009d36:	f06f 030f 	mvn.w	r3, #15
 8009d3a:	e011      	b.n	8009d60 <netbuf_data+0x78>

  if (buf->ptr == NULL) {
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	685b      	ldr	r3, [r3, #4]
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d102      	bne.n	8009d4a <netbuf_data+0x62>
    return ERR_BUF;
 8009d44:	f06f 0301 	mvn.w	r3, #1
 8009d48:	e00a      	b.n	8009d60 <netbuf_data+0x78>
  }
  *dataptr = buf->ptr->payload;
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	685b      	ldr	r3, [r3, #4]
 8009d4e:	685a      	ldr	r2, [r3, #4]
 8009d50:	68bb      	ldr	r3, [r7, #8]
 8009d52:	601a      	str	r2, [r3, #0]
  *len = buf->ptr->len;
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	685b      	ldr	r3, [r3, #4]
 8009d58:	895a      	ldrh	r2, [r3, #10]
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	801a      	strh	r2, [r3, #0]
  return ERR_OK;
 8009d5e:	2300      	movs	r3, #0
}
 8009d60:	4618      	mov	r0, r3
 8009d62:	3710      	adds	r7, #16
 8009d64:	46bd      	mov	sp, r7
 8009d66:	bd80      	pop	{r7, pc}
 8009d68:	08018e90 	.word	0x08018e90
 8009d6c:	08018f98 	.word	0x08018f98
 8009d70:	08018ee0 	.word	0x08018ee0
 8009d74:	08018fb4 	.word	0x08018fb4
 8009d78:	08018fd4 	.word	0x08018fd4

08009d7c <netbuf_next>:
 *         1  if moved to the next part but now there is no next part
 *         0  if moved to the next part and there are still more parts
 */
s8_t
netbuf_next(struct netbuf *buf)
{
 8009d7c:	b580      	push	{r7, lr}
 8009d7e:	b082      	sub	sp, #8
 8009d80:	af00      	add	r7, sp, #0
 8009d82:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("netbuf_next: invalid buf", (buf != NULL), return -1;);
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d108      	bne.n	8009d9c <netbuf_next+0x20>
 8009d8a:	4b11      	ldr	r3, [pc, #68]	; (8009dd0 <netbuf_next+0x54>)
 8009d8c:	22e0      	movs	r2, #224	; 0xe0
 8009d8e:	4911      	ldr	r1, [pc, #68]	; (8009dd4 <netbuf_next+0x58>)
 8009d90:	4811      	ldr	r0, [pc, #68]	; (8009dd8 <netbuf_next+0x5c>)
 8009d92:	f00d fc7f 	bl	8017694 <iprintf>
 8009d96:	f04f 33ff 	mov.w	r3, #4294967295
 8009d9a:	e014      	b.n	8009dc6 <netbuf_next+0x4a>
  if (buf->ptr->next == NULL) {
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	685b      	ldr	r3, [r3, #4]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d102      	bne.n	8009dac <netbuf_next+0x30>
    return -1;
 8009da6:	f04f 33ff 	mov.w	r3, #4294967295
 8009daa:	e00c      	b.n	8009dc6 <netbuf_next+0x4a>
  }
  buf->ptr = buf->ptr->next;
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	685b      	ldr	r3, [r3, #4]
 8009db0:	681a      	ldr	r2, [r3, #0]
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	605a      	str	r2, [r3, #4]
  if (buf->ptr->next == NULL) {
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	685b      	ldr	r3, [r3, #4]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d101      	bne.n	8009dc4 <netbuf_next+0x48>
    return 1;
 8009dc0:	2301      	movs	r3, #1
 8009dc2:	e000      	b.n	8009dc6 <netbuf_next+0x4a>
  }
  return 0;
 8009dc4:	2300      	movs	r3, #0
}
 8009dc6:	4618      	mov	r0, r3
 8009dc8:	3708      	adds	r7, #8
 8009dca:	46bd      	mov	sp, r7
 8009dcc:	bd80      	pop	{r7, pc}
 8009dce:	bf00      	nop
 8009dd0:	08018e90 	.word	0x08018e90
 8009dd4:	08018ff0 	.word	0x08018ff0
 8009dd8:	08018ee0 	.word	0x08018ee0

08009ddc <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 8009ddc:	b580      	push	{r7, lr}
 8009dde:	b084      	sub	sp, #16
 8009de0:	af00      	add	r7, sp, #0
 8009de2:	6078      	str	r0, [r7, #4]
 8009de4:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 8009de6:	f008 fa21 	bl	801222c <sys_timeouts_sleeptime>
 8009dea:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009df2:	d10b      	bne.n	8009e0c <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 8009df4:	4813      	ldr	r0, [pc, #76]	; (8009e44 <tcpip_timeouts_mbox_fetch+0x68>)
 8009df6:	f00d fa24 	bl	8017242 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 8009dfa:	2200      	movs	r2, #0
 8009dfc:	6839      	ldr	r1, [r7, #0]
 8009dfe:	6878      	ldr	r0, [r7, #4]
 8009e00:	f00d f8dc 	bl	8016fbc <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 8009e04:	480f      	ldr	r0, [pc, #60]	; (8009e44 <tcpip_timeouts_mbox_fetch+0x68>)
 8009e06:	f00d fa0d 	bl	8017224 <sys_mutex_lock>
    return;
 8009e0a:	e018      	b.n	8009e3e <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d102      	bne.n	8009e18 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 8009e12:	f008 f9d1 	bl	80121b8 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8009e16:	e7e6      	b.n	8009de6 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 8009e18:	480a      	ldr	r0, [pc, #40]	; (8009e44 <tcpip_timeouts_mbox_fetch+0x68>)
 8009e1a:	f00d fa12 	bl	8017242 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 8009e1e:	68fa      	ldr	r2, [r7, #12]
 8009e20:	6839      	ldr	r1, [r7, #0]
 8009e22:	6878      	ldr	r0, [r7, #4]
 8009e24:	f00d f8ca 	bl	8016fbc <sys_arch_mbox_fetch>
 8009e28:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 8009e2a:	4806      	ldr	r0, [pc, #24]	; (8009e44 <tcpip_timeouts_mbox_fetch+0x68>)
 8009e2c:	f00d f9fa 	bl	8017224 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 8009e30:	68bb      	ldr	r3, [r7, #8]
 8009e32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e36:	d102      	bne.n	8009e3e <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 8009e38:	f008 f9be 	bl	80121b8 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8009e3c:	e7d3      	b.n	8009de6 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 8009e3e:	3710      	adds	r7, #16
 8009e40:	46bd      	mov	sp, r7
 8009e42:	bd80      	pop	{r7, pc}
 8009e44:	2000d1c0 	.word	0x2000d1c0

08009e48 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 8009e48:	b580      	push	{r7, lr}
 8009e4a:	b084      	sub	sp, #16
 8009e4c:	af00      	add	r7, sp, #0
 8009e4e:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 8009e50:	4810      	ldr	r0, [pc, #64]	; (8009e94 <tcpip_thread+0x4c>)
 8009e52:	f00d f9e7 	bl	8017224 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 8009e56:	4b10      	ldr	r3, [pc, #64]	; (8009e98 <tcpip_thread+0x50>)
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d005      	beq.n	8009e6a <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 8009e5e:	4b0e      	ldr	r3, [pc, #56]	; (8009e98 <tcpip_thread+0x50>)
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	4a0e      	ldr	r2, [pc, #56]	; (8009e9c <tcpip_thread+0x54>)
 8009e64:	6812      	ldr	r2, [r2, #0]
 8009e66:	4610      	mov	r0, r2
 8009e68:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8009e6a:	f107 030c 	add.w	r3, r7, #12
 8009e6e:	4619      	mov	r1, r3
 8009e70:	480b      	ldr	r0, [pc, #44]	; (8009ea0 <tcpip_thread+0x58>)
 8009e72:	f7ff ffb3 	bl	8009ddc <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d106      	bne.n	8009e8a <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8009e7c:	4b09      	ldr	r3, [pc, #36]	; (8009ea4 <tcpip_thread+0x5c>)
 8009e7e:	2291      	movs	r2, #145	; 0x91
 8009e80:	4909      	ldr	r1, [pc, #36]	; (8009ea8 <tcpip_thread+0x60>)
 8009e82:	480a      	ldr	r0, [pc, #40]	; (8009eac <tcpip_thread+0x64>)
 8009e84:	f00d fc06 	bl	8017694 <iprintf>
      continue;
 8009e88:	e003      	b.n	8009e92 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	4618      	mov	r0, r3
 8009e8e:	f000 f80f 	bl	8009eb0 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8009e92:	e7ea      	b.n	8009e6a <tcpip_thread+0x22>
 8009e94:	2000d1c0 	.word	0x2000d1c0
 8009e98:	2000d1b4 	.word	0x2000d1b4
 8009e9c:	2000d1b8 	.word	0x2000d1b8
 8009ea0:	2000d1bc 	.word	0x2000d1bc
 8009ea4:	08019028 	.word	0x08019028
 8009ea8:	08019058 	.word	0x08019058
 8009eac:	08019078 	.word	0x08019078

08009eb0 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 8009eb0:	b580      	push	{r7, lr}
 8009eb2:	b082      	sub	sp, #8
 8009eb4:	af00      	add	r7, sp, #0
 8009eb6:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	781b      	ldrb	r3, [r3, #0]
 8009ebc:	2b02      	cmp	r3, #2
 8009ebe:	d026      	beq.n	8009f0e <tcpip_thread_handle_msg+0x5e>
 8009ec0:	2b02      	cmp	r3, #2
 8009ec2:	dc2b      	bgt.n	8009f1c <tcpip_thread_handle_msg+0x6c>
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d002      	beq.n	8009ece <tcpip_thread_handle_msg+0x1e>
 8009ec8:	2b01      	cmp	r3, #1
 8009eca:	d015      	beq.n	8009ef8 <tcpip_thread_handle_msg+0x48>
 8009ecc:	e026      	b.n	8009f1c <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	68db      	ldr	r3, [r3, #12]
 8009ed2:	687a      	ldr	r2, [r7, #4]
 8009ed4:	6850      	ldr	r0, [r2, #4]
 8009ed6:	687a      	ldr	r2, [r7, #4]
 8009ed8:	6892      	ldr	r2, [r2, #8]
 8009eda:	4611      	mov	r1, r2
 8009edc:	4798      	blx	r3
 8009ede:	4603      	mov	r3, r0
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d004      	beq.n	8009eee <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	685b      	ldr	r3, [r3, #4]
 8009ee8:	4618      	mov	r0, r3
 8009eea:	f001 fd2d 	bl	800b948 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8009eee:	6879      	ldr	r1, [r7, #4]
 8009ef0:	2009      	movs	r0, #9
 8009ef2:	f000 fe79 	bl	800abe8 <memp_free>
      break;
 8009ef6:	e018      	b.n	8009f2a <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	685b      	ldr	r3, [r3, #4]
 8009efc:	687a      	ldr	r2, [r7, #4]
 8009efe:	6892      	ldr	r2, [r2, #8]
 8009f00:	4610      	mov	r0, r2
 8009f02:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8009f04:	6879      	ldr	r1, [r7, #4]
 8009f06:	2008      	movs	r0, #8
 8009f08:	f000 fe6e 	bl	800abe8 <memp_free>
      break;
 8009f0c:	e00d      	b.n	8009f2a <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	685b      	ldr	r3, [r3, #4]
 8009f12:	687a      	ldr	r2, [r7, #4]
 8009f14:	6892      	ldr	r2, [r2, #8]
 8009f16:	4610      	mov	r0, r2
 8009f18:	4798      	blx	r3
      break;
 8009f1a:	e006      	b.n	8009f2a <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8009f1c:	4b05      	ldr	r3, [pc, #20]	; (8009f34 <tcpip_thread_handle_msg+0x84>)
 8009f1e:	22cf      	movs	r2, #207	; 0xcf
 8009f20:	4905      	ldr	r1, [pc, #20]	; (8009f38 <tcpip_thread_handle_msg+0x88>)
 8009f22:	4806      	ldr	r0, [pc, #24]	; (8009f3c <tcpip_thread_handle_msg+0x8c>)
 8009f24:	f00d fbb6 	bl	8017694 <iprintf>
      break;
 8009f28:	bf00      	nop
  }
}
 8009f2a:	bf00      	nop
 8009f2c:	3708      	adds	r7, #8
 8009f2e:	46bd      	mov	sp, r7
 8009f30:	bd80      	pop	{r7, pc}
 8009f32:	bf00      	nop
 8009f34:	08019028 	.word	0x08019028
 8009f38:	08019058 	.word	0x08019058
 8009f3c:	08019078 	.word	0x08019078

08009f40 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8009f40:	b580      	push	{r7, lr}
 8009f42:	b086      	sub	sp, #24
 8009f44:	af00      	add	r7, sp, #0
 8009f46:	60f8      	str	r0, [r7, #12]
 8009f48:	60b9      	str	r1, [r7, #8]
 8009f4a:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8009f4c:	481a      	ldr	r0, [pc, #104]	; (8009fb8 <tcpip_inpkt+0x78>)
 8009f4e:	f00d f890 	bl	8017072 <sys_mbox_valid>
 8009f52:	4603      	mov	r3, r0
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d105      	bne.n	8009f64 <tcpip_inpkt+0x24>
 8009f58:	4b18      	ldr	r3, [pc, #96]	; (8009fbc <tcpip_inpkt+0x7c>)
 8009f5a:	22fc      	movs	r2, #252	; 0xfc
 8009f5c:	4918      	ldr	r1, [pc, #96]	; (8009fc0 <tcpip_inpkt+0x80>)
 8009f5e:	4819      	ldr	r0, [pc, #100]	; (8009fc4 <tcpip_inpkt+0x84>)
 8009f60:	f00d fb98 	bl	8017694 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8009f64:	2009      	movs	r0, #9
 8009f66:	f000 fdc9 	bl	800aafc <memp_malloc>
 8009f6a:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 8009f6c:	697b      	ldr	r3, [r7, #20]
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d102      	bne.n	8009f78 <tcpip_inpkt+0x38>
    return ERR_MEM;
 8009f72:	f04f 33ff 	mov.w	r3, #4294967295
 8009f76:	e01a      	b.n	8009fae <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 8009f78:	697b      	ldr	r3, [r7, #20]
 8009f7a:	2200      	movs	r2, #0
 8009f7c:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 8009f7e:	697b      	ldr	r3, [r7, #20]
 8009f80:	68fa      	ldr	r2, [r7, #12]
 8009f82:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 8009f84:	697b      	ldr	r3, [r7, #20]
 8009f86:	68ba      	ldr	r2, [r7, #8]
 8009f88:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 8009f8a:	697b      	ldr	r3, [r7, #20]
 8009f8c:	687a      	ldr	r2, [r7, #4]
 8009f8e:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8009f90:	6979      	ldr	r1, [r7, #20]
 8009f92:	4809      	ldr	r0, [pc, #36]	; (8009fb8 <tcpip_inpkt+0x78>)
 8009f94:	f00c fff8 	bl	8016f88 <sys_mbox_trypost>
 8009f98:	4603      	mov	r3, r0
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d006      	beq.n	8009fac <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8009f9e:	6979      	ldr	r1, [r7, #20]
 8009fa0:	2009      	movs	r0, #9
 8009fa2:	f000 fe21 	bl	800abe8 <memp_free>
    return ERR_MEM;
 8009fa6:	f04f 33ff 	mov.w	r3, #4294967295
 8009faa:	e000      	b.n	8009fae <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 8009fac:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 8009fae:	4618      	mov	r0, r3
 8009fb0:	3718      	adds	r7, #24
 8009fb2:	46bd      	mov	sp, r7
 8009fb4:	bd80      	pop	{r7, pc}
 8009fb6:	bf00      	nop
 8009fb8:	2000d1bc 	.word	0x2000d1bc
 8009fbc:	08019028 	.word	0x08019028
 8009fc0:	080190a0 	.word	0x080190a0
 8009fc4:	08019078 	.word	0x08019078

08009fc8 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 8009fc8:	b580      	push	{r7, lr}
 8009fca:	b082      	sub	sp, #8
 8009fcc:	af00      	add	r7, sp, #0
 8009fce:	6078      	str	r0, [r7, #4]
 8009fd0:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 8009fd2:	683b      	ldr	r3, [r7, #0]
 8009fd4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8009fd8:	f003 0318 	and.w	r3, r3, #24
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d006      	beq.n	8009fee <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 8009fe0:	4a08      	ldr	r2, [pc, #32]	; (800a004 <tcpip_input+0x3c>)
 8009fe2:	6839      	ldr	r1, [r7, #0]
 8009fe4:	6878      	ldr	r0, [r7, #4]
 8009fe6:	f7ff ffab 	bl	8009f40 <tcpip_inpkt>
 8009fea:	4603      	mov	r3, r0
 8009fec:	e005      	b.n	8009ffa <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 8009fee:	4a06      	ldr	r2, [pc, #24]	; (800a008 <tcpip_input+0x40>)
 8009ff0:	6839      	ldr	r1, [r7, #0]
 8009ff2:	6878      	ldr	r0, [r7, #4]
 8009ff4:	f7ff ffa4 	bl	8009f40 <tcpip_inpkt>
 8009ff8:	4603      	mov	r3, r0
}
 8009ffa:	4618      	mov	r0, r3
 8009ffc:	3708      	adds	r7, #8
 8009ffe:	46bd      	mov	sp, r7
 800a000:	bd80      	pop	{r7, pc}
 800a002:	bf00      	nop
 800a004:	08016d75 	.word	0x08016d75
 800a008:	08015c41 	.word	0x08015c41

0800a00c <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800a00c:	b580      	push	{r7, lr}
 800a00e:	b084      	sub	sp, #16
 800a010:	af00      	add	r7, sp, #0
 800a012:	6078      	str	r0, [r7, #4]
 800a014:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800a016:	4819      	ldr	r0, [pc, #100]	; (800a07c <tcpip_try_callback+0x70>)
 800a018:	f00d f82b 	bl	8017072 <sys_mbox_valid>
 800a01c:	4603      	mov	r3, r0
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d106      	bne.n	800a030 <tcpip_try_callback+0x24>
 800a022:	4b17      	ldr	r3, [pc, #92]	; (800a080 <tcpip_try_callback+0x74>)
 800a024:	f240 125d 	movw	r2, #349	; 0x15d
 800a028:	4916      	ldr	r1, [pc, #88]	; (800a084 <tcpip_try_callback+0x78>)
 800a02a:	4817      	ldr	r0, [pc, #92]	; (800a088 <tcpip_try_callback+0x7c>)
 800a02c:	f00d fb32 	bl	8017694 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800a030:	2008      	movs	r0, #8
 800a032:	f000 fd63 	bl	800aafc <memp_malloc>
 800a036:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d102      	bne.n	800a044 <tcpip_try_callback+0x38>
    return ERR_MEM;
 800a03e:	f04f 33ff 	mov.w	r3, #4294967295
 800a042:	e017      	b.n	800a074 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	2201      	movs	r2, #1
 800a048:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	687a      	ldr	r2, [r7, #4]
 800a04e:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	683a      	ldr	r2, [r7, #0]
 800a054:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800a056:	68f9      	ldr	r1, [r7, #12]
 800a058:	4808      	ldr	r0, [pc, #32]	; (800a07c <tcpip_try_callback+0x70>)
 800a05a:	f00c ff95 	bl	8016f88 <sys_mbox_trypost>
 800a05e:	4603      	mov	r3, r0
 800a060:	2b00      	cmp	r3, #0
 800a062:	d006      	beq.n	800a072 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800a064:	68f9      	ldr	r1, [r7, #12]
 800a066:	2008      	movs	r0, #8
 800a068:	f000 fdbe 	bl	800abe8 <memp_free>
    return ERR_MEM;
 800a06c:	f04f 33ff 	mov.w	r3, #4294967295
 800a070:	e000      	b.n	800a074 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800a072:	2300      	movs	r3, #0
}
 800a074:	4618      	mov	r0, r3
 800a076:	3710      	adds	r7, #16
 800a078:	46bd      	mov	sp, r7
 800a07a:	bd80      	pop	{r7, pc}
 800a07c:	2000d1bc 	.word	0x2000d1bc
 800a080:	08019028 	.word	0x08019028
 800a084:	080190a0 	.word	0x080190a0
 800a088:	08019078 	.word	0x08019078

0800a08c <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 800a08c:	b580      	push	{r7, lr}
 800a08e:	b084      	sub	sp, #16
 800a090:	af00      	add	r7, sp, #0
 800a092:	60f8      	str	r0, [r7, #12]
 800a094:	60b9      	str	r1, [r7, #8]
 800a096:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 800a098:	4806      	ldr	r0, [pc, #24]	; (800a0b4 <tcpip_send_msg_wait_sem+0x28>)
 800a09a:	f00d f8c3 	bl	8017224 <sys_mutex_lock>
  fn(apimsg);
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	68b8      	ldr	r0, [r7, #8]
 800a0a2:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 800a0a4:	4803      	ldr	r0, [pc, #12]	; (800a0b4 <tcpip_send_msg_wait_sem+0x28>)
 800a0a6:	f00d f8cc 	bl	8017242 <sys_mutex_unlock>
  return ERR_OK;
 800a0aa:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 800a0ac:	4618      	mov	r0, r3
 800a0ae:	3710      	adds	r7, #16
 800a0b0:	46bd      	mov	sp, r7
 800a0b2:	bd80      	pop	{r7, pc}
 800a0b4:	2000d1c0 	.word	0x2000d1c0

0800a0b8 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800a0b8:	b580      	push	{r7, lr}
 800a0ba:	b084      	sub	sp, #16
 800a0bc:	af02      	add	r7, sp, #8
 800a0be:	6078      	str	r0, [r7, #4]
 800a0c0:	6039      	str	r1, [r7, #0]
  lwip_init();
 800a0c2:	f000 f871 	bl	800a1a8 <lwip_init>

  tcpip_init_done = initfunc;
 800a0c6:	4a17      	ldr	r2, [pc, #92]	; (800a124 <tcpip_init+0x6c>)
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800a0cc:	4a16      	ldr	r2, [pc, #88]	; (800a128 <tcpip_init+0x70>)
 800a0ce:	683b      	ldr	r3, [r7, #0]
 800a0d0:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800a0d2:	2106      	movs	r1, #6
 800a0d4:	4815      	ldr	r0, [pc, #84]	; (800a12c <tcpip_init+0x74>)
 800a0d6:	f00c ff23 	bl	8016f20 <sys_mbox_new>
 800a0da:	4603      	mov	r3, r0
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d006      	beq.n	800a0ee <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800a0e0:	4b13      	ldr	r3, [pc, #76]	; (800a130 <tcpip_init+0x78>)
 800a0e2:	f240 2261 	movw	r2, #609	; 0x261
 800a0e6:	4913      	ldr	r1, [pc, #76]	; (800a134 <tcpip_init+0x7c>)
 800a0e8:	4813      	ldr	r0, [pc, #76]	; (800a138 <tcpip_init+0x80>)
 800a0ea:	f00d fad3 	bl	8017694 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800a0ee:	4813      	ldr	r0, [pc, #76]	; (800a13c <tcpip_init+0x84>)
 800a0f0:	f00d f87c 	bl	80171ec <sys_mutex_new>
 800a0f4:	4603      	mov	r3, r0
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d006      	beq.n	800a108 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800a0fa:	4b0d      	ldr	r3, [pc, #52]	; (800a130 <tcpip_init+0x78>)
 800a0fc:	f240 2265 	movw	r2, #613	; 0x265
 800a100:	490f      	ldr	r1, [pc, #60]	; (800a140 <tcpip_init+0x88>)
 800a102:	480d      	ldr	r0, [pc, #52]	; (800a138 <tcpip_init+0x80>)
 800a104:	f00d fac6 	bl	8017694 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800a108:	2300      	movs	r3, #0
 800a10a:	9300      	str	r3, [sp, #0]
 800a10c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a110:	2200      	movs	r2, #0
 800a112:	490c      	ldr	r1, [pc, #48]	; (800a144 <tcpip_init+0x8c>)
 800a114:	480c      	ldr	r0, [pc, #48]	; (800a148 <tcpip_init+0x90>)
 800a116:	f00d f8a1 	bl	801725c <sys_thread_new>
}
 800a11a:	bf00      	nop
 800a11c:	3708      	adds	r7, #8
 800a11e:	46bd      	mov	sp, r7
 800a120:	bd80      	pop	{r7, pc}
 800a122:	bf00      	nop
 800a124:	2000d1b4 	.word	0x2000d1b4
 800a128:	2000d1b8 	.word	0x2000d1b8
 800a12c:	2000d1bc 	.word	0x2000d1bc
 800a130:	08019028 	.word	0x08019028
 800a134:	080190b0 	.word	0x080190b0
 800a138:	08019078 	.word	0x08019078
 800a13c:	2000d1c0 	.word	0x2000d1c0
 800a140:	080190d4 	.word	0x080190d4
 800a144:	08009e49 	.word	0x08009e49
 800a148:	080190f8 	.word	0x080190f8

0800a14c <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800a14c:	b480      	push	{r7}
 800a14e:	b083      	sub	sp, #12
 800a150:	af00      	add	r7, sp, #0
 800a152:	4603      	mov	r3, r0
 800a154:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800a156:	88fb      	ldrh	r3, [r7, #6]
 800a158:	021b      	lsls	r3, r3, #8
 800a15a:	b21a      	sxth	r2, r3
 800a15c:	88fb      	ldrh	r3, [r7, #6]
 800a15e:	0a1b      	lsrs	r3, r3, #8
 800a160:	b29b      	uxth	r3, r3
 800a162:	b21b      	sxth	r3, r3
 800a164:	4313      	orrs	r3, r2
 800a166:	b21b      	sxth	r3, r3
 800a168:	b29b      	uxth	r3, r3
}
 800a16a:	4618      	mov	r0, r3
 800a16c:	370c      	adds	r7, #12
 800a16e:	46bd      	mov	sp, r7
 800a170:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a174:	4770      	bx	lr

0800a176 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800a176:	b480      	push	{r7}
 800a178:	b083      	sub	sp, #12
 800a17a:	af00      	add	r7, sp, #0
 800a17c:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	061a      	lsls	r2, r3, #24
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	021b      	lsls	r3, r3, #8
 800a186:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a18a:	431a      	orrs	r2, r3
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	0a1b      	lsrs	r3, r3, #8
 800a190:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800a194:	431a      	orrs	r2, r3
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	0e1b      	lsrs	r3, r3, #24
 800a19a:	4313      	orrs	r3, r2
}
 800a19c:	4618      	mov	r0, r3
 800a19e:	370c      	adds	r7, #12
 800a1a0:	46bd      	mov	sp, r7
 800a1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1a6:	4770      	bx	lr

0800a1a8 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800a1a8:	b580      	push	{r7, lr}
 800a1aa:	b082      	sub	sp, #8
 800a1ac:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800a1ae:	2300      	movs	r3, #0
 800a1b0:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800a1b2:	f00d f80d 	bl	80171d0 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800a1b6:	f000 f8d5 	bl	800a364 <mem_init>
  memp_init();
 800a1ba:	f000 fc31 	bl	800aa20 <memp_init>
  pbuf_init();
  netif_init();
 800a1be:	f000 fd3d 	bl	800ac3c <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800a1c2:	f008 f86b 	bl	801229c <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800a1c6:	f001 fe69 	bl	800be9c <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800a1ca:	f007 ffad 	bl	8012128 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800a1ce:	bf00      	nop
 800a1d0:	3708      	adds	r7, #8
 800a1d2:	46bd      	mov	sp, r7
 800a1d4:	bd80      	pop	{r7, pc}
	...

0800a1d8 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800a1d8:	b480      	push	{r7}
 800a1da:	b083      	sub	sp, #12
 800a1dc:	af00      	add	r7, sp, #0
 800a1de:	4603      	mov	r3, r0
 800a1e0:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800a1e2:	4b05      	ldr	r3, [pc, #20]	; (800a1f8 <ptr_to_mem+0x20>)
 800a1e4:	681a      	ldr	r2, [r3, #0]
 800a1e6:	88fb      	ldrh	r3, [r7, #6]
 800a1e8:	4413      	add	r3, r2
}
 800a1ea:	4618      	mov	r0, r3
 800a1ec:	370c      	adds	r7, #12
 800a1ee:	46bd      	mov	sp, r7
 800a1f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f4:	4770      	bx	lr
 800a1f6:	bf00      	nop
 800a1f8:	2000d830 	.word	0x2000d830

0800a1fc <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800a1fc:	b480      	push	{r7}
 800a1fe:	b083      	sub	sp, #12
 800a200:	af00      	add	r7, sp, #0
 800a202:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800a204:	4b05      	ldr	r3, [pc, #20]	; (800a21c <mem_to_ptr+0x20>)
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	687a      	ldr	r2, [r7, #4]
 800a20a:	1ad3      	subs	r3, r2, r3
 800a20c:	b29b      	uxth	r3, r3
}
 800a20e:	4618      	mov	r0, r3
 800a210:	370c      	adds	r7, #12
 800a212:	46bd      	mov	sp, r7
 800a214:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a218:	4770      	bx	lr
 800a21a:	bf00      	nop
 800a21c:	2000d830 	.word	0x2000d830

0800a220 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800a220:	b590      	push	{r4, r7, lr}
 800a222:	b085      	sub	sp, #20
 800a224:	af00      	add	r7, sp, #0
 800a226:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800a228:	4b45      	ldr	r3, [pc, #276]	; (800a340 <plug_holes+0x120>)
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	687a      	ldr	r2, [r7, #4]
 800a22e:	429a      	cmp	r2, r3
 800a230:	d206      	bcs.n	800a240 <plug_holes+0x20>
 800a232:	4b44      	ldr	r3, [pc, #272]	; (800a344 <plug_holes+0x124>)
 800a234:	f240 12df 	movw	r2, #479	; 0x1df
 800a238:	4943      	ldr	r1, [pc, #268]	; (800a348 <plug_holes+0x128>)
 800a23a:	4844      	ldr	r0, [pc, #272]	; (800a34c <plug_holes+0x12c>)
 800a23c:	f00d fa2a 	bl	8017694 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800a240:	4b43      	ldr	r3, [pc, #268]	; (800a350 <plug_holes+0x130>)
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	687a      	ldr	r2, [r7, #4]
 800a246:	429a      	cmp	r2, r3
 800a248:	d306      	bcc.n	800a258 <plug_holes+0x38>
 800a24a:	4b3e      	ldr	r3, [pc, #248]	; (800a344 <plug_holes+0x124>)
 800a24c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800a250:	4940      	ldr	r1, [pc, #256]	; (800a354 <plug_holes+0x134>)
 800a252:	483e      	ldr	r0, [pc, #248]	; (800a34c <plug_holes+0x12c>)
 800a254:	f00d fa1e 	bl	8017694 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	791b      	ldrb	r3, [r3, #4]
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d006      	beq.n	800a26e <plug_holes+0x4e>
 800a260:	4b38      	ldr	r3, [pc, #224]	; (800a344 <plug_holes+0x124>)
 800a262:	f240 12e1 	movw	r2, #481	; 0x1e1
 800a266:	493c      	ldr	r1, [pc, #240]	; (800a358 <plug_holes+0x138>)
 800a268:	4838      	ldr	r0, [pc, #224]	; (800a34c <plug_holes+0x12c>)
 800a26a:	f00d fa13 	bl	8017694 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	881b      	ldrh	r3, [r3, #0]
 800a272:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a276:	d906      	bls.n	800a286 <plug_holes+0x66>
 800a278:	4b32      	ldr	r3, [pc, #200]	; (800a344 <plug_holes+0x124>)
 800a27a:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800a27e:	4937      	ldr	r1, [pc, #220]	; (800a35c <plug_holes+0x13c>)
 800a280:	4832      	ldr	r0, [pc, #200]	; (800a34c <plug_holes+0x12c>)
 800a282:	f00d fa07 	bl	8017694 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	881b      	ldrh	r3, [r3, #0]
 800a28a:	4618      	mov	r0, r3
 800a28c:	f7ff ffa4 	bl	800a1d8 <ptr_to_mem>
 800a290:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800a292:	687a      	ldr	r2, [r7, #4]
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	429a      	cmp	r2, r3
 800a298:	d024      	beq.n	800a2e4 <plug_holes+0xc4>
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	791b      	ldrb	r3, [r3, #4]
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d120      	bne.n	800a2e4 <plug_holes+0xc4>
 800a2a2:	4b2b      	ldr	r3, [pc, #172]	; (800a350 <plug_holes+0x130>)
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	68fa      	ldr	r2, [r7, #12]
 800a2a8:	429a      	cmp	r2, r3
 800a2aa:	d01b      	beq.n	800a2e4 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800a2ac:	4b2c      	ldr	r3, [pc, #176]	; (800a360 <plug_holes+0x140>)
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	68fa      	ldr	r2, [r7, #12]
 800a2b2:	429a      	cmp	r2, r3
 800a2b4:	d102      	bne.n	800a2bc <plug_holes+0x9c>
      lfree = mem;
 800a2b6:	4a2a      	ldr	r2, [pc, #168]	; (800a360 <plug_holes+0x140>)
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	881a      	ldrh	r2, [r3, #0]
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	881b      	ldrh	r3, [r3, #0]
 800a2c8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a2cc:	d00a      	beq.n	800a2e4 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	881b      	ldrh	r3, [r3, #0]
 800a2d2:	4618      	mov	r0, r3
 800a2d4:	f7ff ff80 	bl	800a1d8 <ptr_to_mem>
 800a2d8:	4604      	mov	r4, r0
 800a2da:	6878      	ldr	r0, [r7, #4]
 800a2dc:	f7ff ff8e 	bl	800a1fc <mem_to_ptr>
 800a2e0:	4603      	mov	r3, r0
 800a2e2:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	885b      	ldrh	r3, [r3, #2]
 800a2e8:	4618      	mov	r0, r3
 800a2ea:	f7ff ff75 	bl	800a1d8 <ptr_to_mem>
 800a2ee:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800a2f0:	68ba      	ldr	r2, [r7, #8]
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	429a      	cmp	r2, r3
 800a2f6:	d01f      	beq.n	800a338 <plug_holes+0x118>
 800a2f8:	68bb      	ldr	r3, [r7, #8]
 800a2fa:	791b      	ldrb	r3, [r3, #4]
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d11b      	bne.n	800a338 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800a300:	4b17      	ldr	r3, [pc, #92]	; (800a360 <plug_holes+0x140>)
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	687a      	ldr	r2, [r7, #4]
 800a306:	429a      	cmp	r2, r3
 800a308:	d102      	bne.n	800a310 <plug_holes+0xf0>
      lfree = pmem;
 800a30a:	4a15      	ldr	r2, [pc, #84]	; (800a360 <plug_holes+0x140>)
 800a30c:	68bb      	ldr	r3, [r7, #8]
 800a30e:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	881a      	ldrh	r2, [r3, #0]
 800a314:	68bb      	ldr	r3, [r7, #8]
 800a316:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	881b      	ldrh	r3, [r3, #0]
 800a31c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a320:	d00a      	beq.n	800a338 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	881b      	ldrh	r3, [r3, #0]
 800a326:	4618      	mov	r0, r3
 800a328:	f7ff ff56 	bl	800a1d8 <ptr_to_mem>
 800a32c:	4604      	mov	r4, r0
 800a32e:	68b8      	ldr	r0, [r7, #8]
 800a330:	f7ff ff64 	bl	800a1fc <mem_to_ptr>
 800a334:	4603      	mov	r3, r0
 800a336:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800a338:	bf00      	nop
 800a33a:	3714      	adds	r7, #20
 800a33c:	46bd      	mov	sp, r7
 800a33e:	bd90      	pop	{r4, r7, pc}
 800a340:	2000d830 	.word	0x2000d830
 800a344:	08019108 	.word	0x08019108
 800a348:	08019138 	.word	0x08019138
 800a34c:	08019150 	.word	0x08019150
 800a350:	2000d834 	.word	0x2000d834
 800a354:	08019178 	.word	0x08019178
 800a358:	08019194 	.word	0x08019194
 800a35c:	080191b0 	.word	0x080191b0
 800a360:	2000d83c 	.word	0x2000d83c

0800a364 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800a364:	b580      	push	{r7, lr}
 800a366:	b082      	sub	sp, #8
 800a368:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800a36a:	4b1f      	ldr	r3, [pc, #124]	; (800a3e8 <mem_init+0x84>)
 800a36c:	3303      	adds	r3, #3
 800a36e:	f023 0303 	bic.w	r3, r3, #3
 800a372:	461a      	mov	r2, r3
 800a374:	4b1d      	ldr	r3, [pc, #116]	; (800a3ec <mem_init+0x88>)
 800a376:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800a378:	4b1c      	ldr	r3, [pc, #112]	; (800a3ec <mem_init+0x88>)
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800a384:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	2200      	movs	r2, #0
 800a38a:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	2200      	movs	r2, #0
 800a390:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800a392:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800a396:	f7ff ff1f 	bl	800a1d8 <ptr_to_mem>
 800a39a:	4603      	mov	r3, r0
 800a39c:	4a14      	ldr	r2, [pc, #80]	; (800a3f0 <mem_init+0x8c>)
 800a39e:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800a3a0:	4b13      	ldr	r3, [pc, #76]	; (800a3f0 <mem_init+0x8c>)
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	2201      	movs	r2, #1
 800a3a6:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800a3a8:	4b11      	ldr	r3, [pc, #68]	; (800a3f0 <mem_init+0x8c>)
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800a3b0:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800a3b2:	4b0f      	ldr	r3, [pc, #60]	; (800a3f0 <mem_init+0x8c>)
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800a3ba:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800a3bc:	4b0b      	ldr	r3, [pc, #44]	; (800a3ec <mem_init+0x88>)
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	4a0c      	ldr	r2, [pc, #48]	; (800a3f4 <mem_init+0x90>)
 800a3c2:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800a3c4:	480c      	ldr	r0, [pc, #48]	; (800a3f8 <mem_init+0x94>)
 800a3c6:	f00c ff11 	bl	80171ec <sys_mutex_new>
 800a3ca:	4603      	mov	r3, r0
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d006      	beq.n	800a3de <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800a3d0:	4b0a      	ldr	r3, [pc, #40]	; (800a3fc <mem_init+0x98>)
 800a3d2:	f240 221f 	movw	r2, #543	; 0x21f
 800a3d6:	490a      	ldr	r1, [pc, #40]	; (800a400 <mem_init+0x9c>)
 800a3d8:	480a      	ldr	r0, [pc, #40]	; (800a404 <mem_init+0xa0>)
 800a3da:	f00d f95b 	bl	8017694 <iprintf>
  }
}
 800a3de:	bf00      	nop
 800a3e0:	3708      	adds	r7, #8
 800a3e2:	46bd      	mov	sp, r7
 800a3e4:	bd80      	pop	{r7, pc}
 800a3e6:	bf00      	nop
 800a3e8:	2000d1dc 	.word	0x2000d1dc
 800a3ec:	2000d830 	.word	0x2000d830
 800a3f0:	2000d834 	.word	0x2000d834
 800a3f4:	2000d83c 	.word	0x2000d83c
 800a3f8:	2000d838 	.word	0x2000d838
 800a3fc:	08019108 	.word	0x08019108
 800a400:	080191dc 	.word	0x080191dc
 800a404:	08019150 	.word	0x08019150

0800a408 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800a408:	b580      	push	{r7, lr}
 800a40a:	b086      	sub	sp, #24
 800a40c:	af00      	add	r7, sp, #0
 800a40e:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800a410:	6878      	ldr	r0, [r7, #4]
 800a412:	f7ff fef3 	bl	800a1fc <mem_to_ptr>
 800a416:	4603      	mov	r3, r0
 800a418:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	881b      	ldrh	r3, [r3, #0]
 800a41e:	4618      	mov	r0, r3
 800a420:	f7ff feda 	bl	800a1d8 <ptr_to_mem>
 800a424:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	885b      	ldrh	r3, [r3, #2]
 800a42a:	4618      	mov	r0, r3
 800a42c:	f7ff fed4 	bl	800a1d8 <ptr_to_mem>
 800a430:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	881b      	ldrh	r3, [r3, #0]
 800a436:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a43a:	d818      	bhi.n	800a46e <mem_link_valid+0x66>
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	885b      	ldrh	r3, [r3, #2]
 800a440:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a444:	d813      	bhi.n	800a46e <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800a44a:	8afa      	ldrh	r2, [r7, #22]
 800a44c:	429a      	cmp	r2, r3
 800a44e:	d004      	beq.n	800a45a <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	881b      	ldrh	r3, [r3, #0]
 800a454:	8afa      	ldrh	r2, [r7, #22]
 800a456:	429a      	cmp	r2, r3
 800a458:	d109      	bne.n	800a46e <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800a45a:	4b08      	ldr	r3, [pc, #32]	; (800a47c <mem_link_valid+0x74>)
 800a45c:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800a45e:	693a      	ldr	r2, [r7, #16]
 800a460:	429a      	cmp	r2, r3
 800a462:	d006      	beq.n	800a472 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800a464:	693b      	ldr	r3, [r7, #16]
 800a466:	885b      	ldrh	r3, [r3, #2]
 800a468:	8afa      	ldrh	r2, [r7, #22]
 800a46a:	429a      	cmp	r2, r3
 800a46c:	d001      	beq.n	800a472 <mem_link_valid+0x6a>
    return 0;
 800a46e:	2300      	movs	r3, #0
 800a470:	e000      	b.n	800a474 <mem_link_valid+0x6c>
  }
  return 1;
 800a472:	2301      	movs	r3, #1
}
 800a474:	4618      	mov	r0, r3
 800a476:	3718      	adds	r7, #24
 800a478:	46bd      	mov	sp, r7
 800a47a:	bd80      	pop	{r7, pc}
 800a47c:	2000d834 	.word	0x2000d834

0800a480 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800a480:	b580      	push	{r7, lr}
 800a482:	b088      	sub	sp, #32
 800a484:	af00      	add	r7, sp, #0
 800a486:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d070      	beq.n	800a570 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	f003 0303 	and.w	r3, r3, #3
 800a494:	2b00      	cmp	r3, #0
 800a496:	d00d      	beq.n	800a4b4 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800a498:	4b37      	ldr	r3, [pc, #220]	; (800a578 <mem_free+0xf8>)
 800a49a:	f240 2273 	movw	r2, #627	; 0x273
 800a49e:	4937      	ldr	r1, [pc, #220]	; (800a57c <mem_free+0xfc>)
 800a4a0:	4837      	ldr	r0, [pc, #220]	; (800a580 <mem_free+0x100>)
 800a4a2:	f00d f8f7 	bl	8017694 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800a4a6:	f00c feff 	bl	80172a8 <sys_arch_protect>
 800a4aa:	60f8      	str	r0, [r7, #12]
 800a4ac:	68f8      	ldr	r0, [r7, #12]
 800a4ae:	f00c ff09 	bl	80172c4 <sys_arch_unprotect>
    return;
 800a4b2:	e05e      	b.n	800a572 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	3b08      	subs	r3, #8
 800a4b8:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800a4ba:	4b32      	ldr	r3, [pc, #200]	; (800a584 <mem_free+0x104>)
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	69fa      	ldr	r2, [r7, #28]
 800a4c0:	429a      	cmp	r2, r3
 800a4c2:	d306      	bcc.n	800a4d2 <mem_free+0x52>
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	f103 020c 	add.w	r2, r3, #12
 800a4ca:	4b2f      	ldr	r3, [pc, #188]	; (800a588 <mem_free+0x108>)
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	429a      	cmp	r2, r3
 800a4d0:	d90d      	bls.n	800a4ee <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800a4d2:	4b29      	ldr	r3, [pc, #164]	; (800a578 <mem_free+0xf8>)
 800a4d4:	f240 227f 	movw	r2, #639	; 0x27f
 800a4d8:	492c      	ldr	r1, [pc, #176]	; (800a58c <mem_free+0x10c>)
 800a4da:	4829      	ldr	r0, [pc, #164]	; (800a580 <mem_free+0x100>)
 800a4dc:	f00d f8da 	bl	8017694 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800a4e0:	f00c fee2 	bl	80172a8 <sys_arch_protect>
 800a4e4:	6138      	str	r0, [r7, #16]
 800a4e6:	6938      	ldr	r0, [r7, #16]
 800a4e8:	f00c feec 	bl	80172c4 <sys_arch_unprotect>
    return;
 800a4ec:	e041      	b.n	800a572 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800a4ee:	4828      	ldr	r0, [pc, #160]	; (800a590 <mem_free+0x110>)
 800a4f0:	f00c fe98 	bl	8017224 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800a4f4:	69fb      	ldr	r3, [r7, #28]
 800a4f6:	791b      	ldrb	r3, [r3, #4]
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d110      	bne.n	800a51e <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800a4fc:	4b1e      	ldr	r3, [pc, #120]	; (800a578 <mem_free+0xf8>)
 800a4fe:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800a502:	4924      	ldr	r1, [pc, #144]	; (800a594 <mem_free+0x114>)
 800a504:	481e      	ldr	r0, [pc, #120]	; (800a580 <mem_free+0x100>)
 800a506:	f00d f8c5 	bl	8017694 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800a50a:	4821      	ldr	r0, [pc, #132]	; (800a590 <mem_free+0x110>)
 800a50c:	f00c fe99 	bl	8017242 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800a510:	f00c feca 	bl	80172a8 <sys_arch_protect>
 800a514:	6178      	str	r0, [r7, #20]
 800a516:	6978      	ldr	r0, [r7, #20]
 800a518:	f00c fed4 	bl	80172c4 <sys_arch_unprotect>
    return;
 800a51c:	e029      	b.n	800a572 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800a51e:	69f8      	ldr	r0, [r7, #28]
 800a520:	f7ff ff72 	bl	800a408 <mem_link_valid>
 800a524:	4603      	mov	r3, r0
 800a526:	2b00      	cmp	r3, #0
 800a528:	d110      	bne.n	800a54c <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800a52a:	4b13      	ldr	r3, [pc, #76]	; (800a578 <mem_free+0xf8>)
 800a52c:	f240 2295 	movw	r2, #661	; 0x295
 800a530:	4919      	ldr	r1, [pc, #100]	; (800a598 <mem_free+0x118>)
 800a532:	4813      	ldr	r0, [pc, #76]	; (800a580 <mem_free+0x100>)
 800a534:	f00d f8ae 	bl	8017694 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800a538:	4815      	ldr	r0, [pc, #84]	; (800a590 <mem_free+0x110>)
 800a53a:	f00c fe82 	bl	8017242 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800a53e:	f00c feb3 	bl	80172a8 <sys_arch_protect>
 800a542:	61b8      	str	r0, [r7, #24]
 800a544:	69b8      	ldr	r0, [r7, #24]
 800a546:	f00c febd 	bl	80172c4 <sys_arch_unprotect>
    return;
 800a54a:	e012      	b.n	800a572 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800a54c:	69fb      	ldr	r3, [r7, #28]
 800a54e:	2200      	movs	r2, #0
 800a550:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800a552:	4b12      	ldr	r3, [pc, #72]	; (800a59c <mem_free+0x11c>)
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	69fa      	ldr	r2, [r7, #28]
 800a558:	429a      	cmp	r2, r3
 800a55a:	d202      	bcs.n	800a562 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800a55c:	4a0f      	ldr	r2, [pc, #60]	; (800a59c <mem_free+0x11c>)
 800a55e:	69fb      	ldr	r3, [r7, #28]
 800a560:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800a562:	69f8      	ldr	r0, [r7, #28]
 800a564:	f7ff fe5c 	bl	800a220 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800a568:	4809      	ldr	r0, [pc, #36]	; (800a590 <mem_free+0x110>)
 800a56a:	f00c fe6a 	bl	8017242 <sys_mutex_unlock>
 800a56e:	e000      	b.n	800a572 <mem_free+0xf2>
    return;
 800a570:	bf00      	nop
}
 800a572:	3720      	adds	r7, #32
 800a574:	46bd      	mov	sp, r7
 800a576:	bd80      	pop	{r7, pc}
 800a578:	08019108 	.word	0x08019108
 800a57c:	080191f8 	.word	0x080191f8
 800a580:	08019150 	.word	0x08019150
 800a584:	2000d830 	.word	0x2000d830
 800a588:	2000d834 	.word	0x2000d834
 800a58c:	0801921c 	.word	0x0801921c
 800a590:	2000d838 	.word	0x2000d838
 800a594:	08019238 	.word	0x08019238
 800a598:	08019260 	.word	0x08019260
 800a59c:	2000d83c 	.word	0x2000d83c

0800a5a0 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800a5a0:	b580      	push	{r7, lr}
 800a5a2:	b088      	sub	sp, #32
 800a5a4:	af00      	add	r7, sp, #0
 800a5a6:	6078      	str	r0, [r7, #4]
 800a5a8:	460b      	mov	r3, r1
 800a5aa:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800a5ac:	887b      	ldrh	r3, [r7, #2]
 800a5ae:	3303      	adds	r3, #3
 800a5b0:	b29b      	uxth	r3, r3
 800a5b2:	f023 0303 	bic.w	r3, r3, #3
 800a5b6:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800a5b8:	8bfb      	ldrh	r3, [r7, #30]
 800a5ba:	2b0b      	cmp	r3, #11
 800a5bc:	d801      	bhi.n	800a5c2 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800a5be:	230c      	movs	r3, #12
 800a5c0:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800a5c2:	8bfb      	ldrh	r3, [r7, #30]
 800a5c4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a5c8:	d803      	bhi.n	800a5d2 <mem_trim+0x32>
 800a5ca:	8bfa      	ldrh	r2, [r7, #30]
 800a5cc:	887b      	ldrh	r3, [r7, #2]
 800a5ce:	429a      	cmp	r2, r3
 800a5d0:	d201      	bcs.n	800a5d6 <mem_trim+0x36>
    return NULL;
 800a5d2:	2300      	movs	r3, #0
 800a5d4:	e0d8      	b.n	800a788 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800a5d6:	4b6e      	ldr	r3, [pc, #440]	; (800a790 <mem_trim+0x1f0>)
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	687a      	ldr	r2, [r7, #4]
 800a5dc:	429a      	cmp	r2, r3
 800a5de:	d304      	bcc.n	800a5ea <mem_trim+0x4a>
 800a5e0:	4b6c      	ldr	r3, [pc, #432]	; (800a794 <mem_trim+0x1f4>)
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	687a      	ldr	r2, [r7, #4]
 800a5e6:	429a      	cmp	r2, r3
 800a5e8:	d306      	bcc.n	800a5f8 <mem_trim+0x58>
 800a5ea:	4b6b      	ldr	r3, [pc, #428]	; (800a798 <mem_trim+0x1f8>)
 800a5ec:	f240 22d1 	movw	r2, #721	; 0x2d1
 800a5f0:	496a      	ldr	r1, [pc, #424]	; (800a79c <mem_trim+0x1fc>)
 800a5f2:	486b      	ldr	r0, [pc, #428]	; (800a7a0 <mem_trim+0x200>)
 800a5f4:	f00d f84e 	bl	8017694 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800a5f8:	4b65      	ldr	r3, [pc, #404]	; (800a790 <mem_trim+0x1f0>)
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	687a      	ldr	r2, [r7, #4]
 800a5fe:	429a      	cmp	r2, r3
 800a600:	d304      	bcc.n	800a60c <mem_trim+0x6c>
 800a602:	4b64      	ldr	r3, [pc, #400]	; (800a794 <mem_trim+0x1f4>)
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	687a      	ldr	r2, [r7, #4]
 800a608:	429a      	cmp	r2, r3
 800a60a:	d307      	bcc.n	800a61c <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800a60c:	f00c fe4c 	bl	80172a8 <sys_arch_protect>
 800a610:	60b8      	str	r0, [r7, #8]
 800a612:	68b8      	ldr	r0, [r7, #8]
 800a614:	f00c fe56 	bl	80172c4 <sys_arch_unprotect>
    return rmem;
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	e0b5      	b.n	800a788 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	3b08      	subs	r3, #8
 800a620:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800a622:	69b8      	ldr	r0, [r7, #24]
 800a624:	f7ff fdea 	bl	800a1fc <mem_to_ptr>
 800a628:	4603      	mov	r3, r0
 800a62a:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800a62c:	69bb      	ldr	r3, [r7, #24]
 800a62e:	881a      	ldrh	r2, [r3, #0]
 800a630:	8afb      	ldrh	r3, [r7, #22]
 800a632:	1ad3      	subs	r3, r2, r3
 800a634:	b29b      	uxth	r3, r3
 800a636:	3b08      	subs	r3, #8
 800a638:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800a63a:	8bfa      	ldrh	r2, [r7, #30]
 800a63c:	8abb      	ldrh	r3, [r7, #20]
 800a63e:	429a      	cmp	r2, r3
 800a640:	d906      	bls.n	800a650 <mem_trim+0xb0>
 800a642:	4b55      	ldr	r3, [pc, #340]	; (800a798 <mem_trim+0x1f8>)
 800a644:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800a648:	4956      	ldr	r1, [pc, #344]	; (800a7a4 <mem_trim+0x204>)
 800a64a:	4855      	ldr	r0, [pc, #340]	; (800a7a0 <mem_trim+0x200>)
 800a64c:	f00d f822 	bl	8017694 <iprintf>
  if (newsize > size) {
 800a650:	8bfa      	ldrh	r2, [r7, #30]
 800a652:	8abb      	ldrh	r3, [r7, #20]
 800a654:	429a      	cmp	r2, r3
 800a656:	d901      	bls.n	800a65c <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800a658:	2300      	movs	r3, #0
 800a65a:	e095      	b.n	800a788 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800a65c:	8bfa      	ldrh	r2, [r7, #30]
 800a65e:	8abb      	ldrh	r3, [r7, #20]
 800a660:	429a      	cmp	r2, r3
 800a662:	d101      	bne.n	800a668 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	e08f      	b.n	800a788 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800a668:	484f      	ldr	r0, [pc, #316]	; (800a7a8 <mem_trim+0x208>)
 800a66a:	f00c fddb 	bl	8017224 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800a66e:	69bb      	ldr	r3, [r7, #24]
 800a670:	881b      	ldrh	r3, [r3, #0]
 800a672:	4618      	mov	r0, r3
 800a674:	f7ff fdb0 	bl	800a1d8 <ptr_to_mem>
 800a678:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800a67a:	693b      	ldr	r3, [r7, #16]
 800a67c:	791b      	ldrb	r3, [r3, #4]
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d13f      	bne.n	800a702 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800a682:	69bb      	ldr	r3, [r7, #24]
 800a684:	881b      	ldrh	r3, [r3, #0]
 800a686:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a68a:	d106      	bne.n	800a69a <mem_trim+0xfa>
 800a68c:	4b42      	ldr	r3, [pc, #264]	; (800a798 <mem_trim+0x1f8>)
 800a68e:	f240 22f5 	movw	r2, #757	; 0x2f5
 800a692:	4946      	ldr	r1, [pc, #280]	; (800a7ac <mem_trim+0x20c>)
 800a694:	4842      	ldr	r0, [pc, #264]	; (800a7a0 <mem_trim+0x200>)
 800a696:	f00c fffd 	bl	8017694 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800a69a:	693b      	ldr	r3, [r7, #16]
 800a69c:	881b      	ldrh	r3, [r3, #0]
 800a69e:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800a6a0:	8afa      	ldrh	r2, [r7, #22]
 800a6a2:	8bfb      	ldrh	r3, [r7, #30]
 800a6a4:	4413      	add	r3, r2
 800a6a6:	b29b      	uxth	r3, r3
 800a6a8:	3308      	adds	r3, #8
 800a6aa:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800a6ac:	4b40      	ldr	r3, [pc, #256]	; (800a7b0 <mem_trim+0x210>)
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	693a      	ldr	r2, [r7, #16]
 800a6b2:	429a      	cmp	r2, r3
 800a6b4:	d106      	bne.n	800a6c4 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800a6b6:	89fb      	ldrh	r3, [r7, #14]
 800a6b8:	4618      	mov	r0, r3
 800a6ba:	f7ff fd8d 	bl	800a1d8 <ptr_to_mem>
 800a6be:	4603      	mov	r3, r0
 800a6c0:	4a3b      	ldr	r2, [pc, #236]	; (800a7b0 <mem_trim+0x210>)
 800a6c2:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800a6c4:	89fb      	ldrh	r3, [r7, #14]
 800a6c6:	4618      	mov	r0, r3
 800a6c8:	f7ff fd86 	bl	800a1d8 <ptr_to_mem>
 800a6cc:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800a6ce:	693b      	ldr	r3, [r7, #16]
 800a6d0:	2200      	movs	r2, #0
 800a6d2:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800a6d4:	693b      	ldr	r3, [r7, #16]
 800a6d6:	89ba      	ldrh	r2, [r7, #12]
 800a6d8:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800a6da:	693b      	ldr	r3, [r7, #16]
 800a6dc:	8afa      	ldrh	r2, [r7, #22]
 800a6de:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800a6e0:	69bb      	ldr	r3, [r7, #24]
 800a6e2:	89fa      	ldrh	r2, [r7, #14]
 800a6e4:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800a6e6:	693b      	ldr	r3, [r7, #16]
 800a6e8:	881b      	ldrh	r3, [r3, #0]
 800a6ea:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a6ee:	d047      	beq.n	800a780 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800a6f0:	693b      	ldr	r3, [r7, #16]
 800a6f2:	881b      	ldrh	r3, [r3, #0]
 800a6f4:	4618      	mov	r0, r3
 800a6f6:	f7ff fd6f 	bl	800a1d8 <ptr_to_mem>
 800a6fa:	4602      	mov	r2, r0
 800a6fc:	89fb      	ldrh	r3, [r7, #14]
 800a6fe:	8053      	strh	r3, [r2, #2]
 800a700:	e03e      	b.n	800a780 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800a702:	8bfb      	ldrh	r3, [r7, #30]
 800a704:	f103 0214 	add.w	r2, r3, #20
 800a708:	8abb      	ldrh	r3, [r7, #20]
 800a70a:	429a      	cmp	r2, r3
 800a70c:	d838      	bhi.n	800a780 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800a70e:	8afa      	ldrh	r2, [r7, #22]
 800a710:	8bfb      	ldrh	r3, [r7, #30]
 800a712:	4413      	add	r3, r2
 800a714:	b29b      	uxth	r3, r3
 800a716:	3308      	adds	r3, #8
 800a718:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800a71a:	69bb      	ldr	r3, [r7, #24]
 800a71c:	881b      	ldrh	r3, [r3, #0]
 800a71e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a722:	d106      	bne.n	800a732 <mem_trim+0x192>
 800a724:	4b1c      	ldr	r3, [pc, #112]	; (800a798 <mem_trim+0x1f8>)
 800a726:	f240 3216 	movw	r2, #790	; 0x316
 800a72a:	4920      	ldr	r1, [pc, #128]	; (800a7ac <mem_trim+0x20c>)
 800a72c:	481c      	ldr	r0, [pc, #112]	; (800a7a0 <mem_trim+0x200>)
 800a72e:	f00c ffb1 	bl	8017694 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800a732:	89fb      	ldrh	r3, [r7, #14]
 800a734:	4618      	mov	r0, r3
 800a736:	f7ff fd4f 	bl	800a1d8 <ptr_to_mem>
 800a73a:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800a73c:	4b1c      	ldr	r3, [pc, #112]	; (800a7b0 <mem_trim+0x210>)
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	693a      	ldr	r2, [r7, #16]
 800a742:	429a      	cmp	r2, r3
 800a744:	d202      	bcs.n	800a74c <mem_trim+0x1ac>
      lfree = mem2;
 800a746:	4a1a      	ldr	r2, [pc, #104]	; (800a7b0 <mem_trim+0x210>)
 800a748:	693b      	ldr	r3, [r7, #16]
 800a74a:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800a74c:	693b      	ldr	r3, [r7, #16]
 800a74e:	2200      	movs	r2, #0
 800a750:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800a752:	69bb      	ldr	r3, [r7, #24]
 800a754:	881a      	ldrh	r2, [r3, #0]
 800a756:	693b      	ldr	r3, [r7, #16]
 800a758:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800a75a:	693b      	ldr	r3, [r7, #16]
 800a75c:	8afa      	ldrh	r2, [r7, #22]
 800a75e:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800a760:	69bb      	ldr	r3, [r7, #24]
 800a762:	89fa      	ldrh	r2, [r7, #14]
 800a764:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800a766:	693b      	ldr	r3, [r7, #16]
 800a768:	881b      	ldrh	r3, [r3, #0]
 800a76a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a76e:	d007      	beq.n	800a780 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800a770:	693b      	ldr	r3, [r7, #16]
 800a772:	881b      	ldrh	r3, [r3, #0]
 800a774:	4618      	mov	r0, r3
 800a776:	f7ff fd2f 	bl	800a1d8 <ptr_to_mem>
 800a77a:	4602      	mov	r2, r0
 800a77c:	89fb      	ldrh	r3, [r7, #14]
 800a77e:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800a780:	4809      	ldr	r0, [pc, #36]	; (800a7a8 <mem_trim+0x208>)
 800a782:	f00c fd5e 	bl	8017242 <sys_mutex_unlock>
  return rmem;
 800a786:	687b      	ldr	r3, [r7, #4]
}
 800a788:	4618      	mov	r0, r3
 800a78a:	3720      	adds	r7, #32
 800a78c:	46bd      	mov	sp, r7
 800a78e:	bd80      	pop	{r7, pc}
 800a790:	2000d830 	.word	0x2000d830
 800a794:	2000d834 	.word	0x2000d834
 800a798:	08019108 	.word	0x08019108
 800a79c:	08019294 	.word	0x08019294
 800a7a0:	08019150 	.word	0x08019150
 800a7a4:	080192ac 	.word	0x080192ac
 800a7a8:	2000d838 	.word	0x2000d838
 800a7ac:	080192cc 	.word	0x080192cc
 800a7b0:	2000d83c 	.word	0x2000d83c

0800a7b4 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800a7b4:	b580      	push	{r7, lr}
 800a7b6:	b088      	sub	sp, #32
 800a7b8:	af00      	add	r7, sp, #0
 800a7ba:	4603      	mov	r3, r0
 800a7bc:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800a7be:	88fb      	ldrh	r3, [r7, #6]
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d101      	bne.n	800a7c8 <mem_malloc+0x14>
    return NULL;
 800a7c4:	2300      	movs	r3, #0
 800a7c6:	e0e2      	b.n	800a98e <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800a7c8:	88fb      	ldrh	r3, [r7, #6]
 800a7ca:	3303      	adds	r3, #3
 800a7cc:	b29b      	uxth	r3, r3
 800a7ce:	f023 0303 	bic.w	r3, r3, #3
 800a7d2:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800a7d4:	8bbb      	ldrh	r3, [r7, #28]
 800a7d6:	2b0b      	cmp	r3, #11
 800a7d8:	d801      	bhi.n	800a7de <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800a7da:	230c      	movs	r3, #12
 800a7dc:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800a7de:	8bbb      	ldrh	r3, [r7, #28]
 800a7e0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a7e4:	d803      	bhi.n	800a7ee <mem_malloc+0x3a>
 800a7e6:	8bba      	ldrh	r2, [r7, #28]
 800a7e8:	88fb      	ldrh	r3, [r7, #6]
 800a7ea:	429a      	cmp	r2, r3
 800a7ec:	d201      	bcs.n	800a7f2 <mem_malloc+0x3e>
    return NULL;
 800a7ee:	2300      	movs	r3, #0
 800a7f0:	e0cd      	b.n	800a98e <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800a7f2:	4869      	ldr	r0, [pc, #420]	; (800a998 <mem_malloc+0x1e4>)
 800a7f4:	f00c fd16 	bl	8017224 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800a7f8:	4b68      	ldr	r3, [pc, #416]	; (800a99c <mem_malloc+0x1e8>)
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	4618      	mov	r0, r3
 800a7fe:	f7ff fcfd 	bl	800a1fc <mem_to_ptr>
 800a802:	4603      	mov	r3, r0
 800a804:	83fb      	strh	r3, [r7, #30]
 800a806:	e0b7      	b.n	800a978 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800a808:	8bfb      	ldrh	r3, [r7, #30]
 800a80a:	4618      	mov	r0, r3
 800a80c:	f7ff fce4 	bl	800a1d8 <ptr_to_mem>
 800a810:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800a812:	697b      	ldr	r3, [r7, #20]
 800a814:	791b      	ldrb	r3, [r3, #4]
 800a816:	2b00      	cmp	r3, #0
 800a818:	f040 80a7 	bne.w	800a96a <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800a81c:	697b      	ldr	r3, [r7, #20]
 800a81e:	881b      	ldrh	r3, [r3, #0]
 800a820:	461a      	mov	r2, r3
 800a822:	8bfb      	ldrh	r3, [r7, #30]
 800a824:	1ad3      	subs	r3, r2, r3
 800a826:	f1a3 0208 	sub.w	r2, r3, #8
 800a82a:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800a82c:	429a      	cmp	r2, r3
 800a82e:	f0c0 809c 	bcc.w	800a96a <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800a832:	697b      	ldr	r3, [r7, #20]
 800a834:	881b      	ldrh	r3, [r3, #0]
 800a836:	461a      	mov	r2, r3
 800a838:	8bfb      	ldrh	r3, [r7, #30]
 800a83a:	1ad3      	subs	r3, r2, r3
 800a83c:	f1a3 0208 	sub.w	r2, r3, #8
 800a840:	8bbb      	ldrh	r3, [r7, #28]
 800a842:	3314      	adds	r3, #20
 800a844:	429a      	cmp	r2, r3
 800a846:	d333      	bcc.n	800a8b0 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800a848:	8bfa      	ldrh	r2, [r7, #30]
 800a84a:	8bbb      	ldrh	r3, [r7, #28]
 800a84c:	4413      	add	r3, r2
 800a84e:	b29b      	uxth	r3, r3
 800a850:	3308      	adds	r3, #8
 800a852:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800a854:	8a7b      	ldrh	r3, [r7, #18]
 800a856:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a85a:	d106      	bne.n	800a86a <mem_malloc+0xb6>
 800a85c:	4b50      	ldr	r3, [pc, #320]	; (800a9a0 <mem_malloc+0x1ec>)
 800a85e:	f240 3287 	movw	r2, #903	; 0x387
 800a862:	4950      	ldr	r1, [pc, #320]	; (800a9a4 <mem_malloc+0x1f0>)
 800a864:	4850      	ldr	r0, [pc, #320]	; (800a9a8 <mem_malloc+0x1f4>)
 800a866:	f00c ff15 	bl	8017694 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800a86a:	8a7b      	ldrh	r3, [r7, #18]
 800a86c:	4618      	mov	r0, r3
 800a86e:	f7ff fcb3 	bl	800a1d8 <ptr_to_mem>
 800a872:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	2200      	movs	r2, #0
 800a878:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800a87a:	697b      	ldr	r3, [r7, #20]
 800a87c:	881a      	ldrh	r2, [r3, #0]
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	8bfa      	ldrh	r2, [r7, #30]
 800a886:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800a888:	697b      	ldr	r3, [r7, #20]
 800a88a:	8a7a      	ldrh	r2, [r7, #18]
 800a88c:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800a88e:	697b      	ldr	r3, [r7, #20]
 800a890:	2201      	movs	r2, #1
 800a892:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	881b      	ldrh	r3, [r3, #0]
 800a898:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a89c:	d00b      	beq.n	800a8b6 <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	881b      	ldrh	r3, [r3, #0]
 800a8a2:	4618      	mov	r0, r3
 800a8a4:	f7ff fc98 	bl	800a1d8 <ptr_to_mem>
 800a8a8:	4602      	mov	r2, r0
 800a8aa:	8a7b      	ldrh	r3, [r7, #18]
 800a8ac:	8053      	strh	r3, [r2, #2]
 800a8ae:	e002      	b.n	800a8b6 <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800a8b0:	697b      	ldr	r3, [r7, #20]
 800a8b2:	2201      	movs	r2, #1
 800a8b4:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800a8b6:	4b39      	ldr	r3, [pc, #228]	; (800a99c <mem_malloc+0x1e8>)
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	697a      	ldr	r2, [r7, #20]
 800a8bc:	429a      	cmp	r2, r3
 800a8be:	d127      	bne.n	800a910 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800a8c0:	4b36      	ldr	r3, [pc, #216]	; (800a99c <mem_malloc+0x1e8>)
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800a8c6:	e005      	b.n	800a8d4 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800a8c8:	69bb      	ldr	r3, [r7, #24]
 800a8ca:	881b      	ldrh	r3, [r3, #0]
 800a8cc:	4618      	mov	r0, r3
 800a8ce:	f7ff fc83 	bl	800a1d8 <ptr_to_mem>
 800a8d2:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800a8d4:	69bb      	ldr	r3, [r7, #24]
 800a8d6:	791b      	ldrb	r3, [r3, #4]
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d004      	beq.n	800a8e6 <mem_malloc+0x132>
 800a8dc:	4b33      	ldr	r3, [pc, #204]	; (800a9ac <mem_malloc+0x1f8>)
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	69ba      	ldr	r2, [r7, #24]
 800a8e2:	429a      	cmp	r2, r3
 800a8e4:	d1f0      	bne.n	800a8c8 <mem_malloc+0x114>
          }
          lfree = cur;
 800a8e6:	4a2d      	ldr	r2, [pc, #180]	; (800a99c <mem_malloc+0x1e8>)
 800a8e8:	69bb      	ldr	r3, [r7, #24]
 800a8ea:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800a8ec:	4b2b      	ldr	r3, [pc, #172]	; (800a99c <mem_malloc+0x1e8>)
 800a8ee:	681a      	ldr	r2, [r3, #0]
 800a8f0:	4b2e      	ldr	r3, [pc, #184]	; (800a9ac <mem_malloc+0x1f8>)
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	429a      	cmp	r2, r3
 800a8f6:	d00b      	beq.n	800a910 <mem_malloc+0x15c>
 800a8f8:	4b28      	ldr	r3, [pc, #160]	; (800a99c <mem_malloc+0x1e8>)
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	791b      	ldrb	r3, [r3, #4]
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d006      	beq.n	800a910 <mem_malloc+0x15c>
 800a902:	4b27      	ldr	r3, [pc, #156]	; (800a9a0 <mem_malloc+0x1ec>)
 800a904:	f240 32b5 	movw	r2, #949	; 0x3b5
 800a908:	4929      	ldr	r1, [pc, #164]	; (800a9b0 <mem_malloc+0x1fc>)
 800a90a:	4827      	ldr	r0, [pc, #156]	; (800a9a8 <mem_malloc+0x1f4>)
 800a90c:	f00c fec2 	bl	8017694 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800a910:	4821      	ldr	r0, [pc, #132]	; (800a998 <mem_malloc+0x1e4>)
 800a912:	f00c fc96 	bl	8017242 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800a916:	8bba      	ldrh	r2, [r7, #28]
 800a918:	697b      	ldr	r3, [r7, #20]
 800a91a:	4413      	add	r3, r2
 800a91c:	3308      	adds	r3, #8
 800a91e:	4a23      	ldr	r2, [pc, #140]	; (800a9ac <mem_malloc+0x1f8>)
 800a920:	6812      	ldr	r2, [r2, #0]
 800a922:	4293      	cmp	r3, r2
 800a924:	d906      	bls.n	800a934 <mem_malloc+0x180>
 800a926:	4b1e      	ldr	r3, [pc, #120]	; (800a9a0 <mem_malloc+0x1ec>)
 800a928:	f240 32b9 	movw	r2, #953	; 0x3b9
 800a92c:	4921      	ldr	r1, [pc, #132]	; (800a9b4 <mem_malloc+0x200>)
 800a92e:	481e      	ldr	r0, [pc, #120]	; (800a9a8 <mem_malloc+0x1f4>)
 800a930:	f00c feb0 	bl	8017694 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800a934:	697b      	ldr	r3, [r7, #20]
 800a936:	f003 0303 	and.w	r3, r3, #3
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d006      	beq.n	800a94c <mem_malloc+0x198>
 800a93e:	4b18      	ldr	r3, [pc, #96]	; (800a9a0 <mem_malloc+0x1ec>)
 800a940:	f240 32bb 	movw	r2, #955	; 0x3bb
 800a944:	491c      	ldr	r1, [pc, #112]	; (800a9b8 <mem_malloc+0x204>)
 800a946:	4818      	ldr	r0, [pc, #96]	; (800a9a8 <mem_malloc+0x1f4>)
 800a948:	f00c fea4 	bl	8017694 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800a94c:	697b      	ldr	r3, [r7, #20]
 800a94e:	f003 0303 	and.w	r3, r3, #3
 800a952:	2b00      	cmp	r3, #0
 800a954:	d006      	beq.n	800a964 <mem_malloc+0x1b0>
 800a956:	4b12      	ldr	r3, [pc, #72]	; (800a9a0 <mem_malloc+0x1ec>)
 800a958:	f240 32bd 	movw	r2, #957	; 0x3bd
 800a95c:	4917      	ldr	r1, [pc, #92]	; (800a9bc <mem_malloc+0x208>)
 800a95e:	4812      	ldr	r0, [pc, #72]	; (800a9a8 <mem_malloc+0x1f4>)
 800a960:	f00c fe98 	bl	8017694 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800a964:	697b      	ldr	r3, [r7, #20]
 800a966:	3308      	adds	r3, #8
 800a968:	e011      	b.n	800a98e <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800a96a:	8bfb      	ldrh	r3, [r7, #30]
 800a96c:	4618      	mov	r0, r3
 800a96e:	f7ff fc33 	bl	800a1d8 <ptr_to_mem>
 800a972:	4603      	mov	r3, r0
 800a974:	881b      	ldrh	r3, [r3, #0]
 800a976:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800a978:	8bfa      	ldrh	r2, [r7, #30]
 800a97a:	8bbb      	ldrh	r3, [r7, #28]
 800a97c:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800a980:	429a      	cmp	r2, r3
 800a982:	f4ff af41 	bcc.w	800a808 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800a986:	4804      	ldr	r0, [pc, #16]	; (800a998 <mem_malloc+0x1e4>)
 800a988:	f00c fc5b 	bl	8017242 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800a98c:	2300      	movs	r3, #0
}
 800a98e:	4618      	mov	r0, r3
 800a990:	3720      	adds	r7, #32
 800a992:	46bd      	mov	sp, r7
 800a994:	bd80      	pop	{r7, pc}
 800a996:	bf00      	nop
 800a998:	2000d838 	.word	0x2000d838
 800a99c:	2000d83c 	.word	0x2000d83c
 800a9a0:	08019108 	.word	0x08019108
 800a9a4:	080192cc 	.word	0x080192cc
 800a9a8:	08019150 	.word	0x08019150
 800a9ac:	2000d834 	.word	0x2000d834
 800a9b0:	080192e0 	.word	0x080192e0
 800a9b4:	080192fc 	.word	0x080192fc
 800a9b8:	0801932c 	.word	0x0801932c
 800a9bc:	0801935c 	.word	0x0801935c

0800a9c0 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800a9c0:	b480      	push	{r7}
 800a9c2:	b085      	sub	sp, #20
 800a9c4:	af00      	add	r7, sp, #0
 800a9c6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	689b      	ldr	r3, [r3, #8]
 800a9cc:	2200      	movs	r2, #0
 800a9ce:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	685b      	ldr	r3, [r3, #4]
 800a9d4:	3303      	adds	r3, #3
 800a9d6:	f023 0303 	bic.w	r3, r3, #3
 800a9da:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800a9dc:	2300      	movs	r3, #0
 800a9de:	60fb      	str	r3, [r7, #12]
 800a9e0:	e011      	b.n	800aa06 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	689b      	ldr	r3, [r3, #8]
 800a9e6:	681a      	ldr	r2, [r3, #0]
 800a9e8:	68bb      	ldr	r3, [r7, #8]
 800a9ea:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	689b      	ldr	r3, [r3, #8]
 800a9f0:	68ba      	ldr	r2, [r7, #8]
 800a9f2:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	881b      	ldrh	r3, [r3, #0]
 800a9f8:	461a      	mov	r2, r3
 800a9fa:	68bb      	ldr	r3, [r7, #8]
 800a9fc:	4413      	add	r3, r2
 800a9fe:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	3301      	adds	r3, #1
 800aa04:	60fb      	str	r3, [r7, #12]
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	885b      	ldrh	r3, [r3, #2]
 800aa0a:	461a      	mov	r2, r3
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	4293      	cmp	r3, r2
 800aa10:	dbe7      	blt.n	800a9e2 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800aa12:	bf00      	nop
 800aa14:	bf00      	nop
 800aa16:	3714      	adds	r7, #20
 800aa18:	46bd      	mov	sp, r7
 800aa1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa1e:	4770      	bx	lr

0800aa20 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800aa20:	b580      	push	{r7, lr}
 800aa22:	b082      	sub	sp, #8
 800aa24:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800aa26:	2300      	movs	r3, #0
 800aa28:	80fb      	strh	r3, [r7, #6]
 800aa2a:	e009      	b.n	800aa40 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800aa2c:	88fb      	ldrh	r3, [r7, #6]
 800aa2e:	4a08      	ldr	r2, [pc, #32]	; (800aa50 <memp_init+0x30>)
 800aa30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aa34:	4618      	mov	r0, r3
 800aa36:	f7ff ffc3 	bl	800a9c0 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800aa3a:	88fb      	ldrh	r3, [r7, #6]
 800aa3c:	3301      	adds	r3, #1
 800aa3e:	80fb      	strh	r3, [r7, #6]
 800aa40:	88fb      	ldrh	r3, [r7, #6]
 800aa42:	2b0c      	cmp	r3, #12
 800aa44:	d9f2      	bls.n	800aa2c <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800aa46:	bf00      	nop
 800aa48:	bf00      	nop
 800aa4a:	3708      	adds	r7, #8
 800aa4c:	46bd      	mov	sp, r7
 800aa4e:	bd80      	pop	{r7, pc}
 800aa50:	0801bf14 	.word	0x0801bf14

0800aa54 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800aa54:	b580      	push	{r7, lr}
 800aa56:	b084      	sub	sp, #16
 800aa58:	af00      	add	r7, sp, #0
 800aa5a:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800aa5c:	f00c fc24 	bl	80172a8 <sys_arch_protect>
 800aa60:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	689b      	ldr	r3, [r3, #8]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800aa6a:	68bb      	ldr	r3, [r7, #8]
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d015      	beq.n	800aa9c <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	689b      	ldr	r3, [r3, #8]
 800aa74:	68ba      	ldr	r2, [r7, #8]
 800aa76:	6812      	ldr	r2, [r2, #0]
 800aa78:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800aa7a:	68bb      	ldr	r3, [r7, #8]
 800aa7c:	f003 0303 	and.w	r3, r3, #3
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d006      	beq.n	800aa92 <do_memp_malloc_pool+0x3e>
 800aa84:	4b09      	ldr	r3, [pc, #36]	; (800aaac <do_memp_malloc_pool+0x58>)
 800aa86:	f44f 728c 	mov.w	r2, #280	; 0x118
 800aa8a:	4909      	ldr	r1, [pc, #36]	; (800aab0 <do_memp_malloc_pool+0x5c>)
 800aa8c:	4809      	ldr	r0, [pc, #36]	; (800aab4 <do_memp_malloc_pool+0x60>)
 800aa8e:	f00c fe01 	bl	8017694 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800aa92:	68f8      	ldr	r0, [r7, #12]
 800aa94:	f00c fc16 	bl	80172c4 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800aa98:	68bb      	ldr	r3, [r7, #8]
 800aa9a:	e003      	b.n	800aaa4 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800aa9c:	68f8      	ldr	r0, [r7, #12]
 800aa9e:	f00c fc11 	bl	80172c4 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800aaa2:	2300      	movs	r3, #0
}
 800aaa4:	4618      	mov	r0, r3
 800aaa6:	3710      	adds	r7, #16
 800aaa8:	46bd      	mov	sp, r7
 800aaaa:	bd80      	pop	{r7, pc}
 800aaac:	08019380 	.word	0x08019380
 800aab0:	080193b0 	.word	0x080193b0
 800aab4:	080193d4 	.word	0x080193d4

0800aab8 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800aab8:	b580      	push	{r7, lr}
 800aaba:	b082      	sub	sp, #8
 800aabc:	af00      	add	r7, sp, #0
 800aabe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d106      	bne.n	800aad4 <memp_malloc_pool+0x1c>
 800aac6:	4b0a      	ldr	r3, [pc, #40]	; (800aaf0 <memp_malloc_pool+0x38>)
 800aac8:	f44f 729e 	mov.w	r2, #316	; 0x13c
 800aacc:	4909      	ldr	r1, [pc, #36]	; (800aaf4 <memp_malloc_pool+0x3c>)
 800aace:	480a      	ldr	r0, [pc, #40]	; (800aaf8 <memp_malloc_pool+0x40>)
 800aad0:	f00c fde0 	bl	8017694 <iprintf>
  if (desc == NULL) {
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d101      	bne.n	800aade <memp_malloc_pool+0x26>
    return NULL;
 800aada:	2300      	movs	r3, #0
 800aadc:	e003      	b.n	800aae6 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800aade:	6878      	ldr	r0, [r7, #4]
 800aae0:	f7ff ffb8 	bl	800aa54 <do_memp_malloc_pool>
 800aae4:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800aae6:	4618      	mov	r0, r3
 800aae8:	3708      	adds	r7, #8
 800aaea:	46bd      	mov	sp, r7
 800aaec:	bd80      	pop	{r7, pc}
 800aaee:	bf00      	nop
 800aaf0:	08019380 	.word	0x08019380
 800aaf4:	080193fc 	.word	0x080193fc
 800aaf8:	080193d4 	.word	0x080193d4

0800aafc <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800aafc:	b580      	push	{r7, lr}
 800aafe:	b084      	sub	sp, #16
 800ab00:	af00      	add	r7, sp, #0
 800ab02:	4603      	mov	r3, r0
 800ab04:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800ab06:	79fb      	ldrb	r3, [r7, #7]
 800ab08:	2b0c      	cmp	r3, #12
 800ab0a:	d908      	bls.n	800ab1e <memp_malloc+0x22>
 800ab0c:	4b0a      	ldr	r3, [pc, #40]	; (800ab38 <memp_malloc+0x3c>)
 800ab0e:	f240 1257 	movw	r2, #343	; 0x157
 800ab12:	490a      	ldr	r1, [pc, #40]	; (800ab3c <memp_malloc+0x40>)
 800ab14:	480a      	ldr	r0, [pc, #40]	; (800ab40 <memp_malloc+0x44>)
 800ab16:	f00c fdbd 	bl	8017694 <iprintf>
 800ab1a:	2300      	movs	r3, #0
 800ab1c:	e008      	b.n	800ab30 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800ab1e:	79fb      	ldrb	r3, [r7, #7]
 800ab20:	4a08      	ldr	r2, [pc, #32]	; (800ab44 <memp_malloc+0x48>)
 800ab22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ab26:	4618      	mov	r0, r3
 800ab28:	f7ff ff94 	bl	800aa54 <do_memp_malloc_pool>
 800ab2c:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800ab2e:	68fb      	ldr	r3, [r7, #12]
}
 800ab30:	4618      	mov	r0, r3
 800ab32:	3710      	adds	r7, #16
 800ab34:	46bd      	mov	sp, r7
 800ab36:	bd80      	pop	{r7, pc}
 800ab38:	08019380 	.word	0x08019380
 800ab3c:	08019410 	.word	0x08019410
 800ab40:	080193d4 	.word	0x080193d4
 800ab44:	0801bf14 	.word	0x0801bf14

0800ab48 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800ab48:	b580      	push	{r7, lr}
 800ab4a:	b084      	sub	sp, #16
 800ab4c:	af00      	add	r7, sp, #0
 800ab4e:	6078      	str	r0, [r7, #4]
 800ab50:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800ab52:	683b      	ldr	r3, [r7, #0]
 800ab54:	f003 0303 	and.w	r3, r3, #3
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d006      	beq.n	800ab6a <do_memp_free_pool+0x22>
 800ab5c:	4b0d      	ldr	r3, [pc, #52]	; (800ab94 <do_memp_free_pool+0x4c>)
 800ab5e:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800ab62:	490d      	ldr	r1, [pc, #52]	; (800ab98 <do_memp_free_pool+0x50>)
 800ab64:	480d      	ldr	r0, [pc, #52]	; (800ab9c <do_memp_free_pool+0x54>)
 800ab66:	f00c fd95 	bl	8017694 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800ab6a:	683b      	ldr	r3, [r7, #0]
 800ab6c:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800ab6e:	f00c fb9b 	bl	80172a8 <sys_arch_protect>
 800ab72:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	689b      	ldr	r3, [r3, #8]
 800ab78:	681a      	ldr	r2, [r3, #0]
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	689b      	ldr	r3, [r3, #8]
 800ab82:	68fa      	ldr	r2, [r7, #12]
 800ab84:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800ab86:	68b8      	ldr	r0, [r7, #8]
 800ab88:	f00c fb9c 	bl	80172c4 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800ab8c:	bf00      	nop
 800ab8e:	3710      	adds	r7, #16
 800ab90:	46bd      	mov	sp, r7
 800ab92:	bd80      	pop	{r7, pc}
 800ab94:	08019380 	.word	0x08019380
 800ab98:	08019430 	.word	0x08019430
 800ab9c:	080193d4 	.word	0x080193d4

0800aba0 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800aba0:	b580      	push	{r7, lr}
 800aba2:	b082      	sub	sp, #8
 800aba4:	af00      	add	r7, sp, #0
 800aba6:	6078      	str	r0, [r7, #4]
 800aba8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	2b00      	cmp	r3, #0
 800abae:	d106      	bne.n	800abbe <memp_free_pool+0x1e>
 800abb0:	4b0a      	ldr	r3, [pc, #40]	; (800abdc <memp_free_pool+0x3c>)
 800abb2:	f240 1295 	movw	r2, #405	; 0x195
 800abb6:	490a      	ldr	r1, [pc, #40]	; (800abe0 <memp_free_pool+0x40>)
 800abb8:	480a      	ldr	r0, [pc, #40]	; (800abe4 <memp_free_pool+0x44>)
 800abba:	f00c fd6b 	bl	8017694 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d007      	beq.n	800abd4 <memp_free_pool+0x34>
 800abc4:	683b      	ldr	r3, [r7, #0]
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d004      	beq.n	800abd4 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800abca:	6839      	ldr	r1, [r7, #0]
 800abcc:	6878      	ldr	r0, [r7, #4]
 800abce:	f7ff ffbb 	bl	800ab48 <do_memp_free_pool>
 800abd2:	e000      	b.n	800abd6 <memp_free_pool+0x36>
    return;
 800abd4:	bf00      	nop
}
 800abd6:	3708      	adds	r7, #8
 800abd8:	46bd      	mov	sp, r7
 800abda:	bd80      	pop	{r7, pc}
 800abdc:	08019380 	.word	0x08019380
 800abe0:	080193fc 	.word	0x080193fc
 800abe4:	080193d4 	.word	0x080193d4

0800abe8 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800abe8:	b580      	push	{r7, lr}
 800abea:	b082      	sub	sp, #8
 800abec:	af00      	add	r7, sp, #0
 800abee:	4603      	mov	r3, r0
 800abf0:	6039      	str	r1, [r7, #0]
 800abf2:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800abf4:	79fb      	ldrb	r3, [r7, #7]
 800abf6:	2b0c      	cmp	r3, #12
 800abf8:	d907      	bls.n	800ac0a <memp_free+0x22>
 800abfa:	4b0c      	ldr	r3, [pc, #48]	; (800ac2c <memp_free+0x44>)
 800abfc:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800ac00:	490b      	ldr	r1, [pc, #44]	; (800ac30 <memp_free+0x48>)
 800ac02:	480c      	ldr	r0, [pc, #48]	; (800ac34 <memp_free+0x4c>)
 800ac04:	f00c fd46 	bl	8017694 <iprintf>
 800ac08:	e00c      	b.n	800ac24 <memp_free+0x3c>

  if (mem == NULL) {
 800ac0a:	683b      	ldr	r3, [r7, #0]
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d008      	beq.n	800ac22 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800ac10:	79fb      	ldrb	r3, [r7, #7]
 800ac12:	4a09      	ldr	r2, [pc, #36]	; (800ac38 <memp_free+0x50>)
 800ac14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ac18:	6839      	ldr	r1, [r7, #0]
 800ac1a:	4618      	mov	r0, r3
 800ac1c:	f7ff ff94 	bl	800ab48 <do_memp_free_pool>
 800ac20:	e000      	b.n	800ac24 <memp_free+0x3c>
    return;
 800ac22:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800ac24:	3708      	adds	r7, #8
 800ac26:	46bd      	mov	sp, r7
 800ac28:	bd80      	pop	{r7, pc}
 800ac2a:	bf00      	nop
 800ac2c:	08019380 	.word	0x08019380
 800ac30:	08019450 	.word	0x08019450
 800ac34:	080193d4 	.word	0x080193d4
 800ac38:	0801bf14 	.word	0x0801bf14

0800ac3c <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800ac3c:	b480      	push	{r7}
 800ac3e:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800ac40:	bf00      	nop
 800ac42:	46bd      	mov	sp, r7
 800ac44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac48:	4770      	bx	lr
	...

0800ac4c <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800ac4c:	b580      	push	{r7, lr}
 800ac4e:	b086      	sub	sp, #24
 800ac50:	af00      	add	r7, sp, #0
 800ac52:	60f8      	str	r0, [r7, #12]
 800ac54:	60b9      	str	r1, [r7, #8]
 800ac56:	607a      	str	r2, [r7, #4]
 800ac58:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d108      	bne.n	800ac72 <netif_add+0x26>
 800ac60:	4b5b      	ldr	r3, [pc, #364]	; (800add0 <netif_add+0x184>)
 800ac62:	f240 1227 	movw	r2, #295	; 0x127
 800ac66:	495b      	ldr	r1, [pc, #364]	; (800add4 <netif_add+0x188>)
 800ac68:	485b      	ldr	r0, [pc, #364]	; (800add8 <netif_add+0x18c>)
 800ac6a:	f00c fd13 	bl	8017694 <iprintf>
 800ac6e:	2300      	movs	r3, #0
 800ac70:	e0a9      	b.n	800adc6 <netif_add+0x17a>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800ac72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d108      	bne.n	800ac8a <netif_add+0x3e>
 800ac78:	4b55      	ldr	r3, [pc, #340]	; (800add0 <netif_add+0x184>)
 800ac7a:	f44f 7294 	mov.w	r2, #296	; 0x128
 800ac7e:	4957      	ldr	r1, [pc, #348]	; (800addc <netif_add+0x190>)
 800ac80:	4855      	ldr	r0, [pc, #340]	; (800add8 <netif_add+0x18c>)
 800ac82:	f00c fd07 	bl	8017694 <iprintf>
 800ac86:	2300      	movs	r3, #0
 800ac88:	e09d      	b.n	800adc6 <netif_add+0x17a>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800ac8a:	68bb      	ldr	r3, [r7, #8]
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d101      	bne.n	800ac94 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800ac90:	4b53      	ldr	r3, [pc, #332]	; (800ade0 <netif_add+0x194>)
 800ac92:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d101      	bne.n	800ac9e <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800ac9a:	4b51      	ldr	r3, [pc, #324]	; (800ade0 <netif_add+0x194>)
 800ac9c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800ac9e:	683b      	ldr	r3, [r7, #0]
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d101      	bne.n	800aca8 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800aca4:	4b4e      	ldr	r3, [pc, #312]	; (800ade0 <netif_add+0x194>)
 800aca6:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	2200      	movs	r2, #0
 800acac:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	2200      	movs	r2, #0
 800acb2:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	2200      	movs	r2, #0
 800acb8:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	4a49      	ldr	r2, [pc, #292]	; (800ade4 <netif_add+0x198>)
 800acbe:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	2200      	movs	r2, #0
 800acc4:	851a      	strh	r2, [r3, #40]	; 0x28
  netif->flags = 0;
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	2200      	movs	r2, #0
 800acca:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	3324      	adds	r3, #36	; 0x24
 800acd2:	2204      	movs	r2, #4
 800acd4:	2100      	movs	r1, #0
 800acd6:	4618      	mov	r0, r3
 800acd8:	f00c fc3f 	bl	801755a <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	2200      	movs	r2, #0
 800ace0:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	6a3a      	ldr	r2, [r7, #32]
 800ace6:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800ace8:	4b3f      	ldr	r3, [pc, #252]	; (800ade8 <netif_add+0x19c>)
 800acea:	781a      	ldrb	r2, [r3, #0]
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  netif->input = input;
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800acf6:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800acf8:	683b      	ldr	r3, [r7, #0]
 800acfa:	687a      	ldr	r2, [r7, #4]
 800acfc:	68b9      	ldr	r1, [r7, #8]
 800acfe:	68f8      	ldr	r0, [r7, #12]
 800ad00:	f000 f914 	bl	800af2c <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800ad04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad06:	68f8      	ldr	r0, [r7, #12]
 800ad08:	4798      	blx	r3
 800ad0a:	4603      	mov	r3, r0
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d001      	beq.n	800ad14 <netif_add+0xc8>
    return NULL;
 800ad10:	2300      	movs	r3, #0
 800ad12:	e058      	b.n	800adc6 <netif_add+0x17a>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ad1a:	2bff      	cmp	r3, #255	; 0xff
 800ad1c:	d103      	bne.n	800ad26 <netif_add+0xda>
        netif->num = 0;
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	2200      	movs	r2, #0
 800ad22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }
      num_netifs = 0;
 800ad26:	2300      	movs	r3, #0
 800ad28:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800ad2a:	4b30      	ldr	r3, [pc, #192]	; (800adec <netif_add+0x1a0>)
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	617b      	str	r3, [r7, #20]
 800ad30:	e02b      	b.n	800ad8a <netif_add+0x13e>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800ad32:	697a      	ldr	r2, [r7, #20]
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	429a      	cmp	r2, r3
 800ad38:	d106      	bne.n	800ad48 <netif_add+0xfc>
 800ad3a:	4b25      	ldr	r3, [pc, #148]	; (800add0 <netif_add+0x184>)
 800ad3c:	f240 128b 	movw	r2, #395	; 0x18b
 800ad40:	492b      	ldr	r1, [pc, #172]	; (800adf0 <netif_add+0x1a4>)
 800ad42:	4825      	ldr	r0, [pc, #148]	; (800add8 <netif_add+0x18c>)
 800ad44:	f00c fca6 	bl	8017694 <iprintf>
        num_netifs++;
 800ad48:	693b      	ldr	r3, [r7, #16]
 800ad4a:	3301      	adds	r3, #1
 800ad4c:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800ad4e:	693b      	ldr	r3, [r7, #16]
 800ad50:	2bff      	cmp	r3, #255	; 0xff
 800ad52:	dd06      	ble.n	800ad62 <netif_add+0x116>
 800ad54:	4b1e      	ldr	r3, [pc, #120]	; (800add0 <netif_add+0x184>)
 800ad56:	f240 128d 	movw	r2, #397	; 0x18d
 800ad5a:	4926      	ldr	r1, [pc, #152]	; (800adf4 <netif_add+0x1a8>)
 800ad5c:	481e      	ldr	r0, [pc, #120]	; (800add8 <netif_add+0x18c>)
 800ad5e:	f00c fc99 	bl	8017694 <iprintf>
        if (netif2->num == netif->num) {
 800ad62:	697b      	ldr	r3, [r7, #20]
 800ad64:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ad6e:	429a      	cmp	r2, r3
 800ad70:	d108      	bne.n	800ad84 <netif_add+0x138>
          netif->num++;
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ad78:	3301      	adds	r3, #1
 800ad7a:	b2da      	uxtb	r2, r3
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          break;
 800ad82:	e005      	b.n	800ad90 <netif_add+0x144>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800ad84:	697b      	ldr	r3, [r7, #20]
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	617b      	str	r3, [r7, #20]
 800ad8a:	697b      	ldr	r3, [r7, #20]
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d1d0      	bne.n	800ad32 <netif_add+0xe6>
        }
      }
    } while (netif2 != NULL);
 800ad90:	697b      	ldr	r3, [r7, #20]
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d1be      	bne.n	800ad14 <netif_add+0xc8>
  }
  if (netif->num == 254) {
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ad9c:	2bfe      	cmp	r3, #254	; 0xfe
 800ad9e:	d103      	bne.n	800ada8 <netif_add+0x15c>
    netif_num = 0;
 800ada0:	4b11      	ldr	r3, [pc, #68]	; (800ade8 <netif_add+0x19c>)
 800ada2:	2200      	movs	r2, #0
 800ada4:	701a      	strb	r2, [r3, #0]
 800ada6:	e006      	b.n	800adb6 <netif_add+0x16a>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800adae:	3301      	adds	r3, #1
 800adb0:	b2da      	uxtb	r2, r3
 800adb2:	4b0d      	ldr	r3, [pc, #52]	; (800ade8 <netif_add+0x19c>)
 800adb4:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800adb6:	4b0d      	ldr	r3, [pc, #52]	; (800adec <netif_add+0x1a0>)
 800adb8:	681a      	ldr	r2, [r3, #0]
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800adbe:	4a0b      	ldr	r2, [pc, #44]	; (800adec <netif_add+0x1a0>)
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800adc4:	68fb      	ldr	r3, [r7, #12]
}
 800adc6:	4618      	mov	r0, r3
 800adc8:	3718      	adds	r7, #24
 800adca:	46bd      	mov	sp, r7
 800adcc:	bd80      	pop	{r7, pc}
 800adce:	bf00      	nop
 800add0:	0801946c 	.word	0x0801946c
 800add4:	08019500 	.word	0x08019500
 800add8:	080194bc 	.word	0x080194bc
 800addc:	0801951c 	.word	0x0801951c
 800ade0:	0801bf98 	.word	0x0801bf98
 800ade4:	0800b20f 	.word	0x0800b20f
 800ade8:	20010934 	.word	0x20010934
 800adec:	2001092c 	.word	0x2001092c
 800adf0:	08019540 	.word	0x08019540
 800adf4:	08019554 	.word	0x08019554

0800adf8 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800adf8:	b580      	push	{r7, lr}
 800adfa:	b082      	sub	sp, #8
 800adfc:	af00      	add	r7, sp, #0
 800adfe:	6078      	str	r0, [r7, #4]
 800ae00:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800ae02:	6839      	ldr	r1, [r7, #0]
 800ae04:	6878      	ldr	r0, [r7, #4]
 800ae06:	f002 fe63 	bl	800dad0 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800ae0a:	6839      	ldr	r1, [r7, #0]
 800ae0c:	6878      	ldr	r0, [r7, #4]
 800ae0e:	f007 fedd 	bl	8012bcc <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800ae12:	bf00      	nop
 800ae14:	3708      	adds	r7, #8
 800ae16:	46bd      	mov	sp, r7
 800ae18:	bd80      	pop	{r7, pc}
	...

0800ae1c <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800ae1c:	b580      	push	{r7, lr}
 800ae1e:	b086      	sub	sp, #24
 800ae20:	af00      	add	r7, sp, #0
 800ae22:	60f8      	str	r0, [r7, #12]
 800ae24:	60b9      	str	r1, [r7, #8]
 800ae26:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800ae28:	68bb      	ldr	r3, [r7, #8]
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d106      	bne.n	800ae3c <netif_do_set_ipaddr+0x20>
 800ae2e:	4b1d      	ldr	r3, [pc, #116]	; (800aea4 <netif_do_set_ipaddr+0x88>)
 800ae30:	f240 12cb 	movw	r2, #459	; 0x1cb
 800ae34:	491c      	ldr	r1, [pc, #112]	; (800aea8 <netif_do_set_ipaddr+0x8c>)
 800ae36:	481d      	ldr	r0, [pc, #116]	; (800aeac <netif_do_set_ipaddr+0x90>)
 800ae38:	f00c fc2c 	bl	8017694 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d106      	bne.n	800ae50 <netif_do_set_ipaddr+0x34>
 800ae42:	4b18      	ldr	r3, [pc, #96]	; (800aea4 <netif_do_set_ipaddr+0x88>)
 800ae44:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800ae48:	4917      	ldr	r1, [pc, #92]	; (800aea8 <netif_do_set_ipaddr+0x8c>)
 800ae4a:	4818      	ldr	r0, [pc, #96]	; (800aeac <netif_do_set_ipaddr+0x90>)
 800ae4c:	f00c fc22 	bl	8017694 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800ae50:	68bb      	ldr	r3, [r7, #8]
 800ae52:	681a      	ldr	r2, [r3, #0]
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	3304      	adds	r3, #4
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	429a      	cmp	r2, r3
 800ae5c:	d01c      	beq.n	800ae98 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800ae5e:	68bb      	ldr	r3, [r7, #8]
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	3304      	adds	r3, #4
 800ae68:	681a      	ldr	r2, [r3, #0]
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800ae6e:	f107 0314 	add.w	r3, r7, #20
 800ae72:	4619      	mov	r1, r3
 800ae74:	6878      	ldr	r0, [r7, #4]
 800ae76:	f7ff ffbf 	bl	800adf8 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800ae7a:	68bb      	ldr	r3, [r7, #8]
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d002      	beq.n	800ae86 <netif_do_set_ipaddr+0x6a>
 800ae80:	68bb      	ldr	r3, [r7, #8]
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	e000      	b.n	800ae88 <netif_do_set_ipaddr+0x6c>
 800ae86:	2300      	movs	r3, #0
 800ae88:	68fa      	ldr	r2, [r7, #12]
 800ae8a:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800ae8c:	2101      	movs	r1, #1
 800ae8e:	68f8      	ldr	r0, [r7, #12]
 800ae90:	f000 f8d2 	bl	800b038 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800ae94:	2301      	movs	r3, #1
 800ae96:	e000      	b.n	800ae9a <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800ae98:	2300      	movs	r3, #0
}
 800ae9a:	4618      	mov	r0, r3
 800ae9c:	3718      	adds	r7, #24
 800ae9e:	46bd      	mov	sp, r7
 800aea0:	bd80      	pop	{r7, pc}
 800aea2:	bf00      	nop
 800aea4:	0801946c 	.word	0x0801946c
 800aea8:	08019584 	.word	0x08019584
 800aeac:	080194bc 	.word	0x080194bc

0800aeb0 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800aeb0:	b480      	push	{r7}
 800aeb2:	b085      	sub	sp, #20
 800aeb4:	af00      	add	r7, sp, #0
 800aeb6:	60f8      	str	r0, [r7, #12]
 800aeb8:	60b9      	str	r1, [r7, #8]
 800aeba:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800aebc:	68bb      	ldr	r3, [r7, #8]
 800aebe:	681a      	ldr	r2, [r3, #0]
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	3308      	adds	r3, #8
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	429a      	cmp	r2, r3
 800aec8:	d00a      	beq.n	800aee0 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800aeca:	68bb      	ldr	r3, [r7, #8]
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d002      	beq.n	800aed6 <netif_do_set_netmask+0x26>
 800aed0:	68bb      	ldr	r3, [r7, #8]
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	e000      	b.n	800aed8 <netif_do_set_netmask+0x28>
 800aed6:	2300      	movs	r3, #0
 800aed8:	68fa      	ldr	r2, [r7, #12]
 800aeda:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800aedc:	2301      	movs	r3, #1
 800aede:	e000      	b.n	800aee2 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800aee0:	2300      	movs	r3, #0
}
 800aee2:	4618      	mov	r0, r3
 800aee4:	3714      	adds	r7, #20
 800aee6:	46bd      	mov	sp, r7
 800aee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeec:	4770      	bx	lr

0800aeee <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800aeee:	b480      	push	{r7}
 800aef0:	b085      	sub	sp, #20
 800aef2:	af00      	add	r7, sp, #0
 800aef4:	60f8      	str	r0, [r7, #12]
 800aef6:	60b9      	str	r1, [r7, #8]
 800aef8:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800aefa:	68bb      	ldr	r3, [r7, #8]
 800aefc:	681a      	ldr	r2, [r3, #0]
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	330c      	adds	r3, #12
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	429a      	cmp	r2, r3
 800af06:	d00a      	beq.n	800af1e <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800af08:	68bb      	ldr	r3, [r7, #8]
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d002      	beq.n	800af14 <netif_do_set_gw+0x26>
 800af0e:	68bb      	ldr	r3, [r7, #8]
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	e000      	b.n	800af16 <netif_do_set_gw+0x28>
 800af14:	2300      	movs	r3, #0
 800af16:	68fa      	ldr	r2, [r7, #12]
 800af18:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800af1a:	2301      	movs	r3, #1
 800af1c:	e000      	b.n	800af20 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800af1e:	2300      	movs	r3, #0
}
 800af20:	4618      	mov	r0, r3
 800af22:	3714      	adds	r7, #20
 800af24:	46bd      	mov	sp, r7
 800af26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af2a:	4770      	bx	lr

0800af2c <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800af2c:	b580      	push	{r7, lr}
 800af2e:	b088      	sub	sp, #32
 800af30:	af00      	add	r7, sp, #0
 800af32:	60f8      	str	r0, [r7, #12]
 800af34:	60b9      	str	r1, [r7, #8]
 800af36:	607a      	str	r2, [r7, #4]
 800af38:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800af3a:	2300      	movs	r3, #0
 800af3c:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800af3e:	2300      	movs	r3, #0
 800af40:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800af42:	68bb      	ldr	r3, [r7, #8]
 800af44:	2b00      	cmp	r3, #0
 800af46:	d101      	bne.n	800af4c <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800af48:	4b1c      	ldr	r3, [pc, #112]	; (800afbc <netif_set_addr+0x90>)
 800af4a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d101      	bne.n	800af56 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800af52:	4b1a      	ldr	r3, [pc, #104]	; (800afbc <netif_set_addr+0x90>)
 800af54:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800af56:	683b      	ldr	r3, [r7, #0]
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d101      	bne.n	800af60 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800af5c:	4b17      	ldr	r3, [pc, #92]	; (800afbc <netif_set_addr+0x90>)
 800af5e:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800af60:	68bb      	ldr	r3, [r7, #8]
 800af62:	2b00      	cmp	r3, #0
 800af64:	d003      	beq.n	800af6e <netif_set_addr+0x42>
 800af66:	68bb      	ldr	r3, [r7, #8]
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d101      	bne.n	800af72 <netif_set_addr+0x46>
 800af6e:	2301      	movs	r3, #1
 800af70:	e000      	b.n	800af74 <netif_set_addr+0x48>
 800af72:	2300      	movs	r3, #0
 800af74:	617b      	str	r3, [r7, #20]
  if (remove) {
 800af76:	697b      	ldr	r3, [r7, #20]
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d006      	beq.n	800af8a <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800af7c:	f107 0310 	add.w	r3, r7, #16
 800af80:	461a      	mov	r2, r3
 800af82:	68b9      	ldr	r1, [r7, #8]
 800af84:	68f8      	ldr	r0, [r7, #12]
 800af86:	f7ff ff49 	bl	800ae1c <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800af8a:	69fa      	ldr	r2, [r7, #28]
 800af8c:	6879      	ldr	r1, [r7, #4]
 800af8e:	68f8      	ldr	r0, [r7, #12]
 800af90:	f7ff ff8e 	bl	800aeb0 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800af94:	69ba      	ldr	r2, [r7, #24]
 800af96:	6839      	ldr	r1, [r7, #0]
 800af98:	68f8      	ldr	r0, [r7, #12]
 800af9a:	f7ff ffa8 	bl	800aeee <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800af9e:	697b      	ldr	r3, [r7, #20]
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d106      	bne.n	800afb2 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800afa4:	f107 0310 	add.w	r3, r7, #16
 800afa8:	461a      	mov	r2, r3
 800afaa:	68b9      	ldr	r1, [r7, #8]
 800afac:	68f8      	ldr	r0, [r7, #12]
 800afae:	f7ff ff35 	bl	800ae1c <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800afb2:	bf00      	nop
 800afb4:	3720      	adds	r7, #32
 800afb6:	46bd      	mov	sp, r7
 800afb8:	bd80      	pop	{r7, pc}
 800afba:	bf00      	nop
 800afbc:	0801bf98 	.word	0x0801bf98

0800afc0 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800afc0:	b480      	push	{r7}
 800afc2:	b083      	sub	sp, #12
 800afc4:	af00      	add	r7, sp, #0
 800afc6:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800afc8:	4a04      	ldr	r2, [pc, #16]	; (800afdc <netif_set_default+0x1c>)
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800afce:	bf00      	nop
 800afd0:	370c      	adds	r7, #12
 800afd2:	46bd      	mov	sp, r7
 800afd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afd8:	4770      	bx	lr
 800afda:	bf00      	nop
 800afdc:	20010930 	.word	0x20010930

0800afe0 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800afe0:	b580      	push	{r7, lr}
 800afe2:	b082      	sub	sp, #8
 800afe4:	af00      	add	r7, sp, #0
 800afe6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	2b00      	cmp	r3, #0
 800afec:	d107      	bne.n	800affe <netif_set_up+0x1e>
 800afee:	4b0f      	ldr	r3, [pc, #60]	; (800b02c <netif_set_up+0x4c>)
 800aff0:	f44f 7254 	mov.w	r2, #848	; 0x350
 800aff4:	490e      	ldr	r1, [pc, #56]	; (800b030 <netif_set_up+0x50>)
 800aff6:	480f      	ldr	r0, [pc, #60]	; (800b034 <netif_set_up+0x54>)
 800aff8:	f00c fb4c 	bl	8017694 <iprintf>
 800affc:	e013      	b.n	800b026 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800b004:	f003 0301 	and.w	r3, r3, #1
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d10c      	bne.n	800b026 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800b012:	f043 0301 	orr.w	r3, r3, #1
 800b016:	b2da      	uxtb	r2, r3
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800b01e:	2103      	movs	r1, #3
 800b020:	6878      	ldr	r0, [r7, #4]
 800b022:	f000 f809 	bl	800b038 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800b026:	3708      	adds	r7, #8
 800b028:	46bd      	mov	sp, r7
 800b02a:	bd80      	pop	{r7, pc}
 800b02c:	0801946c 	.word	0x0801946c
 800b030:	080195f4 	.word	0x080195f4
 800b034:	080194bc 	.word	0x080194bc

0800b038 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800b038:	b580      	push	{r7, lr}
 800b03a:	b082      	sub	sp, #8
 800b03c:	af00      	add	r7, sp, #0
 800b03e:	6078      	str	r0, [r7, #4]
 800b040:	460b      	mov	r3, r1
 800b042:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	2b00      	cmp	r3, #0
 800b048:	d106      	bne.n	800b058 <netif_issue_reports+0x20>
 800b04a:	4b18      	ldr	r3, [pc, #96]	; (800b0ac <netif_issue_reports+0x74>)
 800b04c:	f240 326d 	movw	r2, #877	; 0x36d
 800b050:	4917      	ldr	r1, [pc, #92]	; (800b0b0 <netif_issue_reports+0x78>)
 800b052:	4818      	ldr	r0, [pc, #96]	; (800b0b4 <netif_issue_reports+0x7c>)
 800b054:	f00c fb1e 	bl	8017694 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800b05e:	f003 0304 	and.w	r3, r3, #4
 800b062:	2b00      	cmp	r3, #0
 800b064:	d01e      	beq.n	800b0a4 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800b06c:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800b070:	2b00      	cmp	r3, #0
 800b072:	d017      	beq.n	800b0a4 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800b074:	78fb      	ldrb	r3, [r7, #3]
 800b076:	f003 0301 	and.w	r3, r3, #1
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d013      	beq.n	800b0a6 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	3304      	adds	r3, #4
 800b082:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800b084:	2b00      	cmp	r3, #0
 800b086:	d00e      	beq.n	800b0a6 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800b08e:	f003 0308 	and.w	r3, r3, #8
 800b092:	2b00      	cmp	r3, #0
 800b094:	d007      	beq.n	800b0a6 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	3304      	adds	r3, #4
 800b09a:	4619      	mov	r1, r3
 800b09c:	6878      	ldr	r0, [r7, #4]
 800b09e:	f00a fb95 	bl	80157cc <etharp_request>
 800b0a2:	e000      	b.n	800b0a6 <netif_issue_reports+0x6e>
    return;
 800b0a4:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800b0a6:	3708      	adds	r7, #8
 800b0a8:	46bd      	mov	sp, r7
 800b0aa:	bd80      	pop	{r7, pc}
 800b0ac:	0801946c 	.word	0x0801946c
 800b0b0:	08019610 	.word	0x08019610
 800b0b4:	080194bc 	.word	0x080194bc

0800b0b8 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800b0b8:	b580      	push	{r7, lr}
 800b0ba:	b082      	sub	sp, #8
 800b0bc:	af00      	add	r7, sp, #0
 800b0be:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d107      	bne.n	800b0d6 <netif_set_down+0x1e>
 800b0c6:	4b12      	ldr	r3, [pc, #72]	; (800b110 <netif_set_down+0x58>)
 800b0c8:	f240 329b 	movw	r2, #923	; 0x39b
 800b0cc:	4911      	ldr	r1, [pc, #68]	; (800b114 <netif_set_down+0x5c>)
 800b0ce:	4812      	ldr	r0, [pc, #72]	; (800b118 <netif_set_down+0x60>)
 800b0d0:	f00c fae0 	bl	8017694 <iprintf>
 800b0d4:	e019      	b.n	800b10a <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800b0dc:	f003 0301 	and.w	r3, r3, #1
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d012      	beq.n	800b10a <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800b0ea:	f023 0301 	bic.w	r3, r3, #1
 800b0ee:	b2da      	uxtb	r2, r3
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800b0fc:	f003 0308 	and.w	r3, r3, #8
 800b100:	2b00      	cmp	r3, #0
 800b102:	d002      	beq.n	800b10a <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800b104:	6878      	ldr	r0, [r7, #4]
 800b106:	f009 ff1b 	bl	8014f40 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800b10a:	3708      	adds	r7, #8
 800b10c:	46bd      	mov	sp, r7
 800b10e:	bd80      	pop	{r7, pc}
 800b110:	0801946c 	.word	0x0801946c
 800b114:	08019634 	.word	0x08019634
 800b118:	080194bc 	.word	0x080194bc

0800b11c <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800b11c:	b580      	push	{r7, lr}
 800b11e:	b082      	sub	sp, #8
 800b120:	af00      	add	r7, sp, #0
 800b122:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	2b00      	cmp	r3, #0
 800b128:	d107      	bne.n	800b13a <netif_set_link_up+0x1e>
 800b12a:	4b15      	ldr	r3, [pc, #84]	; (800b180 <netif_set_link_up+0x64>)
 800b12c:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800b130:	4914      	ldr	r1, [pc, #80]	; (800b184 <netif_set_link_up+0x68>)
 800b132:	4815      	ldr	r0, [pc, #84]	; (800b188 <netif_set_link_up+0x6c>)
 800b134:	f00c faae 	bl	8017694 <iprintf>
 800b138:	e01e      	b.n	800b178 <netif_set_link_up+0x5c>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800b140:	f003 0304 	and.w	r3, r3, #4
 800b144:	2b00      	cmp	r3, #0
 800b146:	d117      	bne.n	800b178 <netif_set_link_up+0x5c>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800b14e:	f043 0304 	orr.w	r3, r3, #4
 800b152:	b2da      	uxtb	r2, r3
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

#if LWIP_DHCP
    dhcp_network_changed(netif);
 800b15a:	6878      	ldr	r0, [r7, #4]
 800b15c:	f008 f960 	bl	8013420 <dhcp_network_changed>

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800b160:	2103      	movs	r1, #3
 800b162:	6878      	ldr	r0, [r7, #4]
 800b164:	f7ff ff68 	bl	800b038 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	69db      	ldr	r3, [r3, #28]
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d003      	beq.n	800b178 <netif_set_link_up+0x5c>
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	69db      	ldr	r3, [r3, #28]
 800b174:	6878      	ldr	r0, [r7, #4]
 800b176:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800b178:	3708      	adds	r7, #8
 800b17a:	46bd      	mov	sp, r7
 800b17c:	bd80      	pop	{r7, pc}
 800b17e:	bf00      	nop
 800b180:	0801946c 	.word	0x0801946c
 800b184:	08019654 	.word	0x08019654
 800b188:	080194bc 	.word	0x080194bc

0800b18c <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800b18c:	b580      	push	{r7, lr}
 800b18e:	b082      	sub	sp, #8
 800b190:	af00      	add	r7, sp, #0
 800b192:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	2b00      	cmp	r3, #0
 800b198:	d107      	bne.n	800b1aa <netif_set_link_down+0x1e>
 800b19a:	4b11      	ldr	r3, [pc, #68]	; (800b1e0 <netif_set_link_down+0x54>)
 800b19c:	f240 4206 	movw	r2, #1030	; 0x406
 800b1a0:	4910      	ldr	r1, [pc, #64]	; (800b1e4 <netif_set_link_down+0x58>)
 800b1a2:	4811      	ldr	r0, [pc, #68]	; (800b1e8 <netif_set_link_down+0x5c>)
 800b1a4:	f00c fa76 	bl	8017694 <iprintf>
 800b1a8:	e017      	b.n	800b1da <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800b1b0:	f003 0304 	and.w	r3, r3, #4
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d010      	beq.n	800b1da <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800b1be:	f023 0304 	bic.w	r3, r3, #4
 800b1c2:	b2da      	uxtb	r2, r3
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    NETIF_LINK_CALLBACK(netif);
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	69db      	ldr	r3, [r3, #28]
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d003      	beq.n	800b1da <netif_set_link_down+0x4e>
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	69db      	ldr	r3, [r3, #28]
 800b1d6:	6878      	ldr	r0, [r7, #4]
 800b1d8:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800b1da:	3708      	adds	r7, #8
 800b1dc:	46bd      	mov	sp, r7
 800b1de:	bd80      	pop	{r7, pc}
 800b1e0:	0801946c 	.word	0x0801946c
 800b1e4:	08019678 	.word	0x08019678
 800b1e8:	080194bc 	.word	0x080194bc

0800b1ec <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800b1ec:	b480      	push	{r7}
 800b1ee:	b083      	sub	sp, #12
 800b1f0:	af00      	add	r7, sp, #0
 800b1f2:	6078      	str	r0, [r7, #4]
 800b1f4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d002      	beq.n	800b202 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	683a      	ldr	r2, [r7, #0]
 800b200:	61da      	str	r2, [r3, #28]
  }
}
 800b202:	bf00      	nop
 800b204:	370c      	adds	r7, #12
 800b206:	46bd      	mov	sp, r7
 800b208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b20c:	4770      	bx	lr

0800b20e <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800b20e:	b480      	push	{r7}
 800b210:	b085      	sub	sp, #20
 800b212:	af00      	add	r7, sp, #0
 800b214:	60f8      	str	r0, [r7, #12]
 800b216:	60b9      	str	r1, [r7, #8]
 800b218:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800b21a:	f06f 030b 	mvn.w	r3, #11
}
 800b21e:	4618      	mov	r0, r3
 800b220:	3714      	adds	r7, #20
 800b222:	46bd      	mov	sp, r7
 800b224:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b228:	4770      	bx	lr
	...

0800b22c <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800b22c:	b480      	push	{r7}
 800b22e:	b085      	sub	sp, #20
 800b230:	af00      	add	r7, sp, #0
 800b232:	4603      	mov	r3, r0
 800b234:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800b236:	79fb      	ldrb	r3, [r7, #7]
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d013      	beq.n	800b264 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800b23c:	4b0d      	ldr	r3, [pc, #52]	; (800b274 <netif_get_by_index+0x48>)
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	60fb      	str	r3, [r7, #12]
 800b242:	e00c      	b.n	800b25e <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b24a:	3301      	adds	r3, #1
 800b24c:	b2db      	uxtb	r3, r3
 800b24e:	79fa      	ldrb	r2, [r7, #7]
 800b250:	429a      	cmp	r2, r3
 800b252:	d101      	bne.n	800b258 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	e006      	b.n	800b266 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	60fb      	str	r3, [r7, #12]
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	2b00      	cmp	r3, #0
 800b262:	d1ef      	bne.n	800b244 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800b264:	2300      	movs	r3, #0
}
 800b266:	4618      	mov	r0, r3
 800b268:	3714      	adds	r7, #20
 800b26a:	46bd      	mov	sp, r7
 800b26c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b270:	4770      	bx	lr
 800b272:	bf00      	nop
 800b274:	2001092c 	.word	0x2001092c

0800b278 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800b278:	b580      	push	{r7, lr}
 800b27a:	b082      	sub	sp, #8
 800b27c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800b27e:	f00c f813 	bl	80172a8 <sys_arch_protect>
 800b282:	6038      	str	r0, [r7, #0]
 800b284:	4b0d      	ldr	r3, [pc, #52]	; (800b2bc <pbuf_free_ooseq+0x44>)
 800b286:	2200      	movs	r2, #0
 800b288:	701a      	strb	r2, [r3, #0]
 800b28a:	6838      	ldr	r0, [r7, #0]
 800b28c:	f00c f81a 	bl	80172c4 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800b290:	4b0b      	ldr	r3, [pc, #44]	; (800b2c0 <pbuf_free_ooseq+0x48>)
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	607b      	str	r3, [r7, #4]
 800b296:	e00a      	b.n	800b2ae <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d003      	beq.n	800b2a8 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800b2a0:	6878      	ldr	r0, [r7, #4]
 800b2a2:	f002 fc53 	bl	800db4c <tcp_free_ooseq>
      return;
 800b2a6:	e005      	b.n	800b2b4 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	68db      	ldr	r3, [r3, #12]
 800b2ac:	607b      	str	r3, [r7, #4]
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d1f1      	bne.n	800b298 <pbuf_free_ooseq+0x20>
    }
  }
}
 800b2b4:	3708      	adds	r7, #8
 800b2b6:	46bd      	mov	sp, r7
 800b2b8:	bd80      	pop	{r7, pc}
 800b2ba:	bf00      	nop
 800b2bc:	20010935 	.word	0x20010935
 800b2c0:	20010944 	.word	0x20010944

0800b2c4 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800b2c4:	b580      	push	{r7, lr}
 800b2c6:	b082      	sub	sp, #8
 800b2c8:	af00      	add	r7, sp, #0
 800b2ca:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800b2cc:	f7ff ffd4 	bl	800b278 <pbuf_free_ooseq>
}
 800b2d0:	bf00      	nop
 800b2d2:	3708      	adds	r7, #8
 800b2d4:	46bd      	mov	sp, r7
 800b2d6:	bd80      	pop	{r7, pc}

0800b2d8 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800b2d8:	b580      	push	{r7, lr}
 800b2da:	b082      	sub	sp, #8
 800b2dc:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800b2de:	f00b ffe3 	bl	80172a8 <sys_arch_protect>
 800b2e2:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800b2e4:	4b0f      	ldr	r3, [pc, #60]	; (800b324 <pbuf_pool_is_empty+0x4c>)
 800b2e6:	781b      	ldrb	r3, [r3, #0]
 800b2e8:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800b2ea:	4b0e      	ldr	r3, [pc, #56]	; (800b324 <pbuf_pool_is_empty+0x4c>)
 800b2ec:	2201      	movs	r2, #1
 800b2ee:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800b2f0:	6878      	ldr	r0, [r7, #4]
 800b2f2:	f00b ffe7 	bl	80172c4 <sys_arch_unprotect>

  if (!queued) {
 800b2f6:	78fb      	ldrb	r3, [r7, #3]
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d10f      	bne.n	800b31c <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800b2fc:	2100      	movs	r1, #0
 800b2fe:	480a      	ldr	r0, [pc, #40]	; (800b328 <pbuf_pool_is_empty+0x50>)
 800b300:	f7fe fe84 	bl	800a00c <tcpip_try_callback>
 800b304:	4603      	mov	r3, r0
 800b306:	2b00      	cmp	r3, #0
 800b308:	d008      	beq.n	800b31c <pbuf_pool_is_empty+0x44>
 800b30a:	f00b ffcd 	bl	80172a8 <sys_arch_protect>
 800b30e:	6078      	str	r0, [r7, #4]
 800b310:	4b04      	ldr	r3, [pc, #16]	; (800b324 <pbuf_pool_is_empty+0x4c>)
 800b312:	2200      	movs	r2, #0
 800b314:	701a      	strb	r2, [r3, #0]
 800b316:	6878      	ldr	r0, [r7, #4]
 800b318:	f00b ffd4 	bl	80172c4 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800b31c:	bf00      	nop
 800b31e:	3708      	adds	r7, #8
 800b320:	46bd      	mov	sp, r7
 800b322:	bd80      	pop	{r7, pc}
 800b324:	20010935 	.word	0x20010935
 800b328:	0800b2c5 	.word	0x0800b2c5

0800b32c <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800b32c:	b480      	push	{r7}
 800b32e:	b085      	sub	sp, #20
 800b330:	af00      	add	r7, sp, #0
 800b332:	60f8      	str	r0, [r7, #12]
 800b334:	60b9      	str	r1, [r7, #8]
 800b336:	4611      	mov	r1, r2
 800b338:	461a      	mov	r2, r3
 800b33a:	460b      	mov	r3, r1
 800b33c:	80fb      	strh	r3, [r7, #6]
 800b33e:	4613      	mov	r3, r2
 800b340:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	2200      	movs	r2, #0
 800b346:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	68ba      	ldr	r2, [r7, #8]
 800b34c:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800b34e:	68fb      	ldr	r3, [r7, #12]
 800b350:	88fa      	ldrh	r2, [r7, #6]
 800b352:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	88ba      	ldrh	r2, [r7, #4]
 800b358:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800b35a:	8b3b      	ldrh	r3, [r7, #24]
 800b35c:	b2da      	uxtb	r2, r3
 800b35e:	68fb      	ldr	r3, [r7, #12]
 800b360:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	7f3a      	ldrb	r2, [r7, #28]
 800b366:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	2201      	movs	r2, #1
 800b36c:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	2200      	movs	r2, #0
 800b372:	73da      	strb	r2, [r3, #15]
}
 800b374:	bf00      	nop
 800b376:	3714      	adds	r7, #20
 800b378:	46bd      	mov	sp, r7
 800b37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b37e:	4770      	bx	lr

0800b380 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800b380:	b580      	push	{r7, lr}
 800b382:	b08c      	sub	sp, #48	; 0x30
 800b384:	af02      	add	r7, sp, #8
 800b386:	4603      	mov	r3, r0
 800b388:	71fb      	strb	r3, [r7, #7]
 800b38a:	460b      	mov	r3, r1
 800b38c:	80bb      	strh	r3, [r7, #4]
 800b38e:	4613      	mov	r3, r2
 800b390:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800b392:	79fb      	ldrb	r3, [r7, #7]
 800b394:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800b396:	887b      	ldrh	r3, [r7, #2]
 800b398:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800b39c:	d07f      	beq.n	800b49e <pbuf_alloc+0x11e>
 800b39e:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800b3a2:	f300 80c8 	bgt.w	800b536 <pbuf_alloc+0x1b6>
 800b3a6:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800b3aa:	d010      	beq.n	800b3ce <pbuf_alloc+0x4e>
 800b3ac:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800b3b0:	f300 80c1 	bgt.w	800b536 <pbuf_alloc+0x1b6>
 800b3b4:	2b01      	cmp	r3, #1
 800b3b6:	d002      	beq.n	800b3be <pbuf_alloc+0x3e>
 800b3b8:	2b41      	cmp	r3, #65	; 0x41
 800b3ba:	f040 80bc 	bne.w	800b536 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800b3be:	887a      	ldrh	r2, [r7, #2]
 800b3c0:	88bb      	ldrh	r3, [r7, #4]
 800b3c2:	4619      	mov	r1, r3
 800b3c4:	2000      	movs	r0, #0
 800b3c6:	f000 f8d1 	bl	800b56c <pbuf_alloc_reference>
 800b3ca:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800b3cc:	e0bd      	b.n	800b54a <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800b3ce:	2300      	movs	r3, #0
 800b3d0:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800b3d2:	2300      	movs	r3, #0
 800b3d4:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800b3d6:	88bb      	ldrh	r3, [r7, #4]
 800b3d8:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800b3da:	200c      	movs	r0, #12
 800b3dc:	f7ff fb8e 	bl	800aafc <memp_malloc>
 800b3e0:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800b3e2:	693b      	ldr	r3, [r7, #16]
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	d109      	bne.n	800b3fc <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800b3e8:	f7ff ff76 	bl	800b2d8 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800b3ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d002      	beq.n	800b3f8 <pbuf_alloc+0x78>
            pbuf_free(p);
 800b3f2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b3f4:	f000 faa8 	bl	800b948 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800b3f8:	2300      	movs	r3, #0
 800b3fa:	e0a7      	b.n	800b54c <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800b3fc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b3fe:	3303      	adds	r3, #3
 800b400:	b29b      	uxth	r3, r3
 800b402:	f023 0303 	bic.w	r3, r3, #3
 800b406:	b29b      	uxth	r3, r3
 800b408:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800b40c:	b29b      	uxth	r3, r3
 800b40e:	8b7a      	ldrh	r2, [r7, #26]
 800b410:	4293      	cmp	r3, r2
 800b412:	bf28      	it	cs
 800b414:	4613      	movcs	r3, r2
 800b416:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800b418:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b41a:	3310      	adds	r3, #16
 800b41c:	693a      	ldr	r2, [r7, #16]
 800b41e:	4413      	add	r3, r2
 800b420:	3303      	adds	r3, #3
 800b422:	f023 0303 	bic.w	r3, r3, #3
 800b426:	4618      	mov	r0, r3
 800b428:	89f9      	ldrh	r1, [r7, #14]
 800b42a:	8b7a      	ldrh	r2, [r7, #26]
 800b42c:	2300      	movs	r3, #0
 800b42e:	9301      	str	r3, [sp, #4]
 800b430:	887b      	ldrh	r3, [r7, #2]
 800b432:	9300      	str	r3, [sp, #0]
 800b434:	460b      	mov	r3, r1
 800b436:	4601      	mov	r1, r0
 800b438:	6938      	ldr	r0, [r7, #16]
 800b43a:	f7ff ff77 	bl	800b32c <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800b43e:	693b      	ldr	r3, [r7, #16]
 800b440:	685b      	ldr	r3, [r3, #4]
 800b442:	f003 0303 	and.w	r3, r3, #3
 800b446:	2b00      	cmp	r3, #0
 800b448:	d006      	beq.n	800b458 <pbuf_alloc+0xd8>
 800b44a:	4b42      	ldr	r3, [pc, #264]	; (800b554 <pbuf_alloc+0x1d4>)
 800b44c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b450:	4941      	ldr	r1, [pc, #260]	; (800b558 <pbuf_alloc+0x1d8>)
 800b452:	4842      	ldr	r0, [pc, #264]	; (800b55c <pbuf_alloc+0x1dc>)
 800b454:	f00c f91e 	bl	8017694 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800b458:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b45a:	3303      	adds	r3, #3
 800b45c:	f023 0303 	bic.w	r3, r3, #3
 800b460:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800b464:	d106      	bne.n	800b474 <pbuf_alloc+0xf4>
 800b466:	4b3b      	ldr	r3, [pc, #236]	; (800b554 <pbuf_alloc+0x1d4>)
 800b468:	f44f 7281 	mov.w	r2, #258	; 0x102
 800b46c:	493c      	ldr	r1, [pc, #240]	; (800b560 <pbuf_alloc+0x1e0>)
 800b46e:	483b      	ldr	r0, [pc, #236]	; (800b55c <pbuf_alloc+0x1dc>)
 800b470:	f00c f910 	bl	8017694 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800b474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b476:	2b00      	cmp	r3, #0
 800b478:	d102      	bne.n	800b480 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800b47a:	693b      	ldr	r3, [r7, #16]
 800b47c:	627b      	str	r3, [r7, #36]	; 0x24
 800b47e:	e002      	b.n	800b486 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800b480:	69fb      	ldr	r3, [r7, #28]
 800b482:	693a      	ldr	r2, [r7, #16]
 800b484:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800b486:	693b      	ldr	r3, [r7, #16]
 800b488:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800b48a:	8b7a      	ldrh	r2, [r7, #26]
 800b48c:	89fb      	ldrh	r3, [r7, #14]
 800b48e:	1ad3      	subs	r3, r2, r3
 800b490:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800b492:	2300      	movs	r3, #0
 800b494:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800b496:	8b7b      	ldrh	r3, [r7, #26]
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d19e      	bne.n	800b3da <pbuf_alloc+0x5a>
      break;
 800b49c:	e055      	b.n	800b54a <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800b49e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b4a0:	3303      	adds	r3, #3
 800b4a2:	b29b      	uxth	r3, r3
 800b4a4:	f023 0303 	bic.w	r3, r3, #3
 800b4a8:	b29a      	uxth	r2, r3
 800b4aa:	88bb      	ldrh	r3, [r7, #4]
 800b4ac:	3303      	adds	r3, #3
 800b4ae:	b29b      	uxth	r3, r3
 800b4b0:	f023 0303 	bic.w	r3, r3, #3
 800b4b4:	b29b      	uxth	r3, r3
 800b4b6:	4413      	add	r3, r2
 800b4b8:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800b4ba:	8b3b      	ldrh	r3, [r7, #24]
 800b4bc:	3310      	adds	r3, #16
 800b4be:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800b4c0:	8b3a      	ldrh	r2, [r7, #24]
 800b4c2:	88bb      	ldrh	r3, [r7, #4]
 800b4c4:	3303      	adds	r3, #3
 800b4c6:	f023 0303 	bic.w	r3, r3, #3
 800b4ca:	429a      	cmp	r2, r3
 800b4cc:	d306      	bcc.n	800b4dc <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800b4ce:	8afa      	ldrh	r2, [r7, #22]
 800b4d0:	88bb      	ldrh	r3, [r7, #4]
 800b4d2:	3303      	adds	r3, #3
 800b4d4:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800b4d8:	429a      	cmp	r2, r3
 800b4da:	d201      	bcs.n	800b4e0 <pbuf_alloc+0x160>
        return NULL;
 800b4dc:	2300      	movs	r3, #0
 800b4de:	e035      	b.n	800b54c <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800b4e0:	8afb      	ldrh	r3, [r7, #22]
 800b4e2:	4618      	mov	r0, r3
 800b4e4:	f7ff f966 	bl	800a7b4 <mem_malloc>
 800b4e8:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800b4ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d101      	bne.n	800b4f4 <pbuf_alloc+0x174>
        return NULL;
 800b4f0:	2300      	movs	r3, #0
 800b4f2:	e02b      	b.n	800b54c <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800b4f4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b4f6:	3310      	adds	r3, #16
 800b4f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b4fa:	4413      	add	r3, r2
 800b4fc:	3303      	adds	r3, #3
 800b4fe:	f023 0303 	bic.w	r3, r3, #3
 800b502:	4618      	mov	r0, r3
 800b504:	88b9      	ldrh	r1, [r7, #4]
 800b506:	88ba      	ldrh	r2, [r7, #4]
 800b508:	2300      	movs	r3, #0
 800b50a:	9301      	str	r3, [sp, #4]
 800b50c:	887b      	ldrh	r3, [r7, #2]
 800b50e:	9300      	str	r3, [sp, #0]
 800b510:	460b      	mov	r3, r1
 800b512:	4601      	mov	r1, r0
 800b514:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b516:	f7ff ff09 	bl	800b32c <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800b51a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b51c:	685b      	ldr	r3, [r3, #4]
 800b51e:	f003 0303 	and.w	r3, r3, #3
 800b522:	2b00      	cmp	r3, #0
 800b524:	d010      	beq.n	800b548 <pbuf_alloc+0x1c8>
 800b526:	4b0b      	ldr	r3, [pc, #44]	; (800b554 <pbuf_alloc+0x1d4>)
 800b528:	f44f 7291 	mov.w	r2, #290	; 0x122
 800b52c:	490d      	ldr	r1, [pc, #52]	; (800b564 <pbuf_alloc+0x1e4>)
 800b52e:	480b      	ldr	r0, [pc, #44]	; (800b55c <pbuf_alloc+0x1dc>)
 800b530:	f00c f8b0 	bl	8017694 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800b534:	e008      	b.n	800b548 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800b536:	4b07      	ldr	r3, [pc, #28]	; (800b554 <pbuf_alloc+0x1d4>)
 800b538:	f240 1227 	movw	r2, #295	; 0x127
 800b53c:	490a      	ldr	r1, [pc, #40]	; (800b568 <pbuf_alloc+0x1e8>)
 800b53e:	4807      	ldr	r0, [pc, #28]	; (800b55c <pbuf_alloc+0x1dc>)
 800b540:	f00c f8a8 	bl	8017694 <iprintf>
      return NULL;
 800b544:	2300      	movs	r3, #0
 800b546:	e001      	b.n	800b54c <pbuf_alloc+0x1cc>
      break;
 800b548:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800b54a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b54c:	4618      	mov	r0, r3
 800b54e:	3728      	adds	r7, #40	; 0x28
 800b550:	46bd      	mov	sp, r7
 800b552:	bd80      	pop	{r7, pc}
 800b554:	0801969c 	.word	0x0801969c
 800b558:	080196cc 	.word	0x080196cc
 800b55c:	080196fc 	.word	0x080196fc
 800b560:	08019724 	.word	0x08019724
 800b564:	08019758 	.word	0x08019758
 800b568:	08019784 	.word	0x08019784

0800b56c <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800b56c:	b580      	push	{r7, lr}
 800b56e:	b086      	sub	sp, #24
 800b570:	af02      	add	r7, sp, #8
 800b572:	6078      	str	r0, [r7, #4]
 800b574:	460b      	mov	r3, r1
 800b576:	807b      	strh	r3, [r7, #2]
 800b578:	4613      	mov	r3, r2
 800b57a:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800b57c:	883b      	ldrh	r3, [r7, #0]
 800b57e:	2b41      	cmp	r3, #65	; 0x41
 800b580:	d009      	beq.n	800b596 <pbuf_alloc_reference+0x2a>
 800b582:	883b      	ldrh	r3, [r7, #0]
 800b584:	2b01      	cmp	r3, #1
 800b586:	d006      	beq.n	800b596 <pbuf_alloc_reference+0x2a>
 800b588:	4b0f      	ldr	r3, [pc, #60]	; (800b5c8 <pbuf_alloc_reference+0x5c>)
 800b58a:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800b58e:	490f      	ldr	r1, [pc, #60]	; (800b5cc <pbuf_alloc_reference+0x60>)
 800b590:	480f      	ldr	r0, [pc, #60]	; (800b5d0 <pbuf_alloc_reference+0x64>)
 800b592:	f00c f87f 	bl	8017694 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800b596:	200b      	movs	r0, #11
 800b598:	f7ff fab0 	bl	800aafc <memp_malloc>
 800b59c:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	d101      	bne.n	800b5a8 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800b5a4:	2300      	movs	r3, #0
 800b5a6:	e00b      	b.n	800b5c0 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800b5a8:	8879      	ldrh	r1, [r7, #2]
 800b5aa:	887a      	ldrh	r2, [r7, #2]
 800b5ac:	2300      	movs	r3, #0
 800b5ae:	9301      	str	r3, [sp, #4]
 800b5b0:	883b      	ldrh	r3, [r7, #0]
 800b5b2:	9300      	str	r3, [sp, #0]
 800b5b4:	460b      	mov	r3, r1
 800b5b6:	6879      	ldr	r1, [r7, #4]
 800b5b8:	68f8      	ldr	r0, [r7, #12]
 800b5ba:	f7ff feb7 	bl	800b32c <pbuf_init_alloced_pbuf>
  return p;
 800b5be:	68fb      	ldr	r3, [r7, #12]
}
 800b5c0:	4618      	mov	r0, r3
 800b5c2:	3710      	adds	r7, #16
 800b5c4:	46bd      	mov	sp, r7
 800b5c6:	bd80      	pop	{r7, pc}
 800b5c8:	0801969c 	.word	0x0801969c
 800b5cc:	080197a0 	.word	0x080197a0
 800b5d0:	080196fc 	.word	0x080196fc

0800b5d4 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800b5d4:	b580      	push	{r7, lr}
 800b5d6:	b088      	sub	sp, #32
 800b5d8:	af02      	add	r7, sp, #8
 800b5da:	607b      	str	r3, [r7, #4]
 800b5dc:	4603      	mov	r3, r0
 800b5de:	73fb      	strb	r3, [r7, #15]
 800b5e0:	460b      	mov	r3, r1
 800b5e2:	81bb      	strh	r3, [r7, #12]
 800b5e4:	4613      	mov	r3, r2
 800b5e6:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800b5e8:	7bfb      	ldrb	r3, [r7, #15]
 800b5ea:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800b5ec:	8a7b      	ldrh	r3, [r7, #18]
 800b5ee:	3303      	adds	r3, #3
 800b5f0:	f023 0203 	bic.w	r2, r3, #3
 800b5f4:	89bb      	ldrh	r3, [r7, #12]
 800b5f6:	441a      	add	r2, r3
 800b5f8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b5fa:	429a      	cmp	r2, r3
 800b5fc:	d901      	bls.n	800b602 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800b5fe:	2300      	movs	r3, #0
 800b600:	e018      	b.n	800b634 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800b602:	6a3b      	ldr	r3, [r7, #32]
 800b604:	2b00      	cmp	r3, #0
 800b606:	d007      	beq.n	800b618 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800b608:	8a7b      	ldrh	r3, [r7, #18]
 800b60a:	3303      	adds	r3, #3
 800b60c:	f023 0303 	bic.w	r3, r3, #3
 800b610:	6a3a      	ldr	r2, [r7, #32]
 800b612:	4413      	add	r3, r2
 800b614:	617b      	str	r3, [r7, #20]
 800b616:	e001      	b.n	800b61c <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800b618:	2300      	movs	r3, #0
 800b61a:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800b61c:	6878      	ldr	r0, [r7, #4]
 800b61e:	89b9      	ldrh	r1, [r7, #12]
 800b620:	89ba      	ldrh	r2, [r7, #12]
 800b622:	2302      	movs	r3, #2
 800b624:	9301      	str	r3, [sp, #4]
 800b626:	897b      	ldrh	r3, [r7, #10]
 800b628:	9300      	str	r3, [sp, #0]
 800b62a:	460b      	mov	r3, r1
 800b62c:	6979      	ldr	r1, [r7, #20]
 800b62e:	f7ff fe7d 	bl	800b32c <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800b632:	687b      	ldr	r3, [r7, #4]
}
 800b634:	4618      	mov	r0, r3
 800b636:	3718      	adds	r7, #24
 800b638:	46bd      	mov	sp, r7
 800b63a:	bd80      	pop	{r7, pc}

0800b63c <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800b63c:	b580      	push	{r7, lr}
 800b63e:	b084      	sub	sp, #16
 800b640:	af00      	add	r7, sp, #0
 800b642:	6078      	str	r0, [r7, #4]
 800b644:	460b      	mov	r3, r1
 800b646:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d106      	bne.n	800b65c <pbuf_realloc+0x20>
 800b64e:	4b3a      	ldr	r3, [pc, #232]	; (800b738 <pbuf_realloc+0xfc>)
 800b650:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800b654:	4939      	ldr	r1, [pc, #228]	; (800b73c <pbuf_realloc+0x100>)
 800b656:	483a      	ldr	r0, [pc, #232]	; (800b740 <pbuf_realloc+0x104>)
 800b658:	f00c f81c 	bl	8017694 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	891b      	ldrh	r3, [r3, #8]
 800b660:	887a      	ldrh	r2, [r7, #2]
 800b662:	429a      	cmp	r2, r3
 800b664:	d263      	bcs.n	800b72e <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	891a      	ldrh	r2, [r3, #8]
 800b66a:	887b      	ldrh	r3, [r7, #2]
 800b66c:	1ad3      	subs	r3, r2, r3
 800b66e:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800b670:	887b      	ldrh	r3, [r7, #2]
 800b672:	817b      	strh	r3, [r7, #10]
  q = p;
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800b678:	e018      	b.n	800b6ac <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	895b      	ldrh	r3, [r3, #10]
 800b67e:	897a      	ldrh	r2, [r7, #10]
 800b680:	1ad3      	subs	r3, r2, r3
 800b682:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	891a      	ldrh	r2, [r3, #8]
 800b688:	893b      	ldrh	r3, [r7, #8]
 800b68a:	1ad3      	subs	r3, r2, r3
 800b68c:	b29a      	uxth	r2, r3
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d106      	bne.n	800b6ac <pbuf_realloc+0x70>
 800b69e:	4b26      	ldr	r3, [pc, #152]	; (800b738 <pbuf_realloc+0xfc>)
 800b6a0:	f240 12af 	movw	r2, #431	; 0x1af
 800b6a4:	4927      	ldr	r1, [pc, #156]	; (800b744 <pbuf_realloc+0x108>)
 800b6a6:	4826      	ldr	r0, [pc, #152]	; (800b740 <pbuf_realloc+0x104>)
 800b6a8:	f00b fff4 	bl	8017694 <iprintf>
  while (rem_len > q->len) {
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	895b      	ldrh	r3, [r3, #10]
 800b6b0:	897a      	ldrh	r2, [r7, #10]
 800b6b2:	429a      	cmp	r2, r3
 800b6b4:	d8e1      	bhi.n	800b67a <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	7b1b      	ldrb	r3, [r3, #12]
 800b6ba:	f003 030f 	and.w	r3, r3, #15
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d121      	bne.n	800b706 <pbuf_realloc+0xca>
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	895b      	ldrh	r3, [r3, #10]
 800b6c6:	897a      	ldrh	r2, [r7, #10]
 800b6c8:	429a      	cmp	r2, r3
 800b6ca:	d01c      	beq.n	800b706 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	7b5b      	ldrb	r3, [r3, #13]
 800b6d0:	f003 0302 	and.w	r3, r3, #2
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d116      	bne.n	800b706 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800b6d8:	68fb      	ldr	r3, [r7, #12]
 800b6da:	685a      	ldr	r2, [r3, #4]
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	1ad3      	subs	r3, r2, r3
 800b6e0:	b29a      	uxth	r2, r3
 800b6e2:	897b      	ldrh	r3, [r7, #10]
 800b6e4:	4413      	add	r3, r2
 800b6e6:	b29b      	uxth	r3, r3
 800b6e8:	4619      	mov	r1, r3
 800b6ea:	68f8      	ldr	r0, [r7, #12]
 800b6ec:	f7fe ff58 	bl	800a5a0 <mem_trim>
 800b6f0:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800b6f2:	68fb      	ldr	r3, [r7, #12]
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	d106      	bne.n	800b706 <pbuf_realloc+0xca>
 800b6f8:	4b0f      	ldr	r3, [pc, #60]	; (800b738 <pbuf_realloc+0xfc>)
 800b6fa:	f240 12bd 	movw	r2, #445	; 0x1bd
 800b6fe:	4912      	ldr	r1, [pc, #72]	; (800b748 <pbuf_realloc+0x10c>)
 800b700:	480f      	ldr	r0, [pc, #60]	; (800b740 <pbuf_realloc+0x104>)
 800b702:	f00b ffc7 	bl	8017694 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800b706:	68fb      	ldr	r3, [r7, #12]
 800b708:	897a      	ldrh	r2, [r7, #10]
 800b70a:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	895a      	ldrh	r2, [r3, #10]
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d004      	beq.n	800b726 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	4618      	mov	r0, r3
 800b722:	f000 f911 	bl	800b948 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800b726:	68fb      	ldr	r3, [r7, #12]
 800b728:	2200      	movs	r2, #0
 800b72a:	601a      	str	r2, [r3, #0]
 800b72c:	e000      	b.n	800b730 <pbuf_realloc+0xf4>
    return;
 800b72e:	bf00      	nop

}
 800b730:	3710      	adds	r7, #16
 800b732:	46bd      	mov	sp, r7
 800b734:	bd80      	pop	{r7, pc}
 800b736:	bf00      	nop
 800b738:	0801969c 	.word	0x0801969c
 800b73c:	080197b4 	.word	0x080197b4
 800b740:	080196fc 	.word	0x080196fc
 800b744:	080197cc 	.word	0x080197cc
 800b748:	080197e4 	.word	0x080197e4

0800b74c <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800b74c:	b580      	push	{r7, lr}
 800b74e:	b086      	sub	sp, #24
 800b750:	af00      	add	r7, sp, #0
 800b752:	60f8      	str	r0, [r7, #12]
 800b754:	60b9      	str	r1, [r7, #8]
 800b756:	4613      	mov	r3, r2
 800b758:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d106      	bne.n	800b76e <pbuf_add_header_impl+0x22>
 800b760:	4b2b      	ldr	r3, [pc, #172]	; (800b810 <pbuf_add_header_impl+0xc4>)
 800b762:	f240 12df 	movw	r2, #479	; 0x1df
 800b766:	492b      	ldr	r1, [pc, #172]	; (800b814 <pbuf_add_header_impl+0xc8>)
 800b768:	482b      	ldr	r0, [pc, #172]	; (800b818 <pbuf_add_header_impl+0xcc>)
 800b76a:	f00b ff93 	bl	8017694 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800b76e:	68fb      	ldr	r3, [r7, #12]
 800b770:	2b00      	cmp	r3, #0
 800b772:	d003      	beq.n	800b77c <pbuf_add_header_impl+0x30>
 800b774:	68bb      	ldr	r3, [r7, #8]
 800b776:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b77a:	d301      	bcc.n	800b780 <pbuf_add_header_impl+0x34>
    return 1;
 800b77c:	2301      	movs	r3, #1
 800b77e:	e043      	b.n	800b808 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800b780:	68bb      	ldr	r3, [r7, #8]
 800b782:	2b00      	cmp	r3, #0
 800b784:	d101      	bne.n	800b78a <pbuf_add_header_impl+0x3e>
    return 0;
 800b786:	2300      	movs	r3, #0
 800b788:	e03e      	b.n	800b808 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800b78a:	68bb      	ldr	r3, [r7, #8]
 800b78c:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	891a      	ldrh	r2, [r3, #8]
 800b792:	8a7b      	ldrh	r3, [r7, #18]
 800b794:	4413      	add	r3, r2
 800b796:	b29b      	uxth	r3, r3
 800b798:	8a7a      	ldrh	r2, [r7, #18]
 800b79a:	429a      	cmp	r2, r3
 800b79c:	d901      	bls.n	800b7a2 <pbuf_add_header_impl+0x56>
    return 1;
 800b79e:	2301      	movs	r3, #1
 800b7a0:	e032      	b.n	800b808 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	7b1b      	ldrb	r3, [r3, #12]
 800b7a6:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800b7a8:	8a3b      	ldrh	r3, [r7, #16]
 800b7aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d00c      	beq.n	800b7cc <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	685a      	ldr	r2, [r3, #4]
 800b7b6:	68bb      	ldr	r3, [r7, #8]
 800b7b8:	425b      	negs	r3, r3
 800b7ba:	4413      	add	r3, r2
 800b7bc:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	3310      	adds	r3, #16
 800b7c2:	697a      	ldr	r2, [r7, #20]
 800b7c4:	429a      	cmp	r2, r3
 800b7c6:	d20d      	bcs.n	800b7e4 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800b7c8:	2301      	movs	r3, #1
 800b7ca:	e01d      	b.n	800b808 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800b7cc:	79fb      	ldrb	r3, [r7, #7]
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d006      	beq.n	800b7e0 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	685a      	ldr	r2, [r3, #4]
 800b7d6:	68bb      	ldr	r3, [r7, #8]
 800b7d8:	425b      	negs	r3, r3
 800b7da:	4413      	add	r3, r2
 800b7dc:	617b      	str	r3, [r7, #20]
 800b7de:	e001      	b.n	800b7e4 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800b7e0:	2301      	movs	r3, #1
 800b7e2:	e011      	b.n	800b808 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	697a      	ldr	r2, [r7, #20]
 800b7e8:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800b7ea:	68fb      	ldr	r3, [r7, #12]
 800b7ec:	895a      	ldrh	r2, [r3, #10]
 800b7ee:	8a7b      	ldrh	r3, [r7, #18]
 800b7f0:	4413      	add	r3, r2
 800b7f2:	b29a      	uxth	r2, r3
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	891a      	ldrh	r2, [r3, #8]
 800b7fc:	8a7b      	ldrh	r3, [r7, #18]
 800b7fe:	4413      	add	r3, r2
 800b800:	b29a      	uxth	r2, r3
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	811a      	strh	r2, [r3, #8]


  return 0;
 800b806:	2300      	movs	r3, #0
}
 800b808:	4618      	mov	r0, r3
 800b80a:	3718      	adds	r7, #24
 800b80c:	46bd      	mov	sp, r7
 800b80e:	bd80      	pop	{r7, pc}
 800b810:	0801969c 	.word	0x0801969c
 800b814:	08019800 	.word	0x08019800
 800b818:	080196fc 	.word	0x080196fc

0800b81c <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800b81c:	b580      	push	{r7, lr}
 800b81e:	b082      	sub	sp, #8
 800b820:	af00      	add	r7, sp, #0
 800b822:	6078      	str	r0, [r7, #4]
 800b824:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800b826:	2200      	movs	r2, #0
 800b828:	6839      	ldr	r1, [r7, #0]
 800b82a:	6878      	ldr	r0, [r7, #4]
 800b82c:	f7ff ff8e 	bl	800b74c <pbuf_add_header_impl>
 800b830:	4603      	mov	r3, r0
}
 800b832:	4618      	mov	r0, r3
 800b834:	3708      	adds	r7, #8
 800b836:	46bd      	mov	sp, r7
 800b838:	bd80      	pop	{r7, pc}
	...

0800b83c <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800b83c:	b580      	push	{r7, lr}
 800b83e:	b084      	sub	sp, #16
 800b840:	af00      	add	r7, sp, #0
 800b842:	6078      	str	r0, [r7, #4]
 800b844:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	2b00      	cmp	r3, #0
 800b84a:	d106      	bne.n	800b85a <pbuf_remove_header+0x1e>
 800b84c:	4b20      	ldr	r3, [pc, #128]	; (800b8d0 <pbuf_remove_header+0x94>)
 800b84e:	f240 224b 	movw	r2, #587	; 0x24b
 800b852:	4920      	ldr	r1, [pc, #128]	; (800b8d4 <pbuf_remove_header+0x98>)
 800b854:	4820      	ldr	r0, [pc, #128]	; (800b8d8 <pbuf_remove_header+0x9c>)
 800b856:	f00b ff1d 	bl	8017694 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d003      	beq.n	800b868 <pbuf_remove_header+0x2c>
 800b860:	683b      	ldr	r3, [r7, #0]
 800b862:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b866:	d301      	bcc.n	800b86c <pbuf_remove_header+0x30>
    return 1;
 800b868:	2301      	movs	r3, #1
 800b86a:	e02c      	b.n	800b8c6 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800b86c:	683b      	ldr	r3, [r7, #0]
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d101      	bne.n	800b876 <pbuf_remove_header+0x3a>
    return 0;
 800b872:	2300      	movs	r3, #0
 800b874:	e027      	b.n	800b8c6 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800b876:	683b      	ldr	r3, [r7, #0]
 800b878:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	895b      	ldrh	r3, [r3, #10]
 800b87e:	89fa      	ldrh	r2, [r7, #14]
 800b880:	429a      	cmp	r2, r3
 800b882:	d908      	bls.n	800b896 <pbuf_remove_header+0x5a>
 800b884:	4b12      	ldr	r3, [pc, #72]	; (800b8d0 <pbuf_remove_header+0x94>)
 800b886:	f240 2255 	movw	r2, #597	; 0x255
 800b88a:	4914      	ldr	r1, [pc, #80]	; (800b8dc <pbuf_remove_header+0xa0>)
 800b88c:	4812      	ldr	r0, [pc, #72]	; (800b8d8 <pbuf_remove_header+0x9c>)
 800b88e:	f00b ff01 	bl	8017694 <iprintf>
 800b892:	2301      	movs	r3, #1
 800b894:	e017      	b.n	800b8c6 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	685b      	ldr	r3, [r3, #4]
 800b89a:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	685a      	ldr	r2, [r3, #4]
 800b8a0:	683b      	ldr	r3, [r7, #0]
 800b8a2:	441a      	add	r2, r3
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	895a      	ldrh	r2, [r3, #10]
 800b8ac:	89fb      	ldrh	r3, [r7, #14]
 800b8ae:	1ad3      	subs	r3, r2, r3
 800b8b0:	b29a      	uxth	r2, r3
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	891a      	ldrh	r2, [r3, #8]
 800b8ba:	89fb      	ldrh	r3, [r7, #14]
 800b8bc:	1ad3      	subs	r3, r2, r3
 800b8be:	b29a      	uxth	r2, r3
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800b8c4:	2300      	movs	r3, #0
}
 800b8c6:	4618      	mov	r0, r3
 800b8c8:	3710      	adds	r7, #16
 800b8ca:	46bd      	mov	sp, r7
 800b8cc:	bd80      	pop	{r7, pc}
 800b8ce:	bf00      	nop
 800b8d0:	0801969c 	.word	0x0801969c
 800b8d4:	08019800 	.word	0x08019800
 800b8d8:	080196fc 	.word	0x080196fc
 800b8dc:	0801980c 	.word	0x0801980c

0800b8e0 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800b8e0:	b580      	push	{r7, lr}
 800b8e2:	b082      	sub	sp, #8
 800b8e4:	af00      	add	r7, sp, #0
 800b8e6:	6078      	str	r0, [r7, #4]
 800b8e8:	460b      	mov	r3, r1
 800b8ea:	807b      	strh	r3, [r7, #2]
 800b8ec:	4613      	mov	r3, r2
 800b8ee:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800b8f0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	da08      	bge.n	800b90a <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800b8f8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b8fc:	425b      	negs	r3, r3
 800b8fe:	4619      	mov	r1, r3
 800b900:	6878      	ldr	r0, [r7, #4]
 800b902:	f7ff ff9b 	bl	800b83c <pbuf_remove_header>
 800b906:	4603      	mov	r3, r0
 800b908:	e007      	b.n	800b91a <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800b90a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b90e:	787a      	ldrb	r2, [r7, #1]
 800b910:	4619      	mov	r1, r3
 800b912:	6878      	ldr	r0, [r7, #4]
 800b914:	f7ff ff1a 	bl	800b74c <pbuf_add_header_impl>
 800b918:	4603      	mov	r3, r0
  }
}
 800b91a:	4618      	mov	r0, r3
 800b91c:	3708      	adds	r7, #8
 800b91e:	46bd      	mov	sp, r7
 800b920:	bd80      	pop	{r7, pc}

0800b922 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800b922:	b580      	push	{r7, lr}
 800b924:	b082      	sub	sp, #8
 800b926:	af00      	add	r7, sp, #0
 800b928:	6078      	str	r0, [r7, #4]
 800b92a:	460b      	mov	r3, r1
 800b92c:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800b92e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b932:	2201      	movs	r2, #1
 800b934:	4619      	mov	r1, r3
 800b936:	6878      	ldr	r0, [r7, #4]
 800b938:	f7ff ffd2 	bl	800b8e0 <pbuf_header_impl>
 800b93c:	4603      	mov	r3, r0
}
 800b93e:	4618      	mov	r0, r3
 800b940:	3708      	adds	r7, #8
 800b942:	46bd      	mov	sp, r7
 800b944:	bd80      	pop	{r7, pc}
	...

0800b948 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800b948:	b580      	push	{r7, lr}
 800b94a:	b088      	sub	sp, #32
 800b94c:	af00      	add	r7, sp, #0
 800b94e:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	2b00      	cmp	r3, #0
 800b954:	d10b      	bne.n	800b96e <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d106      	bne.n	800b96a <pbuf_free+0x22>
 800b95c:	4b3b      	ldr	r3, [pc, #236]	; (800ba4c <pbuf_free+0x104>)
 800b95e:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800b962:	493b      	ldr	r1, [pc, #236]	; (800ba50 <pbuf_free+0x108>)
 800b964:	483b      	ldr	r0, [pc, #236]	; (800ba54 <pbuf_free+0x10c>)
 800b966:	f00b fe95 	bl	8017694 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800b96a:	2300      	movs	r3, #0
 800b96c:	e069      	b.n	800ba42 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800b96e:	2300      	movs	r3, #0
 800b970:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800b972:	e062      	b.n	800ba3a <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800b974:	f00b fc98 	bl	80172a8 <sys_arch_protect>
 800b978:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	7b9b      	ldrb	r3, [r3, #14]
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d106      	bne.n	800b990 <pbuf_free+0x48>
 800b982:	4b32      	ldr	r3, [pc, #200]	; (800ba4c <pbuf_free+0x104>)
 800b984:	f240 22f1 	movw	r2, #753	; 0x2f1
 800b988:	4933      	ldr	r1, [pc, #204]	; (800ba58 <pbuf_free+0x110>)
 800b98a:	4832      	ldr	r0, [pc, #200]	; (800ba54 <pbuf_free+0x10c>)
 800b98c:	f00b fe82 	bl	8017694 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	7b9b      	ldrb	r3, [r3, #14]
 800b994:	3b01      	subs	r3, #1
 800b996:	b2da      	uxtb	r2, r3
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	739a      	strb	r2, [r3, #14]
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	7b9b      	ldrb	r3, [r3, #14]
 800b9a0:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800b9a2:	69b8      	ldr	r0, [r7, #24]
 800b9a4:	f00b fc8e 	bl	80172c4 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800b9a8:	7dfb      	ldrb	r3, [r7, #23]
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d143      	bne.n	800ba36 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	7b1b      	ldrb	r3, [r3, #12]
 800b9b8:	f003 030f 	and.w	r3, r3, #15
 800b9bc:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	7b5b      	ldrb	r3, [r3, #13]
 800b9c2:	f003 0302 	and.w	r3, r3, #2
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d011      	beq.n	800b9ee <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800b9ce:	68bb      	ldr	r3, [r7, #8]
 800b9d0:	691b      	ldr	r3, [r3, #16]
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d106      	bne.n	800b9e4 <pbuf_free+0x9c>
 800b9d6:	4b1d      	ldr	r3, [pc, #116]	; (800ba4c <pbuf_free+0x104>)
 800b9d8:	f240 22ff 	movw	r2, #767	; 0x2ff
 800b9dc:	491f      	ldr	r1, [pc, #124]	; (800ba5c <pbuf_free+0x114>)
 800b9de:	481d      	ldr	r0, [pc, #116]	; (800ba54 <pbuf_free+0x10c>)
 800b9e0:	f00b fe58 	bl	8017694 <iprintf>
        pc->custom_free_function(p);
 800b9e4:	68bb      	ldr	r3, [r7, #8]
 800b9e6:	691b      	ldr	r3, [r3, #16]
 800b9e8:	6878      	ldr	r0, [r7, #4]
 800b9ea:	4798      	blx	r3
 800b9ec:	e01d      	b.n	800ba2a <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800b9ee:	7bfb      	ldrb	r3, [r7, #15]
 800b9f0:	2b02      	cmp	r3, #2
 800b9f2:	d104      	bne.n	800b9fe <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800b9f4:	6879      	ldr	r1, [r7, #4]
 800b9f6:	200c      	movs	r0, #12
 800b9f8:	f7ff f8f6 	bl	800abe8 <memp_free>
 800b9fc:	e015      	b.n	800ba2a <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800b9fe:	7bfb      	ldrb	r3, [r7, #15]
 800ba00:	2b01      	cmp	r3, #1
 800ba02:	d104      	bne.n	800ba0e <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800ba04:	6879      	ldr	r1, [r7, #4]
 800ba06:	200b      	movs	r0, #11
 800ba08:	f7ff f8ee 	bl	800abe8 <memp_free>
 800ba0c:	e00d      	b.n	800ba2a <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800ba0e:	7bfb      	ldrb	r3, [r7, #15]
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d103      	bne.n	800ba1c <pbuf_free+0xd4>
          mem_free(p);
 800ba14:	6878      	ldr	r0, [r7, #4]
 800ba16:	f7fe fd33 	bl	800a480 <mem_free>
 800ba1a:	e006      	b.n	800ba2a <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800ba1c:	4b0b      	ldr	r3, [pc, #44]	; (800ba4c <pbuf_free+0x104>)
 800ba1e:	f240 320f 	movw	r2, #783	; 0x30f
 800ba22:	490f      	ldr	r1, [pc, #60]	; (800ba60 <pbuf_free+0x118>)
 800ba24:	480b      	ldr	r0, [pc, #44]	; (800ba54 <pbuf_free+0x10c>)
 800ba26:	f00b fe35 	bl	8017694 <iprintf>
        }
      }
      count++;
 800ba2a:	7ffb      	ldrb	r3, [r7, #31]
 800ba2c:	3301      	adds	r3, #1
 800ba2e:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800ba30:	693b      	ldr	r3, [r7, #16]
 800ba32:	607b      	str	r3, [r7, #4]
 800ba34:	e001      	b.n	800ba3a <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800ba36:	2300      	movs	r3, #0
 800ba38:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d199      	bne.n	800b974 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800ba40:	7ffb      	ldrb	r3, [r7, #31]
}
 800ba42:	4618      	mov	r0, r3
 800ba44:	3720      	adds	r7, #32
 800ba46:	46bd      	mov	sp, r7
 800ba48:	bd80      	pop	{r7, pc}
 800ba4a:	bf00      	nop
 800ba4c:	0801969c 	.word	0x0801969c
 800ba50:	08019800 	.word	0x08019800
 800ba54:	080196fc 	.word	0x080196fc
 800ba58:	0801982c 	.word	0x0801982c
 800ba5c:	08019844 	.word	0x08019844
 800ba60:	08019868 	.word	0x08019868

0800ba64 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800ba64:	b480      	push	{r7}
 800ba66:	b085      	sub	sp, #20
 800ba68:	af00      	add	r7, sp, #0
 800ba6a:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800ba6c:	2300      	movs	r3, #0
 800ba6e:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800ba70:	e005      	b.n	800ba7e <pbuf_clen+0x1a>
    ++len;
 800ba72:	89fb      	ldrh	r3, [r7, #14]
 800ba74:	3301      	adds	r3, #1
 800ba76:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d1f6      	bne.n	800ba72 <pbuf_clen+0xe>
  }
  return len;
 800ba84:	89fb      	ldrh	r3, [r7, #14]
}
 800ba86:	4618      	mov	r0, r3
 800ba88:	3714      	adds	r7, #20
 800ba8a:	46bd      	mov	sp, r7
 800ba8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba90:	4770      	bx	lr
	...

0800ba94 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800ba94:	b580      	push	{r7, lr}
 800ba96:	b084      	sub	sp, #16
 800ba98:	af00      	add	r7, sp, #0
 800ba9a:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	d016      	beq.n	800bad0 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800baa2:	f00b fc01 	bl	80172a8 <sys_arch_protect>
 800baa6:	60f8      	str	r0, [r7, #12]
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	7b9b      	ldrb	r3, [r3, #14]
 800baac:	3301      	adds	r3, #1
 800baae:	b2da      	uxtb	r2, r3
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	739a      	strb	r2, [r3, #14]
 800bab4:	68f8      	ldr	r0, [r7, #12]
 800bab6:	f00b fc05 	bl	80172c4 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	7b9b      	ldrb	r3, [r3, #14]
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d106      	bne.n	800bad0 <pbuf_ref+0x3c>
 800bac2:	4b05      	ldr	r3, [pc, #20]	; (800bad8 <pbuf_ref+0x44>)
 800bac4:	f240 3242 	movw	r2, #834	; 0x342
 800bac8:	4904      	ldr	r1, [pc, #16]	; (800badc <pbuf_ref+0x48>)
 800baca:	4805      	ldr	r0, [pc, #20]	; (800bae0 <pbuf_ref+0x4c>)
 800bacc:	f00b fde2 	bl	8017694 <iprintf>
  }
}
 800bad0:	bf00      	nop
 800bad2:	3710      	adds	r7, #16
 800bad4:	46bd      	mov	sp, r7
 800bad6:	bd80      	pop	{r7, pc}
 800bad8:	0801969c 	.word	0x0801969c
 800badc:	0801987c 	.word	0x0801987c
 800bae0:	080196fc 	.word	0x080196fc

0800bae4 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800bae4:	b580      	push	{r7, lr}
 800bae6:	b084      	sub	sp, #16
 800bae8:	af00      	add	r7, sp, #0
 800baea:	6078      	str	r0, [r7, #4]
 800baec:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	d002      	beq.n	800bafa <pbuf_cat+0x16>
 800baf4:	683b      	ldr	r3, [r7, #0]
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d107      	bne.n	800bb0a <pbuf_cat+0x26>
 800bafa:	4b20      	ldr	r3, [pc, #128]	; (800bb7c <pbuf_cat+0x98>)
 800bafc:	f240 3259 	movw	r2, #857	; 0x359
 800bb00:	491f      	ldr	r1, [pc, #124]	; (800bb80 <pbuf_cat+0x9c>)
 800bb02:	4820      	ldr	r0, [pc, #128]	; (800bb84 <pbuf_cat+0xa0>)
 800bb04:	f00b fdc6 	bl	8017694 <iprintf>
 800bb08:	e034      	b.n	800bb74 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	60fb      	str	r3, [r7, #12]
 800bb0e:	e00a      	b.n	800bb26 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800bb10:	68fb      	ldr	r3, [r7, #12]
 800bb12:	891a      	ldrh	r2, [r3, #8]
 800bb14:	683b      	ldr	r3, [r7, #0]
 800bb16:	891b      	ldrh	r3, [r3, #8]
 800bb18:	4413      	add	r3, r2
 800bb1a:	b29a      	uxth	r2, r3
 800bb1c:	68fb      	ldr	r3, [r7, #12]
 800bb1e:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	60fb      	str	r3, [r7, #12]
 800bb26:	68fb      	ldr	r3, [r7, #12]
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d1f0      	bne.n	800bb10 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800bb2e:	68fb      	ldr	r3, [r7, #12]
 800bb30:	891a      	ldrh	r2, [r3, #8]
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	895b      	ldrh	r3, [r3, #10]
 800bb36:	429a      	cmp	r2, r3
 800bb38:	d006      	beq.n	800bb48 <pbuf_cat+0x64>
 800bb3a:	4b10      	ldr	r3, [pc, #64]	; (800bb7c <pbuf_cat+0x98>)
 800bb3c:	f240 3262 	movw	r2, #866	; 0x362
 800bb40:	4911      	ldr	r1, [pc, #68]	; (800bb88 <pbuf_cat+0xa4>)
 800bb42:	4810      	ldr	r0, [pc, #64]	; (800bb84 <pbuf_cat+0xa0>)
 800bb44:	f00b fda6 	bl	8017694 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d006      	beq.n	800bb5e <pbuf_cat+0x7a>
 800bb50:	4b0a      	ldr	r3, [pc, #40]	; (800bb7c <pbuf_cat+0x98>)
 800bb52:	f240 3263 	movw	r2, #867	; 0x363
 800bb56:	490d      	ldr	r1, [pc, #52]	; (800bb8c <pbuf_cat+0xa8>)
 800bb58:	480a      	ldr	r0, [pc, #40]	; (800bb84 <pbuf_cat+0xa0>)
 800bb5a:	f00b fd9b 	bl	8017694 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800bb5e:	68fb      	ldr	r3, [r7, #12]
 800bb60:	891a      	ldrh	r2, [r3, #8]
 800bb62:	683b      	ldr	r3, [r7, #0]
 800bb64:	891b      	ldrh	r3, [r3, #8]
 800bb66:	4413      	add	r3, r2
 800bb68:	b29a      	uxth	r2, r3
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	683a      	ldr	r2, [r7, #0]
 800bb72:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800bb74:	3710      	adds	r7, #16
 800bb76:	46bd      	mov	sp, r7
 800bb78:	bd80      	pop	{r7, pc}
 800bb7a:	bf00      	nop
 800bb7c:	0801969c 	.word	0x0801969c
 800bb80:	08019890 	.word	0x08019890
 800bb84:	080196fc 	.word	0x080196fc
 800bb88:	080198c8 	.word	0x080198c8
 800bb8c:	080198f8 	.word	0x080198f8

0800bb90 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800bb90:	b580      	push	{r7, lr}
 800bb92:	b082      	sub	sp, #8
 800bb94:	af00      	add	r7, sp, #0
 800bb96:	6078      	str	r0, [r7, #4]
 800bb98:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800bb9a:	6839      	ldr	r1, [r7, #0]
 800bb9c:	6878      	ldr	r0, [r7, #4]
 800bb9e:	f7ff ffa1 	bl	800bae4 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800bba2:	6838      	ldr	r0, [r7, #0]
 800bba4:	f7ff ff76 	bl	800ba94 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800bba8:	bf00      	nop
 800bbaa:	3708      	adds	r7, #8
 800bbac:	46bd      	mov	sp, r7
 800bbae:	bd80      	pop	{r7, pc}

0800bbb0 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800bbb0:	b580      	push	{r7, lr}
 800bbb2:	b086      	sub	sp, #24
 800bbb4:	af00      	add	r7, sp, #0
 800bbb6:	6078      	str	r0, [r7, #4]
 800bbb8:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800bbba:	2300      	movs	r3, #0
 800bbbc:	617b      	str	r3, [r7, #20]
 800bbbe:	2300      	movs	r3, #0
 800bbc0:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	d008      	beq.n	800bbda <pbuf_copy+0x2a>
 800bbc8:	683b      	ldr	r3, [r7, #0]
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	d005      	beq.n	800bbda <pbuf_copy+0x2a>
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	891a      	ldrh	r2, [r3, #8]
 800bbd2:	683b      	ldr	r3, [r7, #0]
 800bbd4:	891b      	ldrh	r3, [r3, #8]
 800bbd6:	429a      	cmp	r2, r3
 800bbd8:	d209      	bcs.n	800bbee <pbuf_copy+0x3e>
 800bbda:	4b57      	ldr	r3, [pc, #348]	; (800bd38 <pbuf_copy+0x188>)
 800bbdc:	f240 32c9 	movw	r2, #969	; 0x3c9
 800bbe0:	4956      	ldr	r1, [pc, #344]	; (800bd3c <pbuf_copy+0x18c>)
 800bbe2:	4857      	ldr	r0, [pc, #348]	; (800bd40 <pbuf_copy+0x190>)
 800bbe4:	f00b fd56 	bl	8017694 <iprintf>
 800bbe8:	f06f 030f 	mvn.w	r3, #15
 800bbec:	e09f      	b.n	800bd2e <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	895b      	ldrh	r3, [r3, #10]
 800bbf2:	461a      	mov	r2, r3
 800bbf4:	697b      	ldr	r3, [r7, #20]
 800bbf6:	1ad2      	subs	r2, r2, r3
 800bbf8:	683b      	ldr	r3, [r7, #0]
 800bbfa:	895b      	ldrh	r3, [r3, #10]
 800bbfc:	4619      	mov	r1, r3
 800bbfe:	693b      	ldr	r3, [r7, #16]
 800bc00:	1acb      	subs	r3, r1, r3
 800bc02:	429a      	cmp	r2, r3
 800bc04:	d306      	bcc.n	800bc14 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800bc06:	683b      	ldr	r3, [r7, #0]
 800bc08:	895b      	ldrh	r3, [r3, #10]
 800bc0a:	461a      	mov	r2, r3
 800bc0c:	693b      	ldr	r3, [r7, #16]
 800bc0e:	1ad3      	subs	r3, r2, r3
 800bc10:	60fb      	str	r3, [r7, #12]
 800bc12:	e005      	b.n	800bc20 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	895b      	ldrh	r3, [r3, #10]
 800bc18:	461a      	mov	r2, r3
 800bc1a:	697b      	ldr	r3, [r7, #20]
 800bc1c:	1ad3      	subs	r3, r2, r3
 800bc1e:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	685a      	ldr	r2, [r3, #4]
 800bc24:	697b      	ldr	r3, [r7, #20]
 800bc26:	18d0      	adds	r0, r2, r3
 800bc28:	683b      	ldr	r3, [r7, #0]
 800bc2a:	685a      	ldr	r2, [r3, #4]
 800bc2c:	693b      	ldr	r3, [r7, #16]
 800bc2e:	4413      	add	r3, r2
 800bc30:	68fa      	ldr	r2, [r7, #12]
 800bc32:	4619      	mov	r1, r3
 800bc34:	f00b fc83 	bl	801753e <memcpy>
    offset_to += len;
 800bc38:	697a      	ldr	r2, [r7, #20]
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	4413      	add	r3, r2
 800bc3e:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800bc40:	693a      	ldr	r2, [r7, #16]
 800bc42:	68fb      	ldr	r3, [r7, #12]
 800bc44:	4413      	add	r3, r2
 800bc46:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	895b      	ldrh	r3, [r3, #10]
 800bc4c:	461a      	mov	r2, r3
 800bc4e:	697b      	ldr	r3, [r7, #20]
 800bc50:	4293      	cmp	r3, r2
 800bc52:	d906      	bls.n	800bc62 <pbuf_copy+0xb2>
 800bc54:	4b38      	ldr	r3, [pc, #224]	; (800bd38 <pbuf_copy+0x188>)
 800bc56:	f240 32d9 	movw	r2, #985	; 0x3d9
 800bc5a:	493a      	ldr	r1, [pc, #232]	; (800bd44 <pbuf_copy+0x194>)
 800bc5c:	4838      	ldr	r0, [pc, #224]	; (800bd40 <pbuf_copy+0x190>)
 800bc5e:	f00b fd19 	bl	8017694 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800bc62:	683b      	ldr	r3, [r7, #0]
 800bc64:	895b      	ldrh	r3, [r3, #10]
 800bc66:	461a      	mov	r2, r3
 800bc68:	693b      	ldr	r3, [r7, #16]
 800bc6a:	4293      	cmp	r3, r2
 800bc6c:	d906      	bls.n	800bc7c <pbuf_copy+0xcc>
 800bc6e:	4b32      	ldr	r3, [pc, #200]	; (800bd38 <pbuf_copy+0x188>)
 800bc70:	f240 32da 	movw	r2, #986	; 0x3da
 800bc74:	4934      	ldr	r1, [pc, #208]	; (800bd48 <pbuf_copy+0x198>)
 800bc76:	4832      	ldr	r0, [pc, #200]	; (800bd40 <pbuf_copy+0x190>)
 800bc78:	f00b fd0c 	bl	8017694 <iprintf>
    if (offset_from >= p_from->len) {
 800bc7c:	683b      	ldr	r3, [r7, #0]
 800bc7e:	895b      	ldrh	r3, [r3, #10]
 800bc80:	461a      	mov	r2, r3
 800bc82:	693b      	ldr	r3, [r7, #16]
 800bc84:	4293      	cmp	r3, r2
 800bc86:	d304      	bcc.n	800bc92 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800bc88:	2300      	movs	r3, #0
 800bc8a:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800bc8c:	683b      	ldr	r3, [r7, #0]
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	895b      	ldrh	r3, [r3, #10]
 800bc96:	461a      	mov	r2, r3
 800bc98:	697b      	ldr	r3, [r7, #20]
 800bc9a:	4293      	cmp	r3, r2
 800bc9c:	d114      	bne.n	800bcc8 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800bc9e:	2300      	movs	r3, #0
 800bca0:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	d10c      	bne.n	800bcc8 <pbuf_copy+0x118>
 800bcae:	683b      	ldr	r3, [r7, #0]
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d009      	beq.n	800bcc8 <pbuf_copy+0x118>
 800bcb4:	4b20      	ldr	r3, [pc, #128]	; (800bd38 <pbuf_copy+0x188>)
 800bcb6:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800bcba:	4924      	ldr	r1, [pc, #144]	; (800bd4c <pbuf_copy+0x19c>)
 800bcbc:	4820      	ldr	r0, [pc, #128]	; (800bd40 <pbuf_copy+0x190>)
 800bcbe:	f00b fce9 	bl	8017694 <iprintf>
 800bcc2:	f06f 030f 	mvn.w	r3, #15
 800bcc6:	e032      	b.n	800bd2e <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800bcc8:	683b      	ldr	r3, [r7, #0]
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	d013      	beq.n	800bcf6 <pbuf_copy+0x146>
 800bcce:	683b      	ldr	r3, [r7, #0]
 800bcd0:	895a      	ldrh	r2, [r3, #10]
 800bcd2:	683b      	ldr	r3, [r7, #0]
 800bcd4:	891b      	ldrh	r3, [r3, #8]
 800bcd6:	429a      	cmp	r2, r3
 800bcd8:	d10d      	bne.n	800bcf6 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800bcda:	683b      	ldr	r3, [r7, #0]
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d009      	beq.n	800bcf6 <pbuf_copy+0x146>
 800bce2:	4b15      	ldr	r3, [pc, #84]	; (800bd38 <pbuf_copy+0x188>)
 800bce4:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800bce8:	4919      	ldr	r1, [pc, #100]	; (800bd50 <pbuf_copy+0x1a0>)
 800bcea:	4815      	ldr	r0, [pc, #84]	; (800bd40 <pbuf_copy+0x190>)
 800bcec:	f00b fcd2 	bl	8017694 <iprintf>
 800bcf0:	f06f 0305 	mvn.w	r3, #5
 800bcf4:	e01b      	b.n	800bd2e <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d013      	beq.n	800bd24 <pbuf_copy+0x174>
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	895a      	ldrh	r2, [r3, #10]
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	891b      	ldrh	r3, [r3, #8]
 800bd04:	429a      	cmp	r2, r3
 800bd06:	d10d      	bne.n	800bd24 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	d009      	beq.n	800bd24 <pbuf_copy+0x174>
 800bd10:	4b09      	ldr	r3, [pc, #36]	; (800bd38 <pbuf_copy+0x188>)
 800bd12:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800bd16:	490e      	ldr	r1, [pc, #56]	; (800bd50 <pbuf_copy+0x1a0>)
 800bd18:	4809      	ldr	r0, [pc, #36]	; (800bd40 <pbuf_copy+0x190>)
 800bd1a:	f00b fcbb 	bl	8017694 <iprintf>
 800bd1e:	f06f 0305 	mvn.w	r3, #5
 800bd22:	e004      	b.n	800bd2e <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800bd24:	683b      	ldr	r3, [r7, #0]
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	f47f af61 	bne.w	800bbee <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800bd2c:	2300      	movs	r3, #0
}
 800bd2e:	4618      	mov	r0, r3
 800bd30:	3718      	adds	r7, #24
 800bd32:	46bd      	mov	sp, r7
 800bd34:	bd80      	pop	{r7, pc}
 800bd36:	bf00      	nop
 800bd38:	0801969c 	.word	0x0801969c
 800bd3c:	08019944 	.word	0x08019944
 800bd40:	080196fc 	.word	0x080196fc
 800bd44:	08019974 	.word	0x08019974
 800bd48:	0801998c 	.word	0x0801998c
 800bd4c:	080199a8 	.word	0x080199a8
 800bd50:	080199b8 	.word	0x080199b8

0800bd54 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800bd54:	b580      	push	{r7, lr}
 800bd56:	b088      	sub	sp, #32
 800bd58:	af00      	add	r7, sp, #0
 800bd5a:	60f8      	str	r0, [r7, #12]
 800bd5c:	60b9      	str	r1, [r7, #8]
 800bd5e:	4611      	mov	r1, r2
 800bd60:	461a      	mov	r2, r3
 800bd62:	460b      	mov	r3, r1
 800bd64:	80fb      	strh	r3, [r7, #6]
 800bd66:	4613      	mov	r3, r2
 800bd68:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800bd6a:	2300      	movs	r3, #0
 800bd6c:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800bd6e:	2300      	movs	r3, #0
 800bd70:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800bd72:	68fb      	ldr	r3, [r7, #12]
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	d108      	bne.n	800bd8a <pbuf_copy_partial+0x36>
 800bd78:	4b2b      	ldr	r3, [pc, #172]	; (800be28 <pbuf_copy_partial+0xd4>)
 800bd7a:	f240 420a 	movw	r2, #1034	; 0x40a
 800bd7e:	492b      	ldr	r1, [pc, #172]	; (800be2c <pbuf_copy_partial+0xd8>)
 800bd80:	482b      	ldr	r0, [pc, #172]	; (800be30 <pbuf_copy_partial+0xdc>)
 800bd82:	f00b fc87 	bl	8017694 <iprintf>
 800bd86:	2300      	movs	r3, #0
 800bd88:	e04a      	b.n	800be20 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800bd8a:	68bb      	ldr	r3, [r7, #8]
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	d108      	bne.n	800bda2 <pbuf_copy_partial+0x4e>
 800bd90:	4b25      	ldr	r3, [pc, #148]	; (800be28 <pbuf_copy_partial+0xd4>)
 800bd92:	f240 420b 	movw	r2, #1035	; 0x40b
 800bd96:	4927      	ldr	r1, [pc, #156]	; (800be34 <pbuf_copy_partial+0xe0>)
 800bd98:	4825      	ldr	r0, [pc, #148]	; (800be30 <pbuf_copy_partial+0xdc>)
 800bd9a:	f00b fc7b 	bl	8017694 <iprintf>
 800bd9e:	2300      	movs	r3, #0
 800bda0:	e03e      	b.n	800be20 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800bda2:	68fb      	ldr	r3, [r7, #12]
 800bda4:	61fb      	str	r3, [r7, #28]
 800bda6:	e034      	b.n	800be12 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800bda8:	88bb      	ldrh	r3, [r7, #4]
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	d00a      	beq.n	800bdc4 <pbuf_copy_partial+0x70>
 800bdae:	69fb      	ldr	r3, [r7, #28]
 800bdb0:	895b      	ldrh	r3, [r3, #10]
 800bdb2:	88ba      	ldrh	r2, [r7, #4]
 800bdb4:	429a      	cmp	r2, r3
 800bdb6:	d305      	bcc.n	800bdc4 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800bdb8:	69fb      	ldr	r3, [r7, #28]
 800bdba:	895b      	ldrh	r3, [r3, #10]
 800bdbc:	88ba      	ldrh	r2, [r7, #4]
 800bdbe:	1ad3      	subs	r3, r2, r3
 800bdc0:	80bb      	strh	r3, [r7, #4]
 800bdc2:	e023      	b.n	800be0c <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800bdc4:	69fb      	ldr	r3, [r7, #28]
 800bdc6:	895a      	ldrh	r2, [r3, #10]
 800bdc8:	88bb      	ldrh	r3, [r7, #4]
 800bdca:	1ad3      	subs	r3, r2, r3
 800bdcc:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800bdce:	8b3a      	ldrh	r2, [r7, #24]
 800bdd0:	88fb      	ldrh	r3, [r7, #6]
 800bdd2:	429a      	cmp	r2, r3
 800bdd4:	d901      	bls.n	800bdda <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800bdd6:	88fb      	ldrh	r3, [r7, #6]
 800bdd8:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800bdda:	8b7b      	ldrh	r3, [r7, #26]
 800bddc:	68ba      	ldr	r2, [r7, #8]
 800bdde:	18d0      	adds	r0, r2, r3
 800bde0:	69fb      	ldr	r3, [r7, #28]
 800bde2:	685a      	ldr	r2, [r3, #4]
 800bde4:	88bb      	ldrh	r3, [r7, #4]
 800bde6:	4413      	add	r3, r2
 800bde8:	8b3a      	ldrh	r2, [r7, #24]
 800bdea:	4619      	mov	r1, r3
 800bdec:	f00b fba7 	bl	801753e <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800bdf0:	8afa      	ldrh	r2, [r7, #22]
 800bdf2:	8b3b      	ldrh	r3, [r7, #24]
 800bdf4:	4413      	add	r3, r2
 800bdf6:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800bdf8:	8b7a      	ldrh	r2, [r7, #26]
 800bdfa:	8b3b      	ldrh	r3, [r7, #24]
 800bdfc:	4413      	add	r3, r2
 800bdfe:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800be00:	88fa      	ldrh	r2, [r7, #6]
 800be02:	8b3b      	ldrh	r3, [r7, #24]
 800be04:	1ad3      	subs	r3, r2, r3
 800be06:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800be08:	2300      	movs	r3, #0
 800be0a:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800be0c:	69fb      	ldr	r3, [r7, #28]
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	61fb      	str	r3, [r7, #28]
 800be12:	88fb      	ldrh	r3, [r7, #6]
 800be14:	2b00      	cmp	r3, #0
 800be16:	d002      	beq.n	800be1e <pbuf_copy_partial+0xca>
 800be18:	69fb      	ldr	r3, [r7, #28]
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d1c4      	bne.n	800bda8 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800be1e:	8afb      	ldrh	r3, [r7, #22]
}
 800be20:	4618      	mov	r0, r3
 800be22:	3720      	adds	r7, #32
 800be24:	46bd      	mov	sp, r7
 800be26:	bd80      	pop	{r7, pc}
 800be28:	0801969c 	.word	0x0801969c
 800be2c:	080199e4 	.word	0x080199e4
 800be30:	080196fc 	.word	0x080196fc
 800be34:	08019a04 	.word	0x08019a04

0800be38 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800be38:	b580      	push	{r7, lr}
 800be3a:	b084      	sub	sp, #16
 800be3c:	af00      	add	r7, sp, #0
 800be3e:	4603      	mov	r3, r0
 800be40:	603a      	str	r2, [r7, #0]
 800be42:	71fb      	strb	r3, [r7, #7]
 800be44:	460b      	mov	r3, r1
 800be46:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800be48:	683b      	ldr	r3, [r7, #0]
 800be4a:	8919      	ldrh	r1, [r3, #8]
 800be4c:	88ba      	ldrh	r2, [r7, #4]
 800be4e:	79fb      	ldrb	r3, [r7, #7]
 800be50:	4618      	mov	r0, r3
 800be52:	f7ff fa95 	bl	800b380 <pbuf_alloc>
 800be56:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800be58:	68fb      	ldr	r3, [r7, #12]
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d101      	bne.n	800be62 <pbuf_clone+0x2a>
    return NULL;
 800be5e:	2300      	movs	r3, #0
 800be60:	e011      	b.n	800be86 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800be62:	6839      	ldr	r1, [r7, #0]
 800be64:	68f8      	ldr	r0, [r7, #12]
 800be66:	f7ff fea3 	bl	800bbb0 <pbuf_copy>
 800be6a:	4603      	mov	r3, r0
 800be6c:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800be6e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800be72:	2b00      	cmp	r3, #0
 800be74:	d006      	beq.n	800be84 <pbuf_clone+0x4c>
 800be76:	4b06      	ldr	r3, [pc, #24]	; (800be90 <pbuf_clone+0x58>)
 800be78:	f240 5224 	movw	r2, #1316	; 0x524
 800be7c:	4905      	ldr	r1, [pc, #20]	; (800be94 <pbuf_clone+0x5c>)
 800be7e:	4806      	ldr	r0, [pc, #24]	; (800be98 <pbuf_clone+0x60>)
 800be80:	f00b fc08 	bl	8017694 <iprintf>
  return q;
 800be84:	68fb      	ldr	r3, [r7, #12]
}
 800be86:	4618      	mov	r0, r3
 800be88:	3710      	adds	r7, #16
 800be8a:	46bd      	mov	sp, r7
 800be8c:	bd80      	pop	{r7, pc}
 800be8e:	bf00      	nop
 800be90:	0801969c 	.word	0x0801969c
 800be94:	08019b10 	.word	0x08019b10
 800be98:	080196fc 	.word	0x080196fc

0800be9c <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800be9c:	b580      	push	{r7, lr}
 800be9e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800bea0:	f00b fc10 	bl	80176c4 <rand>
 800bea4:	4603      	mov	r3, r0
 800bea6:	b29b      	uxth	r3, r3
 800bea8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800beac:	b29b      	uxth	r3, r3
 800beae:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800beb2:	b29a      	uxth	r2, r3
 800beb4:	4b01      	ldr	r3, [pc, #4]	; (800bebc <tcp_init+0x20>)
 800beb6:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800beb8:	bf00      	nop
 800beba:	bd80      	pop	{r7, pc}
 800bebc:	20000024 	.word	0x20000024

0800bec0 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800bec0:	b580      	push	{r7, lr}
 800bec2:	b082      	sub	sp, #8
 800bec4:	af00      	add	r7, sp, #0
 800bec6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	7d1b      	ldrb	r3, [r3, #20]
 800becc:	2b01      	cmp	r3, #1
 800bece:	d105      	bne.n	800bedc <tcp_free+0x1c>
 800bed0:	4b06      	ldr	r3, [pc, #24]	; (800beec <tcp_free+0x2c>)
 800bed2:	22d4      	movs	r2, #212	; 0xd4
 800bed4:	4906      	ldr	r1, [pc, #24]	; (800bef0 <tcp_free+0x30>)
 800bed6:	4807      	ldr	r0, [pc, #28]	; (800bef4 <tcp_free+0x34>)
 800bed8:	f00b fbdc 	bl	8017694 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800bedc:	6879      	ldr	r1, [r7, #4]
 800bede:	2001      	movs	r0, #1
 800bee0:	f7fe fe82 	bl	800abe8 <memp_free>
}
 800bee4:	bf00      	nop
 800bee6:	3708      	adds	r7, #8
 800bee8:	46bd      	mov	sp, r7
 800beea:	bd80      	pop	{r7, pc}
 800beec:	08019b9c 	.word	0x08019b9c
 800bef0:	08019bcc 	.word	0x08019bcc
 800bef4:	08019be0 	.word	0x08019be0

0800bef8 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800bef8:	b580      	push	{r7, lr}
 800befa:	b082      	sub	sp, #8
 800befc:	af00      	add	r7, sp, #0
 800befe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	7d1b      	ldrb	r3, [r3, #20]
 800bf04:	2b01      	cmp	r3, #1
 800bf06:	d105      	bne.n	800bf14 <tcp_free_listen+0x1c>
 800bf08:	4b06      	ldr	r3, [pc, #24]	; (800bf24 <tcp_free_listen+0x2c>)
 800bf0a:	22df      	movs	r2, #223	; 0xdf
 800bf0c:	4906      	ldr	r1, [pc, #24]	; (800bf28 <tcp_free_listen+0x30>)
 800bf0e:	4807      	ldr	r0, [pc, #28]	; (800bf2c <tcp_free_listen+0x34>)
 800bf10:	f00b fbc0 	bl	8017694 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800bf14:	6879      	ldr	r1, [r7, #4]
 800bf16:	2002      	movs	r0, #2
 800bf18:	f7fe fe66 	bl	800abe8 <memp_free>
}
 800bf1c:	bf00      	nop
 800bf1e:	3708      	adds	r7, #8
 800bf20:	46bd      	mov	sp, r7
 800bf22:	bd80      	pop	{r7, pc}
 800bf24:	08019b9c 	.word	0x08019b9c
 800bf28:	08019c08 	.word	0x08019c08
 800bf2c:	08019be0 	.word	0x08019be0

0800bf30 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800bf30:	b580      	push	{r7, lr}
 800bf32:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800bf34:	f001 f8a6 	bl	800d084 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800bf38:	4b07      	ldr	r3, [pc, #28]	; (800bf58 <tcp_tmr+0x28>)
 800bf3a:	781b      	ldrb	r3, [r3, #0]
 800bf3c:	3301      	adds	r3, #1
 800bf3e:	b2da      	uxtb	r2, r3
 800bf40:	4b05      	ldr	r3, [pc, #20]	; (800bf58 <tcp_tmr+0x28>)
 800bf42:	701a      	strb	r2, [r3, #0]
 800bf44:	4b04      	ldr	r3, [pc, #16]	; (800bf58 <tcp_tmr+0x28>)
 800bf46:	781b      	ldrb	r3, [r3, #0]
 800bf48:	f003 0301 	and.w	r3, r3, #1
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d001      	beq.n	800bf54 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800bf50:	f000 fd58 	bl	800ca04 <tcp_slowtmr>
  }
}
 800bf54:	bf00      	nop
 800bf56:	bd80      	pop	{r7, pc}
 800bf58:	2001094d 	.word	0x2001094d

0800bf5c <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800bf5c:	b580      	push	{r7, lr}
 800bf5e:	b084      	sub	sp, #16
 800bf60:	af00      	add	r7, sp, #0
 800bf62:	6078      	str	r0, [r7, #4]
 800bf64:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800bf66:	683b      	ldr	r3, [r7, #0]
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d105      	bne.n	800bf78 <tcp_remove_listener+0x1c>
 800bf6c:	4b0d      	ldr	r3, [pc, #52]	; (800bfa4 <tcp_remove_listener+0x48>)
 800bf6e:	22ff      	movs	r2, #255	; 0xff
 800bf70:	490d      	ldr	r1, [pc, #52]	; (800bfa8 <tcp_remove_listener+0x4c>)
 800bf72:	480e      	ldr	r0, [pc, #56]	; (800bfac <tcp_remove_listener+0x50>)
 800bf74:	f00b fb8e 	bl	8017694 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	60fb      	str	r3, [r7, #12]
 800bf7c:	e00a      	b.n	800bf94 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bf82:	683a      	ldr	r2, [r7, #0]
 800bf84:	429a      	cmp	r2, r3
 800bf86:	d102      	bne.n	800bf8e <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	2200      	movs	r2, #0
 800bf8c:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800bf8e:	68fb      	ldr	r3, [r7, #12]
 800bf90:	68db      	ldr	r3, [r3, #12]
 800bf92:	60fb      	str	r3, [r7, #12]
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d1f1      	bne.n	800bf7e <tcp_remove_listener+0x22>
    }
  }
}
 800bf9a:	bf00      	nop
 800bf9c:	bf00      	nop
 800bf9e:	3710      	adds	r7, #16
 800bfa0:	46bd      	mov	sp, r7
 800bfa2:	bd80      	pop	{r7, pc}
 800bfa4:	08019b9c 	.word	0x08019b9c
 800bfa8:	08019c24 	.word	0x08019c24
 800bfac:	08019be0 	.word	0x08019be0

0800bfb0 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800bfb0:	b580      	push	{r7, lr}
 800bfb2:	b084      	sub	sp, #16
 800bfb4:	af00      	add	r7, sp, #0
 800bfb6:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	d106      	bne.n	800bfcc <tcp_listen_closed+0x1c>
 800bfbe:	4b14      	ldr	r3, [pc, #80]	; (800c010 <tcp_listen_closed+0x60>)
 800bfc0:	f240 1211 	movw	r2, #273	; 0x111
 800bfc4:	4913      	ldr	r1, [pc, #76]	; (800c014 <tcp_listen_closed+0x64>)
 800bfc6:	4814      	ldr	r0, [pc, #80]	; (800c018 <tcp_listen_closed+0x68>)
 800bfc8:	f00b fb64 	bl	8017694 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	7d1b      	ldrb	r3, [r3, #20]
 800bfd0:	2b01      	cmp	r3, #1
 800bfd2:	d006      	beq.n	800bfe2 <tcp_listen_closed+0x32>
 800bfd4:	4b0e      	ldr	r3, [pc, #56]	; (800c010 <tcp_listen_closed+0x60>)
 800bfd6:	f44f 7289 	mov.w	r2, #274	; 0x112
 800bfda:	4910      	ldr	r1, [pc, #64]	; (800c01c <tcp_listen_closed+0x6c>)
 800bfdc:	480e      	ldr	r0, [pc, #56]	; (800c018 <tcp_listen_closed+0x68>)
 800bfde:	f00b fb59 	bl	8017694 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800bfe2:	2301      	movs	r3, #1
 800bfe4:	60fb      	str	r3, [r7, #12]
 800bfe6:	e00b      	b.n	800c000 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800bfe8:	4a0d      	ldr	r2, [pc, #52]	; (800c020 <tcp_listen_closed+0x70>)
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	6879      	ldr	r1, [r7, #4]
 800bff4:	4618      	mov	r0, r3
 800bff6:	f7ff ffb1 	bl	800bf5c <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800bffa:	68fb      	ldr	r3, [r7, #12]
 800bffc:	3301      	adds	r3, #1
 800bffe:	60fb      	str	r3, [r7, #12]
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	2b03      	cmp	r3, #3
 800c004:	d9f0      	bls.n	800bfe8 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800c006:	bf00      	nop
 800c008:	bf00      	nop
 800c00a:	3710      	adds	r7, #16
 800c00c:	46bd      	mov	sp, r7
 800c00e:	bd80      	pop	{r7, pc}
 800c010:	08019b9c 	.word	0x08019b9c
 800c014:	08019c4c 	.word	0x08019c4c
 800c018:	08019be0 	.word	0x08019be0
 800c01c:	08019c58 	.word	0x08019c58
 800c020:	0801bf60 	.word	0x0801bf60

0800c024 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800c024:	b5b0      	push	{r4, r5, r7, lr}
 800c026:	b088      	sub	sp, #32
 800c028:	af04      	add	r7, sp, #16
 800c02a:	6078      	str	r0, [r7, #4]
 800c02c:	460b      	mov	r3, r1
 800c02e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	2b00      	cmp	r3, #0
 800c034:	d106      	bne.n	800c044 <tcp_close_shutdown+0x20>
 800c036:	4b63      	ldr	r3, [pc, #396]	; (800c1c4 <tcp_close_shutdown+0x1a0>)
 800c038:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800c03c:	4962      	ldr	r1, [pc, #392]	; (800c1c8 <tcp_close_shutdown+0x1a4>)
 800c03e:	4863      	ldr	r0, [pc, #396]	; (800c1cc <tcp_close_shutdown+0x1a8>)
 800c040:	f00b fb28 	bl	8017694 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800c044:	78fb      	ldrb	r3, [r7, #3]
 800c046:	2b00      	cmp	r3, #0
 800c048:	d066      	beq.n	800c118 <tcp_close_shutdown+0xf4>
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	7d1b      	ldrb	r3, [r3, #20]
 800c04e:	2b04      	cmp	r3, #4
 800c050:	d003      	beq.n	800c05a <tcp_close_shutdown+0x36>
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	7d1b      	ldrb	r3, [r3, #20]
 800c056:	2b07      	cmp	r3, #7
 800c058:	d15e      	bne.n	800c118 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d104      	bne.n	800c06c <tcp_close_shutdown+0x48>
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c066:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800c06a:	d055      	beq.n	800c118 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	8b5b      	ldrh	r3, [r3, #26]
 800c070:	f003 0310 	and.w	r3, r3, #16
 800c074:	2b00      	cmp	r3, #0
 800c076:	d106      	bne.n	800c086 <tcp_close_shutdown+0x62>
 800c078:	4b52      	ldr	r3, [pc, #328]	; (800c1c4 <tcp_close_shutdown+0x1a0>)
 800c07a:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800c07e:	4954      	ldr	r1, [pc, #336]	; (800c1d0 <tcp_close_shutdown+0x1ac>)
 800c080:	4852      	ldr	r0, [pc, #328]	; (800c1cc <tcp_close_shutdown+0x1a8>)
 800c082:	f00b fb07 	bl	8017694 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800c08e:	687d      	ldr	r5, [r7, #4]
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	3304      	adds	r3, #4
 800c094:	687a      	ldr	r2, [r7, #4]
 800c096:	8ad2      	ldrh	r2, [r2, #22]
 800c098:	6879      	ldr	r1, [r7, #4]
 800c09a:	8b09      	ldrh	r1, [r1, #24]
 800c09c:	9102      	str	r1, [sp, #8]
 800c09e:	9201      	str	r2, [sp, #4]
 800c0a0:	9300      	str	r3, [sp, #0]
 800c0a2:	462b      	mov	r3, r5
 800c0a4:	4622      	mov	r2, r4
 800c0a6:	4601      	mov	r1, r0
 800c0a8:	6878      	ldr	r0, [r7, #4]
 800c0aa:	f005 fdbb 	bl	8011c24 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800c0ae:	6878      	ldr	r0, [r7, #4]
 800c0b0:	f001 fb98 	bl	800d7e4 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800c0b4:	4b47      	ldr	r3, [pc, #284]	; (800c1d4 <tcp_close_shutdown+0x1b0>)
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	687a      	ldr	r2, [r7, #4]
 800c0ba:	429a      	cmp	r2, r3
 800c0bc:	d105      	bne.n	800c0ca <tcp_close_shutdown+0xa6>
 800c0be:	4b45      	ldr	r3, [pc, #276]	; (800c1d4 <tcp_close_shutdown+0x1b0>)
 800c0c0:	681b      	ldr	r3, [r3, #0]
 800c0c2:	68db      	ldr	r3, [r3, #12]
 800c0c4:	4a43      	ldr	r2, [pc, #268]	; (800c1d4 <tcp_close_shutdown+0x1b0>)
 800c0c6:	6013      	str	r3, [r2, #0]
 800c0c8:	e013      	b.n	800c0f2 <tcp_close_shutdown+0xce>
 800c0ca:	4b42      	ldr	r3, [pc, #264]	; (800c1d4 <tcp_close_shutdown+0x1b0>)
 800c0cc:	681b      	ldr	r3, [r3, #0]
 800c0ce:	60fb      	str	r3, [r7, #12]
 800c0d0:	e00c      	b.n	800c0ec <tcp_close_shutdown+0xc8>
 800c0d2:	68fb      	ldr	r3, [r7, #12]
 800c0d4:	68db      	ldr	r3, [r3, #12]
 800c0d6:	687a      	ldr	r2, [r7, #4]
 800c0d8:	429a      	cmp	r2, r3
 800c0da:	d104      	bne.n	800c0e6 <tcp_close_shutdown+0xc2>
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	68da      	ldr	r2, [r3, #12]
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	60da      	str	r2, [r3, #12]
 800c0e4:	e005      	b.n	800c0f2 <tcp_close_shutdown+0xce>
 800c0e6:	68fb      	ldr	r3, [r7, #12]
 800c0e8:	68db      	ldr	r3, [r3, #12]
 800c0ea:	60fb      	str	r3, [r7, #12]
 800c0ec:	68fb      	ldr	r3, [r7, #12]
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	d1ef      	bne.n	800c0d2 <tcp_close_shutdown+0xae>
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	2200      	movs	r2, #0
 800c0f6:	60da      	str	r2, [r3, #12]
 800c0f8:	4b37      	ldr	r3, [pc, #220]	; (800c1d8 <tcp_close_shutdown+0x1b4>)
 800c0fa:	2201      	movs	r2, #1
 800c0fc:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800c0fe:	4b37      	ldr	r3, [pc, #220]	; (800c1dc <tcp_close_shutdown+0x1b8>)
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	687a      	ldr	r2, [r7, #4]
 800c104:	429a      	cmp	r2, r3
 800c106:	d102      	bne.n	800c10e <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800c108:	f004 f830 	bl	801016c <tcp_trigger_input_pcb_close>
 800c10c:	e002      	b.n	800c114 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800c10e:	6878      	ldr	r0, [r7, #4]
 800c110:	f7ff fed6 	bl	800bec0 <tcp_free>
      }
      return ERR_OK;
 800c114:	2300      	movs	r3, #0
 800c116:	e050      	b.n	800c1ba <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	7d1b      	ldrb	r3, [r3, #20]
 800c11c:	2b02      	cmp	r3, #2
 800c11e:	d03b      	beq.n	800c198 <tcp_close_shutdown+0x174>
 800c120:	2b02      	cmp	r3, #2
 800c122:	dc44      	bgt.n	800c1ae <tcp_close_shutdown+0x18a>
 800c124:	2b00      	cmp	r3, #0
 800c126:	d002      	beq.n	800c12e <tcp_close_shutdown+0x10a>
 800c128:	2b01      	cmp	r3, #1
 800c12a:	d02a      	beq.n	800c182 <tcp_close_shutdown+0x15e>
 800c12c:	e03f      	b.n	800c1ae <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	8adb      	ldrh	r3, [r3, #22]
 800c132:	2b00      	cmp	r3, #0
 800c134:	d021      	beq.n	800c17a <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800c136:	4b2a      	ldr	r3, [pc, #168]	; (800c1e0 <tcp_close_shutdown+0x1bc>)
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	687a      	ldr	r2, [r7, #4]
 800c13c:	429a      	cmp	r2, r3
 800c13e:	d105      	bne.n	800c14c <tcp_close_shutdown+0x128>
 800c140:	4b27      	ldr	r3, [pc, #156]	; (800c1e0 <tcp_close_shutdown+0x1bc>)
 800c142:	681b      	ldr	r3, [r3, #0]
 800c144:	68db      	ldr	r3, [r3, #12]
 800c146:	4a26      	ldr	r2, [pc, #152]	; (800c1e0 <tcp_close_shutdown+0x1bc>)
 800c148:	6013      	str	r3, [r2, #0]
 800c14a:	e013      	b.n	800c174 <tcp_close_shutdown+0x150>
 800c14c:	4b24      	ldr	r3, [pc, #144]	; (800c1e0 <tcp_close_shutdown+0x1bc>)
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	60bb      	str	r3, [r7, #8]
 800c152:	e00c      	b.n	800c16e <tcp_close_shutdown+0x14a>
 800c154:	68bb      	ldr	r3, [r7, #8]
 800c156:	68db      	ldr	r3, [r3, #12]
 800c158:	687a      	ldr	r2, [r7, #4]
 800c15a:	429a      	cmp	r2, r3
 800c15c:	d104      	bne.n	800c168 <tcp_close_shutdown+0x144>
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	68da      	ldr	r2, [r3, #12]
 800c162:	68bb      	ldr	r3, [r7, #8]
 800c164:	60da      	str	r2, [r3, #12]
 800c166:	e005      	b.n	800c174 <tcp_close_shutdown+0x150>
 800c168:	68bb      	ldr	r3, [r7, #8]
 800c16a:	68db      	ldr	r3, [r3, #12]
 800c16c:	60bb      	str	r3, [r7, #8]
 800c16e:	68bb      	ldr	r3, [r7, #8]
 800c170:	2b00      	cmp	r3, #0
 800c172:	d1ef      	bne.n	800c154 <tcp_close_shutdown+0x130>
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	2200      	movs	r2, #0
 800c178:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800c17a:	6878      	ldr	r0, [r7, #4]
 800c17c:	f7ff fea0 	bl	800bec0 <tcp_free>
      break;
 800c180:	e01a      	b.n	800c1b8 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800c182:	6878      	ldr	r0, [r7, #4]
 800c184:	f7ff ff14 	bl	800bfb0 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800c188:	6879      	ldr	r1, [r7, #4]
 800c18a:	4816      	ldr	r0, [pc, #88]	; (800c1e4 <tcp_close_shutdown+0x1c0>)
 800c18c:	f001 fb7a 	bl	800d884 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800c190:	6878      	ldr	r0, [r7, #4]
 800c192:	f7ff feb1 	bl	800bef8 <tcp_free_listen>
      break;
 800c196:	e00f      	b.n	800c1b8 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800c198:	6879      	ldr	r1, [r7, #4]
 800c19a:	480e      	ldr	r0, [pc, #56]	; (800c1d4 <tcp_close_shutdown+0x1b0>)
 800c19c:	f001 fb72 	bl	800d884 <tcp_pcb_remove>
 800c1a0:	4b0d      	ldr	r3, [pc, #52]	; (800c1d8 <tcp_close_shutdown+0x1b4>)
 800c1a2:	2201      	movs	r2, #1
 800c1a4:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800c1a6:	6878      	ldr	r0, [r7, #4]
 800c1a8:	f7ff fe8a 	bl	800bec0 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800c1ac:	e004      	b.n	800c1b8 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800c1ae:	6878      	ldr	r0, [r7, #4]
 800c1b0:	f000 f81a 	bl	800c1e8 <tcp_close_shutdown_fin>
 800c1b4:	4603      	mov	r3, r0
 800c1b6:	e000      	b.n	800c1ba <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800c1b8:	2300      	movs	r3, #0
}
 800c1ba:	4618      	mov	r0, r3
 800c1bc:	3710      	adds	r7, #16
 800c1be:	46bd      	mov	sp, r7
 800c1c0:	bdb0      	pop	{r4, r5, r7, pc}
 800c1c2:	bf00      	nop
 800c1c4:	08019b9c 	.word	0x08019b9c
 800c1c8:	08019c70 	.word	0x08019c70
 800c1cc:	08019be0 	.word	0x08019be0
 800c1d0:	08019c90 	.word	0x08019c90
 800c1d4:	20010944 	.word	0x20010944
 800c1d8:	2001094c 	.word	0x2001094c
 800c1dc:	20010984 	.word	0x20010984
 800c1e0:	2001093c 	.word	0x2001093c
 800c1e4:	20010940 	.word	0x20010940

0800c1e8 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800c1e8:	b580      	push	{r7, lr}
 800c1ea:	b084      	sub	sp, #16
 800c1ec:	af00      	add	r7, sp, #0
 800c1ee:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	2b00      	cmp	r3, #0
 800c1f4:	d106      	bne.n	800c204 <tcp_close_shutdown_fin+0x1c>
 800c1f6:	4b2e      	ldr	r3, [pc, #184]	; (800c2b0 <tcp_close_shutdown_fin+0xc8>)
 800c1f8:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800c1fc:	492d      	ldr	r1, [pc, #180]	; (800c2b4 <tcp_close_shutdown_fin+0xcc>)
 800c1fe:	482e      	ldr	r0, [pc, #184]	; (800c2b8 <tcp_close_shutdown_fin+0xd0>)
 800c200:	f00b fa48 	bl	8017694 <iprintf>

  switch (pcb->state) {
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	7d1b      	ldrb	r3, [r3, #20]
 800c208:	2b07      	cmp	r3, #7
 800c20a:	d020      	beq.n	800c24e <tcp_close_shutdown_fin+0x66>
 800c20c:	2b07      	cmp	r3, #7
 800c20e:	dc2b      	bgt.n	800c268 <tcp_close_shutdown_fin+0x80>
 800c210:	2b03      	cmp	r3, #3
 800c212:	d002      	beq.n	800c21a <tcp_close_shutdown_fin+0x32>
 800c214:	2b04      	cmp	r3, #4
 800c216:	d00d      	beq.n	800c234 <tcp_close_shutdown_fin+0x4c>
 800c218:	e026      	b.n	800c268 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800c21a:	6878      	ldr	r0, [r7, #4]
 800c21c:	f004 fe10 	bl	8010e40 <tcp_send_fin>
 800c220:	4603      	mov	r3, r0
 800c222:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800c224:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c228:	2b00      	cmp	r3, #0
 800c22a:	d11f      	bne.n	800c26c <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	2205      	movs	r2, #5
 800c230:	751a      	strb	r2, [r3, #20]
      }
      break;
 800c232:	e01b      	b.n	800c26c <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800c234:	6878      	ldr	r0, [r7, #4]
 800c236:	f004 fe03 	bl	8010e40 <tcp_send_fin>
 800c23a:	4603      	mov	r3, r0
 800c23c:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800c23e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c242:	2b00      	cmp	r3, #0
 800c244:	d114      	bne.n	800c270 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	2205      	movs	r2, #5
 800c24a:	751a      	strb	r2, [r3, #20]
      }
      break;
 800c24c:	e010      	b.n	800c270 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800c24e:	6878      	ldr	r0, [r7, #4]
 800c250:	f004 fdf6 	bl	8010e40 <tcp_send_fin>
 800c254:	4603      	mov	r3, r0
 800c256:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800c258:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	d109      	bne.n	800c274 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	2209      	movs	r2, #9
 800c264:	751a      	strb	r2, [r3, #20]
      }
      break;
 800c266:	e005      	b.n	800c274 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800c268:	2300      	movs	r3, #0
 800c26a:	e01c      	b.n	800c2a6 <tcp_close_shutdown_fin+0xbe>
      break;
 800c26c:	bf00      	nop
 800c26e:	e002      	b.n	800c276 <tcp_close_shutdown_fin+0x8e>
      break;
 800c270:	bf00      	nop
 800c272:	e000      	b.n	800c276 <tcp_close_shutdown_fin+0x8e>
      break;
 800c274:	bf00      	nop
  }

  if (err == ERR_OK) {
 800c276:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	d103      	bne.n	800c286 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800c27e:	6878      	ldr	r0, [r7, #4]
 800c280:	f004 ff1c 	bl	80110bc <tcp_output>
 800c284:	e00d      	b.n	800c2a2 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800c286:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c28a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c28e:	d108      	bne.n	800c2a2 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	8b5b      	ldrh	r3, [r3, #26]
 800c294:	f043 0308 	orr.w	r3, r3, #8
 800c298:	b29a      	uxth	r2, r3
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800c29e:	2300      	movs	r3, #0
 800c2a0:	e001      	b.n	800c2a6 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800c2a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c2a6:	4618      	mov	r0, r3
 800c2a8:	3710      	adds	r7, #16
 800c2aa:	46bd      	mov	sp, r7
 800c2ac:	bd80      	pop	{r7, pc}
 800c2ae:	bf00      	nop
 800c2b0:	08019b9c 	.word	0x08019b9c
 800c2b4:	08019c4c 	.word	0x08019c4c
 800c2b8:	08019be0 	.word	0x08019be0

0800c2bc <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800c2bc:	b580      	push	{r7, lr}
 800c2be:	b082      	sub	sp, #8
 800c2c0:	af00      	add	r7, sp, #0
 800c2c2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	d109      	bne.n	800c2de <tcp_close+0x22>
 800c2ca:	4b0f      	ldr	r3, [pc, #60]	; (800c308 <tcp_close+0x4c>)
 800c2cc:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800c2d0:	490e      	ldr	r1, [pc, #56]	; (800c30c <tcp_close+0x50>)
 800c2d2:	480f      	ldr	r0, [pc, #60]	; (800c310 <tcp_close+0x54>)
 800c2d4:	f00b f9de 	bl	8017694 <iprintf>
 800c2d8:	f06f 030f 	mvn.w	r3, #15
 800c2dc:	e00f      	b.n	800c2fe <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	7d1b      	ldrb	r3, [r3, #20]
 800c2e2:	2b01      	cmp	r3, #1
 800c2e4:	d006      	beq.n	800c2f4 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	8b5b      	ldrh	r3, [r3, #26]
 800c2ea:	f043 0310 	orr.w	r3, r3, #16
 800c2ee:	b29a      	uxth	r2, r3
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800c2f4:	2101      	movs	r1, #1
 800c2f6:	6878      	ldr	r0, [r7, #4]
 800c2f8:	f7ff fe94 	bl	800c024 <tcp_close_shutdown>
 800c2fc:	4603      	mov	r3, r0
}
 800c2fe:	4618      	mov	r0, r3
 800c300:	3708      	adds	r7, #8
 800c302:	46bd      	mov	sp, r7
 800c304:	bd80      	pop	{r7, pc}
 800c306:	bf00      	nop
 800c308:	08019b9c 	.word	0x08019b9c
 800c30c:	08019cac 	.word	0x08019cac
 800c310:	08019be0 	.word	0x08019be0

0800c314 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 800c314:	b580      	push	{r7, lr}
 800c316:	b084      	sub	sp, #16
 800c318:	af00      	add	r7, sp, #0
 800c31a:	60f8      	str	r0, [r7, #12]
 800c31c:	60b9      	str	r1, [r7, #8]
 800c31e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 800c320:	68fb      	ldr	r3, [r7, #12]
 800c322:	2b00      	cmp	r3, #0
 800c324:	d109      	bne.n	800c33a <tcp_shutdown+0x26>
 800c326:	4b26      	ldr	r3, [pc, #152]	; (800c3c0 <tcp_shutdown+0xac>)
 800c328:	f240 2207 	movw	r2, #519	; 0x207
 800c32c:	4925      	ldr	r1, [pc, #148]	; (800c3c4 <tcp_shutdown+0xb0>)
 800c32e:	4826      	ldr	r0, [pc, #152]	; (800c3c8 <tcp_shutdown+0xb4>)
 800c330:	f00b f9b0 	bl	8017694 <iprintf>
 800c334:	f06f 030f 	mvn.w	r3, #15
 800c338:	e03d      	b.n	800c3b6 <tcp_shutdown+0xa2>

  if (pcb->state == LISTEN) {
 800c33a:	68fb      	ldr	r3, [r7, #12]
 800c33c:	7d1b      	ldrb	r3, [r3, #20]
 800c33e:	2b01      	cmp	r3, #1
 800c340:	d102      	bne.n	800c348 <tcp_shutdown+0x34>
    return ERR_CONN;
 800c342:	f06f 030a 	mvn.w	r3, #10
 800c346:	e036      	b.n	800c3b6 <tcp_shutdown+0xa2>
  }
  if (shut_rx) {
 800c348:	68bb      	ldr	r3, [r7, #8]
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d01b      	beq.n	800c386 <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800c34e:	68fb      	ldr	r3, [r7, #12]
 800c350:	8b5b      	ldrh	r3, [r3, #26]
 800c352:	f043 0310 	orr.w	r3, r3, #16
 800c356:	b29a      	uxth	r2, r3
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	2b00      	cmp	r3, #0
 800c360:	d005      	beq.n	800c36e <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 800c362:	2101      	movs	r1, #1
 800c364:	68f8      	ldr	r0, [r7, #12]
 800c366:	f7ff fe5d 	bl	800c024 <tcp_close_shutdown>
 800c36a:	4603      	mov	r3, r0
 800c36c:	e023      	b.n	800c3b6 <tcp_shutdown+0xa2>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 800c36e:	68fb      	ldr	r3, [r7, #12]
 800c370:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c372:	2b00      	cmp	r3, #0
 800c374:	d007      	beq.n	800c386 <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 800c376:	68fb      	ldr	r3, [r7, #12]
 800c378:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c37a:	4618      	mov	r0, r3
 800c37c:	f7ff fae4 	bl	800b948 <pbuf_free>
      pcb->refused_data = NULL;
 800c380:	68fb      	ldr	r3, [r7, #12]
 800c382:	2200      	movs	r2, #0
 800c384:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }
  if (shut_tx) {
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	2b00      	cmp	r3, #0
 800c38a:	d013      	beq.n	800c3b4 <tcp_shutdown+0xa0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 800c38c:	68fb      	ldr	r3, [r7, #12]
 800c38e:	7d1b      	ldrb	r3, [r3, #20]
 800c390:	2b04      	cmp	r3, #4
 800c392:	dc02      	bgt.n	800c39a <tcp_shutdown+0x86>
 800c394:	2b03      	cmp	r3, #3
 800c396:	da02      	bge.n	800c39e <tcp_shutdown+0x8a>
 800c398:	e009      	b.n	800c3ae <tcp_shutdown+0x9a>
 800c39a:	2b07      	cmp	r3, #7
 800c39c:	d107      	bne.n	800c3ae <tcp_shutdown+0x9a>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 800c39e:	68bb      	ldr	r3, [r7, #8]
 800c3a0:	b2db      	uxtb	r3, r3
 800c3a2:	4619      	mov	r1, r3
 800c3a4:	68f8      	ldr	r0, [r7, #12]
 800c3a6:	f7ff fe3d 	bl	800c024 <tcp_close_shutdown>
 800c3aa:	4603      	mov	r3, r0
 800c3ac:	e003      	b.n	800c3b6 <tcp_shutdown+0xa2>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 800c3ae:	f06f 030a 	mvn.w	r3, #10
 800c3b2:	e000      	b.n	800c3b6 <tcp_shutdown+0xa2>
    }
  }
  return ERR_OK;
 800c3b4:	2300      	movs	r3, #0
}
 800c3b6:	4618      	mov	r0, r3
 800c3b8:	3710      	adds	r7, #16
 800c3ba:	46bd      	mov	sp, r7
 800c3bc:	bd80      	pop	{r7, pc}
 800c3be:	bf00      	nop
 800c3c0:	08019b9c 	.word	0x08019b9c
 800c3c4:	08019cc4 	.word	0x08019cc4
 800c3c8:	08019be0 	.word	0x08019be0

0800c3cc <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800c3cc:	b580      	push	{r7, lr}
 800c3ce:	b08e      	sub	sp, #56	; 0x38
 800c3d0:	af04      	add	r7, sp, #16
 800c3d2:	6078      	str	r0, [r7, #4]
 800c3d4:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	d107      	bne.n	800c3ec <tcp_abandon+0x20>
 800c3dc:	4b52      	ldr	r3, [pc, #328]	; (800c528 <tcp_abandon+0x15c>)
 800c3de:	f240 223d 	movw	r2, #573	; 0x23d
 800c3e2:	4952      	ldr	r1, [pc, #328]	; (800c52c <tcp_abandon+0x160>)
 800c3e4:	4852      	ldr	r0, [pc, #328]	; (800c530 <tcp_abandon+0x164>)
 800c3e6:	f00b f955 	bl	8017694 <iprintf>
 800c3ea:	e099      	b.n	800c520 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	7d1b      	ldrb	r3, [r3, #20]
 800c3f0:	2b01      	cmp	r3, #1
 800c3f2:	d106      	bne.n	800c402 <tcp_abandon+0x36>
 800c3f4:	4b4c      	ldr	r3, [pc, #304]	; (800c528 <tcp_abandon+0x15c>)
 800c3f6:	f44f 7210 	mov.w	r2, #576	; 0x240
 800c3fa:	494e      	ldr	r1, [pc, #312]	; (800c534 <tcp_abandon+0x168>)
 800c3fc:	484c      	ldr	r0, [pc, #304]	; (800c530 <tcp_abandon+0x164>)
 800c3fe:	f00b f949 	bl	8017694 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	7d1b      	ldrb	r3, [r3, #20]
 800c406:	2b0a      	cmp	r3, #10
 800c408:	d107      	bne.n	800c41a <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800c40a:	6879      	ldr	r1, [r7, #4]
 800c40c:	484a      	ldr	r0, [pc, #296]	; (800c538 <tcp_abandon+0x16c>)
 800c40e:	f001 fa39 	bl	800d884 <tcp_pcb_remove>
    tcp_free(pcb);
 800c412:	6878      	ldr	r0, [r7, #4]
 800c414:	f7ff fd54 	bl	800bec0 <tcp_free>
 800c418:	e082      	b.n	800c520 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800c41a:	2300      	movs	r3, #0
 800c41c:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800c41e:	2300      	movs	r3, #0
 800c420:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c426:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c42c:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c434:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	691b      	ldr	r3, [r3, #16]
 800c43a:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	7d1b      	ldrb	r3, [r3, #20]
 800c440:	2b00      	cmp	r3, #0
 800c442:	d126      	bne.n	800c492 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	8adb      	ldrh	r3, [r3, #22]
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d02e      	beq.n	800c4aa <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800c44c:	4b3b      	ldr	r3, [pc, #236]	; (800c53c <tcp_abandon+0x170>)
 800c44e:	681b      	ldr	r3, [r3, #0]
 800c450:	687a      	ldr	r2, [r7, #4]
 800c452:	429a      	cmp	r2, r3
 800c454:	d105      	bne.n	800c462 <tcp_abandon+0x96>
 800c456:	4b39      	ldr	r3, [pc, #228]	; (800c53c <tcp_abandon+0x170>)
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	68db      	ldr	r3, [r3, #12]
 800c45c:	4a37      	ldr	r2, [pc, #220]	; (800c53c <tcp_abandon+0x170>)
 800c45e:	6013      	str	r3, [r2, #0]
 800c460:	e013      	b.n	800c48a <tcp_abandon+0xbe>
 800c462:	4b36      	ldr	r3, [pc, #216]	; (800c53c <tcp_abandon+0x170>)
 800c464:	681b      	ldr	r3, [r3, #0]
 800c466:	61fb      	str	r3, [r7, #28]
 800c468:	e00c      	b.n	800c484 <tcp_abandon+0xb8>
 800c46a:	69fb      	ldr	r3, [r7, #28]
 800c46c:	68db      	ldr	r3, [r3, #12]
 800c46e:	687a      	ldr	r2, [r7, #4]
 800c470:	429a      	cmp	r2, r3
 800c472:	d104      	bne.n	800c47e <tcp_abandon+0xb2>
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	68da      	ldr	r2, [r3, #12]
 800c478:	69fb      	ldr	r3, [r7, #28]
 800c47a:	60da      	str	r2, [r3, #12]
 800c47c:	e005      	b.n	800c48a <tcp_abandon+0xbe>
 800c47e:	69fb      	ldr	r3, [r7, #28]
 800c480:	68db      	ldr	r3, [r3, #12]
 800c482:	61fb      	str	r3, [r7, #28]
 800c484:	69fb      	ldr	r3, [r7, #28]
 800c486:	2b00      	cmp	r3, #0
 800c488:	d1ef      	bne.n	800c46a <tcp_abandon+0x9e>
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	2200      	movs	r2, #0
 800c48e:	60da      	str	r2, [r3, #12]
 800c490:	e00b      	b.n	800c4aa <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800c492:	683b      	ldr	r3, [r7, #0]
 800c494:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	8adb      	ldrh	r3, [r3, #22]
 800c49a:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800c49c:	6879      	ldr	r1, [r7, #4]
 800c49e:	4828      	ldr	r0, [pc, #160]	; (800c540 <tcp_abandon+0x174>)
 800c4a0:	f001 f9f0 	bl	800d884 <tcp_pcb_remove>
 800c4a4:	4b27      	ldr	r3, [pc, #156]	; (800c544 <tcp_abandon+0x178>)
 800c4a6:	2201      	movs	r2, #1
 800c4a8:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	d004      	beq.n	800c4bc <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c4b6:	4618      	mov	r0, r3
 800c4b8:	f000 fec4 	bl	800d244 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	d004      	beq.n	800c4ce <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c4c8:	4618      	mov	r0, r3
 800c4ca:	f000 febb 	bl	800d244 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d004      	beq.n	800c4e0 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c4da:	4618      	mov	r0, r3
 800c4dc:	f000 feb2 	bl	800d244 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800c4e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	d00e      	beq.n	800c504 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800c4e6:	6879      	ldr	r1, [r7, #4]
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	3304      	adds	r3, #4
 800c4ec:	687a      	ldr	r2, [r7, #4]
 800c4ee:	8b12      	ldrh	r2, [r2, #24]
 800c4f0:	9202      	str	r2, [sp, #8]
 800c4f2:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800c4f4:	9201      	str	r2, [sp, #4]
 800c4f6:	9300      	str	r3, [sp, #0]
 800c4f8:	460b      	mov	r3, r1
 800c4fa:	697a      	ldr	r2, [r7, #20]
 800c4fc:	69b9      	ldr	r1, [r7, #24]
 800c4fe:	6878      	ldr	r0, [r7, #4]
 800c500:	f005 fb90 	bl	8011c24 <tcp_rst>
    }
    last_state = pcb->state;
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	7d1b      	ldrb	r3, [r3, #20]
 800c508:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800c50a:	6878      	ldr	r0, [r7, #4]
 800c50c:	f7ff fcd8 	bl	800bec0 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800c510:	693b      	ldr	r3, [r7, #16]
 800c512:	2b00      	cmp	r3, #0
 800c514:	d004      	beq.n	800c520 <tcp_abandon+0x154>
 800c516:	693b      	ldr	r3, [r7, #16]
 800c518:	f06f 010c 	mvn.w	r1, #12
 800c51c:	68f8      	ldr	r0, [r7, #12]
 800c51e:	4798      	blx	r3
  }
}
 800c520:	3728      	adds	r7, #40	; 0x28
 800c522:	46bd      	mov	sp, r7
 800c524:	bd80      	pop	{r7, pc}
 800c526:	bf00      	nop
 800c528:	08019b9c 	.word	0x08019b9c
 800c52c:	08019ce0 	.word	0x08019ce0
 800c530:	08019be0 	.word	0x08019be0
 800c534:	08019cfc 	.word	0x08019cfc
 800c538:	20010948 	.word	0x20010948
 800c53c:	2001093c 	.word	0x2001093c
 800c540:	20010944 	.word	0x20010944
 800c544:	2001094c 	.word	0x2001094c

0800c548 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800c548:	b580      	push	{r7, lr}
 800c54a:	b082      	sub	sp, #8
 800c54c:	af00      	add	r7, sp, #0
 800c54e:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800c550:	2101      	movs	r1, #1
 800c552:	6878      	ldr	r0, [r7, #4]
 800c554:	f7ff ff3a 	bl	800c3cc <tcp_abandon>
}
 800c558:	bf00      	nop
 800c55a:	3708      	adds	r7, #8
 800c55c:	46bd      	mov	sp, r7
 800c55e:	bd80      	pop	{r7, pc}

0800c560 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800c560:	b580      	push	{r7, lr}
 800c562:	b088      	sub	sp, #32
 800c564:	af00      	add	r7, sp, #0
 800c566:	60f8      	str	r0, [r7, #12]
 800c568:	60b9      	str	r1, [r7, #8]
 800c56a:	4613      	mov	r3, r2
 800c56c:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 800c56e:	2304      	movs	r3, #4
 800c570:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800c572:	68bb      	ldr	r3, [r7, #8]
 800c574:	2b00      	cmp	r3, #0
 800c576:	d101      	bne.n	800c57c <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 800c578:	4b3e      	ldr	r3, [pc, #248]	; (800c674 <tcp_bind+0x114>)
 800c57a:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800c57c:	68fb      	ldr	r3, [r7, #12]
 800c57e:	2b00      	cmp	r3, #0
 800c580:	d109      	bne.n	800c596 <tcp_bind+0x36>
 800c582:	4b3d      	ldr	r3, [pc, #244]	; (800c678 <tcp_bind+0x118>)
 800c584:	f240 22a9 	movw	r2, #681	; 0x2a9
 800c588:	493c      	ldr	r1, [pc, #240]	; (800c67c <tcp_bind+0x11c>)
 800c58a:	483d      	ldr	r0, [pc, #244]	; (800c680 <tcp_bind+0x120>)
 800c58c:	f00b f882 	bl	8017694 <iprintf>
 800c590:	f06f 030f 	mvn.w	r3, #15
 800c594:	e06a      	b.n	800c66c <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800c596:	68fb      	ldr	r3, [r7, #12]
 800c598:	7d1b      	ldrb	r3, [r3, #20]
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	d009      	beq.n	800c5b2 <tcp_bind+0x52>
 800c59e:	4b36      	ldr	r3, [pc, #216]	; (800c678 <tcp_bind+0x118>)
 800c5a0:	f240 22ab 	movw	r2, #683	; 0x2ab
 800c5a4:	4937      	ldr	r1, [pc, #220]	; (800c684 <tcp_bind+0x124>)
 800c5a6:	4836      	ldr	r0, [pc, #216]	; (800c680 <tcp_bind+0x120>)
 800c5a8:	f00b f874 	bl	8017694 <iprintf>
 800c5ac:	f06f 0305 	mvn.w	r3, #5
 800c5b0:	e05c      	b.n	800c66c <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 800c5b2:	88fb      	ldrh	r3, [r7, #6]
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	d109      	bne.n	800c5cc <tcp_bind+0x6c>
    port = tcp_new_port();
 800c5b8:	f000 f9de 	bl	800c978 <tcp_new_port>
 800c5bc:	4603      	mov	r3, r0
 800c5be:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800c5c0:	88fb      	ldrh	r3, [r7, #6]
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	d135      	bne.n	800c632 <tcp_bind+0xd2>
      return ERR_BUF;
 800c5c6:	f06f 0301 	mvn.w	r3, #1
 800c5ca:	e04f      	b.n	800c66c <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 800c5cc:	2300      	movs	r3, #0
 800c5ce:	61fb      	str	r3, [r7, #28]
 800c5d0:	e02b      	b.n	800c62a <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800c5d2:	4a2d      	ldr	r2, [pc, #180]	; (800c688 <tcp_bind+0x128>)
 800c5d4:	69fb      	ldr	r3, [r7, #28]
 800c5d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c5da:	681b      	ldr	r3, [r3, #0]
 800c5dc:	61bb      	str	r3, [r7, #24]
 800c5de:	e01e      	b.n	800c61e <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 800c5e0:	69bb      	ldr	r3, [r7, #24]
 800c5e2:	8adb      	ldrh	r3, [r3, #22]
 800c5e4:	88fa      	ldrh	r2, [r7, #6]
 800c5e6:	429a      	cmp	r2, r3
 800c5e8:	d116      	bne.n	800c618 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 800c5ea:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	d010      	beq.n	800c612 <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 800c5f0:	69bb      	ldr	r3, [r7, #24]
 800c5f2:	681b      	ldr	r3, [r3, #0]
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d00c      	beq.n	800c612 <tcp_bind+0xb2>
 800c5f8:	68bb      	ldr	r3, [r7, #8]
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	d009      	beq.n	800c612 <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 800c5fe:	68bb      	ldr	r3, [r7, #8]
 800c600:	681b      	ldr	r3, [r3, #0]
 800c602:	2b00      	cmp	r3, #0
 800c604:	d005      	beq.n	800c612 <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 800c606:	69bb      	ldr	r3, [r7, #24]
 800c608:	681a      	ldr	r2, [r3, #0]
 800c60a:	68bb      	ldr	r3, [r7, #8]
 800c60c:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800c60e:	429a      	cmp	r2, r3
 800c610:	d102      	bne.n	800c618 <tcp_bind+0xb8>
              return ERR_USE;
 800c612:	f06f 0307 	mvn.w	r3, #7
 800c616:	e029      	b.n	800c66c <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800c618:	69bb      	ldr	r3, [r7, #24]
 800c61a:	68db      	ldr	r3, [r3, #12]
 800c61c:	61bb      	str	r3, [r7, #24]
 800c61e:	69bb      	ldr	r3, [r7, #24]
 800c620:	2b00      	cmp	r3, #0
 800c622:	d1dd      	bne.n	800c5e0 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 800c624:	69fb      	ldr	r3, [r7, #28]
 800c626:	3301      	adds	r3, #1
 800c628:	61fb      	str	r3, [r7, #28]
 800c62a:	69fa      	ldr	r2, [r7, #28]
 800c62c:	697b      	ldr	r3, [r7, #20]
 800c62e:	429a      	cmp	r2, r3
 800c630:	dbcf      	blt.n	800c5d2 <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 800c632:	68bb      	ldr	r3, [r7, #8]
 800c634:	2b00      	cmp	r3, #0
 800c636:	d00c      	beq.n	800c652 <tcp_bind+0xf2>
 800c638:	68bb      	ldr	r3, [r7, #8]
 800c63a:	681b      	ldr	r3, [r3, #0]
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	d008      	beq.n	800c652 <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 800c640:	68bb      	ldr	r3, [r7, #8]
 800c642:	2b00      	cmp	r3, #0
 800c644:	d002      	beq.n	800c64c <tcp_bind+0xec>
 800c646:	68bb      	ldr	r3, [r7, #8]
 800c648:	681b      	ldr	r3, [r3, #0]
 800c64a:	e000      	b.n	800c64e <tcp_bind+0xee>
 800c64c:	2300      	movs	r3, #0
 800c64e:	68fa      	ldr	r2, [r7, #12]
 800c650:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 800c652:	68fb      	ldr	r3, [r7, #12]
 800c654:	88fa      	ldrh	r2, [r7, #6]
 800c656:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800c658:	4b0c      	ldr	r3, [pc, #48]	; (800c68c <tcp_bind+0x12c>)
 800c65a:	681a      	ldr	r2, [r3, #0]
 800c65c:	68fb      	ldr	r3, [r7, #12]
 800c65e:	60da      	str	r2, [r3, #12]
 800c660:	4a0a      	ldr	r2, [pc, #40]	; (800c68c <tcp_bind+0x12c>)
 800c662:	68fb      	ldr	r3, [r7, #12]
 800c664:	6013      	str	r3, [r2, #0]
 800c666:	f005 fc9f 	bl	8011fa8 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 800c66a:	2300      	movs	r3, #0
}
 800c66c:	4618      	mov	r0, r3
 800c66e:	3720      	adds	r7, #32
 800c670:	46bd      	mov	sp, r7
 800c672:	bd80      	pop	{r7, pc}
 800c674:	0801bf98 	.word	0x0801bf98
 800c678:	08019b9c 	.word	0x08019b9c
 800c67c:	08019d30 	.word	0x08019d30
 800c680:	08019be0 	.word	0x08019be0
 800c684:	08019d48 	.word	0x08019d48
 800c688:	0801bf60 	.word	0x0801bf60
 800c68c:	2001093c 	.word	0x2001093c

0800c690 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 800c690:	b580      	push	{r7, lr}
 800c692:	b084      	sub	sp, #16
 800c694:	af00      	add	r7, sp, #0
 800c696:	60f8      	str	r0, [r7, #12]
 800c698:	60b9      	str	r1, [r7, #8]
 800c69a:	4613      	mov	r3, r2
 800c69c:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 800c69e:	68bb      	ldr	r3, [r7, #8]
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	d106      	bne.n	800c6b2 <tcp_accept_null+0x22>
 800c6a4:	4b07      	ldr	r3, [pc, #28]	; (800c6c4 <tcp_accept_null+0x34>)
 800c6a6:	f240 320f 	movw	r2, #783	; 0x30f
 800c6aa:	4907      	ldr	r1, [pc, #28]	; (800c6c8 <tcp_accept_null+0x38>)
 800c6ac:	4807      	ldr	r0, [pc, #28]	; (800c6cc <tcp_accept_null+0x3c>)
 800c6ae:	f00a fff1 	bl	8017694 <iprintf>

  tcp_abort(pcb);
 800c6b2:	68b8      	ldr	r0, [r7, #8]
 800c6b4:	f7ff ff48 	bl	800c548 <tcp_abort>

  return ERR_ABRT;
 800c6b8:	f06f 030c 	mvn.w	r3, #12
}
 800c6bc:	4618      	mov	r0, r3
 800c6be:	3710      	adds	r7, #16
 800c6c0:	46bd      	mov	sp, r7
 800c6c2:	bd80      	pop	{r7, pc}
 800c6c4:	08019b9c 	.word	0x08019b9c
 800c6c8:	08019d70 	.word	0x08019d70
 800c6cc:	08019be0 	.word	0x08019be0

0800c6d0 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 800c6d0:	b580      	push	{r7, lr}
 800c6d2:	b088      	sub	sp, #32
 800c6d4:	af00      	add	r7, sp, #0
 800c6d6:	60f8      	str	r0, [r7, #12]
 800c6d8:	460b      	mov	r3, r1
 800c6da:	607a      	str	r2, [r7, #4]
 800c6dc:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 800c6de:	2300      	movs	r3, #0
 800c6e0:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 800c6e2:	68fb      	ldr	r3, [r7, #12]
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	d109      	bne.n	800c6fc <tcp_listen_with_backlog_and_err+0x2c>
 800c6e8:	4b47      	ldr	r3, [pc, #284]	; (800c808 <tcp_listen_with_backlog_and_err+0x138>)
 800c6ea:	f240 3259 	movw	r2, #857	; 0x359
 800c6ee:	4947      	ldr	r1, [pc, #284]	; (800c80c <tcp_listen_with_backlog_and_err+0x13c>)
 800c6f0:	4847      	ldr	r0, [pc, #284]	; (800c810 <tcp_listen_with_backlog_and_err+0x140>)
 800c6f2:	f00a ffcf 	bl	8017694 <iprintf>
 800c6f6:	23f0      	movs	r3, #240	; 0xf0
 800c6f8:	76fb      	strb	r3, [r7, #27]
 800c6fa:	e079      	b.n	800c7f0 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800c6fc:	68fb      	ldr	r3, [r7, #12]
 800c6fe:	7d1b      	ldrb	r3, [r3, #20]
 800c700:	2b00      	cmp	r3, #0
 800c702:	d009      	beq.n	800c718 <tcp_listen_with_backlog_and_err+0x48>
 800c704:	4b40      	ldr	r3, [pc, #256]	; (800c808 <tcp_listen_with_backlog_and_err+0x138>)
 800c706:	f240 325a 	movw	r2, #858	; 0x35a
 800c70a:	4942      	ldr	r1, [pc, #264]	; (800c814 <tcp_listen_with_backlog_and_err+0x144>)
 800c70c:	4840      	ldr	r0, [pc, #256]	; (800c810 <tcp_listen_with_backlog_and_err+0x140>)
 800c70e:	f00a ffc1 	bl	8017694 <iprintf>
 800c712:	23f1      	movs	r3, #241	; 0xf1
 800c714:	76fb      	strb	r3, [r7, #27]
 800c716:	e06b      	b.n	800c7f0 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 800c718:	68fb      	ldr	r3, [r7, #12]
 800c71a:	7d1b      	ldrb	r3, [r3, #20]
 800c71c:	2b01      	cmp	r3, #1
 800c71e:	d104      	bne.n	800c72a <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 800c720:	68fb      	ldr	r3, [r7, #12]
 800c722:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 800c724:	23f7      	movs	r3, #247	; 0xf7
 800c726:	76fb      	strb	r3, [r7, #27]
    goto done;
 800c728:	e062      	b.n	800c7f0 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 800c72a:	2002      	movs	r0, #2
 800c72c:	f7fe f9e6 	bl	800aafc <memp_malloc>
 800c730:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 800c732:	69fb      	ldr	r3, [r7, #28]
 800c734:	2b00      	cmp	r3, #0
 800c736:	d102      	bne.n	800c73e <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 800c738:	23ff      	movs	r3, #255	; 0xff
 800c73a:	76fb      	strb	r3, [r7, #27]
    goto done;
 800c73c:	e058      	b.n	800c7f0 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 800c73e:	68fb      	ldr	r3, [r7, #12]
 800c740:	691a      	ldr	r2, [r3, #16]
 800c742:	69fb      	ldr	r3, [r7, #28]
 800c744:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 800c746:	68fb      	ldr	r3, [r7, #12]
 800c748:	8ada      	ldrh	r2, [r3, #22]
 800c74a:	69fb      	ldr	r3, [r7, #28]
 800c74c:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 800c74e:	69fb      	ldr	r3, [r7, #28]
 800c750:	2201      	movs	r2, #1
 800c752:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 800c754:	68fb      	ldr	r3, [r7, #12]
 800c756:	7d5a      	ldrb	r2, [r3, #21]
 800c758:	69fb      	ldr	r3, [r7, #28]
 800c75a:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 800c75c:	68fb      	ldr	r3, [r7, #12]
 800c75e:	7a5a      	ldrb	r2, [r3, #9]
 800c760:	69fb      	ldr	r3, [r7, #28]
 800c762:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 800c764:	69fb      	ldr	r3, [r7, #28]
 800c766:	2200      	movs	r2, #0
 800c768:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 800c76a:	68fb      	ldr	r3, [r7, #12]
 800c76c:	7ada      	ldrb	r2, [r3, #11]
 800c76e:	69fb      	ldr	r3, [r7, #28]
 800c770:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 800c772:	68fb      	ldr	r3, [r7, #12]
 800c774:	7a9a      	ldrb	r2, [r3, #10]
 800c776:	69fb      	ldr	r3, [r7, #28]
 800c778:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 800c77a:	68fb      	ldr	r3, [r7, #12]
 800c77c:	681a      	ldr	r2, [r3, #0]
 800c77e:	69fb      	ldr	r3, [r7, #28]
 800c780:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 800c782:	68fb      	ldr	r3, [r7, #12]
 800c784:	8adb      	ldrh	r3, [r3, #22]
 800c786:	2b00      	cmp	r3, #0
 800c788:	d021      	beq.n	800c7ce <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800c78a:	4b23      	ldr	r3, [pc, #140]	; (800c818 <tcp_listen_with_backlog_and_err+0x148>)
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	68fa      	ldr	r2, [r7, #12]
 800c790:	429a      	cmp	r2, r3
 800c792:	d105      	bne.n	800c7a0 <tcp_listen_with_backlog_and_err+0xd0>
 800c794:	4b20      	ldr	r3, [pc, #128]	; (800c818 <tcp_listen_with_backlog_and_err+0x148>)
 800c796:	681b      	ldr	r3, [r3, #0]
 800c798:	68db      	ldr	r3, [r3, #12]
 800c79a:	4a1f      	ldr	r2, [pc, #124]	; (800c818 <tcp_listen_with_backlog_and_err+0x148>)
 800c79c:	6013      	str	r3, [r2, #0]
 800c79e:	e013      	b.n	800c7c8 <tcp_listen_with_backlog_and_err+0xf8>
 800c7a0:	4b1d      	ldr	r3, [pc, #116]	; (800c818 <tcp_listen_with_backlog_and_err+0x148>)
 800c7a2:	681b      	ldr	r3, [r3, #0]
 800c7a4:	617b      	str	r3, [r7, #20]
 800c7a6:	e00c      	b.n	800c7c2 <tcp_listen_with_backlog_and_err+0xf2>
 800c7a8:	697b      	ldr	r3, [r7, #20]
 800c7aa:	68db      	ldr	r3, [r3, #12]
 800c7ac:	68fa      	ldr	r2, [r7, #12]
 800c7ae:	429a      	cmp	r2, r3
 800c7b0:	d104      	bne.n	800c7bc <tcp_listen_with_backlog_and_err+0xec>
 800c7b2:	68fb      	ldr	r3, [r7, #12]
 800c7b4:	68da      	ldr	r2, [r3, #12]
 800c7b6:	697b      	ldr	r3, [r7, #20]
 800c7b8:	60da      	str	r2, [r3, #12]
 800c7ba:	e005      	b.n	800c7c8 <tcp_listen_with_backlog_and_err+0xf8>
 800c7bc:	697b      	ldr	r3, [r7, #20]
 800c7be:	68db      	ldr	r3, [r3, #12]
 800c7c0:	617b      	str	r3, [r7, #20]
 800c7c2:	697b      	ldr	r3, [r7, #20]
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	d1ef      	bne.n	800c7a8 <tcp_listen_with_backlog_and_err+0xd8>
 800c7c8:	68fb      	ldr	r3, [r7, #12]
 800c7ca:	2200      	movs	r2, #0
 800c7cc:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 800c7ce:	68f8      	ldr	r0, [r7, #12]
 800c7d0:	f7ff fb76 	bl	800bec0 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 800c7d4:	69fb      	ldr	r3, [r7, #28]
 800c7d6:	4a11      	ldr	r2, [pc, #68]	; (800c81c <tcp_listen_with_backlog_and_err+0x14c>)
 800c7d8:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 800c7da:	4b11      	ldr	r3, [pc, #68]	; (800c820 <tcp_listen_with_backlog_and_err+0x150>)
 800c7dc:	681a      	ldr	r2, [r3, #0]
 800c7de:	69fb      	ldr	r3, [r7, #28]
 800c7e0:	60da      	str	r2, [r3, #12]
 800c7e2:	4a0f      	ldr	r2, [pc, #60]	; (800c820 <tcp_listen_with_backlog_and_err+0x150>)
 800c7e4:	69fb      	ldr	r3, [r7, #28]
 800c7e6:	6013      	str	r3, [r2, #0]
 800c7e8:	f005 fbde 	bl	8011fa8 <tcp_timer_needed>
  res = ERR_OK;
 800c7ec:	2300      	movs	r3, #0
 800c7ee:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	d002      	beq.n	800c7fc <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	7efa      	ldrb	r2, [r7, #27]
 800c7fa:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 800c7fc:	69fb      	ldr	r3, [r7, #28]
}
 800c7fe:	4618      	mov	r0, r3
 800c800:	3720      	adds	r7, #32
 800c802:	46bd      	mov	sp, r7
 800c804:	bd80      	pop	{r7, pc}
 800c806:	bf00      	nop
 800c808:	08019b9c 	.word	0x08019b9c
 800c80c:	08019d90 	.word	0x08019d90
 800c810:	08019be0 	.word	0x08019be0
 800c814:	08019dc0 	.word	0x08019dc0
 800c818:	2001093c 	.word	0x2001093c
 800c81c:	0800c691 	.word	0x0800c691
 800c820:	20010940 	.word	0x20010940

0800c824 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800c824:	b580      	push	{r7, lr}
 800c826:	b084      	sub	sp, #16
 800c828:	af00      	add	r7, sp, #0
 800c82a:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	2b00      	cmp	r3, #0
 800c830:	d106      	bne.n	800c840 <tcp_update_rcv_ann_wnd+0x1c>
 800c832:	4b25      	ldr	r3, [pc, #148]	; (800c8c8 <tcp_update_rcv_ann_wnd+0xa4>)
 800c834:	f240 32a6 	movw	r2, #934	; 0x3a6
 800c838:	4924      	ldr	r1, [pc, #144]	; (800c8cc <tcp_update_rcv_ann_wnd+0xa8>)
 800c83a:	4825      	ldr	r0, [pc, #148]	; (800c8d0 <tcp_update_rcv_ann_wnd+0xac>)
 800c83c:	f00a ff2a 	bl	8017694 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c844:	687a      	ldr	r2, [r7, #4]
 800c846:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800c848:	4413      	add	r3, r2
 800c84a:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c850:	687a      	ldr	r2, [r7, #4]
 800c852:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800c854:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800c858:	bf28      	it	cs
 800c85a:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800c85e:	b292      	uxth	r2, r2
 800c860:	4413      	add	r3, r2
 800c862:	68fa      	ldr	r2, [r7, #12]
 800c864:	1ad3      	subs	r3, r2, r3
 800c866:	2b00      	cmp	r3, #0
 800c868:	db08      	blt.n	800c87c <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c876:	68fa      	ldr	r2, [r7, #12]
 800c878:	1ad3      	subs	r3, r2, r3
 800c87a:	e020      	b.n	800c8be <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c884:	1ad3      	subs	r3, r2, r3
 800c886:	2b00      	cmp	r3, #0
 800c888:	dd03      	ble.n	800c892 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	2200      	movs	r2, #0
 800c88e:	855a      	strh	r2, [r3, #42]	; 0x2a
 800c890:	e014      	b.n	800c8bc <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c89a:	1ad3      	subs	r3, r2, r3
 800c89c:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800c89e:	68bb      	ldr	r3, [r7, #8]
 800c8a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c8a4:	d306      	bcc.n	800c8b4 <tcp_update_rcv_ann_wnd+0x90>
 800c8a6:	4b08      	ldr	r3, [pc, #32]	; (800c8c8 <tcp_update_rcv_ann_wnd+0xa4>)
 800c8a8:	f240 32b6 	movw	r2, #950	; 0x3b6
 800c8ac:	4909      	ldr	r1, [pc, #36]	; (800c8d4 <tcp_update_rcv_ann_wnd+0xb0>)
 800c8ae:	4808      	ldr	r0, [pc, #32]	; (800c8d0 <tcp_update_rcv_ann_wnd+0xac>)
 800c8b0:	f00a fef0 	bl	8017694 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800c8b4:	68bb      	ldr	r3, [r7, #8]
 800c8b6:	b29a      	uxth	r2, r3
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800c8bc:	2300      	movs	r3, #0
  }
}
 800c8be:	4618      	mov	r0, r3
 800c8c0:	3710      	adds	r7, #16
 800c8c2:	46bd      	mov	sp, r7
 800c8c4:	bd80      	pop	{r7, pc}
 800c8c6:	bf00      	nop
 800c8c8:	08019b9c 	.word	0x08019b9c
 800c8cc:	08019df8 	.word	0x08019df8
 800c8d0:	08019be0 	.word	0x08019be0
 800c8d4:	08019e1c 	.word	0x08019e1c

0800c8d8 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800c8d8:	b580      	push	{r7, lr}
 800c8da:	b084      	sub	sp, #16
 800c8dc:	af00      	add	r7, sp, #0
 800c8de:	6078      	str	r0, [r7, #4]
 800c8e0:	460b      	mov	r3, r1
 800c8e2:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	d107      	bne.n	800c8fa <tcp_recved+0x22>
 800c8ea:	4b1f      	ldr	r3, [pc, #124]	; (800c968 <tcp_recved+0x90>)
 800c8ec:	f240 32cf 	movw	r2, #975	; 0x3cf
 800c8f0:	491e      	ldr	r1, [pc, #120]	; (800c96c <tcp_recved+0x94>)
 800c8f2:	481f      	ldr	r0, [pc, #124]	; (800c970 <tcp_recved+0x98>)
 800c8f4:	f00a fece 	bl	8017694 <iprintf>
 800c8f8:	e032      	b.n	800c960 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	7d1b      	ldrb	r3, [r3, #20]
 800c8fe:	2b01      	cmp	r3, #1
 800c900:	d106      	bne.n	800c910 <tcp_recved+0x38>
 800c902:	4b19      	ldr	r3, [pc, #100]	; (800c968 <tcp_recved+0x90>)
 800c904:	f240 32d2 	movw	r2, #978	; 0x3d2
 800c908:	491a      	ldr	r1, [pc, #104]	; (800c974 <tcp_recved+0x9c>)
 800c90a:	4819      	ldr	r0, [pc, #100]	; (800c970 <tcp_recved+0x98>)
 800c90c:	f00a fec2 	bl	8017694 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800c914:	887b      	ldrh	r3, [r7, #2]
 800c916:	4413      	add	r3, r2
 800c918:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800c91a:	89fb      	ldrh	r3, [r7, #14]
 800c91c:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800c920:	d804      	bhi.n	800c92c <tcp_recved+0x54>
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c926:	89fa      	ldrh	r2, [r7, #14]
 800c928:	429a      	cmp	r2, r3
 800c92a:	d204      	bcs.n	800c936 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800c932:	851a      	strh	r2, [r3, #40]	; 0x28
 800c934:	e002      	b.n	800c93c <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	89fa      	ldrh	r2, [r7, #14]
 800c93a:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800c93c:	6878      	ldr	r0, [r7, #4]
 800c93e:	f7ff ff71 	bl	800c824 <tcp_update_rcv_ann_wnd>
 800c942:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800c944:	68bb      	ldr	r3, [r7, #8]
 800c946:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800c94a:	d309      	bcc.n	800c960 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	8b5b      	ldrh	r3, [r3, #26]
 800c950:	f043 0302 	orr.w	r3, r3, #2
 800c954:	b29a      	uxth	r2, r3
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800c95a:	6878      	ldr	r0, [r7, #4]
 800c95c:	f004 fbae 	bl	80110bc <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800c960:	3710      	adds	r7, #16
 800c962:	46bd      	mov	sp, r7
 800c964:	bd80      	pop	{r7, pc}
 800c966:	bf00      	nop
 800c968:	08019b9c 	.word	0x08019b9c
 800c96c:	08019e38 	.word	0x08019e38
 800c970:	08019be0 	.word	0x08019be0
 800c974:	08019e50 	.word	0x08019e50

0800c978 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800c978:	b480      	push	{r7}
 800c97a:	b083      	sub	sp, #12
 800c97c:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800c97e:	2300      	movs	r3, #0
 800c980:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800c982:	4b1e      	ldr	r3, [pc, #120]	; (800c9fc <tcp_new_port+0x84>)
 800c984:	881b      	ldrh	r3, [r3, #0]
 800c986:	3301      	adds	r3, #1
 800c988:	b29a      	uxth	r2, r3
 800c98a:	4b1c      	ldr	r3, [pc, #112]	; (800c9fc <tcp_new_port+0x84>)
 800c98c:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800c98e:	4b1b      	ldr	r3, [pc, #108]	; (800c9fc <tcp_new_port+0x84>)
 800c990:	881b      	ldrh	r3, [r3, #0]
 800c992:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c996:	4293      	cmp	r3, r2
 800c998:	d103      	bne.n	800c9a2 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800c99a:	4b18      	ldr	r3, [pc, #96]	; (800c9fc <tcp_new_port+0x84>)
 800c99c:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800c9a0:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800c9a2:	2300      	movs	r3, #0
 800c9a4:	71fb      	strb	r3, [r7, #7]
 800c9a6:	e01e      	b.n	800c9e6 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800c9a8:	79fb      	ldrb	r3, [r7, #7]
 800c9aa:	4a15      	ldr	r2, [pc, #84]	; (800ca00 <tcp_new_port+0x88>)
 800c9ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c9b0:	681b      	ldr	r3, [r3, #0]
 800c9b2:	603b      	str	r3, [r7, #0]
 800c9b4:	e011      	b.n	800c9da <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800c9b6:	683b      	ldr	r3, [r7, #0]
 800c9b8:	8ada      	ldrh	r2, [r3, #22]
 800c9ba:	4b10      	ldr	r3, [pc, #64]	; (800c9fc <tcp_new_port+0x84>)
 800c9bc:	881b      	ldrh	r3, [r3, #0]
 800c9be:	429a      	cmp	r2, r3
 800c9c0:	d108      	bne.n	800c9d4 <tcp_new_port+0x5c>
        n++;
 800c9c2:	88bb      	ldrh	r3, [r7, #4]
 800c9c4:	3301      	adds	r3, #1
 800c9c6:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800c9c8:	88bb      	ldrh	r3, [r7, #4]
 800c9ca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c9ce:	d3d8      	bcc.n	800c982 <tcp_new_port+0xa>
          return 0;
 800c9d0:	2300      	movs	r3, #0
 800c9d2:	e00d      	b.n	800c9f0 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800c9d4:	683b      	ldr	r3, [r7, #0]
 800c9d6:	68db      	ldr	r3, [r3, #12]
 800c9d8:	603b      	str	r3, [r7, #0]
 800c9da:	683b      	ldr	r3, [r7, #0]
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	d1ea      	bne.n	800c9b6 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800c9e0:	79fb      	ldrb	r3, [r7, #7]
 800c9e2:	3301      	adds	r3, #1
 800c9e4:	71fb      	strb	r3, [r7, #7]
 800c9e6:	79fb      	ldrb	r3, [r7, #7]
 800c9e8:	2b03      	cmp	r3, #3
 800c9ea:	d9dd      	bls.n	800c9a8 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800c9ec:	4b03      	ldr	r3, [pc, #12]	; (800c9fc <tcp_new_port+0x84>)
 800c9ee:	881b      	ldrh	r3, [r3, #0]
}
 800c9f0:	4618      	mov	r0, r3
 800c9f2:	370c      	adds	r7, #12
 800c9f4:	46bd      	mov	sp, r7
 800c9f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9fa:	4770      	bx	lr
 800c9fc:	20000024 	.word	0x20000024
 800ca00:	0801bf60 	.word	0x0801bf60

0800ca04 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800ca04:	b5b0      	push	{r4, r5, r7, lr}
 800ca06:	b090      	sub	sp, #64	; 0x40
 800ca08:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800ca0a:	2300      	movs	r3, #0
 800ca0c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800ca10:	4b94      	ldr	r3, [pc, #592]	; (800cc64 <tcp_slowtmr+0x260>)
 800ca12:	681b      	ldr	r3, [r3, #0]
 800ca14:	3301      	adds	r3, #1
 800ca16:	4a93      	ldr	r2, [pc, #588]	; (800cc64 <tcp_slowtmr+0x260>)
 800ca18:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800ca1a:	4b93      	ldr	r3, [pc, #588]	; (800cc68 <tcp_slowtmr+0x264>)
 800ca1c:	781b      	ldrb	r3, [r3, #0]
 800ca1e:	3301      	adds	r3, #1
 800ca20:	b2da      	uxtb	r2, r3
 800ca22:	4b91      	ldr	r3, [pc, #580]	; (800cc68 <tcp_slowtmr+0x264>)
 800ca24:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800ca26:	2300      	movs	r3, #0
 800ca28:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800ca2a:	4b90      	ldr	r3, [pc, #576]	; (800cc6c <tcp_slowtmr+0x268>)
 800ca2c:	681b      	ldr	r3, [r3, #0]
 800ca2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800ca30:	e29f      	b.n	800cf72 <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800ca32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca34:	7d1b      	ldrb	r3, [r3, #20]
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d106      	bne.n	800ca48 <tcp_slowtmr+0x44>
 800ca3a:	4b8d      	ldr	r3, [pc, #564]	; (800cc70 <tcp_slowtmr+0x26c>)
 800ca3c:	f240 42be 	movw	r2, #1214	; 0x4be
 800ca40:	498c      	ldr	r1, [pc, #560]	; (800cc74 <tcp_slowtmr+0x270>)
 800ca42:	488d      	ldr	r0, [pc, #564]	; (800cc78 <tcp_slowtmr+0x274>)
 800ca44:	f00a fe26 	bl	8017694 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800ca48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca4a:	7d1b      	ldrb	r3, [r3, #20]
 800ca4c:	2b01      	cmp	r3, #1
 800ca4e:	d106      	bne.n	800ca5e <tcp_slowtmr+0x5a>
 800ca50:	4b87      	ldr	r3, [pc, #540]	; (800cc70 <tcp_slowtmr+0x26c>)
 800ca52:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800ca56:	4989      	ldr	r1, [pc, #548]	; (800cc7c <tcp_slowtmr+0x278>)
 800ca58:	4887      	ldr	r0, [pc, #540]	; (800cc78 <tcp_slowtmr+0x274>)
 800ca5a:	f00a fe1b 	bl	8017694 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800ca5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca60:	7d1b      	ldrb	r3, [r3, #20]
 800ca62:	2b0a      	cmp	r3, #10
 800ca64:	d106      	bne.n	800ca74 <tcp_slowtmr+0x70>
 800ca66:	4b82      	ldr	r3, [pc, #520]	; (800cc70 <tcp_slowtmr+0x26c>)
 800ca68:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800ca6c:	4984      	ldr	r1, [pc, #528]	; (800cc80 <tcp_slowtmr+0x27c>)
 800ca6e:	4882      	ldr	r0, [pc, #520]	; (800cc78 <tcp_slowtmr+0x274>)
 800ca70:	f00a fe10 	bl	8017694 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800ca74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca76:	7f9a      	ldrb	r2, [r3, #30]
 800ca78:	4b7b      	ldr	r3, [pc, #492]	; (800cc68 <tcp_slowtmr+0x264>)
 800ca7a:	781b      	ldrb	r3, [r3, #0]
 800ca7c:	429a      	cmp	r2, r3
 800ca7e:	d105      	bne.n	800ca8c <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800ca80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca82:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800ca84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca86:	68db      	ldr	r3, [r3, #12]
 800ca88:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800ca8a:	e272      	b.n	800cf72 <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 800ca8c:	4b76      	ldr	r3, [pc, #472]	; (800cc68 <tcp_slowtmr+0x264>)
 800ca8e:	781a      	ldrb	r2, [r3, #0]
 800ca90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca92:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800ca94:	2300      	movs	r3, #0
 800ca96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800ca9a:	2300      	movs	r3, #0
 800ca9c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800caa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800caa2:	7d1b      	ldrb	r3, [r3, #20]
 800caa4:	2b02      	cmp	r3, #2
 800caa6:	d10a      	bne.n	800cabe <tcp_slowtmr+0xba>
 800caa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800caaa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800caae:	2b05      	cmp	r3, #5
 800cab0:	d905      	bls.n	800cabe <tcp_slowtmr+0xba>
      ++pcb_remove;
 800cab2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cab6:	3301      	adds	r3, #1
 800cab8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800cabc:	e11e      	b.n	800ccfc <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800cabe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cac0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800cac4:	2b0b      	cmp	r3, #11
 800cac6:	d905      	bls.n	800cad4 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800cac8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cacc:	3301      	adds	r3, #1
 800cace:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800cad2:	e113      	b.n	800ccfc <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800cad4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cad6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800cada:	2b00      	cmp	r3, #0
 800cadc:	d075      	beq.n	800cbca <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800cade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cae0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	d006      	beq.n	800caf4 <tcp_slowtmr+0xf0>
 800cae6:	4b62      	ldr	r3, [pc, #392]	; (800cc70 <tcp_slowtmr+0x26c>)
 800cae8:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800caec:	4965      	ldr	r1, [pc, #404]	; (800cc84 <tcp_slowtmr+0x280>)
 800caee:	4862      	ldr	r0, [pc, #392]	; (800cc78 <tcp_slowtmr+0x274>)
 800caf0:	f00a fdd0 	bl	8017694 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800caf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800caf6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800caf8:	2b00      	cmp	r3, #0
 800cafa:	d106      	bne.n	800cb0a <tcp_slowtmr+0x106>
 800cafc:	4b5c      	ldr	r3, [pc, #368]	; (800cc70 <tcp_slowtmr+0x26c>)
 800cafe:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800cb02:	4961      	ldr	r1, [pc, #388]	; (800cc88 <tcp_slowtmr+0x284>)
 800cb04:	485c      	ldr	r0, [pc, #368]	; (800cc78 <tcp_slowtmr+0x274>)
 800cb06:	f00a fdc5 	bl	8017694 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800cb0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb0c:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800cb10:	2b0b      	cmp	r3, #11
 800cb12:	d905      	bls.n	800cb20 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800cb14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cb18:	3301      	adds	r3, #1
 800cb1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800cb1e:	e0ed      	b.n	800ccfc <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800cb20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb22:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800cb26:	3b01      	subs	r3, #1
 800cb28:	4a58      	ldr	r2, [pc, #352]	; (800cc8c <tcp_slowtmr+0x288>)
 800cb2a:	5cd3      	ldrb	r3, [r2, r3]
 800cb2c:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800cb2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb30:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800cb34:	7c7a      	ldrb	r2, [r7, #17]
 800cb36:	429a      	cmp	r2, r3
 800cb38:	d907      	bls.n	800cb4a <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800cb3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb3c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800cb40:	3301      	adds	r3, #1
 800cb42:	b2da      	uxtb	r2, r3
 800cb44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb46:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800cb4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb4c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800cb50:	7c7a      	ldrb	r2, [r7, #17]
 800cb52:	429a      	cmp	r2, r3
 800cb54:	f200 80d2 	bhi.w	800ccfc <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800cb58:	2301      	movs	r3, #1
 800cb5a:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800cb5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb5e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800cb62:	2b00      	cmp	r3, #0
 800cb64:	d108      	bne.n	800cb78 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800cb66:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cb68:	f005 f950 	bl	8011e0c <tcp_zero_window_probe>
 800cb6c:	4603      	mov	r3, r0
 800cb6e:	2b00      	cmp	r3, #0
 800cb70:	d014      	beq.n	800cb9c <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800cb72:	2300      	movs	r3, #0
 800cb74:	623b      	str	r3, [r7, #32]
 800cb76:	e011      	b.n	800cb9c <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800cb78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb7a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800cb7e:	4619      	mov	r1, r3
 800cb80:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cb82:	f004 f815 	bl	8010bb0 <tcp_split_unsent_seg>
 800cb86:	4603      	mov	r3, r0
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	d107      	bne.n	800cb9c <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800cb8c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cb8e:	f004 fa95 	bl	80110bc <tcp_output>
 800cb92:	4603      	mov	r3, r0
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	d101      	bne.n	800cb9c <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800cb98:	2300      	movs	r3, #0
 800cb9a:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800cb9c:	6a3b      	ldr	r3, [r7, #32]
 800cb9e:	2b00      	cmp	r3, #0
 800cba0:	f000 80ac 	beq.w	800ccfc <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800cba4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cba6:	2200      	movs	r2, #0
 800cba8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800cbac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbae:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800cbb2:	2b06      	cmp	r3, #6
 800cbb4:	f200 80a2 	bhi.w	800ccfc <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800cbb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbba:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800cbbe:	3301      	adds	r3, #1
 800cbc0:	b2da      	uxtb	r2, r3
 800cbc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbc4:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800cbc8:	e098      	b.n	800ccfc <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800cbca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbcc:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	db0f      	blt.n	800cbf4 <tcp_slowtmr+0x1f0>
 800cbd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbd6:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800cbda:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800cbde:	4293      	cmp	r3, r2
 800cbe0:	d008      	beq.n	800cbf4 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800cbe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbe4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800cbe8:	b29b      	uxth	r3, r3
 800cbea:	3301      	adds	r3, #1
 800cbec:	b29b      	uxth	r3, r3
 800cbee:	b21a      	sxth	r2, r3
 800cbf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbf2:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800cbf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbf6:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800cbfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbfc:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800cc00:	429a      	cmp	r2, r3
 800cc02:	db7b      	blt.n	800ccfc <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800cc04:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cc06:	f004 fd4b 	bl	80116a0 <tcp_rexmit_rto_prepare>
 800cc0a:	4603      	mov	r3, r0
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	d007      	beq.n	800cc20 <tcp_slowtmr+0x21c>
 800cc10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	d171      	bne.n	800ccfc <tcp_slowtmr+0x2f8>
 800cc18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	d06d      	beq.n	800ccfc <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800cc20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc22:	7d1b      	ldrb	r3, [r3, #20]
 800cc24:	2b02      	cmp	r3, #2
 800cc26:	d03a      	beq.n	800cc9e <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800cc28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc2a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800cc2e:	2b0c      	cmp	r3, #12
 800cc30:	bf28      	it	cs
 800cc32:	230c      	movcs	r3, #12
 800cc34:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800cc36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc38:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800cc3c:	10db      	asrs	r3, r3, #3
 800cc3e:	b21b      	sxth	r3, r3
 800cc40:	461a      	mov	r2, r3
 800cc42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc44:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800cc48:	4413      	add	r3, r2
 800cc4a:	7efa      	ldrb	r2, [r7, #27]
 800cc4c:	4910      	ldr	r1, [pc, #64]	; (800cc90 <tcp_slowtmr+0x28c>)
 800cc4e:	5c8a      	ldrb	r2, [r1, r2]
 800cc50:	4093      	lsls	r3, r2
 800cc52:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800cc54:	697b      	ldr	r3, [r7, #20]
 800cc56:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800cc5a:	4293      	cmp	r3, r2
 800cc5c:	dc1a      	bgt.n	800cc94 <tcp_slowtmr+0x290>
 800cc5e:	697b      	ldr	r3, [r7, #20]
 800cc60:	b21a      	sxth	r2, r3
 800cc62:	e019      	b.n	800cc98 <tcp_slowtmr+0x294>
 800cc64:	20010938 	.word	0x20010938
 800cc68:	2001094e 	.word	0x2001094e
 800cc6c:	20010944 	.word	0x20010944
 800cc70:	08019b9c 	.word	0x08019b9c
 800cc74:	08019ee0 	.word	0x08019ee0
 800cc78:	08019be0 	.word	0x08019be0
 800cc7c:	08019f0c 	.word	0x08019f0c
 800cc80:	08019f38 	.word	0x08019f38
 800cc84:	08019f68 	.word	0x08019f68
 800cc88:	08019f9c 	.word	0x08019f9c
 800cc8c:	0801bf58 	.word	0x0801bf58
 800cc90:	0801bf48 	.word	0x0801bf48
 800cc94:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800cc98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc9a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800cc9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cca0:	2200      	movs	r2, #0
 800cca2:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800cca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cca6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800ccaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccac:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800ccb0:	4293      	cmp	r3, r2
 800ccb2:	bf28      	it	cs
 800ccb4:	4613      	movcs	r3, r2
 800ccb6:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800ccb8:	8a7b      	ldrh	r3, [r7, #18]
 800ccba:	085b      	lsrs	r3, r3, #1
 800ccbc:	b29a      	uxth	r2, r3
 800ccbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccc0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800ccc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccc6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800ccca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cccc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ccce:	005b      	lsls	r3, r3, #1
 800ccd0:	b29b      	uxth	r3, r3
 800ccd2:	429a      	cmp	r2, r3
 800ccd4:	d206      	bcs.n	800cce4 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800ccd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccd8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ccda:	005b      	lsls	r3, r3, #1
 800ccdc:	b29a      	uxth	r2, r3
 800ccde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cce0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800cce4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cce6:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800cce8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccea:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800ccee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccf0:	2200      	movs	r2, #0
 800ccf2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800ccf6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ccf8:	f004 fd42 	bl	8011780 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800ccfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccfe:	7d1b      	ldrb	r3, [r3, #20]
 800cd00:	2b06      	cmp	r3, #6
 800cd02:	d111      	bne.n	800cd28 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800cd04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd06:	8b5b      	ldrh	r3, [r3, #26]
 800cd08:	f003 0310 	and.w	r3, r3, #16
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	d00b      	beq.n	800cd28 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800cd10:	4b9d      	ldr	r3, [pc, #628]	; (800cf88 <tcp_slowtmr+0x584>)
 800cd12:	681a      	ldr	r2, [r3, #0]
 800cd14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd16:	6a1b      	ldr	r3, [r3, #32]
 800cd18:	1ad3      	subs	r3, r2, r3
 800cd1a:	2b28      	cmp	r3, #40	; 0x28
 800cd1c:	d904      	bls.n	800cd28 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800cd1e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cd22:	3301      	adds	r3, #1
 800cd24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800cd28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd2a:	7a5b      	ldrb	r3, [r3, #9]
 800cd2c:	f003 0308 	and.w	r3, r3, #8
 800cd30:	2b00      	cmp	r3, #0
 800cd32:	d04c      	beq.n	800cdce <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 800cd34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd36:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800cd38:	2b04      	cmp	r3, #4
 800cd3a:	d003      	beq.n	800cd44 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800cd3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd3e:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800cd40:	2b07      	cmp	r3, #7
 800cd42:	d144      	bne.n	800cdce <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800cd44:	4b90      	ldr	r3, [pc, #576]	; (800cf88 <tcp_slowtmr+0x584>)
 800cd46:	681a      	ldr	r2, [r3, #0]
 800cd48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd4a:	6a1b      	ldr	r3, [r3, #32]
 800cd4c:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800cd4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd50:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800cd54:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 800cd58:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 800cd5c:	498b      	ldr	r1, [pc, #556]	; (800cf8c <tcp_slowtmr+0x588>)
 800cd5e:	fba1 1303 	umull	r1, r3, r1, r3
 800cd62:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800cd64:	429a      	cmp	r2, r3
 800cd66:	d90a      	bls.n	800cd7e <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800cd68:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cd6c:	3301      	adds	r3, #1
 800cd6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800cd72:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800cd76:	3301      	adds	r3, #1
 800cd78:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800cd7c:	e027      	b.n	800cdce <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800cd7e:	4b82      	ldr	r3, [pc, #520]	; (800cf88 <tcp_slowtmr+0x584>)
 800cd80:	681a      	ldr	r2, [r3, #0]
 800cd82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd84:	6a1b      	ldr	r3, [r3, #32]
 800cd86:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800cd88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd8a:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800cd8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd90:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800cd94:	4618      	mov	r0, r3
 800cd96:	4b7e      	ldr	r3, [pc, #504]	; (800cf90 <tcp_slowtmr+0x58c>)
 800cd98:	fb00 f303 	mul.w	r3, r0, r3
 800cd9c:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800cd9e:	497b      	ldr	r1, [pc, #492]	; (800cf8c <tcp_slowtmr+0x588>)
 800cda0:	fba1 1303 	umull	r1, r3, r1, r3
 800cda4:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800cda6:	429a      	cmp	r2, r3
 800cda8:	d911      	bls.n	800cdce <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 800cdaa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cdac:	f004 ffee 	bl	8011d8c <tcp_keepalive>
 800cdb0:	4603      	mov	r3, r0
 800cdb2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800cdb6:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	d107      	bne.n	800cdce <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 800cdbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdc0:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800cdc4:	3301      	adds	r3, #1
 800cdc6:	b2da      	uxtb	r2, r3
 800cdc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdca:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800cdce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdd0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	d011      	beq.n	800cdfa <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800cdd6:	4b6c      	ldr	r3, [pc, #432]	; (800cf88 <tcp_slowtmr+0x584>)
 800cdd8:	681a      	ldr	r2, [r3, #0]
 800cdda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cddc:	6a1b      	ldr	r3, [r3, #32]
 800cdde:	1ad2      	subs	r2, r2, r3
 800cde0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cde2:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800cde6:	4619      	mov	r1, r3
 800cde8:	460b      	mov	r3, r1
 800cdea:	005b      	lsls	r3, r3, #1
 800cdec:	440b      	add	r3, r1
 800cdee:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800cdf0:	429a      	cmp	r2, r3
 800cdf2:	d302      	bcc.n	800cdfa <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800cdf4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cdf6:	f000 fea9 	bl	800db4c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800cdfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdfc:	7d1b      	ldrb	r3, [r3, #20]
 800cdfe:	2b03      	cmp	r3, #3
 800ce00:	d10b      	bne.n	800ce1a <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ce02:	4b61      	ldr	r3, [pc, #388]	; (800cf88 <tcp_slowtmr+0x584>)
 800ce04:	681a      	ldr	r2, [r3, #0]
 800ce06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce08:	6a1b      	ldr	r3, [r3, #32]
 800ce0a:	1ad3      	subs	r3, r2, r3
 800ce0c:	2b28      	cmp	r3, #40	; 0x28
 800ce0e:	d904      	bls.n	800ce1a <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800ce10:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ce14:	3301      	adds	r3, #1
 800ce16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800ce1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce1c:	7d1b      	ldrb	r3, [r3, #20]
 800ce1e:	2b09      	cmp	r3, #9
 800ce20:	d10b      	bne.n	800ce3a <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800ce22:	4b59      	ldr	r3, [pc, #356]	; (800cf88 <tcp_slowtmr+0x584>)
 800ce24:	681a      	ldr	r2, [r3, #0]
 800ce26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce28:	6a1b      	ldr	r3, [r3, #32]
 800ce2a:	1ad3      	subs	r3, r2, r3
 800ce2c:	2bf0      	cmp	r3, #240	; 0xf0
 800ce2e:	d904      	bls.n	800ce3a <tcp_slowtmr+0x436>
        ++pcb_remove;
 800ce30:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ce34:	3301      	adds	r3, #1
 800ce36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800ce3a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	d060      	beq.n	800cf04 <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800ce42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ce48:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800ce4a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ce4c:	f000 fcca 	bl	800d7e4 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800ce50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	d010      	beq.n	800ce78 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800ce56:	4b4f      	ldr	r3, [pc, #316]	; (800cf94 <tcp_slowtmr+0x590>)
 800ce58:	681b      	ldr	r3, [r3, #0]
 800ce5a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ce5c:	429a      	cmp	r2, r3
 800ce5e:	d106      	bne.n	800ce6e <tcp_slowtmr+0x46a>
 800ce60:	4b4d      	ldr	r3, [pc, #308]	; (800cf98 <tcp_slowtmr+0x594>)
 800ce62:	f240 526d 	movw	r2, #1389	; 0x56d
 800ce66:	494d      	ldr	r1, [pc, #308]	; (800cf9c <tcp_slowtmr+0x598>)
 800ce68:	484d      	ldr	r0, [pc, #308]	; (800cfa0 <tcp_slowtmr+0x59c>)
 800ce6a:	f00a fc13 	bl	8017694 <iprintf>
        prev->next = pcb->next;
 800ce6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce70:	68da      	ldr	r2, [r3, #12]
 800ce72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce74:	60da      	str	r2, [r3, #12]
 800ce76:	e00f      	b.n	800ce98 <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800ce78:	4b46      	ldr	r3, [pc, #280]	; (800cf94 <tcp_slowtmr+0x590>)
 800ce7a:	681b      	ldr	r3, [r3, #0]
 800ce7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ce7e:	429a      	cmp	r2, r3
 800ce80:	d006      	beq.n	800ce90 <tcp_slowtmr+0x48c>
 800ce82:	4b45      	ldr	r3, [pc, #276]	; (800cf98 <tcp_slowtmr+0x594>)
 800ce84:	f240 5271 	movw	r2, #1393	; 0x571
 800ce88:	4946      	ldr	r1, [pc, #280]	; (800cfa4 <tcp_slowtmr+0x5a0>)
 800ce8a:	4845      	ldr	r0, [pc, #276]	; (800cfa0 <tcp_slowtmr+0x59c>)
 800ce8c:	f00a fc02 	bl	8017694 <iprintf>
        tcp_active_pcbs = pcb->next;
 800ce90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce92:	68db      	ldr	r3, [r3, #12]
 800ce94:	4a3f      	ldr	r2, [pc, #252]	; (800cf94 <tcp_slowtmr+0x590>)
 800ce96:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800ce98:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	d013      	beq.n	800cec8 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800cea0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cea2:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800cea4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cea6:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800cea8:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800ceaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ceac:	3304      	adds	r3, #4
 800ceae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ceb0:	8ad2      	ldrh	r2, [r2, #22]
 800ceb2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ceb4:	8b09      	ldrh	r1, [r1, #24]
 800ceb6:	9102      	str	r1, [sp, #8]
 800ceb8:	9201      	str	r2, [sp, #4]
 800ceba:	9300      	str	r3, [sp, #0]
 800cebc:	462b      	mov	r3, r5
 800cebe:	4622      	mov	r2, r4
 800cec0:	4601      	mov	r1, r0
 800cec2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cec4:	f004 feae 	bl	8011c24 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800cec8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ceca:	691b      	ldr	r3, [r3, #16]
 800cecc:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800cece:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ced0:	7d1b      	ldrb	r3, [r3, #20]
 800ced2:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800ced4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ced6:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800ced8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ceda:	68db      	ldr	r3, [r3, #12]
 800cedc:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800cede:	6838      	ldr	r0, [r7, #0]
 800cee0:	f7fe ffee 	bl	800bec0 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800cee4:	4b30      	ldr	r3, [pc, #192]	; (800cfa8 <tcp_slowtmr+0x5a4>)
 800cee6:	2200      	movs	r2, #0
 800cee8:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800ceea:	68fb      	ldr	r3, [r7, #12]
 800ceec:	2b00      	cmp	r3, #0
 800ceee:	d004      	beq.n	800cefa <tcp_slowtmr+0x4f6>
 800cef0:	68fb      	ldr	r3, [r7, #12]
 800cef2:	f06f 010c 	mvn.w	r1, #12
 800cef6:	68b8      	ldr	r0, [r7, #8]
 800cef8:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800cefa:	4b2b      	ldr	r3, [pc, #172]	; (800cfa8 <tcp_slowtmr+0x5a4>)
 800cefc:	781b      	ldrb	r3, [r3, #0]
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	d037      	beq.n	800cf72 <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 800cf02:	e590      	b.n	800ca26 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800cf04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf06:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800cf08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf0a:	68db      	ldr	r3, [r3, #12]
 800cf0c:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800cf0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf10:	7f1b      	ldrb	r3, [r3, #28]
 800cf12:	3301      	adds	r3, #1
 800cf14:	b2da      	uxtb	r2, r3
 800cf16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf18:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800cf1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf1c:	7f1a      	ldrb	r2, [r3, #28]
 800cf1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf20:	7f5b      	ldrb	r3, [r3, #29]
 800cf22:	429a      	cmp	r2, r3
 800cf24:	d325      	bcc.n	800cf72 <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 800cf26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf28:	2200      	movs	r2, #0
 800cf2a:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800cf2c:	4b1e      	ldr	r3, [pc, #120]	; (800cfa8 <tcp_slowtmr+0x5a4>)
 800cf2e:	2200      	movs	r2, #0
 800cf30:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800cf32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf34:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	d00b      	beq.n	800cf54 <tcp_slowtmr+0x550>
 800cf3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cf42:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cf44:	6912      	ldr	r2, [r2, #16]
 800cf46:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cf48:	4610      	mov	r0, r2
 800cf4a:	4798      	blx	r3
 800cf4c:	4603      	mov	r3, r0
 800cf4e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800cf52:	e002      	b.n	800cf5a <tcp_slowtmr+0x556>
 800cf54:	2300      	movs	r3, #0
 800cf56:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800cf5a:	4b13      	ldr	r3, [pc, #76]	; (800cfa8 <tcp_slowtmr+0x5a4>)
 800cf5c:	781b      	ldrb	r3, [r3, #0]
 800cf5e:	2b00      	cmp	r3, #0
 800cf60:	d000      	beq.n	800cf64 <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 800cf62:	e560      	b.n	800ca26 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800cf64:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	d102      	bne.n	800cf72 <tcp_slowtmr+0x56e>
          tcp_output(prev);
 800cf6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cf6e:	f004 f8a5 	bl	80110bc <tcp_output>
  while (pcb != NULL) {
 800cf72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf74:	2b00      	cmp	r3, #0
 800cf76:	f47f ad5c 	bne.w	800ca32 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800cf7a:	2300      	movs	r3, #0
 800cf7c:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800cf7e:	4b0b      	ldr	r3, [pc, #44]	; (800cfac <tcp_slowtmr+0x5a8>)
 800cf80:	681b      	ldr	r3, [r3, #0]
 800cf82:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800cf84:	e067      	b.n	800d056 <tcp_slowtmr+0x652>
 800cf86:	bf00      	nop
 800cf88:	20010938 	.word	0x20010938
 800cf8c:	10624dd3 	.word	0x10624dd3
 800cf90:	000124f8 	.word	0x000124f8
 800cf94:	20010944 	.word	0x20010944
 800cf98:	08019b9c 	.word	0x08019b9c
 800cf9c:	08019fd4 	.word	0x08019fd4
 800cfa0:	08019be0 	.word	0x08019be0
 800cfa4:	0801a000 	.word	0x0801a000
 800cfa8:	2001094c 	.word	0x2001094c
 800cfac:	20010948 	.word	0x20010948
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800cfb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfb2:	7d1b      	ldrb	r3, [r3, #20]
 800cfb4:	2b0a      	cmp	r3, #10
 800cfb6:	d006      	beq.n	800cfc6 <tcp_slowtmr+0x5c2>
 800cfb8:	4b2b      	ldr	r3, [pc, #172]	; (800d068 <tcp_slowtmr+0x664>)
 800cfba:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800cfbe:	492b      	ldr	r1, [pc, #172]	; (800d06c <tcp_slowtmr+0x668>)
 800cfc0:	482b      	ldr	r0, [pc, #172]	; (800d070 <tcp_slowtmr+0x66c>)
 800cfc2:	f00a fb67 	bl	8017694 <iprintf>
    pcb_remove = 0;
 800cfc6:	2300      	movs	r3, #0
 800cfc8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800cfcc:	4b29      	ldr	r3, [pc, #164]	; (800d074 <tcp_slowtmr+0x670>)
 800cfce:	681a      	ldr	r2, [r3, #0]
 800cfd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfd2:	6a1b      	ldr	r3, [r3, #32]
 800cfd4:	1ad3      	subs	r3, r2, r3
 800cfd6:	2bf0      	cmp	r3, #240	; 0xf0
 800cfd8:	d904      	bls.n	800cfe4 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800cfda:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cfde:	3301      	adds	r3, #1
 800cfe0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800cfe4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cfe8:	2b00      	cmp	r3, #0
 800cfea:	d02f      	beq.n	800d04c <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800cfec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cfee:	f000 fbf9 	bl	800d7e4 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800cff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cff4:	2b00      	cmp	r3, #0
 800cff6:	d010      	beq.n	800d01a <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800cff8:	4b1f      	ldr	r3, [pc, #124]	; (800d078 <tcp_slowtmr+0x674>)
 800cffa:	681b      	ldr	r3, [r3, #0]
 800cffc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cffe:	429a      	cmp	r2, r3
 800d000:	d106      	bne.n	800d010 <tcp_slowtmr+0x60c>
 800d002:	4b19      	ldr	r3, [pc, #100]	; (800d068 <tcp_slowtmr+0x664>)
 800d004:	f240 52af 	movw	r2, #1455	; 0x5af
 800d008:	491c      	ldr	r1, [pc, #112]	; (800d07c <tcp_slowtmr+0x678>)
 800d00a:	4819      	ldr	r0, [pc, #100]	; (800d070 <tcp_slowtmr+0x66c>)
 800d00c:	f00a fb42 	bl	8017694 <iprintf>
        prev->next = pcb->next;
 800d010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d012:	68da      	ldr	r2, [r3, #12]
 800d014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d016:	60da      	str	r2, [r3, #12]
 800d018:	e00f      	b.n	800d03a <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800d01a:	4b17      	ldr	r3, [pc, #92]	; (800d078 <tcp_slowtmr+0x674>)
 800d01c:	681b      	ldr	r3, [r3, #0]
 800d01e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d020:	429a      	cmp	r2, r3
 800d022:	d006      	beq.n	800d032 <tcp_slowtmr+0x62e>
 800d024:	4b10      	ldr	r3, [pc, #64]	; (800d068 <tcp_slowtmr+0x664>)
 800d026:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800d02a:	4915      	ldr	r1, [pc, #84]	; (800d080 <tcp_slowtmr+0x67c>)
 800d02c:	4810      	ldr	r0, [pc, #64]	; (800d070 <tcp_slowtmr+0x66c>)
 800d02e:	f00a fb31 	bl	8017694 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800d032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d034:	68db      	ldr	r3, [r3, #12]
 800d036:	4a10      	ldr	r2, [pc, #64]	; (800d078 <tcp_slowtmr+0x674>)
 800d038:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800d03a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d03c:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800d03e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d040:	68db      	ldr	r3, [r3, #12]
 800d042:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800d044:	69f8      	ldr	r0, [r7, #28]
 800d046:	f7fe ff3b 	bl	800bec0 <tcp_free>
 800d04a:	e004      	b.n	800d056 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800d04c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d04e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800d050:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d052:	68db      	ldr	r3, [r3, #12]
 800d054:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800d056:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d058:	2b00      	cmp	r3, #0
 800d05a:	d1a9      	bne.n	800cfb0 <tcp_slowtmr+0x5ac>
    }
  }
}
 800d05c:	bf00      	nop
 800d05e:	bf00      	nop
 800d060:	3730      	adds	r7, #48	; 0x30
 800d062:	46bd      	mov	sp, r7
 800d064:	bdb0      	pop	{r4, r5, r7, pc}
 800d066:	bf00      	nop
 800d068:	08019b9c 	.word	0x08019b9c
 800d06c:	0801a02c 	.word	0x0801a02c
 800d070:	08019be0 	.word	0x08019be0
 800d074:	20010938 	.word	0x20010938
 800d078:	20010948 	.word	0x20010948
 800d07c:	0801a05c 	.word	0x0801a05c
 800d080:	0801a084 	.word	0x0801a084

0800d084 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800d084:	b580      	push	{r7, lr}
 800d086:	b082      	sub	sp, #8
 800d088:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800d08a:	4b2d      	ldr	r3, [pc, #180]	; (800d140 <tcp_fasttmr+0xbc>)
 800d08c:	781b      	ldrb	r3, [r3, #0]
 800d08e:	3301      	adds	r3, #1
 800d090:	b2da      	uxtb	r2, r3
 800d092:	4b2b      	ldr	r3, [pc, #172]	; (800d140 <tcp_fasttmr+0xbc>)
 800d094:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800d096:	4b2b      	ldr	r3, [pc, #172]	; (800d144 <tcp_fasttmr+0xc0>)
 800d098:	681b      	ldr	r3, [r3, #0]
 800d09a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800d09c:	e048      	b.n	800d130 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	7f9a      	ldrb	r2, [r3, #30]
 800d0a2:	4b27      	ldr	r3, [pc, #156]	; (800d140 <tcp_fasttmr+0xbc>)
 800d0a4:	781b      	ldrb	r3, [r3, #0]
 800d0a6:	429a      	cmp	r2, r3
 800d0a8:	d03f      	beq.n	800d12a <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800d0aa:	4b25      	ldr	r3, [pc, #148]	; (800d140 <tcp_fasttmr+0xbc>)
 800d0ac:	781a      	ldrb	r2, [r3, #0]
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	8b5b      	ldrh	r3, [r3, #26]
 800d0b6:	f003 0301 	and.w	r3, r3, #1
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	d010      	beq.n	800d0e0 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	8b5b      	ldrh	r3, [r3, #26]
 800d0c2:	f043 0302 	orr.w	r3, r3, #2
 800d0c6:	b29a      	uxth	r2, r3
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800d0cc:	6878      	ldr	r0, [r7, #4]
 800d0ce:	f003 fff5 	bl	80110bc <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	8b5b      	ldrh	r3, [r3, #26]
 800d0d6:	f023 0303 	bic.w	r3, r3, #3
 800d0da:	b29a      	uxth	r2, r3
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	8b5b      	ldrh	r3, [r3, #26]
 800d0e4:	f003 0308 	and.w	r3, r3, #8
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	d009      	beq.n	800d100 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	8b5b      	ldrh	r3, [r3, #26]
 800d0f0:	f023 0308 	bic.w	r3, r3, #8
 800d0f4:	b29a      	uxth	r2, r3
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800d0fa:	6878      	ldr	r0, [r7, #4]
 800d0fc:	f7ff f874 	bl	800c1e8 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	68db      	ldr	r3, [r3, #12]
 800d104:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d10a:	2b00      	cmp	r3, #0
 800d10c:	d00a      	beq.n	800d124 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800d10e:	4b0e      	ldr	r3, [pc, #56]	; (800d148 <tcp_fasttmr+0xc4>)
 800d110:	2200      	movs	r2, #0
 800d112:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800d114:	6878      	ldr	r0, [r7, #4]
 800d116:	f000 f819 	bl	800d14c <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800d11a:	4b0b      	ldr	r3, [pc, #44]	; (800d148 <tcp_fasttmr+0xc4>)
 800d11c:	781b      	ldrb	r3, [r3, #0]
 800d11e:	2b00      	cmp	r3, #0
 800d120:	d000      	beq.n	800d124 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800d122:	e7b8      	b.n	800d096 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800d124:	683b      	ldr	r3, [r7, #0]
 800d126:	607b      	str	r3, [r7, #4]
 800d128:	e002      	b.n	800d130 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	68db      	ldr	r3, [r3, #12]
 800d12e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	2b00      	cmp	r3, #0
 800d134:	d1b3      	bne.n	800d09e <tcp_fasttmr+0x1a>
    }
  }
}
 800d136:	bf00      	nop
 800d138:	bf00      	nop
 800d13a:	3708      	adds	r7, #8
 800d13c:	46bd      	mov	sp, r7
 800d13e:	bd80      	pop	{r7, pc}
 800d140:	2001094e 	.word	0x2001094e
 800d144:	20010944 	.word	0x20010944
 800d148:	2001094c 	.word	0x2001094c

0800d14c <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800d14c:	b590      	push	{r4, r7, lr}
 800d14e:	b085      	sub	sp, #20
 800d150:	af00      	add	r7, sp, #0
 800d152:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	2b00      	cmp	r3, #0
 800d158:	d109      	bne.n	800d16e <tcp_process_refused_data+0x22>
 800d15a:	4b37      	ldr	r3, [pc, #220]	; (800d238 <tcp_process_refused_data+0xec>)
 800d15c:	f240 6209 	movw	r2, #1545	; 0x609
 800d160:	4936      	ldr	r1, [pc, #216]	; (800d23c <tcp_process_refused_data+0xf0>)
 800d162:	4837      	ldr	r0, [pc, #220]	; (800d240 <tcp_process_refused_data+0xf4>)
 800d164:	f00a fa96 	bl	8017694 <iprintf>
 800d168:	f06f 030f 	mvn.w	r3, #15
 800d16c:	e060      	b.n	800d230 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d172:	7b5b      	ldrb	r3, [r3, #13]
 800d174:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d17a:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	2200      	movs	r2, #0
 800d180:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d188:	2b00      	cmp	r3, #0
 800d18a:	d00b      	beq.n	800d1a4 <tcp_process_refused_data+0x58>
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	6918      	ldr	r0, [r3, #16]
 800d196:	2300      	movs	r3, #0
 800d198:	68ba      	ldr	r2, [r7, #8]
 800d19a:	6879      	ldr	r1, [r7, #4]
 800d19c:	47a0      	blx	r4
 800d19e:	4603      	mov	r3, r0
 800d1a0:	73fb      	strb	r3, [r7, #15]
 800d1a2:	e007      	b.n	800d1b4 <tcp_process_refused_data+0x68>
 800d1a4:	2300      	movs	r3, #0
 800d1a6:	68ba      	ldr	r2, [r7, #8]
 800d1a8:	6879      	ldr	r1, [r7, #4]
 800d1aa:	2000      	movs	r0, #0
 800d1ac:	f000 f8a4 	bl	800d2f8 <tcp_recv_null>
 800d1b0:	4603      	mov	r3, r0
 800d1b2:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800d1b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d1b8:	2b00      	cmp	r3, #0
 800d1ba:	d12a      	bne.n	800d212 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800d1bc:	7bbb      	ldrb	r3, [r7, #14]
 800d1be:	f003 0320 	and.w	r3, r3, #32
 800d1c2:	2b00      	cmp	r3, #0
 800d1c4:	d033      	beq.n	800d22e <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d1ca:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800d1ce:	d005      	beq.n	800d1dc <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d1d4:	3301      	adds	r3, #1
 800d1d6:	b29a      	uxth	r2, r3
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	d00b      	beq.n	800d1fe <tcp_process_refused_data+0xb2>
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	6918      	ldr	r0, [r3, #16]
 800d1f0:	2300      	movs	r3, #0
 800d1f2:	2200      	movs	r2, #0
 800d1f4:	6879      	ldr	r1, [r7, #4]
 800d1f6:	47a0      	blx	r4
 800d1f8:	4603      	mov	r3, r0
 800d1fa:	73fb      	strb	r3, [r7, #15]
 800d1fc:	e001      	b.n	800d202 <tcp_process_refused_data+0xb6>
 800d1fe:	2300      	movs	r3, #0
 800d200:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800d202:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d206:	f113 0f0d 	cmn.w	r3, #13
 800d20a:	d110      	bne.n	800d22e <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800d20c:	f06f 030c 	mvn.w	r3, #12
 800d210:	e00e      	b.n	800d230 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800d212:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d216:	f113 0f0d 	cmn.w	r3, #13
 800d21a:	d102      	bne.n	800d222 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800d21c:	f06f 030c 	mvn.w	r3, #12
 800d220:	e006      	b.n	800d230 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	68ba      	ldr	r2, [r7, #8]
 800d226:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800d228:	f06f 0304 	mvn.w	r3, #4
 800d22c:	e000      	b.n	800d230 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800d22e:	2300      	movs	r3, #0
}
 800d230:	4618      	mov	r0, r3
 800d232:	3714      	adds	r7, #20
 800d234:	46bd      	mov	sp, r7
 800d236:	bd90      	pop	{r4, r7, pc}
 800d238:	08019b9c 	.word	0x08019b9c
 800d23c:	0801a0ac 	.word	0x0801a0ac
 800d240:	08019be0 	.word	0x08019be0

0800d244 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800d244:	b580      	push	{r7, lr}
 800d246:	b084      	sub	sp, #16
 800d248:	af00      	add	r7, sp, #0
 800d24a:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800d24c:	e007      	b.n	800d25e <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	681b      	ldr	r3, [r3, #0]
 800d252:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800d254:	6878      	ldr	r0, [r7, #4]
 800d256:	f000 f80a 	bl	800d26e <tcp_seg_free>
    seg = next;
 800d25a:	68fb      	ldr	r3, [r7, #12]
 800d25c:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	2b00      	cmp	r3, #0
 800d262:	d1f4      	bne.n	800d24e <tcp_segs_free+0xa>
  }
}
 800d264:	bf00      	nop
 800d266:	bf00      	nop
 800d268:	3710      	adds	r7, #16
 800d26a:	46bd      	mov	sp, r7
 800d26c:	bd80      	pop	{r7, pc}

0800d26e <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800d26e:	b580      	push	{r7, lr}
 800d270:	b082      	sub	sp, #8
 800d272:	af00      	add	r7, sp, #0
 800d274:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	2b00      	cmp	r3, #0
 800d27a:	d00c      	beq.n	800d296 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	685b      	ldr	r3, [r3, #4]
 800d280:	2b00      	cmp	r3, #0
 800d282:	d004      	beq.n	800d28e <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	685b      	ldr	r3, [r3, #4]
 800d288:	4618      	mov	r0, r3
 800d28a:	f7fe fb5d 	bl	800b948 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800d28e:	6879      	ldr	r1, [r7, #4]
 800d290:	2003      	movs	r0, #3
 800d292:	f7fd fca9 	bl	800abe8 <memp_free>
  }
}
 800d296:	bf00      	nop
 800d298:	3708      	adds	r7, #8
 800d29a:	46bd      	mov	sp, r7
 800d29c:	bd80      	pop	{r7, pc}
	...

0800d2a0 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800d2a0:	b580      	push	{r7, lr}
 800d2a2:	b084      	sub	sp, #16
 800d2a4:	af00      	add	r7, sp, #0
 800d2a6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	2b00      	cmp	r3, #0
 800d2ac:	d106      	bne.n	800d2bc <tcp_seg_copy+0x1c>
 800d2ae:	4b0f      	ldr	r3, [pc, #60]	; (800d2ec <tcp_seg_copy+0x4c>)
 800d2b0:	f240 6282 	movw	r2, #1666	; 0x682
 800d2b4:	490e      	ldr	r1, [pc, #56]	; (800d2f0 <tcp_seg_copy+0x50>)
 800d2b6:	480f      	ldr	r0, [pc, #60]	; (800d2f4 <tcp_seg_copy+0x54>)
 800d2b8:	f00a f9ec 	bl	8017694 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800d2bc:	2003      	movs	r0, #3
 800d2be:	f7fd fc1d 	bl	800aafc <memp_malloc>
 800d2c2:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800d2c4:	68fb      	ldr	r3, [r7, #12]
 800d2c6:	2b00      	cmp	r3, #0
 800d2c8:	d101      	bne.n	800d2ce <tcp_seg_copy+0x2e>
    return NULL;
 800d2ca:	2300      	movs	r3, #0
 800d2cc:	e00a      	b.n	800d2e4 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800d2ce:	2210      	movs	r2, #16
 800d2d0:	6879      	ldr	r1, [r7, #4]
 800d2d2:	68f8      	ldr	r0, [r7, #12]
 800d2d4:	f00a f933 	bl	801753e <memcpy>
  pbuf_ref(cseg->p);
 800d2d8:	68fb      	ldr	r3, [r7, #12]
 800d2da:	685b      	ldr	r3, [r3, #4]
 800d2dc:	4618      	mov	r0, r3
 800d2de:	f7fe fbd9 	bl	800ba94 <pbuf_ref>
  return cseg;
 800d2e2:	68fb      	ldr	r3, [r7, #12]
}
 800d2e4:	4618      	mov	r0, r3
 800d2e6:	3710      	adds	r7, #16
 800d2e8:	46bd      	mov	sp, r7
 800d2ea:	bd80      	pop	{r7, pc}
 800d2ec:	08019b9c 	.word	0x08019b9c
 800d2f0:	0801a0f0 	.word	0x0801a0f0
 800d2f4:	08019be0 	.word	0x08019be0

0800d2f8 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800d2f8:	b580      	push	{r7, lr}
 800d2fa:	b084      	sub	sp, #16
 800d2fc:	af00      	add	r7, sp, #0
 800d2fe:	60f8      	str	r0, [r7, #12]
 800d300:	60b9      	str	r1, [r7, #8]
 800d302:	607a      	str	r2, [r7, #4]
 800d304:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800d306:	68bb      	ldr	r3, [r7, #8]
 800d308:	2b00      	cmp	r3, #0
 800d30a:	d109      	bne.n	800d320 <tcp_recv_null+0x28>
 800d30c:	4b12      	ldr	r3, [pc, #72]	; (800d358 <tcp_recv_null+0x60>)
 800d30e:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800d312:	4912      	ldr	r1, [pc, #72]	; (800d35c <tcp_recv_null+0x64>)
 800d314:	4812      	ldr	r0, [pc, #72]	; (800d360 <tcp_recv_null+0x68>)
 800d316:	f00a f9bd 	bl	8017694 <iprintf>
 800d31a:	f06f 030f 	mvn.w	r3, #15
 800d31e:	e016      	b.n	800d34e <tcp_recv_null+0x56>

  if (p != NULL) {
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	2b00      	cmp	r3, #0
 800d324:	d009      	beq.n	800d33a <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	891b      	ldrh	r3, [r3, #8]
 800d32a:	4619      	mov	r1, r3
 800d32c:	68b8      	ldr	r0, [r7, #8]
 800d32e:	f7ff fad3 	bl	800c8d8 <tcp_recved>
    pbuf_free(p);
 800d332:	6878      	ldr	r0, [r7, #4]
 800d334:	f7fe fb08 	bl	800b948 <pbuf_free>
 800d338:	e008      	b.n	800d34c <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800d33a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d33e:	2b00      	cmp	r3, #0
 800d340:	d104      	bne.n	800d34c <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800d342:	68b8      	ldr	r0, [r7, #8]
 800d344:	f7fe ffba 	bl	800c2bc <tcp_close>
 800d348:	4603      	mov	r3, r0
 800d34a:	e000      	b.n	800d34e <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800d34c:	2300      	movs	r3, #0
}
 800d34e:	4618      	mov	r0, r3
 800d350:	3710      	adds	r7, #16
 800d352:	46bd      	mov	sp, r7
 800d354:	bd80      	pop	{r7, pc}
 800d356:	bf00      	nop
 800d358:	08019b9c 	.word	0x08019b9c
 800d35c:	0801a10c 	.word	0x0801a10c
 800d360:	08019be0 	.word	0x08019be0

0800d364 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800d364:	b580      	push	{r7, lr}
 800d366:	b086      	sub	sp, #24
 800d368:	af00      	add	r7, sp, #0
 800d36a:	4603      	mov	r3, r0
 800d36c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800d36e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d372:	2b00      	cmp	r3, #0
 800d374:	db01      	blt.n	800d37a <tcp_kill_prio+0x16>
 800d376:	79fb      	ldrb	r3, [r7, #7]
 800d378:	e000      	b.n	800d37c <tcp_kill_prio+0x18>
 800d37a:	237f      	movs	r3, #127	; 0x7f
 800d37c:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800d37e:	7afb      	ldrb	r3, [r7, #11]
 800d380:	2b00      	cmp	r3, #0
 800d382:	d034      	beq.n	800d3ee <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800d384:	7afb      	ldrb	r3, [r7, #11]
 800d386:	3b01      	subs	r3, #1
 800d388:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800d38a:	2300      	movs	r3, #0
 800d38c:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800d38e:	2300      	movs	r3, #0
 800d390:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d392:	4b19      	ldr	r3, [pc, #100]	; (800d3f8 <tcp_kill_prio+0x94>)
 800d394:	681b      	ldr	r3, [r3, #0]
 800d396:	617b      	str	r3, [r7, #20]
 800d398:	e01f      	b.n	800d3da <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800d39a:	697b      	ldr	r3, [r7, #20]
 800d39c:	7d5b      	ldrb	r3, [r3, #21]
 800d39e:	7afa      	ldrb	r2, [r7, #11]
 800d3a0:	429a      	cmp	r2, r3
 800d3a2:	d80c      	bhi.n	800d3be <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800d3a4:	697b      	ldr	r3, [r7, #20]
 800d3a6:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800d3a8:	7afa      	ldrb	r2, [r7, #11]
 800d3aa:	429a      	cmp	r2, r3
 800d3ac:	d112      	bne.n	800d3d4 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800d3ae:	4b13      	ldr	r3, [pc, #76]	; (800d3fc <tcp_kill_prio+0x98>)
 800d3b0:	681a      	ldr	r2, [r3, #0]
 800d3b2:	697b      	ldr	r3, [r7, #20]
 800d3b4:	6a1b      	ldr	r3, [r3, #32]
 800d3b6:	1ad3      	subs	r3, r2, r3
 800d3b8:	68fa      	ldr	r2, [r7, #12]
 800d3ba:	429a      	cmp	r2, r3
 800d3bc:	d80a      	bhi.n	800d3d4 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800d3be:	4b0f      	ldr	r3, [pc, #60]	; (800d3fc <tcp_kill_prio+0x98>)
 800d3c0:	681a      	ldr	r2, [r3, #0]
 800d3c2:	697b      	ldr	r3, [r7, #20]
 800d3c4:	6a1b      	ldr	r3, [r3, #32]
 800d3c6:	1ad3      	subs	r3, r2, r3
 800d3c8:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800d3ca:	697b      	ldr	r3, [r7, #20]
 800d3cc:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800d3ce:	697b      	ldr	r3, [r7, #20]
 800d3d0:	7d5b      	ldrb	r3, [r3, #21]
 800d3d2:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d3d4:	697b      	ldr	r3, [r7, #20]
 800d3d6:	68db      	ldr	r3, [r3, #12]
 800d3d8:	617b      	str	r3, [r7, #20]
 800d3da:	697b      	ldr	r3, [r7, #20]
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	d1dc      	bne.n	800d39a <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800d3e0:	693b      	ldr	r3, [r7, #16]
 800d3e2:	2b00      	cmp	r3, #0
 800d3e4:	d004      	beq.n	800d3f0 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800d3e6:	6938      	ldr	r0, [r7, #16]
 800d3e8:	f7ff f8ae 	bl	800c548 <tcp_abort>
 800d3ec:	e000      	b.n	800d3f0 <tcp_kill_prio+0x8c>
    return;
 800d3ee:	bf00      	nop
  }
}
 800d3f0:	3718      	adds	r7, #24
 800d3f2:	46bd      	mov	sp, r7
 800d3f4:	bd80      	pop	{r7, pc}
 800d3f6:	bf00      	nop
 800d3f8:	20010944 	.word	0x20010944
 800d3fc:	20010938 	.word	0x20010938

0800d400 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800d400:	b580      	push	{r7, lr}
 800d402:	b086      	sub	sp, #24
 800d404:	af00      	add	r7, sp, #0
 800d406:	4603      	mov	r3, r0
 800d408:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800d40a:	79fb      	ldrb	r3, [r7, #7]
 800d40c:	2b08      	cmp	r3, #8
 800d40e:	d009      	beq.n	800d424 <tcp_kill_state+0x24>
 800d410:	79fb      	ldrb	r3, [r7, #7]
 800d412:	2b09      	cmp	r3, #9
 800d414:	d006      	beq.n	800d424 <tcp_kill_state+0x24>
 800d416:	4b1a      	ldr	r3, [pc, #104]	; (800d480 <tcp_kill_state+0x80>)
 800d418:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800d41c:	4919      	ldr	r1, [pc, #100]	; (800d484 <tcp_kill_state+0x84>)
 800d41e:	481a      	ldr	r0, [pc, #104]	; (800d488 <tcp_kill_state+0x88>)
 800d420:	f00a f938 	bl	8017694 <iprintf>

  inactivity = 0;
 800d424:	2300      	movs	r3, #0
 800d426:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800d428:	2300      	movs	r3, #0
 800d42a:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d42c:	4b17      	ldr	r3, [pc, #92]	; (800d48c <tcp_kill_state+0x8c>)
 800d42e:	681b      	ldr	r3, [r3, #0]
 800d430:	617b      	str	r3, [r7, #20]
 800d432:	e017      	b.n	800d464 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800d434:	697b      	ldr	r3, [r7, #20]
 800d436:	7d1b      	ldrb	r3, [r3, #20]
 800d438:	79fa      	ldrb	r2, [r7, #7]
 800d43a:	429a      	cmp	r2, r3
 800d43c:	d10f      	bne.n	800d45e <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800d43e:	4b14      	ldr	r3, [pc, #80]	; (800d490 <tcp_kill_state+0x90>)
 800d440:	681a      	ldr	r2, [r3, #0]
 800d442:	697b      	ldr	r3, [r7, #20]
 800d444:	6a1b      	ldr	r3, [r3, #32]
 800d446:	1ad3      	subs	r3, r2, r3
 800d448:	68fa      	ldr	r2, [r7, #12]
 800d44a:	429a      	cmp	r2, r3
 800d44c:	d807      	bhi.n	800d45e <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800d44e:	4b10      	ldr	r3, [pc, #64]	; (800d490 <tcp_kill_state+0x90>)
 800d450:	681a      	ldr	r2, [r3, #0]
 800d452:	697b      	ldr	r3, [r7, #20]
 800d454:	6a1b      	ldr	r3, [r3, #32]
 800d456:	1ad3      	subs	r3, r2, r3
 800d458:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800d45a:	697b      	ldr	r3, [r7, #20]
 800d45c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d45e:	697b      	ldr	r3, [r7, #20]
 800d460:	68db      	ldr	r3, [r3, #12]
 800d462:	617b      	str	r3, [r7, #20]
 800d464:	697b      	ldr	r3, [r7, #20]
 800d466:	2b00      	cmp	r3, #0
 800d468:	d1e4      	bne.n	800d434 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800d46a:	693b      	ldr	r3, [r7, #16]
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	d003      	beq.n	800d478 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800d470:	2100      	movs	r1, #0
 800d472:	6938      	ldr	r0, [r7, #16]
 800d474:	f7fe ffaa 	bl	800c3cc <tcp_abandon>
  }
}
 800d478:	bf00      	nop
 800d47a:	3718      	adds	r7, #24
 800d47c:	46bd      	mov	sp, r7
 800d47e:	bd80      	pop	{r7, pc}
 800d480:	08019b9c 	.word	0x08019b9c
 800d484:	0801a128 	.word	0x0801a128
 800d488:	08019be0 	.word	0x08019be0
 800d48c:	20010944 	.word	0x20010944
 800d490:	20010938 	.word	0x20010938

0800d494 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800d494:	b580      	push	{r7, lr}
 800d496:	b084      	sub	sp, #16
 800d498:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800d49a:	2300      	movs	r3, #0
 800d49c:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800d49e:	2300      	movs	r3, #0
 800d4a0:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800d4a2:	4b12      	ldr	r3, [pc, #72]	; (800d4ec <tcp_kill_timewait+0x58>)
 800d4a4:	681b      	ldr	r3, [r3, #0]
 800d4a6:	60fb      	str	r3, [r7, #12]
 800d4a8:	e012      	b.n	800d4d0 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800d4aa:	4b11      	ldr	r3, [pc, #68]	; (800d4f0 <tcp_kill_timewait+0x5c>)
 800d4ac:	681a      	ldr	r2, [r3, #0]
 800d4ae:	68fb      	ldr	r3, [r7, #12]
 800d4b0:	6a1b      	ldr	r3, [r3, #32]
 800d4b2:	1ad3      	subs	r3, r2, r3
 800d4b4:	687a      	ldr	r2, [r7, #4]
 800d4b6:	429a      	cmp	r2, r3
 800d4b8:	d807      	bhi.n	800d4ca <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800d4ba:	4b0d      	ldr	r3, [pc, #52]	; (800d4f0 <tcp_kill_timewait+0x5c>)
 800d4bc:	681a      	ldr	r2, [r3, #0]
 800d4be:	68fb      	ldr	r3, [r7, #12]
 800d4c0:	6a1b      	ldr	r3, [r3, #32]
 800d4c2:	1ad3      	subs	r3, r2, r3
 800d4c4:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800d4c6:	68fb      	ldr	r3, [r7, #12]
 800d4c8:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800d4ca:	68fb      	ldr	r3, [r7, #12]
 800d4cc:	68db      	ldr	r3, [r3, #12]
 800d4ce:	60fb      	str	r3, [r7, #12]
 800d4d0:	68fb      	ldr	r3, [r7, #12]
 800d4d2:	2b00      	cmp	r3, #0
 800d4d4:	d1e9      	bne.n	800d4aa <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800d4d6:	68bb      	ldr	r3, [r7, #8]
 800d4d8:	2b00      	cmp	r3, #0
 800d4da:	d002      	beq.n	800d4e2 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800d4dc:	68b8      	ldr	r0, [r7, #8]
 800d4de:	f7ff f833 	bl	800c548 <tcp_abort>
  }
}
 800d4e2:	bf00      	nop
 800d4e4:	3710      	adds	r7, #16
 800d4e6:	46bd      	mov	sp, r7
 800d4e8:	bd80      	pop	{r7, pc}
 800d4ea:	bf00      	nop
 800d4ec:	20010948 	.word	0x20010948
 800d4f0:	20010938 	.word	0x20010938

0800d4f4 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800d4f4:	b580      	push	{r7, lr}
 800d4f6:	b082      	sub	sp, #8
 800d4f8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800d4fa:	4b10      	ldr	r3, [pc, #64]	; (800d53c <tcp_handle_closepend+0x48>)
 800d4fc:	681b      	ldr	r3, [r3, #0]
 800d4fe:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800d500:	e014      	b.n	800d52c <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	68db      	ldr	r3, [r3, #12]
 800d506:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	8b5b      	ldrh	r3, [r3, #26]
 800d50c:	f003 0308 	and.w	r3, r3, #8
 800d510:	2b00      	cmp	r3, #0
 800d512:	d009      	beq.n	800d528 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	8b5b      	ldrh	r3, [r3, #26]
 800d518:	f023 0308 	bic.w	r3, r3, #8
 800d51c:	b29a      	uxth	r2, r3
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800d522:	6878      	ldr	r0, [r7, #4]
 800d524:	f7fe fe60 	bl	800c1e8 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800d528:	683b      	ldr	r3, [r7, #0]
 800d52a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	2b00      	cmp	r3, #0
 800d530:	d1e7      	bne.n	800d502 <tcp_handle_closepend+0xe>
  }
}
 800d532:	bf00      	nop
 800d534:	bf00      	nop
 800d536:	3708      	adds	r7, #8
 800d538:	46bd      	mov	sp, r7
 800d53a:	bd80      	pop	{r7, pc}
 800d53c:	20010944 	.word	0x20010944

0800d540 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800d540:	b580      	push	{r7, lr}
 800d542:	b084      	sub	sp, #16
 800d544:	af00      	add	r7, sp, #0
 800d546:	4603      	mov	r3, r0
 800d548:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d54a:	2001      	movs	r0, #1
 800d54c:	f7fd fad6 	bl	800aafc <memp_malloc>
 800d550:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800d552:	68fb      	ldr	r3, [r7, #12]
 800d554:	2b00      	cmp	r3, #0
 800d556:	d126      	bne.n	800d5a6 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800d558:	f7ff ffcc 	bl	800d4f4 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800d55c:	f7ff ff9a 	bl	800d494 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d560:	2001      	movs	r0, #1
 800d562:	f7fd facb 	bl	800aafc <memp_malloc>
 800d566:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800d568:	68fb      	ldr	r3, [r7, #12]
 800d56a:	2b00      	cmp	r3, #0
 800d56c:	d11b      	bne.n	800d5a6 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800d56e:	2009      	movs	r0, #9
 800d570:	f7ff ff46 	bl	800d400 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d574:	2001      	movs	r0, #1
 800d576:	f7fd fac1 	bl	800aafc <memp_malloc>
 800d57a:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800d57c:	68fb      	ldr	r3, [r7, #12]
 800d57e:	2b00      	cmp	r3, #0
 800d580:	d111      	bne.n	800d5a6 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800d582:	2008      	movs	r0, #8
 800d584:	f7ff ff3c 	bl	800d400 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d588:	2001      	movs	r0, #1
 800d58a:	f7fd fab7 	bl	800aafc <memp_malloc>
 800d58e:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800d590:	68fb      	ldr	r3, [r7, #12]
 800d592:	2b00      	cmp	r3, #0
 800d594:	d107      	bne.n	800d5a6 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800d596:	79fb      	ldrb	r3, [r7, #7]
 800d598:	4618      	mov	r0, r3
 800d59a:	f7ff fee3 	bl	800d364 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d59e:	2001      	movs	r0, #1
 800d5a0:	f7fd faac 	bl	800aafc <memp_malloc>
 800d5a4:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800d5a6:	68fb      	ldr	r3, [r7, #12]
 800d5a8:	2b00      	cmp	r3, #0
 800d5aa:	d03f      	beq.n	800d62c <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800d5ac:	229c      	movs	r2, #156	; 0x9c
 800d5ae:	2100      	movs	r1, #0
 800d5b0:	68f8      	ldr	r0, [r7, #12]
 800d5b2:	f009 ffd2 	bl	801755a <memset>
    pcb->prio = prio;
 800d5b6:	68fb      	ldr	r3, [r7, #12]
 800d5b8:	79fa      	ldrb	r2, [r7, #7]
 800d5ba:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800d5bc:	68fb      	ldr	r3, [r7, #12]
 800d5be:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800d5c2:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800d5c6:	68fb      	ldr	r3, [r7, #12]
 800d5c8:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800d5cc:	855a      	strh	r2, [r3, #42]	; 0x2a
 800d5ce:	68fb      	ldr	r3, [r7, #12]
 800d5d0:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800d5d2:	68fb      	ldr	r3, [r7, #12]
 800d5d4:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800d5d6:	68fb      	ldr	r3, [r7, #12]
 800d5d8:	22ff      	movs	r2, #255	; 0xff
 800d5da:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800d5dc:	68fb      	ldr	r3, [r7, #12]
 800d5de:	f44f 7206 	mov.w	r2, #536	; 0x218
 800d5e2:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800d5e4:	68fb      	ldr	r3, [r7, #12]
 800d5e6:	2206      	movs	r2, #6
 800d5e8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800d5ec:	68fb      	ldr	r3, [r7, #12]
 800d5ee:	2206      	movs	r2, #6
 800d5f0:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800d5f2:	68fb      	ldr	r3, [r7, #12]
 800d5f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d5f8:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800d5fa:	68fb      	ldr	r3, [r7, #12]
 800d5fc:	2201      	movs	r2, #1
 800d5fe:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800d602:	4b0d      	ldr	r3, [pc, #52]	; (800d638 <tcp_alloc+0xf8>)
 800d604:	681a      	ldr	r2, [r3, #0]
 800d606:	68fb      	ldr	r3, [r7, #12]
 800d608:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800d60a:	4b0c      	ldr	r3, [pc, #48]	; (800d63c <tcp_alloc+0xfc>)
 800d60c:	781a      	ldrb	r2, [r3, #0]
 800d60e:	68fb      	ldr	r3, [r7, #12]
 800d610:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800d612:	68fb      	ldr	r3, [r7, #12]
 800d614:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800d618:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800d61c:	68fb      	ldr	r3, [r7, #12]
 800d61e:	4a08      	ldr	r2, [pc, #32]	; (800d640 <tcp_alloc+0x100>)
 800d620:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800d624:	68fb      	ldr	r3, [r7, #12]
 800d626:	4a07      	ldr	r2, [pc, #28]	; (800d644 <tcp_alloc+0x104>)
 800d628:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800d62c:	68fb      	ldr	r3, [r7, #12]
}
 800d62e:	4618      	mov	r0, r3
 800d630:	3710      	adds	r7, #16
 800d632:	46bd      	mov	sp, r7
 800d634:	bd80      	pop	{r7, pc}
 800d636:	bf00      	nop
 800d638:	20010938 	.word	0x20010938
 800d63c:	2001094e 	.word	0x2001094e
 800d640:	0800d2f9 	.word	0x0800d2f9
 800d644:	006ddd00 	.word	0x006ddd00

0800d648 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 800d648:	b580      	push	{r7, lr}
 800d64a:	b084      	sub	sp, #16
 800d64c:	af00      	add	r7, sp, #0
 800d64e:	4603      	mov	r3, r0
 800d650:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 800d652:	2040      	movs	r0, #64	; 0x40
 800d654:	f7ff ff74 	bl	800d540 <tcp_alloc>
 800d658:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 800d65a:	68fb      	ldr	r3, [r7, #12]
}
 800d65c:	4618      	mov	r0, r3
 800d65e:	3710      	adds	r7, #16
 800d660:	46bd      	mov	sp, r7
 800d662:	bd80      	pop	{r7, pc}

0800d664 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 800d664:	b480      	push	{r7}
 800d666:	b083      	sub	sp, #12
 800d668:	af00      	add	r7, sp, #0
 800d66a:	6078      	str	r0, [r7, #4]
 800d66c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	2b00      	cmp	r3, #0
 800d672:	d002      	beq.n	800d67a <tcp_arg+0x16>
    pcb->callback_arg = arg;
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	683a      	ldr	r2, [r7, #0]
 800d678:	611a      	str	r2, [r3, #16]
  }
}
 800d67a:	bf00      	nop
 800d67c:	370c      	adds	r7, #12
 800d67e:	46bd      	mov	sp, r7
 800d680:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d684:	4770      	bx	lr
	...

0800d688 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800d688:	b580      	push	{r7, lr}
 800d68a:	b082      	sub	sp, #8
 800d68c:	af00      	add	r7, sp, #0
 800d68e:	6078      	str	r0, [r7, #4]
 800d690:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	2b00      	cmp	r3, #0
 800d696:	d00e      	beq.n	800d6b6 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	7d1b      	ldrb	r3, [r3, #20]
 800d69c:	2b01      	cmp	r3, #1
 800d69e:	d106      	bne.n	800d6ae <tcp_recv+0x26>
 800d6a0:	4b07      	ldr	r3, [pc, #28]	; (800d6c0 <tcp_recv+0x38>)
 800d6a2:	f240 72df 	movw	r2, #2015	; 0x7df
 800d6a6:	4907      	ldr	r1, [pc, #28]	; (800d6c4 <tcp_recv+0x3c>)
 800d6a8:	4807      	ldr	r0, [pc, #28]	; (800d6c8 <tcp_recv+0x40>)
 800d6aa:	f009 fff3 	bl	8017694 <iprintf>
    pcb->recv = recv;
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	683a      	ldr	r2, [r7, #0]
 800d6b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 800d6b6:	bf00      	nop
 800d6b8:	3708      	adds	r7, #8
 800d6ba:	46bd      	mov	sp, r7
 800d6bc:	bd80      	pop	{r7, pc}
 800d6be:	bf00      	nop
 800d6c0:	08019b9c 	.word	0x08019b9c
 800d6c4:	0801a138 	.word	0x0801a138
 800d6c8:	08019be0 	.word	0x08019be0

0800d6cc <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800d6cc:	b580      	push	{r7, lr}
 800d6ce:	b082      	sub	sp, #8
 800d6d0:	af00      	add	r7, sp, #0
 800d6d2:	6078      	str	r0, [r7, #4]
 800d6d4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	2b00      	cmp	r3, #0
 800d6da:	d00e      	beq.n	800d6fa <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	7d1b      	ldrb	r3, [r3, #20]
 800d6e0:	2b01      	cmp	r3, #1
 800d6e2:	d106      	bne.n	800d6f2 <tcp_sent+0x26>
 800d6e4:	4b07      	ldr	r3, [pc, #28]	; (800d704 <tcp_sent+0x38>)
 800d6e6:	f240 72f3 	movw	r2, #2035	; 0x7f3
 800d6ea:	4907      	ldr	r1, [pc, #28]	; (800d708 <tcp_sent+0x3c>)
 800d6ec:	4807      	ldr	r0, [pc, #28]	; (800d70c <tcp_sent+0x40>)
 800d6ee:	f009 ffd1 	bl	8017694 <iprintf>
    pcb->sent = sent;
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	683a      	ldr	r2, [r7, #0]
 800d6f6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 800d6fa:	bf00      	nop
 800d6fc:	3708      	adds	r7, #8
 800d6fe:	46bd      	mov	sp, r7
 800d700:	bd80      	pop	{r7, pc}
 800d702:	bf00      	nop
 800d704:	08019b9c 	.word	0x08019b9c
 800d708:	0801a160 	.word	0x0801a160
 800d70c:	08019be0 	.word	0x08019be0

0800d710 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800d710:	b580      	push	{r7, lr}
 800d712:	b082      	sub	sp, #8
 800d714:	af00      	add	r7, sp, #0
 800d716:	6078      	str	r0, [r7, #4]
 800d718:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	2b00      	cmp	r3, #0
 800d71e:	d00e      	beq.n	800d73e <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	7d1b      	ldrb	r3, [r3, #20]
 800d724:	2b01      	cmp	r3, #1
 800d726:	d106      	bne.n	800d736 <tcp_err+0x26>
 800d728:	4b07      	ldr	r3, [pc, #28]	; (800d748 <tcp_err+0x38>)
 800d72a:	f640 020d 	movw	r2, #2061	; 0x80d
 800d72e:	4907      	ldr	r1, [pc, #28]	; (800d74c <tcp_err+0x3c>)
 800d730:	4807      	ldr	r0, [pc, #28]	; (800d750 <tcp_err+0x40>)
 800d732:	f009 ffaf 	bl	8017694 <iprintf>
    pcb->errf = err;
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	683a      	ldr	r2, [r7, #0]
 800d73a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 800d73e:	bf00      	nop
 800d740:	3708      	adds	r7, #8
 800d742:	46bd      	mov	sp, r7
 800d744:	bd80      	pop	{r7, pc}
 800d746:	bf00      	nop
 800d748:	08019b9c 	.word	0x08019b9c
 800d74c:	0801a188 	.word	0x0801a188
 800d750:	08019be0 	.word	0x08019be0

0800d754 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 800d754:	b480      	push	{r7}
 800d756:	b085      	sub	sp, #20
 800d758:	af00      	add	r7, sp, #0
 800d75a:	6078      	str	r0, [r7, #4]
 800d75c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	2b00      	cmp	r3, #0
 800d762:	d008      	beq.n	800d776 <tcp_accept+0x22>
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	7d1b      	ldrb	r3, [r3, #20]
 800d768:	2b01      	cmp	r3, #1
 800d76a:	d104      	bne.n	800d776 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 800d770:	68fb      	ldr	r3, [r7, #12]
 800d772:	683a      	ldr	r2, [r7, #0]
 800d774:	619a      	str	r2, [r3, #24]
  }
}
 800d776:	bf00      	nop
 800d778:	3714      	adds	r7, #20
 800d77a:	46bd      	mov	sp, r7
 800d77c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d780:	4770      	bx	lr
	...

0800d784 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800d784:	b580      	push	{r7, lr}
 800d786:	b084      	sub	sp, #16
 800d788:	af00      	add	r7, sp, #0
 800d78a:	60f8      	str	r0, [r7, #12]
 800d78c:	60b9      	str	r1, [r7, #8]
 800d78e:	4613      	mov	r3, r2
 800d790:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800d792:	68fb      	ldr	r3, [r7, #12]
 800d794:	2b00      	cmp	r3, #0
 800d796:	d107      	bne.n	800d7a8 <tcp_poll+0x24>
 800d798:	4b0e      	ldr	r3, [pc, #56]	; (800d7d4 <tcp_poll+0x50>)
 800d79a:	f640 023d 	movw	r2, #2109	; 0x83d
 800d79e:	490e      	ldr	r1, [pc, #56]	; (800d7d8 <tcp_poll+0x54>)
 800d7a0:	480e      	ldr	r0, [pc, #56]	; (800d7dc <tcp_poll+0x58>)
 800d7a2:	f009 ff77 	bl	8017694 <iprintf>
 800d7a6:	e011      	b.n	800d7cc <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800d7a8:	68fb      	ldr	r3, [r7, #12]
 800d7aa:	7d1b      	ldrb	r3, [r3, #20]
 800d7ac:	2b01      	cmp	r3, #1
 800d7ae:	d106      	bne.n	800d7be <tcp_poll+0x3a>
 800d7b0:	4b08      	ldr	r3, [pc, #32]	; (800d7d4 <tcp_poll+0x50>)
 800d7b2:	f640 023e 	movw	r2, #2110	; 0x83e
 800d7b6:	490a      	ldr	r1, [pc, #40]	; (800d7e0 <tcp_poll+0x5c>)
 800d7b8:	4808      	ldr	r0, [pc, #32]	; (800d7dc <tcp_poll+0x58>)
 800d7ba:	f009 ff6b 	bl	8017694 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800d7be:	68fb      	ldr	r3, [r7, #12]
 800d7c0:	68ba      	ldr	r2, [r7, #8]
 800d7c2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800d7c6:	68fb      	ldr	r3, [r7, #12]
 800d7c8:	79fa      	ldrb	r2, [r7, #7]
 800d7ca:	775a      	strb	r2, [r3, #29]
}
 800d7cc:	3710      	adds	r7, #16
 800d7ce:	46bd      	mov	sp, r7
 800d7d0:	bd80      	pop	{r7, pc}
 800d7d2:	bf00      	nop
 800d7d4:	08019b9c 	.word	0x08019b9c
 800d7d8:	0801a1b0 	.word	0x0801a1b0
 800d7dc:	08019be0 	.word	0x08019be0
 800d7e0:	0801a1c8 	.word	0x0801a1c8

0800d7e4 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800d7e4:	b580      	push	{r7, lr}
 800d7e6:	b082      	sub	sp, #8
 800d7e8:	af00      	add	r7, sp, #0
 800d7ea:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	2b00      	cmp	r3, #0
 800d7f0:	d107      	bne.n	800d802 <tcp_pcb_purge+0x1e>
 800d7f2:	4b21      	ldr	r3, [pc, #132]	; (800d878 <tcp_pcb_purge+0x94>)
 800d7f4:	f640 0251 	movw	r2, #2129	; 0x851
 800d7f8:	4920      	ldr	r1, [pc, #128]	; (800d87c <tcp_pcb_purge+0x98>)
 800d7fa:	4821      	ldr	r0, [pc, #132]	; (800d880 <tcp_pcb_purge+0x9c>)
 800d7fc:	f009 ff4a 	bl	8017694 <iprintf>
 800d800:	e037      	b.n	800d872 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	7d1b      	ldrb	r3, [r3, #20]
 800d806:	2b00      	cmp	r3, #0
 800d808:	d033      	beq.n	800d872 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800d80e:	2b0a      	cmp	r3, #10
 800d810:	d02f      	beq.n	800d872 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800d816:	2b01      	cmp	r3, #1
 800d818:	d02b      	beq.n	800d872 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d81e:	2b00      	cmp	r3, #0
 800d820:	d007      	beq.n	800d832 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d826:	4618      	mov	r0, r3
 800d828:	f7fe f88e 	bl	800b948 <pbuf_free>
      pcb->refused_data = NULL;
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	2200      	movs	r2, #0
 800d830:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d836:	2b00      	cmp	r3, #0
 800d838:	d002      	beq.n	800d840 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800d83a:	6878      	ldr	r0, [r7, #4]
 800d83c:	f000 f986 	bl	800db4c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d846:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d84c:	4618      	mov	r0, r3
 800d84e:	f7ff fcf9 	bl	800d244 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d856:	4618      	mov	r0, r3
 800d858:	f7ff fcf4 	bl	800d244 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	2200      	movs	r2, #0
 800d860:	66da      	str	r2, [r3, #108]	; 0x6c
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	2200      	movs	r2, #0
 800d86e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800d872:	3708      	adds	r7, #8
 800d874:	46bd      	mov	sp, r7
 800d876:	bd80      	pop	{r7, pc}
 800d878:	08019b9c 	.word	0x08019b9c
 800d87c:	0801a1e8 	.word	0x0801a1e8
 800d880:	08019be0 	.word	0x08019be0

0800d884 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800d884:	b580      	push	{r7, lr}
 800d886:	b084      	sub	sp, #16
 800d888:	af00      	add	r7, sp, #0
 800d88a:	6078      	str	r0, [r7, #4]
 800d88c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800d88e:	683b      	ldr	r3, [r7, #0]
 800d890:	2b00      	cmp	r3, #0
 800d892:	d106      	bne.n	800d8a2 <tcp_pcb_remove+0x1e>
 800d894:	4b3e      	ldr	r3, [pc, #248]	; (800d990 <tcp_pcb_remove+0x10c>)
 800d896:	f640 0283 	movw	r2, #2179	; 0x883
 800d89a:	493e      	ldr	r1, [pc, #248]	; (800d994 <tcp_pcb_remove+0x110>)
 800d89c:	483e      	ldr	r0, [pc, #248]	; (800d998 <tcp_pcb_remove+0x114>)
 800d89e:	f009 fef9 	bl	8017694 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	2b00      	cmp	r3, #0
 800d8a6:	d106      	bne.n	800d8b6 <tcp_pcb_remove+0x32>
 800d8a8:	4b39      	ldr	r3, [pc, #228]	; (800d990 <tcp_pcb_remove+0x10c>)
 800d8aa:	f640 0284 	movw	r2, #2180	; 0x884
 800d8ae:	493b      	ldr	r1, [pc, #236]	; (800d99c <tcp_pcb_remove+0x118>)
 800d8b0:	4839      	ldr	r0, [pc, #228]	; (800d998 <tcp_pcb_remove+0x114>)
 800d8b2:	f009 feef 	bl	8017694 <iprintf>

  TCP_RMV(pcblist, pcb);
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	681b      	ldr	r3, [r3, #0]
 800d8ba:	683a      	ldr	r2, [r7, #0]
 800d8bc:	429a      	cmp	r2, r3
 800d8be:	d105      	bne.n	800d8cc <tcp_pcb_remove+0x48>
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	681b      	ldr	r3, [r3, #0]
 800d8c4:	68da      	ldr	r2, [r3, #12]
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	601a      	str	r2, [r3, #0]
 800d8ca:	e013      	b.n	800d8f4 <tcp_pcb_remove+0x70>
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	681b      	ldr	r3, [r3, #0]
 800d8d0:	60fb      	str	r3, [r7, #12]
 800d8d2:	e00c      	b.n	800d8ee <tcp_pcb_remove+0x6a>
 800d8d4:	68fb      	ldr	r3, [r7, #12]
 800d8d6:	68db      	ldr	r3, [r3, #12]
 800d8d8:	683a      	ldr	r2, [r7, #0]
 800d8da:	429a      	cmp	r2, r3
 800d8dc:	d104      	bne.n	800d8e8 <tcp_pcb_remove+0x64>
 800d8de:	683b      	ldr	r3, [r7, #0]
 800d8e0:	68da      	ldr	r2, [r3, #12]
 800d8e2:	68fb      	ldr	r3, [r7, #12]
 800d8e4:	60da      	str	r2, [r3, #12]
 800d8e6:	e005      	b.n	800d8f4 <tcp_pcb_remove+0x70>
 800d8e8:	68fb      	ldr	r3, [r7, #12]
 800d8ea:	68db      	ldr	r3, [r3, #12]
 800d8ec:	60fb      	str	r3, [r7, #12]
 800d8ee:	68fb      	ldr	r3, [r7, #12]
 800d8f0:	2b00      	cmp	r3, #0
 800d8f2:	d1ef      	bne.n	800d8d4 <tcp_pcb_remove+0x50>
 800d8f4:	683b      	ldr	r3, [r7, #0]
 800d8f6:	2200      	movs	r2, #0
 800d8f8:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800d8fa:	6838      	ldr	r0, [r7, #0]
 800d8fc:	f7ff ff72 	bl	800d7e4 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800d900:	683b      	ldr	r3, [r7, #0]
 800d902:	7d1b      	ldrb	r3, [r3, #20]
 800d904:	2b0a      	cmp	r3, #10
 800d906:	d013      	beq.n	800d930 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800d908:	683b      	ldr	r3, [r7, #0]
 800d90a:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800d90c:	2b01      	cmp	r3, #1
 800d90e:	d00f      	beq.n	800d930 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800d910:	683b      	ldr	r3, [r7, #0]
 800d912:	8b5b      	ldrh	r3, [r3, #26]
 800d914:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800d918:	2b00      	cmp	r3, #0
 800d91a:	d009      	beq.n	800d930 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800d91c:	683b      	ldr	r3, [r7, #0]
 800d91e:	8b5b      	ldrh	r3, [r3, #26]
 800d920:	f043 0302 	orr.w	r3, r3, #2
 800d924:	b29a      	uxth	r2, r3
 800d926:	683b      	ldr	r3, [r7, #0]
 800d928:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800d92a:	6838      	ldr	r0, [r7, #0]
 800d92c:	f003 fbc6 	bl	80110bc <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800d930:	683b      	ldr	r3, [r7, #0]
 800d932:	7d1b      	ldrb	r3, [r3, #20]
 800d934:	2b01      	cmp	r3, #1
 800d936:	d020      	beq.n	800d97a <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800d938:	683b      	ldr	r3, [r7, #0]
 800d93a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d93c:	2b00      	cmp	r3, #0
 800d93e:	d006      	beq.n	800d94e <tcp_pcb_remove+0xca>
 800d940:	4b13      	ldr	r3, [pc, #76]	; (800d990 <tcp_pcb_remove+0x10c>)
 800d942:	f640 0293 	movw	r2, #2195	; 0x893
 800d946:	4916      	ldr	r1, [pc, #88]	; (800d9a0 <tcp_pcb_remove+0x11c>)
 800d948:	4813      	ldr	r0, [pc, #76]	; (800d998 <tcp_pcb_remove+0x114>)
 800d94a:	f009 fea3 	bl	8017694 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800d94e:	683b      	ldr	r3, [r7, #0]
 800d950:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d952:	2b00      	cmp	r3, #0
 800d954:	d006      	beq.n	800d964 <tcp_pcb_remove+0xe0>
 800d956:	4b0e      	ldr	r3, [pc, #56]	; (800d990 <tcp_pcb_remove+0x10c>)
 800d958:	f640 0294 	movw	r2, #2196	; 0x894
 800d95c:	4911      	ldr	r1, [pc, #68]	; (800d9a4 <tcp_pcb_remove+0x120>)
 800d95e:	480e      	ldr	r0, [pc, #56]	; (800d998 <tcp_pcb_remove+0x114>)
 800d960:	f009 fe98 	bl	8017694 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800d964:	683b      	ldr	r3, [r7, #0]
 800d966:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d968:	2b00      	cmp	r3, #0
 800d96a:	d006      	beq.n	800d97a <tcp_pcb_remove+0xf6>
 800d96c:	4b08      	ldr	r3, [pc, #32]	; (800d990 <tcp_pcb_remove+0x10c>)
 800d96e:	f640 0296 	movw	r2, #2198	; 0x896
 800d972:	490d      	ldr	r1, [pc, #52]	; (800d9a8 <tcp_pcb_remove+0x124>)
 800d974:	4808      	ldr	r0, [pc, #32]	; (800d998 <tcp_pcb_remove+0x114>)
 800d976:	f009 fe8d 	bl	8017694 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800d97a:	683b      	ldr	r3, [r7, #0]
 800d97c:	2200      	movs	r2, #0
 800d97e:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800d980:	683b      	ldr	r3, [r7, #0]
 800d982:	2200      	movs	r2, #0
 800d984:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800d986:	bf00      	nop
 800d988:	3710      	adds	r7, #16
 800d98a:	46bd      	mov	sp, r7
 800d98c:	bd80      	pop	{r7, pc}
 800d98e:	bf00      	nop
 800d990:	08019b9c 	.word	0x08019b9c
 800d994:	0801a204 	.word	0x0801a204
 800d998:	08019be0 	.word	0x08019be0
 800d99c:	0801a220 	.word	0x0801a220
 800d9a0:	0801a240 	.word	0x0801a240
 800d9a4:	0801a258 	.word	0x0801a258
 800d9a8:	0801a274 	.word	0x0801a274

0800d9ac <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800d9ac:	b580      	push	{r7, lr}
 800d9ae:	b082      	sub	sp, #8
 800d9b0:	af00      	add	r7, sp, #0
 800d9b2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	2b00      	cmp	r3, #0
 800d9b8:	d106      	bne.n	800d9c8 <tcp_next_iss+0x1c>
 800d9ba:	4b0a      	ldr	r3, [pc, #40]	; (800d9e4 <tcp_next_iss+0x38>)
 800d9bc:	f640 02af 	movw	r2, #2223	; 0x8af
 800d9c0:	4909      	ldr	r1, [pc, #36]	; (800d9e8 <tcp_next_iss+0x3c>)
 800d9c2:	480a      	ldr	r0, [pc, #40]	; (800d9ec <tcp_next_iss+0x40>)
 800d9c4:	f009 fe66 	bl	8017694 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800d9c8:	4b09      	ldr	r3, [pc, #36]	; (800d9f0 <tcp_next_iss+0x44>)
 800d9ca:	681a      	ldr	r2, [r3, #0]
 800d9cc:	4b09      	ldr	r3, [pc, #36]	; (800d9f4 <tcp_next_iss+0x48>)
 800d9ce:	681b      	ldr	r3, [r3, #0]
 800d9d0:	4413      	add	r3, r2
 800d9d2:	4a07      	ldr	r2, [pc, #28]	; (800d9f0 <tcp_next_iss+0x44>)
 800d9d4:	6013      	str	r3, [r2, #0]
  return iss;
 800d9d6:	4b06      	ldr	r3, [pc, #24]	; (800d9f0 <tcp_next_iss+0x44>)
 800d9d8:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800d9da:	4618      	mov	r0, r3
 800d9dc:	3708      	adds	r7, #8
 800d9de:	46bd      	mov	sp, r7
 800d9e0:	bd80      	pop	{r7, pc}
 800d9e2:	bf00      	nop
 800d9e4:	08019b9c 	.word	0x08019b9c
 800d9e8:	0801a28c 	.word	0x0801a28c
 800d9ec:	08019be0 	.word	0x08019be0
 800d9f0:	20000028 	.word	0x20000028
 800d9f4:	20010938 	.word	0x20010938

0800d9f8 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800d9f8:	b580      	push	{r7, lr}
 800d9fa:	b086      	sub	sp, #24
 800d9fc:	af00      	add	r7, sp, #0
 800d9fe:	4603      	mov	r3, r0
 800da00:	60b9      	str	r1, [r7, #8]
 800da02:	607a      	str	r2, [r7, #4]
 800da04:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	2b00      	cmp	r3, #0
 800da0a:	d106      	bne.n	800da1a <tcp_eff_send_mss_netif+0x22>
 800da0c:	4b14      	ldr	r3, [pc, #80]	; (800da60 <tcp_eff_send_mss_netif+0x68>)
 800da0e:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800da12:	4914      	ldr	r1, [pc, #80]	; (800da64 <tcp_eff_send_mss_netif+0x6c>)
 800da14:	4814      	ldr	r0, [pc, #80]	; (800da68 <tcp_eff_send_mss_netif+0x70>)
 800da16:	f009 fe3d 	bl	8017694 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800da1a:	68bb      	ldr	r3, [r7, #8]
 800da1c:	2b00      	cmp	r3, #0
 800da1e:	d101      	bne.n	800da24 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800da20:	89fb      	ldrh	r3, [r7, #14]
 800da22:	e019      	b.n	800da58 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800da24:	68bb      	ldr	r3, [r7, #8]
 800da26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800da28:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800da2a:	8afb      	ldrh	r3, [r7, #22]
 800da2c:	2b00      	cmp	r3, #0
 800da2e:	d012      	beq.n	800da56 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800da30:	2328      	movs	r3, #40	; 0x28
 800da32:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800da34:	8afa      	ldrh	r2, [r7, #22]
 800da36:	8abb      	ldrh	r3, [r7, #20]
 800da38:	429a      	cmp	r2, r3
 800da3a:	d904      	bls.n	800da46 <tcp_eff_send_mss_netif+0x4e>
 800da3c:	8afa      	ldrh	r2, [r7, #22]
 800da3e:	8abb      	ldrh	r3, [r7, #20]
 800da40:	1ad3      	subs	r3, r2, r3
 800da42:	b29b      	uxth	r3, r3
 800da44:	e000      	b.n	800da48 <tcp_eff_send_mss_netif+0x50>
 800da46:	2300      	movs	r3, #0
 800da48:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800da4a:	8a7a      	ldrh	r2, [r7, #18]
 800da4c:	89fb      	ldrh	r3, [r7, #14]
 800da4e:	4293      	cmp	r3, r2
 800da50:	bf28      	it	cs
 800da52:	4613      	movcs	r3, r2
 800da54:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800da56:	89fb      	ldrh	r3, [r7, #14]
}
 800da58:	4618      	mov	r0, r3
 800da5a:	3718      	adds	r7, #24
 800da5c:	46bd      	mov	sp, r7
 800da5e:	bd80      	pop	{r7, pc}
 800da60:	08019b9c 	.word	0x08019b9c
 800da64:	0801a2a8 	.word	0x0801a2a8
 800da68:	08019be0 	.word	0x08019be0

0800da6c <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800da6c:	b580      	push	{r7, lr}
 800da6e:	b084      	sub	sp, #16
 800da70:	af00      	add	r7, sp, #0
 800da72:	6078      	str	r0, [r7, #4]
 800da74:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800da76:	683b      	ldr	r3, [r7, #0]
 800da78:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	2b00      	cmp	r3, #0
 800da7e:	d119      	bne.n	800dab4 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800da80:	4b10      	ldr	r3, [pc, #64]	; (800dac4 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800da82:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800da86:	4910      	ldr	r1, [pc, #64]	; (800dac8 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800da88:	4810      	ldr	r0, [pc, #64]	; (800dacc <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800da8a:	f009 fe03 	bl	8017694 <iprintf>

  while (pcb != NULL) {
 800da8e:	e011      	b.n	800dab4 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800da90:	68fb      	ldr	r3, [r7, #12]
 800da92:	681a      	ldr	r2, [r3, #0]
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	681b      	ldr	r3, [r3, #0]
 800da98:	429a      	cmp	r2, r3
 800da9a:	d108      	bne.n	800daae <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800da9c:	68fb      	ldr	r3, [r7, #12]
 800da9e:	68db      	ldr	r3, [r3, #12]
 800daa0:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800daa2:	68f8      	ldr	r0, [r7, #12]
 800daa4:	f7fe fd50 	bl	800c548 <tcp_abort>
      pcb = next;
 800daa8:	68bb      	ldr	r3, [r7, #8]
 800daaa:	60fb      	str	r3, [r7, #12]
 800daac:	e002      	b.n	800dab4 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800daae:	68fb      	ldr	r3, [r7, #12]
 800dab0:	68db      	ldr	r3, [r3, #12]
 800dab2:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800dab4:	68fb      	ldr	r3, [r7, #12]
 800dab6:	2b00      	cmp	r3, #0
 800dab8:	d1ea      	bne.n	800da90 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800daba:	bf00      	nop
 800dabc:	bf00      	nop
 800dabe:	3710      	adds	r7, #16
 800dac0:	46bd      	mov	sp, r7
 800dac2:	bd80      	pop	{r7, pc}
 800dac4:	08019b9c 	.word	0x08019b9c
 800dac8:	0801a2d0 	.word	0x0801a2d0
 800dacc:	08019be0 	.word	0x08019be0

0800dad0 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800dad0:	b580      	push	{r7, lr}
 800dad2:	b084      	sub	sp, #16
 800dad4:	af00      	add	r7, sp, #0
 800dad6:	6078      	str	r0, [r7, #4]
 800dad8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	2b00      	cmp	r3, #0
 800dade:	d02a      	beq.n	800db36 <tcp_netif_ip_addr_changed+0x66>
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	681b      	ldr	r3, [r3, #0]
 800dae4:	2b00      	cmp	r3, #0
 800dae6:	d026      	beq.n	800db36 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800dae8:	4b15      	ldr	r3, [pc, #84]	; (800db40 <tcp_netif_ip_addr_changed+0x70>)
 800daea:	681b      	ldr	r3, [r3, #0]
 800daec:	4619      	mov	r1, r3
 800daee:	6878      	ldr	r0, [r7, #4]
 800daf0:	f7ff ffbc 	bl	800da6c <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800daf4:	4b13      	ldr	r3, [pc, #76]	; (800db44 <tcp_netif_ip_addr_changed+0x74>)
 800daf6:	681b      	ldr	r3, [r3, #0]
 800daf8:	4619      	mov	r1, r3
 800dafa:	6878      	ldr	r0, [r7, #4]
 800dafc:	f7ff ffb6 	bl	800da6c <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800db00:	683b      	ldr	r3, [r7, #0]
 800db02:	2b00      	cmp	r3, #0
 800db04:	d017      	beq.n	800db36 <tcp_netif_ip_addr_changed+0x66>
 800db06:	683b      	ldr	r3, [r7, #0]
 800db08:	681b      	ldr	r3, [r3, #0]
 800db0a:	2b00      	cmp	r3, #0
 800db0c:	d013      	beq.n	800db36 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800db0e:	4b0e      	ldr	r3, [pc, #56]	; (800db48 <tcp_netif_ip_addr_changed+0x78>)
 800db10:	681b      	ldr	r3, [r3, #0]
 800db12:	60fb      	str	r3, [r7, #12]
 800db14:	e00c      	b.n	800db30 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800db16:	68fb      	ldr	r3, [r7, #12]
 800db18:	681a      	ldr	r2, [r3, #0]
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	681b      	ldr	r3, [r3, #0]
 800db1e:	429a      	cmp	r2, r3
 800db20:	d103      	bne.n	800db2a <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800db22:	683b      	ldr	r3, [r7, #0]
 800db24:	681a      	ldr	r2, [r3, #0]
 800db26:	68fb      	ldr	r3, [r7, #12]
 800db28:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800db2a:	68fb      	ldr	r3, [r7, #12]
 800db2c:	68db      	ldr	r3, [r3, #12]
 800db2e:	60fb      	str	r3, [r7, #12]
 800db30:	68fb      	ldr	r3, [r7, #12]
 800db32:	2b00      	cmp	r3, #0
 800db34:	d1ef      	bne.n	800db16 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800db36:	bf00      	nop
 800db38:	3710      	adds	r7, #16
 800db3a:	46bd      	mov	sp, r7
 800db3c:	bd80      	pop	{r7, pc}
 800db3e:	bf00      	nop
 800db40:	20010944 	.word	0x20010944
 800db44:	2001093c 	.word	0x2001093c
 800db48:	20010940 	.word	0x20010940

0800db4c <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800db4c:	b580      	push	{r7, lr}
 800db4e:	b082      	sub	sp, #8
 800db50:	af00      	add	r7, sp, #0
 800db52:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800db58:	2b00      	cmp	r3, #0
 800db5a:	d007      	beq.n	800db6c <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800db60:	4618      	mov	r0, r3
 800db62:	f7ff fb6f 	bl	800d244 <tcp_segs_free>
    pcb->ooseq = NULL;
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	2200      	movs	r2, #0
 800db6a:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800db6c:	bf00      	nop
 800db6e:	3708      	adds	r7, #8
 800db70:	46bd      	mov	sp, r7
 800db72:	bd80      	pop	{r7, pc}

0800db74 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800db74:	b590      	push	{r4, r7, lr}
 800db76:	b08d      	sub	sp, #52	; 0x34
 800db78:	af04      	add	r7, sp, #16
 800db7a:	6078      	str	r0, [r7, #4]
 800db7c:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	2b00      	cmp	r3, #0
 800db82:	d105      	bne.n	800db90 <tcp_input+0x1c>
 800db84:	4b9b      	ldr	r3, [pc, #620]	; (800ddf4 <tcp_input+0x280>)
 800db86:	2283      	movs	r2, #131	; 0x83
 800db88:	499b      	ldr	r1, [pc, #620]	; (800ddf8 <tcp_input+0x284>)
 800db8a:	489c      	ldr	r0, [pc, #624]	; (800ddfc <tcp_input+0x288>)
 800db8c:	f009 fd82 	bl	8017694 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	685b      	ldr	r3, [r3, #4]
 800db94:	4a9a      	ldr	r2, [pc, #616]	; (800de00 <tcp_input+0x28c>)
 800db96:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	895b      	ldrh	r3, [r3, #10]
 800db9c:	2b13      	cmp	r3, #19
 800db9e:	f240 83d1 	bls.w	800e344 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800dba2:	4b98      	ldr	r3, [pc, #608]	; (800de04 <tcp_input+0x290>)
 800dba4:	695b      	ldr	r3, [r3, #20]
 800dba6:	4a97      	ldr	r2, [pc, #604]	; (800de04 <tcp_input+0x290>)
 800dba8:	6812      	ldr	r2, [r2, #0]
 800dbaa:	4611      	mov	r1, r2
 800dbac:	4618      	mov	r0, r3
 800dbae:	f008 fa61 	bl	8016074 <ip4_addr_isbroadcast_u32>
 800dbb2:	4603      	mov	r3, r0
 800dbb4:	2b00      	cmp	r3, #0
 800dbb6:	f040 83c7 	bne.w	800e348 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800dbba:	4b92      	ldr	r3, [pc, #584]	; (800de04 <tcp_input+0x290>)
 800dbbc:	695b      	ldr	r3, [r3, #20]
 800dbbe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800dbc2:	2be0      	cmp	r3, #224	; 0xe0
 800dbc4:	f000 83c0 	beq.w	800e348 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800dbc8:	4b8d      	ldr	r3, [pc, #564]	; (800de00 <tcp_input+0x28c>)
 800dbca:	681b      	ldr	r3, [r3, #0]
 800dbcc:	899b      	ldrh	r3, [r3, #12]
 800dbce:	b29b      	uxth	r3, r3
 800dbd0:	4618      	mov	r0, r3
 800dbd2:	f7fc fabb 	bl	800a14c <lwip_htons>
 800dbd6:	4603      	mov	r3, r0
 800dbd8:	0b1b      	lsrs	r3, r3, #12
 800dbda:	b29b      	uxth	r3, r3
 800dbdc:	b2db      	uxtb	r3, r3
 800dbde:	009b      	lsls	r3, r3, #2
 800dbe0:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800dbe2:	7cbb      	ldrb	r3, [r7, #18]
 800dbe4:	2b13      	cmp	r3, #19
 800dbe6:	f240 83b1 	bls.w	800e34c <tcp_input+0x7d8>
 800dbea:	7cbb      	ldrb	r3, [r7, #18]
 800dbec:	b29a      	uxth	r2, r3
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	891b      	ldrh	r3, [r3, #8]
 800dbf2:	429a      	cmp	r2, r3
 800dbf4:	f200 83aa 	bhi.w	800e34c <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800dbf8:	7cbb      	ldrb	r3, [r7, #18]
 800dbfa:	b29b      	uxth	r3, r3
 800dbfc:	3b14      	subs	r3, #20
 800dbfe:	b29a      	uxth	r2, r3
 800dc00:	4b81      	ldr	r3, [pc, #516]	; (800de08 <tcp_input+0x294>)
 800dc02:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800dc04:	4b81      	ldr	r3, [pc, #516]	; (800de0c <tcp_input+0x298>)
 800dc06:	2200      	movs	r2, #0
 800dc08:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	895a      	ldrh	r2, [r3, #10]
 800dc0e:	7cbb      	ldrb	r3, [r7, #18]
 800dc10:	b29b      	uxth	r3, r3
 800dc12:	429a      	cmp	r2, r3
 800dc14:	d309      	bcc.n	800dc2a <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800dc16:	4b7c      	ldr	r3, [pc, #496]	; (800de08 <tcp_input+0x294>)
 800dc18:	881a      	ldrh	r2, [r3, #0]
 800dc1a:	4b7d      	ldr	r3, [pc, #500]	; (800de10 <tcp_input+0x29c>)
 800dc1c:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800dc1e:	7cbb      	ldrb	r3, [r7, #18]
 800dc20:	4619      	mov	r1, r3
 800dc22:	6878      	ldr	r0, [r7, #4]
 800dc24:	f7fd fe0a 	bl	800b83c <pbuf_remove_header>
 800dc28:	e04e      	b.n	800dcc8 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	681b      	ldr	r3, [r3, #0]
 800dc2e:	2b00      	cmp	r3, #0
 800dc30:	d105      	bne.n	800dc3e <tcp_input+0xca>
 800dc32:	4b70      	ldr	r3, [pc, #448]	; (800ddf4 <tcp_input+0x280>)
 800dc34:	22c2      	movs	r2, #194	; 0xc2
 800dc36:	4977      	ldr	r1, [pc, #476]	; (800de14 <tcp_input+0x2a0>)
 800dc38:	4870      	ldr	r0, [pc, #448]	; (800ddfc <tcp_input+0x288>)
 800dc3a:	f009 fd2b 	bl	8017694 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800dc3e:	2114      	movs	r1, #20
 800dc40:	6878      	ldr	r0, [r7, #4]
 800dc42:	f7fd fdfb 	bl	800b83c <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	895a      	ldrh	r2, [r3, #10]
 800dc4a:	4b71      	ldr	r3, [pc, #452]	; (800de10 <tcp_input+0x29c>)
 800dc4c:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800dc4e:	4b6e      	ldr	r3, [pc, #440]	; (800de08 <tcp_input+0x294>)
 800dc50:	881a      	ldrh	r2, [r3, #0]
 800dc52:	4b6f      	ldr	r3, [pc, #444]	; (800de10 <tcp_input+0x29c>)
 800dc54:	881b      	ldrh	r3, [r3, #0]
 800dc56:	1ad3      	subs	r3, r2, r3
 800dc58:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800dc5a:	4b6d      	ldr	r3, [pc, #436]	; (800de10 <tcp_input+0x29c>)
 800dc5c:	881b      	ldrh	r3, [r3, #0]
 800dc5e:	4619      	mov	r1, r3
 800dc60:	6878      	ldr	r0, [r7, #4]
 800dc62:	f7fd fdeb 	bl	800b83c <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	681b      	ldr	r3, [r3, #0]
 800dc6a:	895b      	ldrh	r3, [r3, #10]
 800dc6c:	8a3a      	ldrh	r2, [r7, #16]
 800dc6e:	429a      	cmp	r2, r3
 800dc70:	f200 836e 	bhi.w	800e350 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	681b      	ldr	r3, [r3, #0]
 800dc78:	685b      	ldr	r3, [r3, #4]
 800dc7a:	4a64      	ldr	r2, [pc, #400]	; (800de0c <tcp_input+0x298>)
 800dc7c:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	681b      	ldr	r3, [r3, #0]
 800dc82:	8a3a      	ldrh	r2, [r7, #16]
 800dc84:	4611      	mov	r1, r2
 800dc86:	4618      	mov	r0, r3
 800dc88:	f7fd fdd8 	bl	800b83c <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	891a      	ldrh	r2, [r3, #8]
 800dc90:	8a3b      	ldrh	r3, [r7, #16]
 800dc92:	1ad3      	subs	r3, r2, r3
 800dc94:	b29a      	uxth	r2, r3
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	895b      	ldrh	r3, [r3, #10]
 800dc9e:	2b00      	cmp	r3, #0
 800dca0:	d005      	beq.n	800dcae <tcp_input+0x13a>
 800dca2:	4b54      	ldr	r3, [pc, #336]	; (800ddf4 <tcp_input+0x280>)
 800dca4:	22df      	movs	r2, #223	; 0xdf
 800dca6:	495c      	ldr	r1, [pc, #368]	; (800de18 <tcp_input+0x2a4>)
 800dca8:	4854      	ldr	r0, [pc, #336]	; (800ddfc <tcp_input+0x288>)
 800dcaa:	f009 fcf3 	bl	8017694 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	891a      	ldrh	r2, [r3, #8]
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	681b      	ldr	r3, [r3, #0]
 800dcb6:	891b      	ldrh	r3, [r3, #8]
 800dcb8:	429a      	cmp	r2, r3
 800dcba:	d005      	beq.n	800dcc8 <tcp_input+0x154>
 800dcbc:	4b4d      	ldr	r3, [pc, #308]	; (800ddf4 <tcp_input+0x280>)
 800dcbe:	22e0      	movs	r2, #224	; 0xe0
 800dcc0:	4956      	ldr	r1, [pc, #344]	; (800de1c <tcp_input+0x2a8>)
 800dcc2:	484e      	ldr	r0, [pc, #312]	; (800ddfc <tcp_input+0x288>)
 800dcc4:	f009 fce6 	bl	8017694 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800dcc8:	4b4d      	ldr	r3, [pc, #308]	; (800de00 <tcp_input+0x28c>)
 800dcca:	681b      	ldr	r3, [r3, #0]
 800dccc:	881b      	ldrh	r3, [r3, #0]
 800dcce:	b29b      	uxth	r3, r3
 800dcd0:	4a4b      	ldr	r2, [pc, #300]	; (800de00 <tcp_input+0x28c>)
 800dcd2:	6814      	ldr	r4, [r2, #0]
 800dcd4:	4618      	mov	r0, r3
 800dcd6:	f7fc fa39 	bl	800a14c <lwip_htons>
 800dcda:	4603      	mov	r3, r0
 800dcdc:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800dcde:	4b48      	ldr	r3, [pc, #288]	; (800de00 <tcp_input+0x28c>)
 800dce0:	681b      	ldr	r3, [r3, #0]
 800dce2:	885b      	ldrh	r3, [r3, #2]
 800dce4:	b29b      	uxth	r3, r3
 800dce6:	4a46      	ldr	r2, [pc, #280]	; (800de00 <tcp_input+0x28c>)
 800dce8:	6814      	ldr	r4, [r2, #0]
 800dcea:	4618      	mov	r0, r3
 800dcec:	f7fc fa2e 	bl	800a14c <lwip_htons>
 800dcf0:	4603      	mov	r3, r0
 800dcf2:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800dcf4:	4b42      	ldr	r3, [pc, #264]	; (800de00 <tcp_input+0x28c>)
 800dcf6:	681b      	ldr	r3, [r3, #0]
 800dcf8:	685b      	ldr	r3, [r3, #4]
 800dcfa:	4a41      	ldr	r2, [pc, #260]	; (800de00 <tcp_input+0x28c>)
 800dcfc:	6814      	ldr	r4, [r2, #0]
 800dcfe:	4618      	mov	r0, r3
 800dd00:	f7fc fa39 	bl	800a176 <lwip_htonl>
 800dd04:	4603      	mov	r3, r0
 800dd06:	6063      	str	r3, [r4, #4]
 800dd08:	6863      	ldr	r3, [r4, #4]
 800dd0a:	4a45      	ldr	r2, [pc, #276]	; (800de20 <tcp_input+0x2ac>)
 800dd0c:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800dd0e:	4b3c      	ldr	r3, [pc, #240]	; (800de00 <tcp_input+0x28c>)
 800dd10:	681b      	ldr	r3, [r3, #0]
 800dd12:	689b      	ldr	r3, [r3, #8]
 800dd14:	4a3a      	ldr	r2, [pc, #232]	; (800de00 <tcp_input+0x28c>)
 800dd16:	6814      	ldr	r4, [r2, #0]
 800dd18:	4618      	mov	r0, r3
 800dd1a:	f7fc fa2c 	bl	800a176 <lwip_htonl>
 800dd1e:	4603      	mov	r3, r0
 800dd20:	60a3      	str	r3, [r4, #8]
 800dd22:	68a3      	ldr	r3, [r4, #8]
 800dd24:	4a3f      	ldr	r2, [pc, #252]	; (800de24 <tcp_input+0x2b0>)
 800dd26:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800dd28:	4b35      	ldr	r3, [pc, #212]	; (800de00 <tcp_input+0x28c>)
 800dd2a:	681b      	ldr	r3, [r3, #0]
 800dd2c:	89db      	ldrh	r3, [r3, #14]
 800dd2e:	b29b      	uxth	r3, r3
 800dd30:	4a33      	ldr	r2, [pc, #204]	; (800de00 <tcp_input+0x28c>)
 800dd32:	6814      	ldr	r4, [r2, #0]
 800dd34:	4618      	mov	r0, r3
 800dd36:	f7fc fa09 	bl	800a14c <lwip_htons>
 800dd3a:	4603      	mov	r3, r0
 800dd3c:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800dd3e:	4b30      	ldr	r3, [pc, #192]	; (800de00 <tcp_input+0x28c>)
 800dd40:	681b      	ldr	r3, [r3, #0]
 800dd42:	899b      	ldrh	r3, [r3, #12]
 800dd44:	b29b      	uxth	r3, r3
 800dd46:	4618      	mov	r0, r3
 800dd48:	f7fc fa00 	bl	800a14c <lwip_htons>
 800dd4c:	4603      	mov	r3, r0
 800dd4e:	b2db      	uxtb	r3, r3
 800dd50:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800dd54:	b2da      	uxtb	r2, r3
 800dd56:	4b34      	ldr	r3, [pc, #208]	; (800de28 <tcp_input+0x2b4>)
 800dd58:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	891a      	ldrh	r2, [r3, #8]
 800dd5e:	4b33      	ldr	r3, [pc, #204]	; (800de2c <tcp_input+0x2b8>)
 800dd60:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800dd62:	4b31      	ldr	r3, [pc, #196]	; (800de28 <tcp_input+0x2b4>)
 800dd64:	781b      	ldrb	r3, [r3, #0]
 800dd66:	f003 0303 	and.w	r3, r3, #3
 800dd6a:	2b00      	cmp	r3, #0
 800dd6c:	d00c      	beq.n	800dd88 <tcp_input+0x214>
    tcplen++;
 800dd6e:	4b2f      	ldr	r3, [pc, #188]	; (800de2c <tcp_input+0x2b8>)
 800dd70:	881b      	ldrh	r3, [r3, #0]
 800dd72:	3301      	adds	r3, #1
 800dd74:	b29a      	uxth	r2, r3
 800dd76:	4b2d      	ldr	r3, [pc, #180]	; (800de2c <tcp_input+0x2b8>)
 800dd78:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	891a      	ldrh	r2, [r3, #8]
 800dd7e:	4b2b      	ldr	r3, [pc, #172]	; (800de2c <tcp_input+0x2b8>)
 800dd80:	881b      	ldrh	r3, [r3, #0]
 800dd82:	429a      	cmp	r2, r3
 800dd84:	f200 82e6 	bhi.w	800e354 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800dd88:	2300      	movs	r3, #0
 800dd8a:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800dd8c:	4b28      	ldr	r3, [pc, #160]	; (800de30 <tcp_input+0x2bc>)
 800dd8e:	681b      	ldr	r3, [r3, #0]
 800dd90:	61fb      	str	r3, [r7, #28]
 800dd92:	e09d      	b.n	800ded0 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800dd94:	69fb      	ldr	r3, [r7, #28]
 800dd96:	7d1b      	ldrb	r3, [r3, #20]
 800dd98:	2b00      	cmp	r3, #0
 800dd9a:	d105      	bne.n	800dda8 <tcp_input+0x234>
 800dd9c:	4b15      	ldr	r3, [pc, #84]	; (800ddf4 <tcp_input+0x280>)
 800dd9e:	22fb      	movs	r2, #251	; 0xfb
 800dda0:	4924      	ldr	r1, [pc, #144]	; (800de34 <tcp_input+0x2c0>)
 800dda2:	4816      	ldr	r0, [pc, #88]	; (800ddfc <tcp_input+0x288>)
 800dda4:	f009 fc76 	bl	8017694 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800dda8:	69fb      	ldr	r3, [r7, #28]
 800ddaa:	7d1b      	ldrb	r3, [r3, #20]
 800ddac:	2b0a      	cmp	r3, #10
 800ddae:	d105      	bne.n	800ddbc <tcp_input+0x248>
 800ddb0:	4b10      	ldr	r3, [pc, #64]	; (800ddf4 <tcp_input+0x280>)
 800ddb2:	22fc      	movs	r2, #252	; 0xfc
 800ddb4:	4920      	ldr	r1, [pc, #128]	; (800de38 <tcp_input+0x2c4>)
 800ddb6:	4811      	ldr	r0, [pc, #68]	; (800ddfc <tcp_input+0x288>)
 800ddb8:	f009 fc6c 	bl	8017694 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800ddbc:	69fb      	ldr	r3, [r7, #28]
 800ddbe:	7d1b      	ldrb	r3, [r3, #20]
 800ddc0:	2b01      	cmp	r3, #1
 800ddc2:	d105      	bne.n	800ddd0 <tcp_input+0x25c>
 800ddc4:	4b0b      	ldr	r3, [pc, #44]	; (800ddf4 <tcp_input+0x280>)
 800ddc6:	22fd      	movs	r2, #253	; 0xfd
 800ddc8:	491c      	ldr	r1, [pc, #112]	; (800de3c <tcp_input+0x2c8>)
 800ddca:	480c      	ldr	r0, [pc, #48]	; (800ddfc <tcp_input+0x288>)
 800ddcc:	f009 fc62 	bl	8017694 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ddd0:	69fb      	ldr	r3, [r7, #28]
 800ddd2:	7a1b      	ldrb	r3, [r3, #8]
 800ddd4:	2b00      	cmp	r3, #0
 800ddd6:	d033      	beq.n	800de40 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800ddd8:	69fb      	ldr	r3, [r7, #28]
 800ddda:	7a1a      	ldrb	r2, [r3, #8]
 800dddc:	4b09      	ldr	r3, [pc, #36]	; (800de04 <tcp_input+0x290>)
 800ddde:	685b      	ldr	r3, [r3, #4]
 800dde0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800dde4:	3301      	adds	r3, #1
 800dde6:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800dde8:	429a      	cmp	r2, r3
 800ddea:	d029      	beq.n	800de40 <tcp_input+0x2cc>
      prev = pcb;
 800ddec:	69fb      	ldr	r3, [r7, #28]
 800ddee:	61bb      	str	r3, [r7, #24]
      continue;
 800ddf0:	e06b      	b.n	800deca <tcp_input+0x356>
 800ddf2:	bf00      	nop
 800ddf4:	0801a304 	.word	0x0801a304
 800ddf8:	0801a338 	.word	0x0801a338
 800ddfc:	0801a350 	.word	0x0801a350
 800de00:	20010960 	.word	0x20010960
 800de04:	2000d1c4 	.word	0x2000d1c4
 800de08:	20010964 	.word	0x20010964
 800de0c:	20010968 	.word	0x20010968
 800de10:	20010966 	.word	0x20010966
 800de14:	0801a378 	.word	0x0801a378
 800de18:	0801a388 	.word	0x0801a388
 800de1c:	0801a394 	.word	0x0801a394
 800de20:	20010970 	.word	0x20010970
 800de24:	20010974 	.word	0x20010974
 800de28:	2001097c 	.word	0x2001097c
 800de2c:	2001097a 	.word	0x2001097a
 800de30:	20010944 	.word	0x20010944
 800de34:	0801a3b4 	.word	0x0801a3b4
 800de38:	0801a3dc 	.word	0x0801a3dc
 800de3c:	0801a408 	.word	0x0801a408
    }

    if (pcb->remote_port == tcphdr->src &&
 800de40:	69fb      	ldr	r3, [r7, #28]
 800de42:	8b1a      	ldrh	r2, [r3, #24]
 800de44:	4b72      	ldr	r3, [pc, #456]	; (800e010 <tcp_input+0x49c>)
 800de46:	681b      	ldr	r3, [r3, #0]
 800de48:	881b      	ldrh	r3, [r3, #0]
 800de4a:	b29b      	uxth	r3, r3
 800de4c:	429a      	cmp	r2, r3
 800de4e:	d13a      	bne.n	800dec6 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800de50:	69fb      	ldr	r3, [r7, #28]
 800de52:	8ada      	ldrh	r2, [r3, #22]
 800de54:	4b6e      	ldr	r3, [pc, #440]	; (800e010 <tcp_input+0x49c>)
 800de56:	681b      	ldr	r3, [r3, #0]
 800de58:	885b      	ldrh	r3, [r3, #2]
 800de5a:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800de5c:	429a      	cmp	r2, r3
 800de5e:	d132      	bne.n	800dec6 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800de60:	69fb      	ldr	r3, [r7, #28]
 800de62:	685a      	ldr	r2, [r3, #4]
 800de64:	4b6b      	ldr	r3, [pc, #428]	; (800e014 <tcp_input+0x4a0>)
 800de66:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800de68:	429a      	cmp	r2, r3
 800de6a:	d12c      	bne.n	800dec6 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800de6c:	69fb      	ldr	r3, [r7, #28]
 800de6e:	681a      	ldr	r2, [r3, #0]
 800de70:	4b68      	ldr	r3, [pc, #416]	; (800e014 <tcp_input+0x4a0>)
 800de72:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800de74:	429a      	cmp	r2, r3
 800de76:	d126      	bne.n	800dec6 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800de78:	69fb      	ldr	r3, [r7, #28]
 800de7a:	68db      	ldr	r3, [r3, #12]
 800de7c:	69fa      	ldr	r2, [r7, #28]
 800de7e:	429a      	cmp	r2, r3
 800de80:	d106      	bne.n	800de90 <tcp_input+0x31c>
 800de82:	4b65      	ldr	r3, [pc, #404]	; (800e018 <tcp_input+0x4a4>)
 800de84:	f240 120d 	movw	r2, #269	; 0x10d
 800de88:	4964      	ldr	r1, [pc, #400]	; (800e01c <tcp_input+0x4a8>)
 800de8a:	4865      	ldr	r0, [pc, #404]	; (800e020 <tcp_input+0x4ac>)
 800de8c:	f009 fc02 	bl	8017694 <iprintf>
      if (prev != NULL) {
 800de90:	69bb      	ldr	r3, [r7, #24]
 800de92:	2b00      	cmp	r3, #0
 800de94:	d00a      	beq.n	800deac <tcp_input+0x338>
        prev->next = pcb->next;
 800de96:	69fb      	ldr	r3, [r7, #28]
 800de98:	68da      	ldr	r2, [r3, #12]
 800de9a:	69bb      	ldr	r3, [r7, #24]
 800de9c:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800de9e:	4b61      	ldr	r3, [pc, #388]	; (800e024 <tcp_input+0x4b0>)
 800dea0:	681a      	ldr	r2, [r3, #0]
 800dea2:	69fb      	ldr	r3, [r7, #28]
 800dea4:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800dea6:	4a5f      	ldr	r2, [pc, #380]	; (800e024 <tcp_input+0x4b0>)
 800dea8:	69fb      	ldr	r3, [r7, #28]
 800deaa:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800deac:	69fb      	ldr	r3, [r7, #28]
 800deae:	68db      	ldr	r3, [r3, #12]
 800deb0:	69fa      	ldr	r2, [r7, #28]
 800deb2:	429a      	cmp	r2, r3
 800deb4:	d111      	bne.n	800deda <tcp_input+0x366>
 800deb6:	4b58      	ldr	r3, [pc, #352]	; (800e018 <tcp_input+0x4a4>)
 800deb8:	f240 1215 	movw	r2, #277	; 0x115
 800debc:	495a      	ldr	r1, [pc, #360]	; (800e028 <tcp_input+0x4b4>)
 800debe:	4858      	ldr	r0, [pc, #352]	; (800e020 <tcp_input+0x4ac>)
 800dec0:	f009 fbe8 	bl	8017694 <iprintf>
      break;
 800dec4:	e009      	b.n	800deda <tcp_input+0x366>
    }
    prev = pcb;
 800dec6:	69fb      	ldr	r3, [r7, #28]
 800dec8:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800deca:	69fb      	ldr	r3, [r7, #28]
 800decc:	68db      	ldr	r3, [r3, #12]
 800dece:	61fb      	str	r3, [r7, #28]
 800ded0:	69fb      	ldr	r3, [r7, #28]
 800ded2:	2b00      	cmp	r3, #0
 800ded4:	f47f af5e 	bne.w	800dd94 <tcp_input+0x220>
 800ded8:	e000      	b.n	800dedc <tcp_input+0x368>
      break;
 800deda:	bf00      	nop
  }

  if (pcb == NULL) {
 800dedc:	69fb      	ldr	r3, [r7, #28]
 800dede:	2b00      	cmp	r3, #0
 800dee0:	f040 80aa 	bne.w	800e038 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800dee4:	4b51      	ldr	r3, [pc, #324]	; (800e02c <tcp_input+0x4b8>)
 800dee6:	681b      	ldr	r3, [r3, #0]
 800dee8:	61fb      	str	r3, [r7, #28]
 800deea:	e03f      	b.n	800df6c <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800deec:	69fb      	ldr	r3, [r7, #28]
 800deee:	7d1b      	ldrb	r3, [r3, #20]
 800def0:	2b0a      	cmp	r3, #10
 800def2:	d006      	beq.n	800df02 <tcp_input+0x38e>
 800def4:	4b48      	ldr	r3, [pc, #288]	; (800e018 <tcp_input+0x4a4>)
 800def6:	f240 121f 	movw	r2, #287	; 0x11f
 800defa:	494d      	ldr	r1, [pc, #308]	; (800e030 <tcp_input+0x4bc>)
 800defc:	4848      	ldr	r0, [pc, #288]	; (800e020 <tcp_input+0x4ac>)
 800defe:	f009 fbc9 	bl	8017694 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800df02:	69fb      	ldr	r3, [r7, #28]
 800df04:	7a1b      	ldrb	r3, [r3, #8]
 800df06:	2b00      	cmp	r3, #0
 800df08:	d009      	beq.n	800df1e <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800df0a:	69fb      	ldr	r3, [r7, #28]
 800df0c:	7a1a      	ldrb	r2, [r3, #8]
 800df0e:	4b41      	ldr	r3, [pc, #260]	; (800e014 <tcp_input+0x4a0>)
 800df10:	685b      	ldr	r3, [r3, #4]
 800df12:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800df16:	3301      	adds	r3, #1
 800df18:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800df1a:	429a      	cmp	r2, r3
 800df1c:	d122      	bne.n	800df64 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800df1e:	69fb      	ldr	r3, [r7, #28]
 800df20:	8b1a      	ldrh	r2, [r3, #24]
 800df22:	4b3b      	ldr	r3, [pc, #236]	; (800e010 <tcp_input+0x49c>)
 800df24:	681b      	ldr	r3, [r3, #0]
 800df26:	881b      	ldrh	r3, [r3, #0]
 800df28:	b29b      	uxth	r3, r3
 800df2a:	429a      	cmp	r2, r3
 800df2c:	d11b      	bne.n	800df66 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800df2e:	69fb      	ldr	r3, [r7, #28]
 800df30:	8ada      	ldrh	r2, [r3, #22]
 800df32:	4b37      	ldr	r3, [pc, #220]	; (800e010 <tcp_input+0x49c>)
 800df34:	681b      	ldr	r3, [r3, #0]
 800df36:	885b      	ldrh	r3, [r3, #2]
 800df38:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800df3a:	429a      	cmp	r2, r3
 800df3c:	d113      	bne.n	800df66 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800df3e:	69fb      	ldr	r3, [r7, #28]
 800df40:	685a      	ldr	r2, [r3, #4]
 800df42:	4b34      	ldr	r3, [pc, #208]	; (800e014 <tcp_input+0x4a0>)
 800df44:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800df46:	429a      	cmp	r2, r3
 800df48:	d10d      	bne.n	800df66 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800df4a:	69fb      	ldr	r3, [r7, #28]
 800df4c:	681a      	ldr	r2, [r3, #0]
 800df4e:	4b31      	ldr	r3, [pc, #196]	; (800e014 <tcp_input+0x4a0>)
 800df50:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800df52:	429a      	cmp	r2, r3
 800df54:	d107      	bne.n	800df66 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800df56:	69f8      	ldr	r0, [r7, #28]
 800df58:	f000 fb56 	bl	800e608 <tcp_timewait_input>
        }
        pbuf_free(p);
 800df5c:	6878      	ldr	r0, [r7, #4]
 800df5e:	f7fd fcf3 	bl	800b948 <pbuf_free>
        return;
 800df62:	e1fd      	b.n	800e360 <tcp_input+0x7ec>
        continue;
 800df64:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800df66:	69fb      	ldr	r3, [r7, #28]
 800df68:	68db      	ldr	r3, [r3, #12]
 800df6a:	61fb      	str	r3, [r7, #28]
 800df6c:	69fb      	ldr	r3, [r7, #28]
 800df6e:	2b00      	cmp	r3, #0
 800df70:	d1bc      	bne.n	800deec <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800df72:	2300      	movs	r3, #0
 800df74:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800df76:	4b2f      	ldr	r3, [pc, #188]	; (800e034 <tcp_input+0x4c0>)
 800df78:	681b      	ldr	r3, [r3, #0]
 800df7a:	617b      	str	r3, [r7, #20]
 800df7c:	e02a      	b.n	800dfd4 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800df7e:	697b      	ldr	r3, [r7, #20]
 800df80:	7a1b      	ldrb	r3, [r3, #8]
 800df82:	2b00      	cmp	r3, #0
 800df84:	d00c      	beq.n	800dfa0 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800df86:	697b      	ldr	r3, [r7, #20]
 800df88:	7a1a      	ldrb	r2, [r3, #8]
 800df8a:	4b22      	ldr	r3, [pc, #136]	; (800e014 <tcp_input+0x4a0>)
 800df8c:	685b      	ldr	r3, [r3, #4]
 800df8e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800df92:	3301      	adds	r3, #1
 800df94:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800df96:	429a      	cmp	r2, r3
 800df98:	d002      	beq.n	800dfa0 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800df9a:	697b      	ldr	r3, [r7, #20]
 800df9c:	61bb      	str	r3, [r7, #24]
        continue;
 800df9e:	e016      	b.n	800dfce <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800dfa0:	697b      	ldr	r3, [r7, #20]
 800dfa2:	8ada      	ldrh	r2, [r3, #22]
 800dfa4:	4b1a      	ldr	r3, [pc, #104]	; (800e010 <tcp_input+0x49c>)
 800dfa6:	681b      	ldr	r3, [r3, #0]
 800dfa8:	885b      	ldrh	r3, [r3, #2]
 800dfaa:	b29b      	uxth	r3, r3
 800dfac:	429a      	cmp	r2, r3
 800dfae:	d10c      	bne.n	800dfca <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800dfb0:	697b      	ldr	r3, [r7, #20]
 800dfb2:	681a      	ldr	r2, [r3, #0]
 800dfb4:	4b17      	ldr	r3, [pc, #92]	; (800e014 <tcp_input+0x4a0>)
 800dfb6:	695b      	ldr	r3, [r3, #20]
 800dfb8:	429a      	cmp	r2, r3
 800dfba:	d00f      	beq.n	800dfdc <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800dfbc:	697b      	ldr	r3, [r7, #20]
 800dfbe:	2b00      	cmp	r3, #0
 800dfc0:	d00d      	beq.n	800dfde <tcp_input+0x46a>
 800dfc2:	697b      	ldr	r3, [r7, #20]
 800dfc4:	681b      	ldr	r3, [r3, #0]
 800dfc6:	2b00      	cmp	r3, #0
 800dfc8:	d009      	beq.n	800dfde <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800dfca:	697b      	ldr	r3, [r7, #20]
 800dfcc:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800dfce:	697b      	ldr	r3, [r7, #20]
 800dfd0:	68db      	ldr	r3, [r3, #12]
 800dfd2:	617b      	str	r3, [r7, #20]
 800dfd4:	697b      	ldr	r3, [r7, #20]
 800dfd6:	2b00      	cmp	r3, #0
 800dfd8:	d1d1      	bne.n	800df7e <tcp_input+0x40a>
 800dfda:	e000      	b.n	800dfde <tcp_input+0x46a>
            break;
 800dfdc:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800dfde:	697b      	ldr	r3, [r7, #20]
 800dfe0:	2b00      	cmp	r3, #0
 800dfe2:	d029      	beq.n	800e038 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800dfe4:	69bb      	ldr	r3, [r7, #24]
 800dfe6:	2b00      	cmp	r3, #0
 800dfe8:	d00a      	beq.n	800e000 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800dfea:	697b      	ldr	r3, [r7, #20]
 800dfec:	68da      	ldr	r2, [r3, #12]
 800dfee:	69bb      	ldr	r3, [r7, #24]
 800dff0:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800dff2:	4b10      	ldr	r3, [pc, #64]	; (800e034 <tcp_input+0x4c0>)
 800dff4:	681a      	ldr	r2, [r3, #0]
 800dff6:	697b      	ldr	r3, [r7, #20]
 800dff8:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800dffa:	4a0e      	ldr	r2, [pc, #56]	; (800e034 <tcp_input+0x4c0>)
 800dffc:	697b      	ldr	r3, [r7, #20]
 800dffe:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800e000:	6978      	ldr	r0, [r7, #20]
 800e002:	f000 fa03 	bl	800e40c <tcp_listen_input>
      }
      pbuf_free(p);
 800e006:	6878      	ldr	r0, [r7, #4]
 800e008:	f7fd fc9e 	bl	800b948 <pbuf_free>
      return;
 800e00c:	e1a8      	b.n	800e360 <tcp_input+0x7ec>
 800e00e:	bf00      	nop
 800e010:	20010960 	.word	0x20010960
 800e014:	2000d1c4 	.word	0x2000d1c4
 800e018:	0801a304 	.word	0x0801a304
 800e01c:	0801a430 	.word	0x0801a430
 800e020:	0801a350 	.word	0x0801a350
 800e024:	20010944 	.word	0x20010944
 800e028:	0801a45c 	.word	0x0801a45c
 800e02c:	20010948 	.word	0x20010948
 800e030:	0801a488 	.word	0x0801a488
 800e034:	20010940 	.word	0x20010940
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800e038:	69fb      	ldr	r3, [r7, #28]
 800e03a:	2b00      	cmp	r3, #0
 800e03c:	f000 8158 	beq.w	800e2f0 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800e040:	4b95      	ldr	r3, [pc, #596]	; (800e298 <tcp_input+0x724>)
 800e042:	2200      	movs	r2, #0
 800e044:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	891a      	ldrh	r2, [r3, #8]
 800e04a:	4b93      	ldr	r3, [pc, #588]	; (800e298 <tcp_input+0x724>)
 800e04c:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800e04e:	4a92      	ldr	r2, [pc, #584]	; (800e298 <tcp_input+0x724>)
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800e054:	4b91      	ldr	r3, [pc, #580]	; (800e29c <tcp_input+0x728>)
 800e056:	681b      	ldr	r3, [r3, #0]
 800e058:	4a8f      	ldr	r2, [pc, #572]	; (800e298 <tcp_input+0x724>)
 800e05a:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800e05c:	4b90      	ldr	r3, [pc, #576]	; (800e2a0 <tcp_input+0x72c>)
 800e05e:	2200      	movs	r2, #0
 800e060:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800e062:	4b90      	ldr	r3, [pc, #576]	; (800e2a4 <tcp_input+0x730>)
 800e064:	2200      	movs	r2, #0
 800e066:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800e068:	4b8f      	ldr	r3, [pc, #572]	; (800e2a8 <tcp_input+0x734>)
 800e06a:	2200      	movs	r2, #0
 800e06c:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800e06e:	4b8f      	ldr	r3, [pc, #572]	; (800e2ac <tcp_input+0x738>)
 800e070:	781b      	ldrb	r3, [r3, #0]
 800e072:	f003 0308 	and.w	r3, r3, #8
 800e076:	2b00      	cmp	r3, #0
 800e078:	d006      	beq.n	800e088 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	7b5b      	ldrb	r3, [r3, #13]
 800e07e:	f043 0301 	orr.w	r3, r3, #1
 800e082:	b2da      	uxtb	r2, r3
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800e088:	69fb      	ldr	r3, [r7, #28]
 800e08a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e08c:	2b00      	cmp	r3, #0
 800e08e:	d017      	beq.n	800e0c0 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800e090:	69f8      	ldr	r0, [r7, #28]
 800e092:	f7ff f85b 	bl	800d14c <tcp_process_refused_data>
 800e096:	4603      	mov	r3, r0
 800e098:	f113 0f0d 	cmn.w	r3, #13
 800e09c:	d007      	beq.n	800e0ae <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800e09e:	69fb      	ldr	r3, [r7, #28]
 800e0a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800e0a2:	2b00      	cmp	r3, #0
 800e0a4:	d00c      	beq.n	800e0c0 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800e0a6:	4b82      	ldr	r3, [pc, #520]	; (800e2b0 <tcp_input+0x73c>)
 800e0a8:	881b      	ldrh	r3, [r3, #0]
 800e0aa:	2b00      	cmp	r3, #0
 800e0ac:	d008      	beq.n	800e0c0 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800e0ae:	69fb      	ldr	r3, [r7, #28]
 800e0b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e0b2:	2b00      	cmp	r3, #0
 800e0b4:	f040 80e3 	bne.w	800e27e <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800e0b8:	69f8      	ldr	r0, [r7, #28]
 800e0ba:	f003 fe05 	bl	8011cc8 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800e0be:	e0de      	b.n	800e27e <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 800e0c0:	4a7c      	ldr	r2, [pc, #496]	; (800e2b4 <tcp_input+0x740>)
 800e0c2:	69fb      	ldr	r3, [r7, #28]
 800e0c4:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800e0c6:	69f8      	ldr	r0, [r7, #28]
 800e0c8:	f000 fb18 	bl	800e6fc <tcp_process>
 800e0cc:	4603      	mov	r3, r0
 800e0ce:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800e0d0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e0d4:	f113 0f0d 	cmn.w	r3, #13
 800e0d8:	f000 80d3 	beq.w	800e282 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800e0dc:	4b71      	ldr	r3, [pc, #452]	; (800e2a4 <tcp_input+0x730>)
 800e0de:	781b      	ldrb	r3, [r3, #0]
 800e0e0:	f003 0308 	and.w	r3, r3, #8
 800e0e4:	2b00      	cmp	r3, #0
 800e0e6:	d015      	beq.n	800e114 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800e0e8:	69fb      	ldr	r3, [r7, #28]
 800e0ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e0ee:	2b00      	cmp	r3, #0
 800e0f0:	d008      	beq.n	800e104 <tcp_input+0x590>
 800e0f2:	69fb      	ldr	r3, [r7, #28]
 800e0f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e0f8:	69fa      	ldr	r2, [r7, #28]
 800e0fa:	6912      	ldr	r2, [r2, #16]
 800e0fc:	f06f 010d 	mvn.w	r1, #13
 800e100:	4610      	mov	r0, r2
 800e102:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800e104:	69f9      	ldr	r1, [r7, #28]
 800e106:	486c      	ldr	r0, [pc, #432]	; (800e2b8 <tcp_input+0x744>)
 800e108:	f7ff fbbc 	bl	800d884 <tcp_pcb_remove>
        tcp_free(pcb);
 800e10c:	69f8      	ldr	r0, [r7, #28]
 800e10e:	f7fd fed7 	bl	800bec0 <tcp_free>
 800e112:	e0da      	b.n	800e2ca <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800e114:	2300      	movs	r3, #0
 800e116:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800e118:	4b63      	ldr	r3, [pc, #396]	; (800e2a8 <tcp_input+0x734>)
 800e11a:	881b      	ldrh	r3, [r3, #0]
 800e11c:	2b00      	cmp	r3, #0
 800e11e:	d01d      	beq.n	800e15c <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800e120:	4b61      	ldr	r3, [pc, #388]	; (800e2a8 <tcp_input+0x734>)
 800e122:	881b      	ldrh	r3, [r3, #0]
 800e124:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800e126:	69fb      	ldr	r3, [r7, #28]
 800e128:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e12c:	2b00      	cmp	r3, #0
 800e12e:	d00a      	beq.n	800e146 <tcp_input+0x5d2>
 800e130:	69fb      	ldr	r3, [r7, #28]
 800e132:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e136:	69fa      	ldr	r2, [r7, #28]
 800e138:	6910      	ldr	r0, [r2, #16]
 800e13a:	89fa      	ldrh	r2, [r7, #14]
 800e13c:	69f9      	ldr	r1, [r7, #28]
 800e13e:	4798      	blx	r3
 800e140:	4603      	mov	r3, r0
 800e142:	74fb      	strb	r3, [r7, #19]
 800e144:	e001      	b.n	800e14a <tcp_input+0x5d6>
 800e146:	2300      	movs	r3, #0
 800e148:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800e14a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e14e:	f113 0f0d 	cmn.w	r3, #13
 800e152:	f000 8098 	beq.w	800e286 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800e156:	4b54      	ldr	r3, [pc, #336]	; (800e2a8 <tcp_input+0x734>)
 800e158:	2200      	movs	r2, #0
 800e15a:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800e15c:	69f8      	ldr	r0, [r7, #28]
 800e15e:	f000 f915 	bl	800e38c <tcp_input_delayed_close>
 800e162:	4603      	mov	r3, r0
 800e164:	2b00      	cmp	r3, #0
 800e166:	f040 8090 	bne.w	800e28a <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800e16a:	4b4d      	ldr	r3, [pc, #308]	; (800e2a0 <tcp_input+0x72c>)
 800e16c:	681b      	ldr	r3, [r3, #0]
 800e16e:	2b00      	cmp	r3, #0
 800e170:	d041      	beq.n	800e1f6 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800e172:	69fb      	ldr	r3, [r7, #28]
 800e174:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e176:	2b00      	cmp	r3, #0
 800e178:	d006      	beq.n	800e188 <tcp_input+0x614>
 800e17a:	4b50      	ldr	r3, [pc, #320]	; (800e2bc <tcp_input+0x748>)
 800e17c:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800e180:	494f      	ldr	r1, [pc, #316]	; (800e2c0 <tcp_input+0x74c>)
 800e182:	4850      	ldr	r0, [pc, #320]	; (800e2c4 <tcp_input+0x750>)
 800e184:	f009 fa86 	bl	8017694 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800e188:	69fb      	ldr	r3, [r7, #28]
 800e18a:	8b5b      	ldrh	r3, [r3, #26]
 800e18c:	f003 0310 	and.w	r3, r3, #16
 800e190:	2b00      	cmp	r3, #0
 800e192:	d008      	beq.n	800e1a6 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800e194:	4b42      	ldr	r3, [pc, #264]	; (800e2a0 <tcp_input+0x72c>)
 800e196:	681b      	ldr	r3, [r3, #0]
 800e198:	4618      	mov	r0, r3
 800e19a:	f7fd fbd5 	bl	800b948 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800e19e:	69f8      	ldr	r0, [r7, #28]
 800e1a0:	f7fe f9d2 	bl	800c548 <tcp_abort>
            goto aborted;
 800e1a4:	e091      	b.n	800e2ca <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800e1a6:	69fb      	ldr	r3, [r7, #28]
 800e1a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e1ac:	2b00      	cmp	r3, #0
 800e1ae:	d00c      	beq.n	800e1ca <tcp_input+0x656>
 800e1b0:	69fb      	ldr	r3, [r7, #28]
 800e1b2:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800e1b6:	69fb      	ldr	r3, [r7, #28]
 800e1b8:	6918      	ldr	r0, [r3, #16]
 800e1ba:	4b39      	ldr	r3, [pc, #228]	; (800e2a0 <tcp_input+0x72c>)
 800e1bc:	681a      	ldr	r2, [r3, #0]
 800e1be:	2300      	movs	r3, #0
 800e1c0:	69f9      	ldr	r1, [r7, #28]
 800e1c2:	47a0      	blx	r4
 800e1c4:	4603      	mov	r3, r0
 800e1c6:	74fb      	strb	r3, [r7, #19]
 800e1c8:	e008      	b.n	800e1dc <tcp_input+0x668>
 800e1ca:	4b35      	ldr	r3, [pc, #212]	; (800e2a0 <tcp_input+0x72c>)
 800e1cc:	681a      	ldr	r2, [r3, #0]
 800e1ce:	2300      	movs	r3, #0
 800e1d0:	69f9      	ldr	r1, [r7, #28]
 800e1d2:	2000      	movs	r0, #0
 800e1d4:	f7ff f890 	bl	800d2f8 <tcp_recv_null>
 800e1d8:	4603      	mov	r3, r0
 800e1da:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800e1dc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e1e0:	f113 0f0d 	cmn.w	r3, #13
 800e1e4:	d053      	beq.n	800e28e <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800e1e6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e1ea:	2b00      	cmp	r3, #0
 800e1ec:	d003      	beq.n	800e1f6 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800e1ee:	4b2c      	ldr	r3, [pc, #176]	; (800e2a0 <tcp_input+0x72c>)
 800e1f0:	681a      	ldr	r2, [r3, #0]
 800e1f2:	69fb      	ldr	r3, [r7, #28]
 800e1f4:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800e1f6:	4b2b      	ldr	r3, [pc, #172]	; (800e2a4 <tcp_input+0x730>)
 800e1f8:	781b      	ldrb	r3, [r3, #0]
 800e1fa:	f003 0320 	and.w	r3, r3, #32
 800e1fe:	2b00      	cmp	r3, #0
 800e200:	d030      	beq.n	800e264 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800e202:	69fb      	ldr	r3, [r7, #28]
 800e204:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e206:	2b00      	cmp	r3, #0
 800e208:	d009      	beq.n	800e21e <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800e20a:	69fb      	ldr	r3, [r7, #28]
 800e20c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e20e:	7b5a      	ldrb	r2, [r3, #13]
 800e210:	69fb      	ldr	r3, [r7, #28]
 800e212:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e214:	f042 0220 	orr.w	r2, r2, #32
 800e218:	b2d2      	uxtb	r2, r2
 800e21a:	735a      	strb	r2, [r3, #13]
 800e21c:	e022      	b.n	800e264 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800e21e:	69fb      	ldr	r3, [r7, #28]
 800e220:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e222:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800e226:	d005      	beq.n	800e234 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 800e228:	69fb      	ldr	r3, [r7, #28]
 800e22a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e22c:	3301      	adds	r3, #1
 800e22e:	b29a      	uxth	r2, r3
 800e230:	69fb      	ldr	r3, [r7, #28]
 800e232:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800e234:	69fb      	ldr	r3, [r7, #28]
 800e236:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e23a:	2b00      	cmp	r3, #0
 800e23c:	d00b      	beq.n	800e256 <tcp_input+0x6e2>
 800e23e:	69fb      	ldr	r3, [r7, #28]
 800e240:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800e244:	69fb      	ldr	r3, [r7, #28]
 800e246:	6918      	ldr	r0, [r3, #16]
 800e248:	2300      	movs	r3, #0
 800e24a:	2200      	movs	r2, #0
 800e24c:	69f9      	ldr	r1, [r7, #28]
 800e24e:	47a0      	blx	r4
 800e250:	4603      	mov	r3, r0
 800e252:	74fb      	strb	r3, [r7, #19]
 800e254:	e001      	b.n	800e25a <tcp_input+0x6e6>
 800e256:	2300      	movs	r3, #0
 800e258:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800e25a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e25e:	f113 0f0d 	cmn.w	r3, #13
 800e262:	d016      	beq.n	800e292 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800e264:	4b13      	ldr	r3, [pc, #76]	; (800e2b4 <tcp_input+0x740>)
 800e266:	2200      	movs	r2, #0
 800e268:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800e26a:	69f8      	ldr	r0, [r7, #28]
 800e26c:	f000 f88e 	bl	800e38c <tcp_input_delayed_close>
 800e270:	4603      	mov	r3, r0
 800e272:	2b00      	cmp	r3, #0
 800e274:	d128      	bne.n	800e2c8 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800e276:	69f8      	ldr	r0, [r7, #28]
 800e278:	f002 ff20 	bl	80110bc <tcp_output>
 800e27c:	e025      	b.n	800e2ca <tcp_input+0x756>
        goto aborted;
 800e27e:	bf00      	nop
 800e280:	e023      	b.n	800e2ca <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800e282:	bf00      	nop
 800e284:	e021      	b.n	800e2ca <tcp_input+0x756>
              goto aborted;
 800e286:	bf00      	nop
 800e288:	e01f      	b.n	800e2ca <tcp_input+0x756>
          goto aborted;
 800e28a:	bf00      	nop
 800e28c:	e01d      	b.n	800e2ca <tcp_input+0x756>
            goto aborted;
 800e28e:	bf00      	nop
 800e290:	e01b      	b.n	800e2ca <tcp_input+0x756>
              goto aborted;
 800e292:	bf00      	nop
 800e294:	e019      	b.n	800e2ca <tcp_input+0x756>
 800e296:	bf00      	nop
 800e298:	20010950 	.word	0x20010950
 800e29c:	20010960 	.word	0x20010960
 800e2a0:	20010980 	.word	0x20010980
 800e2a4:	2001097d 	.word	0x2001097d
 800e2a8:	20010978 	.word	0x20010978
 800e2ac:	2001097c 	.word	0x2001097c
 800e2b0:	2001097a 	.word	0x2001097a
 800e2b4:	20010984 	.word	0x20010984
 800e2b8:	20010944 	.word	0x20010944
 800e2bc:	0801a304 	.word	0x0801a304
 800e2c0:	0801a4b8 	.word	0x0801a4b8
 800e2c4:	0801a350 	.word	0x0801a350
          goto aborted;
 800e2c8:	bf00      	nop
    tcp_input_pcb = NULL;
 800e2ca:	4b27      	ldr	r3, [pc, #156]	; (800e368 <tcp_input+0x7f4>)
 800e2cc:	2200      	movs	r2, #0
 800e2ce:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800e2d0:	4b26      	ldr	r3, [pc, #152]	; (800e36c <tcp_input+0x7f8>)
 800e2d2:	2200      	movs	r2, #0
 800e2d4:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800e2d6:	4b26      	ldr	r3, [pc, #152]	; (800e370 <tcp_input+0x7fc>)
 800e2d8:	685b      	ldr	r3, [r3, #4]
 800e2da:	2b00      	cmp	r3, #0
 800e2dc:	d03f      	beq.n	800e35e <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800e2de:	4b24      	ldr	r3, [pc, #144]	; (800e370 <tcp_input+0x7fc>)
 800e2e0:	685b      	ldr	r3, [r3, #4]
 800e2e2:	4618      	mov	r0, r3
 800e2e4:	f7fd fb30 	bl	800b948 <pbuf_free>
      inseg.p = NULL;
 800e2e8:	4b21      	ldr	r3, [pc, #132]	; (800e370 <tcp_input+0x7fc>)
 800e2ea:	2200      	movs	r2, #0
 800e2ec:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800e2ee:	e036      	b.n	800e35e <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800e2f0:	4b20      	ldr	r3, [pc, #128]	; (800e374 <tcp_input+0x800>)
 800e2f2:	681b      	ldr	r3, [r3, #0]
 800e2f4:	899b      	ldrh	r3, [r3, #12]
 800e2f6:	b29b      	uxth	r3, r3
 800e2f8:	4618      	mov	r0, r3
 800e2fa:	f7fb ff27 	bl	800a14c <lwip_htons>
 800e2fe:	4603      	mov	r3, r0
 800e300:	b2db      	uxtb	r3, r3
 800e302:	f003 0304 	and.w	r3, r3, #4
 800e306:	2b00      	cmp	r3, #0
 800e308:	d118      	bne.n	800e33c <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e30a:	4b1b      	ldr	r3, [pc, #108]	; (800e378 <tcp_input+0x804>)
 800e30c:	6819      	ldr	r1, [r3, #0]
 800e30e:	4b1b      	ldr	r3, [pc, #108]	; (800e37c <tcp_input+0x808>)
 800e310:	881b      	ldrh	r3, [r3, #0]
 800e312:	461a      	mov	r2, r3
 800e314:	4b1a      	ldr	r3, [pc, #104]	; (800e380 <tcp_input+0x80c>)
 800e316:	681b      	ldr	r3, [r3, #0]
 800e318:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e31a:	4b16      	ldr	r3, [pc, #88]	; (800e374 <tcp_input+0x800>)
 800e31c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e31e:	885b      	ldrh	r3, [r3, #2]
 800e320:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e322:	4a14      	ldr	r2, [pc, #80]	; (800e374 <tcp_input+0x800>)
 800e324:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e326:	8812      	ldrh	r2, [r2, #0]
 800e328:	b292      	uxth	r2, r2
 800e32a:	9202      	str	r2, [sp, #8]
 800e32c:	9301      	str	r3, [sp, #4]
 800e32e:	4b15      	ldr	r3, [pc, #84]	; (800e384 <tcp_input+0x810>)
 800e330:	9300      	str	r3, [sp, #0]
 800e332:	4b15      	ldr	r3, [pc, #84]	; (800e388 <tcp_input+0x814>)
 800e334:	4602      	mov	r2, r0
 800e336:	2000      	movs	r0, #0
 800e338:	f003 fc74 	bl	8011c24 <tcp_rst>
    pbuf_free(p);
 800e33c:	6878      	ldr	r0, [r7, #4]
 800e33e:	f7fd fb03 	bl	800b948 <pbuf_free>
  return;
 800e342:	e00c      	b.n	800e35e <tcp_input+0x7ea>
    goto dropped;
 800e344:	bf00      	nop
 800e346:	e006      	b.n	800e356 <tcp_input+0x7e2>
    goto dropped;
 800e348:	bf00      	nop
 800e34a:	e004      	b.n	800e356 <tcp_input+0x7e2>
    goto dropped;
 800e34c:	bf00      	nop
 800e34e:	e002      	b.n	800e356 <tcp_input+0x7e2>
      goto dropped;
 800e350:	bf00      	nop
 800e352:	e000      	b.n	800e356 <tcp_input+0x7e2>
      goto dropped;
 800e354:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800e356:	6878      	ldr	r0, [r7, #4]
 800e358:	f7fd faf6 	bl	800b948 <pbuf_free>
 800e35c:	e000      	b.n	800e360 <tcp_input+0x7ec>
  return;
 800e35e:	bf00      	nop
}
 800e360:	3724      	adds	r7, #36	; 0x24
 800e362:	46bd      	mov	sp, r7
 800e364:	bd90      	pop	{r4, r7, pc}
 800e366:	bf00      	nop
 800e368:	20010984 	.word	0x20010984
 800e36c:	20010980 	.word	0x20010980
 800e370:	20010950 	.word	0x20010950
 800e374:	20010960 	.word	0x20010960
 800e378:	20010974 	.word	0x20010974
 800e37c:	2001097a 	.word	0x2001097a
 800e380:	20010970 	.word	0x20010970
 800e384:	2000d1d4 	.word	0x2000d1d4
 800e388:	2000d1d8 	.word	0x2000d1d8

0800e38c <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800e38c:	b580      	push	{r7, lr}
 800e38e:	b082      	sub	sp, #8
 800e390:	af00      	add	r7, sp, #0
 800e392:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	2b00      	cmp	r3, #0
 800e398:	d106      	bne.n	800e3a8 <tcp_input_delayed_close+0x1c>
 800e39a:	4b17      	ldr	r3, [pc, #92]	; (800e3f8 <tcp_input_delayed_close+0x6c>)
 800e39c:	f240 225a 	movw	r2, #602	; 0x25a
 800e3a0:	4916      	ldr	r1, [pc, #88]	; (800e3fc <tcp_input_delayed_close+0x70>)
 800e3a2:	4817      	ldr	r0, [pc, #92]	; (800e400 <tcp_input_delayed_close+0x74>)
 800e3a4:	f009 f976 	bl	8017694 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800e3a8:	4b16      	ldr	r3, [pc, #88]	; (800e404 <tcp_input_delayed_close+0x78>)
 800e3aa:	781b      	ldrb	r3, [r3, #0]
 800e3ac:	f003 0310 	and.w	r3, r3, #16
 800e3b0:	2b00      	cmp	r3, #0
 800e3b2:	d01c      	beq.n	800e3ee <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	8b5b      	ldrh	r3, [r3, #26]
 800e3b8:	f003 0310 	and.w	r3, r3, #16
 800e3bc:	2b00      	cmp	r3, #0
 800e3be:	d10d      	bne.n	800e3dc <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e3c6:	2b00      	cmp	r3, #0
 800e3c8:	d008      	beq.n	800e3dc <tcp_input_delayed_close+0x50>
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e3d0:	687a      	ldr	r2, [r7, #4]
 800e3d2:	6912      	ldr	r2, [r2, #16]
 800e3d4:	f06f 010e 	mvn.w	r1, #14
 800e3d8:	4610      	mov	r0, r2
 800e3da:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800e3dc:	6879      	ldr	r1, [r7, #4]
 800e3de:	480a      	ldr	r0, [pc, #40]	; (800e408 <tcp_input_delayed_close+0x7c>)
 800e3e0:	f7ff fa50 	bl	800d884 <tcp_pcb_remove>
    tcp_free(pcb);
 800e3e4:	6878      	ldr	r0, [r7, #4]
 800e3e6:	f7fd fd6b 	bl	800bec0 <tcp_free>
    return 1;
 800e3ea:	2301      	movs	r3, #1
 800e3ec:	e000      	b.n	800e3f0 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800e3ee:	2300      	movs	r3, #0
}
 800e3f0:	4618      	mov	r0, r3
 800e3f2:	3708      	adds	r7, #8
 800e3f4:	46bd      	mov	sp, r7
 800e3f6:	bd80      	pop	{r7, pc}
 800e3f8:	0801a304 	.word	0x0801a304
 800e3fc:	0801a4d4 	.word	0x0801a4d4
 800e400:	0801a350 	.word	0x0801a350
 800e404:	2001097d 	.word	0x2001097d
 800e408:	20010944 	.word	0x20010944

0800e40c <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800e40c:	b590      	push	{r4, r7, lr}
 800e40e:	b08b      	sub	sp, #44	; 0x2c
 800e410:	af04      	add	r7, sp, #16
 800e412:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800e414:	4b6f      	ldr	r3, [pc, #444]	; (800e5d4 <tcp_listen_input+0x1c8>)
 800e416:	781b      	ldrb	r3, [r3, #0]
 800e418:	f003 0304 	and.w	r3, r3, #4
 800e41c:	2b00      	cmp	r3, #0
 800e41e:	f040 80d2 	bne.w	800e5c6 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	2b00      	cmp	r3, #0
 800e426:	d106      	bne.n	800e436 <tcp_listen_input+0x2a>
 800e428:	4b6b      	ldr	r3, [pc, #428]	; (800e5d8 <tcp_listen_input+0x1cc>)
 800e42a:	f240 2281 	movw	r2, #641	; 0x281
 800e42e:	496b      	ldr	r1, [pc, #428]	; (800e5dc <tcp_listen_input+0x1d0>)
 800e430:	486b      	ldr	r0, [pc, #428]	; (800e5e0 <tcp_listen_input+0x1d4>)
 800e432:	f009 f92f 	bl	8017694 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800e436:	4b67      	ldr	r3, [pc, #412]	; (800e5d4 <tcp_listen_input+0x1c8>)
 800e438:	781b      	ldrb	r3, [r3, #0]
 800e43a:	f003 0310 	and.w	r3, r3, #16
 800e43e:	2b00      	cmp	r3, #0
 800e440:	d019      	beq.n	800e476 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e442:	4b68      	ldr	r3, [pc, #416]	; (800e5e4 <tcp_listen_input+0x1d8>)
 800e444:	6819      	ldr	r1, [r3, #0]
 800e446:	4b68      	ldr	r3, [pc, #416]	; (800e5e8 <tcp_listen_input+0x1dc>)
 800e448:	881b      	ldrh	r3, [r3, #0]
 800e44a:	461a      	mov	r2, r3
 800e44c:	4b67      	ldr	r3, [pc, #412]	; (800e5ec <tcp_listen_input+0x1e0>)
 800e44e:	681b      	ldr	r3, [r3, #0]
 800e450:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e452:	4b67      	ldr	r3, [pc, #412]	; (800e5f0 <tcp_listen_input+0x1e4>)
 800e454:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e456:	885b      	ldrh	r3, [r3, #2]
 800e458:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e45a:	4a65      	ldr	r2, [pc, #404]	; (800e5f0 <tcp_listen_input+0x1e4>)
 800e45c:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e45e:	8812      	ldrh	r2, [r2, #0]
 800e460:	b292      	uxth	r2, r2
 800e462:	9202      	str	r2, [sp, #8]
 800e464:	9301      	str	r3, [sp, #4]
 800e466:	4b63      	ldr	r3, [pc, #396]	; (800e5f4 <tcp_listen_input+0x1e8>)
 800e468:	9300      	str	r3, [sp, #0]
 800e46a:	4b63      	ldr	r3, [pc, #396]	; (800e5f8 <tcp_listen_input+0x1ec>)
 800e46c:	4602      	mov	r2, r0
 800e46e:	6878      	ldr	r0, [r7, #4]
 800e470:	f003 fbd8 	bl	8011c24 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800e474:	e0a9      	b.n	800e5ca <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800e476:	4b57      	ldr	r3, [pc, #348]	; (800e5d4 <tcp_listen_input+0x1c8>)
 800e478:	781b      	ldrb	r3, [r3, #0]
 800e47a:	f003 0302 	and.w	r3, r3, #2
 800e47e:	2b00      	cmp	r3, #0
 800e480:	f000 80a3 	beq.w	800e5ca <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	7d5b      	ldrb	r3, [r3, #21]
 800e488:	4618      	mov	r0, r3
 800e48a:	f7ff f859 	bl	800d540 <tcp_alloc>
 800e48e:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800e490:	697b      	ldr	r3, [r7, #20]
 800e492:	2b00      	cmp	r3, #0
 800e494:	d111      	bne.n	800e4ba <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	699b      	ldr	r3, [r3, #24]
 800e49a:	2b00      	cmp	r3, #0
 800e49c:	d00a      	beq.n	800e4b4 <tcp_listen_input+0xa8>
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	699b      	ldr	r3, [r3, #24]
 800e4a2:	687a      	ldr	r2, [r7, #4]
 800e4a4:	6910      	ldr	r0, [r2, #16]
 800e4a6:	f04f 32ff 	mov.w	r2, #4294967295
 800e4aa:	2100      	movs	r1, #0
 800e4ac:	4798      	blx	r3
 800e4ae:	4603      	mov	r3, r0
 800e4b0:	73bb      	strb	r3, [r7, #14]
      return;
 800e4b2:	e08b      	b.n	800e5cc <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800e4b4:	23f0      	movs	r3, #240	; 0xf0
 800e4b6:	73bb      	strb	r3, [r7, #14]
      return;
 800e4b8:	e088      	b.n	800e5cc <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800e4ba:	4b50      	ldr	r3, [pc, #320]	; (800e5fc <tcp_listen_input+0x1f0>)
 800e4bc:	695a      	ldr	r2, [r3, #20]
 800e4be:	697b      	ldr	r3, [r7, #20]
 800e4c0:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800e4c2:	4b4e      	ldr	r3, [pc, #312]	; (800e5fc <tcp_listen_input+0x1f0>)
 800e4c4:	691a      	ldr	r2, [r3, #16]
 800e4c6:	697b      	ldr	r3, [r7, #20]
 800e4c8:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	8ada      	ldrh	r2, [r3, #22]
 800e4ce:	697b      	ldr	r3, [r7, #20]
 800e4d0:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800e4d2:	4b47      	ldr	r3, [pc, #284]	; (800e5f0 <tcp_listen_input+0x1e4>)
 800e4d4:	681b      	ldr	r3, [r3, #0]
 800e4d6:	881b      	ldrh	r3, [r3, #0]
 800e4d8:	b29a      	uxth	r2, r3
 800e4da:	697b      	ldr	r3, [r7, #20]
 800e4dc:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800e4de:	697b      	ldr	r3, [r7, #20]
 800e4e0:	2203      	movs	r2, #3
 800e4e2:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800e4e4:	4b41      	ldr	r3, [pc, #260]	; (800e5ec <tcp_listen_input+0x1e0>)
 800e4e6:	681b      	ldr	r3, [r3, #0]
 800e4e8:	1c5a      	adds	r2, r3, #1
 800e4ea:	697b      	ldr	r3, [r7, #20]
 800e4ec:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800e4ee:	697b      	ldr	r3, [r7, #20]
 800e4f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e4f2:	697b      	ldr	r3, [r7, #20]
 800e4f4:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800e4f6:	6978      	ldr	r0, [r7, #20]
 800e4f8:	f7ff fa58 	bl	800d9ac <tcp_next_iss>
 800e4fc:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800e4fe:	697b      	ldr	r3, [r7, #20]
 800e500:	693a      	ldr	r2, [r7, #16]
 800e502:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800e504:	697b      	ldr	r3, [r7, #20]
 800e506:	693a      	ldr	r2, [r7, #16]
 800e508:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800e50a:	697b      	ldr	r3, [r7, #20]
 800e50c:	693a      	ldr	r2, [r7, #16]
 800e50e:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800e510:	697b      	ldr	r3, [r7, #20]
 800e512:	693a      	ldr	r2, [r7, #16]
 800e514:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800e516:	4b35      	ldr	r3, [pc, #212]	; (800e5ec <tcp_listen_input+0x1e0>)
 800e518:	681b      	ldr	r3, [r3, #0]
 800e51a:	1e5a      	subs	r2, r3, #1
 800e51c:	697b      	ldr	r3, [r7, #20]
 800e51e:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	691a      	ldr	r2, [r3, #16]
 800e524:	697b      	ldr	r3, [r7, #20]
 800e526:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800e528:	697b      	ldr	r3, [r7, #20]
 800e52a:	687a      	ldr	r2, [r7, #4]
 800e52c:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	7a5b      	ldrb	r3, [r3, #9]
 800e532:	f003 030c 	and.w	r3, r3, #12
 800e536:	b2da      	uxtb	r2, r3
 800e538:	697b      	ldr	r3, [r7, #20]
 800e53a:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	7a1a      	ldrb	r2, [r3, #8]
 800e540:	697b      	ldr	r3, [r7, #20]
 800e542:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800e544:	4b2e      	ldr	r3, [pc, #184]	; (800e600 <tcp_listen_input+0x1f4>)
 800e546:	681a      	ldr	r2, [r3, #0]
 800e548:	697b      	ldr	r3, [r7, #20]
 800e54a:	60da      	str	r2, [r3, #12]
 800e54c:	4a2c      	ldr	r2, [pc, #176]	; (800e600 <tcp_listen_input+0x1f4>)
 800e54e:	697b      	ldr	r3, [r7, #20]
 800e550:	6013      	str	r3, [r2, #0]
 800e552:	f003 fd29 	bl	8011fa8 <tcp_timer_needed>
 800e556:	4b2b      	ldr	r3, [pc, #172]	; (800e604 <tcp_listen_input+0x1f8>)
 800e558:	2201      	movs	r2, #1
 800e55a:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800e55c:	6978      	ldr	r0, [r7, #20]
 800e55e:	f001 fd8f 	bl	8010080 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800e562:	4b23      	ldr	r3, [pc, #140]	; (800e5f0 <tcp_listen_input+0x1e4>)
 800e564:	681b      	ldr	r3, [r3, #0]
 800e566:	89db      	ldrh	r3, [r3, #14]
 800e568:	b29a      	uxth	r2, r3
 800e56a:	697b      	ldr	r3, [r7, #20]
 800e56c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800e570:	697b      	ldr	r3, [r7, #20]
 800e572:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800e576:	697b      	ldr	r3, [r7, #20]
 800e578:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800e57c:	697b      	ldr	r3, [r7, #20]
 800e57e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800e580:	697b      	ldr	r3, [r7, #20]
 800e582:	3304      	adds	r3, #4
 800e584:	4618      	mov	r0, r3
 800e586:	f007 fac1 	bl	8015b0c <ip4_route>
 800e58a:	4601      	mov	r1, r0
 800e58c:	697b      	ldr	r3, [r7, #20]
 800e58e:	3304      	adds	r3, #4
 800e590:	461a      	mov	r2, r3
 800e592:	4620      	mov	r0, r4
 800e594:	f7ff fa30 	bl	800d9f8 <tcp_eff_send_mss_netif>
 800e598:	4603      	mov	r3, r0
 800e59a:	461a      	mov	r2, r3
 800e59c:	697b      	ldr	r3, [r7, #20]
 800e59e:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800e5a0:	2112      	movs	r1, #18
 800e5a2:	6978      	ldr	r0, [r7, #20]
 800e5a4:	f002 fc9c 	bl	8010ee0 <tcp_enqueue_flags>
 800e5a8:	4603      	mov	r3, r0
 800e5aa:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800e5ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e5b0:	2b00      	cmp	r3, #0
 800e5b2:	d004      	beq.n	800e5be <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800e5b4:	2100      	movs	r1, #0
 800e5b6:	6978      	ldr	r0, [r7, #20]
 800e5b8:	f7fd ff08 	bl	800c3cc <tcp_abandon>
      return;
 800e5bc:	e006      	b.n	800e5cc <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800e5be:	6978      	ldr	r0, [r7, #20]
 800e5c0:	f002 fd7c 	bl	80110bc <tcp_output>
  return;
 800e5c4:	e001      	b.n	800e5ca <tcp_listen_input+0x1be>
    return;
 800e5c6:	bf00      	nop
 800e5c8:	e000      	b.n	800e5cc <tcp_listen_input+0x1c0>
  return;
 800e5ca:	bf00      	nop
}
 800e5cc:	371c      	adds	r7, #28
 800e5ce:	46bd      	mov	sp, r7
 800e5d0:	bd90      	pop	{r4, r7, pc}
 800e5d2:	bf00      	nop
 800e5d4:	2001097c 	.word	0x2001097c
 800e5d8:	0801a304 	.word	0x0801a304
 800e5dc:	0801a4fc 	.word	0x0801a4fc
 800e5e0:	0801a350 	.word	0x0801a350
 800e5e4:	20010974 	.word	0x20010974
 800e5e8:	2001097a 	.word	0x2001097a
 800e5ec:	20010970 	.word	0x20010970
 800e5f0:	20010960 	.word	0x20010960
 800e5f4:	2000d1d4 	.word	0x2000d1d4
 800e5f8:	2000d1d8 	.word	0x2000d1d8
 800e5fc:	2000d1c4 	.word	0x2000d1c4
 800e600:	20010944 	.word	0x20010944
 800e604:	2001094c 	.word	0x2001094c

0800e608 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800e608:	b580      	push	{r7, lr}
 800e60a:	b086      	sub	sp, #24
 800e60c:	af04      	add	r7, sp, #16
 800e60e:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800e610:	4b2f      	ldr	r3, [pc, #188]	; (800e6d0 <tcp_timewait_input+0xc8>)
 800e612:	781b      	ldrb	r3, [r3, #0]
 800e614:	f003 0304 	and.w	r3, r3, #4
 800e618:	2b00      	cmp	r3, #0
 800e61a:	d153      	bne.n	800e6c4 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	2b00      	cmp	r3, #0
 800e620:	d106      	bne.n	800e630 <tcp_timewait_input+0x28>
 800e622:	4b2c      	ldr	r3, [pc, #176]	; (800e6d4 <tcp_timewait_input+0xcc>)
 800e624:	f240 22ee 	movw	r2, #750	; 0x2ee
 800e628:	492b      	ldr	r1, [pc, #172]	; (800e6d8 <tcp_timewait_input+0xd0>)
 800e62a:	482c      	ldr	r0, [pc, #176]	; (800e6dc <tcp_timewait_input+0xd4>)
 800e62c:	f009 f832 	bl	8017694 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800e630:	4b27      	ldr	r3, [pc, #156]	; (800e6d0 <tcp_timewait_input+0xc8>)
 800e632:	781b      	ldrb	r3, [r3, #0]
 800e634:	f003 0302 	and.w	r3, r3, #2
 800e638:	2b00      	cmp	r3, #0
 800e63a:	d02a      	beq.n	800e692 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800e63c:	4b28      	ldr	r3, [pc, #160]	; (800e6e0 <tcp_timewait_input+0xd8>)
 800e63e:	681a      	ldr	r2, [r3, #0]
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e644:	1ad3      	subs	r3, r2, r3
 800e646:	2b00      	cmp	r3, #0
 800e648:	db2d      	blt.n	800e6a6 <tcp_timewait_input+0x9e>
 800e64a:	4b25      	ldr	r3, [pc, #148]	; (800e6e0 <tcp_timewait_input+0xd8>)
 800e64c:	681a      	ldr	r2, [r3, #0]
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e652:	6879      	ldr	r1, [r7, #4]
 800e654:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800e656:	440b      	add	r3, r1
 800e658:	1ad3      	subs	r3, r2, r3
 800e65a:	2b00      	cmp	r3, #0
 800e65c:	dc23      	bgt.n	800e6a6 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e65e:	4b21      	ldr	r3, [pc, #132]	; (800e6e4 <tcp_timewait_input+0xdc>)
 800e660:	6819      	ldr	r1, [r3, #0]
 800e662:	4b21      	ldr	r3, [pc, #132]	; (800e6e8 <tcp_timewait_input+0xe0>)
 800e664:	881b      	ldrh	r3, [r3, #0]
 800e666:	461a      	mov	r2, r3
 800e668:	4b1d      	ldr	r3, [pc, #116]	; (800e6e0 <tcp_timewait_input+0xd8>)
 800e66a:	681b      	ldr	r3, [r3, #0]
 800e66c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e66e:	4b1f      	ldr	r3, [pc, #124]	; (800e6ec <tcp_timewait_input+0xe4>)
 800e670:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e672:	885b      	ldrh	r3, [r3, #2]
 800e674:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e676:	4a1d      	ldr	r2, [pc, #116]	; (800e6ec <tcp_timewait_input+0xe4>)
 800e678:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e67a:	8812      	ldrh	r2, [r2, #0]
 800e67c:	b292      	uxth	r2, r2
 800e67e:	9202      	str	r2, [sp, #8]
 800e680:	9301      	str	r3, [sp, #4]
 800e682:	4b1b      	ldr	r3, [pc, #108]	; (800e6f0 <tcp_timewait_input+0xe8>)
 800e684:	9300      	str	r3, [sp, #0]
 800e686:	4b1b      	ldr	r3, [pc, #108]	; (800e6f4 <tcp_timewait_input+0xec>)
 800e688:	4602      	mov	r2, r0
 800e68a:	6878      	ldr	r0, [r7, #4]
 800e68c:	f003 faca 	bl	8011c24 <tcp_rst>
      return;
 800e690:	e01b      	b.n	800e6ca <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800e692:	4b0f      	ldr	r3, [pc, #60]	; (800e6d0 <tcp_timewait_input+0xc8>)
 800e694:	781b      	ldrb	r3, [r3, #0]
 800e696:	f003 0301 	and.w	r3, r3, #1
 800e69a:	2b00      	cmp	r3, #0
 800e69c:	d003      	beq.n	800e6a6 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800e69e:	4b16      	ldr	r3, [pc, #88]	; (800e6f8 <tcp_timewait_input+0xf0>)
 800e6a0:	681a      	ldr	r2, [r3, #0]
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800e6a6:	4b10      	ldr	r3, [pc, #64]	; (800e6e8 <tcp_timewait_input+0xe0>)
 800e6a8:	881b      	ldrh	r3, [r3, #0]
 800e6aa:	2b00      	cmp	r3, #0
 800e6ac:	d00c      	beq.n	800e6c8 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	8b5b      	ldrh	r3, [r3, #26]
 800e6b2:	f043 0302 	orr.w	r3, r3, #2
 800e6b6:	b29a      	uxth	r2, r3
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800e6bc:	6878      	ldr	r0, [r7, #4]
 800e6be:	f002 fcfd 	bl	80110bc <tcp_output>
  }
  return;
 800e6c2:	e001      	b.n	800e6c8 <tcp_timewait_input+0xc0>
    return;
 800e6c4:	bf00      	nop
 800e6c6:	e000      	b.n	800e6ca <tcp_timewait_input+0xc2>
  return;
 800e6c8:	bf00      	nop
}
 800e6ca:	3708      	adds	r7, #8
 800e6cc:	46bd      	mov	sp, r7
 800e6ce:	bd80      	pop	{r7, pc}
 800e6d0:	2001097c 	.word	0x2001097c
 800e6d4:	0801a304 	.word	0x0801a304
 800e6d8:	0801a51c 	.word	0x0801a51c
 800e6dc:	0801a350 	.word	0x0801a350
 800e6e0:	20010970 	.word	0x20010970
 800e6e4:	20010974 	.word	0x20010974
 800e6e8:	2001097a 	.word	0x2001097a
 800e6ec:	20010960 	.word	0x20010960
 800e6f0:	2000d1d4 	.word	0x2000d1d4
 800e6f4:	2000d1d8 	.word	0x2000d1d8
 800e6f8:	20010938 	.word	0x20010938

0800e6fc <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800e6fc:	b590      	push	{r4, r7, lr}
 800e6fe:	b08d      	sub	sp, #52	; 0x34
 800e700:	af04      	add	r7, sp, #16
 800e702:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800e704:	2300      	movs	r3, #0
 800e706:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800e708:	2300      	movs	r3, #0
 800e70a:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	2b00      	cmp	r3, #0
 800e710:	d106      	bne.n	800e720 <tcp_process+0x24>
 800e712:	4b9d      	ldr	r3, [pc, #628]	; (800e988 <tcp_process+0x28c>)
 800e714:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800e718:	499c      	ldr	r1, [pc, #624]	; (800e98c <tcp_process+0x290>)
 800e71a:	489d      	ldr	r0, [pc, #628]	; (800e990 <tcp_process+0x294>)
 800e71c:	f008 ffba 	bl	8017694 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800e720:	4b9c      	ldr	r3, [pc, #624]	; (800e994 <tcp_process+0x298>)
 800e722:	781b      	ldrb	r3, [r3, #0]
 800e724:	f003 0304 	and.w	r3, r3, #4
 800e728:	2b00      	cmp	r3, #0
 800e72a:	d04e      	beq.n	800e7ca <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	7d1b      	ldrb	r3, [r3, #20]
 800e730:	2b02      	cmp	r3, #2
 800e732:	d108      	bne.n	800e746 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e738:	4b97      	ldr	r3, [pc, #604]	; (800e998 <tcp_process+0x29c>)
 800e73a:	681b      	ldr	r3, [r3, #0]
 800e73c:	429a      	cmp	r2, r3
 800e73e:	d123      	bne.n	800e788 <tcp_process+0x8c>
        acceptable = 1;
 800e740:	2301      	movs	r3, #1
 800e742:	76fb      	strb	r3, [r7, #27]
 800e744:	e020      	b.n	800e788 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e74a:	4b94      	ldr	r3, [pc, #592]	; (800e99c <tcp_process+0x2a0>)
 800e74c:	681b      	ldr	r3, [r3, #0]
 800e74e:	429a      	cmp	r2, r3
 800e750:	d102      	bne.n	800e758 <tcp_process+0x5c>
        acceptable = 1;
 800e752:	2301      	movs	r3, #1
 800e754:	76fb      	strb	r3, [r7, #27]
 800e756:	e017      	b.n	800e788 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800e758:	4b90      	ldr	r3, [pc, #576]	; (800e99c <tcp_process+0x2a0>)
 800e75a:	681a      	ldr	r2, [r3, #0]
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e760:	1ad3      	subs	r3, r2, r3
 800e762:	2b00      	cmp	r3, #0
 800e764:	db10      	blt.n	800e788 <tcp_process+0x8c>
 800e766:	4b8d      	ldr	r3, [pc, #564]	; (800e99c <tcp_process+0x2a0>)
 800e768:	681a      	ldr	r2, [r3, #0]
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e76e:	6879      	ldr	r1, [r7, #4]
 800e770:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800e772:	440b      	add	r3, r1
 800e774:	1ad3      	subs	r3, r2, r3
 800e776:	2b00      	cmp	r3, #0
 800e778:	dc06      	bgt.n	800e788 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	8b5b      	ldrh	r3, [r3, #26]
 800e77e:	f043 0302 	orr.w	r3, r3, #2
 800e782:	b29a      	uxth	r2, r3
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800e788:	7efb      	ldrb	r3, [r7, #27]
 800e78a:	2b00      	cmp	r3, #0
 800e78c:	d01b      	beq.n	800e7c6 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	7d1b      	ldrb	r3, [r3, #20]
 800e792:	2b00      	cmp	r3, #0
 800e794:	d106      	bne.n	800e7a4 <tcp_process+0xa8>
 800e796:	4b7c      	ldr	r3, [pc, #496]	; (800e988 <tcp_process+0x28c>)
 800e798:	f44f 724e 	mov.w	r2, #824	; 0x338
 800e79c:	4980      	ldr	r1, [pc, #512]	; (800e9a0 <tcp_process+0x2a4>)
 800e79e:	487c      	ldr	r0, [pc, #496]	; (800e990 <tcp_process+0x294>)
 800e7a0:	f008 ff78 	bl	8017694 <iprintf>
      recv_flags |= TF_RESET;
 800e7a4:	4b7f      	ldr	r3, [pc, #508]	; (800e9a4 <tcp_process+0x2a8>)
 800e7a6:	781b      	ldrb	r3, [r3, #0]
 800e7a8:	f043 0308 	orr.w	r3, r3, #8
 800e7ac:	b2da      	uxtb	r2, r3
 800e7ae:	4b7d      	ldr	r3, [pc, #500]	; (800e9a4 <tcp_process+0x2a8>)
 800e7b0:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800e7b2:	687b      	ldr	r3, [r7, #4]
 800e7b4:	8b5b      	ldrh	r3, [r3, #26]
 800e7b6:	f023 0301 	bic.w	r3, r3, #1
 800e7ba:	b29a      	uxth	r2, r3
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800e7c0:	f06f 030d 	mvn.w	r3, #13
 800e7c4:	e37a      	b.n	800eebc <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800e7c6:	2300      	movs	r3, #0
 800e7c8:	e378      	b.n	800eebc <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800e7ca:	4b72      	ldr	r3, [pc, #456]	; (800e994 <tcp_process+0x298>)
 800e7cc:	781b      	ldrb	r3, [r3, #0]
 800e7ce:	f003 0302 	and.w	r3, r3, #2
 800e7d2:	2b00      	cmp	r3, #0
 800e7d4:	d010      	beq.n	800e7f8 <tcp_process+0xfc>
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	7d1b      	ldrb	r3, [r3, #20]
 800e7da:	2b02      	cmp	r3, #2
 800e7dc:	d00c      	beq.n	800e7f8 <tcp_process+0xfc>
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	7d1b      	ldrb	r3, [r3, #20]
 800e7e2:	2b03      	cmp	r3, #3
 800e7e4:	d008      	beq.n	800e7f8 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	8b5b      	ldrh	r3, [r3, #26]
 800e7ea:	f043 0302 	orr.w	r3, r3, #2
 800e7ee:	b29a      	uxth	r2, r3
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800e7f4:	2300      	movs	r3, #0
 800e7f6:	e361      	b.n	800eebc <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	8b5b      	ldrh	r3, [r3, #26]
 800e7fc:	f003 0310 	and.w	r3, r3, #16
 800e800:	2b00      	cmp	r3, #0
 800e802:	d103      	bne.n	800e80c <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800e804:	4b68      	ldr	r3, [pc, #416]	; (800e9a8 <tcp_process+0x2ac>)
 800e806:	681a      	ldr	r2, [r3, #0]
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	2200      	movs	r2, #0
 800e810:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	2200      	movs	r2, #0
 800e818:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800e81c:	6878      	ldr	r0, [r7, #4]
 800e81e:	f001 fc2f 	bl	8010080 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800e822:	687b      	ldr	r3, [r7, #4]
 800e824:	7d1b      	ldrb	r3, [r3, #20]
 800e826:	3b02      	subs	r3, #2
 800e828:	2b07      	cmp	r3, #7
 800e82a:	f200 8337 	bhi.w	800ee9c <tcp_process+0x7a0>
 800e82e:	a201      	add	r2, pc, #4	; (adr r2, 800e834 <tcp_process+0x138>)
 800e830:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e834:	0800e855 	.word	0x0800e855
 800e838:	0800ea85 	.word	0x0800ea85
 800e83c:	0800ebfd 	.word	0x0800ebfd
 800e840:	0800ec27 	.word	0x0800ec27
 800e844:	0800ed4b 	.word	0x0800ed4b
 800e848:	0800ebfd 	.word	0x0800ebfd
 800e84c:	0800edd7 	.word	0x0800edd7
 800e850:	0800ee67 	.word	0x0800ee67
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800e854:	4b4f      	ldr	r3, [pc, #316]	; (800e994 <tcp_process+0x298>)
 800e856:	781b      	ldrb	r3, [r3, #0]
 800e858:	f003 0310 	and.w	r3, r3, #16
 800e85c:	2b00      	cmp	r3, #0
 800e85e:	f000 80e4 	beq.w	800ea2a <tcp_process+0x32e>
 800e862:	4b4c      	ldr	r3, [pc, #304]	; (800e994 <tcp_process+0x298>)
 800e864:	781b      	ldrb	r3, [r3, #0]
 800e866:	f003 0302 	and.w	r3, r3, #2
 800e86a:	2b00      	cmp	r3, #0
 800e86c:	f000 80dd 	beq.w	800ea2a <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e874:	1c5a      	adds	r2, r3, #1
 800e876:	4b48      	ldr	r3, [pc, #288]	; (800e998 <tcp_process+0x29c>)
 800e878:	681b      	ldr	r3, [r3, #0]
 800e87a:	429a      	cmp	r2, r3
 800e87c:	f040 80d5 	bne.w	800ea2a <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800e880:	4b46      	ldr	r3, [pc, #280]	; (800e99c <tcp_process+0x2a0>)
 800e882:	681b      	ldr	r3, [r3, #0]
 800e884:	1c5a      	adds	r2, r3, #1
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800e892:	4b41      	ldr	r3, [pc, #260]	; (800e998 <tcp_process+0x29c>)
 800e894:	681a      	ldr	r2, [r3, #0]
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800e89a:	4b44      	ldr	r3, [pc, #272]	; (800e9ac <tcp_process+0x2b0>)
 800e89c:	681b      	ldr	r3, [r3, #0]
 800e89e:	89db      	ldrh	r3, [r3, #14]
 800e8a0:	b29a      	uxth	r2, r3
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800e8b4:	4b39      	ldr	r3, [pc, #228]	; (800e99c <tcp_process+0x2a0>)
 800e8b6:	681b      	ldr	r3, [r3, #0]
 800e8b8:	1e5a      	subs	r2, r3, #1
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	2204      	movs	r2, #4
 800e8c2:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	3304      	adds	r3, #4
 800e8cc:	4618      	mov	r0, r3
 800e8ce:	f007 f91d 	bl	8015b0c <ip4_route>
 800e8d2:	4601      	mov	r1, r0
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	3304      	adds	r3, #4
 800e8d8:	461a      	mov	r2, r3
 800e8da:	4620      	mov	r0, r4
 800e8dc:	f7ff f88c 	bl	800d9f8 <tcp_eff_send_mss_netif>
 800e8e0:	4603      	mov	r3, r0
 800e8e2:	461a      	mov	r2, r3
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e8ec:	009a      	lsls	r2, r3, #2
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e8f2:	005b      	lsls	r3, r3, #1
 800e8f4:	f241 111c 	movw	r1, #4380	; 0x111c
 800e8f8:	428b      	cmp	r3, r1
 800e8fa:	bf38      	it	cc
 800e8fc:	460b      	movcc	r3, r1
 800e8fe:	429a      	cmp	r2, r3
 800e900:	d204      	bcs.n	800e90c <tcp_process+0x210>
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e906:	009b      	lsls	r3, r3, #2
 800e908:	b29b      	uxth	r3, r3
 800e90a:	e00d      	b.n	800e928 <tcp_process+0x22c>
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e910:	005b      	lsls	r3, r3, #1
 800e912:	f241 121c 	movw	r2, #4380	; 0x111c
 800e916:	4293      	cmp	r3, r2
 800e918:	d904      	bls.n	800e924 <tcp_process+0x228>
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e91e:	005b      	lsls	r3, r3, #1
 800e920:	b29b      	uxth	r3, r3
 800e922:	e001      	b.n	800e928 <tcp_process+0x22c>
 800e924:	f241 131c 	movw	r3, #4380	; 0x111c
 800e928:	687a      	ldr	r2, [r7, #4]
 800e92a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e934:	2b00      	cmp	r3, #0
 800e936:	d106      	bne.n	800e946 <tcp_process+0x24a>
 800e938:	4b13      	ldr	r3, [pc, #76]	; (800e988 <tcp_process+0x28c>)
 800e93a:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800e93e:	491c      	ldr	r1, [pc, #112]	; (800e9b0 <tcp_process+0x2b4>)
 800e940:	4813      	ldr	r0, [pc, #76]	; (800e990 <tcp_process+0x294>)
 800e942:	f008 fea7 	bl	8017694 <iprintf>
        --pcb->snd_queuelen;
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e94c:	3b01      	subs	r3, #1
 800e94e:	b29a      	uxth	r2, r3
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e95a:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800e95c:	69fb      	ldr	r3, [r7, #28]
 800e95e:	2b00      	cmp	r3, #0
 800e960:	d12a      	bne.n	800e9b8 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e966:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800e968:	69fb      	ldr	r3, [r7, #28]
 800e96a:	2b00      	cmp	r3, #0
 800e96c:	d106      	bne.n	800e97c <tcp_process+0x280>
 800e96e:	4b06      	ldr	r3, [pc, #24]	; (800e988 <tcp_process+0x28c>)
 800e970:	f44f 725d 	mov.w	r2, #884	; 0x374
 800e974:	490f      	ldr	r1, [pc, #60]	; (800e9b4 <tcp_process+0x2b8>)
 800e976:	4806      	ldr	r0, [pc, #24]	; (800e990 <tcp_process+0x294>)
 800e978:	f008 fe8c 	bl	8017694 <iprintf>
          pcb->unsent = rseg->next;
 800e97c:	69fb      	ldr	r3, [r7, #28]
 800e97e:	681a      	ldr	r2, [r3, #0]
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	66da      	str	r2, [r3, #108]	; 0x6c
 800e984:	e01c      	b.n	800e9c0 <tcp_process+0x2c4>
 800e986:	bf00      	nop
 800e988:	0801a304 	.word	0x0801a304
 800e98c:	0801a53c 	.word	0x0801a53c
 800e990:	0801a350 	.word	0x0801a350
 800e994:	2001097c 	.word	0x2001097c
 800e998:	20010974 	.word	0x20010974
 800e99c:	20010970 	.word	0x20010970
 800e9a0:	0801a558 	.word	0x0801a558
 800e9a4:	2001097d 	.word	0x2001097d
 800e9a8:	20010938 	.word	0x20010938
 800e9ac:	20010960 	.word	0x20010960
 800e9b0:	0801a578 	.word	0x0801a578
 800e9b4:	0801a590 	.word	0x0801a590
        } else {
          pcb->unacked = rseg->next;
 800e9b8:	69fb      	ldr	r3, [r7, #28]
 800e9ba:	681a      	ldr	r2, [r3, #0]
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800e9c0:	69f8      	ldr	r0, [r7, #28]
 800e9c2:	f7fe fc54 	bl	800d26e <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e9ca:	2b00      	cmp	r3, #0
 800e9cc:	d104      	bne.n	800e9d8 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e9d4:	861a      	strh	r2, [r3, #48]	; 0x30
 800e9d6:	e006      	b.n	800e9e6 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	2200      	movs	r2, #0
 800e9dc:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800e9de:	687b      	ldr	r3, [r7, #4]
 800e9e0:	2200      	movs	r2, #0
 800e9e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800e9e6:	687b      	ldr	r3, [r7, #4]
 800e9e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e9ec:	2b00      	cmp	r3, #0
 800e9ee:	d00a      	beq.n	800ea06 <tcp_process+0x30a>
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e9f6:	687a      	ldr	r2, [r7, #4]
 800e9f8:	6910      	ldr	r0, [r2, #16]
 800e9fa:	2200      	movs	r2, #0
 800e9fc:	6879      	ldr	r1, [r7, #4]
 800e9fe:	4798      	blx	r3
 800ea00:	4603      	mov	r3, r0
 800ea02:	76bb      	strb	r3, [r7, #26]
 800ea04:	e001      	b.n	800ea0a <tcp_process+0x30e>
 800ea06:	2300      	movs	r3, #0
 800ea08:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800ea0a:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800ea0e:	f113 0f0d 	cmn.w	r3, #13
 800ea12:	d102      	bne.n	800ea1a <tcp_process+0x31e>
          return ERR_ABRT;
 800ea14:	f06f 030c 	mvn.w	r3, #12
 800ea18:	e250      	b.n	800eebc <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	8b5b      	ldrh	r3, [r3, #26]
 800ea1e:	f043 0302 	orr.w	r3, r3, #2
 800ea22:	b29a      	uxth	r2, r3
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800ea28:	e23a      	b.n	800eea0 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800ea2a:	4b98      	ldr	r3, [pc, #608]	; (800ec8c <tcp_process+0x590>)
 800ea2c:	781b      	ldrb	r3, [r3, #0]
 800ea2e:	f003 0310 	and.w	r3, r3, #16
 800ea32:	2b00      	cmp	r3, #0
 800ea34:	f000 8234 	beq.w	800eea0 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ea38:	4b95      	ldr	r3, [pc, #596]	; (800ec90 <tcp_process+0x594>)
 800ea3a:	6819      	ldr	r1, [r3, #0]
 800ea3c:	4b95      	ldr	r3, [pc, #596]	; (800ec94 <tcp_process+0x598>)
 800ea3e:	881b      	ldrh	r3, [r3, #0]
 800ea40:	461a      	mov	r2, r3
 800ea42:	4b95      	ldr	r3, [pc, #596]	; (800ec98 <tcp_process+0x59c>)
 800ea44:	681b      	ldr	r3, [r3, #0]
 800ea46:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ea48:	4b94      	ldr	r3, [pc, #592]	; (800ec9c <tcp_process+0x5a0>)
 800ea4a:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ea4c:	885b      	ldrh	r3, [r3, #2]
 800ea4e:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ea50:	4a92      	ldr	r2, [pc, #584]	; (800ec9c <tcp_process+0x5a0>)
 800ea52:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ea54:	8812      	ldrh	r2, [r2, #0]
 800ea56:	b292      	uxth	r2, r2
 800ea58:	9202      	str	r2, [sp, #8]
 800ea5a:	9301      	str	r3, [sp, #4]
 800ea5c:	4b90      	ldr	r3, [pc, #576]	; (800eca0 <tcp_process+0x5a4>)
 800ea5e:	9300      	str	r3, [sp, #0]
 800ea60:	4b90      	ldr	r3, [pc, #576]	; (800eca4 <tcp_process+0x5a8>)
 800ea62:	4602      	mov	r2, r0
 800ea64:	6878      	ldr	r0, [r7, #4]
 800ea66:	f003 f8dd 	bl	8011c24 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ea70:	2b05      	cmp	r3, #5
 800ea72:	f200 8215 	bhi.w	800eea0 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	2200      	movs	r2, #0
 800ea7a:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800ea7c:	6878      	ldr	r0, [r7, #4]
 800ea7e:	f002 fea7 	bl	80117d0 <tcp_rexmit_rto>
      break;
 800ea82:	e20d      	b.n	800eea0 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800ea84:	4b81      	ldr	r3, [pc, #516]	; (800ec8c <tcp_process+0x590>)
 800ea86:	781b      	ldrb	r3, [r3, #0]
 800ea88:	f003 0310 	and.w	r3, r3, #16
 800ea8c:	2b00      	cmp	r3, #0
 800ea8e:	f000 80a1 	beq.w	800ebd4 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800ea92:	4b7f      	ldr	r3, [pc, #508]	; (800ec90 <tcp_process+0x594>)
 800ea94:	681a      	ldr	r2, [r3, #0]
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ea9a:	1ad3      	subs	r3, r2, r3
 800ea9c:	3b01      	subs	r3, #1
 800ea9e:	2b00      	cmp	r3, #0
 800eaa0:	db7e      	blt.n	800eba0 <tcp_process+0x4a4>
 800eaa2:	4b7b      	ldr	r3, [pc, #492]	; (800ec90 <tcp_process+0x594>)
 800eaa4:	681a      	ldr	r2, [r3, #0]
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800eaaa:	1ad3      	subs	r3, r2, r3
 800eaac:	2b00      	cmp	r3, #0
 800eaae:	dc77      	bgt.n	800eba0 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	2204      	movs	r2, #4
 800eab4:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800eaba:	2b00      	cmp	r3, #0
 800eabc:	d102      	bne.n	800eac4 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800eabe:	23fa      	movs	r3, #250	; 0xfa
 800eac0:	76bb      	strb	r3, [r7, #26]
 800eac2:	e01d      	b.n	800eb00 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800eac8:	699b      	ldr	r3, [r3, #24]
 800eaca:	2b00      	cmp	r3, #0
 800eacc:	d106      	bne.n	800eadc <tcp_process+0x3e0>
 800eace:	4b76      	ldr	r3, [pc, #472]	; (800eca8 <tcp_process+0x5ac>)
 800ead0:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800ead4:	4975      	ldr	r1, [pc, #468]	; (800ecac <tcp_process+0x5b0>)
 800ead6:	4876      	ldr	r0, [pc, #472]	; (800ecb0 <tcp_process+0x5b4>)
 800ead8:	f008 fddc 	bl	8017694 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800eae0:	699b      	ldr	r3, [r3, #24]
 800eae2:	2b00      	cmp	r3, #0
 800eae4:	d00a      	beq.n	800eafc <tcp_process+0x400>
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800eaea:	699b      	ldr	r3, [r3, #24]
 800eaec:	687a      	ldr	r2, [r7, #4]
 800eaee:	6910      	ldr	r0, [r2, #16]
 800eaf0:	2200      	movs	r2, #0
 800eaf2:	6879      	ldr	r1, [r7, #4]
 800eaf4:	4798      	blx	r3
 800eaf6:	4603      	mov	r3, r0
 800eaf8:	76bb      	strb	r3, [r7, #26]
 800eafa:	e001      	b.n	800eb00 <tcp_process+0x404>
 800eafc:	23f0      	movs	r3, #240	; 0xf0
 800eafe:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800eb00:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800eb04:	2b00      	cmp	r3, #0
 800eb06:	d00a      	beq.n	800eb1e <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800eb08:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800eb0c:	f113 0f0d 	cmn.w	r3, #13
 800eb10:	d002      	beq.n	800eb18 <tcp_process+0x41c>
              tcp_abort(pcb);
 800eb12:	6878      	ldr	r0, [r7, #4]
 800eb14:	f7fd fd18 	bl	800c548 <tcp_abort>
            }
            return ERR_ABRT;
 800eb18:	f06f 030c 	mvn.w	r3, #12
 800eb1c:	e1ce      	b.n	800eebc <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800eb1e:	6878      	ldr	r0, [r7, #4]
 800eb20:	f000 fae0 	bl	800f0e4 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800eb24:	4b63      	ldr	r3, [pc, #396]	; (800ecb4 <tcp_process+0x5b8>)
 800eb26:	881b      	ldrh	r3, [r3, #0]
 800eb28:	2b00      	cmp	r3, #0
 800eb2a:	d005      	beq.n	800eb38 <tcp_process+0x43c>
            recv_acked--;
 800eb2c:	4b61      	ldr	r3, [pc, #388]	; (800ecb4 <tcp_process+0x5b8>)
 800eb2e:	881b      	ldrh	r3, [r3, #0]
 800eb30:	3b01      	subs	r3, #1
 800eb32:	b29a      	uxth	r2, r3
 800eb34:	4b5f      	ldr	r3, [pc, #380]	; (800ecb4 <tcp_process+0x5b8>)
 800eb36:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800eb3c:	009a      	lsls	r2, r3, #2
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800eb42:	005b      	lsls	r3, r3, #1
 800eb44:	f241 111c 	movw	r1, #4380	; 0x111c
 800eb48:	428b      	cmp	r3, r1
 800eb4a:	bf38      	it	cc
 800eb4c:	460b      	movcc	r3, r1
 800eb4e:	429a      	cmp	r2, r3
 800eb50:	d204      	bcs.n	800eb5c <tcp_process+0x460>
 800eb52:	687b      	ldr	r3, [r7, #4]
 800eb54:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800eb56:	009b      	lsls	r3, r3, #2
 800eb58:	b29b      	uxth	r3, r3
 800eb5a:	e00d      	b.n	800eb78 <tcp_process+0x47c>
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800eb60:	005b      	lsls	r3, r3, #1
 800eb62:	f241 121c 	movw	r2, #4380	; 0x111c
 800eb66:	4293      	cmp	r3, r2
 800eb68:	d904      	bls.n	800eb74 <tcp_process+0x478>
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800eb6e:	005b      	lsls	r3, r3, #1
 800eb70:	b29b      	uxth	r3, r3
 800eb72:	e001      	b.n	800eb78 <tcp_process+0x47c>
 800eb74:	f241 131c 	movw	r3, #4380	; 0x111c
 800eb78:	687a      	ldr	r2, [r7, #4]
 800eb7a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800eb7e:	4b4e      	ldr	r3, [pc, #312]	; (800ecb8 <tcp_process+0x5bc>)
 800eb80:	781b      	ldrb	r3, [r3, #0]
 800eb82:	f003 0320 	and.w	r3, r3, #32
 800eb86:	2b00      	cmp	r3, #0
 800eb88:	d037      	beq.n	800ebfa <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	8b5b      	ldrh	r3, [r3, #26]
 800eb8e:	f043 0302 	orr.w	r3, r3, #2
 800eb92:	b29a      	uxth	r2, r3
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	2207      	movs	r2, #7
 800eb9c:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800eb9e:	e02c      	b.n	800ebfa <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800eba0:	4b3b      	ldr	r3, [pc, #236]	; (800ec90 <tcp_process+0x594>)
 800eba2:	6819      	ldr	r1, [r3, #0]
 800eba4:	4b3b      	ldr	r3, [pc, #236]	; (800ec94 <tcp_process+0x598>)
 800eba6:	881b      	ldrh	r3, [r3, #0]
 800eba8:	461a      	mov	r2, r3
 800ebaa:	4b3b      	ldr	r3, [pc, #236]	; (800ec98 <tcp_process+0x59c>)
 800ebac:	681b      	ldr	r3, [r3, #0]
 800ebae:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ebb0:	4b3a      	ldr	r3, [pc, #232]	; (800ec9c <tcp_process+0x5a0>)
 800ebb2:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ebb4:	885b      	ldrh	r3, [r3, #2]
 800ebb6:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ebb8:	4a38      	ldr	r2, [pc, #224]	; (800ec9c <tcp_process+0x5a0>)
 800ebba:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ebbc:	8812      	ldrh	r2, [r2, #0]
 800ebbe:	b292      	uxth	r2, r2
 800ebc0:	9202      	str	r2, [sp, #8]
 800ebc2:	9301      	str	r3, [sp, #4]
 800ebc4:	4b36      	ldr	r3, [pc, #216]	; (800eca0 <tcp_process+0x5a4>)
 800ebc6:	9300      	str	r3, [sp, #0]
 800ebc8:	4b36      	ldr	r3, [pc, #216]	; (800eca4 <tcp_process+0x5a8>)
 800ebca:	4602      	mov	r2, r0
 800ebcc:	6878      	ldr	r0, [r7, #4]
 800ebce:	f003 f829 	bl	8011c24 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800ebd2:	e167      	b.n	800eea4 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800ebd4:	4b2d      	ldr	r3, [pc, #180]	; (800ec8c <tcp_process+0x590>)
 800ebd6:	781b      	ldrb	r3, [r3, #0]
 800ebd8:	f003 0302 	and.w	r3, r3, #2
 800ebdc:	2b00      	cmp	r3, #0
 800ebde:	f000 8161 	beq.w	800eea4 <tcp_process+0x7a8>
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ebe6:	1e5a      	subs	r2, r3, #1
 800ebe8:	4b2b      	ldr	r3, [pc, #172]	; (800ec98 <tcp_process+0x59c>)
 800ebea:	681b      	ldr	r3, [r3, #0]
 800ebec:	429a      	cmp	r2, r3
 800ebee:	f040 8159 	bne.w	800eea4 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800ebf2:	6878      	ldr	r0, [r7, #4]
 800ebf4:	f002 fe0e 	bl	8011814 <tcp_rexmit>
      break;
 800ebf8:	e154      	b.n	800eea4 <tcp_process+0x7a8>
 800ebfa:	e153      	b.n	800eea4 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800ebfc:	6878      	ldr	r0, [r7, #4]
 800ebfe:	f000 fa71 	bl	800f0e4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800ec02:	4b2d      	ldr	r3, [pc, #180]	; (800ecb8 <tcp_process+0x5bc>)
 800ec04:	781b      	ldrb	r3, [r3, #0]
 800ec06:	f003 0320 	and.w	r3, r3, #32
 800ec0a:	2b00      	cmp	r3, #0
 800ec0c:	f000 814c 	beq.w	800eea8 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	8b5b      	ldrh	r3, [r3, #26]
 800ec14:	f043 0302 	orr.w	r3, r3, #2
 800ec18:	b29a      	uxth	r2, r3
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800ec1e:	687b      	ldr	r3, [r7, #4]
 800ec20:	2207      	movs	r2, #7
 800ec22:	751a      	strb	r2, [r3, #20]
      }
      break;
 800ec24:	e140      	b.n	800eea8 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800ec26:	6878      	ldr	r0, [r7, #4]
 800ec28:	f000 fa5c 	bl	800f0e4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800ec2c:	4b22      	ldr	r3, [pc, #136]	; (800ecb8 <tcp_process+0x5bc>)
 800ec2e:	781b      	ldrb	r3, [r3, #0]
 800ec30:	f003 0320 	and.w	r3, r3, #32
 800ec34:	2b00      	cmp	r3, #0
 800ec36:	d071      	beq.n	800ed1c <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800ec38:	4b14      	ldr	r3, [pc, #80]	; (800ec8c <tcp_process+0x590>)
 800ec3a:	781b      	ldrb	r3, [r3, #0]
 800ec3c:	f003 0310 	and.w	r3, r3, #16
 800ec40:	2b00      	cmp	r3, #0
 800ec42:	d060      	beq.n	800ed06 <tcp_process+0x60a>
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ec48:	4b11      	ldr	r3, [pc, #68]	; (800ec90 <tcp_process+0x594>)
 800ec4a:	681b      	ldr	r3, [r3, #0]
 800ec4c:	429a      	cmp	r2, r3
 800ec4e:	d15a      	bne.n	800ed06 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800ec54:	2b00      	cmp	r3, #0
 800ec56:	d156      	bne.n	800ed06 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	8b5b      	ldrh	r3, [r3, #26]
 800ec5c:	f043 0302 	orr.w	r3, r3, #2
 800ec60:	b29a      	uxth	r2, r3
 800ec62:	687b      	ldr	r3, [r7, #4]
 800ec64:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800ec66:	6878      	ldr	r0, [r7, #4]
 800ec68:	f7fe fdbc 	bl	800d7e4 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800ec6c:	4b13      	ldr	r3, [pc, #76]	; (800ecbc <tcp_process+0x5c0>)
 800ec6e:	681b      	ldr	r3, [r3, #0]
 800ec70:	687a      	ldr	r2, [r7, #4]
 800ec72:	429a      	cmp	r2, r3
 800ec74:	d105      	bne.n	800ec82 <tcp_process+0x586>
 800ec76:	4b11      	ldr	r3, [pc, #68]	; (800ecbc <tcp_process+0x5c0>)
 800ec78:	681b      	ldr	r3, [r3, #0]
 800ec7a:	68db      	ldr	r3, [r3, #12]
 800ec7c:	4a0f      	ldr	r2, [pc, #60]	; (800ecbc <tcp_process+0x5c0>)
 800ec7e:	6013      	str	r3, [r2, #0]
 800ec80:	e02e      	b.n	800ece0 <tcp_process+0x5e4>
 800ec82:	4b0e      	ldr	r3, [pc, #56]	; (800ecbc <tcp_process+0x5c0>)
 800ec84:	681b      	ldr	r3, [r3, #0]
 800ec86:	617b      	str	r3, [r7, #20]
 800ec88:	e027      	b.n	800ecda <tcp_process+0x5de>
 800ec8a:	bf00      	nop
 800ec8c:	2001097c 	.word	0x2001097c
 800ec90:	20010974 	.word	0x20010974
 800ec94:	2001097a 	.word	0x2001097a
 800ec98:	20010970 	.word	0x20010970
 800ec9c:	20010960 	.word	0x20010960
 800eca0:	2000d1d4 	.word	0x2000d1d4
 800eca4:	2000d1d8 	.word	0x2000d1d8
 800eca8:	0801a304 	.word	0x0801a304
 800ecac:	0801a5a4 	.word	0x0801a5a4
 800ecb0:	0801a350 	.word	0x0801a350
 800ecb4:	20010978 	.word	0x20010978
 800ecb8:	2001097d 	.word	0x2001097d
 800ecbc:	20010944 	.word	0x20010944
 800ecc0:	697b      	ldr	r3, [r7, #20]
 800ecc2:	68db      	ldr	r3, [r3, #12]
 800ecc4:	687a      	ldr	r2, [r7, #4]
 800ecc6:	429a      	cmp	r2, r3
 800ecc8:	d104      	bne.n	800ecd4 <tcp_process+0x5d8>
 800ecca:	687b      	ldr	r3, [r7, #4]
 800eccc:	68da      	ldr	r2, [r3, #12]
 800ecce:	697b      	ldr	r3, [r7, #20]
 800ecd0:	60da      	str	r2, [r3, #12]
 800ecd2:	e005      	b.n	800ece0 <tcp_process+0x5e4>
 800ecd4:	697b      	ldr	r3, [r7, #20]
 800ecd6:	68db      	ldr	r3, [r3, #12]
 800ecd8:	617b      	str	r3, [r7, #20]
 800ecda:	697b      	ldr	r3, [r7, #20]
 800ecdc:	2b00      	cmp	r3, #0
 800ecde:	d1ef      	bne.n	800ecc0 <tcp_process+0x5c4>
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	2200      	movs	r2, #0
 800ece4:	60da      	str	r2, [r3, #12]
 800ece6:	4b77      	ldr	r3, [pc, #476]	; (800eec4 <tcp_process+0x7c8>)
 800ece8:	2201      	movs	r2, #1
 800ecea:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	220a      	movs	r2, #10
 800ecf0:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800ecf2:	4b75      	ldr	r3, [pc, #468]	; (800eec8 <tcp_process+0x7cc>)
 800ecf4:	681a      	ldr	r2, [r3, #0]
 800ecf6:	687b      	ldr	r3, [r7, #4]
 800ecf8:	60da      	str	r2, [r3, #12]
 800ecfa:	4a73      	ldr	r2, [pc, #460]	; (800eec8 <tcp_process+0x7cc>)
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	6013      	str	r3, [r2, #0]
 800ed00:	f003 f952 	bl	8011fa8 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800ed04:	e0d2      	b.n	800eeac <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800ed06:	687b      	ldr	r3, [r7, #4]
 800ed08:	8b5b      	ldrh	r3, [r3, #26]
 800ed0a:	f043 0302 	orr.w	r3, r3, #2
 800ed0e:	b29a      	uxth	r2, r3
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	2208      	movs	r2, #8
 800ed18:	751a      	strb	r2, [r3, #20]
      break;
 800ed1a:	e0c7      	b.n	800eeac <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800ed1c:	4b6b      	ldr	r3, [pc, #428]	; (800eecc <tcp_process+0x7d0>)
 800ed1e:	781b      	ldrb	r3, [r3, #0]
 800ed20:	f003 0310 	and.w	r3, r3, #16
 800ed24:	2b00      	cmp	r3, #0
 800ed26:	f000 80c1 	beq.w	800eeac <tcp_process+0x7b0>
 800ed2a:	687b      	ldr	r3, [r7, #4]
 800ed2c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ed2e:	4b68      	ldr	r3, [pc, #416]	; (800eed0 <tcp_process+0x7d4>)
 800ed30:	681b      	ldr	r3, [r3, #0]
 800ed32:	429a      	cmp	r2, r3
 800ed34:	f040 80ba 	bne.w	800eeac <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800ed3c:	2b00      	cmp	r3, #0
 800ed3e:	f040 80b5 	bne.w	800eeac <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800ed42:	687b      	ldr	r3, [r7, #4]
 800ed44:	2206      	movs	r2, #6
 800ed46:	751a      	strb	r2, [r3, #20]
      break;
 800ed48:	e0b0      	b.n	800eeac <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800ed4a:	6878      	ldr	r0, [r7, #4]
 800ed4c:	f000 f9ca 	bl	800f0e4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800ed50:	4b60      	ldr	r3, [pc, #384]	; (800eed4 <tcp_process+0x7d8>)
 800ed52:	781b      	ldrb	r3, [r3, #0]
 800ed54:	f003 0320 	and.w	r3, r3, #32
 800ed58:	2b00      	cmp	r3, #0
 800ed5a:	f000 80a9 	beq.w	800eeb0 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800ed5e:	687b      	ldr	r3, [r7, #4]
 800ed60:	8b5b      	ldrh	r3, [r3, #26]
 800ed62:	f043 0302 	orr.w	r3, r3, #2
 800ed66:	b29a      	uxth	r2, r3
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800ed6c:	6878      	ldr	r0, [r7, #4]
 800ed6e:	f7fe fd39 	bl	800d7e4 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800ed72:	4b59      	ldr	r3, [pc, #356]	; (800eed8 <tcp_process+0x7dc>)
 800ed74:	681b      	ldr	r3, [r3, #0]
 800ed76:	687a      	ldr	r2, [r7, #4]
 800ed78:	429a      	cmp	r2, r3
 800ed7a:	d105      	bne.n	800ed88 <tcp_process+0x68c>
 800ed7c:	4b56      	ldr	r3, [pc, #344]	; (800eed8 <tcp_process+0x7dc>)
 800ed7e:	681b      	ldr	r3, [r3, #0]
 800ed80:	68db      	ldr	r3, [r3, #12]
 800ed82:	4a55      	ldr	r2, [pc, #340]	; (800eed8 <tcp_process+0x7dc>)
 800ed84:	6013      	str	r3, [r2, #0]
 800ed86:	e013      	b.n	800edb0 <tcp_process+0x6b4>
 800ed88:	4b53      	ldr	r3, [pc, #332]	; (800eed8 <tcp_process+0x7dc>)
 800ed8a:	681b      	ldr	r3, [r3, #0]
 800ed8c:	613b      	str	r3, [r7, #16]
 800ed8e:	e00c      	b.n	800edaa <tcp_process+0x6ae>
 800ed90:	693b      	ldr	r3, [r7, #16]
 800ed92:	68db      	ldr	r3, [r3, #12]
 800ed94:	687a      	ldr	r2, [r7, #4]
 800ed96:	429a      	cmp	r2, r3
 800ed98:	d104      	bne.n	800eda4 <tcp_process+0x6a8>
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	68da      	ldr	r2, [r3, #12]
 800ed9e:	693b      	ldr	r3, [r7, #16]
 800eda0:	60da      	str	r2, [r3, #12]
 800eda2:	e005      	b.n	800edb0 <tcp_process+0x6b4>
 800eda4:	693b      	ldr	r3, [r7, #16]
 800eda6:	68db      	ldr	r3, [r3, #12]
 800eda8:	613b      	str	r3, [r7, #16]
 800edaa:	693b      	ldr	r3, [r7, #16]
 800edac:	2b00      	cmp	r3, #0
 800edae:	d1ef      	bne.n	800ed90 <tcp_process+0x694>
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	2200      	movs	r2, #0
 800edb4:	60da      	str	r2, [r3, #12]
 800edb6:	4b43      	ldr	r3, [pc, #268]	; (800eec4 <tcp_process+0x7c8>)
 800edb8:	2201      	movs	r2, #1
 800edba:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800edbc:	687b      	ldr	r3, [r7, #4]
 800edbe:	220a      	movs	r2, #10
 800edc0:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800edc2:	4b41      	ldr	r3, [pc, #260]	; (800eec8 <tcp_process+0x7cc>)
 800edc4:	681a      	ldr	r2, [r3, #0]
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	60da      	str	r2, [r3, #12]
 800edca:	4a3f      	ldr	r2, [pc, #252]	; (800eec8 <tcp_process+0x7cc>)
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	6013      	str	r3, [r2, #0]
 800edd0:	f003 f8ea 	bl	8011fa8 <tcp_timer_needed>
      }
      break;
 800edd4:	e06c      	b.n	800eeb0 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800edd6:	6878      	ldr	r0, [r7, #4]
 800edd8:	f000 f984 	bl	800f0e4 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800eddc:	4b3b      	ldr	r3, [pc, #236]	; (800eecc <tcp_process+0x7d0>)
 800edde:	781b      	ldrb	r3, [r3, #0]
 800ede0:	f003 0310 	and.w	r3, r3, #16
 800ede4:	2b00      	cmp	r3, #0
 800ede6:	d065      	beq.n	800eeb4 <tcp_process+0x7b8>
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800edec:	4b38      	ldr	r3, [pc, #224]	; (800eed0 <tcp_process+0x7d4>)
 800edee:	681b      	ldr	r3, [r3, #0]
 800edf0:	429a      	cmp	r2, r3
 800edf2:	d15f      	bne.n	800eeb4 <tcp_process+0x7b8>
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800edf8:	2b00      	cmp	r3, #0
 800edfa:	d15b      	bne.n	800eeb4 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800edfc:	6878      	ldr	r0, [r7, #4]
 800edfe:	f7fe fcf1 	bl	800d7e4 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800ee02:	4b35      	ldr	r3, [pc, #212]	; (800eed8 <tcp_process+0x7dc>)
 800ee04:	681b      	ldr	r3, [r3, #0]
 800ee06:	687a      	ldr	r2, [r7, #4]
 800ee08:	429a      	cmp	r2, r3
 800ee0a:	d105      	bne.n	800ee18 <tcp_process+0x71c>
 800ee0c:	4b32      	ldr	r3, [pc, #200]	; (800eed8 <tcp_process+0x7dc>)
 800ee0e:	681b      	ldr	r3, [r3, #0]
 800ee10:	68db      	ldr	r3, [r3, #12]
 800ee12:	4a31      	ldr	r2, [pc, #196]	; (800eed8 <tcp_process+0x7dc>)
 800ee14:	6013      	str	r3, [r2, #0]
 800ee16:	e013      	b.n	800ee40 <tcp_process+0x744>
 800ee18:	4b2f      	ldr	r3, [pc, #188]	; (800eed8 <tcp_process+0x7dc>)
 800ee1a:	681b      	ldr	r3, [r3, #0]
 800ee1c:	60fb      	str	r3, [r7, #12]
 800ee1e:	e00c      	b.n	800ee3a <tcp_process+0x73e>
 800ee20:	68fb      	ldr	r3, [r7, #12]
 800ee22:	68db      	ldr	r3, [r3, #12]
 800ee24:	687a      	ldr	r2, [r7, #4]
 800ee26:	429a      	cmp	r2, r3
 800ee28:	d104      	bne.n	800ee34 <tcp_process+0x738>
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	68da      	ldr	r2, [r3, #12]
 800ee2e:	68fb      	ldr	r3, [r7, #12]
 800ee30:	60da      	str	r2, [r3, #12]
 800ee32:	e005      	b.n	800ee40 <tcp_process+0x744>
 800ee34:	68fb      	ldr	r3, [r7, #12]
 800ee36:	68db      	ldr	r3, [r3, #12]
 800ee38:	60fb      	str	r3, [r7, #12]
 800ee3a:	68fb      	ldr	r3, [r7, #12]
 800ee3c:	2b00      	cmp	r3, #0
 800ee3e:	d1ef      	bne.n	800ee20 <tcp_process+0x724>
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	2200      	movs	r2, #0
 800ee44:	60da      	str	r2, [r3, #12]
 800ee46:	4b1f      	ldr	r3, [pc, #124]	; (800eec4 <tcp_process+0x7c8>)
 800ee48:	2201      	movs	r2, #1
 800ee4a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	220a      	movs	r2, #10
 800ee50:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800ee52:	4b1d      	ldr	r3, [pc, #116]	; (800eec8 <tcp_process+0x7cc>)
 800ee54:	681a      	ldr	r2, [r3, #0]
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	60da      	str	r2, [r3, #12]
 800ee5a:	4a1b      	ldr	r2, [pc, #108]	; (800eec8 <tcp_process+0x7cc>)
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	6013      	str	r3, [r2, #0]
 800ee60:	f003 f8a2 	bl	8011fa8 <tcp_timer_needed>
      }
      break;
 800ee64:	e026      	b.n	800eeb4 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800ee66:	6878      	ldr	r0, [r7, #4]
 800ee68:	f000 f93c 	bl	800f0e4 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800ee6c:	4b17      	ldr	r3, [pc, #92]	; (800eecc <tcp_process+0x7d0>)
 800ee6e:	781b      	ldrb	r3, [r3, #0]
 800ee70:	f003 0310 	and.w	r3, r3, #16
 800ee74:	2b00      	cmp	r3, #0
 800ee76:	d01f      	beq.n	800eeb8 <tcp_process+0x7bc>
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ee7c:	4b14      	ldr	r3, [pc, #80]	; (800eed0 <tcp_process+0x7d4>)
 800ee7e:	681b      	ldr	r3, [r3, #0]
 800ee80:	429a      	cmp	r2, r3
 800ee82:	d119      	bne.n	800eeb8 <tcp_process+0x7bc>
 800ee84:	687b      	ldr	r3, [r7, #4]
 800ee86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ee88:	2b00      	cmp	r3, #0
 800ee8a:	d115      	bne.n	800eeb8 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800ee8c:	4b11      	ldr	r3, [pc, #68]	; (800eed4 <tcp_process+0x7d8>)
 800ee8e:	781b      	ldrb	r3, [r3, #0]
 800ee90:	f043 0310 	orr.w	r3, r3, #16
 800ee94:	b2da      	uxtb	r2, r3
 800ee96:	4b0f      	ldr	r3, [pc, #60]	; (800eed4 <tcp_process+0x7d8>)
 800ee98:	701a      	strb	r2, [r3, #0]
      }
      break;
 800ee9a:	e00d      	b.n	800eeb8 <tcp_process+0x7bc>
    default:
      break;
 800ee9c:	bf00      	nop
 800ee9e:	e00c      	b.n	800eeba <tcp_process+0x7be>
      break;
 800eea0:	bf00      	nop
 800eea2:	e00a      	b.n	800eeba <tcp_process+0x7be>
      break;
 800eea4:	bf00      	nop
 800eea6:	e008      	b.n	800eeba <tcp_process+0x7be>
      break;
 800eea8:	bf00      	nop
 800eeaa:	e006      	b.n	800eeba <tcp_process+0x7be>
      break;
 800eeac:	bf00      	nop
 800eeae:	e004      	b.n	800eeba <tcp_process+0x7be>
      break;
 800eeb0:	bf00      	nop
 800eeb2:	e002      	b.n	800eeba <tcp_process+0x7be>
      break;
 800eeb4:	bf00      	nop
 800eeb6:	e000      	b.n	800eeba <tcp_process+0x7be>
      break;
 800eeb8:	bf00      	nop
  }
  return ERR_OK;
 800eeba:	2300      	movs	r3, #0
}
 800eebc:	4618      	mov	r0, r3
 800eebe:	3724      	adds	r7, #36	; 0x24
 800eec0:	46bd      	mov	sp, r7
 800eec2:	bd90      	pop	{r4, r7, pc}
 800eec4:	2001094c 	.word	0x2001094c
 800eec8:	20010948 	.word	0x20010948
 800eecc:	2001097c 	.word	0x2001097c
 800eed0:	20010974 	.word	0x20010974
 800eed4:	2001097d 	.word	0x2001097d
 800eed8:	20010944 	.word	0x20010944

0800eedc <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800eedc:	b590      	push	{r4, r7, lr}
 800eede:	b085      	sub	sp, #20
 800eee0:	af00      	add	r7, sp, #0
 800eee2:	6078      	str	r0, [r7, #4]
 800eee4:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800eee6:	687b      	ldr	r3, [r7, #4]
 800eee8:	2b00      	cmp	r3, #0
 800eeea:	d106      	bne.n	800eefa <tcp_oos_insert_segment+0x1e>
 800eeec:	4b3b      	ldr	r3, [pc, #236]	; (800efdc <tcp_oos_insert_segment+0x100>)
 800eeee:	f240 421f 	movw	r2, #1055	; 0x41f
 800eef2:	493b      	ldr	r1, [pc, #236]	; (800efe0 <tcp_oos_insert_segment+0x104>)
 800eef4:	483b      	ldr	r0, [pc, #236]	; (800efe4 <tcp_oos_insert_segment+0x108>)
 800eef6:	f008 fbcd 	bl	8017694 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800eefa:	687b      	ldr	r3, [r7, #4]
 800eefc:	68db      	ldr	r3, [r3, #12]
 800eefe:	899b      	ldrh	r3, [r3, #12]
 800ef00:	b29b      	uxth	r3, r3
 800ef02:	4618      	mov	r0, r3
 800ef04:	f7fb f922 	bl	800a14c <lwip_htons>
 800ef08:	4603      	mov	r3, r0
 800ef0a:	b2db      	uxtb	r3, r3
 800ef0c:	f003 0301 	and.w	r3, r3, #1
 800ef10:	2b00      	cmp	r3, #0
 800ef12:	d028      	beq.n	800ef66 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800ef14:	6838      	ldr	r0, [r7, #0]
 800ef16:	f7fe f995 	bl	800d244 <tcp_segs_free>
    next = NULL;
 800ef1a:	2300      	movs	r3, #0
 800ef1c:	603b      	str	r3, [r7, #0]
 800ef1e:	e056      	b.n	800efce <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800ef20:	683b      	ldr	r3, [r7, #0]
 800ef22:	68db      	ldr	r3, [r3, #12]
 800ef24:	899b      	ldrh	r3, [r3, #12]
 800ef26:	b29b      	uxth	r3, r3
 800ef28:	4618      	mov	r0, r3
 800ef2a:	f7fb f90f 	bl	800a14c <lwip_htons>
 800ef2e:	4603      	mov	r3, r0
 800ef30:	b2db      	uxtb	r3, r3
 800ef32:	f003 0301 	and.w	r3, r3, #1
 800ef36:	2b00      	cmp	r3, #0
 800ef38:	d00d      	beq.n	800ef56 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800ef3a:	687b      	ldr	r3, [r7, #4]
 800ef3c:	68db      	ldr	r3, [r3, #12]
 800ef3e:	899b      	ldrh	r3, [r3, #12]
 800ef40:	b29c      	uxth	r4, r3
 800ef42:	2001      	movs	r0, #1
 800ef44:	f7fb f902 	bl	800a14c <lwip_htons>
 800ef48:	4603      	mov	r3, r0
 800ef4a:	461a      	mov	r2, r3
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	68db      	ldr	r3, [r3, #12]
 800ef50:	4322      	orrs	r2, r4
 800ef52:	b292      	uxth	r2, r2
 800ef54:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800ef56:	683b      	ldr	r3, [r7, #0]
 800ef58:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800ef5a:	683b      	ldr	r3, [r7, #0]
 800ef5c:	681b      	ldr	r3, [r3, #0]
 800ef5e:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800ef60:	68f8      	ldr	r0, [r7, #12]
 800ef62:	f7fe f984 	bl	800d26e <tcp_seg_free>
    while (next &&
 800ef66:	683b      	ldr	r3, [r7, #0]
 800ef68:	2b00      	cmp	r3, #0
 800ef6a:	d00e      	beq.n	800ef8a <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800ef6c:	687b      	ldr	r3, [r7, #4]
 800ef6e:	891b      	ldrh	r3, [r3, #8]
 800ef70:	461a      	mov	r2, r3
 800ef72:	4b1d      	ldr	r3, [pc, #116]	; (800efe8 <tcp_oos_insert_segment+0x10c>)
 800ef74:	681b      	ldr	r3, [r3, #0]
 800ef76:	441a      	add	r2, r3
 800ef78:	683b      	ldr	r3, [r7, #0]
 800ef7a:	68db      	ldr	r3, [r3, #12]
 800ef7c:	685b      	ldr	r3, [r3, #4]
 800ef7e:	6839      	ldr	r1, [r7, #0]
 800ef80:	8909      	ldrh	r1, [r1, #8]
 800ef82:	440b      	add	r3, r1
 800ef84:	1ad3      	subs	r3, r2, r3
    while (next &&
 800ef86:	2b00      	cmp	r3, #0
 800ef88:	daca      	bge.n	800ef20 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800ef8a:	683b      	ldr	r3, [r7, #0]
 800ef8c:	2b00      	cmp	r3, #0
 800ef8e:	d01e      	beq.n	800efce <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	891b      	ldrh	r3, [r3, #8]
 800ef94:	461a      	mov	r2, r3
 800ef96:	4b14      	ldr	r3, [pc, #80]	; (800efe8 <tcp_oos_insert_segment+0x10c>)
 800ef98:	681b      	ldr	r3, [r3, #0]
 800ef9a:	441a      	add	r2, r3
 800ef9c:	683b      	ldr	r3, [r7, #0]
 800ef9e:	68db      	ldr	r3, [r3, #12]
 800efa0:	685b      	ldr	r3, [r3, #4]
 800efa2:	1ad3      	subs	r3, r2, r3
    if (next &&
 800efa4:	2b00      	cmp	r3, #0
 800efa6:	dd12      	ble.n	800efce <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800efa8:	683b      	ldr	r3, [r7, #0]
 800efaa:	68db      	ldr	r3, [r3, #12]
 800efac:	685b      	ldr	r3, [r3, #4]
 800efae:	b29a      	uxth	r2, r3
 800efb0:	4b0d      	ldr	r3, [pc, #52]	; (800efe8 <tcp_oos_insert_segment+0x10c>)
 800efb2:	681b      	ldr	r3, [r3, #0]
 800efb4:	b29b      	uxth	r3, r3
 800efb6:	1ad3      	subs	r3, r2, r3
 800efb8:	b29a      	uxth	r2, r3
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	685a      	ldr	r2, [r3, #4]
 800efc2:	687b      	ldr	r3, [r7, #4]
 800efc4:	891b      	ldrh	r3, [r3, #8]
 800efc6:	4619      	mov	r1, r3
 800efc8:	4610      	mov	r0, r2
 800efca:	f7fc fb37 	bl	800b63c <pbuf_realloc>
    }
  }
  cseg->next = next;
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	683a      	ldr	r2, [r7, #0]
 800efd2:	601a      	str	r2, [r3, #0]
}
 800efd4:	bf00      	nop
 800efd6:	3714      	adds	r7, #20
 800efd8:	46bd      	mov	sp, r7
 800efda:	bd90      	pop	{r4, r7, pc}
 800efdc:	0801a304 	.word	0x0801a304
 800efe0:	0801a5c4 	.word	0x0801a5c4
 800efe4:	0801a350 	.word	0x0801a350
 800efe8:	20010970 	.word	0x20010970

0800efec <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800efec:	b5b0      	push	{r4, r5, r7, lr}
 800efee:	b086      	sub	sp, #24
 800eff0:	af00      	add	r7, sp, #0
 800eff2:	60f8      	str	r0, [r7, #12]
 800eff4:	60b9      	str	r1, [r7, #8]
 800eff6:	607a      	str	r2, [r7, #4]
 800eff8:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800effa:	e03e      	b.n	800f07a <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800effc:	68bb      	ldr	r3, [r7, #8]
 800effe:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800f000:	68bb      	ldr	r3, [r7, #8]
 800f002:	681b      	ldr	r3, [r3, #0]
 800f004:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800f006:	697b      	ldr	r3, [r7, #20]
 800f008:	685b      	ldr	r3, [r3, #4]
 800f00a:	4618      	mov	r0, r3
 800f00c:	f7fc fd2a 	bl	800ba64 <pbuf_clen>
 800f010:	4603      	mov	r3, r0
 800f012:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800f014:	68fb      	ldr	r3, [r7, #12]
 800f016:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f01a:	8a7a      	ldrh	r2, [r7, #18]
 800f01c:	429a      	cmp	r2, r3
 800f01e:	d906      	bls.n	800f02e <tcp_free_acked_segments+0x42>
 800f020:	4b2a      	ldr	r3, [pc, #168]	; (800f0cc <tcp_free_acked_segments+0xe0>)
 800f022:	f240 4257 	movw	r2, #1111	; 0x457
 800f026:	492a      	ldr	r1, [pc, #168]	; (800f0d0 <tcp_free_acked_segments+0xe4>)
 800f028:	482a      	ldr	r0, [pc, #168]	; (800f0d4 <tcp_free_acked_segments+0xe8>)
 800f02a:	f008 fb33 	bl	8017694 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800f02e:	68fb      	ldr	r3, [r7, #12]
 800f030:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800f034:	8a7b      	ldrh	r3, [r7, #18]
 800f036:	1ad3      	subs	r3, r2, r3
 800f038:	b29a      	uxth	r2, r3
 800f03a:	68fb      	ldr	r3, [r7, #12]
 800f03c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800f040:	697b      	ldr	r3, [r7, #20]
 800f042:	891a      	ldrh	r2, [r3, #8]
 800f044:	4b24      	ldr	r3, [pc, #144]	; (800f0d8 <tcp_free_acked_segments+0xec>)
 800f046:	881b      	ldrh	r3, [r3, #0]
 800f048:	4413      	add	r3, r2
 800f04a:	b29a      	uxth	r2, r3
 800f04c:	4b22      	ldr	r3, [pc, #136]	; (800f0d8 <tcp_free_acked_segments+0xec>)
 800f04e:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800f050:	6978      	ldr	r0, [r7, #20]
 800f052:	f7fe f90c 	bl	800d26e <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800f056:	68fb      	ldr	r3, [r7, #12]
 800f058:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f05c:	2b00      	cmp	r3, #0
 800f05e:	d00c      	beq.n	800f07a <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800f060:	68bb      	ldr	r3, [r7, #8]
 800f062:	2b00      	cmp	r3, #0
 800f064:	d109      	bne.n	800f07a <tcp_free_acked_segments+0x8e>
 800f066:	683b      	ldr	r3, [r7, #0]
 800f068:	2b00      	cmp	r3, #0
 800f06a:	d106      	bne.n	800f07a <tcp_free_acked_segments+0x8e>
 800f06c:	4b17      	ldr	r3, [pc, #92]	; (800f0cc <tcp_free_acked_segments+0xe0>)
 800f06e:	f240 4261 	movw	r2, #1121	; 0x461
 800f072:	491a      	ldr	r1, [pc, #104]	; (800f0dc <tcp_free_acked_segments+0xf0>)
 800f074:	4817      	ldr	r0, [pc, #92]	; (800f0d4 <tcp_free_acked_segments+0xe8>)
 800f076:	f008 fb0d 	bl	8017694 <iprintf>
  while (seg_list != NULL &&
 800f07a:	68bb      	ldr	r3, [r7, #8]
 800f07c:	2b00      	cmp	r3, #0
 800f07e:	d020      	beq.n	800f0c2 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800f080:	68bb      	ldr	r3, [r7, #8]
 800f082:	68db      	ldr	r3, [r3, #12]
 800f084:	685b      	ldr	r3, [r3, #4]
 800f086:	4618      	mov	r0, r3
 800f088:	f7fb f875 	bl	800a176 <lwip_htonl>
 800f08c:	4604      	mov	r4, r0
 800f08e:	68bb      	ldr	r3, [r7, #8]
 800f090:	891b      	ldrh	r3, [r3, #8]
 800f092:	461d      	mov	r5, r3
 800f094:	68bb      	ldr	r3, [r7, #8]
 800f096:	68db      	ldr	r3, [r3, #12]
 800f098:	899b      	ldrh	r3, [r3, #12]
 800f09a:	b29b      	uxth	r3, r3
 800f09c:	4618      	mov	r0, r3
 800f09e:	f7fb f855 	bl	800a14c <lwip_htons>
 800f0a2:	4603      	mov	r3, r0
 800f0a4:	b2db      	uxtb	r3, r3
 800f0a6:	f003 0303 	and.w	r3, r3, #3
 800f0aa:	2b00      	cmp	r3, #0
 800f0ac:	d001      	beq.n	800f0b2 <tcp_free_acked_segments+0xc6>
 800f0ae:	2301      	movs	r3, #1
 800f0b0:	e000      	b.n	800f0b4 <tcp_free_acked_segments+0xc8>
 800f0b2:	2300      	movs	r3, #0
 800f0b4:	442b      	add	r3, r5
 800f0b6:	18e2      	adds	r2, r4, r3
 800f0b8:	4b09      	ldr	r3, [pc, #36]	; (800f0e0 <tcp_free_acked_segments+0xf4>)
 800f0ba:	681b      	ldr	r3, [r3, #0]
 800f0bc:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800f0be:	2b00      	cmp	r3, #0
 800f0c0:	dd9c      	ble.n	800effc <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800f0c2:	68bb      	ldr	r3, [r7, #8]
}
 800f0c4:	4618      	mov	r0, r3
 800f0c6:	3718      	adds	r7, #24
 800f0c8:	46bd      	mov	sp, r7
 800f0ca:	bdb0      	pop	{r4, r5, r7, pc}
 800f0cc:	0801a304 	.word	0x0801a304
 800f0d0:	0801a5ec 	.word	0x0801a5ec
 800f0d4:	0801a350 	.word	0x0801a350
 800f0d8:	20010978 	.word	0x20010978
 800f0dc:	0801a614 	.word	0x0801a614
 800f0e0:	20010974 	.word	0x20010974

0800f0e4 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800f0e4:	b5b0      	push	{r4, r5, r7, lr}
 800f0e6:	b094      	sub	sp, #80	; 0x50
 800f0e8:	af00      	add	r7, sp, #0
 800f0ea:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800f0ec:	2300      	movs	r3, #0
 800f0ee:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	2b00      	cmp	r3, #0
 800f0f4:	d106      	bne.n	800f104 <tcp_receive+0x20>
 800f0f6:	4b91      	ldr	r3, [pc, #580]	; (800f33c <tcp_receive+0x258>)
 800f0f8:	f240 427b 	movw	r2, #1147	; 0x47b
 800f0fc:	4990      	ldr	r1, [pc, #576]	; (800f340 <tcp_receive+0x25c>)
 800f0fe:	4891      	ldr	r0, [pc, #580]	; (800f344 <tcp_receive+0x260>)
 800f100:	f008 fac8 	bl	8017694 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	7d1b      	ldrb	r3, [r3, #20]
 800f108:	2b03      	cmp	r3, #3
 800f10a:	d806      	bhi.n	800f11a <tcp_receive+0x36>
 800f10c:	4b8b      	ldr	r3, [pc, #556]	; (800f33c <tcp_receive+0x258>)
 800f10e:	f240 427c 	movw	r2, #1148	; 0x47c
 800f112:	498d      	ldr	r1, [pc, #564]	; (800f348 <tcp_receive+0x264>)
 800f114:	488b      	ldr	r0, [pc, #556]	; (800f344 <tcp_receive+0x260>)
 800f116:	f008 fabd 	bl	8017694 <iprintf>

  if (flags & TCP_ACK) {
 800f11a:	4b8c      	ldr	r3, [pc, #560]	; (800f34c <tcp_receive+0x268>)
 800f11c:	781b      	ldrb	r3, [r3, #0]
 800f11e:	f003 0310 	and.w	r3, r3, #16
 800f122:	2b00      	cmp	r3, #0
 800f124:	f000 8264 	beq.w	800f5f0 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800f128:	687b      	ldr	r3, [r7, #4]
 800f12a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f12e:	461a      	mov	r2, r3
 800f130:	687b      	ldr	r3, [r7, #4]
 800f132:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f134:	4413      	add	r3, r2
 800f136:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800f138:	687b      	ldr	r3, [r7, #4]
 800f13a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f13c:	4b84      	ldr	r3, [pc, #528]	; (800f350 <tcp_receive+0x26c>)
 800f13e:	681b      	ldr	r3, [r3, #0]
 800f140:	1ad3      	subs	r3, r2, r3
 800f142:	2b00      	cmp	r3, #0
 800f144:	db1b      	blt.n	800f17e <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800f146:	687b      	ldr	r3, [r7, #4]
 800f148:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f14a:	4b81      	ldr	r3, [pc, #516]	; (800f350 <tcp_receive+0x26c>)
 800f14c:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800f14e:	429a      	cmp	r2, r3
 800f150:	d106      	bne.n	800f160 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800f152:	687b      	ldr	r3, [r7, #4]
 800f154:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800f156:	4b7f      	ldr	r3, [pc, #508]	; (800f354 <tcp_receive+0x270>)
 800f158:	681b      	ldr	r3, [r3, #0]
 800f15a:	1ad3      	subs	r3, r2, r3
 800f15c:	2b00      	cmp	r3, #0
 800f15e:	db0e      	blt.n	800f17e <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800f164:	4b7b      	ldr	r3, [pc, #492]	; (800f354 <tcp_receive+0x270>)
 800f166:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800f168:	429a      	cmp	r2, r3
 800f16a:	d125      	bne.n	800f1b8 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800f16c:	4b7a      	ldr	r3, [pc, #488]	; (800f358 <tcp_receive+0x274>)
 800f16e:	681b      	ldr	r3, [r3, #0]
 800f170:	89db      	ldrh	r3, [r3, #14]
 800f172:	b29a      	uxth	r2, r3
 800f174:	687b      	ldr	r3, [r7, #4]
 800f176:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f17a:	429a      	cmp	r2, r3
 800f17c:	d91c      	bls.n	800f1b8 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800f17e:	4b76      	ldr	r3, [pc, #472]	; (800f358 <tcp_receive+0x274>)
 800f180:	681b      	ldr	r3, [r3, #0]
 800f182:	89db      	ldrh	r3, [r3, #14]
 800f184:	b29a      	uxth	r2, r3
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800f192:	687b      	ldr	r3, [r7, #4]
 800f194:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f198:	429a      	cmp	r2, r3
 800f19a:	d205      	bcs.n	800f1a8 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800f19c:	687b      	ldr	r3, [r7, #4]
 800f19e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800f1a8:	4b69      	ldr	r3, [pc, #420]	; (800f350 <tcp_receive+0x26c>)
 800f1aa:	681a      	ldr	r2, [r3, #0]
 800f1ac:	687b      	ldr	r3, [r7, #4]
 800f1ae:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800f1b0:	4b68      	ldr	r3, [pc, #416]	; (800f354 <tcp_receive+0x270>)
 800f1b2:	681a      	ldr	r2, [r3, #0]
 800f1b4:	687b      	ldr	r3, [r7, #4]
 800f1b6:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800f1b8:	4b66      	ldr	r3, [pc, #408]	; (800f354 <tcp_receive+0x270>)
 800f1ba:	681a      	ldr	r2, [r3, #0]
 800f1bc:	687b      	ldr	r3, [r7, #4]
 800f1be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f1c0:	1ad3      	subs	r3, r2, r3
 800f1c2:	2b00      	cmp	r3, #0
 800f1c4:	dc58      	bgt.n	800f278 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800f1c6:	4b65      	ldr	r3, [pc, #404]	; (800f35c <tcp_receive+0x278>)
 800f1c8:	881b      	ldrh	r3, [r3, #0]
 800f1ca:	2b00      	cmp	r3, #0
 800f1cc:	d14b      	bne.n	800f266 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800f1ce:	687b      	ldr	r3, [r7, #4]
 800f1d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f1d2:	687a      	ldr	r2, [r7, #4]
 800f1d4:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800f1d8:	4413      	add	r3, r2
 800f1da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f1dc:	429a      	cmp	r2, r3
 800f1de:	d142      	bne.n	800f266 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800f1e6:	2b00      	cmp	r3, #0
 800f1e8:	db3d      	blt.n	800f266 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800f1ea:	687b      	ldr	r3, [r7, #4]
 800f1ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f1ee:	4b59      	ldr	r3, [pc, #356]	; (800f354 <tcp_receive+0x270>)
 800f1f0:	681b      	ldr	r3, [r3, #0]
 800f1f2:	429a      	cmp	r2, r3
 800f1f4:	d137      	bne.n	800f266 <tcp_receive+0x182>
              found_dupack = 1;
 800f1f6:	2301      	movs	r3, #1
 800f1f8:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800f1fa:	687b      	ldr	r3, [r7, #4]
 800f1fc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f200:	2bff      	cmp	r3, #255	; 0xff
 800f202:	d007      	beq.n	800f214 <tcp_receive+0x130>
                ++pcb->dupacks;
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f20a:	3301      	adds	r3, #1
 800f20c:	b2da      	uxtb	r2, r3
 800f20e:	687b      	ldr	r3, [r7, #4]
 800f210:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f21a:	2b03      	cmp	r3, #3
 800f21c:	d91b      	bls.n	800f256 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800f21e:	687b      	ldr	r3, [r7, #4]
 800f220:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f224:	687b      	ldr	r3, [r7, #4]
 800f226:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f228:	4413      	add	r3, r2
 800f22a:	b29a      	uxth	r2, r3
 800f22c:	687b      	ldr	r3, [r7, #4]
 800f22e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f232:	429a      	cmp	r2, r3
 800f234:	d30a      	bcc.n	800f24c <tcp_receive+0x168>
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f240:	4413      	add	r3, r2
 800f242:	b29a      	uxth	r2, r3
 800f244:	687b      	ldr	r3, [r7, #4]
 800f246:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800f24a:	e004      	b.n	800f256 <tcp_receive+0x172>
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f252:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f25c:	2b02      	cmp	r3, #2
 800f25e:	d902      	bls.n	800f266 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800f260:	6878      	ldr	r0, [r7, #4]
 800f262:	f002 fb43 	bl	80118ec <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800f266:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f268:	2b00      	cmp	r3, #0
 800f26a:	f040 8161 	bne.w	800f530 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	2200      	movs	r2, #0
 800f272:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800f276:	e15b      	b.n	800f530 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f278:	4b36      	ldr	r3, [pc, #216]	; (800f354 <tcp_receive+0x270>)
 800f27a:	681a      	ldr	r2, [r3, #0]
 800f27c:	687b      	ldr	r3, [r7, #4]
 800f27e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f280:	1ad3      	subs	r3, r2, r3
 800f282:	3b01      	subs	r3, #1
 800f284:	2b00      	cmp	r3, #0
 800f286:	f2c0 814e 	blt.w	800f526 <tcp_receive+0x442>
 800f28a:	4b32      	ldr	r3, [pc, #200]	; (800f354 <tcp_receive+0x270>)
 800f28c:	681a      	ldr	r2, [r3, #0]
 800f28e:	687b      	ldr	r3, [r7, #4]
 800f290:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f292:	1ad3      	subs	r3, r2, r3
 800f294:	2b00      	cmp	r3, #0
 800f296:	f300 8146 	bgt.w	800f526 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800f29a:	687b      	ldr	r3, [r7, #4]
 800f29c:	8b5b      	ldrh	r3, [r3, #26]
 800f29e:	f003 0304 	and.w	r3, r3, #4
 800f2a2:	2b00      	cmp	r3, #0
 800f2a4:	d010      	beq.n	800f2c8 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800f2a6:	687b      	ldr	r3, [r7, #4]
 800f2a8:	8b5b      	ldrh	r3, [r3, #26]
 800f2aa:	f023 0304 	bic.w	r3, r3, #4
 800f2ae:	b29a      	uxth	r2, r3
 800f2b0:	687b      	ldr	r3, [r7, #4]
 800f2b2:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800f2b4:	687b      	ldr	r3, [r7, #4]
 800f2b6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800f2ba:	687b      	ldr	r3, [r7, #4]
 800f2bc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800f2c0:	687b      	ldr	r3, [r7, #4]
 800f2c2:	2200      	movs	r2, #0
 800f2c4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800f2c8:	687b      	ldr	r3, [r7, #4]
 800f2ca:	2200      	movs	r2, #0
 800f2cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800f2d0:	687b      	ldr	r3, [r7, #4]
 800f2d2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f2d6:	10db      	asrs	r3, r3, #3
 800f2d8:	b21b      	sxth	r3, r3
 800f2da:	b29a      	uxth	r2, r3
 800f2dc:	687b      	ldr	r3, [r7, #4]
 800f2de:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800f2e2:	b29b      	uxth	r3, r3
 800f2e4:	4413      	add	r3, r2
 800f2e6:	b29b      	uxth	r3, r3
 800f2e8:	b21a      	sxth	r2, r3
 800f2ea:	687b      	ldr	r3, [r7, #4]
 800f2ec:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800f2f0:	4b18      	ldr	r3, [pc, #96]	; (800f354 <tcp_receive+0x270>)
 800f2f2:	681b      	ldr	r3, [r3, #0]
 800f2f4:	b29a      	uxth	r2, r3
 800f2f6:	687b      	ldr	r3, [r7, #4]
 800f2f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f2fa:	b29b      	uxth	r3, r3
 800f2fc:	1ad3      	subs	r3, r2, r3
 800f2fe:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800f300:	687b      	ldr	r3, [r7, #4]
 800f302:	2200      	movs	r2, #0
 800f304:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800f308:	4b12      	ldr	r3, [pc, #72]	; (800f354 <tcp_receive+0x270>)
 800f30a:	681a      	ldr	r2, [r3, #0]
 800f30c:	687b      	ldr	r3, [r7, #4]
 800f30e:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800f310:	687b      	ldr	r3, [r7, #4]
 800f312:	7d1b      	ldrb	r3, [r3, #20]
 800f314:	2b03      	cmp	r3, #3
 800f316:	f240 8097 	bls.w	800f448 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 800f31a:	687b      	ldr	r3, [r7, #4]
 800f31c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800f326:	429a      	cmp	r2, r3
 800f328:	d245      	bcs.n	800f3b6 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800f32a:	687b      	ldr	r3, [r7, #4]
 800f32c:	8b5b      	ldrh	r3, [r3, #26]
 800f32e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f332:	2b00      	cmp	r3, #0
 800f334:	d014      	beq.n	800f360 <tcp_receive+0x27c>
 800f336:	2301      	movs	r3, #1
 800f338:	e013      	b.n	800f362 <tcp_receive+0x27e>
 800f33a:	bf00      	nop
 800f33c:	0801a304 	.word	0x0801a304
 800f340:	0801a634 	.word	0x0801a634
 800f344:	0801a350 	.word	0x0801a350
 800f348:	0801a650 	.word	0x0801a650
 800f34c:	2001097c 	.word	0x2001097c
 800f350:	20010970 	.word	0x20010970
 800f354:	20010974 	.word	0x20010974
 800f358:	20010960 	.word	0x20010960
 800f35c:	2001097a 	.word	0x2001097a
 800f360:	2302      	movs	r3, #2
 800f362:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800f366:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800f36a:	b29a      	uxth	r2, r3
 800f36c:	687b      	ldr	r3, [r7, #4]
 800f36e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f370:	fb12 f303 	smulbb	r3, r2, r3
 800f374:	b29b      	uxth	r3, r3
 800f376:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800f378:	4293      	cmp	r3, r2
 800f37a:	bf28      	it	cs
 800f37c:	4613      	movcs	r3, r2
 800f37e:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f386:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800f388:	4413      	add	r3, r2
 800f38a:	b29a      	uxth	r2, r3
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f392:	429a      	cmp	r2, r3
 800f394:	d309      	bcc.n	800f3aa <tcp_receive+0x2c6>
 800f396:	687b      	ldr	r3, [r7, #4]
 800f398:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f39c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800f39e:	4413      	add	r3, r2
 800f3a0:	b29a      	uxth	r2, r3
 800f3a2:	687b      	ldr	r3, [r7, #4]
 800f3a4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800f3a8:	e04e      	b.n	800f448 <tcp_receive+0x364>
 800f3aa:	687b      	ldr	r3, [r7, #4]
 800f3ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f3b0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800f3b4:	e048      	b.n	800f448 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800f3bc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f3be:	4413      	add	r3, r2
 800f3c0:	b29a      	uxth	r2, r3
 800f3c2:	687b      	ldr	r3, [r7, #4]
 800f3c4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f3c8:	429a      	cmp	r2, r3
 800f3ca:	d309      	bcc.n	800f3e0 <tcp_receive+0x2fc>
 800f3cc:	687b      	ldr	r3, [r7, #4]
 800f3ce:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800f3d2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f3d4:	4413      	add	r3, r2
 800f3d6:	b29a      	uxth	r2, r3
 800f3d8:	687b      	ldr	r3, [r7, #4]
 800f3da:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800f3de:	e004      	b.n	800f3ea <tcp_receive+0x306>
 800f3e0:	687b      	ldr	r3, [r7, #4]
 800f3e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f3e6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800f3ea:	687b      	ldr	r3, [r7, #4]
 800f3ec:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800f3f0:	687b      	ldr	r3, [r7, #4]
 800f3f2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f3f6:	429a      	cmp	r2, r3
 800f3f8:	d326      	bcc.n	800f448 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800f3fa:	687b      	ldr	r3, [r7, #4]
 800f3fc:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800f400:	687b      	ldr	r3, [r7, #4]
 800f402:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f406:	1ad3      	subs	r3, r2, r3
 800f408:	b29a      	uxth	r2, r3
 800f40a:	687b      	ldr	r3, [r7, #4]
 800f40c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800f410:	687b      	ldr	r3, [r7, #4]
 800f412:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f416:	687b      	ldr	r3, [r7, #4]
 800f418:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f41a:	4413      	add	r3, r2
 800f41c:	b29a      	uxth	r2, r3
 800f41e:	687b      	ldr	r3, [r7, #4]
 800f420:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f424:	429a      	cmp	r2, r3
 800f426:	d30a      	bcc.n	800f43e <tcp_receive+0x35a>
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f42e:	687b      	ldr	r3, [r7, #4]
 800f430:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f432:	4413      	add	r3, r2
 800f434:	b29a      	uxth	r2, r3
 800f436:	687b      	ldr	r3, [r7, #4]
 800f438:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800f43c:	e004      	b.n	800f448 <tcp_receive+0x364>
 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f444:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800f448:	687b      	ldr	r3, [r7, #4]
 800f44a:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800f44c:	687b      	ldr	r3, [r7, #4]
 800f44e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f450:	4a98      	ldr	r2, [pc, #608]	; (800f6b4 <tcp_receive+0x5d0>)
 800f452:	6878      	ldr	r0, [r7, #4]
 800f454:	f7ff fdca 	bl	800efec <tcp_free_acked_segments>
 800f458:	4602      	mov	r2, r0
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800f45e:	687b      	ldr	r3, [r7, #4]
 800f460:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800f462:	687b      	ldr	r3, [r7, #4]
 800f464:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f466:	4a94      	ldr	r2, [pc, #592]	; (800f6b8 <tcp_receive+0x5d4>)
 800f468:	6878      	ldr	r0, [r7, #4]
 800f46a:	f7ff fdbf 	bl	800efec <tcp_free_acked_segments>
 800f46e:	4602      	mov	r2, r0
 800f470:	687b      	ldr	r3, [r7, #4]
 800f472:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800f474:	687b      	ldr	r3, [r7, #4]
 800f476:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f478:	2b00      	cmp	r3, #0
 800f47a:	d104      	bne.n	800f486 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 800f47c:	687b      	ldr	r3, [r7, #4]
 800f47e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f482:	861a      	strh	r2, [r3, #48]	; 0x30
 800f484:	e002      	b.n	800f48c <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 800f486:	687b      	ldr	r3, [r7, #4]
 800f488:	2200      	movs	r2, #0
 800f48a:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800f48c:	687b      	ldr	r3, [r7, #4]
 800f48e:	2200      	movs	r2, #0
 800f490:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800f492:	687b      	ldr	r3, [r7, #4]
 800f494:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f496:	2b00      	cmp	r3, #0
 800f498:	d103      	bne.n	800f4a2 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 800f49a:	687b      	ldr	r3, [r7, #4]
 800f49c:	2200      	movs	r2, #0
 800f49e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800f4a2:	687b      	ldr	r3, [r7, #4]
 800f4a4:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800f4a8:	4b84      	ldr	r3, [pc, #528]	; (800f6bc <tcp_receive+0x5d8>)
 800f4aa:	881b      	ldrh	r3, [r3, #0]
 800f4ac:	4413      	add	r3, r2
 800f4ae:	b29a      	uxth	r2, r3
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800f4b6:	687b      	ldr	r3, [r7, #4]
 800f4b8:	8b5b      	ldrh	r3, [r3, #26]
 800f4ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f4be:	2b00      	cmp	r3, #0
 800f4c0:	d035      	beq.n	800f52e <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800f4c2:	687b      	ldr	r3, [r7, #4]
 800f4c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f4c6:	2b00      	cmp	r3, #0
 800f4c8:	d118      	bne.n	800f4fc <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 800f4ca:	687b      	ldr	r3, [r7, #4]
 800f4cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f4ce:	2b00      	cmp	r3, #0
 800f4d0:	d00c      	beq.n	800f4ec <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800f4d2:	687b      	ldr	r3, [r7, #4]
 800f4d4:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800f4d6:	687b      	ldr	r3, [r7, #4]
 800f4d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f4da:	68db      	ldr	r3, [r3, #12]
 800f4dc:	685b      	ldr	r3, [r3, #4]
 800f4de:	4618      	mov	r0, r3
 800f4e0:	f7fa fe49 	bl	800a176 <lwip_htonl>
 800f4e4:	4603      	mov	r3, r0
 800f4e6:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800f4e8:	2b00      	cmp	r3, #0
 800f4ea:	dc20      	bgt.n	800f52e <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 800f4ec:	687b      	ldr	r3, [r7, #4]
 800f4ee:	8b5b      	ldrh	r3, [r3, #26]
 800f4f0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f4f4:	b29a      	uxth	r2, r3
 800f4f6:	687b      	ldr	r3, [r7, #4]
 800f4f8:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f4fa:	e018      	b.n	800f52e <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800f4fc:	687b      	ldr	r3, [r7, #4]
 800f4fe:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f504:	68db      	ldr	r3, [r3, #12]
 800f506:	685b      	ldr	r3, [r3, #4]
 800f508:	4618      	mov	r0, r3
 800f50a:	f7fa fe34 	bl	800a176 <lwip_htonl>
 800f50e:	4603      	mov	r3, r0
 800f510:	1ae3      	subs	r3, r4, r3
 800f512:	2b00      	cmp	r3, #0
 800f514:	dc0b      	bgt.n	800f52e <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 800f516:	687b      	ldr	r3, [r7, #4]
 800f518:	8b5b      	ldrh	r3, [r3, #26]
 800f51a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f51e:	b29a      	uxth	r2, r3
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f524:	e003      	b.n	800f52e <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800f526:	6878      	ldr	r0, [r7, #4]
 800f528:	f002 fbce 	bl	8011cc8 <tcp_send_empty_ack>
 800f52c:	e000      	b.n	800f530 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f52e:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800f530:	687b      	ldr	r3, [r7, #4]
 800f532:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f534:	2b00      	cmp	r3, #0
 800f536:	d05b      	beq.n	800f5f0 <tcp_receive+0x50c>
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f53c:	4b60      	ldr	r3, [pc, #384]	; (800f6c0 <tcp_receive+0x5dc>)
 800f53e:	681b      	ldr	r3, [r3, #0]
 800f540:	1ad3      	subs	r3, r2, r3
 800f542:	2b00      	cmp	r3, #0
 800f544:	da54      	bge.n	800f5f0 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800f546:	4b5f      	ldr	r3, [pc, #380]	; (800f6c4 <tcp_receive+0x5e0>)
 800f548:	681b      	ldr	r3, [r3, #0]
 800f54a:	b29a      	uxth	r2, r3
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f550:	b29b      	uxth	r3, r3
 800f552:	1ad3      	subs	r3, r2, r3
 800f554:	b29b      	uxth	r3, r3
 800f556:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800f55a:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800f55e:	687b      	ldr	r3, [r7, #4]
 800f560:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f564:	10db      	asrs	r3, r3, #3
 800f566:	b21b      	sxth	r3, r3
 800f568:	b29b      	uxth	r3, r3
 800f56a:	1ad3      	subs	r3, r2, r3
 800f56c:	b29b      	uxth	r3, r3
 800f56e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800f572:	687b      	ldr	r3, [r7, #4]
 800f574:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f578:	b29a      	uxth	r2, r3
 800f57a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800f57e:	4413      	add	r3, r2
 800f580:	b29b      	uxth	r3, r3
 800f582:	b21a      	sxth	r2, r3
 800f584:	687b      	ldr	r3, [r7, #4]
 800f586:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800f588:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800f58c:	2b00      	cmp	r3, #0
 800f58e:	da05      	bge.n	800f59c <tcp_receive+0x4b8>
        m = (s16_t) - m;
 800f590:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800f594:	425b      	negs	r3, r3
 800f596:	b29b      	uxth	r3, r3
 800f598:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800f59c:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800f5a6:	109b      	asrs	r3, r3, #2
 800f5a8:	b21b      	sxth	r3, r3
 800f5aa:	b29b      	uxth	r3, r3
 800f5ac:	1ad3      	subs	r3, r2, r3
 800f5ae:	b29b      	uxth	r3, r3
 800f5b0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800f5b4:	687b      	ldr	r3, [r7, #4]
 800f5b6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800f5ba:	b29a      	uxth	r2, r3
 800f5bc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800f5c0:	4413      	add	r3, r2
 800f5c2:	b29b      	uxth	r3, r3
 800f5c4:	b21a      	sxth	r2, r3
 800f5c6:	687b      	ldr	r3, [r7, #4]
 800f5c8:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800f5ca:	687b      	ldr	r3, [r7, #4]
 800f5cc:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f5d0:	10db      	asrs	r3, r3, #3
 800f5d2:	b21b      	sxth	r3, r3
 800f5d4:	b29a      	uxth	r2, r3
 800f5d6:	687b      	ldr	r3, [r7, #4]
 800f5d8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800f5dc:	b29b      	uxth	r3, r3
 800f5de:	4413      	add	r3, r2
 800f5e0:	b29b      	uxth	r3, r3
 800f5e2:	b21a      	sxth	r2, r3
 800f5e4:	687b      	ldr	r3, [r7, #4]
 800f5e6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800f5ea:	687b      	ldr	r3, [r7, #4]
 800f5ec:	2200      	movs	r2, #0
 800f5ee:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800f5f0:	4b35      	ldr	r3, [pc, #212]	; (800f6c8 <tcp_receive+0x5e4>)
 800f5f2:	881b      	ldrh	r3, [r3, #0]
 800f5f4:	2b00      	cmp	r3, #0
 800f5f6:	f000 84e2 	beq.w	800ffbe <tcp_receive+0xeda>
 800f5fa:	687b      	ldr	r3, [r7, #4]
 800f5fc:	7d1b      	ldrb	r3, [r3, #20]
 800f5fe:	2b06      	cmp	r3, #6
 800f600:	f200 84dd 	bhi.w	800ffbe <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800f604:	687b      	ldr	r3, [r7, #4]
 800f606:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f608:	4b30      	ldr	r3, [pc, #192]	; (800f6cc <tcp_receive+0x5e8>)
 800f60a:	681b      	ldr	r3, [r3, #0]
 800f60c:	1ad3      	subs	r3, r2, r3
 800f60e:	3b01      	subs	r3, #1
 800f610:	2b00      	cmp	r3, #0
 800f612:	f2c0 808f 	blt.w	800f734 <tcp_receive+0x650>
 800f616:	687b      	ldr	r3, [r7, #4]
 800f618:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f61a:	4b2b      	ldr	r3, [pc, #172]	; (800f6c8 <tcp_receive+0x5e4>)
 800f61c:	881b      	ldrh	r3, [r3, #0]
 800f61e:	4619      	mov	r1, r3
 800f620:	4b2a      	ldr	r3, [pc, #168]	; (800f6cc <tcp_receive+0x5e8>)
 800f622:	681b      	ldr	r3, [r3, #0]
 800f624:	440b      	add	r3, r1
 800f626:	1ad3      	subs	r3, r2, r3
 800f628:	3301      	adds	r3, #1
 800f62a:	2b00      	cmp	r3, #0
 800f62c:	f300 8082 	bgt.w	800f734 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800f630:	4b27      	ldr	r3, [pc, #156]	; (800f6d0 <tcp_receive+0x5ec>)
 800f632:	685b      	ldr	r3, [r3, #4]
 800f634:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800f636:	687b      	ldr	r3, [r7, #4]
 800f638:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f63a:	4b24      	ldr	r3, [pc, #144]	; (800f6cc <tcp_receive+0x5e8>)
 800f63c:	681b      	ldr	r3, [r3, #0]
 800f63e:	1ad3      	subs	r3, r2, r3
 800f640:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800f642:	4b23      	ldr	r3, [pc, #140]	; (800f6d0 <tcp_receive+0x5ec>)
 800f644:	685b      	ldr	r3, [r3, #4]
 800f646:	2b00      	cmp	r3, #0
 800f648:	d106      	bne.n	800f658 <tcp_receive+0x574>
 800f64a:	4b22      	ldr	r3, [pc, #136]	; (800f6d4 <tcp_receive+0x5f0>)
 800f64c:	f240 5294 	movw	r2, #1428	; 0x594
 800f650:	4921      	ldr	r1, [pc, #132]	; (800f6d8 <tcp_receive+0x5f4>)
 800f652:	4822      	ldr	r0, [pc, #136]	; (800f6dc <tcp_receive+0x5f8>)
 800f654:	f008 f81e 	bl	8017694 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800f658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f65a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800f65e:	4293      	cmp	r3, r2
 800f660:	d906      	bls.n	800f670 <tcp_receive+0x58c>
 800f662:	4b1c      	ldr	r3, [pc, #112]	; (800f6d4 <tcp_receive+0x5f0>)
 800f664:	f240 5295 	movw	r2, #1429	; 0x595
 800f668:	491d      	ldr	r1, [pc, #116]	; (800f6e0 <tcp_receive+0x5fc>)
 800f66a:	481c      	ldr	r0, [pc, #112]	; (800f6dc <tcp_receive+0x5f8>)
 800f66c:	f008 f812 	bl	8017694 <iprintf>
      off = (u16_t)off32;
 800f670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f672:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800f676:	4b16      	ldr	r3, [pc, #88]	; (800f6d0 <tcp_receive+0x5ec>)
 800f678:	685b      	ldr	r3, [r3, #4]
 800f67a:	891b      	ldrh	r3, [r3, #8]
 800f67c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f680:	429a      	cmp	r2, r3
 800f682:	d906      	bls.n	800f692 <tcp_receive+0x5ae>
 800f684:	4b13      	ldr	r3, [pc, #76]	; (800f6d4 <tcp_receive+0x5f0>)
 800f686:	f240 5297 	movw	r2, #1431	; 0x597
 800f68a:	4916      	ldr	r1, [pc, #88]	; (800f6e4 <tcp_receive+0x600>)
 800f68c:	4813      	ldr	r0, [pc, #76]	; (800f6dc <tcp_receive+0x5f8>)
 800f68e:	f008 f801 	bl	8017694 <iprintf>
      inseg.len -= off;
 800f692:	4b0f      	ldr	r3, [pc, #60]	; (800f6d0 <tcp_receive+0x5ec>)
 800f694:	891a      	ldrh	r2, [r3, #8]
 800f696:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f69a:	1ad3      	subs	r3, r2, r3
 800f69c:	b29a      	uxth	r2, r3
 800f69e:	4b0c      	ldr	r3, [pc, #48]	; (800f6d0 <tcp_receive+0x5ec>)
 800f6a0:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800f6a2:	4b0b      	ldr	r3, [pc, #44]	; (800f6d0 <tcp_receive+0x5ec>)
 800f6a4:	685b      	ldr	r3, [r3, #4]
 800f6a6:	891a      	ldrh	r2, [r3, #8]
 800f6a8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f6ac:	1ad3      	subs	r3, r2, r3
 800f6ae:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800f6b0:	e02a      	b.n	800f708 <tcp_receive+0x624>
 800f6b2:	bf00      	nop
 800f6b4:	0801a66c 	.word	0x0801a66c
 800f6b8:	0801a674 	.word	0x0801a674
 800f6bc:	20010978 	.word	0x20010978
 800f6c0:	20010974 	.word	0x20010974
 800f6c4:	20010938 	.word	0x20010938
 800f6c8:	2001097a 	.word	0x2001097a
 800f6cc:	20010970 	.word	0x20010970
 800f6d0:	20010950 	.word	0x20010950
 800f6d4:	0801a304 	.word	0x0801a304
 800f6d8:	0801a67c 	.word	0x0801a67c
 800f6dc:	0801a350 	.word	0x0801a350
 800f6e0:	0801a68c 	.word	0x0801a68c
 800f6e4:	0801a69c 	.word	0x0801a69c
        off -= p->len;
 800f6e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f6ea:	895b      	ldrh	r3, [r3, #10]
 800f6ec:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f6f0:	1ad3      	subs	r3, r2, r3
 800f6f2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800f6f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f6f8:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800f6fa:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800f6fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f6fe:	2200      	movs	r2, #0
 800f700:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800f702:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f704:	681b      	ldr	r3, [r3, #0]
 800f706:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800f708:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f70a:	895b      	ldrh	r3, [r3, #10]
 800f70c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f710:	429a      	cmp	r2, r3
 800f712:	d8e9      	bhi.n	800f6e8 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800f714:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f718:	4619      	mov	r1, r3
 800f71a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800f71c:	f7fc f88e 	bl	800b83c <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800f720:	687b      	ldr	r3, [r7, #4]
 800f722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f724:	4a91      	ldr	r2, [pc, #580]	; (800f96c <tcp_receive+0x888>)
 800f726:	6013      	str	r3, [r2, #0]
 800f728:	4b91      	ldr	r3, [pc, #580]	; (800f970 <tcp_receive+0x88c>)
 800f72a:	68db      	ldr	r3, [r3, #12]
 800f72c:	4a8f      	ldr	r2, [pc, #572]	; (800f96c <tcp_receive+0x888>)
 800f72e:	6812      	ldr	r2, [r2, #0]
 800f730:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800f732:	e00d      	b.n	800f750 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800f734:	4b8d      	ldr	r3, [pc, #564]	; (800f96c <tcp_receive+0x888>)
 800f736:	681a      	ldr	r2, [r3, #0]
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f73c:	1ad3      	subs	r3, r2, r3
 800f73e:	2b00      	cmp	r3, #0
 800f740:	da06      	bge.n	800f750 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800f742:	687b      	ldr	r3, [r7, #4]
 800f744:	8b5b      	ldrh	r3, [r3, #26]
 800f746:	f043 0302 	orr.w	r3, r3, #2
 800f74a:	b29a      	uxth	r2, r3
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800f750:	4b86      	ldr	r3, [pc, #536]	; (800f96c <tcp_receive+0x888>)
 800f752:	681a      	ldr	r2, [r3, #0]
 800f754:	687b      	ldr	r3, [r7, #4]
 800f756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f758:	1ad3      	subs	r3, r2, r3
 800f75a:	2b00      	cmp	r3, #0
 800f75c:	f2c0 842a 	blt.w	800ffb4 <tcp_receive+0xed0>
 800f760:	4b82      	ldr	r3, [pc, #520]	; (800f96c <tcp_receive+0x888>)
 800f762:	681a      	ldr	r2, [r3, #0]
 800f764:	687b      	ldr	r3, [r7, #4]
 800f766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f768:	6879      	ldr	r1, [r7, #4]
 800f76a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f76c:	440b      	add	r3, r1
 800f76e:	1ad3      	subs	r3, r2, r3
 800f770:	3301      	adds	r3, #1
 800f772:	2b00      	cmp	r3, #0
 800f774:	f300 841e 	bgt.w	800ffb4 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800f778:	687b      	ldr	r3, [r7, #4]
 800f77a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f77c:	4b7b      	ldr	r3, [pc, #492]	; (800f96c <tcp_receive+0x888>)
 800f77e:	681b      	ldr	r3, [r3, #0]
 800f780:	429a      	cmp	r2, r3
 800f782:	f040 829a 	bne.w	800fcba <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800f786:	4b7a      	ldr	r3, [pc, #488]	; (800f970 <tcp_receive+0x88c>)
 800f788:	891c      	ldrh	r4, [r3, #8]
 800f78a:	4b79      	ldr	r3, [pc, #484]	; (800f970 <tcp_receive+0x88c>)
 800f78c:	68db      	ldr	r3, [r3, #12]
 800f78e:	899b      	ldrh	r3, [r3, #12]
 800f790:	b29b      	uxth	r3, r3
 800f792:	4618      	mov	r0, r3
 800f794:	f7fa fcda 	bl	800a14c <lwip_htons>
 800f798:	4603      	mov	r3, r0
 800f79a:	b2db      	uxtb	r3, r3
 800f79c:	f003 0303 	and.w	r3, r3, #3
 800f7a0:	2b00      	cmp	r3, #0
 800f7a2:	d001      	beq.n	800f7a8 <tcp_receive+0x6c4>
 800f7a4:	2301      	movs	r3, #1
 800f7a6:	e000      	b.n	800f7aa <tcp_receive+0x6c6>
 800f7a8:	2300      	movs	r3, #0
 800f7aa:	4423      	add	r3, r4
 800f7ac:	b29a      	uxth	r2, r3
 800f7ae:	4b71      	ldr	r3, [pc, #452]	; (800f974 <tcp_receive+0x890>)
 800f7b0:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800f7b2:	687b      	ldr	r3, [r7, #4]
 800f7b4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f7b6:	4b6f      	ldr	r3, [pc, #444]	; (800f974 <tcp_receive+0x890>)
 800f7b8:	881b      	ldrh	r3, [r3, #0]
 800f7ba:	429a      	cmp	r2, r3
 800f7bc:	d275      	bcs.n	800f8aa <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800f7be:	4b6c      	ldr	r3, [pc, #432]	; (800f970 <tcp_receive+0x88c>)
 800f7c0:	68db      	ldr	r3, [r3, #12]
 800f7c2:	899b      	ldrh	r3, [r3, #12]
 800f7c4:	b29b      	uxth	r3, r3
 800f7c6:	4618      	mov	r0, r3
 800f7c8:	f7fa fcc0 	bl	800a14c <lwip_htons>
 800f7cc:	4603      	mov	r3, r0
 800f7ce:	b2db      	uxtb	r3, r3
 800f7d0:	f003 0301 	and.w	r3, r3, #1
 800f7d4:	2b00      	cmp	r3, #0
 800f7d6:	d01f      	beq.n	800f818 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800f7d8:	4b65      	ldr	r3, [pc, #404]	; (800f970 <tcp_receive+0x88c>)
 800f7da:	68db      	ldr	r3, [r3, #12]
 800f7dc:	899b      	ldrh	r3, [r3, #12]
 800f7de:	b29b      	uxth	r3, r3
 800f7e0:	b21b      	sxth	r3, r3
 800f7e2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800f7e6:	b21c      	sxth	r4, r3
 800f7e8:	4b61      	ldr	r3, [pc, #388]	; (800f970 <tcp_receive+0x88c>)
 800f7ea:	68db      	ldr	r3, [r3, #12]
 800f7ec:	899b      	ldrh	r3, [r3, #12]
 800f7ee:	b29b      	uxth	r3, r3
 800f7f0:	4618      	mov	r0, r3
 800f7f2:	f7fa fcab 	bl	800a14c <lwip_htons>
 800f7f6:	4603      	mov	r3, r0
 800f7f8:	b2db      	uxtb	r3, r3
 800f7fa:	b29b      	uxth	r3, r3
 800f7fc:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800f800:	b29b      	uxth	r3, r3
 800f802:	4618      	mov	r0, r3
 800f804:	f7fa fca2 	bl	800a14c <lwip_htons>
 800f808:	4603      	mov	r3, r0
 800f80a:	b21b      	sxth	r3, r3
 800f80c:	4323      	orrs	r3, r4
 800f80e:	b21a      	sxth	r2, r3
 800f810:	4b57      	ldr	r3, [pc, #348]	; (800f970 <tcp_receive+0x88c>)
 800f812:	68db      	ldr	r3, [r3, #12]
 800f814:	b292      	uxth	r2, r2
 800f816:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800f818:	687b      	ldr	r3, [r7, #4]
 800f81a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f81c:	4b54      	ldr	r3, [pc, #336]	; (800f970 <tcp_receive+0x88c>)
 800f81e:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800f820:	4b53      	ldr	r3, [pc, #332]	; (800f970 <tcp_receive+0x88c>)
 800f822:	68db      	ldr	r3, [r3, #12]
 800f824:	899b      	ldrh	r3, [r3, #12]
 800f826:	b29b      	uxth	r3, r3
 800f828:	4618      	mov	r0, r3
 800f82a:	f7fa fc8f 	bl	800a14c <lwip_htons>
 800f82e:	4603      	mov	r3, r0
 800f830:	b2db      	uxtb	r3, r3
 800f832:	f003 0302 	and.w	r3, r3, #2
 800f836:	2b00      	cmp	r3, #0
 800f838:	d005      	beq.n	800f846 <tcp_receive+0x762>
            inseg.len -= 1;
 800f83a:	4b4d      	ldr	r3, [pc, #308]	; (800f970 <tcp_receive+0x88c>)
 800f83c:	891b      	ldrh	r3, [r3, #8]
 800f83e:	3b01      	subs	r3, #1
 800f840:	b29a      	uxth	r2, r3
 800f842:	4b4b      	ldr	r3, [pc, #300]	; (800f970 <tcp_receive+0x88c>)
 800f844:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800f846:	4b4a      	ldr	r3, [pc, #296]	; (800f970 <tcp_receive+0x88c>)
 800f848:	685b      	ldr	r3, [r3, #4]
 800f84a:	4a49      	ldr	r2, [pc, #292]	; (800f970 <tcp_receive+0x88c>)
 800f84c:	8912      	ldrh	r2, [r2, #8]
 800f84e:	4611      	mov	r1, r2
 800f850:	4618      	mov	r0, r3
 800f852:	f7fb fef3 	bl	800b63c <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800f856:	4b46      	ldr	r3, [pc, #280]	; (800f970 <tcp_receive+0x88c>)
 800f858:	891c      	ldrh	r4, [r3, #8]
 800f85a:	4b45      	ldr	r3, [pc, #276]	; (800f970 <tcp_receive+0x88c>)
 800f85c:	68db      	ldr	r3, [r3, #12]
 800f85e:	899b      	ldrh	r3, [r3, #12]
 800f860:	b29b      	uxth	r3, r3
 800f862:	4618      	mov	r0, r3
 800f864:	f7fa fc72 	bl	800a14c <lwip_htons>
 800f868:	4603      	mov	r3, r0
 800f86a:	b2db      	uxtb	r3, r3
 800f86c:	f003 0303 	and.w	r3, r3, #3
 800f870:	2b00      	cmp	r3, #0
 800f872:	d001      	beq.n	800f878 <tcp_receive+0x794>
 800f874:	2301      	movs	r3, #1
 800f876:	e000      	b.n	800f87a <tcp_receive+0x796>
 800f878:	2300      	movs	r3, #0
 800f87a:	4423      	add	r3, r4
 800f87c:	b29a      	uxth	r2, r3
 800f87e:	4b3d      	ldr	r3, [pc, #244]	; (800f974 <tcp_receive+0x890>)
 800f880:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800f882:	4b3c      	ldr	r3, [pc, #240]	; (800f974 <tcp_receive+0x890>)
 800f884:	881b      	ldrh	r3, [r3, #0]
 800f886:	461a      	mov	r2, r3
 800f888:	4b38      	ldr	r3, [pc, #224]	; (800f96c <tcp_receive+0x888>)
 800f88a:	681b      	ldr	r3, [r3, #0]
 800f88c:	441a      	add	r2, r3
 800f88e:	687b      	ldr	r3, [r7, #4]
 800f890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f892:	6879      	ldr	r1, [r7, #4]
 800f894:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f896:	440b      	add	r3, r1
 800f898:	429a      	cmp	r2, r3
 800f89a:	d006      	beq.n	800f8aa <tcp_receive+0x7c6>
 800f89c:	4b36      	ldr	r3, [pc, #216]	; (800f978 <tcp_receive+0x894>)
 800f89e:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800f8a2:	4936      	ldr	r1, [pc, #216]	; (800f97c <tcp_receive+0x898>)
 800f8a4:	4836      	ldr	r0, [pc, #216]	; (800f980 <tcp_receive+0x89c>)
 800f8a6:	f007 fef5 	bl	8017694 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800f8aa:	687b      	ldr	r3, [r7, #4]
 800f8ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f8ae:	2b00      	cmp	r3, #0
 800f8b0:	f000 80e7 	beq.w	800fa82 <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800f8b4:	4b2e      	ldr	r3, [pc, #184]	; (800f970 <tcp_receive+0x88c>)
 800f8b6:	68db      	ldr	r3, [r3, #12]
 800f8b8:	899b      	ldrh	r3, [r3, #12]
 800f8ba:	b29b      	uxth	r3, r3
 800f8bc:	4618      	mov	r0, r3
 800f8be:	f7fa fc45 	bl	800a14c <lwip_htons>
 800f8c2:	4603      	mov	r3, r0
 800f8c4:	b2db      	uxtb	r3, r3
 800f8c6:	f003 0301 	and.w	r3, r3, #1
 800f8ca:	2b00      	cmp	r3, #0
 800f8cc:	d010      	beq.n	800f8f0 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800f8ce:	e00a      	b.n	800f8e6 <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f8d4:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800f8d6:	687b      	ldr	r3, [r7, #4]
 800f8d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f8da:	681a      	ldr	r2, [r3, #0]
 800f8dc:	687b      	ldr	r3, [r7, #4]
 800f8de:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800f8e0:	68f8      	ldr	r0, [r7, #12]
 800f8e2:	f7fd fcc4 	bl	800d26e <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800f8e6:	687b      	ldr	r3, [r7, #4]
 800f8e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f8ea:	2b00      	cmp	r3, #0
 800f8ec:	d1f0      	bne.n	800f8d0 <tcp_receive+0x7ec>
 800f8ee:	e0c8      	b.n	800fa82 <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800f8f0:	687b      	ldr	r3, [r7, #4]
 800f8f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f8f4:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800f8f6:	e052      	b.n	800f99e <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800f8f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f8fa:	68db      	ldr	r3, [r3, #12]
 800f8fc:	899b      	ldrh	r3, [r3, #12]
 800f8fe:	b29b      	uxth	r3, r3
 800f900:	4618      	mov	r0, r3
 800f902:	f7fa fc23 	bl	800a14c <lwip_htons>
 800f906:	4603      	mov	r3, r0
 800f908:	b2db      	uxtb	r3, r3
 800f90a:	f003 0301 	and.w	r3, r3, #1
 800f90e:	2b00      	cmp	r3, #0
 800f910:	d03d      	beq.n	800f98e <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800f912:	4b17      	ldr	r3, [pc, #92]	; (800f970 <tcp_receive+0x88c>)
 800f914:	68db      	ldr	r3, [r3, #12]
 800f916:	899b      	ldrh	r3, [r3, #12]
 800f918:	b29b      	uxth	r3, r3
 800f91a:	4618      	mov	r0, r3
 800f91c:	f7fa fc16 	bl	800a14c <lwip_htons>
 800f920:	4603      	mov	r3, r0
 800f922:	b2db      	uxtb	r3, r3
 800f924:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800f928:	2b00      	cmp	r3, #0
 800f92a:	d130      	bne.n	800f98e <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800f92c:	4b10      	ldr	r3, [pc, #64]	; (800f970 <tcp_receive+0x88c>)
 800f92e:	68db      	ldr	r3, [r3, #12]
 800f930:	899b      	ldrh	r3, [r3, #12]
 800f932:	b29c      	uxth	r4, r3
 800f934:	2001      	movs	r0, #1
 800f936:	f7fa fc09 	bl	800a14c <lwip_htons>
 800f93a:	4603      	mov	r3, r0
 800f93c:	461a      	mov	r2, r3
 800f93e:	4b0c      	ldr	r3, [pc, #48]	; (800f970 <tcp_receive+0x88c>)
 800f940:	68db      	ldr	r3, [r3, #12]
 800f942:	4322      	orrs	r2, r4
 800f944:	b292      	uxth	r2, r2
 800f946:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800f948:	4b09      	ldr	r3, [pc, #36]	; (800f970 <tcp_receive+0x88c>)
 800f94a:	891c      	ldrh	r4, [r3, #8]
 800f94c:	4b08      	ldr	r3, [pc, #32]	; (800f970 <tcp_receive+0x88c>)
 800f94e:	68db      	ldr	r3, [r3, #12]
 800f950:	899b      	ldrh	r3, [r3, #12]
 800f952:	b29b      	uxth	r3, r3
 800f954:	4618      	mov	r0, r3
 800f956:	f7fa fbf9 	bl	800a14c <lwip_htons>
 800f95a:	4603      	mov	r3, r0
 800f95c:	b2db      	uxtb	r3, r3
 800f95e:	f003 0303 	and.w	r3, r3, #3
 800f962:	2b00      	cmp	r3, #0
 800f964:	d00e      	beq.n	800f984 <tcp_receive+0x8a0>
 800f966:	2301      	movs	r3, #1
 800f968:	e00d      	b.n	800f986 <tcp_receive+0x8a2>
 800f96a:	bf00      	nop
 800f96c:	20010970 	.word	0x20010970
 800f970:	20010950 	.word	0x20010950
 800f974:	2001097a 	.word	0x2001097a
 800f978:	0801a304 	.word	0x0801a304
 800f97c:	0801a6ac 	.word	0x0801a6ac
 800f980:	0801a350 	.word	0x0801a350
 800f984:	2300      	movs	r3, #0
 800f986:	4423      	add	r3, r4
 800f988:	b29a      	uxth	r2, r3
 800f98a:	4b98      	ldr	r3, [pc, #608]	; (800fbec <tcp_receive+0xb08>)
 800f98c:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800f98e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f990:	613b      	str	r3, [r7, #16]
              next = next->next;
 800f992:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f994:	681b      	ldr	r3, [r3, #0]
 800f996:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800f998:	6938      	ldr	r0, [r7, #16]
 800f99a:	f7fd fc68 	bl	800d26e <tcp_seg_free>
            while (next &&
 800f99e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f9a0:	2b00      	cmp	r3, #0
 800f9a2:	d00e      	beq.n	800f9c2 <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800f9a4:	4b91      	ldr	r3, [pc, #580]	; (800fbec <tcp_receive+0xb08>)
 800f9a6:	881b      	ldrh	r3, [r3, #0]
 800f9a8:	461a      	mov	r2, r3
 800f9aa:	4b91      	ldr	r3, [pc, #580]	; (800fbf0 <tcp_receive+0xb0c>)
 800f9ac:	681b      	ldr	r3, [r3, #0]
 800f9ae:	441a      	add	r2, r3
 800f9b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f9b2:	68db      	ldr	r3, [r3, #12]
 800f9b4:	685b      	ldr	r3, [r3, #4]
 800f9b6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f9b8:	8909      	ldrh	r1, [r1, #8]
 800f9ba:	440b      	add	r3, r1
 800f9bc:	1ad3      	subs	r3, r2, r3
            while (next &&
 800f9be:	2b00      	cmp	r3, #0
 800f9c0:	da9a      	bge.n	800f8f8 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800f9c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f9c4:	2b00      	cmp	r3, #0
 800f9c6:	d059      	beq.n	800fa7c <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 800f9c8:	4b88      	ldr	r3, [pc, #544]	; (800fbec <tcp_receive+0xb08>)
 800f9ca:	881b      	ldrh	r3, [r3, #0]
 800f9cc:	461a      	mov	r2, r3
 800f9ce:	4b88      	ldr	r3, [pc, #544]	; (800fbf0 <tcp_receive+0xb0c>)
 800f9d0:	681b      	ldr	r3, [r3, #0]
 800f9d2:	441a      	add	r2, r3
 800f9d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f9d6:	68db      	ldr	r3, [r3, #12]
 800f9d8:	685b      	ldr	r3, [r3, #4]
 800f9da:	1ad3      	subs	r3, r2, r3
            if (next &&
 800f9dc:	2b00      	cmp	r3, #0
 800f9de:	dd4d      	ble.n	800fa7c <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800f9e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f9e2:	68db      	ldr	r3, [r3, #12]
 800f9e4:	685b      	ldr	r3, [r3, #4]
 800f9e6:	b29a      	uxth	r2, r3
 800f9e8:	4b81      	ldr	r3, [pc, #516]	; (800fbf0 <tcp_receive+0xb0c>)
 800f9ea:	681b      	ldr	r3, [r3, #0]
 800f9ec:	b29b      	uxth	r3, r3
 800f9ee:	1ad3      	subs	r3, r2, r3
 800f9f0:	b29a      	uxth	r2, r3
 800f9f2:	4b80      	ldr	r3, [pc, #512]	; (800fbf4 <tcp_receive+0xb10>)
 800f9f4:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800f9f6:	4b7f      	ldr	r3, [pc, #508]	; (800fbf4 <tcp_receive+0xb10>)
 800f9f8:	68db      	ldr	r3, [r3, #12]
 800f9fa:	899b      	ldrh	r3, [r3, #12]
 800f9fc:	b29b      	uxth	r3, r3
 800f9fe:	4618      	mov	r0, r3
 800fa00:	f7fa fba4 	bl	800a14c <lwip_htons>
 800fa04:	4603      	mov	r3, r0
 800fa06:	b2db      	uxtb	r3, r3
 800fa08:	f003 0302 	and.w	r3, r3, #2
 800fa0c:	2b00      	cmp	r3, #0
 800fa0e:	d005      	beq.n	800fa1c <tcp_receive+0x938>
                inseg.len -= 1;
 800fa10:	4b78      	ldr	r3, [pc, #480]	; (800fbf4 <tcp_receive+0xb10>)
 800fa12:	891b      	ldrh	r3, [r3, #8]
 800fa14:	3b01      	subs	r3, #1
 800fa16:	b29a      	uxth	r2, r3
 800fa18:	4b76      	ldr	r3, [pc, #472]	; (800fbf4 <tcp_receive+0xb10>)
 800fa1a:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800fa1c:	4b75      	ldr	r3, [pc, #468]	; (800fbf4 <tcp_receive+0xb10>)
 800fa1e:	685b      	ldr	r3, [r3, #4]
 800fa20:	4a74      	ldr	r2, [pc, #464]	; (800fbf4 <tcp_receive+0xb10>)
 800fa22:	8912      	ldrh	r2, [r2, #8]
 800fa24:	4611      	mov	r1, r2
 800fa26:	4618      	mov	r0, r3
 800fa28:	f7fb fe08 	bl	800b63c <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800fa2c:	4b71      	ldr	r3, [pc, #452]	; (800fbf4 <tcp_receive+0xb10>)
 800fa2e:	891c      	ldrh	r4, [r3, #8]
 800fa30:	4b70      	ldr	r3, [pc, #448]	; (800fbf4 <tcp_receive+0xb10>)
 800fa32:	68db      	ldr	r3, [r3, #12]
 800fa34:	899b      	ldrh	r3, [r3, #12]
 800fa36:	b29b      	uxth	r3, r3
 800fa38:	4618      	mov	r0, r3
 800fa3a:	f7fa fb87 	bl	800a14c <lwip_htons>
 800fa3e:	4603      	mov	r3, r0
 800fa40:	b2db      	uxtb	r3, r3
 800fa42:	f003 0303 	and.w	r3, r3, #3
 800fa46:	2b00      	cmp	r3, #0
 800fa48:	d001      	beq.n	800fa4e <tcp_receive+0x96a>
 800fa4a:	2301      	movs	r3, #1
 800fa4c:	e000      	b.n	800fa50 <tcp_receive+0x96c>
 800fa4e:	2300      	movs	r3, #0
 800fa50:	4423      	add	r3, r4
 800fa52:	b29a      	uxth	r2, r3
 800fa54:	4b65      	ldr	r3, [pc, #404]	; (800fbec <tcp_receive+0xb08>)
 800fa56:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800fa58:	4b64      	ldr	r3, [pc, #400]	; (800fbec <tcp_receive+0xb08>)
 800fa5a:	881b      	ldrh	r3, [r3, #0]
 800fa5c:	461a      	mov	r2, r3
 800fa5e:	4b64      	ldr	r3, [pc, #400]	; (800fbf0 <tcp_receive+0xb0c>)
 800fa60:	681b      	ldr	r3, [r3, #0]
 800fa62:	441a      	add	r2, r3
 800fa64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fa66:	68db      	ldr	r3, [r3, #12]
 800fa68:	685b      	ldr	r3, [r3, #4]
 800fa6a:	429a      	cmp	r2, r3
 800fa6c:	d006      	beq.n	800fa7c <tcp_receive+0x998>
 800fa6e:	4b62      	ldr	r3, [pc, #392]	; (800fbf8 <tcp_receive+0xb14>)
 800fa70:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800fa74:	4961      	ldr	r1, [pc, #388]	; (800fbfc <tcp_receive+0xb18>)
 800fa76:	4862      	ldr	r0, [pc, #392]	; (800fc00 <tcp_receive+0xb1c>)
 800fa78:	f007 fe0c 	bl	8017694 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800fa7c:	687b      	ldr	r3, [r7, #4]
 800fa7e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800fa80:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800fa82:	4b5a      	ldr	r3, [pc, #360]	; (800fbec <tcp_receive+0xb08>)
 800fa84:	881b      	ldrh	r3, [r3, #0]
 800fa86:	461a      	mov	r2, r3
 800fa88:	4b59      	ldr	r3, [pc, #356]	; (800fbf0 <tcp_receive+0xb0c>)
 800fa8a:	681b      	ldr	r3, [r3, #0]
 800fa8c:	441a      	add	r2, r3
 800fa8e:	687b      	ldr	r3, [r7, #4]
 800fa90:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800fa92:	687b      	ldr	r3, [r7, #4]
 800fa94:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800fa96:	4b55      	ldr	r3, [pc, #340]	; (800fbec <tcp_receive+0xb08>)
 800fa98:	881b      	ldrh	r3, [r3, #0]
 800fa9a:	429a      	cmp	r2, r3
 800fa9c:	d206      	bcs.n	800faac <tcp_receive+0x9c8>
 800fa9e:	4b56      	ldr	r3, [pc, #344]	; (800fbf8 <tcp_receive+0xb14>)
 800faa0:	f240 6207 	movw	r2, #1543	; 0x607
 800faa4:	4957      	ldr	r1, [pc, #348]	; (800fc04 <tcp_receive+0xb20>)
 800faa6:	4856      	ldr	r0, [pc, #344]	; (800fc00 <tcp_receive+0xb1c>)
 800faa8:	f007 fdf4 	bl	8017694 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800faac:	687b      	ldr	r3, [r7, #4]
 800faae:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800fab0:	4b4e      	ldr	r3, [pc, #312]	; (800fbec <tcp_receive+0xb08>)
 800fab2:	881b      	ldrh	r3, [r3, #0]
 800fab4:	1ad3      	subs	r3, r2, r3
 800fab6:	b29a      	uxth	r2, r3
 800fab8:	687b      	ldr	r3, [r7, #4]
 800faba:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800fabc:	6878      	ldr	r0, [r7, #4]
 800fabe:	f7fc feb1 	bl	800c824 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800fac2:	4b4c      	ldr	r3, [pc, #304]	; (800fbf4 <tcp_receive+0xb10>)
 800fac4:	685b      	ldr	r3, [r3, #4]
 800fac6:	891b      	ldrh	r3, [r3, #8]
 800fac8:	2b00      	cmp	r3, #0
 800faca:	d006      	beq.n	800fada <tcp_receive+0x9f6>
          recv_data = inseg.p;
 800facc:	4b49      	ldr	r3, [pc, #292]	; (800fbf4 <tcp_receive+0xb10>)
 800face:	685b      	ldr	r3, [r3, #4]
 800fad0:	4a4d      	ldr	r2, [pc, #308]	; (800fc08 <tcp_receive+0xb24>)
 800fad2:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800fad4:	4b47      	ldr	r3, [pc, #284]	; (800fbf4 <tcp_receive+0xb10>)
 800fad6:	2200      	movs	r2, #0
 800fad8:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800fada:	4b46      	ldr	r3, [pc, #280]	; (800fbf4 <tcp_receive+0xb10>)
 800fadc:	68db      	ldr	r3, [r3, #12]
 800fade:	899b      	ldrh	r3, [r3, #12]
 800fae0:	b29b      	uxth	r3, r3
 800fae2:	4618      	mov	r0, r3
 800fae4:	f7fa fb32 	bl	800a14c <lwip_htons>
 800fae8:	4603      	mov	r3, r0
 800faea:	b2db      	uxtb	r3, r3
 800faec:	f003 0301 	and.w	r3, r3, #1
 800faf0:	2b00      	cmp	r3, #0
 800faf2:	f000 80b8 	beq.w	800fc66 <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800faf6:	4b45      	ldr	r3, [pc, #276]	; (800fc0c <tcp_receive+0xb28>)
 800faf8:	781b      	ldrb	r3, [r3, #0]
 800fafa:	f043 0320 	orr.w	r3, r3, #32
 800fafe:	b2da      	uxtb	r2, r3
 800fb00:	4b42      	ldr	r3, [pc, #264]	; (800fc0c <tcp_receive+0xb28>)
 800fb02:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800fb04:	e0af      	b.n	800fc66 <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800fb06:	687b      	ldr	r3, [r7, #4]
 800fb08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fb0a:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800fb0c:	687b      	ldr	r3, [r7, #4]
 800fb0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fb10:	68db      	ldr	r3, [r3, #12]
 800fb12:	685b      	ldr	r3, [r3, #4]
 800fb14:	4a36      	ldr	r2, [pc, #216]	; (800fbf0 <tcp_receive+0xb0c>)
 800fb16:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800fb18:	68bb      	ldr	r3, [r7, #8]
 800fb1a:	891b      	ldrh	r3, [r3, #8]
 800fb1c:	461c      	mov	r4, r3
 800fb1e:	68bb      	ldr	r3, [r7, #8]
 800fb20:	68db      	ldr	r3, [r3, #12]
 800fb22:	899b      	ldrh	r3, [r3, #12]
 800fb24:	b29b      	uxth	r3, r3
 800fb26:	4618      	mov	r0, r3
 800fb28:	f7fa fb10 	bl	800a14c <lwip_htons>
 800fb2c:	4603      	mov	r3, r0
 800fb2e:	b2db      	uxtb	r3, r3
 800fb30:	f003 0303 	and.w	r3, r3, #3
 800fb34:	2b00      	cmp	r3, #0
 800fb36:	d001      	beq.n	800fb3c <tcp_receive+0xa58>
 800fb38:	2301      	movs	r3, #1
 800fb3a:	e000      	b.n	800fb3e <tcp_receive+0xa5a>
 800fb3c:	2300      	movs	r3, #0
 800fb3e:	191a      	adds	r2, r3, r4
 800fb40:	687b      	ldr	r3, [r7, #4]
 800fb42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb44:	441a      	add	r2, r3
 800fb46:	687b      	ldr	r3, [r7, #4]
 800fb48:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800fb4a:	687b      	ldr	r3, [r7, #4]
 800fb4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fb4e:	461c      	mov	r4, r3
 800fb50:	68bb      	ldr	r3, [r7, #8]
 800fb52:	891b      	ldrh	r3, [r3, #8]
 800fb54:	461d      	mov	r5, r3
 800fb56:	68bb      	ldr	r3, [r7, #8]
 800fb58:	68db      	ldr	r3, [r3, #12]
 800fb5a:	899b      	ldrh	r3, [r3, #12]
 800fb5c:	b29b      	uxth	r3, r3
 800fb5e:	4618      	mov	r0, r3
 800fb60:	f7fa faf4 	bl	800a14c <lwip_htons>
 800fb64:	4603      	mov	r3, r0
 800fb66:	b2db      	uxtb	r3, r3
 800fb68:	f003 0303 	and.w	r3, r3, #3
 800fb6c:	2b00      	cmp	r3, #0
 800fb6e:	d001      	beq.n	800fb74 <tcp_receive+0xa90>
 800fb70:	2301      	movs	r3, #1
 800fb72:	e000      	b.n	800fb76 <tcp_receive+0xa92>
 800fb74:	2300      	movs	r3, #0
 800fb76:	442b      	add	r3, r5
 800fb78:	429c      	cmp	r4, r3
 800fb7a:	d206      	bcs.n	800fb8a <tcp_receive+0xaa6>
 800fb7c:	4b1e      	ldr	r3, [pc, #120]	; (800fbf8 <tcp_receive+0xb14>)
 800fb7e:	f240 622b 	movw	r2, #1579	; 0x62b
 800fb82:	4923      	ldr	r1, [pc, #140]	; (800fc10 <tcp_receive+0xb2c>)
 800fb84:	481e      	ldr	r0, [pc, #120]	; (800fc00 <tcp_receive+0xb1c>)
 800fb86:	f007 fd85 	bl	8017694 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800fb8a:	68bb      	ldr	r3, [r7, #8]
 800fb8c:	891b      	ldrh	r3, [r3, #8]
 800fb8e:	461c      	mov	r4, r3
 800fb90:	68bb      	ldr	r3, [r7, #8]
 800fb92:	68db      	ldr	r3, [r3, #12]
 800fb94:	899b      	ldrh	r3, [r3, #12]
 800fb96:	b29b      	uxth	r3, r3
 800fb98:	4618      	mov	r0, r3
 800fb9a:	f7fa fad7 	bl	800a14c <lwip_htons>
 800fb9e:	4603      	mov	r3, r0
 800fba0:	b2db      	uxtb	r3, r3
 800fba2:	f003 0303 	and.w	r3, r3, #3
 800fba6:	2b00      	cmp	r3, #0
 800fba8:	d001      	beq.n	800fbae <tcp_receive+0xaca>
 800fbaa:	2301      	movs	r3, #1
 800fbac:	e000      	b.n	800fbb0 <tcp_receive+0xacc>
 800fbae:	2300      	movs	r3, #0
 800fbb0:	1919      	adds	r1, r3, r4
 800fbb2:	687b      	ldr	r3, [r7, #4]
 800fbb4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800fbb6:	b28b      	uxth	r3, r1
 800fbb8:	1ad3      	subs	r3, r2, r3
 800fbba:	b29a      	uxth	r2, r3
 800fbbc:	687b      	ldr	r3, [r7, #4]
 800fbbe:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800fbc0:	6878      	ldr	r0, [r7, #4]
 800fbc2:	f7fc fe2f 	bl	800c824 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800fbc6:	68bb      	ldr	r3, [r7, #8]
 800fbc8:	685b      	ldr	r3, [r3, #4]
 800fbca:	891b      	ldrh	r3, [r3, #8]
 800fbcc:	2b00      	cmp	r3, #0
 800fbce:	d028      	beq.n	800fc22 <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800fbd0:	4b0d      	ldr	r3, [pc, #52]	; (800fc08 <tcp_receive+0xb24>)
 800fbd2:	681b      	ldr	r3, [r3, #0]
 800fbd4:	2b00      	cmp	r3, #0
 800fbd6:	d01d      	beq.n	800fc14 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 800fbd8:	4b0b      	ldr	r3, [pc, #44]	; (800fc08 <tcp_receive+0xb24>)
 800fbda:	681a      	ldr	r2, [r3, #0]
 800fbdc:	68bb      	ldr	r3, [r7, #8]
 800fbde:	685b      	ldr	r3, [r3, #4]
 800fbe0:	4619      	mov	r1, r3
 800fbe2:	4610      	mov	r0, r2
 800fbe4:	f7fb ff7e 	bl	800bae4 <pbuf_cat>
 800fbe8:	e018      	b.n	800fc1c <tcp_receive+0xb38>
 800fbea:	bf00      	nop
 800fbec:	2001097a 	.word	0x2001097a
 800fbf0:	20010970 	.word	0x20010970
 800fbf4:	20010950 	.word	0x20010950
 800fbf8:	0801a304 	.word	0x0801a304
 800fbfc:	0801a6e4 	.word	0x0801a6e4
 800fc00:	0801a350 	.word	0x0801a350
 800fc04:	0801a720 	.word	0x0801a720
 800fc08:	20010980 	.word	0x20010980
 800fc0c:	2001097d 	.word	0x2001097d
 800fc10:	0801a740 	.word	0x0801a740
            } else {
              recv_data = cseg->p;
 800fc14:	68bb      	ldr	r3, [r7, #8]
 800fc16:	685b      	ldr	r3, [r3, #4]
 800fc18:	4a70      	ldr	r2, [pc, #448]	; (800fddc <tcp_receive+0xcf8>)
 800fc1a:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800fc1c:	68bb      	ldr	r3, [r7, #8]
 800fc1e:	2200      	movs	r2, #0
 800fc20:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800fc22:	68bb      	ldr	r3, [r7, #8]
 800fc24:	68db      	ldr	r3, [r3, #12]
 800fc26:	899b      	ldrh	r3, [r3, #12]
 800fc28:	b29b      	uxth	r3, r3
 800fc2a:	4618      	mov	r0, r3
 800fc2c:	f7fa fa8e 	bl	800a14c <lwip_htons>
 800fc30:	4603      	mov	r3, r0
 800fc32:	b2db      	uxtb	r3, r3
 800fc34:	f003 0301 	and.w	r3, r3, #1
 800fc38:	2b00      	cmp	r3, #0
 800fc3a:	d00d      	beq.n	800fc58 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800fc3c:	4b68      	ldr	r3, [pc, #416]	; (800fde0 <tcp_receive+0xcfc>)
 800fc3e:	781b      	ldrb	r3, [r3, #0]
 800fc40:	f043 0320 	orr.w	r3, r3, #32
 800fc44:	b2da      	uxtb	r2, r3
 800fc46:	4b66      	ldr	r3, [pc, #408]	; (800fde0 <tcp_receive+0xcfc>)
 800fc48:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800fc4a:	687b      	ldr	r3, [r7, #4]
 800fc4c:	7d1b      	ldrb	r3, [r3, #20]
 800fc4e:	2b04      	cmp	r3, #4
 800fc50:	d102      	bne.n	800fc58 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 800fc52:	687b      	ldr	r3, [r7, #4]
 800fc54:	2207      	movs	r2, #7
 800fc56:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800fc58:	68bb      	ldr	r3, [r7, #8]
 800fc5a:	681a      	ldr	r2, [r3, #0]
 800fc5c:	687b      	ldr	r3, [r7, #4]
 800fc5e:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800fc60:	68b8      	ldr	r0, [r7, #8]
 800fc62:	f7fd fb04 	bl	800d26e <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800fc66:	687b      	ldr	r3, [r7, #4]
 800fc68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fc6a:	2b00      	cmp	r3, #0
 800fc6c:	d008      	beq.n	800fc80 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800fc6e:	687b      	ldr	r3, [r7, #4]
 800fc70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fc72:	68db      	ldr	r3, [r3, #12]
 800fc74:	685a      	ldr	r2, [r3, #4]
 800fc76:	687b      	ldr	r3, [r7, #4]
 800fc78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800fc7a:	429a      	cmp	r2, r3
 800fc7c:	f43f af43 	beq.w	800fb06 <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800fc80:	687b      	ldr	r3, [r7, #4]
 800fc82:	8b5b      	ldrh	r3, [r3, #26]
 800fc84:	f003 0301 	and.w	r3, r3, #1
 800fc88:	2b00      	cmp	r3, #0
 800fc8a:	d00e      	beq.n	800fcaa <tcp_receive+0xbc6>
 800fc8c:	687b      	ldr	r3, [r7, #4]
 800fc8e:	8b5b      	ldrh	r3, [r3, #26]
 800fc90:	f023 0301 	bic.w	r3, r3, #1
 800fc94:	b29a      	uxth	r2, r3
 800fc96:	687b      	ldr	r3, [r7, #4]
 800fc98:	835a      	strh	r2, [r3, #26]
 800fc9a:	687b      	ldr	r3, [r7, #4]
 800fc9c:	8b5b      	ldrh	r3, [r3, #26]
 800fc9e:	f043 0302 	orr.w	r3, r3, #2
 800fca2:	b29a      	uxth	r2, r3
 800fca4:	687b      	ldr	r3, [r7, #4]
 800fca6:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800fca8:	e188      	b.n	800ffbc <tcp_receive+0xed8>
        tcp_ack(pcb);
 800fcaa:	687b      	ldr	r3, [r7, #4]
 800fcac:	8b5b      	ldrh	r3, [r3, #26]
 800fcae:	f043 0301 	orr.w	r3, r3, #1
 800fcb2:	b29a      	uxth	r2, r3
 800fcb4:	687b      	ldr	r3, [r7, #4]
 800fcb6:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800fcb8:	e180      	b.n	800ffbc <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800fcba:	687b      	ldr	r3, [r7, #4]
 800fcbc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fcbe:	2b00      	cmp	r3, #0
 800fcc0:	d106      	bne.n	800fcd0 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800fcc2:	4848      	ldr	r0, [pc, #288]	; (800fde4 <tcp_receive+0xd00>)
 800fcc4:	f7fd faec 	bl	800d2a0 <tcp_seg_copy>
 800fcc8:	4602      	mov	r2, r0
 800fcca:	687b      	ldr	r3, [r7, #4]
 800fccc:	675a      	str	r2, [r3, #116]	; 0x74
 800fcce:	e16d      	b.n	800ffac <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800fcd0:	2300      	movs	r3, #0
 800fcd2:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800fcd4:	687b      	ldr	r3, [r7, #4]
 800fcd6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fcd8:	63bb      	str	r3, [r7, #56]	; 0x38
 800fcda:	e157      	b.n	800ff8c <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 800fcdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcde:	68db      	ldr	r3, [r3, #12]
 800fce0:	685a      	ldr	r2, [r3, #4]
 800fce2:	4b41      	ldr	r3, [pc, #260]	; (800fde8 <tcp_receive+0xd04>)
 800fce4:	681b      	ldr	r3, [r3, #0]
 800fce6:	429a      	cmp	r2, r3
 800fce8:	d11d      	bne.n	800fd26 <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800fcea:	4b3e      	ldr	r3, [pc, #248]	; (800fde4 <tcp_receive+0xd00>)
 800fcec:	891a      	ldrh	r2, [r3, #8]
 800fcee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcf0:	891b      	ldrh	r3, [r3, #8]
 800fcf2:	429a      	cmp	r2, r3
 800fcf4:	f240 814f 	bls.w	800ff96 <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800fcf8:	483a      	ldr	r0, [pc, #232]	; (800fde4 <tcp_receive+0xd00>)
 800fcfa:	f7fd fad1 	bl	800d2a0 <tcp_seg_copy>
 800fcfe:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800fd00:	697b      	ldr	r3, [r7, #20]
 800fd02:	2b00      	cmp	r3, #0
 800fd04:	f000 8149 	beq.w	800ff9a <tcp_receive+0xeb6>
                  if (prev != NULL) {
 800fd08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fd0a:	2b00      	cmp	r3, #0
 800fd0c:	d003      	beq.n	800fd16 <tcp_receive+0xc32>
                    prev->next = cseg;
 800fd0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fd10:	697a      	ldr	r2, [r7, #20]
 800fd12:	601a      	str	r2, [r3, #0]
 800fd14:	e002      	b.n	800fd1c <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 800fd16:	687b      	ldr	r3, [r7, #4]
 800fd18:	697a      	ldr	r2, [r7, #20]
 800fd1a:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800fd1c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800fd1e:	6978      	ldr	r0, [r7, #20]
 800fd20:	f7ff f8dc 	bl	800eedc <tcp_oos_insert_segment>
                }
                break;
 800fd24:	e139      	b.n	800ff9a <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800fd26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fd28:	2b00      	cmp	r3, #0
 800fd2a:	d117      	bne.n	800fd5c <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800fd2c:	4b2e      	ldr	r3, [pc, #184]	; (800fde8 <tcp_receive+0xd04>)
 800fd2e:	681a      	ldr	r2, [r3, #0]
 800fd30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd32:	68db      	ldr	r3, [r3, #12]
 800fd34:	685b      	ldr	r3, [r3, #4]
 800fd36:	1ad3      	subs	r3, r2, r3
 800fd38:	2b00      	cmp	r3, #0
 800fd3a:	da57      	bge.n	800fdec <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800fd3c:	4829      	ldr	r0, [pc, #164]	; (800fde4 <tcp_receive+0xd00>)
 800fd3e:	f7fd faaf 	bl	800d2a0 <tcp_seg_copy>
 800fd42:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800fd44:	69bb      	ldr	r3, [r7, #24]
 800fd46:	2b00      	cmp	r3, #0
 800fd48:	f000 8129 	beq.w	800ff9e <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 800fd4c:	687b      	ldr	r3, [r7, #4]
 800fd4e:	69ba      	ldr	r2, [r7, #24]
 800fd50:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800fd52:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800fd54:	69b8      	ldr	r0, [r7, #24]
 800fd56:	f7ff f8c1 	bl	800eedc <tcp_oos_insert_segment>
                  }
                  break;
 800fd5a:	e120      	b.n	800ff9e <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800fd5c:	4b22      	ldr	r3, [pc, #136]	; (800fde8 <tcp_receive+0xd04>)
 800fd5e:	681a      	ldr	r2, [r3, #0]
 800fd60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fd62:	68db      	ldr	r3, [r3, #12]
 800fd64:	685b      	ldr	r3, [r3, #4]
 800fd66:	1ad3      	subs	r3, r2, r3
 800fd68:	3b01      	subs	r3, #1
 800fd6a:	2b00      	cmp	r3, #0
 800fd6c:	db3e      	blt.n	800fdec <tcp_receive+0xd08>
 800fd6e:	4b1e      	ldr	r3, [pc, #120]	; (800fde8 <tcp_receive+0xd04>)
 800fd70:	681a      	ldr	r2, [r3, #0]
 800fd72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd74:	68db      	ldr	r3, [r3, #12]
 800fd76:	685b      	ldr	r3, [r3, #4]
 800fd78:	1ad3      	subs	r3, r2, r3
 800fd7a:	3301      	adds	r3, #1
 800fd7c:	2b00      	cmp	r3, #0
 800fd7e:	dc35      	bgt.n	800fdec <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800fd80:	4818      	ldr	r0, [pc, #96]	; (800fde4 <tcp_receive+0xd00>)
 800fd82:	f7fd fa8d 	bl	800d2a0 <tcp_seg_copy>
 800fd86:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800fd88:	69fb      	ldr	r3, [r7, #28]
 800fd8a:	2b00      	cmp	r3, #0
 800fd8c:	f000 8109 	beq.w	800ffa2 <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800fd90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fd92:	68db      	ldr	r3, [r3, #12]
 800fd94:	685b      	ldr	r3, [r3, #4]
 800fd96:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fd98:	8912      	ldrh	r2, [r2, #8]
 800fd9a:	441a      	add	r2, r3
 800fd9c:	4b12      	ldr	r3, [pc, #72]	; (800fde8 <tcp_receive+0xd04>)
 800fd9e:	681b      	ldr	r3, [r3, #0]
 800fda0:	1ad3      	subs	r3, r2, r3
 800fda2:	2b00      	cmp	r3, #0
 800fda4:	dd12      	ble.n	800fdcc <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800fda6:	4b10      	ldr	r3, [pc, #64]	; (800fde8 <tcp_receive+0xd04>)
 800fda8:	681b      	ldr	r3, [r3, #0]
 800fdaa:	b29a      	uxth	r2, r3
 800fdac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fdae:	68db      	ldr	r3, [r3, #12]
 800fdb0:	685b      	ldr	r3, [r3, #4]
 800fdb2:	b29b      	uxth	r3, r3
 800fdb4:	1ad3      	subs	r3, r2, r3
 800fdb6:	b29a      	uxth	r2, r3
 800fdb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fdba:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800fdbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fdbe:	685a      	ldr	r2, [r3, #4]
 800fdc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fdc2:	891b      	ldrh	r3, [r3, #8]
 800fdc4:	4619      	mov	r1, r3
 800fdc6:	4610      	mov	r0, r2
 800fdc8:	f7fb fc38 	bl	800b63c <pbuf_realloc>
                    }
                    prev->next = cseg;
 800fdcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fdce:	69fa      	ldr	r2, [r7, #28]
 800fdd0:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800fdd2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800fdd4:	69f8      	ldr	r0, [r7, #28]
 800fdd6:	f7ff f881 	bl	800eedc <tcp_oos_insert_segment>
                  }
                  break;
 800fdda:	e0e2      	b.n	800ffa2 <tcp_receive+0xebe>
 800fddc:	20010980 	.word	0x20010980
 800fde0:	2001097d 	.word	0x2001097d
 800fde4:	20010950 	.word	0x20010950
 800fde8:	20010970 	.word	0x20010970
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800fdec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fdee:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800fdf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fdf2:	681b      	ldr	r3, [r3, #0]
 800fdf4:	2b00      	cmp	r3, #0
 800fdf6:	f040 80c6 	bne.w	800ff86 <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800fdfa:	4b80      	ldr	r3, [pc, #512]	; (800fffc <tcp_receive+0xf18>)
 800fdfc:	681a      	ldr	r2, [r3, #0]
 800fdfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe00:	68db      	ldr	r3, [r3, #12]
 800fe02:	685b      	ldr	r3, [r3, #4]
 800fe04:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800fe06:	2b00      	cmp	r3, #0
 800fe08:	f340 80bd 	ble.w	800ff86 <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800fe0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe0e:	68db      	ldr	r3, [r3, #12]
 800fe10:	899b      	ldrh	r3, [r3, #12]
 800fe12:	b29b      	uxth	r3, r3
 800fe14:	4618      	mov	r0, r3
 800fe16:	f7fa f999 	bl	800a14c <lwip_htons>
 800fe1a:	4603      	mov	r3, r0
 800fe1c:	b2db      	uxtb	r3, r3
 800fe1e:	f003 0301 	and.w	r3, r3, #1
 800fe22:	2b00      	cmp	r3, #0
 800fe24:	f040 80bf 	bne.w	800ffa6 <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800fe28:	4875      	ldr	r0, [pc, #468]	; (8010000 <tcp_receive+0xf1c>)
 800fe2a:	f7fd fa39 	bl	800d2a0 <tcp_seg_copy>
 800fe2e:	4602      	mov	r2, r0
 800fe30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe32:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800fe34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe36:	681b      	ldr	r3, [r3, #0]
 800fe38:	2b00      	cmp	r3, #0
 800fe3a:	f000 80b6 	beq.w	800ffaa <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800fe3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe40:	68db      	ldr	r3, [r3, #12]
 800fe42:	685b      	ldr	r3, [r3, #4]
 800fe44:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fe46:	8912      	ldrh	r2, [r2, #8]
 800fe48:	441a      	add	r2, r3
 800fe4a:	4b6c      	ldr	r3, [pc, #432]	; (800fffc <tcp_receive+0xf18>)
 800fe4c:	681b      	ldr	r3, [r3, #0]
 800fe4e:	1ad3      	subs	r3, r2, r3
 800fe50:	2b00      	cmp	r3, #0
 800fe52:	dd12      	ble.n	800fe7a <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800fe54:	4b69      	ldr	r3, [pc, #420]	; (800fffc <tcp_receive+0xf18>)
 800fe56:	681b      	ldr	r3, [r3, #0]
 800fe58:	b29a      	uxth	r2, r3
 800fe5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe5c:	68db      	ldr	r3, [r3, #12]
 800fe5e:	685b      	ldr	r3, [r3, #4]
 800fe60:	b29b      	uxth	r3, r3
 800fe62:	1ad3      	subs	r3, r2, r3
 800fe64:	b29a      	uxth	r2, r3
 800fe66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe68:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800fe6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe6c:	685a      	ldr	r2, [r3, #4]
 800fe6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe70:	891b      	ldrh	r3, [r3, #8]
 800fe72:	4619      	mov	r1, r3
 800fe74:	4610      	mov	r0, r2
 800fe76:	f7fb fbe1 	bl	800b63c <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800fe7a:	4b62      	ldr	r3, [pc, #392]	; (8010004 <tcp_receive+0xf20>)
 800fe7c:	881b      	ldrh	r3, [r3, #0]
 800fe7e:	461a      	mov	r2, r3
 800fe80:	4b5e      	ldr	r3, [pc, #376]	; (800fffc <tcp_receive+0xf18>)
 800fe82:	681b      	ldr	r3, [r3, #0]
 800fe84:	441a      	add	r2, r3
 800fe86:	687b      	ldr	r3, [r7, #4]
 800fe88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe8a:	6879      	ldr	r1, [r7, #4]
 800fe8c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800fe8e:	440b      	add	r3, r1
 800fe90:	1ad3      	subs	r3, r2, r3
 800fe92:	2b00      	cmp	r3, #0
 800fe94:	f340 8089 	ble.w	800ffaa <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800fe98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe9a:	681b      	ldr	r3, [r3, #0]
 800fe9c:	68db      	ldr	r3, [r3, #12]
 800fe9e:	899b      	ldrh	r3, [r3, #12]
 800fea0:	b29b      	uxth	r3, r3
 800fea2:	4618      	mov	r0, r3
 800fea4:	f7fa f952 	bl	800a14c <lwip_htons>
 800fea8:	4603      	mov	r3, r0
 800feaa:	b2db      	uxtb	r3, r3
 800feac:	f003 0301 	and.w	r3, r3, #1
 800feb0:	2b00      	cmp	r3, #0
 800feb2:	d022      	beq.n	800fefa <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800feb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800feb6:	681b      	ldr	r3, [r3, #0]
 800feb8:	68db      	ldr	r3, [r3, #12]
 800feba:	899b      	ldrh	r3, [r3, #12]
 800febc:	b29b      	uxth	r3, r3
 800febe:	b21b      	sxth	r3, r3
 800fec0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800fec4:	b21c      	sxth	r4, r3
 800fec6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fec8:	681b      	ldr	r3, [r3, #0]
 800feca:	68db      	ldr	r3, [r3, #12]
 800fecc:	899b      	ldrh	r3, [r3, #12]
 800fece:	b29b      	uxth	r3, r3
 800fed0:	4618      	mov	r0, r3
 800fed2:	f7fa f93b 	bl	800a14c <lwip_htons>
 800fed6:	4603      	mov	r3, r0
 800fed8:	b2db      	uxtb	r3, r3
 800feda:	b29b      	uxth	r3, r3
 800fedc:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800fee0:	b29b      	uxth	r3, r3
 800fee2:	4618      	mov	r0, r3
 800fee4:	f7fa f932 	bl	800a14c <lwip_htons>
 800fee8:	4603      	mov	r3, r0
 800feea:	b21b      	sxth	r3, r3
 800feec:	4323      	orrs	r3, r4
 800feee:	b21a      	sxth	r2, r3
 800fef0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fef2:	681b      	ldr	r3, [r3, #0]
 800fef4:	68db      	ldr	r3, [r3, #12]
 800fef6:	b292      	uxth	r2, r2
 800fef8:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800fefa:	687b      	ldr	r3, [r7, #4]
 800fefc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fefe:	b29a      	uxth	r2, r3
 800ff00:	687b      	ldr	r3, [r7, #4]
 800ff02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ff04:	4413      	add	r3, r2
 800ff06:	b299      	uxth	r1, r3
 800ff08:	4b3c      	ldr	r3, [pc, #240]	; (800fffc <tcp_receive+0xf18>)
 800ff0a:	681b      	ldr	r3, [r3, #0]
 800ff0c:	b29a      	uxth	r2, r3
 800ff0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff10:	681b      	ldr	r3, [r3, #0]
 800ff12:	1a8a      	subs	r2, r1, r2
 800ff14:	b292      	uxth	r2, r2
 800ff16:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800ff18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff1a:	681b      	ldr	r3, [r3, #0]
 800ff1c:	685a      	ldr	r2, [r3, #4]
 800ff1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff20:	681b      	ldr	r3, [r3, #0]
 800ff22:	891b      	ldrh	r3, [r3, #8]
 800ff24:	4619      	mov	r1, r3
 800ff26:	4610      	mov	r0, r2
 800ff28:	f7fb fb88 	bl	800b63c <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800ff2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff2e:	681b      	ldr	r3, [r3, #0]
 800ff30:	891c      	ldrh	r4, [r3, #8]
 800ff32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff34:	681b      	ldr	r3, [r3, #0]
 800ff36:	68db      	ldr	r3, [r3, #12]
 800ff38:	899b      	ldrh	r3, [r3, #12]
 800ff3a:	b29b      	uxth	r3, r3
 800ff3c:	4618      	mov	r0, r3
 800ff3e:	f7fa f905 	bl	800a14c <lwip_htons>
 800ff42:	4603      	mov	r3, r0
 800ff44:	b2db      	uxtb	r3, r3
 800ff46:	f003 0303 	and.w	r3, r3, #3
 800ff4a:	2b00      	cmp	r3, #0
 800ff4c:	d001      	beq.n	800ff52 <tcp_receive+0xe6e>
 800ff4e:	2301      	movs	r3, #1
 800ff50:	e000      	b.n	800ff54 <tcp_receive+0xe70>
 800ff52:	2300      	movs	r3, #0
 800ff54:	4423      	add	r3, r4
 800ff56:	b29a      	uxth	r2, r3
 800ff58:	4b2a      	ldr	r3, [pc, #168]	; (8010004 <tcp_receive+0xf20>)
 800ff5a:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800ff5c:	4b29      	ldr	r3, [pc, #164]	; (8010004 <tcp_receive+0xf20>)
 800ff5e:	881b      	ldrh	r3, [r3, #0]
 800ff60:	461a      	mov	r2, r3
 800ff62:	4b26      	ldr	r3, [pc, #152]	; (800fffc <tcp_receive+0xf18>)
 800ff64:	681b      	ldr	r3, [r3, #0]
 800ff66:	441a      	add	r2, r3
 800ff68:	687b      	ldr	r3, [r7, #4]
 800ff6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff6c:	6879      	ldr	r1, [r7, #4]
 800ff6e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800ff70:	440b      	add	r3, r1
 800ff72:	429a      	cmp	r2, r3
 800ff74:	d019      	beq.n	800ffaa <tcp_receive+0xec6>
 800ff76:	4b24      	ldr	r3, [pc, #144]	; (8010008 <tcp_receive+0xf24>)
 800ff78:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 800ff7c:	4923      	ldr	r1, [pc, #140]	; (801000c <tcp_receive+0xf28>)
 800ff7e:	4824      	ldr	r0, [pc, #144]	; (8010010 <tcp_receive+0xf2c>)
 800ff80:	f007 fb88 	bl	8017694 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800ff84:	e011      	b.n	800ffaa <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800ff86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff88:	681b      	ldr	r3, [r3, #0]
 800ff8a:	63bb      	str	r3, [r7, #56]	; 0x38
 800ff8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff8e:	2b00      	cmp	r3, #0
 800ff90:	f47f aea4 	bne.w	800fcdc <tcp_receive+0xbf8>
 800ff94:	e00a      	b.n	800ffac <tcp_receive+0xec8>
                break;
 800ff96:	bf00      	nop
 800ff98:	e008      	b.n	800ffac <tcp_receive+0xec8>
                break;
 800ff9a:	bf00      	nop
 800ff9c:	e006      	b.n	800ffac <tcp_receive+0xec8>
                  break;
 800ff9e:	bf00      	nop
 800ffa0:	e004      	b.n	800ffac <tcp_receive+0xec8>
                  break;
 800ffa2:	bf00      	nop
 800ffa4:	e002      	b.n	800ffac <tcp_receive+0xec8>
                  break;
 800ffa6:	bf00      	nop
 800ffa8:	e000      	b.n	800ffac <tcp_receive+0xec8>
                break;
 800ffaa:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800ffac:	6878      	ldr	r0, [r7, #4]
 800ffae:	f001 fe8b 	bl	8011cc8 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800ffb2:	e003      	b.n	800ffbc <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800ffb4:	6878      	ldr	r0, [r7, #4]
 800ffb6:	f001 fe87 	bl	8011cc8 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800ffba:	e01a      	b.n	800fff2 <tcp_receive+0xf0e>
 800ffbc:	e019      	b.n	800fff2 <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800ffbe:	4b0f      	ldr	r3, [pc, #60]	; (800fffc <tcp_receive+0xf18>)
 800ffc0:	681a      	ldr	r2, [r3, #0]
 800ffc2:	687b      	ldr	r3, [r7, #4]
 800ffc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ffc6:	1ad3      	subs	r3, r2, r3
 800ffc8:	2b00      	cmp	r3, #0
 800ffca:	db0a      	blt.n	800ffe2 <tcp_receive+0xefe>
 800ffcc:	4b0b      	ldr	r3, [pc, #44]	; (800fffc <tcp_receive+0xf18>)
 800ffce:	681a      	ldr	r2, [r3, #0]
 800ffd0:	687b      	ldr	r3, [r7, #4]
 800ffd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ffd4:	6879      	ldr	r1, [r7, #4]
 800ffd6:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800ffd8:	440b      	add	r3, r1
 800ffda:	1ad3      	subs	r3, r2, r3
 800ffdc:	3301      	adds	r3, #1
 800ffde:	2b00      	cmp	r3, #0
 800ffe0:	dd07      	ble.n	800fff2 <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 800ffe2:	687b      	ldr	r3, [r7, #4]
 800ffe4:	8b5b      	ldrh	r3, [r3, #26]
 800ffe6:	f043 0302 	orr.w	r3, r3, #2
 800ffea:	b29a      	uxth	r2, r3
 800ffec:	687b      	ldr	r3, [r7, #4]
 800ffee:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800fff0:	e7ff      	b.n	800fff2 <tcp_receive+0xf0e>
 800fff2:	bf00      	nop
 800fff4:	3750      	adds	r7, #80	; 0x50
 800fff6:	46bd      	mov	sp, r7
 800fff8:	bdb0      	pop	{r4, r5, r7, pc}
 800fffa:	bf00      	nop
 800fffc:	20010970 	.word	0x20010970
 8010000:	20010950 	.word	0x20010950
 8010004:	2001097a 	.word	0x2001097a
 8010008:	0801a304 	.word	0x0801a304
 801000c:	0801a6ac 	.word	0x0801a6ac
 8010010:	0801a350 	.word	0x0801a350

08010014 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8010014:	b480      	push	{r7}
 8010016:	b083      	sub	sp, #12
 8010018:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 801001a:	4b15      	ldr	r3, [pc, #84]	; (8010070 <tcp_get_next_optbyte+0x5c>)
 801001c:	881b      	ldrh	r3, [r3, #0]
 801001e:	1c5a      	adds	r2, r3, #1
 8010020:	b291      	uxth	r1, r2
 8010022:	4a13      	ldr	r2, [pc, #76]	; (8010070 <tcp_get_next_optbyte+0x5c>)
 8010024:	8011      	strh	r1, [r2, #0]
 8010026:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8010028:	4b12      	ldr	r3, [pc, #72]	; (8010074 <tcp_get_next_optbyte+0x60>)
 801002a:	681b      	ldr	r3, [r3, #0]
 801002c:	2b00      	cmp	r3, #0
 801002e:	d004      	beq.n	801003a <tcp_get_next_optbyte+0x26>
 8010030:	4b11      	ldr	r3, [pc, #68]	; (8010078 <tcp_get_next_optbyte+0x64>)
 8010032:	881b      	ldrh	r3, [r3, #0]
 8010034:	88fa      	ldrh	r2, [r7, #6]
 8010036:	429a      	cmp	r2, r3
 8010038:	d208      	bcs.n	801004c <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 801003a:	4b10      	ldr	r3, [pc, #64]	; (801007c <tcp_get_next_optbyte+0x68>)
 801003c:	681b      	ldr	r3, [r3, #0]
 801003e:	3314      	adds	r3, #20
 8010040:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8010042:	88fb      	ldrh	r3, [r7, #6]
 8010044:	683a      	ldr	r2, [r7, #0]
 8010046:	4413      	add	r3, r2
 8010048:	781b      	ldrb	r3, [r3, #0]
 801004a:	e00b      	b.n	8010064 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 801004c:	88fb      	ldrh	r3, [r7, #6]
 801004e:	b2da      	uxtb	r2, r3
 8010050:	4b09      	ldr	r3, [pc, #36]	; (8010078 <tcp_get_next_optbyte+0x64>)
 8010052:	881b      	ldrh	r3, [r3, #0]
 8010054:	b2db      	uxtb	r3, r3
 8010056:	1ad3      	subs	r3, r2, r3
 8010058:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 801005a:	4b06      	ldr	r3, [pc, #24]	; (8010074 <tcp_get_next_optbyte+0x60>)
 801005c:	681a      	ldr	r2, [r3, #0]
 801005e:	797b      	ldrb	r3, [r7, #5]
 8010060:	4413      	add	r3, r2
 8010062:	781b      	ldrb	r3, [r3, #0]
  }
}
 8010064:	4618      	mov	r0, r3
 8010066:	370c      	adds	r7, #12
 8010068:	46bd      	mov	sp, r7
 801006a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801006e:	4770      	bx	lr
 8010070:	2001096c 	.word	0x2001096c
 8010074:	20010968 	.word	0x20010968
 8010078:	20010966 	.word	0x20010966
 801007c:	20010960 	.word	0x20010960

08010080 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8010080:	b580      	push	{r7, lr}
 8010082:	b084      	sub	sp, #16
 8010084:	af00      	add	r7, sp, #0
 8010086:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8010088:	687b      	ldr	r3, [r7, #4]
 801008a:	2b00      	cmp	r3, #0
 801008c:	d106      	bne.n	801009c <tcp_parseopt+0x1c>
 801008e:	4b32      	ldr	r3, [pc, #200]	; (8010158 <tcp_parseopt+0xd8>)
 8010090:	f240 727d 	movw	r2, #1917	; 0x77d
 8010094:	4931      	ldr	r1, [pc, #196]	; (801015c <tcp_parseopt+0xdc>)
 8010096:	4832      	ldr	r0, [pc, #200]	; (8010160 <tcp_parseopt+0xe0>)
 8010098:	f007 fafc 	bl	8017694 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 801009c:	4b31      	ldr	r3, [pc, #196]	; (8010164 <tcp_parseopt+0xe4>)
 801009e:	881b      	ldrh	r3, [r3, #0]
 80100a0:	2b00      	cmp	r3, #0
 80100a2:	d055      	beq.n	8010150 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80100a4:	4b30      	ldr	r3, [pc, #192]	; (8010168 <tcp_parseopt+0xe8>)
 80100a6:	2200      	movs	r2, #0
 80100a8:	801a      	strh	r2, [r3, #0]
 80100aa:	e045      	b.n	8010138 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 80100ac:	f7ff ffb2 	bl	8010014 <tcp_get_next_optbyte>
 80100b0:	4603      	mov	r3, r0
 80100b2:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 80100b4:	7bfb      	ldrb	r3, [r7, #15]
 80100b6:	2b02      	cmp	r3, #2
 80100b8:	d006      	beq.n	80100c8 <tcp_parseopt+0x48>
 80100ba:	2b02      	cmp	r3, #2
 80100bc:	dc2b      	bgt.n	8010116 <tcp_parseopt+0x96>
 80100be:	2b00      	cmp	r3, #0
 80100c0:	d041      	beq.n	8010146 <tcp_parseopt+0xc6>
 80100c2:	2b01      	cmp	r3, #1
 80100c4:	d127      	bne.n	8010116 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 80100c6:	e037      	b.n	8010138 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 80100c8:	f7ff ffa4 	bl	8010014 <tcp_get_next_optbyte>
 80100cc:	4603      	mov	r3, r0
 80100ce:	2b04      	cmp	r3, #4
 80100d0:	d13b      	bne.n	801014a <tcp_parseopt+0xca>
 80100d2:	4b25      	ldr	r3, [pc, #148]	; (8010168 <tcp_parseopt+0xe8>)
 80100d4:	881b      	ldrh	r3, [r3, #0]
 80100d6:	3301      	adds	r3, #1
 80100d8:	4a22      	ldr	r2, [pc, #136]	; (8010164 <tcp_parseopt+0xe4>)
 80100da:	8812      	ldrh	r2, [r2, #0]
 80100dc:	4293      	cmp	r3, r2
 80100de:	da34      	bge.n	801014a <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 80100e0:	f7ff ff98 	bl	8010014 <tcp_get_next_optbyte>
 80100e4:	4603      	mov	r3, r0
 80100e6:	b29b      	uxth	r3, r3
 80100e8:	021b      	lsls	r3, r3, #8
 80100ea:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 80100ec:	f7ff ff92 	bl	8010014 <tcp_get_next_optbyte>
 80100f0:	4603      	mov	r3, r0
 80100f2:	b29a      	uxth	r2, r3
 80100f4:	89bb      	ldrh	r3, [r7, #12]
 80100f6:	4313      	orrs	r3, r2
 80100f8:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 80100fa:	89bb      	ldrh	r3, [r7, #12]
 80100fc:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8010100:	d804      	bhi.n	801010c <tcp_parseopt+0x8c>
 8010102:	89bb      	ldrh	r3, [r7, #12]
 8010104:	2b00      	cmp	r3, #0
 8010106:	d001      	beq.n	801010c <tcp_parseopt+0x8c>
 8010108:	89ba      	ldrh	r2, [r7, #12]
 801010a:	e001      	b.n	8010110 <tcp_parseopt+0x90>
 801010c:	f44f 7206 	mov.w	r2, #536	; 0x218
 8010110:	687b      	ldr	r3, [r7, #4]
 8010112:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8010114:	e010      	b.n	8010138 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8010116:	f7ff ff7d 	bl	8010014 <tcp_get_next_optbyte>
 801011a:	4603      	mov	r3, r0
 801011c:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 801011e:	7afb      	ldrb	r3, [r7, #11]
 8010120:	2b01      	cmp	r3, #1
 8010122:	d914      	bls.n	801014e <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8010124:	7afb      	ldrb	r3, [r7, #11]
 8010126:	b29a      	uxth	r2, r3
 8010128:	4b0f      	ldr	r3, [pc, #60]	; (8010168 <tcp_parseopt+0xe8>)
 801012a:	881b      	ldrh	r3, [r3, #0]
 801012c:	4413      	add	r3, r2
 801012e:	b29b      	uxth	r3, r3
 8010130:	3b02      	subs	r3, #2
 8010132:	b29a      	uxth	r2, r3
 8010134:	4b0c      	ldr	r3, [pc, #48]	; (8010168 <tcp_parseopt+0xe8>)
 8010136:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8010138:	4b0b      	ldr	r3, [pc, #44]	; (8010168 <tcp_parseopt+0xe8>)
 801013a:	881a      	ldrh	r2, [r3, #0]
 801013c:	4b09      	ldr	r3, [pc, #36]	; (8010164 <tcp_parseopt+0xe4>)
 801013e:	881b      	ldrh	r3, [r3, #0]
 8010140:	429a      	cmp	r2, r3
 8010142:	d3b3      	bcc.n	80100ac <tcp_parseopt+0x2c>
 8010144:	e004      	b.n	8010150 <tcp_parseopt+0xd0>
          return;
 8010146:	bf00      	nop
 8010148:	e002      	b.n	8010150 <tcp_parseopt+0xd0>
            return;
 801014a:	bf00      	nop
 801014c:	e000      	b.n	8010150 <tcp_parseopt+0xd0>
            return;
 801014e:	bf00      	nop
      }
    }
  }
}
 8010150:	3710      	adds	r7, #16
 8010152:	46bd      	mov	sp, r7
 8010154:	bd80      	pop	{r7, pc}
 8010156:	bf00      	nop
 8010158:	0801a304 	.word	0x0801a304
 801015c:	0801a768 	.word	0x0801a768
 8010160:	0801a350 	.word	0x0801a350
 8010164:	20010964 	.word	0x20010964
 8010168:	2001096c 	.word	0x2001096c

0801016c <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 801016c:	b480      	push	{r7}
 801016e:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8010170:	4b05      	ldr	r3, [pc, #20]	; (8010188 <tcp_trigger_input_pcb_close+0x1c>)
 8010172:	781b      	ldrb	r3, [r3, #0]
 8010174:	f043 0310 	orr.w	r3, r3, #16
 8010178:	b2da      	uxtb	r2, r3
 801017a:	4b03      	ldr	r3, [pc, #12]	; (8010188 <tcp_trigger_input_pcb_close+0x1c>)
 801017c:	701a      	strb	r2, [r3, #0]
}
 801017e:	bf00      	nop
 8010180:	46bd      	mov	sp, r7
 8010182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010186:	4770      	bx	lr
 8010188:	2001097d 	.word	0x2001097d

0801018c <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 801018c:	b580      	push	{r7, lr}
 801018e:	b084      	sub	sp, #16
 8010190:	af00      	add	r7, sp, #0
 8010192:	60f8      	str	r0, [r7, #12]
 8010194:	60b9      	str	r1, [r7, #8]
 8010196:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8010198:	68fb      	ldr	r3, [r7, #12]
 801019a:	2b00      	cmp	r3, #0
 801019c:	d00a      	beq.n	80101b4 <tcp_route+0x28>
 801019e:	68fb      	ldr	r3, [r7, #12]
 80101a0:	7a1b      	ldrb	r3, [r3, #8]
 80101a2:	2b00      	cmp	r3, #0
 80101a4:	d006      	beq.n	80101b4 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 80101a6:	68fb      	ldr	r3, [r7, #12]
 80101a8:	7a1b      	ldrb	r3, [r3, #8]
 80101aa:	4618      	mov	r0, r3
 80101ac:	f7fb f83e 	bl	800b22c <netif_get_by_index>
 80101b0:	4603      	mov	r3, r0
 80101b2:	e003      	b.n	80101bc <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 80101b4:	6878      	ldr	r0, [r7, #4]
 80101b6:	f005 fca9 	bl	8015b0c <ip4_route>
 80101ba:	4603      	mov	r3, r0
  }
}
 80101bc:	4618      	mov	r0, r3
 80101be:	3710      	adds	r7, #16
 80101c0:	46bd      	mov	sp, r7
 80101c2:	bd80      	pop	{r7, pc}

080101c4 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 80101c4:	b590      	push	{r4, r7, lr}
 80101c6:	b087      	sub	sp, #28
 80101c8:	af00      	add	r7, sp, #0
 80101ca:	60f8      	str	r0, [r7, #12]
 80101cc:	60b9      	str	r1, [r7, #8]
 80101ce:	603b      	str	r3, [r7, #0]
 80101d0:	4613      	mov	r3, r2
 80101d2:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 80101d4:	68fb      	ldr	r3, [r7, #12]
 80101d6:	2b00      	cmp	r3, #0
 80101d8:	d105      	bne.n	80101e6 <tcp_create_segment+0x22>
 80101da:	4b44      	ldr	r3, [pc, #272]	; (80102ec <tcp_create_segment+0x128>)
 80101dc:	22a3      	movs	r2, #163	; 0xa3
 80101de:	4944      	ldr	r1, [pc, #272]	; (80102f0 <tcp_create_segment+0x12c>)
 80101e0:	4844      	ldr	r0, [pc, #272]	; (80102f4 <tcp_create_segment+0x130>)
 80101e2:	f007 fa57 	bl	8017694 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 80101e6:	68bb      	ldr	r3, [r7, #8]
 80101e8:	2b00      	cmp	r3, #0
 80101ea:	d105      	bne.n	80101f8 <tcp_create_segment+0x34>
 80101ec:	4b3f      	ldr	r3, [pc, #252]	; (80102ec <tcp_create_segment+0x128>)
 80101ee:	22a4      	movs	r2, #164	; 0xa4
 80101f0:	4941      	ldr	r1, [pc, #260]	; (80102f8 <tcp_create_segment+0x134>)
 80101f2:	4840      	ldr	r0, [pc, #256]	; (80102f4 <tcp_create_segment+0x130>)
 80101f4:	f007 fa4e 	bl	8017694 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80101f8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80101fc:	009b      	lsls	r3, r3, #2
 80101fe:	b2db      	uxtb	r3, r3
 8010200:	f003 0304 	and.w	r3, r3, #4
 8010204:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8010206:	2003      	movs	r0, #3
 8010208:	f7fa fc78 	bl	800aafc <memp_malloc>
 801020c:	6138      	str	r0, [r7, #16]
 801020e:	693b      	ldr	r3, [r7, #16]
 8010210:	2b00      	cmp	r3, #0
 8010212:	d104      	bne.n	801021e <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8010214:	68b8      	ldr	r0, [r7, #8]
 8010216:	f7fb fb97 	bl	800b948 <pbuf_free>
    return NULL;
 801021a:	2300      	movs	r3, #0
 801021c:	e061      	b.n	80102e2 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 801021e:	693b      	ldr	r3, [r7, #16]
 8010220:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8010224:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8010226:	693b      	ldr	r3, [r7, #16]
 8010228:	2200      	movs	r2, #0
 801022a:	601a      	str	r2, [r3, #0]
  seg->p = p;
 801022c:	693b      	ldr	r3, [r7, #16]
 801022e:	68ba      	ldr	r2, [r7, #8]
 8010230:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8010232:	68bb      	ldr	r3, [r7, #8]
 8010234:	891a      	ldrh	r2, [r3, #8]
 8010236:	7dfb      	ldrb	r3, [r7, #23]
 8010238:	b29b      	uxth	r3, r3
 801023a:	429a      	cmp	r2, r3
 801023c:	d205      	bcs.n	801024a <tcp_create_segment+0x86>
 801023e:	4b2b      	ldr	r3, [pc, #172]	; (80102ec <tcp_create_segment+0x128>)
 8010240:	22b0      	movs	r2, #176	; 0xb0
 8010242:	492e      	ldr	r1, [pc, #184]	; (80102fc <tcp_create_segment+0x138>)
 8010244:	482b      	ldr	r0, [pc, #172]	; (80102f4 <tcp_create_segment+0x130>)
 8010246:	f007 fa25 	bl	8017694 <iprintf>
  seg->len = p->tot_len - optlen;
 801024a:	68bb      	ldr	r3, [r7, #8]
 801024c:	891a      	ldrh	r2, [r3, #8]
 801024e:	7dfb      	ldrb	r3, [r7, #23]
 8010250:	b29b      	uxth	r3, r3
 8010252:	1ad3      	subs	r3, r2, r3
 8010254:	b29a      	uxth	r2, r3
 8010256:	693b      	ldr	r3, [r7, #16]
 8010258:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 801025a:	2114      	movs	r1, #20
 801025c:	68b8      	ldr	r0, [r7, #8]
 801025e:	f7fb fadd 	bl	800b81c <pbuf_add_header>
 8010262:	4603      	mov	r3, r0
 8010264:	2b00      	cmp	r3, #0
 8010266:	d004      	beq.n	8010272 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8010268:	6938      	ldr	r0, [r7, #16]
 801026a:	f7fd f800 	bl	800d26e <tcp_seg_free>
    return NULL;
 801026e:	2300      	movs	r3, #0
 8010270:	e037      	b.n	80102e2 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8010272:	693b      	ldr	r3, [r7, #16]
 8010274:	685b      	ldr	r3, [r3, #4]
 8010276:	685a      	ldr	r2, [r3, #4]
 8010278:	693b      	ldr	r3, [r7, #16]
 801027a:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 801027c:	68fb      	ldr	r3, [r7, #12]
 801027e:	8ada      	ldrh	r2, [r3, #22]
 8010280:	693b      	ldr	r3, [r7, #16]
 8010282:	68dc      	ldr	r4, [r3, #12]
 8010284:	4610      	mov	r0, r2
 8010286:	f7f9 ff61 	bl	800a14c <lwip_htons>
 801028a:	4603      	mov	r3, r0
 801028c:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 801028e:	68fb      	ldr	r3, [r7, #12]
 8010290:	8b1a      	ldrh	r2, [r3, #24]
 8010292:	693b      	ldr	r3, [r7, #16]
 8010294:	68dc      	ldr	r4, [r3, #12]
 8010296:	4610      	mov	r0, r2
 8010298:	f7f9 ff58 	bl	800a14c <lwip_htons>
 801029c:	4603      	mov	r3, r0
 801029e:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 80102a0:	693b      	ldr	r3, [r7, #16]
 80102a2:	68dc      	ldr	r4, [r3, #12]
 80102a4:	6838      	ldr	r0, [r7, #0]
 80102a6:	f7f9 ff66 	bl	800a176 <lwip_htonl>
 80102aa:	4603      	mov	r3, r0
 80102ac:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 80102ae:	7dfb      	ldrb	r3, [r7, #23]
 80102b0:	089b      	lsrs	r3, r3, #2
 80102b2:	b2db      	uxtb	r3, r3
 80102b4:	b29b      	uxth	r3, r3
 80102b6:	3305      	adds	r3, #5
 80102b8:	b29b      	uxth	r3, r3
 80102ba:	031b      	lsls	r3, r3, #12
 80102bc:	b29a      	uxth	r2, r3
 80102be:	79fb      	ldrb	r3, [r7, #7]
 80102c0:	b29b      	uxth	r3, r3
 80102c2:	4313      	orrs	r3, r2
 80102c4:	b29a      	uxth	r2, r3
 80102c6:	693b      	ldr	r3, [r7, #16]
 80102c8:	68dc      	ldr	r4, [r3, #12]
 80102ca:	4610      	mov	r0, r2
 80102cc:	f7f9 ff3e 	bl	800a14c <lwip_htons>
 80102d0:	4603      	mov	r3, r0
 80102d2:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 80102d4:	693b      	ldr	r3, [r7, #16]
 80102d6:	68db      	ldr	r3, [r3, #12]
 80102d8:	2200      	movs	r2, #0
 80102da:	749a      	strb	r2, [r3, #18]
 80102dc:	2200      	movs	r2, #0
 80102de:	74da      	strb	r2, [r3, #19]
  return seg;
 80102e0:	693b      	ldr	r3, [r7, #16]
}
 80102e2:	4618      	mov	r0, r3
 80102e4:	371c      	adds	r7, #28
 80102e6:	46bd      	mov	sp, r7
 80102e8:	bd90      	pop	{r4, r7, pc}
 80102ea:	bf00      	nop
 80102ec:	0801a784 	.word	0x0801a784
 80102f0:	0801a7b8 	.word	0x0801a7b8
 80102f4:	0801a7d8 	.word	0x0801a7d8
 80102f8:	0801a800 	.word	0x0801a800
 80102fc:	0801a824 	.word	0x0801a824

08010300 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8010300:	b580      	push	{r7, lr}
 8010302:	b086      	sub	sp, #24
 8010304:	af00      	add	r7, sp, #0
 8010306:	607b      	str	r3, [r7, #4]
 8010308:	4603      	mov	r3, r0
 801030a:	73fb      	strb	r3, [r7, #15]
 801030c:	460b      	mov	r3, r1
 801030e:	81bb      	strh	r3, [r7, #12]
 8010310:	4613      	mov	r3, r2
 8010312:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8010314:	89bb      	ldrh	r3, [r7, #12]
 8010316:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8010318:	687b      	ldr	r3, [r7, #4]
 801031a:	2b00      	cmp	r3, #0
 801031c:	d105      	bne.n	801032a <tcp_pbuf_prealloc+0x2a>
 801031e:	4b30      	ldr	r3, [pc, #192]	; (80103e0 <tcp_pbuf_prealloc+0xe0>)
 8010320:	22e8      	movs	r2, #232	; 0xe8
 8010322:	4930      	ldr	r1, [pc, #192]	; (80103e4 <tcp_pbuf_prealloc+0xe4>)
 8010324:	4830      	ldr	r0, [pc, #192]	; (80103e8 <tcp_pbuf_prealloc+0xe8>)
 8010326:	f007 f9b5 	bl	8017694 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 801032a:	6a3b      	ldr	r3, [r7, #32]
 801032c:	2b00      	cmp	r3, #0
 801032e:	d105      	bne.n	801033c <tcp_pbuf_prealloc+0x3c>
 8010330:	4b2b      	ldr	r3, [pc, #172]	; (80103e0 <tcp_pbuf_prealloc+0xe0>)
 8010332:	22e9      	movs	r2, #233	; 0xe9
 8010334:	492d      	ldr	r1, [pc, #180]	; (80103ec <tcp_pbuf_prealloc+0xec>)
 8010336:	482c      	ldr	r0, [pc, #176]	; (80103e8 <tcp_pbuf_prealloc+0xe8>)
 8010338:	f007 f9ac 	bl	8017694 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 801033c:	89ba      	ldrh	r2, [r7, #12]
 801033e:	897b      	ldrh	r3, [r7, #10]
 8010340:	429a      	cmp	r2, r3
 8010342:	d221      	bcs.n	8010388 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8010344:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8010348:	f003 0302 	and.w	r3, r3, #2
 801034c:	2b00      	cmp	r3, #0
 801034e:	d111      	bne.n	8010374 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8010350:	6a3b      	ldr	r3, [r7, #32]
 8010352:	8b5b      	ldrh	r3, [r3, #26]
 8010354:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8010358:	2b00      	cmp	r3, #0
 801035a:	d115      	bne.n	8010388 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 801035c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8010360:	2b00      	cmp	r3, #0
 8010362:	d007      	beq.n	8010374 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 8010364:	6a3b      	ldr	r3, [r7, #32]
 8010366:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 8010368:	2b00      	cmp	r3, #0
 801036a:	d103      	bne.n	8010374 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 801036c:	6a3b      	ldr	r3, [r7, #32]
 801036e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 8010370:	2b00      	cmp	r3, #0
 8010372:	d009      	beq.n	8010388 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8010374:	89bb      	ldrh	r3, [r7, #12]
 8010376:	f203 231b 	addw	r3, r3, #539	; 0x21b
 801037a:	f023 0203 	bic.w	r2, r3, #3
 801037e:	897b      	ldrh	r3, [r7, #10]
 8010380:	4293      	cmp	r3, r2
 8010382:	bf28      	it	cs
 8010384:	4613      	movcs	r3, r2
 8010386:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8010388:	8af9      	ldrh	r1, [r7, #22]
 801038a:	7bfb      	ldrb	r3, [r7, #15]
 801038c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010390:	4618      	mov	r0, r3
 8010392:	f7fa fff5 	bl	800b380 <pbuf_alloc>
 8010396:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8010398:	693b      	ldr	r3, [r7, #16]
 801039a:	2b00      	cmp	r3, #0
 801039c:	d101      	bne.n	80103a2 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 801039e:	2300      	movs	r3, #0
 80103a0:	e019      	b.n	80103d6 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 80103a2:	693b      	ldr	r3, [r7, #16]
 80103a4:	681b      	ldr	r3, [r3, #0]
 80103a6:	2b00      	cmp	r3, #0
 80103a8:	d006      	beq.n	80103b8 <tcp_pbuf_prealloc+0xb8>
 80103aa:	4b0d      	ldr	r3, [pc, #52]	; (80103e0 <tcp_pbuf_prealloc+0xe0>)
 80103ac:	f240 120b 	movw	r2, #267	; 0x10b
 80103b0:	490f      	ldr	r1, [pc, #60]	; (80103f0 <tcp_pbuf_prealloc+0xf0>)
 80103b2:	480d      	ldr	r0, [pc, #52]	; (80103e8 <tcp_pbuf_prealloc+0xe8>)
 80103b4:	f007 f96e 	bl	8017694 <iprintf>
  *oversize = p->len - length;
 80103b8:	693b      	ldr	r3, [r7, #16]
 80103ba:	895a      	ldrh	r2, [r3, #10]
 80103bc:	89bb      	ldrh	r3, [r7, #12]
 80103be:	1ad3      	subs	r3, r2, r3
 80103c0:	b29a      	uxth	r2, r3
 80103c2:	687b      	ldr	r3, [r7, #4]
 80103c4:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 80103c6:	693b      	ldr	r3, [r7, #16]
 80103c8:	89ba      	ldrh	r2, [r7, #12]
 80103ca:	811a      	strh	r2, [r3, #8]
 80103cc:	693b      	ldr	r3, [r7, #16]
 80103ce:	891a      	ldrh	r2, [r3, #8]
 80103d0:	693b      	ldr	r3, [r7, #16]
 80103d2:	815a      	strh	r2, [r3, #10]
  return p;
 80103d4:	693b      	ldr	r3, [r7, #16]
}
 80103d6:	4618      	mov	r0, r3
 80103d8:	3718      	adds	r7, #24
 80103da:	46bd      	mov	sp, r7
 80103dc:	bd80      	pop	{r7, pc}
 80103de:	bf00      	nop
 80103e0:	0801a784 	.word	0x0801a784
 80103e4:	0801a83c 	.word	0x0801a83c
 80103e8:	0801a7d8 	.word	0x0801a7d8
 80103ec:	0801a860 	.word	0x0801a860
 80103f0:	0801a880 	.word	0x0801a880

080103f4 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 80103f4:	b580      	push	{r7, lr}
 80103f6:	b082      	sub	sp, #8
 80103f8:	af00      	add	r7, sp, #0
 80103fa:	6078      	str	r0, [r7, #4]
 80103fc:	460b      	mov	r3, r1
 80103fe:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8010400:	687b      	ldr	r3, [r7, #4]
 8010402:	2b00      	cmp	r3, #0
 8010404:	d106      	bne.n	8010414 <tcp_write_checks+0x20>
 8010406:	4b33      	ldr	r3, [pc, #204]	; (80104d4 <tcp_write_checks+0xe0>)
 8010408:	f240 1233 	movw	r2, #307	; 0x133
 801040c:	4932      	ldr	r1, [pc, #200]	; (80104d8 <tcp_write_checks+0xe4>)
 801040e:	4833      	ldr	r0, [pc, #204]	; (80104dc <tcp_write_checks+0xe8>)
 8010410:	f007 f940 	bl	8017694 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8010414:	687b      	ldr	r3, [r7, #4]
 8010416:	7d1b      	ldrb	r3, [r3, #20]
 8010418:	2b04      	cmp	r3, #4
 801041a:	d00e      	beq.n	801043a <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 801041c:	687b      	ldr	r3, [r7, #4]
 801041e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8010420:	2b07      	cmp	r3, #7
 8010422:	d00a      	beq.n	801043a <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 8010424:	687b      	ldr	r3, [r7, #4]
 8010426:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8010428:	2b02      	cmp	r3, #2
 801042a:	d006      	beq.n	801043a <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 801042c:	687b      	ldr	r3, [r7, #4]
 801042e:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8010430:	2b03      	cmp	r3, #3
 8010432:	d002      	beq.n	801043a <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8010434:	f06f 030a 	mvn.w	r3, #10
 8010438:	e048      	b.n	80104cc <tcp_write_checks+0xd8>
  } else if (len == 0) {
 801043a:	887b      	ldrh	r3, [r7, #2]
 801043c:	2b00      	cmp	r3, #0
 801043e:	d101      	bne.n	8010444 <tcp_write_checks+0x50>
    return ERR_OK;
 8010440:	2300      	movs	r3, #0
 8010442:	e043      	b.n	80104cc <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8010444:	687b      	ldr	r3, [r7, #4]
 8010446:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801044a:	887a      	ldrh	r2, [r7, #2]
 801044c:	429a      	cmp	r2, r3
 801044e:	d909      	bls.n	8010464 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8010450:	687b      	ldr	r3, [r7, #4]
 8010452:	8b5b      	ldrh	r3, [r3, #26]
 8010454:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010458:	b29a      	uxth	r2, r3
 801045a:	687b      	ldr	r3, [r7, #4]
 801045c:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 801045e:	f04f 33ff 	mov.w	r3, #4294967295
 8010462:	e033      	b.n	80104cc <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8010464:	687b      	ldr	r3, [r7, #4]
 8010466:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801046a:	2b08      	cmp	r3, #8
 801046c:	d909      	bls.n	8010482 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801046e:	687b      	ldr	r3, [r7, #4]
 8010470:	8b5b      	ldrh	r3, [r3, #26]
 8010472:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010476:	b29a      	uxth	r2, r3
 8010478:	687b      	ldr	r3, [r7, #4]
 801047a:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 801047c:	f04f 33ff 	mov.w	r3, #4294967295
 8010480:	e024      	b.n	80104cc <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 8010482:	687b      	ldr	r3, [r7, #4]
 8010484:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010488:	2b00      	cmp	r3, #0
 801048a:	d00f      	beq.n	80104ac <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 801048c:	687b      	ldr	r3, [r7, #4]
 801048e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010490:	2b00      	cmp	r3, #0
 8010492:	d11a      	bne.n	80104ca <tcp_write_checks+0xd6>
 8010494:	687b      	ldr	r3, [r7, #4]
 8010496:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010498:	2b00      	cmp	r3, #0
 801049a:	d116      	bne.n	80104ca <tcp_write_checks+0xd6>
 801049c:	4b0d      	ldr	r3, [pc, #52]	; (80104d4 <tcp_write_checks+0xe0>)
 801049e:	f240 1255 	movw	r2, #341	; 0x155
 80104a2:	490f      	ldr	r1, [pc, #60]	; (80104e0 <tcp_write_checks+0xec>)
 80104a4:	480d      	ldr	r0, [pc, #52]	; (80104dc <tcp_write_checks+0xe8>)
 80104a6:	f007 f8f5 	bl	8017694 <iprintf>
 80104aa:	e00e      	b.n	80104ca <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 80104ac:	687b      	ldr	r3, [r7, #4]
 80104ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80104b0:	2b00      	cmp	r3, #0
 80104b2:	d103      	bne.n	80104bc <tcp_write_checks+0xc8>
 80104b4:	687b      	ldr	r3, [r7, #4]
 80104b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80104b8:	2b00      	cmp	r3, #0
 80104ba:	d006      	beq.n	80104ca <tcp_write_checks+0xd6>
 80104bc:	4b05      	ldr	r3, [pc, #20]	; (80104d4 <tcp_write_checks+0xe0>)
 80104be:	f44f 72ac 	mov.w	r2, #344	; 0x158
 80104c2:	4908      	ldr	r1, [pc, #32]	; (80104e4 <tcp_write_checks+0xf0>)
 80104c4:	4805      	ldr	r0, [pc, #20]	; (80104dc <tcp_write_checks+0xe8>)
 80104c6:	f007 f8e5 	bl	8017694 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 80104ca:	2300      	movs	r3, #0
}
 80104cc:	4618      	mov	r0, r3
 80104ce:	3708      	adds	r7, #8
 80104d0:	46bd      	mov	sp, r7
 80104d2:	bd80      	pop	{r7, pc}
 80104d4:	0801a784 	.word	0x0801a784
 80104d8:	0801a894 	.word	0x0801a894
 80104dc:	0801a7d8 	.word	0x0801a7d8
 80104e0:	0801a8b4 	.word	0x0801a8b4
 80104e4:	0801a8f0 	.word	0x0801a8f0

080104e8 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 80104e8:	b590      	push	{r4, r7, lr}
 80104ea:	b09b      	sub	sp, #108	; 0x6c
 80104ec:	af04      	add	r7, sp, #16
 80104ee:	60f8      	str	r0, [r7, #12]
 80104f0:	60b9      	str	r1, [r7, #8]
 80104f2:	4611      	mov	r1, r2
 80104f4:	461a      	mov	r2, r3
 80104f6:	460b      	mov	r3, r1
 80104f8:	80fb      	strh	r3, [r7, #6]
 80104fa:	4613      	mov	r3, r2
 80104fc:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 80104fe:	2300      	movs	r3, #0
 8010500:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8010502:	2300      	movs	r3, #0
 8010504:	653b      	str	r3, [r7, #80]	; 0x50
 8010506:	2300      	movs	r3, #0
 8010508:	64fb      	str	r3, [r7, #76]	; 0x4c
 801050a:	2300      	movs	r3, #0
 801050c:	64bb      	str	r3, [r7, #72]	; 0x48
 801050e:	2300      	movs	r3, #0
 8010510:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 8010512:	2300      	movs	r3, #0
 8010514:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8010518:	2300      	movs	r3, #0
 801051a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 801051e:	2300      	movs	r3, #0
 8010520:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 8010522:	2300      	movs	r3, #0
 8010524:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 8010526:	2300      	movs	r3, #0
 8010528:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 801052a:	68fb      	ldr	r3, [r7, #12]
 801052c:	2b00      	cmp	r3, #0
 801052e:	d109      	bne.n	8010544 <tcp_write+0x5c>
 8010530:	4ba4      	ldr	r3, [pc, #656]	; (80107c4 <tcp_write+0x2dc>)
 8010532:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 8010536:	49a4      	ldr	r1, [pc, #656]	; (80107c8 <tcp_write+0x2e0>)
 8010538:	48a4      	ldr	r0, [pc, #656]	; (80107cc <tcp_write+0x2e4>)
 801053a:	f007 f8ab 	bl	8017694 <iprintf>
 801053e:	f06f 030f 	mvn.w	r3, #15
 8010542:	e32a      	b.n	8010b9a <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8010544:	68fb      	ldr	r3, [r7, #12]
 8010546:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801054a:	085b      	lsrs	r3, r3, #1
 801054c:	b29a      	uxth	r2, r3
 801054e:	68fb      	ldr	r3, [r7, #12]
 8010550:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010552:	4293      	cmp	r3, r2
 8010554:	bf28      	it	cs
 8010556:	4613      	movcs	r3, r2
 8010558:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 801055a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801055c:	2b00      	cmp	r3, #0
 801055e:	d102      	bne.n	8010566 <tcp_write+0x7e>
 8010560:	68fb      	ldr	r3, [r7, #12]
 8010562:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010564:	e000      	b.n	8010568 <tcp_write+0x80>
 8010566:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010568:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 801056a:	68bb      	ldr	r3, [r7, #8]
 801056c:	2b00      	cmp	r3, #0
 801056e:	d109      	bne.n	8010584 <tcp_write+0x9c>
 8010570:	4b94      	ldr	r3, [pc, #592]	; (80107c4 <tcp_write+0x2dc>)
 8010572:	f240 12ad 	movw	r2, #429	; 0x1ad
 8010576:	4996      	ldr	r1, [pc, #600]	; (80107d0 <tcp_write+0x2e8>)
 8010578:	4894      	ldr	r0, [pc, #592]	; (80107cc <tcp_write+0x2e4>)
 801057a:	f007 f88b 	bl	8017694 <iprintf>
 801057e:	f06f 030f 	mvn.w	r3, #15
 8010582:	e30a      	b.n	8010b9a <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8010584:	88fb      	ldrh	r3, [r7, #6]
 8010586:	4619      	mov	r1, r3
 8010588:	68f8      	ldr	r0, [r7, #12]
 801058a:	f7ff ff33 	bl	80103f4 <tcp_write_checks>
 801058e:	4603      	mov	r3, r0
 8010590:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 8010594:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8010598:	2b00      	cmp	r3, #0
 801059a:	d002      	beq.n	80105a2 <tcp_write+0xba>
    return err;
 801059c:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80105a0:	e2fb      	b.n	8010b9a <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 80105a2:	68fb      	ldr	r3, [r7, #12]
 80105a4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80105a8:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80105ac:	2300      	movs	r3, #0
 80105ae:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 80105b2:	68fb      	ldr	r3, [r7, #12]
 80105b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80105b6:	2b00      	cmp	r3, #0
 80105b8:	f000 80f6 	beq.w	80107a8 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80105bc:	68fb      	ldr	r3, [r7, #12]
 80105be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80105c0:	653b      	str	r3, [r7, #80]	; 0x50
 80105c2:	e002      	b.n	80105ca <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 80105c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80105c6:	681b      	ldr	r3, [r3, #0]
 80105c8:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80105ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80105cc:	681b      	ldr	r3, [r3, #0]
 80105ce:	2b00      	cmp	r3, #0
 80105d0:	d1f8      	bne.n	80105c4 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 80105d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80105d4:	7a9b      	ldrb	r3, [r3, #10]
 80105d6:	009b      	lsls	r3, r3, #2
 80105d8:	b29b      	uxth	r3, r3
 80105da:	f003 0304 	and.w	r3, r3, #4
 80105de:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 80105e0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80105e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80105e4:	891b      	ldrh	r3, [r3, #8]
 80105e6:	4619      	mov	r1, r3
 80105e8:	8c3b      	ldrh	r3, [r7, #32]
 80105ea:	440b      	add	r3, r1
 80105ec:	429a      	cmp	r2, r3
 80105ee:	da06      	bge.n	80105fe <tcp_write+0x116>
 80105f0:	4b74      	ldr	r3, [pc, #464]	; (80107c4 <tcp_write+0x2dc>)
 80105f2:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 80105f6:	4977      	ldr	r1, [pc, #476]	; (80107d4 <tcp_write+0x2ec>)
 80105f8:	4874      	ldr	r0, [pc, #464]	; (80107cc <tcp_write+0x2e4>)
 80105fa:	f007 f84b 	bl	8017694 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 80105fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010600:	891a      	ldrh	r2, [r3, #8]
 8010602:	8c3b      	ldrh	r3, [r7, #32]
 8010604:	4413      	add	r3, r2
 8010606:	b29b      	uxth	r3, r3
 8010608:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801060a:	1ad3      	subs	r3, r2, r3
 801060c:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 801060e:	68fb      	ldr	r3, [r7, #12]
 8010610:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8010614:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 8010616:	8a7b      	ldrh	r3, [r7, #18]
 8010618:	2b00      	cmp	r3, #0
 801061a:	d026      	beq.n	801066a <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 801061c:	8a7b      	ldrh	r3, [r7, #18]
 801061e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8010620:	429a      	cmp	r2, r3
 8010622:	d206      	bcs.n	8010632 <tcp_write+0x14a>
 8010624:	4b67      	ldr	r3, [pc, #412]	; (80107c4 <tcp_write+0x2dc>)
 8010626:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 801062a:	496b      	ldr	r1, [pc, #428]	; (80107d8 <tcp_write+0x2f0>)
 801062c:	4867      	ldr	r0, [pc, #412]	; (80107cc <tcp_write+0x2e4>)
 801062e:	f007 f831 	bl	8017694 <iprintf>
      seg = last_unsent;
 8010632:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010634:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8010636:	8a7b      	ldrh	r3, [r7, #18]
 8010638:	88fa      	ldrh	r2, [r7, #6]
 801063a:	4293      	cmp	r3, r2
 801063c:	bf28      	it	cs
 801063e:	4613      	movcs	r3, r2
 8010640:	b29b      	uxth	r3, r3
 8010642:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8010644:	4293      	cmp	r3, r2
 8010646:	bf28      	it	cs
 8010648:	4613      	movcs	r3, r2
 801064a:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 801064c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010650:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8010652:	4413      	add	r3, r2
 8010654:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 8010658:	8a7a      	ldrh	r2, [r7, #18]
 801065a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801065c:	1ad3      	subs	r3, r2, r3
 801065e:	b29b      	uxth	r3, r3
 8010660:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 8010662:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8010664:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8010666:	1ad3      	subs	r3, r2, r3
 8010668:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 801066a:	8a7b      	ldrh	r3, [r7, #18]
 801066c:	2b00      	cmp	r3, #0
 801066e:	d00b      	beq.n	8010688 <tcp_write+0x1a0>
 8010670:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010674:	88fb      	ldrh	r3, [r7, #6]
 8010676:	429a      	cmp	r2, r3
 8010678:	d006      	beq.n	8010688 <tcp_write+0x1a0>
 801067a:	4b52      	ldr	r3, [pc, #328]	; (80107c4 <tcp_write+0x2dc>)
 801067c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010680:	4956      	ldr	r1, [pc, #344]	; (80107dc <tcp_write+0x2f4>)
 8010682:	4852      	ldr	r0, [pc, #328]	; (80107cc <tcp_write+0x2e4>)
 8010684:	f007 f806 	bl	8017694 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8010688:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801068c:	88fb      	ldrh	r3, [r7, #6]
 801068e:	429a      	cmp	r2, r3
 8010690:	f080 8167 	bcs.w	8010962 <tcp_write+0x47a>
 8010694:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8010696:	2b00      	cmp	r3, #0
 8010698:	f000 8163 	beq.w	8010962 <tcp_write+0x47a>
 801069c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801069e:	891b      	ldrh	r3, [r3, #8]
 80106a0:	2b00      	cmp	r3, #0
 80106a2:	f000 815e 	beq.w	8010962 <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 80106a6:	88fa      	ldrh	r2, [r7, #6]
 80106a8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80106ac:	1ad2      	subs	r2, r2, r3
 80106ae:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80106b0:	4293      	cmp	r3, r2
 80106b2:	bfa8      	it	ge
 80106b4:	4613      	movge	r3, r2
 80106b6:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 80106b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80106ba:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 80106bc:	797b      	ldrb	r3, [r7, #5]
 80106be:	f003 0301 	and.w	r3, r3, #1
 80106c2:	2b00      	cmp	r3, #0
 80106c4:	d027      	beq.n	8010716 <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 80106c6:	f107 0012 	add.w	r0, r7, #18
 80106ca:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80106cc:	8bf9      	ldrh	r1, [r7, #30]
 80106ce:	2301      	movs	r3, #1
 80106d0:	9302      	str	r3, [sp, #8]
 80106d2:	797b      	ldrb	r3, [r7, #5]
 80106d4:	9301      	str	r3, [sp, #4]
 80106d6:	68fb      	ldr	r3, [r7, #12]
 80106d8:	9300      	str	r3, [sp, #0]
 80106da:	4603      	mov	r3, r0
 80106dc:	2000      	movs	r0, #0
 80106de:	f7ff fe0f 	bl	8010300 <tcp_pbuf_prealloc>
 80106e2:	6578      	str	r0, [r7, #84]	; 0x54
 80106e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80106e6:	2b00      	cmp	r3, #0
 80106e8:	f000 8225 	beq.w	8010b36 <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 80106ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80106ee:	6858      	ldr	r0, [r3, #4]
 80106f0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80106f4:	68ba      	ldr	r2, [r7, #8]
 80106f6:	4413      	add	r3, r2
 80106f8:	8bfa      	ldrh	r2, [r7, #30]
 80106fa:	4619      	mov	r1, r3
 80106fc:	f006 ff1f 	bl	801753e <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8010700:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8010702:	f7fb f9af 	bl	800ba64 <pbuf_clen>
 8010706:	4603      	mov	r3, r0
 8010708:	461a      	mov	r2, r3
 801070a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801070e:	4413      	add	r3, r2
 8010710:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8010714:	e041      	b.n	801079a <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8010716:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010718:	685b      	ldr	r3, [r3, #4]
 801071a:	637b      	str	r3, [r7, #52]	; 0x34
 801071c:	e002      	b.n	8010724 <tcp_write+0x23c>
 801071e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010720:	681b      	ldr	r3, [r3, #0]
 8010722:	637b      	str	r3, [r7, #52]	; 0x34
 8010724:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010726:	681b      	ldr	r3, [r3, #0]
 8010728:	2b00      	cmp	r3, #0
 801072a:	d1f8      	bne.n	801071e <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801072c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801072e:	7b1b      	ldrb	r3, [r3, #12]
 8010730:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8010734:	2b00      	cmp	r3, #0
 8010736:	d115      	bne.n	8010764 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8010738:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801073a:	685b      	ldr	r3, [r3, #4]
 801073c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801073e:	8952      	ldrh	r2, [r2, #10]
 8010740:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8010742:	68ba      	ldr	r2, [r7, #8]
 8010744:	429a      	cmp	r2, r3
 8010746:	d10d      	bne.n	8010764 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8010748:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801074c:	2b00      	cmp	r3, #0
 801074e:	d006      	beq.n	801075e <tcp_write+0x276>
 8010750:	4b1c      	ldr	r3, [pc, #112]	; (80107c4 <tcp_write+0x2dc>)
 8010752:	f240 2231 	movw	r2, #561	; 0x231
 8010756:	4922      	ldr	r1, [pc, #136]	; (80107e0 <tcp_write+0x2f8>)
 8010758:	481c      	ldr	r0, [pc, #112]	; (80107cc <tcp_write+0x2e4>)
 801075a:	f006 ff9b 	bl	8017694 <iprintf>
          extendlen = seglen;
 801075e:	8bfb      	ldrh	r3, [r7, #30]
 8010760:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8010762:	e01a      	b.n	801079a <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8010764:	8bfb      	ldrh	r3, [r7, #30]
 8010766:	2201      	movs	r2, #1
 8010768:	4619      	mov	r1, r3
 801076a:	2000      	movs	r0, #0
 801076c:	f7fa fe08 	bl	800b380 <pbuf_alloc>
 8010770:	6578      	str	r0, [r7, #84]	; 0x54
 8010772:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010774:	2b00      	cmp	r3, #0
 8010776:	f000 81e0 	beq.w	8010b3a <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 801077a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801077e:	68ba      	ldr	r2, [r7, #8]
 8010780:	441a      	add	r2, r3
 8010782:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010784:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 8010786:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8010788:	f7fb f96c 	bl	800ba64 <pbuf_clen>
 801078c:	4603      	mov	r3, r0
 801078e:	461a      	mov	r2, r3
 8010790:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8010794:	4413      	add	r3, r2
 8010796:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 801079a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801079e:	8bfb      	ldrh	r3, [r7, #30]
 80107a0:	4413      	add	r3, r2
 80107a2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80107a6:	e0dc      	b.n	8010962 <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 80107a8:	68fb      	ldr	r3, [r7, #12]
 80107aa:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80107ae:	2b00      	cmp	r3, #0
 80107b0:	f000 80d7 	beq.w	8010962 <tcp_write+0x47a>
 80107b4:	4b03      	ldr	r3, [pc, #12]	; (80107c4 <tcp_write+0x2dc>)
 80107b6:	f240 224a 	movw	r2, #586	; 0x24a
 80107ba:	490a      	ldr	r1, [pc, #40]	; (80107e4 <tcp_write+0x2fc>)
 80107bc:	4803      	ldr	r0, [pc, #12]	; (80107cc <tcp_write+0x2e4>)
 80107be:	f006 ff69 	bl	8017694 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 80107c2:	e0ce      	b.n	8010962 <tcp_write+0x47a>
 80107c4:	0801a784 	.word	0x0801a784
 80107c8:	0801a924 	.word	0x0801a924
 80107cc:	0801a7d8 	.word	0x0801a7d8
 80107d0:	0801a93c 	.word	0x0801a93c
 80107d4:	0801a970 	.word	0x0801a970
 80107d8:	0801a988 	.word	0x0801a988
 80107dc:	0801a9a8 	.word	0x0801a9a8
 80107e0:	0801a9c8 	.word	0x0801a9c8
 80107e4:	0801a9f4 	.word	0x0801a9f4
    struct pbuf *p;
    u16_t left = len - pos;
 80107e8:	88fa      	ldrh	r2, [r7, #6]
 80107ea:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80107ee:	1ad3      	subs	r3, r2, r3
 80107f0:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 80107f2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80107f6:	b29b      	uxth	r3, r3
 80107f8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80107fa:	1ad3      	subs	r3, r2, r3
 80107fc:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 80107fe:	8b7a      	ldrh	r2, [r7, #26]
 8010800:	8bbb      	ldrh	r3, [r7, #28]
 8010802:	4293      	cmp	r3, r2
 8010804:	bf28      	it	cs
 8010806:	4613      	movcs	r3, r2
 8010808:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 801080a:	797b      	ldrb	r3, [r7, #5]
 801080c:	f003 0301 	and.w	r3, r3, #1
 8010810:	2b00      	cmp	r3, #0
 8010812:	d036      	beq.n	8010882 <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8010814:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8010818:	b29a      	uxth	r2, r3
 801081a:	8b3b      	ldrh	r3, [r7, #24]
 801081c:	4413      	add	r3, r2
 801081e:	b299      	uxth	r1, r3
 8010820:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010822:	2b00      	cmp	r3, #0
 8010824:	bf0c      	ite	eq
 8010826:	2301      	moveq	r3, #1
 8010828:	2300      	movne	r3, #0
 801082a:	b2db      	uxtb	r3, r3
 801082c:	f107 0012 	add.w	r0, r7, #18
 8010830:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8010832:	9302      	str	r3, [sp, #8]
 8010834:	797b      	ldrb	r3, [r7, #5]
 8010836:	9301      	str	r3, [sp, #4]
 8010838:	68fb      	ldr	r3, [r7, #12]
 801083a:	9300      	str	r3, [sp, #0]
 801083c:	4603      	mov	r3, r0
 801083e:	2036      	movs	r0, #54	; 0x36
 8010840:	f7ff fd5e 	bl	8010300 <tcp_pbuf_prealloc>
 8010844:	6338      	str	r0, [r7, #48]	; 0x30
 8010846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010848:	2b00      	cmp	r3, #0
 801084a:	f000 8178 	beq.w	8010b3e <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 801084e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010850:	895b      	ldrh	r3, [r3, #10]
 8010852:	8b3a      	ldrh	r2, [r7, #24]
 8010854:	429a      	cmp	r2, r3
 8010856:	d906      	bls.n	8010866 <tcp_write+0x37e>
 8010858:	4b8c      	ldr	r3, [pc, #560]	; (8010a8c <tcp_write+0x5a4>)
 801085a:	f240 2266 	movw	r2, #614	; 0x266
 801085e:	498c      	ldr	r1, [pc, #560]	; (8010a90 <tcp_write+0x5a8>)
 8010860:	488c      	ldr	r0, [pc, #560]	; (8010a94 <tcp_write+0x5ac>)
 8010862:	f006 ff17 	bl	8017694 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 8010866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010868:	685a      	ldr	r2, [r3, #4]
 801086a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801086e:	18d0      	adds	r0, r2, r3
 8010870:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010874:	68ba      	ldr	r2, [r7, #8]
 8010876:	4413      	add	r3, r2
 8010878:	8b3a      	ldrh	r2, [r7, #24]
 801087a:	4619      	mov	r1, r3
 801087c:	f006 fe5f 	bl	801753e <memcpy>
 8010880:	e02f      	b.n	80108e2 <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8010882:	8a7b      	ldrh	r3, [r7, #18]
 8010884:	2b00      	cmp	r3, #0
 8010886:	d006      	beq.n	8010896 <tcp_write+0x3ae>
 8010888:	4b80      	ldr	r3, [pc, #512]	; (8010a8c <tcp_write+0x5a4>)
 801088a:	f240 2271 	movw	r2, #625	; 0x271
 801088e:	4982      	ldr	r1, [pc, #520]	; (8010a98 <tcp_write+0x5b0>)
 8010890:	4880      	ldr	r0, [pc, #512]	; (8010a94 <tcp_write+0x5ac>)
 8010892:	f006 feff 	bl	8017694 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8010896:	8b3b      	ldrh	r3, [r7, #24]
 8010898:	2201      	movs	r2, #1
 801089a:	4619      	mov	r1, r3
 801089c:	2036      	movs	r0, #54	; 0x36
 801089e:	f7fa fd6f 	bl	800b380 <pbuf_alloc>
 80108a2:	6178      	str	r0, [r7, #20]
 80108a4:	697b      	ldr	r3, [r7, #20]
 80108a6:	2b00      	cmp	r3, #0
 80108a8:	f000 814b 	beq.w	8010b42 <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 80108ac:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80108b0:	68ba      	ldr	r2, [r7, #8]
 80108b2:	441a      	add	r2, r3
 80108b4:	697b      	ldr	r3, [r7, #20]
 80108b6:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80108b8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80108bc:	b29b      	uxth	r3, r3
 80108be:	f44f 7220 	mov.w	r2, #640	; 0x280
 80108c2:	4619      	mov	r1, r3
 80108c4:	2036      	movs	r0, #54	; 0x36
 80108c6:	f7fa fd5b 	bl	800b380 <pbuf_alloc>
 80108ca:	6338      	str	r0, [r7, #48]	; 0x30
 80108cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108ce:	2b00      	cmp	r3, #0
 80108d0:	d103      	bne.n	80108da <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 80108d2:	6978      	ldr	r0, [r7, #20]
 80108d4:	f7fb f838 	bl	800b948 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 80108d8:	e136      	b.n	8010b48 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 80108da:	6979      	ldr	r1, [r7, #20]
 80108dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80108de:	f7fb f901 	bl	800bae4 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 80108e2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80108e4:	f7fb f8be 	bl	800ba64 <pbuf_clen>
 80108e8:	4603      	mov	r3, r0
 80108ea:	461a      	mov	r2, r3
 80108ec:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80108f0:	4413      	add	r3, r2
 80108f2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 80108f6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80108fa:	2b09      	cmp	r3, #9
 80108fc:	d903      	bls.n	8010906 <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 80108fe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010900:	f7fb f822 	bl	800b948 <pbuf_free>
      goto memerr;
 8010904:	e120      	b.n	8010b48 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8010906:	68fb      	ldr	r3, [r7, #12]
 8010908:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801090a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801090e:	441a      	add	r2, r3
 8010910:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010914:	9300      	str	r3, [sp, #0]
 8010916:	4613      	mov	r3, r2
 8010918:	2200      	movs	r2, #0
 801091a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801091c:	68f8      	ldr	r0, [r7, #12]
 801091e:	f7ff fc51 	bl	80101c4 <tcp_create_segment>
 8010922:	64f8      	str	r0, [r7, #76]	; 0x4c
 8010924:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010926:	2b00      	cmp	r3, #0
 8010928:	f000 810d 	beq.w	8010b46 <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 801092c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801092e:	2b00      	cmp	r3, #0
 8010930:	d102      	bne.n	8010938 <tcp_write+0x450>
      queue = seg;
 8010932:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010934:	647b      	str	r3, [r7, #68]	; 0x44
 8010936:	e00c      	b.n	8010952 <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8010938:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801093a:	2b00      	cmp	r3, #0
 801093c:	d106      	bne.n	801094c <tcp_write+0x464>
 801093e:	4b53      	ldr	r3, [pc, #332]	; (8010a8c <tcp_write+0x5a4>)
 8010940:	f240 22ab 	movw	r2, #683	; 0x2ab
 8010944:	4955      	ldr	r1, [pc, #340]	; (8010a9c <tcp_write+0x5b4>)
 8010946:	4853      	ldr	r0, [pc, #332]	; (8010a94 <tcp_write+0x5ac>)
 8010948:	f006 fea4 	bl	8017694 <iprintf>
      prev_seg->next = seg;
 801094c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801094e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010950:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 8010952:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010954:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 8010956:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801095a:	8b3b      	ldrh	r3, [r7, #24]
 801095c:	4413      	add	r3, r2
 801095e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 8010962:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010966:	88fb      	ldrh	r3, [r7, #6]
 8010968:	429a      	cmp	r2, r3
 801096a:	f4ff af3d 	bcc.w	80107e8 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 801096e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8010970:	2b00      	cmp	r3, #0
 8010972:	d02c      	beq.n	80109ce <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8010974:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010976:	685b      	ldr	r3, [r3, #4]
 8010978:	62fb      	str	r3, [r7, #44]	; 0x2c
 801097a:	e01e      	b.n	80109ba <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 801097c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801097e:	891a      	ldrh	r2, [r3, #8]
 8010980:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8010982:	4413      	add	r3, r2
 8010984:	b29a      	uxth	r2, r3
 8010986:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010988:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 801098a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801098c:	681b      	ldr	r3, [r3, #0]
 801098e:	2b00      	cmp	r3, #0
 8010990:	d110      	bne.n	80109b4 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8010992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010994:	685b      	ldr	r3, [r3, #4]
 8010996:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010998:	8952      	ldrh	r2, [r2, #10]
 801099a:	4413      	add	r3, r2
 801099c:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801099e:	68b9      	ldr	r1, [r7, #8]
 80109a0:	4618      	mov	r0, r3
 80109a2:	f006 fdcc 	bl	801753e <memcpy>
        p->len += oversize_used;
 80109a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80109a8:	895a      	ldrh	r2, [r3, #10]
 80109aa:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80109ac:	4413      	add	r3, r2
 80109ae:	b29a      	uxth	r2, r3
 80109b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80109b2:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 80109b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80109b6:	681b      	ldr	r3, [r3, #0]
 80109b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80109ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80109bc:	2b00      	cmp	r3, #0
 80109be:	d1dd      	bne.n	801097c <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 80109c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80109c2:	891a      	ldrh	r2, [r3, #8]
 80109c4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80109c6:	4413      	add	r3, r2
 80109c8:	b29a      	uxth	r2, r3
 80109ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80109cc:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 80109ce:	8a7a      	ldrh	r2, [r7, #18]
 80109d0:	68fb      	ldr	r3, [r7, #12]
 80109d2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 80109d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80109d8:	2b00      	cmp	r3, #0
 80109da:	d018      	beq.n	8010a0e <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 80109dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80109de:	2b00      	cmp	r3, #0
 80109e0:	d106      	bne.n	80109f0 <tcp_write+0x508>
 80109e2:	4b2a      	ldr	r3, [pc, #168]	; (8010a8c <tcp_write+0x5a4>)
 80109e4:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 80109e8:	492d      	ldr	r1, [pc, #180]	; (8010aa0 <tcp_write+0x5b8>)
 80109ea:	482a      	ldr	r0, [pc, #168]	; (8010a94 <tcp_write+0x5ac>)
 80109ec:	f006 fe52 	bl	8017694 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 80109f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80109f2:	685b      	ldr	r3, [r3, #4]
 80109f4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80109f6:	4618      	mov	r0, r3
 80109f8:	f7fb f874 	bl	800bae4 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 80109fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80109fe:	891a      	ldrh	r2, [r3, #8]
 8010a00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010a02:	891b      	ldrh	r3, [r3, #8]
 8010a04:	4413      	add	r3, r2
 8010a06:	b29a      	uxth	r2, r3
 8010a08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010a0a:	811a      	strh	r2, [r3, #8]
 8010a0c:	e037      	b.n	8010a7e <tcp_write+0x596>
  } else if (extendlen > 0) {
 8010a0e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010a10:	2b00      	cmp	r3, #0
 8010a12:	d034      	beq.n	8010a7e <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8010a14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010a16:	2b00      	cmp	r3, #0
 8010a18:	d003      	beq.n	8010a22 <tcp_write+0x53a>
 8010a1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010a1c:	685b      	ldr	r3, [r3, #4]
 8010a1e:	2b00      	cmp	r3, #0
 8010a20:	d106      	bne.n	8010a30 <tcp_write+0x548>
 8010a22:	4b1a      	ldr	r3, [pc, #104]	; (8010a8c <tcp_write+0x5a4>)
 8010a24:	f240 22e6 	movw	r2, #742	; 0x2e6
 8010a28:	491e      	ldr	r1, [pc, #120]	; (8010aa4 <tcp_write+0x5bc>)
 8010a2a:	481a      	ldr	r0, [pc, #104]	; (8010a94 <tcp_write+0x5ac>)
 8010a2c:	f006 fe32 	bl	8017694 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8010a30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010a32:	685b      	ldr	r3, [r3, #4]
 8010a34:	62bb      	str	r3, [r7, #40]	; 0x28
 8010a36:	e009      	b.n	8010a4c <tcp_write+0x564>
      p->tot_len += extendlen;
 8010a38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a3a:	891a      	ldrh	r2, [r3, #8]
 8010a3c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010a3e:	4413      	add	r3, r2
 8010a40:	b29a      	uxth	r2, r3
 8010a42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a44:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8010a46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a48:	681b      	ldr	r3, [r3, #0]
 8010a4a:	62bb      	str	r3, [r7, #40]	; 0x28
 8010a4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a4e:	681b      	ldr	r3, [r3, #0]
 8010a50:	2b00      	cmp	r3, #0
 8010a52:	d1f1      	bne.n	8010a38 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 8010a54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a56:	891a      	ldrh	r2, [r3, #8]
 8010a58:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010a5a:	4413      	add	r3, r2
 8010a5c:	b29a      	uxth	r2, r3
 8010a5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a60:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 8010a62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a64:	895a      	ldrh	r2, [r3, #10]
 8010a66:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010a68:	4413      	add	r3, r2
 8010a6a:	b29a      	uxth	r2, r3
 8010a6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a6e:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8010a70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010a72:	891a      	ldrh	r2, [r3, #8]
 8010a74:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010a76:	4413      	add	r3, r2
 8010a78:	b29a      	uxth	r2, r3
 8010a7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010a7c:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 8010a7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010a80:	2b00      	cmp	r3, #0
 8010a82:	d111      	bne.n	8010aa8 <tcp_write+0x5c0>
    pcb->unsent = queue;
 8010a84:	68fb      	ldr	r3, [r7, #12]
 8010a86:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010a88:	66da      	str	r2, [r3, #108]	; 0x6c
 8010a8a:	e010      	b.n	8010aae <tcp_write+0x5c6>
 8010a8c:	0801a784 	.word	0x0801a784
 8010a90:	0801aa24 	.word	0x0801aa24
 8010a94:	0801a7d8 	.word	0x0801a7d8
 8010a98:	0801aa64 	.word	0x0801aa64
 8010a9c:	0801aa74 	.word	0x0801aa74
 8010aa0:	0801aa88 	.word	0x0801aa88
 8010aa4:	0801aac0 	.word	0x0801aac0
  } else {
    last_unsent->next = queue;
 8010aa8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010aaa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010aac:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 8010aae:	68fb      	ldr	r3, [r7, #12]
 8010ab0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8010ab2:	88fb      	ldrh	r3, [r7, #6]
 8010ab4:	441a      	add	r2, r3
 8010ab6:	68fb      	ldr	r3, [r7, #12]
 8010ab8:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 8010aba:	68fb      	ldr	r3, [r7, #12]
 8010abc:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8010ac0:	88fb      	ldrh	r3, [r7, #6]
 8010ac2:	1ad3      	subs	r3, r2, r3
 8010ac4:	b29a      	uxth	r2, r3
 8010ac6:	68fb      	ldr	r3, [r7, #12]
 8010ac8:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 8010acc:	68fb      	ldr	r3, [r7, #12]
 8010ace:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8010ad2:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8010ad6:	68fb      	ldr	r3, [r7, #12]
 8010ad8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010adc:	2b00      	cmp	r3, #0
 8010ade:	d00e      	beq.n	8010afe <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 8010ae0:	68fb      	ldr	r3, [r7, #12]
 8010ae2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010ae4:	2b00      	cmp	r3, #0
 8010ae6:	d10a      	bne.n	8010afe <tcp_write+0x616>
 8010ae8:	68fb      	ldr	r3, [r7, #12]
 8010aea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010aec:	2b00      	cmp	r3, #0
 8010aee:	d106      	bne.n	8010afe <tcp_write+0x616>
 8010af0:	4b2c      	ldr	r3, [pc, #176]	; (8010ba4 <tcp_write+0x6bc>)
 8010af2:	f240 3212 	movw	r2, #786	; 0x312
 8010af6:	492c      	ldr	r1, [pc, #176]	; (8010ba8 <tcp_write+0x6c0>)
 8010af8:	482c      	ldr	r0, [pc, #176]	; (8010bac <tcp_write+0x6c4>)
 8010afa:	f006 fdcb 	bl	8017694 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 8010afe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010b00:	2b00      	cmp	r3, #0
 8010b02:	d016      	beq.n	8010b32 <tcp_write+0x64a>
 8010b04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010b06:	68db      	ldr	r3, [r3, #12]
 8010b08:	2b00      	cmp	r3, #0
 8010b0a:	d012      	beq.n	8010b32 <tcp_write+0x64a>
 8010b0c:	797b      	ldrb	r3, [r7, #5]
 8010b0e:	f003 0302 	and.w	r3, r3, #2
 8010b12:	2b00      	cmp	r3, #0
 8010b14:	d10d      	bne.n	8010b32 <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8010b16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010b18:	68db      	ldr	r3, [r3, #12]
 8010b1a:	899b      	ldrh	r3, [r3, #12]
 8010b1c:	b29c      	uxth	r4, r3
 8010b1e:	2008      	movs	r0, #8
 8010b20:	f7f9 fb14 	bl	800a14c <lwip_htons>
 8010b24:	4603      	mov	r3, r0
 8010b26:	461a      	mov	r2, r3
 8010b28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010b2a:	68db      	ldr	r3, [r3, #12]
 8010b2c:	4322      	orrs	r2, r4
 8010b2e:	b292      	uxth	r2, r2
 8010b30:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 8010b32:	2300      	movs	r3, #0
 8010b34:	e031      	b.n	8010b9a <tcp_write+0x6b2>
          goto memerr;
 8010b36:	bf00      	nop
 8010b38:	e006      	b.n	8010b48 <tcp_write+0x660>
            goto memerr;
 8010b3a:	bf00      	nop
 8010b3c:	e004      	b.n	8010b48 <tcp_write+0x660>
        goto memerr;
 8010b3e:	bf00      	nop
 8010b40:	e002      	b.n	8010b48 <tcp_write+0x660>
        goto memerr;
 8010b42:	bf00      	nop
 8010b44:	e000      	b.n	8010b48 <tcp_write+0x660>
      goto memerr;
 8010b46:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8010b48:	68fb      	ldr	r3, [r7, #12]
 8010b4a:	8b5b      	ldrh	r3, [r3, #26]
 8010b4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010b50:	b29a      	uxth	r2, r3
 8010b52:	68fb      	ldr	r3, [r7, #12]
 8010b54:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 8010b56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010b58:	2b00      	cmp	r3, #0
 8010b5a:	d002      	beq.n	8010b62 <tcp_write+0x67a>
    pbuf_free(concat_p);
 8010b5c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8010b5e:	f7fa fef3 	bl	800b948 <pbuf_free>
  }
  if (queue != NULL) {
 8010b62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010b64:	2b00      	cmp	r3, #0
 8010b66:	d002      	beq.n	8010b6e <tcp_write+0x686>
    tcp_segs_free(queue);
 8010b68:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8010b6a:	f7fc fb6b 	bl	800d244 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 8010b6e:	68fb      	ldr	r3, [r7, #12]
 8010b70:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010b74:	2b00      	cmp	r3, #0
 8010b76:	d00e      	beq.n	8010b96 <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8010b78:	68fb      	ldr	r3, [r7, #12]
 8010b7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010b7c:	2b00      	cmp	r3, #0
 8010b7e:	d10a      	bne.n	8010b96 <tcp_write+0x6ae>
 8010b80:	68fb      	ldr	r3, [r7, #12]
 8010b82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010b84:	2b00      	cmp	r3, #0
 8010b86:	d106      	bne.n	8010b96 <tcp_write+0x6ae>
 8010b88:	4b06      	ldr	r3, [pc, #24]	; (8010ba4 <tcp_write+0x6bc>)
 8010b8a:	f240 3227 	movw	r2, #807	; 0x327
 8010b8e:	4906      	ldr	r1, [pc, #24]	; (8010ba8 <tcp_write+0x6c0>)
 8010b90:	4806      	ldr	r0, [pc, #24]	; (8010bac <tcp_write+0x6c4>)
 8010b92:	f006 fd7f 	bl	8017694 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 8010b96:	f04f 33ff 	mov.w	r3, #4294967295
}
 8010b9a:	4618      	mov	r0, r3
 8010b9c:	375c      	adds	r7, #92	; 0x5c
 8010b9e:	46bd      	mov	sp, r7
 8010ba0:	bd90      	pop	{r4, r7, pc}
 8010ba2:	bf00      	nop
 8010ba4:	0801a784 	.word	0x0801a784
 8010ba8:	0801aaf8 	.word	0x0801aaf8
 8010bac:	0801a7d8 	.word	0x0801a7d8

08010bb0 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8010bb0:	b590      	push	{r4, r7, lr}
 8010bb2:	b08b      	sub	sp, #44	; 0x2c
 8010bb4:	af02      	add	r7, sp, #8
 8010bb6:	6078      	str	r0, [r7, #4]
 8010bb8:	460b      	mov	r3, r1
 8010bba:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8010bbc:	2300      	movs	r3, #0
 8010bbe:	61fb      	str	r3, [r7, #28]
 8010bc0:	2300      	movs	r3, #0
 8010bc2:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8010bc4:	2300      	movs	r3, #0
 8010bc6:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8010bc8:	687b      	ldr	r3, [r7, #4]
 8010bca:	2b00      	cmp	r3, #0
 8010bcc:	d106      	bne.n	8010bdc <tcp_split_unsent_seg+0x2c>
 8010bce:	4b95      	ldr	r3, [pc, #596]	; (8010e24 <tcp_split_unsent_seg+0x274>)
 8010bd0:	f240 324b 	movw	r2, #843	; 0x34b
 8010bd4:	4994      	ldr	r1, [pc, #592]	; (8010e28 <tcp_split_unsent_seg+0x278>)
 8010bd6:	4895      	ldr	r0, [pc, #596]	; (8010e2c <tcp_split_unsent_seg+0x27c>)
 8010bd8:	f006 fd5c 	bl	8017694 <iprintf>

  useg = pcb->unsent;
 8010bdc:	687b      	ldr	r3, [r7, #4]
 8010bde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010be0:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8010be2:	697b      	ldr	r3, [r7, #20]
 8010be4:	2b00      	cmp	r3, #0
 8010be6:	d102      	bne.n	8010bee <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8010be8:	f04f 33ff 	mov.w	r3, #4294967295
 8010bec:	e116      	b.n	8010e1c <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8010bee:	887b      	ldrh	r3, [r7, #2]
 8010bf0:	2b00      	cmp	r3, #0
 8010bf2:	d109      	bne.n	8010c08 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8010bf4:	4b8b      	ldr	r3, [pc, #556]	; (8010e24 <tcp_split_unsent_seg+0x274>)
 8010bf6:	f240 3253 	movw	r2, #851	; 0x353
 8010bfa:	498d      	ldr	r1, [pc, #564]	; (8010e30 <tcp_split_unsent_seg+0x280>)
 8010bfc:	488b      	ldr	r0, [pc, #556]	; (8010e2c <tcp_split_unsent_seg+0x27c>)
 8010bfe:	f006 fd49 	bl	8017694 <iprintf>
    return ERR_VAL;
 8010c02:	f06f 0305 	mvn.w	r3, #5
 8010c06:	e109      	b.n	8010e1c <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8010c08:	697b      	ldr	r3, [r7, #20]
 8010c0a:	891b      	ldrh	r3, [r3, #8]
 8010c0c:	887a      	ldrh	r2, [r7, #2]
 8010c0e:	429a      	cmp	r2, r3
 8010c10:	d301      	bcc.n	8010c16 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8010c12:	2300      	movs	r3, #0
 8010c14:	e102      	b.n	8010e1c <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8010c16:	687b      	ldr	r3, [r7, #4]
 8010c18:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010c1a:	887a      	ldrh	r2, [r7, #2]
 8010c1c:	429a      	cmp	r2, r3
 8010c1e:	d906      	bls.n	8010c2e <tcp_split_unsent_seg+0x7e>
 8010c20:	4b80      	ldr	r3, [pc, #512]	; (8010e24 <tcp_split_unsent_seg+0x274>)
 8010c22:	f240 325b 	movw	r2, #859	; 0x35b
 8010c26:	4983      	ldr	r1, [pc, #524]	; (8010e34 <tcp_split_unsent_seg+0x284>)
 8010c28:	4880      	ldr	r0, [pc, #512]	; (8010e2c <tcp_split_unsent_seg+0x27c>)
 8010c2a:	f006 fd33 	bl	8017694 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8010c2e:	697b      	ldr	r3, [r7, #20]
 8010c30:	891b      	ldrh	r3, [r3, #8]
 8010c32:	2b00      	cmp	r3, #0
 8010c34:	d106      	bne.n	8010c44 <tcp_split_unsent_seg+0x94>
 8010c36:	4b7b      	ldr	r3, [pc, #492]	; (8010e24 <tcp_split_unsent_seg+0x274>)
 8010c38:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8010c3c:	497e      	ldr	r1, [pc, #504]	; (8010e38 <tcp_split_unsent_seg+0x288>)
 8010c3e:	487b      	ldr	r0, [pc, #492]	; (8010e2c <tcp_split_unsent_seg+0x27c>)
 8010c40:	f006 fd28 	bl	8017694 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8010c44:	697b      	ldr	r3, [r7, #20]
 8010c46:	7a9b      	ldrb	r3, [r3, #10]
 8010c48:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8010c4a:	7bfb      	ldrb	r3, [r7, #15]
 8010c4c:	009b      	lsls	r3, r3, #2
 8010c4e:	b2db      	uxtb	r3, r3
 8010c50:	f003 0304 	and.w	r3, r3, #4
 8010c54:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8010c56:	697b      	ldr	r3, [r7, #20]
 8010c58:	891a      	ldrh	r2, [r3, #8]
 8010c5a:	887b      	ldrh	r3, [r7, #2]
 8010c5c:	1ad3      	subs	r3, r2, r3
 8010c5e:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8010c60:	7bbb      	ldrb	r3, [r7, #14]
 8010c62:	b29a      	uxth	r2, r3
 8010c64:	89bb      	ldrh	r3, [r7, #12]
 8010c66:	4413      	add	r3, r2
 8010c68:	b29b      	uxth	r3, r3
 8010c6a:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010c6e:	4619      	mov	r1, r3
 8010c70:	2036      	movs	r0, #54	; 0x36
 8010c72:	f7fa fb85 	bl	800b380 <pbuf_alloc>
 8010c76:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8010c78:	693b      	ldr	r3, [r7, #16]
 8010c7a:	2b00      	cmp	r3, #0
 8010c7c:	f000 80b7 	beq.w	8010dee <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8010c80:	697b      	ldr	r3, [r7, #20]
 8010c82:	685b      	ldr	r3, [r3, #4]
 8010c84:	891a      	ldrh	r2, [r3, #8]
 8010c86:	697b      	ldr	r3, [r7, #20]
 8010c88:	891b      	ldrh	r3, [r3, #8]
 8010c8a:	1ad3      	subs	r3, r2, r3
 8010c8c:	b29a      	uxth	r2, r3
 8010c8e:	887b      	ldrh	r3, [r7, #2]
 8010c90:	4413      	add	r3, r2
 8010c92:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8010c94:	697b      	ldr	r3, [r7, #20]
 8010c96:	6858      	ldr	r0, [r3, #4]
 8010c98:	693b      	ldr	r3, [r7, #16]
 8010c9a:	685a      	ldr	r2, [r3, #4]
 8010c9c:	7bbb      	ldrb	r3, [r7, #14]
 8010c9e:	18d1      	adds	r1, r2, r3
 8010ca0:	897b      	ldrh	r3, [r7, #10]
 8010ca2:	89ba      	ldrh	r2, [r7, #12]
 8010ca4:	f7fb f856 	bl	800bd54 <pbuf_copy_partial>
 8010ca8:	4603      	mov	r3, r0
 8010caa:	461a      	mov	r2, r3
 8010cac:	89bb      	ldrh	r3, [r7, #12]
 8010cae:	4293      	cmp	r3, r2
 8010cb0:	f040 809f 	bne.w	8010df2 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8010cb4:	697b      	ldr	r3, [r7, #20]
 8010cb6:	68db      	ldr	r3, [r3, #12]
 8010cb8:	899b      	ldrh	r3, [r3, #12]
 8010cba:	b29b      	uxth	r3, r3
 8010cbc:	4618      	mov	r0, r3
 8010cbe:	f7f9 fa45 	bl	800a14c <lwip_htons>
 8010cc2:	4603      	mov	r3, r0
 8010cc4:	b2db      	uxtb	r3, r3
 8010cc6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010cca:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8010ccc:	2300      	movs	r3, #0
 8010cce:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8010cd0:	7efb      	ldrb	r3, [r7, #27]
 8010cd2:	f003 0308 	and.w	r3, r3, #8
 8010cd6:	2b00      	cmp	r3, #0
 8010cd8:	d007      	beq.n	8010cea <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8010cda:	7efb      	ldrb	r3, [r7, #27]
 8010cdc:	f023 0308 	bic.w	r3, r3, #8
 8010ce0:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8010ce2:	7ebb      	ldrb	r3, [r7, #26]
 8010ce4:	f043 0308 	orr.w	r3, r3, #8
 8010ce8:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8010cea:	7efb      	ldrb	r3, [r7, #27]
 8010cec:	f003 0301 	and.w	r3, r3, #1
 8010cf0:	2b00      	cmp	r3, #0
 8010cf2:	d007      	beq.n	8010d04 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8010cf4:	7efb      	ldrb	r3, [r7, #27]
 8010cf6:	f023 0301 	bic.w	r3, r3, #1
 8010cfa:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8010cfc:	7ebb      	ldrb	r3, [r7, #26]
 8010cfe:	f043 0301 	orr.w	r3, r3, #1
 8010d02:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8010d04:	697b      	ldr	r3, [r7, #20]
 8010d06:	68db      	ldr	r3, [r3, #12]
 8010d08:	685b      	ldr	r3, [r3, #4]
 8010d0a:	4618      	mov	r0, r3
 8010d0c:	f7f9 fa33 	bl	800a176 <lwip_htonl>
 8010d10:	4602      	mov	r2, r0
 8010d12:	887b      	ldrh	r3, [r7, #2]
 8010d14:	18d1      	adds	r1, r2, r3
 8010d16:	7eba      	ldrb	r2, [r7, #26]
 8010d18:	7bfb      	ldrb	r3, [r7, #15]
 8010d1a:	9300      	str	r3, [sp, #0]
 8010d1c:	460b      	mov	r3, r1
 8010d1e:	6939      	ldr	r1, [r7, #16]
 8010d20:	6878      	ldr	r0, [r7, #4]
 8010d22:	f7ff fa4f 	bl	80101c4 <tcp_create_segment>
 8010d26:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8010d28:	69fb      	ldr	r3, [r7, #28]
 8010d2a:	2b00      	cmp	r3, #0
 8010d2c:	d063      	beq.n	8010df6 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8010d2e:	697b      	ldr	r3, [r7, #20]
 8010d30:	685b      	ldr	r3, [r3, #4]
 8010d32:	4618      	mov	r0, r3
 8010d34:	f7fa fe96 	bl	800ba64 <pbuf_clen>
 8010d38:	4603      	mov	r3, r0
 8010d3a:	461a      	mov	r2, r3
 8010d3c:	687b      	ldr	r3, [r7, #4]
 8010d3e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010d42:	1a9b      	subs	r3, r3, r2
 8010d44:	b29a      	uxth	r2, r3
 8010d46:	687b      	ldr	r3, [r7, #4]
 8010d48:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8010d4c:	697b      	ldr	r3, [r7, #20]
 8010d4e:	6858      	ldr	r0, [r3, #4]
 8010d50:	697b      	ldr	r3, [r7, #20]
 8010d52:	685b      	ldr	r3, [r3, #4]
 8010d54:	891a      	ldrh	r2, [r3, #8]
 8010d56:	89bb      	ldrh	r3, [r7, #12]
 8010d58:	1ad3      	subs	r3, r2, r3
 8010d5a:	b29b      	uxth	r3, r3
 8010d5c:	4619      	mov	r1, r3
 8010d5e:	f7fa fc6d 	bl	800b63c <pbuf_realloc>
  useg->len -= remainder;
 8010d62:	697b      	ldr	r3, [r7, #20]
 8010d64:	891a      	ldrh	r2, [r3, #8]
 8010d66:	89bb      	ldrh	r3, [r7, #12]
 8010d68:	1ad3      	subs	r3, r2, r3
 8010d6a:	b29a      	uxth	r2, r3
 8010d6c:	697b      	ldr	r3, [r7, #20]
 8010d6e:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8010d70:	697b      	ldr	r3, [r7, #20]
 8010d72:	68db      	ldr	r3, [r3, #12]
 8010d74:	899b      	ldrh	r3, [r3, #12]
 8010d76:	b29c      	uxth	r4, r3
 8010d78:	7efb      	ldrb	r3, [r7, #27]
 8010d7a:	b29b      	uxth	r3, r3
 8010d7c:	4618      	mov	r0, r3
 8010d7e:	f7f9 f9e5 	bl	800a14c <lwip_htons>
 8010d82:	4603      	mov	r3, r0
 8010d84:	461a      	mov	r2, r3
 8010d86:	697b      	ldr	r3, [r7, #20]
 8010d88:	68db      	ldr	r3, [r3, #12]
 8010d8a:	4322      	orrs	r2, r4
 8010d8c:	b292      	uxth	r2, r2
 8010d8e:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8010d90:	697b      	ldr	r3, [r7, #20]
 8010d92:	685b      	ldr	r3, [r3, #4]
 8010d94:	4618      	mov	r0, r3
 8010d96:	f7fa fe65 	bl	800ba64 <pbuf_clen>
 8010d9a:	4603      	mov	r3, r0
 8010d9c:	461a      	mov	r2, r3
 8010d9e:	687b      	ldr	r3, [r7, #4]
 8010da0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010da4:	4413      	add	r3, r2
 8010da6:	b29a      	uxth	r2, r3
 8010da8:	687b      	ldr	r3, [r7, #4]
 8010daa:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8010dae:	69fb      	ldr	r3, [r7, #28]
 8010db0:	685b      	ldr	r3, [r3, #4]
 8010db2:	4618      	mov	r0, r3
 8010db4:	f7fa fe56 	bl	800ba64 <pbuf_clen>
 8010db8:	4603      	mov	r3, r0
 8010dba:	461a      	mov	r2, r3
 8010dbc:	687b      	ldr	r3, [r7, #4]
 8010dbe:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010dc2:	4413      	add	r3, r2
 8010dc4:	b29a      	uxth	r2, r3
 8010dc6:	687b      	ldr	r3, [r7, #4]
 8010dc8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8010dcc:	697b      	ldr	r3, [r7, #20]
 8010dce:	681a      	ldr	r2, [r3, #0]
 8010dd0:	69fb      	ldr	r3, [r7, #28]
 8010dd2:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8010dd4:	697b      	ldr	r3, [r7, #20]
 8010dd6:	69fa      	ldr	r2, [r7, #28]
 8010dd8:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8010dda:	69fb      	ldr	r3, [r7, #28]
 8010ddc:	681b      	ldr	r3, [r3, #0]
 8010dde:	2b00      	cmp	r3, #0
 8010de0:	d103      	bne.n	8010dea <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8010de2:	687b      	ldr	r3, [r7, #4]
 8010de4:	2200      	movs	r2, #0
 8010de6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8010dea:	2300      	movs	r3, #0
 8010dec:	e016      	b.n	8010e1c <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8010dee:	bf00      	nop
 8010df0:	e002      	b.n	8010df8 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8010df2:	bf00      	nop
 8010df4:	e000      	b.n	8010df8 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8010df6:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8010df8:	69fb      	ldr	r3, [r7, #28]
 8010dfa:	2b00      	cmp	r3, #0
 8010dfc:	d006      	beq.n	8010e0c <tcp_split_unsent_seg+0x25c>
 8010dfe:	4b09      	ldr	r3, [pc, #36]	; (8010e24 <tcp_split_unsent_seg+0x274>)
 8010e00:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8010e04:	490d      	ldr	r1, [pc, #52]	; (8010e3c <tcp_split_unsent_seg+0x28c>)
 8010e06:	4809      	ldr	r0, [pc, #36]	; (8010e2c <tcp_split_unsent_seg+0x27c>)
 8010e08:	f006 fc44 	bl	8017694 <iprintf>
  if (p != NULL) {
 8010e0c:	693b      	ldr	r3, [r7, #16]
 8010e0e:	2b00      	cmp	r3, #0
 8010e10:	d002      	beq.n	8010e18 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8010e12:	6938      	ldr	r0, [r7, #16]
 8010e14:	f7fa fd98 	bl	800b948 <pbuf_free>
  }

  return ERR_MEM;
 8010e18:	f04f 33ff 	mov.w	r3, #4294967295
}
 8010e1c:	4618      	mov	r0, r3
 8010e1e:	3724      	adds	r7, #36	; 0x24
 8010e20:	46bd      	mov	sp, r7
 8010e22:	bd90      	pop	{r4, r7, pc}
 8010e24:	0801a784 	.word	0x0801a784
 8010e28:	0801ab18 	.word	0x0801ab18
 8010e2c:	0801a7d8 	.word	0x0801a7d8
 8010e30:	0801ab3c 	.word	0x0801ab3c
 8010e34:	0801ab60 	.word	0x0801ab60
 8010e38:	0801ab70 	.word	0x0801ab70
 8010e3c:	0801ab80 	.word	0x0801ab80

08010e40 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8010e40:	b590      	push	{r4, r7, lr}
 8010e42:	b085      	sub	sp, #20
 8010e44:	af00      	add	r7, sp, #0
 8010e46:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8010e48:	687b      	ldr	r3, [r7, #4]
 8010e4a:	2b00      	cmp	r3, #0
 8010e4c:	d106      	bne.n	8010e5c <tcp_send_fin+0x1c>
 8010e4e:	4b21      	ldr	r3, [pc, #132]	; (8010ed4 <tcp_send_fin+0x94>)
 8010e50:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8010e54:	4920      	ldr	r1, [pc, #128]	; (8010ed8 <tcp_send_fin+0x98>)
 8010e56:	4821      	ldr	r0, [pc, #132]	; (8010edc <tcp_send_fin+0x9c>)
 8010e58:	f006 fc1c 	bl	8017694 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8010e5c:	687b      	ldr	r3, [r7, #4]
 8010e5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010e60:	2b00      	cmp	r3, #0
 8010e62:	d02e      	beq.n	8010ec2 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8010e64:	687b      	ldr	r3, [r7, #4]
 8010e66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010e68:	60fb      	str	r3, [r7, #12]
 8010e6a:	e002      	b.n	8010e72 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8010e6c:	68fb      	ldr	r3, [r7, #12]
 8010e6e:	681b      	ldr	r3, [r3, #0]
 8010e70:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8010e72:	68fb      	ldr	r3, [r7, #12]
 8010e74:	681b      	ldr	r3, [r3, #0]
 8010e76:	2b00      	cmp	r3, #0
 8010e78:	d1f8      	bne.n	8010e6c <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8010e7a:	68fb      	ldr	r3, [r7, #12]
 8010e7c:	68db      	ldr	r3, [r3, #12]
 8010e7e:	899b      	ldrh	r3, [r3, #12]
 8010e80:	b29b      	uxth	r3, r3
 8010e82:	4618      	mov	r0, r3
 8010e84:	f7f9 f962 	bl	800a14c <lwip_htons>
 8010e88:	4603      	mov	r3, r0
 8010e8a:	b2db      	uxtb	r3, r3
 8010e8c:	f003 0307 	and.w	r3, r3, #7
 8010e90:	2b00      	cmp	r3, #0
 8010e92:	d116      	bne.n	8010ec2 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8010e94:	68fb      	ldr	r3, [r7, #12]
 8010e96:	68db      	ldr	r3, [r3, #12]
 8010e98:	899b      	ldrh	r3, [r3, #12]
 8010e9a:	b29c      	uxth	r4, r3
 8010e9c:	2001      	movs	r0, #1
 8010e9e:	f7f9 f955 	bl	800a14c <lwip_htons>
 8010ea2:	4603      	mov	r3, r0
 8010ea4:	461a      	mov	r2, r3
 8010ea6:	68fb      	ldr	r3, [r7, #12]
 8010ea8:	68db      	ldr	r3, [r3, #12]
 8010eaa:	4322      	orrs	r2, r4
 8010eac:	b292      	uxth	r2, r2
 8010eae:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8010eb0:	687b      	ldr	r3, [r7, #4]
 8010eb2:	8b5b      	ldrh	r3, [r3, #26]
 8010eb4:	f043 0320 	orr.w	r3, r3, #32
 8010eb8:	b29a      	uxth	r2, r3
 8010eba:	687b      	ldr	r3, [r7, #4]
 8010ebc:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8010ebe:	2300      	movs	r3, #0
 8010ec0:	e004      	b.n	8010ecc <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8010ec2:	2101      	movs	r1, #1
 8010ec4:	6878      	ldr	r0, [r7, #4]
 8010ec6:	f000 f80b 	bl	8010ee0 <tcp_enqueue_flags>
 8010eca:	4603      	mov	r3, r0
}
 8010ecc:	4618      	mov	r0, r3
 8010ece:	3714      	adds	r7, #20
 8010ed0:	46bd      	mov	sp, r7
 8010ed2:	bd90      	pop	{r4, r7, pc}
 8010ed4:	0801a784 	.word	0x0801a784
 8010ed8:	0801ab8c 	.word	0x0801ab8c
 8010edc:	0801a7d8 	.word	0x0801a7d8

08010ee0 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8010ee0:	b580      	push	{r7, lr}
 8010ee2:	b08a      	sub	sp, #40	; 0x28
 8010ee4:	af02      	add	r7, sp, #8
 8010ee6:	6078      	str	r0, [r7, #4]
 8010ee8:	460b      	mov	r3, r1
 8010eea:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8010eec:	2300      	movs	r3, #0
 8010eee:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8010ef0:	2300      	movs	r3, #0
 8010ef2:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8010ef4:	78fb      	ldrb	r3, [r7, #3]
 8010ef6:	f003 0303 	and.w	r3, r3, #3
 8010efa:	2b00      	cmp	r3, #0
 8010efc:	d106      	bne.n	8010f0c <tcp_enqueue_flags+0x2c>
 8010efe:	4b67      	ldr	r3, [pc, #412]	; (801109c <tcp_enqueue_flags+0x1bc>)
 8010f00:	f240 4211 	movw	r2, #1041	; 0x411
 8010f04:	4966      	ldr	r1, [pc, #408]	; (80110a0 <tcp_enqueue_flags+0x1c0>)
 8010f06:	4867      	ldr	r0, [pc, #412]	; (80110a4 <tcp_enqueue_flags+0x1c4>)
 8010f08:	f006 fbc4 	bl	8017694 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8010f0c:	687b      	ldr	r3, [r7, #4]
 8010f0e:	2b00      	cmp	r3, #0
 8010f10:	d106      	bne.n	8010f20 <tcp_enqueue_flags+0x40>
 8010f12:	4b62      	ldr	r3, [pc, #392]	; (801109c <tcp_enqueue_flags+0x1bc>)
 8010f14:	f240 4213 	movw	r2, #1043	; 0x413
 8010f18:	4963      	ldr	r1, [pc, #396]	; (80110a8 <tcp_enqueue_flags+0x1c8>)
 8010f1a:	4862      	ldr	r0, [pc, #392]	; (80110a4 <tcp_enqueue_flags+0x1c4>)
 8010f1c:	f006 fbba 	bl	8017694 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8010f20:	78fb      	ldrb	r3, [r7, #3]
 8010f22:	f003 0302 	and.w	r3, r3, #2
 8010f26:	2b00      	cmp	r3, #0
 8010f28:	d001      	beq.n	8010f2e <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8010f2a:	2301      	movs	r3, #1
 8010f2c:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8010f2e:	7ffb      	ldrb	r3, [r7, #31]
 8010f30:	009b      	lsls	r3, r3, #2
 8010f32:	b2db      	uxtb	r3, r3
 8010f34:	f003 0304 	and.w	r3, r3, #4
 8010f38:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8010f3a:	7dfb      	ldrb	r3, [r7, #23]
 8010f3c:	b29b      	uxth	r3, r3
 8010f3e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010f42:	4619      	mov	r1, r3
 8010f44:	2036      	movs	r0, #54	; 0x36
 8010f46:	f7fa fa1b 	bl	800b380 <pbuf_alloc>
 8010f4a:	6138      	str	r0, [r7, #16]
 8010f4c:	693b      	ldr	r3, [r7, #16]
 8010f4e:	2b00      	cmp	r3, #0
 8010f50:	d109      	bne.n	8010f66 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8010f52:	687b      	ldr	r3, [r7, #4]
 8010f54:	8b5b      	ldrh	r3, [r3, #26]
 8010f56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010f5a:	b29a      	uxth	r2, r3
 8010f5c:	687b      	ldr	r3, [r7, #4]
 8010f5e:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8010f60:	f04f 33ff 	mov.w	r3, #4294967295
 8010f64:	e095      	b.n	8011092 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8010f66:	693b      	ldr	r3, [r7, #16]
 8010f68:	895a      	ldrh	r2, [r3, #10]
 8010f6a:	7dfb      	ldrb	r3, [r7, #23]
 8010f6c:	b29b      	uxth	r3, r3
 8010f6e:	429a      	cmp	r2, r3
 8010f70:	d206      	bcs.n	8010f80 <tcp_enqueue_flags+0xa0>
 8010f72:	4b4a      	ldr	r3, [pc, #296]	; (801109c <tcp_enqueue_flags+0x1bc>)
 8010f74:	f240 4239 	movw	r2, #1081	; 0x439
 8010f78:	494c      	ldr	r1, [pc, #304]	; (80110ac <tcp_enqueue_flags+0x1cc>)
 8010f7a:	484a      	ldr	r0, [pc, #296]	; (80110a4 <tcp_enqueue_flags+0x1c4>)
 8010f7c:	f006 fb8a 	bl	8017694 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8010f80:	687b      	ldr	r3, [r7, #4]
 8010f82:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8010f84:	78fa      	ldrb	r2, [r7, #3]
 8010f86:	7ffb      	ldrb	r3, [r7, #31]
 8010f88:	9300      	str	r3, [sp, #0]
 8010f8a:	460b      	mov	r3, r1
 8010f8c:	6939      	ldr	r1, [r7, #16]
 8010f8e:	6878      	ldr	r0, [r7, #4]
 8010f90:	f7ff f918 	bl	80101c4 <tcp_create_segment>
 8010f94:	60f8      	str	r0, [r7, #12]
 8010f96:	68fb      	ldr	r3, [r7, #12]
 8010f98:	2b00      	cmp	r3, #0
 8010f9a:	d109      	bne.n	8010fb0 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8010f9c:	687b      	ldr	r3, [r7, #4]
 8010f9e:	8b5b      	ldrh	r3, [r3, #26]
 8010fa0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010fa4:	b29a      	uxth	r2, r3
 8010fa6:	687b      	ldr	r3, [r7, #4]
 8010fa8:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8010faa:	f04f 33ff 	mov.w	r3, #4294967295
 8010fae:	e070      	b.n	8011092 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8010fb0:	68fb      	ldr	r3, [r7, #12]
 8010fb2:	68db      	ldr	r3, [r3, #12]
 8010fb4:	f003 0303 	and.w	r3, r3, #3
 8010fb8:	2b00      	cmp	r3, #0
 8010fba:	d006      	beq.n	8010fca <tcp_enqueue_flags+0xea>
 8010fbc:	4b37      	ldr	r3, [pc, #220]	; (801109c <tcp_enqueue_flags+0x1bc>)
 8010fbe:	f240 4242 	movw	r2, #1090	; 0x442
 8010fc2:	493b      	ldr	r1, [pc, #236]	; (80110b0 <tcp_enqueue_flags+0x1d0>)
 8010fc4:	4837      	ldr	r0, [pc, #220]	; (80110a4 <tcp_enqueue_flags+0x1c4>)
 8010fc6:	f006 fb65 	bl	8017694 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8010fca:	68fb      	ldr	r3, [r7, #12]
 8010fcc:	891b      	ldrh	r3, [r3, #8]
 8010fce:	2b00      	cmp	r3, #0
 8010fd0:	d006      	beq.n	8010fe0 <tcp_enqueue_flags+0x100>
 8010fd2:	4b32      	ldr	r3, [pc, #200]	; (801109c <tcp_enqueue_flags+0x1bc>)
 8010fd4:	f240 4243 	movw	r2, #1091	; 0x443
 8010fd8:	4936      	ldr	r1, [pc, #216]	; (80110b4 <tcp_enqueue_flags+0x1d4>)
 8010fda:	4832      	ldr	r0, [pc, #200]	; (80110a4 <tcp_enqueue_flags+0x1c4>)
 8010fdc:	f006 fb5a 	bl	8017694 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8010fe0:	687b      	ldr	r3, [r7, #4]
 8010fe2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010fe4:	2b00      	cmp	r3, #0
 8010fe6:	d103      	bne.n	8010ff0 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8010fe8:	687b      	ldr	r3, [r7, #4]
 8010fea:	68fa      	ldr	r2, [r7, #12]
 8010fec:	66da      	str	r2, [r3, #108]	; 0x6c
 8010fee:	e00d      	b.n	801100c <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8010ff0:	687b      	ldr	r3, [r7, #4]
 8010ff2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010ff4:	61bb      	str	r3, [r7, #24]
 8010ff6:	e002      	b.n	8010ffe <tcp_enqueue_flags+0x11e>
 8010ff8:	69bb      	ldr	r3, [r7, #24]
 8010ffa:	681b      	ldr	r3, [r3, #0]
 8010ffc:	61bb      	str	r3, [r7, #24]
 8010ffe:	69bb      	ldr	r3, [r7, #24]
 8011000:	681b      	ldr	r3, [r3, #0]
 8011002:	2b00      	cmp	r3, #0
 8011004:	d1f8      	bne.n	8010ff8 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8011006:	69bb      	ldr	r3, [r7, #24]
 8011008:	68fa      	ldr	r2, [r7, #12]
 801100a:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 801100c:	687b      	ldr	r3, [r7, #4]
 801100e:	2200      	movs	r2, #0
 8011010:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8011014:	78fb      	ldrb	r3, [r7, #3]
 8011016:	f003 0302 	and.w	r3, r3, #2
 801101a:	2b00      	cmp	r3, #0
 801101c:	d104      	bne.n	8011028 <tcp_enqueue_flags+0x148>
 801101e:	78fb      	ldrb	r3, [r7, #3]
 8011020:	f003 0301 	and.w	r3, r3, #1
 8011024:	2b00      	cmp	r3, #0
 8011026:	d004      	beq.n	8011032 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8011028:	687b      	ldr	r3, [r7, #4]
 801102a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801102c:	1c5a      	adds	r2, r3, #1
 801102e:	687b      	ldr	r3, [r7, #4]
 8011030:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8011032:	78fb      	ldrb	r3, [r7, #3]
 8011034:	f003 0301 	and.w	r3, r3, #1
 8011038:	2b00      	cmp	r3, #0
 801103a:	d006      	beq.n	801104a <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 801103c:	687b      	ldr	r3, [r7, #4]
 801103e:	8b5b      	ldrh	r3, [r3, #26]
 8011040:	f043 0320 	orr.w	r3, r3, #32
 8011044:	b29a      	uxth	r2, r3
 8011046:	687b      	ldr	r3, [r7, #4]
 8011048:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801104a:	68fb      	ldr	r3, [r7, #12]
 801104c:	685b      	ldr	r3, [r3, #4]
 801104e:	4618      	mov	r0, r3
 8011050:	f7fa fd08 	bl	800ba64 <pbuf_clen>
 8011054:	4603      	mov	r3, r0
 8011056:	461a      	mov	r2, r3
 8011058:	687b      	ldr	r3, [r7, #4]
 801105a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801105e:	4413      	add	r3, r2
 8011060:	b29a      	uxth	r2, r3
 8011062:	687b      	ldr	r3, [r7, #4]
 8011064:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8011068:	687b      	ldr	r3, [r7, #4]
 801106a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801106e:	2b00      	cmp	r3, #0
 8011070:	d00e      	beq.n	8011090 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8011072:	687b      	ldr	r3, [r7, #4]
 8011074:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011076:	2b00      	cmp	r3, #0
 8011078:	d10a      	bne.n	8011090 <tcp_enqueue_flags+0x1b0>
 801107a:	687b      	ldr	r3, [r7, #4]
 801107c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801107e:	2b00      	cmp	r3, #0
 8011080:	d106      	bne.n	8011090 <tcp_enqueue_flags+0x1b0>
 8011082:	4b06      	ldr	r3, [pc, #24]	; (801109c <tcp_enqueue_flags+0x1bc>)
 8011084:	f240 4265 	movw	r2, #1125	; 0x465
 8011088:	490b      	ldr	r1, [pc, #44]	; (80110b8 <tcp_enqueue_flags+0x1d8>)
 801108a:	4806      	ldr	r0, [pc, #24]	; (80110a4 <tcp_enqueue_flags+0x1c4>)
 801108c:	f006 fb02 	bl	8017694 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8011090:	2300      	movs	r3, #0
}
 8011092:	4618      	mov	r0, r3
 8011094:	3720      	adds	r7, #32
 8011096:	46bd      	mov	sp, r7
 8011098:	bd80      	pop	{r7, pc}
 801109a:	bf00      	nop
 801109c:	0801a784 	.word	0x0801a784
 80110a0:	0801aba8 	.word	0x0801aba8
 80110a4:	0801a7d8 	.word	0x0801a7d8
 80110a8:	0801ac00 	.word	0x0801ac00
 80110ac:	0801ac20 	.word	0x0801ac20
 80110b0:	0801ac5c 	.word	0x0801ac5c
 80110b4:	0801ac74 	.word	0x0801ac74
 80110b8:	0801aca0 	.word	0x0801aca0

080110bc <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 80110bc:	b5b0      	push	{r4, r5, r7, lr}
 80110be:	b08a      	sub	sp, #40	; 0x28
 80110c0:	af00      	add	r7, sp, #0
 80110c2:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 80110c4:	687b      	ldr	r3, [r7, #4]
 80110c6:	2b00      	cmp	r3, #0
 80110c8:	d106      	bne.n	80110d8 <tcp_output+0x1c>
 80110ca:	4b8a      	ldr	r3, [pc, #552]	; (80112f4 <tcp_output+0x238>)
 80110cc:	f240 42e1 	movw	r2, #1249	; 0x4e1
 80110d0:	4989      	ldr	r1, [pc, #548]	; (80112f8 <tcp_output+0x23c>)
 80110d2:	488a      	ldr	r0, [pc, #552]	; (80112fc <tcp_output+0x240>)
 80110d4:	f006 fade 	bl	8017694 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 80110d8:	687b      	ldr	r3, [r7, #4]
 80110da:	7d1b      	ldrb	r3, [r3, #20]
 80110dc:	2b01      	cmp	r3, #1
 80110de:	d106      	bne.n	80110ee <tcp_output+0x32>
 80110e0:	4b84      	ldr	r3, [pc, #528]	; (80112f4 <tcp_output+0x238>)
 80110e2:	f240 42e3 	movw	r2, #1251	; 0x4e3
 80110e6:	4986      	ldr	r1, [pc, #536]	; (8011300 <tcp_output+0x244>)
 80110e8:	4884      	ldr	r0, [pc, #528]	; (80112fc <tcp_output+0x240>)
 80110ea:	f006 fad3 	bl	8017694 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 80110ee:	4b85      	ldr	r3, [pc, #532]	; (8011304 <tcp_output+0x248>)
 80110f0:	681b      	ldr	r3, [r3, #0]
 80110f2:	687a      	ldr	r2, [r7, #4]
 80110f4:	429a      	cmp	r2, r3
 80110f6:	d101      	bne.n	80110fc <tcp_output+0x40>
    return ERR_OK;
 80110f8:	2300      	movs	r3, #0
 80110fa:	e1ce      	b.n	801149a <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 80110fc:	687b      	ldr	r3, [r7, #4]
 80110fe:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011102:	687b      	ldr	r3, [r7, #4]
 8011104:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011108:	4293      	cmp	r3, r2
 801110a:	bf28      	it	cs
 801110c:	4613      	movcs	r3, r2
 801110e:	b29b      	uxth	r3, r3
 8011110:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8011112:	687b      	ldr	r3, [r7, #4]
 8011114:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011116:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8011118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801111a:	2b00      	cmp	r3, #0
 801111c:	d10b      	bne.n	8011136 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 801111e:	687b      	ldr	r3, [r7, #4]
 8011120:	8b5b      	ldrh	r3, [r3, #26]
 8011122:	f003 0302 	and.w	r3, r3, #2
 8011126:	2b00      	cmp	r3, #0
 8011128:	f000 81aa 	beq.w	8011480 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 801112c:	6878      	ldr	r0, [r7, #4]
 801112e:	f000 fdcb 	bl	8011cc8 <tcp_send_empty_ack>
 8011132:	4603      	mov	r3, r0
 8011134:	e1b1      	b.n	801149a <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8011136:	6879      	ldr	r1, [r7, #4]
 8011138:	687b      	ldr	r3, [r7, #4]
 801113a:	3304      	adds	r3, #4
 801113c:	461a      	mov	r2, r3
 801113e:	6878      	ldr	r0, [r7, #4]
 8011140:	f7ff f824 	bl	801018c <tcp_route>
 8011144:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8011146:	697b      	ldr	r3, [r7, #20]
 8011148:	2b00      	cmp	r3, #0
 801114a:	d102      	bne.n	8011152 <tcp_output+0x96>
    return ERR_RTE;
 801114c:	f06f 0303 	mvn.w	r3, #3
 8011150:	e1a3      	b.n	801149a <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8011152:	687b      	ldr	r3, [r7, #4]
 8011154:	2b00      	cmp	r3, #0
 8011156:	d003      	beq.n	8011160 <tcp_output+0xa4>
 8011158:	687b      	ldr	r3, [r7, #4]
 801115a:	681b      	ldr	r3, [r3, #0]
 801115c:	2b00      	cmp	r3, #0
 801115e:	d111      	bne.n	8011184 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8011160:	697b      	ldr	r3, [r7, #20]
 8011162:	2b00      	cmp	r3, #0
 8011164:	d002      	beq.n	801116c <tcp_output+0xb0>
 8011166:	697b      	ldr	r3, [r7, #20]
 8011168:	3304      	adds	r3, #4
 801116a:	e000      	b.n	801116e <tcp_output+0xb2>
 801116c:	2300      	movs	r3, #0
 801116e:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8011170:	693b      	ldr	r3, [r7, #16]
 8011172:	2b00      	cmp	r3, #0
 8011174:	d102      	bne.n	801117c <tcp_output+0xc0>
      return ERR_RTE;
 8011176:	f06f 0303 	mvn.w	r3, #3
 801117a:	e18e      	b.n	801149a <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 801117c:	693b      	ldr	r3, [r7, #16]
 801117e:	681a      	ldr	r2, [r3, #0]
 8011180:	687b      	ldr	r3, [r7, #4]
 8011182:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8011184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011186:	68db      	ldr	r3, [r3, #12]
 8011188:	685b      	ldr	r3, [r3, #4]
 801118a:	4618      	mov	r0, r3
 801118c:	f7f8 fff3 	bl	800a176 <lwip_htonl>
 8011190:	4602      	mov	r2, r0
 8011192:	687b      	ldr	r3, [r7, #4]
 8011194:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011196:	1ad3      	subs	r3, r2, r3
 8011198:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801119a:	8912      	ldrh	r2, [r2, #8]
 801119c:	4413      	add	r3, r2
 801119e:	69ba      	ldr	r2, [r7, #24]
 80111a0:	429a      	cmp	r2, r3
 80111a2:	d227      	bcs.n	80111f4 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 80111a4:	687b      	ldr	r3, [r7, #4]
 80111a6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80111aa:	461a      	mov	r2, r3
 80111ac:	69bb      	ldr	r3, [r7, #24]
 80111ae:	4293      	cmp	r3, r2
 80111b0:	d114      	bne.n	80111dc <tcp_output+0x120>
 80111b2:	687b      	ldr	r3, [r7, #4]
 80111b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80111b6:	2b00      	cmp	r3, #0
 80111b8:	d110      	bne.n	80111dc <tcp_output+0x120>
 80111ba:	687b      	ldr	r3, [r7, #4]
 80111bc:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80111c0:	2b00      	cmp	r3, #0
 80111c2:	d10b      	bne.n	80111dc <tcp_output+0x120>
      pcb->persist_cnt = 0;
 80111c4:	687b      	ldr	r3, [r7, #4]
 80111c6:	2200      	movs	r2, #0
 80111c8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 80111cc:	687b      	ldr	r3, [r7, #4]
 80111ce:	2201      	movs	r2, #1
 80111d0:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 80111d4:	687b      	ldr	r3, [r7, #4]
 80111d6:	2200      	movs	r2, #0
 80111d8:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 80111dc:	687b      	ldr	r3, [r7, #4]
 80111de:	8b5b      	ldrh	r3, [r3, #26]
 80111e0:	f003 0302 	and.w	r3, r3, #2
 80111e4:	2b00      	cmp	r3, #0
 80111e6:	f000 814d 	beq.w	8011484 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 80111ea:	6878      	ldr	r0, [r7, #4]
 80111ec:	f000 fd6c 	bl	8011cc8 <tcp_send_empty_ack>
 80111f0:	4603      	mov	r3, r0
 80111f2:	e152      	b.n	801149a <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 80111f4:	687b      	ldr	r3, [r7, #4]
 80111f6:	2200      	movs	r2, #0
 80111f8:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 80111fc:	687b      	ldr	r3, [r7, #4]
 80111fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011200:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8011202:	6a3b      	ldr	r3, [r7, #32]
 8011204:	2b00      	cmp	r3, #0
 8011206:	f000 811c 	beq.w	8011442 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 801120a:	e002      	b.n	8011212 <tcp_output+0x156>
 801120c:	6a3b      	ldr	r3, [r7, #32]
 801120e:	681b      	ldr	r3, [r3, #0]
 8011210:	623b      	str	r3, [r7, #32]
 8011212:	6a3b      	ldr	r3, [r7, #32]
 8011214:	681b      	ldr	r3, [r3, #0]
 8011216:	2b00      	cmp	r3, #0
 8011218:	d1f8      	bne.n	801120c <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 801121a:	e112      	b.n	8011442 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 801121c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801121e:	68db      	ldr	r3, [r3, #12]
 8011220:	899b      	ldrh	r3, [r3, #12]
 8011222:	b29b      	uxth	r3, r3
 8011224:	4618      	mov	r0, r3
 8011226:	f7f8 ff91 	bl	800a14c <lwip_htons>
 801122a:	4603      	mov	r3, r0
 801122c:	b2db      	uxtb	r3, r3
 801122e:	f003 0304 	and.w	r3, r3, #4
 8011232:	2b00      	cmp	r3, #0
 8011234:	d006      	beq.n	8011244 <tcp_output+0x188>
 8011236:	4b2f      	ldr	r3, [pc, #188]	; (80112f4 <tcp_output+0x238>)
 8011238:	f240 5236 	movw	r2, #1334	; 0x536
 801123c:	4932      	ldr	r1, [pc, #200]	; (8011308 <tcp_output+0x24c>)
 801123e:	482f      	ldr	r0, [pc, #188]	; (80112fc <tcp_output+0x240>)
 8011240:	f006 fa28 	bl	8017694 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8011244:	687b      	ldr	r3, [r7, #4]
 8011246:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011248:	2b00      	cmp	r3, #0
 801124a:	d01f      	beq.n	801128c <tcp_output+0x1d0>
 801124c:	687b      	ldr	r3, [r7, #4]
 801124e:	8b5b      	ldrh	r3, [r3, #26]
 8011250:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8011254:	2b00      	cmp	r3, #0
 8011256:	d119      	bne.n	801128c <tcp_output+0x1d0>
 8011258:	687b      	ldr	r3, [r7, #4]
 801125a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801125c:	2b00      	cmp	r3, #0
 801125e:	d00b      	beq.n	8011278 <tcp_output+0x1bc>
 8011260:	687b      	ldr	r3, [r7, #4]
 8011262:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011264:	681b      	ldr	r3, [r3, #0]
 8011266:	2b00      	cmp	r3, #0
 8011268:	d110      	bne.n	801128c <tcp_output+0x1d0>
 801126a:	687b      	ldr	r3, [r7, #4]
 801126c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801126e:	891a      	ldrh	r2, [r3, #8]
 8011270:	687b      	ldr	r3, [r7, #4]
 8011272:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011274:	429a      	cmp	r2, r3
 8011276:	d209      	bcs.n	801128c <tcp_output+0x1d0>
 8011278:	687b      	ldr	r3, [r7, #4]
 801127a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801127e:	2b00      	cmp	r3, #0
 8011280:	d004      	beq.n	801128c <tcp_output+0x1d0>
 8011282:	687b      	ldr	r3, [r7, #4]
 8011284:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011288:	2b08      	cmp	r3, #8
 801128a:	d901      	bls.n	8011290 <tcp_output+0x1d4>
 801128c:	2301      	movs	r3, #1
 801128e:	e000      	b.n	8011292 <tcp_output+0x1d6>
 8011290:	2300      	movs	r3, #0
 8011292:	2b00      	cmp	r3, #0
 8011294:	d106      	bne.n	80112a4 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8011296:	687b      	ldr	r3, [r7, #4]
 8011298:	8b5b      	ldrh	r3, [r3, #26]
 801129a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801129e:	2b00      	cmp	r3, #0
 80112a0:	f000 80e4 	beq.w	801146c <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 80112a4:	687b      	ldr	r3, [r7, #4]
 80112a6:	7d1b      	ldrb	r3, [r3, #20]
 80112a8:	2b02      	cmp	r3, #2
 80112aa:	d00d      	beq.n	80112c8 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 80112ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112ae:	68db      	ldr	r3, [r3, #12]
 80112b0:	899b      	ldrh	r3, [r3, #12]
 80112b2:	b29c      	uxth	r4, r3
 80112b4:	2010      	movs	r0, #16
 80112b6:	f7f8 ff49 	bl	800a14c <lwip_htons>
 80112ba:	4603      	mov	r3, r0
 80112bc:	461a      	mov	r2, r3
 80112be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112c0:	68db      	ldr	r3, [r3, #12]
 80112c2:	4322      	orrs	r2, r4
 80112c4:	b292      	uxth	r2, r2
 80112c6:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 80112c8:	697a      	ldr	r2, [r7, #20]
 80112ca:	6879      	ldr	r1, [r7, #4]
 80112cc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80112ce:	f000 f909 	bl	80114e4 <tcp_output_segment>
 80112d2:	4603      	mov	r3, r0
 80112d4:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 80112d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80112da:	2b00      	cmp	r3, #0
 80112dc:	d016      	beq.n	801130c <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80112de:	687b      	ldr	r3, [r7, #4]
 80112e0:	8b5b      	ldrh	r3, [r3, #26]
 80112e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80112e6:	b29a      	uxth	r2, r3
 80112e8:	687b      	ldr	r3, [r7, #4]
 80112ea:	835a      	strh	r2, [r3, #26]
      return err;
 80112ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80112f0:	e0d3      	b.n	801149a <tcp_output+0x3de>
 80112f2:	bf00      	nop
 80112f4:	0801a784 	.word	0x0801a784
 80112f8:	0801acc8 	.word	0x0801acc8
 80112fc:	0801a7d8 	.word	0x0801a7d8
 8011300:	0801ace0 	.word	0x0801ace0
 8011304:	20010984 	.word	0x20010984
 8011308:	0801ad08 	.word	0x0801ad08
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 801130c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801130e:	681a      	ldr	r2, [r3, #0]
 8011310:	687b      	ldr	r3, [r7, #4]
 8011312:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8011314:	687b      	ldr	r3, [r7, #4]
 8011316:	7d1b      	ldrb	r3, [r3, #20]
 8011318:	2b02      	cmp	r3, #2
 801131a:	d006      	beq.n	801132a <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801131c:	687b      	ldr	r3, [r7, #4]
 801131e:	8b5b      	ldrh	r3, [r3, #26]
 8011320:	f023 0303 	bic.w	r3, r3, #3
 8011324:	b29a      	uxth	r2, r3
 8011326:	687b      	ldr	r3, [r7, #4]
 8011328:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801132a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801132c:	68db      	ldr	r3, [r3, #12]
 801132e:	685b      	ldr	r3, [r3, #4]
 8011330:	4618      	mov	r0, r3
 8011332:	f7f8 ff20 	bl	800a176 <lwip_htonl>
 8011336:	4604      	mov	r4, r0
 8011338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801133a:	891b      	ldrh	r3, [r3, #8]
 801133c:	461d      	mov	r5, r3
 801133e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011340:	68db      	ldr	r3, [r3, #12]
 8011342:	899b      	ldrh	r3, [r3, #12]
 8011344:	b29b      	uxth	r3, r3
 8011346:	4618      	mov	r0, r3
 8011348:	f7f8 ff00 	bl	800a14c <lwip_htons>
 801134c:	4603      	mov	r3, r0
 801134e:	b2db      	uxtb	r3, r3
 8011350:	f003 0303 	and.w	r3, r3, #3
 8011354:	2b00      	cmp	r3, #0
 8011356:	d001      	beq.n	801135c <tcp_output+0x2a0>
 8011358:	2301      	movs	r3, #1
 801135a:	e000      	b.n	801135e <tcp_output+0x2a2>
 801135c:	2300      	movs	r3, #0
 801135e:	442b      	add	r3, r5
 8011360:	4423      	add	r3, r4
 8011362:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8011364:	687b      	ldr	r3, [r7, #4]
 8011366:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011368:	68bb      	ldr	r3, [r7, #8]
 801136a:	1ad3      	subs	r3, r2, r3
 801136c:	2b00      	cmp	r3, #0
 801136e:	da02      	bge.n	8011376 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8011370:	687b      	ldr	r3, [r7, #4]
 8011372:	68ba      	ldr	r2, [r7, #8]
 8011374:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8011376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011378:	891b      	ldrh	r3, [r3, #8]
 801137a:	461c      	mov	r4, r3
 801137c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801137e:	68db      	ldr	r3, [r3, #12]
 8011380:	899b      	ldrh	r3, [r3, #12]
 8011382:	b29b      	uxth	r3, r3
 8011384:	4618      	mov	r0, r3
 8011386:	f7f8 fee1 	bl	800a14c <lwip_htons>
 801138a:	4603      	mov	r3, r0
 801138c:	b2db      	uxtb	r3, r3
 801138e:	f003 0303 	and.w	r3, r3, #3
 8011392:	2b00      	cmp	r3, #0
 8011394:	d001      	beq.n	801139a <tcp_output+0x2de>
 8011396:	2301      	movs	r3, #1
 8011398:	e000      	b.n	801139c <tcp_output+0x2e0>
 801139a:	2300      	movs	r3, #0
 801139c:	4423      	add	r3, r4
 801139e:	2b00      	cmp	r3, #0
 80113a0:	d049      	beq.n	8011436 <tcp_output+0x37a>
      seg->next = NULL;
 80113a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113a4:	2200      	movs	r2, #0
 80113a6:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 80113a8:	687b      	ldr	r3, [r7, #4]
 80113aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80113ac:	2b00      	cmp	r3, #0
 80113ae:	d105      	bne.n	80113bc <tcp_output+0x300>
        pcb->unacked = seg;
 80113b0:	687b      	ldr	r3, [r7, #4]
 80113b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80113b4:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 80113b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113b8:	623b      	str	r3, [r7, #32]
 80113ba:	e03f      	b.n	801143c <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 80113bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113be:	68db      	ldr	r3, [r3, #12]
 80113c0:	685b      	ldr	r3, [r3, #4]
 80113c2:	4618      	mov	r0, r3
 80113c4:	f7f8 fed7 	bl	800a176 <lwip_htonl>
 80113c8:	4604      	mov	r4, r0
 80113ca:	6a3b      	ldr	r3, [r7, #32]
 80113cc:	68db      	ldr	r3, [r3, #12]
 80113ce:	685b      	ldr	r3, [r3, #4]
 80113d0:	4618      	mov	r0, r3
 80113d2:	f7f8 fed0 	bl	800a176 <lwip_htonl>
 80113d6:	4603      	mov	r3, r0
 80113d8:	1ae3      	subs	r3, r4, r3
 80113da:	2b00      	cmp	r3, #0
 80113dc:	da24      	bge.n	8011428 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 80113de:	687b      	ldr	r3, [r7, #4]
 80113e0:	3370      	adds	r3, #112	; 0x70
 80113e2:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80113e4:	e002      	b.n	80113ec <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 80113e6:	69fb      	ldr	r3, [r7, #28]
 80113e8:	681b      	ldr	r3, [r3, #0]
 80113ea:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80113ec:	69fb      	ldr	r3, [r7, #28]
 80113ee:	681b      	ldr	r3, [r3, #0]
 80113f0:	2b00      	cmp	r3, #0
 80113f2:	d011      	beq.n	8011418 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80113f4:	69fb      	ldr	r3, [r7, #28]
 80113f6:	681b      	ldr	r3, [r3, #0]
 80113f8:	68db      	ldr	r3, [r3, #12]
 80113fa:	685b      	ldr	r3, [r3, #4]
 80113fc:	4618      	mov	r0, r3
 80113fe:	f7f8 feba 	bl	800a176 <lwip_htonl>
 8011402:	4604      	mov	r4, r0
 8011404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011406:	68db      	ldr	r3, [r3, #12]
 8011408:	685b      	ldr	r3, [r3, #4]
 801140a:	4618      	mov	r0, r3
 801140c:	f7f8 feb3 	bl	800a176 <lwip_htonl>
 8011410:	4603      	mov	r3, r0
 8011412:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8011414:	2b00      	cmp	r3, #0
 8011416:	dbe6      	blt.n	80113e6 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8011418:	69fb      	ldr	r3, [r7, #28]
 801141a:	681a      	ldr	r2, [r3, #0]
 801141c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801141e:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8011420:	69fb      	ldr	r3, [r7, #28]
 8011422:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011424:	601a      	str	r2, [r3, #0]
 8011426:	e009      	b.n	801143c <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8011428:	6a3b      	ldr	r3, [r7, #32]
 801142a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801142c:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 801142e:	6a3b      	ldr	r3, [r7, #32]
 8011430:	681b      	ldr	r3, [r3, #0]
 8011432:	623b      	str	r3, [r7, #32]
 8011434:	e002      	b.n	801143c <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8011436:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011438:	f7fb ff19 	bl	800d26e <tcp_seg_free>
    }
    seg = pcb->unsent;
 801143c:	687b      	ldr	r3, [r7, #4]
 801143e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011440:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8011442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011444:	2b00      	cmp	r3, #0
 8011446:	d012      	beq.n	801146e <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8011448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801144a:	68db      	ldr	r3, [r3, #12]
 801144c:	685b      	ldr	r3, [r3, #4]
 801144e:	4618      	mov	r0, r3
 8011450:	f7f8 fe91 	bl	800a176 <lwip_htonl>
 8011454:	4602      	mov	r2, r0
 8011456:	687b      	ldr	r3, [r7, #4]
 8011458:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801145a:	1ad3      	subs	r3, r2, r3
 801145c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801145e:	8912      	ldrh	r2, [r2, #8]
 8011460:	4413      	add	r3, r2
  while (seg != NULL &&
 8011462:	69ba      	ldr	r2, [r7, #24]
 8011464:	429a      	cmp	r2, r3
 8011466:	f4bf aed9 	bcs.w	801121c <tcp_output+0x160>
 801146a:	e000      	b.n	801146e <tcp_output+0x3b2>
      break;
 801146c:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 801146e:	687b      	ldr	r3, [r7, #4]
 8011470:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011472:	2b00      	cmp	r3, #0
 8011474:	d108      	bne.n	8011488 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8011476:	687b      	ldr	r3, [r7, #4]
 8011478:	2200      	movs	r2, #0
 801147a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 801147e:	e004      	b.n	801148a <tcp_output+0x3ce>
    goto output_done;
 8011480:	bf00      	nop
 8011482:	e002      	b.n	801148a <tcp_output+0x3ce>
    goto output_done;
 8011484:	bf00      	nop
 8011486:	e000      	b.n	801148a <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8011488:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801148a:	687b      	ldr	r3, [r7, #4]
 801148c:	8b5b      	ldrh	r3, [r3, #26]
 801148e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011492:	b29a      	uxth	r2, r3
 8011494:	687b      	ldr	r3, [r7, #4]
 8011496:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8011498:	2300      	movs	r3, #0
}
 801149a:	4618      	mov	r0, r3
 801149c:	3728      	adds	r7, #40	; 0x28
 801149e:	46bd      	mov	sp, r7
 80114a0:	bdb0      	pop	{r4, r5, r7, pc}
 80114a2:	bf00      	nop

080114a4 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 80114a4:	b580      	push	{r7, lr}
 80114a6:	b082      	sub	sp, #8
 80114a8:	af00      	add	r7, sp, #0
 80114aa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 80114ac:	687b      	ldr	r3, [r7, #4]
 80114ae:	2b00      	cmp	r3, #0
 80114b0:	d106      	bne.n	80114c0 <tcp_output_segment_busy+0x1c>
 80114b2:	4b09      	ldr	r3, [pc, #36]	; (80114d8 <tcp_output_segment_busy+0x34>)
 80114b4:	f240 529a 	movw	r2, #1434	; 0x59a
 80114b8:	4908      	ldr	r1, [pc, #32]	; (80114dc <tcp_output_segment_busy+0x38>)
 80114ba:	4809      	ldr	r0, [pc, #36]	; (80114e0 <tcp_output_segment_busy+0x3c>)
 80114bc:	f006 f8ea 	bl	8017694 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 80114c0:	687b      	ldr	r3, [r7, #4]
 80114c2:	685b      	ldr	r3, [r3, #4]
 80114c4:	7b9b      	ldrb	r3, [r3, #14]
 80114c6:	2b01      	cmp	r3, #1
 80114c8:	d001      	beq.n	80114ce <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 80114ca:	2301      	movs	r3, #1
 80114cc:	e000      	b.n	80114d0 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 80114ce:	2300      	movs	r3, #0
}
 80114d0:	4618      	mov	r0, r3
 80114d2:	3708      	adds	r7, #8
 80114d4:	46bd      	mov	sp, r7
 80114d6:	bd80      	pop	{r7, pc}
 80114d8:	0801a784 	.word	0x0801a784
 80114dc:	0801ad20 	.word	0x0801ad20
 80114e0:	0801a7d8 	.word	0x0801a7d8

080114e4 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 80114e4:	b5b0      	push	{r4, r5, r7, lr}
 80114e6:	b08c      	sub	sp, #48	; 0x30
 80114e8:	af04      	add	r7, sp, #16
 80114ea:	60f8      	str	r0, [r7, #12]
 80114ec:	60b9      	str	r1, [r7, #8]
 80114ee:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 80114f0:	68fb      	ldr	r3, [r7, #12]
 80114f2:	2b00      	cmp	r3, #0
 80114f4:	d106      	bne.n	8011504 <tcp_output_segment+0x20>
 80114f6:	4b63      	ldr	r3, [pc, #396]	; (8011684 <tcp_output_segment+0x1a0>)
 80114f8:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 80114fc:	4962      	ldr	r1, [pc, #392]	; (8011688 <tcp_output_segment+0x1a4>)
 80114fe:	4863      	ldr	r0, [pc, #396]	; (801168c <tcp_output_segment+0x1a8>)
 8011500:	f006 f8c8 	bl	8017694 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8011504:	68bb      	ldr	r3, [r7, #8]
 8011506:	2b00      	cmp	r3, #0
 8011508:	d106      	bne.n	8011518 <tcp_output_segment+0x34>
 801150a:	4b5e      	ldr	r3, [pc, #376]	; (8011684 <tcp_output_segment+0x1a0>)
 801150c:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8011510:	495f      	ldr	r1, [pc, #380]	; (8011690 <tcp_output_segment+0x1ac>)
 8011512:	485e      	ldr	r0, [pc, #376]	; (801168c <tcp_output_segment+0x1a8>)
 8011514:	f006 f8be 	bl	8017694 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8011518:	687b      	ldr	r3, [r7, #4]
 801151a:	2b00      	cmp	r3, #0
 801151c:	d106      	bne.n	801152c <tcp_output_segment+0x48>
 801151e:	4b59      	ldr	r3, [pc, #356]	; (8011684 <tcp_output_segment+0x1a0>)
 8011520:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8011524:	495b      	ldr	r1, [pc, #364]	; (8011694 <tcp_output_segment+0x1b0>)
 8011526:	4859      	ldr	r0, [pc, #356]	; (801168c <tcp_output_segment+0x1a8>)
 8011528:	f006 f8b4 	bl	8017694 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 801152c:	68f8      	ldr	r0, [r7, #12]
 801152e:	f7ff ffb9 	bl	80114a4 <tcp_output_segment_busy>
 8011532:	4603      	mov	r3, r0
 8011534:	2b00      	cmp	r3, #0
 8011536:	d001      	beq.n	801153c <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8011538:	2300      	movs	r3, #0
 801153a:	e09f      	b.n	801167c <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 801153c:	68bb      	ldr	r3, [r7, #8]
 801153e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011540:	68fb      	ldr	r3, [r7, #12]
 8011542:	68dc      	ldr	r4, [r3, #12]
 8011544:	4610      	mov	r0, r2
 8011546:	f7f8 fe16 	bl	800a176 <lwip_htonl>
 801154a:	4603      	mov	r3, r0
 801154c:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801154e:	68bb      	ldr	r3, [r7, #8]
 8011550:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8011552:	68fb      	ldr	r3, [r7, #12]
 8011554:	68dc      	ldr	r4, [r3, #12]
 8011556:	4610      	mov	r0, r2
 8011558:	f7f8 fdf8 	bl	800a14c <lwip_htons>
 801155c:	4603      	mov	r3, r0
 801155e:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8011560:	68bb      	ldr	r3, [r7, #8]
 8011562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011564:	68ba      	ldr	r2, [r7, #8]
 8011566:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8011568:	441a      	add	r2, r3
 801156a:	68bb      	ldr	r3, [r7, #8]
 801156c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801156e:	68fb      	ldr	r3, [r7, #12]
 8011570:	68db      	ldr	r3, [r3, #12]
 8011572:	3314      	adds	r3, #20
 8011574:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8011576:	68fb      	ldr	r3, [r7, #12]
 8011578:	7a9b      	ldrb	r3, [r3, #10]
 801157a:	f003 0301 	and.w	r3, r3, #1
 801157e:	2b00      	cmp	r3, #0
 8011580:	d015      	beq.n	80115ae <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8011582:	68bb      	ldr	r3, [r7, #8]
 8011584:	3304      	adds	r3, #4
 8011586:	461a      	mov	r2, r3
 8011588:	6879      	ldr	r1, [r7, #4]
 801158a:	f44f 7006 	mov.w	r0, #536	; 0x218
 801158e:	f7fc fa33 	bl	800d9f8 <tcp_eff_send_mss_netif>
 8011592:	4603      	mov	r3, r0
 8011594:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8011596:	8b7b      	ldrh	r3, [r7, #26]
 8011598:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 801159c:	4618      	mov	r0, r3
 801159e:	f7f8 fdea 	bl	800a176 <lwip_htonl>
 80115a2:	4602      	mov	r2, r0
 80115a4:	69fb      	ldr	r3, [r7, #28]
 80115a6:	601a      	str	r2, [r3, #0]
    opts += 1;
 80115a8:	69fb      	ldr	r3, [r7, #28]
 80115aa:	3304      	adds	r3, #4
 80115ac:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 80115ae:	68bb      	ldr	r3, [r7, #8]
 80115b0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80115b4:	2b00      	cmp	r3, #0
 80115b6:	da02      	bge.n	80115be <tcp_output_segment+0xda>
    pcb->rtime = 0;
 80115b8:	68bb      	ldr	r3, [r7, #8]
 80115ba:	2200      	movs	r2, #0
 80115bc:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 80115be:	68bb      	ldr	r3, [r7, #8]
 80115c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80115c2:	2b00      	cmp	r3, #0
 80115c4:	d10c      	bne.n	80115e0 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 80115c6:	4b34      	ldr	r3, [pc, #208]	; (8011698 <tcp_output_segment+0x1b4>)
 80115c8:	681a      	ldr	r2, [r3, #0]
 80115ca:	68bb      	ldr	r3, [r7, #8]
 80115cc:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 80115ce:	68fb      	ldr	r3, [r7, #12]
 80115d0:	68db      	ldr	r3, [r3, #12]
 80115d2:	685b      	ldr	r3, [r3, #4]
 80115d4:	4618      	mov	r0, r3
 80115d6:	f7f8 fdce 	bl	800a176 <lwip_htonl>
 80115da:	4602      	mov	r2, r0
 80115dc:	68bb      	ldr	r3, [r7, #8]
 80115de:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 80115e0:	68fb      	ldr	r3, [r7, #12]
 80115e2:	68da      	ldr	r2, [r3, #12]
 80115e4:	68fb      	ldr	r3, [r7, #12]
 80115e6:	685b      	ldr	r3, [r3, #4]
 80115e8:	685b      	ldr	r3, [r3, #4]
 80115ea:	1ad3      	subs	r3, r2, r3
 80115ec:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 80115ee:	68fb      	ldr	r3, [r7, #12]
 80115f0:	685b      	ldr	r3, [r3, #4]
 80115f2:	8959      	ldrh	r1, [r3, #10]
 80115f4:	68fb      	ldr	r3, [r7, #12]
 80115f6:	685b      	ldr	r3, [r3, #4]
 80115f8:	8b3a      	ldrh	r2, [r7, #24]
 80115fa:	1a8a      	subs	r2, r1, r2
 80115fc:	b292      	uxth	r2, r2
 80115fe:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8011600:	68fb      	ldr	r3, [r7, #12]
 8011602:	685b      	ldr	r3, [r3, #4]
 8011604:	8919      	ldrh	r1, [r3, #8]
 8011606:	68fb      	ldr	r3, [r7, #12]
 8011608:	685b      	ldr	r3, [r3, #4]
 801160a:	8b3a      	ldrh	r2, [r7, #24]
 801160c:	1a8a      	subs	r2, r1, r2
 801160e:	b292      	uxth	r2, r2
 8011610:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8011612:	68fb      	ldr	r3, [r7, #12]
 8011614:	685b      	ldr	r3, [r3, #4]
 8011616:	68fa      	ldr	r2, [r7, #12]
 8011618:	68d2      	ldr	r2, [r2, #12]
 801161a:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 801161c:	68fb      	ldr	r3, [r7, #12]
 801161e:	68db      	ldr	r3, [r3, #12]
 8011620:	2200      	movs	r2, #0
 8011622:	741a      	strb	r2, [r3, #16]
 8011624:	2200      	movs	r2, #0
 8011626:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8011628:	68fb      	ldr	r3, [r7, #12]
 801162a:	68db      	ldr	r3, [r3, #12]
 801162c:	f103 0214 	add.w	r2, r3, #20
 8011630:	68fb      	ldr	r3, [r7, #12]
 8011632:	7a9b      	ldrb	r3, [r3, #10]
 8011634:	009b      	lsls	r3, r3, #2
 8011636:	f003 0304 	and.w	r3, r3, #4
 801163a:	4413      	add	r3, r2
 801163c:	69fa      	ldr	r2, [r7, #28]
 801163e:	429a      	cmp	r2, r3
 8011640:	d006      	beq.n	8011650 <tcp_output_segment+0x16c>
 8011642:	4b10      	ldr	r3, [pc, #64]	; (8011684 <tcp_output_segment+0x1a0>)
 8011644:	f240 621c 	movw	r2, #1564	; 0x61c
 8011648:	4914      	ldr	r1, [pc, #80]	; (801169c <tcp_output_segment+0x1b8>)
 801164a:	4810      	ldr	r0, [pc, #64]	; (801168c <tcp_output_segment+0x1a8>)
 801164c:	f006 f822 	bl	8017694 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8011650:	68fb      	ldr	r3, [r7, #12]
 8011652:	6858      	ldr	r0, [r3, #4]
 8011654:	68b9      	ldr	r1, [r7, #8]
 8011656:	68bb      	ldr	r3, [r7, #8]
 8011658:	1d1c      	adds	r4, r3, #4
 801165a:	68bb      	ldr	r3, [r7, #8]
 801165c:	7add      	ldrb	r5, [r3, #11]
 801165e:	68bb      	ldr	r3, [r7, #8]
 8011660:	7a9b      	ldrb	r3, [r3, #10]
 8011662:	687a      	ldr	r2, [r7, #4]
 8011664:	9202      	str	r2, [sp, #8]
 8011666:	2206      	movs	r2, #6
 8011668:	9201      	str	r2, [sp, #4]
 801166a:	9300      	str	r3, [sp, #0]
 801166c:	462b      	mov	r3, r5
 801166e:	4622      	mov	r2, r4
 8011670:	f004 fc28 	bl	8015ec4 <ip4_output_if>
 8011674:	4603      	mov	r3, r0
 8011676:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8011678:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801167c:	4618      	mov	r0, r3
 801167e:	3720      	adds	r7, #32
 8011680:	46bd      	mov	sp, r7
 8011682:	bdb0      	pop	{r4, r5, r7, pc}
 8011684:	0801a784 	.word	0x0801a784
 8011688:	0801ad48 	.word	0x0801ad48
 801168c:	0801a7d8 	.word	0x0801a7d8
 8011690:	0801ad68 	.word	0x0801ad68
 8011694:	0801ad88 	.word	0x0801ad88
 8011698:	20010938 	.word	0x20010938
 801169c:	0801adac 	.word	0x0801adac

080116a0 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 80116a0:	b5b0      	push	{r4, r5, r7, lr}
 80116a2:	b084      	sub	sp, #16
 80116a4:	af00      	add	r7, sp, #0
 80116a6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 80116a8:	687b      	ldr	r3, [r7, #4]
 80116aa:	2b00      	cmp	r3, #0
 80116ac:	d106      	bne.n	80116bc <tcp_rexmit_rto_prepare+0x1c>
 80116ae:	4b31      	ldr	r3, [pc, #196]	; (8011774 <tcp_rexmit_rto_prepare+0xd4>)
 80116b0:	f240 6263 	movw	r2, #1635	; 0x663
 80116b4:	4930      	ldr	r1, [pc, #192]	; (8011778 <tcp_rexmit_rto_prepare+0xd8>)
 80116b6:	4831      	ldr	r0, [pc, #196]	; (801177c <tcp_rexmit_rto_prepare+0xdc>)
 80116b8:	f005 ffec 	bl	8017694 <iprintf>

  if (pcb->unacked == NULL) {
 80116bc:	687b      	ldr	r3, [r7, #4]
 80116be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80116c0:	2b00      	cmp	r3, #0
 80116c2:	d102      	bne.n	80116ca <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 80116c4:	f06f 0305 	mvn.w	r3, #5
 80116c8:	e050      	b.n	801176c <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80116ca:	687b      	ldr	r3, [r7, #4]
 80116cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80116ce:	60fb      	str	r3, [r7, #12]
 80116d0:	e00b      	b.n	80116ea <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 80116d2:	68f8      	ldr	r0, [r7, #12]
 80116d4:	f7ff fee6 	bl	80114a4 <tcp_output_segment_busy>
 80116d8:	4603      	mov	r3, r0
 80116da:	2b00      	cmp	r3, #0
 80116dc:	d002      	beq.n	80116e4 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 80116de:	f06f 0305 	mvn.w	r3, #5
 80116e2:	e043      	b.n	801176c <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80116e4:	68fb      	ldr	r3, [r7, #12]
 80116e6:	681b      	ldr	r3, [r3, #0]
 80116e8:	60fb      	str	r3, [r7, #12]
 80116ea:	68fb      	ldr	r3, [r7, #12]
 80116ec:	681b      	ldr	r3, [r3, #0]
 80116ee:	2b00      	cmp	r3, #0
 80116f0:	d1ef      	bne.n	80116d2 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 80116f2:	68f8      	ldr	r0, [r7, #12]
 80116f4:	f7ff fed6 	bl	80114a4 <tcp_output_segment_busy>
 80116f8:	4603      	mov	r3, r0
 80116fa:	2b00      	cmp	r3, #0
 80116fc:	d002      	beq.n	8011704 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 80116fe:	f06f 0305 	mvn.w	r3, #5
 8011702:	e033      	b.n	801176c <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8011704:	687b      	ldr	r3, [r7, #4]
 8011706:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8011708:	68fb      	ldr	r3, [r7, #12]
 801170a:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 801170c:	687b      	ldr	r3, [r7, #4]
 801170e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8011710:	687b      	ldr	r3, [r7, #4]
 8011712:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8011714:	687b      	ldr	r3, [r7, #4]
 8011716:	2200      	movs	r2, #0
 8011718:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 801171a:	687b      	ldr	r3, [r7, #4]
 801171c:	8b5b      	ldrh	r3, [r3, #26]
 801171e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8011722:	b29a      	uxth	r2, r3
 8011724:	687b      	ldr	r3, [r7, #4]
 8011726:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8011728:	68fb      	ldr	r3, [r7, #12]
 801172a:	68db      	ldr	r3, [r3, #12]
 801172c:	685b      	ldr	r3, [r3, #4]
 801172e:	4618      	mov	r0, r3
 8011730:	f7f8 fd21 	bl	800a176 <lwip_htonl>
 8011734:	4604      	mov	r4, r0
 8011736:	68fb      	ldr	r3, [r7, #12]
 8011738:	891b      	ldrh	r3, [r3, #8]
 801173a:	461d      	mov	r5, r3
 801173c:	68fb      	ldr	r3, [r7, #12]
 801173e:	68db      	ldr	r3, [r3, #12]
 8011740:	899b      	ldrh	r3, [r3, #12]
 8011742:	b29b      	uxth	r3, r3
 8011744:	4618      	mov	r0, r3
 8011746:	f7f8 fd01 	bl	800a14c <lwip_htons>
 801174a:	4603      	mov	r3, r0
 801174c:	b2db      	uxtb	r3, r3
 801174e:	f003 0303 	and.w	r3, r3, #3
 8011752:	2b00      	cmp	r3, #0
 8011754:	d001      	beq.n	801175a <tcp_rexmit_rto_prepare+0xba>
 8011756:	2301      	movs	r3, #1
 8011758:	e000      	b.n	801175c <tcp_rexmit_rto_prepare+0xbc>
 801175a:	2300      	movs	r3, #0
 801175c:	442b      	add	r3, r5
 801175e:	18e2      	adds	r2, r4, r3
 8011760:	687b      	ldr	r3, [r7, #4]
 8011762:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8011764:	687b      	ldr	r3, [r7, #4]
 8011766:	2200      	movs	r2, #0
 8011768:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 801176a:	2300      	movs	r3, #0
}
 801176c:	4618      	mov	r0, r3
 801176e:	3710      	adds	r7, #16
 8011770:	46bd      	mov	sp, r7
 8011772:	bdb0      	pop	{r4, r5, r7, pc}
 8011774:	0801a784 	.word	0x0801a784
 8011778:	0801adc0 	.word	0x0801adc0
 801177c:	0801a7d8 	.word	0x0801a7d8

08011780 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8011780:	b580      	push	{r7, lr}
 8011782:	b082      	sub	sp, #8
 8011784:	af00      	add	r7, sp, #0
 8011786:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8011788:	687b      	ldr	r3, [r7, #4]
 801178a:	2b00      	cmp	r3, #0
 801178c:	d106      	bne.n	801179c <tcp_rexmit_rto_commit+0x1c>
 801178e:	4b0d      	ldr	r3, [pc, #52]	; (80117c4 <tcp_rexmit_rto_commit+0x44>)
 8011790:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8011794:	490c      	ldr	r1, [pc, #48]	; (80117c8 <tcp_rexmit_rto_commit+0x48>)
 8011796:	480d      	ldr	r0, [pc, #52]	; (80117cc <tcp_rexmit_rto_commit+0x4c>)
 8011798:	f005 ff7c 	bl	8017694 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 801179c:	687b      	ldr	r3, [r7, #4]
 801179e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80117a2:	2bff      	cmp	r3, #255	; 0xff
 80117a4:	d007      	beq.n	80117b6 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 80117a6:	687b      	ldr	r3, [r7, #4]
 80117a8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80117ac:	3301      	adds	r3, #1
 80117ae:	b2da      	uxtb	r2, r3
 80117b0:	687b      	ldr	r3, [r7, #4]
 80117b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 80117b6:	6878      	ldr	r0, [r7, #4]
 80117b8:	f7ff fc80 	bl	80110bc <tcp_output>
}
 80117bc:	bf00      	nop
 80117be:	3708      	adds	r7, #8
 80117c0:	46bd      	mov	sp, r7
 80117c2:	bd80      	pop	{r7, pc}
 80117c4:	0801a784 	.word	0x0801a784
 80117c8:	0801ade4 	.word	0x0801ade4
 80117cc:	0801a7d8 	.word	0x0801a7d8

080117d0 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 80117d0:	b580      	push	{r7, lr}
 80117d2:	b082      	sub	sp, #8
 80117d4:	af00      	add	r7, sp, #0
 80117d6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 80117d8:	687b      	ldr	r3, [r7, #4]
 80117da:	2b00      	cmp	r3, #0
 80117dc:	d106      	bne.n	80117ec <tcp_rexmit_rto+0x1c>
 80117de:	4b0a      	ldr	r3, [pc, #40]	; (8011808 <tcp_rexmit_rto+0x38>)
 80117e0:	f240 62ad 	movw	r2, #1709	; 0x6ad
 80117e4:	4909      	ldr	r1, [pc, #36]	; (801180c <tcp_rexmit_rto+0x3c>)
 80117e6:	480a      	ldr	r0, [pc, #40]	; (8011810 <tcp_rexmit_rto+0x40>)
 80117e8:	f005 ff54 	bl	8017694 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 80117ec:	6878      	ldr	r0, [r7, #4]
 80117ee:	f7ff ff57 	bl	80116a0 <tcp_rexmit_rto_prepare>
 80117f2:	4603      	mov	r3, r0
 80117f4:	2b00      	cmp	r3, #0
 80117f6:	d102      	bne.n	80117fe <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 80117f8:	6878      	ldr	r0, [r7, #4]
 80117fa:	f7ff ffc1 	bl	8011780 <tcp_rexmit_rto_commit>
  }
}
 80117fe:	bf00      	nop
 8011800:	3708      	adds	r7, #8
 8011802:	46bd      	mov	sp, r7
 8011804:	bd80      	pop	{r7, pc}
 8011806:	bf00      	nop
 8011808:	0801a784 	.word	0x0801a784
 801180c:	0801ae08 	.word	0x0801ae08
 8011810:	0801a7d8 	.word	0x0801a7d8

08011814 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8011814:	b590      	push	{r4, r7, lr}
 8011816:	b085      	sub	sp, #20
 8011818:	af00      	add	r7, sp, #0
 801181a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 801181c:	687b      	ldr	r3, [r7, #4]
 801181e:	2b00      	cmp	r3, #0
 8011820:	d106      	bne.n	8011830 <tcp_rexmit+0x1c>
 8011822:	4b2f      	ldr	r3, [pc, #188]	; (80118e0 <tcp_rexmit+0xcc>)
 8011824:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8011828:	492e      	ldr	r1, [pc, #184]	; (80118e4 <tcp_rexmit+0xd0>)
 801182a:	482f      	ldr	r0, [pc, #188]	; (80118e8 <tcp_rexmit+0xd4>)
 801182c:	f005 ff32 	bl	8017694 <iprintf>

  if (pcb->unacked == NULL) {
 8011830:	687b      	ldr	r3, [r7, #4]
 8011832:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011834:	2b00      	cmp	r3, #0
 8011836:	d102      	bne.n	801183e <tcp_rexmit+0x2a>
    return ERR_VAL;
 8011838:	f06f 0305 	mvn.w	r3, #5
 801183c:	e04c      	b.n	80118d8 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 801183e:	687b      	ldr	r3, [r7, #4]
 8011840:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011842:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8011844:	68b8      	ldr	r0, [r7, #8]
 8011846:	f7ff fe2d 	bl	80114a4 <tcp_output_segment_busy>
 801184a:	4603      	mov	r3, r0
 801184c:	2b00      	cmp	r3, #0
 801184e:	d002      	beq.n	8011856 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8011850:	f06f 0305 	mvn.w	r3, #5
 8011854:	e040      	b.n	80118d8 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8011856:	68bb      	ldr	r3, [r7, #8]
 8011858:	681a      	ldr	r2, [r3, #0]
 801185a:	687b      	ldr	r3, [r7, #4]
 801185c:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 801185e:	687b      	ldr	r3, [r7, #4]
 8011860:	336c      	adds	r3, #108	; 0x6c
 8011862:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8011864:	e002      	b.n	801186c <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8011866:	68fb      	ldr	r3, [r7, #12]
 8011868:	681b      	ldr	r3, [r3, #0]
 801186a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801186c:	68fb      	ldr	r3, [r7, #12]
 801186e:	681b      	ldr	r3, [r3, #0]
 8011870:	2b00      	cmp	r3, #0
 8011872:	d011      	beq.n	8011898 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8011874:	68fb      	ldr	r3, [r7, #12]
 8011876:	681b      	ldr	r3, [r3, #0]
 8011878:	68db      	ldr	r3, [r3, #12]
 801187a:	685b      	ldr	r3, [r3, #4]
 801187c:	4618      	mov	r0, r3
 801187e:	f7f8 fc7a 	bl	800a176 <lwip_htonl>
 8011882:	4604      	mov	r4, r0
 8011884:	68bb      	ldr	r3, [r7, #8]
 8011886:	68db      	ldr	r3, [r3, #12]
 8011888:	685b      	ldr	r3, [r3, #4]
 801188a:	4618      	mov	r0, r3
 801188c:	f7f8 fc73 	bl	800a176 <lwip_htonl>
 8011890:	4603      	mov	r3, r0
 8011892:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8011894:	2b00      	cmp	r3, #0
 8011896:	dbe6      	blt.n	8011866 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8011898:	68fb      	ldr	r3, [r7, #12]
 801189a:	681a      	ldr	r2, [r3, #0]
 801189c:	68bb      	ldr	r3, [r7, #8]
 801189e:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 80118a0:	68fb      	ldr	r3, [r7, #12]
 80118a2:	68ba      	ldr	r2, [r7, #8]
 80118a4:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 80118a6:	68bb      	ldr	r3, [r7, #8]
 80118a8:	681b      	ldr	r3, [r3, #0]
 80118aa:	2b00      	cmp	r3, #0
 80118ac:	d103      	bne.n	80118b6 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80118ae:	687b      	ldr	r3, [r7, #4]
 80118b0:	2200      	movs	r2, #0
 80118b2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 80118b6:	687b      	ldr	r3, [r7, #4]
 80118b8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80118bc:	2bff      	cmp	r3, #255	; 0xff
 80118be:	d007      	beq.n	80118d0 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 80118c0:	687b      	ldr	r3, [r7, #4]
 80118c2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80118c6:	3301      	adds	r3, #1
 80118c8:	b2da      	uxtb	r2, r3
 80118ca:	687b      	ldr	r3, [r7, #4]
 80118cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 80118d0:	687b      	ldr	r3, [r7, #4]
 80118d2:	2200      	movs	r2, #0
 80118d4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 80118d6:	2300      	movs	r3, #0
}
 80118d8:	4618      	mov	r0, r3
 80118da:	3714      	adds	r7, #20
 80118dc:	46bd      	mov	sp, r7
 80118de:	bd90      	pop	{r4, r7, pc}
 80118e0:	0801a784 	.word	0x0801a784
 80118e4:	0801ae24 	.word	0x0801ae24
 80118e8:	0801a7d8 	.word	0x0801a7d8

080118ec <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 80118ec:	b580      	push	{r7, lr}
 80118ee:	b082      	sub	sp, #8
 80118f0:	af00      	add	r7, sp, #0
 80118f2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 80118f4:	687b      	ldr	r3, [r7, #4]
 80118f6:	2b00      	cmp	r3, #0
 80118f8:	d106      	bne.n	8011908 <tcp_rexmit_fast+0x1c>
 80118fa:	4b2a      	ldr	r3, [pc, #168]	; (80119a4 <tcp_rexmit_fast+0xb8>)
 80118fc:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8011900:	4929      	ldr	r1, [pc, #164]	; (80119a8 <tcp_rexmit_fast+0xbc>)
 8011902:	482a      	ldr	r0, [pc, #168]	; (80119ac <tcp_rexmit_fast+0xc0>)
 8011904:	f005 fec6 	bl	8017694 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8011908:	687b      	ldr	r3, [r7, #4]
 801190a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801190c:	2b00      	cmp	r3, #0
 801190e:	d044      	beq.n	801199a <tcp_rexmit_fast+0xae>
 8011910:	687b      	ldr	r3, [r7, #4]
 8011912:	8b5b      	ldrh	r3, [r3, #26]
 8011914:	f003 0304 	and.w	r3, r3, #4
 8011918:	2b00      	cmp	r3, #0
 801191a:	d13e      	bne.n	801199a <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 801191c:	6878      	ldr	r0, [r7, #4]
 801191e:	f7ff ff79 	bl	8011814 <tcp_rexmit>
 8011922:	4603      	mov	r3, r0
 8011924:	2b00      	cmp	r3, #0
 8011926:	d138      	bne.n	801199a <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8011928:	687b      	ldr	r3, [r7, #4]
 801192a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801192e:	687b      	ldr	r3, [r7, #4]
 8011930:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011934:	4293      	cmp	r3, r2
 8011936:	bf28      	it	cs
 8011938:	4613      	movcs	r3, r2
 801193a:	b29b      	uxth	r3, r3
 801193c:	0fda      	lsrs	r2, r3, #31
 801193e:	4413      	add	r3, r2
 8011940:	105b      	asrs	r3, r3, #1
 8011942:	b29a      	uxth	r2, r3
 8011944:	687b      	ldr	r3, [r7, #4]
 8011946:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 801194a:	687b      	ldr	r3, [r7, #4]
 801194c:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8011950:	461a      	mov	r2, r3
 8011952:	687b      	ldr	r3, [r7, #4]
 8011954:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011956:	005b      	lsls	r3, r3, #1
 8011958:	429a      	cmp	r2, r3
 801195a:	d206      	bcs.n	801196a <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 801195c:	687b      	ldr	r3, [r7, #4]
 801195e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011960:	005b      	lsls	r3, r3, #1
 8011962:	b29a      	uxth	r2, r3
 8011964:	687b      	ldr	r3, [r7, #4]
 8011966:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 801196a:	687b      	ldr	r3, [r7, #4]
 801196c:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8011970:	687b      	ldr	r3, [r7, #4]
 8011972:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011974:	4619      	mov	r1, r3
 8011976:	0049      	lsls	r1, r1, #1
 8011978:	440b      	add	r3, r1
 801197a:	b29b      	uxth	r3, r3
 801197c:	4413      	add	r3, r2
 801197e:	b29a      	uxth	r2, r3
 8011980:	687b      	ldr	r3, [r7, #4]
 8011982:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8011986:	687b      	ldr	r3, [r7, #4]
 8011988:	8b5b      	ldrh	r3, [r3, #26]
 801198a:	f043 0304 	orr.w	r3, r3, #4
 801198e:	b29a      	uxth	r2, r3
 8011990:	687b      	ldr	r3, [r7, #4]
 8011992:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8011994:	687b      	ldr	r3, [r7, #4]
 8011996:	2200      	movs	r2, #0
 8011998:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 801199a:	bf00      	nop
 801199c:	3708      	adds	r7, #8
 801199e:	46bd      	mov	sp, r7
 80119a0:	bd80      	pop	{r7, pc}
 80119a2:	bf00      	nop
 80119a4:	0801a784 	.word	0x0801a784
 80119a8:	0801ae3c 	.word	0x0801ae3c
 80119ac:	0801a7d8 	.word	0x0801a7d8

080119b0 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 80119b0:	b580      	push	{r7, lr}
 80119b2:	b086      	sub	sp, #24
 80119b4:	af00      	add	r7, sp, #0
 80119b6:	60f8      	str	r0, [r7, #12]
 80119b8:	607b      	str	r3, [r7, #4]
 80119ba:	460b      	mov	r3, r1
 80119bc:	817b      	strh	r3, [r7, #10]
 80119be:	4613      	mov	r3, r2
 80119c0:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 80119c2:	897a      	ldrh	r2, [r7, #10]
 80119c4:	893b      	ldrh	r3, [r7, #8]
 80119c6:	4413      	add	r3, r2
 80119c8:	b29b      	uxth	r3, r3
 80119ca:	3314      	adds	r3, #20
 80119cc:	b29b      	uxth	r3, r3
 80119ce:	f44f 7220 	mov.w	r2, #640	; 0x280
 80119d2:	4619      	mov	r1, r3
 80119d4:	2022      	movs	r0, #34	; 0x22
 80119d6:	f7f9 fcd3 	bl	800b380 <pbuf_alloc>
 80119da:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 80119dc:	697b      	ldr	r3, [r7, #20]
 80119de:	2b00      	cmp	r3, #0
 80119e0:	d04d      	beq.n	8011a7e <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 80119e2:	897b      	ldrh	r3, [r7, #10]
 80119e4:	3313      	adds	r3, #19
 80119e6:	697a      	ldr	r2, [r7, #20]
 80119e8:	8952      	ldrh	r2, [r2, #10]
 80119ea:	4293      	cmp	r3, r2
 80119ec:	db06      	blt.n	80119fc <tcp_output_alloc_header_common+0x4c>
 80119ee:	4b26      	ldr	r3, [pc, #152]	; (8011a88 <tcp_output_alloc_header_common+0xd8>)
 80119f0:	f240 7223 	movw	r2, #1827	; 0x723
 80119f4:	4925      	ldr	r1, [pc, #148]	; (8011a8c <tcp_output_alloc_header_common+0xdc>)
 80119f6:	4826      	ldr	r0, [pc, #152]	; (8011a90 <tcp_output_alloc_header_common+0xe0>)
 80119f8:	f005 fe4c 	bl	8017694 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 80119fc:	697b      	ldr	r3, [r7, #20]
 80119fe:	685b      	ldr	r3, [r3, #4]
 8011a00:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8011a02:	8c3b      	ldrh	r3, [r7, #32]
 8011a04:	4618      	mov	r0, r3
 8011a06:	f7f8 fba1 	bl	800a14c <lwip_htons>
 8011a0a:	4603      	mov	r3, r0
 8011a0c:	461a      	mov	r2, r3
 8011a0e:	693b      	ldr	r3, [r7, #16]
 8011a10:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8011a12:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011a14:	4618      	mov	r0, r3
 8011a16:	f7f8 fb99 	bl	800a14c <lwip_htons>
 8011a1a:	4603      	mov	r3, r0
 8011a1c:	461a      	mov	r2, r3
 8011a1e:	693b      	ldr	r3, [r7, #16]
 8011a20:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8011a22:	693b      	ldr	r3, [r7, #16]
 8011a24:	687a      	ldr	r2, [r7, #4]
 8011a26:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8011a28:	68f8      	ldr	r0, [r7, #12]
 8011a2a:	f7f8 fba4 	bl	800a176 <lwip_htonl>
 8011a2e:	4602      	mov	r2, r0
 8011a30:	693b      	ldr	r3, [r7, #16]
 8011a32:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8011a34:	897b      	ldrh	r3, [r7, #10]
 8011a36:	089b      	lsrs	r3, r3, #2
 8011a38:	b29b      	uxth	r3, r3
 8011a3a:	3305      	adds	r3, #5
 8011a3c:	b29b      	uxth	r3, r3
 8011a3e:	031b      	lsls	r3, r3, #12
 8011a40:	b29a      	uxth	r2, r3
 8011a42:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8011a46:	b29b      	uxth	r3, r3
 8011a48:	4313      	orrs	r3, r2
 8011a4a:	b29b      	uxth	r3, r3
 8011a4c:	4618      	mov	r0, r3
 8011a4e:	f7f8 fb7d 	bl	800a14c <lwip_htons>
 8011a52:	4603      	mov	r3, r0
 8011a54:	461a      	mov	r2, r3
 8011a56:	693b      	ldr	r3, [r7, #16]
 8011a58:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8011a5a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8011a5c:	4618      	mov	r0, r3
 8011a5e:	f7f8 fb75 	bl	800a14c <lwip_htons>
 8011a62:	4603      	mov	r3, r0
 8011a64:	461a      	mov	r2, r3
 8011a66:	693b      	ldr	r3, [r7, #16]
 8011a68:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8011a6a:	693b      	ldr	r3, [r7, #16]
 8011a6c:	2200      	movs	r2, #0
 8011a6e:	741a      	strb	r2, [r3, #16]
 8011a70:	2200      	movs	r2, #0
 8011a72:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8011a74:	693b      	ldr	r3, [r7, #16]
 8011a76:	2200      	movs	r2, #0
 8011a78:	749a      	strb	r2, [r3, #18]
 8011a7a:	2200      	movs	r2, #0
 8011a7c:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8011a7e:	697b      	ldr	r3, [r7, #20]
}
 8011a80:	4618      	mov	r0, r3
 8011a82:	3718      	adds	r7, #24
 8011a84:	46bd      	mov	sp, r7
 8011a86:	bd80      	pop	{r7, pc}
 8011a88:	0801a784 	.word	0x0801a784
 8011a8c:	0801ae5c 	.word	0x0801ae5c
 8011a90:	0801a7d8 	.word	0x0801a7d8

08011a94 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8011a94:	b5b0      	push	{r4, r5, r7, lr}
 8011a96:	b08a      	sub	sp, #40	; 0x28
 8011a98:	af04      	add	r7, sp, #16
 8011a9a:	60f8      	str	r0, [r7, #12]
 8011a9c:	607b      	str	r3, [r7, #4]
 8011a9e:	460b      	mov	r3, r1
 8011aa0:	817b      	strh	r3, [r7, #10]
 8011aa2:	4613      	mov	r3, r2
 8011aa4:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8011aa6:	68fb      	ldr	r3, [r7, #12]
 8011aa8:	2b00      	cmp	r3, #0
 8011aaa:	d106      	bne.n	8011aba <tcp_output_alloc_header+0x26>
 8011aac:	4b15      	ldr	r3, [pc, #84]	; (8011b04 <tcp_output_alloc_header+0x70>)
 8011aae:	f240 7242 	movw	r2, #1858	; 0x742
 8011ab2:	4915      	ldr	r1, [pc, #84]	; (8011b08 <tcp_output_alloc_header+0x74>)
 8011ab4:	4815      	ldr	r0, [pc, #84]	; (8011b0c <tcp_output_alloc_header+0x78>)
 8011ab6:	f005 fded 	bl	8017694 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8011aba:	68fb      	ldr	r3, [r7, #12]
 8011abc:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8011abe:	68fb      	ldr	r3, [r7, #12]
 8011ac0:	8adb      	ldrh	r3, [r3, #22]
 8011ac2:	68fa      	ldr	r2, [r7, #12]
 8011ac4:	8b12      	ldrh	r2, [r2, #24]
 8011ac6:	68f9      	ldr	r1, [r7, #12]
 8011ac8:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 8011aca:	893d      	ldrh	r5, [r7, #8]
 8011acc:	897c      	ldrh	r4, [r7, #10]
 8011ace:	9103      	str	r1, [sp, #12]
 8011ad0:	2110      	movs	r1, #16
 8011ad2:	9102      	str	r1, [sp, #8]
 8011ad4:	9201      	str	r2, [sp, #4]
 8011ad6:	9300      	str	r3, [sp, #0]
 8011ad8:	687b      	ldr	r3, [r7, #4]
 8011ada:	462a      	mov	r2, r5
 8011adc:	4621      	mov	r1, r4
 8011ade:	f7ff ff67 	bl	80119b0 <tcp_output_alloc_header_common>
 8011ae2:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8011ae4:	697b      	ldr	r3, [r7, #20]
 8011ae6:	2b00      	cmp	r3, #0
 8011ae8:	d006      	beq.n	8011af8 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8011aea:	68fb      	ldr	r3, [r7, #12]
 8011aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011aee:	68fa      	ldr	r2, [r7, #12]
 8011af0:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8011af2:	441a      	add	r2, r3
 8011af4:	68fb      	ldr	r3, [r7, #12]
 8011af6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8011af8:	697b      	ldr	r3, [r7, #20]
}
 8011afa:	4618      	mov	r0, r3
 8011afc:	3718      	adds	r7, #24
 8011afe:	46bd      	mov	sp, r7
 8011b00:	bdb0      	pop	{r4, r5, r7, pc}
 8011b02:	bf00      	nop
 8011b04:	0801a784 	.word	0x0801a784
 8011b08:	0801ae8c 	.word	0x0801ae8c
 8011b0c:	0801a7d8 	.word	0x0801a7d8

08011b10 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8011b10:	b580      	push	{r7, lr}
 8011b12:	b088      	sub	sp, #32
 8011b14:	af00      	add	r7, sp, #0
 8011b16:	60f8      	str	r0, [r7, #12]
 8011b18:	60b9      	str	r1, [r7, #8]
 8011b1a:	4611      	mov	r1, r2
 8011b1c:	461a      	mov	r2, r3
 8011b1e:	460b      	mov	r3, r1
 8011b20:	71fb      	strb	r3, [r7, #7]
 8011b22:	4613      	mov	r3, r2
 8011b24:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8011b26:	2300      	movs	r3, #0
 8011b28:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8011b2a:	68bb      	ldr	r3, [r7, #8]
 8011b2c:	2b00      	cmp	r3, #0
 8011b2e:	d106      	bne.n	8011b3e <tcp_output_fill_options+0x2e>
 8011b30:	4b13      	ldr	r3, [pc, #76]	; (8011b80 <tcp_output_fill_options+0x70>)
 8011b32:	f240 7256 	movw	r2, #1878	; 0x756
 8011b36:	4913      	ldr	r1, [pc, #76]	; (8011b84 <tcp_output_fill_options+0x74>)
 8011b38:	4813      	ldr	r0, [pc, #76]	; (8011b88 <tcp_output_fill_options+0x78>)
 8011b3a:	f005 fdab 	bl	8017694 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8011b3e:	68bb      	ldr	r3, [r7, #8]
 8011b40:	685b      	ldr	r3, [r3, #4]
 8011b42:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8011b44:	69bb      	ldr	r3, [r7, #24]
 8011b46:	3314      	adds	r3, #20
 8011b48:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8011b4a:	69bb      	ldr	r3, [r7, #24]
 8011b4c:	f103 0214 	add.w	r2, r3, #20
 8011b50:	8bfb      	ldrh	r3, [r7, #30]
 8011b52:	009b      	lsls	r3, r3, #2
 8011b54:	4619      	mov	r1, r3
 8011b56:	79fb      	ldrb	r3, [r7, #7]
 8011b58:	009b      	lsls	r3, r3, #2
 8011b5a:	f003 0304 	and.w	r3, r3, #4
 8011b5e:	440b      	add	r3, r1
 8011b60:	4413      	add	r3, r2
 8011b62:	697a      	ldr	r2, [r7, #20]
 8011b64:	429a      	cmp	r2, r3
 8011b66:	d006      	beq.n	8011b76 <tcp_output_fill_options+0x66>
 8011b68:	4b05      	ldr	r3, [pc, #20]	; (8011b80 <tcp_output_fill_options+0x70>)
 8011b6a:	f240 7275 	movw	r2, #1909	; 0x775
 8011b6e:	4907      	ldr	r1, [pc, #28]	; (8011b8c <tcp_output_fill_options+0x7c>)
 8011b70:	4805      	ldr	r0, [pc, #20]	; (8011b88 <tcp_output_fill_options+0x78>)
 8011b72:	f005 fd8f 	bl	8017694 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8011b76:	bf00      	nop
 8011b78:	3720      	adds	r7, #32
 8011b7a:	46bd      	mov	sp, r7
 8011b7c:	bd80      	pop	{r7, pc}
 8011b7e:	bf00      	nop
 8011b80:	0801a784 	.word	0x0801a784
 8011b84:	0801aeb4 	.word	0x0801aeb4
 8011b88:	0801a7d8 	.word	0x0801a7d8
 8011b8c:	0801adac 	.word	0x0801adac

08011b90 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8011b90:	b580      	push	{r7, lr}
 8011b92:	b08a      	sub	sp, #40	; 0x28
 8011b94:	af04      	add	r7, sp, #16
 8011b96:	60f8      	str	r0, [r7, #12]
 8011b98:	60b9      	str	r1, [r7, #8]
 8011b9a:	607a      	str	r2, [r7, #4]
 8011b9c:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8011b9e:	68bb      	ldr	r3, [r7, #8]
 8011ba0:	2b00      	cmp	r3, #0
 8011ba2:	d106      	bne.n	8011bb2 <tcp_output_control_segment+0x22>
 8011ba4:	4b1c      	ldr	r3, [pc, #112]	; (8011c18 <tcp_output_control_segment+0x88>)
 8011ba6:	f240 7287 	movw	r2, #1927	; 0x787
 8011baa:	491c      	ldr	r1, [pc, #112]	; (8011c1c <tcp_output_control_segment+0x8c>)
 8011bac:	481c      	ldr	r0, [pc, #112]	; (8011c20 <tcp_output_control_segment+0x90>)
 8011bae:	f005 fd71 	bl	8017694 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8011bb2:	683a      	ldr	r2, [r7, #0]
 8011bb4:	6879      	ldr	r1, [r7, #4]
 8011bb6:	68f8      	ldr	r0, [r7, #12]
 8011bb8:	f7fe fae8 	bl	801018c <tcp_route>
 8011bbc:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8011bbe:	693b      	ldr	r3, [r7, #16]
 8011bc0:	2b00      	cmp	r3, #0
 8011bc2:	d102      	bne.n	8011bca <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8011bc4:	23fc      	movs	r3, #252	; 0xfc
 8011bc6:	75fb      	strb	r3, [r7, #23]
 8011bc8:	e01c      	b.n	8011c04 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8011bca:	68fb      	ldr	r3, [r7, #12]
 8011bcc:	2b00      	cmp	r3, #0
 8011bce:	d006      	beq.n	8011bde <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8011bd0:	68fb      	ldr	r3, [r7, #12]
 8011bd2:	7adb      	ldrb	r3, [r3, #11]
 8011bd4:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8011bd6:	68fb      	ldr	r3, [r7, #12]
 8011bd8:	7a9b      	ldrb	r3, [r3, #10]
 8011bda:	757b      	strb	r3, [r7, #21]
 8011bdc:	e003      	b.n	8011be6 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8011bde:	23ff      	movs	r3, #255	; 0xff
 8011be0:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8011be2:	2300      	movs	r3, #0
 8011be4:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8011be6:	7dba      	ldrb	r2, [r7, #22]
 8011be8:	693b      	ldr	r3, [r7, #16]
 8011bea:	9302      	str	r3, [sp, #8]
 8011bec:	2306      	movs	r3, #6
 8011bee:	9301      	str	r3, [sp, #4]
 8011bf0:	7d7b      	ldrb	r3, [r7, #21]
 8011bf2:	9300      	str	r3, [sp, #0]
 8011bf4:	4613      	mov	r3, r2
 8011bf6:	683a      	ldr	r2, [r7, #0]
 8011bf8:	6879      	ldr	r1, [r7, #4]
 8011bfa:	68b8      	ldr	r0, [r7, #8]
 8011bfc:	f004 f962 	bl	8015ec4 <ip4_output_if>
 8011c00:	4603      	mov	r3, r0
 8011c02:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8011c04:	68b8      	ldr	r0, [r7, #8]
 8011c06:	f7f9 fe9f 	bl	800b948 <pbuf_free>
  return err;
 8011c0a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011c0e:	4618      	mov	r0, r3
 8011c10:	3718      	adds	r7, #24
 8011c12:	46bd      	mov	sp, r7
 8011c14:	bd80      	pop	{r7, pc}
 8011c16:	bf00      	nop
 8011c18:	0801a784 	.word	0x0801a784
 8011c1c:	0801aedc 	.word	0x0801aedc
 8011c20:	0801a7d8 	.word	0x0801a7d8

08011c24 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8011c24:	b590      	push	{r4, r7, lr}
 8011c26:	b08b      	sub	sp, #44	; 0x2c
 8011c28:	af04      	add	r7, sp, #16
 8011c2a:	60f8      	str	r0, [r7, #12]
 8011c2c:	60b9      	str	r1, [r7, #8]
 8011c2e:	607a      	str	r2, [r7, #4]
 8011c30:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8011c32:	683b      	ldr	r3, [r7, #0]
 8011c34:	2b00      	cmp	r3, #0
 8011c36:	d106      	bne.n	8011c46 <tcp_rst+0x22>
 8011c38:	4b1f      	ldr	r3, [pc, #124]	; (8011cb8 <tcp_rst+0x94>)
 8011c3a:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8011c3e:	491f      	ldr	r1, [pc, #124]	; (8011cbc <tcp_rst+0x98>)
 8011c40:	481f      	ldr	r0, [pc, #124]	; (8011cc0 <tcp_rst+0x9c>)
 8011c42:	f005 fd27 	bl	8017694 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8011c46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011c48:	2b00      	cmp	r3, #0
 8011c4a:	d106      	bne.n	8011c5a <tcp_rst+0x36>
 8011c4c:	4b1a      	ldr	r3, [pc, #104]	; (8011cb8 <tcp_rst+0x94>)
 8011c4e:	f240 72c5 	movw	r2, #1989	; 0x7c5
 8011c52:	491c      	ldr	r1, [pc, #112]	; (8011cc4 <tcp_rst+0xa0>)
 8011c54:	481a      	ldr	r0, [pc, #104]	; (8011cc0 <tcp_rst+0x9c>)
 8011c56:	f005 fd1d 	bl	8017694 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8011c5a:	2300      	movs	r3, #0
 8011c5c:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8011c5e:	f246 0308 	movw	r3, #24584	; 0x6008
 8011c62:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8011c64:	7dfb      	ldrb	r3, [r7, #23]
 8011c66:	b29c      	uxth	r4, r3
 8011c68:	68b8      	ldr	r0, [r7, #8]
 8011c6a:	f7f8 fa84 	bl	800a176 <lwip_htonl>
 8011c6e:	4602      	mov	r2, r0
 8011c70:	8abb      	ldrh	r3, [r7, #20]
 8011c72:	9303      	str	r3, [sp, #12]
 8011c74:	2314      	movs	r3, #20
 8011c76:	9302      	str	r3, [sp, #8]
 8011c78:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8011c7a:	9301      	str	r3, [sp, #4]
 8011c7c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8011c7e:	9300      	str	r3, [sp, #0]
 8011c80:	4613      	mov	r3, r2
 8011c82:	2200      	movs	r2, #0
 8011c84:	4621      	mov	r1, r4
 8011c86:	6878      	ldr	r0, [r7, #4]
 8011c88:	f7ff fe92 	bl	80119b0 <tcp_output_alloc_header_common>
 8011c8c:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8011c8e:	693b      	ldr	r3, [r7, #16]
 8011c90:	2b00      	cmp	r3, #0
 8011c92:	d00c      	beq.n	8011cae <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8011c94:	7dfb      	ldrb	r3, [r7, #23]
 8011c96:	2200      	movs	r2, #0
 8011c98:	6939      	ldr	r1, [r7, #16]
 8011c9a:	68f8      	ldr	r0, [r7, #12]
 8011c9c:	f7ff ff38 	bl	8011b10 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8011ca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ca2:	683a      	ldr	r2, [r7, #0]
 8011ca4:	6939      	ldr	r1, [r7, #16]
 8011ca6:	68f8      	ldr	r0, [r7, #12]
 8011ca8:	f7ff ff72 	bl	8011b90 <tcp_output_control_segment>
 8011cac:	e000      	b.n	8011cb0 <tcp_rst+0x8c>
    return;
 8011cae:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8011cb0:	371c      	adds	r7, #28
 8011cb2:	46bd      	mov	sp, r7
 8011cb4:	bd90      	pop	{r4, r7, pc}
 8011cb6:	bf00      	nop
 8011cb8:	0801a784 	.word	0x0801a784
 8011cbc:	0801af08 	.word	0x0801af08
 8011cc0:	0801a7d8 	.word	0x0801a7d8
 8011cc4:	0801af24 	.word	0x0801af24

08011cc8 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8011cc8:	b590      	push	{r4, r7, lr}
 8011cca:	b087      	sub	sp, #28
 8011ccc:	af00      	add	r7, sp, #0
 8011cce:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8011cd0:	2300      	movs	r3, #0
 8011cd2:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8011cd4:	2300      	movs	r3, #0
 8011cd6:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8011cd8:	687b      	ldr	r3, [r7, #4]
 8011cda:	2b00      	cmp	r3, #0
 8011cdc:	d106      	bne.n	8011cec <tcp_send_empty_ack+0x24>
 8011cde:	4b28      	ldr	r3, [pc, #160]	; (8011d80 <tcp_send_empty_ack+0xb8>)
 8011ce0:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8011ce4:	4927      	ldr	r1, [pc, #156]	; (8011d84 <tcp_send_empty_ack+0xbc>)
 8011ce6:	4828      	ldr	r0, [pc, #160]	; (8011d88 <tcp_send_empty_ack+0xc0>)
 8011ce8:	f005 fcd4 	bl	8017694 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8011cec:	7dfb      	ldrb	r3, [r7, #23]
 8011cee:	009b      	lsls	r3, r3, #2
 8011cf0:	b2db      	uxtb	r3, r3
 8011cf2:	f003 0304 	and.w	r3, r3, #4
 8011cf6:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8011cf8:	7d7b      	ldrb	r3, [r7, #21]
 8011cfa:	b29c      	uxth	r4, r3
 8011cfc:	687b      	ldr	r3, [r7, #4]
 8011cfe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011d00:	4618      	mov	r0, r3
 8011d02:	f7f8 fa38 	bl	800a176 <lwip_htonl>
 8011d06:	4603      	mov	r3, r0
 8011d08:	2200      	movs	r2, #0
 8011d0a:	4621      	mov	r1, r4
 8011d0c:	6878      	ldr	r0, [r7, #4]
 8011d0e:	f7ff fec1 	bl	8011a94 <tcp_output_alloc_header>
 8011d12:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8011d14:	693b      	ldr	r3, [r7, #16]
 8011d16:	2b00      	cmp	r3, #0
 8011d18:	d109      	bne.n	8011d2e <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8011d1a:	687b      	ldr	r3, [r7, #4]
 8011d1c:	8b5b      	ldrh	r3, [r3, #26]
 8011d1e:	f043 0303 	orr.w	r3, r3, #3
 8011d22:	b29a      	uxth	r2, r3
 8011d24:	687b      	ldr	r3, [r7, #4]
 8011d26:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8011d28:	f06f 0301 	mvn.w	r3, #1
 8011d2c:	e023      	b.n	8011d76 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8011d2e:	7dbb      	ldrb	r3, [r7, #22]
 8011d30:	7dfa      	ldrb	r2, [r7, #23]
 8011d32:	6939      	ldr	r1, [r7, #16]
 8011d34:	6878      	ldr	r0, [r7, #4]
 8011d36:	f7ff feeb 	bl	8011b10 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8011d3a:	687a      	ldr	r2, [r7, #4]
 8011d3c:	687b      	ldr	r3, [r7, #4]
 8011d3e:	3304      	adds	r3, #4
 8011d40:	6939      	ldr	r1, [r7, #16]
 8011d42:	6878      	ldr	r0, [r7, #4]
 8011d44:	f7ff ff24 	bl	8011b90 <tcp_output_control_segment>
 8011d48:	4603      	mov	r3, r0
 8011d4a:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8011d4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011d50:	2b00      	cmp	r3, #0
 8011d52:	d007      	beq.n	8011d64 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8011d54:	687b      	ldr	r3, [r7, #4]
 8011d56:	8b5b      	ldrh	r3, [r3, #26]
 8011d58:	f043 0303 	orr.w	r3, r3, #3
 8011d5c:	b29a      	uxth	r2, r3
 8011d5e:	687b      	ldr	r3, [r7, #4]
 8011d60:	835a      	strh	r2, [r3, #26]
 8011d62:	e006      	b.n	8011d72 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8011d64:	687b      	ldr	r3, [r7, #4]
 8011d66:	8b5b      	ldrh	r3, [r3, #26]
 8011d68:	f023 0303 	bic.w	r3, r3, #3
 8011d6c:	b29a      	uxth	r2, r3
 8011d6e:	687b      	ldr	r3, [r7, #4]
 8011d70:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8011d72:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8011d76:	4618      	mov	r0, r3
 8011d78:	371c      	adds	r7, #28
 8011d7a:	46bd      	mov	sp, r7
 8011d7c:	bd90      	pop	{r4, r7, pc}
 8011d7e:	bf00      	nop
 8011d80:	0801a784 	.word	0x0801a784
 8011d84:	0801af40 	.word	0x0801af40
 8011d88:	0801a7d8 	.word	0x0801a7d8

08011d8c <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8011d8c:	b590      	push	{r4, r7, lr}
 8011d8e:	b087      	sub	sp, #28
 8011d90:	af00      	add	r7, sp, #0
 8011d92:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8011d94:	2300      	movs	r3, #0
 8011d96:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8011d98:	687b      	ldr	r3, [r7, #4]
 8011d9a:	2b00      	cmp	r3, #0
 8011d9c:	d106      	bne.n	8011dac <tcp_keepalive+0x20>
 8011d9e:	4b18      	ldr	r3, [pc, #96]	; (8011e00 <tcp_keepalive+0x74>)
 8011da0:	f640 0224 	movw	r2, #2084	; 0x824
 8011da4:	4917      	ldr	r1, [pc, #92]	; (8011e04 <tcp_keepalive+0x78>)
 8011da6:	4818      	ldr	r0, [pc, #96]	; (8011e08 <tcp_keepalive+0x7c>)
 8011da8:	f005 fc74 	bl	8017694 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8011dac:	7dfb      	ldrb	r3, [r7, #23]
 8011dae:	b29c      	uxth	r4, r3
 8011db0:	687b      	ldr	r3, [r7, #4]
 8011db2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011db4:	3b01      	subs	r3, #1
 8011db6:	4618      	mov	r0, r3
 8011db8:	f7f8 f9dd 	bl	800a176 <lwip_htonl>
 8011dbc:	4603      	mov	r3, r0
 8011dbe:	2200      	movs	r2, #0
 8011dc0:	4621      	mov	r1, r4
 8011dc2:	6878      	ldr	r0, [r7, #4]
 8011dc4:	f7ff fe66 	bl	8011a94 <tcp_output_alloc_header>
 8011dc8:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8011dca:	693b      	ldr	r3, [r7, #16]
 8011dcc:	2b00      	cmp	r3, #0
 8011dce:	d102      	bne.n	8011dd6 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8011dd0:	f04f 33ff 	mov.w	r3, #4294967295
 8011dd4:	e010      	b.n	8011df8 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8011dd6:	7dfb      	ldrb	r3, [r7, #23]
 8011dd8:	2200      	movs	r2, #0
 8011dda:	6939      	ldr	r1, [r7, #16]
 8011ddc:	6878      	ldr	r0, [r7, #4]
 8011dde:	f7ff fe97 	bl	8011b10 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8011de2:	687a      	ldr	r2, [r7, #4]
 8011de4:	687b      	ldr	r3, [r7, #4]
 8011de6:	3304      	adds	r3, #4
 8011de8:	6939      	ldr	r1, [r7, #16]
 8011dea:	6878      	ldr	r0, [r7, #4]
 8011dec:	f7ff fed0 	bl	8011b90 <tcp_output_control_segment>
 8011df0:	4603      	mov	r3, r0
 8011df2:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8011df4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8011df8:	4618      	mov	r0, r3
 8011dfa:	371c      	adds	r7, #28
 8011dfc:	46bd      	mov	sp, r7
 8011dfe:	bd90      	pop	{r4, r7, pc}
 8011e00:	0801a784 	.word	0x0801a784
 8011e04:	0801af60 	.word	0x0801af60
 8011e08:	0801a7d8 	.word	0x0801a7d8

08011e0c <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8011e0c:	b590      	push	{r4, r7, lr}
 8011e0e:	b08b      	sub	sp, #44	; 0x2c
 8011e10:	af00      	add	r7, sp, #0
 8011e12:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8011e14:	2300      	movs	r3, #0
 8011e16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8011e1a:	687b      	ldr	r3, [r7, #4]
 8011e1c:	2b00      	cmp	r3, #0
 8011e1e:	d106      	bne.n	8011e2e <tcp_zero_window_probe+0x22>
 8011e20:	4b4c      	ldr	r3, [pc, #304]	; (8011f54 <tcp_zero_window_probe+0x148>)
 8011e22:	f640 024f 	movw	r2, #2127	; 0x84f
 8011e26:	494c      	ldr	r1, [pc, #304]	; (8011f58 <tcp_zero_window_probe+0x14c>)
 8011e28:	484c      	ldr	r0, [pc, #304]	; (8011f5c <tcp_zero_window_probe+0x150>)
 8011e2a:	f005 fc33 	bl	8017694 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8011e2e:	687b      	ldr	r3, [r7, #4]
 8011e30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011e32:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8011e34:	6a3b      	ldr	r3, [r7, #32]
 8011e36:	2b00      	cmp	r3, #0
 8011e38:	d101      	bne.n	8011e3e <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8011e3a:	2300      	movs	r3, #0
 8011e3c:	e086      	b.n	8011f4c <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8011e3e:	687b      	ldr	r3, [r7, #4]
 8011e40:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8011e44:	2bff      	cmp	r3, #255	; 0xff
 8011e46:	d007      	beq.n	8011e58 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8011e48:	687b      	ldr	r3, [r7, #4]
 8011e4a:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8011e4e:	3301      	adds	r3, #1
 8011e50:	b2da      	uxtb	r2, r3
 8011e52:	687b      	ldr	r3, [r7, #4]
 8011e54:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8011e58:	6a3b      	ldr	r3, [r7, #32]
 8011e5a:	68db      	ldr	r3, [r3, #12]
 8011e5c:	899b      	ldrh	r3, [r3, #12]
 8011e5e:	b29b      	uxth	r3, r3
 8011e60:	4618      	mov	r0, r3
 8011e62:	f7f8 f973 	bl	800a14c <lwip_htons>
 8011e66:	4603      	mov	r3, r0
 8011e68:	b2db      	uxtb	r3, r3
 8011e6a:	f003 0301 	and.w	r3, r3, #1
 8011e6e:	2b00      	cmp	r3, #0
 8011e70:	d005      	beq.n	8011e7e <tcp_zero_window_probe+0x72>
 8011e72:	6a3b      	ldr	r3, [r7, #32]
 8011e74:	891b      	ldrh	r3, [r3, #8]
 8011e76:	2b00      	cmp	r3, #0
 8011e78:	d101      	bne.n	8011e7e <tcp_zero_window_probe+0x72>
 8011e7a:	2301      	movs	r3, #1
 8011e7c:	e000      	b.n	8011e80 <tcp_zero_window_probe+0x74>
 8011e7e:	2300      	movs	r3, #0
 8011e80:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8011e82:	7ffb      	ldrb	r3, [r7, #31]
 8011e84:	2b00      	cmp	r3, #0
 8011e86:	bf0c      	ite	eq
 8011e88:	2301      	moveq	r3, #1
 8011e8a:	2300      	movne	r3, #0
 8011e8c:	b2db      	uxtb	r3, r3
 8011e8e:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8011e90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011e94:	b299      	uxth	r1, r3
 8011e96:	6a3b      	ldr	r3, [r7, #32]
 8011e98:	68db      	ldr	r3, [r3, #12]
 8011e9a:	685b      	ldr	r3, [r3, #4]
 8011e9c:	8bba      	ldrh	r2, [r7, #28]
 8011e9e:	6878      	ldr	r0, [r7, #4]
 8011ea0:	f7ff fdf8 	bl	8011a94 <tcp_output_alloc_header>
 8011ea4:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8011ea6:	69bb      	ldr	r3, [r7, #24]
 8011ea8:	2b00      	cmp	r3, #0
 8011eaa:	d102      	bne.n	8011eb2 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8011eac:	f04f 33ff 	mov.w	r3, #4294967295
 8011eb0:	e04c      	b.n	8011f4c <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8011eb2:	69bb      	ldr	r3, [r7, #24]
 8011eb4:	685b      	ldr	r3, [r3, #4]
 8011eb6:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8011eb8:	7ffb      	ldrb	r3, [r7, #31]
 8011eba:	2b00      	cmp	r3, #0
 8011ebc:	d011      	beq.n	8011ee2 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8011ebe:	697b      	ldr	r3, [r7, #20]
 8011ec0:	899b      	ldrh	r3, [r3, #12]
 8011ec2:	b29b      	uxth	r3, r3
 8011ec4:	b21b      	sxth	r3, r3
 8011ec6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8011eca:	b21c      	sxth	r4, r3
 8011ecc:	2011      	movs	r0, #17
 8011ece:	f7f8 f93d 	bl	800a14c <lwip_htons>
 8011ed2:	4603      	mov	r3, r0
 8011ed4:	b21b      	sxth	r3, r3
 8011ed6:	4323      	orrs	r3, r4
 8011ed8:	b21b      	sxth	r3, r3
 8011eda:	b29a      	uxth	r2, r3
 8011edc:	697b      	ldr	r3, [r7, #20]
 8011ede:	819a      	strh	r2, [r3, #12]
 8011ee0:	e010      	b.n	8011f04 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8011ee2:	69bb      	ldr	r3, [r7, #24]
 8011ee4:	685b      	ldr	r3, [r3, #4]
 8011ee6:	3314      	adds	r3, #20
 8011ee8:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8011eea:	6a3b      	ldr	r3, [r7, #32]
 8011eec:	6858      	ldr	r0, [r3, #4]
 8011eee:	6a3b      	ldr	r3, [r7, #32]
 8011ef0:	685b      	ldr	r3, [r3, #4]
 8011ef2:	891a      	ldrh	r2, [r3, #8]
 8011ef4:	6a3b      	ldr	r3, [r7, #32]
 8011ef6:	891b      	ldrh	r3, [r3, #8]
 8011ef8:	1ad3      	subs	r3, r2, r3
 8011efa:	b29b      	uxth	r3, r3
 8011efc:	2201      	movs	r2, #1
 8011efe:	6939      	ldr	r1, [r7, #16]
 8011f00:	f7f9 ff28 	bl	800bd54 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8011f04:	6a3b      	ldr	r3, [r7, #32]
 8011f06:	68db      	ldr	r3, [r3, #12]
 8011f08:	685b      	ldr	r3, [r3, #4]
 8011f0a:	4618      	mov	r0, r3
 8011f0c:	f7f8 f933 	bl	800a176 <lwip_htonl>
 8011f10:	4603      	mov	r3, r0
 8011f12:	3301      	adds	r3, #1
 8011f14:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8011f16:	687b      	ldr	r3, [r7, #4]
 8011f18:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011f1a:	68fb      	ldr	r3, [r7, #12]
 8011f1c:	1ad3      	subs	r3, r2, r3
 8011f1e:	2b00      	cmp	r3, #0
 8011f20:	da02      	bge.n	8011f28 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8011f22:	687b      	ldr	r3, [r7, #4]
 8011f24:	68fa      	ldr	r2, [r7, #12]
 8011f26:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8011f28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011f2c:	2200      	movs	r2, #0
 8011f2e:	69b9      	ldr	r1, [r7, #24]
 8011f30:	6878      	ldr	r0, [r7, #4]
 8011f32:	f7ff fded 	bl	8011b10 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8011f36:	687a      	ldr	r2, [r7, #4]
 8011f38:	687b      	ldr	r3, [r7, #4]
 8011f3a:	3304      	adds	r3, #4
 8011f3c:	69b9      	ldr	r1, [r7, #24]
 8011f3e:	6878      	ldr	r0, [r7, #4]
 8011f40:	f7ff fe26 	bl	8011b90 <tcp_output_control_segment>
 8011f44:	4603      	mov	r3, r0
 8011f46:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8011f48:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8011f4c:	4618      	mov	r0, r3
 8011f4e:	372c      	adds	r7, #44	; 0x2c
 8011f50:	46bd      	mov	sp, r7
 8011f52:	bd90      	pop	{r4, r7, pc}
 8011f54:	0801a784 	.word	0x0801a784
 8011f58:	0801af7c 	.word	0x0801af7c
 8011f5c:	0801a7d8 	.word	0x0801a7d8

08011f60 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8011f60:	b580      	push	{r7, lr}
 8011f62:	b082      	sub	sp, #8
 8011f64:	af00      	add	r7, sp, #0
 8011f66:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8011f68:	f7f9 ffe2 	bl	800bf30 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8011f6c:	4b0a      	ldr	r3, [pc, #40]	; (8011f98 <tcpip_tcp_timer+0x38>)
 8011f6e:	681b      	ldr	r3, [r3, #0]
 8011f70:	2b00      	cmp	r3, #0
 8011f72:	d103      	bne.n	8011f7c <tcpip_tcp_timer+0x1c>
 8011f74:	4b09      	ldr	r3, [pc, #36]	; (8011f9c <tcpip_tcp_timer+0x3c>)
 8011f76:	681b      	ldr	r3, [r3, #0]
 8011f78:	2b00      	cmp	r3, #0
 8011f7a:	d005      	beq.n	8011f88 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8011f7c:	2200      	movs	r2, #0
 8011f7e:	4908      	ldr	r1, [pc, #32]	; (8011fa0 <tcpip_tcp_timer+0x40>)
 8011f80:	20fa      	movs	r0, #250	; 0xfa
 8011f82:	f000 f8f3 	bl	801216c <sys_timeout>
 8011f86:	e003      	b.n	8011f90 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8011f88:	4b06      	ldr	r3, [pc, #24]	; (8011fa4 <tcpip_tcp_timer+0x44>)
 8011f8a:	2200      	movs	r2, #0
 8011f8c:	601a      	str	r2, [r3, #0]
  }
}
 8011f8e:	bf00      	nop
 8011f90:	bf00      	nop
 8011f92:	3708      	adds	r7, #8
 8011f94:	46bd      	mov	sp, r7
 8011f96:	bd80      	pop	{r7, pc}
 8011f98:	20010944 	.word	0x20010944
 8011f9c:	20010948 	.word	0x20010948
 8011fa0:	08011f61 	.word	0x08011f61
 8011fa4:	20010990 	.word	0x20010990

08011fa8 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8011fa8:	b580      	push	{r7, lr}
 8011faa:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8011fac:	4b0a      	ldr	r3, [pc, #40]	; (8011fd8 <tcp_timer_needed+0x30>)
 8011fae:	681b      	ldr	r3, [r3, #0]
 8011fb0:	2b00      	cmp	r3, #0
 8011fb2:	d10f      	bne.n	8011fd4 <tcp_timer_needed+0x2c>
 8011fb4:	4b09      	ldr	r3, [pc, #36]	; (8011fdc <tcp_timer_needed+0x34>)
 8011fb6:	681b      	ldr	r3, [r3, #0]
 8011fb8:	2b00      	cmp	r3, #0
 8011fba:	d103      	bne.n	8011fc4 <tcp_timer_needed+0x1c>
 8011fbc:	4b08      	ldr	r3, [pc, #32]	; (8011fe0 <tcp_timer_needed+0x38>)
 8011fbe:	681b      	ldr	r3, [r3, #0]
 8011fc0:	2b00      	cmp	r3, #0
 8011fc2:	d007      	beq.n	8011fd4 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8011fc4:	4b04      	ldr	r3, [pc, #16]	; (8011fd8 <tcp_timer_needed+0x30>)
 8011fc6:	2201      	movs	r2, #1
 8011fc8:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8011fca:	2200      	movs	r2, #0
 8011fcc:	4905      	ldr	r1, [pc, #20]	; (8011fe4 <tcp_timer_needed+0x3c>)
 8011fce:	20fa      	movs	r0, #250	; 0xfa
 8011fd0:	f000 f8cc 	bl	801216c <sys_timeout>
  }
}
 8011fd4:	bf00      	nop
 8011fd6:	bd80      	pop	{r7, pc}
 8011fd8:	20010990 	.word	0x20010990
 8011fdc:	20010944 	.word	0x20010944
 8011fe0:	20010948 	.word	0x20010948
 8011fe4:	08011f61 	.word	0x08011f61

08011fe8 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8011fe8:	b580      	push	{r7, lr}
 8011fea:	b086      	sub	sp, #24
 8011fec:	af00      	add	r7, sp, #0
 8011fee:	60f8      	str	r0, [r7, #12]
 8011ff0:	60b9      	str	r1, [r7, #8]
 8011ff2:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8011ff4:	200a      	movs	r0, #10
 8011ff6:	f7f8 fd81 	bl	800aafc <memp_malloc>
 8011ffa:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8011ffc:	693b      	ldr	r3, [r7, #16]
 8011ffe:	2b00      	cmp	r3, #0
 8012000:	d109      	bne.n	8012016 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8012002:	693b      	ldr	r3, [r7, #16]
 8012004:	2b00      	cmp	r3, #0
 8012006:	d151      	bne.n	80120ac <sys_timeout_abs+0xc4>
 8012008:	4b2a      	ldr	r3, [pc, #168]	; (80120b4 <sys_timeout_abs+0xcc>)
 801200a:	22be      	movs	r2, #190	; 0xbe
 801200c:	492a      	ldr	r1, [pc, #168]	; (80120b8 <sys_timeout_abs+0xd0>)
 801200e:	482b      	ldr	r0, [pc, #172]	; (80120bc <sys_timeout_abs+0xd4>)
 8012010:	f005 fb40 	bl	8017694 <iprintf>
    return;
 8012014:	e04a      	b.n	80120ac <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8012016:	693b      	ldr	r3, [r7, #16]
 8012018:	2200      	movs	r2, #0
 801201a:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 801201c:	693b      	ldr	r3, [r7, #16]
 801201e:	68ba      	ldr	r2, [r7, #8]
 8012020:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8012022:	693b      	ldr	r3, [r7, #16]
 8012024:	687a      	ldr	r2, [r7, #4]
 8012026:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8012028:	693b      	ldr	r3, [r7, #16]
 801202a:	68fa      	ldr	r2, [r7, #12]
 801202c:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801202e:	4b24      	ldr	r3, [pc, #144]	; (80120c0 <sys_timeout_abs+0xd8>)
 8012030:	681b      	ldr	r3, [r3, #0]
 8012032:	2b00      	cmp	r3, #0
 8012034:	d103      	bne.n	801203e <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8012036:	4a22      	ldr	r2, [pc, #136]	; (80120c0 <sys_timeout_abs+0xd8>)
 8012038:	693b      	ldr	r3, [r7, #16]
 801203a:	6013      	str	r3, [r2, #0]
    return;
 801203c:	e037      	b.n	80120ae <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 801203e:	693b      	ldr	r3, [r7, #16]
 8012040:	685a      	ldr	r2, [r3, #4]
 8012042:	4b1f      	ldr	r3, [pc, #124]	; (80120c0 <sys_timeout_abs+0xd8>)
 8012044:	681b      	ldr	r3, [r3, #0]
 8012046:	685b      	ldr	r3, [r3, #4]
 8012048:	1ad3      	subs	r3, r2, r3
 801204a:	0fdb      	lsrs	r3, r3, #31
 801204c:	f003 0301 	and.w	r3, r3, #1
 8012050:	b2db      	uxtb	r3, r3
 8012052:	2b00      	cmp	r3, #0
 8012054:	d007      	beq.n	8012066 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8012056:	4b1a      	ldr	r3, [pc, #104]	; (80120c0 <sys_timeout_abs+0xd8>)
 8012058:	681a      	ldr	r2, [r3, #0]
 801205a:	693b      	ldr	r3, [r7, #16]
 801205c:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 801205e:	4a18      	ldr	r2, [pc, #96]	; (80120c0 <sys_timeout_abs+0xd8>)
 8012060:	693b      	ldr	r3, [r7, #16]
 8012062:	6013      	str	r3, [r2, #0]
 8012064:	e023      	b.n	80120ae <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8012066:	4b16      	ldr	r3, [pc, #88]	; (80120c0 <sys_timeout_abs+0xd8>)
 8012068:	681b      	ldr	r3, [r3, #0]
 801206a:	617b      	str	r3, [r7, #20]
 801206c:	e01a      	b.n	80120a4 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 801206e:	697b      	ldr	r3, [r7, #20]
 8012070:	681b      	ldr	r3, [r3, #0]
 8012072:	2b00      	cmp	r3, #0
 8012074:	d00b      	beq.n	801208e <sys_timeout_abs+0xa6>
 8012076:	693b      	ldr	r3, [r7, #16]
 8012078:	685a      	ldr	r2, [r3, #4]
 801207a:	697b      	ldr	r3, [r7, #20]
 801207c:	681b      	ldr	r3, [r3, #0]
 801207e:	685b      	ldr	r3, [r3, #4]
 8012080:	1ad3      	subs	r3, r2, r3
 8012082:	0fdb      	lsrs	r3, r3, #31
 8012084:	f003 0301 	and.w	r3, r3, #1
 8012088:	b2db      	uxtb	r3, r3
 801208a:	2b00      	cmp	r3, #0
 801208c:	d007      	beq.n	801209e <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 801208e:	697b      	ldr	r3, [r7, #20]
 8012090:	681a      	ldr	r2, [r3, #0]
 8012092:	693b      	ldr	r3, [r7, #16]
 8012094:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8012096:	697b      	ldr	r3, [r7, #20]
 8012098:	693a      	ldr	r2, [r7, #16]
 801209a:	601a      	str	r2, [r3, #0]
        break;
 801209c:	e007      	b.n	80120ae <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 801209e:	697b      	ldr	r3, [r7, #20]
 80120a0:	681b      	ldr	r3, [r3, #0]
 80120a2:	617b      	str	r3, [r7, #20]
 80120a4:	697b      	ldr	r3, [r7, #20]
 80120a6:	2b00      	cmp	r3, #0
 80120a8:	d1e1      	bne.n	801206e <sys_timeout_abs+0x86>
 80120aa:	e000      	b.n	80120ae <sys_timeout_abs+0xc6>
    return;
 80120ac:	bf00      	nop
      }
    }
  }
}
 80120ae:	3718      	adds	r7, #24
 80120b0:	46bd      	mov	sp, r7
 80120b2:	bd80      	pop	{r7, pc}
 80120b4:	0801afa0 	.word	0x0801afa0
 80120b8:	0801afd4 	.word	0x0801afd4
 80120bc:	0801b014 	.word	0x0801b014
 80120c0:	20010988 	.word	0x20010988

080120c4 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 80120c4:	b580      	push	{r7, lr}
 80120c6:	b086      	sub	sp, #24
 80120c8:	af00      	add	r7, sp, #0
 80120ca:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 80120cc:	687b      	ldr	r3, [r7, #4]
 80120ce:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 80120d0:	697b      	ldr	r3, [r7, #20]
 80120d2:	685b      	ldr	r3, [r3, #4]
 80120d4:	4798      	blx	r3

  now = sys_now();
 80120d6:	f7f2 fb03 	bl	80046e0 <sys_now>
 80120da:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 80120dc:	697b      	ldr	r3, [r7, #20]
 80120de:	681a      	ldr	r2, [r3, #0]
 80120e0:	4b0f      	ldr	r3, [pc, #60]	; (8012120 <lwip_cyclic_timer+0x5c>)
 80120e2:	681b      	ldr	r3, [r3, #0]
 80120e4:	4413      	add	r3, r2
 80120e6:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 80120e8:	68fa      	ldr	r2, [r7, #12]
 80120ea:	693b      	ldr	r3, [r7, #16]
 80120ec:	1ad3      	subs	r3, r2, r3
 80120ee:	0fdb      	lsrs	r3, r3, #31
 80120f0:	f003 0301 	and.w	r3, r3, #1
 80120f4:	b2db      	uxtb	r3, r3
 80120f6:	2b00      	cmp	r3, #0
 80120f8:	d009      	beq.n	801210e <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 80120fa:	697b      	ldr	r3, [r7, #20]
 80120fc:	681a      	ldr	r2, [r3, #0]
 80120fe:	693b      	ldr	r3, [r7, #16]
 8012100:	4413      	add	r3, r2
 8012102:	687a      	ldr	r2, [r7, #4]
 8012104:	4907      	ldr	r1, [pc, #28]	; (8012124 <lwip_cyclic_timer+0x60>)
 8012106:	4618      	mov	r0, r3
 8012108:	f7ff ff6e 	bl	8011fe8 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 801210c:	e004      	b.n	8012118 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801210e:	687a      	ldr	r2, [r7, #4]
 8012110:	4904      	ldr	r1, [pc, #16]	; (8012124 <lwip_cyclic_timer+0x60>)
 8012112:	68f8      	ldr	r0, [r7, #12]
 8012114:	f7ff ff68 	bl	8011fe8 <sys_timeout_abs>
}
 8012118:	bf00      	nop
 801211a:	3718      	adds	r7, #24
 801211c:	46bd      	mov	sp, r7
 801211e:	bd80      	pop	{r7, pc}
 8012120:	2001098c 	.word	0x2001098c
 8012124:	080120c5 	.word	0x080120c5

08012128 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8012128:	b580      	push	{r7, lr}
 801212a:	b082      	sub	sp, #8
 801212c:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801212e:	2301      	movs	r3, #1
 8012130:	607b      	str	r3, [r7, #4]
 8012132:	e00e      	b.n	8012152 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8012134:	4a0b      	ldr	r2, [pc, #44]	; (8012164 <sys_timeouts_init+0x3c>)
 8012136:	687b      	ldr	r3, [r7, #4]
 8012138:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 801213c:	687b      	ldr	r3, [r7, #4]
 801213e:	00db      	lsls	r3, r3, #3
 8012140:	4a08      	ldr	r2, [pc, #32]	; (8012164 <sys_timeouts_init+0x3c>)
 8012142:	4413      	add	r3, r2
 8012144:	461a      	mov	r2, r3
 8012146:	4908      	ldr	r1, [pc, #32]	; (8012168 <sys_timeouts_init+0x40>)
 8012148:	f000 f810 	bl	801216c <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801214c:	687b      	ldr	r3, [r7, #4]
 801214e:	3301      	adds	r3, #1
 8012150:	607b      	str	r3, [r7, #4]
 8012152:	687b      	ldr	r3, [r7, #4]
 8012154:	2b04      	cmp	r3, #4
 8012156:	d9ed      	bls.n	8012134 <sys_timeouts_init+0xc>
  }
}
 8012158:	bf00      	nop
 801215a:	bf00      	nop
 801215c:	3708      	adds	r7, #8
 801215e:	46bd      	mov	sp, r7
 8012160:	bd80      	pop	{r7, pc}
 8012162:	bf00      	nop
 8012164:	0801bf70 	.word	0x0801bf70
 8012168:	080120c5 	.word	0x080120c5

0801216c <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 801216c:	b580      	push	{r7, lr}
 801216e:	b086      	sub	sp, #24
 8012170:	af00      	add	r7, sp, #0
 8012172:	60f8      	str	r0, [r7, #12]
 8012174:	60b9      	str	r1, [r7, #8]
 8012176:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8012178:	68fb      	ldr	r3, [r7, #12]
 801217a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801217e:	d306      	bcc.n	801218e <sys_timeout+0x22>
 8012180:	4b0a      	ldr	r3, [pc, #40]	; (80121ac <sys_timeout+0x40>)
 8012182:	f240 1229 	movw	r2, #297	; 0x129
 8012186:	490a      	ldr	r1, [pc, #40]	; (80121b0 <sys_timeout+0x44>)
 8012188:	480a      	ldr	r0, [pc, #40]	; (80121b4 <sys_timeout+0x48>)
 801218a:	f005 fa83 	bl	8017694 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801218e:	f7f2 faa7 	bl	80046e0 <sys_now>
 8012192:	4602      	mov	r2, r0
 8012194:	68fb      	ldr	r3, [r7, #12]
 8012196:	4413      	add	r3, r2
 8012198:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 801219a:	687a      	ldr	r2, [r7, #4]
 801219c:	68b9      	ldr	r1, [r7, #8]
 801219e:	6978      	ldr	r0, [r7, #20]
 80121a0:	f7ff ff22 	bl	8011fe8 <sys_timeout_abs>
#endif
}
 80121a4:	bf00      	nop
 80121a6:	3718      	adds	r7, #24
 80121a8:	46bd      	mov	sp, r7
 80121aa:	bd80      	pop	{r7, pc}
 80121ac:	0801afa0 	.word	0x0801afa0
 80121b0:	0801b03c 	.word	0x0801b03c
 80121b4:	0801b014 	.word	0x0801b014

080121b8 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 80121b8:	b580      	push	{r7, lr}
 80121ba:	b084      	sub	sp, #16
 80121bc:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 80121be:	f7f2 fa8f 	bl	80046e0 <sys_now>
 80121c2:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 80121c4:	4b17      	ldr	r3, [pc, #92]	; (8012224 <sys_check_timeouts+0x6c>)
 80121c6:	681b      	ldr	r3, [r3, #0]
 80121c8:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 80121ca:	68bb      	ldr	r3, [r7, #8]
 80121cc:	2b00      	cmp	r3, #0
 80121ce:	d022      	beq.n	8012216 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 80121d0:	68bb      	ldr	r3, [r7, #8]
 80121d2:	685b      	ldr	r3, [r3, #4]
 80121d4:	68fa      	ldr	r2, [r7, #12]
 80121d6:	1ad3      	subs	r3, r2, r3
 80121d8:	0fdb      	lsrs	r3, r3, #31
 80121da:	f003 0301 	and.w	r3, r3, #1
 80121de:	b2db      	uxtb	r3, r3
 80121e0:	2b00      	cmp	r3, #0
 80121e2:	d11a      	bne.n	801221a <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 80121e4:	68bb      	ldr	r3, [r7, #8]
 80121e6:	681b      	ldr	r3, [r3, #0]
 80121e8:	4a0e      	ldr	r2, [pc, #56]	; (8012224 <sys_check_timeouts+0x6c>)
 80121ea:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 80121ec:	68bb      	ldr	r3, [r7, #8]
 80121ee:	689b      	ldr	r3, [r3, #8]
 80121f0:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 80121f2:	68bb      	ldr	r3, [r7, #8]
 80121f4:	68db      	ldr	r3, [r3, #12]
 80121f6:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 80121f8:	68bb      	ldr	r3, [r7, #8]
 80121fa:	685b      	ldr	r3, [r3, #4]
 80121fc:	4a0a      	ldr	r2, [pc, #40]	; (8012228 <sys_check_timeouts+0x70>)
 80121fe:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8012200:	68b9      	ldr	r1, [r7, #8]
 8012202:	200a      	movs	r0, #10
 8012204:	f7f8 fcf0 	bl	800abe8 <memp_free>
    if (handler != NULL) {
 8012208:	687b      	ldr	r3, [r7, #4]
 801220a:	2b00      	cmp	r3, #0
 801220c:	d0da      	beq.n	80121c4 <sys_check_timeouts+0xc>
      handler(arg);
 801220e:	687b      	ldr	r3, [r7, #4]
 8012210:	6838      	ldr	r0, [r7, #0]
 8012212:	4798      	blx	r3
  do {
 8012214:	e7d6      	b.n	80121c4 <sys_check_timeouts+0xc>
      return;
 8012216:	bf00      	nop
 8012218:	e000      	b.n	801221c <sys_check_timeouts+0x64>
      return;
 801221a:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 801221c:	3710      	adds	r7, #16
 801221e:	46bd      	mov	sp, r7
 8012220:	bd80      	pop	{r7, pc}
 8012222:	bf00      	nop
 8012224:	20010988 	.word	0x20010988
 8012228:	2001098c 	.word	0x2001098c

0801222c <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 801222c:	b580      	push	{r7, lr}
 801222e:	b082      	sub	sp, #8
 8012230:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8012232:	4b16      	ldr	r3, [pc, #88]	; (801228c <sys_timeouts_sleeptime+0x60>)
 8012234:	681b      	ldr	r3, [r3, #0]
 8012236:	2b00      	cmp	r3, #0
 8012238:	d102      	bne.n	8012240 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 801223a:	f04f 33ff 	mov.w	r3, #4294967295
 801223e:	e020      	b.n	8012282 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8012240:	f7f2 fa4e 	bl	80046e0 <sys_now>
 8012244:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8012246:	4b11      	ldr	r3, [pc, #68]	; (801228c <sys_timeouts_sleeptime+0x60>)
 8012248:	681b      	ldr	r3, [r3, #0]
 801224a:	685a      	ldr	r2, [r3, #4]
 801224c:	687b      	ldr	r3, [r7, #4]
 801224e:	1ad3      	subs	r3, r2, r3
 8012250:	0fdb      	lsrs	r3, r3, #31
 8012252:	f003 0301 	and.w	r3, r3, #1
 8012256:	b2db      	uxtb	r3, r3
 8012258:	2b00      	cmp	r3, #0
 801225a:	d001      	beq.n	8012260 <sys_timeouts_sleeptime+0x34>
    return 0;
 801225c:	2300      	movs	r3, #0
 801225e:	e010      	b.n	8012282 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8012260:	4b0a      	ldr	r3, [pc, #40]	; (801228c <sys_timeouts_sleeptime+0x60>)
 8012262:	681b      	ldr	r3, [r3, #0]
 8012264:	685a      	ldr	r2, [r3, #4]
 8012266:	687b      	ldr	r3, [r7, #4]
 8012268:	1ad3      	subs	r3, r2, r3
 801226a:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 801226c:	683b      	ldr	r3, [r7, #0]
 801226e:	2b00      	cmp	r3, #0
 8012270:	da06      	bge.n	8012280 <sys_timeouts_sleeptime+0x54>
 8012272:	4b07      	ldr	r3, [pc, #28]	; (8012290 <sys_timeouts_sleeptime+0x64>)
 8012274:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8012278:	4906      	ldr	r1, [pc, #24]	; (8012294 <sys_timeouts_sleeptime+0x68>)
 801227a:	4807      	ldr	r0, [pc, #28]	; (8012298 <sys_timeouts_sleeptime+0x6c>)
 801227c:	f005 fa0a 	bl	8017694 <iprintf>
    return ret;
 8012280:	683b      	ldr	r3, [r7, #0]
  }
}
 8012282:	4618      	mov	r0, r3
 8012284:	3708      	adds	r7, #8
 8012286:	46bd      	mov	sp, r7
 8012288:	bd80      	pop	{r7, pc}
 801228a:	bf00      	nop
 801228c:	20010988 	.word	0x20010988
 8012290:	0801afa0 	.word	0x0801afa0
 8012294:	0801b074 	.word	0x0801b074
 8012298:	0801b014 	.word	0x0801b014

0801229c <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 801229c:	b580      	push	{r7, lr}
 801229e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80122a0:	f005 fa10 	bl	80176c4 <rand>
 80122a4:	4603      	mov	r3, r0
 80122a6:	b29b      	uxth	r3, r3
 80122a8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80122ac:	b29b      	uxth	r3, r3
 80122ae:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80122b2:	b29a      	uxth	r2, r3
 80122b4:	4b01      	ldr	r3, [pc, #4]	; (80122bc <udp_init+0x20>)
 80122b6:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80122b8:	bf00      	nop
 80122ba:	bd80      	pop	{r7, pc}
 80122bc:	2000002c 	.word	0x2000002c

080122c0 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 80122c0:	b480      	push	{r7}
 80122c2:	b083      	sub	sp, #12
 80122c4:	af00      	add	r7, sp, #0
  u16_t n = 0;
 80122c6:	2300      	movs	r3, #0
 80122c8:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 80122ca:	4b17      	ldr	r3, [pc, #92]	; (8012328 <udp_new_port+0x68>)
 80122cc:	881b      	ldrh	r3, [r3, #0]
 80122ce:	1c5a      	adds	r2, r3, #1
 80122d0:	b291      	uxth	r1, r2
 80122d2:	4a15      	ldr	r2, [pc, #84]	; (8012328 <udp_new_port+0x68>)
 80122d4:	8011      	strh	r1, [r2, #0]
 80122d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80122da:	4293      	cmp	r3, r2
 80122dc:	d103      	bne.n	80122e6 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 80122de:	4b12      	ldr	r3, [pc, #72]	; (8012328 <udp_new_port+0x68>)
 80122e0:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80122e4:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80122e6:	4b11      	ldr	r3, [pc, #68]	; (801232c <udp_new_port+0x6c>)
 80122e8:	681b      	ldr	r3, [r3, #0]
 80122ea:	603b      	str	r3, [r7, #0]
 80122ec:	e011      	b.n	8012312 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 80122ee:	683b      	ldr	r3, [r7, #0]
 80122f0:	8a5a      	ldrh	r2, [r3, #18]
 80122f2:	4b0d      	ldr	r3, [pc, #52]	; (8012328 <udp_new_port+0x68>)
 80122f4:	881b      	ldrh	r3, [r3, #0]
 80122f6:	429a      	cmp	r2, r3
 80122f8:	d108      	bne.n	801230c <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 80122fa:	88fb      	ldrh	r3, [r7, #6]
 80122fc:	3301      	adds	r3, #1
 80122fe:	80fb      	strh	r3, [r7, #6]
 8012300:	88fb      	ldrh	r3, [r7, #6]
 8012302:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8012306:	d3e0      	bcc.n	80122ca <udp_new_port+0xa>
        return 0;
 8012308:	2300      	movs	r3, #0
 801230a:	e007      	b.n	801231c <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801230c:	683b      	ldr	r3, [r7, #0]
 801230e:	68db      	ldr	r3, [r3, #12]
 8012310:	603b      	str	r3, [r7, #0]
 8012312:	683b      	ldr	r3, [r7, #0]
 8012314:	2b00      	cmp	r3, #0
 8012316:	d1ea      	bne.n	80122ee <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8012318:	4b03      	ldr	r3, [pc, #12]	; (8012328 <udp_new_port+0x68>)
 801231a:	881b      	ldrh	r3, [r3, #0]
}
 801231c:	4618      	mov	r0, r3
 801231e:	370c      	adds	r7, #12
 8012320:	46bd      	mov	sp, r7
 8012322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012326:	4770      	bx	lr
 8012328:	2000002c 	.word	0x2000002c
 801232c:	20010994 	.word	0x20010994

08012330 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8012330:	b580      	push	{r7, lr}
 8012332:	b084      	sub	sp, #16
 8012334:	af00      	add	r7, sp, #0
 8012336:	60f8      	str	r0, [r7, #12]
 8012338:	60b9      	str	r1, [r7, #8]
 801233a:	4613      	mov	r3, r2
 801233c:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 801233e:	68fb      	ldr	r3, [r7, #12]
 8012340:	2b00      	cmp	r3, #0
 8012342:	d105      	bne.n	8012350 <udp_input_local_match+0x20>
 8012344:	4b27      	ldr	r3, [pc, #156]	; (80123e4 <udp_input_local_match+0xb4>)
 8012346:	2287      	movs	r2, #135	; 0x87
 8012348:	4927      	ldr	r1, [pc, #156]	; (80123e8 <udp_input_local_match+0xb8>)
 801234a:	4828      	ldr	r0, [pc, #160]	; (80123ec <udp_input_local_match+0xbc>)
 801234c:	f005 f9a2 	bl	8017694 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8012350:	68bb      	ldr	r3, [r7, #8]
 8012352:	2b00      	cmp	r3, #0
 8012354:	d105      	bne.n	8012362 <udp_input_local_match+0x32>
 8012356:	4b23      	ldr	r3, [pc, #140]	; (80123e4 <udp_input_local_match+0xb4>)
 8012358:	2288      	movs	r2, #136	; 0x88
 801235a:	4925      	ldr	r1, [pc, #148]	; (80123f0 <udp_input_local_match+0xc0>)
 801235c:	4823      	ldr	r0, [pc, #140]	; (80123ec <udp_input_local_match+0xbc>)
 801235e:	f005 f999 	bl	8017694 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8012362:	68fb      	ldr	r3, [r7, #12]
 8012364:	7a1b      	ldrb	r3, [r3, #8]
 8012366:	2b00      	cmp	r3, #0
 8012368:	d00b      	beq.n	8012382 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801236a:	68fb      	ldr	r3, [r7, #12]
 801236c:	7a1a      	ldrb	r2, [r3, #8]
 801236e:	4b21      	ldr	r3, [pc, #132]	; (80123f4 <udp_input_local_match+0xc4>)
 8012370:	685b      	ldr	r3, [r3, #4]
 8012372:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8012376:	3301      	adds	r3, #1
 8012378:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801237a:	429a      	cmp	r2, r3
 801237c:	d001      	beq.n	8012382 <udp_input_local_match+0x52>
    return 0;
 801237e:	2300      	movs	r3, #0
 8012380:	e02b      	b.n	80123da <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8012382:	79fb      	ldrb	r3, [r7, #7]
 8012384:	2b00      	cmp	r3, #0
 8012386:	d018      	beq.n	80123ba <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8012388:	68fb      	ldr	r3, [r7, #12]
 801238a:	2b00      	cmp	r3, #0
 801238c:	d013      	beq.n	80123b6 <udp_input_local_match+0x86>
 801238e:	68fb      	ldr	r3, [r7, #12]
 8012390:	681b      	ldr	r3, [r3, #0]
 8012392:	2b00      	cmp	r3, #0
 8012394:	d00f      	beq.n	80123b6 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8012396:	4b17      	ldr	r3, [pc, #92]	; (80123f4 <udp_input_local_match+0xc4>)
 8012398:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801239a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801239e:	d00a      	beq.n	80123b6 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 80123a0:	68fb      	ldr	r3, [r7, #12]
 80123a2:	681a      	ldr	r2, [r3, #0]
 80123a4:	4b13      	ldr	r3, [pc, #76]	; (80123f4 <udp_input_local_match+0xc4>)
 80123a6:	695b      	ldr	r3, [r3, #20]
 80123a8:	405a      	eors	r2, r3
 80123aa:	68bb      	ldr	r3, [r7, #8]
 80123ac:	3308      	adds	r3, #8
 80123ae:	681b      	ldr	r3, [r3, #0]
 80123b0:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80123b2:	2b00      	cmp	r3, #0
 80123b4:	d110      	bne.n	80123d8 <udp_input_local_match+0xa8>
          return 1;
 80123b6:	2301      	movs	r3, #1
 80123b8:	e00f      	b.n	80123da <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80123ba:	68fb      	ldr	r3, [r7, #12]
 80123bc:	2b00      	cmp	r3, #0
 80123be:	d009      	beq.n	80123d4 <udp_input_local_match+0xa4>
 80123c0:	68fb      	ldr	r3, [r7, #12]
 80123c2:	681b      	ldr	r3, [r3, #0]
 80123c4:	2b00      	cmp	r3, #0
 80123c6:	d005      	beq.n	80123d4 <udp_input_local_match+0xa4>
 80123c8:	68fb      	ldr	r3, [r7, #12]
 80123ca:	681a      	ldr	r2, [r3, #0]
 80123cc:	4b09      	ldr	r3, [pc, #36]	; (80123f4 <udp_input_local_match+0xc4>)
 80123ce:	695b      	ldr	r3, [r3, #20]
 80123d0:	429a      	cmp	r2, r3
 80123d2:	d101      	bne.n	80123d8 <udp_input_local_match+0xa8>
        return 1;
 80123d4:	2301      	movs	r3, #1
 80123d6:	e000      	b.n	80123da <udp_input_local_match+0xaa>
      }
  }

  return 0;
 80123d8:	2300      	movs	r3, #0
}
 80123da:	4618      	mov	r0, r3
 80123dc:	3710      	adds	r7, #16
 80123de:	46bd      	mov	sp, r7
 80123e0:	bd80      	pop	{r7, pc}
 80123e2:	bf00      	nop
 80123e4:	0801b088 	.word	0x0801b088
 80123e8:	0801b0b8 	.word	0x0801b0b8
 80123ec:	0801b0dc 	.word	0x0801b0dc
 80123f0:	0801b104 	.word	0x0801b104
 80123f4:	2000d1c4 	.word	0x2000d1c4

080123f8 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 80123f8:	b590      	push	{r4, r7, lr}
 80123fa:	b08d      	sub	sp, #52	; 0x34
 80123fc:	af02      	add	r7, sp, #8
 80123fe:	6078      	str	r0, [r7, #4]
 8012400:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8012402:	2300      	movs	r3, #0
 8012404:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8012406:	687b      	ldr	r3, [r7, #4]
 8012408:	2b00      	cmp	r3, #0
 801240a:	d105      	bne.n	8012418 <udp_input+0x20>
 801240c:	4b7c      	ldr	r3, [pc, #496]	; (8012600 <udp_input+0x208>)
 801240e:	22cf      	movs	r2, #207	; 0xcf
 8012410:	497c      	ldr	r1, [pc, #496]	; (8012604 <udp_input+0x20c>)
 8012412:	487d      	ldr	r0, [pc, #500]	; (8012608 <udp_input+0x210>)
 8012414:	f005 f93e 	bl	8017694 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8012418:	683b      	ldr	r3, [r7, #0]
 801241a:	2b00      	cmp	r3, #0
 801241c:	d105      	bne.n	801242a <udp_input+0x32>
 801241e:	4b78      	ldr	r3, [pc, #480]	; (8012600 <udp_input+0x208>)
 8012420:	22d0      	movs	r2, #208	; 0xd0
 8012422:	497a      	ldr	r1, [pc, #488]	; (801260c <udp_input+0x214>)
 8012424:	4878      	ldr	r0, [pc, #480]	; (8012608 <udp_input+0x210>)
 8012426:	f005 f935 	bl	8017694 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801242a:	687b      	ldr	r3, [r7, #4]
 801242c:	895b      	ldrh	r3, [r3, #10]
 801242e:	2b07      	cmp	r3, #7
 8012430:	d803      	bhi.n	801243a <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8012432:	6878      	ldr	r0, [r7, #4]
 8012434:	f7f9 fa88 	bl	800b948 <pbuf_free>
    goto end;
 8012438:	e0de      	b.n	80125f8 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 801243a:	687b      	ldr	r3, [r7, #4]
 801243c:	685b      	ldr	r3, [r3, #4]
 801243e:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8012440:	4b73      	ldr	r3, [pc, #460]	; (8012610 <udp_input+0x218>)
 8012442:	695b      	ldr	r3, [r3, #20]
 8012444:	4a72      	ldr	r2, [pc, #456]	; (8012610 <udp_input+0x218>)
 8012446:	6812      	ldr	r2, [r2, #0]
 8012448:	4611      	mov	r1, r2
 801244a:	4618      	mov	r0, r3
 801244c:	f003 fe12 	bl	8016074 <ip4_addr_isbroadcast_u32>
 8012450:	4603      	mov	r3, r0
 8012452:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8012454:	697b      	ldr	r3, [r7, #20]
 8012456:	881b      	ldrh	r3, [r3, #0]
 8012458:	b29b      	uxth	r3, r3
 801245a:	4618      	mov	r0, r3
 801245c:	f7f7 fe76 	bl	800a14c <lwip_htons>
 8012460:	4603      	mov	r3, r0
 8012462:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8012464:	697b      	ldr	r3, [r7, #20]
 8012466:	885b      	ldrh	r3, [r3, #2]
 8012468:	b29b      	uxth	r3, r3
 801246a:	4618      	mov	r0, r3
 801246c:	f7f7 fe6e 	bl	800a14c <lwip_htons>
 8012470:	4603      	mov	r3, r0
 8012472:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8012474:	2300      	movs	r3, #0
 8012476:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8012478:	2300      	movs	r3, #0
 801247a:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 801247c:	2300      	movs	r3, #0
 801247e:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8012480:	4b64      	ldr	r3, [pc, #400]	; (8012614 <udp_input+0x21c>)
 8012482:	681b      	ldr	r3, [r3, #0]
 8012484:	627b      	str	r3, [r7, #36]	; 0x24
 8012486:	e054      	b.n	8012532 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8012488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801248a:	8a5b      	ldrh	r3, [r3, #18]
 801248c:	89fa      	ldrh	r2, [r7, #14]
 801248e:	429a      	cmp	r2, r3
 8012490:	d14a      	bne.n	8012528 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8012492:	7cfb      	ldrb	r3, [r7, #19]
 8012494:	461a      	mov	r2, r3
 8012496:	6839      	ldr	r1, [r7, #0]
 8012498:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801249a:	f7ff ff49 	bl	8012330 <udp_input_local_match>
 801249e:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 80124a0:	2b00      	cmp	r3, #0
 80124a2:	d041      	beq.n	8012528 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 80124a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124a6:	7c1b      	ldrb	r3, [r3, #16]
 80124a8:	f003 0304 	and.w	r3, r3, #4
 80124ac:	2b00      	cmp	r3, #0
 80124ae:	d11d      	bne.n	80124ec <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 80124b0:	69fb      	ldr	r3, [r7, #28]
 80124b2:	2b00      	cmp	r3, #0
 80124b4:	d102      	bne.n	80124bc <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 80124b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124b8:	61fb      	str	r3, [r7, #28]
 80124ba:	e017      	b.n	80124ec <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 80124bc:	7cfb      	ldrb	r3, [r7, #19]
 80124be:	2b00      	cmp	r3, #0
 80124c0:	d014      	beq.n	80124ec <udp_input+0xf4>
 80124c2:	4b53      	ldr	r3, [pc, #332]	; (8012610 <udp_input+0x218>)
 80124c4:	695b      	ldr	r3, [r3, #20]
 80124c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80124ca:	d10f      	bne.n	80124ec <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 80124cc:	69fb      	ldr	r3, [r7, #28]
 80124ce:	681a      	ldr	r2, [r3, #0]
 80124d0:	683b      	ldr	r3, [r7, #0]
 80124d2:	3304      	adds	r3, #4
 80124d4:	681b      	ldr	r3, [r3, #0]
 80124d6:	429a      	cmp	r2, r3
 80124d8:	d008      	beq.n	80124ec <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 80124da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124dc:	681a      	ldr	r2, [r3, #0]
 80124de:	683b      	ldr	r3, [r7, #0]
 80124e0:	3304      	adds	r3, #4
 80124e2:	681b      	ldr	r3, [r3, #0]
 80124e4:	429a      	cmp	r2, r3
 80124e6:	d101      	bne.n	80124ec <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 80124e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124ea:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 80124ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124ee:	8a9b      	ldrh	r3, [r3, #20]
 80124f0:	8a3a      	ldrh	r2, [r7, #16]
 80124f2:	429a      	cmp	r2, r3
 80124f4:	d118      	bne.n	8012528 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 80124f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124f8:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 80124fa:	2b00      	cmp	r3, #0
 80124fc:	d005      	beq.n	801250a <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 80124fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012500:	685a      	ldr	r2, [r3, #4]
 8012502:	4b43      	ldr	r3, [pc, #268]	; (8012610 <udp_input+0x218>)
 8012504:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8012506:	429a      	cmp	r2, r3
 8012508:	d10e      	bne.n	8012528 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 801250a:	6a3b      	ldr	r3, [r7, #32]
 801250c:	2b00      	cmp	r3, #0
 801250e:	d014      	beq.n	801253a <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8012510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012512:	68da      	ldr	r2, [r3, #12]
 8012514:	6a3b      	ldr	r3, [r7, #32]
 8012516:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8012518:	4b3e      	ldr	r3, [pc, #248]	; (8012614 <udp_input+0x21c>)
 801251a:	681a      	ldr	r2, [r3, #0]
 801251c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801251e:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8012520:	4a3c      	ldr	r2, [pc, #240]	; (8012614 <udp_input+0x21c>)
 8012522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012524:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8012526:	e008      	b.n	801253a <udp_input+0x142>
      }
    }

    prev = pcb;
 8012528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801252a:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801252c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801252e:	68db      	ldr	r3, [r3, #12]
 8012530:	627b      	str	r3, [r7, #36]	; 0x24
 8012532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012534:	2b00      	cmp	r3, #0
 8012536:	d1a7      	bne.n	8012488 <udp_input+0x90>
 8012538:	e000      	b.n	801253c <udp_input+0x144>
        break;
 801253a:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 801253c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801253e:	2b00      	cmp	r3, #0
 8012540:	d101      	bne.n	8012546 <udp_input+0x14e>
    pcb = uncon_pcb;
 8012542:	69fb      	ldr	r3, [r7, #28]
 8012544:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8012546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012548:	2b00      	cmp	r3, #0
 801254a:	d002      	beq.n	8012552 <udp_input+0x15a>
    for_us = 1;
 801254c:	2301      	movs	r3, #1
 801254e:	76fb      	strb	r3, [r7, #27]
 8012550:	e00a      	b.n	8012568 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8012552:	683b      	ldr	r3, [r7, #0]
 8012554:	3304      	adds	r3, #4
 8012556:	681a      	ldr	r2, [r3, #0]
 8012558:	4b2d      	ldr	r3, [pc, #180]	; (8012610 <udp_input+0x218>)
 801255a:	695b      	ldr	r3, [r3, #20]
 801255c:	429a      	cmp	r2, r3
 801255e:	bf0c      	ite	eq
 8012560:	2301      	moveq	r3, #1
 8012562:	2300      	movne	r3, #0
 8012564:	b2db      	uxtb	r3, r3
 8012566:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8012568:	7efb      	ldrb	r3, [r7, #27]
 801256a:	2b00      	cmp	r3, #0
 801256c:	d041      	beq.n	80125f2 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801256e:	2108      	movs	r1, #8
 8012570:	6878      	ldr	r0, [r7, #4]
 8012572:	f7f9 f963 	bl	800b83c <pbuf_remove_header>
 8012576:	4603      	mov	r3, r0
 8012578:	2b00      	cmp	r3, #0
 801257a:	d00a      	beq.n	8012592 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 801257c:	4b20      	ldr	r3, [pc, #128]	; (8012600 <udp_input+0x208>)
 801257e:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8012582:	4925      	ldr	r1, [pc, #148]	; (8012618 <udp_input+0x220>)
 8012584:	4820      	ldr	r0, [pc, #128]	; (8012608 <udp_input+0x210>)
 8012586:	f005 f885 	bl	8017694 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 801258a:	6878      	ldr	r0, [r7, #4]
 801258c:	f7f9 f9dc 	bl	800b948 <pbuf_free>
      goto end;
 8012590:	e032      	b.n	80125f8 <udp_input+0x200>
    }

    if (pcb != NULL) {
 8012592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012594:	2b00      	cmp	r3, #0
 8012596:	d012      	beq.n	80125be <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8012598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801259a:	699b      	ldr	r3, [r3, #24]
 801259c:	2b00      	cmp	r3, #0
 801259e:	d00a      	beq.n	80125b6 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 80125a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80125a2:	699c      	ldr	r4, [r3, #24]
 80125a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80125a6:	69d8      	ldr	r0, [r3, #28]
 80125a8:	8a3b      	ldrh	r3, [r7, #16]
 80125aa:	9300      	str	r3, [sp, #0]
 80125ac:	4b1b      	ldr	r3, [pc, #108]	; (801261c <udp_input+0x224>)
 80125ae:	687a      	ldr	r2, [r7, #4]
 80125b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80125b2:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 80125b4:	e021      	b.n	80125fa <udp_input+0x202>
        pbuf_free(p);
 80125b6:	6878      	ldr	r0, [r7, #4]
 80125b8:	f7f9 f9c6 	bl	800b948 <pbuf_free>
        goto end;
 80125bc:	e01c      	b.n	80125f8 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 80125be:	7cfb      	ldrb	r3, [r7, #19]
 80125c0:	2b00      	cmp	r3, #0
 80125c2:	d112      	bne.n	80125ea <udp_input+0x1f2>
 80125c4:	4b12      	ldr	r3, [pc, #72]	; (8012610 <udp_input+0x218>)
 80125c6:	695b      	ldr	r3, [r3, #20]
 80125c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80125cc:	2be0      	cmp	r3, #224	; 0xe0
 80125ce:	d00c      	beq.n	80125ea <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 80125d0:	4b0f      	ldr	r3, [pc, #60]	; (8012610 <udp_input+0x218>)
 80125d2:	899b      	ldrh	r3, [r3, #12]
 80125d4:	3308      	adds	r3, #8
 80125d6:	b29b      	uxth	r3, r3
 80125d8:	b21b      	sxth	r3, r3
 80125da:	4619      	mov	r1, r3
 80125dc:	6878      	ldr	r0, [r7, #4]
 80125de:	f7f9 f9a0 	bl	800b922 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 80125e2:	2103      	movs	r1, #3
 80125e4:	6878      	ldr	r0, [r7, #4]
 80125e6:	f003 fa07 	bl	80159f8 <icmp_dest_unreach>
      pbuf_free(p);
 80125ea:	6878      	ldr	r0, [r7, #4]
 80125ec:	f7f9 f9ac 	bl	800b948 <pbuf_free>
  return;
 80125f0:	e003      	b.n	80125fa <udp_input+0x202>
    pbuf_free(p);
 80125f2:	6878      	ldr	r0, [r7, #4]
 80125f4:	f7f9 f9a8 	bl	800b948 <pbuf_free>
  return;
 80125f8:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 80125fa:	372c      	adds	r7, #44	; 0x2c
 80125fc:	46bd      	mov	sp, r7
 80125fe:	bd90      	pop	{r4, r7, pc}
 8012600:	0801b088 	.word	0x0801b088
 8012604:	0801b12c 	.word	0x0801b12c
 8012608:	0801b0dc 	.word	0x0801b0dc
 801260c:	0801b144 	.word	0x0801b144
 8012610:	2000d1c4 	.word	0x2000d1c4
 8012614:	20010994 	.word	0x20010994
 8012618:	0801b160 	.word	0x0801b160
 801261c:	2000d1d4 	.word	0x2000d1d4

08012620 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8012620:	b580      	push	{r7, lr}
 8012622:	b088      	sub	sp, #32
 8012624:	af02      	add	r7, sp, #8
 8012626:	60f8      	str	r0, [r7, #12]
 8012628:	60b9      	str	r1, [r7, #8]
 801262a:	607a      	str	r2, [r7, #4]
 801262c:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 801262e:	68fb      	ldr	r3, [r7, #12]
 8012630:	2b00      	cmp	r3, #0
 8012632:	d109      	bne.n	8012648 <udp_sendto_if+0x28>
 8012634:	4b2e      	ldr	r3, [pc, #184]	; (80126f0 <udp_sendto_if+0xd0>)
 8012636:	f44f 7220 	mov.w	r2, #640	; 0x280
 801263a:	492e      	ldr	r1, [pc, #184]	; (80126f4 <udp_sendto_if+0xd4>)
 801263c:	482e      	ldr	r0, [pc, #184]	; (80126f8 <udp_sendto_if+0xd8>)
 801263e:	f005 f829 	bl	8017694 <iprintf>
 8012642:	f06f 030f 	mvn.w	r3, #15
 8012646:	e04f      	b.n	80126e8 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8012648:	68bb      	ldr	r3, [r7, #8]
 801264a:	2b00      	cmp	r3, #0
 801264c:	d109      	bne.n	8012662 <udp_sendto_if+0x42>
 801264e:	4b28      	ldr	r3, [pc, #160]	; (80126f0 <udp_sendto_if+0xd0>)
 8012650:	f240 2281 	movw	r2, #641	; 0x281
 8012654:	4929      	ldr	r1, [pc, #164]	; (80126fc <udp_sendto_if+0xdc>)
 8012656:	4828      	ldr	r0, [pc, #160]	; (80126f8 <udp_sendto_if+0xd8>)
 8012658:	f005 f81c 	bl	8017694 <iprintf>
 801265c:	f06f 030f 	mvn.w	r3, #15
 8012660:	e042      	b.n	80126e8 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8012662:	687b      	ldr	r3, [r7, #4]
 8012664:	2b00      	cmp	r3, #0
 8012666:	d109      	bne.n	801267c <udp_sendto_if+0x5c>
 8012668:	4b21      	ldr	r3, [pc, #132]	; (80126f0 <udp_sendto_if+0xd0>)
 801266a:	f240 2282 	movw	r2, #642	; 0x282
 801266e:	4924      	ldr	r1, [pc, #144]	; (8012700 <udp_sendto_if+0xe0>)
 8012670:	4821      	ldr	r0, [pc, #132]	; (80126f8 <udp_sendto_if+0xd8>)
 8012672:	f005 f80f 	bl	8017694 <iprintf>
 8012676:	f06f 030f 	mvn.w	r3, #15
 801267a:	e035      	b.n	80126e8 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 801267c:	6a3b      	ldr	r3, [r7, #32]
 801267e:	2b00      	cmp	r3, #0
 8012680:	d109      	bne.n	8012696 <udp_sendto_if+0x76>
 8012682:	4b1b      	ldr	r3, [pc, #108]	; (80126f0 <udp_sendto_if+0xd0>)
 8012684:	f240 2283 	movw	r2, #643	; 0x283
 8012688:	491e      	ldr	r1, [pc, #120]	; (8012704 <udp_sendto_if+0xe4>)
 801268a:	481b      	ldr	r0, [pc, #108]	; (80126f8 <udp_sendto_if+0xd8>)
 801268c:	f005 f802 	bl	8017694 <iprintf>
 8012690:	f06f 030f 	mvn.w	r3, #15
 8012694:	e028      	b.n	80126e8 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8012696:	68fb      	ldr	r3, [r7, #12]
 8012698:	2b00      	cmp	r3, #0
 801269a:	d009      	beq.n	80126b0 <udp_sendto_if+0x90>
 801269c:	68fb      	ldr	r3, [r7, #12]
 801269e:	681b      	ldr	r3, [r3, #0]
 80126a0:	2b00      	cmp	r3, #0
 80126a2:	d005      	beq.n	80126b0 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 80126a4:	68fb      	ldr	r3, [r7, #12]
 80126a6:	681b      	ldr	r3, [r3, #0]
 80126a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80126ac:	2be0      	cmp	r3, #224	; 0xe0
 80126ae:	d103      	bne.n	80126b8 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 80126b0:	6a3b      	ldr	r3, [r7, #32]
 80126b2:	3304      	adds	r3, #4
 80126b4:	617b      	str	r3, [r7, #20]
 80126b6:	e00b      	b.n	80126d0 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 80126b8:	68fb      	ldr	r3, [r7, #12]
 80126ba:	681a      	ldr	r2, [r3, #0]
 80126bc:	6a3b      	ldr	r3, [r7, #32]
 80126be:	3304      	adds	r3, #4
 80126c0:	681b      	ldr	r3, [r3, #0]
 80126c2:	429a      	cmp	r2, r3
 80126c4:	d002      	beq.n	80126cc <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 80126c6:	f06f 0303 	mvn.w	r3, #3
 80126ca:	e00d      	b.n	80126e8 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 80126cc:	68fb      	ldr	r3, [r7, #12]
 80126ce:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 80126d0:	887a      	ldrh	r2, [r7, #2]
 80126d2:	697b      	ldr	r3, [r7, #20]
 80126d4:	9301      	str	r3, [sp, #4]
 80126d6:	6a3b      	ldr	r3, [r7, #32]
 80126d8:	9300      	str	r3, [sp, #0]
 80126da:	4613      	mov	r3, r2
 80126dc:	687a      	ldr	r2, [r7, #4]
 80126de:	68b9      	ldr	r1, [r7, #8]
 80126e0:	68f8      	ldr	r0, [r7, #12]
 80126e2:	f000 f811 	bl	8012708 <udp_sendto_if_src>
 80126e6:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 80126e8:	4618      	mov	r0, r3
 80126ea:	3718      	adds	r7, #24
 80126ec:	46bd      	mov	sp, r7
 80126ee:	bd80      	pop	{r7, pc}
 80126f0:	0801b088 	.word	0x0801b088
 80126f4:	0801b1fc 	.word	0x0801b1fc
 80126f8:	0801b0dc 	.word	0x0801b0dc
 80126fc:	0801b218 	.word	0x0801b218
 8012700:	0801b234 	.word	0x0801b234
 8012704:	0801b254 	.word	0x0801b254

08012708 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8012708:	b580      	push	{r7, lr}
 801270a:	b08c      	sub	sp, #48	; 0x30
 801270c:	af04      	add	r7, sp, #16
 801270e:	60f8      	str	r0, [r7, #12]
 8012710:	60b9      	str	r1, [r7, #8]
 8012712:	607a      	str	r2, [r7, #4]
 8012714:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 8012716:	68fb      	ldr	r3, [r7, #12]
 8012718:	2b00      	cmp	r3, #0
 801271a:	d109      	bne.n	8012730 <udp_sendto_if_src+0x28>
 801271c:	4b65      	ldr	r3, [pc, #404]	; (80128b4 <udp_sendto_if_src+0x1ac>)
 801271e:	f240 22d1 	movw	r2, #721	; 0x2d1
 8012722:	4965      	ldr	r1, [pc, #404]	; (80128b8 <udp_sendto_if_src+0x1b0>)
 8012724:	4865      	ldr	r0, [pc, #404]	; (80128bc <udp_sendto_if_src+0x1b4>)
 8012726:	f004 ffb5 	bl	8017694 <iprintf>
 801272a:	f06f 030f 	mvn.w	r3, #15
 801272e:	e0bc      	b.n	80128aa <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8012730:	68bb      	ldr	r3, [r7, #8]
 8012732:	2b00      	cmp	r3, #0
 8012734:	d109      	bne.n	801274a <udp_sendto_if_src+0x42>
 8012736:	4b5f      	ldr	r3, [pc, #380]	; (80128b4 <udp_sendto_if_src+0x1ac>)
 8012738:	f240 22d2 	movw	r2, #722	; 0x2d2
 801273c:	4960      	ldr	r1, [pc, #384]	; (80128c0 <udp_sendto_if_src+0x1b8>)
 801273e:	485f      	ldr	r0, [pc, #380]	; (80128bc <udp_sendto_if_src+0x1b4>)
 8012740:	f004 ffa8 	bl	8017694 <iprintf>
 8012744:	f06f 030f 	mvn.w	r3, #15
 8012748:	e0af      	b.n	80128aa <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801274a:	687b      	ldr	r3, [r7, #4]
 801274c:	2b00      	cmp	r3, #0
 801274e:	d109      	bne.n	8012764 <udp_sendto_if_src+0x5c>
 8012750:	4b58      	ldr	r3, [pc, #352]	; (80128b4 <udp_sendto_if_src+0x1ac>)
 8012752:	f240 22d3 	movw	r2, #723	; 0x2d3
 8012756:	495b      	ldr	r1, [pc, #364]	; (80128c4 <udp_sendto_if_src+0x1bc>)
 8012758:	4858      	ldr	r0, [pc, #352]	; (80128bc <udp_sendto_if_src+0x1b4>)
 801275a:	f004 ff9b 	bl	8017694 <iprintf>
 801275e:	f06f 030f 	mvn.w	r3, #15
 8012762:	e0a2      	b.n	80128aa <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8012764:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012766:	2b00      	cmp	r3, #0
 8012768:	d109      	bne.n	801277e <udp_sendto_if_src+0x76>
 801276a:	4b52      	ldr	r3, [pc, #328]	; (80128b4 <udp_sendto_if_src+0x1ac>)
 801276c:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 8012770:	4955      	ldr	r1, [pc, #340]	; (80128c8 <udp_sendto_if_src+0x1c0>)
 8012772:	4852      	ldr	r0, [pc, #328]	; (80128bc <udp_sendto_if_src+0x1b4>)
 8012774:	f004 ff8e 	bl	8017694 <iprintf>
 8012778:	f06f 030f 	mvn.w	r3, #15
 801277c:	e095      	b.n	80128aa <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 801277e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012780:	2b00      	cmp	r3, #0
 8012782:	d109      	bne.n	8012798 <udp_sendto_if_src+0x90>
 8012784:	4b4b      	ldr	r3, [pc, #300]	; (80128b4 <udp_sendto_if_src+0x1ac>)
 8012786:	f240 22d5 	movw	r2, #725	; 0x2d5
 801278a:	4950      	ldr	r1, [pc, #320]	; (80128cc <udp_sendto_if_src+0x1c4>)
 801278c:	484b      	ldr	r0, [pc, #300]	; (80128bc <udp_sendto_if_src+0x1b4>)
 801278e:	f004 ff81 	bl	8017694 <iprintf>
 8012792:	f06f 030f 	mvn.w	r3, #15
 8012796:	e088      	b.n	80128aa <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8012798:	68fb      	ldr	r3, [r7, #12]
 801279a:	8a5b      	ldrh	r3, [r3, #18]
 801279c:	2b00      	cmp	r3, #0
 801279e:	d10f      	bne.n	80127c0 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 80127a0:	68f9      	ldr	r1, [r7, #12]
 80127a2:	68fb      	ldr	r3, [r7, #12]
 80127a4:	8a5b      	ldrh	r3, [r3, #18]
 80127a6:	461a      	mov	r2, r3
 80127a8:	68f8      	ldr	r0, [r7, #12]
 80127aa:	f000 f893 	bl	80128d4 <udp_bind>
 80127ae:	4603      	mov	r3, r0
 80127b0:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 80127b2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80127b6:	2b00      	cmp	r3, #0
 80127b8:	d002      	beq.n	80127c0 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 80127ba:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80127be:	e074      	b.n	80128aa <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 80127c0:	68bb      	ldr	r3, [r7, #8]
 80127c2:	891b      	ldrh	r3, [r3, #8]
 80127c4:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 80127c8:	4293      	cmp	r3, r2
 80127ca:	d902      	bls.n	80127d2 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 80127cc:	f04f 33ff 	mov.w	r3, #4294967295
 80127d0:	e06b      	b.n	80128aa <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 80127d2:	2108      	movs	r1, #8
 80127d4:	68b8      	ldr	r0, [r7, #8]
 80127d6:	f7f9 f821 	bl	800b81c <pbuf_add_header>
 80127da:	4603      	mov	r3, r0
 80127dc:	2b00      	cmp	r3, #0
 80127de:	d015      	beq.n	801280c <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 80127e0:	f44f 7220 	mov.w	r2, #640	; 0x280
 80127e4:	2108      	movs	r1, #8
 80127e6:	2022      	movs	r0, #34	; 0x22
 80127e8:	f7f8 fdca 	bl	800b380 <pbuf_alloc>
 80127ec:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 80127ee:	69fb      	ldr	r3, [r7, #28]
 80127f0:	2b00      	cmp	r3, #0
 80127f2:	d102      	bne.n	80127fa <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 80127f4:	f04f 33ff 	mov.w	r3, #4294967295
 80127f8:	e057      	b.n	80128aa <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 80127fa:	68bb      	ldr	r3, [r7, #8]
 80127fc:	891b      	ldrh	r3, [r3, #8]
 80127fe:	2b00      	cmp	r3, #0
 8012800:	d006      	beq.n	8012810 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 8012802:	68b9      	ldr	r1, [r7, #8]
 8012804:	69f8      	ldr	r0, [r7, #28]
 8012806:	f7f9 f9c3 	bl	800bb90 <pbuf_chain>
 801280a:	e001      	b.n	8012810 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 801280c:	68bb      	ldr	r3, [r7, #8]
 801280e:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8012810:	69fb      	ldr	r3, [r7, #28]
 8012812:	895b      	ldrh	r3, [r3, #10]
 8012814:	2b07      	cmp	r3, #7
 8012816:	d806      	bhi.n	8012826 <udp_sendto_if_src+0x11e>
 8012818:	4b26      	ldr	r3, [pc, #152]	; (80128b4 <udp_sendto_if_src+0x1ac>)
 801281a:	f240 320d 	movw	r2, #781	; 0x30d
 801281e:	492c      	ldr	r1, [pc, #176]	; (80128d0 <udp_sendto_if_src+0x1c8>)
 8012820:	4826      	ldr	r0, [pc, #152]	; (80128bc <udp_sendto_if_src+0x1b4>)
 8012822:	f004 ff37 	bl	8017694 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8012826:	69fb      	ldr	r3, [r7, #28]
 8012828:	685b      	ldr	r3, [r3, #4]
 801282a:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 801282c:	68fb      	ldr	r3, [r7, #12]
 801282e:	8a5b      	ldrh	r3, [r3, #18]
 8012830:	4618      	mov	r0, r3
 8012832:	f7f7 fc8b 	bl	800a14c <lwip_htons>
 8012836:	4603      	mov	r3, r0
 8012838:	461a      	mov	r2, r3
 801283a:	697b      	ldr	r3, [r7, #20]
 801283c:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 801283e:	887b      	ldrh	r3, [r7, #2]
 8012840:	4618      	mov	r0, r3
 8012842:	f7f7 fc83 	bl	800a14c <lwip_htons>
 8012846:	4603      	mov	r3, r0
 8012848:	461a      	mov	r2, r3
 801284a:	697b      	ldr	r3, [r7, #20]
 801284c:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 801284e:	697b      	ldr	r3, [r7, #20]
 8012850:	2200      	movs	r2, #0
 8012852:	719a      	strb	r2, [r3, #6]
 8012854:	2200      	movs	r2, #0
 8012856:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8012858:	69fb      	ldr	r3, [r7, #28]
 801285a:	891b      	ldrh	r3, [r3, #8]
 801285c:	4618      	mov	r0, r3
 801285e:	f7f7 fc75 	bl	800a14c <lwip_htons>
 8012862:	4603      	mov	r3, r0
 8012864:	461a      	mov	r2, r3
 8012866:	697b      	ldr	r3, [r7, #20]
 8012868:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 801286a:	2311      	movs	r3, #17
 801286c:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 801286e:	68fb      	ldr	r3, [r7, #12]
 8012870:	7adb      	ldrb	r3, [r3, #11]
 8012872:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8012874:	68fb      	ldr	r3, [r7, #12]
 8012876:	7a9b      	ldrb	r3, [r3, #10]
 8012878:	7cb9      	ldrb	r1, [r7, #18]
 801287a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801287c:	9202      	str	r2, [sp, #8]
 801287e:	7cfa      	ldrb	r2, [r7, #19]
 8012880:	9201      	str	r2, [sp, #4]
 8012882:	9300      	str	r3, [sp, #0]
 8012884:	460b      	mov	r3, r1
 8012886:	687a      	ldr	r2, [r7, #4]
 8012888:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801288a:	69f8      	ldr	r0, [r7, #28]
 801288c:	f003 fb44 	bl	8015f18 <ip4_output_if_src>
 8012890:	4603      	mov	r3, r0
 8012892:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8012894:	69fa      	ldr	r2, [r7, #28]
 8012896:	68bb      	ldr	r3, [r7, #8]
 8012898:	429a      	cmp	r2, r3
 801289a:	d004      	beq.n	80128a6 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 801289c:	69f8      	ldr	r0, [r7, #28]
 801289e:	f7f9 f853 	bl	800b948 <pbuf_free>
    q = NULL;
 80128a2:	2300      	movs	r3, #0
 80128a4:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 80128a6:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 80128aa:	4618      	mov	r0, r3
 80128ac:	3720      	adds	r7, #32
 80128ae:	46bd      	mov	sp, r7
 80128b0:	bd80      	pop	{r7, pc}
 80128b2:	bf00      	nop
 80128b4:	0801b088 	.word	0x0801b088
 80128b8:	0801b274 	.word	0x0801b274
 80128bc:	0801b0dc 	.word	0x0801b0dc
 80128c0:	0801b294 	.word	0x0801b294
 80128c4:	0801b2b4 	.word	0x0801b2b4
 80128c8:	0801b2d8 	.word	0x0801b2d8
 80128cc:	0801b2fc 	.word	0x0801b2fc
 80128d0:	0801b320 	.word	0x0801b320

080128d4 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80128d4:	b580      	push	{r7, lr}
 80128d6:	b086      	sub	sp, #24
 80128d8:	af00      	add	r7, sp, #0
 80128da:	60f8      	str	r0, [r7, #12]
 80128dc:	60b9      	str	r1, [r7, #8]
 80128de:	4613      	mov	r3, r2
 80128e0:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80128e2:	68bb      	ldr	r3, [r7, #8]
 80128e4:	2b00      	cmp	r3, #0
 80128e6:	d101      	bne.n	80128ec <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 80128e8:	4b39      	ldr	r3, [pc, #228]	; (80129d0 <udp_bind+0xfc>)
 80128ea:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 80128ec:	68fb      	ldr	r3, [r7, #12]
 80128ee:	2b00      	cmp	r3, #0
 80128f0:	d109      	bne.n	8012906 <udp_bind+0x32>
 80128f2:	4b38      	ldr	r3, [pc, #224]	; (80129d4 <udp_bind+0x100>)
 80128f4:	f240 32b7 	movw	r2, #951	; 0x3b7
 80128f8:	4937      	ldr	r1, [pc, #220]	; (80129d8 <udp_bind+0x104>)
 80128fa:	4838      	ldr	r0, [pc, #224]	; (80129dc <udp_bind+0x108>)
 80128fc:	f004 feca 	bl	8017694 <iprintf>
 8012900:	f06f 030f 	mvn.w	r3, #15
 8012904:	e060      	b.n	80129c8 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8012906:	2300      	movs	r3, #0
 8012908:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801290a:	4b35      	ldr	r3, [pc, #212]	; (80129e0 <udp_bind+0x10c>)
 801290c:	681b      	ldr	r3, [r3, #0]
 801290e:	617b      	str	r3, [r7, #20]
 8012910:	e009      	b.n	8012926 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8012912:	68fa      	ldr	r2, [r7, #12]
 8012914:	697b      	ldr	r3, [r7, #20]
 8012916:	429a      	cmp	r2, r3
 8012918:	d102      	bne.n	8012920 <udp_bind+0x4c>
      rebind = 1;
 801291a:	2301      	movs	r3, #1
 801291c:	74fb      	strb	r3, [r7, #19]
      break;
 801291e:	e005      	b.n	801292c <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8012920:	697b      	ldr	r3, [r7, #20]
 8012922:	68db      	ldr	r3, [r3, #12]
 8012924:	617b      	str	r3, [r7, #20]
 8012926:	697b      	ldr	r3, [r7, #20]
 8012928:	2b00      	cmp	r3, #0
 801292a:	d1f2      	bne.n	8012912 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 801292c:	88fb      	ldrh	r3, [r7, #6]
 801292e:	2b00      	cmp	r3, #0
 8012930:	d109      	bne.n	8012946 <udp_bind+0x72>
    port = udp_new_port();
 8012932:	f7ff fcc5 	bl	80122c0 <udp_new_port>
 8012936:	4603      	mov	r3, r0
 8012938:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 801293a:	88fb      	ldrh	r3, [r7, #6]
 801293c:	2b00      	cmp	r3, #0
 801293e:	d12c      	bne.n	801299a <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8012940:	f06f 0307 	mvn.w	r3, #7
 8012944:	e040      	b.n	80129c8 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8012946:	4b26      	ldr	r3, [pc, #152]	; (80129e0 <udp_bind+0x10c>)
 8012948:	681b      	ldr	r3, [r3, #0]
 801294a:	617b      	str	r3, [r7, #20]
 801294c:	e022      	b.n	8012994 <udp_bind+0xc0>
      if (pcb != ipcb) {
 801294e:	68fa      	ldr	r2, [r7, #12]
 8012950:	697b      	ldr	r3, [r7, #20]
 8012952:	429a      	cmp	r2, r3
 8012954:	d01b      	beq.n	801298e <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8012956:	697b      	ldr	r3, [r7, #20]
 8012958:	8a5b      	ldrh	r3, [r3, #18]
 801295a:	88fa      	ldrh	r2, [r7, #6]
 801295c:	429a      	cmp	r2, r3
 801295e:	d116      	bne.n	801298e <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8012960:	697b      	ldr	r3, [r7, #20]
 8012962:	681a      	ldr	r2, [r3, #0]
 8012964:	68bb      	ldr	r3, [r7, #8]
 8012966:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8012968:	429a      	cmp	r2, r3
 801296a:	d00d      	beq.n	8012988 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801296c:	68bb      	ldr	r3, [r7, #8]
 801296e:	2b00      	cmp	r3, #0
 8012970:	d00a      	beq.n	8012988 <udp_bind+0xb4>
 8012972:	68bb      	ldr	r3, [r7, #8]
 8012974:	681b      	ldr	r3, [r3, #0]
 8012976:	2b00      	cmp	r3, #0
 8012978:	d006      	beq.n	8012988 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801297a:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801297c:	2b00      	cmp	r3, #0
 801297e:	d003      	beq.n	8012988 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8012980:	697b      	ldr	r3, [r7, #20]
 8012982:	681b      	ldr	r3, [r3, #0]
 8012984:	2b00      	cmp	r3, #0
 8012986:	d102      	bne.n	801298e <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8012988:	f06f 0307 	mvn.w	r3, #7
 801298c:	e01c      	b.n	80129c8 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801298e:	697b      	ldr	r3, [r7, #20]
 8012990:	68db      	ldr	r3, [r3, #12]
 8012992:	617b      	str	r3, [r7, #20]
 8012994:	697b      	ldr	r3, [r7, #20]
 8012996:	2b00      	cmp	r3, #0
 8012998:	d1d9      	bne.n	801294e <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 801299a:	68bb      	ldr	r3, [r7, #8]
 801299c:	2b00      	cmp	r3, #0
 801299e:	d002      	beq.n	80129a6 <udp_bind+0xd2>
 80129a0:	68bb      	ldr	r3, [r7, #8]
 80129a2:	681b      	ldr	r3, [r3, #0]
 80129a4:	e000      	b.n	80129a8 <udp_bind+0xd4>
 80129a6:	2300      	movs	r3, #0
 80129a8:	68fa      	ldr	r2, [r7, #12]
 80129aa:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 80129ac:	68fb      	ldr	r3, [r7, #12]
 80129ae:	88fa      	ldrh	r2, [r7, #6]
 80129b0:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 80129b2:	7cfb      	ldrb	r3, [r7, #19]
 80129b4:	2b00      	cmp	r3, #0
 80129b6:	d106      	bne.n	80129c6 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 80129b8:	4b09      	ldr	r3, [pc, #36]	; (80129e0 <udp_bind+0x10c>)
 80129ba:	681a      	ldr	r2, [r3, #0]
 80129bc:	68fb      	ldr	r3, [r7, #12]
 80129be:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 80129c0:	4a07      	ldr	r2, [pc, #28]	; (80129e0 <udp_bind+0x10c>)
 80129c2:	68fb      	ldr	r3, [r7, #12]
 80129c4:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 80129c6:	2300      	movs	r3, #0
}
 80129c8:	4618      	mov	r0, r3
 80129ca:	3718      	adds	r7, #24
 80129cc:	46bd      	mov	sp, r7
 80129ce:	bd80      	pop	{r7, pc}
 80129d0:	0801bf98 	.word	0x0801bf98
 80129d4:	0801b088 	.word	0x0801b088
 80129d8:	0801b350 	.word	0x0801b350
 80129dc:	0801b0dc 	.word	0x0801b0dc
 80129e0:	20010994 	.word	0x20010994

080129e4 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80129e4:	b580      	push	{r7, lr}
 80129e6:	b086      	sub	sp, #24
 80129e8:	af00      	add	r7, sp, #0
 80129ea:	60f8      	str	r0, [r7, #12]
 80129ec:	60b9      	str	r1, [r7, #8]
 80129ee:	4613      	mov	r3, r2
 80129f0:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 80129f2:	68fb      	ldr	r3, [r7, #12]
 80129f4:	2b00      	cmp	r3, #0
 80129f6:	d109      	bne.n	8012a0c <udp_connect+0x28>
 80129f8:	4b2c      	ldr	r3, [pc, #176]	; (8012aac <udp_connect+0xc8>)
 80129fa:	f240 4235 	movw	r2, #1077	; 0x435
 80129fe:	492c      	ldr	r1, [pc, #176]	; (8012ab0 <udp_connect+0xcc>)
 8012a00:	482c      	ldr	r0, [pc, #176]	; (8012ab4 <udp_connect+0xd0>)
 8012a02:	f004 fe47 	bl	8017694 <iprintf>
 8012a06:	f06f 030f 	mvn.w	r3, #15
 8012a0a:	e04b      	b.n	8012aa4 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8012a0c:	68bb      	ldr	r3, [r7, #8]
 8012a0e:	2b00      	cmp	r3, #0
 8012a10:	d109      	bne.n	8012a26 <udp_connect+0x42>
 8012a12:	4b26      	ldr	r3, [pc, #152]	; (8012aac <udp_connect+0xc8>)
 8012a14:	f240 4236 	movw	r2, #1078	; 0x436
 8012a18:	4927      	ldr	r1, [pc, #156]	; (8012ab8 <udp_connect+0xd4>)
 8012a1a:	4826      	ldr	r0, [pc, #152]	; (8012ab4 <udp_connect+0xd0>)
 8012a1c:	f004 fe3a 	bl	8017694 <iprintf>
 8012a20:	f06f 030f 	mvn.w	r3, #15
 8012a24:	e03e      	b.n	8012aa4 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 8012a26:	68fb      	ldr	r3, [r7, #12]
 8012a28:	8a5b      	ldrh	r3, [r3, #18]
 8012a2a:	2b00      	cmp	r3, #0
 8012a2c:	d10f      	bne.n	8012a4e <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8012a2e:	68f9      	ldr	r1, [r7, #12]
 8012a30:	68fb      	ldr	r3, [r7, #12]
 8012a32:	8a5b      	ldrh	r3, [r3, #18]
 8012a34:	461a      	mov	r2, r3
 8012a36:	68f8      	ldr	r0, [r7, #12]
 8012a38:	f7ff ff4c 	bl	80128d4 <udp_bind>
 8012a3c:	4603      	mov	r3, r0
 8012a3e:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8012a40:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012a44:	2b00      	cmp	r3, #0
 8012a46:	d002      	beq.n	8012a4e <udp_connect+0x6a>
      return err;
 8012a48:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012a4c:	e02a      	b.n	8012aa4 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 8012a4e:	68bb      	ldr	r3, [r7, #8]
 8012a50:	2b00      	cmp	r3, #0
 8012a52:	d002      	beq.n	8012a5a <udp_connect+0x76>
 8012a54:	68bb      	ldr	r3, [r7, #8]
 8012a56:	681b      	ldr	r3, [r3, #0]
 8012a58:	e000      	b.n	8012a5c <udp_connect+0x78>
 8012a5a:	2300      	movs	r3, #0
 8012a5c:	68fa      	ldr	r2, [r7, #12]
 8012a5e:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 8012a60:	68fb      	ldr	r3, [r7, #12]
 8012a62:	88fa      	ldrh	r2, [r7, #6]
 8012a64:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 8012a66:	68fb      	ldr	r3, [r7, #12]
 8012a68:	7c1b      	ldrb	r3, [r3, #16]
 8012a6a:	f043 0304 	orr.w	r3, r3, #4
 8012a6e:	b2da      	uxtb	r2, r3
 8012a70:	68fb      	ldr	r3, [r7, #12]
 8012a72:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8012a74:	4b11      	ldr	r3, [pc, #68]	; (8012abc <udp_connect+0xd8>)
 8012a76:	681b      	ldr	r3, [r3, #0]
 8012a78:	617b      	str	r3, [r7, #20]
 8012a7a:	e008      	b.n	8012a8e <udp_connect+0xaa>
    if (pcb == ipcb) {
 8012a7c:	68fa      	ldr	r2, [r7, #12]
 8012a7e:	697b      	ldr	r3, [r7, #20]
 8012a80:	429a      	cmp	r2, r3
 8012a82:	d101      	bne.n	8012a88 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 8012a84:	2300      	movs	r3, #0
 8012a86:	e00d      	b.n	8012aa4 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8012a88:	697b      	ldr	r3, [r7, #20]
 8012a8a:	68db      	ldr	r3, [r3, #12]
 8012a8c:	617b      	str	r3, [r7, #20]
 8012a8e:	697b      	ldr	r3, [r7, #20]
 8012a90:	2b00      	cmp	r3, #0
 8012a92:	d1f3      	bne.n	8012a7c <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 8012a94:	4b09      	ldr	r3, [pc, #36]	; (8012abc <udp_connect+0xd8>)
 8012a96:	681a      	ldr	r2, [r3, #0]
 8012a98:	68fb      	ldr	r3, [r7, #12]
 8012a9a:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 8012a9c:	4a07      	ldr	r2, [pc, #28]	; (8012abc <udp_connect+0xd8>)
 8012a9e:	68fb      	ldr	r3, [r7, #12]
 8012aa0:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 8012aa2:	2300      	movs	r3, #0
}
 8012aa4:	4618      	mov	r0, r3
 8012aa6:	3718      	adds	r7, #24
 8012aa8:	46bd      	mov	sp, r7
 8012aaa:	bd80      	pop	{r7, pc}
 8012aac:	0801b088 	.word	0x0801b088
 8012ab0:	0801b368 	.word	0x0801b368
 8012ab4:	0801b0dc 	.word	0x0801b0dc
 8012ab8:	0801b384 	.word	0x0801b384
 8012abc:	20010994 	.word	0x20010994

08012ac0 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8012ac0:	b580      	push	{r7, lr}
 8012ac2:	b084      	sub	sp, #16
 8012ac4:	af00      	add	r7, sp, #0
 8012ac6:	60f8      	str	r0, [r7, #12]
 8012ac8:	60b9      	str	r1, [r7, #8]
 8012aca:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8012acc:	68fb      	ldr	r3, [r7, #12]
 8012ace:	2b00      	cmp	r3, #0
 8012ad0:	d107      	bne.n	8012ae2 <udp_recv+0x22>
 8012ad2:	4b08      	ldr	r3, [pc, #32]	; (8012af4 <udp_recv+0x34>)
 8012ad4:	f240 428a 	movw	r2, #1162	; 0x48a
 8012ad8:	4907      	ldr	r1, [pc, #28]	; (8012af8 <udp_recv+0x38>)
 8012ada:	4808      	ldr	r0, [pc, #32]	; (8012afc <udp_recv+0x3c>)
 8012adc:	f004 fdda 	bl	8017694 <iprintf>
 8012ae0:	e005      	b.n	8012aee <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8012ae2:	68fb      	ldr	r3, [r7, #12]
 8012ae4:	68ba      	ldr	r2, [r7, #8]
 8012ae6:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8012ae8:	68fb      	ldr	r3, [r7, #12]
 8012aea:	687a      	ldr	r2, [r7, #4]
 8012aec:	61da      	str	r2, [r3, #28]
}
 8012aee:	3710      	adds	r7, #16
 8012af0:	46bd      	mov	sp, r7
 8012af2:	bd80      	pop	{r7, pc}
 8012af4:	0801b088 	.word	0x0801b088
 8012af8:	0801b3bc 	.word	0x0801b3bc
 8012afc:	0801b0dc 	.word	0x0801b0dc

08012b00 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8012b00:	b580      	push	{r7, lr}
 8012b02:	b084      	sub	sp, #16
 8012b04:	af00      	add	r7, sp, #0
 8012b06:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8012b08:	687b      	ldr	r3, [r7, #4]
 8012b0a:	2b00      	cmp	r3, #0
 8012b0c:	d107      	bne.n	8012b1e <udp_remove+0x1e>
 8012b0e:	4b19      	ldr	r3, [pc, #100]	; (8012b74 <udp_remove+0x74>)
 8012b10:	f240 42a1 	movw	r2, #1185	; 0x4a1
 8012b14:	4918      	ldr	r1, [pc, #96]	; (8012b78 <udp_remove+0x78>)
 8012b16:	4819      	ldr	r0, [pc, #100]	; (8012b7c <udp_remove+0x7c>)
 8012b18:	f004 fdbc 	bl	8017694 <iprintf>
 8012b1c:	e026      	b.n	8012b6c <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8012b1e:	4b18      	ldr	r3, [pc, #96]	; (8012b80 <udp_remove+0x80>)
 8012b20:	681b      	ldr	r3, [r3, #0]
 8012b22:	687a      	ldr	r2, [r7, #4]
 8012b24:	429a      	cmp	r2, r3
 8012b26:	d105      	bne.n	8012b34 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8012b28:	4b15      	ldr	r3, [pc, #84]	; (8012b80 <udp_remove+0x80>)
 8012b2a:	681b      	ldr	r3, [r3, #0]
 8012b2c:	68db      	ldr	r3, [r3, #12]
 8012b2e:	4a14      	ldr	r2, [pc, #80]	; (8012b80 <udp_remove+0x80>)
 8012b30:	6013      	str	r3, [r2, #0]
 8012b32:	e017      	b.n	8012b64 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8012b34:	4b12      	ldr	r3, [pc, #72]	; (8012b80 <udp_remove+0x80>)
 8012b36:	681b      	ldr	r3, [r3, #0]
 8012b38:	60fb      	str	r3, [r7, #12]
 8012b3a:	e010      	b.n	8012b5e <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8012b3c:	68fb      	ldr	r3, [r7, #12]
 8012b3e:	68db      	ldr	r3, [r3, #12]
 8012b40:	2b00      	cmp	r3, #0
 8012b42:	d009      	beq.n	8012b58 <udp_remove+0x58>
 8012b44:	68fb      	ldr	r3, [r7, #12]
 8012b46:	68db      	ldr	r3, [r3, #12]
 8012b48:	687a      	ldr	r2, [r7, #4]
 8012b4a:	429a      	cmp	r2, r3
 8012b4c:	d104      	bne.n	8012b58 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 8012b4e:	687b      	ldr	r3, [r7, #4]
 8012b50:	68da      	ldr	r2, [r3, #12]
 8012b52:	68fb      	ldr	r3, [r7, #12]
 8012b54:	60da      	str	r2, [r3, #12]
        break;
 8012b56:	e005      	b.n	8012b64 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8012b58:	68fb      	ldr	r3, [r7, #12]
 8012b5a:	68db      	ldr	r3, [r3, #12]
 8012b5c:	60fb      	str	r3, [r7, #12]
 8012b5e:	68fb      	ldr	r3, [r7, #12]
 8012b60:	2b00      	cmp	r3, #0
 8012b62:	d1eb      	bne.n	8012b3c <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8012b64:	6879      	ldr	r1, [r7, #4]
 8012b66:	2000      	movs	r0, #0
 8012b68:	f7f8 f83e 	bl	800abe8 <memp_free>
}
 8012b6c:	3710      	adds	r7, #16
 8012b6e:	46bd      	mov	sp, r7
 8012b70:	bd80      	pop	{r7, pc}
 8012b72:	bf00      	nop
 8012b74:	0801b088 	.word	0x0801b088
 8012b78:	0801b3d4 	.word	0x0801b3d4
 8012b7c:	0801b0dc 	.word	0x0801b0dc
 8012b80:	20010994 	.word	0x20010994

08012b84 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8012b84:	b580      	push	{r7, lr}
 8012b86:	b082      	sub	sp, #8
 8012b88:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8012b8a:	2000      	movs	r0, #0
 8012b8c:	f7f7 ffb6 	bl	800aafc <memp_malloc>
 8012b90:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8012b92:	687b      	ldr	r3, [r7, #4]
 8012b94:	2b00      	cmp	r3, #0
 8012b96:	d007      	beq.n	8012ba8 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8012b98:	2220      	movs	r2, #32
 8012b9a:	2100      	movs	r1, #0
 8012b9c:	6878      	ldr	r0, [r7, #4]
 8012b9e:	f004 fcdc 	bl	801755a <memset>
    pcb->ttl = UDP_TTL;
 8012ba2:	687b      	ldr	r3, [r7, #4]
 8012ba4:	22ff      	movs	r2, #255	; 0xff
 8012ba6:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8012ba8:	687b      	ldr	r3, [r7, #4]
}
 8012baa:	4618      	mov	r0, r3
 8012bac:	3708      	adds	r7, #8
 8012bae:	46bd      	mov	sp, r7
 8012bb0:	bd80      	pop	{r7, pc}

08012bb2 <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 8012bb2:	b580      	push	{r7, lr}
 8012bb4:	b084      	sub	sp, #16
 8012bb6:	af00      	add	r7, sp, #0
 8012bb8:	4603      	mov	r3, r0
 8012bba:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 8012bbc:	f7ff ffe2 	bl	8012b84 <udp_new>
 8012bc0:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8012bc2:	68fb      	ldr	r3, [r7, #12]
}
 8012bc4:	4618      	mov	r0, r3
 8012bc6:	3710      	adds	r7, #16
 8012bc8:	46bd      	mov	sp, r7
 8012bca:	bd80      	pop	{r7, pc}

08012bcc <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8012bcc:	b480      	push	{r7}
 8012bce:	b085      	sub	sp, #20
 8012bd0:	af00      	add	r7, sp, #0
 8012bd2:	6078      	str	r0, [r7, #4]
 8012bd4:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8012bd6:	687b      	ldr	r3, [r7, #4]
 8012bd8:	2b00      	cmp	r3, #0
 8012bda:	d01e      	beq.n	8012c1a <udp_netif_ip_addr_changed+0x4e>
 8012bdc:	687b      	ldr	r3, [r7, #4]
 8012bde:	681b      	ldr	r3, [r3, #0]
 8012be0:	2b00      	cmp	r3, #0
 8012be2:	d01a      	beq.n	8012c1a <udp_netif_ip_addr_changed+0x4e>
 8012be4:	683b      	ldr	r3, [r7, #0]
 8012be6:	2b00      	cmp	r3, #0
 8012be8:	d017      	beq.n	8012c1a <udp_netif_ip_addr_changed+0x4e>
 8012bea:	683b      	ldr	r3, [r7, #0]
 8012bec:	681b      	ldr	r3, [r3, #0]
 8012bee:	2b00      	cmp	r3, #0
 8012bf0:	d013      	beq.n	8012c1a <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8012bf2:	4b0d      	ldr	r3, [pc, #52]	; (8012c28 <udp_netif_ip_addr_changed+0x5c>)
 8012bf4:	681b      	ldr	r3, [r3, #0]
 8012bf6:	60fb      	str	r3, [r7, #12]
 8012bf8:	e00c      	b.n	8012c14 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8012bfa:	68fb      	ldr	r3, [r7, #12]
 8012bfc:	681a      	ldr	r2, [r3, #0]
 8012bfe:	687b      	ldr	r3, [r7, #4]
 8012c00:	681b      	ldr	r3, [r3, #0]
 8012c02:	429a      	cmp	r2, r3
 8012c04:	d103      	bne.n	8012c0e <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8012c06:	683b      	ldr	r3, [r7, #0]
 8012c08:	681a      	ldr	r2, [r3, #0]
 8012c0a:	68fb      	ldr	r3, [r7, #12]
 8012c0c:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8012c0e:	68fb      	ldr	r3, [r7, #12]
 8012c10:	68db      	ldr	r3, [r3, #12]
 8012c12:	60fb      	str	r3, [r7, #12]
 8012c14:	68fb      	ldr	r3, [r7, #12]
 8012c16:	2b00      	cmp	r3, #0
 8012c18:	d1ef      	bne.n	8012bfa <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8012c1a:	bf00      	nop
 8012c1c:	3714      	adds	r7, #20
 8012c1e:	46bd      	mov	sp, r7
 8012c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c24:	4770      	bx	lr
 8012c26:	bf00      	nop
 8012c28:	20010994 	.word	0x20010994

08012c2c <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 8012c2c:	b580      	push	{r7, lr}
 8012c2e:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 8012c30:	4b20      	ldr	r3, [pc, #128]	; (8012cb4 <dhcp_inc_pcb_refcount+0x88>)
 8012c32:	781b      	ldrb	r3, [r3, #0]
 8012c34:	2b00      	cmp	r3, #0
 8012c36:	d133      	bne.n	8012ca0 <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 8012c38:	4b1f      	ldr	r3, [pc, #124]	; (8012cb8 <dhcp_inc_pcb_refcount+0x8c>)
 8012c3a:	681b      	ldr	r3, [r3, #0]
 8012c3c:	2b00      	cmp	r3, #0
 8012c3e:	d005      	beq.n	8012c4c <dhcp_inc_pcb_refcount+0x20>
 8012c40:	4b1e      	ldr	r3, [pc, #120]	; (8012cbc <dhcp_inc_pcb_refcount+0x90>)
 8012c42:	22e5      	movs	r2, #229	; 0xe5
 8012c44:	491e      	ldr	r1, [pc, #120]	; (8012cc0 <dhcp_inc_pcb_refcount+0x94>)
 8012c46:	481f      	ldr	r0, [pc, #124]	; (8012cc4 <dhcp_inc_pcb_refcount+0x98>)
 8012c48:	f004 fd24 	bl	8017694 <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 8012c4c:	f7ff ff9a 	bl	8012b84 <udp_new>
 8012c50:	4603      	mov	r3, r0
 8012c52:	4a19      	ldr	r2, [pc, #100]	; (8012cb8 <dhcp_inc_pcb_refcount+0x8c>)
 8012c54:	6013      	str	r3, [r2, #0]

    if (dhcp_pcb == NULL) {
 8012c56:	4b18      	ldr	r3, [pc, #96]	; (8012cb8 <dhcp_inc_pcb_refcount+0x8c>)
 8012c58:	681b      	ldr	r3, [r3, #0]
 8012c5a:	2b00      	cmp	r3, #0
 8012c5c:	d102      	bne.n	8012c64 <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 8012c5e:	f04f 33ff 	mov.w	r3, #4294967295
 8012c62:	e024      	b.n	8012cae <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 8012c64:	4b14      	ldr	r3, [pc, #80]	; (8012cb8 <dhcp_inc_pcb_refcount+0x8c>)
 8012c66:	681b      	ldr	r3, [r3, #0]
 8012c68:	7a5a      	ldrb	r2, [r3, #9]
 8012c6a:	4b13      	ldr	r3, [pc, #76]	; (8012cb8 <dhcp_inc_pcb_refcount+0x8c>)
 8012c6c:	681b      	ldr	r3, [r3, #0]
 8012c6e:	f042 0220 	orr.w	r2, r2, #32
 8012c72:	b2d2      	uxtb	r2, r2
 8012c74:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 8012c76:	4b10      	ldr	r3, [pc, #64]	; (8012cb8 <dhcp_inc_pcb_refcount+0x8c>)
 8012c78:	681b      	ldr	r3, [r3, #0]
 8012c7a:	2244      	movs	r2, #68	; 0x44
 8012c7c:	4912      	ldr	r1, [pc, #72]	; (8012cc8 <dhcp_inc_pcb_refcount+0x9c>)
 8012c7e:	4618      	mov	r0, r3
 8012c80:	f7ff fe28 	bl	80128d4 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 8012c84:	4b0c      	ldr	r3, [pc, #48]	; (8012cb8 <dhcp_inc_pcb_refcount+0x8c>)
 8012c86:	681b      	ldr	r3, [r3, #0]
 8012c88:	2243      	movs	r2, #67	; 0x43
 8012c8a:	490f      	ldr	r1, [pc, #60]	; (8012cc8 <dhcp_inc_pcb_refcount+0x9c>)
 8012c8c:	4618      	mov	r0, r3
 8012c8e:	f7ff fea9 	bl	80129e4 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 8012c92:	4b09      	ldr	r3, [pc, #36]	; (8012cb8 <dhcp_inc_pcb_refcount+0x8c>)
 8012c94:	681b      	ldr	r3, [r3, #0]
 8012c96:	2200      	movs	r2, #0
 8012c98:	490c      	ldr	r1, [pc, #48]	; (8012ccc <dhcp_inc_pcb_refcount+0xa0>)
 8012c9a:	4618      	mov	r0, r3
 8012c9c:	f7ff ff10 	bl	8012ac0 <udp_recv>
  }

  dhcp_pcb_refcount++;
 8012ca0:	4b04      	ldr	r3, [pc, #16]	; (8012cb4 <dhcp_inc_pcb_refcount+0x88>)
 8012ca2:	781b      	ldrb	r3, [r3, #0]
 8012ca4:	3301      	adds	r3, #1
 8012ca6:	b2da      	uxtb	r2, r3
 8012ca8:	4b02      	ldr	r3, [pc, #8]	; (8012cb4 <dhcp_inc_pcb_refcount+0x88>)
 8012caa:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 8012cac:	2300      	movs	r3, #0
}
 8012cae:	4618      	mov	r0, r3
 8012cb0:	bd80      	pop	{r7, pc}
 8012cb2:	bf00      	nop
 8012cb4:	200109c4 	.word	0x200109c4
 8012cb8:	200109c0 	.word	0x200109c0
 8012cbc:	0801b3ec 	.word	0x0801b3ec
 8012cc0:	0801b424 	.word	0x0801b424
 8012cc4:	0801b44c 	.word	0x0801b44c
 8012cc8:	0801bf98 	.word	0x0801bf98
 8012ccc:	08014561 	.word	0x08014561

08012cd0 <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 8012cd0:	b580      	push	{r7, lr}
 8012cd2:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 8012cd4:	4b0e      	ldr	r3, [pc, #56]	; (8012d10 <dhcp_dec_pcb_refcount+0x40>)
 8012cd6:	781b      	ldrb	r3, [r3, #0]
 8012cd8:	2b00      	cmp	r3, #0
 8012cda:	d105      	bne.n	8012ce8 <dhcp_dec_pcb_refcount+0x18>
 8012cdc:	4b0d      	ldr	r3, [pc, #52]	; (8012d14 <dhcp_dec_pcb_refcount+0x44>)
 8012cde:	22ff      	movs	r2, #255	; 0xff
 8012ce0:	490d      	ldr	r1, [pc, #52]	; (8012d18 <dhcp_dec_pcb_refcount+0x48>)
 8012ce2:	480e      	ldr	r0, [pc, #56]	; (8012d1c <dhcp_dec_pcb_refcount+0x4c>)
 8012ce4:	f004 fcd6 	bl	8017694 <iprintf>
  dhcp_pcb_refcount--;
 8012ce8:	4b09      	ldr	r3, [pc, #36]	; (8012d10 <dhcp_dec_pcb_refcount+0x40>)
 8012cea:	781b      	ldrb	r3, [r3, #0]
 8012cec:	3b01      	subs	r3, #1
 8012cee:	b2da      	uxtb	r2, r3
 8012cf0:	4b07      	ldr	r3, [pc, #28]	; (8012d10 <dhcp_dec_pcb_refcount+0x40>)
 8012cf2:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 8012cf4:	4b06      	ldr	r3, [pc, #24]	; (8012d10 <dhcp_dec_pcb_refcount+0x40>)
 8012cf6:	781b      	ldrb	r3, [r3, #0]
 8012cf8:	2b00      	cmp	r3, #0
 8012cfa:	d107      	bne.n	8012d0c <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 8012cfc:	4b08      	ldr	r3, [pc, #32]	; (8012d20 <dhcp_dec_pcb_refcount+0x50>)
 8012cfe:	681b      	ldr	r3, [r3, #0]
 8012d00:	4618      	mov	r0, r3
 8012d02:	f7ff fefd 	bl	8012b00 <udp_remove>
    dhcp_pcb = NULL;
 8012d06:	4b06      	ldr	r3, [pc, #24]	; (8012d20 <dhcp_dec_pcb_refcount+0x50>)
 8012d08:	2200      	movs	r2, #0
 8012d0a:	601a      	str	r2, [r3, #0]
  }
}
 8012d0c:	bf00      	nop
 8012d0e:	bd80      	pop	{r7, pc}
 8012d10:	200109c4 	.word	0x200109c4
 8012d14:	0801b3ec 	.word	0x0801b3ec
 8012d18:	0801b474 	.word	0x0801b474
 8012d1c:	0801b44c 	.word	0x0801b44c
 8012d20:	200109c0 	.word	0x200109c0

08012d24 <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 8012d24:	b580      	push	{r7, lr}
 8012d26:	b084      	sub	sp, #16
 8012d28:	af00      	add	r7, sp, #0
 8012d2a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8012d2c:	687b      	ldr	r3, [r7, #4]
 8012d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012d30:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8012d32:	210c      	movs	r1, #12
 8012d34:	68f8      	ldr	r0, [r7, #12]
 8012d36:	f001 f855 	bl	8013de4 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8012d3a:	4b06      	ldr	r3, [pc, #24]	; (8012d54 <dhcp_handle_nak+0x30>)
 8012d3c:	4a05      	ldr	r2, [pc, #20]	; (8012d54 <dhcp_handle_nak+0x30>)
 8012d3e:	4905      	ldr	r1, [pc, #20]	; (8012d54 <dhcp_handle_nak+0x30>)
 8012d40:	6878      	ldr	r0, [r7, #4]
 8012d42:	f7f8 f8f3 	bl	800af2c <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 8012d46:	6878      	ldr	r0, [r7, #4]
 8012d48:	f000 fc48 	bl	80135dc <dhcp_discover>
}
 8012d4c:	bf00      	nop
 8012d4e:	3710      	adds	r7, #16
 8012d50:	46bd      	mov	sp, r7
 8012d52:	bd80      	pop	{r7, pc}
 8012d54:	0801bf98 	.word	0x0801bf98

08012d58 <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 8012d58:	b580      	push	{r7, lr}
 8012d5a:	b084      	sub	sp, #16
 8012d5c:	af00      	add	r7, sp, #0
 8012d5e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8012d60:	687b      	ldr	r3, [r7, #4]
 8012d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012d64:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 8012d66:	2108      	movs	r1, #8
 8012d68:	68f8      	ldr	r0, [r7, #12]
 8012d6a:	f001 f83b 	bl	8013de4 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 8012d6e:	68fb      	ldr	r3, [r7, #12]
 8012d70:	331c      	adds	r3, #28
 8012d72:	2200      	movs	r2, #0
 8012d74:	4619      	mov	r1, r3
 8012d76:	6878      	ldr	r0, [r7, #4]
 8012d78:	f002 fb3c 	bl	80153f4 <etharp_query>
 8012d7c:	4603      	mov	r3, r0
 8012d7e:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 8012d80:	68fb      	ldr	r3, [r7, #12]
 8012d82:	799b      	ldrb	r3, [r3, #6]
 8012d84:	2bff      	cmp	r3, #255	; 0xff
 8012d86:	d005      	beq.n	8012d94 <dhcp_check+0x3c>
    dhcp->tries++;
 8012d88:	68fb      	ldr	r3, [r7, #12]
 8012d8a:	799b      	ldrb	r3, [r3, #6]
 8012d8c:	3301      	adds	r3, #1
 8012d8e:	b2da      	uxtb	r2, r3
 8012d90:	68fb      	ldr	r3, [r7, #12]
 8012d92:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 8012d94:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8012d98:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8012d9a:	893b      	ldrh	r3, [r7, #8]
 8012d9c:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8012da0:	4a06      	ldr	r2, [pc, #24]	; (8012dbc <dhcp_check+0x64>)
 8012da2:	fb82 1203 	smull	r1, r2, r2, r3
 8012da6:	1152      	asrs	r2, r2, #5
 8012da8:	17db      	asrs	r3, r3, #31
 8012daa:	1ad3      	subs	r3, r2, r3
 8012dac:	b29a      	uxth	r2, r3
 8012dae:	68fb      	ldr	r3, [r7, #12]
 8012db0:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 8012db2:	bf00      	nop
 8012db4:	3710      	adds	r7, #16
 8012db6:	46bd      	mov	sp, r7
 8012db8:	bd80      	pop	{r7, pc}
 8012dba:	bf00      	nop
 8012dbc:	10624dd3 	.word	0x10624dd3

08012dc0 <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 8012dc0:	b580      	push	{r7, lr}
 8012dc2:	b084      	sub	sp, #16
 8012dc4:	af00      	add	r7, sp, #0
 8012dc6:	6078      	str	r0, [r7, #4]
 8012dc8:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8012dca:	687b      	ldr	r3, [r7, #4]
 8012dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012dce:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 8012dd0:	4b0c      	ldr	r3, [pc, #48]	; (8012e04 <dhcp_handle_offer+0x44>)
 8012dd2:	789b      	ldrb	r3, [r3, #2]
 8012dd4:	2b00      	cmp	r3, #0
 8012dd6:	d011      	beq.n	8012dfc <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 8012dd8:	68fb      	ldr	r3, [r7, #12]
 8012dda:	2200      	movs	r2, #0
 8012ddc:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 8012dde:	4b0a      	ldr	r3, [pc, #40]	; (8012e08 <dhcp_handle_offer+0x48>)
 8012de0:	689b      	ldr	r3, [r3, #8]
 8012de2:	4618      	mov	r0, r3
 8012de4:	f7f7 f9c7 	bl	800a176 <lwip_htonl>
 8012de8:	4602      	mov	r2, r0
 8012dea:	68fb      	ldr	r3, [r7, #12]
 8012dec:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8012dee:	683b      	ldr	r3, [r7, #0]
 8012df0:	691a      	ldr	r2, [r3, #16]
 8012df2:	68fb      	ldr	r3, [r7, #12]
 8012df4:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 8012df6:	6878      	ldr	r0, [r7, #4]
 8012df8:	f000 f808 	bl	8012e0c <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 8012dfc:	bf00      	nop
 8012dfe:	3710      	adds	r7, #16
 8012e00:	46bd      	mov	sp, r7
 8012e02:	bd80      	pop	{r7, pc}
 8012e04:	200109b8 	.word	0x200109b8
 8012e08:	20010998 	.word	0x20010998

08012e0c <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 8012e0c:	b5b0      	push	{r4, r5, r7, lr}
 8012e0e:	b08a      	sub	sp, #40	; 0x28
 8012e10:	af02      	add	r7, sp, #8
 8012e12:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 8012e14:	687b      	ldr	r3, [r7, #4]
 8012e16:	2b00      	cmp	r3, #0
 8012e18:	d109      	bne.n	8012e2e <dhcp_select+0x22>
 8012e1a:	4b71      	ldr	r3, [pc, #452]	; (8012fe0 <dhcp_select+0x1d4>)
 8012e1c:	f240 1277 	movw	r2, #375	; 0x177
 8012e20:	4970      	ldr	r1, [pc, #448]	; (8012fe4 <dhcp_select+0x1d8>)
 8012e22:	4871      	ldr	r0, [pc, #452]	; (8012fe8 <dhcp_select+0x1dc>)
 8012e24:	f004 fc36 	bl	8017694 <iprintf>
 8012e28:	f06f 030f 	mvn.w	r3, #15
 8012e2c:	e0d3      	b.n	8012fd6 <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 8012e2e:	687b      	ldr	r3, [r7, #4]
 8012e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012e32:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 8012e34:	69bb      	ldr	r3, [r7, #24]
 8012e36:	2b00      	cmp	r3, #0
 8012e38:	d109      	bne.n	8012e4e <dhcp_select+0x42>
 8012e3a:	4b69      	ldr	r3, [pc, #420]	; (8012fe0 <dhcp_select+0x1d4>)
 8012e3c:	f240 1279 	movw	r2, #377	; 0x179
 8012e40:	496a      	ldr	r1, [pc, #424]	; (8012fec <dhcp_select+0x1e0>)
 8012e42:	4869      	ldr	r0, [pc, #420]	; (8012fe8 <dhcp_select+0x1dc>)
 8012e44:	f004 fc26 	bl	8017694 <iprintf>
 8012e48:	f06f 0305 	mvn.w	r3, #5
 8012e4c:	e0c3      	b.n	8012fd6 <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 8012e4e:	2101      	movs	r1, #1
 8012e50:	69b8      	ldr	r0, [r7, #24]
 8012e52:	f000 ffc7 	bl	8013de4 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8012e56:	f107 030c 	add.w	r3, r7, #12
 8012e5a:	2203      	movs	r2, #3
 8012e5c:	69b9      	ldr	r1, [r7, #24]
 8012e5e:	6878      	ldr	r0, [r7, #4]
 8012e60:	f001 fc4c 	bl	80146fc <dhcp_create_msg>
 8012e64:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8012e66:	697b      	ldr	r3, [r7, #20]
 8012e68:	2b00      	cmp	r3, #0
 8012e6a:	f000 8085 	beq.w	8012f78 <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8012e6e:	697b      	ldr	r3, [r7, #20]
 8012e70:	685b      	ldr	r3, [r3, #4]
 8012e72:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8012e74:	89b8      	ldrh	r0, [r7, #12]
 8012e76:	693b      	ldr	r3, [r7, #16]
 8012e78:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012e7c:	2302      	movs	r3, #2
 8012e7e:	2239      	movs	r2, #57	; 0x39
 8012e80:	f000 ffca 	bl	8013e18 <dhcp_option>
 8012e84:	4603      	mov	r3, r0
 8012e86:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8012e88:	89b8      	ldrh	r0, [r7, #12]
 8012e8a:	693b      	ldr	r3, [r7, #16]
 8012e8c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012e90:	687b      	ldr	r3, [r7, #4]
 8012e92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012e94:	461a      	mov	r2, r3
 8012e96:	f001 f819 	bl	8013ecc <dhcp_option_short>
 8012e9a:	4603      	mov	r3, r0
 8012e9c:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8012e9e:	89b8      	ldrh	r0, [r7, #12]
 8012ea0:	693b      	ldr	r3, [r7, #16]
 8012ea2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012ea6:	2304      	movs	r3, #4
 8012ea8:	2232      	movs	r2, #50	; 0x32
 8012eaa:	f000 ffb5 	bl	8013e18 <dhcp_option>
 8012eae:	4603      	mov	r3, r0
 8012eb0:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8012eb2:	89bc      	ldrh	r4, [r7, #12]
 8012eb4:	693b      	ldr	r3, [r7, #16]
 8012eb6:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8012eba:	69bb      	ldr	r3, [r7, #24]
 8012ebc:	69db      	ldr	r3, [r3, #28]
 8012ebe:	4618      	mov	r0, r3
 8012ec0:	f7f7 f959 	bl	800a176 <lwip_htonl>
 8012ec4:	4603      	mov	r3, r0
 8012ec6:	461a      	mov	r2, r3
 8012ec8:	4629      	mov	r1, r5
 8012eca:	4620      	mov	r0, r4
 8012ecc:	f001 f830 	bl	8013f30 <dhcp_option_long>
 8012ed0:	4603      	mov	r3, r0
 8012ed2:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8012ed4:	89b8      	ldrh	r0, [r7, #12]
 8012ed6:	693b      	ldr	r3, [r7, #16]
 8012ed8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012edc:	2304      	movs	r3, #4
 8012ede:	2236      	movs	r2, #54	; 0x36
 8012ee0:	f000 ff9a 	bl	8013e18 <dhcp_option>
 8012ee4:	4603      	mov	r3, r0
 8012ee6:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 8012ee8:	89bc      	ldrh	r4, [r7, #12]
 8012eea:	693b      	ldr	r3, [r7, #16]
 8012eec:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8012ef0:	69bb      	ldr	r3, [r7, #24]
 8012ef2:	699b      	ldr	r3, [r3, #24]
 8012ef4:	4618      	mov	r0, r3
 8012ef6:	f7f7 f93e 	bl	800a176 <lwip_htonl>
 8012efa:	4603      	mov	r3, r0
 8012efc:	461a      	mov	r2, r3
 8012efe:	4629      	mov	r1, r5
 8012f00:	4620      	mov	r0, r4
 8012f02:	f001 f815 	bl	8013f30 <dhcp_option_long>
 8012f06:	4603      	mov	r3, r0
 8012f08:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8012f0a:	89b8      	ldrh	r0, [r7, #12]
 8012f0c:	693b      	ldr	r3, [r7, #16]
 8012f0e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012f12:	2303      	movs	r3, #3
 8012f14:	2237      	movs	r2, #55	; 0x37
 8012f16:	f000 ff7f 	bl	8013e18 <dhcp_option>
 8012f1a:	4603      	mov	r3, r0
 8012f1c:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8012f1e:	2300      	movs	r3, #0
 8012f20:	77bb      	strb	r3, [r7, #30]
 8012f22:	e00e      	b.n	8012f42 <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8012f24:	89b8      	ldrh	r0, [r7, #12]
 8012f26:	693b      	ldr	r3, [r7, #16]
 8012f28:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012f2c:	7fbb      	ldrb	r3, [r7, #30]
 8012f2e:	4a30      	ldr	r2, [pc, #192]	; (8012ff0 <dhcp_select+0x1e4>)
 8012f30:	5cd3      	ldrb	r3, [r2, r3]
 8012f32:	461a      	mov	r2, r3
 8012f34:	f000 ffa4 	bl	8013e80 <dhcp_option_byte>
 8012f38:	4603      	mov	r3, r0
 8012f3a:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8012f3c:	7fbb      	ldrb	r3, [r7, #30]
 8012f3e:	3301      	adds	r3, #1
 8012f40:	77bb      	strb	r3, [r7, #30]
 8012f42:	7fbb      	ldrb	r3, [r7, #30]
 8012f44:	2b02      	cmp	r3, #2
 8012f46:	d9ed      	bls.n	8012f24 <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8012f48:	89b8      	ldrh	r0, [r7, #12]
 8012f4a:	693b      	ldr	r3, [r7, #16]
 8012f4c:	33f0      	adds	r3, #240	; 0xf0
 8012f4e:	697a      	ldr	r2, [r7, #20]
 8012f50:	4619      	mov	r1, r3
 8012f52:	f001 fca9 	bl	80148a8 <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8012f56:	4b27      	ldr	r3, [pc, #156]	; (8012ff4 <dhcp_select+0x1e8>)
 8012f58:	6818      	ldr	r0, [r3, #0]
 8012f5a:	4b27      	ldr	r3, [pc, #156]	; (8012ff8 <dhcp_select+0x1ec>)
 8012f5c:	9301      	str	r3, [sp, #4]
 8012f5e:	687b      	ldr	r3, [r7, #4]
 8012f60:	9300      	str	r3, [sp, #0]
 8012f62:	2343      	movs	r3, #67	; 0x43
 8012f64:	4a25      	ldr	r2, [pc, #148]	; (8012ffc <dhcp_select+0x1f0>)
 8012f66:	6979      	ldr	r1, [r7, #20]
 8012f68:	f7ff fbce 	bl	8012708 <udp_sendto_if_src>
 8012f6c:	4603      	mov	r3, r0
 8012f6e:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8012f70:	6978      	ldr	r0, [r7, #20]
 8012f72:	f7f8 fce9 	bl	800b948 <pbuf_free>
 8012f76:	e001      	b.n	8012f7c <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8012f78:	23ff      	movs	r3, #255	; 0xff
 8012f7a:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8012f7c:	69bb      	ldr	r3, [r7, #24]
 8012f7e:	799b      	ldrb	r3, [r3, #6]
 8012f80:	2bff      	cmp	r3, #255	; 0xff
 8012f82:	d005      	beq.n	8012f90 <dhcp_select+0x184>
    dhcp->tries++;
 8012f84:	69bb      	ldr	r3, [r7, #24]
 8012f86:	799b      	ldrb	r3, [r3, #6]
 8012f88:	3301      	adds	r3, #1
 8012f8a:	b2da      	uxtb	r2, r3
 8012f8c:	69bb      	ldr	r3, [r7, #24]
 8012f8e:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8012f90:	69bb      	ldr	r3, [r7, #24]
 8012f92:	799b      	ldrb	r3, [r3, #6]
 8012f94:	2b05      	cmp	r3, #5
 8012f96:	d80d      	bhi.n	8012fb4 <dhcp_select+0x1a8>
 8012f98:	69bb      	ldr	r3, [r7, #24]
 8012f9a:	799b      	ldrb	r3, [r3, #6]
 8012f9c:	461a      	mov	r2, r3
 8012f9e:	2301      	movs	r3, #1
 8012fa0:	4093      	lsls	r3, r2
 8012fa2:	b29b      	uxth	r3, r3
 8012fa4:	461a      	mov	r2, r3
 8012fa6:	0152      	lsls	r2, r2, #5
 8012fa8:	1ad2      	subs	r2, r2, r3
 8012faa:	0092      	lsls	r2, r2, #2
 8012fac:	4413      	add	r3, r2
 8012fae:	00db      	lsls	r3, r3, #3
 8012fb0:	b29b      	uxth	r3, r3
 8012fb2:	e001      	b.n	8012fb8 <dhcp_select+0x1ac>
 8012fb4:	f64e 2360 	movw	r3, #60000	; 0xea60
 8012fb8:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8012fba:	89fb      	ldrh	r3, [r7, #14]
 8012fbc:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8012fc0:	4a0f      	ldr	r2, [pc, #60]	; (8013000 <dhcp_select+0x1f4>)
 8012fc2:	fb82 1203 	smull	r1, r2, r2, r3
 8012fc6:	1152      	asrs	r2, r2, #5
 8012fc8:	17db      	asrs	r3, r3, #31
 8012fca:	1ad3      	subs	r3, r2, r3
 8012fcc:	b29a      	uxth	r2, r3
 8012fce:	69bb      	ldr	r3, [r7, #24]
 8012fd0:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8012fd2:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8012fd6:	4618      	mov	r0, r3
 8012fd8:	3720      	adds	r7, #32
 8012fda:	46bd      	mov	sp, r7
 8012fdc:	bdb0      	pop	{r4, r5, r7, pc}
 8012fde:	bf00      	nop
 8012fe0:	0801b3ec 	.word	0x0801b3ec
 8012fe4:	0801b498 	.word	0x0801b498
 8012fe8:	0801b44c 	.word	0x0801b44c
 8012fec:	0801b4b4 	.word	0x0801b4b4
 8012ff0:	20000030 	.word	0x20000030
 8012ff4:	200109c0 	.word	0x200109c0
 8012ff8:	0801bf98 	.word	0x0801bf98
 8012ffc:	0801bf9c 	.word	0x0801bf9c
 8013000:	10624dd3 	.word	0x10624dd3

08013004 <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 8013004:	b580      	push	{r7, lr}
 8013006:	b082      	sub	sp, #8
 8013008:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 801300a:	4b27      	ldr	r3, [pc, #156]	; (80130a8 <dhcp_coarse_tmr+0xa4>)
 801300c:	681b      	ldr	r3, [r3, #0]
 801300e:	607b      	str	r3, [r7, #4]
 8013010:	e042      	b.n	8013098 <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8013012:	687b      	ldr	r3, [r7, #4]
 8013014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013016:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 8013018:	683b      	ldr	r3, [r7, #0]
 801301a:	2b00      	cmp	r3, #0
 801301c:	d039      	beq.n	8013092 <dhcp_coarse_tmr+0x8e>
 801301e:	683b      	ldr	r3, [r7, #0]
 8013020:	795b      	ldrb	r3, [r3, #5]
 8013022:	2b00      	cmp	r3, #0
 8013024:	d035      	beq.n	8013092 <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 8013026:	683b      	ldr	r3, [r7, #0]
 8013028:	8a9b      	ldrh	r3, [r3, #20]
 801302a:	2b00      	cmp	r3, #0
 801302c:	d012      	beq.n	8013054 <dhcp_coarse_tmr+0x50>
 801302e:	683b      	ldr	r3, [r7, #0]
 8013030:	8a5b      	ldrh	r3, [r3, #18]
 8013032:	3301      	adds	r3, #1
 8013034:	b29a      	uxth	r2, r3
 8013036:	683b      	ldr	r3, [r7, #0]
 8013038:	825a      	strh	r2, [r3, #18]
 801303a:	683b      	ldr	r3, [r7, #0]
 801303c:	8a5a      	ldrh	r2, [r3, #18]
 801303e:	683b      	ldr	r3, [r7, #0]
 8013040:	8a9b      	ldrh	r3, [r3, #20]
 8013042:	429a      	cmp	r2, r3
 8013044:	d106      	bne.n	8013054 <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 8013046:	6878      	ldr	r0, [r7, #4]
 8013048:	f000 fe32 	bl	8013cb0 <dhcp_release_and_stop>
        dhcp_start(netif);
 801304c:	6878      	ldr	r0, [r7, #4]
 801304e:	f000 f969 	bl	8013324 <dhcp_start>
 8013052:	e01e      	b.n	8013092 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 8013054:	683b      	ldr	r3, [r7, #0]
 8013056:	8a1b      	ldrh	r3, [r3, #16]
 8013058:	2b00      	cmp	r3, #0
 801305a:	d00b      	beq.n	8013074 <dhcp_coarse_tmr+0x70>
 801305c:	683b      	ldr	r3, [r7, #0]
 801305e:	8a1b      	ldrh	r3, [r3, #16]
 8013060:	1e5a      	subs	r2, r3, #1
 8013062:	b291      	uxth	r1, r2
 8013064:	683a      	ldr	r2, [r7, #0]
 8013066:	8211      	strh	r1, [r2, #16]
 8013068:	2b01      	cmp	r3, #1
 801306a:	d103      	bne.n	8013074 <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 801306c:	6878      	ldr	r0, [r7, #4]
 801306e:	f000 f8c6 	bl	80131fe <dhcp_t2_timeout>
 8013072:	e00e      	b.n	8013092 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 8013074:	683b      	ldr	r3, [r7, #0]
 8013076:	89db      	ldrh	r3, [r3, #14]
 8013078:	2b00      	cmp	r3, #0
 801307a:	d00a      	beq.n	8013092 <dhcp_coarse_tmr+0x8e>
 801307c:	683b      	ldr	r3, [r7, #0]
 801307e:	89db      	ldrh	r3, [r3, #14]
 8013080:	1e5a      	subs	r2, r3, #1
 8013082:	b291      	uxth	r1, r2
 8013084:	683a      	ldr	r2, [r7, #0]
 8013086:	81d1      	strh	r1, [r2, #14]
 8013088:	2b01      	cmp	r3, #1
 801308a:	d102      	bne.n	8013092 <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 801308c:	6878      	ldr	r0, [r7, #4]
 801308e:	f000 f888 	bl	80131a2 <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 8013092:	687b      	ldr	r3, [r7, #4]
 8013094:	681b      	ldr	r3, [r3, #0]
 8013096:	607b      	str	r3, [r7, #4]
 8013098:	687b      	ldr	r3, [r7, #4]
 801309a:	2b00      	cmp	r3, #0
 801309c:	d1b9      	bne.n	8013012 <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 801309e:	bf00      	nop
 80130a0:	bf00      	nop
 80130a2:	3708      	adds	r7, #8
 80130a4:	46bd      	mov	sp, r7
 80130a6:	bd80      	pop	{r7, pc}
 80130a8:	2001092c 	.word	0x2001092c

080130ac <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 80130ac:	b580      	push	{r7, lr}
 80130ae:	b082      	sub	sp, #8
 80130b0:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 80130b2:	4b16      	ldr	r3, [pc, #88]	; (801310c <dhcp_fine_tmr+0x60>)
 80130b4:	681b      	ldr	r3, [r3, #0]
 80130b6:	607b      	str	r3, [r7, #4]
 80130b8:	e020      	b.n	80130fc <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 80130ba:	687b      	ldr	r3, [r7, #4]
 80130bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80130be:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 80130c0:	683b      	ldr	r3, [r7, #0]
 80130c2:	2b00      	cmp	r3, #0
 80130c4:	d017      	beq.n	80130f6 <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 80130c6:	683b      	ldr	r3, [r7, #0]
 80130c8:	891b      	ldrh	r3, [r3, #8]
 80130ca:	2b01      	cmp	r3, #1
 80130cc:	d906      	bls.n	80130dc <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 80130ce:	683b      	ldr	r3, [r7, #0]
 80130d0:	891b      	ldrh	r3, [r3, #8]
 80130d2:	3b01      	subs	r3, #1
 80130d4:	b29a      	uxth	r2, r3
 80130d6:	683b      	ldr	r3, [r7, #0]
 80130d8:	811a      	strh	r2, [r3, #8]
 80130da:	e00c      	b.n	80130f6 <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 80130dc:	683b      	ldr	r3, [r7, #0]
 80130de:	891b      	ldrh	r3, [r3, #8]
 80130e0:	2b01      	cmp	r3, #1
 80130e2:	d108      	bne.n	80130f6 <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 80130e4:	683b      	ldr	r3, [r7, #0]
 80130e6:	891b      	ldrh	r3, [r3, #8]
 80130e8:	3b01      	subs	r3, #1
 80130ea:	b29a      	uxth	r2, r3
 80130ec:	683b      	ldr	r3, [r7, #0]
 80130ee:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 80130f0:	6878      	ldr	r0, [r7, #4]
 80130f2:	f000 f80d 	bl	8013110 <dhcp_timeout>
  NETIF_FOREACH(netif) {
 80130f6:	687b      	ldr	r3, [r7, #4]
 80130f8:	681b      	ldr	r3, [r3, #0]
 80130fa:	607b      	str	r3, [r7, #4]
 80130fc:	687b      	ldr	r3, [r7, #4]
 80130fe:	2b00      	cmp	r3, #0
 8013100:	d1db      	bne.n	80130ba <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 8013102:	bf00      	nop
 8013104:	bf00      	nop
 8013106:	3708      	adds	r7, #8
 8013108:	46bd      	mov	sp, r7
 801310a:	bd80      	pop	{r7, pc}
 801310c:	2001092c 	.word	0x2001092c

08013110 <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 8013110:	b580      	push	{r7, lr}
 8013112:	b084      	sub	sp, #16
 8013114:	af00      	add	r7, sp, #0
 8013116:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013118:	687b      	ldr	r3, [r7, #4]
 801311a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801311c:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 801311e:	68fb      	ldr	r3, [r7, #12]
 8013120:	795b      	ldrb	r3, [r3, #5]
 8013122:	2b0c      	cmp	r3, #12
 8013124:	d003      	beq.n	801312e <dhcp_timeout+0x1e>
 8013126:	68fb      	ldr	r3, [r7, #12]
 8013128:	795b      	ldrb	r3, [r3, #5]
 801312a:	2b06      	cmp	r3, #6
 801312c:	d103      	bne.n	8013136 <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 801312e:	6878      	ldr	r0, [r7, #4]
 8013130:	f000 fa54 	bl	80135dc <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 8013134:	e031      	b.n	801319a <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 8013136:	68fb      	ldr	r3, [r7, #12]
 8013138:	795b      	ldrb	r3, [r3, #5]
 801313a:	2b01      	cmp	r3, #1
 801313c:	d10e      	bne.n	801315c <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 801313e:	68fb      	ldr	r3, [r7, #12]
 8013140:	799b      	ldrb	r3, [r3, #6]
 8013142:	2b05      	cmp	r3, #5
 8013144:	d803      	bhi.n	801314e <dhcp_timeout+0x3e>
      dhcp_select(netif);
 8013146:	6878      	ldr	r0, [r7, #4]
 8013148:	f7ff fe60 	bl	8012e0c <dhcp_select>
}
 801314c:	e025      	b.n	801319a <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 801314e:	6878      	ldr	r0, [r7, #4]
 8013150:	f000 fdae 	bl	8013cb0 <dhcp_release_and_stop>
      dhcp_start(netif);
 8013154:	6878      	ldr	r0, [r7, #4]
 8013156:	f000 f8e5 	bl	8013324 <dhcp_start>
}
 801315a:	e01e      	b.n	801319a <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 801315c:	68fb      	ldr	r3, [r7, #12]
 801315e:	795b      	ldrb	r3, [r3, #5]
 8013160:	2b08      	cmp	r3, #8
 8013162:	d10b      	bne.n	801317c <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 8013164:	68fb      	ldr	r3, [r7, #12]
 8013166:	799b      	ldrb	r3, [r3, #6]
 8013168:	2b01      	cmp	r3, #1
 801316a:	d803      	bhi.n	8013174 <dhcp_timeout+0x64>
      dhcp_check(netif);
 801316c:	6878      	ldr	r0, [r7, #4]
 801316e:	f7ff fdf3 	bl	8012d58 <dhcp_check>
}
 8013172:	e012      	b.n	801319a <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 8013174:	6878      	ldr	r0, [r7, #4]
 8013176:	f000 fad3 	bl	8013720 <dhcp_bind>
}
 801317a:	e00e      	b.n	801319a <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 801317c:	68fb      	ldr	r3, [r7, #12]
 801317e:	795b      	ldrb	r3, [r3, #5]
 8013180:	2b03      	cmp	r3, #3
 8013182:	d10a      	bne.n	801319a <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 8013184:	68fb      	ldr	r3, [r7, #12]
 8013186:	799b      	ldrb	r3, [r3, #6]
 8013188:	2b01      	cmp	r3, #1
 801318a:	d803      	bhi.n	8013194 <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 801318c:	6878      	ldr	r0, [r7, #4]
 801318e:	f000 fcd9 	bl	8013b44 <dhcp_reboot>
}
 8013192:	e002      	b.n	801319a <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 8013194:	6878      	ldr	r0, [r7, #4]
 8013196:	f000 fa21 	bl	80135dc <dhcp_discover>
}
 801319a:	bf00      	nop
 801319c:	3710      	adds	r7, #16
 801319e:	46bd      	mov	sp, r7
 80131a0:	bd80      	pop	{r7, pc}

080131a2 <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 80131a2:	b580      	push	{r7, lr}
 80131a4:	b084      	sub	sp, #16
 80131a6:	af00      	add	r7, sp, #0
 80131a8:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80131aa:	687b      	ldr	r3, [r7, #4]
 80131ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80131ae:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 80131b0:	68fb      	ldr	r3, [r7, #12]
 80131b2:	795b      	ldrb	r3, [r3, #5]
 80131b4:	2b01      	cmp	r3, #1
 80131b6:	d007      	beq.n	80131c8 <dhcp_t1_timeout+0x26>
 80131b8:	68fb      	ldr	r3, [r7, #12]
 80131ba:	795b      	ldrb	r3, [r3, #5]
 80131bc:	2b0a      	cmp	r3, #10
 80131be:	d003      	beq.n	80131c8 <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 80131c0:	68fb      	ldr	r3, [r7, #12]
 80131c2:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 80131c4:	2b05      	cmp	r3, #5
 80131c6:	d116      	bne.n	80131f6 <dhcp_t1_timeout+0x54>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 80131c8:	6878      	ldr	r0, [r7, #4]
 80131ca:	f000 fb83 	bl	80138d4 <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 80131ce:	68fb      	ldr	r3, [r7, #12]
 80131d0:	899b      	ldrh	r3, [r3, #12]
 80131d2:	461a      	mov	r2, r3
 80131d4:	68fb      	ldr	r3, [r7, #12]
 80131d6:	8a5b      	ldrh	r3, [r3, #18]
 80131d8:	1ad3      	subs	r3, r2, r3
 80131da:	2b01      	cmp	r3, #1
 80131dc:	dd0b      	ble.n	80131f6 <dhcp_t1_timeout+0x54>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 80131de:	68fb      	ldr	r3, [r7, #12]
 80131e0:	899b      	ldrh	r3, [r3, #12]
 80131e2:	461a      	mov	r2, r3
 80131e4:	68fb      	ldr	r3, [r7, #12]
 80131e6:	8a5b      	ldrh	r3, [r3, #18]
 80131e8:	1ad3      	subs	r3, r2, r3
 80131ea:	0fda      	lsrs	r2, r3, #31
 80131ec:	4413      	add	r3, r2
 80131ee:	105b      	asrs	r3, r3, #1
 80131f0:	b29a      	uxth	r2, r3
 80131f2:	68fb      	ldr	r3, [r7, #12]
 80131f4:	81da      	strh	r2, [r3, #14]
    }
  }
}
 80131f6:	bf00      	nop
 80131f8:	3710      	adds	r7, #16
 80131fa:	46bd      	mov	sp, r7
 80131fc:	bd80      	pop	{r7, pc}

080131fe <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 80131fe:	b580      	push	{r7, lr}
 8013200:	b084      	sub	sp, #16
 8013202:	af00      	add	r7, sp, #0
 8013204:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013206:	687b      	ldr	r3, [r7, #4]
 8013208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801320a:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 801320c:	68fb      	ldr	r3, [r7, #12]
 801320e:	795b      	ldrb	r3, [r3, #5]
 8013210:	2b01      	cmp	r3, #1
 8013212:	d00b      	beq.n	801322c <dhcp_t2_timeout+0x2e>
 8013214:	68fb      	ldr	r3, [r7, #12]
 8013216:	795b      	ldrb	r3, [r3, #5]
 8013218:	2b0a      	cmp	r3, #10
 801321a:	d007      	beq.n	801322c <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 801321c:	68fb      	ldr	r3, [r7, #12]
 801321e:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8013220:	2b05      	cmp	r3, #5
 8013222:	d003      	beq.n	801322c <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8013224:	68fb      	ldr	r3, [r7, #12]
 8013226:	795b      	ldrb	r3, [r3, #5]
 8013228:	2b04      	cmp	r3, #4
 801322a:	d116      	bne.n	801325a <dhcp_t2_timeout+0x5c>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 801322c:	6878      	ldr	r0, [r7, #4]
 801322e:	f000 fbed 	bl	8013a0c <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8013232:	68fb      	ldr	r3, [r7, #12]
 8013234:	8a9b      	ldrh	r3, [r3, #20]
 8013236:	461a      	mov	r2, r3
 8013238:	68fb      	ldr	r3, [r7, #12]
 801323a:	8a5b      	ldrh	r3, [r3, #18]
 801323c:	1ad3      	subs	r3, r2, r3
 801323e:	2b01      	cmp	r3, #1
 8013240:	dd0b      	ble.n	801325a <dhcp_t2_timeout+0x5c>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 8013242:	68fb      	ldr	r3, [r7, #12]
 8013244:	8a9b      	ldrh	r3, [r3, #20]
 8013246:	461a      	mov	r2, r3
 8013248:	68fb      	ldr	r3, [r7, #12]
 801324a:	8a5b      	ldrh	r3, [r3, #18]
 801324c:	1ad3      	subs	r3, r2, r3
 801324e:	0fda      	lsrs	r2, r3, #31
 8013250:	4413      	add	r3, r2
 8013252:	105b      	asrs	r3, r3, #1
 8013254:	b29a      	uxth	r2, r3
 8013256:	68fb      	ldr	r3, [r7, #12]
 8013258:	821a      	strh	r2, [r3, #16]
    }
  }
}
 801325a:	bf00      	nop
 801325c:	3710      	adds	r7, #16
 801325e:	46bd      	mov	sp, r7
 8013260:	bd80      	pop	{r7, pc}
	...

08013264 <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 8013264:	b580      	push	{r7, lr}
 8013266:	b084      	sub	sp, #16
 8013268:	af00      	add	r7, sp, #0
 801326a:	6078      	str	r0, [r7, #4]
 801326c:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801326e:	687b      	ldr	r3, [r7, #4]
 8013270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013272:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8013274:	68fb      	ldr	r3, [r7, #12]
 8013276:	2200      	movs	r2, #0
 8013278:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 801327a:	68fb      	ldr	r3, [r7, #12]
 801327c:	2200      	movs	r2, #0
 801327e:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 8013280:	4b26      	ldr	r3, [pc, #152]	; (801331c <dhcp_handle_ack+0xb8>)
 8013282:	78db      	ldrb	r3, [r3, #3]
 8013284:	2b00      	cmp	r3, #0
 8013286:	d003      	beq.n	8013290 <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 8013288:	4b25      	ldr	r3, [pc, #148]	; (8013320 <dhcp_handle_ack+0xbc>)
 801328a:	68da      	ldr	r2, [r3, #12]
 801328c:	68fb      	ldr	r3, [r7, #12]
 801328e:	629a      	str	r2, [r3, #40]	; 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 8013290:	4b22      	ldr	r3, [pc, #136]	; (801331c <dhcp_handle_ack+0xb8>)
 8013292:	791b      	ldrb	r3, [r3, #4]
 8013294:	2b00      	cmp	r3, #0
 8013296:	d004      	beq.n	80132a2 <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 8013298:	4b21      	ldr	r3, [pc, #132]	; (8013320 <dhcp_handle_ack+0xbc>)
 801329a:	691a      	ldr	r2, [r3, #16]
 801329c:	68fb      	ldr	r3, [r7, #12]
 801329e:	62da      	str	r2, [r3, #44]	; 0x2c
 80132a0:	e004      	b.n	80132ac <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 80132a2:	68fb      	ldr	r3, [r7, #12]
 80132a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80132a6:	085a      	lsrs	r2, r3, #1
 80132a8:	68fb      	ldr	r3, [r7, #12]
 80132aa:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 80132ac:	4b1b      	ldr	r3, [pc, #108]	; (801331c <dhcp_handle_ack+0xb8>)
 80132ae:	795b      	ldrb	r3, [r3, #5]
 80132b0:	2b00      	cmp	r3, #0
 80132b2:	d004      	beq.n	80132be <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 80132b4:	4b1a      	ldr	r3, [pc, #104]	; (8013320 <dhcp_handle_ack+0xbc>)
 80132b6:	695a      	ldr	r2, [r3, #20]
 80132b8:	68fb      	ldr	r3, [r7, #12]
 80132ba:	631a      	str	r2, [r3, #48]	; 0x30
 80132bc:	e007      	b.n	80132ce <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 80132be:	68fb      	ldr	r3, [r7, #12]
 80132c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80132c2:	4613      	mov	r3, r2
 80132c4:	00db      	lsls	r3, r3, #3
 80132c6:	1a9b      	subs	r3, r3, r2
 80132c8:	08da      	lsrs	r2, r3, #3
 80132ca:	68fb      	ldr	r3, [r7, #12]
 80132cc:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 80132ce:	683b      	ldr	r3, [r7, #0]
 80132d0:	691a      	ldr	r2, [r3, #16]
 80132d2:	68fb      	ldr	r3, [r7, #12]
 80132d4:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 80132d6:	4b11      	ldr	r3, [pc, #68]	; (801331c <dhcp_handle_ack+0xb8>)
 80132d8:	799b      	ldrb	r3, [r3, #6]
 80132da:	2b00      	cmp	r3, #0
 80132dc:	d00b      	beq.n	80132f6 <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 80132de:	4b10      	ldr	r3, [pc, #64]	; (8013320 <dhcp_handle_ack+0xbc>)
 80132e0:	699b      	ldr	r3, [r3, #24]
 80132e2:	4618      	mov	r0, r3
 80132e4:	f7f6 ff47 	bl	800a176 <lwip_htonl>
 80132e8:	4602      	mov	r2, r0
 80132ea:	68fb      	ldr	r3, [r7, #12]
 80132ec:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 80132ee:	68fb      	ldr	r3, [r7, #12]
 80132f0:	2201      	movs	r2, #1
 80132f2:	71da      	strb	r2, [r3, #7]
 80132f4:	e002      	b.n	80132fc <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 80132f6:	68fb      	ldr	r3, [r7, #12]
 80132f8:	2200      	movs	r2, #0
 80132fa:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 80132fc:	4b07      	ldr	r3, [pc, #28]	; (801331c <dhcp_handle_ack+0xb8>)
 80132fe:	79db      	ldrb	r3, [r3, #7]
 8013300:	2b00      	cmp	r3, #0
 8013302:	d007      	beq.n	8013314 <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 8013304:	4b06      	ldr	r3, [pc, #24]	; (8013320 <dhcp_handle_ack+0xbc>)
 8013306:	69db      	ldr	r3, [r3, #28]
 8013308:	4618      	mov	r0, r3
 801330a:	f7f6 ff34 	bl	800a176 <lwip_htonl>
 801330e:	4602      	mov	r2, r0
 8013310:	68fb      	ldr	r3, [r7, #12]
 8013312:	625a      	str	r2, [r3, #36]	; 0x24
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 8013314:	bf00      	nop
 8013316:	3710      	adds	r7, #16
 8013318:	46bd      	mov	sp, r7
 801331a:	bd80      	pop	{r7, pc}
 801331c:	200109b8 	.word	0x200109b8
 8013320:	20010998 	.word	0x20010998

08013324 <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 8013324:	b580      	push	{r7, lr}
 8013326:	b084      	sub	sp, #16
 8013328:	af00      	add	r7, sp, #0
 801332a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 801332c:	687b      	ldr	r3, [r7, #4]
 801332e:	2b00      	cmp	r3, #0
 8013330:	d109      	bne.n	8013346 <dhcp_start+0x22>
 8013332:	4b37      	ldr	r3, [pc, #220]	; (8013410 <dhcp_start+0xec>)
 8013334:	f240 22e7 	movw	r2, #743	; 0x2e7
 8013338:	4936      	ldr	r1, [pc, #216]	; (8013414 <dhcp_start+0xf0>)
 801333a:	4837      	ldr	r0, [pc, #220]	; (8013418 <dhcp_start+0xf4>)
 801333c:	f004 f9aa 	bl	8017694 <iprintf>
 8013340:	f06f 030f 	mvn.w	r3, #15
 8013344:	e060      	b.n	8013408 <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 8013346:	687b      	ldr	r3, [r7, #4]
 8013348:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801334c:	f003 0301 	and.w	r3, r3, #1
 8013350:	2b00      	cmp	r3, #0
 8013352:	d109      	bne.n	8013368 <dhcp_start+0x44>
 8013354:	4b2e      	ldr	r3, [pc, #184]	; (8013410 <dhcp_start+0xec>)
 8013356:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 801335a:	4930      	ldr	r1, [pc, #192]	; (801341c <dhcp_start+0xf8>)
 801335c:	482e      	ldr	r0, [pc, #184]	; (8013418 <dhcp_start+0xf4>)
 801335e:	f004 f999 	bl	8017694 <iprintf>
 8013362:	f06f 030f 	mvn.w	r3, #15
 8013366:	e04f      	b.n	8013408 <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 8013368:	687b      	ldr	r3, [r7, #4]
 801336a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801336c:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 801336e:	687b      	ldr	r3, [r7, #4]
 8013370:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013372:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 8013376:	d202      	bcs.n	801337e <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 8013378:	f04f 33ff 	mov.w	r3, #4294967295
 801337c:	e044      	b.n	8013408 <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 801337e:	68fb      	ldr	r3, [r7, #12]
 8013380:	2b00      	cmp	r3, #0
 8013382:	d10d      	bne.n	80133a0 <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 8013384:	2034      	movs	r0, #52	; 0x34
 8013386:	f7f7 fa15 	bl	800a7b4 <mem_malloc>
 801338a:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 801338c:	68fb      	ldr	r3, [r7, #12]
 801338e:	2b00      	cmp	r3, #0
 8013390:	d102      	bne.n	8013398 <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 8013392:	f04f 33ff 	mov.w	r3, #4294967295
 8013396:	e037      	b.n	8013408 <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 8013398:	687b      	ldr	r3, [r7, #4]
 801339a:	68fa      	ldr	r2, [r7, #12]
 801339c:	625a      	str	r2, [r3, #36]	; 0x24
 801339e:	e005      	b.n	80133ac <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 80133a0:	68fb      	ldr	r3, [r7, #12]
 80133a2:	791b      	ldrb	r3, [r3, #4]
 80133a4:	2b00      	cmp	r3, #0
 80133a6:	d001      	beq.n	80133ac <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 80133a8:	f7ff fc92 	bl	8012cd0 <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 80133ac:	2234      	movs	r2, #52	; 0x34
 80133ae:	2100      	movs	r1, #0
 80133b0:	68f8      	ldr	r0, [r7, #12]
 80133b2:	f004 f8d2 	bl	801755a <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 80133b6:	f7ff fc39 	bl	8012c2c <dhcp_inc_pcb_refcount>
 80133ba:	4603      	mov	r3, r0
 80133bc:	2b00      	cmp	r3, #0
 80133be:	d002      	beq.n	80133c6 <dhcp_start+0xa2>
    return ERR_MEM;
 80133c0:	f04f 33ff 	mov.w	r3, #4294967295
 80133c4:	e020      	b.n	8013408 <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 80133c6:	68fb      	ldr	r3, [r7, #12]
 80133c8:	2201      	movs	r2, #1
 80133ca:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 80133cc:	687b      	ldr	r3, [r7, #4]
 80133ce:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80133d2:	f003 0304 	and.w	r3, r3, #4
 80133d6:	2b00      	cmp	r3, #0
 80133d8:	d105      	bne.n	80133e6 <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 80133da:	2102      	movs	r1, #2
 80133dc:	68f8      	ldr	r0, [r7, #12]
 80133de:	f000 fd01 	bl	8013de4 <dhcp_set_state>
    return ERR_OK;
 80133e2:	2300      	movs	r3, #0
 80133e4:	e010      	b.n	8013408 <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 80133e6:	6878      	ldr	r0, [r7, #4]
 80133e8:	f000 f8f8 	bl	80135dc <dhcp_discover>
 80133ec:	4603      	mov	r3, r0
 80133ee:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 80133f0:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80133f4:	2b00      	cmp	r3, #0
 80133f6:	d005      	beq.n	8013404 <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 80133f8:	6878      	ldr	r0, [r7, #4]
 80133fa:	f000 fc59 	bl	8013cb0 <dhcp_release_and_stop>
    return ERR_MEM;
 80133fe:	f04f 33ff 	mov.w	r3, #4294967295
 8013402:	e001      	b.n	8013408 <dhcp_start+0xe4>
  }
  return result;
 8013404:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8013408:	4618      	mov	r0, r3
 801340a:	3710      	adds	r7, #16
 801340c:	46bd      	mov	sp, r7
 801340e:	bd80      	pop	{r7, pc}
 8013410:	0801b3ec 	.word	0x0801b3ec
 8013414:	0801b4d0 	.word	0x0801b4d0
 8013418:	0801b44c 	.word	0x0801b44c
 801341c:	0801b514 	.word	0x0801b514

08013420 <dhcp_network_changed>:
 * This enters the REBOOTING state to verify that the currently bound
 * address is still valid.
 */
void
dhcp_network_changed(struct netif *netif)
{
 8013420:	b580      	push	{r7, lr}
 8013422:	b084      	sub	sp, #16
 8013424:	af00      	add	r7, sp, #0
 8013426:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013428:	687b      	ldr	r3, [r7, #4]
 801342a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801342c:	60fb      	str	r3, [r7, #12]

  if (!dhcp) {
 801342e:	68fb      	ldr	r3, [r7, #12]
 8013430:	2b00      	cmp	r3, #0
 8013432:	d025      	beq.n	8013480 <dhcp_network_changed+0x60>
    return;
  }
  switch (dhcp->state) {
 8013434:	68fb      	ldr	r3, [r7, #12]
 8013436:	795b      	ldrb	r3, [r3, #5]
 8013438:	2b0a      	cmp	r3, #10
 801343a:	d008      	beq.n	801344e <dhcp_network_changed+0x2e>
 801343c:	2b0a      	cmp	r3, #10
 801343e:	dc0d      	bgt.n	801345c <dhcp_network_changed+0x3c>
 8013440:	2b00      	cmp	r3, #0
 8013442:	d01f      	beq.n	8013484 <dhcp_network_changed+0x64>
 8013444:	2b00      	cmp	r3, #0
 8013446:	db09      	blt.n	801345c <dhcp_network_changed+0x3c>
 8013448:	3b03      	subs	r3, #3
 801344a:	2b02      	cmp	r3, #2
 801344c:	d806      	bhi.n	801345c <dhcp_network_changed+0x3c>
    case DHCP_STATE_REBINDING:
    case DHCP_STATE_RENEWING:
    case DHCP_STATE_BOUND:
    case DHCP_STATE_REBOOTING:
      dhcp->tries = 0;
 801344e:	68fb      	ldr	r3, [r7, #12]
 8013450:	2200      	movs	r2, #0
 8013452:	719a      	strb	r2, [r3, #6]
      dhcp_reboot(netif);
 8013454:	6878      	ldr	r0, [r7, #4]
 8013456:	f000 fb75 	bl	8013b44 <dhcp_reboot>
      break;
 801345a:	e014      	b.n	8013486 <dhcp_network_changed+0x66>
    case DHCP_STATE_OFF:
      /* stay off */
      break;
    default:
      LWIP_ASSERT("invalid dhcp->state", dhcp->state <= DHCP_STATE_BACKING_OFF);
 801345c:	68fb      	ldr	r3, [r7, #12]
 801345e:	795b      	ldrb	r3, [r3, #5]
 8013460:	2b0c      	cmp	r3, #12
 8013462:	d906      	bls.n	8013472 <dhcp_network_changed+0x52>
 8013464:	4b09      	ldr	r3, [pc, #36]	; (801348c <dhcp_network_changed+0x6c>)
 8013466:	f240 326d 	movw	r2, #877	; 0x36d
 801346a:	4909      	ldr	r1, [pc, #36]	; (8013490 <dhcp_network_changed+0x70>)
 801346c:	4809      	ldr	r0, [pc, #36]	; (8013494 <dhcp_network_changed+0x74>)
 801346e:	f004 f911 	bl	8017694 <iprintf>
        autoip_stop(netif);
        dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
      }
#endif /* LWIP_DHCP_AUTOIP_COOP */
      /* ensure we start with short timeouts, even if already discovering */
      dhcp->tries = 0;
 8013472:	68fb      	ldr	r3, [r7, #12]
 8013474:	2200      	movs	r2, #0
 8013476:	719a      	strb	r2, [r3, #6]
      dhcp_discover(netif);
 8013478:	6878      	ldr	r0, [r7, #4]
 801347a:	f000 f8af 	bl	80135dc <dhcp_discover>
      break;
 801347e:	e002      	b.n	8013486 <dhcp_network_changed+0x66>
    return;
 8013480:	bf00      	nop
 8013482:	e000      	b.n	8013486 <dhcp_network_changed+0x66>
      break;
 8013484:	bf00      	nop
  }
}
 8013486:	3710      	adds	r7, #16
 8013488:	46bd      	mov	sp, r7
 801348a:	bd80      	pop	{r7, pc}
 801348c:	0801b3ec 	.word	0x0801b3ec
 8013490:	0801b538 	.word	0x0801b538
 8013494:	0801b44c 	.word	0x0801b44c

08013498 <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 8013498:	b580      	push	{r7, lr}
 801349a:	b084      	sub	sp, #16
 801349c:	af00      	add	r7, sp, #0
 801349e:	6078      	str	r0, [r7, #4]
 80134a0:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80134a2:	687b      	ldr	r3, [r7, #4]
 80134a4:	2b00      	cmp	r3, #0
 80134a6:	d107      	bne.n	80134b8 <dhcp_arp_reply+0x20>
 80134a8:	4b0e      	ldr	r3, [pc, #56]	; (80134e4 <dhcp_arp_reply+0x4c>)
 80134aa:	f240 328b 	movw	r2, #907	; 0x38b
 80134ae:	490e      	ldr	r1, [pc, #56]	; (80134e8 <dhcp_arp_reply+0x50>)
 80134b0:	480e      	ldr	r0, [pc, #56]	; (80134ec <dhcp_arp_reply+0x54>)
 80134b2:	f004 f8ef 	bl	8017694 <iprintf>
 80134b6:	e012      	b.n	80134de <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 80134b8:	687b      	ldr	r3, [r7, #4]
 80134ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80134bc:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 80134be:	68fb      	ldr	r3, [r7, #12]
 80134c0:	2b00      	cmp	r3, #0
 80134c2:	d00c      	beq.n	80134de <dhcp_arp_reply+0x46>
 80134c4:	68fb      	ldr	r3, [r7, #12]
 80134c6:	795b      	ldrb	r3, [r3, #5]
 80134c8:	2b08      	cmp	r3, #8
 80134ca:	d108      	bne.n	80134de <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 80134cc:	683b      	ldr	r3, [r7, #0]
 80134ce:	681a      	ldr	r2, [r3, #0]
 80134d0:	68fb      	ldr	r3, [r7, #12]
 80134d2:	69db      	ldr	r3, [r3, #28]
 80134d4:	429a      	cmp	r2, r3
 80134d6:	d102      	bne.n	80134de <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 80134d8:	6878      	ldr	r0, [r7, #4]
 80134da:	f000 f809 	bl	80134f0 <dhcp_decline>
    }
  }
}
 80134de:	3710      	adds	r7, #16
 80134e0:	46bd      	mov	sp, r7
 80134e2:	bd80      	pop	{r7, pc}
 80134e4:	0801b3ec 	.word	0x0801b3ec
 80134e8:	0801b4d0 	.word	0x0801b4d0
 80134ec:	0801b44c 	.word	0x0801b44c

080134f0 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 80134f0:	b5b0      	push	{r4, r5, r7, lr}
 80134f2:	b08a      	sub	sp, #40	; 0x28
 80134f4:	af02      	add	r7, sp, #8
 80134f6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80134f8:	687b      	ldr	r3, [r7, #4]
 80134fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80134fc:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 80134fe:	210c      	movs	r1, #12
 8013500:	69b8      	ldr	r0, [r7, #24]
 8013502:	f000 fc6f 	bl	8013de4 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 8013506:	f107 030c 	add.w	r3, r7, #12
 801350a:	2204      	movs	r2, #4
 801350c:	69b9      	ldr	r1, [r7, #24]
 801350e:	6878      	ldr	r0, [r7, #4]
 8013510:	f001 f8f4 	bl	80146fc <dhcp_create_msg>
 8013514:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8013516:	697b      	ldr	r3, [r7, #20]
 8013518:	2b00      	cmp	r3, #0
 801351a:	d035      	beq.n	8013588 <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801351c:	697b      	ldr	r3, [r7, #20]
 801351e:	685b      	ldr	r3, [r3, #4]
 8013520:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8013522:	89b8      	ldrh	r0, [r7, #12]
 8013524:	693b      	ldr	r3, [r7, #16]
 8013526:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801352a:	2304      	movs	r3, #4
 801352c:	2232      	movs	r2, #50	; 0x32
 801352e:	f000 fc73 	bl	8013e18 <dhcp_option>
 8013532:	4603      	mov	r3, r0
 8013534:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8013536:	89bc      	ldrh	r4, [r7, #12]
 8013538:	693b      	ldr	r3, [r7, #16]
 801353a:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 801353e:	69bb      	ldr	r3, [r7, #24]
 8013540:	69db      	ldr	r3, [r3, #28]
 8013542:	4618      	mov	r0, r3
 8013544:	f7f6 fe17 	bl	800a176 <lwip_htonl>
 8013548:	4603      	mov	r3, r0
 801354a:	461a      	mov	r2, r3
 801354c:	4629      	mov	r1, r5
 801354e:	4620      	mov	r0, r4
 8013550:	f000 fcee 	bl	8013f30 <dhcp_option_long>
 8013554:	4603      	mov	r3, r0
 8013556:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8013558:	89b8      	ldrh	r0, [r7, #12]
 801355a:	693b      	ldr	r3, [r7, #16]
 801355c:	33f0      	adds	r3, #240	; 0xf0
 801355e:	697a      	ldr	r2, [r7, #20]
 8013560:	4619      	mov	r1, r3
 8013562:	f001 f9a1 	bl	80148a8 <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8013566:	4b19      	ldr	r3, [pc, #100]	; (80135cc <dhcp_decline+0xdc>)
 8013568:	6818      	ldr	r0, [r3, #0]
 801356a:	4b19      	ldr	r3, [pc, #100]	; (80135d0 <dhcp_decline+0xe0>)
 801356c:	9301      	str	r3, [sp, #4]
 801356e:	687b      	ldr	r3, [r7, #4]
 8013570:	9300      	str	r3, [sp, #0]
 8013572:	2343      	movs	r3, #67	; 0x43
 8013574:	4a17      	ldr	r2, [pc, #92]	; (80135d4 <dhcp_decline+0xe4>)
 8013576:	6979      	ldr	r1, [r7, #20]
 8013578:	f7ff f8c6 	bl	8012708 <udp_sendto_if_src>
 801357c:	4603      	mov	r3, r0
 801357e:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8013580:	6978      	ldr	r0, [r7, #20]
 8013582:	f7f8 f9e1 	bl	800b948 <pbuf_free>
 8013586:	e001      	b.n	801358c <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8013588:	23ff      	movs	r3, #255	; 0xff
 801358a:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801358c:	69bb      	ldr	r3, [r7, #24]
 801358e:	799b      	ldrb	r3, [r3, #6]
 8013590:	2bff      	cmp	r3, #255	; 0xff
 8013592:	d005      	beq.n	80135a0 <dhcp_decline+0xb0>
    dhcp->tries++;
 8013594:	69bb      	ldr	r3, [r7, #24]
 8013596:	799b      	ldrb	r3, [r3, #6]
 8013598:	3301      	adds	r3, #1
 801359a:	b2da      	uxtb	r2, r3
 801359c:	69bb      	ldr	r3, [r7, #24]
 801359e:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 80135a0:	f242 7310 	movw	r3, #10000	; 0x2710
 80135a4:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80135a6:	89fb      	ldrh	r3, [r7, #14]
 80135a8:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80135ac:	4a0a      	ldr	r2, [pc, #40]	; (80135d8 <dhcp_decline+0xe8>)
 80135ae:	fb82 1203 	smull	r1, r2, r2, r3
 80135b2:	1152      	asrs	r2, r2, #5
 80135b4:	17db      	asrs	r3, r3, #31
 80135b6:	1ad3      	subs	r3, r2, r3
 80135b8:	b29a      	uxth	r2, r3
 80135ba:	69bb      	ldr	r3, [r7, #24]
 80135bc:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80135be:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80135c2:	4618      	mov	r0, r3
 80135c4:	3720      	adds	r7, #32
 80135c6:	46bd      	mov	sp, r7
 80135c8:	bdb0      	pop	{r4, r5, r7, pc}
 80135ca:	bf00      	nop
 80135cc:	200109c0 	.word	0x200109c0
 80135d0:	0801bf98 	.word	0x0801bf98
 80135d4:	0801bf9c 	.word	0x0801bf9c
 80135d8:	10624dd3 	.word	0x10624dd3

080135dc <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 80135dc:	b580      	push	{r7, lr}
 80135de:	b08a      	sub	sp, #40	; 0x28
 80135e0:	af02      	add	r7, sp, #8
 80135e2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80135e4:	687b      	ldr	r3, [r7, #4]
 80135e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80135e8:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 80135ea:	2300      	movs	r3, #0
 80135ec:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 80135ee:	69bb      	ldr	r3, [r7, #24]
 80135f0:	2200      	movs	r2, #0
 80135f2:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 80135f4:	2106      	movs	r1, #6
 80135f6:	69b8      	ldr	r0, [r7, #24]
 80135f8:	f000 fbf4 	bl	8013de4 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 80135fc:	f107 0308 	add.w	r3, r7, #8
 8013600:	2201      	movs	r2, #1
 8013602:	69b9      	ldr	r1, [r7, #24]
 8013604:	6878      	ldr	r0, [r7, #4]
 8013606:	f001 f879 	bl	80146fc <dhcp_create_msg>
 801360a:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 801360c:	693b      	ldr	r3, [r7, #16]
 801360e:	2b00      	cmp	r3, #0
 8013610:	d04b      	beq.n	80136aa <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8013612:	693b      	ldr	r3, [r7, #16]
 8013614:	685b      	ldr	r3, [r3, #4]
 8013616:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8013618:	8938      	ldrh	r0, [r7, #8]
 801361a:	68fb      	ldr	r3, [r7, #12]
 801361c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013620:	2302      	movs	r3, #2
 8013622:	2239      	movs	r2, #57	; 0x39
 8013624:	f000 fbf8 	bl	8013e18 <dhcp_option>
 8013628:	4603      	mov	r3, r0
 801362a:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801362c:	8938      	ldrh	r0, [r7, #8]
 801362e:	68fb      	ldr	r3, [r7, #12]
 8013630:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013634:	687b      	ldr	r3, [r7, #4]
 8013636:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013638:	461a      	mov	r2, r3
 801363a:	f000 fc47 	bl	8013ecc <dhcp_option_short>
 801363e:	4603      	mov	r3, r0
 8013640:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8013642:	8938      	ldrh	r0, [r7, #8]
 8013644:	68fb      	ldr	r3, [r7, #12]
 8013646:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801364a:	2303      	movs	r3, #3
 801364c:	2237      	movs	r2, #55	; 0x37
 801364e:	f000 fbe3 	bl	8013e18 <dhcp_option>
 8013652:	4603      	mov	r3, r0
 8013654:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8013656:	2300      	movs	r3, #0
 8013658:	77fb      	strb	r3, [r7, #31]
 801365a:	e00e      	b.n	801367a <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801365c:	8938      	ldrh	r0, [r7, #8]
 801365e:	68fb      	ldr	r3, [r7, #12]
 8013660:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013664:	7ffb      	ldrb	r3, [r7, #31]
 8013666:	4a29      	ldr	r2, [pc, #164]	; (801370c <dhcp_discover+0x130>)
 8013668:	5cd3      	ldrb	r3, [r2, r3]
 801366a:	461a      	mov	r2, r3
 801366c:	f000 fc08 	bl	8013e80 <dhcp_option_byte>
 8013670:	4603      	mov	r3, r0
 8013672:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8013674:	7ffb      	ldrb	r3, [r7, #31]
 8013676:	3301      	adds	r3, #1
 8013678:	77fb      	strb	r3, [r7, #31]
 801367a:	7ffb      	ldrb	r3, [r7, #31]
 801367c:	2b02      	cmp	r3, #2
 801367e:	d9ed      	bls.n	801365c <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8013680:	8938      	ldrh	r0, [r7, #8]
 8013682:	68fb      	ldr	r3, [r7, #12]
 8013684:	33f0      	adds	r3, #240	; 0xf0
 8013686:	693a      	ldr	r2, [r7, #16]
 8013688:	4619      	mov	r1, r3
 801368a:	f001 f90d 	bl	80148a8 <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 801368e:	4b20      	ldr	r3, [pc, #128]	; (8013710 <dhcp_discover+0x134>)
 8013690:	6818      	ldr	r0, [r3, #0]
 8013692:	4b20      	ldr	r3, [pc, #128]	; (8013714 <dhcp_discover+0x138>)
 8013694:	9301      	str	r3, [sp, #4]
 8013696:	687b      	ldr	r3, [r7, #4]
 8013698:	9300      	str	r3, [sp, #0]
 801369a:	2343      	movs	r3, #67	; 0x43
 801369c:	4a1e      	ldr	r2, [pc, #120]	; (8013718 <dhcp_discover+0x13c>)
 801369e:	6939      	ldr	r1, [r7, #16]
 80136a0:	f7ff f832 	bl	8012708 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 80136a4:	6938      	ldr	r0, [r7, #16]
 80136a6:	f7f8 f94f 	bl	800b948 <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 80136aa:	69bb      	ldr	r3, [r7, #24]
 80136ac:	799b      	ldrb	r3, [r3, #6]
 80136ae:	2bff      	cmp	r3, #255	; 0xff
 80136b0:	d005      	beq.n	80136be <dhcp_discover+0xe2>
    dhcp->tries++;
 80136b2:	69bb      	ldr	r3, [r7, #24]
 80136b4:	799b      	ldrb	r3, [r3, #6]
 80136b6:	3301      	adds	r3, #1
 80136b8:	b2da      	uxtb	r2, r3
 80136ba:	69bb      	ldr	r3, [r7, #24]
 80136bc:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 80136be:	69bb      	ldr	r3, [r7, #24]
 80136c0:	799b      	ldrb	r3, [r3, #6]
 80136c2:	2b05      	cmp	r3, #5
 80136c4:	d80d      	bhi.n	80136e2 <dhcp_discover+0x106>
 80136c6:	69bb      	ldr	r3, [r7, #24]
 80136c8:	799b      	ldrb	r3, [r3, #6]
 80136ca:	461a      	mov	r2, r3
 80136cc:	2301      	movs	r3, #1
 80136ce:	4093      	lsls	r3, r2
 80136d0:	b29b      	uxth	r3, r3
 80136d2:	461a      	mov	r2, r3
 80136d4:	0152      	lsls	r2, r2, #5
 80136d6:	1ad2      	subs	r2, r2, r3
 80136d8:	0092      	lsls	r2, r2, #2
 80136da:	4413      	add	r3, r2
 80136dc:	00db      	lsls	r3, r3, #3
 80136de:	b29b      	uxth	r3, r3
 80136e0:	e001      	b.n	80136e6 <dhcp_discover+0x10a>
 80136e2:	f64e 2360 	movw	r3, #60000	; 0xea60
 80136e6:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80136e8:	897b      	ldrh	r3, [r7, #10]
 80136ea:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80136ee:	4a0b      	ldr	r2, [pc, #44]	; (801371c <dhcp_discover+0x140>)
 80136f0:	fb82 1203 	smull	r1, r2, r2, r3
 80136f4:	1152      	asrs	r2, r2, #5
 80136f6:	17db      	asrs	r3, r3, #31
 80136f8:	1ad3      	subs	r3, r2, r3
 80136fa:	b29a      	uxth	r2, r3
 80136fc:	69bb      	ldr	r3, [r7, #24]
 80136fe:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8013700:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8013704:	4618      	mov	r0, r3
 8013706:	3720      	adds	r7, #32
 8013708:	46bd      	mov	sp, r7
 801370a:	bd80      	pop	{r7, pc}
 801370c:	20000030 	.word	0x20000030
 8013710:	200109c0 	.word	0x200109c0
 8013714:	0801bf98 	.word	0x0801bf98
 8013718:	0801bf9c 	.word	0x0801bf9c
 801371c:	10624dd3 	.word	0x10624dd3

08013720 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 8013720:	b580      	push	{r7, lr}
 8013722:	b088      	sub	sp, #32
 8013724:	af00      	add	r7, sp, #0
 8013726:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 8013728:	687b      	ldr	r3, [r7, #4]
 801372a:	2b00      	cmp	r3, #0
 801372c:	d107      	bne.n	801373e <dhcp_bind+0x1e>
 801372e:	4b64      	ldr	r3, [pc, #400]	; (80138c0 <dhcp_bind+0x1a0>)
 8013730:	f240 4215 	movw	r2, #1045	; 0x415
 8013734:	4963      	ldr	r1, [pc, #396]	; (80138c4 <dhcp_bind+0x1a4>)
 8013736:	4864      	ldr	r0, [pc, #400]	; (80138c8 <dhcp_bind+0x1a8>)
 8013738:	f003 ffac 	bl	8017694 <iprintf>
 801373c:	e0bc      	b.n	80138b8 <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 801373e:	687b      	ldr	r3, [r7, #4]
 8013740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013742:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 8013744:	69bb      	ldr	r3, [r7, #24]
 8013746:	2b00      	cmp	r3, #0
 8013748:	d107      	bne.n	801375a <dhcp_bind+0x3a>
 801374a:	4b5d      	ldr	r3, [pc, #372]	; (80138c0 <dhcp_bind+0x1a0>)
 801374c:	f240 4217 	movw	r2, #1047	; 0x417
 8013750:	495e      	ldr	r1, [pc, #376]	; (80138cc <dhcp_bind+0x1ac>)
 8013752:	485d      	ldr	r0, [pc, #372]	; (80138c8 <dhcp_bind+0x1a8>)
 8013754:	f003 ff9e 	bl	8017694 <iprintf>
 8013758:	e0ae      	b.n	80138b8 <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 801375a:	69bb      	ldr	r3, [r7, #24]
 801375c:	2200      	movs	r2, #0
 801375e:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 8013760:	69bb      	ldr	r3, [r7, #24]
 8013762:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013764:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013768:	d019      	beq.n	801379e <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801376a:	69bb      	ldr	r3, [r7, #24]
 801376c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801376e:	331e      	adds	r3, #30
 8013770:	4a57      	ldr	r2, [pc, #348]	; (80138d0 <dhcp_bind+0x1b0>)
 8013772:	fba2 2303 	umull	r2, r3, r2, r3
 8013776:	095b      	lsrs	r3, r3, #5
 8013778:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 801377a:	69fb      	ldr	r3, [r7, #28]
 801377c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013780:	d302      	bcc.n	8013788 <dhcp_bind+0x68>
      timeout = 0xffff;
 8013782:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013786:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 8013788:	69fb      	ldr	r3, [r7, #28]
 801378a:	b29a      	uxth	r2, r3
 801378c:	69bb      	ldr	r3, [r7, #24]
 801378e:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 8013790:	69bb      	ldr	r3, [r7, #24]
 8013792:	8a9b      	ldrh	r3, [r3, #20]
 8013794:	2b00      	cmp	r3, #0
 8013796:	d102      	bne.n	801379e <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 8013798:	69bb      	ldr	r3, [r7, #24]
 801379a:	2201      	movs	r2, #1
 801379c:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 801379e:	69bb      	ldr	r3, [r7, #24]
 80137a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80137a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80137a6:	d01d      	beq.n	80137e4 <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 80137a8:	69bb      	ldr	r3, [r7, #24]
 80137aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80137ac:	331e      	adds	r3, #30
 80137ae:	4a48      	ldr	r2, [pc, #288]	; (80138d0 <dhcp_bind+0x1b0>)
 80137b0:	fba2 2303 	umull	r2, r3, r2, r3
 80137b4:	095b      	lsrs	r3, r3, #5
 80137b6:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 80137b8:	69fb      	ldr	r3, [r7, #28]
 80137ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80137be:	d302      	bcc.n	80137c6 <dhcp_bind+0xa6>
      timeout = 0xffff;
 80137c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80137c4:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 80137c6:	69fb      	ldr	r3, [r7, #28]
 80137c8:	b29a      	uxth	r2, r3
 80137ca:	69bb      	ldr	r3, [r7, #24]
 80137cc:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 80137ce:	69bb      	ldr	r3, [r7, #24]
 80137d0:	895b      	ldrh	r3, [r3, #10]
 80137d2:	2b00      	cmp	r3, #0
 80137d4:	d102      	bne.n	80137dc <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 80137d6:	69bb      	ldr	r3, [r7, #24]
 80137d8:	2201      	movs	r2, #1
 80137da:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 80137dc:	69bb      	ldr	r3, [r7, #24]
 80137de:	895a      	ldrh	r2, [r3, #10]
 80137e0:	69bb      	ldr	r3, [r7, #24]
 80137e2:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 80137e4:	69bb      	ldr	r3, [r7, #24]
 80137e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80137e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80137ec:	d01d      	beq.n	801382a <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 80137ee:	69bb      	ldr	r3, [r7, #24]
 80137f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80137f2:	331e      	adds	r3, #30
 80137f4:	4a36      	ldr	r2, [pc, #216]	; (80138d0 <dhcp_bind+0x1b0>)
 80137f6:	fba2 2303 	umull	r2, r3, r2, r3
 80137fa:	095b      	lsrs	r3, r3, #5
 80137fc:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 80137fe:	69fb      	ldr	r3, [r7, #28]
 8013800:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013804:	d302      	bcc.n	801380c <dhcp_bind+0xec>
      timeout = 0xffff;
 8013806:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801380a:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 801380c:	69fb      	ldr	r3, [r7, #28]
 801380e:	b29a      	uxth	r2, r3
 8013810:	69bb      	ldr	r3, [r7, #24]
 8013812:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 8013814:	69bb      	ldr	r3, [r7, #24]
 8013816:	899b      	ldrh	r3, [r3, #12]
 8013818:	2b00      	cmp	r3, #0
 801381a:	d102      	bne.n	8013822 <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 801381c:	69bb      	ldr	r3, [r7, #24]
 801381e:	2201      	movs	r2, #1
 8013820:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 8013822:	69bb      	ldr	r3, [r7, #24]
 8013824:	899a      	ldrh	r2, [r3, #12]
 8013826:	69bb      	ldr	r3, [r7, #24]
 8013828:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 801382a:	69bb      	ldr	r3, [r7, #24]
 801382c:	895a      	ldrh	r2, [r3, #10]
 801382e:	69bb      	ldr	r3, [r7, #24]
 8013830:	899b      	ldrh	r3, [r3, #12]
 8013832:	429a      	cmp	r2, r3
 8013834:	d306      	bcc.n	8013844 <dhcp_bind+0x124>
 8013836:	69bb      	ldr	r3, [r7, #24]
 8013838:	899b      	ldrh	r3, [r3, #12]
 801383a:	2b00      	cmp	r3, #0
 801383c:	d002      	beq.n	8013844 <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 801383e:	69bb      	ldr	r3, [r7, #24]
 8013840:	2200      	movs	r2, #0
 8013842:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 8013844:	69bb      	ldr	r3, [r7, #24]
 8013846:	79db      	ldrb	r3, [r3, #7]
 8013848:	2b00      	cmp	r3, #0
 801384a:	d003      	beq.n	8013854 <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 801384c:	69bb      	ldr	r3, [r7, #24]
 801384e:	6a1b      	ldr	r3, [r3, #32]
 8013850:	613b      	str	r3, [r7, #16]
 8013852:	e014      	b.n	801387e <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 8013854:	69bb      	ldr	r3, [r7, #24]
 8013856:	331c      	adds	r3, #28
 8013858:	781b      	ldrb	r3, [r3, #0]
 801385a:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 801385c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8013860:	2b00      	cmp	r3, #0
 8013862:	db02      	blt.n	801386a <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 8013864:	23ff      	movs	r3, #255	; 0xff
 8013866:	613b      	str	r3, [r7, #16]
 8013868:	e009      	b.n	801387e <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 801386a:	7dfb      	ldrb	r3, [r7, #23]
 801386c:	2bbf      	cmp	r3, #191	; 0xbf
 801386e:	d903      	bls.n	8013878 <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 8013870:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8013874:	613b      	str	r3, [r7, #16]
 8013876:	e002      	b.n	801387e <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 8013878:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801387c:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 801387e:	69bb      	ldr	r3, [r7, #24]
 8013880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013882:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 8013884:	68fb      	ldr	r3, [r7, #12]
 8013886:	2b00      	cmp	r3, #0
 8013888:	d108      	bne.n	801389c <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 801388a:	69bb      	ldr	r3, [r7, #24]
 801388c:	69da      	ldr	r2, [r3, #28]
 801388e:	693b      	ldr	r3, [r7, #16]
 8013890:	4013      	ands	r3, r2
 8013892:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 8013894:	68fb      	ldr	r3, [r7, #12]
 8013896:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801389a:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 801389c:	210a      	movs	r1, #10
 801389e:	69b8      	ldr	r0, [r7, #24]
 80138a0:	f000 faa0 	bl	8013de4 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 80138a4:	69bb      	ldr	r3, [r7, #24]
 80138a6:	f103 011c 	add.w	r1, r3, #28
 80138aa:	f107 030c 	add.w	r3, r7, #12
 80138ae:	f107 0210 	add.w	r2, r7, #16
 80138b2:	6878      	ldr	r0, [r7, #4]
 80138b4:	f7f7 fb3a 	bl	800af2c <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 80138b8:	3720      	adds	r7, #32
 80138ba:	46bd      	mov	sp, r7
 80138bc:	bd80      	pop	{r7, pc}
 80138be:	bf00      	nop
 80138c0:	0801b3ec 	.word	0x0801b3ec
 80138c4:	0801b54c 	.word	0x0801b54c
 80138c8:	0801b44c 	.word	0x0801b44c
 80138cc:	0801b568 	.word	0x0801b568
 80138d0:	88888889 	.word	0x88888889

080138d4 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 80138d4:	b580      	push	{r7, lr}
 80138d6:	b08a      	sub	sp, #40	; 0x28
 80138d8:	af02      	add	r7, sp, #8
 80138da:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80138dc:	687b      	ldr	r3, [r7, #4]
 80138de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80138e0:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 80138e2:	2105      	movs	r1, #5
 80138e4:	69b8      	ldr	r0, [r7, #24]
 80138e6:	f000 fa7d 	bl	8013de4 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 80138ea:	f107 030c 	add.w	r3, r7, #12
 80138ee:	2203      	movs	r2, #3
 80138f0:	69b9      	ldr	r1, [r7, #24]
 80138f2:	6878      	ldr	r0, [r7, #4]
 80138f4:	f000 ff02 	bl	80146fc <dhcp_create_msg>
 80138f8:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 80138fa:	697b      	ldr	r3, [r7, #20]
 80138fc:	2b00      	cmp	r3, #0
 80138fe:	d04e      	beq.n	801399e <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8013900:	697b      	ldr	r3, [r7, #20]
 8013902:	685b      	ldr	r3, [r3, #4]
 8013904:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8013906:	89b8      	ldrh	r0, [r7, #12]
 8013908:	693b      	ldr	r3, [r7, #16]
 801390a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801390e:	2302      	movs	r3, #2
 8013910:	2239      	movs	r2, #57	; 0x39
 8013912:	f000 fa81 	bl	8013e18 <dhcp_option>
 8013916:	4603      	mov	r3, r0
 8013918:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801391a:	89b8      	ldrh	r0, [r7, #12]
 801391c:	693b      	ldr	r3, [r7, #16]
 801391e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013922:	687b      	ldr	r3, [r7, #4]
 8013924:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013926:	461a      	mov	r2, r3
 8013928:	f000 fad0 	bl	8013ecc <dhcp_option_short>
 801392c:	4603      	mov	r3, r0
 801392e:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8013930:	89b8      	ldrh	r0, [r7, #12]
 8013932:	693b      	ldr	r3, [r7, #16]
 8013934:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013938:	2303      	movs	r3, #3
 801393a:	2237      	movs	r2, #55	; 0x37
 801393c:	f000 fa6c 	bl	8013e18 <dhcp_option>
 8013940:	4603      	mov	r3, r0
 8013942:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8013944:	2300      	movs	r3, #0
 8013946:	77bb      	strb	r3, [r7, #30]
 8013948:	e00e      	b.n	8013968 <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801394a:	89b8      	ldrh	r0, [r7, #12]
 801394c:	693b      	ldr	r3, [r7, #16]
 801394e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013952:	7fbb      	ldrb	r3, [r7, #30]
 8013954:	4a2a      	ldr	r2, [pc, #168]	; (8013a00 <dhcp_renew+0x12c>)
 8013956:	5cd3      	ldrb	r3, [r2, r3]
 8013958:	461a      	mov	r2, r3
 801395a:	f000 fa91 	bl	8013e80 <dhcp_option_byte>
 801395e:	4603      	mov	r3, r0
 8013960:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8013962:	7fbb      	ldrb	r3, [r7, #30]
 8013964:	3301      	adds	r3, #1
 8013966:	77bb      	strb	r3, [r7, #30]
 8013968:	7fbb      	ldrb	r3, [r7, #30]
 801396a:	2b02      	cmp	r3, #2
 801396c:	d9ed      	bls.n	801394a <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801396e:	89b8      	ldrh	r0, [r7, #12]
 8013970:	693b      	ldr	r3, [r7, #16]
 8013972:	33f0      	adds	r3, #240	; 0xf0
 8013974:	697a      	ldr	r2, [r7, #20]
 8013976:	4619      	mov	r1, r3
 8013978:	f000 ff96 	bl	80148a8 <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 801397c:	4b21      	ldr	r3, [pc, #132]	; (8013a04 <dhcp_renew+0x130>)
 801397e:	6818      	ldr	r0, [r3, #0]
 8013980:	69bb      	ldr	r3, [r7, #24]
 8013982:	f103 0218 	add.w	r2, r3, #24
 8013986:	687b      	ldr	r3, [r7, #4]
 8013988:	9300      	str	r3, [sp, #0]
 801398a:	2343      	movs	r3, #67	; 0x43
 801398c:	6979      	ldr	r1, [r7, #20]
 801398e:	f7fe fe47 	bl	8012620 <udp_sendto_if>
 8013992:	4603      	mov	r3, r0
 8013994:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8013996:	6978      	ldr	r0, [r7, #20]
 8013998:	f7f7 ffd6 	bl	800b948 <pbuf_free>
 801399c:	e001      	b.n	80139a2 <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801399e:	23ff      	movs	r3, #255	; 0xff
 80139a0:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80139a2:	69bb      	ldr	r3, [r7, #24]
 80139a4:	799b      	ldrb	r3, [r3, #6]
 80139a6:	2bff      	cmp	r3, #255	; 0xff
 80139a8:	d005      	beq.n	80139b6 <dhcp_renew+0xe2>
    dhcp->tries++;
 80139aa:	69bb      	ldr	r3, [r7, #24]
 80139ac:	799b      	ldrb	r3, [r3, #6]
 80139ae:	3301      	adds	r3, #1
 80139b0:	b2da      	uxtb	r2, r3
 80139b2:	69bb      	ldr	r3, [r7, #24]
 80139b4:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 80139b6:	69bb      	ldr	r3, [r7, #24]
 80139b8:	799b      	ldrb	r3, [r3, #6]
 80139ba:	2b09      	cmp	r3, #9
 80139bc:	d80a      	bhi.n	80139d4 <dhcp_renew+0x100>
 80139be:	69bb      	ldr	r3, [r7, #24]
 80139c0:	799b      	ldrb	r3, [r3, #6]
 80139c2:	b29b      	uxth	r3, r3
 80139c4:	461a      	mov	r2, r3
 80139c6:	0152      	lsls	r2, r2, #5
 80139c8:	1ad2      	subs	r2, r2, r3
 80139ca:	0092      	lsls	r2, r2, #2
 80139cc:	4413      	add	r3, r2
 80139ce:	011b      	lsls	r3, r3, #4
 80139d0:	b29b      	uxth	r3, r3
 80139d2:	e001      	b.n	80139d8 <dhcp_renew+0x104>
 80139d4:	f644 6320 	movw	r3, #20000	; 0x4e20
 80139d8:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80139da:	89fb      	ldrh	r3, [r7, #14]
 80139dc:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80139e0:	4a09      	ldr	r2, [pc, #36]	; (8013a08 <dhcp_renew+0x134>)
 80139e2:	fb82 1203 	smull	r1, r2, r2, r3
 80139e6:	1152      	asrs	r2, r2, #5
 80139e8:	17db      	asrs	r3, r3, #31
 80139ea:	1ad3      	subs	r3, r2, r3
 80139ec:	b29a      	uxth	r2, r3
 80139ee:	69bb      	ldr	r3, [r7, #24]
 80139f0:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80139f2:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80139f6:	4618      	mov	r0, r3
 80139f8:	3720      	adds	r7, #32
 80139fa:	46bd      	mov	sp, r7
 80139fc:	bd80      	pop	{r7, pc}
 80139fe:	bf00      	nop
 8013a00:	20000030 	.word	0x20000030
 8013a04:	200109c0 	.word	0x200109c0
 8013a08:	10624dd3 	.word	0x10624dd3

08013a0c <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 8013a0c:	b580      	push	{r7, lr}
 8013a0e:	b08a      	sub	sp, #40	; 0x28
 8013a10:	af02      	add	r7, sp, #8
 8013a12:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013a14:	687b      	ldr	r3, [r7, #4]
 8013a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013a18:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 8013a1a:	2104      	movs	r1, #4
 8013a1c:	69b8      	ldr	r0, [r7, #24]
 8013a1e:	f000 f9e1 	bl	8013de4 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8013a22:	f107 030c 	add.w	r3, r7, #12
 8013a26:	2203      	movs	r2, #3
 8013a28:	69b9      	ldr	r1, [r7, #24]
 8013a2a:	6878      	ldr	r0, [r7, #4]
 8013a2c:	f000 fe66 	bl	80146fc <dhcp_create_msg>
 8013a30:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8013a32:	697b      	ldr	r3, [r7, #20]
 8013a34:	2b00      	cmp	r3, #0
 8013a36:	d04c      	beq.n	8013ad2 <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8013a38:	697b      	ldr	r3, [r7, #20]
 8013a3a:	685b      	ldr	r3, [r3, #4]
 8013a3c:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8013a3e:	89b8      	ldrh	r0, [r7, #12]
 8013a40:	693b      	ldr	r3, [r7, #16]
 8013a42:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013a46:	2302      	movs	r3, #2
 8013a48:	2239      	movs	r2, #57	; 0x39
 8013a4a:	f000 f9e5 	bl	8013e18 <dhcp_option>
 8013a4e:	4603      	mov	r3, r0
 8013a50:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8013a52:	89b8      	ldrh	r0, [r7, #12]
 8013a54:	693b      	ldr	r3, [r7, #16]
 8013a56:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013a5a:	687b      	ldr	r3, [r7, #4]
 8013a5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013a5e:	461a      	mov	r2, r3
 8013a60:	f000 fa34 	bl	8013ecc <dhcp_option_short>
 8013a64:	4603      	mov	r3, r0
 8013a66:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8013a68:	89b8      	ldrh	r0, [r7, #12]
 8013a6a:	693b      	ldr	r3, [r7, #16]
 8013a6c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013a70:	2303      	movs	r3, #3
 8013a72:	2237      	movs	r2, #55	; 0x37
 8013a74:	f000 f9d0 	bl	8013e18 <dhcp_option>
 8013a78:	4603      	mov	r3, r0
 8013a7a:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8013a7c:	2300      	movs	r3, #0
 8013a7e:	77bb      	strb	r3, [r7, #30]
 8013a80:	e00e      	b.n	8013aa0 <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8013a82:	89b8      	ldrh	r0, [r7, #12]
 8013a84:	693b      	ldr	r3, [r7, #16]
 8013a86:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013a8a:	7fbb      	ldrb	r3, [r7, #30]
 8013a8c:	4a29      	ldr	r2, [pc, #164]	; (8013b34 <dhcp_rebind+0x128>)
 8013a8e:	5cd3      	ldrb	r3, [r2, r3]
 8013a90:	461a      	mov	r2, r3
 8013a92:	f000 f9f5 	bl	8013e80 <dhcp_option_byte>
 8013a96:	4603      	mov	r3, r0
 8013a98:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8013a9a:	7fbb      	ldrb	r3, [r7, #30]
 8013a9c:	3301      	adds	r3, #1
 8013a9e:	77bb      	strb	r3, [r7, #30]
 8013aa0:	7fbb      	ldrb	r3, [r7, #30]
 8013aa2:	2b02      	cmp	r3, #2
 8013aa4:	d9ed      	bls.n	8013a82 <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8013aa6:	89b8      	ldrh	r0, [r7, #12]
 8013aa8:	693b      	ldr	r3, [r7, #16]
 8013aaa:	33f0      	adds	r3, #240	; 0xf0
 8013aac:	697a      	ldr	r2, [r7, #20]
 8013aae:	4619      	mov	r1, r3
 8013ab0:	f000 fefa 	bl	80148a8 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8013ab4:	4b20      	ldr	r3, [pc, #128]	; (8013b38 <dhcp_rebind+0x12c>)
 8013ab6:	6818      	ldr	r0, [r3, #0]
 8013ab8:	687b      	ldr	r3, [r7, #4]
 8013aba:	9300      	str	r3, [sp, #0]
 8013abc:	2343      	movs	r3, #67	; 0x43
 8013abe:	4a1f      	ldr	r2, [pc, #124]	; (8013b3c <dhcp_rebind+0x130>)
 8013ac0:	6979      	ldr	r1, [r7, #20]
 8013ac2:	f7fe fdad 	bl	8012620 <udp_sendto_if>
 8013ac6:	4603      	mov	r3, r0
 8013ac8:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8013aca:	6978      	ldr	r0, [r7, #20]
 8013acc:	f7f7 ff3c 	bl	800b948 <pbuf_free>
 8013ad0:	e001      	b.n	8013ad6 <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8013ad2:	23ff      	movs	r3, #255	; 0xff
 8013ad4:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8013ad6:	69bb      	ldr	r3, [r7, #24]
 8013ad8:	799b      	ldrb	r3, [r3, #6]
 8013ada:	2bff      	cmp	r3, #255	; 0xff
 8013adc:	d005      	beq.n	8013aea <dhcp_rebind+0xde>
    dhcp->tries++;
 8013ade:	69bb      	ldr	r3, [r7, #24]
 8013ae0:	799b      	ldrb	r3, [r3, #6]
 8013ae2:	3301      	adds	r3, #1
 8013ae4:	b2da      	uxtb	r2, r3
 8013ae6:	69bb      	ldr	r3, [r7, #24]
 8013ae8:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8013aea:	69bb      	ldr	r3, [r7, #24]
 8013aec:	799b      	ldrb	r3, [r3, #6]
 8013aee:	2b09      	cmp	r3, #9
 8013af0:	d80a      	bhi.n	8013b08 <dhcp_rebind+0xfc>
 8013af2:	69bb      	ldr	r3, [r7, #24]
 8013af4:	799b      	ldrb	r3, [r3, #6]
 8013af6:	b29b      	uxth	r3, r3
 8013af8:	461a      	mov	r2, r3
 8013afa:	0152      	lsls	r2, r2, #5
 8013afc:	1ad2      	subs	r2, r2, r3
 8013afe:	0092      	lsls	r2, r2, #2
 8013b00:	4413      	add	r3, r2
 8013b02:	00db      	lsls	r3, r3, #3
 8013b04:	b29b      	uxth	r3, r3
 8013b06:	e001      	b.n	8013b0c <dhcp_rebind+0x100>
 8013b08:	f242 7310 	movw	r3, #10000	; 0x2710
 8013b0c:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8013b0e:	89fb      	ldrh	r3, [r7, #14]
 8013b10:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8013b14:	4a0a      	ldr	r2, [pc, #40]	; (8013b40 <dhcp_rebind+0x134>)
 8013b16:	fb82 1203 	smull	r1, r2, r2, r3
 8013b1a:	1152      	asrs	r2, r2, #5
 8013b1c:	17db      	asrs	r3, r3, #31
 8013b1e:	1ad3      	subs	r3, r2, r3
 8013b20:	b29a      	uxth	r2, r3
 8013b22:	69bb      	ldr	r3, [r7, #24]
 8013b24:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8013b26:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8013b2a:	4618      	mov	r0, r3
 8013b2c:	3720      	adds	r7, #32
 8013b2e:	46bd      	mov	sp, r7
 8013b30:	bd80      	pop	{r7, pc}
 8013b32:	bf00      	nop
 8013b34:	20000030 	.word	0x20000030
 8013b38:	200109c0 	.word	0x200109c0
 8013b3c:	0801bf9c 	.word	0x0801bf9c
 8013b40:	10624dd3 	.word	0x10624dd3

08013b44 <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 8013b44:	b5b0      	push	{r4, r5, r7, lr}
 8013b46:	b08a      	sub	sp, #40	; 0x28
 8013b48:	af02      	add	r7, sp, #8
 8013b4a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013b4c:	687b      	ldr	r3, [r7, #4]
 8013b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013b50:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 8013b52:	2103      	movs	r1, #3
 8013b54:	69b8      	ldr	r0, [r7, #24]
 8013b56:	f000 f945 	bl	8013de4 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8013b5a:	f107 030c 	add.w	r3, r7, #12
 8013b5e:	2203      	movs	r2, #3
 8013b60:	69b9      	ldr	r1, [r7, #24]
 8013b62:	6878      	ldr	r0, [r7, #4]
 8013b64:	f000 fdca 	bl	80146fc <dhcp_create_msg>
 8013b68:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8013b6a:	697b      	ldr	r3, [r7, #20]
 8013b6c:	2b00      	cmp	r3, #0
 8013b6e:	d066      	beq.n	8013c3e <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8013b70:	697b      	ldr	r3, [r7, #20]
 8013b72:	685b      	ldr	r3, [r3, #4]
 8013b74:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8013b76:	89b8      	ldrh	r0, [r7, #12]
 8013b78:	693b      	ldr	r3, [r7, #16]
 8013b7a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013b7e:	2302      	movs	r3, #2
 8013b80:	2239      	movs	r2, #57	; 0x39
 8013b82:	f000 f949 	bl	8013e18 <dhcp_option>
 8013b86:	4603      	mov	r3, r0
 8013b88:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 8013b8a:	89b8      	ldrh	r0, [r7, #12]
 8013b8c:	693b      	ldr	r3, [r7, #16]
 8013b8e:	33f0      	adds	r3, #240	; 0xf0
 8013b90:	f44f 7210 	mov.w	r2, #576	; 0x240
 8013b94:	4619      	mov	r1, r3
 8013b96:	f000 f999 	bl	8013ecc <dhcp_option_short>
 8013b9a:	4603      	mov	r3, r0
 8013b9c:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8013b9e:	89b8      	ldrh	r0, [r7, #12]
 8013ba0:	693b      	ldr	r3, [r7, #16]
 8013ba2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013ba6:	2304      	movs	r3, #4
 8013ba8:	2232      	movs	r2, #50	; 0x32
 8013baa:	f000 f935 	bl	8013e18 <dhcp_option>
 8013bae:	4603      	mov	r3, r0
 8013bb0:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8013bb2:	89bc      	ldrh	r4, [r7, #12]
 8013bb4:	693b      	ldr	r3, [r7, #16]
 8013bb6:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8013bba:	69bb      	ldr	r3, [r7, #24]
 8013bbc:	69db      	ldr	r3, [r3, #28]
 8013bbe:	4618      	mov	r0, r3
 8013bc0:	f7f6 fad9 	bl	800a176 <lwip_htonl>
 8013bc4:	4603      	mov	r3, r0
 8013bc6:	461a      	mov	r2, r3
 8013bc8:	4629      	mov	r1, r5
 8013bca:	4620      	mov	r0, r4
 8013bcc:	f000 f9b0 	bl	8013f30 <dhcp_option_long>
 8013bd0:	4603      	mov	r3, r0
 8013bd2:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8013bd4:	89b8      	ldrh	r0, [r7, #12]
 8013bd6:	693b      	ldr	r3, [r7, #16]
 8013bd8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013bdc:	2303      	movs	r3, #3
 8013bde:	2237      	movs	r2, #55	; 0x37
 8013be0:	f000 f91a 	bl	8013e18 <dhcp_option>
 8013be4:	4603      	mov	r3, r0
 8013be6:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8013be8:	2300      	movs	r3, #0
 8013bea:	77bb      	strb	r3, [r7, #30]
 8013bec:	e00e      	b.n	8013c0c <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8013bee:	89b8      	ldrh	r0, [r7, #12]
 8013bf0:	693b      	ldr	r3, [r7, #16]
 8013bf2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013bf6:	7fbb      	ldrb	r3, [r7, #30]
 8013bf8:	4a29      	ldr	r2, [pc, #164]	; (8013ca0 <dhcp_reboot+0x15c>)
 8013bfa:	5cd3      	ldrb	r3, [r2, r3]
 8013bfc:	461a      	mov	r2, r3
 8013bfe:	f000 f93f 	bl	8013e80 <dhcp_option_byte>
 8013c02:	4603      	mov	r3, r0
 8013c04:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8013c06:	7fbb      	ldrb	r3, [r7, #30]
 8013c08:	3301      	adds	r3, #1
 8013c0a:	77bb      	strb	r3, [r7, #30]
 8013c0c:	7fbb      	ldrb	r3, [r7, #30]
 8013c0e:	2b02      	cmp	r3, #2
 8013c10:	d9ed      	bls.n	8013bee <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8013c12:	89b8      	ldrh	r0, [r7, #12]
 8013c14:	693b      	ldr	r3, [r7, #16]
 8013c16:	33f0      	adds	r3, #240	; 0xf0
 8013c18:	697a      	ldr	r2, [r7, #20]
 8013c1a:	4619      	mov	r1, r3
 8013c1c:	f000 fe44 	bl	80148a8 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8013c20:	4b20      	ldr	r3, [pc, #128]	; (8013ca4 <dhcp_reboot+0x160>)
 8013c22:	6818      	ldr	r0, [r3, #0]
 8013c24:	687b      	ldr	r3, [r7, #4]
 8013c26:	9300      	str	r3, [sp, #0]
 8013c28:	2343      	movs	r3, #67	; 0x43
 8013c2a:	4a1f      	ldr	r2, [pc, #124]	; (8013ca8 <dhcp_reboot+0x164>)
 8013c2c:	6979      	ldr	r1, [r7, #20]
 8013c2e:	f7fe fcf7 	bl	8012620 <udp_sendto_if>
 8013c32:	4603      	mov	r3, r0
 8013c34:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8013c36:	6978      	ldr	r0, [r7, #20]
 8013c38:	f7f7 fe86 	bl	800b948 <pbuf_free>
 8013c3c:	e001      	b.n	8013c42 <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8013c3e:	23ff      	movs	r3, #255	; 0xff
 8013c40:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8013c42:	69bb      	ldr	r3, [r7, #24]
 8013c44:	799b      	ldrb	r3, [r3, #6]
 8013c46:	2bff      	cmp	r3, #255	; 0xff
 8013c48:	d005      	beq.n	8013c56 <dhcp_reboot+0x112>
    dhcp->tries++;
 8013c4a:	69bb      	ldr	r3, [r7, #24]
 8013c4c:	799b      	ldrb	r3, [r3, #6]
 8013c4e:	3301      	adds	r3, #1
 8013c50:	b2da      	uxtb	r2, r3
 8013c52:	69bb      	ldr	r3, [r7, #24]
 8013c54:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8013c56:	69bb      	ldr	r3, [r7, #24]
 8013c58:	799b      	ldrb	r3, [r3, #6]
 8013c5a:	2b09      	cmp	r3, #9
 8013c5c:	d80a      	bhi.n	8013c74 <dhcp_reboot+0x130>
 8013c5e:	69bb      	ldr	r3, [r7, #24]
 8013c60:	799b      	ldrb	r3, [r3, #6]
 8013c62:	b29b      	uxth	r3, r3
 8013c64:	461a      	mov	r2, r3
 8013c66:	0152      	lsls	r2, r2, #5
 8013c68:	1ad2      	subs	r2, r2, r3
 8013c6a:	0092      	lsls	r2, r2, #2
 8013c6c:	4413      	add	r3, r2
 8013c6e:	00db      	lsls	r3, r3, #3
 8013c70:	b29b      	uxth	r3, r3
 8013c72:	e001      	b.n	8013c78 <dhcp_reboot+0x134>
 8013c74:	f242 7310 	movw	r3, #10000	; 0x2710
 8013c78:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8013c7a:	89fb      	ldrh	r3, [r7, #14]
 8013c7c:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8013c80:	4a0a      	ldr	r2, [pc, #40]	; (8013cac <dhcp_reboot+0x168>)
 8013c82:	fb82 1203 	smull	r1, r2, r2, r3
 8013c86:	1152      	asrs	r2, r2, #5
 8013c88:	17db      	asrs	r3, r3, #31
 8013c8a:	1ad3      	subs	r3, r2, r3
 8013c8c:	b29a      	uxth	r2, r3
 8013c8e:	69bb      	ldr	r3, [r7, #24]
 8013c90:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8013c92:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8013c96:	4618      	mov	r0, r3
 8013c98:	3720      	adds	r7, #32
 8013c9a:	46bd      	mov	sp, r7
 8013c9c:	bdb0      	pop	{r4, r5, r7, pc}
 8013c9e:	bf00      	nop
 8013ca0:	20000030 	.word	0x20000030
 8013ca4:	200109c0 	.word	0x200109c0
 8013ca8:	0801bf9c 	.word	0x0801bf9c
 8013cac:	10624dd3 	.word	0x10624dd3

08013cb0 <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 8013cb0:	b5b0      	push	{r4, r5, r7, lr}
 8013cb2:	b08a      	sub	sp, #40	; 0x28
 8013cb4:	af02      	add	r7, sp, #8
 8013cb6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013cb8:	687b      	ldr	r3, [r7, #4]
 8013cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013cbc:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 8013cbe:	69fb      	ldr	r3, [r7, #28]
 8013cc0:	2b00      	cmp	r3, #0
 8013cc2:	f000 8084 	beq.w	8013dce <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 8013cc6:	69fb      	ldr	r3, [r7, #28]
 8013cc8:	795b      	ldrb	r3, [r3, #5]
 8013cca:	2b00      	cmp	r3, #0
 8013ccc:	f000 8081 	beq.w	8013dd2 <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 8013cd0:	69fb      	ldr	r3, [r7, #28]
 8013cd2:	699b      	ldr	r3, [r3, #24]
 8013cd4:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 8013cd6:	69fb      	ldr	r3, [r7, #28]
 8013cd8:	2200      	movs	r2, #0
 8013cda:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 8013cdc:	69fb      	ldr	r3, [r7, #28]
 8013cde:	2200      	movs	r2, #0
 8013ce0:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8013ce2:	69fb      	ldr	r3, [r7, #28]
 8013ce4:	2200      	movs	r2, #0
 8013ce6:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8013ce8:	69fb      	ldr	r3, [r7, #28]
 8013cea:	2200      	movs	r2, #0
 8013cec:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 8013cee:	69fb      	ldr	r3, [r7, #28]
 8013cf0:	2200      	movs	r2, #0
 8013cf2:	631a      	str	r2, [r3, #48]	; 0x30
 8013cf4:	69fb      	ldr	r3, [r7, #28]
 8013cf6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013cf8:	69fb      	ldr	r3, [r7, #28]
 8013cfa:	62da      	str	r2, [r3, #44]	; 0x2c
 8013cfc:	69fb      	ldr	r3, [r7, #28]
 8013cfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013d00:	69fb      	ldr	r3, [r7, #28]
 8013d02:	629a      	str	r2, [r3, #40]	; 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 8013d04:	69fb      	ldr	r3, [r7, #28]
 8013d06:	2200      	movs	r2, #0
 8013d08:	829a      	strh	r2, [r3, #20]
 8013d0a:	69fb      	ldr	r3, [r7, #28]
 8013d0c:	8a9a      	ldrh	r2, [r3, #20]
 8013d0e:	69fb      	ldr	r3, [r7, #28]
 8013d10:	825a      	strh	r2, [r3, #18]
 8013d12:	69fb      	ldr	r3, [r7, #28]
 8013d14:	8a5a      	ldrh	r2, [r3, #18]
 8013d16:	69fb      	ldr	r3, [r7, #28]
 8013d18:	821a      	strh	r2, [r3, #16]
 8013d1a:	69fb      	ldr	r3, [r7, #28]
 8013d1c:	8a1a      	ldrh	r2, [r3, #16]
 8013d1e:	69fb      	ldr	r3, [r7, #28]
 8013d20:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 8013d22:	6878      	ldr	r0, [r7, #4]
 8013d24:	f000 fdee 	bl	8014904 <dhcp_supplied_address>
 8013d28:	4603      	mov	r3, r0
 8013d2a:	2b00      	cmp	r3, #0
 8013d2c:	d03b      	beq.n	8013da6 <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 8013d2e:	f107 030e 	add.w	r3, r7, #14
 8013d32:	2207      	movs	r2, #7
 8013d34:	69f9      	ldr	r1, [r7, #28]
 8013d36:	6878      	ldr	r0, [r7, #4]
 8013d38:	f000 fce0 	bl	80146fc <dhcp_create_msg>
 8013d3c:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 8013d3e:	69bb      	ldr	r3, [r7, #24]
 8013d40:	2b00      	cmp	r3, #0
 8013d42:	d030      	beq.n	8013da6 <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8013d44:	69bb      	ldr	r3, [r7, #24]
 8013d46:	685b      	ldr	r3, [r3, #4]
 8013d48:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8013d4a:	89f8      	ldrh	r0, [r7, #14]
 8013d4c:	697b      	ldr	r3, [r7, #20]
 8013d4e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013d52:	2304      	movs	r3, #4
 8013d54:	2236      	movs	r2, #54	; 0x36
 8013d56:	f000 f85f 	bl	8013e18 <dhcp_option>
 8013d5a:	4603      	mov	r3, r0
 8013d5c:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 8013d5e:	89fc      	ldrh	r4, [r7, #14]
 8013d60:	697b      	ldr	r3, [r7, #20]
 8013d62:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8013d66:	693b      	ldr	r3, [r7, #16]
 8013d68:	4618      	mov	r0, r3
 8013d6a:	f7f6 fa04 	bl	800a176 <lwip_htonl>
 8013d6e:	4603      	mov	r3, r0
 8013d70:	461a      	mov	r2, r3
 8013d72:	4629      	mov	r1, r5
 8013d74:	4620      	mov	r0, r4
 8013d76:	f000 f8db 	bl	8013f30 <dhcp_option_long>
 8013d7a:	4603      	mov	r3, r0
 8013d7c:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8013d7e:	89f8      	ldrh	r0, [r7, #14]
 8013d80:	697b      	ldr	r3, [r7, #20]
 8013d82:	33f0      	adds	r3, #240	; 0xf0
 8013d84:	69ba      	ldr	r2, [r7, #24]
 8013d86:	4619      	mov	r1, r3
 8013d88:	f000 fd8e 	bl	80148a8 <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8013d8c:	4b13      	ldr	r3, [pc, #76]	; (8013ddc <dhcp_release_and_stop+0x12c>)
 8013d8e:	6818      	ldr	r0, [r3, #0]
 8013d90:	f107 0210 	add.w	r2, r7, #16
 8013d94:	687b      	ldr	r3, [r7, #4]
 8013d96:	9300      	str	r3, [sp, #0]
 8013d98:	2343      	movs	r3, #67	; 0x43
 8013d9a:	69b9      	ldr	r1, [r7, #24]
 8013d9c:	f7fe fc40 	bl	8012620 <udp_sendto_if>
      pbuf_free(p_out);
 8013da0:	69b8      	ldr	r0, [r7, #24]
 8013da2:	f7f7 fdd1 	bl	800b948 <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8013da6:	4b0e      	ldr	r3, [pc, #56]	; (8013de0 <dhcp_release_and_stop+0x130>)
 8013da8:	4a0d      	ldr	r2, [pc, #52]	; (8013de0 <dhcp_release_and_stop+0x130>)
 8013daa:	490d      	ldr	r1, [pc, #52]	; (8013de0 <dhcp_release_and_stop+0x130>)
 8013dac:	6878      	ldr	r0, [r7, #4]
 8013dae:	f7f7 f8bd 	bl	800af2c <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 8013db2:	2100      	movs	r1, #0
 8013db4:	69f8      	ldr	r0, [r7, #28]
 8013db6:	f000 f815 	bl	8013de4 <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 8013dba:	69fb      	ldr	r3, [r7, #28]
 8013dbc:	791b      	ldrb	r3, [r3, #4]
 8013dbe:	2b00      	cmp	r3, #0
 8013dc0:	d008      	beq.n	8013dd4 <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8013dc2:	f7fe ff85 	bl	8012cd0 <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 8013dc6:	69fb      	ldr	r3, [r7, #28]
 8013dc8:	2200      	movs	r2, #0
 8013dca:	711a      	strb	r2, [r3, #4]
 8013dcc:	e002      	b.n	8013dd4 <dhcp_release_and_stop+0x124>
    return;
 8013dce:	bf00      	nop
 8013dd0:	e000      	b.n	8013dd4 <dhcp_release_and_stop+0x124>
    return;
 8013dd2:	bf00      	nop
  }
}
 8013dd4:	3720      	adds	r7, #32
 8013dd6:	46bd      	mov	sp, r7
 8013dd8:	bdb0      	pop	{r4, r5, r7, pc}
 8013dda:	bf00      	nop
 8013ddc:	200109c0 	.word	0x200109c0
 8013de0:	0801bf98 	.word	0x0801bf98

08013de4 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 8013de4:	b480      	push	{r7}
 8013de6:	b083      	sub	sp, #12
 8013de8:	af00      	add	r7, sp, #0
 8013dea:	6078      	str	r0, [r7, #4]
 8013dec:	460b      	mov	r3, r1
 8013dee:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 8013df0:	687b      	ldr	r3, [r7, #4]
 8013df2:	795b      	ldrb	r3, [r3, #5]
 8013df4:	78fa      	ldrb	r2, [r7, #3]
 8013df6:	429a      	cmp	r2, r3
 8013df8:	d008      	beq.n	8013e0c <dhcp_set_state+0x28>
    dhcp->state = new_state;
 8013dfa:	687b      	ldr	r3, [r7, #4]
 8013dfc:	78fa      	ldrb	r2, [r7, #3]
 8013dfe:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 8013e00:	687b      	ldr	r3, [r7, #4]
 8013e02:	2200      	movs	r2, #0
 8013e04:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 8013e06:	687b      	ldr	r3, [r7, #4]
 8013e08:	2200      	movs	r2, #0
 8013e0a:	811a      	strh	r2, [r3, #8]
  }
}
 8013e0c:	bf00      	nop
 8013e0e:	370c      	adds	r7, #12
 8013e10:	46bd      	mov	sp, r7
 8013e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e16:	4770      	bx	lr

08013e18 <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 8013e18:	b580      	push	{r7, lr}
 8013e1a:	b082      	sub	sp, #8
 8013e1c:	af00      	add	r7, sp, #0
 8013e1e:	6039      	str	r1, [r7, #0]
 8013e20:	4611      	mov	r1, r2
 8013e22:	461a      	mov	r2, r3
 8013e24:	4603      	mov	r3, r0
 8013e26:	80fb      	strh	r3, [r7, #6]
 8013e28:	460b      	mov	r3, r1
 8013e2a:	717b      	strb	r3, [r7, #5]
 8013e2c:	4613      	mov	r3, r2
 8013e2e:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8013e30:	88fa      	ldrh	r2, [r7, #6]
 8013e32:	793b      	ldrb	r3, [r7, #4]
 8013e34:	4413      	add	r3, r2
 8013e36:	3302      	adds	r3, #2
 8013e38:	2b44      	cmp	r3, #68	; 0x44
 8013e3a:	d906      	bls.n	8013e4a <dhcp_option+0x32>
 8013e3c:	4b0d      	ldr	r3, [pc, #52]	; (8013e74 <dhcp_option+0x5c>)
 8013e3e:	f240 529a 	movw	r2, #1434	; 0x59a
 8013e42:	490d      	ldr	r1, [pc, #52]	; (8013e78 <dhcp_option+0x60>)
 8013e44:	480d      	ldr	r0, [pc, #52]	; (8013e7c <dhcp_option+0x64>)
 8013e46:	f003 fc25 	bl	8017694 <iprintf>
  options[options_out_len++] = option_type;
 8013e4a:	88fb      	ldrh	r3, [r7, #6]
 8013e4c:	1c5a      	adds	r2, r3, #1
 8013e4e:	80fa      	strh	r2, [r7, #6]
 8013e50:	461a      	mov	r2, r3
 8013e52:	683b      	ldr	r3, [r7, #0]
 8013e54:	4413      	add	r3, r2
 8013e56:	797a      	ldrb	r2, [r7, #5]
 8013e58:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 8013e5a:	88fb      	ldrh	r3, [r7, #6]
 8013e5c:	1c5a      	adds	r2, r3, #1
 8013e5e:	80fa      	strh	r2, [r7, #6]
 8013e60:	461a      	mov	r2, r3
 8013e62:	683b      	ldr	r3, [r7, #0]
 8013e64:	4413      	add	r3, r2
 8013e66:	793a      	ldrb	r2, [r7, #4]
 8013e68:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8013e6a:	88fb      	ldrh	r3, [r7, #6]
}
 8013e6c:	4618      	mov	r0, r3
 8013e6e:	3708      	adds	r7, #8
 8013e70:	46bd      	mov	sp, r7
 8013e72:	bd80      	pop	{r7, pc}
 8013e74:	0801b3ec 	.word	0x0801b3ec
 8013e78:	0801b580 	.word	0x0801b580
 8013e7c:	0801b44c 	.word	0x0801b44c

08013e80 <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 8013e80:	b580      	push	{r7, lr}
 8013e82:	b082      	sub	sp, #8
 8013e84:	af00      	add	r7, sp, #0
 8013e86:	4603      	mov	r3, r0
 8013e88:	6039      	str	r1, [r7, #0]
 8013e8a:	80fb      	strh	r3, [r7, #6]
 8013e8c:	4613      	mov	r3, r2
 8013e8e:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8013e90:	88fb      	ldrh	r3, [r7, #6]
 8013e92:	2b43      	cmp	r3, #67	; 0x43
 8013e94:	d906      	bls.n	8013ea4 <dhcp_option_byte+0x24>
 8013e96:	4b0a      	ldr	r3, [pc, #40]	; (8013ec0 <dhcp_option_byte+0x40>)
 8013e98:	f240 52a6 	movw	r2, #1446	; 0x5a6
 8013e9c:	4909      	ldr	r1, [pc, #36]	; (8013ec4 <dhcp_option_byte+0x44>)
 8013e9e:	480a      	ldr	r0, [pc, #40]	; (8013ec8 <dhcp_option_byte+0x48>)
 8013ea0:	f003 fbf8 	bl	8017694 <iprintf>
  options[options_out_len++] = value;
 8013ea4:	88fb      	ldrh	r3, [r7, #6]
 8013ea6:	1c5a      	adds	r2, r3, #1
 8013ea8:	80fa      	strh	r2, [r7, #6]
 8013eaa:	461a      	mov	r2, r3
 8013eac:	683b      	ldr	r3, [r7, #0]
 8013eae:	4413      	add	r3, r2
 8013eb0:	797a      	ldrb	r2, [r7, #5]
 8013eb2:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8013eb4:	88fb      	ldrh	r3, [r7, #6]
}
 8013eb6:	4618      	mov	r0, r3
 8013eb8:	3708      	adds	r7, #8
 8013eba:	46bd      	mov	sp, r7
 8013ebc:	bd80      	pop	{r7, pc}
 8013ebe:	bf00      	nop
 8013ec0:	0801b3ec 	.word	0x0801b3ec
 8013ec4:	0801b5c4 	.word	0x0801b5c4
 8013ec8:	0801b44c 	.word	0x0801b44c

08013ecc <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 8013ecc:	b580      	push	{r7, lr}
 8013ece:	b082      	sub	sp, #8
 8013ed0:	af00      	add	r7, sp, #0
 8013ed2:	4603      	mov	r3, r0
 8013ed4:	6039      	str	r1, [r7, #0]
 8013ed6:	80fb      	strh	r3, [r7, #6]
 8013ed8:	4613      	mov	r3, r2
 8013eda:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8013edc:	88fb      	ldrh	r3, [r7, #6]
 8013ede:	3302      	adds	r3, #2
 8013ee0:	2b44      	cmp	r3, #68	; 0x44
 8013ee2:	d906      	bls.n	8013ef2 <dhcp_option_short+0x26>
 8013ee4:	4b0f      	ldr	r3, [pc, #60]	; (8013f24 <dhcp_option_short+0x58>)
 8013ee6:	f240 52ae 	movw	r2, #1454	; 0x5ae
 8013eea:	490f      	ldr	r1, [pc, #60]	; (8013f28 <dhcp_option_short+0x5c>)
 8013eec:	480f      	ldr	r0, [pc, #60]	; (8013f2c <dhcp_option_short+0x60>)
 8013eee:	f003 fbd1 	bl	8017694 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 8013ef2:	88bb      	ldrh	r3, [r7, #4]
 8013ef4:	0a1b      	lsrs	r3, r3, #8
 8013ef6:	b29a      	uxth	r2, r3
 8013ef8:	88fb      	ldrh	r3, [r7, #6]
 8013efa:	1c59      	adds	r1, r3, #1
 8013efc:	80f9      	strh	r1, [r7, #6]
 8013efe:	4619      	mov	r1, r3
 8013f00:	683b      	ldr	r3, [r7, #0]
 8013f02:	440b      	add	r3, r1
 8013f04:	b2d2      	uxtb	r2, r2
 8013f06:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 8013f08:	88fb      	ldrh	r3, [r7, #6]
 8013f0a:	1c5a      	adds	r2, r3, #1
 8013f0c:	80fa      	strh	r2, [r7, #6]
 8013f0e:	461a      	mov	r2, r3
 8013f10:	683b      	ldr	r3, [r7, #0]
 8013f12:	4413      	add	r3, r2
 8013f14:	88ba      	ldrh	r2, [r7, #4]
 8013f16:	b2d2      	uxtb	r2, r2
 8013f18:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8013f1a:	88fb      	ldrh	r3, [r7, #6]
}
 8013f1c:	4618      	mov	r0, r3
 8013f1e:	3708      	adds	r7, #8
 8013f20:	46bd      	mov	sp, r7
 8013f22:	bd80      	pop	{r7, pc}
 8013f24:	0801b3ec 	.word	0x0801b3ec
 8013f28:	0801b5fc 	.word	0x0801b5fc
 8013f2c:	0801b44c 	.word	0x0801b44c

08013f30 <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 8013f30:	b580      	push	{r7, lr}
 8013f32:	b084      	sub	sp, #16
 8013f34:	af00      	add	r7, sp, #0
 8013f36:	4603      	mov	r3, r0
 8013f38:	60b9      	str	r1, [r7, #8]
 8013f3a:	607a      	str	r2, [r7, #4]
 8013f3c:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 8013f3e:	89fb      	ldrh	r3, [r7, #14]
 8013f40:	3304      	adds	r3, #4
 8013f42:	2b44      	cmp	r3, #68	; 0x44
 8013f44:	d906      	bls.n	8013f54 <dhcp_option_long+0x24>
 8013f46:	4b19      	ldr	r3, [pc, #100]	; (8013fac <dhcp_option_long+0x7c>)
 8013f48:	f240 52b7 	movw	r2, #1463	; 0x5b7
 8013f4c:	4918      	ldr	r1, [pc, #96]	; (8013fb0 <dhcp_option_long+0x80>)
 8013f4e:	4819      	ldr	r0, [pc, #100]	; (8013fb4 <dhcp_option_long+0x84>)
 8013f50:	f003 fba0 	bl	8017694 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 8013f54:	687b      	ldr	r3, [r7, #4]
 8013f56:	0e1a      	lsrs	r2, r3, #24
 8013f58:	89fb      	ldrh	r3, [r7, #14]
 8013f5a:	1c59      	adds	r1, r3, #1
 8013f5c:	81f9      	strh	r1, [r7, #14]
 8013f5e:	4619      	mov	r1, r3
 8013f60:	68bb      	ldr	r3, [r7, #8]
 8013f62:	440b      	add	r3, r1
 8013f64:	b2d2      	uxtb	r2, r2
 8013f66:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 8013f68:	687b      	ldr	r3, [r7, #4]
 8013f6a:	0c1a      	lsrs	r2, r3, #16
 8013f6c:	89fb      	ldrh	r3, [r7, #14]
 8013f6e:	1c59      	adds	r1, r3, #1
 8013f70:	81f9      	strh	r1, [r7, #14]
 8013f72:	4619      	mov	r1, r3
 8013f74:	68bb      	ldr	r3, [r7, #8]
 8013f76:	440b      	add	r3, r1
 8013f78:	b2d2      	uxtb	r2, r2
 8013f7a:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 8013f7c:	687b      	ldr	r3, [r7, #4]
 8013f7e:	0a1a      	lsrs	r2, r3, #8
 8013f80:	89fb      	ldrh	r3, [r7, #14]
 8013f82:	1c59      	adds	r1, r3, #1
 8013f84:	81f9      	strh	r1, [r7, #14]
 8013f86:	4619      	mov	r1, r3
 8013f88:	68bb      	ldr	r3, [r7, #8]
 8013f8a:	440b      	add	r3, r1
 8013f8c:	b2d2      	uxtb	r2, r2
 8013f8e:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 8013f90:	89fb      	ldrh	r3, [r7, #14]
 8013f92:	1c5a      	adds	r2, r3, #1
 8013f94:	81fa      	strh	r2, [r7, #14]
 8013f96:	461a      	mov	r2, r3
 8013f98:	68bb      	ldr	r3, [r7, #8]
 8013f9a:	4413      	add	r3, r2
 8013f9c:	687a      	ldr	r2, [r7, #4]
 8013f9e:	b2d2      	uxtb	r2, r2
 8013fa0:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8013fa2:	89fb      	ldrh	r3, [r7, #14]
}
 8013fa4:	4618      	mov	r0, r3
 8013fa6:	3710      	adds	r7, #16
 8013fa8:	46bd      	mov	sp, r7
 8013faa:	bd80      	pop	{r7, pc}
 8013fac:	0801b3ec 	.word	0x0801b3ec
 8013fb0:	0801b638 	.word	0x0801b638
 8013fb4:	0801b44c 	.word	0x0801b44c

08013fb8 <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 8013fb8:	b580      	push	{r7, lr}
 8013fba:	b090      	sub	sp, #64	; 0x40
 8013fbc:	af00      	add	r7, sp, #0
 8013fbe:	6078      	str	r0, [r7, #4]
 8013fc0:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 8013fc2:	2300      	movs	r3, #0
 8013fc4:	62fb      	str	r3, [r7, #44]	; 0x2c
  int parse_sname_as_options = 0;
 8013fc6:	2300      	movs	r3, #0
 8013fc8:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 8013fca:	2208      	movs	r2, #8
 8013fcc:	2100      	movs	r1, #0
 8013fce:	48b5      	ldr	r0, [pc, #724]	; (80142a4 <dhcp_parse_reply+0x2ec>)
 8013fd0:	f003 fac3 	bl	801755a <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 8013fd4:	687b      	ldr	r3, [r7, #4]
 8013fd6:	895b      	ldrh	r3, [r3, #10]
 8013fd8:	2b2b      	cmp	r3, #43	; 0x2b
 8013fda:	d802      	bhi.n	8013fe2 <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 8013fdc:	f06f 0301 	mvn.w	r3, #1
 8013fe0:	e2a7      	b.n	8014532 <dhcp_parse_reply+0x57a>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 8013fe2:	687b      	ldr	r3, [r7, #4]
 8013fe4:	685b      	ldr	r3, [r3, #4]
 8013fe6:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 8013fe8:	23f0      	movs	r3, #240	; 0xf0
 8013fea:	86fb      	strh	r3, [r7, #54]	; 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 8013fec:	687b      	ldr	r3, [r7, #4]
 8013fee:	891b      	ldrh	r3, [r3, #8]
 8013ff0:	86bb      	strh	r3, [r7, #52]	; 0x34
again:
  q = p;
 8013ff2:	687b      	ldr	r3, [r7, #4]
 8013ff4:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 8013ff6:	e00c      	b.n	8014012 <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 8013ff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ffa:	895b      	ldrh	r3, [r3, #10]
 8013ffc:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8013ffe:	1ad3      	subs	r3, r2, r3
 8014000:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 8014002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014004:	895b      	ldrh	r3, [r3, #10]
 8014006:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8014008:	1ad3      	subs	r3, r2, r3
 801400a:	86bb      	strh	r3, [r7, #52]	; 0x34
    q = q->next;
 801400c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801400e:	681b      	ldr	r3, [r3, #0]
 8014010:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 8014012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014014:	2b00      	cmp	r3, #0
 8014016:	d004      	beq.n	8014022 <dhcp_parse_reply+0x6a>
 8014018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801401a:	895b      	ldrh	r3, [r3, #10]
 801401c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801401e:	429a      	cmp	r2, r3
 8014020:	d2ea      	bcs.n	8013ff8 <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 8014022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014024:	2b00      	cmp	r3, #0
 8014026:	d102      	bne.n	801402e <dhcp_parse_reply+0x76>
    return ERR_BUF;
 8014028:	f06f 0301 	mvn.w	r3, #1
 801402c:	e281      	b.n	8014532 <dhcp_parse_reply+0x57a>
  }
  offset = options_idx;
 801402e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8014030:	877b      	strh	r3, [r7, #58]	; 0x3a
  offset_max = options_idx_max;
 8014032:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8014034:	873b      	strh	r3, [r7, #56]	; 0x38
  options = (u8_t *)q->payload;
 8014036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014038:	685b      	ldr	r3, [r3, #4]
 801403a:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 801403c:	e239      	b.n	80144b2 <dhcp_parse_reply+0x4fa>
    u8_t op = options[offset];
 801403e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8014040:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8014042:	4413      	add	r3, r2
 8014044:	781b      	ldrb	r3, [r3, #0]
 8014046:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 8014048:	2300      	movs	r3, #0
 801404a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    int decode_idx = -1;
 801404e:	f04f 33ff 	mov.w	r3, #4294967295
 8014052:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 8014054:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8014056:	3302      	adds	r3, #2
 8014058:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 801405a:	8bfa      	ldrh	r2, [r7, #30]
 801405c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801405e:	429a      	cmp	r2, r3
 8014060:	d202      	bcs.n	8014068 <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 8014062:	f06f 0301 	mvn.w	r3, #1
 8014066:	e264      	b.n	8014532 <dhcp_parse_reply+0x57a>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 8014068:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801406a:	3301      	adds	r3, #1
 801406c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801406e:	8952      	ldrh	r2, [r2, #10]
 8014070:	4293      	cmp	r3, r2
 8014072:	da07      	bge.n	8014084 <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 8014074:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8014076:	3301      	adds	r3, #1
 8014078:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801407a:	4413      	add	r3, r2
 801407c:	781b      	ldrb	r3, [r3, #0]
 801407e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8014082:	e00b      	b.n	801409c <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 8014084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014086:	681b      	ldr	r3, [r3, #0]
 8014088:	2b00      	cmp	r3, #0
 801408a:	d004      	beq.n	8014096 <dhcp_parse_reply+0xde>
 801408c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801408e:	681b      	ldr	r3, [r3, #0]
 8014090:	685b      	ldr	r3, [r3, #4]
 8014092:	781b      	ldrb	r3, [r3, #0]
 8014094:	e000      	b.n	8014098 <dhcp_parse_reply+0xe0>
 8014096:	2300      	movs	r3, #0
 8014098:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 801409c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80140a0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    switch (op) {
 80140a4:	7dfb      	ldrb	r3, [r7, #23]
 80140a6:	2b3b      	cmp	r3, #59	; 0x3b
 80140a8:	f200 812c 	bhi.w	8014304 <dhcp_parse_reply+0x34c>
 80140ac:	a201      	add	r2, pc, #4	; (adr r2, 80140b4 <dhcp_parse_reply+0xfc>)
 80140ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80140b2:	bf00      	nop
 80140b4:	080141a5 	.word	0x080141a5
 80140b8:	080141b5 	.word	0x080141b5
 80140bc:	08014305 	.word	0x08014305
 80140c0:	080141d7 	.word	0x080141d7
 80140c4:	08014305 	.word	0x08014305
 80140c8:	08014305 	.word	0x08014305
 80140cc:	08014305 	.word	0x08014305
 80140d0:	08014305 	.word	0x08014305
 80140d4:	08014305 	.word	0x08014305
 80140d8:	08014305 	.word	0x08014305
 80140dc:	08014305 	.word	0x08014305
 80140e0:	08014305 	.word	0x08014305
 80140e4:	08014305 	.word	0x08014305
 80140e8:	08014305 	.word	0x08014305
 80140ec:	08014305 	.word	0x08014305
 80140f0:	08014305 	.word	0x08014305
 80140f4:	08014305 	.word	0x08014305
 80140f8:	08014305 	.word	0x08014305
 80140fc:	08014305 	.word	0x08014305
 8014100:	08014305 	.word	0x08014305
 8014104:	08014305 	.word	0x08014305
 8014108:	08014305 	.word	0x08014305
 801410c:	08014305 	.word	0x08014305
 8014110:	08014305 	.word	0x08014305
 8014114:	08014305 	.word	0x08014305
 8014118:	08014305 	.word	0x08014305
 801411c:	08014305 	.word	0x08014305
 8014120:	08014305 	.word	0x08014305
 8014124:	08014305 	.word	0x08014305
 8014128:	08014305 	.word	0x08014305
 801412c:	08014305 	.word	0x08014305
 8014130:	08014305 	.word	0x08014305
 8014134:	08014305 	.word	0x08014305
 8014138:	08014305 	.word	0x08014305
 801413c:	08014305 	.word	0x08014305
 8014140:	08014305 	.word	0x08014305
 8014144:	08014305 	.word	0x08014305
 8014148:	08014305 	.word	0x08014305
 801414c:	08014305 	.word	0x08014305
 8014150:	08014305 	.word	0x08014305
 8014154:	08014305 	.word	0x08014305
 8014158:	08014305 	.word	0x08014305
 801415c:	08014305 	.word	0x08014305
 8014160:	08014305 	.word	0x08014305
 8014164:	08014305 	.word	0x08014305
 8014168:	08014305 	.word	0x08014305
 801416c:	08014305 	.word	0x08014305
 8014170:	08014305 	.word	0x08014305
 8014174:	08014305 	.word	0x08014305
 8014178:	08014305 	.word	0x08014305
 801417c:	08014305 	.word	0x08014305
 8014180:	08014203 	.word	0x08014203
 8014184:	08014225 	.word	0x08014225
 8014188:	08014261 	.word	0x08014261
 801418c:	08014283 	.word	0x08014283
 8014190:	08014305 	.word	0x08014305
 8014194:	08014305 	.word	0x08014305
 8014198:	08014305 	.word	0x08014305
 801419c:	080142c1 	.word	0x080142c1
 80141a0:	080142e3 	.word	0x080142e3
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 80141a4:	2300      	movs	r3, #0
 80141a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80141aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80141ae:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        /* will be increased below */
        break;
 80141b2:	e0ab      	b.n	801430c <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80141b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80141b8:	2b04      	cmp	r3, #4
 80141ba:	d009      	beq.n	80141d0 <dhcp_parse_reply+0x218>
 80141bc:	4b3a      	ldr	r3, [pc, #232]	; (80142a8 <dhcp_parse_reply+0x2f0>)
 80141be:	f240 622e 	movw	r2, #1582	; 0x62e
 80141c2:	493a      	ldr	r1, [pc, #232]	; (80142ac <dhcp_parse_reply+0x2f4>)
 80141c4:	483a      	ldr	r0, [pc, #232]	; (80142b0 <dhcp_parse_reply+0x2f8>)
 80141c6:	f003 fa65 	bl	8017694 <iprintf>
 80141ca:	f06f 0305 	mvn.w	r3, #5
 80141ce:	e1b0      	b.n	8014532 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 80141d0:	2306      	movs	r3, #6
 80141d2:	623b      	str	r3, [r7, #32]
        break;
 80141d4:	e09a      	b.n	801430c <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 80141d6:	2304      	movs	r3, #4
 80141d8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 80141dc:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80141e0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80141e4:	429a      	cmp	r2, r3
 80141e6:	d209      	bcs.n	80141fc <dhcp_parse_reply+0x244>
 80141e8:	4b2f      	ldr	r3, [pc, #188]	; (80142a8 <dhcp_parse_reply+0x2f0>)
 80141ea:	f240 6233 	movw	r2, #1587	; 0x633
 80141ee:	4931      	ldr	r1, [pc, #196]	; (80142b4 <dhcp_parse_reply+0x2fc>)
 80141f0:	482f      	ldr	r0, [pc, #188]	; (80142b0 <dhcp_parse_reply+0x2f8>)
 80141f2:	f003 fa4f 	bl	8017694 <iprintf>
 80141f6:	f06f 0305 	mvn.w	r3, #5
 80141fa:	e19a      	b.n	8014532 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 80141fc:	2307      	movs	r3, #7
 80141fe:	623b      	str	r3, [r7, #32]
        break;
 8014200:	e084      	b.n	801430c <dhcp_parse_reply+0x354>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8014202:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014206:	2b04      	cmp	r3, #4
 8014208:	d009      	beq.n	801421e <dhcp_parse_reply+0x266>
 801420a:	4b27      	ldr	r3, [pc, #156]	; (80142a8 <dhcp_parse_reply+0x2f0>)
 801420c:	f240 6241 	movw	r2, #1601	; 0x641
 8014210:	4926      	ldr	r1, [pc, #152]	; (80142ac <dhcp_parse_reply+0x2f4>)
 8014212:	4827      	ldr	r0, [pc, #156]	; (80142b0 <dhcp_parse_reply+0x2f8>)
 8014214:	f003 fa3e 	bl	8017694 <iprintf>
 8014218:	f06f 0305 	mvn.w	r3, #5
 801421c:	e189      	b.n	8014532 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 801421e:	2303      	movs	r3, #3
 8014220:	623b      	str	r3, [r7, #32]
        break;
 8014222:	e073      	b.n	801430c <dhcp_parse_reply+0x354>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8014224:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014228:	2b01      	cmp	r3, #1
 801422a:	d009      	beq.n	8014240 <dhcp_parse_reply+0x288>
 801422c:	4b1e      	ldr	r3, [pc, #120]	; (80142a8 <dhcp_parse_reply+0x2f0>)
 801422e:	f240 624f 	movw	r2, #1615	; 0x64f
 8014232:	4921      	ldr	r1, [pc, #132]	; (80142b8 <dhcp_parse_reply+0x300>)
 8014234:	481e      	ldr	r0, [pc, #120]	; (80142b0 <dhcp_parse_reply+0x2f8>)
 8014236:	f003 fa2d 	bl	8017694 <iprintf>
 801423a:	f06f 0305 	mvn.w	r3, #5
 801423e:	e178      	b.n	8014532 <dhcp_parse_reply+0x57a>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 8014240:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8014242:	2bf0      	cmp	r3, #240	; 0xf0
 8014244:	d009      	beq.n	801425a <dhcp_parse_reply+0x2a2>
 8014246:	4b18      	ldr	r3, [pc, #96]	; (80142a8 <dhcp_parse_reply+0x2f0>)
 8014248:	f240 6251 	movw	r2, #1617	; 0x651
 801424c:	491b      	ldr	r1, [pc, #108]	; (80142bc <dhcp_parse_reply+0x304>)
 801424e:	4818      	ldr	r0, [pc, #96]	; (80142b0 <dhcp_parse_reply+0x2f8>)
 8014250:	f003 fa20 	bl	8017694 <iprintf>
 8014254:	f06f 0305 	mvn.w	r3, #5
 8014258:	e16b      	b.n	8014532 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 801425a:	2300      	movs	r3, #0
 801425c:	623b      	str	r3, [r7, #32]
        break;
 801425e:	e055      	b.n	801430c <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8014260:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014264:	2b01      	cmp	r3, #1
 8014266:	d009      	beq.n	801427c <dhcp_parse_reply+0x2c4>
 8014268:	4b0f      	ldr	r3, [pc, #60]	; (80142a8 <dhcp_parse_reply+0x2f0>)
 801426a:	f240 6255 	movw	r2, #1621	; 0x655
 801426e:	4912      	ldr	r1, [pc, #72]	; (80142b8 <dhcp_parse_reply+0x300>)
 8014270:	480f      	ldr	r0, [pc, #60]	; (80142b0 <dhcp_parse_reply+0x2f8>)
 8014272:	f003 fa0f 	bl	8017694 <iprintf>
 8014276:	f06f 0305 	mvn.w	r3, #5
 801427a:	e15a      	b.n	8014532 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 801427c:	2301      	movs	r3, #1
 801427e:	623b      	str	r3, [r7, #32]
        break;
 8014280:	e044      	b.n	801430c <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8014282:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014286:	2b04      	cmp	r3, #4
 8014288:	d009      	beq.n	801429e <dhcp_parse_reply+0x2e6>
 801428a:	4b07      	ldr	r3, [pc, #28]	; (80142a8 <dhcp_parse_reply+0x2f0>)
 801428c:	f240 6259 	movw	r2, #1625	; 0x659
 8014290:	4906      	ldr	r1, [pc, #24]	; (80142ac <dhcp_parse_reply+0x2f4>)
 8014292:	4807      	ldr	r0, [pc, #28]	; (80142b0 <dhcp_parse_reply+0x2f8>)
 8014294:	f003 f9fe 	bl	8017694 <iprintf>
 8014298:	f06f 0305 	mvn.w	r3, #5
 801429c:	e149      	b.n	8014532 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 801429e:	2302      	movs	r3, #2
 80142a0:	623b      	str	r3, [r7, #32]
        break;
 80142a2:	e033      	b.n	801430c <dhcp_parse_reply+0x354>
 80142a4:	200109b8 	.word	0x200109b8
 80142a8:	0801b3ec 	.word	0x0801b3ec
 80142ac:	0801b674 	.word	0x0801b674
 80142b0:	0801b44c 	.word	0x0801b44c
 80142b4:	0801b680 	.word	0x0801b680
 80142b8:	0801b694 	.word	0x0801b694
 80142bc:	0801b6a0 	.word	0x0801b6a0
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80142c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80142c4:	2b04      	cmp	r3, #4
 80142c6:	d009      	beq.n	80142dc <dhcp_parse_reply+0x324>
 80142c8:	4b9c      	ldr	r3, [pc, #624]	; (801453c <dhcp_parse_reply+0x584>)
 80142ca:	f240 625d 	movw	r2, #1629	; 0x65d
 80142ce:	499c      	ldr	r1, [pc, #624]	; (8014540 <dhcp_parse_reply+0x588>)
 80142d0:	489c      	ldr	r0, [pc, #624]	; (8014544 <dhcp_parse_reply+0x58c>)
 80142d2:	f003 f9df 	bl	8017694 <iprintf>
 80142d6:	f06f 0305 	mvn.w	r3, #5
 80142da:	e12a      	b.n	8014532 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_T1;
 80142dc:	2304      	movs	r3, #4
 80142de:	623b      	str	r3, [r7, #32]
        break;
 80142e0:	e014      	b.n	801430c <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80142e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80142e6:	2b04      	cmp	r3, #4
 80142e8:	d009      	beq.n	80142fe <dhcp_parse_reply+0x346>
 80142ea:	4b94      	ldr	r3, [pc, #592]	; (801453c <dhcp_parse_reply+0x584>)
 80142ec:	f240 6261 	movw	r2, #1633	; 0x661
 80142f0:	4993      	ldr	r1, [pc, #588]	; (8014540 <dhcp_parse_reply+0x588>)
 80142f2:	4894      	ldr	r0, [pc, #592]	; (8014544 <dhcp_parse_reply+0x58c>)
 80142f4:	f003 f9ce 	bl	8017694 <iprintf>
 80142f8:	f06f 0305 	mvn.w	r3, #5
 80142fc:	e119      	b.n	8014532 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_T2;
 80142fe:	2305      	movs	r3, #5
 8014300:	623b      	str	r3, [r7, #32]
        break;
 8014302:	e003      	b.n	801430c <dhcp_parse_reply+0x354>
      default:
        decode_len = 0;
 8014304:	2300      	movs	r3, #0
 8014306:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 801430a:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 801430c:	7dfb      	ldrb	r3, [r7, #23]
 801430e:	2b00      	cmp	r3, #0
 8014310:	d103      	bne.n	801431a <dhcp_parse_reply+0x362>
      offset++;
 8014312:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8014314:	3301      	adds	r3, #1
 8014316:	877b      	strh	r3, [r7, #58]	; 0x3a
 8014318:	e0a1      	b.n	801445e <dhcp_parse_reply+0x4a6>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 801431a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801431c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014320:	4413      	add	r3, r2
 8014322:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 8014326:	4293      	cmp	r3, r2
 8014328:	dd02      	ble.n	8014330 <dhcp_parse_reply+0x378>
        /* overflow */
        return ERR_BUF;
 801432a:	f06f 0301 	mvn.w	r3, #1
 801432e:	e100      	b.n	8014532 <dhcp_parse_reply+0x57a>
      }
      offset = (u16_t)(offset + len + 2);
 8014330:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014334:	b29a      	uxth	r2, r3
 8014336:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8014338:	4413      	add	r3, r2
 801433a:	b29b      	uxth	r3, r3
 801433c:	3302      	adds	r3, #2
 801433e:	877b      	strh	r3, [r7, #58]	; 0x3a
      if (decode_len > 0) {
 8014340:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8014344:	2b00      	cmp	r3, #0
 8014346:	f000 808a 	beq.w	801445e <dhcp_parse_reply+0x4a6>
        u32_t value = 0;
 801434a:	2300      	movs	r3, #0
 801434c:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 801434e:	6a3b      	ldr	r3, [r7, #32]
 8014350:	2b00      	cmp	r3, #0
 8014352:	db02      	blt.n	801435a <dhcp_parse_reply+0x3a2>
 8014354:	6a3b      	ldr	r3, [r7, #32]
 8014356:	2b07      	cmp	r3, #7
 8014358:	dd06      	ble.n	8014368 <dhcp_parse_reply+0x3b0>
 801435a:	4b78      	ldr	r3, [pc, #480]	; (801453c <dhcp_parse_reply+0x584>)
 801435c:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 8014360:	4979      	ldr	r1, [pc, #484]	; (8014548 <dhcp_parse_reply+0x590>)
 8014362:	4878      	ldr	r0, [pc, #480]	; (8014544 <dhcp_parse_reply+0x58c>)
 8014364:	f003 f996 	bl	8017694 <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 8014368:	4a78      	ldr	r2, [pc, #480]	; (801454c <dhcp_parse_reply+0x594>)
 801436a:	6a3b      	ldr	r3, [r7, #32]
 801436c:	4413      	add	r3, r2
 801436e:	781b      	ldrb	r3, [r3, #0]
 8014370:	2b00      	cmp	r3, #0
 8014372:	d174      	bne.n	801445e <dhcp_parse_reply+0x4a6>
          copy_len = LWIP_MIN(decode_len, 4);
 8014374:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8014378:	2b04      	cmp	r3, #4
 801437a:	bf28      	it	cs
 801437c:	2304      	movcs	r3, #4
 801437e:	b2db      	uxtb	r3, r3
 8014380:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 8014382:	8bfb      	ldrh	r3, [r7, #30]
 8014384:	8aba      	ldrh	r2, [r7, #20]
 8014386:	f107 0108 	add.w	r1, r7, #8
 801438a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801438c:	f7f7 fce2 	bl	800bd54 <pbuf_copy_partial>
 8014390:	4603      	mov	r3, r0
 8014392:	461a      	mov	r2, r3
 8014394:	8abb      	ldrh	r3, [r7, #20]
 8014396:	4293      	cmp	r3, r2
 8014398:	d002      	beq.n	80143a0 <dhcp_parse_reply+0x3e8>
            return ERR_BUF;
 801439a:	f06f 0301 	mvn.w	r3, #1
 801439e:	e0c8      	b.n	8014532 <dhcp_parse_reply+0x57a>
          }
          if (decode_len > 4) {
 80143a0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80143a4:	2b04      	cmp	r3, #4
 80143a6:	d933      	bls.n	8014410 <dhcp_parse_reply+0x458>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 80143a8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80143ac:	f003 0303 	and.w	r3, r3, #3
 80143b0:	b2db      	uxtb	r3, r3
 80143b2:	2b00      	cmp	r3, #0
 80143b4:	d009      	beq.n	80143ca <dhcp_parse_reply+0x412>
 80143b6:	4b61      	ldr	r3, [pc, #388]	; (801453c <dhcp_parse_reply+0x584>)
 80143b8:	f240 6281 	movw	r2, #1665	; 0x681
 80143bc:	4964      	ldr	r1, [pc, #400]	; (8014550 <dhcp_parse_reply+0x598>)
 80143be:	4861      	ldr	r0, [pc, #388]	; (8014544 <dhcp_parse_reply+0x58c>)
 80143c0:	f003 f968 	bl	8017694 <iprintf>
 80143c4:	f06f 0305 	mvn.w	r3, #5
 80143c8:	e0b3      	b.n	8014532 <dhcp_parse_reply+0x57a>
            dhcp_got_option(dhcp, decode_idx);
 80143ca:	4a60      	ldr	r2, [pc, #384]	; (801454c <dhcp_parse_reply+0x594>)
 80143cc:	6a3b      	ldr	r3, [r7, #32]
 80143ce:	4413      	add	r3, r2
 80143d0:	2201      	movs	r2, #1
 80143d2:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 80143d4:	68bb      	ldr	r3, [r7, #8]
 80143d6:	4618      	mov	r0, r3
 80143d8:	f7f5 fecd 	bl	800a176 <lwip_htonl>
 80143dc:	4602      	mov	r2, r0
 80143de:	495d      	ldr	r1, [pc, #372]	; (8014554 <dhcp_parse_reply+0x59c>)
 80143e0:	6a3b      	ldr	r3, [r7, #32]
 80143e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 80143e6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80143ea:	3b04      	subs	r3, #4
 80143ec:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 80143f0:	8bfb      	ldrh	r3, [r7, #30]
 80143f2:	3304      	adds	r3, #4
 80143f4:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 80143f6:	8a7a      	ldrh	r2, [r7, #18]
 80143f8:	8bfb      	ldrh	r3, [r7, #30]
 80143fa:	429a      	cmp	r2, r3
 80143fc:	d202      	bcs.n	8014404 <dhcp_parse_reply+0x44c>
              /* overflow */
              return ERR_BUF;
 80143fe:	f06f 0301 	mvn.w	r3, #1
 8014402:	e096      	b.n	8014532 <dhcp_parse_reply+0x57a>
            }
            val_offset = next_val_offset;
 8014404:	8a7b      	ldrh	r3, [r7, #18]
 8014406:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 8014408:	6a3b      	ldr	r3, [r7, #32]
 801440a:	3301      	adds	r3, #1
 801440c:	623b      	str	r3, [r7, #32]
            goto decode_next;
 801440e:	e79e      	b.n	801434e <dhcp_parse_reply+0x396>
          } else if (decode_len == 4) {
 8014410:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8014414:	2b04      	cmp	r3, #4
 8014416:	d106      	bne.n	8014426 <dhcp_parse_reply+0x46e>
            value = lwip_ntohl(value);
 8014418:	68bb      	ldr	r3, [r7, #8]
 801441a:	4618      	mov	r0, r3
 801441c:	f7f5 feab 	bl	800a176 <lwip_htonl>
 8014420:	4603      	mov	r3, r0
 8014422:	60bb      	str	r3, [r7, #8]
 8014424:	e011      	b.n	801444a <dhcp_parse_reply+0x492>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 8014426:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801442a:	2b01      	cmp	r3, #1
 801442c:	d009      	beq.n	8014442 <dhcp_parse_reply+0x48a>
 801442e:	4b43      	ldr	r3, [pc, #268]	; (801453c <dhcp_parse_reply+0x584>)
 8014430:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 8014434:	4948      	ldr	r1, [pc, #288]	; (8014558 <dhcp_parse_reply+0x5a0>)
 8014436:	4843      	ldr	r0, [pc, #268]	; (8014544 <dhcp_parse_reply+0x58c>)
 8014438:	f003 f92c 	bl	8017694 <iprintf>
 801443c:	f06f 0305 	mvn.w	r3, #5
 8014440:	e077      	b.n	8014532 <dhcp_parse_reply+0x57a>
            value = ((u8_t *)&value)[0];
 8014442:	f107 0308 	add.w	r3, r7, #8
 8014446:	781b      	ldrb	r3, [r3, #0]
 8014448:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 801444a:	4a40      	ldr	r2, [pc, #256]	; (801454c <dhcp_parse_reply+0x594>)
 801444c:	6a3b      	ldr	r3, [r7, #32]
 801444e:	4413      	add	r3, r2
 8014450:	2201      	movs	r2, #1
 8014452:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 8014454:	68ba      	ldr	r2, [r7, #8]
 8014456:	493f      	ldr	r1, [pc, #252]	; (8014554 <dhcp_parse_reply+0x59c>)
 8014458:	6a3b      	ldr	r3, [r7, #32]
 801445a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 801445e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014460:	895b      	ldrh	r3, [r3, #10]
 8014462:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8014464:	429a      	cmp	r2, r3
 8014466:	d324      	bcc.n	80144b2 <dhcp_parse_reply+0x4fa>
      offset = (u16_t)(offset - q->len);
 8014468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801446a:	895b      	ldrh	r3, [r3, #10]
 801446c:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801446e:	1ad3      	subs	r3, r2, r3
 8014470:	877b      	strh	r3, [r7, #58]	; 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 8014472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014474:	895b      	ldrh	r3, [r3, #10]
 8014476:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8014478:	1ad3      	subs	r3, r2, r3
 801447a:	873b      	strh	r3, [r7, #56]	; 0x38
      if (offset < offset_max) {
 801447c:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801447e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8014480:	429a      	cmp	r2, r3
 8014482:	d213      	bcs.n	80144ac <dhcp_parse_reply+0x4f4>
        q = q->next;
 8014484:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014486:	681b      	ldr	r3, [r3, #0]
 8014488:	633b      	str	r3, [r7, #48]	; 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 801448a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801448c:	2b00      	cmp	r3, #0
 801448e:	d109      	bne.n	80144a4 <dhcp_parse_reply+0x4ec>
 8014490:	4b2a      	ldr	r3, [pc, #168]	; (801453c <dhcp_parse_reply+0x584>)
 8014492:	f240 629d 	movw	r2, #1693	; 0x69d
 8014496:	4931      	ldr	r1, [pc, #196]	; (801455c <dhcp_parse_reply+0x5a4>)
 8014498:	482a      	ldr	r0, [pc, #168]	; (8014544 <dhcp_parse_reply+0x58c>)
 801449a:	f003 f8fb 	bl	8017694 <iprintf>
 801449e:	f06f 0305 	mvn.w	r3, #5
 80144a2:	e046      	b.n	8014532 <dhcp_parse_reply+0x57a>
        options = (u8_t *)q->payload;
 80144a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80144a6:	685b      	ldr	r3, [r3, #4]
 80144a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80144aa:	e002      	b.n	80144b2 <dhcp_parse_reply+0x4fa>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 80144ac:	f06f 0301 	mvn.w	r3, #1
 80144b0:	e03f      	b.n	8014532 <dhcp_parse_reply+0x57a>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 80144b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80144b4:	2b00      	cmp	r3, #0
 80144b6:	d00a      	beq.n	80144ce <dhcp_parse_reply+0x516>
 80144b8:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80144ba:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80144bc:	429a      	cmp	r2, r3
 80144be:	d206      	bcs.n	80144ce <dhcp_parse_reply+0x516>
 80144c0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80144c2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80144c4:	4413      	add	r3, r2
 80144c6:	781b      	ldrb	r3, [r3, #0]
 80144c8:	2bff      	cmp	r3, #255	; 0xff
 80144ca:	f47f adb8 	bne.w	801403e <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 80144ce:	4b1f      	ldr	r3, [pc, #124]	; (801454c <dhcp_parse_reply+0x594>)
 80144d0:	781b      	ldrb	r3, [r3, #0]
 80144d2:	2b00      	cmp	r3, #0
 80144d4:	d018      	beq.n	8014508 <dhcp_parse_reply+0x550>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 80144d6:	4b1f      	ldr	r3, [pc, #124]	; (8014554 <dhcp_parse_reply+0x59c>)
 80144d8:	681b      	ldr	r3, [r3, #0]
 80144da:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 80144dc:	4b1b      	ldr	r3, [pc, #108]	; (801454c <dhcp_parse_reply+0x594>)
 80144de:	2200      	movs	r2, #0
 80144e0:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 80144e2:	68fb      	ldr	r3, [r7, #12]
 80144e4:	2b01      	cmp	r3, #1
 80144e6:	d102      	bne.n	80144ee <dhcp_parse_reply+0x536>
      parse_file_as_options = 1;
 80144e8:	2301      	movs	r3, #1
 80144ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80144ec:	e00c      	b.n	8014508 <dhcp_parse_reply+0x550>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 80144ee:	68fb      	ldr	r3, [r7, #12]
 80144f0:	2b02      	cmp	r3, #2
 80144f2:	d102      	bne.n	80144fa <dhcp_parse_reply+0x542>
      parse_sname_as_options = 1;
 80144f4:	2301      	movs	r3, #1
 80144f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80144f8:	e006      	b.n	8014508 <dhcp_parse_reply+0x550>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 80144fa:	68fb      	ldr	r3, [r7, #12]
 80144fc:	2b03      	cmp	r3, #3
 80144fe:	d103      	bne.n	8014508 <dhcp_parse_reply+0x550>
      parse_sname_as_options = 1;
 8014500:	2301      	movs	r3, #1
 8014502:	62bb      	str	r3, [r7, #40]	; 0x28
      parse_file_as_options = 1;
 8014504:	2301      	movs	r3, #1
 8014506:	62fb      	str	r3, [r7, #44]	; 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 8014508:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801450a:	2b00      	cmp	r3, #0
 801450c:	d006      	beq.n	801451c <dhcp_parse_reply+0x564>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 801450e:	2300      	movs	r3, #0
 8014510:	62fb      	str	r3, [r7, #44]	; 0x2c
    options_idx = DHCP_FILE_OFS;
 8014512:	236c      	movs	r3, #108	; 0x6c
 8014514:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 8014516:	23ec      	movs	r3, #236	; 0xec
 8014518:	86bb      	strh	r3, [r7, #52]	; 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 801451a:	e56a      	b.n	8013ff2 <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 801451c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801451e:	2b00      	cmp	r3, #0
 8014520:	d006      	beq.n	8014530 <dhcp_parse_reply+0x578>
    parse_sname_as_options = 0;
 8014522:	2300      	movs	r3, #0
 8014524:	62bb      	str	r3, [r7, #40]	; 0x28
    options_idx = DHCP_SNAME_OFS;
 8014526:	232c      	movs	r3, #44	; 0x2c
 8014528:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 801452a:	236c      	movs	r3, #108	; 0x6c
 801452c:	86bb      	strh	r3, [r7, #52]	; 0x34
    goto again;
 801452e:	e560      	b.n	8013ff2 <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 8014530:	2300      	movs	r3, #0
}
 8014532:	4618      	mov	r0, r3
 8014534:	3740      	adds	r7, #64	; 0x40
 8014536:	46bd      	mov	sp, r7
 8014538:	bd80      	pop	{r7, pc}
 801453a:	bf00      	nop
 801453c:	0801b3ec 	.word	0x0801b3ec
 8014540:	0801b674 	.word	0x0801b674
 8014544:	0801b44c 	.word	0x0801b44c
 8014548:	0801b6b8 	.word	0x0801b6b8
 801454c:	200109b8 	.word	0x200109b8
 8014550:	0801b6cc 	.word	0x0801b6cc
 8014554:	20010998 	.word	0x20010998
 8014558:	0801b6e4 	.word	0x0801b6e4
 801455c:	0801b6f8 	.word	0x0801b6f8

08014560 <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8014560:	b580      	push	{r7, lr}
 8014562:	b08a      	sub	sp, #40	; 0x28
 8014564:	af00      	add	r7, sp, #0
 8014566:	60f8      	str	r0, [r7, #12]
 8014568:	60b9      	str	r1, [r7, #8]
 801456a:	607a      	str	r2, [r7, #4]
 801456c:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 801456e:	4b60      	ldr	r3, [pc, #384]	; (80146f0 <dhcp_recv+0x190>)
 8014570:	685b      	ldr	r3, [r3, #4]
 8014572:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014574:	6a3b      	ldr	r3, [r7, #32]
 8014576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014578:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 801457a:	687b      	ldr	r3, [r7, #4]
 801457c:	685b      	ldr	r3, [r3, #4]
 801457e:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 8014580:	69fb      	ldr	r3, [r7, #28]
 8014582:	2b00      	cmp	r3, #0
 8014584:	f000 809d 	beq.w	80146c2 <dhcp_recv+0x162>
 8014588:	69fb      	ldr	r3, [r7, #28]
 801458a:	791b      	ldrb	r3, [r3, #4]
 801458c:	2b00      	cmp	r3, #0
 801458e:	f000 8098 	beq.w	80146c2 <dhcp_recv+0x162>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 8014592:	687b      	ldr	r3, [r7, #4]
 8014594:	895b      	ldrh	r3, [r3, #10]
 8014596:	2b2b      	cmp	r3, #43	; 0x2b
 8014598:	f240 8095 	bls.w	80146c6 <dhcp_recv+0x166>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 801459c:	69bb      	ldr	r3, [r7, #24]
 801459e:	781b      	ldrb	r3, [r3, #0]
 80145a0:	2b02      	cmp	r3, #2
 80145a2:	f040 8092 	bne.w	80146ca <dhcp_recv+0x16a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 80145a6:	2300      	movs	r3, #0
 80145a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80145ac:	e012      	b.n	80145d4 <dhcp_recv+0x74>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 80145ae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80145b2:	6a3a      	ldr	r2, [r7, #32]
 80145b4:	4413      	add	r3, r2
 80145b6:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 80145ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80145be:	69b9      	ldr	r1, [r7, #24]
 80145c0:	440b      	add	r3, r1
 80145c2:	7f1b      	ldrb	r3, [r3, #28]
 80145c4:	429a      	cmp	r2, r3
 80145c6:	f040 8082 	bne.w	80146ce <dhcp_recv+0x16e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 80145ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80145ce:	3301      	adds	r3, #1
 80145d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80145d4:	6a3b      	ldr	r3, [r7, #32]
 80145d6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80145da:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80145de:	429a      	cmp	r2, r3
 80145e0:	d203      	bcs.n	80145ea <dhcp_recv+0x8a>
 80145e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80145e6:	2b05      	cmp	r3, #5
 80145e8:	d9e1      	bls.n	80145ae <dhcp_recv+0x4e>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 80145ea:	69bb      	ldr	r3, [r7, #24]
 80145ec:	685b      	ldr	r3, [r3, #4]
 80145ee:	4618      	mov	r0, r3
 80145f0:	f7f5 fdc1 	bl	800a176 <lwip_htonl>
 80145f4:	4602      	mov	r2, r0
 80145f6:	69fb      	ldr	r3, [r7, #28]
 80145f8:	681b      	ldr	r3, [r3, #0]
 80145fa:	429a      	cmp	r2, r3
 80145fc:	d169      	bne.n	80146d2 <dhcp_recv+0x172>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 80145fe:	69f9      	ldr	r1, [r7, #28]
 8014600:	6878      	ldr	r0, [r7, #4]
 8014602:	f7ff fcd9 	bl	8013fb8 <dhcp_parse_reply>
 8014606:	4603      	mov	r3, r0
 8014608:	2b00      	cmp	r3, #0
 801460a:	d164      	bne.n	80146d6 <dhcp_recv+0x176>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 801460c:	4b39      	ldr	r3, [pc, #228]	; (80146f4 <dhcp_recv+0x194>)
 801460e:	785b      	ldrb	r3, [r3, #1]
 8014610:	2b00      	cmp	r3, #0
 8014612:	d062      	beq.n	80146da <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 8014614:	687b      	ldr	r3, [r7, #4]
 8014616:	685b      	ldr	r3, [r3, #4]
 8014618:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 801461a:	4b37      	ldr	r3, [pc, #220]	; (80146f8 <dhcp_recv+0x198>)
 801461c:	685b      	ldr	r3, [r3, #4]
 801461e:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 8014620:	7cfb      	ldrb	r3, [r7, #19]
 8014622:	2b05      	cmp	r3, #5
 8014624:	d12a      	bne.n	801467c <dhcp_recv+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 8014626:	69fb      	ldr	r3, [r7, #28]
 8014628:	795b      	ldrb	r3, [r3, #5]
 801462a:	2b01      	cmp	r3, #1
 801462c:	d112      	bne.n	8014654 <dhcp_recv+0xf4>
      dhcp_handle_ack(netif, msg_in);
 801462e:	6979      	ldr	r1, [r7, #20]
 8014630:	6a38      	ldr	r0, [r7, #32]
 8014632:	f7fe fe17 	bl	8013264 <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 8014636:	6a3b      	ldr	r3, [r7, #32]
 8014638:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801463c:	f003 0308 	and.w	r3, r3, #8
 8014640:	2b00      	cmp	r3, #0
 8014642:	d003      	beq.n	801464c <dhcp_recv+0xec>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 8014644:	6a38      	ldr	r0, [r7, #32]
 8014646:	f7fe fb87 	bl	8012d58 <dhcp_check>
 801464a:	e049      	b.n	80146e0 <dhcp_recv+0x180>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 801464c:	6a38      	ldr	r0, [r7, #32]
 801464e:	f7ff f867 	bl	8013720 <dhcp_bind>
 8014652:	e045      	b.n	80146e0 <dhcp_recv+0x180>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8014654:	69fb      	ldr	r3, [r7, #28]
 8014656:	795b      	ldrb	r3, [r3, #5]
 8014658:	2b03      	cmp	r3, #3
 801465a:	d007      	beq.n	801466c <dhcp_recv+0x10c>
 801465c:	69fb      	ldr	r3, [r7, #28]
 801465e:	795b      	ldrb	r3, [r3, #5]
 8014660:	2b04      	cmp	r3, #4
 8014662:	d003      	beq.n	801466c <dhcp_recv+0x10c>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 8014664:	69fb      	ldr	r3, [r7, #28]
 8014666:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8014668:	2b05      	cmp	r3, #5
 801466a:	d139      	bne.n	80146e0 <dhcp_recv+0x180>
      dhcp_handle_ack(netif, msg_in);
 801466c:	6979      	ldr	r1, [r7, #20]
 801466e:	6a38      	ldr	r0, [r7, #32]
 8014670:	f7fe fdf8 	bl	8013264 <dhcp_handle_ack>
      dhcp_bind(netif);
 8014674:	6a38      	ldr	r0, [r7, #32]
 8014676:	f7ff f853 	bl	8013720 <dhcp_bind>
 801467a:	e031      	b.n	80146e0 <dhcp_recv+0x180>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 801467c:	7cfb      	ldrb	r3, [r7, #19]
 801467e:	2b06      	cmp	r3, #6
 8014680:	d113      	bne.n	80146aa <dhcp_recv+0x14a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8014682:	69fb      	ldr	r3, [r7, #28]
 8014684:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 8014686:	2b03      	cmp	r3, #3
 8014688:	d00b      	beq.n	80146a2 <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801468a:	69fb      	ldr	r3, [r7, #28]
 801468c:	795b      	ldrb	r3, [r3, #5]
 801468e:	2b01      	cmp	r3, #1
 8014690:	d007      	beq.n	80146a2 <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8014692:	69fb      	ldr	r3, [r7, #28]
 8014694:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8014696:	2b04      	cmp	r3, #4
 8014698:	d003      	beq.n	80146a2 <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 801469a:	69fb      	ldr	r3, [r7, #28]
 801469c:	795b      	ldrb	r3, [r3, #5]
 801469e:	2b05      	cmp	r3, #5
 80146a0:	d103      	bne.n	80146aa <dhcp_recv+0x14a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 80146a2:	6a38      	ldr	r0, [r7, #32]
 80146a4:	f7fe fb3e 	bl	8012d24 <dhcp_handle_nak>
 80146a8:	e01a      	b.n	80146e0 <dhcp_recv+0x180>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 80146aa:	7cfb      	ldrb	r3, [r7, #19]
 80146ac:	2b02      	cmp	r3, #2
 80146ae:	d116      	bne.n	80146de <dhcp_recv+0x17e>
 80146b0:	69fb      	ldr	r3, [r7, #28]
 80146b2:	795b      	ldrb	r3, [r3, #5]
 80146b4:	2b06      	cmp	r3, #6
 80146b6:	d112      	bne.n	80146de <dhcp_recv+0x17e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 80146b8:	6979      	ldr	r1, [r7, #20]
 80146ba:	6a38      	ldr	r0, [r7, #32]
 80146bc:	f7fe fb80 	bl	8012dc0 <dhcp_handle_offer>
 80146c0:	e00e      	b.n	80146e0 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 80146c2:	bf00      	nop
 80146c4:	e00c      	b.n	80146e0 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 80146c6:	bf00      	nop
 80146c8:	e00a      	b.n	80146e0 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 80146ca:	bf00      	nop
 80146cc:	e008      	b.n	80146e0 <dhcp_recv+0x180>
      goto free_pbuf_and_return;
 80146ce:	bf00      	nop
 80146d0:	e006      	b.n	80146e0 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 80146d2:	bf00      	nop
 80146d4:	e004      	b.n	80146e0 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 80146d6:	bf00      	nop
 80146d8:	e002      	b.n	80146e0 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 80146da:	bf00      	nop
 80146dc:	e000      	b.n	80146e0 <dhcp_recv+0x180>
  }

free_pbuf_and_return:
 80146de:	bf00      	nop
  pbuf_free(p);
 80146e0:	6878      	ldr	r0, [r7, #4]
 80146e2:	f7f7 f931 	bl	800b948 <pbuf_free>
}
 80146e6:	bf00      	nop
 80146e8:	3728      	adds	r7, #40	; 0x28
 80146ea:	46bd      	mov	sp, r7
 80146ec:	bd80      	pop	{r7, pc}
 80146ee:	bf00      	nop
 80146f0:	2000d1c4 	.word	0x2000d1c4
 80146f4:	200109b8 	.word	0x200109b8
 80146f8:	20010998 	.word	0x20010998

080146fc <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 80146fc:	b580      	push	{r7, lr}
 80146fe:	b088      	sub	sp, #32
 8014700:	af00      	add	r7, sp, #0
 8014702:	60f8      	str	r0, [r7, #12]
 8014704:	60b9      	str	r1, [r7, #8]
 8014706:	603b      	str	r3, [r7, #0]
 8014708:	4613      	mov	r3, r2
 801470a:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 801470c:	68fb      	ldr	r3, [r7, #12]
 801470e:	2b00      	cmp	r3, #0
 8014710:	d108      	bne.n	8014724 <dhcp_create_msg+0x28>
 8014712:	4b5f      	ldr	r3, [pc, #380]	; (8014890 <dhcp_create_msg+0x194>)
 8014714:	f240 7269 	movw	r2, #1897	; 0x769
 8014718:	495e      	ldr	r1, [pc, #376]	; (8014894 <dhcp_create_msg+0x198>)
 801471a:	485f      	ldr	r0, [pc, #380]	; (8014898 <dhcp_create_msg+0x19c>)
 801471c:	f002 ffba 	bl	8017694 <iprintf>
 8014720:	2300      	movs	r3, #0
 8014722:	e0b1      	b.n	8014888 <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 8014724:	68bb      	ldr	r3, [r7, #8]
 8014726:	2b00      	cmp	r3, #0
 8014728:	d108      	bne.n	801473c <dhcp_create_msg+0x40>
 801472a:	4b59      	ldr	r3, [pc, #356]	; (8014890 <dhcp_create_msg+0x194>)
 801472c:	f240 726a 	movw	r2, #1898	; 0x76a
 8014730:	495a      	ldr	r1, [pc, #360]	; (801489c <dhcp_create_msg+0x1a0>)
 8014732:	4859      	ldr	r0, [pc, #356]	; (8014898 <dhcp_create_msg+0x19c>)
 8014734:	f002 ffae 	bl	8017694 <iprintf>
 8014738:	2300      	movs	r3, #0
 801473a:	e0a5      	b.n	8014888 <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 801473c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014740:	f44f 719a 	mov.w	r1, #308	; 0x134
 8014744:	2036      	movs	r0, #54	; 0x36
 8014746:	f7f6 fe1b 	bl	800b380 <pbuf_alloc>
 801474a:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 801474c:	69bb      	ldr	r3, [r7, #24]
 801474e:	2b00      	cmp	r3, #0
 8014750:	d101      	bne.n	8014756 <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 8014752:	2300      	movs	r3, #0
 8014754:	e098      	b.n	8014888 <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 8014756:	69bb      	ldr	r3, [r7, #24]
 8014758:	895b      	ldrh	r3, [r3, #10]
 801475a:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 801475e:	d206      	bcs.n	801476e <dhcp_create_msg+0x72>
 8014760:	4b4b      	ldr	r3, [pc, #300]	; (8014890 <dhcp_create_msg+0x194>)
 8014762:	f240 7271 	movw	r2, #1905	; 0x771
 8014766:	494e      	ldr	r1, [pc, #312]	; (80148a0 <dhcp_create_msg+0x1a4>)
 8014768:	484b      	ldr	r0, [pc, #300]	; (8014898 <dhcp_create_msg+0x19c>)
 801476a:	f002 ff93 	bl	8017694 <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 801476e:	79fb      	ldrb	r3, [r7, #7]
 8014770:	2b03      	cmp	r3, #3
 8014772:	d103      	bne.n	801477c <dhcp_create_msg+0x80>
 8014774:	68bb      	ldr	r3, [r7, #8]
 8014776:	795b      	ldrb	r3, [r3, #5]
 8014778:	2b03      	cmp	r3, #3
 801477a:	d10d      	bne.n	8014798 <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 801477c:	68bb      	ldr	r3, [r7, #8]
 801477e:	799b      	ldrb	r3, [r3, #6]
 8014780:	2b00      	cmp	r3, #0
 8014782:	d105      	bne.n	8014790 <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 8014784:	f002 ff9e 	bl	80176c4 <rand>
 8014788:	4603      	mov	r3, r0
 801478a:	461a      	mov	r2, r3
 801478c:	4b45      	ldr	r3, [pc, #276]	; (80148a4 <dhcp_create_msg+0x1a8>)
 801478e:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 8014790:	4b44      	ldr	r3, [pc, #272]	; (80148a4 <dhcp_create_msg+0x1a8>)
 8014792:	681a      	ldr	r2, [r3, #0]
 8014794:	68bb      	ldr	r3, [r7, #8]
 8014796:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 8014798:	69bb      	ldr	r3, [r7, #24]
 801479a:	685b      	ldr	r3, [r3, #4]
 801479c:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 801479e:	f44f 729a 	mov.w	r2, #308	; 0x134
 80147a2:	2100      	movs	r1, #0
 80147a4:	6978      	ldr	r0, [r7, #20]
 80147a6:	f002 fed8 	bl	801755a <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 80147aa:	697b      	ldr	r3, [r7, #20]
 80147ac:	2201      	movs	r2, #1
 80147ae:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 80147b0:	697b      	ldr	r3, [r7, #20]
 80147b2:	2201      	movs	r2, #1
 80147b4:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 80147b6:	68fb      	ldr	r3, [r7, #12]
 80147b8:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 80147bc:	697b      	ldr	r3, [r7, #20]
 80147be:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 80147c0:	68bb      	ldr	r3, [r7, #8]
 80147c2:	681b      	ldr	r3, [r3, #0]
 80147c4:	4618      	mov	r0, r3
 80147c6:	f7f5 fcd6 	bl	800a176 <lwip_htonl>
 80147ca:	4602      	mov	r2, r0
 80147cc:	697b      	ldr	r3, [r7, #20]
 80147ce:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 80147d0:	79fb      	ldrb	r3, [r7, #7]
 80147d2:	2b08      	cmp	r3, #8
 80147d4:	d010      	beq.n	80147f8 <dhcp_create_msg+0xfc>
 80147d6:	79fb      	ldrb	r3, [r7, #7]
 80147d8:	2b04      	cmp	r3, #4
 80147da:	d00d      	beq.n	80147f8 <dhcp_create_msg+0xfc>
 80147dc:	79fb      	ldrb	r3, [r7, #7]
 80147de:	2b07      	cmp	r3, #7
 80147e0:	d00a      	beq.n	80147f8 <dhcp_create_msg+0xfc>
 80147e2:	79fb      	ldrb	r3, [r7, #7]
 80147e4:	2b03      	cmp	r3, #3
 80147e6:	d10c      	bne.n	8014802 <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 80147e8:	68bb      	ldr	r3, [r7, #8]
 80147ea:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 80147ec:	2b05      	cmp	r3, #5
 80147ee:	d003      	beq.n	80147f8 <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 80147f0:	68bb      	ldr	r3, [r7, #8]
 80147f2:	795b      	ldrb	r3, [r3, #5]
 80147f4:	2b04      	cmp	r3, #4
 80147f6:	d104      	bne.n	8014802 <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 80147f8:	68fb      	ldr	r3, [r7, #12]
 80147fa:	3304      	adds	r3, #4
 80147fc:	681a      	ldr	r2, [r3, #0]
 80147fe:	697b      	ldr	r3, [r7, #20]
 8014800:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8014802:	2300      	movs	r3, #0
 8014804:	83fb      	strh	r3, [r7, #30]
 8014806:	e00c      	b.n	8014822 <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 8014808:	8bfa      	ldrh	r2, [r7, #30]
 801480a:	8bfb      	ldrh	r3, [r7, #30]
 801480c:	68f9      	ldr	r1, [r7, #12]
 801480e:	440a      	add	r2, r1
 8014810:	f892 102a 	ldrb.w	r1, [r2, #42]	; 0x2a
 8014814:	697a      	ldr	r2, [r7, #20]
 8014816:	4413      	add	r3, r2
 8014818:	460a      	mov	r2, r1
 801481a:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801481c:	8bfb      	ldrh	r3, [r7, #30]
 801481e:	3301      	adds	r3, #1
 8014820:	83fb      	strh	r3, [r7, #30]
 8014822:	8bfb      	ldrh	r3, [r7, #30]
 8014824:	2b05      	cmp	r3, #5
 8014826:	d9ef      	bls.n	8014808 <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 8014828:	697b      	ldr	r3, [r7, #20]
 801482a:	2200      	movs	r2, #0
 801482c:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 8014830:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 8014834:	2200      	movs	r2, #0
 8014836:	f062 027d 	orn	r2, r2, #125	; 0x7d
 801483a:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 801483e:	2200      	movs	r2, #0
 8014840:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 8014844:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 8014848:	2200      	movs	r2, #0
 801484a:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 801484e:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 8014852:	697b      	ldr	r3, [r7, #20]
 8014854:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014858:	2301      	movs	r3, #1
 801485a:	2235      	movs	r2, #53	; 0x35
 801485c:	2000      	movs	r0, #0
 801485e:	f7ff fadb 	bl	8013e18 <dhcp_option>
 8014862:	4603      	mov	r3, r0
 8014864:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 8014866:	697b      	ldr	r3, [r7, #20]
 8014868:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801486c:	79fa      	ldrb	r2, [r7, #7]
 801486e:	8a7b      	ldrh	r3, [r7, #18]
 8014870:	4618      	mov	r0, r3
 8014872:	f7ff fb05 	bl	8013e80 <dhcp_option_byte>
 8014876:	4603      	mov	r3, r0
 8014878:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 801487a:	683b      	ldr	r3, [r7, #0]
 801487c:	2b00      	cmp	r3, #0
 801487e:	d002      	beq.n	8014886 <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 8014880:	683b      	ldr	r3, [r7, #0]
 8014882:	8a7a      	ldrh	r2, [r7, #18]
 8014884:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 8014886:	69bb      	ldr	r3, [r7, #24]
}
 8014888:	4618      	mov	r0, r3
 801488a:	3720      	adds	r7, #32
 801488c:	46bd      	mov	sp, r7
 801488e:	bd80      	pop	{r7, pc}
 8014890:	0801b3ec 	.word	0x0801b3ec
 8014894:	0801b70c 	.word	0x0801b70c
 8014898:	0801b44c 	.word	0x0801b44c
 801489c:	0801b72c 	.word	0x0801b72c
 80148a0:	0801b74c 	.word	0x0801b74c
 80148a4:	200109c8 	.word	0x200109c8

080148a8 <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 80148a8:	b580      	push	{r7, lr}
 80148aa:	b084      	sub	sp, #16
 80148ac:	af00      	add	r7, sp, #0
 80148ae:	4603      	mov	r3, r0
 80148b0:	60b9      	str	r1, [r7, #8]
 80148b2:	607a      	str	r2, [r7, #4]
 80148b4:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 80148b6:	89fb      	ldrh	r3, [r7, #14]
 80148b8:	1c5a      	adds	r2, r3, #1
 80148ba:	81fa      	strh	r2, [r7, #14]
 80148bc:	461a      	mov	r2, r3
 80148be:	68bb      	ldr	r3, [r7, #8]
 80148c0:	4413      	add	r3, r2
 80148c2:	22ff      	movs	r2, #255	; 0xff
 80148c4:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 80148c6:	e007      	b.n	80148d8 <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 80148c8:	89fb      	ldrh	r3, [r7, #14]
 80148ca:	1c5a      	adds	r2, r3, #1
 80148cc:	81fa      	strh	r2, [r7, #14]
 80148ce:	461a      	mov	r2, r3
 80148d0:	68bb      	ldr	r3, [r7, #8]
 80148d2:	4413      	add	r3, r2
 80148d4:	2200      	movs	r2, #0
 80148d6:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 80148d8:	89fb      	ldrh	r3, [r7, #14]
 80148da:	2b43      	cmp	r3, #67	; 0x43
 80148dc:	d904      	bls.n	80148e8 <dhcp_option_trailer+0x40>
 80148de:	89fb      	ldrh	r3, [r7, #14]
 80148e0:	f003 0303 	and.w	r3, r3, #3
 80148e4:	2b00      	cmp	r3, #0
 80148e6:	d002      	beq.n	80148ee <dhcp_option_trailer+0x46>
 80148e8:	89fb      	ldrh	r3, [r7, #14]
 80148ea:	2b43      	cmp	r3, #67	; 0x43
 80148ec:	d9ec      	bls.n	80148c8 <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 80148ee:	89fb      	ldrh	r3, [r7, #14]
 80148f0:	33f0      	adds	r3, #240	; 0xf0
 80148f2:	b29b      	uxth	r3, r3
 80148f4:	4619      	mov	r1, r3
 80148f6:	6878      	ldr	r0, [r7, #4]
 80148f8:	f7f6 fea0 	bl	800b63c <pbuf_realloc>
}
 80148fc:	bf00      	nop
 80148fe:	3710      	adds	r7, #16
 8014900:	46bd      	mov	sp, r7
 8014902:	bd80      	pop	{r7, pc}

08014904 <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 8014904:	b480      	push	{r7}
 8014906:	b085      	sub	sp, #20
 8014908:	af00      	add	r7, sp, #0
 801490a:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 801490c:	687b      	ldr	r3, [r7, #4]
 801490e:	2b00      	cmp	r3, #0
 8014910:	d017      	beq.n	8014942 <dhcp_supplied_address+0x3e>
 8014912:	687b      	ldr	r3, [r7, #4]
 8014914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014916:	2b00      	cmp	r3, #0
 8014918:	d013      	beq.n	8014942 <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 801491a:	687b      	ldr	r3, [r7, #4]
 801491c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801491e:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8014920:	68fb      	ldr	r3, [r7, #12]
 8014922:	795b      	ldrb	r3, [r3, #5]
 8014924:	2b0a      	cmp	r3, #10
 8014926:	d007      	beq.n	8014938 <dhcp_supplied_address+0x34>
 8014928:	68fb      	ldr	r3, [r7, #12]
 801492a:	795b      	ldrb	r3, [r3, #5]
 801492c:	2b05      	cmp	r3, #5
 801492e:	d003      	beq.n	8014938 <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 8014930:	68fb      	ldr	r3, [r7, #12]
 8014932:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8014934:	2b04      	cmp	r3, #4
 8014936:	d101      	bne.n	801493c <dhcp_supplied_address+0x38>
 8014938:	2301      	movs	r3, #1
 801493a:	e000      	b.n	801493e <dhcp_supplied_address+0x3a>
 801493c:	2300      	movs	r3, #0
 801493e:	b2db      	uxtb	r3, r3
 8014940:	e000      	b.n	8014944 <dhcp_supplied_address+0x40>
  }
  return 0;
 8014942:	2300      	movs	r3, #0
}
 8014944:	4618      	mov	r0, r3
 8014946:	3714      	adds	r7, #20
 8014948:	46bd      	mov	sp, r7
 801494a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801494e:	4770      	bx	lr

08014950 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8014950:	b580      	push	{r7, lr}
 8014952:	b082      	sub	sp, #8
 8014954:	af00      	add	r7, sp, #0
 8014956:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8014958:	4915      	ldr	r1, [pc, #84]	; (80149b0 <etharp_free_entry+0x60>)
 801495a:	687a      	ldr	r2, [r7, #4]
 801495c:	4613      	mov	r3, r2
 801495e:	005b      	lsls	r3, r3, #1
 8014960:	4413      	add	r3, r2
 8014962:	00db      	lsls	r3, r3, #3
 8014964:	440b      	add	r3, r1
 8014966:	681b      	ldr	r3, [r3, #0]
 8014968:	2b00      	cmp	r3, #0
 801496a:	d013      	beq.n	8014994 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 801496c:	4910      	ldr	r1, [pc, #64]	; (80149b0 <etharp_free_entry+0x60>)
 801496e:	687a      	ldr	r2, [r7, #4]
 8014970:	4613      	mov	r3, r2
 8014972:	005b      	lsls	r3, r3, #1
 8014974:	4413      	add	r3, r2
 8014976:	00db      	lsls	r3, r3, #3
 8014978:	440b      	add	r3, r1
 801497a:	681b      	ldr	r3, [r3, #0]
 801497c:	4618      	mov	r0, r3
 801497e:	f7f6 ffe3 	bl	800b948 <pbuf_free>
    arp_table[i].q = NULL;
 8014982:	490b      	ldr	r1, [pc, #44]	; (80149b0 <etharp_free_entry+0x60>)
 8014984:	687a      	ldr	r2, [r7, #4]
 8014986:	4613      	mov	r3, r2
 8014988:	005b      	lsls	r3, r3, #1
 801498a:	4413      	add	r3, r2
 801498c:	00db      	lsls	r3, r3, #3
 801498e:	440b      	add	r3, r1
 8014990:	2200      	movs	r2, #0
 8014992:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8014994:	4906      	ldr	r1, [pc, #24]	; (80149b0 <etharp_free_entry+0x60>)
 8014996:	687a      	ldr	r2, [r7, #4]
 8014998:	4613      	mov	r3, r2
 801499a:	005b      	lsls	r3, r3, #1
 801499c:	4413      	add	r3, r2
 801499e:	00db      	lsls	r3, r3, #3
 80149a0:	440b      	add	r3, r1
 80149a2:	3314      	adds	r3, #20
 80149a4:	2200      	movs	r2, #0
 80149a6:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 80149a8:	bf00      	nop
 80149aa:	3708      	adds	r7, #8
 80149ac:	46bd      	mov	sp, r7
 80149ae:	bd80      	pop	{r7, pc}
 80149b0:	200109cc 	.word	0x200109cc

080149b4 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 80149b4:	b580      	push	{r7, lr}
 80149b6:	b082      	sub	sp, #8
 80149b8:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80149ba:	2300      	movs	r3, #0
 80149bc:	607b      	str	r3, [r7, #4]
 80149be:	e096      	b.n	8014aee <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 80149c0:	494f      	ldr	r1, [pc, #316]	; (8014b00 <etharp_tmr+0x14c>)
 80149c2:	687a      	ldr	r2, [r7, #4]
 80149c4:	4613      	mov	r3, r2
 80149c6:	005b      	lsls	r3, r3, #1
 80149c8:	4413      	add	r3, r2
 80149ca:	00db      	lsls	r3, r3, #3
 80149cc:	440b      	add	r3, r1
 80149ce:	3314      	adds	r3, #20
 80149d0:	781b      	ldrb	r3, [r3, #0]
 80149d2:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 80149d4:	78fb      	ldrb	r3, [r7, #3]
 80149d6:	2b00      	cmp	r3, #0
 80149d8:	f000 8086 	beq.w	8014ae8 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 80149dc:	4948      	ldr	r1, [pc, #288]	; (8014b00 <etharp_tmr+0x14c>)
 80149de:	687a      	ldr	r2, [r7, #4]
 80149e0:	4613      	mov	r3, r2
 80149e2:	005b      	lsls	r3, r3, #1
 80149e4:	4413      	add	r3, r2
 80149e6:	00db      	lsls	r3, r3, #3
 80149e8:	440b      	add	r3, r1
 80149ea:	3312      	adds	r3, #18
 80149ec:	881b      	ldrh	r3, [r3, #0]
 80149ee:	3301      	adds	r3, #1
 80149f0:	b298      	uxth	r0, r3
 80149f2:	4943      	ldr	r1, [pc, #268]	; (8014b00 <etharp_tmr+0x14c>)
 80149f4:	687a      	ldr	r2, [r7, #4]
 80149f6:	4613      	mov	r3, r2
 80149f8:	005b      	lsls	r3, r3, #1
 80149fa:	4413      	add	r3, r2
 80149fc:	00db      	lsls	r3, r3, #3
 80149fe:	440b      	add	r3, r1
 8014a00:	3312      	adds	r3, #18
 8014a02:	4602      	mov	r2, r0
 8014a04:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8014a06:	493e      	ldr	r1, [pc, #248]	; (8014b00 <etharp_tmr+0x14c>)
 8014a08:	687a      	ldr	r2, [r7, #4]
 8014a0a:	4613      	mov	r3, r2
 8014a0c:	005b      	lsls	r3, r3, #1
 8014a0e:	4413      	add	r3, r2
 8014a10:	00db      	lsls	r3, r3, #3
 8014a12:	440b      	add	r3, r1
 8014a14:	3312      	adds	r3, #18
 8014a16:	881b      	ldrh	r3, [r3, #0]
 8014a18:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8014a1c:	d215      	bcs.n	8014a4a <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8014a1e:	4938      	ldr	r1, [pc, #224]	; (8014b00 <etharp_tmr+0x14c>)
 8014a20:	687a      	ldr	r2, [r7, #4]
 8014a22:	4613      	mov	r3, r2
 8014a24:	005b      	lsls	r3, r3, #1
 8014a26:	4413      	add	r3, r2
 8014a28:	00db      	lsls	r3, r3, #3
 8014a2a:	440b      	add	r3, r1
 8014a2c:	3314      	adds	r3, #20
 8014a2e:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8014a30:	2b01      	cmp	r3, #1
 8014a32:	d10e      	bne.n	8014a52 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8014a34:	4932      	ldr	r1, [pc, #200]	; (8014b00 <etharp_tmr+0x14c>)
 8014a36:	687a      	ldr	r2, [r7, #4]
 8014a38:	4613      	mov	r3, r2
 8014a3a:	005b      	lsls	r3, r3, #1
 8014a3c:	4413      	add	r3, r2
 8014a3e:	00db      	lsls	r3, r3, #3
 8014a40:	440b      	add	r3, r1
 8014a42:	3312      	adds	r3, #18
 8014a44:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8014a46:	2b04      	cmp	r3, #4
 8014a48:	d903      	bls.n	8014a52 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8014a4a:	6878      	ldr	r0, [r7, #4]
 8014a4c:	f7ff ff80 	bl	8014950 <etharp_free_entry>
 8014a50:	e04a      	b.n	8014ae8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8014a52:	492b      	ldr	r1, [pc, #172]	; (8014b00 <etharp_tmr+0x14c>)
 8014a54:	687a      	ldr	r2, [r7, #4]
 8014a56:	4613      	mov	r3, r2
 8014a58:	005b      	lsls	r3, r3, #1
 8014a5a:	4413      	add	r3, r2
 8014a5c:	00db      	lsls	r3, r3, #3
 8014a5e:	440b      	add	r3, r1
 8014a60:	3314      	adds	r3, #20
 8014a62:	781b      	ldrb	r3, [r3, #0]
 8014a64:	2b03      	cmp	r3, #3
 8014a66:	d10a      	bne.n	8014a7e <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8014a68:	4925      	ldr	r1, [pc, #148]	; (8014b00 <etharp_tmr+0x14c>)
 8014a6a:	687a      	ldr	r2, [r7, #4]
 8014a6c:	4613      	mov	r3, r2
 8014a6e:	005b      	lsls	r3, r3, #1
 8014a70:	4413      	add	r3, r2
 8014a72:	00db      	lsls	r3, r3, #3
 8014a74:	440b      	add	r3, r1
 8014a76:	3314      	adds	r3, #20
 8014a78:	2204      	movs	r2, #4
 8014a7a:	701a      	strb	r2, [r3, #0]
 8014a7c:	e034      	b.n	8014ae8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8014a7e:	4920      	ldr	r1, [pc, #128]	; (8014b00 <etharp_tmr+0x14c>)
 8014a80:	687a      	ldr	r2, [r7, #4]
 8014a82:	4613      	mov	r3, r2
 8014a84:	005b      	lsls	r3, r3, #1
 8014a86:	4413      	add	r3, r2
 8014a88:	00db      	lsls	r3, r3, #3
 8014a8a:	440b      	add	r3, r1
 8014a8c:	3314      	adds	r3, #20
 8014a8e:	781b      	ldrb	r3, [r3, #0]
 8014a90:	2b04      	cmp	r3, #4
 8014a92:	d10a      	bne.n	8014aaa <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8014a94:	491a      	ldr	r1, [pc, #104]	; (8014b00 <etharp_tmr+0x14c>)
 8014a96:	687a      	ldr	r2, [r7, #4]
 8014a98:	4613      	mov	r3, r2
 8014a9a:	005b      	lsls	r3, r3, #1
 8014a9c:	4413      	add	r3, r2
 8014a9e:	00db      	lsls	r3, r3, #3
 8014aa0:	440b      	add	r3, r1
 8014aa2:	3314      	adds	r3, #20
 8014aa4:	2202      	movs	r2, #2
 8014aa6:	701a      	strb	r2, [r3, #0]
 8014aa8:	e01e      	b.n	8014ae8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8014aaa:	4915      	ldr	r1, [pc, #84]	; (8014b00 <etharp_tmr+0x14c>)
 8014aac:	687a      	ldr	r2, [r7, #4]
 8014aae:	4613      	mov	r3, r2
 8014ab0:	005b      	lsls	r3, r3, #1
 8014ab2:	4413      	add	r3, r2
 8014ab4:	00db      	lsls	r3, r3, #3
 8014ab6:	440b      	add	r3, r1
 8014ab8:	3314      	adds	r3, #20
 8014aba:	781b      	ldrb	r3, [r3, #0]
 8014abc:	2b01      	cmp	r3, #1
 8014abe:	d113      	bne.n	8014ae8 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8014ac0:	490f      	ldr	r1, [pc, #60]	; (8014b00 <etharp_tmr+0x14c>)
 8014ac2:	687a      	ldr	r2, [r7, #4]
 8014ac4:	4613      	mov	r3, r2
 8014ac6:	005b      	lsls	r3, r3, #1
 8014ac8:	4413      	add	r3, r2
 8014aca:	00db      	lsls	r3, r3, #3
 8014acc:	440b      	add	r3, r1
 8014ace:	3308      	adds	r3, #8
 8014ad0:	6818      	ldr	r0, [r3, #0]
 8014ad2:	687a      	ldr	r2, [r7, #4]
 8014ad4:	4613      	mov	r3, r2
 8014ad6:	005b      	lsls	r3, r3, #1
 8014ad8:	4413      	add	r3, r2
 8014ada:	00db      	lsls	r3, r3, #3
 8014adc:	4a08      	ldr	r2, [pc, #32]	; (8014b00 <etharp_tmr+0x14c>)
 8014ade:	4413      	add	r3, r2
 8014ae0:	3304      	adds	r3, #4
 8014ae2:	4619      	mov	r1, r3
 8014ae4:	f000 fe72 	bl	80157cc <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014ae8:	687b      	ldr	r3, [r7, #4]
 8014aea:	3301      	adds	r3, #1
 8014aec:	607b      	str	r3, [r7, #4]
 8014aee:	687b      	ldr	r3, [r7, #4]
 8014af0:	2b09      	cmp	r3, #9
 8014af2:	f77f af65 	ble.w	80149c0 <etharp_tmr+0xc>
      }
    }
  }
}
 8014af6:	bf00      	nop
 8014af8:	bf00      	nop
 8014afa:	3708      	adds	r7, #8
 8014afc:	46bd      	mov	sp, r7
 8014afe:	bd80      	pop	{r7, pc}
 8014b00:	200109cc 	.word	0x200109cc

08014b04 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8014b04:	b580      	push	{r7, lr}
 8014b06:	b08a      	sub	sp, #40	; 0x28
 8014b08:	af00      	add	r7, sp, #0
 8014b0a:	60f8      	str	r0, [r7, #12]
 8014b0c:	460b      	mov	r3, r1
 8014b0e:	607a      	str	r2, [r7, #4]
 8014b10:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8014b12:	230a      	movs	r3, #10
 8014b14:	84fb      	strh	r3, [r7, #38]	; 0x26
 8014b16:	230a      	movs	r3, #10
 8014b18:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8014b1a:	230a      	movs	r3, #10
 8014b1c:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8014b1e:	2300      	movs	r3, #0
 8014b20:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8014b22:	230a      	movs	r3, #10
 8014b24:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8014b26:	2300      	movs	r3, #0
 8014b28:	83bb      	strh	r3, [r7, #28]
 8014b2a:	2300      	movs	r3, #0
 8014b2c:	837b      	strh	r3, [r7, #26]
 8014b2e:	2300      	movs	r3, #0
 8014b30:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014b32:	2300      	movs	r3, #0
 8014b34:	843b      	strh	r3, [r7, #32]
 8014b36:	e0ae      	b.n	8014c96 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8014b38:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014b3c:	49a6      	ldr	r1, [pc, #664]	; (8014dd8 <etharp_find_entry+0x2d4>)
 8014b3e:	4613      	mov	r3, r2
 8014b40:	005b      	lsls	r3, r3, #1
 8014b42:	4413      	add	r3, r2
 8014b44:	00db      	lsls	r3, r3, #3
 8014b46:	440b      	add	r3, r1
 8014b48:	3314      	adds	r3, #20
 8014b4a:	781b      	ldrb	r3, [r3, #0]
 8014b4c:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8014b4e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8014b52:	2b0a      	cmp	r3, #10
 8014b54:	d105      	bne.n	8014b62 <etharp_find_entry+0x5e>
 8014b56:	7dfb      	ldrb	r3, [r7, #23]
 8014b58:	2b00      	cmp	r3, #0
 8014b5a:	d102      	bne.n	8014b62 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8014b5c:	8c3b      	ldrh	r3, [r7, #32]
 8014b5e:	847b      	strh	r3, [r7, #34]	; 0x22
 8014b60:	e095      	b.n	8014c8e <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8014b62:	7dfb      	ldrb	r3, [r7, #23]
 8014b64:	2b00      	cmp	r3, #0
 8014b66:	f000 8092 	beq.w	8014c8e <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8014b6a:	7dfb      	ldrb	r3, [r7, #23]
 8014b6c:	2b01      	cmp	r3, #1
 8014b6e:	d009      	beq.n	8014b84 <etharp_find_entry+0x80>
 8014b70:	7dfb      	ldrb	r3, [r7, #23]
 8014b72:	2b01      	cmp	r3, #1
 8014b74:	d806      	bhi.n	8014b84 <etharp_find_entry+0x80>
 8014b76:	4b99      	ldr	r3, [pc, #612]	; (8014ddc <etharp_find_entry+0x2d8>)
 8014b78:	f240 1223 	movw	r2, #291	; 0x123
 8014b7c:	4998      	ldr	r1, [pc, #608]	; (8014de0 <etharp_find_entry+0x2dc>)
 8014b7e:	4899      	ldr	r0, [pc, #612]	; (8014de4 <etharp_find_entry+0x2e0>)
 8014b80:	f002 fd88 	bl	8017694 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8014b84:	68fb      	ldr	r3, [r7, #12]
 8014b86:	2b00      	cmp	r3, #0
 8014b88:	d020      	beq.n	8014bcc <etharp_find_entry+0xc8>
 8014b8a:	68fb      	ldr	r3, [r7, #12]
 8014b8c:	6819      	ldr	r1, [r3, #0]
 8014b8e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014b92:	4891      	ldr	r0, [pc, #580]	; (8014dd8 <etharp_find_entry+0x2d4>)
 8014b94:	4613      	mov	r3, r2
 8014b96:	005b      	lsls	r3, r3, #1
 8014b98:	4413      	add	r3, r2
 8014b9a:	00db      	lsls	r3, r3, #3
 8014b9c:	4403      	add	r3, r0
 8014b9e:	3304      	adds	r3, #4
 8014ba0:	681b      	ldr	r3, [r3, #0]
 8014ba2:	4299      	cmp	r1, r3
 8014ba4:	d112      	bne.n	8014bcc <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8014ba6:	687b      	ldr	r3, [r7, #4]
 8014ba8:	2b00      	cmp	r3, #0
 8014baa:	d00c      	beq.n	8014bc6 <etharp_find_entry+0xc2>
 8014bac:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014bb0:	4989      	ldr	r1, [pc, #548]	; (8014dd8 <etharp_find_entry+0x2d4>)
 8014bb2:	4613      	mov	r3, r2
 8014bb4:	005b      	lsls	r3, r3, #1
 8014bb6:	4413      	add	r3, r2
 8014bb8:	00db      	lsls	r3, r3, #3
 8014bba:	440b      	add	r3, r1
 8014bbc:	3308      	adds	r3, #8
 8014bbe:	681b      	ldr	r3, [r3, #0]
 8014bc0:	687a      	ldr	r2, [r7, #4]
 8014bc2:	429a      	cmp	r2, r3
 8014bc4:	d102      	bne.n	8014bcc <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8014bc6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014bca:	e100      	b.n	8014dce <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8014bcc:	7dfb      	ldrb	r3, [r7, #23]
 8014bce:	2b01      	cmp	r3, #1
 8014bd0:	d140      	bne.n	8014c54 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8014bd2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014bd6:	4980      	ldr	r1, [pc, #512]	; (8014dd8 <etharp_find_entry+0x2d4>)
 8014bd8:	4613      	mov	r3, r2
 8014bda:	005b      	lsls	r3, r3, #1
 8014bdc:	4413      	add	r3, r2
 8014bde:	00db      	lsls	r3, r3, #3
 8014be0:	440b      	add	r3, r1
 8014be2:	681b      	ldr	r3, [r3, #0]
 8014be4:	2b00      	cmp	r3, #0
 8014be6:	d01a      	beq.n	8014c1e <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8014be8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014bec:	497a      	ldr	r1, [pc, #488]	; (8014dd8 <etharp_find_entry+0x2d4>)
 8014bee:	4613      	mov	r3, r2
 8014bf0:	005b      	lsls	r3, r3, #1
 8014bf2:	4413      	add	r3, r2
 8014bf4:	00db      	lsls	r3, r3, #3
 8014bf6:	440b      	add	r3, r1
 8014bf8:	3312      	adds	r3, #18
 8014bfa:	881b      	ldrh	r3, [r3, #0]
 8014bfc:	8bba      	ldrh	r2, [r7, #28]
 8014bfe:	429a      	cmp	r2, r3
 8014c00:	d845      	bhi.n	8014c8e <etharp_find_entry+0x18a>
            old_queue = i;
 8014c02:	8c3b      	ldrh	r3, [r7, #32]
 8014c04:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8014c06:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014c0a:	4973      	ldr	r1, [pc, #460]	; (8014dd8 <etharp_find_entry+0x2d4>)
 8014c0c:	4613      	mov	r3, r2
 8014c0e:	005b      	lsls	r3, r3, #1
 8014c10:	4413      	add	r3, r2
 8014c12:	00db      	lsls	r3, r3, #3
 8014c14:	440b      	add	r3, r1
 8014c16:	3312      	adds	r3, #18
 8014c18:	881b      	ldrh	r3, [r3, #0]
 8014c1a:	83bb      	strh	r3, [r7, #28]
 8014c1c:	e037      	b.n	8014c8e <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8014c1e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014c22:	496d      	ldr	r1, [pc, #436]	; (8014dd8 <etharp_find_entry+0x2d4>)
 8014c24:	4613      	mov	r3, r2
 8014c26:	005b      	lsls	r3, r3, #1
 8014c28:	4413      	add	r3, r2
 8014c2a:	00db      	lsls	r3, r3, #3
 8014c2c:	440b      	add	r3, r1
 8014c2e:	3312      	adds	r3, #18
 8014c30:	881b      	ldrh	r3, [r3, #0]
 8014c32:	8b7a      	ldrh	r2, [r7, #26]
 8014c34:	429a      	cmp	r2, r3
 8014c36:	d82a      	bhi.n	8014c8e <etharp_find_entry+0x18a>
            old_pending = i;
 8014c38:	8c3b      	ldrh	r3, [r7, #32]
 8014c3a:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8014c3c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014c40:	4965      	ldr	r1, [pc, #404]	; (8014dd8 <etharp_find_entry+0x2d4>)
 8014c42:	4613      	mov	r3, r2
 8014c44:	005b      	lsls	r3, r3, #1
 8014c46:	4413      	add	r3, r2
 8014c48:	00db      	lsls	r3, r3, #3
 8014c4a:	440b      	add	r3, r1
 8014c4c:	3312      	adds	r3, #18
 8014c4e:	881b      	ldrh	r3, [r3, #0]
 8014c50:	837b      	strh	r3, [r7, #26]
 8014c52:	e01c      	b.n	8014c8e <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8014c54:	7dfb      	ldrb	r3, [r7, #23]
 8014c56:	2b01      	cmp	r3, #1
 8014c58:	d919      	bls.n	8014c8e <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8014c5a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014c5e:	495e      	ldr	r1, [pc, #376]	; (8014dd8 <etharp_find_entry+0x2d4>)
 8014c60:	4613      	mov	r3, r2
 8014c62:	005b      	lsls	r3, r3, #1
 8014c64:	4413      	add	r3, r2
 8014c66:	00db      	lsls	r3, r3, #3
 8014c68:	440b      	add	r3, r1
 8014c6a:	3312      	adds	r3, #18
 8014c6c:	881b      	ldrh	r3, [r3, #0]
 8014c6e:	8b3a      	ldrh	r2, [r7, #24]
 8014c70:	429a      	cmp	r2, r3
 8014c72:	d80c      	bhi.n	8014c8e <etharp_find_entry+0x18a>
            old_stable = i;
 8014c74:	8c3b      	ldrh	r3, [r7, #32]
 8014c76:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8014c78:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014c7c:	4956      	ldr	r1, [pc, #344]	; (8014dd8 <etharp_find_entry+0x2d4>)
 8014c7e:	4613      	mov	r3, r2
 8014c80:	005b      	lsls	r3, r3, #1
 8014c82:	4413      	add	r3, r2
 8014c84:	00db      	lsls	r3, r3, #3
 8014c86:	440b      	add	r3, r1
 8014c88:	3312      	adds	r3, #18
 8014c8a:	881b      	ldrh	r3, [r3, #0]
 8014c8c:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014c8e:	8c3b      	ldrh	r3, [r7, #32]
 8014c90:	3301      	adds	r3, #1
 8014c92:	b29b      	uxth	r3, r3
 8014c94:	843b      	strh	r3, [r7, #32]
 8014c96:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014c9a:	2b09      	cmp	r3, #9
 8014c9c:	f77f af4c 	ble.w	8014b38 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8014ca0:	7afb      	ldrb	r3, [r7, #11]
 8014ca2:	f003 0302 	and.w	r3, r3, #2
 8014ca6:	2b00      	cmp	r3, #0
 8014ca8:	d108      	bne.n	8014cbc <etharp_find_entry+0x1b8>
 8014caa:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8014cae:	2b0a      	cmp	r3, #10
 8014cb0:	d107      	bne.n	8014cc2 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8014cb2:	7afb      	ldrb	r3, [r7, #11]
 8014cb4:	f003 0301 	and.w	r3, r3, #1
 8014cb8:	2b00      	cmp	r3, #0
 8014cba:	d102      	bne.n	8014cc2 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8014cbc:	f04f 33ff 	mov.w	r3, #4294967295
 8014cc0:	e085      	b.n	8014dce <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8014cc2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8014cc6:	2b09      	cmp	r3, #9
 8014cc8:	dc02      	bgt.n	8014cd0 <etharp_find_entry+0x1cc>
    i = empty;
 8014cca:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014ccc:	843b      	strh	r3, [r7, #32]
 8014cce:	e039      	b.n	8014d44 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8014cd0:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8014cd4:	2b09      	cmp	r3, #9
 8014cd6:	dc14      	bgt.n	8014d02 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8014cd8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014cda:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8014cdc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014ce0:	493d      	ldr	r1, [pc, #244]	; (8014dd8 <etharp_find_entry+0x2d4>)
 8014ce2:	4613      	mov	r3, r2
 8014ce4:	005b      	lsls	r3, r3, #1
 8014ce6:	4413      	add	r3, r2
 8014ce8:	00db      	lsls	r3, r3, #3
 8014cea:	440b      	add	r3, r1
 8014cec:	681b      	ldr	r3, [r3, #0]
 8014cee:	2b00      	cmp	r3, #0
 8014cf0:	d018      	beq.n	8014d24 <etharp_find_entry+0x220>
 8014cf2:	4b3a      	ldr	r3, [pc, #232]	; (8014ddc <etharp_find_entry+0x2d8>)
 8014cf4:	f240 126d 	movw	r2, #365	; 0x16d
 8014cf8:	493b      	ldr	r1, [pc, #236]	; (8014de8 <etharp_find_entry+0x2e4>)
 8014cfa:	483a      	ldr	r0, [pc, #232]	; (8014de4 <etharp_find_entry+0x2e0>)
 8014cfc:	f002 fcca 	bl	8017694 <iprintf>
 8014d00:	e010      	b.n	8014d24 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8014d02:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8014d06:	2b09      	cmp	r3, #9
 8014d08:	dc02      	bgt.n	8014d10 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8014d0a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8014d0c:	843b      	strh	r3, [r7, #32]
 8014d0e:	e009      	b.n	8014d24 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8014d10:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8014d14:	2b09      	cmp	r3, #9
 8014d16:	dc02      	bgt.n	8014d1e <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8014d18:	8bfb      	ldrh	r3, [r7, #30]
 8014d1a:	843b      	strh	r3, [r7, #32]
 8014d1c:	e002      	b.n	8014d24 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8014d1e:	f04f 33ff 	mov.w	r3, #4294967295
 8014d22:	e054      	b.n	8014dce <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8014d24:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014d28:	2b09      	cmp	r3, #9
 8014d2a:	dd06      	ble.n	8014d3a <etharp_find_entry+0x236>
 8014d2c:	4b2b      	ldr	r3, [pc, #172]	; (8014ddc <etharp_find_entry+0x2d8>)
 8014d2e:	f240 127f 	movw	r2, #383	; 0x17f
 8014d32:	492e      	ldr	r1, [pc, #184]	; (8014dec <etharp_find_entry+0x2e8>)
 8014d34:	482b      	ldr	r0, [pc, #172]	; (8014de4 <etharp_find_entry+0x2e0>)
 8014d36:	f002 fcad 	bl	8017694 <iprintf>
    etharp_free_entry(i);
 8014d3a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014d3e:	4618      	mov	r0, r3
 8014d40:	f7ff fe06 	bl	8014950 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8014d44:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014d48:	2b09      	cmp	r3, #9
 8014d4a:	dd06      	ble.n	8014d5a <etharp_find_entry+0x256>
 8014d4c:	4b23      	ldr	r3, [pc, #140]	; (8014ddc <etharp_find_entry+0x2d8>)
 8014d4e:	f240 1283 	movw	r2, #387	; 0x183
 8014d52:	4926      	ldr	r1, [pc, #152]	; (8014dec <etharp_find_entry+0x2e8>)
 8014d54:	4823      	ldr	r0, [pc, #140]	; (8014de4 <etharp_find_entry+0x2e0>)
 8014d56:	f002 fc9d 	bl	8017694 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8014d5a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014d5e:	491e      	ldr	r1, [pc, #120]	; (8014dd8 <etharp_find_entry+0x2d4>)
 8014d60:	4613      	mov	r3, r2
 8014d62:	005b      	lsls	r3, r3, #1
 8014d64:	4413      	add	r3, r2
 8014d66:	00db      	lsls	r3, r3, #3
 8014d68:	440b      	add	r3, r1
 8014d6a:	3314      	adds	r3, #20
 8014d6c:	781b      	ldrb	r3, [r3, #0]
 8014d6e:	2b00      	cmp	r3, #0
 8014d70:	d006      	beq.n	8014d80 <etharp_find_entry+0x27c>
 8014d72:	4b1a      	ldr	r3, [pc, #104]	; (8014ddc <etharp_find_entry+0x2d8>)
 8014d74:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8014d78:	491d      	ldr	r1, [pc, #116]	; (8014df0 <etharp_find_entry+0x2ec>)
 8014d7a:	481a      	ldr	r0, [pc, #104]	; (8014de4 <etharp_find_entry+0x2e0>)
 8014d7c:	f002 fc8a 	bl	8017694 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8014d80:	68fb      	ldr	r3, [r7, #12]
 8014d82:	2b00      	cmp	r3, #0
 8014d84:	d00b      	beq.n	8014d9e <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8014d86:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014d8a:	68fb      	ldr	r3, [r7, #12]
 8014d8c:	6819      	ldr	r1, [r3, #0]
 8014d8e:	4812      	ldr	r0, [pc, #72]	; (8014dd8 <etharp_find_entry+0x2d4>)
 8014d90:	4613      	mov	r3, r2
 8014d92:	005b      	lsls	r3, r3, #1
 8014d94:	4413      	add	r3, r2
 8014d96:	00db      	lsls	r3, r3, #3
 8014d98:	4403      	add	r3, r0
 8014d9a:	3304      	adds	r3, #4
 8014d9c:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8014d9e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014da2:	490d      	ldr	r1, [pc, #52]	; (8014dd8 <etharp_find_entry+0x2d4>)
 8014da4:	4613      	mov	r3, r2
 8014da6:	005b      	lsls	r3, r3, #1
 8014da8:	4413      	add	r3, r2
 8014daa:	00db      	lsls	r3, r3, #3
 8014dac:	440b      	add	r3, r1
 8014dae:	3312      	adds	r3, #18
 8014db0:	2200      	movs	r2, #0
 8014db2:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8014db4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014db8:	4907      	ldr	r1, [pc, #28]	; (8014dd8 <etharp_find_entry+0x2d4>)
 8014dba:	4613      	mov	r3, r2
 8014dbc:	005b      	lsls	r3, r3, #1
 8014dbe:	4413      	add	r3, r2
 8014dc0:	00db      	lsls	r3, r3, #3
 8014dc2:	440b      	add	r3, r1
 8014dc4:	3308      	adds	r3, #8
 8014dc6:	687a      	ldr	r2, [r7, #4]
 8014dc8:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8014dca:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8014dce:	4618      	mov	r0, r3
 8014dd0:	3728      	adds	r7, #40	; 0x28
 8014dd2:	46bd      	mov	sp, r7
 8014dd4:	bd80      	pop	{r7, pc}
 8014dd6:	bf00      	nop
 8014dd8:	200109cc 	.word	0x200109cc
 8014ddc:	0801b78c 	.word	0x0801b78c
 8014de0:	0801b7c4 	.word	0x0801b7c4
 8014de4:	0801b804 	.word	0x0801b804
 8014de8:	0801b82c 	.word	0x0801b82c
 8014dec:	0801b844 	.word	0x0801b844
 8014df0:	0801b858 	.word	0x0801b858

08014df4 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8014df4:	b580      	push	{r7, lr}
 8014df6:	b088      	sub	sp, #32
 8014df8:	af02      	add	r7, sp, #8
 8014dfa:	60f8      	str	r0, [r7, #12]
 8014dfc:	60b9      	str	r1, [r7, #8]
 8014dfe:	607a      	str	r2, [r7, #4]
 8014e00:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8014e02:	68fb      	ldr	r3, [r7, #12]
 8014e04:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8014e08:	2b06      	cmp	r3, #6
 8014e0a:	d006      	beq.n	8014e1a <etharp_update_arp_entry+0x26>
 8014e0c:	4b48      	ldr	r3, [pc, #288]	; (8014f30 <etharp_update_arp_entry+0x13c>)
 8014e0e:	f240 12a9 	movw	r2, #425	; 0x1a9
 8014e12:	4948      	ldr	r1, [pc, #288]	; (8014f34 <etharp_update_arp_entry+0x140>)
 8014e14:	4848      	ldr	r0, [pc, #288]	; (8014f38 <etharp_update_arp_entry+0x144>)
 8014e16:	f002 fc3d 	bl	8017694 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8014e1a:	68bb      	ldr	r3, [r7, #8]
 8014e1c:	2b00      	cmp	r3, #0
 8014e1e:	d012      	beq.n	8014e46 <etharp_update_arp_entry+0x52>
 8014e20:	68bb      	ldr	r3, [r7, #8]
 8014e22:	681b      	ldr	r3, [r3, #0]
 8014e24:	2b00      	cmp	r3, #0
 8014e26:	d00e      	beq.n	8014e46 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8014e28:	68bb      	ldr	r3, [r7, #8]
 8014e2a:	681b      	ldr	r3, [r3, #0]
 8014e2c:	68f9      	ldr	r1, [r7, #12]
 8014e2e:	4618      	mov	r0, r3
 8014e30:	f001 f920 	bl	8016074 <ip4_addr_isbroadcast_u32>
 8014e34:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8014e36:	2b00      	cmp	r3, #0
 8014e38:	d105      	bne.n	8014e46 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8014e3a:	68bb      	ldr	r3, [r7, #8]
 8014e3c:	681b      	ldr	r3, [r3, #0]
 8014e3e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8014e42:	2be0      	cmp	r3, #224	; 0xe0
 8014e44:	d102      	bne.n	8014e4c <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8014e46:	f06f 030f 	mvn.w	r3, #15
 8014e4a:	e06c      	b.n	8014f26 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8014e4c:	78fb      	ldrb	r3, [r7, #3]
 8014e4e:	68fa      	ldr	r2, [r7, #12]
 8014e50:	4619      	mov	r1, r3
 8014e52:	68b8      	ldr	r0, [r7, #8]
 8014e54:	f7ff fe56 	bl	8014b04 <etharp_find_entry>
 8014e58:	4603      	mov	r3, r0
 8014e5a:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8014e5c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8014e60:	2b00      	cmp	r3, #0
 8014e62:	da02      	bge.n	8014e6a <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8014e64:	8afb      	ldrh	r3, [r7, #22]
 8014e66:	b25b      	sxtb	r3, r3
 8014e68:	e05d      	b.n	8014f26 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8014e6a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014e6e:	4933      	ldr	r1, [pc, #204]	; (8014f3c <etharp_update_arp_entry+0x148>)
 8014e70:	4613      	mov	r3, r2
 8014e72:	005b      	lsls	r3, r3, #1
 8014e74:	4413      	add	r3, r2
 8014e76:	00db      	lsls	r3, r3, #3
 8014e78:	440b      	add	r3, r1
 8014e7a:	3314      	adds	r3, #20
 8014e7c:	2202      	movs	r2, #2
 8014e7e:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8014e80:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014e84:	492d      	ldr	r1, [pc, #180]	; (8014f3c <etharp_update_arp_entry+0x148>)
 8014e86:	4613      	mov	r3, r2
 8014e88:	005b      	lsls	r3, r3, #1
 8014e8a:	4413      	add	r3, r2
 8014e8c:	00db      	lsls	r3, r3, #3
 8014e8e:	440b      	add	r3, r1
 8014e90:	3308      	adds	r3, #8
 8014e92:	68fa      	ldr	r2, [r7, #12]
 8014e94:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8014e96:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014e9a:	4613      	mov	r3, r2
 8014e9c:	005b      	lsls	r3, r3, #1
 8014e9e:	4413      	add	r3, r2
 8014ea0:	00db      	lsls	r3, r3, #3
 8014ea2:	3308      	adds	r3, #8
 8014ea4:	4a25      	ldr	r2, [pc, #148]	; (8014f3c <etharp_update_arp_entry+0x148>)
 8014ea6:	4413      	add	r3, r2
 8014ea8:	3304      	adds	r3, #4
 8014eaa:	2206      	movs	r2, #6
 8014eac:	6879      	ldr	r1, [r7, #4]
 8014eae:	4618      	mov	r0, r3
 8014eb0:	f002 fb45 	bl	801753e <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8014eb4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014eb8:	4920      	ldr	r1, [pc, #128]	; (8014f3c <etharp_update_arp_entry+0x148>)
 8014eba:	4613      	mov	r3, r2
 8014ebc:	005b      	lsls	r3, r3, #1
 8014ebe:	4413      	add	r3, r2
 8014ec0:	00db      	lsls	r3, r3, #3
 8014ec2:	440b      	add	r3, r1
 8014ec4:	3312      	adds	r3, #18
 8014ec6:	2200      	movs	r2, #0
 8014ec8:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8014eca:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014ece:	491b      	ldr	r1, [pc, #108]	; (8014f3c <etharp_update_arp_entry+0x148>)
 8014ed0:	4613      	mov	r3, r2
 8014ed2:	005b      	lsls	r3, r3, #1
 8014ed4:	4413      	add	r3, r2
 8014ed6:	00db      	lsls	r3, r3, #3
 8014ed8:	440b      	add	r3, r1
 8014eda:	681b      	ldr	r3, [r3, #0]
 8014edc:	2b00      	cmp	r3, #0
 8014ede:	d021      	beq.n	8014f24 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8014ee0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014ee4:	4915      	ldr	r1, [pc, #84]	; (8014f3c <etharp_update_arp_entry+0x148>)
 8014ee6:	4613      	mov	r3, r2
 8014ee8:	005b      	lsls	r3, r3, #1
 8014eea:	4413      	add	r3, r2
 8014eec:	00db      	lsls	r3, r3, #3
 8014eee:	440b      	add	r3, r1
 8014ef0:	681b      	ldr	r3, [r3, #0]
 8014ef2:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8014ef4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014ef8:	4910      	ldr	r1, [pc, #64]	; (8014f3c <etharp_update_arp_entry+0x148>)
 8014efa:	4613      	mov	r3, r2
 8014efc:	005b      	lsls	r3, r3, #1
 8014efe:	4413      	add	r3, r2
 8014f00:	00db      	lsls	r3, r3, #3
 8014f02:	440b      	add	r3, r1
 8014f04:	2200      	movs	r2, #0
 8014f06:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8014f08:	68fb      	ldr	r3, [r7, #12]
 8014f0a:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 8014f0e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8014f12:	9300      	str	r3, [sp, #0]
 8014f14:	687b      	ldr	r3, [r7, #4]
 8014f16:	6939      	ldr	r1, [r7, #16]
 8014f18:	68f8      	ldr	r0, [r7, #12]
 8014f1a:	f001 ffb9 	bl	8016e90 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8014f1e:	6938      	ldr	r0, [r7, #16]
 8014f20:	f7f6 fd12 	bl	800b948 <pbuf_free>
  }
  return ERR_OK;
 8014f24:	2300      	movs	r3, #0
}
 8014f26:	4618      	mov	r0, r3
 8014f28:	3718      	adds	r7, #24
 8014f2a:	46bd      	mov	sp, r7
 8014f2c:	bd80      	pop	{r7, pc}
 8014f2e:	bf00      	nop
 8014f30:	0801b78c 	.word	0x0801b78c
 8014f34:	0801b884 	.word	0x0801b884
 8014f38:	0801b804 	.word	0x0801b804
 8014f3c:	200109cc 	.word	0x200109cc

08014f40 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8014f40:	b580      	push	{r7, lr}
 8014f42:	b084      	sub	sp, #16
 8014f44:	af00      	add	r7, sp, #0
 8014f46:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014f48:	2300      	movs	r3, #0
 8014f4a:	60fb      	str	r3, [r7, #12]
 8014f4c:	e01e      	b.n	8014f8c <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8014f4e:	4913      	ldr	r1, [pc, #76]	; (8014f9c <etharp_cleanup_netif+0x5c>)
 8014f50:	68fa      	ldr	r2, [r7, #12]
 8014f52:	4613      	mov	r3, r2
 8014f54:	005b      	lsls	r3, r3, #1
 8014f56:	4413      	add	r3, r2
 8014f58:	00db      	lsls	r3, r3, #3
 8014f5a:	440b      	add	r3, r1
 8014f5c:	3314      	adds	r3, #20
 8014f5e:	781b      	ldrb	r3, [r3, #0]
 8014f60:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8014f62:	7afb      	ldrb	r3, [r7, #11]
 8014f64:	2b00      	cmp	r3, #0
 8014f66:	d00e      	beq.n	8014f86 <etharp_cleanup_netif+0x46>
 8014f68:	490c      	ldr	r1, [pc, #48]	; (8014f9c <etharp_cleanup_netif+0x5c>)
 8014f6a:	68fa      	ldr	r2, [r7, #12]
 8014f6c:	4613      	mov	r3, r2
 8014f6e:	005b      	lsls	r3, r3, #1
 8014f70:	4413      	add	r3, r2
 8014f72:	00db      	lsls	r3, r3, #3
 8014f74:	440b      	add	r3, r1
 8014f76:	3308      	adds	r3, #8
 8014f78:	681b      	ldr	r3, [r3, #0]
 8014f7a:	687a      	ldr	r2, [r7, #4]
 8014f7c:	429a      	cmp	r2, r3
 8014f7e:	d102      	bne.n	8014f86 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8014f80:	68f8      	ldr	r0, [r7, #12]
 8014f82:	f7ff fce5 	bl	8014950 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014f86:	68fb      	ldr	r3, [r7, #12]
 8014f88:	3301      	adds	r3, #1
 8014f8a:	60fb      	str	r3, [r7, #12]
 8014f8c:	68fb      	ldr	r3, [r7, #12]
 8014f8e:	2b09      	cmp	r3, #9
 8014f90:	dddd      	ble.n	8014f4e <etharp_cleanup_netif+0xe>
    }
  }
}
 8014f92:	bf00      	nop
 8014f94:	bf00      	nop
 8014f96:	3710      	adds	r7, #16
 8014f98:	46bd      	mov	sp, r7
 8014f9a:	bd80      	pop	{r7, pc}
 8014f9c:	200109cc 	.word	0x200109cc

08014fa0 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8014fa0:	b5b0      	push	{r4, r5, r7, lr}
 8014fa2:	b08a      	sub	sp, #40	; 0x28
 8014fa4:	af04      	add	r7, sp, #16
 8014fa6:	6078      	str	r0, [r7, #4]
 8014fa8:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8014faa:	683b      	ldr	r3, [r7, #0]
 8014fac:	2b00      	cmp	r3, #0
 8014fae:	d107      	bne.n	8014fc0 <etharp_input+0x20>
 8014fb0:	4b3f      	ldr	r3, [pc, #252]	; (80150b0 <etharp_input+0x110>)
 8014fb2:	f240 228a 	movw	r2, #650	; 0x28a
 8014fb6:	493f      	ldr	r1, [pc, #252]	; (80150b4 <etharp_input+0x114>)
 8014fb8:	483f      	ldr	r0, [pc, #252]	; (80150b8 <etharp_input+0x118>)
 8014fba:	f002 fb6b 	bl	8017694 <iprintf>
 8014fbe:	e074      	b.n	80150aa <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 8014fc0:	687b      	ldr	r3, [r7, #4]
 8014fc2:	685b      	ldr	r3, [r3, #4]
 8014fc4:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8014fc6:	693b      	ldr	r3, [r7, #16]
 8014fc8:	881b      	ldrh	r3, [r3, #0]
 8014fca:	b29b      	uxth	r3, r3
 8014fcc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014fd0:	d10c      	bne.n	8014fec <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8014fd2:	693b      	ldr	r3, [r7, #16]
 8014fd4:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8014fd6:	2b06      	cmp	r3, #6
 8014fd8:	d108      	bne.n	8014fec <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8014fda:	693b      	ldr	r3, [r7, #16]
 8014fdc:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8014fde:	2b04      	cmp	r3, #4
 8014fe0:	d104      	bne.n	8014fec <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8014fe2:	693b      	ldr	r3, [r7, #16]
 8014fe4:	885b      	ldrh	r3, [r3, #2]
 8014fe6:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8014fe8:	2b08      	cmp	r3, #8
 8014fea:	d003      	beq.n	8014ff4 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8014fec:	6878      	ldr	r0, [r7, #4]
 8014fee:	f7f6 fcab 	bl	800b948 <pbuf_free>
    return;
 8014ff2:	e05a      	b.n	80150aa <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8014ff4:	693b      	ldr	r3, [r7, #16]
 8014ff6:	330e      	adds	r3, #14
 8014ff8:	681b      	ldr	r3, [r3, #0]
 8014ffa:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8014ffc:	693b      	ldr	r3, [r7, #16]
 8014ffe:	3318      	adds	r3, #24
 8015000:	681b      	ldr	r3, [r3, #0]
 8015002:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8015004:	683b      	ldr	r3, [r7, #0]
 8015006:	3304      	adds	r3, #4
 8015008:	681b      	ldr	r3, [r3, #0]
 801500a:	2b00      	cmp	r3, #0
 801500c:	d102      	bne.n	8015014 <etharp_input+0x74>
    for_us = 0;
 801500e:	2300      	movs	r3, #0
 8015010:	75fb      	strb	r3, [r7, #23]
 8015012:	e009      	b.n	8015028 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8015014:	68ba      	ldr	r2, [r7, #8]
 8015016:	683b      	ldr	r3, [r7, #0]
 8015018:	3304      	adds	r3, #4
 801501a:	681b      	ldr	r3, [r3, #0]
 801501c:	429a      	cmp	r2, r3
 801501e:	bf0c      	ite	eq
 8015020:	2301      	moveq	r3, #1
 8015022:	2300      	movne	r3, #0
 8015024:	b2db      	uxtb	r3, r3
 8015026:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8015028:	693b      	ldr	r3, [r7, #16]
 801502a:	f103 0208 	add.w	r2, r3, #8
 801502e:	7dfb      	ldrb	r3, [r7, #23]
 8015030:	2b00      	cmp	r3, #0
 8015032:	d001      	beq.n	8015038 <etharp_input+0x98>
 8015034:	2301      	movs	r3, #1
 8015036:	e000      	b.n	801503a <etharp_input+0x9a>
 8015038:	2302      	movs	r3, #2
 801503a:	f107 010c 	add.w	r1, r7, #12
 801503e:	6838      	ldr	r0, [r7, #0]
 8015040:	f7ff fed8 	bl	8014df4 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8015044:	693b      	ldr	r3, [r7, #16]
 8015046:	88db      	ldrh	r3, [r3, #6]
 8015048:	b29b      	uxth	r3, r3
 801504a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801504e:	d003      	beq.n	8015058 <etharp_input+0xb8>
 8015050:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015054:	d01e      	beq.n	8015094 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8015056:	e025      	b.n	80150a4 <etharp_input+0x104>
      if (for_us) {
 8015058:	7dfb      	ldrb	r3, [r7, #23]
 801505a:	2b00      	cmp	r3, #0
 801505c:	d021      	beq.n	80150a2 <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801505e:	683b      	ldr	r3, [r7, #0]
 8015060:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 8015064:	693b      	ldr	r3, [r7, #16]
 8015066:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801506a:	683b      	ldr	r3, [r7, #0]
 801506c:	f103 052a 	add.w	r5, r3, #42	; 0x2a
 8015070:	683b      	ldr	r3, [r7, #0]
 8015072:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8015074:	693a      	ldr	r2, [r7, #16]
 8015076:	3208      	adds	r2, #8
        etharp_raw(netif,
 8015078:	2102      	movs	r1, #2
 801507a:	9103      	str	r1, [sp, #12]
 801507c:	f107 010c 	add.w	r1, r7, #12
 8015080:	9102      	str	r1, [sp, #8]
 8015082:	9201      	str	r2, [sp, #4]
 8015084:	9300      	str	r3, [sp, #0]
 8015086:	462b      	mov	r3, r5
 8015088:	4622      	mov	r2, r4
 801508a:	4601      	mov	r1, r0
 801508c:	6838      	ldr	r0, [r7, #0]
 801508e:	f000 faef 	bl	8015670 <etharp_raw>
      break;
 8015092:	e006      	b.n	80150a2 <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 8015094:	f107 030c 	add.w	r3, r7, #12
 8015098:	4619      	mov	r1, r3
 801509a:	6838      	ldr	r0, [r7, #0]
 801509c:	f7fe f9fc 	bl	8013498 <dhcp_arp_reply>
      break;
 80150a0:	e000      	b.n	80150a4 <etharp_input+0x104>
      break;
 80150a2:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 80150a4:	6878      	ldr	r0, [r7, #4]
 80150a6:	f7f6 fc4f 	bl	800b948 <pbuf_free>
}
 80150aa:	3718      	adds	r7, #24
 80150ac:	46bd      	mov	sp, r7
 80150ae:	bdb0      	pop	{r4, r5, r7, pc}
 80150b0:	0801b78c 	.word	0x0801b78c
 80150b4:	0801b8dc 	.word	0x0801b8dc
 80150b8:	0801b804 	.word	0x0801b804

080150bc <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 80150bc:	b580      	push	{r7, lr}
 80150be:	b086      	sub	sp, #24
 80150c0:	af02      	add	r7, sp, #8
 80150c2:	60f8      	str	r0, [r7, #12]
 80150c4:	60b9      	str	r1, [r7, #8]
 80150c6:	4613      	mov	r3, r2
 80150c8:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 80150ca:	79fa      	ldrb	r2, [r7, #7]
 80150cc:	4944      	ldr	r1, [pc, #272]	; (80151e0 <etharp_output_to_arp_index+0x124>)
 80150ce:	4613      	mov	r3, r2
 80150d0:	005b      	lsls	r3, r3, #1
 80150d2:	4413      	add	r3, r2
 80150d4:	00db      	lsls	r3, r3, #3
 80150d6:	440b      	add	r3, r1
 80150d8:	3314      	adds	r3, #20
 80150da:	781b      	ldrb	r3, [r3, #0]
 80150dc:	2b01      	cmp	r3, #1
 80150de:	d806      	bhi.n	80150ee <etharp_output_to_arp_index+0x32>
 80150e0:	4b40      	ldr	r3, [pc, #256]	; (80151e4 <etharp_output_to_arp_index+0x128>)
 80150e2:	f240 22ee 	movw	r2, #750	; 0x2ee
 80150e6:	4940      	ldr	r1, [pc, #256]	; (80151e8 <etharp_output_to_arp_index+0x12c>)
 80150e8:	4840      	ldr	r0, [pc, #256]	; (80151ec <etharp_output_to_arp_index+0x130>)
 80150ea:	f002 fad3 	bl	8017694 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 80150ee:	79fa      	ldrb	r2, [r7, #7]
 80150f0:	493b      	ldr	r1, [pc, #236]	; (80151e0 <etharp_output_to_arp_index+0x124>)
 80150f2:	4613      	mov	r3, r2
 80150f4:	005b      	lsls	r3, r3, #1
 80150f6:	4413      	add	r3, r2
 80150f8:	00db      	lsls	r3, r3, #3
 80150fa:	440b      	add	r3, r1
 80150fc:	3314      	adds	r3, #20
 80150fe:	781b      	ldrb	r3, [r3, #0]
 8015100:	2b02      	cmp	r3, #2
 8015102:	d153      	bne.n	80151ac <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8015104:	79fa      	ldrb	r2, [r7, #7]
 8015106:	4936      	ldr	r1, [pc, #216]	; (80151e0 <etharp_output_to_arp_index+0x124>)
 8015108:	4613      	mov	r3, r2
 801510a:	005b      	lsls	r3, r3, #1
 801510c:	4413      	add	r3, r2
 801510e:	00db      	lsls	r3, r3, #3
 8015110:	440b      	add	r3, r1
 8015112:	3312      	adds	r3, #18
 8015114:	881b      	ldrh	r3, [r3, #0]
 8015116:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 801511a:	d919      	bls.n	8015150 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 801511c:	79fa      	ldrb	r2, [r7, #7]
 801511e:	4613      	mov	r3, r2
 8015120:	005b      	lsls	r3, r3, #1
 8015122:	4413      	add	r3, r2
 8015124:	00db      	lsls	r3, r3, #3
 8015126:	4a2e      	ldr	r2, [pc, #184]	; (80151e0 <etharp_output_to_arp_index+0x124>)
 8015128:	4413      	add	r3, r2
 801512a:	3304      	adds	r3, #4
 801512c:	4619      	mov	r1, r3
 801512e:	68f8      	ldr	r0, [r7, #12]
 8015130:	f000 fb4c 	bl	80157cc <etharp_request>
 8015134:	4603      	mov	r3, r0
 8015136:	2b00      	cmp	r3, #0
 8015138:	d138      	bne.n	80151ac <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801513a:	79fa      	ldrb	r2, [r7, #7]
 801513c:	4928      	ldr	r1, [pc, #160]	; (80151e0 <etharp_output_to_arp_index+0x124>)
 801513e:	4613      	mov	r3, r2
 8015140:	005b      	lsls	r3, r3, #1
 8015142:	4413      	add	r3, r2
 8015144:	00db      	lsls	r3, r3, #3
 8015146:	440b      	add	r3, r1
 8015148:	3314      	adds	r3, #20
 801514a:	2203      	movs	r2, #3
 801514c:	701a      	strb	r2, [r3, #0]
 801514e:	e02d      	b.n	80151ac <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8015150:	79fa      	ldrb	r2, [r7, #7]
 8015152:	4923      	ldr	r1, [pc, #140]	; (80151e0 <etharp_output_to_arp_index+0x124>)
 8015154:	4613      	mov	r3, r2
 8015156:	005b      	lsls	r3, r3, #1
 8015158:	4413      	add	r3, r2
 801515a:	00db      	lsls	r3, r3, #3
 801515c:	440b      	add	r3, r1
 801515e:	3312      	adds	r3, #18
 8015160:	881b      	ldrh	r3, [r3, #0]
 8015162:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8015166:	d321      	bcc.n	80151ac <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8015168:	79fa      	ldrb	r2, [r7, #7]
 801516a:	4613      	mov	r3, r2
 801516c:	005b      	lsls	r3, r3, #1
 801516e:	4413      	add	r3, r2
 8015170:	00db      	lsls	r3, r3, #3
 8015172:	4a1b      	ldr	r2, [pc, #108]	; (80151e0 <etharp_output_to_arp_index+0x124>)
 8015174:	4413      	add	r3, r2
 8015176:	1d19      	adds	r1, r3, #4
 8015178:	79fa      	ldrb	r2, [r7, #7]
 801517a:	4613      	mov	r3, r2
 801517c:	005b      	lsls	r3, r3, #1
 801517e:	4413      	add	r3, r2
 8015180:	00db      	lsls	r3, r3, #3
 8015182:	3308      	adds	r3, #8
 8015184:	4a16      	ldr	r2, [pc, #88]	; (80151e0 <etharp_output_to_arp_index+0x124>)
 8015186:	4413      	add	r3, r2
 8015188:	3304      	adds	r3, #4
 801518a:	461a      	mov	r2, r3
 801518c:	68f8      	ldr	r0, [r7, #12]
 801518e:	f000 fafb 	bl	8015788 <etharp_request_dst>
 8015192:	4603      	mov	r3, r0
 8015194:	2b00      	cmp	r3, #0
 8015196:	d109      	bne.n	80151ac <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8015198:	79fa      	ldrb	r2, [r7, #7]
 801519a:	4911      	ldr	r1, [pc, #68]	; (80151e0 <etharp_output_to_arp_index+0x124>)
 801519c:	4613      	mov	r3, r2
 801519e:	005b      	lsls	r3, r3, #1
 80151a0:	4413      	add	r3, r2
 80151a2:	00db      	lsls	r3, r3, #3
 80151a4:	440b      	add	r3, r1
 80151a6:	3314      	adds	r3, #20
 80151a8:	2203      	movs	r2, #3
 80151aa:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 80151ac:	68fb      	ldr	r3, [r7, #12]
 80151ae:	f103 012a 	add.w	r1, r3, #42	; 0x2a
 80151b2:	79fa      	ldrb	r2, [r7, #7]
 80151b4:	4613      	mov	r3, r2
 80151b6:	005b      	lsls	r3, r3, #1
 80151b8:	4413      	add	r3, r2
 80151ba:	00db      	lsls	r3, r3, #3
 80151bc:	3308      	adds	r3, #8
 80151be:	4a08      	ldr	r2, [pc, #32]	; (80151e0 <etharp_output_to_arp_index+0x124>)
 80151c0:	4413      	add	r3, r2
 80151c2:	3304      	adds	r3, #4
 80151c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80151c8:	9200      	str	r2, [sp, #0]
 80151ca:	460a      	mov	r2, r1
 80151cc:	68b9      	ldr	r1, [r7, #8]
 80151ce:	68f8      	ldr	r0, [r7, #12]
 80151d0:	f001 fe5e 	bl	8016e90 <ethernet_output>
 80151d4:	4603      	mov	r3, r0
}
 80151d6:	4618      	mov	r0, r3
 80151d8:	3710      	adds	r7, #16
 80151da:	46bd      	mov	sp, r7
 80151dc:	bd80      	pop	{r7, pc}
 80151de:	bf00      	nop
 80151e0:	200109cc 	.word	0x200109cc
 80151e4:	0801b78c 	.word	0x0801b78c
 80151e8:	0801b8fc 	.word	0x0801b8fc
 80151ec:	0801b804 	.word	0x0801b804

080151f0 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 80151f0:	b580      	push	{r7, lr}
 80151f2:	b08a      	sub	sp, #40	; 0x28
 80151f4:	af02      	add	r7, sp, #8
 80151f6:	60f8      	str	r0, [r7, #12]
 80151f8:	60b9      	str	r1, [r7, #8]
 80151fa:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 80151fc:	687b      	ldr	r3, [r7, #4]
 80151fe:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8015200:	68fb      	ldr	r3, [r7, #12]
 8015202:	2b00      	cmp	r3, #0
 8015204:	d106      	bne.n	8015214 <etharp_output+0x24>
 8015206:	4b73      	ldr	r3, [pc, #460]	; (80153d4 <etharp_output+0x1e4>)
 8015208:	f240 321e 	movw	r2, #798	; 0x31e
 801520c:	4972      	ldr	r1, [pc, #456]	; (80153d8 <etharp_output+0x1e8>)
 801520e:	4873      	ldr	r0, [pc, #460]	; (80153dc <etharp_output+0x1ec>)
 8015210:	f002 fa40 	bl	8017694 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8015214:	68bb      	ldr	r3, [r7, #8]
 8015216:	2b00      	cmp	r3, #0
 8015218:	d106      	bne.n	8015228 <etharp_output+0x38>
 801521a:	4b6e      	ldr	r3, [pc, #440]	; (80153d4 <etharp_output+0x1e4>)
 801521c:	f240 321f 	movw	r2, #799	; 0x31f
 8015220:	496f      	ldr	r1, [pc, #444]	; (80153e0 <etharp_output+0x1f0>)
 8015222:	486e      	ldr	r0, [pc, #440]	; (80153dc <etharp_output+0x1ec>)
 8015224:	f002 fa36 	bl	8017694 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8015228:	687b      	ldr	r3, [r7, #4]
 801522a:	2b00      	cmp	r3, #0
 801522c:	d106      	bne.n	801523c <etharp_output+0x4c>
 801522e:	4b69      	ldr	r3, [pc, #420]	; (80153d4 <etharp_output+0x1e4>)
 8015230:	f44f 7248 	mov.w	r2, #800	; 0x320
 8015234:	496b      	ldr	r1, [pc, #428]	; (80153e4 <etharp_output+0x1f4>)
 8015236:	4869      	ldr	r0, [pc, #420]	; (80153dc <etharp_output+0x1ec>)
 8015238:	f002 fa2c 	bl	8017694 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 801523c:	687b      	ldr	r3, [r7, #4]
 801523e:	681b      	ldr	r3, [r3, #0]
 8015240:	68f9      	ldr	r1, [r7, #12]
 8015242:	4618      	mov	r0, r3
 8015244:	f000 ff16 	bl	8016074 <ip4_addr_isbroadcast_u32>
 8015248:	4603      	mov	r3, r0
 801524a:	2b00      	cmp	r3, #0
 801524c:	d002      	beq.n	8015254 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801524e:	4b66      	ldr	r3, [pc, #408]	; (80153e8 <etharp_output+0x1f8>)
 8015250:	61fb      	str	r3, [r7, #28]
 8015252:	e0af      	b.n	80153b4 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8015254:	687b      	ldr	r3, [r7, #4]
 8015256:	681b      	ldr	r3, [r3, #0]
 8015258:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801525c:	2be0      	cmp	r3, #224	; 0xe0
 801525e:	d118      	bne.n	8015292 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8015260:	2301      	movs	r3, #1
 8015262:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8015264:	2300      	movs	r3, #0
 8015266:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8015268:	235e      	movs	r3, #94	; 0x5e
 801526a:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 801526c:	687b      	ldr	r3, [r7, #4]
 801526e:	3301      	adds	r3, #1
 8015270:	781b      	ldrb	r3, [r3, #0]
 8015272:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015276:	b2db      	uxtb	r3, r3
 8015278:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801527a:	687b      	ldr	r3, [r7, #4]
 801527c:	3302      	adds	r3, #2
 801527e:	781b      	ldrb	r3, [r3, #0]
 8015280:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8015282:	687b      	ldr	r3, [r7, #4]
 8015284:	3303      	adds	r3, #3
 8015286:	781b      	ldrb	r3, [r3, #0]
 8015288:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801528a:	f107 0310 	add.w	r3, r7, #16
 801528e:	61fb      	str	r3, [r7, #28]
 8015290:	e090      	b.n	80153b4 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8015292:	687b      	ldr	r3, [r7, #4]
 8015294:	681a      	ldr	r2, [r3, #0]
 8015296:	68fb      	ldr	r3, [r7, #12]
 8015298:	3304      	adds	r3, #4
 801529a:	681b      	ldr	r3, [r3, #0]
 801529c:	405a      	eors	r2, r3
 801529e:	68fb      	ldr	r3, [r7, #12]
 80152a0:	3308      	adds	r3, #8
 80152a2:	681b      	ldr	r3, [r3, #0]
 80152a4:	4013      	ands	r3, r2
 80152a6:	2b00      	cmp	r3, #0
 80152a8:	d012      	beq.n	80152d0 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 80152aa:	687b      	ldr	r3, [r7, #4]
 80152ac:	681b      	ldr	r3, [r3, #0]
 80152ae:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80152b0:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 80152b4:	4293      	cmp	r3, r2
 80152b6:	d00b      	beq.n	80152d0 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 80152b8:	68fb      	ldr	r3, [r7, #12]
 80152ba:	330c      	adds	r3, #12
 80152bc:	681b      	ldr	r3, [r3, #0]
 80152be:	2b00      	cmp	r3, #0
 80152c0:	d003      	beq.n	80152ca <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 80152c2:	68fb      	ldr	r3, [r7, #12]
 80152c4:	330c      	adds	r3, #12
 80152c6:	61bb      	str	r3, [r7, #24]
 80152c8:	e002      	b.n	80152d0 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 80152ca:	f06f 0303 	mvn.w	r3, #3
 80152ce:	e07d      	b.n	80153cc <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80152d0:	4b46      	ldr	r3, [pc, #280]	; (80153ec <etharp_output+0x1fc>)
 80152d2:	781b      	ldrb	r3, [r3, #0]
 80152d4:	4619      	mov	r1, r3
 80152d6:	4a46      	ldr	r2, [pc, #280]	; (80153f0 <etharp_output+0x200>)
 80152d8:	460b      	mov	r3, r1
 80152da:	005b      	lsls	r3, r3, #1
 80152dc:	440b      	add	r3, r1
 80152de:	00db      	lsls	r3, r3, #3
 80152e0:	4413      	add	r3, r2
 80152e2:	3314      	adds	r3, #20
 80152e4:	781b      	ldrb	r3, [r3, #0]
 80152e6:	2b01      	cmp	r3, #1
 80152e8:	d925      	bls.n	8015336 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 80152ea:	4b40      	ldr	r3, [pc, #256]	; (80153ec <etharp_output+0x1fc>)
 80152ec:	781b      	ldrb	r3, [r3, #0]
 80152ee:	4619      	mov	r1, r3
 80152f0:	4a3f      	ldr	r2, [pc, #252]	; (80153f0 <etharp_output+0x200>)
 80152f2:	460b      	mov	r3, r1
 80152f4:	005b      	lsls	r3, r3, #1
 80152f6:	440b      	add	r3, r1
 80152f8:	00db      	lsls	r3, r3, #3
 80152fa:	4413      	add	r3, r2
 80152fc:	3308      	adds	r3, #8
 80152fe:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8015300:	68fa      	ldr	r2, [r7, #12]
 8015302:	429a      	cmp	r2, r3
 8015304:	d117      	bne.n	8015336 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8015306:	69bb      	ldr	r3, [r7, #24]
 8015308:	681a      	ldr	r2, [r3, #0]
 801530a:	4b38      	ldr	r3, [pc, #224]	; (80153ec <etharp_output+0x1fc>)
 801530c:	781b      	ldrb	r3, [r3, #0]
 801530e:	4618      	mov	r0, r3
 8015310:	4937      	ldr	r1, [pc, #220]	; (80153f0 <etharp_output+0x200>)
 8015312:	4603      	mov	r3, r0
 8015314:	005b      	lsls	r3, r3, #1
 8015316:	4403      	add	r3, r0
 8015318:	00db      	lsls	r3, r3, #3
 801531a:	440b      	add	r3, r1
 801531c:	3304      	adds	r3, #4
 801531e:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8015320:	429a      	cmp	r2, r3
 8015322:	d108      	bne.n	8015336 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8015324:	4b31      	ldr	r3, [pc, #196]	; (80153ec <etharp_output+0x1fc>)
 8015326:	781b      	ldrb	r3, [r3, #0]
 8015328:	461a      	mov	r2, r3
 801532a:	68b9      	ldr	r1, [r7, #8]
 801532c:	68f8      	ldr	r0, [r7, #12]
 801532e:	f7ff fec5 	bl	80150bc <etharp_output_to_arp_index>
 8015332:	4603      	mov	r3, r0
 8015334:	e04a      	b.n	80153cc <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8015336:	2300      	movs	r3, #0
 8015338:	75fb      	strb	r3, [r7, #23]
 801533a:	e031      	b.n	80153a0 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801533c:	7dfa      	ldrb	r2, [r7, #23]
 801533e:	492c      	ldr	r1, [pc, #176]	; (80153f0 <etharp_output+0x200>)
 8015340:	4613      	mov	r3, r2
 8015342:	005b      	lsls	r3, r3, #1
 8015344:	4413      	add	r3, r2
 8015346:	00db      	lsls	r3, r3, #3
 8015348:	440b      	add	r3, r1
 801534a:	3314      	adds	r3, #20
 801534c:	781b      	ldrb	r3, [r3, #0]
 801534e:	2b01      	cmp	r3, #1
 8015350:	d923      	bls.n	801539a <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8015352:	7dfa      	ldrb	r2, [r7, #23]
 8015354:	4926      	ldr	r1, [pc, #152]	; (80153f0 <etharp_output+0x200>)
 8015356:	4613      	mov	r3, r2
 8015358:	005b      	lsls	r3, r3, #1
 801535a:	4413      	add	r3, r2
 801535c:	00db      	lsls	r3, r3, #3
 801535e:	440b      	add	r3, r1
 8015360:	3308      	adds	r3, #8
 8015362:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8015364:	68fa      	ldr	r2, [r7, #12]
 8015366:	429a      	cmp	r2, r3
 8015368:	d117      	bne.n	801539a <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801536a:	69bb      	ldr	r3, [r7, #24]
 801536c:	6819      	ldr	r1, [r3, #0]
 801536e:	7dfa      	ldrb	r2, [r7, #23]
 8015370:	481f      	ldr	r0, [pc, #124]	; (80153f0 <etharp_output+0x200>)
 8015372:	4613      	mov	r3, r2
 8015374:	005b      	lsls	r3, r3, #1
 8015376:	4413      	add	r3, r2
 8015378:	00db      	lsls	r3, r3, #3
 801537a:	4403      	add	r3, r0
 801537c:	3304      	adds	r3, #4
 801537e:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8015380:	4299      	cmp	r1, r3
 8015382:	d10a      	bne.n	801539a <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8015384:	4a19      	ldr	r2, [pc, #100]	; (80153ec <etharp_output+0x1fc>)
 8015386:	7dfb      	ldrb	r3, [r7, #23]
 8015388:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801538a:	7dfb      	ldrb	r3, [r7, #23]
 801538c:	461a      	mov	r2, r3
 801538e:	68b9      	ldr	r1, [r7, #8]
 8015390:	68f8      	ldr	r0, [r7, #12]
 8015392:	f7ff fe93 	bl	80150bc <etharp_output_to_arp_index>
 8015396:	4603      	mov	r3, r0
 8015398:	e018      	b.n	80153cc <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801539a:	7dfb      	ldrb	r3, [r7, #23]
 801539c:	3301      	adds	r3, #1
 801539e:	75fb      	strb	r3, [r7, #23]
 80153a0:	7dfb      	ldrb	r3, [r7, #23]
 80153a2:	2b09      	cmp	r3, #9
 80153a4:	d9ca      	bls.n	801533c <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 80153a6:	68ba      	ldr	r2, [r7, #8]
 80153a8:	69b9      	ldr	r1, [r7, #24]
 80153aa:	68f8      	ldr	r0, [r7, #12]
 80153ac:	f000 f822 	bl	80153f4 <etharp_query>
 80153b0:	4603      	mov	r3, r0
 80153b2:	e00b      	b.n	80153cc <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 80153b4:	68fb      	ldr	r3, [r7, #12]
 80153b6:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 80153ba:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80153be:	9300      	str	r3, [sp, #0]
 80153c0:	69fb      	ldr	r3, [r7, #28]
 80153c2:	68b9      	ldr	r1, [r7, #8]
 80153c4:	68f8      	ldr	r0, [r7, #12]
 80153c6:	f001 fd63 	bl	8016e90 <ethernet_output>
 80153ca:	4603      	mov	r3, r0
}
 80153cc:	4618      	mov	r0, r3
 80153ce:	3720      	adds	r7, #32
 80153d0:	46bd      	mov	sp, r7
 80153d2:	bd80      	pop	{r7, pc}
 80153d4:	0801b78c 	.word	0x0801b78c
 80153d8:	0801b8dc 	.word	0x0801b8dc
 80153dc:	0801b804 	.word	0x0801b804
 80153e0:	0801b92c 	.word	0x0801b92c
 80153e4:	0801b8cc 	.word	0x0801b8cc
 80153e8:	0801bfa0 	.word	0x0801bfa0
 80153ec:	20010abc 	.word	0x20010abc
 80153f0:	200109cc 	.word	0x200109cc

080153f4 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 80153f4:	b580      	push	{r7, lr}
 80153f6:	b08c      	sub	sp, #48	; 0x30
 80153f8:	af02      	add	r7, sp, #8
 80153fa:	60f8      	str	r0, [r7, #12]
 80153fc:	60b9      	str	r1, [r7, #8]
 80153fe:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8015400:	68fb      	ldr	r3, [r7, #12]
 8015402:	332a      	adds	r3, #42	; 0x2a
 8015404:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8015406:	23ff      	movs	r3, #255	; 0xff
 8015408:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 801540c:	2300      	movs	r3, #0
 801540e:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8015410:	68bb      	ldr	r3, [r7, #8]
 8015412:	681b      	ldr	r3, [r3, #0]
 8015414:	68f9      	ldr	r1, [r7, #12]
 8015416:	4618      	mov	r0, r3
 8015418:	f000 fe2c 	bl	8016074 <ip4_addr_isbroadcast_u32>
 801541c:	4603      	mov	r3, r0
 801541e:	2b00      	cmp	r3, #0
 8015420:	d10c      	bne.n	801543c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8015422:	68bb      	ldr	r3, [r7, #8]
 8015424:	681b      	ldr	r3, [r3, #0]
 8015426:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801542a:	2be0      	cmp	r3, #224	; 0xe0
 801542c:	d006      	beq.n	801543c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801542e:	68bb      	ldr	r3, [r7, #8]
 8015430:	2b00      	cmp	r3, #0
 8015432:	d003      	beq.n	801543c <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8015434:	68bb      	ldr	r3, [r7, #8]
 8015436:	681b      	ldr	r3, [r3, #0]
 8015438:	2b00      	cmp	r3, #0
 801543a:	d102      	bne.n	8015442 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801543c:	f06f 030f 	mvn.w	r3, #15
 8015440:	e101      	b.n	8015646 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8015442:	68fa      	ldr	r2, [r7, #12]
 8015444:	2101      	movs	r1, #1
 8015446:	68b8      	ldr	r0, [r7, #8]
 8015448:	f7ff fb5c 	bl	8014b04 <etharp_find_entry>
 801544c:	4603      	mov	r3, r0
 801544e:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8015450:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8015454:	2b00      	cmp	r3, #0
 8015456:	da02      	bge.n	801545e <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8015458:	8a7b      	ldrh	r3, [r7, #18]
 801545a:	b25b      	sxtb	r3, r3
 801545c:	e0f3      	b.n	8015646 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 801545e:	8a7b      	ldrh	r3, [r7, #18]
 8015460:	2b7e      	cmp	r3, #126	; 0x7e
 8015462:	d906      	bls.n	8015472 <etharp_query+0x7e>
 8015464:	4b7a      	ldr	r3, [pc, #488]	; (8015650 <etharp_query+0x25c>)
 8015466:	f240 32c1 	movw	r2, #961	; 0x3c1
 801546a:	497a      	ldr	r1, [pc, #488]	; (8015654 <etharp_query+0x260>)
 801546c:	487a      	ldr	r0, [pc, #488]	; (8015658 <etharp_query+0x264>)
 801546e:	f002 f911 	bl	8017694 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8015472:	8a7b      	ldrh	r3, [r7, #18]
 8015474:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8015476:	7c7a      	ldrb	r2, [r7, #17]
 8015478:	4978      	ldr	r1, [pc, #480]	; (801565c <etharp_query+0x268>)
 801547a:	4613      	mov	r3, r2
 801547c:	005b      	lsls	r3, r3, #1
 801547e:	4413      	add	r3, r2
 8015480:	00db      	lsls	r3, r3, #3
 8015482:	440b      	add	r3, r1
 8015484:	3314      	adds	r3, #20
 8015486:	781b      	ldrb	r3, [r3, #0]
 8015488:	2b00      	cmp	r3, #0
 801548a:	d115      	bne.n	80154b8 <etharp_query+0xc4>
    is_new_entry = 1;
 801548c:	2301      	movs	r3, #1
 801548e:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8015490:	7c7a      	ldrb	r2, [r7, #17]
 8015492:	4972      	ldr	r1, [pc, #456]	; (801565c <etharp_query+0x268>)
 8015494:	4613      	mov	r3, r2
 8015496:	005b      	lsls	r3, r3, #1
 8015498:	4413      	add	r3, r2
 801549a:	00db      	lsls	r3, r3, #3
 801549c:	440b      	add	r3, r1
 801549e:	3314      	adds	r3, #20
 80154a0:	2201      	movs	r2, #1
 80154a2:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 80154a4:	7c7a      	ldrb	r2, [r7, #17]
 80154a6:	496d      	ldr	r1, [pc, #436]	; (801565c <etharp_query+0x268>)
 80154a8:	4613      	mov	r3, r2
 80154aa:	005b      	lsls	r3, r3, #1
 80154ac:	4413      	add	r3, r2
 80154ae:	00db      	lsls	r3, r3, #3
 80154b0:	440b      	add	r3, r1
 80154b2:	3308      	adds	r3, #8
 80154b4:	68fa      	ldr	r2, [r7, #12]
 80154b6:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 80154b8:	7c7a      	ldrb	r2, [r7, #17]
 80154ba:	4968      	ldr	r1, [pc, #416]	; (801565c <etharp_query+0x268>)
 80154bc:	4613      	mov	r3, r2
 80154be:	005b      	lsls	r3, r3, #1
 80154c0:	4413      	add	r3, r2
 80154c2:	00db      	lsls	r3, r3, #3
 80154c4:	440b      	add	r3, r1
 80154c6:	3314      	adds	r3, #20
 80154c8:	781b      	ldrb	r3, [r3, #0]
 80154ca:	2b01      	cmp	r3, #1
 80154cc:	d011      	beq.n	80154f2 <etharp_query+0xfe>
 80154ce:	7c7a      	ldrb	r2, [r7, #17]
 80154d0:	4962      	ldr	r1, [pc, #392]	; (801565c <etharp_query+0x268>)
 80154d2:	4613      	mov	r3, r2
 80154d4:	005b      	lsls	r3, r3, #1
 80154d6:	4413      	add	r3, r2
 80154d8:	00db      	lsls	r3, r3, #3
 80154da:	440b      	add	r3, r1
 80154dc:	3314      	adds	r3, #20
 80154de:	781b      	ldrb	r3, [r3, #0]
 80154e0:	2b01      	cmp	r3, #1
 80154e2:	d806      	bhi.n	80154f2 <etharp_query+0xfe>
 80154e4:	4b5a      	ldr	r3, [pc, #360]	; (8015650 <etharp_query+0x25c>)
 80154e6:	f240 32cd 	movw	r2, #973	; 0x3cd
 80154ea:	495d      	ldr	r1, [pc, #372]	; (8015660 <etharp_query+0x26c>)
 80154ec:	485a      	ldr	r0, [pc, #360]	; (8015658 <etharp_query+0x264>)
 80154ee:	f002 f8d1 	bl	8017694 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 80154f2:	6a3b      	ldr	r3, [r7, #32]
 80154f4:	2b00      	cmp	r3, #0
 80154f6:	d102      	bne.n	80154fe <etharp_query+0x10a>
 80154f8:	687b      	ldr	r3, [r7, #4]
 80154fa:	2b00      	cmp	r3, #0
 80154fc:	d10c      	bne.n	8015518 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 80154fe:	68b9      	ldr	r1, [r7, #8]
 8015500:	68f8      	ldr	r0, [r7, #12]
 8015502:	f000 f963 	bl	80157cc <etharp_request>
 8015506:	4603      	mov	r3, r0
 8015508:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 801550c:	687b      	ldr	r3, [r7, #4]
 801550e:	2b00      	cmp	r3, #0
 8015510:	d102      	bne.n	8015518 <etharp_query+0x124>
      return result;
 8015512:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8015516:	e096      	b.n	8015646 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8015518:	687b      	ldr	r3, [r7, #4]
 801551a:	2b00      	cmp	r3, #0
 801551c:	d106      	bne.n	801552c <etharp_query+0x138>
 801551e:	4b4c      	ldr	r3, [pc, #304]	; (8015650 <etharp_query+0x25c>)
 8015520:	f240 32e1 	movw	r2, #993	; 0x3e1
 8015524:	494f      	ldr	r1, [pc, #316]	; (8015664 <etharp_query+0x270>)
 8015526:	484c      	ldr	r0, [pc, #304]	; (8015658 <etharp_query+0x264>)
 8015528:	f002 f8b4 	bl	8017694 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 801552c:	7c7a      	ldrb	r2, [r7, #17]
 801552e:	494b      	ldr	r1, [pc, #300]	; (801565c <etharp_query+0x268>)
 8015530:	4613      	mov	r3, r2
 8015532:	005b      	lsls	r3, r3, #1
 8015534:	4413      	add	r3, r2
 8015536:	00db      	lsls	r3, r3, #3
 8015538:	440b      	add	r3, r1
 801553a:	3314      	adds	r3, #20
 801553c:	781b      	ldrb	r3, [r3, #0]
 801553e:	2b01      	cmp	r3, #1
 8015540:	d917      	bls.n	8015572 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8015542:	4a49      	ldr	r2, [pc, #292]	; (8015668 <etharp_query+0x274>)
 8015544:	7c7b      	ldrb	r3, [r7, #17]
 8015546:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8015548:	7c7a      	ldrb	r2, [r7, #17]
 801554a:	4613      	mov	r3, r2
 801554c:	005b      	lsls	r3, r3, #1
 801554e:	4413      	add	r3, r2
 8015550:	00db      	lsls	r3, r3, #3
 8015552:	3308      	adds	r3, #8
 8015554:	4a41      	ldr	r2, [pc, #260]	; (801565c <etharp_query+0x268>)
 8015556:	4413      	add	r3, r2
 8015558:	3304      	adds	r3, #4
 801555a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801555e:	9200      	str	r2, [sp, #0]
 8015560:	697a      	ldr	r2, [r7, #20]
 8015562:	6879      	ldr	r1, [r7, #4]
 8015564:	68f8      	ldr	r0, [r7, #12]
 8015566:	f001 fc93 	bl	8016e90 <ethernet_output>
 801556a:	4603      	mov	r3, r0
 801556c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8015570:	e067      	b.n	8015642 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8015572:	7c7a      	ldrb	r2, [r7, #17]
 8015574:	4939      	ldr	r1, [pc, #228]	; (801565c <etharp_query+0x268>)
 8015576:	4613      	mov	r3, r2
 8015578:	005b      	lsls	r3, r3, #1
 801557a:	4413      	add	r3, r2
 801557c:	00db      	lsls	r3, r3, #3
 801557e:	440b      	add	r3, r1
 8015580:	3314      	adds	r3, #20
 8015582:	781b      	ldrb	r3, [r3, #0]
 8015584:	2b01      	cmp	r3, #1
 8015586:	d15c      	bne.n	8015642 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8015588:	2300      	movs	r3, #0
 801558a:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 801558c:	687b      	ldr	r3, [r7, #4]
 801558e:	61fb      	str	r3, [r7, #28]
    while (p) {
 8015590:	e01c      	b.n	80155cc <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8015592:	69fb      	ldr	r3, [r7, #28]
 8015594:	895a      	ldrh	r2, [r3, #10]
 8015596:	69fb      	ldr	r3, [r7, #28]
 8015598:	891b      	ldrh	r3, [r3, #8]
 801559a:	429a      	cmp	r2, r3
 801559c:	d10a      	bne.n	80155b4 <etharp_query+0x1c0>
 801559e:	69fb      	ldr	r3, [r7, #28]
 80155a0:	681b      	ldr	r3, [r3, #0]
 80155a2:	2b00      	cmp	r3, #0
 80155a4:	d006      	beq.n	80155b4 <etharp_query+0x1c0>
 80155a6:	4b2a      	ldr	r3, [pc, #168]	; (8015650 <etharp_query+0x25c>)
 80155a8:	f240 32f1 	movw	r2, #1009	; 0x3f1
 80155ac:	492f      	ldr	r1, [pc, #188]	; (801566c <etharp_query+0x278>)
 80155ae:	482a      	ldr	r0, [pc, #168]	; (8015658 <etharp_query+0x264>)
 80155b0:	f002 f870 	bl	8017694 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 80155b4:	69fb      	ldr	r3, [r7, #28]
 80155b6:	7b1b      	ldrb	r3, [r3, #12]
 80155b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80155bc:	2b00      	cmp	r3, #0
 80155be:	d002      	beq.n	80155c6 <etharp_query+0x1d2>
        copy_needed = 1;
 80155c0:	2301      	movs	r3, #1
 80155c2:	61bb      	str	r3, [r7, #24]
        break;
 80155c4:	e005      	b.n	80155d2 <etharp_query+0x1de>
      }
      p = p->next;
 80155c6:	69fb      	ldr	r3, [r7, #28]
 80155c8:	681b      	ldr	r3, [r3, #0]
 80155ca:	61fb      	str	r3, [r7, #28]
    while (p) {
 80155cc:	69fb      	ldr	r3, [r7, #28]
 80155ce:	2b00      	cmp	r3, #0
 80155d0:	d1df      	bne.n	8015592 <etharp_query+0x19e>
    }
    if (copy_needed) {
 80155d2:	69bb      	ldr	r3, [r7, #24]
 80155d4:	2b00      	cmp	r3, #0
 80155d6:	d007      	beq.n	80155e8 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 80155d8:	687a      	ldr	r2, [r7, #4]
 80155da:	f44f 7120 	mov.w	r1, #640	; 0x280
 80155de:	200e      	movs	r0, #14
 80155e0:	f7f6 fc2a 	bl	800be38 <pbuf_clone>
 80155e4:	61f8      	str	r0, [r7, #28]
 80155e6:	e004      	b.n	80155f2 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 80155e8:	687b      	ldr	r3, [r7, #4]
 80155ea:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 80155ec:	69f8      	ldr	r0, [r7, #28]
 80155ee:	f7f6 fa51 	bl	800ba94 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 80155f2:	69fb      	ldr	r3, [r7, #28]
 80155f4:	2b00      	cmp	r3, #0
 80155f6:	d021      	beq.n	801563c <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 80155f8:	7c7a      	ldrb	r2, [r7, #17]
 80155fa:	4918      	ldr	r1, [pc, #96]	; (801565c <etharp_query+0x268>)
 80155fc:	4613      	mov	r3, r2
 80155fe:	005b      	lsls	r3, r3, #1
 8015600:	4413      	add	r3, r2
 8015602:	00db      	lsls	r3, r3, #3
 8015604:	440b      	add	r3, r1
 8015606:	681b      	ldr	r3, [r3, #0]
 8015608:	2b00      	cmp	r3, #0
 801560a:	d00a      	beq.n	8015622 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 801560c:	7c7a      	ldrb	r2, [r7, #17]
 801560e:	4913      	ldr	r1, [pc, #76]	; (801565c <etharp_query+0x268>)
 8015610:	4613      	mov	r3, r2
 8015612:	005b      	lsls	r3, r3, #1
 8015614:	4413      	add	r3, r2
 8015616:	00db      	lsls	r3, r3, #3
 8015618:	440b      	add	r3, r1
 801561a:	681b      	ldr	r3, [r3, #0]
 801561c:	4618      	mov	r0, r3
 801561e:	f7f6 f993 	bl	800b948 <pbuf_free>
      }
      arp_table[i].q = p;
 8015622:	7c7a      	ldrb	r2, [r7, #17]
 8015624:	490d      	ldr	r1, [pc, #52]	; (801565c <etharp_query+0x268>)
 8015626:	4613      	mov	r3, r2
 8015628:	005b      	lsls	r3, r3, #1
 801562a:	4413      	add	r3, r2
 801562c:	00db      	lsls	r3, r3, #3
 801562e:	440b      	add	r3, r1
 8015630:	69fa      	ldr	r2, [r7, #28]
 8015632:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8015634:	2300      	movs	r3, #0
 8015636:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801563a:	e002      	b.n	8015642 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 801563c:	23ff      	movs	r3, #255	; 0xff
 801563e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8015642:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8015646:	4618      	mov	r0, r3
 8015648:	3728      	adds	r7, #40	; 0x28
 801564a:	46bd      	mov	sp, r7
 801564c:	bd80      	pop	{r7, pc}
 801564e:	bf00      	nop
 8015650:	0801b78c 	.word	0x0801b78c
 8015654:	0801b938 	.word	0x0801b938
 8015658:	0801b804 	.word	0x0801b804
 801565c:	200109cc 	.word	0x200109cc
 8015660:	0801b948 	.word	0x0801b948
 8015664:	0801b92c 	.word	0x0801b92c
 8015668:	20010abc 	.word	0x20010abc
 801566c:	0801b970 	.word	0x0801b970

08015670 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8015670:	b580      	push	{r7, lr}
 8015672:	b08a      	sub	sp, #40	; 0x28
 8015674:	af02      	add	r7, sp, #8
 8015676:	60f8      	str	r0, [r7, #12]
 8015678:	60b9      	str	r1, [r7, #8]
 801567a:	607a      	str	r2, [r7, #4]
 801567c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 801567e:	2300      	movs	r3, #0
 8015680:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8015682:	68fb      	ldr	r3, [r7, #12]
 8015684:	2b00      	cmp	r3, #0
 8015686:	d106      	bne.n	8015696 <etharp_raw+0x26>
 8015688:	4b3a      	ldr	r3, [pc, #232]	; (8015774 <etharp_raw+0x104>)
 801568a:	f240 4257 	movw	r2, #1111	; 0x457
 801568e:	493a      	ldr	r1, [pc, #232]	; (8015778 <etharp_raw+0x108>)
 8015690:	483a      	ldr	r0, [pc, #232]	; (801577c <etharp_raw+0x10c>)
 8015692:	f001 ffff 	bl	8017694 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8015696:	f44f 7220 	mov.w	r2, #640	; 0x280
 801569a:	211c      	movs	r1, #28
 801569c:	200e      	movs	r0, #14
 801569e:	f7f5 fe6f 	bl	800b380 <pbuf_alloc>
 80156a2:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 80156a4:	69bb      	ldr	r3, [r7, #24]
 80156a6:	2b00      	cmp	r3, #0
 80156a8:	d102      	bne.n	80156b0 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 80156aa:	f04f 33ff 	mov.w	r3, #4294967295
 80156ae:	e05d      	b.n	801576c <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 80156b0:	69bb      	ldr	r3, [r7, #24]
 80156b2:	895b      	ldrh	r3, [r3, #10]
 80156b4:	2b1b      	cmp	r3, #27
 80156b6:	d806      	bhi.n	80156c6 <etharp_raw+0x56>
 80156b8:	4b2e      	ldr	r3, [pc, #184]	; (8015774 <etharp_raw+0x104>)
 80156ba:	f240 4262 	movw	r2, #1122	; 0x462
 80156be:	4930      	ldr	r1, [pc, #192]	; (8015780 <etharp_raw+0x110>)
 80156c0:	482e      	ldr	r0, [pc, #184]	; (801577c <etharp_raw+0x10c>)
 80156c2:	f001 ffe7 	bl	8017694 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 80156c6:	69bb      	ldr	r3, [r7, #24]
 80156c8:	685b      	ldr	r3, [r3, #4]
 80156ca:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 80156cc:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80156ce:	4618      	mov	r0, r3
 80156d0:	f7f4 fd3c 	bl	800a14c <lwip_htons>
 80156d4:	4603      	mov	r3, r0
 80156d6:	461a      	mov	r2, r3
 80156d8:	697b      	ldr	r3, [r7, #20]
 80156da:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 80156dc:	68fb      	ldr	r3, [r7, #12]
 80156de:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80156e2:	2b06      	cmp	r3, #6
 80156e4:	d006      	beq.n	80156f4 <etharp_raw+0x84>
 80156e6:	4b23      	ldr	r3, [pc, #140]	; (8015774 <etharp_raw+0x104>)
 80156e8:	f240 4269 	movw	r2, #1129	; 0x469
 80156ec:	4925      	ldr	r1, [pc, #148]	; (8015784 <etharp_raw+0x114>)
 80156ee:	4823      	ldr	r0, [pc, #140]	; (801577c <etharp_raw+0x10c>)
 80156f0:	f001 ffd0 	bl	8017694 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 80156f4:	697b      	ldr	r3, [r7, #20]
 80156f6:	3308      	adds	r3, #8
 80156f8:	2206      	movs	r2, #6
 80156fa:	6839      	ldr	r1, [r7, #0]
 80156fc:	4618      	mov	r0, r3
 80156fe:	f001 ff1e 	bl	801753e <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8015702:	697b      	ldr	r3, [r7, #20]
 8015704:	3312      	adds	r3, #18
 8015706:	2206      	movs	r2, #6
 8015708:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801570a:	4618      	mov	r0, r3
 801570c:	f001 ff17 	bl	801753e <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8015710:	697b      	ldr	r3, [r7, #20]
 8015712:	330e      	adds	r3, #14
 8015714:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015716:	6812      	ldr	r2, [r2, #0]
 8015718:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801571a:	697b      	ldr	r3, [r7, #20]
 801571c:	3318      	adds	r3, #24
 801571e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015720:	6812      	ldr	r2, [r2, #0]
 8015722:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8015724:	697b      	ldr	r3, [r7, #20]
 8015726:	2200      	movs	r2, #0
 8015728:	701a      	strb	r2, [r3, #0]
 801572a:	2200      	movs	r2, #0
 801572c:	f042 0201 	orr.w	r2, r2, #1
 8015730:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8015732:	697b      	ldr	r3, [r7, #20]
 8015734:	2200      	movs	r2, #0
 8015736:	f042 0208 	orr.w	r2, r2, #8
 801573a:	709a      	strb	r2, [r3, #2]
 801573c:	2200      	movs	r2, #0
 801573e:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8015740:	697b      	ldr	r3, [r7, #20]
 8015742:	2206      	movs	r2, #6
 8015744:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8015746:	697b      	ldr	r3, [r7, #20]
 8015748:	2204      	movs	r2, #4
 801574a:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801574c:	f640 0306 	movw	r3, #2054	; 0x806
 8015750:	9300      	str	r3, [sp, #0]
 8015752:	687b      	ldr	r3, [r7, #4]
 8015754:	68ba      	ldr	r2, [r7, #8]
 8015756:	69b9      	ldr	r1, [r7, #24]
 8015758:	68f8      	ldr	r0, [r7, #12]
 801575a:	f001 fb99 	bl	8016e90 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 801575e:	69b8      	ldr	r0, [r7, #24]
 8015760:	f7f6 f8f2 	bl	800b948 <pbuf_free>
  p = NULL;
 8015764:	2300      	movs	r3, #0
 8015766:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8015768:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801576c:	4618      	mov	r0, r3
 801576e:	3720      	adds	r7, #32
 8015770:	46bd      	mov	sp, r7
 8015772:	bd80      	pop	{r7, pc}
 8015774:	0801b78c 	.word	0x0801b78c
 8015778:	0801b8dc 	.word	0x0801b8dc
 801577c:	0801b804 	.word	0x0801b804
 8015780:	0801b98c 	.word	0x0801b98c
 8015784:	0801b9c0 	.word	0x0801b9c0

08015788 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8015788:	b580      	push	{r7, lr}
 801578a:	b088      	sub	sp, #32
 801578c:	af04      	add	r7, sp, #16
 801578e:	60f8      	str	r0, [r7, #12]
 8015790:	60b9      	str	r1, [r7, #8]
 8015792:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8015794:	68fb      	ldr	r3, [r7, #12]
 8015796:	f103 012a 	add.w	r1, r3, #42	; 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801579a:	68fb      	ldr	r3, [r7, #12]
 801579c:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 80157a0:	68fb      	ldr	r3, [r7, #12]
 80157a2:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80157a4:	2201      	movs	r2, #1
 80157a6:	9203      	str	r2, [sp, #12]
 80157a8:	68ba      	ldr	r2, [r7, #8]
 80157aa:	9202      	str	r2, [sp, #8]
 80157ac:	4a06      	ldr	r2, [pc, #24]	; (80157c8 <etharp_request_dst+0x40>)
 80157ae:	9201      	str	r2, [sp, #4]
 80157b0:	9300      	str	r3, [sp, #0]
 80157b2:	4603      	mov	r3, r0
 80157b4:	687a      	ldr	r2, [r7, #4]
 80157b6:	68f8      	ldr	r0, [r7, #12]
 80157b8:	f7ff ff5a 	bl	8015670 <etharp_raw>
 80157bc:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 80157be:	4618      	mov	r0, r3
 80157c0:	3710      	adds	r7, #16
 80157c2:	46bd      	mov	sp, r7
 80157c4:	bd80      	pop	{r7, pc}
 80157c6:	bf00      	nop
 80157c8:	0801bfa8 	.word	0x0801bfa8

080157cc <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 80157cc:	b580      	push	{r7, lr}
 80157ce:	b082      	sub	sp, #8
 80157d0:	af00      	add	r7, sp, #0
 80157d2:	6078      	str	r0, [r7, #4]
 80157d4:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 80157d6:	4a05      	ldr	r2, [pc, #20]	; (80157ec <etharp_request+0x20>)
 80157d8:	6839      	ldr	r1, [r7, #0]
 80157da:	6878      	ldr	r0, [r7, #4]
 80157dc:	f7ff ffd4 	bl	8015788 <etharp_request_dst>
 80157e0:	4603      	mov	r3, r0
}
 80157e2:	4618      	mov	r0, r3
 80157e4:	3708      	adds	r7, #8
 80157e6:	46bd      	mov	sp, r7
 80157e8:	bd80      	pop	{r7, pc}
 80157ea:	bf00      	nop
 80157ec:	0801bfa0 	.word	0x0801bfa0

080157f0 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 80157f0:	b580      	push	{r7, lr}
 80157f2:	b08e      	sub	sp, #56	; 0x38
 80157f4:	af04      	add	r7, sp, #16
 80157f6:	6078      	str	r0, [r7, #4]
 80157f8:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 80157fa:	4b79      	ldr	r3, [pc, #484]	; (80159e0 <icmp_input+0x1f0>)
 80157fc:	689b      	ldr	r3, [r3, #8]
 80157fe:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8015800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015802:	781b      	ldrb	r3, [r3, #0]
 8015804:	f003 030f 	and.w	r3, r3, #15
 8015808:	b2db      	uxtb	r3, r3
 801580a:	009b      	lsls	r3, r3, #2
 801580c:	b2db      	uxtb	r3, r3
 801580e:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8015810:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015812:	2b13      	cmp	r3, #19
 8015814:	f240 80cd 	bls.w	80159b2 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8015818:	687b      	ldr	r3, [r7, #4]
 801581a:	895b      	ldrh	r3, [r3, #10]
 801581c:	2b03      	cmp	r3, #3
 801581e:	f240 80ca 	bls.w	80159b6 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8015822:	687b      	ldr	r3, [r7, #4]
 8015824:	685b      	ldr	r3, [r3, #4]
 8015826:	781b      	ldrb	r3, [r3, #0]
 8015828:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 801582c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8015830:	2b00      	cmp	r3, #0
 8015832:	f000 80b7 	beq.w	80159a4 <icmp_input+0x1b4>
 8015836:	2b08      	cmp	r3, #8
 8015838:	f040 80b7 	bne.w	80159aa <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 801583c:	4b69      	ldr	r3, [pc, #420]	; (80159e4 <icmp_input+0x1f4>)
 801583e:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8015840:	4b67      	ldr	r3, [pc, #412]	; (80159e0 <icmp_input+0x1f0>)
 8015842:	695b      	ldr	r3, [r3, #20]
 8015844:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015848:	2be0      	cmp	r3, #224	; 0xe0
 801584a:	f000 80bb 	beq.w	80159c4 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801584e:	4b64      	ldr	r3, [pc, #400]	; (80159e0 <icmp_input+0x1f0>)
 8015850:	695b      	ldr	r3, [r3, #20]
 8015852:	4a63      	ldr	r2, [pc, #396]	; (80159e0 <icmp_input+0x1f0>)
 8015854:	6812      	ldr	r2, [r2, #0]
 8015856:	4611      	mov	r1, r2
 8015858:	4618      	mov	r0, r3
 801585a:	f000 fc0b 	bl	8016074 <ip4_addr_isbroadcast_u32>
 801585e:	4603      	mov	r3, r0
 8015860:	2b00      	cmp	r3, #0
 8015862:	f040 80b1 	bne.w	80159c8 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8015866:	687b      	ldr	r3, [r7, #4]
 8015868:	891b      	ldrh	r3, [r3, #8]
 801586a:	2b07      	cmp	r3, #7
 801586c:	f240 80a5 	bls.w	80159ba <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8015870:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015872:	330e      	adds	r3, #14
 8015874:	4619      	mov	r1, r3
 8015876:	6878      	ldr	r0, [r7, #4]
 8015878:	f7f5 ffd0 	bl	800b81c <pbuf_add_header>
 801587c:	4603      	mov	r3, r0
 801587e:	2b00      	cmp	r3, #0
 8015880:	d04b      	beq.n	801591a <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8015882:	687b      	ldr	r3, [r7, #4]
 8015884:	891a      	ldrh	r2, [r3, #8]
 8015886:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015888:	4413      	add	r3, r2
 801588a:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 801588c:	687b      	ldr	r3, [r7, #4]
 801588e:	891b      	ldrh	r3, [r3, #8]
 8015890:	8b7a      	ldrh	r2, [r7, #26]
 8015892:	429a      	cmp	r2, r3
 8015894:	f0c0 809a 	bcc.w	80159cc <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8015898:	8b7b      	ldrh	r3, [r7, #26]
 801589a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801589e:	4619      	mov	r1, r3
 80158a0:	200e      	movs	r0, #14
 80158a2:	f7f5 fd6d 	bl	800b380 <pbuf_alloc>
 80158a6:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 80158a8:	697b      	ldr	r3, [r7, #20]
 80158aa:	2b00      	cmp	r3, #0
 80158ac:	f000 8090 	beq.w	80159d0 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 80158b0:	697b      	ldr	r3, [r7, #20]
 80158b2:	895b      	ldrh	r3, [r3, #10]
 80158b4:	461a      	mov	r2, r3
 80158b6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80158b8:	3308      	adds	r3, #8
 80158ba:	429a      	cmp	r2, r3
 80158bc:	d203      	bcs.n	80158c6 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 80158be:	6978      	ldr	r0, [r7, #20]
 80158c0:	f7f6 f842 	bl	800b948 <pbuf_free>
          goto icmperr;
 80158c4:	e085      	b.n	80159d2 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 80158c6:	697b      	ldr	r3, [r7, #20]
 80158c8:	685b      	ldr	r3, [r3, #4]
 80158ca:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80158cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80158ce:	4618      	mov	r0, r3
 80158d0:	f001 fe35 	bl	801753e <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 80158d4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80158d6:	4619      	mov	r1, r3
 80158d8:	6978      	ldr	r0, [r7, #20]
 80158da:	f7f5 ffaf 	bl	800b83c <pbuf_remove_header>
 80158de:	4603      	mov	r3, r0
 80158e0:	2b00      	cmp	r3, #0
 80158e2:	d009      	beq.n	80158f8 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 80158e4:	4b40      	ldr	r3, [pc, #256]	; (80159e8 <icmp_input+0x1f8>)
 80158e6:	22b6      	movs	r2, #182	; 0xb6
 80158e8:	4940      	ldr	r1, [pc, #256]	; (80159ec <icmp_input+0x1fc>)
 80158ea:	4841      	ldr	r0, [pc, #260]	; (80159f0 <icmp_input+0x200>)
 80158ec:	f001 fed2 	bl	8017694 <iprintf>
          pbuf_free(r);
 80158f0:	6978      	ldr	r0, [r7, #20]
 80158f2:	f7f6 f829 	bl	800b948 <pbuf_free>
          goto icmperr;
 80158f6:	e06c      	b.n	80159d2 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 80158f8:	6879      	ldr	r1, [r7, #4]
 80158fa:	6978      	ldr	r0, [r7, #20]
 80158fc:	f7f6 f958 	bl	800bbb0 <pbuf_copy>
 8015900:	4603      	mov	r3, r0
 8015902:	2b00      	cmp	r3, #0
 8015904:	d003      	beq.n	801590e <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8015906:	6978      	ldr	r0, [r7, #20]
 8015908:	f7f6 f81e 	bl	800b948 <pbuf_free>
          goto icmperr;
 801590c:	e061      	b.n	80159d2 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 801590e:	6878      	ldr	r0, [r7, #4]
 8015910:	f7f6 f81a 	bl	800b948 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8015914:	697b      	ldr	r3, [r7, #20]
 8015916:	607b      	str	r3, [r7, #4]
 8015918:	e00f      	b.n	801593a <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801591a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801591c:	330e      	adds	r3, #14
 801591e:	4619      	mov	r1, r3
 8015920:	6878      	ldr	r0, [r7, #4]
 8015922:	f7f5 ff8b 	bl	800b83c <pbuf_remove_header>
 8015926:	4603      	mov	r3, r0
 8015928:	2b00      	cmp	r3, #0
 801592a:	d006      	beq.n	801593a <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 801592c:	4b2e      	ldr	r3, [pc, #184]	; (80159e8 <icmp_input+0x1f8>)
 801592e:	22c7      	movs	r2, #199	; 0xc7
 8015930:	4930      	ldr	r1, [pc, #192]	; (80159f4 <icmp_input+0x204>)
 8015932:	482f      	ldr	r0, [pc, #188]	; (80159f0 <icmp_input+0x200>)
 8015934:	f001 feae 	bl	8017694 <iprintf>
          goto icmperr;
 8015938:	e04b      	b.n	80159d2 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 801593a:	687b      	ldr	r3, [r7, #4]
 801593c:	685b      	ldr	r3, [r3, #4]
 801593e:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8015940:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015942:	4619      	mov	r1, r3
 8015944:	6878      	ldr	r0, [r7, #4]
 8015946:	f7f5 ff69 	bl	800b81c <pbuf_add_header>
 801594a:	4603      	mov	r3, r0
 801594c:	2b00      	cmp	r3, #0
 801594e:	d12b      	bne.n	80159a8 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8015950:	687b      	ldr	r3, [r7, #4]
 8015952:	685b      	ldr	r3, [r3, #4]
 8015954:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8015956:	69fb      	ldr	r3, [r7, #28]
 8015958:	681a      	ldr	r2, [r3, #0]
 801595a:	68fb      	ldr	r3, [r7, #12]
 801595c:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801595e:	4b20      	ldr	r3, [pc, #128]	; (80159e0 <icmp_input+0x1f0>)
 8015960:	691a      	ldr	r2, [r3, #16]
 8015962:	68fb      	ldr	r3, [r7, #12]
 8015964:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8015966:	693b      	ldr	r3, [r7, #16]
 8015968:	2200      	movs	r2, #0
 801596a:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 801596c:	693b      	ldr	r3, [r7, #16]
 801596e:	2200      	movs	r2, #0
 8015970:	709a      	strb	r2, [r3, #2]
 8015972:	2200      	movs	r2, #0
 8015974:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8015976:	68fb      	ldr	r3, [r7, #12]
 8015978:	22ff      	movs	r2, #255	; 0xff
 801597a:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 801597c:	68fb      	ldr	r3, [r7, #12]
 801597e:	2200      	movs	r2, #0
 8015980:	729a      	strb	r2, [r3, #10]
 8015982:	2200      	movs	r2, #0
 8015984:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8015986:	683b      	ldr	r3, [r7, #0]
 8015988:	9302      	str	r3, [sp, #8]
 801598a:	2301      	movs	r3, #1
 801598c:	9301      	str	r3, [sp, #4]
 801598e:	2300      	movs	r3, #0
 8015990:	9300      	str	r3, [sp, #0]
 8015992:	23ff      	movs	r3, #255	; 0xff
 8015994:	2200      	movs	r2, #0
 8015996:	69f9      	ldr	r1, [r7, #28]
 8015998:	6878      	ldr	r0, [r7, #4]
 801599a:	f000 fa93 	bl	8015ec4 <ip4_output_if>
 801599e:	4603      	mov	r3, r0
 80159a0:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 80159a2:	e001      	b.n	80159a8 <icmp_input+0x1b8>
      break;
 80159a4:	bf00      	nop
 80159a6:	e000      	b.n	80159aa <icmp_input+0x1ba>
      break;
 80159a8:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 80159aa:	6878      	ldr	r0, [r7, #4]
 80159ac:	f7f5 ffcc 	bl	800b948 <pbuf_free>
  return;
 80159b0:	e013      	b.n	80159da <icmp_input+0x1ea>
    goto lenerr;
 80159b2:	bf00      	nop
 80159b4:	e002      	b.n	80159bc <icmp_input+0x1cc>
    goto lenerr;
 80159b6:	bf00      	nop
 80159b8:	e000      	b.n	80159bc <icmp_input+0x1cc>
        goto lenerr;
 80159ba:	bf00      	nop
lenerr:
  pbuf_free(p);
 80159bc:	6878      	ldr	r0, [r7, #4]
 80159be:	f7f5 ffc3 	bl	800b948 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80159c2:	e00a      	b.n	80159da <icmp_input+0x1ea>
        goto icmperr;
 80159c4:	bf00      	nop
 80159c6:	e004      	b.n	80159d2 <icmp_input+0x1e2>
        goto icmperr;
 80159c8:	bf00      	nop
 80159ca:	e002      	b.n	80159d2 <icmp_input+0x1e2>
          goto icmperr;
 80159cc:	bf00      	nop
 80159ce:	e000      	b.n	80159d2 <icmp_input+0x1e2>
          goto icmperr;
 80159d0:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 80159d2:	6878      	ldr	r0, [r7, #4]
 80159d4:	f7f5 ffb8 	bl	800b948 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80159d8:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 80159da:	3728      	adds	r7, #40	; 0x28
 80159dc:	46bd      	mov	sp, r7
 80159de:	bd80      	pop	{r7, pc}
 80159e0:	2000d1c4 	.word	0x2000d1c4
 80159e4:	2000d1d8 	.word	0x2000d1d8
 80159e8:	0801ba04 	.word	0x0801ba04
 80159ec:	0801ba3c 	.word	0x0801ba3c
 80159f0:	0801ba74 	.word	0x0801ba74
 80159f4:	0801ba9c 	.word	0x0801ba9c

080159f8 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 80159f8:	b580      	push	{r7, lr}
 80159fa:	b082      	sub	sp, #8
 80159fc:	af00      	add	r7, sp, #0
 80159fe:	6078      	str	r0, [r7, #4]
 8015a00:	460b      	mov	r3, r1
 8015a02:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8015a04:	78fb      	ldrb	r3, [r7, #3]
 8015a06:	461a      	mov	r2, r3
 8015a08:	2103      	movs	r1, #3
 8015a0a:	6878      	ldr	r0, [r7, #4]
 8015a0c:	f000 f814 	bl	8015a38 <icmp_send_response>
}
 8015a10:	bf00      	nop
 8015a12:	3708      	adds	r7, #8
 8015a14:	46bd      	mov	sp, r7
 8015a16:	bd80      	pop	{r7, pc}

08015a18 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8015a18:	b580      	push	{r7, lr}
 8015a1a:	b082      	sub	sp, #8
 8015a1c:	af00      	add	r7, sp, #0
 8015a1e:	6078      	str	r0, [r7, #4]
 8015a20:	460b      	mov	r3, r1
 8015a22:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8015a24:	78fb      	ldrb	r3, [r7, #3]
 8015a26:	461a      	mov	r2, r3
 8015a28:	210b      	movs	r1, #11
 8015a2a:	6878      	ldr	r0, [r7, #4]
 8015a2c:	f000 f804 	bl	8015a38 <icmp_send_response>
}
 8015a30:	bf00      	nop
 8015a32:	3708      	adds	r7, #8
 8015a34:	46bd      	mov	sp, r7
 8015a36:	bd80      	pop	{r7, pc}

08015a38 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8015a38:	b580      	push	{r7, lr}
 8015a3a:	b08c      	sub	sp, #48	; 0x30
 8015a3c:	af04      	add	r7, sp, #16
 8015a3e:	6078      	str	r0, [r7, #4]
 8015a40:	460b      	mov	r3, r1
 8015a42:	70fb      	strb	r3, [r7, #3]
 8015a44:	4613      	mov	r3, r2
 8015a46:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8015a48:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015a4c:	2124      	movs	r1, #36	; 0x24
 8015a4e:	2022      	movs	r0, #34	; 0x22
 8015a50:	f7f5 fc96 	bl	800b380 <pbuf_alloc>
 8015a54:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8015a56:	69fb      	ldr	r3, [r7, #28]
 8015a58:	2b00      	cmp	r3, #0
 8015a5a:	d04c      	beq.n	8015af6 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8015a5c:	69fb      	ldr	r3, [r7, #28]
 8015a5e:	895b      	ldrh	r3, [r3, #10]
 8015a60:	2b23      	cmp	r3, #35	; 0x23
 8015a62:	d806      	bhi.n	8015a72 <icmp_send_response+0x3a>
 8015a64:	4b26      	ldr	r3, [pc, #152]	; (8015b00 <icmp_send_response+0xc8>)
 8015a66:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8015a6a:	4926      	ldr	r1, [pc, #152]	; (8015b04 <icmp_send_response+0xcc>)
 8015a6c:	4826      	ldr	r0, [pc, #152]	; (8015b08 <icmp_send_response+0xd0>)
 8015a6e:	f001 fe11 	bl	8017694 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8015a72:	687b      	ldr	r3, [r7, #4]
 8015a74:	685b      	ldr	r3, [r3, #4]
 8015a76:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8015a78:	69fb      	ldr	r3, [r7, #28]
 8015a7a:	685b      	ldr	r3, [r3, #4]
 8015a7c:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8015a7e:	697b      	ldr	r3, [r7, #20]
 8015a80:	78fa      	ldrb	r2, [r7, #3]
 8015a82:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8015a84:	697b      	ldr	r3, [r7, #20]
 8015a86:	78ba      	ldrb	r2, [r7, #2]
 8015a88:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8015a8a:	697b      	ldr	r3, [r7, #20]
 8015a8c:	2200      	movs	r2, #0
 8015a8e:	711a      	strb	r2, [r3, #4]
 8015a90:	2200      	movs	r2, #0
 8015a92:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8015a94:	697b      	ldr	r3, [r7, #20]
 8015a96:	2200      	movs	r2, #0
 8015a98:	719a      	strb	r2, [r3, #6]
 8015a9a:	2200      	movs	r2, #0
 8015a9c:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8015a9e:	69fb      	ldr	r3, [r7, #28]
 8015aa0:	685b      	ldr	r3, [r3, #4]
 8015aa2:	f103 0008 	add.w	r0, r3, #8
 8015aa6:	687b      	ldr	r3, [r7, #4]
 8015aa8:	685b      	ldr	r3, [r3, #4]
 8015aaa:	221c      	movs	r2, #28
 8015aac:	4619      	mov	r1, r3
 8015aae:	f001 fd46 	bl	801753e <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8015ab2:	69bb      	ldr	r3, [r7, #24]
 8015ab4:	68db      	ldr	r3, [r3, #12]
 8015ab6:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8015ab8:	f107 030c 	add.w	r3, r7, #12
 8015abc:	4618      	mov	r0, r3
 8015abe:	f000 f825 	bl	8015b0c <ip4_route>
 8015ac2:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8015ac4:	693b      	ldr	r3, [r7, #16]
 8015ac6:	2b00      	cmp	r3, #0
 8015ac8:	d011      	beq.n	8015aee <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8015aca:	697b      	ldr	r3, [r7, #20]
 8015acc:	2200      	movs	r2, #0
 8015ace:	709a      	strb	r2, [r3, #2]
 8015ad0:	2200      	movs	r2, #0
 8015ad2:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8015ad4:	f107 020c 	add.w	r2, r7, #12
 8015ad8:	693b      	ldr	r3, [r7, #16]
 8015ada:	9302      	str	r3, [sp, #8]
 8015adc:	2301      	movs	r3, #1
 8015ade:	9301      	str	r3, [sp, #4]
 8015ae0:	2300      	movs	r3, #0
 8015ae2:	9300      	str	r3, [sp, #0]
 8015ae4:	23ff      	movs	r3, #255	; 0xff
 8015ae6:	2100      	movs	r1, #0
 8015ae8:	69f8      	ldr	r0, [r7, #28]
 8015aea:	f000 f9eb 	bl	8015ec4 <ip4_output_if>
  }
  pbuf_free(q);
 8015aee:	69f8      	ldr	r0, [r7, #28]
 8015af0:	f7f5 ff2a 	bl	800b948 <pbuf_free>
 8015af4:	e000      	b.n	8015af8 <icmp_send_response+0xc0>
    return;
 8015af6:	bf00      	nop
}
 8015af8:	3720      	adds	r7, #32
 8015afa:	46bd      	mov	sp, r7
 8015afc:	bd80      	pop	{r7, pc}
 8015afe:	bf00      	nop
 8015b00:	0801ba04 	.word	0x0801ba04
 8015b04:	0801bad0 	.word	0x0801bad0
 8015b08:	0801ba74 	.word	0x0801ba74

08015b0c <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8015b0c:	b480      	push	{r7}
 8015b0e:	b085      	sub	sp, #20
 8015b10:	af00      	add	r7, sp, #0
 8015b12:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8015b14:	4b33      	ldr	r3, [pc, #204]	; (8015be4 <ip4_route+0xd8>)
 8015b16:	681b      	ldr	r3, [r3, #0]
 8015b18:	60fb      	str	r3, [r7, #12]
 8015b1a:	e036      	b.n	8015b8a <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8015b1c:	68fb      	ldr	r3, [r7, #12]
 8015b1e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8015b22:	f003 0301 	and.w	r3, r3, #1
 8015b26:	b2db      	uxtb	r3, r3
 8015b28:	2b00      	cmp	r3, #0
 8015b2a:	d02b      	beq.n	8015b84 <ip4_route+0x78>
 8015b2c:	68fb      	ldr	r3, [r7, #12]
 8015b2e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8015b32:	089b      	lsrs	r3, r3, #2
 8015b34:	f003 0301 	and.w	r3, r3, #1
 8015b38:	b2db      	uxtb	r3, r3
 8015b3a:	2b00      	cmp	r3, #0
 8015b3c:	d022      	beq.n	8015b84 <ip4_route+0x78>
 8015b3e:	68fb      	ldr	r3, [r7, #12]
 8015b40:	3304      	adds	r3, #4
 8015b42:	681b      	ldr	r3, [r3, #0]
 8015b44:	2b00      	cmp	r3, #0
 8015b46:	d01d      	beq.n	8015b84 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8015b48:	687b      	ldr	r3, [r7, #4]
 8015b4a:	681a      	ldr	r2, [r3, #0]
 8015b4c:	68fb      	ldr	r3, [r7, #12]
 8015b4e:	3304      	adds	r3, #4
 8015b50:	681b      	ldr	r3, [r3, #0]
 8015b52:	405a      	eors	r2, r3
 8015b54:	68fb      	ldr	r3, [r7, #12]
 8015b56:	3308      	adds	r3, #8
 8015b58:	681b      	ldr	r3, [r3, #0]
 8015b5a:	4013      	ands	r3, r2
 8015b5c:	2b00      	cmp	r3, #0
 8015b5e:	d101      	bne.n	8015b64 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8015b60:	68fb      	ldr	r3, [r7, #12]
 8015b62:	e038      	b.n	8015bd6 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8015b64:	68fb      	ldr	r3, [r7, #12]
 8015b66:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8015b6a:	f003 0302 	and.w	r3, r3, #2
 8015b6e:	2b00      	cmp	r3, #0
 8015b70:	d108      	bne.n	8015b84 <ip4_route+0x78>
 8015b72:	687b      	ldr	r3, [r7, #4]
 8015b74:	681a      	ldr	r2, [r3, #0]
 8015b76:	68fb      	ldr	r3, [r7, #12]
 8015b78:	330c      	adds	r3, #12
 8015b7a:	681b      	ldr	r3, [r3, #0]
 8015b7c:	429a      	cmp	r2, r3
 8015b7e:	d101      	bne.n	8015b84 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8015b80:	68fb      	ldr	r3, [r7, #12]
 8015b82:	e028      	b.n	8015bd6 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8015b84:	68fb      	ldr	r3, [r7, #12]
 8015b86:	681b      	ldr	r3, [r3, #0]
 8015b88:	60fb      	str	r3, [r7, #12]
 8015b8a:	68fb      	ldr	r3, [r7, #12]
 8015b8c:	2b00      	cmp	r3, #0
 8015b8e:	d1c5      	bne.n	8015b1c <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8015b90:	4b15      	ldr	r3, [pc, #84]	; (8015be8 <ip4_route+0xdc>)
 8015b92:	681b      	ldr	r3, [r3, #0]
 8015b94:	2b00      	cmp	r3, #0
 8015b96:	d01a      	beq.n	8015bce <ip4_route+0xc2>
 8015b98:	4b13      	ldr	r3, [pc, #76]	; (8015be8 <ip4_route+0xdc>)
 8015b9a:	681b      	ldr	r3, [r3, #0]
 8015b9c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8015ba0:	f003 0301 	and.w	r3, r3, #1
 8015ba4:	2b00      	cmp	r3, #0
 8015ba6:	d012      	beq.n	8015bce <ip4_route+0xc2>
 8015ba8:	4b0f      	ldr	r3, [pc, #60]	; (8015be8 <ip4_route+0xdc>)
 8015baa:	681b      	ldr	r3, [r3, #0]
 8015bac:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8015bb0:	f003 0304 	and.w	r3, r3, #4
 8015bb4:	2b00      	cmp	r3, #0
 8015bb6:	d00a      	beq.n	8015bce <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8015bb8:	4b0b      	ldr	r3, [pc, #44]	; (8015be8 <ip4_route+0xdc>)
 8015bba:	681b      	ldr	r3, [r3, #0]
 8015bbc:	3304      	adds	r3, #4
 8015bbe:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8015bc0:	2b00      	cmp	r3, #0
 8015bc2:	d004      	beq.n	8015bce <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8015bc4:	687b      	ldr	r3, [r7, #4]
 8015bc6:	681b      	ldr	r3, [r3, #0]
 8015bc8:	b2db      	uxtb	r3, r3
 8015bca:	2b7f      	cmp	r3, #127	; 0x7f
 8015bcc:	d101      	bne.n	8015bd2 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8015bce:	2300      	movs	r3, #0
 8015bd0:	e001      	b.n	8015bd6 <ip4_route+0xca>
  }

  return netif_default;
 8015bd2:	4b05      	ldr	r3, [pc, #20]	; (8015be8 <ip4_route+0xdc>)
 8015bd4:	681b      	ldr	r3, [r3, #0]
}
 8015bd6:	4618      	mov	r0, r3
 8015bd8:	3714      	adds	r7, #20
 8015bda:	46bd      	mov	sp, r7
 8015bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015be0:	4770      	bx	lr
 8015be2:	bf00      	nop
 8015be4:	2001092c 	.word	0x2001092c
 8015be8:	20010930 	.word	0x20010930

08015bec <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8015bec:	b580      	push	{r7, lr}
 8015bee:	b082      	sub	sp, #8
 8015bf0:	af00      	add	r7, sp, #0
 8015bf2:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8015bf4:	687b      	ldr	r3, [r7, #4]
 8015bf6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8015bfa:	f003 0301 	and.w	r3, r3, #1
 8015bfe:	b2db      	uxtb	r3, r3
 8015c00:	2b00      	cmp	r3, #0
 8015c02:	d016      	beq.n	8015c32 <ip4_input_accept+0x46>
 8015c04:	687b      	ldr	r3, [r7, #4]
 8015c06:	3304      	adds	r3, #4
 8015c08:	681b      	ldr	r3, [r3, #0]
 8015c0a:	2b00      	cmp	r3, #0
 8015c0c:	d011      	beq.n	8015c32 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8015c0e:	4b0b      	ldr	r3, [pc, #44]	; (8015c3c <ip4_input_accept+0x50>)
 8015c10:	695a      	ldr	r2, [r3, #20]
 8015c12:	687b      	ldr	r3, [r7, #4]
 8015c14:	3304      	adds	r3, #4
 8015c16:	681b      	ldr	r3, [r3, #0]
 8015c18:	429a      	cmp	r2, r3
 8015c1a:	d008      	beq.n	8015c2e <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8015c1c:	4b07      	ldr	r3, [pc, #28]	; (8015c3c <ip4_input_accept+0x50>)
 8015c1e:	695b      	ldr	r3, [r3, #20]
 8015c20:	6879      	ldr	r1, [r7, #4]
 8015c22:	4618      	mov	r0, r3
 8015c24:	f000 fa26 	bl	8016074 <ip4_addr_isbroadcast_u32>
 8015c28:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8015c2a:	2b00      	cmp	r3, #0
 8015c2c:	d001      	beq.n	8015c32 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8015c2e:	2301      	movs	r3, #1
 8015c30:	e000      	b.n	8015c34 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8015c32:	2300      	movs	r3, #0
}
 8015c34:	4618      	mov	r0, r3
 8015c36:	3708      	adds	r7, #8
 8015c38:	46bd      	mov	sp, r7
 8015c3a:	bd80      	pop	{r7, pc}
 8015c3c:	2000d1c4 	.word	0x2000d1c4

08015c40 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8015c40:	b580      	push	{r7, lr}
 8015c42:	b088      	sub	sp, #32
 8015c44:	af00      	add	r7, sp, #0
 8015c46:	6078      	str	r0, [r7, #4]
 8015c48:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 8015c4a:	2301      	movs	r3, #1
 8015c4c:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8015c4e:	687b      	ldr	r3, [r7, #4]
 8015c50:	685b      	ldr	r3, [r3, #4]
 8015c52:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 8015c54:	69fb      	ldr	r3, [r7, #28]
 8015c56:	781b      	ldrb	r3, [r3, #0]
 8015c58:	091b      	lsrs	r3, r3, #4
 8015c5a:	b2db      	uxtb	r3, r3
 8015c5c:	2b04      	cmp	r3, #4
 8015c5e:	d004      	beq.n	8015c6a <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8015c60:	6878      	ldr	r0, [r7, #4]
 8015c62:	f7f5 fe71 	bl	800b948 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8015c66:	2300      	movs	r3, #0
 8015c68:	e123      	b.n	8015eb2 <ip4_input+0x272>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8015c6a:	69fb      	ldr	r3, [r7, #28]
 8015c6c:	781b      	ldrb	r3, [r3, #0]
 8015c6e:	f003 030f 	and.w	r3, r3, #15
 8015c72:	b2db      	uxtb	r3, r3
 8015c74:	009b      	lsls	r3, r3, #2
 8015c76:	b2db      	uxtb	r3, r3
 8015c78:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8015c7a:	69fb      	ldr	r3, [r7, #28]
 8015c7c:	885b      	ldrh	r3, [r3, #2]
 8015c7e:	b29b      	uxth	r3, r3
 8015c80:	4618      	mov	r0, r3
 8015c82:	f7f4 fa63 	bl	800a14c <lwip_htons>
 8015c86:	4603      	mov	r3, r0
 8015c88:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8015c8a:	687b      	ldr	r3, [r7, #4]
 8015c8c:	891b      	ldrh	r3, [r3, #8]
 8015c8e:	8a3a      	ldrh	r2, [r7, #16]
 8015c90:	429a      	cmp	r2, r3
 8015c92:	d204      	bcs.n	8015c9e <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 8015c94:	8a3b      	ldrh	r3, [r7, #16]
 8015c96:	4619      	mov	r1, r3
 8015c98:	6878      	ldr	r0, [r7, #4]
 8015c9a:	f7f5 fccf 	bl	800b63c <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8015c9e:	687b      	ldr	r3, [r7, #4]
 8015ca0:	895b      	ldrh	r3, [r3, #10]
 8015ca2:	8a7a      	ldrh	r2, [r7, #18]
 8015ca4:	429a      	cmp	r2, r3
 8015ca6:	d807      	bhi.n	8015cb8 <ip4_input+0x78>
 8015ca8:	687b      	ldr	r3, [r7, #4]
 8015caa:	891b      	ldrh	r3, [r3, #8]
 8015cac:	8a3a      	ldrh	r2, [r7, #16]
 8015cae:	429a      	cmp	r2, r3
 8015cb0:	d802      	bhi.n	8015cb8 <ip4_input+0x78>
 8015cb2:	8a7b      	ldrh	r3, [r7, #18]
 8015cb4:	2b13      	cmp	r3, #19
 8015cb6:	d804      	bhi.n	8015cc2 <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8015cb8:	6878      	ldr	r0, [r7, #4]
 8015cba:	f7f5 fe45 	bl	800b948 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8015cbe:	2300      	movs	r3, #0
 8015cc0:	e0f7      	b.n	8015eb2 <ip4_input+0x272>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8015cc2:	69fb      	ldr	r3, [r7, #28]
 8015cc4:	691b      	ldr	r3, [r3, #16]
 8015cc6:	4a7d      	ldr	r2, [pc, #500]	; (8015ebc <ip4_input+0x27c>)
 8015cc8:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8015cca:	69fb      	ldr	r3, [r7, #28]
 8015ccc:	68db      	ldr	r3, [r3, #12]
 8015cce:	4a7b      	ldr	r2, [pc, #492]	; (8015ebc <ip4_input+0x27c>)
 8015cd0:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8015cd2:	4b7a      	ldr	r3, [pc, #488]	; (8015ebc <ip4_input+0x27c>)
 8015cd4:	695b      	ldr	r3, [r3, #20]
 8015cd6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015cda:	2be0      	cmp	r3, #224	; 0xe0
 8015cdc:	d112      	bne.n	8015d04 <ip4_input+0xc4>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8015cde:	683b      	ldr	r3, [r7, #0]
 8015ce0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8015ce4:	f003 0301 	and.w	r3, r3, #1
 8015ce8:	b2db      	uxtb	r3, r3
 8015cea:	2b00      	cmp	r3, #0
 8015cec:	d007      	beq.n	8015cfe <ip4_input+0xbe>
 8015cee:	683b      	ldr	r3, [r7, #0]
 8015cf0:	3304      	adds	r3, #4
 8015cf2:	681b      	ldr	r3, [r3, #0]
 8015cf4:	2b00      	cmp	r3, #0
 8015cf6:	d002      	beq.n	8015cfe <ip4_input+0xbe>
      netif = inp;
 8015cf8:	683b      	ldr	r3, [r7, #0]
 8015cfa:	61bb      	str	r3, [r7, #24]
 8015cfc:	e02a      	b.n	8015d54 <ip4_input+0x114>
    } else {
      netif = NULL;
 8015cfe:	2300      	movs	r3, #0
 8015d00:	61bb      	str	r3, [r7, #24]
 8015d02:	e027      	b.n	8015d54 <ip4_input+0x114>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8015d04:	6838      	ldr	r0, [r7, #0]
 8015d06:	f7ff ff71 	bl	8015bec <ip4_input_accept>
 8015d0a:	4603      	mov	r3, r0
 8015d0c:	2b00      	cmp	r3, #0
 8015d0e:	d002      	beq.n	8015d16 <ip4_input+0xd6>
      netif = inp;
 8015d10:	683b      	ldr	r3, [r7, #0]
 8015d12:	61bb      	str	r3, [r7, #24]
 8015d14:	e01e      	b.n	8015d54 <ip4_input+0x114>
    } else {
      netif = NULL;
 8015d16:	2300      	movs	r3, #0
 8015d18:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8015d1a:	4b68      	ldr	r3, [pc, #416]	; (8015ebc <ip4_input+0x27c>)
 8015d1c:	695b      	ldr	r3, [r3, #20]
 8015d1e:	b2db      	uxtb	r3, r3
 8015d20:	2b7f      	cmp	r3, #127	; 0x7f
 8015d22:	d017      	beq.n	8015d54 <ip4_input+0x114>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8015d24:	4b66      	ldr	r3, [pc, #408]	; (8015ec0 <ip4_input+0x280>)
 8015d26:	681b      	ldr	r3, [r3, #0]
 8015d28:	61bb      	str	r3, [r7, #24]
 8015d2a:	e00e      	b.n	8015d4a <ip4_input+0x10a>
          if (netif == inp) {
 8015d2c:	69ba      	ldr	r2, [r7, #24]
 8015d2e:	683b      	ldr	r3, [r7, #0]
 8015d30:	429a      	cmp	r2, r3
 8015d32:	d006      	beq.n	8015d42 <ip4_input+0x102>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8015d34:	69b8      	ldr	r0, [r7, #24]
 8015d36:	f7ff ff59 	bl	8015bec <ip4_input_accept>
 8015d3a:	4603      	mov	r3, r0
 8015d3c:	2b00      	cmp	r3, #0
 8015d3e:	d108      	bne.n	8015d52 <ip4_input+0x112>
 8015d40:	e000      	b.n	8015d44 <ip4_input+0x104>
            continue;
 8015d42:	bf00      	nop
        NETIF_FOREACH(netif) {
 8015d44:	69bb      	ldr	r3, [r7, #24]
 8015d46:	681b      	ldr	r3, [r3, #0]
 8015d48:	61bb      	str	r3, [r7, #24]
 8015d4a:	69bb      	ldr	r3, [r7, #24]
 8015d4c:	2b00      	cmp	r3, #0
 8015d4e:	d1ed      	bne.n	8015d2c <ip4_input+0xec>
 8015d50:	e000      	b.n	8015d54 <ip4_input+0x114>
            break;
 8015d52:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 8015d54:	69bb      	ldr	r3, [r7, #24]
 8015d56:	2b00      	cmp	r3, #0
 8015d58:	d111      	bne.n	8015d7e <ip4_input+0x13e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 8015d5a:	69fb      	ldr	r3, [r7, #28]
 8015d5c:	7a5b      	ldrb	r3, [r3, #9]
 8015d5e:	2b11      	cmp	r3, #17
 8015d60:	d10d      	bne.n	8015d7e <ip4_input+0x13e>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 8015d62:	8a7b      	ldrh	r3, [r7, #18]
 8015d64:	69fa      	ldr	r2, [r7, #28]
 8015d66:	4413      	add	r3, r2
 8015d68:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 8015d6a:	68fb      	ldr	r3, [r7, #12]
 8015d6c:	885b      	ldrh	r3, [r3, #2]
 8015d6e:	b29b      	uxth	r3, r3
 8015d70:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 8015d74:	d103      	bne.n	8015d7e <ip4_input+0x13e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 8015d76:	683b      	ldr	r3, [r7, #0]
 8015d78:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 8015d7a:	2300      	movs	r3, #0
 8015d7c:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 8015d7e:	697b      	ldr	r3, [r7, #20]
 8015d80:	2b00      	cmp	r3, #0
 8015d82:	d017      	beq.n	8015db4 <ip4_input+0x174>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 8015d84:	4b4d      	ldr	r3, [pc, #308]	; (8015ebc <ip4_input+0x27c>)
 8015d86:	691b      	ldr	r3, [r3, #16]
 8015d88:	2b00      	cmp	r3, #0
 8015d8a:	d013      	beq.n	8015db4 <ip4_input+0x174>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8015d8c:	4b4b      	ldr	r3, [pc, #300]	; (8015ebc <ip4_input+0x27c>)
 8015d8e:	691b      	ldr	r3, [r3, #16]
 8015d90:	6839      	ldr	r1, [r7, #0]
 8015d92:	4618      	mov	r0, r3
 8015d94:	f000 f96e 	bl	8016074 <ip4_addr_isbroadcast_u32>
 8015d98:	4603      	mov	r3, r0
 8015d9a:	2b00      	cmp	r3, #0
 8015d9c:	d105      	bne.n	8015daa <ip4_input+0x16a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8015d9e:	4b47      	ldr	r3, [pc, #284]	; (8015ebc <ip4_input+0x27c>)
 8015da0:	691b      	ldr	r3, [r3, #16]
 8015da2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8015da6:	2be0      	cmp	r3, #224	; 0xe0
 8015da8:	d104      	bne.n	8015db4 <ip4_input+0x174>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8015daa:	6878      	ldr	r0, [r7, #4]
 8015dac:	f7f5 fdcc 	bl	800b948 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8015db0:	2300      	movs	r3, #0
 8015db2:	e07e      	b.n	8015eb2 <ip4_input+0x272>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8015db4:	69bb      	ldr	r3, [r7, #24]
 8015db6:	2b00      	cmp	r3, #0
 8015db8:	d104      	bne.n	8015dc4 <ip4_input+0x184>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8015dba:	6878      	ldr	r0, [r7, #4]
 8015dbc:	f7f5 fdc4 	bl	800b948 <pbuf_free>
    return ERR_OK;
 8015dc0:	2300      	movs	r3, #0
 8015dc2:	e076      	b.n	8015eb2 <ip4_input+0x272>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8015dc4:	69fb      	ldr	r3, [r7, #28]
 8015dc6:	88db      	ldrh	r3, [r3, #6]
 8015dc8:	b29b      	uxth	r3, r3
 8015dca:	461a      	mov	r2, r3
 8015dcc:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8015dd0:	4013      	ands	r3, r2
 8015dd2:	2b00      	cmp	r3, #0
 8015dd4:	d00b      	beq.n	8015dee <ip4_input+0x1ae>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8015dd6:	6878      	ldr	r0, [r7, #4]
 8015dd8:	f000 fc92 	bl	8016700 <ip4_reass>
 8015ddc:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8015dde:	687b      	ldr	r3, [r7, #4]
 8015de0:	2b00      	cmp	r3, #0
 8015de2:	d101      	bne.n	8015de8 <ip4_input+0x1a8>
      return ERR_OK;
 8015de4:	2300      	movs	r3, #0
 8015de6:	e064      	b.n	8015eb2 <ip4_input+0x272>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8015de8:	687b      	ldr	r3, [r7, #4]
 8015dea:	685b      	ldr	r3, [r3, #4]
 8015dec:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8015dee:	4a33      	ldr	r2, [pc, #204]	; (8015ebc <ip4_input+0x27c>)
 8015df0:	69bb      	ldr	r3, [r7, #24]
 8015df2:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8015df4:	4a31      	ldr	r2, [pc, #196]	; (8015ebc <ip4_input+0x27c>)
 8015df6:	683b      	ldr	r3, [r7, #0]
 8015df8:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8015dfa:	4a30      	ldr	r2, [pc, #192]	; (8015ebc <ip4_input+0x27c>)
 8015dfc:	69fb      	ldr	r3, [r7, #28]
 8015dfe:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8015e00:	69fb      	ldr	r3, [r7, #28]
 8015e02:	781b      	ldrb	r3, [r3, #0]
 8015e04:	f003 030f 	and.w	r3, r3, #15
 8015e08:	b2db      	uxtb	r3, r3
 8015e0a:	009b      	lsls	r3, r3, #2
 8015e0c:	b2db      	uxtb	r3, r3
 8015e0e:	b29a      	uxth	r2, r3
 8015e10:	4b2a      	ldr	r3, [pc, #168]	; (8015ebc <ip4_input+0x27c>)
 8015e12:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8015e14:	8a7b      	ldrh	r3, [r7, #18]
 8015e16:	4619      	mov	r1, r3
 8015e18:	6878      	ldr	r0, [r7, #4]
 8015e1a:	f7f5 fd0f 	bl	800b83c <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8015e1e:	69fb      	ldr	r3, [r7, #28]
 8015e20:	7a5b      	ldrb	r3, [r3, #9]
 8015e22:	2b11      	cmp	r3, #17
 8015e24:	d006      	beq.n	8015e34 <ip4_input+0x1f4>
 8015e26:	2b11      	cmp	r3, #17
 8015e28:	dc13      	bgt.n	8015e52 <ip4_input+0x212>
 8015e2a:	2b01      	cmp	r3, #1
 8015e2c:	d00c      	beq.n	8015e48 <ip4_input+0x208>
 8015e2e:	2b06      	cmp	r3, #6
 8015e30:	d005      	beq.n	8015e3e <ip4_input+0x1fe>
 8015e32:	e00e      	b.n	8015e52 <ip4_input+0x212>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8015e34:	6839      	ldr	r1, [r7, #0]
 8015e36:	6878      	ldr	r0, [r7, #4]
 8015e38:	f7fc fade 	bl	80123f8 <udp_input>
        break;
 8015e3c:	e026      	b.n	8015e8c <ip4_input+0x24c>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8015e3e:	6839      	ldr	r1, [r7, #0]
 8015e40:	6878      	ldr	r0, [r7, #4]
 8015e42:	f7f7 fe97 	bl	800db74 <tcp_input>
        break;
 8015e46:	e021      	b.n	8015e8c <ip4_input+0x24c>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8015e48:	6839      	ldr	r1, [r7, #0]
 8015e4a:	6878      	ldr	r0, [r7, #4]
 8015e4c:	f7ff fcd0 	bl	80157f0 <icmp_input>
        break;
 8015e50:	e01c      	b.n	8015e8c <ip4_input+0x24c>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8015e52:	4b1a      	ldr	r3, [pc, #104]	; (8015ebc <ip4_input+0x27c>)
 8015e54:	695b      	ldr	r3, [r3, #20]
 8015e56:	69b9      	ldr	r1, [r7, #24]
 8015e58:	4618      	mov	r0, r3
 8015e5a:	f000 f90b 	bl	8016074 <ip4_addr_isbroadcast_u32>
 8015e5e:	4603      	mov	r3, r0
 8015e60:	2b00      	cmp	r3, #0
 8015e62:	d10f      	bne.n	8015e84 <ip4_input+0x244>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8015e64:	4b15      	ldr	r3, [pc, #84]	; (8015ebc <ip4_input+0x27c>)
 8015e66:	695b      	ldr	r3, [r3, #20]
 8015e68:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8015e6c:	2be0      	cmp	r3, #224	; 0xe0
 8015e6e:	d009      	beq.n	8015e84 <ip4_input+0x244>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8015e70:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8015e74:	4619      	mov	r1, r3
 8015e76:	6878      	ldr	r0, [r7, #4]
 8015e78:	f7f5 fd53 	bl	800b922 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8015e7c:	2102      	movs	r1, #2
 8015e7e:	6878      	ldr	r0, [r7, #4]
 8015e80:	f7ff fdba 	bl	80159f8 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8015e84:	6878      	ldr	r0, [r7, #4]
 8015e86:	f7f5 fd5f 	bl	800b948 <pbuf_free>
        break;
 8015e8a:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8015e8c:	4b0b      	ldr	r3, [pc, #44]	; (8015ebc <ip4_input+0x27c>)
 8015e8e:	2200      	movs	r2, #0
 8015e90:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8015e92:	4b0a      	ldr	r3, [pc, #40]	; (8015ebc <ip4_input+0x27c>)
 8015e94:	2200      	movs	r2, #0
 8015e96:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8015e98:	4b08      	ldr	r3, [pc, #32]	; (8015ebc <ip4_input+0x27c>)
 8015e9a:	2200      	movs	r2, #0
 8015e9c:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8015e9e:	4b07      	ldr	r3, [pc, #28]	; (8015ebc <ip4_input+0x27c>)
 8015ea0:	2200      	movs	r2, #0
 8015ea2:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8015ea4:	4b05      	ldr	r3, [pc, #20]	; (8015ebc <ip4_input+0x27c>)
 8015ea6:	2200      	movs	r2, #0
 8015ea8:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8015eaa:	4b04      	ldr	r3, [pc, #16]	; (8015ebc <ip4_input+0x27c>)
 8015eac:	2200      	movs	r2, #0
 8015eae:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8015eb0:	2300      	movs	r3, #0
}
 8015eb2:	4618      	mov	r0, r3
 8015eb4:	3720      	adds	r7, #32
 8015eb6:	46bd      	mov	sp, r7
 8015eb8:	bd80      	pop	{r7, pc}
 8015eba:	bf00      	nop
 8015ebc:	2000d1c4 	.word	0x2000d1c4
 8015ec0:	2001092c 	.word	0x2001092c

08015ec4 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8015ec4:	b580      	push	{r7, lr}
 8015ec6:	b08a      	sub	sp, #40	; 0x28
 8015ec8:	af04      	add	r7, sp, #16
 8015eca:	60f8      	str	r0, [r7, #12]
 8015ecc:	60b9      	str	r1, [r7, #8]
 8015ece:	607a      	str	r2, [r7, #4]
 8015ed0:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8015ed2:	68bb      	ldr	r3, [r7, #8]
 8015ed4:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8015ed6:	687b      	ldr	r3, [r7, #4]
 8015ed8:	2b00      	cmp	r3, #0
 8015eda:	d009      	beq.n	8015ef0 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8015edc:	68bb      	ldr	r3, [r7, #8]
 8015ede:	2b00      	cmp	r3, #0
 8015ee0:	d003      	beq.n	8015eea <ip4_output_if+0x26>
 8015ee2:	68bb      	ldr	r3, [r7, #8]
 8015ee4:	681b      	ldr	r3, [r3, #0]
 8015ee6:	2b00      	cmp	r3, #0
 8015ee8:	d102      	bne.n	8015ef0 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8015eea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015eec:	3304      	adds	r3, #4
 8015eee:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8015ef0:	78fa      	ldrb	r2, [r7, #3]
 8015ef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015ef4:	9302      	str	r3, [sp, #8]
 8015ef6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8015efa:	9301      	str	r3, [sp, #4]
 8015efc:	f897 3020 	ldrb.w	r3, [r7, #32]
 8015f00:	9300      	str	r3, [sp, #0]
 8015f02:	4613      	mov	r3, r2
 8015f04:	687a      	ldr	r2, [r7, #4]
 8015f06:	6979      	ldr	r1, [r7, #20]
 8015f08:	68f8      	ldr	r0, [r7, #12]
 8015f0a:	f000 f805 	bl	8015f18 <ip4_output_if_src>
 8015f0e:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8015f10:	4618      	mov	r0, r3
 8015f12:	3718      	adds	r7, #24
 8015f14:	46bd      	mov	sp, r7
 8015f16:	bd80      	pop	{r7, pc}

08015f18 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8015f18:	b580      	push	{r7, lr}
 8015f1a:	b088      	sub	sp, #32
 8015f1c:	af00      	add	r7, sp, #0
 8015f1e:	60f8      	str	r0, [r7, #12]
 8015f20:	60b9      	str	r1, [r7, #8]
 8015f22:	607a      	str	r2, [r7, #4]
 8015f24:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8015f26:	68fb      	ldr	r3, [r7, #12]
 8015f28:	7b9b      	ldrb	r3, [r3, #14]
 8015f2a:	2b01      	cmp	r3, #1
 8015f2c:	d006      	beq.n	8015f3c <ip4_output_if_src+0x24>
 8015f2e:	4b4b      	ldr	r3, [pc, #300]	; (801605c <ip4_output_if_src+0x144>)
 8015f30:	f44f 7255 	mov.w	r2, #852	; 0x354
 8015f34:	494a      	ldr	r1, [pc, #296]	; (8016060 <ip4_output_if_src+0x148>)
 8015f36:	484b      	ldr	r0, [pc, #300]	; (8016064 <ip4_output_if_src+0x14c>)
 8015f38:	f001 fbac 	bl	8017694 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8015f3c:	687b      	ldr	r3, [r7, #4]
 8015f3e:	2b00      	cmp	r3, #0
 8015f40:	d060      	beq.n	8016004 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8015f42:	2314      	movs	r3, #20
 8015f44:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8015f46:	2114      	movs	r1, #20
 8015f48:	68f8      	ldr	r0, [r7, #12]
 8015f4a:	f7f5 fc67 	bl	800b81c <pbuf_add_header>
 8015f4e:	4603      	mov	r3, r0
 8015f50:	2b00      	cmp	r3, #0
 8015f52:	d002      	beq.n	8015f5a <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8015f54:	f06f 0301 	mvn.w	r3, #1
 8015f58:	e07c      	b.n	8016054 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8015f5a:	68fb      	ldr	r3, [r7, #12]
 8015f5c:	685b      	ldr	r3, [r3, #4]
 8015f5e:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8015f60:	68fb      	ldr	r3, [r7, #12]
 8015f62:	895b      	ldrh	r3, [r3, #10]
 8015f64:	2b13      	cmp	r3, #19
 8015f66:	d806      	bhi.n	8015f76 <ip4_output_if_src+0x5e>
 8015f68:	4b3c      	ldr	r3, [pc, #240]	; (801605c <ip4_output_if_src+0x144>)
 8015f6a:	f44f 7262 	mov.w	r2, #904	; 0x388
 8015f6e:	493e      	ldr	r1, [pc, #248]	; (8016068 <ip4_output_if_src+0x150>)
 8015f70:	483c      	ldr	r0, [pc, #240]	; (8016064 <ip4_output_if_src+0x14c>)
 8015f72:	f001 fb8f 	bl	8017694 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8015f76:	69fb      	ldr	r3, [r7, #28]
 8015f78:	78fa      	ldrb	r2, [r7, #3]
 8015f7a:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8015f7c:	69fb      	ldr	r3, [r7, #28]
 8015f7e:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8015f82:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8015f84:	687b      	ldr	r3, [r7, #4]
 8015f86:	681a      	ldr	r2, [r3, #0]
 8015f88:	69fb      	ldr	r3, [r7, #28]
 8015f8a:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8015f8c:	8b7b      	ldrh	r3, [r7, #26]
 8015f8e:	089b      	lsrs	r3, r3, #2
 8015f90:	b29b      	uxth	r3, r3
 8015f92:	b2db      	uxtb	r3, r3
 8015f94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015f98:	b2da      	uxtb	r2, r3
 8015f9a:	69fb      	ldr	r3, [r7, #28]
 8015f9c:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8015f9e:	69fb      	ldr	r3, [r7, #28]
 8015fa0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8015fa4:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8015fa6:	68fb      	ldr	r3, [r7, #12]
 8015fa8:	891b      	ldrh	r3, [r3, #8]
 8015faa:	4618      	mov	r0, r3
 8015fac:	f7f4 f8ce 	bl	800a14c <lwip_htons>
 8015fb0:	4603      	mov	r3, r0
 8015fb2:	461a      	mov	r2, r3
 8015fb4:	69fb      	ldr	r3, [r7, #28]
 8015fb6:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8015fb8:	69fb      	ldr	r3, [r7, #28]
 8015fba:	2200      	movs	r2, #0
 8015fbc:	719a      	strb	r2, [r3, #6]
 8015fbe:	2200      	movs	r2, #0
 8015fc0:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8015fc2:	4b2a      	ldr	r3, [pc, #168]	; (801606c <ip4_output_if_src+0x154>)
 8015fc4:	881b      	ldrh	r3, [r3, #0]
 8015fc6:	4618      	mov	r0, r3
 8015fc8:	f7f4 f8c0 	bl	800a14c <lwip_htons>
 8015fcc:	4603      	mov	r3, r0
 8015fce:	461a      	mov	r2, r3
 8015fd0:	69fb      	ldr	r3, [r7, #28]
 8015fd2:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8015fd4:	4b25      	ldr	r3, [pc, #148]	; (801606c <ip4_output_if_src+0x154>)
 8015fd6:	881b      	ldrh	r3, [r3, #0]
 8015fd8:	3301      	adds	r3, #1
 8015fda:	b29a      	uxth	r2, r3
 8015fdc:	4b23      	ldr	r3, [pc, #140]	; (801606c <ip4_output_if_src+0x154>)
 8015fde:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8015fe0:	68bb      	ldr	r3, [r7, #8]
 8015fe2:	2b00      	cmp	r3, #0
 8015fe4:	d104      	bne.n	8015ff0 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8015fe6:	4b22      	ldr	r3, [pc, #136]	; (8016070 <ip4_output_if_src+0x158>)
 8015fe8:	681a      	ldr	r2, [r3, #0]
 8015fea:	69fb      	ldr	r3, [r7, #28]
 8015fec:	60da      	str	r2, [r3, #12]
 8015fee:	e003      	b.n	8015ff8 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8015ff0:	68bb      	ldr	r3, [r7, #8]
 8015ff2:	681a      	ldr	r2, [r3, #0]
 8015ff4:	69fb      	ldr	r3, [r7, #28]
 8015ff6:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8015ff8:	69fb      	ldr	r3, [r7, #28]
 8015ffa:	2200      	movs	r2, #0
 8015ffc:	729a      	strb	r2, [r3, #10]
 8015ffe:	2200      	movs	r2, #0
 8016000:	72da      	strb	r2, [r3, #11]
 8016002:	e00f      	b.n	8016024 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8016004:	68fb      	ldr	r3, [r7, #12]
 8016006:	895b      	ldrh	r3, [r3, #10]
 8016008:	2b13      	cmp	r3, #19
 801600a:	d802      	bhi.n	8016012 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801600c:	f06f 0301 	mvn.w	r3, #1
 8016010:	e020      	b.n	8016054 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8016012:	68fb      	ldr	r3, [r7, #12]
 8016014:	685b      	ldr	r3, [r3, #4]
 8016016:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8016018:	69fb      	ldr	r3, [r7, #28]
 801601a:	691b      	ldr	r3, [r3, #16]
 801601c:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 801601e:	f107 0314 	add.w	r3, r7, #20
 8016022:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8016024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016026:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016028:	2b00      	cmp	r3, #0
 801602a:	d00c      	beq.n	8016046 <ip4_output_if_src+0x12e>
 801602c:	68fb      	ldr	r3, [r7, #12]
 801602e:	891a      	ldrh	r2, [r3, #8]
 8016030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016032:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016034:	429a      	cmp	r2, r3
 8016036:	d906      	bls.n	8016046 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8016038:	687a      	ldr	r2, [r7, #4]
 801603a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801603c:	68f8      	ldr	r0, [r7, #12]
 801603e:	f000 fd53 	bl	8016ae8 <ip4_frag>
 8016042:	4603      	mov	r3, r0
 8016044:	e006      	b.n	8016054 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8016046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016048:	695b      	ldr	r3, [r3, #20]
 801604a:	687a      	ldr	r2, [r7, #4]
 801604c:	68f9      	ldr	r1, [r7, #12]
 801604e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016050:	4798      	blx	r3
 8016052:	4603      	mov	r3, r0
}
 8016054:	4618      	mov	r0, r3
 8016056:	3720      	adds	r7, #32
 8016058:	46bd      	mov	sp, r7
 801605a:	bd80      	pop	{r7, pc}
 801605c:	0801bafc 	.word	0x0801bafc
 8016060:	0801bb30 	.word	0x0801bb30
 8016064:	0801bb3c 	.word	0x0801bb3c
 8016068:	0801bb64 	.word	0x0801bb64
 801606c:	20010abe 	.word	0x20010abe
 8016070:	0801bf98 	.word	0x0801bf98

08016074 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8016074:	b480      	push	{r7}
 8016076:	b085      	sub	sp, #20
 8016078:	af00      	add	r7, sp, #0
 801607a:	6078      	str	r0, [r7, #4]
 801607c:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801607e:	687b      	ldr	r3, [r7, #4]
 8016080:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8016082:	687b      	ldr	r3, [r7, #4]
 8016084:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016088:	d002      	beq.n	8016090 <ip4_addr_isbroadcast_u32+0x1c>
 801608a:	687b      	ldr	r3, [r7, #4]
 801608c:	2b00      	cmp	r3, #0
 801608e:	d101      	bne.n	8016094 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8016090:	2301      	movs	r3, #1
 8016092:	e02a      	b.n	80160ea <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8016094:	683b      	ldr	r3, [r7, #0]
 8016096:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801609a:	f003 0302 	and.w	r3, r3, #2
 801609e:	2b00      	cmp	r3, #0
 80160a0:	d101      	bne.n	80160a6 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 80160a2:	2300      	movs	r3, #0
 80160a4:	e021      	b.n	80160ea <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 80160a6:	683b      	ldr	r3, [r7, #0]
 80160a8:	3304      	adds	r3, #4
 80160aa:	681b      	ldr	r3, [r3, #0]
 80160ac:	687a      	ldr	r2, [r7, #4]
 80160ae:	429a      	cmp	r2, r3
 80160b0:	d101      	bne.n	80160b6 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 80160b2:	2300      	movs	r3, #0
 80160b4:	e019      	b.n	80160ea <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 80160b6:	68fa      	ldr	r2, [r7, #12]
 80160b8:	683b      	ldr	r3, [r7, #0]
 80160ba:	3304      	adds	r3, #4
 80160bc:	681b      	ldr	r3, [r3, #0]
 80160be:	405a      	eors	r2, r3
 80160c0:	683b      	ldr	r3, [r7, #0]
 80160c2:	3308      	adds	r3, #8
 80160c4:	681b      	ldr	r3, [r3, #0]
 80160c6:	4013      	ands	r3, r2
 80160c8:	2b00      	cmp	r3, #0
 80160ca:	d10d      	bne.n	80160e8 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80160cc:	683b      	ldr	r3, [r7, #0]
 80160ce:	3308      	adds	r3, #8
 80160d0:	681b      	ldr	r3, [r3, #0]
 80160d2:	43da      	mvns	r2, r3
 80160d4:	687b      	ldr	r3, [r7, #4]
 80160d6:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 80160d8:	683b      	ldr	r3, [r7, #0]
 80160da:	3308      	adds	r3, #8
 80160dc:	681b      	ldr	r3, [r3, #0]
 80160de:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80160e0:	429a      	cmp	r2, r3
 80160e2:	d101      	bne.n	80160e8 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 80160e4:	2301      	movs	r3, #1
 80160e6:	e000      	b.n	80160ea <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 80160e8:	2300      	movs	r3, #0
  }
}
 80160ea:	4618      	mov	r0, r3
 80160ec:	3714      	adds	r7, #20
 80160ee:	46bd      	mov	sp, r7
 80160f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160f4:	4770      	bx	lr
	...

080160f8 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 80160f8:	b580      	push	{r7, lr}
 80160fa:	b084      	sub	sp, #16
 80160fc:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 80160fe:	2300      	movs	r3, #0
 8016100:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8016102:	4b12      	ldr	r3, [pc, #72]	; (801614c <ip_reass_tmr+0x54>)
 8016104:	681b      	ldr	r3, [r3, #0]
 8016106:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8016108:	e018      	b.n	801613c <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801610a:	68fb      	ldr	r3, [r7, #12]
 801610c:	7fdb      	ldrb	r3, [r3, #31]
 801610e:	2b00      	cmp	r3, #0
 8016110:	d00b      	beq.n	801612a <ip_reass_tmr+0x32>
      r->timer--;
 8016112:	68fb      	ldr	r3, [r7, #12]
 8016114:	7fdb      	ldrb	r3, [r3, #31]
 8016116:	3b01      	subs	r3, #1
 8016118:	b2da      	uxtb	r2, r3
 801611a:	68fb      	ldr	r3, [r7, #12]
 801611c:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 801611e:	68fb      	ldr	r3, [r7, #12]
 8016120:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8016122:	68fb      	ldr	r3, [r7, #12]
 8016124:	681b      	ldr	r3, [r3, #0]
 8016126:	60fb      	str	r3, [r7, #12]
 8016128:	e008      	b.n	801613c <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801612a:	68fb      	ldr	r3, [r7, #12]
 801612c:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801612e:	68fb      	ldr	r3, [r7, #12]
 8016130:	681b      	ldr	r3, [r3, #0]
 8016132:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8016134:	68b9      	ldr	r1, [r7, #8]
 8016136:	6878      	ldr	r0, [r7, #4]
 8016138:	f000 f80a 	bl	8016150 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 801613c:	68fb      	ldr	r3, [r7, #12]
 801613e:	2b00      	cmp	r3, #0
 8016140:	d1e3      	bne.n	801610a <ip_reass_tmr+0x12>
    }
  }
}
 8016142:	bf00      	nop
 8016144:	bf00      	nop
 8016146:	3710      	adds	r7, #16
 8016148:	46bd      	mov	sp, r7
 801614a:	bd80      	pop	{r7, pc}
 801614c:	20010ac0 	.word	0x20010ac0

08016150 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8016150:	b580      	push	{r7, lr}
 8016152:	b088      	sub	sp, #32
 8016154:	af00      	add	r7, sp, #0
 8016156:	6078      	str	r0, [r7, #4]
 8016158:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801615a:	2300      	movs	r3, #0
 801615c:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801615e:	683a      	ldr	r2, [r7, #0]
 8016160:	687b      	ldr	r3, [r7, #4]
 8016162:	429a      	cmp	r2, r3
 8016164:	d105      	bne.n	8016172 <ip_reass_free_complete_datagram+0x22>
 8016166:	4b45      	ldr	r3, [pc, #276]	; (801627c <ip_reass_free_complete_datagram+0x12c>)
 8016168:	22ab      	movs	r2, #171	; 0xab
 801616a:	4945      	ldr	r1, [pc, #276]	; (8016280 <ip_reass_free_complete_datagram+0x130>)
 801616c:	4845      	ldr	r0, [pc, #276]	; (8016284 <ip_reass_free_complete_datagram+0x134>)
 801616e:	f001 fa91 	bl	8017694 <iprintf>
  if (prev != NULL) {
 8016172:	683b      	ldr	r3, [r7, #0]
 8016174:	2b00      	cmp	r3, #0
 8016176:	d00a      	beq.n	801618e <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8016178:	683b      	ldr	r3, [r7, #0]
 801617a:	681b      	ldr	r3, [r3, #0]
 801617c:	687a      	ldr	r2, [r7, #4]
 801617e:	429a      	cmp	r2, r3
 8016180:	d005      	beq.n	801618e <ip_reass_free_complete_datagram+0x3e>
 8016182:	4b3e      	ldr	r3, [pc, #248]	; (801627c <ip_reass_free_complete_datagram+0x12c>)
 8016184:	22ad      	movs	r2, #173	; 0xad
 8016186:	4940      	ldr	r1, [pc, #256]	; (8016288 <ip_reass_free_complete_datagram+0x138>)
 8016188:	483e      	ldr	r0, [pc, #248]	; (8016284 <ip_reass_free_complete_datagram+0x134>)
 801618a:	f001 fa83 	bl	8017694 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801618e:	687b      	ldr	r3, [r7, #4]
 8016190:	685b      	ldr	r3, [r3, #4]
 8016192:	685b      	ldr	r3, [r3, #4]
 8016194:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8016196:	697b      	ldr	r3, [r7, #20]
 8016198:	889b      	ldrh	r3, [r3, #4]
 801619a:	b29b      	uxth	r3, r3
 801619c:	2b00      	cmp	r3, #0
 801619e:	d12a      	bne.n	80161f6 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 80161a0:	687b      	ldr	r3, [r7, #4]
 80161a2:	685b      	ldr	r3, [r3, #4]
 80161a4:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 80161a6:	697b      	ldr	r3, [r7, #20]
 80161a8:	681a      	ldr	r2, [r3, #0]
 80161aa:	687b      	ldr	r3, [r7, #4]
 80161ac:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 80161ae:	69bb      	ldr	r3, [r7, #24]
 80161b0:	6858      	ldr	r0, [r3, #4]
 80161b2:	687b      	ldr	r3, [r7, #4]
 80161b4:	3308      	adds	r3, #8
 80161b6:	2214      	movs	r2, #20
 80161b8:	4619      	mov	r1, r3
 80161ba:	f001 f9c0 	bl	801753e <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 80161be:	2101      	movs	r1, #1
 80161c0:	69b8      	ldr	r0, [r7, #24]
 80161c2:	f7ff fc29 	bl	8015a18 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 80161c6:	69b8      	ldr	r0, [r7, #24]
 80161c8:	f7f5 fc4c 	bl	800ba64 <pbuf_clen>
 80161cc:	4603      	mov	r3, r0
 80161ce:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80161d0:	8bfa      	ldrh	r2, [r7, #30]
 80161d2:	8a7b      	ldrh	r3, [r7, #18]
 80161d4:	4413      	add	r3, r2
 80161d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80161da:	db05      	blt.n	80161e8 <ip_reass_free_complete_datagram+0x98>
 80161dc:	4b27      	ldr	r3, [pc, #156]	; (801627c <ip_reass_free_complete_datagram+0x12c>)
 80161de:	22bc      	movs	r2, #188	; 0xbc
 80161e0:	492a      	ldr	r1, [pc, #168]	; (801628c <ip_reass_free_complete_datagram+0x13c>)
 80161e2:	4828      	ldr	r0, [pc, #160]	; (8016284 <ip_reass_free_complete_datagram+0x134>)
 80161e4:	f001 fa56 	bl	8017694 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80161e8:	8bfa      	ldrh	r2, [r7, #30]
 80161ea:	8a7b      	ldrh	r3, [r7, #18]
 80161ec:	4413      	add	r3, r2
 80161ee:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 80161f0:	69b8      	ldr	r0, [r7, #24]
 80161f2:	f7f5 fba9 	bl	800b948 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 80161f6:	687b      	ldr	r3, [r7, #4]
 80161f8:	685b      	ldr	r3, [r3, #4]
 80161fa:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 80161fc:	e01f      	b.n	801623e <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 80161fe:	69bb      	ldr	r3, [r7, #24]
 8016200:	685b      	ldr	r3, [r3, #4]
 8016202:	617b      	str	r3, [r7, #20]
    pcur = p;
 8016204:	69bb      	ldr	r3, [r7, #24]
 8016206:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8016208:	697b      	ldr	r3, [r7, #20]
 801620a:	681b      	ldr	r3, [r3, #0]
 801620c:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801620e:	68f8      	ldr	r0, [r7, #12]
 8016210:	f7f5 fc28 	bl	800ba64 <pbuf_clen>
 8016214:	4603      	mov	r3, r0
 8016216:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8016218:	8bfa      	ldrh	r2, [r7, #30]
 801621a:	8a7b      	ldrh	r3, [r7, #18]
 801621c:	4413      	add	r3, r2
 801621e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8016222:	db05      	blt.n	8016230 <ip_reass_free_complete_datagram+0xe0>
 8016224:	4b15      	ldr	r3, [pc, #84]	; (801627c <ip_reass_free_complete_datagram+0x12c>)
 8016226:	22cc      	movs	r2, #204	; 0xcc
 8016228:	4918      	ldr	r1, [pc, #96]	; (801628c <ip_reass_free_complete_datagram+0x13c>)
 801622a:	4816      	ldr	r0, [pc, #88]	; (8016284 <ip_reass_free_complete_datagram+0x134>)
 801622c:	f001 fa32 	bl	8017694 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8016230:	8bfa      	ldrh	r2, [r7, #30]
 8016232:	8a7b      	ldrh	r3, [r7, #18]
 8016234:	4413      	add	r3, r2
 8016236:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8016238:	68f8      	ldr	r0, [r7, #12]
 801623a:	f7f5 fb85 	bl	800b948 <pbuf_free>
  while (p != NULL) {
 801623e:	69bb      	ldr	r3, [r7, #24]
 8016240:	2b00      	cmp	r3, #0
 8016242:	d1dc      	bne.n	80161fe <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8016244:	6839      	ldr	r1, [r7, #0]
 8016246:	6878      	ldr	r0, [r7, #4]
 8016248:	f000 f8c2 	bl	80163d0 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 801624c:	4b10      	ldr	r3, [pc, #64]	; (8016290 <ip_reass_free_complete_datagram+0x140>)
 801624e:	881b      	ldrh	r3, [r3, #0]
 8016250:	8bfa      	ldrh	r2, [r7, #30]
 8016252:	429a      	cmp	r2, r3
 8016254:	d905      	bls.n	8016262 <ip_reass_free_complete_datagram+0x112>
 8016256:	4b09      	ldr	r3, [pc, #36]	; (801627c <ip_reass_free_complete_datagram+0x12c>)
 8016258:	22d2      	movs	r2, #210	; 0xd2
 801625a:	490e      	ldr	r1, [pc, #56]	; (8016294 <ip_reass_free_complete_datagram+0x144>)
 801625c:	4809      	ldr	r0, [pc, #36]	; (8016284 <ip_reass_free_complete_datagram+0x134>)
 801625e:	f001 fa19 	bl	8017694 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8016262:	4b0b      	ldr	r3, [pc, #44]	; (8016290 <ip_reass_free_complete_datagram+0x140>)
 8016264:	881a      	ldrh	r2, [r3, #0]
 8016266:	8bfb      	ldrh	r3, [r7, #30]
 8016268:	1ad3      	subs	r3, r2, r3
 801626a:	b29a      	uxth	r2, r3
 801626c:	4b08      	ldr	r3, [pc, #32]	; (8016290 <ip_reass_free_complete_datagram+0x140>)
 801626e:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8016270:	8bfb      	ldrh	r3, [r7, #30]
}
 8016272:	4618      	mov	r0, r3
 8016274:	3720      	adds	r7, #32
 8016276:	46bd      	mov	sp, r7
 8016278:	bd80      	pop	{r7, pc}
 801627a:	bf00      	nop
 801627c:	0801bb94 	.word	0x0801bb94
 8016280:	0801bbd0 	.word	0x0801bbd0
 8016284:	0801bbdc 	.word	0x0801bbdc
 8016288:	0801bc04 	.word	0x0801bc04
 801628c:	0801bc18 	.word	0x0801bc18
 8016290:	20010ac4 	.word	0x20010ac4
 8016294:	0801bc38 	.word	0x0801bc38

08016298 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8016298:	b580      	push	{r7, lr}
 801629a:	b08a      	sub	sp, #40	; 0x28
 801629c:	af00      	add	r7, sp, #0
 801629e:	6078      	str	r0, [r7, #4]
 80162a0:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 80162a2:	2300      	movs	r3, #0
 80162a4:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 80162a6:	2300      	movs	r3, #0
 80162a8:	623b      	str	r3, [r7, #32]
    prev = NULL;
 80162aa:	2300      	movs	r3, #0
 80162ac:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 80162ae:	2300      	movs	r3, #0
 80162b0:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 80162b2:	2300      	movs	r3, #0
 80162b4:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 80162b6:	4b28      	ldr	r3, [pc, #160]	; (8016358 <ip_reass_remove_oldest_datagram+0xc0>)
 80162b8:	681b      	ldr	r3, [r3, #0]
 80162ba:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80162bc:	e030      	b.n	8016320 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 80162be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80162c0:	695a      	ldr	r2, [r3, #20]
 80162c2:	687b      	ldr	r3, [r7, #4]
 80162c4:	68db      	ldr	r3, [r3, #12]
 80162c6:	429a      	cmp	r2, r3
 80162c8:	d10c      	bne.n	80162e4 <ip_reass_remove_oldest_datagram+0x4c>
 80162ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80162cc:	699a      	ldr	r2, [r3, #24]
 80162ce:	687b      	ldr	r3, [r7, #4]
 80162d0:	691b      	ldr	r3, [r3, #16]
 80162d2:	429a      	cmp	r2, r3
 80162d4:	d106      	bne.n	80162e4 <ip_reass_remove_oldest_datagram+0x4c>
 80162d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80162d8:	899a      	ldrh	r2, [r3, #12]
 80162da:	687b      	ldr	r3, [r7, #4]
 80162dc:	889b      	ldrh	r3, [r3, #4]
 80162de:	b29b      	uxth	r3, r3
 80162e0:	429a      	cmp	r2, r3
 80162e2:	d014      	beq.n	801630e <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 80162e4:	693b      	ldr	r3, [r7, #16]
 80162e6:	3301      	adds	r3, #1
 80162e8:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 80162ea:	6a3b      	ldr	r3, [r7, #32]
 80162ec:	2b00      	cmp	r3, #0
 80162ee:	d104      	bne.n	80162fa <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 80162f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80162f2:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80162f4:	69fb      	ldr	r3, [r7, #28]
 80162f6:	61bb      	str	r3, [r7, #24]
 80162f8:	e009      	b.n	801630e <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 80162fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80162fc:	7fda      	ldrb	r2, [r3, #31]
 80162fe:	6a3b      	ldr	r3, [r7, #32]
 8016300:	7fdb      	ldrb	r3, [r3, #31]
 8016302:	429a      	cmp	r2, r3
 8016304:	d803      	bhi.n	801630e <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8016306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016308:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801630a:	69fb      	ldr	r3, [r7, #28]
 801630c:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801630e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016310:	681b      	ldr	r3, [r3, #0]
 8016312:	2b00      	cmp	r3, #0
 8016314:	d001      	beq.n	801631a <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8016316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016318:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801631a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801631c:	681b      	ldr	r3, [r3, #0]
 801631e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8016320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016322:	2b00      	cmp	r3, #0
 8016324:	d1cb      	bne.n	80162be <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8016326:	6a3b      	ldr	r3, [r7, #32]
 8016328:	2b00      	cmp	r3, #0
 801632a:	d008      	beq.n	801633e <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 801632c:	69b9      	ldr	r1, [r7, #24]
 801632e:	6a38      	ldr	r0, [r7, #32]
 8016330:	f7ff ff0e 	bl	8016150 <ip_reass_free_complete_datagram>
 8016334:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8016336:	697a      	ldr	r2, [r7, #20]
 8016338:	68fb      	ldr	r3, [r7, #12]
 801633a:	4413      	add	r3, r2
 801633c:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801633e:	697a      	ldr	r2, [r7, #20]
 8016340:	683b      	ldr	r3, [r7, #0]
 8016342:	429a      	cmp	r2, r3
 8016344:	da02      	bge.n	801634c <ip_reass_remove_oldest_datagram+0xb4>
 8016346:	693b      	ldr	r3, [r7, #16]
 8016348:	2b01      	cmp	r3, #1
 801634a:	dcac      	bgt.n	80162a6 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 801634c:	697b      	ldr	r3, [r7, #20]
}
 801634e:	4618      	mov	r0, r3
 8016350:	3728      	adds	r7, #40	; 0x28
 8016352:	46bd      	mov	sp, r7
 8016354:	bd80      	pop	{r7, pc}
 8016356:	bf00      	nop
 8016358:	20010ac0 	.word	0x20010ac0

0801635c <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 801635c:	b580      	push	{r7, lr}
 801635e:	b084      	sub	sp, #16
 8016360:	af00      	add	r7, sp, #0
 8016362:	6078      	str	r0, [r7, #4]
 8016364:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8016366:	2004      	movs	r0, #4
 8016368:	f7f4 fbc8 	bl	800aafc <memp_malloc>
 801636c:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801636e:	68fb      	ldr	r3, [r7, #12]
 8016370:	2b00      	cmp	r3, #0
 8016372:	d110      	bne.n	8016396 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8016374:	6839      	ldr	r1, [r7, #0]
 8016376:	6878      	ldr	r0, [r7, #4]
 8016378:	f7ff ff8e 	bl	8016298 <ip_reass_remove_oldest_datagram>
 801637c:	4602      	mov	r2, r0
 801637e:	683b      	ldr	r3, [r7, #0]
 8016380:	4293      	cmp	r3, r2
 8016382:	dc03      	bgt.n	801638c <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8016384:	2004      	movs	r0, #4
 8016386:	f7f4 fbb9 	bl	800aafc <memp_malloc>
 801638a:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 801638c:	68fb      	ldr	r3, [r7, #12]
 801638e:	2b00      	cmp	r3, #0
 8016390:	d101      	bne.n	8016396 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8016392:	2300      	movs	r3, #0
 8016394:	e016      	b.n	80163c4 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8016396:	2220      	movs	r2, #32
 8016398:	2100      	movs	r1, #0
 801639a:	68f8      	ldr	r0, [r7, #12]
 801639c:	f001 f8dd 	bl	801755a <memset>
  ipr->timer = IP_REASS_MAXAGE;
 80163a0:	68fb      	ldr	r3, [r7, #12]
 80163a2:	220f      	movs	r2, #15
 80163a4:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 80163a6:	4b09      	ldr	r3, [pc, #36]	; (80163cc <ip_reass_enqueue_new_datagram+0x70>)
 80163a8:	681a      	ldr	r2, [r3, #0]
 80163aa:	68fb      	ldr	r3, [r7, #12]
 80163ac:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 80163ae:	4a07      	ldr	r2, [pc, #28]	; (80163cc <ip_reass_enqueue_new_datagram+0x70>)
 80163b0:	68fb      	ldr	r3, [r7, #12]
 80163b2:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 80163b4:	68fb      	ldr	r3, [r7, #12]
 80163b6:	3308      	adds	r3, #8
 80163b8:	2214      	movs	r2, #20
 80163ba:	6879      	ldr	r1, [r7, #4]
 80163bc:	4618      	mov	r0, r3
 80163be:	f001 f8be 	bl	801753e <memcpy>
  return ipr;
 80163c2:	68fb      	ldr	r3, [r7, #12]
}
 80163c4:	4618      	mov	r0, r3
 80163c6:	3710      	adds	r7, #16
 80163c8:	46bd      	mov	sp, r7
 80163ca:	bd80      	pop	{r7, pc}
 80163cc:	20010ac0 	.word	0x20010ac0

080163d0 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80163d0:	b580      	push	{r7, lr}
 80163d2:	b082      	sub	sp, #8
 80163d4:	af00      	add	r7, sp, #0
 80163d6:	6078      	str	r0, [r7, #4]
 80163d8:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 80163da:	4b10      	ldr	r3, [pc, #64]	; (801641c <ip_reass_dequeue_datagram+0x4c>)
 80163dc:	681b      	ldr	r3, [r3, #0]
 80163de:	687a      	ldr	r2, [r7, #4]
 80163e0:	429a      	cmp	r2, r3
 80163e2:	d104      	bne.n	80163ee <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 80163e4:	687b      	ldr	r3, [r7, #4]
 80163e6:	681b      	ldr	r3, [r3, #0]
 80163e8:	4a0c      	ldr	r2, [pc, #48]	; (801641c <ip_reass_dequeue_datagram+0x4c>)
 80163ea:	6013      	str	r3, [r2, #0]
 80163ec:	e00d      	b.n	801640a <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 80163ee:	683b      	ldr	r3, [r7, #0]
 80163f0:	2b00      	cmp	r3, #0
 80163f2:	d106      	bne.n	8016402 <ip_reass_dequeue_datagram+0x32>
 80163f4:	4b0a      	ldr	r3, [pc, #40]	; (8016420 <ip_reass_dequeue_datagram+0x50>)
 80163f6:	f240 1245 	movw	r2, #325	; 0x145
 80163fa:	490a      	ldr	r1, [pc, #40]	; (8016424 <ip_reass_dequeue_datagram+0x54>)
 80163fc:	480a      	ldr	r0, [pc, #40]	; (8016428 <ip_reass_dequeue_datagram+0x58>)
 80163fe:	f001 f949 	bl	8017694 <iprintf>
    prev->next = ipr->next;
 8016402:	687b      	ldr	r3, [r7, #4]
 8016404:	681a      	ldr	r2, [r3, #0]
 8016406:	683b      	ldr	r3, [r7, #0]
 8016408:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801640a:	6879      	ldr	r1, [r7, #4]
 801640c:	2004      	movs	r0, #4
 801640e:	f7f4 fbeb 	bl	800abe8 <memp_free>
}
 8016412:	bf00      	nop
 8016414:	3708      	adds	r7, #8
 8016416:	46bd      	mov	sp, r7
 8016418:	bd80      	pop	{r7, pc}
 801641a:	bf00      	nop
 801641c:	20010ac0 	.word	0x20010ac0
 8016420:	0801bb94 	.word	0x0801bb94
 8016424:	0801bc5c 	.word	0x0801bc5c
 8016428:	0801bbdc 	.word	0x0801bbdc

0801642c <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 801642c:	b580      	push	{r7, lr}
 801642e:	b08c      	sub	sp, #48	; 0x30
 8016430:	af00      	add	r7, sp, #0
 8016432:	60f8      	str	r0, [r7, #12]
 8016434:	60b9      	str	r1, [r7, #8]
 8016436:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8016438:	2300      	movs	r3, #0
 801643a:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 801643c:	2301      	movs	r3, #1
 801643e:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8016440:	68bb      	ldr	r3, [r7, #8]
 8016442:	685b      	ldr	r3, [r3, #4]
 8016444:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8016446:	69fb      	ldr	r3, [r7, #28]
 8016448:	885b      	ldrh	r3, [r3, #2]
 801644a:	b29b      	uxth	r3, r3
 801644c:	4618      	mov	r0, r3
 801644e:	f7f3 fe7d 	bl	800a14c <lwip_htons>
 8016452:	4603      	mov	r3, r0
 8016454:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8016456:	69fb      	ldr	r3, [r7, #28]
 8016458:	781b      	ldrb	r3, [r3, #0]
 801645a:	f003 030f 	and.w	r3, r3, #15
 801645e:	b2db      	uxtb	r3, r3
 8016460:	009b      	lsls	r3, r3, #2
 8016462:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8016464:	7e7b      	ldrb	r3, [r7, #25]
 8016466:	b29b      	uxth	r3, r3
 8016468:	8b7a      	ldrh	r2, [r7, #26]
 801646a:	429a      	cmp	r2, r3
 801646c:	d202      	bcs.n	8016474 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801646e:	f04f 33ff 	mov.w	r3, #4294967295
 8016472:	e135      	b.n	80166e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8016474:	7e7b      	ldrb	r3, [r7, #25]
 8016476:	b29b      	uxth	r3, r3
 8016478:	8b7a      	ldrh	r2, [r7, #26]
 801647a:	1ad3      	subs	r3, r2, r3
 801647c:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801647e:	69fb      	ldr	r3, [r7, #28]
 8016480:	88db      	ldrh	r3, [r3, #6]
 8016482:	b29b      	uxth	r3, r3
 8016484:	4618      	mov	r0, r3
 8016486:	f7f3 fe61 	bl	800a14c <lwip_htons>
 801648a:	4603      	mov	r3, r0
 801648c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016490:	b29b      	uxth	r3, r3
 8016492:	00db      	lsls	r3, r3, #3
 8016494:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8016496:	68bb      	ldr	r3, [r7, #8]
 8016498:	685b      	ldr	r3, [r3, #4]
 801649a:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 801649c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801649e:	2200      	movs	r2, #0
 80164a0:	701a      	strb	r2, [r3, #0]
 80164a2:	2200      	movs	r2, #0
 80164a4:	705a      	strb	r2, [r3, #1]
 80164a6:	2200      	movs	r2, #0
 80164a8:	709a      	strb	r2, [r3, #2]
 80164aa:	2200      	movs	r2, #0
 80164ac:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 80164ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80164b0:	8afa      	ldrh	r2, [r7, #22]
 80164b2:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 80164b4:	8afa      	ldrh	r2, [r7, #22]
 80164b6:	8b7b      	ldrh	r3, [r7, #26]
 80164b8:	4413      	add	r3, r2
 80164ba:	b29a      	uxth	r2, r3
 80164bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80164be:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 80164c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80164c2:	88db      	ldrh	r3, [r3, #6]
 80164c4:	b29b      	uxth	r3, r3
 80164c6:	8afa      	ldrh	r2, [r7, #22]
 80164c8:	429a      	cmp	r2, r3
 80164ca:	d902      	bls.n	80164d2 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80164cc:	f04f 33ff 	mov.w	r3, #4294967295
 80164d0:	e106      	b.n	80166e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 80164d2:	68fb      	ldr	r3, [r7, #12]
 80164d4:	685b      	ldr	r3, [r3, #4]
 80164d6:	627b      	str	r3, [r7, #36]	; 0x24
 80164d8:	e068      	b.n	80165ac <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 80164da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80164dc:	685b      	ldr	r3, [r3, #4]
 80164de:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 80164e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80164e2:	889b      	ldrh	r3, [r3, #4]
 80164e4:	b29a      	uxth	r2, r3
 80164e6:	693b      	ldr	r3, [r7, #16]
 80164e8:	889b      	ldrh	r3, [r3, #4]
 80164ea:	b29b      	uxth	r3, r3
 80164ec:	429a      	cmp	r2, r3
 80164ee:	d235      	bcs.n	801655c <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 80164f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80164f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80164f4:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 80164f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80164f8:	2b00      	cmp	r3, #0
 80164fa:	d020      	beq.n	801653e <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 80164fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80164fe:	889b      	ldrh	r3, [r3, #4]
 8016500:	b29a      	uxth	r2, r3
 8016502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016504:	88db      	ldrh	r3, [r3, #6]
 8016506:	b29b      	uxth	r3, r3
 8016508:	429a      	cmp	r2, r3
 801650a:	d307      	bcc.n	801651c <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 801650c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801650e:	88db      	ldrh	r3, [r3, #6]
 8016510:	b29a      	uxth	r2, r3
 8016512:	693b      	ldr	r3, [r7, #16]
 8016514:	889b      	ldrh	r3, [r3, #4]
 8016516:	b29b      	uxth	r3, r3
 8016518:	429a      	cmp	r2, r3
 801651a:	d902      	bls.n	8016522 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801651c:	f04f 33ff 	mov.w	r3, #4294967295
 8016520:	e0de      	b.n	80166e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8016522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016524:	68ba      	ldr	r2, [r7, #8]
 8016526:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8016528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801652a:	88db      	ldrh	r3, [r3, #6]
 801652c:	b29a      	uxth	r2, r3
 801652e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016530:	889b      	ldrh	r3, [r3, #4]
 8016532:	b29b      	uxth	r3, r3
 8016534:	429a      	cmp	r2, r3
 8016536:	d03d      	beq.n	80165b4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8016538:	2300      	movs	r3, #0
 801653a:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 801653c:	e03a      	b.n	80165b4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801653e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016540:	88db      	ldrh	r3, [r3, #6]
 8016542:	b29a      	uxth	r2, r3
 8016544:	693b      	ldr	r3, [r7, #16]
 8016546:	889b      	ldrh	r3, [r3, #4]
 8016548:	b29b      	uxth	r3, r3
 801654a:	429a      	cmp	r2, r3
 801654c:	d902      	bls.n	8016554 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801654e:	f04f 33ff 	mov.w	r3, #4294967295
 8016552:	e0c5      	b.n	80166e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8016554:	68fb      	ldr	r3, [r7, #12]
 8016556:	68ba      	ldr	r2, [r7, #8]
 8016558:	605a      	str	r2, [r3, #4]
      break;
 801655a:	e02b      	b.n	80165b4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 801655c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801655e:	889b      	ldrh	r3, [r3, #4]
 8016560:	b29a      	uxth	r2, r3
 8016562:	693b      	ldr	r3, [r7, #16]
 8016564:	889b      	ldrh	r3, [r3, #4]
 8016566:	b29b      	uxth	r3, r3
 8016568:	429a      	cmp	r2, r3
 801656a:	d102      	bne.n	8016572 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801656c:	f04f 33ff 	mov.w	r3, #4294967295
 8016570:	e0b6      	b.n	80166e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8016572:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016574:	889b      	ldrh	r3, [r3, #4]
 8016576:	b29a      	uxth	r2, r3
 8016578:	693b      	ldr	r3, [r7, #16]
 801657a:	88db      	ldrh	r3, [r3, #6]
 801657c:	b29b      	uxth	r3, r3
 801657e:	429a      	cmp	r2, r3
 8016580:	d202      	bcs.n	8016588 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016582:	f04f 33ff 	mov.w	r3, #4294967295
 8016586:	e0ab      	b.n	80166e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8016588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801658a:	2b00      	cmp	r3, #0
 801658c:	d009      	beq.n	80165a2 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801658e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016590:	88db      	ldrh	r3, [r3, #6]
 8016592:	b29a      	uxth	r2, r3
 8016594:	693b      	ldr	r3, [r7, #16]
 8016596:	889b      	ldrh	r3, [r3, #4]
 8016598:	b29b      	uxth	r3, r3
 801659a:	429a      	cmp	r2, r3
 801659c:	d001      	beq.n	80165a2 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801659e:	2300      	movs	r3, #0
 80165a0:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 80165a2:	693b      	ldr	r3, [r7, #16]
 80165a4:	681b      	ldr	r3, [r3, #0]
 80165a6:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 80165a8:	693b      	ldr	r3, [r7, #16]
 80165aa:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 80165ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80165ae:	2b00      	cmp	r3, #0
 80165b0:	d193      	bne.n	80164da <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 80165b2:	e000      	b.n	80165b6 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 80165b4:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 80165b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80165b8:	2b00      	cmp	r3, #0
 80165ba:	d12d      	bne.n	8016618 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 80165bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80165be:	2b00      	cmp	r3, #0
 80165c0:	d01c      	beq.n	80165fc <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 80165c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80165c4:	88db      	ldrh	r3, [r3, #6]
 80165c6:	b29a      	uxth	r2, r3
 80165c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80165ca:	889b      	ldrh	r3, [r3, #4]
 80165cc:	b29b      	uxth	r3, r3
 80165ce:	429a      	cmp	r2, r3
 80165d0:	d906      	bls.n	80165e0 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 80165d2:	4b45      	ldr	r3, [pc, #276]	; (80166e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80165d4:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 80165d8:	4944      	ldr	r1, [pc, #272]	; (80166ec <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 80165da:	4845      	ldr	r0, [pc, #276]	; (80166f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80165dc:	f001 f85a 	bl	8017694 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 80165e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80165e2:	68ba      	ldr	r2, [r7, #8]
 80165e4:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 80165e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80165e8:	88db      	ldrh	r3, [r3, #6]
 80165ea:	b29a      	uxth	r2, r3
 80165ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80165ee:	889b      	ldrh	r3, [r3, #4]
 80165f0:	b29b      	uxth	r3, r3
 80165f2:	429a      	cmp	r2, r3
 80165f4:	d010      	beq.n	8016618 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 80165f6:	2300      	movs	r3, #0
 80165f8:	623b      	str	r3, [r7, #32]
 80165fa:	e00d      	b.n	8016618 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 80165fc:	68fb      	ldr	r3, [r7, #12]
 80165fe:	685b      	ldr	r3, [r3, #4]
 8016600:	2b00      	cmp	r3, #0
 8016602:	d006      	beq.n	8016612 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8016604:	4b38      	ldr	r3, [pc, #224]	; (80166e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8016606:	f44f 72df 	mov.w	r2, #446	; 0x1be
 801660a:	493a      	ldr	r1, [pc, #232]	; (80166f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 801660c:	4838      	ldr	r0, [pc, #224]	; (80166f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801660e:	f001 f841 	bl	8017694 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8016612:	68fb      	ldr	r3, [r7, #12]
 8016614:	68ba      	ldr	r2, [r7, #8]
 8016616:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8016618:	687b      	ldr	r3, [r7, #4]
 801661a:	2b00      	cmp	r3, #0
 801661c:	d105      	bne.n	801662a <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801661e:	68fb      	ldr	r3, [r7, #12]
 8016620:	7f9b      	ldrb	r3, [r3, #30]
 8016622:	f003 0301 	and.w	r3, r3, #1
 8016626:	2b00      	cmp	r3, #0
 8016628:	d059      	beq.n	80166de <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801662a:	6a3b      	ldr	r3, [r7, #32]
 801662c:	2b00      	cmp	r3, #0
 801662e:	d04f      	beq.n	80166d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8016630:	68fb      	ldr	r3, [r7, #12]
 8016632:	685b      	ldr	r3, [r3, #4]
 8016634:	2b00      	cmp	r3, #0
 8016636:	d006      	beq.n	8016646 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8016638:	68fb      	ldr	r3, [r7, #12]
 801663a:	685b      	ldr	r3, [r3, #4]
 801663c:	685b      	ldr	r3, [r3, #4]
 801663e:	889b      	ldrh	r3, [r3, #4]
 8016640:	b29b      	uxth	r3, r3
 8016642:	2b00      	cmp	r3, #0
 8016644:	d002      	beq.n	801664c <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8016646:	2300      	movs	r3, #0
 8016648:	623b      	str	r3, [r7, #32]
 801664a:	e041      	b.n	80166d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 801664c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801664e:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8016650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016652:	681b      	ldr	r3, [r3, #0]
 8016654:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8016656:	e012      	b.n	801667e <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8016658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801665a:	685b      	ldr	r3, [r3, #4]
 801665c:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 801665e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016660:	88db      	ldrh	r3, [r3, #6]
 8016662:	b29a      	uxth	r2, r3
 8016664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016666:	889b      	ldrh	r3, [r3, #4]
 8016668:	b29b      	uxth	r3, r3
 801666a:	429a      	cmp	r2, r3
 801666c:	d002      	beq.n	8016674 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801666e:	2300      	movs	r3, #0
 8016670:	623b      	str	r3, [r7, #32]
            break;
 8016672:	e007      	b.n	8016684 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8016674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016676:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8016678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801667a:	681b      	ldr	r3, [r3, #0]
 801667c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801667e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016680:	2b00      	cmp	r3, #0
 8016682:	d1e9      	bne.n	8016658 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8016684:	6a3b      	ldr	r3, [r7, #32]
 8016686:	2b00      	cmp	r3, #0
 8016688:	d022      	beq.n	80166d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801668a:	68fb      	ldr	r3, [r7, #12]
 801668c:	685b      	ldr	r3, [r3, #4]
 801668e:	2b00      	cmp	r3, #0
 8016690:	d106      	bne.n	80166a0 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8016692:	4b15      	ldr	r3, [pc, #84]	; (80166e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8016694:	f240 12df 	movw	r2, #479	; 0x1df
 8016698:	4917      	ldr	r1, [pc, #92]	; (80166f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801669a:	4815      	ldr	r0, [pc, #84]	; (80166f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801669c:	f000 fffa 	bl	8017694 <iprintf>
          LWIP_ASSERT("sanity check",
 80166a0:	68fb      	ldr	r3, [r7, #12]
 80166a2:	685b      	ldr	r3, [r3, #4]
 80166a4:	685b      	ldr	r3, [r3, #4]
 80166a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80166a8:	429a      	cmp	r2, r3
 80166aa:	d106      	bne.n	80166ba <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 80166ac:	4b0e      	ldr	r3, [pc, #56]	; (80166e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80166ae:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80166b2:	4911      	ldr	r1, [pc, #68]	; (80166f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80166b4:	480e      	ldr	r0, [pc, #56]	; (80166f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80166b6:	f000 ffed 	bl	8017694 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 80166ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80166bc:	681b      	ldr	r3, [r3, #0]
 80166be:	2b00      	cmp	r3, #0
 80166c0:	d006      	beq.n	80166d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 80166c2:	4b09      	ldr	r3, [pc, #36]	; (80166e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80166c4:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 80166c8:	490c      	ldr	r1, [pc, #48]	; (80166fc <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 80166ca:	4809      	ldr	r0, [pc, #36]	; (80166f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80166cc:	f000 ffe2 	bl	8017694 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 80166d0:	6a3b      	ldr	r3, [r7, #32]
 80166d2:	2b00      	cmp	r3, #0
 80166d4:	bf14      	ite	ne
 80166d6:	2301      	movne	r3, #1
 80166d8:	2300      	moveq	r3, #0
 80166da:	b2db      	uxtb	r3, r3
 80166dc:	e000      	b.n	80166e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 80166de:	2300      	movs	r3, #0
}
 80166e0:	4618      	mov	r0, r3
 80166e2:	3730      	adds	r7, #48	; 0x30
 80166e4:	46bd      	mov	sp, r7
 80166e6:	bd80      	pop	{r7, pc}
 80166e8:	0801bb94 	.word	0x0801bb94
 80166ec:	0801bc78 	.word	0x0801bc78
 80166f0:	0801bbdc 	.word	0x0801bbdc
 80166f4:	0801bc98 	.word	0x0801bc98
 80166f8:	0801bcd0 	.word	0x0801bcd0
 80166fc:	0801bce0 	.word	0x0801bce0

08016700 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8016700:	b580      	push	{r7, lr}
 8016702:	b08e      	sub	sp, #56	; 0x38
 8016704:	af00      	add	r7, sp, #0
 8016706:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8016708:	687b      	ldr	r3, [r7, #4]
 801670a:	685b      	ldr	r3, [r3, #4]
 801670c:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801670e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016710:	781b      	ldrb	r3, [r3, #0]
 8016712:	f003 030f 	and.w	r3, r3, #15
 8016716:	b2db      	uxtb	r3, r3
 8016718:	009b      	lsls	r3, r3, #2
 801671a:	b2db      	uxtb	r3, r3
 801671c:	2b14      	cmp	r3, #20
 801671e:	f040 8171 	bne.w	8016a04 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8016722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016724:	88db      	ldrh	r3, [r3, #6]
 8016726:	b29b      	uxth	r3, r3
 8016728:	4618      	mov	r0, r3
 801672a:	f7f3 fd0f 	bl	800a14c <lwip_htons>
 801672e:	4603      	mov	r3, r0
 8016730:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016734:	b29b      	uxth	r3, r3
 8016736:	00db      	lsls	r3, r3, #3
 8016738:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801673a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801673c:	885b      	ldrh	r3, [r3, #2]
 801673e:	b29b      	uxth	r3, r3
 8016740:	4618      	mov	r0, r3
 8016742:	f7f3 fd03 	bl	800a14c <lwip_htons>
 8016746:	4603      	mov	r3, r0
 8016748:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801674a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801674c:	781b      	ldrb	r3, [r3, #0]
 801674e:	f003 030f 	and.w	r3, r3, #15
 8016752:	b2db      	uxtb	r3, r3
 8016754:	009b      	lsls	r3, r3, #2
 8016756:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 801675a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801675e:	b29b      	uxth	r3, r3
 8016760:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8016762:	429a      	cmp	r2, r3
 8016764:	f0c0 8150 	bcc.w	8016a08 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8016768:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801676c:	b29b      	uxth	r3, r3
 801676e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8016770:	1ad3      	subs	r3, r2, r3
 8016772:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8016774:	6878      	ldr	r0, [r7, #4]
 8016776:	f7f5 f975 	bl	800ba64 <pbuf_clen>
 801677a:	4603      	mov	r3, r0
 801677c:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801677e:	4b8c      	ldr	r3, [pc, #560]	; (80169b0 <ip4_reass+0x2b0>)
 8016780:	881b      	ldrh	r3, [r3, #0]
 8016782:	461a      	mov	r2, r3
 8016784:	8c3b      	ldrh	r3, [r7, #32]
 8016786:	4413      	add	r3, r2
 8016788:	2b0a      	cmp	r3, #10
 801678a:	dd10      	ble.n	80167ae <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801678c:	8c3b      	ldrh	r3, [r7, #32]
 801678e:	4619      	mov	r1, r3
 8016790:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016792:	f7ff fd81 	bl	8016298 <ip_reass_remove_oldest_datagram>
 8016796:	4603      	mov	r3, r0
 8016798:	2b00      	cmp	r3, #0
 801679a:	f000 8137 	beq.w	8016a0c <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801679e:	4b84      	ldr	r3, [pc, #528]	; (80169b0 <ip4_reass+0x2b0>)
 80167a0:	881b      	ldrh	r3, [r3, #0]
 80167a2:	461a      	mov	r2, r3
 80167a4:	8c3b      	ldrh	r3, [r7, #32]
 80167a6:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80167a8:	2b0a      	cmp	r3, #10
 80167aa:	f300 812f 	bgt.w	8016a0c <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80167ae:	4b81      	ldr	r3, [pc, #516]	; (80169b4 <ip4_reass+0x2b4>)
 80167b0:	681b      	ldr	r3, [r3, #0]
 80167b2:	633b      	str	r3, [r7, #48]	; 0x30
 80167b4:	e015      	b.n	80167e2 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 80167b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80167b8:	695a      	ldr	r2, [r3, #20]
 80167ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80167bc:	68db      	ldr	r3, [r3, #12]
 80167be:	429a      	cmp	r2, r3
 80167c0:	d10c      	bne.n	80167dc <ip4_reass+0xdc>
 80167c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80167c4:	699a      	ldr	r2, [r3, #24]
 80167c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80167c8:	691b      	ldr	r3, [r3, #16]
 80167ca:	429a      	cmp	r2, r3
 80167cc:	d106      	bne.n	80167dc <ip4_reass+0xdc>
 80167ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80167d0:	899a      	ldrh	r2, [r3, #12]
 80167d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80167d4:	889b      	ldrh	r3, [r3, #4]
 80167d6:	b29b      	uxth	r3, r3
 80167d8:	429a      	cmp	r2, r3
 80167da:	d006      	beq.n	80167ea <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80167dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80167de:	681b      	ldr	r3, [r3, #0]
 80167e0:	633b      	str	r3, [r7, #48]	; 0x30
 80167e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80167e4:	2b00      	cmp	r3, #0
 80167e6:	d1e6      	bne.n	80167b6 <ip4_reass+0xb6>
 80167e8:	e000      	b.n	80167ec <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 80167ea:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 80167ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80167ee:	2b00      	cmp	r3, #0
 80167f0:	d109      	bne.n	8016806 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 80167f2:	8c3b      	ldrh	r3, [r7, #32]
 80167f4:	4619      	mov	r1, r3
 80167f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80167f8:	f7ff fdb0 	bl	801635c <ip_reass_enqueue_new_datagram>
 80167fc:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 80167fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016800:	2b00      	cmp	r3, #0
 8016802:	d11c      	bne.n	801683e <ip4_reass+0x13e>
      goto nullreturn;
 8016804:	e105      	b.n	8016a12 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8016806:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016808:	88db      	ldrh	r3, [r3, #6]
 801680a:	b29b      	uxth	r3, r3
 801680c:	4618      	mov	r0, r3
 801680e:	f7f3 fc9d 	bl	800a14c <lwip_htons>
 8016812:	4603      	mov	r3, r0
 8016814:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016818:	2b00      	cmp	r3, #0
 801681a:	d110      	bne.n	801683e <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801681c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801681e:	89db      	ldrh	r3, [r3, #14]
 8016820:	4618      	mov	r0, r3
 8016822:	f7f3 fc93 	bl	800a14c <lwip_htons>
 8016826:	4603      	mov	r3, r0
 8016828:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801682c:	2b00      	cmp	r3, #0
 801682e:	d006      	beq.n	801683e <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8016830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016832:	3308      	adds	r3, #8
 8016834:	2214      	movs	r2, #20
 8016836:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8016838:	4618      	mov	r0, r3
 801683a:	f000 fe80 	bl	801753e <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801683e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016840:	88db      	ldrh	r3, [r3, #6]
 8016842:	b29b      	uxth	r3, r3
 8016844:	f003 0320 	and.w	r3, r3, #32
 8016848:	2b00      	cmp	r3, #0
 801684a:	bf0c      	ite	eq
 801684c:	2301      	moveq	r3, #1
 801684e:	2300      	movne	r3, #0
 8016850:	b2db      	uxtb	r3, r3
 8016852:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8016854:	69fb      	ldr	r3, [r7, #28]
 8016856:	2b00      	cmp	r3, #0
 8016858:	d00e      	beq.n	8016878 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801685a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801685c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801685e:	4413      	add	r3, r2
 8016860:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8016862:	8b7a      	ldrh	r2, [r7, #26]
 8016864:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8016866:	429a      	cmp	r2, r3
 8016868:	f0c0 80a0 	bcc.w	80169ac <ip4_reass+0x2ac>
 801686c:	8b7b      	ldrh	r3, [r7, #26]
 801686e:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8016872:	4293      	cmp	r3, r2
 8016874:	f200 809a 	bhi.w	80169ac <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8016878:	69fa      	ldr	r2, [r7, #28]
 801687a:	6879      	ldr	r1, [r7, #4]
 801687c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801687e:	f7ff fdd5 	bl	801642c <ip_reass_chain_frag_into_datagram_and_validate>
 8016882:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8016884:	697b      	ldr	r3, [r7, #20]
 8016886:	f1b3 3fff 	cmp.w	r3, #4294967295
 801688a:	f000 809b 	beq.w	80169c4 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801688e:	4b48      	ldr	r3, [pc, #288]	; (80169b0 <ip4_reass+0x2b0>)
 8016890:	881a      	ldrh	r2, [r3, #0]
 8016892:	8c3b      	ldrh	r3, [r7, #32]
 8016894:	4413      	add	r3, r2
 8016896:	b29a      	uxth	r2, r3
 8016898:	4b45      	ldr	r3, [pc, #276]	; (80169b0 <ip4_reass+0x2b0>)
 801689a:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801689c:	69fb      	ldr	r3, [r7, #28]
 801689e:	2b00      	cmp	r3, #0
 80168a0:	d00d      	beq.n	80168be <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 80168a2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80168a4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80168a6:	4413      	add	r3, r2
 80168a8:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 80168aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80168ac:	8a7a      	ldrh	r2, [r7, #18]
 80168ae:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80168b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80168b2:	7f9b      	ldrb	r3, [r3, #30]
 80168b4:	f043 0301 	orr.w	r3, r3, #1
 80168b8:	b2da      	uxtb	r2, r3
 80168ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80168bc:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 80168be:	697b      	ldr	r3, [r7, #20]
 80168c0:	2b01      	cmp	r3, #1
 80168c2:	d171      	bne.n	80169a8 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 80168c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80168c6:	8b9b      	ldrh	r3, [r3, #28]
 80168c8:	3314      	adds	r3, #20
 80168ca:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 80168cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80168ce:	685b      	ldr	r3, [r3, #4]
 80168d0:	685b      	ldr	r3, [r3, #4]
 80168d2:	681b      	ldr	r3, [r3, #0]
 80168d4:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 80168d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80168d8:	685b      	ldr	r3, [r3, #4]
 80168da:	685b      	ldr	r3, [r3, #4]
 80168dc:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80168de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80168e0:	3308      	adds	r3, #8
 80168e2:	2214      	movs	r2, #20
 80168e4:	4619      	mov	r1, r3
 80168e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80168e8:	f000 fe29 	bl	801753e <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 80168ec:	8a3b      	ldrh	r3, [r7, #16]
 80168ee:	4618      	mov	r0, r3
 80168f0:	f7f3 fc2c 	bl	800a14c <lwip_htons>
 80168f4:	4603      	mov	r3, r0
 80168f6:	461a      	mov	r2, r3
 80168f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80168fa:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 80168fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80168fe:	2200      	movs	r2, #0
 8016900:	719a      	strb	r2, [r3, #6]
 8016902:	2200      	movs	r2, #0
 8016904:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8016906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016908:	2200      	movs	r2, #0
 801690a:	729a      	strb	r2, [r3, #10]
 801690c:	2200      	movs	r2, #0
 801690e:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8016910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016912:	685b      	ldr	r3, [r3, #4]
 8016914:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8016916:	e00d      	b.n	8016934 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8016918:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801691a:	685b      	ldr	r3, [r3, #4]
 801691c:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801691e:	2114      	movs	r1, #20
 8016920:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8016922:	f7f4 ff8b 	bl	800b83c <pbuf_remove_header>
      pbuf_cat(p, r);
 8016926:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8016928:	6878      	ldr	r0, [r7, #4]
 801692a:	f7f5 f8db 	bl	800bae4 <pbuf_cat>
      r = iprh->next_pbuf;
 801692e:	68fb      	ldr	r3, [r7, #12]
 8016930:	681b      	ldr	r3, [r3, #0]
 8016932:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8016934:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016936:	2b00      	cmp	r3, #0
 8016938:	d1ee      	bne.n	8016918 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801693a:	4b1e      	ldr	r3, [pc, #120]	; (80169b4 <ip4_reass+0x2b4>)
 801693c:	681b      	ldr	r3, [r3, #0]
 801693e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016940:	429a      	cmp	r2, r3
 8016942:	d102      	bne.n	801694a <ip4_reass+0x24a>
      ipr_prev = NULL;
 8016944:	2300      	movs	r3, #0
 8016946:	62fb      	str	r3, [r7, #44]	; 0x2c
 8016948:	e010      	b.n	801696c <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801694a:	4b1a      	ldr	r3, [pc, #104]	; (80169b4 <ip4_reass+0x2b4>)
 801694c:	681b      	ldr	r3, [r3, #0]
 801694e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8016950:	e007      	b.n	8016962 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8016952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016954:	681b      	ldr	r3, [r3, #0]
 8016956:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016958:	429a      	cmp	r2, r3
 801695a:	d006      	beq.n	801696a <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801695c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801695e:	681b      	ldr	r3, [r3, #0]
 8016960:	62fb      	str	r3, [r7, #44]	; 0x2c
 8016962:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016964:	2b00      	cmp	r3, #0
 8016966:	d1f4      	bne.n	8016952 <ip4_reass+0x252>
 8016968:	e000      	b.n	801696c <ip4_reass+0x26c>
          break;
 801696a:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 801696c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801696e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016970:	f7ff fd2e 	bl	80163d0 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8016974:	6878      	ldr	r0, [r7, #4]
 8016976:	f7f5 f875 	bl	800ba64 <pbuf_clen>
 801697a:	4603      	mov	r3, r0
 801697c:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801697e:	4b0c      	ldr	r3, [pc, #48]	; (80169b0 <ip4_reass+0x2b0>)
 8016980:	881b      	ldrh	r3, [r3, #0]
 8016982:	8c3a      	ldrh	r2, [r7, #32]
 8016984:	429a      	cmp	r2, r3
 8016986:	d906      	bls.n	8016996 <ip4_reass+0x296>
 8016988:	4b0b      	ldr	r3, [pc, #44]	; (80169b8 <ip4_reass+0x2b8>)
 801698a:	f240 229b 	movw	r2, #667	; 0x29b
 801698e:	490b      	ldr	r1, [pc, #44]	; (80169bc <ip4_reass+0x2bc>)
 8016990:	480b      	ldr	r0, [pc, #44]	; (80169c0 <ip4_reass+0x2c0>)
 8016992:	f000 fe7f 	bl	8017694 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8016996:	4b06      	ldr	r3, [pc, #24]	; (80169b0 <ip4_reass+0x2b0>)
 8016998:	881a      	ldrh	r2, [r3, #0]
 801699a:	8c3b      	ldrh	r3, [r7, #32]
 801699c:	1ad3      	subs	r3, r2, r3
 801699e:	b29a      	uxth	r2, r3
 80169a0:	4b03      	ldr	r3, [pc, #12]	; (80169b0 <ip4_reass+0x2b0>)
 80169a2:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 80169a4:	687b      	ldr	r3, [r7, #4]
 80169a6:	e038      	b.n	8016a1a <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 80169a8:	2300      	movs	r3, #0
 80169aa:	e036      	b.n	8016a1a <ip4_reass+0x31a>
      goto nullreturn_ipr;
 80169ac:	bf00      	nop
 80169ae:	e00a      	b.n	80169c6 <ip4_reass+0x2c6>
 80169b0:	20010ac4 	.word	0x20010ac4
 80169b4:	20010ac0 	.word	0x20010ac0
 80169b8:	0801bb94 	.word	0x0801bb94
 80169bc:	0801bd04 	.word	0x0801bd04
 80169c0:	0801bbdc 	.word	0x0801bbdc
    goto nullreturn_ipr;
 80169c4:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 80169c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80169c8:	2b00      	cmp	r3, #0
 80169ca:	d106      	bne.n	80169da <ip4_reass+0x2da>
 80169cc:	4b15      	ldr	r3, [pc, #84]	; (8016a24 <ip4_reass+0x324>)
 80169ce:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 80169d2:	4915      	ldr	r1, [pc, #84]	; (8016a28 <ip4_reass+0x328>)
 80169d4:	4815      	ldr	r0, [pc, #84]	; (8016a2c <ip4_reass+0x32c>)
 80169d6:	f000 fe5d 	bl	8017694 <iprintf>
  if (ipr->p == NULL) {
 80169da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80169dc:	685b      	ldr	r3, [r3, #4]
 80169de:	2b00      	cmp	r3, #0
 80169e0:	d116      	bne.n	8016a10 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 80169e2:	4b13      	ldr	r3, [pc, #76]	; (8016a30 <ip4_reass+0x330>)
 80169e4:	681b      	ldr	r3, [r3, #0]
 80169e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80169e8:	429a      	cmp	r2, r3
 80169ea:	d006      	beq.n	80169fa <ip4_reass+0x2fa>
 80169ec:	4b0d      	ldr	r3, [pc, #52]	; (8016a24 <ip4_reass+0x324>)
 80169ee:	f240 22ab 	movw	r2, #683	; 0x2ab
 80169f2:	4910      	ldr	r1, [pc, #64]	; (8016a34 <ip4_reass+0x334>)
 80169f4:	480d      	ldr	r0, [pc, #52]	; (8016a2c <ip4_reass+0x32c>)
 80169f6:	f000 fe4d 	bl	8017694 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 80169fa:	2100      	movs	r1, #0
 80169fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80169fe:	f7ff fce7 	bl	80163d0 <ip_reass_dequeue_datagram>
 8016a02:	e006      	b.n	8016a12 <ip4_reass+0x312>
    goto nullreturn;
 8016a04:	bf00      	nop
 8016a06:	e004      	b.n	8016a12 <ip4_reass+0x312>
    goto nullreturn;
 8016a08:	bf00      	nop
 8016a0a:	e002      	b.n	8016a12 <ip4_reass+0x312>
      goto nullreturn;
 8016a0c:	bf00      	nop
 8016a0e:	e000      	b.n	8016a12 <ip4_reass+0x312>
  }

nullreturn:
 8016a10:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8016a12:	6878      	ldr	r0, [r7, #4]
 8016a14:	f7f4 ff98 	bl	800b948 <pbuf_free>
  return NULL;
 8016a18:	2300      	movs	r3, #0
}
 8016a1a:	4618      	mov	r0, r3
 8016a1c:	3738      	adds	r7, #56	; 0x38
 8016a1e:	46bd      	mov	sp, r7
 8016a20:	bd80      	pop	{r7, pc}
 8016a22:	bf00      	nop
 8016a24:	0801bb94 	.word	0x0801bb94
 8016a28:	0801bd20 	.word	0x0801bd20
 8016a2c:	0801bbdc 	.word	0x0801bbdc
 8016a30:	20010ac0 	.word	0x20010ac0
 8016a34:	0801bd2c 	.word	0x0801bd2c

08016a38 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8016a38:	b580      	push	{r7, lr}
 8016a3a:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8016a3c:	2005      	movs	r0, #5
 8016a3e:	f7f4 f85d 	bl	800aafc <memp_malloc>
 8016a42:	4603      	mov	r3, r0
}
 8016a44:	4618      	mov	r0, r3
 8016a46:	bd80      	pop	{r7, pc}

08016a48 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8016a48:	b580      	push	{r7, lr}
 8016a4a:	b082      	sub	sp, #8
 8016a4c:	af00      	add	r7, sp, #0
 8016a4e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8016a50:	687b      	ldr	r3, [r7, #4]
 8016a52:	2b00      	cmp	r3, #0
 8016a54:	d106      	bne.n	8016a64 <ip_frag_free_pbuf_custom_ref+0x1c>
 8016a56:	4b07      	ldr	r3, [pc, #28]	; (8016a74 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8016a58:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8016a5c:	4906      	ldr	r1, [pc, #24]	; (8016a78 <ip_frag_free_pbuf_custom_ref+0x30>)
 8016a5e:	4807      	ldr	r0, [pc, #28]	; (8016a7c <ip_frag_free_pbuf_custom_ref+0x34>)
 8016a60:	f000 fe18 	bl	8017694 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8016a64:	6879      	ldr	r1, [r7, #4]
 8016a66:	2005      	movs	r0, #5
 8016a68:	f7f4 f8be 	bl	800abe8 <memp_free>
}
 8016a6c:	bf00      	nop
 8016a6e:	3708      	adds	r7, #8
 8016a70:	46bd      	mov	sp, r7
 8016a72:	bd80      	pop	{r7, pc}
 8016a74:	0801bb94 	.word	0x0801bb94
 8016a78:	0801bd4c 	.word	0x0801bd4c
 8016a7c:	0801bbdc 	.word	0x0801bbdc

08016a80 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8016a80:	b580      	push	{r7, lr}
 8016a82:	b084      	sub	sp, #16
 8016a84:	af00      	add	r7, sp, #0
 8016a86:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8016a88:	687b      	ldr	r3, [r7, #4]
 8016a8a:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8016a8c:	68fb      	ldr	r3, [r7, #12]
 8016a8e:	2b00      	cmp	r3, #0
 8016a90:	d106      	bne.n	8016aa0 <ipfrag_free_pbuf_custom+0x20>
 8016a92:	4b11      	ldr	r3, [pc, #68]	; (8016ad8 <ipfrag_free_pbuf_custom+0x58>)
 8016a94:	f240 22ce 	movw	r2, #718	; 0x2ce
 8016a98:	4910      	ldr	r1, [pc, #64]	; (8016adc <ipfrag_free_pbuf_custom+0x5c>)
 8016a9a:	4811      	ldr	r0, [pc, #68]	; (8016ae0 <ipfrag_free_pbuf_custom+0x60>)
 8016a9c:	f000 fdfa 	bl	8017694 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8016aa0:	68fa      	ldr	r2, [r7, #12]
 8016aa2:	687b      	ldr	r3, [r7, #4]
 8016aa4:	429a      	cmp	r2, r3
 8016aa6:	d006      	beq.n	8016ab6 <ipfrag_free_pbuf_custom+0x36>
 8016aa8:	4b0b      	ldr	r3, [pc, #44]	; (8016ad8 <ipfrag_free_pbuf_custom+0x58>)
 8016aaa:	f240 22cf 	movw	r2, #719	; 0x2cf
 8016aae:	490d      	ldr	r1, [pc, #52]	; (8016ae4 <ipfrag_free_pbuf_custom+0x64>)
 8016ab0:	480b      	ldr	r0, [pc, #44]	; (8016ae0 <ipfrag_free_pbuf_custom+0x60>)
 8016ab2:	f000 fdef 	bl	8017694 <iprintf>
  if (pcr->original != NULL) {
 8016ab6:	68fb      	ldr	r3, [r7, #12]
 8016ab8:	695b      	ldr	r3, [r3, #20]
 8016aba:	2b00      	cmp	r3, #0
 8016abc:	d004      	beq.n	8016ac8 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8016abe:	68fb      	ldr	r3, [r7, #12]
 8016ac0:	695b      	ldr	r3, [r3, #20]
 8016ac2:	4618      	mov	r0, r3
 8016ac4:	f7f4 ff40 	bl	800b948 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8016ac8:	68f8      	ldr	r0, [r7, #12]
 8016aca:	f7ff ffbd 	bl	8016a48 <ip_frag_free_pbuf_custom_ref>
}
 8016ace:	bf00      	nop
 8016ad0:	3710      	adds	r7, #16
 8016ad2:	46bd      	mov	sp, r7
 8016ad4:	bd80      	pop	{r7, pc}
 8016ad6:	bf00      	nop
 8016ad8:	0801bb94 	.word	0x0801bb94
 8016adc:	0801bd58 	.word	0x0801bd58
 8016ae0:	0801bbdc 	.word	0x0801bbdc
 8016ae4:	0801bd64 	.word	0x0801bd64

08016ae8 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8016ae8:	b580      	push	{r7, lr}
 8016aea:	b094      	sub	sp, #80	; 0x50
 8016aec:	af02      	add	r7, sp, #8
 8016aee:	60f8      	str	r0, [r7, #12]
 8016af0:	60b9      	str	r1, [r7, #8]
 8016af2:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8016af4:	2300      	movs	r3, #0
 8016af6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8016afa:	68bb      	ldr	r3, [r7, #8]
 8016afc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016afe:	3b14      	subs	r3, #20
 8016b00:	2b00      	cmp	r3, #0
 8016b02:	da00      	bge.n	8016b06 <ip4_frag+0x1e>
 8016b04:	3307      	adds	r3, #7
 8016b06:	10db      	asrs	r3, r3, #3
 8016b08:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8016b0a:	2314      	movs	r3, #20
 8016b0c:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8016b0e:	68fb      	ldr	r3, [r7, #12]
 8016b10:	685b      	ldr	r3, [r3, #4]
 8016b12:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8016b14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016b16:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8016b18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016b1a:	781b      	ldrb	r3, [r3, #0]
 8016b1c:	f003 030f 	and.w	r3, r3, #15
 8016b20:	b2db      	uxtb	r3, r3
 8016b22:	009b      	lsls	r3, r3, #2
 8016b24:	b2db      	uxtb	r3, r3
 8016b26:	2b14      	cmp	r3, #20
 8016b28:	d002      	beq.n	8016b30 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8016b2a:	f06f 0305 	mvn.w	r3, #5
 8016b2e:	e110      	b.n	8016d52 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8016b30:	68fb      	ldr	r3, [r7, #12]
 8016b32:	895b      	ldrh	r3, [r3, #10]
 8016b34:	2b13      	cmp	r3, #19
 8016b36:	d809      	bhi.n	8016b4c <ip4_frag+0x64>
 8016b38:	4b88      	ldr	r3, [pc, #544]	; (8016d5c <ip4_frag+0x274>)
 8016b3a:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8016b3e:	4988      	ldr	r1, [pc, #544]	; (8016d60 <ip4_frag+0x278>)
 8016b40:	4888      	ldr	r0, [pc, #544]	; (8016d64 <ip4_frag+0x27c>)
 8016b42:	f000 fda7 	bl	8017694 <iprintf>
 8016b46:	f06f 0305 	mvn.w	r3, #5
 8016b4a:	e102      	b.n	8016d52 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8016b4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016b4e:	88db      	ldrh	r3, [r3, #6]
 8016b50:	b29b      	uxth	r3, r3
 8016b52:	4618      	mov	r0, r3
 8016b54:	f7f3 fafa 	bl	800a14c <lwip_htons>
 8016b58:	4603      	mov	r3, r0
 8016b5a:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8016b5c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8016b5e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016b62:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8016b66:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8016b68:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8016b6c:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8016b6e:	68fb      	ldr	r3, [r7, #12]
 8016b70:	891b      	ldrh	r3, [r3, #8]
 8016b72:	3b14      	subs	r3, #20
 8016b74:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8016b78:	e0e1      	b.n	8016d3e <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8016b7a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8016b7c:	00db      	lsls	r3, r3, #3
 8016b7e:	b29b      	uxth	r3, r3
 8016b80:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8016b84:	4293      	cmp	r3, r2
 8016b86:	bf28      	it	cs
 8016b88:	4613      	movcs	r3, r2
 8016b8a:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8016b8c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016b90:	2114      	movs	r1, #20
 8016b92:	200e      	movs	r0, #14
 8016b94:	f7f4 fbf4 	bl	800b380 <pbuf_alloc>
 8016b98:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8016b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016b9c:	2b00      	cmp	r3, #0
 8016b9e:	f000 80d5 	beq.w	8016d4c <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8016ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ba4:	895b      	ldrh	r3, [r3, #10]
 8016ba6:	2b13      	cmp	r3, #19
 8016ba8:	d806      	bhi.n	8016bb8 <ip4_frag+0xd0>
 8016baa:	4b6c      	ldr	r3, [pc, #432]	; (8016d5c <ip4_frag+0x274>)
 8016bac:	f44f 7249 	mov.w	r2, #804	; 0x324
 8016bb0:	496d      	ldr	r1, [pc, #436]	; (8016d68 <ip4_frag+0x280>)
 8016bb2:	486c      	ldr	r0, [pc, #432]	; (8016d64 <ip4_frag+0x27c>)
 8016bb4:	f000 fd6e 	bl	8017694 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8016bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016bba:	685b      	ldr	r3, [r3, #4]
 8016bbc:	2214      	movs	r2, #20
 8016bbe:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8016bc0:	4618      	mov	r0, r3
 8016bc2:	f000 fcbc 	bl	801753e <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8016bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016bc8:	685b      	ldr	r3, [r3, #4]
 8016bca:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8016bcc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8016bce:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8016bd2:	e064      	b.n	8016c9e <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8016bd4:	68fb      	ldr	r3, [r7, #12]
 8016bd6:	895a      	ldrh	r2, [r3, #10]
 8016bd8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8016bda:	1ad3      	subs	r3, r2, r3
 8016bdc:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8016bde:	68fb      	ldr	r3, [r7, #12]
 8016be0:	895b      	ldrh	r3, [r3, #10]
 8016be2:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8016be4:	429a      	cmp	r2, r3
 8016be6:	d906      	bls.n	8016bf6 <ip4_frag+0x10e>
 8016be8:	4b5c      	ldr	r3, [pc, #368]	; (8016d5c <ip4_frag+0x274>)
 8016bea:	f240 322d 	movw	r2, #813	; 0x32d
 8016bee:	495f      	ldr	r1, [pc, #380]	; (8016d6c <ip4_frag+0x284>)
 8016bf0:	485c      	ldr	r0, [pc, #368]	; (8016d64 <ip4_frag+0x27c>)
 8016bf2:	f000 fd4f 	bl	8017694 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8016bf6:	8bfa      	ldrh	r2, [r7, #30]
 8016bf8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8016bfc:	4293      	cmp	r3, r2
 8016bfe:	bf28      	it	cs
 8016c00:	4613      	movcs	r3, r2
 8016c02:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8016c06:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8016c0a:	2b00      	cmp	r3, #0
 8016c0c:	d105      	bne.n	8016c1a <ip4_frag+0x132>
        poff = 0;
 8016c0e:	2300      	movs	r3, #0
 8016c10:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8016c12:	68fb      	ldr	r3, [r7, #12]
 8016c14:	681b      	ldr	r3, [r3, #0]
 8016c16:	60fb      	str	r3, [r7, #12]
        continue;
 8016c18:	e041      	b.n	8016c9e <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8016c1a:	f7ff ff0d 	bl	8016a38 <ip_frag_alloc_pbuf_custom_ref>
 8016c1e:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8016c20:	69bb      	ldr	r3, [r7, #24]
 8016c22:	2b00      	cmp	r3, #0
 8016c24:	d103      	bne.n	8016c2e <ip4_frag+0x146>
        pbuf_free(rambuf);
 8016c26:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016c28:	f7f4 fe8e 	bl	800b948 <pbuf_free>
        goto memerr;
 8016c2c:	e08f      	b.n	8016d4e <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8016c2e:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8016c30:	68fb      	ldr	r3, [r7, #12]
 8016c32:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8016c34:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8016c36:	4413      	add	r3, r2
 8016c38:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8016c3c:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8016c40:	9201      	str	r2, [sp, #4]
 8016c42:	9300      	str	r3, [sp, #0]
 8016c44:	4603      	mov	r3, r0
 8016c46:	2241      	movs	r2, #65	; 0x41
 8016c48:	2000      	movs	r0, #0
 8016c4a:	f7f4 fcc3 	bl	800b5d4 <pbuf_alloced_custom>
 8016c4e:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8016c50:	697b      	ldr	r3, [r7, #20]
 8016c52:	2b00      	cmp	r3, #0
 8016c54:	d106      	bne.n	8016c64 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8016c56:	69b8      	ldr	r0, [r7, #24]
 8016c58:	f7ff fef6 	bl	8016a48 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8016c5c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016c5e:	f7f4 fe73 	bl	800b948 <pbuf_free>
        goto memerr;
 8016c62:	e074      	b.n	8016d4e <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8016c64:	68f8      	ldr	r0, [r7, #12]
 8016c66:	f7f4 ff15 	bl	800ba94 <pbuf_ref>
      pcr->original = p;
 8016c6a:	69bb      	ldr	r3, [r7, #24]
 8016c6c:	68fa      	ldr	r2, [r7, #12]
 8016c6e:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8016c70:	69bb      	ldr	r3, [r7, #24]
 8016c72:	4a3f      	ldr	r2, [pc, #252]	; (8016d70 <ip4_frag+0x288>)
 8016c74:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8016c76:	6979      	ldr	r1, [r7, #20]
 8016c78:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016c7a:	f7f4 ff33 	bl	800bae4 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8016c7e:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8016c82:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8016c86:	1ad3      	subs	r3, r2, r3
 8016c88:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8016c8c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8016c90:	2b00      	cmp	r3, #0
 8016c92:	d004      	beq.n	8016c9e <ip4_frag+0x1b6>
        poff = 0;
 8016c94:	2300      	movs	r3, #0
 8016c96:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8016c98:	68fb      	ldr	r3, [r7, #12]
 8016c9a:	681b      	ldr	r3, [r3, #0]
 8016c9c:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8016c9e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8016ca2:	2b00      	cmp	r3, #0
 8016ca4:	d196      	bne.n	8016bd4 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8016ca6:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8016ca8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8016cac:	4413      	add	r3, r2
 8016cae:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8016cb0:	68bb      	ldr	r3, [r7, #8]
 8016cb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016cb4:	f1a3 0213 	sub.w	r2, r3, #19
 8016cb8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8016cbc:	429a      	cmp	r2, r3
 8016cbe:	bfcc      	ite	gt
 8016cc0:	2301      	movgt	r3, #1
 8016cc2:	2300      	movle	r3, #0
 8016cc4:	b2db      	uxtb	r3, r3
 8016cc6:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8016cc8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8016ccc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016cd0:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8016cd2:	6a3b      	ldr	r3, [r7, #32]
 8016cd4:	2b00      	cmp	r3, #0
 8016cd6:	d002      	beq.n	8016cde <ip4_frag+0x1f6>
 8016cd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016cda:	2b00      	cmp	r3, #0
 8016cdc:	d003      	beq.n	8016ce6 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8016cde:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8016ce0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8016ce4:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8016ce6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8016ce8:	4618      	mov	r0, r3
 8016cea:	f7f3 fa2f 	bl	800a14c <lwip_htons>
 8016cee:	4603      	mov	r3, r0
 8016cf0:	461a      	mov	r2, r3
 8016cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016cf4:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8016cf6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8016cf8:	3314      	adds	r3, #20
 8016cfa:	b29b      	uxth	r3, r3
 8016cfc:	4618      	mov	r0, r3
 8016cfe:	f7f3 fa25 	bl	800a14c <lwip_htons>
 8016d02:	4603      	mov	r3, r0
 8016d04:	461a      	mov	r2, r3
 8016d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016d08:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8016d0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016d0c:	2200      	movs	r2, #0
 8016d0e:	729a      	strb	r2, [r3, #10]
 8016d10:	2200      	movs	r2, #0
 8016d12:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8016d14:	68bb      	ldr	r3, [r7, #8]
 8016d16:	695b      	ldr	r3, [r3, #20]
 8016d18:	687a      	ldr	r2, [r7, #4]
 8016d1a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016d1c:	68b8      	ldr	r0, [r7, #8]
 8016d1e:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8016d20:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016d22:	f7f4 fe11 	bl	800b948 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8016d26:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8016d2a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8016d2c:	1ad3      	subs	r3, r2, r3
 8016d2e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8016d32:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8016d36:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8016d38:	4413      	add	r3, r2
 8016d3a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8016d3e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8016d42:	2b00      	cmp	r3, #0
 8016d44:	f47f af19 	bne.w	8016b7a <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8016d48:	2300      	movs	r3, #0
 8016d4a:	e002      	b.n	8016d52 <ip4_frag+0x26a>
      goto memerr;
 8016d4c:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8016d4e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8016d52:	4618      	mov	r0, r3
 8016d54:	3748      	adds	r7, #72	; 0x48
 8016d56:	46bd      	mov	sp, r7
 8016d58:	bd80      	pop	{r7, pc}
 8016d5a:	bf00      	nop
 8016d5c:	0801bb94 	.word	0x0801bb94
 8016d60:	0801bd70 	.word	0x0801bd70
 8016d64:	0801bbdc 	.word	0x0801bbdc
 8016d68:	0801bd8c 	.word	0x0801bd8c
 8016d6c:	0801bdac 	.word	0x0801bdac
 8016d70:	08016a81 	.word	0x08016a81

08016d74 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8016d74:	b580      	push	{r7, lr}
 8016d76:	b086      	sub	sp, #24
 8016d78:	af00      	add	r7, sp, #0
 8016d7a:	6078      	str	r0, [r7, #4]
 8016d7c:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8016d7e:	230e      	movs	r3, #14
 8016d80:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8016d82:	687b      	ldr	r3, [r7, #4]
 8016d84:	895b      	ldrh	r3, [r3, #10]
 8016d86:	2b0e      	cmp	r3, #14
 8016d88:	d96e      	bls.n	8016e68 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8016d8a:	687b      	ldr	r3, [r7, #4]
 8016d8c:	7bdb      	ldrb	r3, [r3, #15]
 8016d8e:	2b00      	cmp	r3, #0
 8016d90:	d106      	bne.n	8016da0 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8016d92:	683b      	ldr	r3, [r7, #0]
 8016d94:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8016d98:	3301      	adds	r3, #1
 8016d9a:	b2da      	uxtb	r2, r3
 8016d9c:	687b      	ldr	r3, [r7, #4]
 8016d9e:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8016da0:	687b      	ldr	r3, [r7, #4]
 8016da2:	685b      	ldr	r3, [r3, #4]
 8016da4:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8016da6:	693b      	ldr	r3, [r7, #16]
 8016da8:	7b1a      	ldrb	r2, [r3, #12]
 8016daa:	7b5b      	ldrb	r3, [r3, #13]
 8016dac:	021b      	lsls	r3, r3, #8
 8016dae:	4313      	orrs	r3, r2
 8016db0:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8016db2:	693b      	ldr	r3, [r7, #16]
 8016db4:	781b      	ldrb	r3, [r3, #0]
 8016db6:	f003 0301 	and.w	r3, r3, #1
 8016dba:	2b00      	cmp	r3, #0
 8016dbc:	d023      	beq.n	8016e06 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8016dbe:	693b      	ldr	r3, [r7, #16]
 8016dc0:	781b      	ldrb	r3, [r3, #0]
 8016dc2:	2b01      	cmp	r3, #1
 8016dc4:	d10f      	bne.n	8016de6 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8016dc6:	693b      	ldr	r3, [r7, #16]
 8016dc8:	785b      	ldrb	r3, [r3, #1]
 8016dca:	2b00      	cmp	r3, #0
 8016dcc:	d11b      	bne.n	8016e06 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8016dce:	693b      	ldr	r3, [r7, #16]
 8016dd0:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8016dd2:	2b5e      	cmp	r3, #94	; 0x5e
 8016dd4:	d117      	bne.n	8016e06 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8016dd6:	687b      	ldr	r3, [r7, #4]
 8016dd8:	7b5b      	ldrb	r3, [r3, #13]
 8016dda:	f043 0310 	orr.w	r3, r3, #16
 8016dde:	b2da      	uxtb	r2, r3
 8016de0:	687b      	ldr	r3, [r7, #4]
 8016de2:	735a      	strb	r2, [r3, #13]
 8016de4:	e00f      	b.n	8016e06 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8016de6:	693b      	ldr	r3, [r7, #16]
 8016de8:	2206      	movs	r2, #6
 8016dea:	4928      	ldr	r1, [pc, #160]	; (8016e8c <ethernet_input+0x118>)
 8016dec:	4618      	mov	r0, r3
 8016dee:	f000 fb96 	bl	801751e <memcmp>
 8016df2:	4603      	mov	r3, r0
 8016df4:	2b00      	cmp	r3, #0
 8016df6:	d106      	bne.n	8016e06 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8016df8:	687b      	ldr	r3, [r7, #4]
 8016dfa:	7b5b      	ldrb	r3, [r3, #13]
 8016dfc:	f043 0308 	orr.w	r3, r3, #8
 8016e00:	b2da      	uxtb	r2, r3
 8016e02:	687b      	ldr	r3, [r7, #4]
 8016e04:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8016e06:	89fb      	ldrh	r3, [r7, #14]
 8016e08:	2b08      	cmp	r3, #8
 8016e0a:	d003      	beq.n	8016e14 <ethernet_input+0xa0>
 8016e0c:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8016e10:	d014      	beq.n	8016e3c <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8016e12:	e032      	b.n	8016e7a <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8016e14:	683b      	ldr	r3, [r7, #0]
 8016e16:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8016e1a:	f003 0308 	and.w	r3, r3, #8
 8016e1e:	2b00      	cmp	r3, #0
 8016e20:	d024      	beq.n	8016e6c <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8016e22:	8afb      	ldrh	r3, [r7, #22]
 8016e24:	4619      	mov	r1, r3
 8016e26:	6878      	ldr	r0, [r7, #4]
 8016e28:	f7f4 fd08 	bl	800b83c <pbuf_remove_header>
 8016e2c:	4603      	mov	r3, r0
 8016e2e:	2b00      	cmp	r3, #0
 8016e30:	d11e      	bne.n	8016e70 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8016e32:	6839      	ldr	r1, [r7, #0]
 8016e34:	6878      	ldr	r0, [r7, #4]
 8016e36:	f7fe ff03 	bl	8015c40 <ip4_input>
      break;
 8016e3a:	e013      	b.n	8016e64 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8016e3c:	683b      	ldr	r3, [r7, #0]
 8016e3e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8016e42:	f003 0308 	and.w	r3, r3, #8
 8016e46:	2b00      	cmp	r3, #0
 8016e48:	d014      	beq.n	8016e74 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8016e4a:	8afb      	ldrh	r3, [r7, #22]
 8016e4c:	4619      	mov	r1, r3
 8016e4e:	6878      	ldr	r0, [r7, #4]
 8016e50:	f7f4 fcf4 	bl	800b83c <pbuf_remove_header>
 8016e54:	4603      	mov	r3, r0
 8016e56:	2b00      	cmp	r3, #0
 8016e58:	d10e      	bne.n	8016e78 <ethernet_input+0x104>
        etharp_input(p, netif);
 8016e5a:	6839      	ldr	r1, [r7, #0]
 8016e5c:	6878      	ldr	r0, [r7, #4]
 8016e5e:	f7fe f89f 	bl	8014fa0 <etharp_input>
      break;
 8016e62:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8016e64:	2300      	movs	r3, #0
 8016e66:	e00c      	b.n	8016e82 <ethernet_input+0x10e>
    goto free_and_return;
 8016e68:	bf00      	nop
 8016e6a:	e006      	b.n	8016e7a <ethernet_input+0x106>
        goto free_and_return;
 8016e6c:	bf00      	nop
 8016e6e:	e004      	b.n	8016e7a <ethernet_input+0x106>
        goto free_and_return;
 8016e70:	bf00      	nop
 8016e72:	e002      	b.n	8016e7a <ethernet_input+0x106>
        goto free_and_return;
 8016e74:	bf00      	nop
 8016e76:	e000      	b.n	8016e7a <ethernet_input+0x106>
        goto free_and_return;
 8016e78:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8016e7a:	6878      	ldr	r0, [r7, #4]
 8016e7c:	f7f4 fd64 	bl	800b948 <pbuf_free>
  return ERR_OK;
 8016e80:	2300      	movs	r3, #0
}
 8016e82:	4618      	mov	r0, r3
 8016e84:	3718      	adds	r7, #24
 8016e86:	46bd      	mov	sp, r7
 8016e88:	bd80      	pop	{r7, pc}
 8016e8a:	bf00      	nop
 8016e8c:	0801bfa0 	.word	0x0801bfa0

08016e90 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8016e90:	b580      	push	{r7, lr}
 8016e92:	b086      	sub	sp, #24
 8016e94:	af00      	add	r7, sp, #0
 8016e96:	60f8      	str	r0, [r7, #12]
 8016e98:	60b9      	str	r1, [r7, #8]
 8016e9a:	607a      	str	r2, [r7, #4]
 8016e9c:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8016e9e:	8c3b      	ldrh	r3, [r7, #32]
 8016ea0:	4618      	mov	r0, r3
 8016ea2:	f7f3 f953 	bl	800a14c <lwip_htons>
 8016ea6:	4603      	mov	r3, r0
 8016ea8:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8016eaa:	210e      	movs	r1, #14
 8016eac:	68b8      	ldr	r0, [r7, #8]
 8016eae:	f7f4 fcb5 	bl	800b81c <pbuf_add_header>
 8016eb2:	4603      	mov	r3, r0
 8016eb4:	2b00      	cmp	r3, #0
 8016eb6:	d125      	bne.n	8016f04 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8016eb8:	68bb      	ldr	r3, [r7, #8]
 8016eba:	685b      	ldr	r3, [r3, #4]
 8016ebc:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8016ebe:	693b      	ldr	r3, [r7, #16]
 8016ec0:	8afa      	ldrh	r2, [r7, #22]
 8016ec2:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8016ec4:	693b      	ldr	r3, [r7, #16]
 8016ec6:	2206      	movs	r2, #6
 8016ec8:	6839      	ldr	r1, [r7, #0]
 8016eca:	4618      	mov	r0, r3
 8016ecc:	f000 fb37 	bl	801753e <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8016ed0:	693b      	ldr	r3, [r7, #16]
 8016ed2:	3306      	adds	r3, #6
 8016ed4:	2206      	movs	r2, #6
 8016ed6:	6879      	ldr	r1, [r7, #4]
 8016ed8:	4618      	mov	r0, r3
 8016eda:	f000 fb30 	bl	801753e <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8016ede:	68fb      	ldr	r3, [r7, #12]
 8016ee0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8016ee4:	2b06      	cmp	r3, #6
 8016ee6:	d006      	beq.n	8016ef6 <ethernet_output+0x66>
 8016ee8:	4b0a      	ldr	r3, [pc, #40]	; (8016f14 <ethernet_output+0x84>)
 8016eea:	f44f 7299 	mov.w	r2, #306	; 0x132
 8016eee:	490a      	ldr	r1, [pc, #40]	; (8016f18 <ethernet_output+0x88>)
 8016ef0:	480a      	ldr	r0, [pc, #40]	; (8016f1c <ethernet_output+0x8c>)
 8016ef2:	f000 fbcf 	bl	8017694 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8016ef6:	68fb      	ldr	r3, [r7, #12]
 8016ef8:	699b      	ldr	r3, [r3, #24]
 8016efa:	68b9      	ldr	r1, [r7, #8]
 8016efc:	68f8      	ldr	r0, [r7, #12]
 8016efe:	4798      	blx	r3
 8016f00:	4603      	mov	r3, r0
 8016f02:	e002      	b.n	8016f0a <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8016f04:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8016f06:	f06f 0301 	mvn.w	r3, #1
}
 8016f0a:	4618      	mov	r0, r3
 8016f0c:	3718      	adds	r7, #24
 8016f0e:	46bd      	mov	sp, r7
 8016f10:	bd80      	pop	{r7, pc}
 8016f12:	bf00      	nop
 8016f14:	0801bdbc 	.word	0x0801bdbc
 8016f18:	0801bdf4 	.word	0x0801bdf4
 8016f1c:	0801be28 	.word	0x0801be28

08016f20 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8016f20:	b580      	push	{r7, lr}
 8016f22:	b086      	sub	sp, #24
 8016f24:	af00      	add	r7, sp, #0
 8016f26:	6078      	str	r0, [r7, #4]
 8016f28:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 8016f2a:	683b      	ldr	r3, [r7, #0]
 8016f2c:	60bb      	str	r3, [r7, #8]
 8016f2e:	2304      	movs	r3, #4
 8016f30:	60fb      	str	r3, [r7, #12]
 8016f32:	2300      	movs	r3, #0
 8016f34:	613b      	str	r3, [r7, #16]
 8016f36:	2300      	movs	r3, #0
 8016f38:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 8016f3a:	f107 0308 	add.w	r3, r7, #8
 8016f3e:	2100      	movs	r1, #0
 8016f40:	4618      	mov	r0, r3
 8016f42:	f7ee f800 	bl	8004f46 <osMessageCreate>
 8016f46:	4602      	mov	r2, r0
 8016f48:	687b      	ldr	r3, [r7, #4]
 8016f4a:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8016f4c:	687b      	ldr	r3, [r7, #4]
 8016f4e:	681b      	ldr	r3, [r3, #0]
 8016f50:	2b00      	cmp	r3, #0
 8016f52:	d102      	bne.n	8016f5a <sys_mbox_new+0x3a>
    return ERR_MEM;
 8016f54:	f04f 33ff 	mov.w	r3, #4294967295
 8016f58:	e000      	b.n	8016f5c <sys_mbox_new+0x3c>

  return ERR_OK;
 8016f5a:	2300      	movs	r3, #0
}
 8016f5c:	4618      	mov	r0, r3
 8016f5e:	3718      	adds	r7, #24
 8016f60:	46bd      	mov	sp, r7
 8016f62:	bd80      	pop	{r7, pc}

08016f64 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 8016f64:	b580      	push	{r7, lr}
 8016f66:	b082      	sub	sp, #8
 8016f68:	af00      	add	r7, sp, #0
 8016f6a:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
 8016f6c:	687b      	ldr	r3, [r7, #4]
 8016f6e:	681b      	ldr	r3, [r3, #0]
 8016f70:	4618      	mov	r0, r3
 8016f72:	f7ee f8c5 	bl	8005100 <osMessageWaiting>
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
 8016f76:	687b      	ldr	r3, [r7, #4]
 8016f78:	681b      	ldr	r3, [r3, #0]
 8016f7a:	4618      	mov	r0, r3
 8016f7c:	f7ee f8d6 	bl	800512c <osMessageDelete>
  osMessageQueueDelete(*mbox);
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 8016f80:	bf00      	nop
 8016f82:	3708      	adds	r7, #8
 8016f84:	46bd      	mov	sp, r7
 8016f86:	bd80      	pop	{r7, pc}

08016f88 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8016f88:	b580      	push	{r7, lr}
 8016f8a:	b084      	sub	sp, #16
 8016f8c:	af00      	add	r7, sp, #0
 8016f8e:	6078      	str	r0, [r7, #4]
 8016f90:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 8016f92:	687b      	ldr	r3, [r7, #4]
 8016f94:	681b      	ldr	r3, [r3, #0]
 8016f96:	6839      	ldr	r1, [r7, #0]
 8016f98:	2200      	movs	r2, #0
 8016f9a:	4618      	mov	r0, r3
 8016f9c:	f7ed fffc 	bl	8004f98 <osMessagePut>
 8016fa0:	4603      	mov	r3, r0
 8016fa2:	2b00      	cmp	r3, #0
 8016fa4:	d102      	bne.n	8016fac <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 8016fa6:	2300      	movs	r3, #0
 8016fa8:	73fb      	strb	r3, [r7, #15]
 8016faa:	e001      	b.n	8016fb0 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8016fac:	23ff      	movs	r3, #255	; 0xff
 8016fae:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8016fb0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8016fb4:	4618      	mov	r0, r3
 8016fb6:	3710      	adds	r7, #16
 8016fb8:	46bd      	mov	sp, r7
 8016fba:	bd80      	pop	{r7, pc}

08016fbc <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8016fbc:	b580      	push	{r7, lr}
 8016fbe:	b08c      	sub	sp, #48	; 0x30
 8016fc0:	af00      	add	r7, sp, #0
 8016fc2:	61f8      	str	r0, [r7, #28]
 8016fc4:	61b9      	str	r1, [r7, #24]
 8016fc6:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 8016fc8:	f7ed fde8 	bl	8004b9c <osKernelSysTick>
 8016fcc:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8016fce:	697b      	ldr	r3, [r7, #20]
 8016fd0:	2b00      	cmp	r3, #0
 8016fd2:	d017      	beq.n	8017004 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 8016fd4:	69fb      	ldr	r3, [r7, #28]
 8016fd6:	6819      	ldr	r1, [r3, #0]
 8016fd8:	f107 0320 	add.w	r3, r7, #32
 8016fdc:	697a      	ldr	r2, [r7, #20]
 8016fde:	4618      	mov	r0, r3
 8016fe0:	f7ee f81a 	bl	8005018 <osMessageGet>

    if(event.status == osEventMessage)
 8016fe4:	6a3b      	ldr	r3, [r7, #32]
 8016fe6:	2b10      	cmp	r3, #16
 8016fe8:	d109      	bne.n	8016ffe <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 8016fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016fec:	461a      	mov	r2, r3
 8016fee:	69bb      	ldr	r3, [r7, #24]
 8016ff0:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 8016ff2:	f7ed fdd3 	bl	8004b9c <osKernelSysTick>
 8016ff6:	4602      	mov	r2, r0
 8016ff8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016ffa:	1ad3      	subs	r3, r2, r3
 8016ffc:	e019      	b.n	8017032 <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8016ffe:	f04f 33ff 	mov.w	r3, #4294967295
 8017002:	e016      	b.n	8017032 <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 8017004:	69fb      	ldr	r3, [r7, #28]
 8017006:	6819      	ldr	r1, [r3, #0]
 8017008:	463b      	mov	r3, r7
 801700a:	f04f 32ff 	mov.w	r2, #4294967295
 801700e:	4618      	mov	r0, r3
 8017010:	f7ee f802 	bl	8005018 <osMessageGet>
 8017014:	f107 0320 	add.w	r3, r7, #32
 8017018:	463a      	mov	r2, r7
 801701a:	ca07      	ldmia	r2, {r0, r1, r2}
 801701c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 8017020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017022:	461a      	mov	r2, r3
 8017024:	69bb      	ldr	r3, [r7, #24]
 8017026:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 8017028:	f7ed fdb8 	bl	8004b9c <osKernelSysTick>
 801702c:	4602      	mov	r2, r0
 801702e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017030:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8017032:	4618      	mov	r0, r3
 8017034:	3730      	adds	r7, #48	; 0x30
 8017036:	46bd      	mov	sp, r7
 8017038:	bd80      	pop	{r7, pc}

0801703a <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 801703a:	b580      	push	{r7, lr}
 801703c:	b086      	sub	sp, #24
 801703e:	af00      	add	r7, sp, #0
 8017040:	6078      	str	r0, [r7, #4]
 8017042:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osEvent event;

  event = osMessageGet (*mbox, 0);
 8017044:	687b      	ldr	r3, [r7, #4]
 8017046:	6819      	ldr	r1, [r3, #0]
 8017048:	f107 030c 	add.w	r3, r7, #12
 801704c:	2200      	movs	r2, #0
 801704e:	4618      	mov	r0, r3
 8017050:	f7ed ffe2 	bl	8005018 <osMessageGet>

  if(event.status == osEventMessage)
 8017054:	68fb      	ldr	r3, [r7, #12]
 8017056:	2b10      	cmp	r3, #16
 8017058:	d105      	bne.n	8017066 <sys_arch_mbox_tryfetch+0x2c>
  {
    *msg = (void *)event.value.v;
 801705a:	693b      	ldr	r3, [r7, #16]
 801705c:	461a      	mov	r2, r3
 801705e:	683b      	ldr	r3, [r7, #0]
 8017060:	601a      	str	r2, [r3, #0]
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
  {
#endif
    return ERR_OK;
 8017062:	2300      	movs	r3, #0
 8017064:	e001      	b.n	801706a <sys_arch_mbox_tryfetch+0x30>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 8017066:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 801706a:	4618      	mov	r0, r3
 801706c:	3718      	adds	r7, #24
 801706e:	46bd      	mov	sp, r7
 8017070:	bd80      	pop	{r7, pc}

08017072 <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8017072:	b480      	push	{r7}
 8017074:	b083      	sub	sp, #12
 8017076:	af00      	add	r7, sp, #0
 8017078:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 801707a:	687b      	ldr	r3, [r7, #4]
 801707c:	681b      	ldr	r3, [r3, #0]
 801707e:	2b00      	cmp	r3, #0
 8017080:	d101      	bne.n	8017086 <sys_mbox_valid+0x14>
    return 0;
 8017082:	2300      	movs	r3, #0
 8017084:	e000      	b.n	8017088 <sys_mbox_valid+0x16>
  else
    return 1;
 8017086:	2301      	movs	r3, #1
}
 8017088:	4618      	mov	r0, r3
 801708a:	370c      	adds	r7, #12
 801708c:	46bd      	mov	sp, r7
 801708e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017092:	4770      	bx	lr

08017094 <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 8017094:	b480      	push	{r7}
 8017096:	b083      	sub	sp, #12
 8017098:	af00      	add	r7, sp, #0
 801709a:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 801709c:	687b      	ldr	r3, [r7, #4]
 801709e:	2200      	movs	r2, #0
 80170a0:	601a      	str	r2, [r3, #0]
}
 80170a2:	bf00      	nop
 80170a4:	370c      	adds	r7, #12
 80170a6:	46bd      	mov	sp, r7
 80170a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170ac:	4770      	bx	lr

080170ae <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 80170ae:	b580      	push	{r7, lr}
 80170b0:	b084      	sub	sp, #16
 80170b2:	af00      	add	r7, sp, #0
 80170b4:	6078      	str	r0, [r7, #4]
 80170b6:	460b      	mov	r3, r1
 80170b8:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
 80170ba:	2300      	movs	r3, #0
 80170bc:	60bb      	str	r3, [r7, #8]
 80170be:	2300      	movs	r3, #0
 80170c0:	60fb      	str	r3, [r7, #12]
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 80170c2:	f107 0308 	add.w	r3, r7, #8
 80170c6:	2101      	movs	r1, #1
 80170c8:	4618      	mov	r0, r3
 80170ca:	f7ed fe73 	bl	8004db4 <osSemaphoreCreate>
 80170ce:	4602      	mov	r2, r0
 80170d0:	687b      	ldr	r3, [r7, #4]
 80170d2:	601a      	str	r2, [r3, #0]
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
#endif

  if(*sem == NULL)
 80170d4:	687b      	ldr	r3, [r7, #4]
 80170d6:	681b      	ldr	r3, [r3, #0]
 80170d8:	2b00      	cmp	r3, #0
 80170da:	d102      	bne.n	80170e2 <sys_sem_new+0x34>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 80170dc:	f04f 33ff 	mov.w	r3, #4294967295
 80170e0:	e009      	b.n	80170f6 <sys_sem_new+0x48>
  }

  if(count == 0)	// Means it can't be taken
 80170e2:	78fb      	ldrb	r3, [r7, #3]
 80170e4:	2b00      	cmp	r3, #0
 80170e6:	d105      	bne.n	80170f4 <sys_sem_new+0x46>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
 80170e8:	687b      	ldr	r3, [r7, #4]
 80170ea:	681b      	ldr	r3, [r3, #0]
 80170ec:	2100      	movs	r1, #0
 80170ee:	4618      	mov	r0, r3
 80170f0:	f7ed fe92 	bl	8004e18 <osSemaphoreWait>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 80170f4:	2300      	movs	r3, #0
}
 80170f6:	4618      	mov	r0, r3
 80170f8:	3710      	adds	r7, #16
 80170fa:	46bd      	mov	sp, r7
 80170fc:	bd80      	pop	{r7, pc}

080170fe <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 80170fe:	b580      	push	{r7, lr}
 8017100:	b084      	sub	sp, #16
 8017102:	af00      	add	r7, sp, #0
 8017104:	6078      	str	r0, [r7, #4]
 8017106:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
 8017108:	f7ed fd48 	bl	8004b9c <osKernelSysTick>
 801710c:	60f8      	str	r0, [r7, #12]
#else
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 801710e:	683b      	ldr	r3, [r7, #0]
 8017110:	2b00      	cmp	r3, #0
 8017112:	d011      	beq.n	8017138 <sys_arch_sem_wait+0x3a>
  {
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
 8017114:	687b      	ldr	r3, [r7, #4]
 8017116:	681b      	ldr	r3, [r3, #0]
 8017118:	6839      	ldr	r1, [r7, #0]
 801711a:	4618      	mov	r0, r3
 801711c:	f7ed fe7c 	bl	8004e18 <osSemaphoreWait>
 8017120:	4603      	mov	r3, r0
 8017122:	2b00      	cmp	r3, #0
 8017124:	d105      	bne.n	8017132 <sys_arch_sem_wait+0x34>
    {
      return (osKernelSysTick() - starttime);
 8017126:	f7ed fd39 	bl	8004b9c <osKernelSysTick>
 801712a:	4602      	mov	r2, r0
 801712c:	68fb      	ldr	r3, [r7, #12]
 801712e:	1ad3      	subs	r3, r2, r3
 8017130:	e012      	b.n	8017158 <sys_arch_sem_wait+0x5a>
        return (osKernelGetTickCount() - starttime);
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 8017132:	f04f 33ff 	mov.w	r3, #4294967295
 8017136:	e00f      	b.n	8017158 <sys_arch_sem_wait+0x5a>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 8017138:	bf00      	nop
 801713a:	687b      	ldr	r3, [r7, #4]
 801713c:	681b      	ldr	r3, [r3, #0]
 801713e:	f04f 31ff 	mov.w	r1, #4294967295
 8017142:	4618      	mov	r0, r3
 8017144:	f7ed fe68 	bl	8004e18 <osSemaphoreWait>
 8017148:	4603      	mov	r3, r0
 801714a:	2b00      	cmp	r3, #0
 801714c:	d1f5      	bne.n	801713a <sys_arch_sem_wait+0x3c>
    return (osKernelSysTick() - starttime);
 801714e:	f7ed fd25 	bl	8004b9c <osKernelSysTick>
 8017152:	4602      	mov	r2, r0
 8017154:	68fb      	ldr	r3, [r7, #12]
 8017156:	1ad3      	subs	r3, r2, r3
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8017158:	4618      	mov	r0, r3
 801715a:	3710      	adds	r7, #16
 801715c:	46bd      	mov	sp, r7
 801715e:	bd80      	pop	{r7, pc}

08017160 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 8017160:	b580      	push	{r7, lr}
 8017162:	b082      	sub	sp, #8
 8017164:	af00      	add	r7, sp, #0
 8017166:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 8017168:	687b      	ldr	r3, [r7, #4]
 801716a:	681b      	ldr	r3, [r3, #0]
 801716c:	4618      	mov	r0, r3
 801716e:	f7ed fea1 	bl	8004eb4 <osSemaphoreRelease>
}
 8017172:	bf00      	nop
 8017174:	3708      	adds	r7, #8
 8017176:	46bd      	mov	sp, r7
 8017178:	bd80      	pop	{r7, pc}

0801717a <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 801717a:	b580      	push	{r7, lr}
 801717c:	b082      	sub	sp, #8
 801717e:	af00      	add	r7, sp, #0
 8017180:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 8017182:	687b      	ldr	r3, [r7, #4]
 8017184:	681b      	ldr	r3, [r3, #0]
 8017186:	4618      	mov	r0, r3
 8017188:	f7ed feca 	bl	8004f20 <osSemaphoreDelete>
}
 801718c:	bf00      	nop
 801718e:	3708      	adds	r7, #8
 8017190:	46bd      	mov	sp, r7
 8017192:	bd80      	pop	{r7, pc}

08017194 <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 8017194:	b480      	push	{r7}
 8017196:	b083      	sub	sp, #12
 8017198:	af00      	add	r7, sp, #0
 801719a:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 801719c:	687b      	ldr	r3, [r7, #4]
 801719e:	681b      	ldr	r3, [r3, #0]
 80171a0:	2b00      	cmp	r3, #0
 80171a2:	d101      	bne.n	80171a8 <sys_sem_valid+0x14>
    return 0;
 80171a4:	2300      	movs	r3, #0
 80171a6:	e000      	b.n	80171aa <sys_sem_valid+0x16>
  else
    return 1;
 80171a8:	2301      	movs	r3, #1
}
 80171aa:	4618      	mov	r0, r3
 80171ac:	370c      	adds	r7, #12
 80171ae:	46bd      	mov	sp, r7
 80171b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171b4:	4770      	bx	lr

080171b6 <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 80171b6:	b480      	push	{r7}
 80171b8:	b083      	sub	sp, #12
 80171ba:	af00      	add	r7, sp, #0
 80171bc:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 80171be:	687b      	ldr	r3, [r7, #4]
 80171c0:	2200      	movs	r2, #0
 80171c2:	601a      	str	r2, [r3, #0]
}
 80171c4:	bf00      	nop
 80171c6:	370c      	adds	r7, #12
 80171c8:	46bd      	mov	sp, r7
 80171ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171ce:	4770      	bx	lr

080171d0 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 80171d0:	b580      	push	{r7, lr}
 80171d2:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 80171d4:	4803      	ldr	r0, [pc, #12]	; (80171e4 <sys_init+0x14>)
 80171d6:	f7ed fd51 	bl	8004c7c <osMutexCreate>
 80171da:	4603      	mov	r3, r0
 80171dc:	4a02      	ldr	r2, [pc, #8]	; (80171e8 <sys_init+0x18>)
 80171de:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 80171e0:	bf00      	nop
 80171e2:	bd80      	pop	{r7, pc}
 80171e4:	0801bfb0 	.word	0x0801bfb0
 80171e8:	20010ac8 	.word	0x20010ac8

080171ec <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 80171ec:	b580      	push	{r7, lr}
 80171ee:	b084      	sub	sp, #16
 80171f0:	af00      	add	r7, sp, #0
 80171f2:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 80171f4:	2300      	movs	r3, #0
 80171f6:	60bb      	str	r3, [r7, #8]
 80171f8:	2300      	movs	r3, #0
 80171fa:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 80171fc:	f107 0308 	add.w	r3, r7, #8
 8017200:	4618      	mov	r0, r3
 8017202:	f7ed fd3b 	bl	8004c7c <osMutexCreate>
 8017206:	4602      	mov	r2, r0
 8017208:	687b      	ldr	r3, [r7, #4]
 801720a:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 801720c:	687b      	ldr	r3, [r7, #4]
 801720e:	681b      	ldr	r3, [r3, #0]
 8017210:	2b00      	cmp	r3, #0
 8017212:	d102      	bne.n	801721a <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8017214:	f04f 33ff 	mov.w	r3, #4294967295
 8017218:	e000      	b.n	801721c <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 801721a:	2300      	movs	r3, #0
}
 801721c:	4618      	mov	r0, r3
 801721e:	3710      	adds	r7, #16
 8017220:	46bd      	mov	sp, r7
 8017222:	bd80      	pop	{r7, pc}

08017224 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8017224:	b580      	push	{r7, lr}
 8017226:	b082      	sub	sp, #8
 8017228:	af00      	add	r7, sp, #0
 801722a:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 801722c:	687b      	ldr	r3, [r7, #4]
 801722e:	681b      	ldr	r3, [r3, #0]
 8017230:	f04f 31ff 	mov.w	r1, #4294967295
 8017234:	4618      	mov	r0, r3
 8017236:	f7ed fd39 	bl	8004cac <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 801723a:	bf00      	nop
 801723c:	3708      	adds	r7, #8
 801723e:	46bd      	mov	sp, r7
 8017240:	bd80      	pop	{r7, pc}

08017242 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8017242:	b580      	push	{r7, lr}
 8017244:	b082      	sub	sp, #8
 8017246:	af00      	add	r7, sp, #0
 8017248:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 801724a:	687b      	ldr	r3, [r7, #4]
 801724c:	681b      	ldr	r3, [r3, #0]
 801724e:	4618      	mov	r0, r3
 8017250:	f7ed fd7a 	bl	8004d48 <osMutexRelease>
}
 8017254:	bf00      	nop
 8017256:	3708      	adds	r7, #8
 8017258:	46bd      	mov	sp, r7
 801725a:	bd80      	pop	{r7, pc}

0801725c <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 801725c:	b580      	push	{r7, lr}
 801725e:	b08c      	sub	sp, #48	; 0x30
 8017260:	af00      	add	r7, sp, #0
 8017262:	60f8      	str	r0, [r7, #12]
 8017264:	60b9      	str	r1, [r7, #8]
 8017266:	607a      	str	r2, [r7, #4]
 8017268:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 801726a:	f107 0314 	add.w	r3, r7, #20
 801726e:	2200      	movs	r2, #0
 8017270:	601a      	str	r2, [r3, #0]
 8017272:	605a      	str	r2, [r3, #4]
 8017274:	609a      	str	r2, [r3, #8]
 8017276:	60da      	str	r2, [r3, #12]
 8017278:	611a      	str	r2, [r3, #16]
 801727a:	615a      	str	r2, [r3, #20]
 801727c:	619a      	str	r2, [r3, #24]
 801727e:	68fb      	ldr	r3, [r7, #12]
 8017280:	617b      	str	r3, [r7, #20]
 8017282:	68bb      	ldr	r3, [r7, #8]
 8017284:	61bb      	str	r3, [r7, #24]
 8017286:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017288:	b21b      	sxth	r3, r3
 801728a:	83bb      	strh	r3, [r7, #28]
 801728c:	683b      	ldr	r3, [r7, #0]
 801728e:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 8017290:	f107 0314 	add.w	r3, r7, #20
 8017294:	6879      	ldr	r1, [r7, #4]
 8017296:	4618      	mov	r0, r3
 8017298:	f7ed fc90 	bl	8004bbc <osThreadCreate>
 801729c:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 801729e:	4618      	mov	r0, r3
 80172a0:	3730      	adds	r7, #48	; 0x30
 80172a2:	46bd      	mov	sp, r7
 80172a4:	bd80      	pop	{r7, pc}
	...

080172a8 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 80172a8:	b580      	push	{r7, lr}
 80172aa:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 80172ac:	4b04      	ldr	r3, [pc, #16]	; (80172c0 <sys_arch_protect+0x18>)
 80172ae:	681b      	ldr	r3, [r3, #0]
 80172b0:	f04f 31ff 	mov.w	r1, #4294967295
 80172b4:	4618      	mov	r0, r3
 80172b6:	f7ed fcf9 	bl	8004cac <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 80172ba:	2301      	movs	r3, #1
}
 80172bc:	4618      	mov	r0, r3
 80172be:	bd80      	pop	{r7, pc}
 80172c0:	20010ac8 	.word	0x20010ac8

080172c4 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 80172c4:	b580      	push	{r7, lr}
 80172c6:	b082      	sub	sp, #8
 80172c8:	af00      	add	r7, sp, #0
 80172ca:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 80172cc:	4b04      	ldr	r3, [pc, #16]	; (80172e0 <sys_arch_unprotect+0x1c>)
 80172ce:	681b      	ldr	r3, [r3, #0]
 80172d0:	4618      	mov	r0, r3
 80172d2:	f7ed fd39 	bl	8004d48 <osMutexRelease>
}
 80172d6:	bf00      	nop
 80172d8:	3708      	adds	r7, #8
 80172da:	46bd      	mov	sp, r7
 80172dc:	bd80      	pop	{r7, pc}
 80172de:	bf00      	nop
 80172e0:	20010ac8 	.word	0x20010ac8

080172e4 <std>:
 80172e4:	2300      	movs	r3, #0
 80172e6:	b510      	push	{r4, lr}
 80172e8:	4604      	mov	r4, r0
 80172ea:	e9c0 3300 	strd	r3, r3, [r0]
 80172ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80172f2:	6083      	str	r3, [r0, #8]
 80172f4:	8181      	strh	r1, [r0, #12]
 80172f6:	6643      	str	r3, [r0, #100]	; 0x64
 80172f8:	81c2      	strh	r2, [r0, #14]
 80172fa:	6183      	str	r3, [r0, #24]
 80172fc:	4619      	mov	r1, r3
 80172fe:	2208      	movs	r2, #8
 8017300:	305c      	adds	r0, #92	; 0x5c
 8017302:	f000 f92a 	bl	801755a <memset>
 8017306:	4b05      	ldr	r3, [pc, #20]	; (801731c <std+0x38>)
 8017308:	6263      	str	r3, [r4, #36]	; 0x24
 801730a:	4b05      	ldr	r3, [pc, #20]	; (8017320 <std+0x3c>)
 801730c:	62a3      	str	r3, [r4, #40]	; 0x28
 801730e:	4b05      	ldr	r3, [pc, #20]	; (8017324 <std+0x40>)
 8017310:	62e3      	str	r3, [r4, #44]	; 0x2c
 8017312:	4b05      	ldr	r3, [pc, #20]	; (8017328 <std+0x44>)
 8017314:	6224      	str	r4, [r4, #32]
 8017316:	6323      	str	r3, [r4, #48]	; 0x30
 8017318:	bd10      	pop	{r4, pc}
 801731a:	bf00      	nop
 801731c:	08017835 	.word	0x08017835
 8017320:	08017857 	.word	0x08017857
 8017324:	0801788f 	.word	0x0801788f
 8017328:	080178b3 	.word	0x080178b3

0801732c <_cleanup_r>:
 801732c:	4901      	ldr	r1, [pc, #4]	; (8017334 <_cleanup_r+0x8>)
 801732e:	f000 b8af 	b.w	8017490 <_fwalk_reent>
 8017332:	bf00      	nop
 8017334:	08017a49 	.word	0x08017a49

08017338 <__sfmoreglue>:
 8017338:	b570      	push	{r4, r5, r6, lr}
 801733a:	2268      	movs	r2, #104	; 0x68
 801733c:	1e4d      	subs	r5, r1, #1
 801733e:	4355      	muls	r5, r2
 8017340:	460e      	mov	r6, r1
 8017342:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8017346:	f000 f931 	bl	80175ac <_malloc_r>
 801734a:	4604      	mov	r4, r0
 801734c:	b140      	cbz	r0, 8017360 <__sfmoreglue+0x28>
 801734e:	2100      	movs	r1, #0
 8017350:	e9c0 1600 	strd	r1, r6, [r0]
 8017354:	300c      	adds	r0, #12
 8017356:	60a0      	str	r0, [r4, #8]
 8017358:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801735c:	f000 f8fd 	bl	801755a <memset>
 8017360:	4620      	mov	r0, r4
 8017362:	bd70      	pop	{r4, r5, r6, pc}

08017364 <__sfp_lock_acquire>:
 8017364:	4801      	ldr	r0, [pc, #4]	; (801736c <__sfp_lock_acquire+0x8>)
 8017366:	f000 b8d8 	b.w	801751a <__retarget_lock_acquire_recursive>
 801736a:	bf00      	nop
 801736c:	20010acd 	.word	0x20010acd

08017370 <__sfp_lock_release>:
 8017370:	4801      	ldr	r0, [pc, #4]	; (8017378 <__sfp_lock_release+0x8>)
 8017372:	f000 b8d3 	b.w	801751c <__retarget_lock_release_recursive>
 8017376:	bf00      	nop
 8017378:	20010acd 	.word	0x20010acd

0801737c <__sinit_lock_acquire>:
 801737c:	4801      	ldr	r0, [pc, #4]	; (8017384 <__sinit_lock_acquire+0x8>)
 801737e:	f000 b8cc 	b.w	801751a <__retarget_lock_acquire_recursive>
 8017382:	bf00      	nop
 8017384:	20010ace 	.word	0x20010ace

08017388 <__sinit_lock_release>:
 8017388:	4801      	ldr	r0, [pc, #4]	; (8017390 <__sinit_lock_release+0x8>)
 801738a:	f000 b8c7 	b.w	801751c <__retarget_lock_release_recursive>
 801738e:	bf00      	nop
 8017390:	20010ace 	.word	0x20010ace

08017394 <__sinit>:
 8017394:	b510      	push	{r4, lr}
 8017396:	4604      	mov	r4, r0
 8017398:	f7ff fff0 	bl	801737c <__sinit_lock_acquire>
 801739c:	69a3      	ldr	r3, [r4, #24]
 801739e:	b11b      	cbz	r3, 80173a8 <__sinit+0x14>
 80173a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80173a4:	f7ff bff0 	b.w	8017388 <__sinit_lock_release>
 80173a8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80173ac:	6523      	str	r3, [r4, #80]	; 0x50
 80173ae:	4b13      	ldr	r3, [pc, #76]	; (80173fc <__sinit+0x68>)
 80173b0:	4a13      	ldr	r2, [pc, #76]	; (8017400 <__sinit+0x6c>)
 80173b2:	681b      	ldr	r3, [r3, #0]
 80173b4:	62a2      	str	r2, [r4, #40]	; 0x28
 80173b6:	42a3      	cmp	r3, r4
 80173b8:	bf04      	itt	eq
 80173ba:	2301      	moveq	r3, #1
 80173bc:	61a3      	streq	r3, [r4, #24]
 80173be:	4620      	mov	r0, r4
 80173c0:	f000 f820 	bl	8017404 <__sfp>
 80173c4:	6060      	str	r0, [r4, #4]
 80173c6:	4620      	mov	r0, r4
 80173c8:	f000 f81c 	bl	8017404 <__sfp>
 80173cc:	60a0      	str	r0, [r4, #8]
 80173ce:	4620      	mov	r0, r4
 80173d0:	f000 f818 	bl	8017404 <__sfp>
 80173d4:	2200      	movs	r2, #0
 80173d6:	60e0      	str	r0, [r4, #12]
 80173d8:	2104      	movs	r1, #4
 80173da:	6860      	ldr	r0, [r4, #4]
 80173dc:	f7ff ff82 	bl	80172e4 <std>
 80173e0:	68a0      	ldr	r0, [r4, #8]
 80173e2:	2201      	movs	r2, #1
 80173e4:	2109      	movs	r1, #9
 80173e6:	f7ff ff7d 	bl	80172e4 <std>
 80173ea:	68e0      	ldr	r0, [r4, #12]
 80173ec:	2202      	movs	r2, #2
 80173ee:	2112      	movs	r1, #18
 80173f0:	f7ff ff78 	bl	80172e4 <std>
 80173f4:	2301      	movs	r3, #1
 80173f6:	61a3      	str	r3, [r4, #24]
 80173f8:	e7d2      	b.n	80173a0 <__sinit+0xc>
 80173fa:	bf00      	nop
 80173fc:	0801c018 	.word	0x0801c018
 8017400:	0801732d 	.word	0x0801732d

08017404 <__sfp>:
 8017404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017406:	4607      	mov	r7, r0
 8017408:	f7ff ffac 	bl	8017364 <__sfp_lock_acquire>
 801740c:	4b1e      	ldr	r3, [pc, #120]	; (8017488 <__sfp+0x84>)
 801740e:	681e      	ldr	r6, [r3, #0]
 8017410:	69b3      	ldr	r3, [r6, #24]
 8017412:	b913      	cbnz	r3, 801741a <__sfp+0x16>
 8017414:	4630      	mov	r0, r6
 8017416:	f7ff ffbd 	bl	8017394 <__sinit>
 801741a:	3648      	adds	r6, #72	; 0x48
 801741c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8017420:	3b01      	subs	r3, #1
 8017422:	d503      	bpl.n	801742c <__sfp+0x28>
 8017424:	6833      	ldr	r3, [r6, #0]
 8017426:	b30b      	cbz	r3, 801746c <__sfp+0x68>
 8017428:	6836      	ldr	r6, [r6, #0]
 801742a:	e7f7      	b.n	801741c <__sfp+0x18>
 801742c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8017430:	b9d5      	cbnz	r5, 8017468 <__sfp+0x64>
 8017432:	4b16      	ldr	r3, [pc, #88]	; (801748c <__sfp+0x88>)
 8017434:	60e3      	str	r3, [r4, #12]
 8017436:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801743a:	6665      	str	r5, [r4, #100]	; 0x64
 801743c:	f000 f86c 	bl	8017518 <__retarget_lock_init_recursive>
 8017440:	f7ff ff96 	bl	8017370 <__sfp_lock_release>
 8017444:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8017448:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801744c:	6025      	str	r5, [r4, #0]
 801744e:	61a5      	str	r5, [r4, #24]
 8017450:	2208      	movs	r2, #8
 8017452:	4629      	mov	r1, r5
 8017454:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8017458:	f000 f87f 	bl	801755a <memset>
 801745c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8017460:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8017464:	4620      	mov	r0, r4
 8017466:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017468:	3468      	adds	r4, #104	; 0x68
 801746a:	e7d9      	b.n	8017420 <__sfp+0x1c>
 801746c:	2104      	movs	r1, #4
 801746e:	4638      	mov	r0, r7
 8017470:	f7ff ff62 	bl	8017338 <__sfmoreglue>
 8017474:	4604      	mov	r4, r0
 8017476:	6030      	str	r0, [r6, #0]
 8017478:	2800      	cmp	r0, #0
 801747a:	d1d5      	bne.n	8017428 <__sfp+0x24>
 801747c:	f7ff ff78 	bl	8017370 <__sfp_lock_release>
 8017480:	230c      	movs	r3, #12
 8017482:	603b      	str	r3, [r7, #0]
 8017484:	e7ee      	b.n	8017464 <__sfp+0x60>
 8017486:	bf00      	nop
 8017488:	0801c018 	.word	0x0801c018
 801748c:	ffff0001 	.word	0xffff0001

08017490 <_fwalk_reent>:
 8017490:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017494:	4606      	mov	r6, r0
 8017496:	4688      	mov	r8, r1
 8017498:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801749c:	2700      	movs	r7, #0
 801749e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80174a2:	f1b9 0901 	subs.w	r9, r9, #1
 80174a6:	d505      	bpl.n	80174b4 <_fwalk_reent+0x24>
 80174a8:	6824      	ldr	r4, [r4, #0]
 80174aa:	2c00      	cmp	r4, #0
 80174ac:	d1f7      	bne.n	801749e <_fwalk_reent+0xe>
 80174ae:	4638      	mov	r0, r7
 80174b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80174b4:	89ab      	ldrh	r3, [r5, #12]
 80174b6:	2b01      	cmp	r3, #1
 80174b8:	d907      	bls.n	80174ca <_fwalk_reent+0x3a>
 80174ba:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80174be:	3301      	adds	r3, #1
 80174c0:	d003      	beq.n	80174ca <_fwalk_reent+0x3a>
 80174c2:	4629      	mov	r1, r5
 80174c4:	4630      	mov	r0, r6
 80174c6:	47c0      	blx	r8
 80174c8:	4307      	orrs	r7, r0
 80174ca:	3568      	adds	r5, #104	; 0x68
 80174cc:	e7e9      	b.n	80174a2 <_fwalk_reent+0x12>
	...

080174d0 <__libc_init_array>:
 80174d0:	b570      	push	{r4, r5, r6, lr}
 80174d2:	4d0d      	ldr	r5, [pc, #52]	; (8017508 <__libc_init_array+0x38>)
 80174d4:	4c0d      	ldr	r4, [pc, #52]	; (801750c <__libc_init_array+0x3c>)
 80174d6:	1b64      	subs	r4, r4, r5
 80174d8:	10a4      	asrs	r4, r4, #2
 80174da:	2600      	movs	r6, #0
 80174dc:	42a6      	cmp	r6, r4
 80174de:	d109      	bne.n	80174f4 <__libc_init_array+0x24>
 80174e0:	4d0b      	ldr	r5, [pc, #44]	; (8017510 <__libc_init_array+0x40>)
 80174e2:	4c0c      	ldr	r4, [pc, #48]	; (8017514 <__libc_init_array+0x44>)
 80174e4:	f001 f802 	bl	80184ec <_init>
 80174e8:	1b64      	subs	r4, r4, r5
 80174ea:	10a4      	asrs	r4, r4, #2
 80174ec:	2600      	movs	r6, #0
 80174ee:	42a6      	cmp	r6, r4
 80174f0:	d105      	bne.n	80174fe <__libc_init_array+0x2e>
 80174f2:	bd70      	pop	{r4, r5, r6, pc}
 80174f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80174f8:	4798      	blx	r3
 80174fa:	3601      	adds	r6, #1
 80174fc:	e7ee      	b.n	80174dc <__libc_init_array+0xc>
 80174fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8017502:	4798      	blx	r3
 8017504:	3601      	adds	r6, #1
 8017506:	e7f2      	b.n	80174ee <__libc_init_array+0x1e>
 8017508:	0801c108 	.word	0x0801c108
 801750c:	0801c108 	.word	0x0801c108
 8017510:	0801c108 	.word	0x0801c108
 8017514:	0801c10c 	.word	0x0801c10c

08017518 <__retarget_lock_init_recursive>:
 8017518:	4770      	bx	lr

0801751a <__retarget_lock_acquire_recursive>:
 801751a:	4770      	bx	lr

0801751c <__retarget_lock_release_recursive>:
 801751c:	4770      	bx	lr

0801751e <memcmp>:
 801751e:	b510      	push	{r4, lr}
 8017520:	3901      	subs	r1, #1
 8017522:	4402      	add	r2, r0
 8017524:	4290      	cmp	r0, r2
 8017526:	d101      	bne.n	801752c <memcmp+0xe>
 8017528:	2000      	movs	r0, #0
 801752a:	e005      	b.n	8017538 <memcmp+0x1a>
 801752c:	7803      	ldrb	r3, [r0, #0]
 801752e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8017532:	42a3      	cmp	r3, r4
 8017534:	d001      	beq.n	801753a <memcmp+0x1c>
 8017536:	1b18      	subs	r0, r3, r4
 8017538:	bd10      	pop	{r4, pc}
 801753a:	3001      	adds	r0, #1
 801753c:	e7f2      	b.n	8017524 <memcmp+0x6>

0801753e <memcpy>:
 801753e:	440a      	add	r2, r1
 8017540:	4291      	cmp	r1, r2
 8017542:	f100 33ff 	add.w	r3, r0, #4294967295
 8017546:	d100      	bne.n	801754a <memcpy+0xc>
 8017548:	4770      	bx	lr
 801754a:	b510      	push	{r4, lr}
 801754c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017550:	f803 4f01 	strb.w	r4, [r3, #1]!
 8017554:	4291      	cmp	r1, r2
 8017556:	d1f9      	bne.n	801754c <memcpy+0xe>
 8017558:	bd10      	pop	{r4, pc}

0801755a <memset>:
 801755a:	4402      	add	r2, r0
 801755c:	4603      	mov	r3, r0
 801755e:	4293      	cmp	r3, r2
 8017560:	d100      	bne.n	8017564 <memset+0xa>
 8017562:	4770      	bx	lr
 8017564:	f803 1b01 	strb.w	r1, [r3], #1
 8017568:	e7f9      	b.n	801755e <memset+0x4>
	...

0801756c <sbrk_aligned>:
 801756c:	b570      	push	{r4, r5, r6, lr}
 801756e:	4e0e      	ldr	r6, [pc, #56]	; (80175a8 <sbrk_aligned+0x3c>)
 8017570:	460c      	mov	r4, r1
 8017572:	6831      	ldr	r1, [r6, #0]
 8017574:	4605      	mov	r5, r0
 8017576:	b911      	cbnz	r1, 801757e <sbrk_aligned+0x12>
 8017578:	f000 f94c 	bl	8017814 <_sbrk_r>
 801757c:	6030      	str	r0, [r6, #0]
 801757e:	4621      	mov	r1, r4
 8017580:	4628      	mov	r0, r5
 8017582:	f000 f947 	bl	8017814 <_sbrk_r>
 8017586:	1c43      	adds	r3, r0, #1
 8017588:	d00a      	beq.n	80175a0 <sbrk_aligned+0x34>
 801758a:	1cc4      	adds	r4, r0, #3
 801758c:	f024 0403 	bic.w	r4, r4, #3
 8017590:	42a0      	cmp	r0, r4
 8017592:	d007      	beq.n	80175a4 <sbrk_aligned+0x38>
 8017594:	1a21      	subs	r1, r4, r0
 8017596:	4628      	mov	r0, r5
 8017598:	f000 f93c 	bl	8017814 <_sbrk_r>
 801759c:	3001      	adds	r0, #1
 801759e:	d101      	bne.n	80175a4 <sbrk_aligned+0x38>
 80175a0:	f04f 34ff 	mov.w	r4, #4294967295
 80175a4:	4620      	mov	r0, r4
 80175a6:	bd70      	pop	{r4, r5, r6, pc}
 80175a8:	20010ad4 	.word	0x20010ad4

080175ac <_malloc_r>:
 80175ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80175b0:	1ccd      	adds	r5, r1, #3
 80175b2:	f025 0503 	bic.w	r5, r5, #3
 80175b6:	3508      	adds	r5, #8
 80175b8:	2d0c      	cmp	r5, #12
 80175ba:	bf38      	it	cc
 80175bc:	250c      	movcc	r5, #12
 80175be:	2d00      	cmp	r5, #0
 80175c0:	4607      	mov	r7, r0
 80175c2:	db01      	blt.n	80175c8 <_malloc_r+0x1c>
 80175c4:	42a9      	cmp	r1, r5
 80175c6:	d905      	bls.n	80175d4 <_malloc_r+0x28>
 80175c8:	230c      	movs	r3, #12
 80175ca:	603b      	str	r3, [r7, #0]
 80175cc:	2600      	movs	r6, #0
 80175ce:	4630      	mov	r0, r6
 80175d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80175d4:	4e2e      	ldr	r6, [pc, #184]	; (8017690 <_malloc_r+0xe4>)
 80175d6:	f000 fa9f 	bl	8017b18 <__malloc_lock>
 80175da:	6833      	ldr	r3, [r6, #0]
 80175dc:	461c      	mov	r4, r3
 80175de:	bb34      	cbnz	r4, 801762e <_malloc_r+0x82>
 80175e0:	4629      	mov	r1, r5
 80175e2:	4638      	mov	r0, r7
 80175e4:	f7ff ffc2 	bl	801756c <sbrk_aligned>
 80175e8:	1c43      	adds	r3, r0, #1
 80175ea:	4604      	mov	r4, r0
 80175ec:	d14d      	bne.n	801768a <_malloc_r+0xde>
 80175ee:	6834      	ldr	r4, [r6, #0]
 80175f0:	4626      	mov	r6, r4
 80175f2:	2e00      	cmp	r6, #0
 80175f4:	d140      	bne.n	8017678 <_malloc_r+0xcc>
 80175f6:	6823      	ldr	r3, [r4, #0]
 80175f8:	4631      	mov	r1, r6
 80175fa:	4638      	mov	r0, r7
 80175fc:	eb04 0803 	add.w	r8, r4, r3
 8017600:	f000 f908 	bl	8017814 <_sbrk_r>
 8017604:	4580      	cmp	r8, r0
 8017606:	d13a      	bne.n	801767e <_malloc_r+0xd2>
 8017608:	6821      	ldr	r1, [r4, #0]
 801760a:	3503      	adds	r5, #3
 801760c:	1a6d      	subs	r5, r5, r1
 801760e:	f025 0503 	bic.w	r5, r5, #3
 8017612:	3508      	adds	r5, #8
 8017614:	2d0c      	cmp	r5, #12
 8017616:	bf38      	it	cc
 8017618:	250c      	movcc	r5, #12
 801761a:	4629      	mov	r1, r5
 801761c:	4638      	mov	r0, r7
 801761e:	f7ff ffa5 	bl	801756c <sbrk_aligned>
 8017622:	3001      	adds	r0, #1
 8017624:	d02b      	beq.n	801767e <_malloc_r+0xd2>
 8017626:	6823      	ldr	r3, [r4, #0]
 8017628:	442b      	add	r3, r5
 801762a:	6023      	str	r3, [r4, #0]
 801762c:	e00e      	b.n	801764c <_malloc_r+0xa0>
 801762e:	6822      	ldr	r2, [r4, #0]
 8017630:	1b52      	subs	r2, r2, r5
 8017632:	d41e      	bmi.n	8017672 <_malloc_r+0xc6>
 8017634:	2a0b      	cmp	r2, #11
 8017636:	d916      	bls.n	8017666 <_malloc_r+0xba>
 8017638:	1961      	adds	r1, r4, r5
 801763a:	42a3      	cmp	r3, r4
 801763c:	6025      	str	r5, [r4, #0]
 801763e:	bf18      	it	ne
 8017640:	6059      	strne	r1, [r3, #4]
 8017642:	6863      	ldr	r3, [r4, #4]
 8017644:	bf08      	it	eq
 8017646:	6031      	streq	r1, [r6, #0]
 8017648:	5162      	str	r2, [r4, r5]
 801764a:	604b      	str	r3, [r1, #4]
 801764c:	4638      	mov	r0, r7
 801764e:	f104 060b 	add.w	r6, r4, #11
 8017652:	f000 fa67 	bl	8017b24 <__malloc_unlock>
 8017656:	f026 0607 	bic.w	r6, r6, #7
 801765a:	1d23      	adds	r3, r4, #4
 801765c:	1af2      	subs	r2, r6, r3
 801765e:	d0b6      	beq.n	80175ce <_malloc_r+0x22>
 8017660:	1b9b      	subs	r3, r3, r6
 8017662:	50a3      	str	r3, [r4, r2]
 8017664:	e7b3      	b.n	80175ce <_malloc_r+0x22>
 8017666:	6862      	ldr	r2, [r4, #4]
 8017668:	42a3      	cmp	r3, r4
 801766a:	bf0c      	ite	eq
 801766c:	6032      	streq	r2, [r6, #0]
 801766e:	605a      	strne	r2, [r3, #4]
 8017670:	e7ec      	b.n	801764c <_malloc_r+0xa0>
 8017672:	4623      	mov	r3, r4
 8017674:	6864      	ldr	r4, [r4, #4]
 8017676:	e7b2      	b.n	80175de <_malloc_r+0x32>
 8017678:	4634      	mov	r4, r6
 801767a:	6876      	ldr	r6, [r6, #4]
 801767c:	e7b9      	b.n	80175f2 <_malloc_r+0x46>
 801767e:	230c      	movs	r3, #12
 8017680:	603b      	str	r3, [r7, #0]
 8017682:	4638      	mov	r0, r7
 8017684:	f000 fa4e 	bl	8017b24 <__malloc_unlock>
 8017688:	e7a1      	b.n	80175ce <_malloc_r+0x22>
 801768a:	6025      	str	r5, [r4, #0]
 801768c:	e7de      	b.n	801764c <_malloc_r+0xa0>
 801768e:	bf00      	nop
 8017690:	20010ad0 	.word	0x20010ad0

08017694 <iprintf>:
 8017694:	b40f      	push	{r0, r1, r2, r3}
 8017696:	4b0a      	ldr	r3, [pc, #40]	; (80176c0 <iprintf+0x2c>)
 8017698:	b513      	push	{r0, r1, r4, lr}
 801769a:	681c      	ldr	r4, [r3, #0]
 801769c:	b124      	cbz	r4, 80176a8 <iprintf+0x14>
 801769e:	69a3      	ldr	r3, [r4, #24]
 80176a0:	b913      	cbnz	r3, 80176a8 <iprintf+0x14>
 80176a2:	4620      	mov	r0, r4
 80176a4:	f7ff fe76 	bl	8017394 <__sinit>
 80176a8:	ab05      	add	r3, sp, #20
 80176aa:	9a04      	ldr	r2, [sp, #16]
 80176ac:	68a1      	ldr	r1, [r4, #8]
 80176ae:	9301      	str	r3, [sp, #4]
 80176b0:	4620      	mov	r0, r4
 80176b2:	f000 fab3 	bl	8017c1c <_vfiprintf_r>
 80176b6:	b002      	add	sp, #8
 80176b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80176bc:	b004      	add	sp, #16
 80176be:	4770      	bx	lr
 80176c0:	20000034 	.word	0x20000034

080176c4 <rand>:
 80176c4:	4b16      	ldr	r3, [pc, #88]	; (8017720 <rand+0x5c>)
 80176c6:	b510      	push	{r4, lr}
 80176c8:	681c      	ldr	r4, [r3, #0]
 80176ca:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80176cc:	b9b3      	cbnz	r3, 80176fc <rand+0x38>
 80176ce:	2018      	movs	r0, #24
 80176d0:	f000 fa1a 	bl	8017b08 <malloc>
 80176d4:	63a0      	str	r0, [r4, #56]	; 0x38
 80176d6:	b928      	cbnz	r0, 80176e4 <rand+0x20>
 80176d8:	4602      	mov	r2, r0
 80176da:	4b12      	ldr	r3, [pc, #72]	; (8017724 <rand+0x60>)
 80176dc:	4812      	ldr	r0, [pc, #72]	; (8017728 <rand+0x64>)
 80176de:	214e      	movs	r1, #78	; 0x4e
 80176e0:	f000 f8fe 	bl	80178e0 <__assert_func>
 80176e4:	4a11      	ldr	r2, [pc, #68]	; (801772c <rand+0x68>)
 80176e6:	4b12      	ldr	r3, [pc, #72]	; (8017730 <rand+0x6c>)
 80176e8:	e9c0 2300 	strd	r2, r3, [r0]
 80176ec:	4b11      	ldr	r3, [pc, #68]	; (8017734 <rand+0x70>)
 80176ee:	6083      	str	r3, [r0, #8]
 80176f0:	230b      	movs	r3, #11
 80176f2:	8183      	strh	r3, [r0, #12]
 80176f4:	2201      	movs	r2, #1
 80176f6:	2300      	movs	r3, #0
 80176f8:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80176fc:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 80176fe:	4a0e      	ldr	r2, [pc, #56]	; (8017738 <rand+0x74>)
 8017700:	6920      	ldr	r0, [r4, #16]
 8017702:	6963      	ldr	r3, [r4, #20]
 8017704:	490d      	ldr	r1, [pc, #52]	; (801773c <rand+0x78>)
 8017706:	4342      	muls	r2, r0
 8017708:	fb01 2203 	mla	r2, r1, r3, r2
 801770c:	fba0 0101 	umull	r0, r1, r0, r1
 8017710:	1c43      	adds	r3, r0, #1
 8017712:	eb42 0001 	adc.w	r0, r2, r1
 8017716:	e9c4 3004 	strd	r3, r0, [r4, #16]
 801771a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801771e:	bd10      	pop	{r4, pc}
 8017720:	20000034 	.word	0x20000034
 8017724:	0801c01c 	.word	0x0801c01c
 8017728:	0801c033 	.word	0x0801c033
 801772c:	abcd330e 	.word	0xabcd330e
 8017730:	e66d1234 	.word	0xe66d1234
 8017734:	0005deec 	.word	0x0005deec
 8017738:	5851f42d 	.word	0x5851f42d
 801773c:	4c957f2d 	.word	0x4c957f2d

08017740 <cleanup_glue>:
 8017740:	b538      	push	{r3, r4, r5, lr}
 8017742:	460c      	mov	r4, r1
 8017744:	6809      	ldr	r1, [r1, #0]
 8017746:	4605      	mov	r5, r0
 8017748:	b109      	cbz	r1, 801774e <cleanup_glue+0xe>
 801774a:	f7ff fff9 	bl	8017740 <cleanup_glue>
 801774e:	4621      	mov	r1, r4
 8017750:	4628      	mov	r0, r5
 8017752:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017756:	f000 b9eb 	b.w	8017b30 <_free_r>
	...

0801775c <_reclaim_reent>:
 801775c:	4b2c      	ldr	r3, [pc, #176]	; (8017810 <_reclaim_reent+0xb4>)
 801775e:	681b      	ldr	r3, [r3, #0]
 8017760:	4283      	cmp	r3, r0
 8017762:	b570      	push	{r4, r5, r6, lr}
 8017764:	4604      	mov	r4, r0
 8017766:	d051      	beq.n	801780c <_reclaim_reent+0xb0>
 8017768:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801776a:	b143      	cbz	r3, 801777e <_reclaim_reent+0x22>
 801776c:	68db      	ldr	r3, [r3, #12]
 801776e:	2b00      	cmp	r3, #0
 8017770:	d14a      	bne.n	8017808 <_reclaim_reent+0xac>
 8017772:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017774:	6819      	ldr	r1, [r3, #0]
 8017776:	b111      	cbz	r1, 801777e <_reclaim_reent+0x22>
 8017778:	4620      	mov	r0, r4
 801777a:	f000 f9d9 	bl	8017b30 <_free_r>
 801777e:	6961      	ldr	r1, [r4, #20]
 8017780:	b111      	cbz	r1, 8017788 <_reclaim_reent+0x2c>
 8017782:	4620      	mov	r0, r4
 8017784:	f000 f9d4 	bl	8017b30 <_free_r>
 8017788:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801778a:	b111      	cbz	r1, 8017792 <_reclaim_reent+0x36>
 801778c:	4620      	mov	r0, r4
 801778e:	f000 f9cf 	bl	8017b30 <_free_r>
 8017792:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8017794:	b111      	cbz	r1, 801779c <_reclaim_reent+0x40>
 8017796:	4620      	mov	r0, r4
 8017798:	f000 f9ca 	bl	8017b30 <_free_r>
 801779c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 801779e:	b111      	cbz	r1, 80177a6 <_reclaim_reent+0x4a>
 80177a0:	4620      	mov	r0, r4
 80177a2:	f000 f9c5 	bl	8017b30 <_free_r>
 80177a6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80177a8:	b111      	cbz	r1, 80177b0 <_reclaim_reent+0x54>
 80177aa:	4620      	mov	r0, r4
 80177ac:	f000 f9c0 	bl	8017b30 <_free_r>
 80177b0:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80177b2:	b111      	cbz	r1, 80177ba <_reclaim_reent+0x5e>
 80177b4:	4620      	mov	r0, r4
 80177b6:	f000 f9bb 	bl	8017b30 <_free_r>
 80177ba:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80177bc:	b111      	cbz	r1, 80177c4 <_reclaim_reent+0x68>
 80177be:	4620      	mov	r0, r4
 80177c0:	f000 f9b6 	bl	8017b30 <_free_r>
 80177c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80177c6:	b111      	cbz	r1, 80177ce <_reclaim_reent+0x72>
 80177c8:	4620      	mov	r0, r4
 80177ca:	f000 f9b1 	bl	8017b30 <_free_r>
 80177ce:	69a3      	ldr	r3, [r4, #24]
 80177d0:	b1e3      	cbz	r3, 801780c <_reclaim_reent+0xb0>
 80177d2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80177d4:	4620      	mov	r0, r4
 80177d6:	4798      	blx	r3
 80177d8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80177da:	b1b9      	cbz	r1, 801780c <_reclaim_reent+0xb0>
 80177dc:	4620      	mov	r0, r4
 80177de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80177e2:	f7ff bfad 	b.w	8017740 <cleanup_glue>
 80177e6:	5949      	ldr	r1, [r1, r5]
 80177e8:	b941      	cbnz	r1, 80177fc <_reclaim_reent+0xa0>
 80177ea:	3504      	adds	r5, #4
 80177ec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80177ee:	2d80      	cmp	r5, #128	; 0x80
 80177f0:	68d9      	ldr	r1, [r3, #12]
 80177f2:	d1f8      	bne.n	80177e6 <_reclaim_reent+0x8a>
 80177f4:	4620      	mov	r0, r4
 80177f6:	f000 f99b 	bl	8017b30 <_free_r>
 80177fa:	e7ba      	b.n	8017772 <_reclaim_reent+0x16>
 80177fc:	680e      	ldr	r6, [r1, #0]
 80177fe:	4620      	mov	r0, r4
 8017800:	f000 f996 	bl	8017b30 <_free_r>
 8017804:	4631      	mov	r1, r6
 8017806:	e7ef      	b.n	80177e8 <_reclaim_reent+0x8c>
 8017808:	2500      	movs	r5, #0
 801780a:	e7ef      	b.n	80177ec <_reclaim_reent+0x90>
 801780c:	bd70      	pop	{r4, r5, r6, pc}
 801780e:	bf00      	nop
 8017810:	20000034 	.word	0x20000034

08017814 <_sbrk_r>:
 8017814:	b538      	push	{r3, r4, r5, lr}
 8017816:	4d06      	ldr	r5, [pc, #24]	; (8017830 <_sbrk_r+0x1c>)
 8017818:	2300      	movs	r3, #0
 801781a:	4604      	mov	r4, r0
 801781c:	4608      	mov	r0, r1
 801781e:	602b      	str	r3, [r5, #0]
 8017820:	f7e9 fa28 	bl	8000c74 <_sbrk>
 8017824:	1c43      	adds	r3, r0, #1
 8017826:	d102      	bne.n	801782e <_sbrk_r+0x1a>
 8017828:	682b      	ldr	r3, [r5, #0]
 801782a:	b103      	cbz	r3, 801782e <_sbrk_r+0x1a>
 801782c:	6023      	str	r3, [r4, #0]
 801782e:	bd38      	pop	{r3, r4, r5, pc}
 8017830:	20010ad8 	.word	0x20010ad8

08017834 <__sread>:
 8017834:	b510      	push	{r4, lr}
 8017836:	460c      	mov	r4, r1
 8017838:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801783c:	f000 fcb2 	bl	80181a4 <_read_r>
 8017840:	2800      	cmp	r0, #0
 8017842:	bfab      	itete	ge
 8017844:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8017846:	89a3      	ldrhlt	r3, [r4, #12]
 8017848:	181b      	addge	r3, r3, r0
 801784a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801784e:	bfac      	ite	ge
 8017850:	6563      	strge	r3, [r4, #84]	; 0x54
 8017852:	81a3      	strhlt	r3, [r4, #12]
 8017854:	bd10      	pop	{r4, pc}

08017856 <__swrite>:
 8017856:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801785a:	461f      	mov	r7, r3
 801785c:	898b      	ldrh	r3, [r1, #12]
 801785e:	05db      	lsls	r3, r3, #23
 8017860:	4605      	mov	r5, r0
 8017862:	460c      	mov	r4, r1
 8017864:	4616      	mov	r6, r2
 8017866:	d505      	bpl.n	8017874 <__swrite+0x1e>
 8017868:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801786c:	2302      	movs	r3, #2
 801786e:	2200      	movs	r2, #0
 8017870:	f000 f938 	bl	8017ae4 <_lseek_r>
 8017874:	89a3      	ldrh	r3, [r4, #12]
 8017876:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801787a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801787e:	81a3      	strh	r3, [r4, #12]
 8017880:	4632      	mov	r2, r6
 8017882:	463b      	mov	r3, r7
 8017884:	4628      	mov	r0, r5
 8017886:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801788a:	f000 b817 	b.w	80178bc <_write_r>

0801788e <__sseek>:
 801788e:	b510      	push	{r4, lr}
 8017890:	460c      	mov	r4, r1
 8017892:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017896:	f000 f925 	bl	8017ae4 <_lseek_r>
 801789a:	1c43      	adds	r3, r0, #1
 801789c:	89a3      	ldrh	r3, [r4, #12]
 801789e:	bf15      	itete	ne
 80178a0:	6560      	strne	r0, [r4, #84]	; 0x54
 80178a2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80178a6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80178aa:	81a3      	strheq	r3, [r4, #12]
 80178ac:	bf18      	it	ne
 80178ae:	81a3      	strhne	r3, [r4, #12]
 80178b0:	bd10      	pop	{r4, pc}

080178b2 <__sclose>:
 80178b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80178b6:	f000 b831 	b.w	801791c <_close_r>
	...

080178bc <_write_r>:
 80178bc:	b538      	push	{r3, r4, r5, lr}
 80178be:	4d07      	ldr	r5, [pc, #28]	; (80178dc <_write_r+0x20>)
 80178c0:	4604      	mov	r4, r0
 80178c2:	4608      	mov	r0, r1
 80178c4:	4611      	mov	r1, r2
 80178c6:	2200      	movs	r2, #0
 80178c8:	602a      	str	r2, [r5, #0]
 80178ca:	461a      	mov	r2, r3
 80178cc:	f7e9 f981 	bl	8000bd2 <_write>
 80178d0:	1c43      	adds	r3, r0, #1
 80178d2:	d102      	bne.n	80178da <_write_r+0x1e>
 80178d4:	682b      	ldr	r3, [r5, #0]
 80178d6:	b103      	cbz	r3, 80178da <_write_r+0x1e>
 80178d8:	6023      	str	r3, [r4, #0]
 80178da:	bd38      	pop	{r3, r4, r5, pc}
 80178dc:	20010ad8 	.word	0x20010ad8

080178e0 <__assert_func>:
 80178e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80178e2:	4614      	mov	r4, r2
 80178e4:	461a      	mov	r2, r3
 80178e6:	4b09      	ldr	r3, [pc, #36]	; (801790c <__assert_func+0x2c>)
 80178e8:	681b      	ldr	r3, [r3, #0]
 80178ea:	4605      	mov	r5, r0
 80178ec:	68d8      	ldr	r0, [r3, #12]
 80178ee:	b14c      	cbz	r4, 8017904 <__assert_func+0x24>
 80178f0:	4b07      	ldr	r3, [pc, #28]	; (8017910 <__assert_func+0x30>)
 80178f2:	9100      	str	r1, [sp, #0]
 80178f4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80178f8:	4906      	ldr	r1, [pc, #24]	; (8017914 <__assert_func+0x34>)
 80178fa:	462b      	mov	r3, r5
 80178fc:	f000 f8e0 	bl	8017ac0 <fiprintf>
 8017900:	f000 fd22 	bl	8018348 <abort>
 8017904:	4b04      	ldr	r3, [pc, #16]	; (8017918 <__assert_func+0x38>)
 8017906:	461c      	mov	r4, r3
 8017908:	e7f3      	b.n	80178f2 <__assert_func+0x12>
 801790a:	bf00      	nop
 801790c:	20000034 	.word	0x20000034
 8017910:	0801c08e 	.word	0x0801c08e
 8017914:	0801c09b 	.word	0x0801c09b
 8017918:	0801c0c9 	.word	0x0801c0c9

0801791c <_close_r>:
 801791c:	b538      	push	{r3, r4, r5, lr}
 801791e:	4d06      	ldr	r5, [pc, #24]	; (8017938 <_close_r+0x1c>)
 8017920:	2300      	movs	r3, #0
 8017922:	4604      	mov	r4, r0
 8017924:	4608      	mov	r0, r1
 8017926:	602b      	str	r3, [r5, #0]
 8017928:	f7e9 f96f 	bl	8000c0a <_close>
 801792c:	1c43      	adds	r3, r0, #1
 801792e:	d102      	bne.n	8017936 <_close_r+0x1a>
 8017930:	682b      	ldr	r3, [r5, #0]
 8017932:	b103      	cbz	r3, 8017936 <_close_r+0x1a>
 8017934:	6023      	str	r3, [r4, #0]
 8017936:	bd38      	pop	{r3, r4, r5, pc}
 8017938:	20010ad8 	.word	0x20010ad8

0801793c <__sflush_r>:
 801793c:	898a      	ldrh	r2, [r1, #12]
 801793e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017942:	4605      	mov	r5, r0
 8017944:	0710      	lsls	r0, r2, #28
 8017946:	460c      	mov	r4, r1
 8017948:	d458      	bmi.n	80179fc <__sflush_r+0xc0>
 801794a:	684b      	ldr	r3, [r1, #4]
 801794c:	2b00      	cmp	r3, #0
 801794e:	dc05      	bgt.n	801795c <__sflush_r+0x20>
 8017950:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8017952:	2b00      	cmp	r3, #0
 8017954:	dc02      	bgt.n	801795c <__sflush_r+0x20>
 8017956:	2000      	movs	r0, #0
 8017958:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801795c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801795e:	2e00      	cmp	r6, #0
 8017960:	d0f9      	beq.n	8017956 <__sflush_r+0x1a>
 8017962:	2300      	movs	r3, #0
 8017964:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8017968:	682f      	ldr	r7, [r5, #0]
 801796a:	602b      	str	r3, [r5, #0]
 801796c:	d032      	beq.n	80179d4 <__sflush_r+0x98>
 801796e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8017970:	89a3      	ldrh	r3, [r4, #12]
 8017972:	075a      	lsls	r2, r3, #29
 8017974:	d505      	bpl.n	8017982 <__sflush_r+0x46>
 8017976:	6863      	ldr	r3, [r4, #4]
 8017978:	1ac0      	subs	r0, r0, r3
 801797a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801797c:	b10b      	cbz	r3, 8017982 <__sflush_r+0x46>
 801797e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8017980:	1ac0      	subs	r0, r0, r3
 8017982:	2300      	movs	r3, #0
 8017984:	4602      	mov	r2, r0
 8017986:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8017988:	6a21      	ldr	r1, [r4, #32]
 801798a:	4628      	mov	r0, r5
 801798c:	47b0      	blx	r6
 801798e:	1c43      	adds	r3, r0, #1
 8017990:	89a3      	ldrh	r3, [r4, #12]
 8017992:	d106      	bne.n	80179a2 <__sflush_r+0x66>
 8017994:	6829      	ldr	r1, [r5, #0]
 8017996:	291d      	cmp	r1, #29
 8017998:	d82c      	bhi.n	80179f4 <__sflush_r+0xb8>
 801799a:	4a2a      	ldr	r2, [pc, #168]	; (8017a44 <__sflush_r+0x108>)
 801799c:	40ca      	lsrs	r2, r1
 801799e:	07d6      	lsls	r6, r2, #31
 80179a0:	d528      	bpl.n	80179f4 <__sflush_r+0xb8>
 80179a2:	2200      	movs	r2, #0
 80179a4:	6062      	str	r2, [r4, #4]
 80179a6:	04d9      	lsls	r1, r3, #19
 80179a8:	6922      	ldr	r2, [r4, #16]
 80179aa:	6022      	str	r2, [r4, #0]
 80179ac:	d504      	bpl.n	80179b8 <__sflush_r+0x7c>
 80179ae:	1c42      	adds	r2, r0, #1
 80179b0:	d101      	bne.n	80179b6 <__sflush_r+0x7a>
 80179b2:	682b      	ldr	r3, [r5, #0]
 80179b4:	b903      	cbnz	r3, 80179b8 <__sflush_r+0x7c>
 80179b6:	6560      	str	r0, [r4, #84]	; 0x54
 80179b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80179ba:	602f      	str	r7, [r5, #0]
 80179bc:	2900      	cmp	r1, #0
 80179be:	d0ca      	beq.n	8017956 <__sflush_r+0x1a>
 80179c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80179c4:	4299      	cmp	r1, r3
 80179c6:	d002      	beq.n	80179ce <__sflush_r+0x92>
 80179c8:	4628      	mov	r0, r5
 80179ca:	f000 f8b1 	bl	8017b30 <_free_r>
 80179ce:	2000      	movs	r0, #0
 80179d0:	6360      	str	r0, [r4, #52]	; 0x34
 80179d2:	e7c1      	b.n	8017958 <__sflush_r+0x1c>
 80179d4:	6a21      	ldr	r1, [r4, #32]
 80179d6:	2301      	movs	r3, #1
 80179d8:	4628      	mov	r0, r5
 80179da:	47b0      	blx	r6
 80179dc:	1c41      	adds	r1, r0, #1
 80179de:	d1c7      	bne.n	8017970 <__sflush_r+0x34>
 80179e0:	682b      	ldr	r3, [r5, #0]
 80179e2:	2b00      	cmp	r3, #0
 80179e4:	d0c4      	beq.n	8017970 <__sflush_r+0x34>
 80179e6:	2b1d      	cmp	r3, #29
 80179e8:	d001      	beq.n	80179ee <__sflush_r+0xb2>
 80179ea:	2b16      	cmp	r3, #22
 80179ec:	d101      	bne.n	80179f2 <__sflush_r+0xb6>
 80179ee:	602f      	str	r7, [r5, #0]
 80179f0:	e7b1      	b.n	8017956 <__sflush_r+0x1a>
 80179f2:	89a3      	ldrh	r3, [r4, #12]
 80179f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80179f8:	81a3      	strh	r3, [r4, #12]
 80179fa:	e7ad      	b.n	8017958 <__sflush_r+0x1c>
 80179fc:	690f      	ldr	r7, [r1, #16]
 80179fe:	2f00      	cmp	r7, #0
 8017a00:	d0a9      	beq.n	8017956 <__sflush_r+0x1a>
 8017a02:	0793      	lsls	r3, r2, #30
 8017a04:	680e      	ldr	r6, [r1, #0]
 8017a06:	bf08      	it	eq
 8017a08:	694b      	ldreq	r3, [r1, #20]
 8017a0a:	600f      	str	r7, [r1, #0]
 8017a0c:	bf18      	it	ne
 8017a0e:	2300      	movne	r3, #0
 8017a10:	eba6 0807 	sub.w	r8, r6, r7
 8017a14:	608b      	str	r3, [r1, #8]
 8017a16:	f1b8 0f00 	cmp.w	r8, #0
 8017a1a:	dd9c      	ble.n	8017956 <__sflush_r+0x1a>
 8017a1c:	6a21      	ldr	r1, [r4, #32]
 8017a1e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8017a20:	4643      	mov	r3, r8
 8017a22:	463a      	mov	r2, r7
 8017a24:	4628      	mov	r0, r5
 8017a26:	47b0      	blx	r6
 8017a28:	2800      	cmp	r0, #0
 8017a2a:	dc06      	bgt.n	8017a3a <__sflush_r+0xfe>
 8017a2c:	89a3      	ldrh	r3, [r4, #12]
 8017a2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017a32:	81a3      	strh	r3, [r4, #12]
 8017a34:	f04f 30ff 	mov.w	r0, #4294967295
 8017a38:	e78e      	b.n	8017958 <__sflush_r+0x1c>
 8017a3a:	4407      	add	r7, r0
 8017a3c:	eba8 0800 	sub.w	r8, r8, r0
 8017a40:	e7e9      	b.n	8017a16 <__sflush_r+0xda>
 8017a42:	bf00      	nop
 8017a44:	20400001 	.word	0x20400001

08017a48 <_fflush_r>:
 8017a48:	b538      	push	{r3, r4, r5, lr}
 8017a4a:	690b      	ldr	r3, [r1, #16]
 8017a4c:	4605      	mov	r5, r0
 8017a4e:	460c      	mov	r4, r1
 8017a50:	b913      	cbnz	r3, 8017a58 <_fflush_r+0x10>
 8017a52:	2500      	movs	r5, #0
 8017a54:	4628      	mov	r0, r5
 8017a56:	bd38      	pop	{r3, r4, r5, pc}
 8017a58:	b118      	cbz	r0, 8017a62 <_fflush_r+0x1a>
 8017a5a:	6983      	ldr	r3, [r0, #24]
 8017a5c:	b90b      	cbnz	r3, 8017a62 <_fflush_r+0x1a>
 8017a5e:	f7ff fc99 	bl	8017394 <__sinit>
 8017a62:	4b14      	ldr	r3, [pc, #80]	; (8017ab4 <_fflush_r+0x6c>)
 8017a64:	429c      	cmp	r4, r3
 8017a66:	d11b      	bne.n	8017aa0 <_fflush_r+0x58>
 8017a68:	686c      	ldr	r4, [r5, #4]
 8017a6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017a6e:	2b00      	cmp	r3, #0
 8017a70:	d0ef      	beq.n	8017a52 <_fflush_r+0xa>
 8017a72:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8017a74:	07d0      	lsls	r0, r2, #31
 8017a76:	d404      	bmi.n	8017a82 <_fflush_r+0x3a>
 8017a78:	0599      	lsls	r1, r3, #22
 8017a7a:	d402      	bmi.n	8017a82 <_fflush_r+0x3a>
 8017a7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017a7e:	f7ff fd4c 	bl	801751a <__retarget_lock_acquire_recursive>
 8017a82:	4628      	mov	r0, r5
 8017a84:	4621      	mov	r1, r4
 8017a86:	f7ff ff59 	bl	801793c <__sflush_r>
 8017a8a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8017a8c:	07da      	lsls	r2, r3, #31
 8017a8e:	4605      	mov	r5, r0
 8017a90:	d4e0      	bmi.n	8017a54 <_fflush_r+0xc>
 8017a92:	89a3      	ldrh	r3, [r4, #12]
 8017a94:	059b      	lsls	r3, r3, #22
 8017a96:	d4dd      	bmi.n	8017a54 <_fflush_r+0xc>
 8017a98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017a9a:	f7ff fd3f 	bl	801751c <__retarget_lock_release_recursive>
 8017a9e:	e7d9      	b.n	8017a54 <_fflush_r+0xc>
 8017aa0:	4b05      	ldr	r3, [pc, #20]	; (8017ab8 <_fflush_r+0x70>)
 8017aa2:	429c      	cmp	r4, r3
 8017aa4:	d101      	bne.n	8017aaa <_fflush_r+0x62>
 8017aa6:	68ac      	ldr	r4, [r5, #8]
 8017aa8:	e7df      	b.n	8017a6a <_fflush_r+0x22>
 8017aaa:	4b04      	ldr	r3, [pc, #16]	; (8017abc <_fflush_r+0x74>)
 8017aac:	429c      	cmp	r4, r3
 8017aae:	bf08      	it	eq
 8017ab0:	68ec      	ldreq	r4, [r5, #12]
 8017ab2:	e7da      	b.n	8017a6a <_fflush_r+0x22>
 8017ab4:	0801bfd8 	.word	0x0801bfd8
 8017ab8:	0801bff8 	.word	0x0801bff8
 8017abc:	0801bfb8 	.word	0x0801bfb8

08017ac0 <fiprintf>:
 8017ac0:	b40e      	push	{r1, r2, r3}
 8017ac2:	b503      	push	{r0, r1, lr}
 8017ac4:	4601      	mov	r1, r0
 8017ac6:	ab03      	add	r3, sp, #12
 8017ac8:	4805      	ldr	r0, [pc, #20]	; (8017ae0 <fiprintf+0x20>)
 8017aca:	f853 2b04 	ldr.w	r2, [r3], #4
 8017ace:	6800      	ldr	r0, [r0, #0]
 8017ad0:	9301      	str	r3, [sp, #4]
 8017ad2:	f000 f8a3 	bl	8017c1c <_vfiprintf_r>
 8017ad6:	b002      	add	sp, #8
 8017ad8:	f85d eb04 	ldr.w	lr, [sp], #4
 8017adc:	b003      	add	sp, #12
 8017ade:	4770      	bx	lr
 8017ae0:	20000034 	.word	0x20000034

08017ae4 <_lseek_r>:
 8017ae4:	b538      	push	{r3, r4, r5, lr}
 8017ae6:	4d07      	ldr	r5, [pc, #28]	; (8017b04 <_lseek_r+0x20>)
 8017ae8:	4604      	mov	r4, r0
 8017aea:	4608      	mov	r0, r1
 8017aec:	4611      	mov	r1, r2
 8017aee:	2200      	movs	r2, #0
 8017af0:	602a      	str	r2, [r5, #0]
 8017af2:	461a      	mov	r2, r3
 8017af4:	f7e9 f8b0 	bl	8000c58 <_lseek>
 8017af8:	1c43      	adds	r3, r0, #1
 8017afa:	d102      	bne.n	8017b02 <_lseek_r+0x1e>
 8017afc:	682b      	ldr	r3, [r5, #0]
 8017afe:	b103      	cbz	r3, 8017b02 <_lseek_r+0x1e>
 8017b00:	6023      	str	r3, [r4, #0]
 8017b02:	bd38      	pop	{r3, r4, r5, pc}
 8017b04:	20010ad8 	.word	0x20010ad8

08017b08 <malloc>:
 8017b08:	4b02      	ldr	r3, [pc, #8]	; (8017b14 <malloc+0xc>)
 8017b0a:	4601      	mov	r1, r0
 8017b0c:	6818      	ldr	r0, [r3, #0]
 8017b0e:	f7ff bd4d 	b.w	80175ac <_malloc_r>
 8017b12:	bf00      	nop
 8017b14:	20000034 	.word	0x20000034

08017b18 <__malloc_lock>:
 8017b18:	4801      	ldr	r0, [pc, #4]	; (8017b20 <__malloc_lock+0x8>)
 8017b1a:	f7ff bcfe 	b.w	801751a <__retarget_lock_acquire_recursive>
 8017b1e:	bf00      	nop
 8017b20:	20010acc 	.word	0x20010acc

08017b24 <__malloc_unlock>:
 8017b24:	4801      	ldr	r0, [pc, #4]	; (8017b2c <__malloc_unlock+0x8>)
 8017b26:	f7ff bcf9 	b.w	801751c <__retarget_lock_release_recursive>
 8017b2a:	bf00      	nop
 8017b2c:	20010acc 	.word	0x20010acc

08017b30 <_free_r>:
 8017b30:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017b32:	2900      	cmp	r1, #0
 8017b34:	d044      	beq.n	8017bc0 <_free_r+0x90>
 8017b36:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017b3a:	9001      	str	r0, [sp, #4]
 8017b3c:	2b00      	cmp	r3, #0
 8017b3e:	f1a1 0404 	sub.w	r4, r1, #4
 8017b42:	bfb8      	it	lt
 8017b44:	18e4      	addlt	r4, r4, r3
 8017b46:	f7ff ffe7 	bl	8017b18 <__malloc_lock>
 8017b4a:	4a1e      	ldr	r2, [pc, #120]	; (8017bc4 <_free_r+0x94>)
 8017b4c:	9801      	ldr	r0, [sp, #4]
 8017b4e:	6813      	ldr	r3, [r2, #0]
 8017b50:	b933      	cbnz	r3, 8017b60 <_free_r+0x30>
 8017b52:	6063      	str	r3, [r4, #4]
 8017b54:	6014      	str	r4, [r2, #0]
 8017b56:	b003      	add	sp, #12
 8017b58:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017b5c:	f7ff bfe2 	b.w	8017b24 <__malloc_unlock>
 8017b60:	42a3      	cmp	r3, r4
 8017b62:	d908      	bls.n	8017b76 <_free_r+0x46>
 8017b64:	6825      	ldr	r5, [r4, #0]
 8017b66:	1961      	adds	r1, r4, r5
 8017b68:	428b      	cmp	r3, r1
 8017b6a:	bf01      	itttt	eq
 8017b6c:	6819      	ldreq	r1, [r3, #0]
 8017b6e:	685b      	ldreq	r3, [r3, #4]
 8017b70:	1949      	addeq	r1, r1, r5
 8017b72:	6021      	streq	r1, [r4, #0]
 8017b74:	e7ed      	b.n	8017b52 <_free_r+0x22>
 8017b76:	461a      	mov	r2, r3
 8017b78:	685b      	ldr	r3, [r3, #4]
 8017b7a:	b10b      	cbz	r3, 8017b80 <_free_r+0x50>
 8017b7c:	42a3      	cmp	r3, r4
 8017b7e:	d9fa      	bls.n	8017b76 <_free_r+0x46>
 8017b80:	6811      	ldr	r1, [r2, #0]
 8017b82:	1855      	adds	r5, r2, r1
 8017b84:	42a5      	cmp	r5, r4
 8017b86:	d10b      	bne.n	8017ba0 <_free_r+0x70>
 8017b88:	6824      	ldr	r4, [r4, #0]
 8017b8a:	4421      	add	r1, r4
 8017b8c:	1854      	adds	r4, r2, r1
 8017b8e:	42a3      	cmp	r3, r4
 8017b90:	6011      	str	r1, [r2, #0]
 8017b92:	d1e0      	bne.n	8017b56 <_free_r+0x26>
 8017b94:	681c      	ldr	r4, [r3, #0]
 8017b96:	685b      	ldr	r3, [r3, #4]
 8017b98:	6053      	str	r3, [r2, #4]
 8017b9a:	4421      	add	r1, r4
 8017b9c:	6011      	str	r1, [r2, #0]
 8017b9e:	e7da      	b.n	8017b56 <_free_r+0x26>
 8017ba0:	d902      	bls.n	8017ba8 <_free_r+0x78>
 8017ba2:	230c      	movs	r3, #12
 8017ba4:	6003      	str	r3, [r0, #0]
 8017ba6:	e7d6      	b.n	8017b56 <_free_r+0x26>
 8017ba8:	6825      	ldr	r5, [r4, #0]
 8017baa:	1961      	adds	r1, r4, r5
 8017bac:	428b      	cmp	r3, r1
 8017bae:	bf04      	itt	eq
 8017bb0:	6819      	ldreq	r1, [r3, #0]
 8017bb2:	685b      	ldreq	r3, [r3, #4]
 8017bb4:	6063      	str	r3, [r4, #4]
 8017bb6:	bf04      	itt	eq
 8017bb8:	1949      	addeq	r1, r1, r5
 8017bba:	6021      	streq	r1, [r4, #0]
 8017bbc:	6054      	str	r4, [r2, #4]
 8017bbe:	e7ca      	b.n	8017b56 <_free_r+0x26>
 8017bc0:	b003      	add	sp, #12
 8017bc2:	bd30      	pop	{r4, r5, pc}
 8017bc4:	20010ad0 	.word	0x20010ad0

08017bc8 <__sfputc_r>:
 8017bc8:	6893      	ldr	r3, [r2, #8]
 8017bca:	3b01      	subs	r3, #1
 8017bcc:	2b00      	cmp	r3, #0
 8017bce:	b410      	push	{r4}
 8017bd0:	6093      	str	r3, [r2, #8]
 8017bd2:	da08      	bge.n	8017be6 <__sfputc_r+0x1e>
 8017bd4:	6994      	ldr	r4, [r2, #24]
 8017bd6:	42a3      	cmp	r3, r4
 8017bd8:	db01      	blt.n	8017bde <__sfputc_r+0x16>
 8017bda:	290a      	cmp	r1, #10
 8017bdc:	d103      	bne.n	8017be6 <__sfputc_r+0x1e>
 8017bde:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017be2:	f000 baf1 	b.w	80181c8 <__swbuf_r>
 8017be6:	6813      	ldr	r3, [r2, #0]
 8017be8:	1c58      	adds	r0, r3, #1
 8017bea:	6010      	str	r0, [r2, #0]
 8017bec:	7019      	strb	r1, [r3, #0]
 8017bee:	4608      	mov	r0, r1
 8017bf0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017bf4:	4770      	bx	lr

08017bf6 <__sfputs_r>:
 8017bf6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017bf8:	4606      	mov	r6, r0
 8017bfa:	460f      	mov	r7, r1
 8017bfc:	4614      	mov	r4, r2
 8017bfe:	18d5      	adds	r5, r2, r3
 8017c00:	42ac      	cmp	r4, r5
 8017c02:	d101      	bne.n	8017c08 <__sfputs_r+0x12>
 8017c04:	2000      	movs	r0, #0
 8017c06:	e007      	b.n	8017c18 <__sfputs_r+0x22>
 8017c08:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017c0c:	463a      	mov	r2, r7
 8017c0e:	4630      	mov	r0, r6
 8017c10:	f7ff ffda 	bl	8017bc8 <__sfputc_r>
 8017c14:	1c43      	adds	r3, r0, #1
 8017c16:	d1f3      	bne.n	8017c00 <__sfputs_r+0xa>
 8017c18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08017c1c <_vfiprintf_r>:
 8017c1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017c20:	460d      	mov	r5, r1
 8017c22:	b09d      	sub	sp, #116	; 0x74
 8017c24:	4614      	mov	r4, r2
 8017c26:	4698      	mov	r8, r3
 8017c28:	4606      	mov	r6, r0
 8017c2a:	b118      	cbz	r0, 8017c34 <_vfiprintf_r+0x18>
 8017c2c:	6983      	ldr	r3, [r0, #24]
 8017c2e:	b90b      	cbnz	r3, 8017c34 <_vfiprintf_r+0x18>
 8017c30:	f7ff fbb0 	bl	8017394 <__sinit>
 8017c34:	4b89      	ldr	r3, [pc, #548]	; (8017e5c <_vfiprintf_r+0x240>)
 8017c36:	429d      	cmp	r5, r3
 8017c38:	d11b      	bne.n	8017c72 <_vfiprintf_r+0x56>
 8017c3a:	6875      	ldr	r5, [r6, #4]
 8017c3c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017c3e:	07d9      	lsls	r1, r3, #31
 8017c40:	d405      	bmi.n	8017c4e <_vfiprintf_r+0x32>
 8017c42:	89ab      	ldrh	r3, [r5, #12]
 8017c44:	059a      	lsls	r2, r3, #22
 8017c46:	d402      	bmi.n	8017c4e <_vfiprintf_r+0x32>
 8017c48:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017c4a:	f7ff fc66 	bl	801751a <__retarget_lock_acquire_recursive>
 8017c4e:	89ab      	ldrh	r3, [r5, #12]
 8017c50:	071b      	lsls	r3, r3, #28
 8017c52:	d501      	bpl.n	8017c58 <_vfiprintf_r+0x3c>
 8017c54:	692b      	ldr	r3, [r5, #16]
 8017c56:	b9eb      	cbnz	r3, 8017c94 <_vfiprintf_r+0x78>
 8017c58:	4629      	mov	r1, r5
 8017c5a:	4630      	mov	r0, r6
 8017c5c:	f000 fb06 	bl	801826c <__swsetup_r>
 8017c60:	b1c0      	cbz	r0, 8017c94 <_vfiprintf_r+0x78>
 8017c62:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017c64:	07dc      	lsls	r4, r3, #31
 8017c66:	d50e      	bpl.n	8017c86 <_vfiprintf_r+0x6a>
 8017c68:	f04f 30ff 	mov.w	r0, #4294967295
 8017c6c:	b01d      	add	sp, #116	; 0x74
 8017c6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017c72:	4b7b      	ldr	r3, [pc, #492]	; (8017e60 <_vfiprintf_r+0x244>)
 8017c74:	429d      	cmp	r5, r3
 8017c76:	d101      	bne.n	8017c7c <_vfiprintf_r+0x60>
 8017c78:	68b5      	ldr	r5, [r6, #8]
 8017c7a:	e7df      	b.n	8017c3c <_vfiprintf_r+0x20>
 8017c7c:	4b79      	ldr	r3, [pc, #484]	; (8017e64 <_vfiprintf_r+0x248>)
 8017c7e:	429d      	cmp	r5, r3
 8017c80:	bf08      	it	eq
 8017c82:	68f5      	ldreq	r5, [r6, #12]
 8017c84:	e7da      	b.n	8017c3c <_vfiprintf_r+0x20>
 8017c86:	89ab      	ldrh	r3, [r5, #12]
 8017c88:	0598      	lsls	r0, r3, #22
 8017c8a:	d4ed      	bmi.n	8017c68 <_vfiprintf_r+0x4c>
 8017c8c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017c8e:	f7ff fc45 	bl	801751c <__retarget_lock_release_recursive>
 8017c92:	e7e9      	b.n	8017c68 <_vfiprintf_r+0x4c>
 8017c94:	2300      	movs	r3, #0
 8017c96:	9309      	str	r3, [sp, #36]	; 0x24
 8017c98:	2320      	movs	r3, #32
 8017c9a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8017c9e:	f8cd 800c 	str.w	r8, [sp, #12]
 8017ca2:	2330      	movs	r3, #48	; 0x30
 8017ca4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8017e68 <_vfiprintf_r+0x24c>
 8017ca8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8017cac:	f04f 0901 	mov.w	r9, #1
 8017cb0:	4623      	mov	r3, r4
 8017cb2:	469a      	mov	sl, r3
 8017cb4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017cb8:	b10a      	cbz	r2, 8017cbe <_vfiprintf_r+0xa2>
 8017cba:	2a25      	cmp	r2, #37	; 0x25
 8017cbc:	d1f9      	bne.n	8017cb2 <_vfiprintf_r+0x96>
 8017cbe:	ebba 0b04 	subs.w	fp, sl, r4
 8017cc2:	d00b      	beq.n	8017cdc <_vfiprintf_r+0xc0>
 8017cc4:	465b      	mov	r3, fp
 8017cc6:	4622      	mov	r2, r4
 8017cc8:	4629      	mov	r1, r5
 8017cca:	4630      	mov	r0, r6
 8017ccc:	f7ff ff93 	bl	8017bf6 <__sfputs_r>
 8017cd0:	3001      	adds	r0, #1
 8017cd2:	f000 80aa 	beq.w	8017e2a <_vfiprintf_r+0x20e>
 8017cd6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017cd8:	445a      	add	r2, fp
 8017cda:	9209      	str	r2, [sp, #36]	; 0x24
 8017cdc:	f89a 3000 	ldrb.w	r3, [sl]
 8017ce0:	2b00      	cmp	r3, #0
 8017ce2:	f000 80a2 	beq.w	8017e2a <_vfiprintf_r+0x20e>
 8017ce6:	2300      	movs	r3, #0
 8017ce8:	f04f 32ff 	mov.w	r2, #4294967295
 8017cec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017cf0:	f10a 0a01 	add.w	sl, sl, #1
 8017cf4:	9304      	str	r3, [sp, #16]
 8017cf6:	9307      	str	r3, [sp, #28]
 8017cf8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8017cfc:	931a      	str	r3, [sp, #104]	; 0x68
 8017cfe:	4654      	mov	r4, sl
 8017d00:	2205      	movs	r2, #5
 8017d02:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017d06:	4858      	ldr	r0, [pc, #352]	; (8017e68 <_vfiprintf_r+0x24c>)
 8017d08:	f7e8 fa72 	bl	80001f0 <memchr>
 8017d0c:	9a04      	ldr	r2, [sp, #16]
 8017d0e:	b9d8      	cbnz	r0, 8017d48 <_vfiprintf_r+0x12c>
 8017d10:	06d1      	lsls	r1, r2, #27
 8017d12:	bf44      	itt	mi
 8017d14:	2320      	movmi	r3, #32
 8017d16:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017d1a:	0713      	lsls	r3, r2, #28
 8017d1c:	bf44      	itt	mi
 8017d1e:	232b      	movmi	r3, #43	; 0x2b
 8017d20:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017d24:	f89a 3000 	ldrb.w	r3, [sl]
 8017d28:	2b2a      	cmp	r3, #42	; 0x2a
 8017d2a:	d015      	beq.n	8017d58 <_vfiprintf_r+0x13c>
 8017d2c:	9a07      	ldr	r2, [sp, #28]
 8017d2e:	4654      	mov	r4, sl
 8017d30:	2000      	movs	r0, #0
 8017d32:	f04f 0c0a 	mov.w	ip, #10
 8017d36:	4621      	mov	r1, r4
 8017d38:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017d3c:	3b30      	subs	r3, #48	; 0x30
 8017d3e:	2b09      	cmp	r3, #9
 8017d40:	d94e      	bls.n	8017de0 <_vfiprintf_r+0x1c4>
 8017d42:	b1b0      	cbz	r0, 8017d72 <_vfiprintf_r+0x156>
 8017d44:	9207      	str	r2, [sp, #28]
 8017d46:	e014      	b.n	8017d72 <_vfiprintf_r+0x156>
 8017d48:	eba0 0308 	sub.w	r3, r0, r8
 8017d4c:	fa09 f303 	lsl.w	r3, r9, r3
 8017d50:	4313      	orrs	r3, r2
 8017d52:	9304      	str	r3, [sp, #16]
 8017d54:	46a2      	mov	sl, r4
 8017d56:	e7d2      	b.n	8017cfe <_vfiprintf_r+0xe2>
 8017d58:	9b03      	ldr	r3, [sp, #12]
 8017d5a:	1d19      	adds	r1, r3, #4
 8017d5c:	681b      	ldr	r3, [r3, #0]
 8017d5e:	9103      	str	r1, [sp, #12]
 8017d60:	2b00      	cmp	r3, #0
 8017d62:	bfbb      	ittet	lt
 8017d64:	425b      	neglt	r3, r3
 8017d66:	f042 0202 	orrlt.w	r2, r2, #2
 8017d6a:	9307      	strge	r3, [sp, #28]
 8017d6c:	9307      	strlt	r3, [sp, #28]
 8017d6e:	bfb8      	it	lt
 8017d70:	9204      	strlt	r2, [sp, #16]
 8017d72:	7823      	ldrb	r3, [r4, #0]
 8017d74:	2b2e      	cmp	r3, #46	; 0x2e
 8017d76:	d10c      	bne.n	8017d92 <_vfiprintf_r+0x176>
 8017d78:	7863      	ldrb	r3, [r4, #1]
 8017d7a:	2b2a      	cmp	r3, #42	; 0x2a
 8017d7c:	d135      	bne.n	8017dea <_vfiprintf_r+0x1ce>
 8017d7e:	9b03      	ldr	r3, [sp, #12]
 8017d80:	1d1a      	adds	r2, r3, #4
 8017d82:	681b      	ldr	r3, [r3, #0]
 8017d84:	9203      	str	r2, [sp, #12]
 8017d86:	2b00      	cmp	r3, #0
 8017d88:	bfb8      	it	lt
 8017d8a:	f04f 33ff 	movlt.w	r3, #4294967295
 8017d8e:	3402      	adds	r4, #2
 8017d90:	9305      	str	r3, [sp, #20]
 8017d92:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8017e78 <_vfiprintf_r+0x25c>
 8017d96:	7821      	ldrb	r1, [r4, #0]
 8017d98:	2203      	movs	r2, #3
 8017d9a:	4650      	mov	r0, sl
 8017d9c:	f7e8 fa28 	bl	80001f0 <memchr>
 8017da0:	b140      	cbz	r0, 8017db4 <_vfiprintf_r+0x198>
 8017da2:	2340      	movs	r3, #64	; 0x40
 8017da4:	eba0 000a 	sub.w	r0, r0, sl
 8017da8:	fa03 f000 	lsl.w	r0, r3, r0
 8017dac:	9b04      	ldr	r3, [sp, #16]
 8017dae:	4303      	orrs	r3, r0
 8017db0:	3401      	adds	r4, #1
 8017db2:	9304      	str	r3, [sp, #16]
 8017db4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017db8:	482c      	ldr	r0, [pc, #176]	; (8017e6c <_vfiprintf_r+0x250>)
 8017dba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8017dbe:	2206      	movs	r2, #6
 8017dc0:	f7e8 fa16 	bl	80001f0 <memchr>
 8017dc4:	2800      	cmp	r0, #0
 8017dc6:	d03f      	beq.n	8017e48 <_vfiprintf_r+0x22c>
 8017dc8:	4b29      	ldr	r3, [pc, #164]	; (8017e70 <_vfiprintf_r+0x254>)
 8017dca:	bb1b      	cbnz	r3, 8017e14 <_vfiprintf_r+0x1f8>
 8017dcc:	9b03      	ldr	r3, [sp, #12]
 8017dce:	3307      	adds	r3, #7
 8017dd0:	f023 0307 	bic.w	r3, r3, #7
 8017dd4:	3308      	adds	r3, #8
 8017dd6:	9303      	str	r3, [sp, #12]
 8017dd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017dda:	443b      	add	r3, r7
 8017ddc:	9309      	str	r3, [sp, #36]	; 0x24
 8017dde:	e767      	b.n	8017cb0 <_vfiprintf_r+0x94>
 8017de0:	fb0c 3202 	mla	r2, ip, r2, r3
 8017de4:	460c      	mov	r4, r1
 8017de6:	2001      	movs	r0, #1
 8017de8:	e7a5      	b.n	8017d36 <_vfiprintf_r+0x11a>
 8017dea:	2300      	movs	r3, #0
 8017dec:	3401      	adds	r4, #1
 8017dee:	9305      	str	r3, [sp, #20]
 8017df0:	4619      	mov	r1, r3
 8017df2:	f04f 0c0a 	mov.w	ip, #10
 8017df6:	4620      	mov	r0, r4
 8017df8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017dfc:	3a30      	subs	r2, #48	; 0x30
 8017dfe:	2a09      	cmp	r2, #9
 8017e00:	d903      	bls.n	8017e0a <_vfiprintf_r+0x1ee>
 8017e02:	2b00      	cmp	r3, #0
 8017e04:	d0c5      	beq.n	8017d92 <_vfiprintf_r+0x176>
 8017e06:	9105      	str	r1, [sp, #20]
 8017e08:	e7c3      	b.n	8017d92 <_vfiprintf_r+0x176>
 8017e0a:	fb0c 2101 	mla	r1, ip, r1, r2
 8017e0e:	4604      	mov	r4, r0
 8017e10:	2301      	movs	r3, #1
 8017e12:	e7f0      	b.n	8017df6 <_vfiprintf_r+0x1da>
 8017e14:	ab03      	add	r3, sp, #12
 8017e16:	9300      	str	r3, [sp, #0]
 8017e18:	462a      	mov	r2, r5
 8017e1a:	4b16      	ldr	r3, [pc, #88]	; (8017e74 <_vfiprintf_r+0x258>)
 8017e1c:	a904      	add	r1, sp, #16
 8017e1e:	4630      	mov	r0, r6
 8017e20:	f3af 8000 	nop.w
 8017e24:	4607      	mov	r7, r0
 8017e26:	1c78      	adds	r0, r7, #1
 8017e28:	d1d6      	bne.n	8017dd8 <_vfiprintf_r+0x1bc>
 8017e2a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017e2c:	07d9      	lsls	r1, r3, #31
 8017e2e:	d405      	bmi.n	8017e3c <_vfiprintf_r+0x220>
 8017e30:	89ab      	ldrh	r3, [r5, #12]
 8017e32:	059a      	lsls	r2, r3, #22
 8017e34:	d402      	bmi.n	8017e3c <_vfiprintf_r+0x220>
 8017e36:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017e38:	f7ff fb70 	bl	801751c <__retarget_lock_release_recursive>
 8017e3c:	89ab      	ldrh	r3, [r5, #12]
 8017e3e:	065b      	lsls	r3, r3, #25
 8017e40:	f53f af12 	bmi.w	8017c68 <_vfiprintf_r+0x4c>
 8017e44:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017e46:	e711      	b.n	8017c6c <_vfiprintf_r+0x50>
 8017e48:	ab03      	add	r3, sp, #12
 8017e4a:	9300      	str	r3, [sp, #0]
 8017e4c:	462a      	mov	r2, r5
 8017e4e:	4b09      	ldr	r3, [pc, #36]	; (8017e74 <_vfiprintf_r+0x258>)
 8017e50:	a904      	add	r1, sp, #16
 8017e52:	4630      	mov	r0, r6
 8017e54:	f000 f880 	bl	8017f58 <_printf_i>
 8017e58:	e7e4      	b.n	8017e24 <_vfiprintf_r+0x208>
 8017e5a:	bf00      	nop
 8017e5c:	0801bfd8 	.word	0x0801bfd8
 8017e60:	0801bff8 	.word	0x0801bff8
 8017e64:	0801bfb8 	.word	0x0801bfb8
 8017e68:	0801c0ca 	.word	0x0801c0ca
 8017e6c:	0801c0d4 	.word	0x0801c0d4
 8017e70:	00000000 	.word	0x00000000
 8017e74:	08017bf7 	.word	0x08017bf7
 8017e78:	0801c0d0 	.word	0x0801c0d0

08017e7c <_printf_common>:
 8017e7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017e80:	4616      	mov	r6, r2
 8017e82:	4699      	mov	r9, r3
 8017e84:	688a      	ldr	r2, [r1, #8]
 8017e86:	690b      	ldr	r3, [r1, #16]
 8017e88:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8017e8c:	4293      	cmp	r3, r2
 8017e8e:	bfb8      	it	lt
 8017e90:	4613      	movlt	r3, r2
 8017e92:	6033      	str	r3, [r6, #0]
 8017e94:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8017e98:	4607      	mov	r7, r0
 8017e9a:	460c      	mov	r4, r1
 8017e9c:	b10a      	cbz	r2, 8017ea2 <_printf_common+0x26>
 8017e9e:	3301      	adds	r3, #1
 8017ea0:	6033      	str	r3, [r6, #0]
 8017ea2:	6823      	ldr	r3, [r4, #0]
 8017ea4:	0699      	lsls	r1, r3, #26
 8017ea6:	bf42      	ittt	mi
 8017ea8:	6833      	ldrmi	r3, [r6, #0]
 8017eaa:	3302      	addmi	r3, #2
 8017eac:	6033      	strmi	r3, [r6, #0]
 8017eae:	6825      	ldr	r5, [r4, #0]
 8017eb0:	f015 0506 	ands.w	r5, r5, #6
 8017eb4:	d106      	bne.n	8017ec4 <_printf_common+0x48>
 8017eb6:	f104 0a19 	add.w	sl, r4, #25
 8017eba:	68e3      	ldr	r3, [r4, #12]
 8017ebc:	6832      	ldr	r2, [r6, #0]
 8017ebe:	1a9b      	subs	r3, r3, r2
 8017ec0:	42ab      	cmp	r3, r5
 8017ec2:	dc26      	bgt.n	8017f12 <_printf_common+0x96>
 8017ec4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8017ec8:	1e13      	subs	r3, r2, #0
 8017eca:	6822      	ldr	r2, [r4, #0]
 8017ecc:	bf18      	it	ne
 8017ece:	2301      	movne	r3, #1
 8017ed0:	0692      	lsls	r2, r2, #26
 8017ed2:	d42b      	bmi.n	8017f2c <_printf_common+0xb0>
 8017ed4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8017ed8:	4649      	mov	r1, r9
 8017eda:	4638      	mov	r0, r7
 8017edc:	47c0      	blx	r8
 8017ede:	3001      	adds	r0, #1
 8017ee0:	d01e      	beq.n	8017f20 <_printf_common+0xa4>
 8017ee2:	6823      	ldr	r3, [r4, #0]
 8017ee4:	68e5      	ldr	r5, [r4, #12]
 8017ee6:	6832      	ldr	r2, [r6, #0]
 8017ee8:	f003 0306 	and.w	r3, r3, #6
 8017eec:	2b04      	cmp	r3, #4
 8017eee:	bf08      	it	eq
 8017ef0:	1aad      	subeq	r5, r5, r2
 8017ef2:	68a3      	ldr	r3, [r4, #8]
 8017ef4:	6922      	ldr	r2, [r4, #16]
 8017ef6:	bf0c      	ite	eq
 8017ef8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8017efc:	2500      	movne	r5, #0
 8017efe:	4293      	cmp	r3, r2
 8017f00:	bfc4      	itt	gt
 8017f02:	1a9b      	subgt	r3, r3, r2
 8017f04:	18ed      	addgt	r5, r5, r3
 8017f06:	2600      	movs	r6, #0
 8017f08:	341a      	adds	r4, #26
 8017f0a:	42b5      	cmp	r5, r6
 8017f0c:	d11a      	bne.n	8017f44 <_printf_common+0xc8>
 8017f0e:	2000      	movs	r0, #0
 8017f10:	e008      	b.n	8017f24 <_printf_common+0xa8>
 8017f12:	2301      	movs	r3, #1
 8017f14:	4652      	mov	r2, sl
 8017f16:	4649      	mov	r1, r9
 8017f18:	4638      	mov	r0, r7
 8017f1a:	47c0      	blx	r8
 8017f1c:	3001      	adds	r0, #1
 8017f1e:	d103      	bne.n	8017f28 <_printf_common+0xac>
 8017f20:	f04f 30ff 	mov.w	r0, #4294967295
 8017f24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017f28:	3501      	adds	r5, #1
 8017f2a:	e7c6      	b.n	8017eba <_printf_common+0x3e>
 8017f2c:	18e1      	adds	r1, r4, r3
 8017f2e:	1c5a      	adds	r2, r3, #1
 8017f30:	2030      	movs	r0, #48	; 0x30
 8017f32:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8017f36:	4422      	add	r2, r4
 8017f38:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8017f3c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8017f40:	3302      	adds	r3, #2
 8017f42:	e7c7      	b.n	8017ed4 <_printf_common+0x58>
 8017f44:	2301      	movs	r3, #1
 8017f46:	4622      	mov	r2, r4
 8017f48:	4649      	mov	r1, r9
 8017f4a:	4638      	mov	r0, r7
 8017f4c:	47c0      	blx	r8
 8017f4e:	3001      	adds	r0, #1
 8017f50:	d0e6      	beq.n	8017f20 <_printf_common+0xa4>
 8017f52:	3601      	adds	r6, #1
 8017f54:	e7d9      	b.n	8017f0a <_printf_common+0x8e>
	...

08017f58 <_printf_i>:
 8017f58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8017f5c:	7e0f      	ldrb	r7, [r1, #24]
 8017f5e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8017f60:	2f78      	cmp	r7, #120	; 0x78
 8017f62:	4691      	mov	r9, r2
 8017f64:	4680      	mov	r8, r0
 8017f66:	460c      	mov	r4, r1
 8017f68:	469a      	mov	sl, r3
 8017f6a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8017f6e:	d807      	bhi.n	8017f80 <_printf_i+0x28>
 8017f70:	2f62      	cmp	r7, #98	; 0x62
 8017f72:	d80a      	bhi.n	8017f8a <_printf_i+0x32>
 8017f74:	2f00      	cmp	r7, #0
 8017f76:	f000 80d8 	beq.w	801812a <_printf_i+0x1d2>
 8017f7a:	2f58      	cmp	r7, #88	; 0x58
 8017f7c:	f000 80a3 	beq.w	80180c6 <_printf_i+0x16e>
 8017f80:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8017f84:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8017f88:	e03a      	b.n	8018000 <_printf_i+0xa8>
 8017f8a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8017f8e:	2b15      	cmp	r3, #21
 8017f90:	d8f6      	bhi.n	8017f80 <_printf_i+0x28>
 8017f92:	a101      	add	r1, pc, #4	; (adr r1, 8017f98 <_printf_i+0x40>)
 8017f94:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8017f98:	08017ff1 	.word	0x08017ff1
 8017f9c:	08018005 	.word	0x08018005
 8017fa0:	08017f81 	.word	0x08017f81
 8017fa4:	08017f81 	.word	0x08017f81
 8017fa8:	08017f81 	.word	0x08017f81
 8017fac:	08017f81 	.word	0x08017f81
 8017fb0:	08018005 	.word	0x08018005
 8017fb4:	08017f81 	.word	0x08017f81
 8017fb8:	08017f81 	.word	0x08017f81
 8017fbc:	08017f81 	.word	0x08017f81
 8017fc0:	08017f81 	.word	0x08017f81
 8017fc4:	08018111 	.word	0x08018111
 8017fc8:	08018035 	.word	0x08018035
 8017fcc:	080180f3 	.word	0x080180f3
 8017fd0:	08017f81 	.word	0x08017f81
 8017fd4:	08017f81 	.word	0x08017f81
 8017fd8:	08018133 	.word	0x08018133
 8017fdc:	08017f81 	.word	0x08017f81
 8017fe0:	08018035 	.word	0x08018035
 8017fe4:	08017f81 	.word	0x08017f81
 8017fe8:	08017f81 	.word	0x08017f81
 8017fec:	080180fb 	.word	0x080180fb
 8017ff0:	682b      	ldr	r3, [r5, #0]
 8017ff2:	1d1a      	adds	r2, r3, #4
 8017ff4:	681b      	ldr	r3, [r3, #0]
 8017ff6:	602a      	str	r2, [r5, #0]
 8017ff8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8017ffc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8018000:	2301      	movs	r3, #1
 8018002:	e0a3      	b.n	801814c <_printf_i+0x1f4>
 8018004:	6820      	ldr	r0, [r4, #0]
 8018006:	6829      	ldr	r1, [r5, #0]
 8018008:	0606      	lsls	r6, r0, #24
 801800a:	f101 0304 	add.w	r3, r1, #4
 801800e:	d50a      	bpl.n	8018026 <_printf_i+0xce>
 8018010:	680e      	ldr	r6, [r1, #0]
 8018012:	602b      	str	r3, [r5, #0]
 8018014:	2e00      	cmp	r6, #0
 8018016:	da03      	bge.n	8018020 <_printf_i+0xc8>
 8018018:	232d      	movs	r3, #45	; 0x2d
 801801a:	4276      	negs	r6, r6
 801801c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8018020:	485e      	ldr	r0, [pc, #376]	; (801819c <_printf_i+0x244>)
 8018022:	230a      	movs	r3, #10
 8018024:	e019      	b.n	801805a <_printf_i+0x102>
 8018026:	680e      	ldr	r6, [r1, #0]
 8018028:	602b      	str	r3, [r5, #0]
 801802a:	f010 0f40 	tst.w	r0, #64	; 0x40
 801802e:	bf18      	it	ne
 8018030:	b236      	sxthne	r6, r6
 8018032:	e7ef      	b.n	8018014 <_printf_i+0xbc>
 8018034:	682b      	ldr	r3, [r5, #0]
 8018036:	6820      	ldr	r0, [r4, #0]
 8018038:	1d19      	adds	r1, r3, #4
 801803a:	6029      	str	r1, [r5, #0]
 801803c:	0601      	lsls	r1, r0, #24
 801803e:	d501      	bpl.n	8018044 <_printf_i+0xec>
 8018040:	681e      	ldr	r6, [r3, #0]
 8018042:	e002      	b.n	801804a <_printf_i+0xf2>
 8018044:	0646      	lsls	r6, r0, #25
 8018046:	d5fb      	bpl.n	8018040 <_printf_i+0xe8>
 8018048:	881e      	ldrh	r6, [r3, #0]
 801804a:	4854      	ldr	r0, [pc, #336]	; (801819c <_printf_i+0x244>)
 801804c:	2f6f      	cmp	r7, #111	; 0x6f
 801804e:	bf0c      	ite	eq
 8018050:	2308      	moveq	r3, #8
 8018052:	230a      	movne	r3, #10
 8018054:	2100      	movs	r1, #0
 8018056:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801805a:	6865      	ldr	r5, [r4, #4]
 801805c:	60a5      	str	r5, [r4, #8]
 801805e:	2d00      	cmp	r5, #0
 8018060:	bfa2      	ittt	ge
 8018062:	6821      	ldrge	r1, [r4, #0]
 8018064:	f021 0104 	bicge.w	r1, r1, #4
 8018068:	6021      	strge	r1, [r4, #0]
 801806a:	b90e      	cbnz	r6, 8018070 <_printf_i+0x118>
 801806c:	2d00      	cmp	r5, #0
 801806e:	d04d      	beq.n	801810c <_printf_i+0x1b4>
 8018070:	4615      	mov	r5, r2
 8018072:	fbb6 f1f3 	udiv	r1, r6, r3
 8018076:	fb03 6711 	mls	r7, r3, r1, r6
 801807a:	5dc7      	ldrb	r7, [r0, r7]
 801807c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8018080:	4637      	mov	r7, r6
 8018082:	42bb      	cmp	r3, r7
 8018084:	460e      	mov	r6, r1
 8018086:	d9f4      	bls.n	8018072 <_printf_i+0x11a>
 8018088:	2b08      	cmp	r3, #8
 801808a:	d10b      	bne.n	80180a4 <_printf_i+0x14c>
 801808c:	6823      	ldr	r3, [r4, #0]
 801808e:	07de      	lsls	r6, r3, #31
 8018090:	d508      	bpl.n	80180a4 <_printf_i+0x14c>
 8018092:	6923      	ldr	r3, [r4, #16]
 8018094:	6861      	ldr	r1, [r4, #4]
 8018096:	4299      	cmp	r1, r3
 8018098:	bfde      	ittt	le
 801809a:	2330      	movle	r3, #48	; 0x30
 801809c:	f805 3c01 	strble.w	r3, [r5, #-1]
 80180a0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80180a4:	1b52      	subs	r2, r2, r5
 80180a6:	6122      	str	r2, [r4, #16]
 80180a8:	f8cd a000 	str.w	sl, [sp]
 80180ac:	464b      	mov	r3, r9
 80180ae:	aa03      	add	r2, sp, #12
 80180b0:	4621      	mov	r1, r4
 80180b2:	4640      	mov	r0, r8
 80180b4:	f7ff fee2 	bl	8017e7c <_printf_common>
 80180b8:	3001      	adds	r0, #1
 80180ba:	d14c      	bne.n	8018156 <_printf_i+0x1fe>
 80180bc:	f04f 30ff 	mov.w	r0, #4294967295
 80180c0:	b004      	add	sp, #16
 80180c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80180c6:	4835      	ldr	r0, [pc, #212]	; (801819c <_printf_i+0x244>)
 80180c8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80180cc:	6829      	ldr	r1, [r5, #0]
 80180ce:	6823      	ldr	r3, [r4, #0]
 80180d0:	f851 6b04 	ldr.w	r6, [r1], #4
 80180d4:	6029      	str	r1, [r5, #0]
 80180d6:	061d      	lsls	r5, r3, #24
 80180d8:	d514      	bpl.n	8018104 <_printf_i+0x1ac>
 80180da:	07df      	lsls	r7, r3, #31
 80180dc:	bf44      	itt	mi
 80180de:	f043 0320 	orrmi.w	r3, r3, #32
 80180e2:	6023      	strmi	r3, [r4, #0]
 80180e4:	b91e      	cbnz	r6, 80180ee <_printf_i+0x196>
 80180e6:	6823      	ldr	r3, [r4, #0]
 80180e8:	f023 0320 	bic.w	r3, r3, #32
 80180ec:	6023      	str	r3, [r4, #0]
 80180ee:	2310      	movs	r3, #16
 80180f0:	e7b0      	b.n	8018054 <_printf_i+0xfc>
 80180f2:	6823      	ldr	r3, [r4, #0]
 80180f4:	f043 0320 	orr.w	r3, r3, #32
 80180f8:	6023      	str	r3, [r4, #0]
 80180fa:	2378      	movs	r3, #120	; 0x78
 80180fc:	4828      	ldr	r0, [pc, #160]	; (80181a0 <_printf_i+0x248>)
 80180fe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8018102:	e7e3      	b.n	80180cc <_printf_i+0x174>
 8018104:	0659      	lsls	r1, r3, #25
 8018106:	bf48      	it	mi
 8018108:	b2b6      	uxthmi	r6, r6
 801810a:	e7e6      	b.n	80180da <_printf_i+0x182>
 801810c:	4615      	mov	r5, r2
 801810e:	e7bb      	b.n	8018088 <_printf_i+0x130>
 8018110:	682b      	ldr	r3, [r5, #0]
 8018112:	6826      	ldr	r6, [r4, #0]
 8018114:	6961      	ldr	r1, [r4, #20]
 8018116:	1d18      	adds	r0, r3, #4
 8018118:	6028      	str	r0, [r5, #0]
 801811a:	0635      	lsls	r5, r6, #24
 801811c:	681b      	ldr	r3, [r3, #0]
 801811e:	d501      	bpl.n	8018124 <_printf_i+0x1cc>
 8018120:	6019      	str	r1, [r3, #0]
 8018122:	e002      	b.n	801812a <_printf_i+0x1d2>
 8018124:	0670      	lsls	r0, r6, #25
 8018126:	d5fb      	bpl.n	8018120 <_printf_i+0x1c8>
 8018128:	8019      	strh	r1, [r3, #0]
 801812a:	2300      	movs	r3, #0
 801812c:	6123      	str	r3, [r4, #16]
 801812e:	4615      	mov	r5, r2
 8018130:	e7ba      	b.n	80180a8 <_printf_i+0x150>
 8018132:	682b      	ldr	r3, [r5, #0]
 8018134:	1d1a      	adds	r2, r3, #4
 8018136:	602a      	str	r2, [r5, #0]
 8018138:	681d      	ldr	r5, [r3, #0]
 801813a:	6862      	ldr	r2, [r4, #4]
 801813c:	2100      	movs	r1, #0
 801813e:	4628      	mov	r0, r5
 8018140:	f7e8 f856 	bl	80001f0 <memchr>
 8018144:	b108      	cbz	r0, 801814a <_printf_i+0x1f2>
 8018146:	1b40      	subs	r0, r0, r5
 8018148:	6060      	str	r0, [r4, #4]
 801814a:	6863      	ldr	r3, [r4, #4]
 801814c:	6123      	str	r3, [r4, #16]
 801814e:	2300      	movs	r3, #0
 8018150:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8018154:	e7a8      	b.n	80180a8 <_printf_i+0x150>
 8018156:	6923      	ldr	r3, [r4, #16]
 8018158:	462a      	mov	r2, r5
 801815a:	4649      	mov	r1, r9
 801815c:	4640      	mov	r0, r8
 801815e:	47d0      	blx	sl
 8018160:	3001      	adds	r0, #1
 8018162:	d0ab      	beq.n	80180bc <_printf_i+0x164>
 8018164:	6823      	ldr	r3, [r4, #0]
 8018166:	079b      	lsls	r3, r3, #30
 8018168:	d413      	bmi.n	8018192 <_printf_i+0x23a>
 801816a:	68e0      	ldr	r0, [r4, #12]
 801816c:	9b03      	ldr	r3, [sp, #12]
 801816e:	4298      	cmp	r0, r3
 8018170:	bfb8      	it	lt
 8018172:	4618      	movlt	r0, r3
 8018174:	e7a4      	b.n	80180c0 <_printf_i+0x168>
 8018176:	2301      	movs	r3, #1
 8018178:	4632      	mov	r2, r6
 801817a:	4649      	mov	r1, r9
 801817c:	4640      	mov	r0, r8
 801817e:	47d0      	blx	sl
 8018180:	3001      	adds	r0, #1
 8018182:	d09b      	beq.n	80180bc <_printf_i+0x164>
 8018184:	3501      	adds	r5, #1
 8018186:	68e3      	ldr	r3, [r4, #12]
 8018188:	9903      	ldr	r1, [sp, #12]
 801818a:	1a5b      	subs	r3, r3, r1
 801818c:	42ab      	cmp	r3, r5
 801818e:	dcf2      	bgt.n	8018176 <_printf_i+0x21e>
 8018190:	e7eb      	b.n	801816a <_printf_i+0x212>
 8018192:	2500      	movs	r5, #0
 8018194:	f104 0619 	add.w	r6, r4, #25
 8018198:	e7f5      	b.n	8018186 <_printf_i+0x22e>
 801819a:	bf00      	nop
 801819c:	0801c0db 	.word	0x0801c0db
 80181a0:	0801c0ec 	.word	0x0801c0ec

080181a4 <_read_r>:
 80181a4:	b538      	push	{r3, r4, r5, lr}
 80181a6:	4d07      	ldr	r5, [pc, #28]	; (80181c4 <_read_r+0x20>)
 80181a8:	4604      	mov	r4, r0
 80181aa:	4608      	mov	r0, r1
 80181ac:	4611      	mov	r1, r2
 80181ae:	2200      	movs	r2, #0
 80181b0:	602a      	str	r2, [r5, #0]
 80181b2:	461a      	mov	r2, r3
 80181b4:	f7e8 fcf0 	bl	8000b98 <_read>
 80181b8:	1c43      	adds	r3, r0, #1
 80181ba:	d102      	bne.n	80181c2 <_read_r+0x1e>
 80181bc:	682b      	ldr	r3, [r5, #0]
 80181be:	b103      	cbz	r3, 80181c2 <_read_r+0x1e>
 80181c0:	6023      	str	r3, [r4, #0]
 80181c2:	bd38      	pop	{r3, r4, r5, pc}
 80181c4:	20010ad8 	.word	0x20010ad8

080181c8 <__swbuf_r>:
 80181c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80181ca:	460e      	mov	r6, r1
 80181cc:	4614      	mov	r4, r2
 80181ce:	4605      	mov	r5, r0
 80181d0:	b118      	cbz	r0, 80181da <__swbuf_r+0x12>
 80181d2:	6983      	ldr	r3, [r0, #24]
 80181d4:	b90b      	cbnz	r3, 80181da <__swbuf_r+0x12>
 80181d6:	f7ff f8dd 	bl	8017394 <__sinit>
 80181da:	4b21      	ldr	r3, [pc, #132]	; (8018260 <__swbuf_r+0x98>)
 80181dc:	429c      	cmp	r4, r3
 80181de:	d12b      	bne.n	8018238 <__swbuf_r+0x70>
 80181e0:	686c      	ldr	r4, [r5, #4]
 80181e2:	69a3      	ldr	r3, [r4, #24]
 80181e4:	60a3      	str	r3, [r4, #8]
 80181e6:	89a3      	ldrh	r3, [r4, #12]
 80181e8:	071a      	lsls	r2, r3, #28
 80181ea:	d52f      	bpl.n	801824c <__swbuf_r+0x84>
 80181ec:	6923      	ldr	r3, [r4, #16]
 80181ee:	b36b      	cbz	r3, 801824c <__swbuf_r+0x84>
 80181f0:	6923      	ldr	r3, [r4, #16]
 80181f2:	6820      	ldr	r0, [r4, #0]
 80181f4:	1ac0      	subs	r0, r0, r3
 80181f6:	6963      	ldr	r3, [r4, #20]
 80181f8:	b2f6      	uxtb	r6, r6
 80181fa:	4283      	cmp	r3, r0
 80181fc:	4637      	mov	r7, r6
 80181fe:	dc04      	bgt.n	801820a <__swbuf_r+0x42>
 8018200:	4621      	mov	r1, r4
 8018202:	4628      	mov	r0, r5
 8018204:	f7ff fc20 	bl	8017a48 <_fflush_r>
 8018208:	bb30      	cbnz	r0, 8018258 <__swbuf_r+0x90>
 801820a:	68a3      	ldr	r3, [r4, #8]
 801820c:	3b01      	subs	r3, #1
 801820e:	60a3      	str	r3, [r4, #8]
 8018210:	6823      	ldr	r3, [r4, #0]
 8018212:	1c5a      	adds	r2, r3, #1
 8018214:	6022      	str	r2, [r4, #0]
 8018216:	701e      	strb	r6, [r3, #0]
 8018218:	6963      	ldr	r3, [r4, #20]
 801821a:	3001      	adds	r0, #1
 801821c:	4283      	cmp	r3, r0
 801821e:	d004      	beq.n	801822a <__swbuf_r+0x62>
 8018220:	89a3      	ldrh	r3, [r4, #12]
 8018222:	07db      	lsls	r3, r3, #31
 8018224:	d506      	bpl.n	8018234 <__swbuf_r+0x6c>
 8018226:	2e0a      	cmp	r6, #10
 8018228:	d104      	bne.n	8018234 <__swbuf_r+0x6c>
 801822a:	4621      	mov	r1, r4
 801822c:	4628      	mov	r0, r5
 801822e:	f7ff fc0b 	bl	8017a48 <_fflush_r>
 8018232:	b988      	cbnz	r0, 8018258 <__swbuf_r+0x90>
 8018234:	4638      	mov	r0, r7
 8018236:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018238:	4b0a      	ldr	r3, [pc, #40]	; (8018264 <__swbuf_r+0x9c>)
 801823a:	429c      	cmp	r4, r3
 801823c:	d101      	bne.n	8018242 <__swbuf_r+0x7a>
 801823e:	68ac      	ldr	r4, [r5, #8]
 8018240:	e7cf      	b.n	80181e2 <__swbuf_r+0x1a>
 8018242:	4b09      	ldr	r3, [pc, #36]	; (8018268 <__swbuf_r+0xa0>)
 8018244:	429c      	cmp	r4, r3
 8018246:	bf08      	it	eq
 8018248:	68ec      	ldreq	r4, [r5, #12]
 801824a:	e7ca      	b.n	80181e2 <__swbuf_r+0x1a>
 801824c:	4621      	mov	r1, r4
 801824e:	4628      	mov	r0, r5
 8018250:	f000 f80c 	bl	801826c <__swsetup_r>
 8018254:	2800      	cmp	r0, #0
 8018256:	d0cb      	beq.n	80181f0 <__swbuf_r+0x28>
 8018258:	f04f 37ff 	mov.w	r7, #4294967295
 801825c:	e7ea      	b.n	8018234 <__swbuf_r+0x6c>
 801825e:	bf00      	nop
 8018260:	0801bfd8 	.word	0x0801bfd8
 8018264:	0801bff8 	.word	0x0801bff8
 8018268:	0801bfb8 	.word	0x0801bfb8

0801826c <__swsetup_r>:
 801826c:	4b32      	ldr	r3, [pc, #200]	; (8018338 <__swsetup_r+0xcc>)
 801826e:	b570      	push	{r4, r5, r6, lr}
 8018270:	681d      	ldr	r5, [r3, #0]
 8018272:	4606      	mov	r6, r0
 8018274:	460c      	mov	r4, r1
 8018276:	b125      	cbz	r5, 8018282 <__swsetup_r+0x16>
 8018278:	69ab      	ldr	r3, [r5, #24]
 801827a:	b913      	cbnz	r3, 8018282 <__swsetup_r+0x16>
 801827c:	4628      	mov	r0, r5
 801827e:	f7ff f889 	bl	8017394 <__sinit>
 8018282:	4b2e      	ldr	r3, [pc, #184]	; (801833c <__swsetup_r+0xd0>)
 8018284:	429c      	cmp	r4, r3
 8018286:	d10f      	bne.n	80182a8 <__swsetup_r+0x3c>
 8018288:	686c      	ldr	r4, [r5, #4]
 801828a:	89a3      	ldrh	r3, [r4, #12]
 801828c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8018290:	0719      	lsls	r1, r3, #28
 8018292:	d42c      	bmi.n	80182ee <__swsetup_r+0x82>
 8018294:	06dd      	lsls	r5, r3, #27
 8018296:	d411      	bmi.n	80182bc <__swsetup_r+0x50>
 8018298:	2309      	movs	r3, #9
 801829a:	6033      	str	r3, [r6, #0]
 801829c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80182a0:	81a3      	strh	r3, [r4, #12]
 80182a2:	f04f 30ff 	mov.w	r0, #4294967295
 80182a6:	e03e      	b.n	8018326 <__swsetup_r+0xba>
 80182a8:	4b25      	ldr	r3, [pc, #148]	; (8018340 <__swsetup_r+0xd4>)
 80182aa:	429c      	cmp	r4, r3
 80182ac:	d101      	bne.n	80182b2 <__swsetup_r+0x46>
 80182ae:	68ac      	ldr	r4, [r5, #8]
 80182b0:	e7eb      	b.n	801828a <__swsetup_r+0x1e>
 80182b2:	4b24      	ldr	r3, [pc, #144]	; (8018344 <__swsetup_r+0xd8>)
 80182b4:	429c      	cmp	r4, r3
 80182b6:	bf08      	it	eq
 80182b8:	68ec      	ldreq	r4, [r5, #12]
 80182ba:	e7e6      	b.n	801828a <__swsetup_r+0x1e>
 80182bc:	0758      	lsls	r0, r3, #29
 80182be:	d512      	bpl.n	80182e6 <__swsetup_r+0x7a>
 80182c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80182c2:	b141      	cbz	r1, 80182d6 <__swsetup_r+0x6a>
 80182c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80182c8:	4299      	cmp	r1, r3
 80182ca:	d002      	beq.n	80182d2 <__swsetup_r+0x66>
 80182cc:	4630      	mov	r0, r6
 80182ce:	f7ff fc2f 	bl	8017b30 <_free_r>
 80182d2:	2300      	movs	r3, #0
 80182d4:	6363      	str	r3, [r4, #52]	; 0x34
 80182d6:	89a3      	ldrh	r3, [r4, #12]
 80182d8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80182dc:	81a3      	strh	r3, [r4, #12]
 80182de:	2300      	movs	r3, #0
 80182e0:	6063      	str	r3, [r4, #4]
 80182e2:	6923      	ldr	r3, [r4, #16]
 80182e4:	6023      	str	r3, [r4, #0]
 80182e6:	89a3      	ldrh	r3, [r4, #12]
 80182e8:	f043 0308 	orr.w	r3, r3, #8
 80182ec:	81a3      	strh	r3, [r4, #12]
 80182ee:	6923      	ldr	r3, [r4, #16]
 80182f0:	b94b      	cbnz	r3, 8018306 <__swsetup_r+0x9a>
 80182f2:	89a3      	ldrh	r3, [r4, #12]
 80182f4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80182f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80182fc:	d003      	beq.n	8018306 <__swsetup_r+0x9a>
 80182fe:	4621      	mov	r1, r4
 8018300:	4630      	mov	r0, r6
 8018302:	f000 f84d 	bl	80183a0 <__smakebuf_r>
 8018306:	89a0      	ldrh	r0, [r4, #12]
 8018308:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801830c:	f010 0301 	ands.w	r3, r0, #1
 8018310:	d00a      	beq.n	8018328 <__swsetup_r+0xbc>
 8018312:	2300      	movs	r3, #0
 8018314:	60a3      	str	r3, [r4, #8]
 8018316:	6963      	ldr	r3, [r4, #20]
 8018318:	425b      	negs	r3, r3
 801831a:	61a3      	str	r3, [r4, #24]
 801831c:	6923      	ldr	r3, [r4, #16]
 801831e:	b943      	cbnz	r3, 8018332 <__swsetup_r+0xc6>
 8018320:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8018324:	d1ba      	bne.n	801829c <__swsetup_r+0x30>
 8018326:	bd70      	pop	{r4, r5, r6, pc}
 8018328:	0781      	lsls	r1, r0, #30
 801832a:	bf58      	it	pl
 801832c:	6963      	ldrpl	r3, [r4, #20]
 801832e:	60a3      	str	r3, [r4, #8]
 8018330:	e7f4      	b.n	801831c <__swsetup_r+0xb0>
 8018332:	2000      	movs	r0, #0
 8018334:	e7f7      	b.n	8018326 <__swsetup_r+0xba>
 8018336:	bf00      	nop
 8018338:	20000034 	.word	0x20000034
 801833c:	0801bfd8 	.word	0x0801bfd8
 8018340:	0801bff8 	.word	0x0801bff8
 8018344:	0801bfb8 	.word	0x0801bfb8

08018348 <abort>:
 8018348:	b508      	push	{r3, lr}
 801834a:	2006      	movs	r0, #6
 801834c:	f000 f890 	bl	8018470 <raise>
 8018350:	2001      	movs	r0, #1
 8018352:	f7e8 fc17 	bl	8000b84 <_exit>

08018356 <__swhatbuf_r>:
 8018356:	b570      	push	{r4, r5, r6, lr}
 8018358:	460e      	mov	r6, r1
 801835a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801835e:	2900      	cmp	r1, #0
 8018360:	b096      	sub	sp, #88	; 0x58
 8018362:	4614      	mov	r4, r2
 8018364:	461d      	mov	r5, r3
 8018366:	da08      	bge.n	801837a <__swhatbuf_r+0x24>
 8018368:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801836c:	2200      	movs	r2, #0
 801836e:	602a      	str	r2, [r5, #0]
 8018370:	061a      	lsls	r2, r3, #24
 8018372:	d410      	bmi.n	8018396 <__swhatbuf_r+0x40>
 8018374:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8018378:	e00e      	b.n	8018398 <__swhatbuf_r+0x42>
 801837a:	466a      	mov	r2, sp
 801837c:	f000 f894 	bl	80184a8 <_fstat_r>
 8018380:	2800      	cmp	r0, #0
 8018382:	dbf1      	blt.n	8018368 <__swhatbuf_r+0x12>
 8018384:	9a01      	ldr	r2, [sp, #4]
 8018386:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801838a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801838e:	425a      	negs	r2, r3
 8018390:	415a      	adcs	r2, r3
 8018392:	602a      	str	r2, [r5, #0]
 8018394:	e7ee      	b.n	8018374 <__swhatbuf_r+0x1e>
 8018396:	2340      	movs	r3, #64	; 0x40
 8018398:	2000      	movs	r0, #0
 801839a:	6023      	str	r3, [r4, #0]
 801839c:	b016      	add	sp, #88	; 0x58
 801839e:	bd70      	pop	{r4, r5, r6, pc}

080183a0 <__smakebuf_r>:
 80183a0:	898b      	ldrh	r3, [r1, #12]
 80183a2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80183a4:	079d      	lsls	r5, r3, #30
 80183a6:	4606      	mov	r6, r0
 80183a8:	460c      	mov	r4, r1
 80183aa:	d507      	bpl.n	80183bc <__smakebuf_r+0x1c>
 80183ac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80183b0:	6023      	str	r3, [r4, #0]
 80183b2:	6123      	str	r3, [r4, #16]
 80183b4:	2301      	movs	r3, #1
 80183b6:	6163      	str	r3, [r4, #20]
 80183b8:	b002      	add	sp, #8
 80183ba:	bd70      	pop	{r4, r5, r6, pc}
 80183bc:	ab01      	add	r3, sp, #4
 80183be:	466a      	mov	r2, sp
 80183c0:	f7ff ffc9 	bl	8018356 <__swhatbuf_r>
 80183c4:	9900      	ldr	r1, [sp, #0]
 80183c6:	4605      	mov	r5, r0
 80183c8:	4630      	mov	r0, r6
 80183ca:	f7ff f8ef 	bl	80175ac <_malloc_r>
 80183ce:	b948      	cbnz	r0, 80183e4 <__smakebuf_r+0x44>
 80183d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80183d4:	059a      	lsls	r2, r3, #22
 80183d6:	d4ef      	bmi.n	80183b8 <__smakebuf_r+0x18>
 80183d8:	f023 0303 	bic.w	r3, r3, #3
 80183dc:	f043 0302 	orr.w	r3, r3, #2
 80183e0:	81a3      	strh	r3, [r4, #12]
 80183e2:	e7e3      	b.n	80183ac <__smakebuf_r+0xc>
 80183e4:	4b0d      	ldr	r3, [pc, #52]	; (801841c <__smakebuf_r+0x7c>)
 80183e6:	62b3      	str	r3, [r6, #40]	; 0x28
 80183e8:	89a3      	ldrh	r3, [r4, #12]
 80183ea:	6020      	str	r0, [r4, #0]
 80183ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80183f0:	81a3      	strh	r3, [r4, #12]
 80183f2:	9b00      	ldr	r3, [sp, #0]
 80183f4:	6163      	str	r3, [r4, #20]
 80183f6:	9b01      	ldr	r3, [sp, #4]
 80183f8:	6120      	str	r0, [r4, #16]
 80183fa:	b15b      	cbz	r3, 8018414 <__smakebuf_r+0x74>
 80183fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018400:	4630      	mov	r0, r6
 8018402:	f000 f863 	bl	80184cc <_isatty_r>
 8018406:	b128      	cbz	r0, 8018414 <__smakebuf_r+0x74>
 8018408:	89a3      	ldrh	r3, [r4, #12]
 801840a:	f023 0303 	bic.w	r3, r3, #3
 801840e:	f043 0301 	orr.w	r3, r3, #1
 8018412:	81a3      	strh	r3, [r4, #12]
 8018414:	89a0      	ldrh	r0, [r4, #12]
 8018416:	4305      	orrs	r5, r0
 8018418:	81a5      	strh	r5, [r4, #12]
 801841a:	e7cd      	b.n	80183b8 <__smakebuf_r+0x18>
 801841c:	0801732d 	.word	0x0801732d

08018420 <_raise_r>:
 8018420:	291f      	cmp	r1, #31
 8018422:	b538      	push	{r3, r4, r5, lr}
 8018424:	4604      	mov	r4, r0
 8018426:	460d      	mov	r5, r1
 8018428:	d904      	bls.n	8018434 <_raise_r+0x14>
 801842a:	2316      	movs	r3, #22
 801842c:	6003      	str	r3, [r0, #0]
 801842e:	f04f 30ff 	mov.w	r0, #4294967295
 8018432:	bd38      	pop	{r3, r4, r5, pc}
 8018434:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8018436:	b112      	cbz	r2, 801843e <_raise_r+0x1e>
 8018438:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801843c:	b94b      	cbnz	r3, 8018452 <_raise_r+0x32>
 801843e:	4620      	mov	r0, r4
 8018440:	f000 f830 	bl	80184a4 <_getpid_r>
 8018444:	462a      	mov	r2, r5
 8018446:	4601      	mov	r1, r0
 8018448:	4620      	mov	r0, r4
 801844a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801844e:	f000 b817 	b.w	8018480 <_kill_r>
 8018452:	2b01      	cmp	r3, #1
 8018454:	d00a      	beq.n	801846c <_raise_r+0x4c>
 8018456:	1c59      	adds	r1, r3, #1
 8018458:	d103      	bne.n	8018462 <_raise_r+0x42>
 801845a:	2316      	movs	r3, #22
 801845c:	6003      	str	r3, [r0, #0]
 801845e:	2001      	movs	r0, #1
 8018460:	e7e7      	b.n	8018432 <_raise_r+0x12>
 8018462:	2400      	movs	r4, #0
 8018464:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8018468:	4628      	mov	r0, r5
 801846a:	4798      	blx	r3
 801846c:	2000      	movs	r0, #0
 801846e:	e7e0      	b.n	8018432 <_raise_r+0x12>

08018470 <raise>:
 8018470:	4b02      	ldr	r3, [pc, #8]	; (801847c <raise+0xc>)
 8018472:	4601      	mov	r1, r0
 8018474:	6818      	ldr	r0, [r3, #0]
 8018476:	f7ff bfd3 	b.w	8018420 <_raise_r>
 801847a:	bf00      	nop
 801847c:	20000034 	.word	0x20000034

08018480 <_kill_r>:
 8018480:	b538      	push	{r3, r4, r5, lr}
 8018482:	4d07      	ldr	r5, [pc, #28]	; (80184a0 <_kill_r+0x20>)
 8018484:	2300      	movs	r3, #0
 8018486:	4604      	mov	r4, r0
 8018488:	4608      	mov	r0, r1
 801848a:	4611      	mov	r1, r2
 801848c:	602b      	str	r3, [r5, #0]
 801848e:	f7e8 fb67 	bl	8000b60 <_kill>
 8018492:	1c43      	adds	r3, r0, #1
 8018494:	d102      	bne.n	801849c <_kill_r+0x1c>
 8018496:	682b      	ldr	r3, [r5, #0]
 8018498:	b103      	cbz	r3, 801849c <_kill_r+0x1c>
 801849a:	6023      	str	r3, [r4, #0]
 801849c:	bd38      	pop	{r3, r4, r5, pc}
 801849e:	bf00      	nop
 80184a0:	20010ad8 	.word	0x20010ad8

080184a4 <_getpid_r>:
 80184a4:	f7e8 bb54 	b.w	8000b50 <_getpid>

080184a8 <_fstat_r>:
 80184a8:	b538      	push	{r3, r4, r5, lr}
 80184aa:	4d07      	ldr	r5, [pc, #28]	; (80184c8 <_fstat_r+0x20>)
 80184ac:	2300      	movs	r3, #0
 80184ae:	4604      	mov	r4, r0
 80184b0:	4608      	mov	r0, r1
 80184b2:	4611      	mov	r1, r2
 80184b4:	602b      	str	r3, [r5, #0]
 80184b6:	f7e8 fbb4 	bl	8000c22 <_fstat>
 80184ba:	1c43      	adds	r3, r0, #1
 80184bc:	d102      	bne.n	80184c4 <_fstat_r+0x1c>
 80184be:	682b      	ldr	r3, [r5, #0]
 80184c0:	b103      	cbz	r3, 80184c4 <_fstat_r+0x1c>
 80184c2:	6023      	str	r3, [r4, #0]
 80184c4:	bd38      	pop	{r3, r4, r5, pc}
 80184c6:	bf00      	nop
 80184c8:	20010ad8 	.word	0x20010ad8

080184cc <_isatty_r>:
 80184cc:	b538      	push	{r3, r4, r5, lr}
 80184ce:	4d06      	ldr	r5, [pc, #24]	; (80184e8 <_isatty_r+0x1c>)
 80184d0:	2300      	movs	r3, #0
 80184d2:	4604      	mov	r4, r0
 80184d4:	4608      	mov	r0, r1
 80184d6:	602b      	str	r3, [r5, #0]
 80184d8:	f7e8 fbb3 	bl	8000c42 <_isatty>
 80184dc:	1c43      	adds	r3, r0, #1
 80184de:	d102      	bne.n	80184e6 <_isatty_r+0x1a>
 80184e0:	682b      	ldr	r3, [r5, #0]
 80184e2:	b103      	cbz	r3, 80184e6 <_isatty_r+0x1a>
 80184e4:	6023      	str	r3, [r4, #0]
 80184e6:	bd38      	pop	{r3, r4, r5, pc}
 80184e8:	20010ad8 	.word	0x20010ad8

080184ec <_init>:
 80184ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80184ee:	bf00      	nop
 80184f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80184f2:	bc08      	pop	{r3}
 80184f4:	469e      	mov	lr, r3
 80184f6:	4770      	bx	lr

080184f8 <_fini>:
 80184f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80184fa:	bf00      	nop
 80184fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80184fe:	bc08      	pop	{r3}
 8018500:	469e      	mov	lr, r3
 8018502:	4770      	bx	lr
